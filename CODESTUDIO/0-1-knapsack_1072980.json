{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9670,
            "title": "0 - 1 Knapsack ",
            "titleSlug": "0-1-knapsack_1072980",
            "content": "<h4 id=\"a-thief-is-robbing-a-store-and-can-carry-a-maximum-weight-of-w-into-his-knapsack-there-are-n-items-available-in-the-store-and-the-weight-and-value-of-each-item-is-known-to-the-thief-considering-the-constraints-of-the-maximum-weight-that-a-knapsack-can-carry-you-have-to-find-the-maximum-profit-that-a-thief-can-generate-by-stealing-items\">A thief is robbing a store and can carry a maximum weight of \u2018W\u2019 into his knapsack. There are &#39;N&#39; items available in the store and the weight and value of each item is known to the thief. Considering the constraints of the maximum weight that a knapsack can carry, you have to find the maximum profit that a thief can generate by stealing items.</h4>\n\n<h4 id=\"note-the-thief-is-not-allowed-to-break-the-items\">Note: The thief is not allowed to break the items.</h4>\n\n<h4 id=\"for-example-n-4-w-10-and-the-weights-and-values-of-items-are-weights-6-1-5-3-and-values-3-6-1-4-then-the-best-way-to-fill-the-knapsack-is-to-choose-items-with-weight-6-1-and-3-the-total-value-of-knapsack-3-6-4-13\">For example, N = 4, W = 10 and the weights and values of items are weights = [6, 1, 5, 3] and values = [3, 6, 1, 4]. Then the best way to fill the knapsack is to choose items with weight 6, 1 and  3. The total value of knapsack = 3 + 6 + 4 = 13.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer &#39;T&#39; representing the number of test cases.      \nThe &#39;T&#39; test cases are as follows:\n\nThe first line contains two integers &#39;N&#39; and &#39;W&#39;, denoting the number of items and the maximum weight the thief can carry, respectively. \nThe second line contains &#39;N&#39; space-separated integers, that denote the values of the weight of items. \nThe third line contains &#39;N&#39; space-separated integers, that denote the values associated with the items. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The first and only line of output contains the maximum profit that a thief can generate, as described in the task. \nThe output of every test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^3\n1 &lt;= W &lt;= 10^3\n1&lt;= weights &lt;=10^3\n1 &lt;= values &lt;= 10^3\n\n\nwhere &#39;T&#39; is the number of test cases, \u2018N\u2019 is the number of items, &quot;weights&quot; is the weight of each item, &quot;values&quot; is the value of each item and \u2018W\u2019 is the maximum weight the thief can carry. \n</code></pre>\n<h5 id=\"sample-input\">Sample Input:</h5>\n\n<pre><code>1 \n4 5\n1 2 4 5\n5 4 8 6\n</code></pre>\n\n<h5 id=\"sample-output\">Sample Output:</h5>\n\n<pre><code>13\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample output 1</h5>\n\n<pre><code>The most optimal way to fill the knapsack is to choose items with weight 4 and value 8, weight 1 and value 5.\n\nThe total value of the knapsack =  8 + 5 = 13.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n5 100\n20 24 36 40 42\n12 35 41 25 32\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>101\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 85,
            "dislikes": "NA",
            "rephrased": {
                "body": "A thief is robbing a store with a knapsack that can hold a maximum weight of 'W'. The store contains 'N' items, each with a known weight and value.  The thief cannot break items. Determine the maximum profit the thief can generate by selecting items to steal, respecting the knapsack's weight limit.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^3",
                    "1 <= W <= 10^3",
                    "1 <= weights <= 10^3",
                    "1 <= values <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "4 5\n1 2 4 5\n5 4 8 6",
                        "output": "13",
                        "explanation": "The optimal way to maximize profit within the knapsack's weight limit is to select the item with weight 4 and value 8, and the item with weight 1 and value 5. This yields a total value of 8 + 5 = 13."
                    },
                    {
                        "input": "5 100\n20 24 36 40 42\n12 35 41 25 32",
                        "output": "101",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you do this recursively? Try to solve the problem by solving its subproblems first.</p>",
            "<p>Can you optimise the previous approach? Try to memoize the subproblems.&nbsp;</p>",
            "<p>Initially, we were breaking the large problem into small problems but now, let us look at it in a different way. Can you solve the small problem first and then reach the final answer? Try to use the bottom-up approach now.&nbsp;</p>",
            "<p>Initially, we were solving the problem in a bottom-up manner using a 2-D array. Can you solve this problem using a linear array?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}