{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8936,
            "title": "0 1 Knapsack",
            "titleSlug": "0-1-knapsack_920542",
            "content": "<h4 id=\"a-thief-is-robbing-a-store-and-can-carry-a-maximal-weight-of-w-into-his-knapsack-there-are-n-items-and-the-ith-item-weighs-wi-and-is-of-value-vi-considering-the-constraints-of-the-maximum-weight-that-a-knapsack-can-carry-you-have-to-find-and-return-the-maximum-value-that-a-thief-can-generate-by-stealing-items\">A thief is robbing a store and can carry a maximal weight of W into his knapsack. There are N items and the ith item weighs wi and is of value vi. Considering the constraints of the maximum weight that a knapsack can carry, you have to find and return the maximum value that a thief can generate by stealing items.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer T representing the number of test cases.      \nThe T-test cases are as follows:\n\nLine 1:The first line contains an integer, that denotes the value of N. \nLine 2:The following line contains N space-separated integers, that denote the values of the weight of items. \nLine 3:The following line contains N space-separated integers, that denote the values associated with the items. \nLine 4:The following line contains an integer that denotes the value of W. W denotes the maximum weight that a thief can carry.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The first and only line of output contains the maximum value that a thief can generate, as described in the task. \nThe output of every test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^2\n1&lt;= wi &lt;= 50\n1 &lt;= vi &lt;= 10^2\n1 &lt;= W &lt;= 10^3\n\nTime Limit: 1 second\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can we solve this using space complexity of not more than O(W)?\n</code></pre>\n<h5 id=\"sample-input\">Sample Input:</h5>\n\n<pre><code>1 \n4\n1 2 4 5\n5 4 8 6\n5\n</code></pre>\n\n<h5 id=\"sample-output\">Sample Output:</h5>\n\n<pre><code>13\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 365,
            "dislikes": "NA",
            "rephrased": {
                "body": "A thief is attempting to maximize the value of items stolen from a store. The thief has a knapsack with a maximum weight capacity, W. There are N items available, each with a specific weight (wi) and value (vi). Determine the maximum total value the thief can obtain without exceeding the knapsack's weight limit.",
                "constraints": [
                    "1 <= N <= 100",
                    "1 <= wi <= 50",
                    "1 <= vi <= 100",
                    "1 <= W <= 1000"
                ],
                "testcases": [
                    {
                        "input": "n = 4, weight = [1, 2, 4, 5], value = [5, 4, 8, 6], maxWeight = 5",
                        "output": "13",
                        "explanation": "The thief can take item 1 (weight 1, value 5) and item 3 (weight 4, value 8) for a total weight of 5 and a total value of 13. Taking item 1 and 2 yields 9. Taking item 2 and 3 yields 12. Taking items 4 and 1 yields 11. No other combination yields a higher value within the weight limit."
                    },
                    {
                        "input": "n = 3, weight = [10, 20, 30], value = [60, 100, 120], maxWeight = 50",
                        "output": "220",
                        "explanation": "The thief can take item 1 (weight 10, value 60) and item 2 (weight 20, value 100) and item 3 (weight 30, value 120) is not possible. The maximum possible value is obtained by taking item 2 and item 1, and it is 160. The maximum value obtained by taking item 2 and item 3 exceeds maxWeight of 50. The best combination is item 2 (weight=20, value=100) + item 1 (weight=10, value=60) = 160. Taking items 2 (weight=20, value=100) and 3 is more value but exceeds the max weight, therefore we check item 2,1. Next we consider 1,3 which also exceeds max weight. We then consider the best individual item, which is only item 3, if no combination is available. If W=60, the correct output is 280, which is item 2 + item 3 and item 1. In this case, W is 50."
                    },
                    {
                        "input": "n = 3, weight = [1, 1, 1], value = [10, 20, 30], maxWeight = 2",
                        "output": "50",
                        "explanation": "The thief can take item 3 (value 30) and item 2 (value 20), because weights are 1 each and we can select at most two items (1+1 <= 2) which leads to value of 50. Picking item 1 and 2 leads to 30 only, which is suboptimal. Picking items 1 and 3 leads to 40, which is suboptimal. Therefore the right selection is items 3 and 2."
                    },
                    {
                        "input": "n = 1, weight = [5], value = [10], maxWeight = 3",
                        "output": "0",
                        "explanation": "The only item available has a weight of 5, which exceeds the knapsack's weight limit of 3. Therefore, the thief can take nothing, resulting in a total value of 0."
                    },
                    {
                        "input": "n = 2, weight = [1, 2], value = [100, 10], maxWeight = 1",
                        "output": "100",
                        "explanation": "The thief can only take the first item since the second item (weight=2) exceeds the knapsack max weight. The value obtained in that case is 100."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you proceed if already some items are filled?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "\r\n#include <vector>\r\n\r\nint knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) \r\n{\r\n    vector<vector<int>> dp(2, vector<int>(maxWeight + 1, 0));\r\n\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        for (int j = 1; j <= maxWeight; ++j) \r\n        {\r\n            if (weight[i] <= j) \r\n            {\r\n                dp[i % 2][j] = max(value[i] + dp[(1 + i) % 2][j - weight[i]], dp[(i + 1) % 2][j]);\r\n            } \r\n            else \r\n            {\r\n                dp[i % 2][j] = dp[(i + 1) % 2][j];\r\n            }\r\n        }\r\n    }\r\n\r\n    return dp[(n + 1) % 2][maxWeight];\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "\r\npublic class Solution\r\n{\r\n    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {\r\n\r\n        int[][] dp = new int[2][maxWeight + 1];\r\n\r\n\r\n\t\tfor (int i = 0; i < n; i++) \r\n\t\t{\r\n    \r\n\t\t\tfor (int j = 1; j <= maxWeight; ++j)\r\n\t\t\t{\r\n    \r\n\t\t\t\tif (weight[i] <= j) \r\n\t\t\t\t{\r\n                    dp[i % 2][j] = Math.max(value[i] + dp[(1 + i) % 2][j - weight[i]], dp[(i + 1) % 2][j]);\r\n\t\t\t\t} \r\n\t\t\t\telse \r\n\t\t\t\t{\r\n                    dp[i % 2][j] = dp[(i + 1) % 2][j];\r\n                }\r\n            }\r\n        }\r\n    \r\n        return dp[(n + 1) % 2][maxWeight];\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\r\n#include <vector>\r\n\r\nint knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) \r\n{\r\n    vector<vector<int>> dp(2, vector<int>(maxWeight + 1, 0));\r\n\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        for (int j = 1; j <= maxWeight; ++j) \r\n        {\r\n            if (weight[i] <= j) \r\n            {\r\n                dp[i % 2][j] = max(value[i] + dp[(1 + i) % 2][j - weight[i]], dp[(i + 1) % 2][j]);\r\n            } \r\n            else \r\n            {\r\n                dp[i % 2][j] = dp[(i + 1) % 2][j];\r\n            }\r\n        }\r\n    }\r\n\r\n    return dp[(n + 1) % 2][maxWeight];\r\n}",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}