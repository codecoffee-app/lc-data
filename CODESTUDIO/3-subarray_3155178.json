{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16453,
            "title": "3 Subarray",
            "titleSlug": "3-subarray_3155178",
            "content": "<h4 id=\"there-were-n-candies-placed-one-after-another-ith-of-which-has-a-sweetness-value-of-a-i\">There were \u2018N\u2019 candies placed one after another, ith of which has a sweetness value of \u2018A[i]\u2019.</h4>\n\n<h4 id=\"in-one-operation-you-can-take-exactly-k-continuous-candies-and-once-any-candy-is-taken-it-can-not-be-used-again-once-any-segment-is-removed-that-segment-remains-empty\">In one operation, you can take exactly \u2018K\u2019 continuous candies, and once any candy is taken, it can not be used again. Once any segment is removed, that segment remains empty.</h4>\n\n<h4 id=\"for-example-if-initially-the-array-was-2-1-5-6-7-and-you-take-candies-from-index-1-to-2-the-array-becomes-2-_-_-6-7-note-that-after-removing-the-candies-in-the-middle-the-candies-present-in-left-and-right-do-not-join-and-thus-can-not-be-called-continuous-segments\">For example, If initially the array was [2, 1, 5, 6, 7] and you take candies from index 1 to 2. The array becomes [2, _ , _ , 6, 7]. Note that after removing the candies in the middle, the candies present in left and right do not join and thus can not be called continuous segments.</h4>\n\n<h4 id=\"you-are-allowed-to-do-3-such-operations-and-you-want-to-maximise-the-total-sweetness-value-of-all-the-candies-you-have\">You are allowed to do 3 such operations, and you want to maximise the total sweetness value of all the candies you have.</h4>\n\n<h4 id=\"print-the-starting-indexes-0-based-of-all-the-3-intervals-you-are-going-to-select-to-maximise-the-overall-sweetness-of-your-candies-if-there-are-multiple-answers-print-the-lexicographically-smallest-one\">Print the starting indexes(0 based) of all the 3 intervals you are going to select to maximise the overall sweetness of your candies. If there are multiple answers, print the lexicographically smallest one.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases.\n\nThe first line of each test case contains two spaced integers \u2018N\u2019 and \u2018K\u2019, denoting the number of candies and the integer \u2018K\u2019.\n\nThe following line contains an array \u2018A\u2019 of \u2018N\u2019 spaced integers denoting the sweetness value of each candy.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print three single-spaced integers in a new line denoting the starting indexes(0 based) of all the 3 intervals.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 2 * 10^4\n1 &lt;= A[i] &lt;= 2^16\n1 &lt;= K &lt;= floor(N / 3) \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n7 2\n1 2 7 6 2 5 1\n3 1\n8 9 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0 2 4\n0 1 2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>In the first test case, you can select subarrays with indexes [0, 1], [2, 3] and [4, 5] to have the maximum sum. \nIn the second test case, you can only select [0], [1] and [2].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n8 2\n1 2 6 7 2 6 5 1\n3 1\n2 2 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 3 5 \n0 1 2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'A' of 'N' candies, where each candy has a sweetness value A[i]. You can perform three operations. In each operation, you can take a continuous segment of 'K' candies. Once a candy is taken, it cannot be used again and the removed segment remains empty. The segments that are removed do not allow the candies before or after them to be continuous. The goal is to maximize the total sweetness value of all the candies you take.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 2 * 10^4",
                    "1 <= A[i] <= 2^16",
                    "1 <= K <= floor(N / 3)"
                ],
                "testcases": [
                    {
                        "input": "7 2\n1 2 7 6 2 5 1",
                        "output": "0 2 4",
                        "explanation": "Selecting subarrays with indexes [0, 1], [2, 3] and [4, 5] yields the maximum sum."
                    },
                    {
                        "input": "3 1\n8 9 1",
                        "output": "0 1 2",
                        "explanation": "Select [0], [1] and [2]."
                    },
                    {
                        "input": "8 2\n1 2 6 7 2 6 5 1",
                        "output": "1 3 5",
                        "explanation": null
                    },
                    {
                        "input": "3 1\n2 2 2",
                        "output": "0 1 2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we check all possible ways?</p>",
            "<p>Can we fix the middle subarray?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Ad-Hoc",
                "slug": "ad-hoc"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}