{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8559,
            "title": ".",
            "titleSlug": "_893049",
            "content": "<h4 id=\"you-have-been-given-a-binary-search-tree-of-integers-with-n-nodes-you-are-also-given-key-which-represents-data-of-a-node-of-this-tree\">You have been given a binary search tree of integers with <strong><em>\u2018N\u2019</em></strong> nodes. You are also given <strong><em>&#39;KEY&#39;</em></strong> which represents data of a node of this tree.</h4>\n\n<p><br></p>\n\n<h4 id=\"your-task-is-to-return-the-predecessor-and-successor-of-the-given-node-in-the-bst\">Your task is to return the predecessor and successor of the given node in the BST.</h4>\n\n<p><Br></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The predecessor of a node in BST is that node that will be visited just before the given node in the inorder traversal of the tree. If the given node is visited first in the inorder traversal, then its predecessor is NULL.\n\n2. The successor of a node in BST is that node that will be visited immediately after the given node in the inorder traversal of the tree. If the given node is visited last in the inorder traversal, then its successor is NULL.\n\n3. The node for which the predecessor and successor will not always be present. If not present, you can hypothetically assume it&#39;s position (Given that it is a BST) and accordingly find out the predecessor and successor.\n\n4. A binary search tree (BST) is a binary tree data structure which has the following properties.\n     \u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n     \u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n     \u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<p><Br></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains the elements of the tree in the level order form separated by a single space. If any node does not have a left or right child, take -1 in its place. Refer to the example for further clarification.\n\nThe second line contains &#39;KEY&#39; representing the data of the node for which the predecessor and successor are to be found.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. \n\nThe second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The only line contains two single space-separated integers representing data values of the predecessor and the successor node, respectively. If any of the two doesn\u2019t exist, print -1 in place of it.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>15 10 20 8 12 16 25 -1 -1 -1 -1 -1 -1 -1 -1\n10\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>8 12\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample output 1:</h5>\n\n<pre><code>The tree can be represented as follows:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-14-5921.png\" alt=\"Example\"></p>\n\n<pre><code>The inorder traversal of this tree will be 8 10 12 15 16 20 25.\n\nSince the node with data 8 is on the immediate left of the node with data 10 in the inorder traversal, the node with data 8 is the predecessor.\n\nSince the node with data 12 is on the immediate right of the node with data 10 in the inorder traversal, the node with data 12 is the successor.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>10 5 -1 -1 -1\n5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>-1 10\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^4\n1 &lt;= data &lt;= 10^7\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 134,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary search tree (BST) of integers with 'N' nodes and a 'KEY' representing the data of a node within the tree, find and return the predecessor and successor of the node with the given 'KEY' in the BST. The predecessor is the node that would be visited immediately before the node with 'KEY' during an inorder traversal, and the successor is the node that would be visited immediately after. If either the predecessor or successor does not exist, return -1 in its place.",
                "constraints": [
                    "1 <= N <= 10^4",
                    "1 <= data <= 10^7",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "root=[15,10,20,8,12,16,25,-1,-1,-1,-1,-1,-1,-1,-1], key=10",
                        "output": "8 12",
                        "explanation": "The inorder traversal of the tree is 8 10 12 15 16 20 25. The predecessor of 10 is 8, and the successor of 10 is 12."
                    },
                    {
                        "input": "root=[10,5,-1,-1,-1], key=5",
                        "output": "-1 10",
                        "explanation": "The inorder traversal of the tree is 5 10. The predecessor of 5 does not exist (it's the first element), and the successor of 5 is 10."
                    },
                    {
                        "input": "root=[20,10,30,5,15,-1,35,3,7,12,17,-1,-1,-1,-1,-1,-1,-1,-1,-1], key=15",
                        "output": "12 16",
                        "explanation": "The inorder traversal is 3 5 7 10 12 15 17 20 30 35.  Predecessor of 15 is 12, and successor is 17(Closest node to 16)."
                    },
                    {
                        "input": "root=[5,3,6,2,4,-1,-1,1,-1,-1,-1,-1,-1], key = 3",
                        "output": "2 4",
                        "explanation": "The inorder traversal is 1 2 3 4 5 6. Predecessor of 3 is 2 and successor is 4."
                    },
                    {
                        "input": "root=[1,-1,2,-1,-1,-1,3], key=2",
                        "output": "1 3",
                        "explanation": "Inorder Traversal: 1 2 3. The predecessor of 2 is 1 and the successor is 3."
                    },
                    {
                        "input": "root=[1,2,-1,3,-1,-1,-1], key=1",
                        "output": "2 -1",
                        "explanation": "Inorder Traversal: 3 2 1. The predecessor of 1 is 2 and the successor is doesn't exist (or -1)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Store the nodes in the order of inorder traversal.</p>",
            "<p>Try to use BST property to find the predecessor and successor.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space Complexity : O(1)\r\n\r\n    where N is the number of nodes in the BST.\r\n*/\r\n\r\npair<int, int> predecessorSuccessor(TreeNode *root, int key)\r\n{\r\n    int predecessor = -1;\r\n    int successor = -1;\r\n\r\n    // Initializing temporary node with head.\r\n    TreeNode *temp = root;\r\n\r\n    // Traversing in tree.\r\n    while (temp != NULL)\r\n    {\r\n        if (key > temp->data)\r\n        {\r\n            // Updating predecessor.\r\n            predecessor = temp->data;\r\n            temp = temp->right;\r\n        }\r\n        else\r\n        {\r\n            temp = temp->left;\r\n        }\r\n    }\r\n\r\n    temp = root;\r\n\r\n    // Traversing in tree.\r\n    while (temp != NULL)\r\n    {\r\n        if (key >= temp->data)\r\n        {\r\n            temp = temp->right;\r\n        }\r\n        else\r\n        {\r\n            // Updating successor.\r\n            successor = temp->data;\r\n            temp = temp->left;\r\n        }\r\n    }\r\n\r\n    return make_pair(predecessor, successor);\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space Complexity : O(1)\r\n\r\n    where 'N' is the number of nodes in the BST.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class Solution {\r\n    public static List<Integer> predecessorSuccessor(TreeNode root, int key) {\r\n        int predecessor = -1;\r\n        int successor = -1;\r\n\r\n        // Initializing temporary node with head.\r\n        TreeNode temp = root;\r\n\r\n        // Traversing in tree.\r\n        while (temp != null)\r\n        {\r\n            if (key > temp.data)\r\n            {\r\n                // Updating predecessor.\r\n                predecessor = temp.data;\r\n                temp = temp.right;\r\n            }\r\n            else\r\n            {\r\n                temp = temp.left;\r\n            }\r\n        }\r\n\r\n        temp = root;\r\n\r\n        // Traversing in tree.\r\n        while (temp != null)\r\n        {\r\n            if (key >= temp.data)\r\n            {\r\n                temp = temp.right;\r\n            }\r\n            else\r\n            {\r\n                // Updating successor.\r\n                successor = temp.data;\r\n                temp = temp.left;\r\n            }\r\n        }\r\n\r\n        List< Integer > sol = new ArrayList <> ();\r\n        sol.add(predecessor);\r\n        sol.add(successor);\r\n        return sol;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "def predecessorSuccessor(root, key):\r\n    predecessor = -1\r\n    successor = -1\r\n\r\n    # Initializing temporary node with the root.\r\n    temp = root\r\n\r\n    # Traversing the tree.\r\n    while temp:\r\n        if key > temp.data:\r\n            # Updating predecessor.\r\n            predecessor = temp.data\r\n            temp = temp.right\r\n        else:\r\n            temp = temp.left\r\n\r\n    temp = root\r\n\r\n    # Traversing the tree.\r\n    while temp:\r\n        if key >= temp.data:\r\n            temp = temp.right\r\n        else:\r\n            # Updating successor.\r\n            successor = temp.data\r\n            temp = temp.left\r\n\r\n    return predecessor, successor",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}