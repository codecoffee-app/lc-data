{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10496,
            "title": "abc",
            "titleSlug": "abc_1229513",
            "content": "<h4 id=\"you-are-given-a-stack-s-your-task-is-to-sort-the-sack-recursively\">You are given a stack \u2018S\u2019. Your task is to sort the sack recursively.</h4>\n\n<p><br></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Looping through the stack is not allowed.\nYou need to return a stack that is sorted in descending order.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Given stack S = 1 3 2 \nThe output will be 3 2 1 since it is the sorted order.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe second line of each test case contains a single integer \u2018N\u2019, denoting the stack size.\nThe next line contains \u2018N\u2019 space-separated integers denoting the elements of the stack, the last element of the input being the top of the stack.\n\nIf the input is 1 3 2 then the input stack will look like this :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/autodraw-3_17_2021-8367.png\" alt=\"\"></p>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the stack in descending sorted order.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4\n1 0 0 2 \n3 \n2 4 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2 1 0 0\n4 4 2\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h5>\n\n<pre><code>For the first test case:\nFor the given stack, the resultant sorted stack would be 0 0 1 2.  \n\nFor the second test case:\nFor the given stack, the resulting sorted stack would be 2 2 4.   \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4\n1 2 3 4     \n3    \n5 1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4 3 2 1 \n5 2 1\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;=  N &lt;= 2000\n0 &lt;= S[i] &lt;= 1000\n\nWhere \u2018T\u2019 is the total number of test cases, and &#39;N\u2019 is the size of the stack, and &#39;S[i]&#39; is the element of the stack.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 26,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a stack 'S', sort it recursively such that the largest element is at the top. You are not allowed to use loops. The stack should be sorted in descending order.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 2000",
                    "0 <= S[i] <= 1000",
                    "Where \u2018T\u2019 is the total number of test cases, and 'N\u2019 is the size of the stack, and 'S[i]' is the element of the stack."
                ],
                "testcases": [
                    {
                        "input": "4\n1 0 0 2",
                        "output": "2 1 0 0",
                        "explanation": "The given stack [1, 0, 0, 2] is sorted to [2, 1, 0, 0]."
                    },
                    {
                        "input": "3\n2 4 2",
                        "output": "4 2 2",
                        "explanation": "The given stack [2, 4, 2] is sorted to [4, 2, 2]."
                    },
                    {
                        "input": "4\n1 2 3 4",
                        "output": "4 3 2 1",
                        "explanation": null
                    },
                    {
                        "input": "3\n5 1 2",
                        "output": "5 2 1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use recursion?&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}