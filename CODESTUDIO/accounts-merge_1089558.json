{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9744,
            "title": "Accounts Merge",
            "titleSlug": "accounts-merge_1089558",
            "content": "<h4 id=\"you-have-been-given-an-array-list-accounts-where-each-element-i-e-accounts-i-contains-a-list-of-strings\">You have been given an array/list <em><strong>&#39;accounts&#39;</strong></em> where each element, i.e. &#39;accounts&#39;[i] contains a list of strings.</h4>\n\n<p><br></p>\n\n<h4 id=\"in-accounts-i-the-first-element-is-the-name-of-the-account-holder-and-the-rest-of-the-strings-are-emails-representing-the-emails-of-the-account\">In &#39;accounts&#39;[i], the first element is the name of the account holder, and the rest of the strings are emails representing the emails of the account.</h4>\n\n<p><br></p>\n\n<h4 id=\"now-you-are-supposed-to-merge-the-accounts-two-accounts-definitely-belong-to-the-same-person-if-there-is-some-email-that-is-common-to-both-accounts-note-that-it-may-be-possible-that-two-accounts-belong-to-the-same-name-but-they-may-belong-to-different-people-as-people-could-have-the-same-name\">Now, you are supposed to merge the accounts. Two accounts definitely belong to the same person if there is some email that is common to both accounts. Note that it may be possible that two accounts belong to the same name, but they may belong to different people, as people could have the same name.</h4>\n\n<p><br></p>\n\n<h4 id=\"a-person-could-have-any-number-of-accounts-initially-but-all-their-accounts-definitely-have-the-same-name\">A person could have any number of accounts initially, but all their accounts definitely have the same name.</h4>\n\n<p><br></p>\n\n<h4 id=\"after-merging-the-accounts-you-have-to-return-an-array-list-of-merged-accounts-where-each-account-the-first-element-is-the-persons-name-and-the-rest-elements-are-the-email-addresses-in-sorted-order-non-decreasing-accounts-themselves-can-be-in-any-order\">After merging the accounts, you have to return an array/list of merged accounts where each account, the first element is the person&#39;s name, and the rest elements are the email addresses in sorted order (non-decreasing). Accounts themselves can be in any order.</h4>\n\n<p><br></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code> Input:  &#39;n&#39; = 4,\n &#39;accounts&#39; = [\n    [&quot;Rohan&quot;, &quot;rohan123@gmail.com&quot;, &quot;1279ro@gmail.com&quot;],\n    [&quot;Rohit&quot;, &quot;rohit101@yahoo.com&quot;, &quot;hitman30487@gmail.com&quot;],\n    [&quot;Rohan&quot;, &quot;1279ro@gmail.com&quot;,  &quot;niemann01@gmail.com&quot;],\n    [&quot;Rohan&quot;, &quot;kaushik@outlook.com&quot;],\n ]\n Output: [\n    [&quot;Rohan&quot;, &quot;rohan123@gmail.com&quot;, &quot;1279ro@gmail.com&quot;, &quot;niemann01@gmail.com&quot;],\n    [&quot;Rohit&quot;, &quot;rohit101@yahoo.com&quot;, &quot;hitman30487@gmail.com&quot;],\n    [&quot;Rohan&quot;, &quot;kaushik@outlook.com&quot;],\n ]\n\n Explanation: The first and third &quot;Rohan&quot; are the same person as they have a shared email address, \u201c1279ro@gmail.com\u201d. The rest of the accounts are of different persons, as they don\u2019t share any shared email addresses. So, we merge the first and third accounts.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first input line contains an integer \u2018n\u2019 denoting the number of accounts.\n\nEach of the next \u2018n\u2019 lines contains the length of &#39;accounts[i]&#39; followed by space-separated strings where the first string denotes the account holder\u2019s name, and the rest of the strings represent the email addresses.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>In the first line, print the number of accounts after merging. \n\nPrint the space-separated name and email address associated with each account, each in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>4\n3 Rahul rahul1@gmail.com rahul2@gmail.com \n2 Amit amit1@gmail.com\n2 Ankur ankur9773@yahoo.com\n3 Rahul rahul1@gmail.com rahul1998@yahoo.com\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>3\nAmit amit1@gmail.com \nAnkur ankur9773@gmail.com \nRahul rahul1998@yahoo.com rahul1@gmail.com rahul2@gmail.com \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1  :</h5>\n\n<pre><code>The first and fourth &quot;Rahul&quot; are the same person as they have a shared email address, \u201crahul1@gmail.com\u201d. The rest of the accounts are of different persons, as they don\u2019t share any shared email addresses. So, we merge the first and fourth accounts.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2 Atul atul@mail.com\n2 Atul atul1@mail.com\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>2\nAtul atul1@mail.com \nAtul atul@mail.com \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h5>\n\n<pre><code>The first and second Atul are two different people since they don\u2019t have any common email addresses.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 5000\n1 &lt;= |&#39;accounts&#39;[i]| &lt;= 10\n1 &lt;= |&#39;accounts&#39;[i][j]| &lt;= 30\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 13,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of accounts, where each account consists of a name and a list of email addresses, merge the accounts that belong to the same person. Two accounts belong to the same person if they share at least one email address. The merged account should have the person's name as the first element and the email addresses in sorted order (non-decreasing) as the rest of the elements. Return a list of the merged accounts.",
                "constraints": [
                    "1 <= 'n' <= 5000",
                    "1 <= |'accounts'[i]| <= 10",
                    "1 <= |'accounts'[i][j]| <= 30"
                ],
                "testcases": [
                    {
                        "input": "accounts = [[\"Rohan\", \"rohan123@gmail.com\", \"1279ro@gmail.com\"],[\"Rohit\", \"rohit101@yahoo.com\", \"hitman30487@gmail.com\"],[\"Rohan\", \"1279ro@gmail.com\",  \"niemann01@gmail.com\"],[\"Rohan\", \"kaushik@outlook.com\"]]",
                        "output": "[[\"Rohan\", \"1279ro@gmail.com\", \"kaushik@outlook.com\", \"niemann01@gmail.com\", \"rohan123@gmail.com\"], [\"Rohit\", \"hitman30487@gmail.com\", \"rohit101@yahoo.com\"]] ",
                        "explanation": "The first and third accounts for \"Rohan\" are merged because they share the email address \"1279ro@gmail.com\". The resulting account has all email addresses sorted alphabetically. The other accounts don't share any email addresses and are therefore returned as is. Note the order of elements in output is not important but the contents and sorting of email addresses should be the same"
                    },
                    {
                        "input": "accounts = [[\"Rahul\", \"rahul1@gmail.com\", \"rahul2@gmail.com\"],[\"Amit\", \"amit1@gmail.com\"],[\"Ankur\", \"ankur9773@yahoo.com\"],[\"Rahul\", \"rahul1@gmail.com\", \"rahul1998@yahoo.com\"]]",
                        "output": "[[\"Amit\", \"amit1@gmail.com\"], [\"Ankur\", \"ankur9773@yahoo.com\"], [\"Rahul\", \"rahul1@gmail.com\", \"rahul1998@yahoo.com\", \"rahul2@gmail.com\"]] ",
                        "explanation": "The first and fourth accounts for \"Rahul\" are merged as they share \"rahul1@gmail.com\". The other accounts are unique."
                    },
                    {
                        "input": "accounts = [[\"Atul\", \"atul@mail.com\"],[\"Atul\", \"atul1@mail.com\"]]",
                        "output": "[[\"Atul\", \"atul@mail.com\"], [\"Atul\", \"atul1@mail.com\"]] ",
                        "explanation": "The two accounts for \"Atul\" are distinct as they do not share email addresses."
                    },
                    {
                        "input": "accounts = [[\"John\", \"johnsmith@mail.com\", \"john00@mail.com\"], [\"John\", \"johnnybravo@mail.com\"], [\"John\", \"johnsmith@mail.com\", \"john_newyork@mail.com\"], [\"Mary\", \"mary@mail.com\"]]",
                        "output": "[[\"John\", \"john00@mail.com\", \"john_newyork@mail.com\", \"johnsmith@mail.com\"], [\"John\", \"johnnybravo@mail.com\"], [\"Mary\", \"mary@mail.com\"]] ",
                        "explanation": "The first and third John accounts are merged as they share johnsmith@mail.com. The second John account is separate. The Mary account is separate."
                    },
                    {
                        "input": "accounts = [[\"Gabe\", \"Gabe0@m.co\", \"Gabe3@m.co\", \"Gabe1@m.co\"], [\"Kevin\", \"Kevin36@m.co\", \"Kevin0@m.co\", \"Kevin54@m.co\"], [\"Gabe\", \"Gabe5@m.co\", \"Gabe6@m.co\", \"Gabe4@m.co\"], [\"Kevin\", \"Kevin5@m.co\", \"Kevin2@m.co\", \"Kevin60@m.co\"], [\"Gabe\", \"Gabe0@m.co\"], [\"Kevin\", \"Kevin9@m.co\", \"Kevin3@m.co\", \"Kevin7@m.co\"], [\"Gabe\", \"Gabe6@m.co\"]]",
                        "output": "[[\"Gabe\", \"Gabe0@m.co\", \"Gabe1@m.co\", \"Gabe3@m.co\", \"Gabe4@m.co\", \"Gabe5@m.co\", \"Gabe6@m.co\"], [\"Kevin\", \"Kevin0@m.co\", \"Kevin2@m.co\", \"Kevin3@m.co\", \"Kevin36@m.co\", \"Kevin5@m.co\", \"Kevin54@m.co\", \"Kevin60@m.co\", \"Kevin7@m.co\", \"Kevin9@m.co\"]] ",
                        "explanation": "The Gabe accounts share email adresses, and so do the Kevin accounts. Sort the email addresses of each merged account."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of converting this problem into a graph problem?</p>",
            "<p>Can you think of using the disjoint set union of this task?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}