{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8951,
            "title": "Add One to Linked List",
            "titleSlug": "add-one-to-linked-list_920557",
            "content": "<h4 id=\"youre-given-a-positive-integer-represented-in-the-form-of-a-singly-linked-list-of-digits-the-length-of-the-number-is-n\">You&#39;re given a positive integer represented in the form of a singly linked-list of digits. The length of the number is <em><strong>&#39;n&#39;</strong></em>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"add-1-to-the-number-i-e-increment-the-given-number-by-one\">Add 1 to the number, i.e., increment the given number by one.</h4>\n\n<p><br/></p>\n\n<h4 id=\"the-digits-are-stored-such-that-the-most-significant-digit-is-at-the-head-of-the-linked-list-and-the-least-significant-digit-is-at-the-tail-of-the-linked-list\">The digits are stored such that the most significant digit is at the head of the linked list and the least significant digit is at the tail of the linked list.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: Initial Linked List: 1 -&gt; 5 -&gt; 2\n\nOutput: Modified Linked List: 1 -&gt; 5 -&gt; 3\n\nExplanation: Initially the number is 152. After incrementing it by 1, the number becomes 153.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;n&#39;, the length of the number / the length of the linked list.\nThe second line contains &#39;n&#39; space separated integers denoting the digits of the number / the nodes of the linked list.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print space - separated integers denoting the nodes of the output linked list.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. You&#39;re given the head of the linked list, return the head of the modified list.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n1 5 2\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 5 3\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>Initially the number is 152. After incrementing it by 1, the number becomes 153.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n9 9\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 0 0\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>Initially the number is 9. After incrementing it by 1, the number becomes 100. Please note that there were 2 nodes in the initial linked list, but there are three nodes in the sum linked list.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity :</h5>\n\n<pre><code>The expected time complexity is O(&#39;n&#39;).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;=  10^5\n0 &lt;= Node in linked list &lt;= 9\n\nThere are no leading zeroes in the number.\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 120,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a singly linked list where each node represents a digit of a positive integer. The most significant digit is at the head of the list. Your task is to add 1 to the number represented by the linked list and return the head of the modified list.",
                "constraints": [
                    "1 <= 'n' <= 10^5, where 'n' is the length of the linked list.",
                    "0 <= Value of each node <= 9",
                    "The number represented by the linked list has no leading zeros."
                ],
                "testcases": [
                    {
                        "input": "3\n1 5 2",
                        "output": "1 5 3",
                        "explanation": "The initial number is 152. Adding 1 results in 153."
                    },
                    {
                        "input": "2\n9 9",
                        "output": "1 0 0",
                        "explanation": "The initial number is 99. Adding 1 results in 100.  The linked list grows from 2 to 3 nodes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to reach the last node of the linked list using recursion.</p>",
            "<p>Think of reversing the given linked list and then add 1 to the first node of the reversed list.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(n)\r\n    Space complexity: O(1)\r\n\r\n    Where 'n' is the length of the number we're given in the form of linked list.\r\n*/\r\n\r\n/**\r\n * Definition of linked list:\r\n *\r\n * class Node {\r\n * public:\r\n *      int data;\r\n *      Node *next;\r\n *      Node() {\r\n *          this->data = 0;\r\n *          this->next = NULL;\r\n *      }\r\n *      Node(int data) {\r\n *          this->data = data;\r\n *          this->next = NULL;\r\n *      }\r\n *      Node (int data, Node *next) {\r\n *          this->data = data;\r\n *          this->next = next;\r\n *      }\r\n * };\r\n *\r\n *************************************************************************/\r\n\r\nNode *reverse(Node *head)\r\n{\r\n    // If the list is empty or has just one node, return head.\r\n    if (head == NULL || head->next == NULL)\r\n    {\r\n        return head;\r\n    }\r\n\r\n    // Pointer to the previous node of the current node.\r\n    Node *prev = NULL;\r\n\r\n    // Pointer to the current node.\r\n    Node *curr = head;\r\n\r\n    while (curr != NULL)\r\n    {\r\n\r\n        // Pointer to the next node of the current node.\r\n        Node *ahead = curr->next;\r\n\r\n        // Inverting the links\r\n        curr->next = prev;\r\n        prev = curr;\r\n        curr = ahead;\r\n    }\r\n\r\n    return prev;\r\n}\r\n\r\nNode *addOne(Node *head)\r\n{\r\n    // Reverse the list.\r\n    head = reverse(head);\r\n\r\n    Node *temp = head;\r\n\r\n    // Initialize a variable to store carry.\r\n    int carry = 1;\r\n\r\n    // Initialize a pointer to store previous node.\r\n    Node *prev = head;\r\n\r\n    // Adding 1 to the reversed linked list\r\n    while (head != NULL)\r\n    {\r\n        int sum = carry + head->data;\r\n        carry = sum / 10;\r\n        sum = sum % 10;\r\n        head->data = sum;\r\n        prev = head;\r\n        head = head->next;\r\n    }\r\n\r\n    // If there is carry after processing all nodes, add a new node at the end of the linked list.\r\n    if (carry != 0)\r\n    {\r\n\r\n        Node *newNode = new Node(0);\r\n        newNode->data = carry;\r\n\r\n        // Appending the newNode at the end of the resultant list.\r\n        if (prev != NULL)\r\n        {\r\n            prev->next = newNode;\r\n        }\r\n\r\n        else\r\n        {\r\n            // If the resultant list is empty\r\n            return newNode;\r\n        }\r\n    }\r\n\r\n    // Reverse the resultant list.\r\n    Node *ans = reverse(temp);\r\n\r\n    return ans;\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "class Node:\r\n    def __init__(self, data=0, next=None):\r\n        self.data = data\r\n        self.next = next\r\n\r\n\r\n\"\"\"\r\n    Time Complexity: O(n)\r\n    Space complexity: O(1)\r\n    \r\n    Where n are the number of nodes in the list.\r\n\r\n\"\"\"\r\n\r\n\r\ndef reverse(head: Node) -> Node:\r\n\r\n    # If the list is empty or has just one node, return\r\n    if head == None or head.next == None:\r\n        return head\r\n\r\n    # Points to the previous node of the current node\r\n    prev = None\r\n\r\n    # Points to the current node\r\n    curr = head\r\n\r\n    while curr != None:\r\n\r\n        # Points to the next node of the current node\r\n        ahead = curr.next\r\n\r\n        # Inverting the links\r\n        curr.next = prev\r\n        prev = curr\r\n        curr = ahead\r\n\r\n    return prev\r\n\r\n\r\ndef addOne(head: Node) -> Node:\r\n\r\n    # Removing leading zeros\r\n    while head != None and head.data == 0:\r\n        head = head.next\r\n\r\n    head = reverse(head)\r\n    temp = head\r\n    carry = 1\r\n    prev = head\r\n\r\n    # Adding 1 to the reversed linked list\r\n    while head != None:\r\n        sum = carry + head.data\r\n        carry = sum // 10\r\n        sum = sum % 10\r\n        head.data = sum\r\n        prev = head\r\n        head = head.next\r\n\r\n    # If there is carry after processing all nodes, then we need to add a new node at the end of the linked list\r\n    if carry != 0:\r\n\r\n        newNode = Node(0)\r\n        newNode.data = carry\r\n\r\n        # appending the carry at the end of the resultant list\r\n        if prev != None:\r\n            prev.next = newNode\r\n\r\n        else:\r\n            # If the resultant list is empty\r\n            return newNode\r\n\r\n    # Reversing the resultant list\r\n    ans = reverse(temp)\r\n    return ans\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "class Node:\r\n    def __init__(self, data=0, next=None):\r\n        self.data = data\r\n        self.next = next\r\n\r\n\r\n\"\"\"\r\n    Time Complexity: O(n)\r\n    Space complexity: O(1)\r\n    \r\n    Where n are the number of nodes in the list.\r\n\r\n\"\"\"\r\n\r\n\r\ndef reverse(head: Node) -> Node:\r\n\r\n    # If the list is empty or has just one node, return\r\n    if head == None or head.next == None:\r\n        return head\r\n\r\n    # Points to the previous node of the current node\r\n    prev = None\r\n\r\n    # Points to the current node\r\n    curr = head\r\n\r\n    while curr != None:\r\n\r\n        # Points to the next node of the current node\r\n        ahead = curr.next\r\n\r\n        # Inverting the links\r\n        curr.next = prev\r\n        prev = curr\r\n        curr = ahead\r\n\r\n    return prev\r\n\r\n\r\ndef addOne(head: Node) -> Node:\r\n\r\n    # Removing leading zeros\r\n    while head != None and head.data == 0:\r\n        head = head.next\r\n\r\n    head = reverse(head)\r\n    temp = head\r\n    carry = 1\r\n    prev = head\r\n\r\n    # Adding 1 to the reversed linked list\r\n    while head != None:\r\n        sum = carry + head.data\r\n        carry = sum // 10\r\n        sum = sum % 10\r\n        head.data = sum\r\n        prev = head\r\n        head = head.next\r\n\r\n    # If there is carry after processing all nodes, then we need to add a new node at the end of the linked list\r\n    if carry != 0:\r\n\r\n        newNode = Node(0)\r\n        newNode.data = carry\r\n\r\n        # appending the carry at the end of the resultant list\r\n        if prev != None:\r\n            prev.next = newNode\r\n\r\n        else:\r\n            # If the resultant list is empty\r\n            return newNode\r\n\r\n    # Reversing the resultant list\r\n    ans = reverse(temp)\r\n    return ans\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}