{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8017,
            "title": "Add two linked lists",
            "titleSlug": "add-two-linked-lists_799487",
            "content": "<h4 id=\"you-have-been-given-two-singly-linked-lists-where-each-of-them-represents-a-positive-number-without-any-leading-zeros\">You have been given two singly Linked Lists, where each of them represents a positive number without any leading zeros.</h4>\n\n<h4 id=\"your-task-is-to-add-these-two-numbers-and-print-the-summation-in-the-form-of-a-linked-list\">Your task is to add these two numbers and print the summation in the form of a linked list.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>If the first linked list is 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL and the second linked list is 4 -&gt; 5 -&gt; NULL.\n\nThe two numbers represented by these two lists are 12345 and 45, respectively. So, adding these two numbers gives 12390. \n\nSo, the linked list representation of this number is 1 -&gt; 2 -&gt; 3 -&gt; 9 -&gt; 0 -&gt; NULL.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases. \n\nThe first line of each test case contains the elements of the first linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n\nThe second line of each test case contains the elements of the second linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, return the head of linked list after summation. The elements of the linked list must be terminated by -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow-Up:</h5>\n\n<pre><code>Try to solve this problem in linear time complexity and constant space complexity.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= L &lt;= 5000\n0 &lt;= data &lt;= 9 and data != -1\n\nWhere &#39;L&#39; is the number of nodes in either of the two Linked List and &#39;data&#39; is the element value in a node of the linked list.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1 1 -1\n9 9 9 -1\n2 4 -1\n5 3 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 0 1 0 -1\n7 7 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h5>\n\n<pre><code>In test case 1, we are adding 11 and 999 to get 1010.\n\nIn test case 2, we are adding 24 and 53 to get 77.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 8 1 2 9 -1\n9 8 2 9 -1\n1 9 0 -1\n8 1 0 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4 7 9 5 8 -1\n1 0 0 0 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h5>\n\n<pre><code>In test case 1, we are adding 38129 and 9829 to get 47958.\n\nIn test case 2, we are adding 190 and 810 to get 1000.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 240,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given two singly linked lists, each representing a positive number without leading zeros. Your task is to add these two numbers and return the sum as a new linked list.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= L <= 5000 (Number of nodes in either linked list)",
                    "0 <= data <= 9 and data != -1 (Value of each node)",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 1 -1\n9 9 9 -1",
                        "output": "1 0 1 0 -1",
                        "explanation": "Adding 11 and 999 results in 1010. The linked list representation is 1 -> 0 -> 1 -> 0 -> NULL, or 1 0 1 0 -1 in the required format."
                    },
                    {
                        "input": "2 4 -1\n5 3 -1",
                        "output": "7 7 -1",
                        "explanation": "Adding 24 and 53 results in 77. The linked list representation is 7 -> 7 -> NULL, or 7 7 -1 in the required format."
                    },
                    {
                        "input": "3 8 1 2 9 -1\n9 8 2 9 -1",
                        "output": "4 7 9 5 8 -1",
                        "explanation": "Adding 38129 and 9829 results in 47958. The linked list representation is 4 -> 7 -> 9 -> 5 -> 8 -> NULL, or 4 7 9 5 8 -1."
                    },
                    {
                        "input": "1 9 0 -1\n8 1 0 -1",
                        "output": "1 0 0 0 -1",
                        "explanation": "Adding 190 and 810 results in 1000. The linked list representation is 1 -> 0 -> 0 -> 0 -> NULL, or 1 0 0 0 -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try using the old-school method of adding two numbers.</p>",
            "<p>Can you do the task without using any extra space? Try to use one of the given linked lists to store the answer.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N + M)\n    Space Complexity: O(1)\n\n    where 'N' and 'M' are the number of nodes in both lists respectively.\n*/\n\n// Function to count the number of nodes in the list.\nint countDigits(Node<int> *head) {\n    int c = 0;\n    while (head) {\n        head = head->next;\n        c++;\n    }\n    return c;\n}\n\n// Function to reverse the list.\nNode<int> *reverseList(Node<int> *head) {\n    Node<int> *prev = NULL, *curr = head, *nextNode;\n    while (curr != NULL) {\n        nextNode = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = nextNode;\n    }\n    return prev;\n}\n\nNode<int> *addTwoLists(Node<int> *first, Node<int> *second) {\n    // Reverse both lists for simplicity.\n    first = reverseList(first);\n    second = reverseList(second);\n\n    // Assign list with more digits to first list.\n    if (countDigits(first) < countDigits(second)) {\n        Node<int> *temp = first;\n        first = second;\n        second = temp;\n    }\n\n    int carry = 0;\n    Node<int> *head = first;\n\n    // Iterate and add the nodes till second list doesn't reach end.\n    while (second != NULL) {\n        first->data += second->data + carry;\n        carry = first->data / 10;\n        first->data %= 10;\n\n        // If the list ends but a carry remains.\n        if (first->next == NULL && carry) {\n            Node<int> *newNode = new Node<int>(carry);\n            first->next = newNode;\n            first = first->next;\n            carry = 0;\n            break;\n        }\n        first = first->next;\n        second = second->next;\n    }\n\n    // If there are more digits left to process in first list.\n    while (first != NULL) {\n        first->data += carry;\n        carry = first->data / 10;\n        first->data %= 10;\n        // If the list ends but a carry remains.\n        if (first->next == NULL && carry) {\n            Node<int> *newNode = new Node<int>(carry);\n            first->next = newNode;\n            break;\n        }\n        first = first->next;\n    }\n\n    // Reverse the list to get the final number.\n    head = reverseList(head);\n\n    // Return the answer list obtained after adding two lists.\n    return head;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "''' \n    Time Complexity: O(N + M)\n    Space Complexity: O(1)\n\n    Where 'N' and 'M' are the number of nodes in both lists respectively.\n'''\n\nfrom sys import stdin, setrecursionlimit\nsetrecursionlimit(10**7)\n\n# List Node Class.\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n# Function to count the number of nodes in the list.\ndef countDigits(head):\n    c = 0\n    while (head):\n        head = head.next\n        c += 1\n\n    return c\n\n# Function to reverse the list.\ndef reverseList(head):\n    prev, curr = None, head\n    nextNode = None\n\n    while(curr != None):\n        nextNode = curr.next\n        curr.next = prev\n        prev = curr\n        curr = nextNode\n\n    return prev\n\ndef addTwoLists(first, second):\n    # Reverse both lists for simplicity.\n    first = reverseList(first)\n    second = reverseList(second)\n\n    # Assign list with more digits to first list.\n    if (countDigits(first) < countDigits(second)):\n        first, second = second, first\n\n    carry = 0\n    head = first\n\n    # Iterate and add the nodes till second list does not reach end.\n    while (second != None):\n        first.data += second.data + carry\n        carry = first.data // 10\n        first.data %= 10\n\n        # If the list ends but a carry remains.\n        if (first.next == None and carry):\n            newNode = Node(carry)\n            first.next = newNode\n\n            first = first.next\n            carry = 0\n            break\n\n        first = first.next\n        second = second.next\n\n    # If there are more digits left to process in first list.\n    while (first != None):\n        first.data += carry\n        carry = first.data // 10\n        first.data %= 10\n\n        # If the list ends but a carry remains.\n        if (first.next == None and carry):\n            newNode = Node(carry)\n            first.next = newNode\n            break\n\n        first = first.next\n\n    # Reverse the list to get the final number.\n    head = reverseList(head)\n\n    # Return the answer list obtained after adding two lists.\n    return head\n\n# Taking input.\ndef takeInput():\n\n    firstList = None\n    secondList = None\n\n    arr = list(map(int, stdin.readline().strip().split(\" \")))\n    if(arr[0] != -1):\n\n        firstList = Node(arr[0])\n        last = firstList\n        for data in arr[1:]:\n\n            if(data == -1):\n                break\n\n            last.next = Node(data)\n            last = last.next\n\n    arr = list(map(int, stdin.readline().strip().split(\" \")))\n    if(arr[0] != -1):\n\n        secondList = Node(arr[0])\n        last = secondList\n        for data in arr[1:]:\n\n            if(data == -1):\n                break\n\n            last.next = Node(data)\n            last = last.next\n\n        return firstList, secondList\n\n# Function to print the node values of the list.\ndef printLinkedList(head):\n\n    while head:\n        print(head.data, end=' ')\n        head = head.next\n\n    print(-1)\n\n# Main.\nT = int(stdin.readline().strip())\nfor i in range(T):\n    first, second = takeInput()\n    answerList = addTwoLists(first, second)\n    printLinkedList(answerList)",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N + M)\n    Space Complexity: O(1)\n\n    where 'N' and 'M' are the number of nodes in both lists respectively.\n*/\n\npublic class Solution {\n\tpublic static ListNode<Integer> addTwoLists(ListNode<Integer> first, ListNode<Integer> second) {\n\t\t// Reverse both lists for simplicity.\n\t\tfirst = reverseList(first);\n\t\tsecond = reverseList(second);\n\n\t\t// Assign list with more digits to first list.\n\t\tif (countDigits(first) < countDigits(second)) {\n\t\t\tListNode<Integer> temp = first;\n\t\t\tfirst = second;\n\t\t\tsecond = temp;\n\t\t}\n\n\t\tint carry = 0;\n\t\tListNode<Integer> head = first;\n\n\t\t// Iterate and add the nodes till second list doesn't reach end.\n\t\twhile (second != null) {\n\t\t\tfirst.data += second.data + carry;\n\t\t\tcarry = first.data / 10;\n\t\t\tfirst.data %= 10;\n\n\t\t\t// If the list ends but a carry remains.\n\t\t\tif (first.next == null && carry > 0) {\n\t\t\t\tListNode<Integer> newNode = new ListNode<Integer>(carry);\n\t\t\t\tfirst.next = newNode;\n\t\t\t\tfirst = first.next;\n\t\t\t\tcarry = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfirst = first.next;\n\t\t\tsecond = second.next;\n\t\t}\n\n\t\t// If there are more digits left to process in first list.\n\t\twhile (first != null) {\n\t\t\tfirst.data += carry;\n\t\t\tcarry = first.data / 10;\n\t\t\tfirst.data %= 10;\n\n\t\t\t// If the list ends but a carry remains.\n\t\t\tif (first.next == null && carry > 0) {\n\t\t\t\tListNode<Integer> newNode = new ListNode<Integer>(carry);\n\t\t\t\tfirst.next = newNode;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfirst = first.next;\n\t\t}\n\n\t\t// Reverse the list to get the final number.\n\t\thead = reverseList(head);\n\n\t\t// Return the answer list obtained after adding two lists.\n\t\treturn head;\n\t}\n\n\t// Function to reverse the list.\n\tpublic static ListNode<Integer> reverseList(ListNode<Integer> head) {\n\t\tListNode<Integer> prev = null, curr = head, nextNode;\n\t\twhile (curr != null) {\n\t\t\tnextNode = curr.next;\n\t\t\tcurr.next = prev;\n\t\t\tprev = curr;\n\t\t\tcurr = nextNode;\n\t\t}\n\t\treturn prev;\n\t}\n\n\t// Function to count the number of nodes in the list.\n\tpublic static int countDigits(ListNode<Integer> head) {\n\t\tint c = 0;\n\t\twhile (head != null) {\n\t\t\thead = head.next;\n\t\t\tc++;\n\t\t}\n\t\treturn c;\n\t}\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}