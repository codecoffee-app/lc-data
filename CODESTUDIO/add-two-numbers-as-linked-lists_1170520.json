{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10157,
            "title": "Add Two Numbers As Linked Lists",
            "titleSlug": "add-two-numbers-as-linked-lists_1170520",
            "content": "<h4 id=\"you-are-given-two-non-negative-numbers-num1-and-num2-represented-in-the-form-of-linked-lists\">You are given two non-negative numbers <em><strong>&#39;num1&#39;</strong></em> and <em><strong>&#39;num2&#39;</strong></em> represented in the form of linked lists.</h4>\n\n<p><br/></p>\n\n<h4 id=\"the-digits-in-the-linked-lists-are-stored-in-reverse-order-i-e-starting-from-least-significant-digit-lsd-to-the-most-significant-digit-msd-and-each-of-their-nodes-contains-a-single-digit\">The digits in the linked lists are stored in reverse order, i.e. starting from least significant digit (LSD) to the most significant digit (MSD), and each of their nodes contains a single digit.</h4>\n\n<p><br/></p>\n\n<h4 id=\"calculate-the-sum-of-the-two-numbers-and-return-the-head-of-the-sum-list\">Calculate the sum of the two numbers and return the head of the sum list.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Input:\n&#39;num1&#39; : 1 -&gt; 2 -&gt; 3 -&gt; NULL\n&#39;num2&#39; : 4 -&gt; 5 -&gt; 6 -&gt; NULL\n\nOutput: 5 -&gt; 7 -&gt; 9 -&gt; NULL\n\nExplanation: &#39;num1&#39; represents the number 321 and &#39;num2&#39; represents 654. Their sum is 975.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer &#39;m&#39;, the number of elements in &#39;num1&#39;.\nThe second line contains &#39;m&#39; integers, the elements of the first singly linked list / digits of &#39;num1&#39;.\nThe third line contains a single integer &#39;n&#39;, the number of elements in &#39;num2&#39;.\nThe fourth line contains &#39;n&#39; integers, the elements of the second singly linked list / digits of &#39;num2&#39;.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return the sum linked list.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function. \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3\n1 2 3\n3\n4 5 6\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>5 7 9\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>&#39;num1&#39; represents the number 321 and &#39;num2&#39; represents 654. Their sum is 975.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n0 1\n1\n0\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0 1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2 :</h5>\n\n<pre><code>&#39;num1&#39; represents 10 and &#39;num2&#39; represents 0. Their sum is 10.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-3\">Sample Input 3 :</h5>\n\n<pre><code>1\n2\n2\n9 9\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-3\">Sample Output 3 :</h5>\n\n<pre><code>1 0 1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-3\">Explanation for Sample Input 3 :</h5>\n\n<pre><code>&#39;num1&#39; represents 2 and &#39;num2&#39; represents 99. Their sum is 101.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity :</h5>\n\n<pre><code>The expected time complexity is O(&#39;m&#39; + &#39;n&#39;).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;m&#39;, &#39;n&#39; &lt;= 5 * 10^4\n0 &lt;= &#39;data&#39; in any Linked List node &lt;= 9\n\nThe numbers do not contain any leading zeros.\nIf the number is zero, then there is one node having &#39;data&#39; = 0.\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 180,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given two non-negative numbers, `num1` and `num2`, represented as linked lists. Each linked list stores the digits of the number in reverse order (least significant digit to most significant digit), with each node containing a single digit. Your task is to calculate the sum of the two numbers represented by the linked lists and return the head of the linked list representing the sum.",
                "constraints": [
                    "1 <= `m`, `n` <= 5 * 10^4, where `m` and `n` are the number of nodes in `num1` and `num2` respectively.",
                    "0 <= `data` in any Linked List node <= 9",
                    "The numbers do not contain any leading zeros.",
                    "If the number is zero, then there is one node having `data` = 0.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\n1 2 3\n3\n4 5 6",
                        "output": "5 7 9",
                        "explanation": "`num1` represents the number 321, and `num2` represents 654. Their sum is 975, which is represented by the linked list 5 -> 7 -> 9 -> NULL."
                    },
                    {
                        "input": "2\n0 1\n1\n0",
                        "output": "0 1",
                        "explanation": "`num1` represents 10, and `num2` represents 0. Their sum is 10, which is represented by the linked list 0 -> 1 -> NULL."
                    },
                    {
                        "input": "1\n2\n2\n9 9",
                        "output": "1 0 1",
                        "explanation": "`num1` represents 2, and `num2` represents 99. Their sum is 101, which is represented by the linked list 1 -> 0 -> 1 -> NULL."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you perform the addition by recursively traversing through the lists?</p>",
            "<p>Try adding the two linked lists iteratively.</p>",
            "<p>Can we store the result in one of the given lists?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O('m' + 'n')\n    Space Complexity: O(1)\n\n    Where 'm' and 'n' are the lengths of the linked lists.\n*/\n\n/**\n * Definition of linked list:\n *\n * class Node {\n * public:\n *      int data;\n *      Node *next;\n *      Node() {\n *          this->data = 0;\n *          this->next = NULL;\n *      }\n *      Node(int data) {\n *          this->data = data;\n *          this->next = NULL;\n *      }\n *      Node (int data, Node *next) {\n *          this->data = data;\n *          this->next = next;\n *      }\n * };\n *\n *************************************************************************/\n\nNode *addTwoNumbers(Node *num1, Node *num2)\n{\n    // 'node1' and 'node2' point to the current node of the first and second list, respectively.\n    Node *node1 = num1;\n    Node *node2 = num2;\n\n    // 'sum' and 'carry' store the sum and carry generated in the current iteration.\n    int sum = 0, carry = 0;\n\n    Node *prev = NULL;\n\n    while (node1 != NULL && node2 != NULL)\n    {\n        // Add the values in the current nodes along with the carry.\n        sum = node1->data + node2->data + carry;\n\n        // Store the next node of the sum list in the current node of the first linked list.\n        node1->data = sum % 10;\n\n        // Get the new carry.\n        carry = sum / 10;\n\n        // Keep track of the previous node.\n        prev = node1;\n\n        // Move to the next node\n        node1 = node1->next;\n        node2 = node2->next;\n    }\n\n    // If there are remaining digits in any one of the lists, add them to the sum list.\n    if (node1 != NULL || node2 != NULL)\n    {\n        if (node2 != NULL)\n        {\n            prev->next = node2;\n        }\n\n        node1 = prev->next;\n\n        while (node1 != NULL)\n        {\n            // Add the values in the current node along with the carry.\n            sum = node1->data + carry;\n\n            // Store the next node of the sum list in the current node of the first linked list.\n            node1->data = sum % 10;\n\n            // Get the new carry.\n            carry = sum / 10;\n\n            // Keep track of the previous node.\n            prev = node1;\n\n            // Move to the next node\n            node1 = node1->next;\n        }\n    }\n\n    if (carry > 0)\n    {\n        // Carry is generated from the last iteration. So, add a new node to the sum list.\n        prev->next = new Node(carry);\n    }\n\n    // Return the head of the sum list.\n    return num1;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "class Node:\r\n    def __init__(self, data=0, next=None):\r\n        self.data = data\r\n        self.next = next\r\n\r\n'''\r\n    Time Complexity: O('m' + 'n')\r\n    Space Complexity: O(1)\r\n\r\n    Where 'm' and 'n' are the lengths of the linked lists.\r\n'''\r\n\r\ndef addTwoNumbers(head1: Node, head2: Node) -> Node:\r\n    # 'NODE1' and 'NODE2' point to the current node of the first and second list, respectively.\r\n    node1 = head1\r\n    node2 = head2\r\n\r\n    prev = None\r\n\r\n    # 'SUM' and 'CARRY' store the sum and carry generated in the current iteration.\r\n    sum = carry = 0\r\n\r\n    while(node1 != None and node2 != None):\r\n        # Add the values in the current nodes along with the carry.\r\n        sum = node1.data + node2.data + carry\r\n\r\n        # Store the next node of the sum list in the current node of the first linked list.\r\n        node1.data = sum % 10\r\n\r\n        # Get the new carry.\r\n        carry = sum // 10\r\n\r\n        # Keep track of the previous node.\r\n        prev = node1\r\n\r\n        # Move to the next node\r\n        node1 = node1.next\r\n        node2 = node2.next\r\n\r\n    # If there are remaining digits in any one of the lists, add them to the sum list.\r\n    if(node1 != None or node2 != None):\r\n        if (node2 != None):\r\n            prev.next = node2\r\n\r\n        node1 = prev.next\r\n\r\n        while(node1 != None):\r\n            # Add the values in the current node along with the carry.\r\n            sum = node1.data + carry\r\n\r\n            # Store the next node of the sum list in the current node of the first linked list.\r\n            node1.data = sum % 10\r\n\r\n            # Get the new carry.\r\n            carry = sum // 10\r\n\r\n            # Keep track of the previous node.\r\n            prev = node1\r\n\r\n            # Move to the next node\r\n            node1 = node1.next\r\n\r\n    if(carry > 0):\r\n        # Carry is generated from the last iteration. So, add a new node.\r\n        prev.next = Node(carry)\r\n\r\n    # Return the head of the sum list.\r\n    return head1",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity - O(M + N)\r\n    Space Complexity - O(1)\r\n\r\n    Where 'M' and 'N' are the number of nodes in the two linked lists.\r\n*/\r\n\r\n\r\npublic class Solution{\r\n\r\n    static LinkedListNode addTwoNumbers(LinkedListNode head1, LinkedListNode head2)\r\n    {\r\n        // 'NODE1' and 'NODE2' point to the current node of the first and second list, respectively.\r\n        LinkedListNode node1 = head1;\r\n        LinkedListNode node2 = head2;\r\n\r\n        // 'SUM' and 'CARRY' store the sum and carry generated in the current iteration.\r\n        int sum = 0, carry = 0;\r\n\r\n        LinkedListNode prev = new LinkedListNode(-1);\r\n\r\n        while (node1 != null && node2 != null)\r\n        {\r\n            // Add the values in the current nodes along with the carry.\r\n            sum = node1.data + node2.data + carry;\r\n\r\n            // Store the next node of the sum list in the current node of the first linked list.\r\n            node1.data = sum % 10;\r\n\r\n            // Get the new carry.\r\n            carry = sum / 10;\r\n\r\n            // Keep track of the previous node.\r\n            prev = node1;\r\n\r\n            // Move to the next node\r\n            node1 = node1.next;\r\n            node2 = node2.next;\r\n        }\r\n\r\n        // If there are remaining digits in any one of the lists, add them to the sum list.\r\n        if (node1 != null || node2 != null)\r\n        {\r\n            if (node2 != null)\r\n            {\r\n                prev.next = node2;\r\n            }\r\n\r\n            node1 = prev.next;\r\n\r\n            while (node1 != null)\r\n            {\r\n                // Add the values in the current node along with the carry.\r\n                sum = node1.data + carry;\r\n\r\n                // Store the next node of the sum list in the current node of the first linked list.\r\n                node1.data = sum % 10;\r\n\r\n                // Get the new carry.\r\n                carry = sum / 10;\r\n\r\n                // Keep track of the previous node.\r\n                prev = node1;\r\n\r\n                // Move to the next node\r\n                node1 = node1.next;\r\n            }\r\n        }\r\n\r\n        if (carry > 0)\r\n        {\r\n            // Carry is generated from the last iteration. So, add a new node to the sum list.\r\n            prev.next = new LinkedListNode(carry);\r\n        }\r\n\r\n        return head1;\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}