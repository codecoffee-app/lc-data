{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9737,
            "title": "Aggressive Cows",
            "titleSlug": "aggressive-cows_1082559",
            "content": "<h4 id=\"you-are-given-an-array-arr-consisting-of-n-integers-which-denote-the-position-of-a-stall\">You are given an array <strong><em>&#39;arr&#39;</strong></em> consisting of <strong><em>&#39;n&#39;</strong></em> integers which denote the position of a stall.</h4>\n\n<p><br/></p>\n\n<h4 id=\"you-are-also-given-an-integer-k-which-denotes-the-number-of-aggressive-cows\">You are also given an integer <strong><em>&#39;k&#39;</strong></em> which denotes the number of aggressive cows.</h4>\n\n<p><br/></p>\n\n<h4 id=\"you-are-given-the-task-of-assigning-stalls-to-k-cows-such-that-the-minimum-distance-between-any-two-of-them-is-the-maximum-possible\">You are given the task of assigning stalls to &#39;k&#39; cows such that the minimum distance between any two of them is the maximum possible.</h4>\n\n<p><br/></p>\n\n<h4 id=\"print-the-maximum-possible-minimum-distance\">Print the maximum possible minimum distance.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: &#39;n&#39; = 3, &#39;k&#39; = 2 and &#39;arr&#39; = {1, 2, 3}\n\nOutput: 2\n\nExplanation: The maximum possible minimum distance will be 2 when 2 cows are placed at positions {1, 3}. Here distance between cows is 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains two integers \u2018n\u2019 and \u2018k\u2019 denoting the number of elements in the array and the number of aggressive cows.\n\nThe second line contains \u2018n\u2019 single space-separated integers denoting the position of the stalls.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Return the largest possible minimum distance between cows.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been handled.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>6 4\n0 3 4 7 10 9\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-to-sample-input-1\">Explanation to Sample Input 1 :</h5>\n\n<pre><code>The maximum possible minimum distance between any two cows will be 3 when 4 cows are placed at positions {0, 3, 7, 10}. Here distance between cows are 3, 4 and 3 respectively.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>5 2\n4 2 1 3 6\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity:</h5>\n\n<pre><code>Can you solve this in O(n * log(n)) time complexity?\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>2 &lt;= &#39;n&#39; &lt;= 10 ^ 5\n2 &lt;= &#39;k&#39; &lt;= n\n0 &lt;= &#39;arr[i]&#39; &lt;= 10 ^ 9\nTime Limit: 1 sec.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 961,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'stalls' representing the positions of stalls and an integer 'k' representing the number of aggressive cows, determine the maximum possible minimum distance between any two cows when assigning stalls to the 'k' cows.  Your task is to find the largest minimum distance such that all 'k' cows can be placed in the stalls.",
                "constraints": [
                    "2 <= 'n' <= 10 ^ 5, where 'n' is the number of stalls.",
                    "2 <= 'k' <= n, where 'k' is the number of aggressive cows.",
                    "0 <= 'stalls[i]' <= 10 ^ 9 for all i."
                ],
                "testcases": [
                    {
                        "input": "stalls=[0, 3, 4, 7, 10, 9], k=4",
                        "output": "3",
                        "explanation": "The maximum possible minimum distance between any two cows will be 3 when 4 cows are placed at positions {0, 3, 7, 10}. Here distance between cows are 3, 4 and 3 respectively."
                    },
                    {
                        "input": "stalls=[4, 2, 1, 3, 6], k=2",
                        "output": "5",
                        "explanation": "The maximum possible minimum distance is 5 when cows are placed at stalls 1 and 6 or 2 and 6 or 4 and 1"
                    },
                    {
                        "input": "stalls=[1, 2, 3], k=2",
                        "output": "2",
                        "explanation": "The maximum possible minimum distance will be 2 when 2 cows are placed at positions {1, 3}. Here distance between cows is 2."
                    },
                    {
                        "input": "stalls=[1, 2, 8, 4, 9], k=3",
                        "output": "3",
                        "explanation": "The stalls can be occupied at indices 1, 4 and 8 giving minimum distance as 3"
                    },
                    {
                        "input": "stalls=[5, 8, 11, 17, 21, 28], k=3",
                        "output": "13",
                        "explanation": "The stalls can be occupied at indices 5, 17 and 28 giving minimum distance as 12 and 11. Taking min of both we get 11. but stalls at 5,8, 21 gives us 13"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Place all the \u2018k\u2019 cows in the \u2018n\u2019 stalls such that the minimum distance between any two of them is as large as possible.</p>",
            "<p>Can you think of using binary search to improvise the solution?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity = O(N * log(N))\r\n    Space Complexity = O(log(N))\r\n    \r\n    Where N is the number of elements in the given array/list.\r\n*/\r\n\r\n//    check if a distance of x is possible b/w each cow\r\nbool check(int x, int k, vector<int> &stalls)\r\n{\r\n    //    Greedy approach, put each cow in the first place you can.\r\n    int cowsPlaced = 1, lastPos = stalls[0];\r\n\r\n    int n = stalls.size();\r\n\t\r\n    // Traverse through the array stalls\r\n    for (int i = 1; i < n; i++)\r\n    {\r\n        if ((stalls[i] - lastPos) >= x)\r\n        {\r\n            cowsPlaced = cowsPlaced + 1;\r\n\r\n            if (cowsPlaced == k)\r\n            {\r\n                return true;\r\n            }\r\n\r\n            //    Assign current position of stall as the lastPos.\r\n            lastPos = stalls[i];\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nint aggressiveCows(vector<int> &stalls, int k)\r\n{\r\n    sort(stalls.begin(), stalls.end());\r\n\r\n    //    binary search\r\n    long long int low = 0, high = 1000000000, mid, pos = 0;\r\n\r\n    while (high >= low)\r\n    {\r\n        mid = (high + low) / 2;\r\n\r\n        if (check(mid, k, stalls))\r\n        {\r\n            low = mid + 1;\r\n            pos = mid;\r\n        }\r\n        else\r\n        {\r\n            high = mid - 1;\r\n        }\r\n    }\r\n\r\n    return pos;\r\n}\r\n\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n   Time Complexity = O(N * log(N))\r\n   Space Complexity = O(log(N))\r\n\r\n   Where N is the number of elements in the given array/list.\r\n*/\r\n\r\nimport java.util.Arrays;\r\n\r\npublic class Solution\r\n{\r\n    //    check if a distance of x is possible b/w each cow\r\n    private static boolean check(int x, int k, int []stalls)\r\n    {\r\n\r\n        //    Greedy approach, put each cow in the first place you can.\r\n        int cowsPlaced = 1, lastPos = stalls[0];\r\n\r\n        int n = stalls.length;\r\n\r\n        // Traverse through the array stalls\r\n        for (int i = 1; i < n; i++)\r\n        {\r\n            if ((stalls[i] - lastPos) >= x)\r\n            {\r\n                cowsPlaced = cowsPlaced + 1;\r\n\r\n                if (cowsPlaced == k)\r\n                {\r\n                    return true;\r\n                }\r\n\r\n                //    Assign current position of stall as the lastPos.\r\n                lastPos = stalls[i];\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public static int aggressiveCows(int []stalls, int k)\r\n    {\r\n\r\n        Arrays.sort(stalls);\r\n\r\n        //    binary search\r\n        int low = 0, high = 1000000000, mid, pos = 0;\r\n\r\n        while (high >= low)\r\n        {\r\n            mid = (high + low) / 2;\r\n\r\n            if (check(mid, k, stalls))\r\n            {\r\n                low = mid + 1;\r\n                pos = mid;\r\n            }\r\n            else\r\n            {\r\n                high = mid - 1;\r\n            }\r\n        }\r\n\r\n        return pos;\r\n    }\r\n} ",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity = O(N * log(N))\r\n    Space Complexity = O(log(N))\r\n    \r\n    Where N is the number of elements in the given array/list.\r\n'''\r\n\r\n#    check if a distance of x is possible b/w each cow\r\ndef check(x, k, stalls):\r\n\r\n    #    Greedy approach, put each cow in the first place you can.\r\n    cowsPlaced = 1 \r\n    lastPos = stalls[0]\r\n\r\n    n = len(stalls)\r\n\r\n    # Traverse through the array stalls\r\n    for i in range(1, n):\r\n    \r\n        if ((stalls[i] - lastPos) >= x):\r\n        \r\n            cowsPlaced = cowsPlaced + 1\r\n\r\n            if (cowsPlaced == k):\r\n                return True\r\n\r\n            #    Assign current position of stall as the lastPos.\r\n            lastPos = stalls[i]\r\n\r\n    return False\r\n\r\ndef aggressiveCows(stalls, k):\r\n\r\n    stalls.sort()\r\n\r\n    #    binary search\r\n    low = 0 \r\n    high = 1000000000\r\n    pos = 0\r\n\r\n    while (high >= low):\r\n\r\n        mid = (high + low) // 2\r\n\r\n        if (check(mid, k, stalls)):\r\n        \r\n            low = mid + 1\r\n            pos = mid\r\n\r\n        else:\r\n\r\n            high = mid - 1\r\n\r\n    return pos\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}