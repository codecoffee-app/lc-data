{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8208,
            "title": "Algorithm to find best insert position in sorted array",
            "titleSlug": "algorithm-to-find-best-insert-position-in-sorted-array_839813",
            "content": "<h4 id=\"you-are-given-a-sorted-array-arr-of-distinct-values-and-a-target-value-m-you-need-to-search-for-the-index-of-the-target-value-in-the-array\">You are given a sorted array <em><strong>&#39;arr&#39;</strong></em> of distinct values and a target value <em><strong>&#39;m&#39;</strong></em>. You need to search for the index of the target value in the array.</h4>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. If the value is present in the array, return its index.\n2. If the value is absent, determine the index where it would be inserted in the array while maintaining the sorted order. \n3. The given array has distinct integers.\n4. The given array may be empty.\n</code></pre>\n\n<p><br/></p>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input:  arr = [1, 2, 4, 7],  m = 6 \n\nOutput: 3\n\nExplanation: If the given array &#39;arr&#39; is: [1, 2, 4, 7] and m = 6. We insert m = 6 in the array and get &#39;arr&#39; as: [1, 2, 4, 6, 7]. The position of 6 is 3 (according to 0-based indexing)\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains two space-separated integers, &#39;n&#39; and &#39;m&#39;, representing the length of the array and the target integer.\n\nThe second line contains &#39;n&#39; space-separated integers, arr[i] representing the given array.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print a single line containing a single integer denoting the position of &#39;m&#39; in the final array on a new line.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to solve the problem in O(log n).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>0 \u2264 n \u2264 10 ^ 5\n1 \u2264 m \u2264 10 ^ 9\n1 \u2264 arr[i] \u2264 10 ^ 9\n\nWhere &#39;arr[i]&#39; is the array element at index &#39;i&#39;.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4 9\n1 2 4 7\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n</code></pre>\n\n<p><br/>  </p>\n\n<h5 id=\"explanation-of-input-1\">Explanation of Input 1:</h5>\n\n<pre><code>The given array &#39;arr&#39; is: [1, 2, 4, 7] and m = 9. We insert m = 9 in the array and get &#39;arr&#39; as: [1, 2, 4, 7, 9]. The position of 9 is 4 (according to 0-based indexing).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3 1\n2 5 7\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>0\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-input-2\">Explanation of Input 2:</h5>\n\n<pre><code>The given array &#39;arr&#39; is: [2, 5, 7] and m = 1. We insert m = 1 in the array and get &#39;arr&#39; as: [1, 2, 5, 7]. The position of 1 is 0 (according to 0-based indexing)\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-3\">Sample Input 3:</h5>\n\n<pre><code>4 2\n1 2 4 7\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-3\">Sample Output 3:</h5>\n\n<pre><code>1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-input-3\">Explanation of Input 3:</h5>\n\n<pre><code>The given array &#39;arr&#39; is: [1, 2, 4, 7] and m = 2. We already have 2 in &#39;A&#39;. The position of 2 is 1 (according to 0-based indexing)\n</code></pre>\n\n<p><br/></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 218,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a sorted array `arr` of distinct integers and a target value `m`. Your task is to find the index of `m` in the array.\n\nIf `m` is present in `arr`, return its index. Otherwise, return the index where `m` should be inserted to maintain the sorted order.",
                "constraints": [
                    "0 \u2264 n \u2264 10^5 (where n is the length of the array)",
                    "1 \u2264 m \u2264 10^9",
                    "1 \u2264 arr[i] \u2264 10^9",
                    "The array contains distinct integers.",
                    "The array may be empty."
                ],
                "testcases": [
                    {
                        "input": "4 9\n1 2 4 7",
                        "output": "4",
                        "explanation": "The target 9 is not present in the array [1, 2, 4, 7]. It should be inserted at index 4 to maintain sorted order."
                    },
                    {
                        "input": "3 1\n2 5 7",
                        "output": "0",
                        "explanation": "The target 1 is not present in the array [2, 5, 7]. It should be inserted at index 0 to maintain sorted order."
                    },
                    {
                        "input": "4 2\n1 2 4 7",
                        "output": "1",
                        "explanation": "The target 2 is present in the array [1, 2, 4, 7] at index 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we check all positions to find the optimal position?</p>",
            "<p>Can we use Binary Search?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity - O(log N)\n    Space Complexity - O(1)\n\n    Where 'N' is the size of the array.\n*/\n\nint searchInsert(vector<int>& arr, int m)\n{\n    int lo = 0;\n    int hi = arr.size() - 1;\n    int ans = -1;\n\n    while (lo <= hi)\n    {\n        int mid = lo + (hi - lo) / 2;\n\n        // Check if element is present.\n        if (arr[mid] == m)\n        {\n            return mid;\n        }\n\n        // Check in left half.\n        if (arr[mid] > m)\n        {\n            hi = mid - 1;\n            ans = mid;\n        }\n        // Check in right half.\n        else\n        {\n            lo = mid + 1;\n        }\n    }\n\n    if (ans == -1)\n    {\n        ans = arr.size();\n    }\n\n    return ans;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n   \tTime Complexity - O(log N)\r\n\tSpace Complexity - O(1)\r\n\r\n\tWhere 'N' is the size of the array.\r\n'''\r\n\r\ndef searchInsert(arr: [int], m: int) -> int:\r\n    n = len(arr)\r\n    lo = 0\r\n    hi = n - 1\r\n    ans = -1\r\n\r\n    while lo <= hi:\r\n\r\n        mid = lo + (hi - lo) // 2\r\n\r\n        # Check if element is present.\r\n        if (arr[mid] == m):\r\n            return mid\r\n        \r\n        # Check the left half.\r\n        if (arr[mid] > m):\r\n            hi = mid - 1\r\n            ans = mid\r\n        # Check the right half.\r\n        else:\r\n            lo = mid + 1\r\n\r\n    if (ans == -1):\r\n        ans = n\r\n\r\n    return ans",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity - O(log N)\r\n    Space Complexity - O(1)\r\n\r\n    Where 'N' is the size of the array.\r\n*/\r\npublic class Solution {\r\n    public static int searchInsert(int [] arr, int m){\r\n\r\n        int lo = 0;\r\n        int hi = arr.length - 1;\r\n        int ans = -1;\r\n\r\n        while(lo <= hi){\r\n\r\n            int mid = lo + (hi - lo) / 2;\r\n            // Check if element is present.\r\n            if(arr[mid] == m){\r\n                return mid;\r\n            }\r\n\r\n            // Check in left half.\r\n            if(arr[mid] > m){\r\n                hi = mid - 1;\r\n                ans = mid;\r\n            }\r\n            // Check in right half.\r\n            else{\r\n                lo = mid + 1;\r\n            }\r\n        }\r\n\r\n        if(ans == -1) {\r\n            ans = arr.length;\r\n        }\r\n\r\n        return ans;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}