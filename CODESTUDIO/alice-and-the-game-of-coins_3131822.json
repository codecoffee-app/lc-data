{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16397,
            "title": "Alice And The Game Of Coins",
            "titleSlug": "alice-and-the-game-of-coins_3131822",
            "content": "<h4 id=\"alice-and-bob-are-playing-a-game-on-coins-there-are-n-coins-placed-along-an-imaginary-x-axis-and-bob-asks-alice-to-solve-the-following-problem\">Alice and Bob are playing a game on coins; there are &#39;N&#39; coins placed along an imaginary X-axis, and Bob asks Alice to solve the following problem.</h4>\n\n<h4 id=\"a-coin-is-special-if-it-is-on-one-of-the-ends-of-the-coin-stream-in-one-move-a-person-can-move-any-special-coin-to-make-it-not-special-and-after-movement-according-to-its-updated-position-it-should-not-be-a-special-coin-again-if-there-is-no-possible-move-the-game-will-be-stopped\">A coin is special if it is on one of the ends of the coin stream. In one move, a person can move any special coin to make it not special. And after movement, according to its updated position, it should not be a special coin again. If there is no possible move, the game will be stopped.</h4>\n\n<h4 id=\"alice-has-to-tell-bob-the-maximum-and-a-minimum-number-of-coins-can-be-moved\">Alice has to tell Bob the maximum, and a minimum number of coins can be moved.</h4>\n\n<h4 id=\"your-task-is-to-help-alice-to-find-the-minimum-and-maximum-number-of-coins-that-can-be-moved\">Your task is to help Alice to find the minimum and maximum number of coins that can be moved.</h4>\n\n<h5 id=\"example\">EXAMPLE:</h5>\n\n<pre><code>Input: &#39;N&#39; = 3, &#39;COINS&#39; = [8, 5, 10]\nOutput: Maximum = 2, Minimum = 1\n\nAlice can move 5 -&gt; 9 for one move, and then the game will be stopped.\nAlso, she can move 10 -&gt; 6, 5 -&gt; 7 for two moves, and then the game will be stopped.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T&#39;, denoting the number of test cases. \n\nFor each test case, the first line contains an integer &#39;N&#39; denoting that number of coins placed. And next line contains &#39;N&#39; integers denoting the position of every coin on the X-axis.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print two integers maximum and minimum number of coins can be moved.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 10\n1 &lt;= &#39;N&#39; &lt;= 10^4\n1 &lt;= \u2018COINS[i]\u2019 &lt;= 10^5\nAll values of \u2018COINS[i]\u2019 will be unique\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3\n8 5 10\n5\n7 6 5 4 11\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2 1\n3 2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first test case, Alice can move 5 -&gt; 9 for one move, and then the game will be stopped. Also, she can move 10 -&gt; 6, 5 -&gt; 7 for two moves, and then the game will be stopped.\n\nFor the second test case, Alice can move 4 -&gt; 9 then 11 -&gt; 8\nAnd then the game will be stopped. Also, she can move 4 -&gt; 8, 5 -&gt; 9, 6 -&gt; 10 for three moves, and then the game will be stopped.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3\n1 2 3\n5\n1 2 3 6 9\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0 0\n2 4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Alice and Bob are playing a coin game. There are 'N' coins placed on an X-axis. A coin is considered 'special' if it's at either end of the coin arrangement. In each move, a player can relocate a 'special' coin to a position where it's no longer 'special'. The game ends when no more moves are possible.  The goal is to determine the maximum and minimum number of moves Alice can make before the game stops.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^4",
                    "1 <= COINS[i] <= 10^5",
                    "All values of \u2018COINS[i]\u2019 will be unique",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\n8 5 10",
                        "output": "2 1",
                        "explanation": "One possible scenario for the minimum moves: Alice moves 5 -> 9 (1 move). The game stops. For the maximum moves: Alice moves 10 -> 6, then 5 -> 7 (2 moves). The game stops."
                    },
                    {
                        "input": "5\n7 6 5 4 11",
                        "output": "3 2",
                        "explanation": "One possible scenario for the minimum moves: Alice can move 4 -> 9 then 11 -> 8 (2 moves).\nOne possible scenario for the maximum moves: Alice can move 4 -> 8, 5 -> 9, 6 -> 10 (3 moves)."
                    },
                    {
                        "input": "3\n1 2 3",
                        "output": "0 0",
                        "explanation": "No coin can be moved as all positions are adjacent."
                    },
                    {
                        "input": "5\n1 2 3 6 9",
                        "output": "2 4",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Starting from the end coins try to use the sliding window over the number of available positions.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}