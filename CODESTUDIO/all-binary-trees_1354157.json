{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11002,
            "title": "All Binary Trees",
            "titleSlug": "all-binary-trees_1354157",
            "content": "<h4 id=\"you-are-given-a-single-integer-n-your-task-is-to-print-all-possible-full-binary-trees-containing-n-nodes-each-node-must-have-0-as-its-value\">You are given a single integer \u2018N\u2019. Your task is to print all possible full binary trees containing \u2018N\u2019 nodes. Each node must have 0 as its value.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>A full binary tree is a binary tree where every node has exactly 0 or 2 children.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first and only line contains a single integer \u2018N\u2019, denoting the number of nodes required in each tree.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print in a separate line all the nodes of the tree. Trees can be printed in any order but all the nodes of a tree must be printed in level order. If a node does not exist, &#39;-1&#39; should be printed in its place. All the trees must be printed in a separate line. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt; 20\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0 0 0 0 0 -1 -1\n0 0 0 -1 -1 0 0   \n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h5>\n\n<pre><code>For the first test case, the only two possible full binary trees are given below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-2-8660.png\" alt=\"example\"> \n<img src=\"https://files.codingninjas.in/untitled-diagram-1-8659.png\" alt=\"example\"> </p>\n\n<pre><code>We can see that in each tree, the total number of nodes is five and each node either has 0 or 2 children. So both the trees are full binary trees. We can also observe that there is no other full binary tree containing five nodes.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0 0 0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, generate all possible full binary trees with N nodes. Each node in the tree must have a value of 0. A full binary tree is a binary tree where every node has either 0 or 2 children.  Print the level order traversal of each tree, representing missing nodes with '-1'.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N < 20",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "0 0 0 0 0 -1 -1\n0 0 0 -1 -1 0 0",
                        "explanation": "Two possible full binary trees with 5 nodes exist. Each tree satisfies the condition of having only nodes with 0 or 2 children. The output represents the level-order traversal of each tree, with '-1' indicating missing nodes."
                    },
                    {
                        "input": "3",
                        "output": "0 0 0",
                        "explanation": "There is only one possible full binary tree with 3 nodes. The output represents the level-order traversal of the tree."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><i>Think of the number of nodes that the left and right subtrees can have.</i></p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}