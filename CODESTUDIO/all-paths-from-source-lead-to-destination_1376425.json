{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11014,
            "title": "All Paths from Source Lead to Destination",
            "titleSlug": "all-paths-from-source-lead-to-destination_1376425",
            "content": "<h4 id=\"there-is-a-directed-graph-consisting-of-n-nodes-numbered-from-0-to-n-1-you-are-given-a-list-edges-of-size-m-consisting-of-all-the-edges-of-this-directed-graph-and-two-nodes-src-and-dest-of-this-graph-determine-whether-or-not-all-paths-starting-from-node-src-eventually-end-at-node-dest-that-is\">There is a directed graph consisting of \u2018N\u2019 nodes numbered from 0 to \u2018N\u2019-1.  You are given a list \u2018EDGES\u2019 of size \u2018M\u2019, consisting of all the edges of this directed graph, and two nodes \u2018SRC\u2019 and \u2018DEST\u2019 of this graph. Determine whether or not all paths starting from node \u2018SRC\u2019 eventually end at node \u2018DEST\u2019, that is -:</h4>\n\n<h4 id=\"1-at-least-one-path-exists-from-node-src-to-node-dest\">1. At least one path exists from node \u2018SRC\u2019 to node \u2018DEST\u2019.</h4>\n\n<h4 id=\"2-if-there-exists-a-path-from-the-node-src-to-a-node-with-no-outgoing-edges-then-that-node-must-be-dest\">2. If there exists a path from the node \u2018SRC\u2019 to a node with no outgoing edges, then that node must be \u2018DEST\u2019.</h4>\n\n<h4 id=\"3-there-should-be-a-finite-number-of-paths-from-src-to-dest\">3. There should be a finite number of paths from \u2018SRC\u2019 to \u2018DEST\u2019.</h4>\n\n<h4 id=\"you-should-return-true-if-all-paths-starting-from-node-src-eventually-end-at-node-dest-otherwise-return-false-see-the-example-for-more-clarity\">You should return True if all paths starting from node \u2018SRC\u2019 eventually end at node \u2018DEST\u2019, Otherwise, return False. See the example for more clarity.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1. The given graph may have self-loops and parallel edges.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Consider \u2018N\u2019 = 4, \u2018EDGES\u2019 = [[0, 1], [0, 3], [1, 2], [3, 2]],  \u2018SRC\u2019 = 0 and \u2018DEST\u2019 = 2. The given directed graph is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-6-8662.png\" alt=\"alt text\"></p>\n\n<pre><code>Here, all the paths that start from node 0 are -:\n1. 0-&gt;1-&gt;2\n2. 0-&gt;3-&gt;2\nBoth of these paths eventually end at node \u20182\u2019 i.e node \u2018DEST\u2019. Thus we should return True.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. then \u2018T\u2019 test cases follow.\n\nThe first line of each test case consists of four single space-separated integers  \u2018N\u2019, \u2018M\u2019, \u2018SRC\u2019, \u2018DEST\u2019, described in the problem statement.\n\nThen next \u2018M\u2019 lines follow in each test case. The ith line consists of two space-separated integers \u2018EDGES[i][0]\u2019 and \u2018EDGES[i][1]\u2019 representing that there is a directed edge from node \u2018EDGES[i][0]\u2019 to \u2018EDGES[i][1]\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a string \u201cTrue\u201d if all paths starting from node \u2018SRC\u2019 eventually end at node \u2018DEST\u2019, Otherwise, print \u201cFalse\u201d.  \n\nPrint output of each test case in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n2 &lt;= N &lt;= 10^4\n0 &lt;= M &lt;= 10^4\n0 &lt;= SRC &lt; N\n0 &lt;= DEST &lt; N\nSRC != DEST\n0 &lt;= EDGES[i][j] &lt; N. \n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019, \u2018M\u2019, \u2018SRC\u2019, and \u2018DEST\u2019 are as described in the problem statement. \u2018EDGES[i][j]\u2019 is an integer in list \u2018EDGES\u2019. \n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3\n2 2 0 1\n0 0\n0 1\n3 2 0 1\n0 1\n1 2\n4 4 0 2\n0 1\n0 3\n1 2\n3 2   \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>False\nFalse\nTrue\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For test case 1, there is a self-loop at node 0, thus the number of paths starting from node 0 cannot be finite. Thus we should return false. (See condition 3 in the problem statement). \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-7-8663.png\" alt=\"alt text\"></p>\n\n<pre><code>For test case 2, the only path that starts from 0 is 0-&gt;1-&gt;2,  This path ends at 2, instead of 1.\n\nFor test case 3, see the problem statement for an explanation.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 3 3 2 \n1 2\n3 2\n2 1\n5 3 3 2\n1 2\n3 2\n3 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>False\nTrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph with 'N' nodes (0 to 'N'-1) and 'M' edges, determine if all paths starting from a source node 'SRC' eventually lead to a destination node 'DEST'.  This condition is met if: (1) At least one path exists from 'SRC' to 'DEST'. (2) Any path from 'SRC' reaching a node with no outgoing edges must end at 'DEST'. (3) There is a finite number of paths from 'SRC' to 'DEST'.  The graph may contain self-loops and parallel edges.",
                "constraints": [
                    "1 <= T <= 50 (Number of test cases)",
                    "2 <= N <= 10^4 (Number of nodes)",
                    "0 <= M <= 10^4 (Number of edges)"
                ],
                "testcases": [
                    {
                        "input": "n = 2, m = 2, src = 0, dest = 1, edges = [[0, 0], [0, 1]]",
                        "output": "False",
                        "explanation": "There is a self-loop at node 0, thus the number of paths starting from node 0 cannot be finite."
                    },
                    {
                        "input": "n = 3, m = 2, src = 0, dest = 1, edges = [[0, 1], [1, 2]]",
                        "output": "False",
                        "explanation": "The only path that starts from 0 is 0->1->2,  This path ends at 2, instead of 1."
                    },
                    {
                        "input": "n = 4, m = 4, src = 0, dest = 2, edges = [[0, 1], [0, 3], [1, 2], [3, 2]]",
                        "output": "True",
                        "explanation": "All paths starting from node 0 are 0->1->2 and 0->3->2, both ending at node 2."
                    },
                    {
                        "input": "n = 5, m = 3, src = 3, dest = 2, edges = [[1, 2], [3, 2], [2, 1]]",
                        "output": "False",
                        "explanation": "There is a cycle 2->1->2 and the path from 3 reaches this cycle and it never ends to the destination node. Also, condition 3(finite number of paths) is violated."
                    },
                    {
                        "input": "n = 5, m = 3, src = 3, dest = 2, edges = [[1, 2], [3, 2], [3, 1]]",
                        "output": "False",
                        "explanation": "Starting at node 3 it could reach destination, but also could go to node 1. From node 1 it could reach node 2, but also could return to node 1. Because it could loop to node 1 it might not reach destination, and the number of paths cannot be finite."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we use Depth First Search to solve this problem?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}