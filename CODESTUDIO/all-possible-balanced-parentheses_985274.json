{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9412,
            "title": "All Possible Balanced Parentheses",
            "titleSlug": "all-possible-balanced-parentheses_985274",
            "content": "<h4 id=\"you-are-given-a-positive-integer-n-you-have-to-generate-all-possible-sequences-of-balanced-parentheses-using-n-pairs-of-parentheses\">You are given a positive integer &#39;N&#39;. You have to generate all possible sequences of balanced parentheses using &#39;N&#39; pairs of parentheses.</h4>\n\n<h4 id=\"a-sequence-of-brackets-is-called-balanced-if-one-can-turn-it-into-a-valid-math-expression-by-adding-characters-and-1-for-example-sequences-and-are-balanced-while-and-are-not\">A sequence of brackets is called balanced if one can turn it into a valid math expression by adding characters \u2018+\u2019 and \u20181\u2019. For example, sequences \u2018(())()\u2019, \u2018()\u2019 and \u2018(()(()))\u2019 are balanced, while \u2018)(\u2018, \u2018(()\u2019 and \u2018(()))(\u2018 are not.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>For N = 1, there is only one sequence of balanced parentheses,  \u2018()\u2019.\n\nFor N = 2, all sequences of balanced parentheses are \u2018()()\u2019, \u2018(())\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. Then the T test cases follow.\n\nThe first line and only line of each test case contain a positive integer &#39;N&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For every test case, print all possible sequences of &#39;N&#39; pairs of balanced parentheses separated by single-spacing.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 11\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n1\n2\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>()\n(()) ()()\n((())) (()()) (())() ()(()) ()()()\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>In the 1st test case, there is only 1 possible sequence of balanced parentheses.\n\nIn the 2nd test case, there are 2 possible sequences of balanced parentheses.\n\nIn the 3rd test case, there are 5 possible sequences of balanced parentheses.\n</code></pre>\n\n<h5 id=\"sample-input-4\">Sample Input 4:</h5>\n\n<pre><code>1\n4\n</code></pre>\n\n<h5 id=\"sample-output-4\">Sample Output 4:</h5>\n\n<pre><code>(((()))) ((()())) ((())()) ((()))() (()(())) (()()()) (()())() (())(()) (())()() ()((())) ()(()()) ()(())() ()()(()) ()()()() \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer 'N', generate all possible sequences of balanced parentheses using 'N' pairs of parentheses. A sequence of brackets is considered balanced if it can be transformed into a valid mathematical expression by adding characters '+' and '1'. For example, '(())()', '()', and '(()(()))' are balanced, while ')(', '(()', and '(()))(' are not. Implement the function `balancedParentheses(int n)` that takes an integer 'n' as input and returns a vector of strings, where each string represents a balanced parentheses sequence.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 11",
                    "The output sequences for each test case must be separated by a single space."
                ],
                "testcases": [
                    {
                        "input": "n = 1",
                        "output": "()",
                        "explanation": "For N = 1, the only possible balanced parentheses sequence is '()'."
                    },
                    {
                        "input": "n = 2",
                        "output": "(()) ()()",
                        "explanation": "For N = 2, the possible balanced parentheses sequences are '(())' and '()()'."
                    },
                    {
                        "input": "n = 3",
                        "output": "((())) (()()) (())() ()(()) ()()()",
                        "explanation": "For N = 3, the possible balanced parentheses sequences are '((()))', '(()())', '(())()', '()(())', and '()()()'."
                    },
                    {
                        "input": "n = 4",
                        "output": "(((()))) ((()())) ((())()) ((()))() (()(())) (()()()) (()())() (())(()) (())()() ()((())) ()(()()) ()(())() ()()(()) ()()()()",
                        "explanation": "For N = 4, the list contains all 14 possible balanced parentheses sequences. Their order doesn't matter."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Generate all possible sequences of the parentheses and for each sequence check if it is balanced or not.</p>",
            "<p>Think of using recursion to generate all possible sequences of balanced parentheses.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}