{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15534,
            "title": "All Sentences with Same Order",
            "titleSlug": "all-sentences-with-same-order_2547165",
            "content": "<h4 id=\"you-are-given-n-characters-these-characters-can-be-used-to-construct-words-and-these-words-can-further-be-used-to-construct-sentences\">You are given \u2018N\u2019 characters, these characters can be used to construct words and these words can further be used to construct sentences.</h4>\n\n<h4 id=\"find-all-the-distinct-sentences-that-you-can-build-while-maintaining-the-relative-order-of-these-characters-print-the-sentences-in-lexicographical-order\">Find all the distinct sentences that you can build while maintaining the relative order of these characters. Print the sentences in lexicographical order.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If N = 3 and characters are = { a, b, c }\nThen the four distinct sentences you can build:\na b c \na bc \nab c \nabc \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of characters.\n\nThe second line of each test case consists of a string \u2018S\u2019 denoting the characters.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print all the sentences that can be built in separate lines.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 T \u2264 10      \n1 \u2264 N \u2264 15\n</code></pre>\n\n<p>String \u2018S\u2019 consist of only lower case English alphabets</p>\n\n<pre><code>Time limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3\nabc\n2\nxy\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>a b c \na bc \nab c \nabc \nx y \nxy\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For test case 1 :\nThere are four distinct sentences we can build from \u201cabc\u201d such that the order of characters doesn\u2019t change, these sentences are:\na b c \na bc \nab c \nabc\n\nFor test case 2 : \nThere are two distinct sentences we can build from \u201cxy\u201d such that the order of characters doesn\u2019t change, these sentences are:\nx y\nxy\n\n(Note that the result is printed in lexicographical order)\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1\na\n2\ncd\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>a\nc d\ncd\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S' of length 'N', composed of lowercase English alphabets, construct all possible distinct sentences by either separating or joining adjacent characters into words. The relative order of the characters in 'S' must be maintained. Return a lexicographically sorted list of these distinct sentences, where each sentence is represented as a vector of strings.",
                "constraints": [
                    "1 \u2264 T \u2264 10",
                    "1 \u2264 N \u2264 15",
                    "String \u2018S\u2019 consists of only lower case English alphabets"
                ],
                "testcases": [
                    {
                        "input": "n = 3, s = \"abc\"",
                        "output": "a b c \na bc \nab c \nabc",
                        "explanation": "The four distinct sentences that can be formed from \"abc\" while preserving the original character order are:\na b c\na bc\nab c\nabc"
                    },
                    {
                        "input": "n = 2, s = \"xy\"",
                        "output": "x y \nxy",
                        "explanation": "The two distinct sentences that can be formed from \"xy\" while preserving the original character order are:\nx y\nxy"
                    },
                    {
                        "input": "n = 1, s = \"a\"",
                        "output": "a",
                        "explanation": "Only one sentence can be formed from \"a\":\na"
                    },
                    {
                        "input": "n = 2, s = \"cd\"",
                        "output": "c d \ncd",
                        "explanation": "The two distinct sentences that can be formed from \"cd\" while preserving the original character order are:\nc d\ncd"
                    },
                    {
                        "input": "n = 4, s = \"abcd\"",
                        "output": "a b c d \na b cd \na bc d \na bcd \nab c d \nab cd \nabc d \nabcd",
                        "explanation": "All possible combinations of spaces between the characters of 'abcd' result in the listed output."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>You just have to manage a way to insert spaces between characters to generate all possible sentences.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}