{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9846,
            "title": "All Unique Permutations",
            "titleSlug": "all-unique-permutations_1094902",
            "content": "<h4 id=\"you-are-given-an-array-arr-consisting-of-n-integers-your-task-is-to-find-all-the-unique-permutations-of-the-given-array-for-e-g-if-the-array-is-1-1-2-the-unique-permutations-of-this-array-are-1-1-2-1-2-1-2-1-1-note-that-the-total-number-of-permutations-of-1-1-2-is-equal-to-6-but-out-of-those-1-1-2-and-1-2-1-occur-twice\">You are given an array Arr consisting of N integers. Your task is to find all the unique permutations of the given array. For e.g if the array is {1, 1, 2}, the unique permutations of this array are {1, 1, 2}, {1, 2, 1}, {2, 1, 1}. Note that the total number of permutations of {1,1,2} is equal to 6 but out of those {1,1,2} and {1,2,1} occur twice.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. There might be duplicates present in the array.\n2. The order of the permutations in the output does not matter.\n3. Do not use any kind of in-built library functions to find the answer.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains the integer N, denoting the size of the array.\n\nThe second line contains N space-separated integers denoting the array elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The output contains K lines, where each line contains N space-separated integers denoting one of the unique permutations of the given array.\n\nOutput for each test case must be in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 6\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n1 1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 1 2\n1 2 1\n2 1 1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>The three unique permutations are  {1, 1, 2}, {1, 2, 1}, {2, 1, 1}. Note that {1, 2, 1}, {2, 1, 1} {1, 1, 2} is also acceptable answer.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n1 2 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 2 3\n1 3 2\n2 1 3\n2 3 1\n3 1 2\n3 2 1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2:</h5>\n\n<pre><code>The six unique permutations are  {1, 2, 3}, {1, 3, 2}, {2, 1, 3}, {2, 3, 1}, {3, 1, 2}, {3, 2, 1}. Note that the order of permutations does not matter, you can return them in any order.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 11,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers that may contain duplicates, generate all unique permutations of the array.",
                "constraints": [
                    "1 <= N <= 6",
                    "The order of permutations in the output does not matter.",
                    "Do not use any kind of in-built library functions to find the answer."
                ],
                "testcases": [
                    {
                        "input": "n = 3, nums=[1, 1, 2]",
                        "output": "1 1 2\n1 2 1\n2 1 1",
                        "explanation": "The three unique permutations are {1, 1, 2}, {1, 2, 1}, {2, 1, 1}. Note that {1, 2, 1}, {2, 1, 1}, {1, 1, 2} is also an acceptable answer."
                    },
                    {
                        "input": "n = 3, nums=[1, 2, 3]",
                        "output": "1 2 3\n1 3 2\n2 1 3\n2 3 1\n3 1 2\n3 2 1",
                        "explanation": "The six unique permutations are {1, 2, 3}, {1, 3, 2}, {2, 1, 3}, {2, 3, 1}, {3, 1, 2}, {3, 2, 1}. Note that the order of permutations does not matter, you can return them in any order."
                    },
                    {
                        "input": "n = 4, nums=[1, 2, 2, 3]",
                        "output": "1 2 2 3\n1 2 3 2\n1 3 2 2\n2 1 2 3\n2 1 3 2\n2 2 1 3\n2 2 3 1\n2 3 1 2\n2 3 2 1\n3 1 2 2\n3 2 1 2\n3 2 2 1",
                        "explanation": "All possible unique permutations of the array [1, 2, 2, 3] are listed above. Note that the order of output doesn't matter."
                    },
                    {
                        "input": "n = 1, nums=[5]",
                        "output": "5",
                        "explanation": "A single element array has only one permutation."
                    },
                    {
                        "input": "n = 5, nums=[1, 1, 1, 2, 2]",
                        "output": "1 1 1 2 2\n1 1 2 1 2\n1 1 2 2 1\n1 2 1 1 2\n1 2 1 2 1\n1 2 2 1 1\n2 1 1 1 2\n2 1 1 2 1\n2 1 2 1 1\n2 2 1 1 1",
                        "explanation": "All possible unique permutations of the array [1,1,1,2,2]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try the simplest possible way.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}