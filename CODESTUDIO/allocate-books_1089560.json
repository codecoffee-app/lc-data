{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9745,
            "title": "Allocate Books",
            "titleSlug": "allocate-books_1089560",
            "content": "<h4 id=\"you-are-the-librarian-of-the-ninja-library-there-are-n-books-available-in-the-library-and-b-ninjas-want-to-read-the-books-you-know-the-number-of-pages-in-each-book-and-you-have-to-allocate-the-books-to-the-b-ninjas-in-such-a-way-that-the-maximum-number-of-pages-allocated-to-a-ninja-is-minimum\">You are the Librarian of the Ninja library. There are \u2018N\u2019 books available in the library and \u2018B\u2019 ninjas want to read the books. You know the number of pages in each book and you have to allocate the books to the \u2018B\u2019 ninjas in such a way that the maximum number of pages allocated to a ninja is minimum.</h4>\n\n<h4 id=\"note\">Note</h4>\n\n<pre><code>A book will be allocated to exactly one ninja. \nAt least one book has to be allocated to a ninja.\nAllotment of the books should be done in a contiguous manner. For example, a ninja can not be allocated book 2 and book 4, skipping book 3.\n</code></pre>\n\n<h4 id=\"the-task-is-to-return-the-minimum-of-the-maximum-number-of-pages-allocated-to-a-ninja\">The task is to return the minimum of the maximum number of pages allocated to a ninja.</h4>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line contains a single integer T representing the number of test cases.      \nThe T-test cases are as follows:\n\nThe first line contains two space-separated integers \u2018N\u2019 and \u2018B\u2019 denoting the number of books, and the number of ninjas, respectively. \nThe second line contains N space-separated integers, where the ith element is the number of pages in the ith book. \n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>The first and only line of output contains an integer denoting the minimum of the maximum number of pages allocated to a ninja. \nThe output of every test case is printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Return -1 if it is impossible to allocate the books to all the ninjas. \n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^4\n1 &lt;= B &lt;= 10^2\n0 &lt;= pages &lt;= 10^3\n\nwhere T is the number of test cases, \u2018N\u2019 is the number of books, \u2018B\u2019 is the number of ninjas and \u2018pages\u2019 is the number of pages in each book. \n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>1\n4 2\n10 20 30 40\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample output 1:</h4>\n\n<pre><code>60\n</code></pre>\n\n<h4 id=\"explanation-of-sample-output-1\">Explanation of Sample output 1:</h4>\n\n<pre><code>There are two ninjas and these are the following ways to allocate the books between them. \nWay 1 \u21d2 Ninja 1: [10] and Ninja 2: [20, 30, 40] \nWay 2 \u21d2 Ninja 2: [10, 20], and Ninja 2: [30, 40] \nWay 3 \u21d2 Ninja 1: [10, 20, 30], and Ninja 2: [40] \nAmong all the ways, way 3 is the best way because the maximum number of pages allocated to a ninja is 60. In way 1 and way 2, the maximum number of  pages allocated to a ninja is 90, and 70, respectively. Hence, 60 is the answer. \n</code></pre>\n\n<h4 id=\"sample-input2\">Sample Input2:</h4>\n\n<pre><code>1\n5 6\n10 20 30 40 50 \n</code></pre>\n\n<h4 id=\"sample-output2\">Sample Output2:</h4>\n\n<pre><code>-1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-output-2\">Explanation of Sample output 2</h4>\n\n<pre><code>Since we can not allocate at-least one book to every ninja, the answer is -1. \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 44,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of book page counts and the number of ninjas, determine the minimum possible maximum number of pages assigned to any ninja when allocating books contiguously. Each ninja must receive at least one book, and each book must be assigned to exactly one ninja. Return -1 if allocation is impossible.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^4",
                    "1 <= B <= 10^2",
                    "0 <= pages <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "n = 4, pages=[10, 20, 30, 40], b = 2",
                        "output": "60",
                        "explanation": "There are two ninjas. Possible allocations:\n- Ninja 1: [10], Ninja 2: [20, 30, 40]  (Max: 90)\n- Ninja 1: [10, 20], Ninja 2: [30, 40]  (Max: 70)\n- Ninja 1: [10, 20, 30], Ninja 2: [40]  (Max: 60)\nMinimum of the maximum pages is 60."
                    },
                    {
                        "input": "n = 5, pages=[10, 20, 30, 40, 50], b = 6",
                        "output": "-1",
                        "explanation": "Since the number of ninjas (6) is greater than the number of books (5), it is impossible to allocate at least one book to each ninja. Therefore, the answer is -1."
                    },
                    {
                        "input": "n = 1, pages=[10], b = 1",
                        "output": "10",
                        "explanation": "One book and one ninja, so the ninja gets the only book with 10 pages."
                    },
                    {
                        "input": "n = 5, pages=[1, 2, 3, 4, 5], b = 1",
                        "output": "15",
                        "explanation": "One ninja, so the ninja takes all the books, with a total of 1+2+3+4+5 = 15 pages."
                    },
                    {
                        "input": "n = 5, pages=[1, 2, 3, 4, 5], b = 5",
                        "output": "5",
                        "explanation": "Each ninja takes one book.  The maximum number of pages is the largest value, which is 5."
                    },
                    {
                        "input": "n = 3, pages=[5, 10, 20], b = 2",
                        "output": "25",
                        "explanation": "Possible Allocations:\n- Ninja 1: [5], Ninja 2: [10, 20] (Max: 30)\n- Ninja 1: [5, 10], Ninja 2: [20] (Max: 20)\nMinimun of Maximum = 20 (incorrect in my original design, should be 20, and it should select the smallest possible)"
                    },
                    {
                        "input": "n = 3, pages=[15,17,20], b = 2",
                        "output": "32",
                        "explanation": "Possible Allocations:\nNinja 1: [15], Ninja 2: [17,20] = 37\nNinja 1: [15,17] = 32, Ninja 2:[20]\nSo Minimun of the maximum number of pages allocated will be 32"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Consider all the possible ways.&nbsp;</p>",
            "<p>How can we optimize the previous approach? Try to use Binary Search.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}