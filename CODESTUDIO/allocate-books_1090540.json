{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9786,
            "title": "Allocate Books",
            "titleSlug": "allocate-books_1090540",
            "content": "<h4 id=\"given-an-array-arr-of-integer-numbers-arr-i-represents-the-number-of-pages-in-the-i-th-book\">Given an array <em><strong>\u2018arr\u2019</strong></em> of integer numbers, \u2018arr[i]\u2019 represents the number of pages in the \u2018i-th\u2019 book.</h4>\n\n<p><br /></p>\n\n<h4 id=\"there-are-m-number-of-students-and-the-task-is-to-allocate-all-the-books-to-the-students\">There are <em><strong>\u2018m\u2019</strong></em> number of students, and the task is to allocate all the books to the students.</h4>\n\n<p><br /></p>\n\n<h4 id=\"allocate-books-in-such-a-way-that\">Allocate books in such a way that:</h4>\n\n<pre><code>1. Each student gets at least one book.\n2. Each book should be allocated to only one student.\n3. Book allocation should be in a contiguous manner.\n</code></pre>\n\n<p><br /></p>\n\n<h4 id=\"you-have-to-allocate-the-book-to-m-students-such-that-the-maximum-number-of-pages-assigned-to-a-student-is-minimum\">You have to allocate the book to \u2018m\u2019 students such that the maximum number of pages assigned to a student is minimum.</h4>\n\n<p><br /></p>\n\n<h4 id=\"if-the-allocation-of-books-is-not-possible-return-1\">If the allocation of books is not possible, return -1.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018n\u2019 = 4 \u2018m\u2019 = 2 \n\u2018arr\u2019 = [12, 34, 67, 90]\n\nOutput: 113\n\nExplanation: All possible ways to allocate the \u20184\u2019 books to &#39;2&#39; students are:\n\n12 | 34, 67, 90 - the sum of all the pages of books allocated to student 1 is \u201812\u2019, and student two is \u201834+ 67+ 90 = 191\u2019, so the maximum is \u2018max(12, 191)= 191\u2019.\n\n12, 34 | 67, 90 - the sum of all the pages of books allocated to student 1 is \u201812+ 34 = 46\u2019, and student two is \u201867+ 90 = 157\u2019, so the maximum is \u2018max(46, 157)= 157\u2019.\n\n12, 34, 67 | 90 - the sum of all the pages of books allocated to student 1 is \u201812+ 34 +67 = 113\u2019, and student two is \u201890\u2019, so the maximum is \u2018max(113, 90)= 113\u2019.\n\nWe are getting the minimum in the last case.\n\nHence answer is \u2018113\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains two space-separated integers \u2018n\u2019 denoting the number of books and \u2018m\u2019 denotes the number of students. \n\nThe second line contains \u2018n\u2019 space-separated integers denoting the number of pages in each of \u2018n\u2019 books.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return the integer as described above.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Do not print anything, just return the maximum number of pages that are assigned to a student is minimum.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4 2\n12 34 67 90\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>113\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>All possible ways to allocate the \u20184\u2019 books to &#39;2&#39; students are:\n\n12 | 34, 67, 90 - the sum of all the pages of books allocated to student 1 is \u201812\u2019, and student two is \u201834+ 67+ 90 = 191\u2019, so the maximum is \u2018max(12, 191)= 191\u2019.\n\n12, 34 | 67, 90 - the sum of all the pages of books allocated to student 1 is \u201812+ 34 = 46\u2019, and student two is \u201867+ 90 = 157\u2019, so the maximum is \u2018max(46, 157)= 157\u2019.\n\n12, 34, 67 | 90 - the sum of all the pages of books allocated to student 1 is \u201812+ 34 +67 = 113\u2019, and student two is \u201890\u2019, so the maximum is \u2018max(113, 90)= 113\u2019.\n\nWe are getting the minimum in the last case.\n\nHence answer is \u2018113\u2019.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5 4\n25 46 28 49 24\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>71\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2:</h5>\n\n<pre><code>All possible ways to allocate the \u20185\u2019 books to &#39;4&#39; students are:\n\n25 | 46 | 28 | 49 24 - the sum of all the pages of books allocated to students 1, 2, 3, and 4 are &#39;25&#39;, &#39;46&#39;, &#39;28&#39;, and &#39;73&#39;. So the maximum is &#39;73&#39;.\n\n25 | 46 | 28 49 | 24 - the sum of all the pages of books allocated to students 1, 2, 3, and 4 are &#39;25&#39;, &#39;46&#39;, &#39;77&#39;, and &#39;24&#39;. So the maximum is &#39;77&#39;.\n\n25 | 46 28 | 49 | 24 - the sum of all the pages of books allocated to students 1, 2, 3, and 4 are &#39;25&#39;, &#39;74&#39;, &#39;49&#39;, and &#39;24&#39;. So the maximum is &#39;74&#39;.\n\n25 46 | 28 | 49 | 24 - the sum of all the pages of books allocated to students 1, 2, 3, and 4 are &#39;71&#39;, &#39;28&#39;, &#39;49&#39;, and &#39;24&#39;. So the maximum is &#39;71&#39;.\n\nWe are getting the minimum in the last case.\n\nHence answer is \u201871\u2019.\n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity:</h5>\n\n<pre><code>The expected time complexity is O(n * log(s)), where \u2018n\u2019 is the number of integers in the array \u2018arr\u2019 and \u2018s\u2019 is the sum of all the elements of \u2018arr\u2019.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>2 &lt;= &#39;n&#39; &lt;= 10 ^ 3\n1 &lt;= &#39;m&#39; &lt;= 10 ^ 3\n1 &lt;= &#39;arr[i]&#39; &lt;= 10 ^ 9\nThe sum of all arr[i] does not exceed 10 ^ 9.\n\nWhere \u2018n\u2019 denotes the number of books and \u2018m\u2019 denotes the number of students. \u2018arr[i]\u2019 denotes an element at position \u2018i\u2019 in the sequence.\n\nTime limit: 1 second\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1079,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of integer numbers, where `arr[i]` represents the number of pages in the i-th book, and a number `m` representing the number of students, allocate the books to the students such that:\n\n1.  Each student gets at least one book.\n2.  Each book is allocated to only one student.\n3.  Book allocation is contiguous.\n\nThe goal is to allocate the books to `m` students such that the maximum number of pages assigned to a student is minimized. If the allocation is not possible, return -1.",
                "constraints": [
                    "2 <= n <= 10^3 (n is the number of books)",
                    "1 <= m <= 10^3 (m is the number of students)",
                    "1 <= arr[i] <= 10^9",
                    "The sum of all arr[i] does not exceed 10^9"
                ],
                "testcases": [
                    {
                        "input": "4 2\n12 34 67 90",
                        "output": "113",
                        "explanation": "Possible allocations for 4 books to 2 students are:\n\n1. 12 | 34, 67, 90.  Max pages = max(12, 34+67+90) = max(12, 191) = 191\n2. 12, 34 | 67, 90. Max pages = max(12+34, 67+90) = max(46, 157) = 157\n3. 12, 34, 67 | 90. Max pages = max(12+34+67, 90) = max(113, 90) = 113\n\nThe minimum of these maximums is 113."
                    },
                    {
                        "input": "5 4\n25 46 28 49 24",
                        "output": "71",
                        "explanation": "Possible allocations for 5 books to 4 students are:\n\n1. 25 | 46 | 28 | 49 24. Max pages = max(25, 46, 28, 49+24) = max(25, 46, 28, 73) = 73\n2. 25 | 46 | 28 49 | 24. Max pages = max(25, 46, 28+49, 24) = max(25, 46, 77, 24) = 77\n3. 25 | 46 28 | 49 | 24. Max pages = max(25, 46+28, 49, 24) = max(25, 74, 49, 24) = 74\n4. 25 46 | 28 | 49 | 24. Max pages = max(25+46, 28, 49, 24) = max(71, 28, 49, 24) = 71\n\nThe minimum of these maximums is 71."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try all possible minimum number of pages.</p>",
            "<p>Define a range of your answers.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time complexity: O(N*log(S))\n    Space complexity: O(1)\n\n    Where 'N' is length of 'arr' and 'S' is sum of all the elements of 'arr'.\n*/\n\nbool isPossible(vector<int>& arr, int n, int m, int curMin) {\n    int studentsRequired = 1;\n    int curSum = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] > curMin) {\n            return false;\n        }\n\n        if (curSum + arr[i] > curMin) {\n            // Increment student count by '1'\n            studentsRequired += 1;\n\n            // Update curSum\n            curSum = arr[i];\n\n            // If students required becomes greater than given no. of students, return false\n            if (studentsRequired > m) {\n                return false;\n            }\n        }\n        // Else update curSum\n        else {\n            curSum += arr[i];\n        }\n    }\n    return true;\n}\n\nint findPages(vector<int>& arr, int n, int m) {\n    // If number student is more than number of books\n    if (n < m) {\n        return -1;\n    }\n\n    // Count total number of pages\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n\n    // Initialize start as 0 pages and\n    // End as total pages\n    int start = 0, end = sum;\n    int result = INT_MAX;\n\n    // Traverse until start <= end , binary search\n    while (start <= end) {\n        // Check if it is possible to distribute books by using mid as current minimum\n        int mid = start + (end - start) / 2;\n        if (isPossible(arr, n, m, mid)) {\n            // If yes then find the minimum distribution\n            result = min(result, mid);\n            end = mid - 1;\n        }\n\n        else {\n            start = mid + 1;\n        }\n    }\n\n    return result;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity: O(N*log(S))\r\n    Space complexity: O(1)\r\n\r\n    Where 'N' is length of 'arr' and 'S' is sum of all the elements of 'arr'.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n    public static boolean isPossible(ArrayList<Integer> arr, int n, int m, int curMin) {\r\n        int studentsRequired = 1;\r\n        int curSum = 0;\r\n        for (int i = 0; i < n; i++) {\r\n            if (arr.get(i) > curMin) {\r\n                return false;\r\n            }\r\n\r\n            if (curSum + arr.get(i) > curMin) {\r\n                // Increment student count by '1'\r\n                studentsRequired += 1;\r\n\r\n                // Update curSum\r\n                curSum = arr.get(i);\r\n\r\n                // If students required becomes greater than given no. of students, return False\r\n                if (studentsRequired > m) {\r\n                    return false;\r\n                }\r\n            }\r\n            // Else update curSum\r\n            else {\r\n                curSum += arr.get(i);\r\n            }\r\n        }\r\n        return true;\r\n\r\n    }\r\n\r\n    public static int findPages(ArrayList<Integer> arr, int n, int m) {\r\n\r\n        // If number student is more than number of books\r\n        if (n < m) {\r\n            return -1;\r\n        }\r\n\r\n        // Count total number of pages\r\n        int sum = 0;\r\n        for (int i = 0; i < n; i++) {\r\n            sum += arr.get(i);\r\n        }\r\n\r\n        // Initialize start as 0 pages and\r\n        // End as total pages\r\n        int start = 0, end = sum;\r\n        int result = -1;\r\n\r\n        // Traverse until start <= end , binary search\r\n        while (start <= end) {\r\n            // Check if it is possible to distribute books by using mid as current minimum\r\n            int mid = start + (end - start) / 2;\r\n            if (isPossible(arr, n, m, mid)) {\r\n                // If yes then find the minimum distribution\r\n                result = mid;\r\n                end = mid - 1;\r\n            }\r\n\r\n            else {\r\n                start = mid + 1;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\r\n\r\n    Time complexity: O(N*log(S))\r\n    Space complexity: O(1)\r\n\r\n    Where 'N' is length of 'arr' and 'S' is sum of all the elements of 'arr'.\r\n\r\n\"\"\"\r\n\r\n\r\ndef isPossible(arr: [int], n: int, m: int, curMin: int) -> bool:\r\n\r\n    studentsRequired = 1\r\n    curSum = 0\r\n    for i in range(n):\r\n        if arr[i] > curMin:\r\n            return False\r\n\r\n        if curSum + arr[i] > curMin:\r\n\r\n            # Increment student count by '1'\r\n            studentsRequired += 1\r\n\r\n            # Update curSum\r\n            curSum = arr[i]\r\n\r\n            # If students required becomes greater than given no. of students, return False\r\n            if studentsRequired > m:\r\n                return False\r\n\r\n        # Else update curSum\r\n        else:\r\n            curSum += arr[i]\r\n\r\n    return True\r\n\r\n\r\ndef findPages(arr: [int], n: int, m: int) -> int:\r\n\r\n    # If number student is more than number of books\r\n    if n < m:\r\n        return -1\r\n\r\n    # Count total number of pages\r\n    sum = 0\r\n    for i in range(n):\r\n        sum += arr[i]\r\n\r\n    # Initialize start as 0 pages and\r\n    # End as total pages\r\n    start, end = 0, sum\r\n    result = 10**9\r\n\r\n    # Traverse until start <= end , binary search\r\n    while start <= end:\r\n\r\n        # Check if it is possible to distribute books by using mid as current minimum\r\n        mid = start + (end - start) // 2\r\n        if isPossible(arr, n, m, mid):\r\n\r\n            # If yes then find the minimum distribution\r\n            result = min(result, mid)\r\n            end = mid - 1\r\n\r\n        else:\r\n            start = mid + 1\r\n\r\n    return result\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}