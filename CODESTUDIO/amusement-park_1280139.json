{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10918,
            "title": "Amusement park",
            "titleSlug": "amusement-park_1280139",
            "content": "<h4 id=\"the-ninja-visits-an-amusement-park-but-finds-himself-confused-because-he-wants-to-ride-the-rides-such-that-he-gets-maximum-fun-the-amusement-park-has-only-one-entrance-that-is-root\">The ninja visits an amusement park but finds himself confused because he wants to ride the rides such that he gets maximum fun. The amusement park has only one entrance that is root.</h4>\n\n<h4 id=\"each-ride-has-a-fun-number-assigned-to-it-and-ninja-wants-to-maximize-this-fun-but-there-is-a-rule-in-the-park-that-no-one-is-allowed-to-ride-two-directly-connected-rides\">Each ride has a fun number assigned to it and ninja wants to maximize this fun but there is a rule in the park that no one is allowed to ride two directly connected rides.</h4>\n\n<h4 id=\"as-the-ninja-is-smart-and-good-in-programming-because-he-did-a-course-from-coding-ninja-he-found-immediately-that-park-rides-are-connected-like-binary-tree-where-the-root-is-the-root-of-the-binary-tree-help-the-ninja-to-get-the-maximum-fun-this-time\">As the ninja is smart and good in programming because he did a course from coding ninja, he found immediately that park rides are connected like binary tree where the root is the root of the binary tree. Help the ninja to get the maximum fun this time.</h4>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains a fun number assigned to each ride in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2021-03-25-09-02-21-8525.png\" alt=\"\"></p>\n\n<pre><code>4\n2 6\n1 3 5 7\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation:</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 4\n\nLevel 2 :\nLeft child of 4 = 2\nRight child of 4 = 6\n\nLevel 3 :\nLeft child of 2 = 1\nRight child of 2 = 3\nLeft child of 6 = 5\nRight child of 6 = 7\n\nLevel 4 :\nLeft child of 1 = null (-1)\nRight child of 1 = null (-1)\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, print the maximum fun that ninja can get from the amusement park.\n\nThe output for each test case is printed in a separate line.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 5* 10^3\n1 &lt;= DATA &lt;= 10^4\n\nTime limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n3 5 9 -1 -1 -1 -1\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>14    \n20\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h4>\n\n<pre><code>Test Case 1 : \nMaximum fun that ninja can get is by visiting green color rides i.e 5 + 9 = 14.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2021-03-25-09-09-46-8528.png\" alt=\"\"></p>\n\n<pre><code>Test Case 2 :     \nMaximum fun in this tree is 1 + 3 + 5 + 7 + 4 = 20.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2021-03-25-09-10-09-8527.png\" alt=\"\"> </p>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>1\n5 4 8 -1 6 1 2 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>14\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "A ninja visits an amusement park and wants to maximize the fun by riding the rides. Each ride has a fun number, but there's a rule: no two directly connected rides can be ridden consecutively. The park rides are connected like a binary tree. Given the fun numbers of the rides in level order, help the ninja find the maximum fun possible.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 5 * 10^3",
                    "1 <= DATA <= 10^4",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 5 9 -1 -1 -1 -1",
                        "output": "14",
                        "explanation": "The maximum fun is obtained by selecting rides with fun numbers 5 and 9, resulting in a total fun of 14.  Choosing the root (3) would preclude the adjacent rides (5 and 9)."
                    },
                    {
                        "input": "4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "20",
                        "explanation": "The maximum fun is achieved by selecting rides with fun numbers 1, 3, 5, 7, and 4, summing up to 20."
                    },
                    {
                        "input": "1\n5 4 8 -1 6 1 2 -1 -1 -1 -1 -1 -1",
                        "output": "14",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check all the possible cases by thinking about what if a particular ride is selected or not.</p>",
            "<p>Check all the possible cases by thinking what if particular ride is selected or not and store the value of maxFun if once visited.</p>",
            "<p>Try to think in bottom up DP approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}