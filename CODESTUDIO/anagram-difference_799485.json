{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8015,
            "title": "Anagram Difference",
            "titleSlug": "anagram-difference_799485",
            "content": "<h4 id=\"you-have-been-given-two-strings-lets-say-str1-and-str2-of-equal-lengths-you-are-supposed-to-return-the-minimum-number-of-manipulations-required-to-make-the-two-strings-anagrams\">You have been given two strings, let&#39;s say &#39;STR1&#39; and &#39;STR2&#39; of equal lengths. You are supposed to return the minimum number of manipulations required to make the two strings anagrams.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase. We can generalise this in string processing by saying that an anagram of a string is another string with the same quantity of each character in it, in any order.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>String \u201ceat\u201d and \u201cate\u201d are anagram to each other but string \u201cbuy\u201d and \u201cbye\u201d are not.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39;, which denotes the number of test cases. \n\nThe first line of each test case contains the first string &#39;STR1&#39; having lowercase English alphabets.\n\nThe second line of each test case contains the second string &#39;STR2&#39; having lowercase English alphabets.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an integer denoting the minimum number of manipulations required to make &#39;STR1&#39; and &#39;STR2&#39; strings anagram.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print the output, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1&lt;= T &lt;= 100\n1&lt;= N &lt;= 5*10^3\n\nWhere &#39;N&#39; is the length of strings &#39;STR1&#39; and &#39;STR2&#39;.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\nexcept\naccept\nbuy\nbye\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation Of Sample Output 1 :</h5>\n\n<pre><code>In test case 1, we can change two character of  &#39;STR1&#39; i.e. {&#39;e&#39;,&#39;x&#39;} to {&#39;a&#39;,&#39;c&#39;} or we can change two character of  &#39;STR2&#39; i.e. {&#39;a&#39;,&#39;c&#39;} to {&#39;e&#39;,&#39;x&#39;}, to make string anagram. So the minimum number of manipulations to make &#39;STR1&#39; and  &#39;STR2&#39; to anagram string will be 2.\n\nIn test case 2, we can change one character of  &#39;STR1&#39; i.e. {&#39;u&#39;} to {&#39;e&#39;} or we can change one character of  &#39;STR2&#39; i.e. {&#39;e&#39;} to {&#39;u&#39;}, to make string anagram. So the minimum number of manipulations to make  &#39;STR1&#39; and &#39;STR2&#39; to anagram string will be 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nmail\nmale\nninja\nninja\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation Of Sample Output 2 :</h5>\n\n<pre><code>In test case 1, we can change one character of  &#39;STR1&#39; i.e. {&#39;i&#39;} to {&#39;e&#39;} or we can change one character of  &#39;STR2&#39; i.e. {&#39;e&#39;} to {&#39;i&#39;}, to make string anagram. So the minimum number of manipulations to make  &#39;STR1&#39; and  &#39;STR2&#39; to anagram string will be 1.\n\nIn test case 2, both strings are already anagram. So we do not need to do any manipulation. So the minimum number of manipulations to make  &#39;STR1&#39; and  &#39;STR2&#39; to anagram string will be 0.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 33,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, STR1 and STR2, of equal length, determine the minimum number of character manipulations (replacements) required to make them anagrams. An anagram is a rearrangement of the letters of a word or phrase to produce a new word or phrase, using all the original letters exactly once.  Essentially, two strings are anagrams if they contain the same frequency of each character.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 5 * 10^3 (Length of strings STR1 and STR2)",
                    "Strings STR1 and STR2 contain only lowercase English alphabets.",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "except\naccept",
                        "output": "2",
                        "explanation": "To make 'except' an anagram of 'accept', we need to change two characters (e.g., 'e' to 'a' and 'x' to 'c'). Similarly, to make 'accept' an anagram of 'except', we need to make two changes (e.g., 'a' to 'e' and 'c' to 'x'). Therefore, the minimum number of manipulations required is 2."
                    },
                    {
                        "input": "buy\nbye",
                        "output": "1",
                        "explanation": "To make 'buy' an anagram of 'bye', we can change 'u' to 'e'. Similarly, to make 'bye' an anagram of 'buy', we can change 'e' to 'u'. Therefore, the minimum number of manipulations needed is 1."
                    },
                    {
                        "input": "mail\nmale",
                        "output": "1",
                        "explanation": "To make 'mail' an anagram of 'male', we can change 'i' to 'e'. Similarly, to make 'male' an anagram of 'mail', we can change 'e' to 'i'.  Thus, the minimum number of manipulations is 1."
                    },
                    {
                        "input": "ninja\nninja",
                        "output": "0",
                        "explanation": "The strings 'ninja' and 'ninja' are already anagrams of each other (they are identical), so no manipulations are required."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>How can you find that any character of \u201cstr1\u201d does not exist in \u201cstr2\u201d?</p>",
            "<p>How can you speed up to check whether any character of the first string exists in the second string with using some extra space?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}