{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8405,
            "title": "Anagram Substring Search",
            "titleSlug": "anagram-substring-search_873350",
            "content": "<h4 id=\"given-two-strings-str-and-ptr-find-all-the-starting-indices-of-ptr-anagram-substring-in-str-two-strings-are-anagram-if-and-only-if-one-string-can-be-converted-into-another-string-by-rearranging-the-character\">Given two strings \u2018STR\u2019 and \u2018PTR\u2019. Find all the starting indices of \u2018PTR\u2019 anagram substring in \u2018STR\u2019. Two strings are anagram if and only if one string can be converted into another string by rearranging the character.</h4>\n\n<h4 id=\"for-example-abcd-and-acbd-are-two-anagram-strings-because-acbd-can-be-converted-into-abcd-by-rearranging-the-b-and-c-aba-and-abb-are-not-anagram-because-we-can-t-convert-aba-to-abb-by-rearranging-the-characters-of-particular-strings\">For example, \u2018ABCD\u2019 and \u2018ACBD\u2019 are two anagram strings because \u2018ACBD\u2019 can be converted into \u2018ABCD\u2019 by rearranging the \u2018B\u2019 and \u2018C\u2019. \u2019ABA\u2019 and \u2018ABB\u2019 are not anagram because we can\u2019t convert \u2018ABA\u2019 to \u2018ABB\u2019 by rearranging the characters of particular strings.</h4>\n\n<h4 id=\"abacd-and-cabad-are-anagram-because-abacd-can-be-converted-into-cabad-by-rearranging-the-first-a-with-c-and-second-a-with-b\">\u2018ABACD\u2019 and \u2018CABAD\u2019 are anagram because \u2018ABACD\u2019 can be converted into \u2018CABAD\u2019 by rearranging the first \u2018A\u2019 with \u2018C\u2019 and second \u2018A\u2019 with \u2018B\u2019.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Strings \u2018STR\u2019 and \u2018PTR\u2019 consist only of English uppercases.\n\nLength of string \u2018STR\u2019 will always be greater than or equal to the length of string \u2018PTR\u2019.\n\nThe index is \u20180\u2019 based.\n\nIn case, there is no anagram substring then return an empty sequence.\n</code></pre>\n\n<h4 id=\"explanation\">Explanation:</h4>\n\n<pre><code>For example, the given \u2018STR\u2019 is \u2018BACDGABCD\u2019 and \u2018PTR\u2019 is \u2018ABCD\u2019. Indices are given\n\n0-3 in \u2018STR\u2019 index 0,1,2,3 are \u2018BACD\u2019 and it is an anagram with \u2018ABCD\u2019\n1-4 in \u2018STR\u2019 index 1,2,3,4 are \u2018ACDG\u2019 and it is not anagram with \u2018ABCD\u2019\n2-5 in \u2018STR\u2019 index 2,3,4,5 are \u2018CDGA\u2019 and it is not anagram with \u2018ABCD\u2019\n3-6 in \u2018STR\u2019 index 3,4,5,6 are \u2018DGAB\u2019 and it is not anagram with \u2018ABCD\u2019\n4-7 in \u2018STR\u2019 index 4,5,6,7 are \u2018GABC\u2019 and it is not anagram with \u2018ABCD\u2019\n5-8 in \u2018STR\u2019 index 5,6,7,8 are \u2018ABCD\u2019 and it is an anagram with \u2018ABCD\u2019\n\nHence there are 2 starting indices of substrings in the string \u2018STR\u2019 that are anagram with given \u2018PTR\u2019  which are index 0 and 5.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe next \u20183*T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of each test case contains two integers \u2018N\u2019 and \u2018M\u2019. Where \u2018N\u2019 denotes the number of characters in \u2018STR\u2019 and \u2018M\u2019 denotes the number of characters in \u2018PTR\u2019.\n\nThe second line of each test case contains the string \u2018STR\u2019 on a separate line . \n\nThe third line of each test case contains the string \u2018PTR\u2019 on a separate line. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, print a sequence of all the starting indices of the anagram substrings present in the given word/string \u2018STR\u2019.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 50\n1 &lt;= &#39;N&#39;, &#39;M&#39; &lt;= 10 ^ 4\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 denotes the number of characters in the first given string \u2018STR\u2019 and \u2018M\u2019 denotes the number of characters in the second given string \u2018PTR\u2019. Strings \u2018STR\u2019 and \u2018PTR\u2019 only consist of English uppercase alphabets.\n\nTime limit: 1 second.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n10 3\nCBAEBABACD\nABC\n5 2\nABADE\nBA\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0 6\n0 1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1::</h5>\n\n<pre><code>Test Case 1:\n\n\u2018str\u2019 is \u2018CBAEBABACD\u2019 and \u2018ptr\u2019 is \u2018ABC\u2019\n\n0-2 in \u2018str\u2019 index 0,1,2 are \u2018CBA\u2019 and it is an anagram with \u2018ABC\u2019\n1-3 in \u2018str\u2019 index 1,2,3 are \u2018BAE\u2019 and it is not anagram with \u2018ABC\u2019\n2-4 in \u2018str\u2019 index 2,3,4 are \u2018AEB\u2019 and it is not anagram with \u2018ABC\u2019\n3-5 in \u2018str\u2019 index 3,4,5 are \u2018EBA\u2019 and it is not anagram with \u2018ABC\u2019\n4-6 in \u2018str\u2019 index 4,5,6 are \u2018BAB\u2019 and it is not anagram with \u2018ABC\u2019\n5-7 in \u2018str\u2019 index 5,6,7 are \u2018ABA\u2019 and it is not anagram with \u2018ABC\u2019\n6-8 in \u2018str\u2019 index 6,7,8 are \u2018BAC\u2019 and it is an anagram with \u2018ABC\u2019\n7-9 in \u2018str\u2019 index 7,8,9 are \u2018ACD\u2019 and it is not anagram with \u2018ABC\u2019\n\nHence there are only two anagram substrings in the given string \u2018str\u2019  that are anagram with given string  \u2018ptr\u2019 which are \u2018CBA\u2019 and \u2018BAC\u2019 and starting indices of respective anagram substrings are 0 and 6.\n\n\nTest case 2:\n\n\u2018str\u2019 is \u2018ABADE\u2019 and \u2018ptr\u2019 is \u2018BA\u2019.\n\nIn the given string \u2018ABADE\u2019 the substring of length 2 starting with index 0 is \u2018AB\u2019 which is an anagram with the string \u2018BA\u2019 and a substring of length 2 starting with index 1 is \u2018BA\u2019 which is also an anagram with the string \u2018BA\u2019. Because 0 and 1 are starting indices of the substrings, we return 0 and 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n10 4\nBACDGABCDA\nABCD\n7 1\nABABABA\nA\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0 5 6\n0 2 4 6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 16,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'str' of length 'n' and a pattern string 'ptn' of length 'm', both consisting of uppercase English letters, find all starting indices in 'str' where an anagram of 'ptn' exists as a substring. Return a vector containing these indices. Anagrams are strings that contain the same characters, possibly in a different order.",
                "constraints": [
                    "1 <= 'T' <= 50, where 'T' is the number of test cases.",
                    "1 <= 'N', 'M' <= 10^4, where 'N' is the length of 'str' and 'M' is the length of 'ptn'.",
                    "Strings 'str' and 'ptn' only consist of English uppercase alphabets."
                ],
                "testcases": [
                    {
                        "input": "n = 10, m = 3, str = \"CBAEBABACD\", ptn = \"ABC\"",
                        "output": "0 6",
                        "explanation": "Anagrams of 'ABC' exist at indices 0 ('CBA') and 6 ('BAC') in 'CBAEBABACD'."
                    },
                    {
                        "input": "n = 5, m = 2, str = \"ABADE\", ptn = \"BA\"",
                        "output": "0 1",
                        "explanation": "Anagrams of 'BA' exist at indices 0 ('AB') and 1 ('BA') in 'ABADE'."
                    },
                    {
                        "input": "n = 10, m = 4, str = \"BACDGABCDA\", ptn = \"ABCD\"",
                        "output": "0 5 6",
                        "explanation": "Anagrams of 'ABCD' exist at indices 0 ('BACD'), 5 ('ABCD') and 6 ('BCDA') in 'BACDGABCDA'."
                    },
                    {
                        "input": "n = 7, m = 1, str = \"ABABABA\", ptn = \"A\"",
                        "output": "0 2 4 6",
                        "explanation": "Anagrams of 'A' exist at indices 0, 2, 4 and 6 in 'ABABABA'."
                    },
                    {
                        "input": "n = 9, m = 4, str = \"ABCCABCCA\", ptn = \"ABCC\"",
                        "output": "0 4 5",
                        "explanation": "Anagrams of 'ABCC' exist at indices 0 ('ABCC'), 4 ('ABCC') and 5 ('BCCA') in 'ABCCABCCA'."
                    },
                    {
                        "input": "n = 5, m = 5, str = \"ABCDE\", ptn = \"EABCD\"",
                        "output": "0",
                        "explanation": "'ABCDE' is an anagram of 'EABCD' and starts at index 0."
                    },
                    {
                        "input": "n = 7, m = 4, str = \"AAABBBC\", ptn = \"ABCA\"",
                        "output": "0",
                        "explanation": "'AAAB' is anagram of 'ABCA' and starts at index 0."
                    },
                    {
                        "input": "n = 6, m = 3, str = \"ADBCDFF\", ptn = \"ABC\"",
                        "output": "1",
                        "explanation": "Starting index 1 is 'DBC' , after sorting its 'BCD'. The ptn is 'ABC'. Both are anagrams."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try checking for one substring at a time</p>",
            "<p>Try to store the frequency of characters.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}