{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8836,
            "title": "Ancestors",
            "titleSlug": "ancestors_920386",
            "content": "<h4 id=\"you-are-given-a-binary-tree-with-n-number-of-nodes-and-a-node-k-your-task-is-to-print-a-list-of-all-the-ancestors-of-the-given-node-k-in-reverse-order-lowest-ancestor-first\">You are given a binary tree with \u2018N\u2019 number of nodes and a node \u2018K\u2019.Your task is to print a list of all the ancestors of the given node \u2018K\u2019 in reverse order (lowest ancestor first).</h4>\n\n<h4 id=\"a-binary-tree-is-a-hierarchical-data-structure-in-which-each-node-has-at-most-two-children\">A binary tree is a hierarchical data structure in which each node has at most two children.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<p><img src=\"https://files.codingninjas.in/ancestors1-11000.png\" alt=\"\"></p>\n\n<pre><code>Here, for \u2018k\u2019 = 7, the output will be 14 12 10.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an Integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nThe second line of each test case contains a single integer \u2018k\u2019, denoting the value of the node whose ancestors you have to found.\n\nThe given node may not be present in the tree. But it is guaranteed that there will be a maximum of one node with the value \u2018k\u2019.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-10999.png\" alt=\"\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n\nNote: The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a list of integers denoting the ancestors of the given node in reverse order(lowest ancestor first). If the node is not present in the tree, then return -1.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5 * 10^3\n0 &lt;= X &lt;= 10^9\n\nWhere \u2018X\u2019 is the value at the node.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n19 17 32 11 -1 -1 -1 25 -1 -1 -1\n11\n15 2 6 9 8 27 11 -1 -1 -1 -1 -1 -1 -1 -1\n9\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>17 19\n2 15\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case, the tree will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/ancestors2-11001.png\" alt=\"\"></p>\n\n<pre><code>Here, for \u2018k\u2019 = 11, the output will be 17 19.\n\nFor the second test case, the tree will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/ancestors3-11002.png\" alt=\"\"></p>\n\n<pre><code>Here, for \u2018k\u2019 = 9, the output will be 2 15.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 3 5 4 -1 -1 -1 -1 -1\n4\n17 25 99 54 61 11 -1 -1 -1 -1 -1 -1 -1\n11\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3 1\n99 17\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree represented by its root node and a target node value 'k', find and return a list of the ancestors of node 'k' in reverse order (from the lowest ancestor to the root). If the node 'k' is not present in the tree, return a list containing only -1.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 5 * 10^3",
                    "0 <= X <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "root = [19, 17, 32, 11, -1, -1, -1, 25, -1, -1, -1], k = 11",
                        "output": "[17, 19]",
                        "explanation": "The ancestors of node 11 are 17 and 19 (in reverse order)."
                    },
                    {
                        "input": "root = [15, 2, 6, 9, 8, 27, 11, -1, -1, -1, -1, -1, -1, -1, -1], k = 9",
                        "output": "[2, 15]",
                        "explanation": "The ancestors of node 9 are 2 and 15 (in reverse order)."
                    },
                    {
                        "input": "root = [1, 3, 5, 4, -1, -1, -1, -1, -1], k = 4",
                        "output": "[3, 1]",
                        "explanation": "The ancestors of node 4 are 3 and 1 (in reverse order)."
                    },
                    {
                        "input": "root = [17, 25, 99, 54, 61, 11, -1, -1, -1, -1, -1, -1, -1], k = 11",
                        "output": "[99, 17]",
                        "explanation": "The ancestors of node 11 are 99 and 17 (in reverse order)."
                    },
                    {
                        "input": "root = [1, 2, 3, 4, -1, 5, 6, -1, 7, -1, -1, -1, -1, -1, -1], k = 7",
                        "output": "[4, 2, 1]",
                        "explanation": "The ancestors of node 7 are 4, 2 and 1 (in reverse order)."
                    },
                    {
                        "input": "root = [1,2,3,4,5,6,7], k = 8",
                        "output": "[-1]",
                        "explanation": "Node 8 is not present in tree, so return -1"
                    },
                    {
                        "input": "root = [1], k = 1",
                        "output": "[]",
                        "explanation": "Node 1 is root node, so there is no ancestor present."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse the tree and check which node should be printed.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}