{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15732,
            "title": "Anish and Stacks",
            "titleSlug": "anish-and-stacks_2687877",
            "content": "<h4 id=\"anish-has-become-very-attentive-in-his-data-structures-classes-now-his-teacher-has-given-the-assignment-to-implement-n-stacks-in-a-single-array-of-length-l-since-he-has-been-very-inattentive-in-his-data-structure-classes-he-can-t-solve-the-problem-on-his-own-can-you-help-him-out\">Anish has become very attentive in his data structures classes. Now his teacher has given the assignment to implement N stacks in a single array of length L. Since he has been very inattentive in his data structure classes, he can\u2019t solve the problem on his own. Can you help him out?</h4>\n\n<h5 id=\"example\">Example:-</h5>\n\n<pre><code>Let, \n\nN = 5\nL = 10\n1 1 3 [PUSH (1 ,4)]\n1 1 4 [PUSH (1 ,3)] \n2 1 [POP(1)] \n2 2 2 [PUSH(2,2)] \n2 2 [POP(2)]\n\nAnswer:- [0, 0, 4, 0, 2]\n (The first stack has 4 and 3 so 4 is popped out from stack 1 and stack 2 has integer 2 in it, so 2 is popped out from stack 2) .\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. Then each test case follows.\n\nThe first line of each test case contains three integers \u2018L\u2019, \u2018N\u2019, and \u2018Q\u2019 denoting the number of stacks to be implemented and the number of queries to be performed.\n\nThe next \u2018Q\u2019 lines of every test case contain 3 integers \u2018A\u2019, \u2018B\u2019, and \u2018C\u2019 denoting the type of operation, the stack number on which the operation is to be achieved, and the number to be pushed if \u2018A\u2019 is 1.\n\nThe next \u2018Q\u2019 lines of every test case contain 2 integers \u2018A\u2019, and \u2018B\u2019 denoting the type of operation, and the stack number on which the operation is to be achieved if &#39;A&#39; is 2.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print an integer denoting the number popped out if \u2018A\u2019 is 2 if there exists a number in the stack otherwise print -1. If \u2018A\u2019 is 1, if the push operation is successful, print 0, otherwise print -1 if the stack is full.\n\nThe output of each test case should be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything, it has already been taken care of. Just implement the function.    \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= L &lt;= 10^5\n1 &lt;= N &lt;= 10^5\n1 &lt;= Q &lt;= 10^5\n1 &lt;= A &lt;= 2\n1 &lt;= B &lt;= N\n1 &lt;= C &lt;= 10^9  \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n10 1 5\n1 1 1\n1 1 3\n2 1\n2 1\n2 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>0\n0\n3\n1\n-1 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1 :</h5>\n\n<pre><code>In the first two operations, the answer should be 0 because the push operations are performed successfully. Then for the next two operations, the numbers 3 and 1 are popped out and they are printed. In the last operation, -1 is printed because the stack is already empty.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n10 2 1\n2 2 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement N stacks within a single array of length L.  Given a series of push and pop operations on these stacks, simulate the operations and return the appropriate output for each operation. For push operations, return 0 if successful and -1 if the stack is full (considering all N stacks share the L-sized array). For pop operations, return the popped element if the stack is non-empty, and -1 otherwise.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= L <= 10^5",
                    "1 <= N <= 10^5",
                    "1 <= Q <= 10^5",
                    "Queries are provided as a vector of vectors, where the first element indicates the operation type (1 for push, 2 for pop). Push operations will have format [1, stack_number, value_to_push], and pop operations will have format [2, stack_number]."
                ],
                "testcases": [
                    {
                        "input": "l = 10, n = 1, q = 5, queries = [[1, 1, 3], [1, 1, 4], [2, 1], [2, 1], [2, 1]]",
                        "output": "0\n0\n4\n3\n-1",
                        "explanation": "Stack 1: Push 3. Push 4. Pop returns 4. Pop returns 3. Pop returns -1 (stack empty)."
                    },
                    {
                        "input": "l = 10, n = 5, q = 5, queries = [[1, 1, 3], [1, 1, 4], [2, 1], [1, 2, 2], [2, 2]]",
                        "output": "0\n0\n4\n0\n2",
                        "explanation": "Stack 1: Push 3, Push 4, Pop returns 4.\nStack 2: Push 2, Pop returns 2."
                    },
                    {
                        "input": "l = 10, n = 2, q = 1, queries = [[2, 2]]",
                        "output": "-1",
                        "explanation": "Stack 2: Pop from empty stack returns -1."
                    },
                    {
                        "input": "l = 3, n = 1, q = 4, queries = [[1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 1, 4]]",
                        "output": "0\n0\n0\n-1",
                        "explanation": "Single stack of size 3. Push 1, Push 2, Push 3 (stack full), Push 4 returns -1."
                    },
                    {
                        "input": "l = 2, n = 2, q = 4, queries = [[1, 1, 1], [1, 2, 2], [2, 1], [2, 2]]",
                        "output": "0\n0\n1\n2",
                        "explanation": "Stack 1: Push 1. Stack 2: Push 2. Stack 1: Pop returns 1. Stack 2: Pop returns 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>Make equal divisions and perform normal operations on them.</strong></p>",
            "<p><strong>Store the top element of every stack and the next free index of every index</strong></p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}