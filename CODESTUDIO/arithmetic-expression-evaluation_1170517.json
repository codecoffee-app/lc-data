{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10154,
            "title": "Arithmetic Expression Evaluation",
            "titleSlug": "arithmetic-expression-evaluation_1170517",
            "content": "<h4 id=\"you-are-given-a-string-expression-consists-of-characters-and-0-to-9-that-represents-an-arithmetic-expression-in-infix-notation-your-task-is-to-evaluate-this-arithmetic-expression\">You are given a string \u2018expression\u2019 consists of characters \u2018+\u2019, \u2018-\u2019, \u2018*\u2019, \u2018/\u2019, \u2018(\u2018, \u2018)\u2019 and  \u20180\u2019 to \u20189\u2019,  that represents an Arithmetic Expression in Infix Notation.  Your task is to evaluate this Arithmetic Expression.</h4>\n\n<h4 id=\"in-infix-notation-operators-are-written-in-between-their-operands\">In Infix Notation, operators are written in-between their operands.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. We consider the \u2018/\u2019 operator as the floor division.\n\n2. Operators \u2018*\u2019 and \u2018/\u2019 expression has higher precedence over operators\u2018+\u2019 and \u2018-\u2019 \n\n3. String expression always starts with \u2018(\u2018 and ends with \u2018)\u2019.\n\n4. It is guaranteed that \u2018expression\u2019 represents\u2019 a valid expression in Infix notation.\n\n5. It is guaranteed that there will be no case that requires division by 0.\n\n6. No characters other than those mentioned above are present in the string. \n\n7. It is guaranteed that the operands and final result will fit in a 32-bit integer.\n</code></pre>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>Consider string \u2018expression\u2019 = \u2018((2+3)*(5/2))\u2019. \nThen it\u2019s value after evaluation will be ((5)*(2)) = 10. \n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next T lines represent the \u2018T\u2019 test cases.\n\nThe first and only line of each test case contains the string \u2018expression\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, in a separate line print an integer representing the value of the given arithmetic expression after evaluation.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n3 &lt;= |expression| &lt;= 10^4\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n(2)\n((2+3)*(5/2))\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n10\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>Test case 1 :\nThe value of the expression \u201c(2)\u201d will be 2 after evaluation.\n\nTest case 2 :\nSee the problem statement for an explanation.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n(121+(101+0))\n(3*(5+2)*(10-7))\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>222\n63\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 14,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a string 'expression' representing an arithmetic expression in infix notation. The expression consists of characters '+', '-', '*', '/', '(', ')' and digits '0' to '9'. Your task is to evaluate this expression and return the result.\n\nOperators have the following precedence:\n*   '*' and '/' have higher precedence than '+' and '-'.\n*   '/' represents floor division.\n\nThe expression will always start with '(' and end with ')', and it is guaranteed to be a valid infix expression. Division by zero will not occur, and the operands and final result will fit in a 32-bit integer.",
                "constraints": [
                    "1 <= T <= 50",
                    "3 <= |expression| <= 10^4",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "(2)",
                        "output": "2",
                        "explanation": "The expression '(2)' evaluates to 2."
                    },
                    {
                        "input": "((2+3)*(5/2))",
                        "output": "10",
                        "explanation": "The expression '((2+3)*(5/2))' evaluates as follows: (2+3) = 5, (5/2) = 2 (floor division), (5*2) = 10."
                    },
                    {
                        "input": "(121+(101+0))",
                        "output": "222",
                        "explanation": "The expression '(121+(101+0))' evaluates as follows: (101+0) = 101, (121+101) = 222."
                    },
                    {
                        "input": "(3*(5+2)*(10-7))",
                        "output": "63",
                        "explanation": "The expression '(3*(5+2)*(10-7))' evaluates as follows: (5+2) = 7, (10-7) = 3, (3*7*3) = 63."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Convert the given expression into &nbsp;Reverse Polish Notation (Postfix Expression).</p>"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}