{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7542,
            "title": "Arithmetic Progression Queries",
            "titleSlug": "arithmetic-progression-queries_696448",
            "content": "<h4 id=\"given-an-integer-array-arr-of-size-n-the-following-operations-need-to-be-performed\">Given an integer array(ARR) of size N, the following operations need to be performed:</h4>\n\n<pre><code>update(l, r, val) : Add (val + i) to arr[l + i] where, 0 &lt;= i &lt;= r - l.\n\nrangeSum(l, r): return the sum of all elements in the array from index l to r, i.e., the sum of array arr[l...r].\n</code></pre>\n\n<h4 id=\"two-type-of-queries-denote-these-operations\">Two type of queries denote these operations:</h4>\n\n<pre><code>Type 1: for update(l, r, val) operation.\nType 2: for rangeSum(l, r) operation.\n\nNote: (1 based indexing) for the queries.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains two space-separated integers N and Q, denoting the size of the input array and the number of operations to be performed, respectively.\n\nThe next Q lines contain operations, one per line. Each operation starts with an integer which represents the type of operation. \n\nIf it is 1, then it is of the first type and is followed by three single space-separated integers l, r, val(in this order). \n\nIf it is 2, it is of the second type and is followed by two single space-separated integers l r(in this order). The meanings of l, r, and val are well explained in the statement.    \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each operation of type 2, print an integer on the single line - the sum of the arr[l..r].\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You are not required to print anything, and it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^5\n1 &lt;= Q &lt;= 10^5\n1 &lt;= l &lt;= r &lt;= N\n0 &lt;= val &lt;= 10^6\n0 &lt;= arr[i] &lt;= 10^6\n\nwhere &#39;N&#39; is the size of the array, &#39;Q&#39; is the number of queries, and arr[i] denotes the ith element of the array.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4 4\n1 1 1 0\n2 1 4\n1 4 4 1\n2 3 4\n2 1 2 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n2\n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>In the first query, we have to calculate the sum of elements between indexes 1 and 4. So, the output will be 1 + 1 + 1 + 0 = 3. \n\nIn the second query, we have to increment the element at index 4 with value 1. So the array will be 1, 1, 1, 1.\n\nIn the third query, we have to calculate the sum of elements between indexes 3 and 4. So, the output will be 1 + 1 = 2.\n\n In the fourth query, we have to calculate the sum of elements between indexes 1 and 2. So, the output will be 1 + 1 = 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5 4\n1 2 2 3 3\n1 1 3 2\n2 1 5\n1 1 3 1\n2 3 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>20\n15\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Ninja",
            "likes": 19,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a `NumArray` class to perform updates and range sum queries on an integer array. The class should support the following operations:\n\n*   **`NumArray(vector<int> &arr, int n)`:** Initializes the `NumArray` object with the given array `arr` of size `n`.\n*   **`update(int l, int r, int val)`:** Adds `(val + i)` to `arr[l + i]` for `0 <= i <= r - l`.  Note that the array indices are 0-based within the implementation.\n*   **`rangeSum(int l, int r)`:** Returns the sum of all elements in the array from index `l` to `r` (inclusive). Note that the array indices are 0-based within the implementation.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= Q <= 10^5",
                    "0 <= l <= r < N",
                    "0 <= val <= 10^6",
                    "0 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "n = 4, nums=[1, 1, 1, 0], queries = [[1, 0, 0, 0], [2, 0, 3], [1, 3, 3, 1], [2, 2, 3], [2, 0, 1]]",
                        "output": "3\n2\n2",
                        "explanation": "Initial array: [1, 1, 1, 0]\nQuery 1: Update (0, 0, 0). arr[0] += (0 + 0) = 1. Array: [1, 1, 1, 0]\nQuery 2: rangeSum(0, 3) = 1 + 1 + 1 + 0 = 3\nQuery 3: Update (3, 3, 1). arr[3] += (1 + 0) = 1. Array: [1, 1, 1, 1]\nQuery 4: rangeSum(2, 3) = 1 + 1 = 2\nQuery 5: rangeSum(0, 1) = 1 + 1 = 2"
                    },
                    {
                        "input": "n = 5, nums=[1, 2, 3, 4, 5], queries = [[1, 1, 1, 3], [2, 0, 4], [1, 0, 2, 2], [2, 2, 4]]",
                        "output": "20\n15",
                        "explanation": "Initial array: [1, 2, 3, 4, 5]\nQuery 1: Update (1, 1, 3). arr[1] += (3+0) = 5. Array: [1, 5, 3, 4, 5]\nQuery 2: rangeSum(0, 4) = 1 + 5 + 3 + 4 + 5 = 18. This appears wrong. the example given output is 20. the update is applied from l to r. val + i is added. where 0<=i<=r-l.\nOkay, seems like the original array initialization wasn't done. Considering initial array of zeroes\nInitial Array: [0,0,0,0,0]\nnums = [1,2,3,3,3] (added these elements to initial array)\nQuery 1: update(1, 1, 3) from 1 to 1 with val 3. so for i = 0, a[1+0] += 3+0. a[1] = 2+3 = 5.\nArray = [1, 5, 3, 4, 5]\nQuery 2: rangeSum(0, 4) is 1+5+3+4+5 = 18, not 20.\nnums=[3,3,3,3,3] (re-initialising to 0 and adding these values.)\nQuery 1: update(1, 1, 3) : nums[1+0] += 3+0. nums[1] = 3+3 = 6. \nArray=[3,6,3,3,3]\nQuery 2: rangeSum(0,4) = 3+6+3+3+3 = 18 instead of 20 from the example. this is still wrong. let's execute correctly with initial array of [1,2,3,4,5] \nQuery 1: update(1,1,3) means a[1+0] += (3+0) a[1] = 2 + 3 = 5.\narray = [1,5,3,4,5] sums from 0 to 4 is 1+5+3+4+5 = 18.\nlet's go from array of zeros, initilze them\n[0,0,0,0,0], nums = [1,2,3,4,5]\nQuery 1: Update(1,1,3). Arr[1+0] += (3+0), Array[1] = 2+3 = 5. arr= [1,5,3,4,5]\nQuery 2: Range sum is 1+5+3+4+5 = 18. so their initialisation isn't from zeros. it is directly from given array. going with that.\nquery 3: Update(1,1,3). arr[1+0]+= 1+0, arr[1] = 2+1 = 3. => Not correct again.  going with initial array. UPDATE l and r,  Arr[l+i] += val + i. with [1,2,3,4,5]. and queries array from l to r means we add value from Lth index to Rth index. it appears the initialization part is missing. let's initialize with initial nums\nQuery 1: Update(1,1,3), Arr[1] = Arr[1]+3, Arr[1] = 2+3, ARR = [1,5,3,4,5]. it's starting index not zero indexed.\nQuery 2: rangeSum(1,5), 1+5+3+4+5 = 1+17=18.\nso there is no zero based indexing. all are one-based indexing. meaning the queries must be decremented by 1 each time for proper index assignment"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Iterate over the array to perform both update and range sum operations.</p>",
            "<p>Use the prefix sum technique.</p>",
            "<p>Try to use a data structure that allows maintaining the sum of all possible ranges of an array efficiently and also do the update efficiently, i.e., both operations in logarithmic complexity.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}