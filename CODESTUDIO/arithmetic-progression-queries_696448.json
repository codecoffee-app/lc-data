{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7542,
            "title": "Arithmetic Progression Queries",
            "titleSlug": "arithmetic-progression-queries_696448",
            "content": "<h4 id=\"given-an-integer-array-arr-of-size-n-the-following-operations-need-to-be-performed\">Given an integer array(ARR) of size N, the following operations need to be performed:</h4>\n\n<pre><code>update(l, r, val) : Add (val + i) to arr[l + i] where, 0 &lt;= i &lt;= r - l.\n\nrangeSum(l, r): return the sum of all elements in the array from index l to r, i.e., the sum of array arr[l...r].\n</code></pre>\n\n<h4 id=\"two-type-of-queries-denote-these-operations\">Two type of queries denote these operations:</h4>\n\n<pre><code>Type 1: for update(l, r, val) operation.\nType 2: for rangeSum(l, r) operation.\n\nNote: (1 based indexing) for the queries.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains two space-separated integers N and Q, denoting the size of the input array and the number of operations to be performed, respectively.\n\nThe next Q lines contain operations, one per line. Each operation starts with an integer which represents the type of operation. \n\nIf it is 1, then it is of the first type and is followed by three single space-separated integers l, r, val(in this order). \n\nIf it is 2, it is of the second type and is followed by two single space-separated integers l r(in this order). The meanings of l, r, and val are well explained in the statement.    \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each operation of type 2, print an integer on the single line - the sum of the arr[l..r].\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You are not required to print anything, and it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^5\n1 &lt;= Q &lt;= 10^5\n1 &lt;= l &lt;= r &lt;= N\n0 &lt;= val &lt;= 10^6\n0 &lt;= arr[i] &lt;= 10^6\n\nwhere &#39;N&#39; is the size of the array, &#39;Q&#39; is the number of queries, and arr[i] denotes the ith element of the array.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4 4\n1 1 1 0\n2 1 4\n1 4 4 1\n2 3 4\n2 1 2 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n2\n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>In the first query, we have to calculate the sum of elements between indexes 1 and 4. So, the output will be 1 + 1 + 1 + 0 = 3. \n\nIn the second query, we have to increment the element at index 4 with value 1. So the array will be 1, 1, 1, 1.\n\nIn the third query, we have to calculate the sum of elements between indexes 3 and 4. So, the output will be 1 + 1 = 2.\n\n In the fourth query, we have to calculate the sum of elements between indexes 1 and 2. So, the output will be 1 + 1 = 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5 4\n1 2 2 3 3\n1 1 3 2\n2 1 5\n1 1 3 1\n2 3 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>20\n15\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Ninja",
            "likes": 19,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `ARR` of size `N`, implement the following operations:\n\n*   **update(l, r, val):** Add `(val + i)` to `arr[l + i]` for `0 <= i <= r - l`.\n*   **rangeSum(l, r):** Return the sum of all elements in the array from index `l` to `r`, i.e., the sum of `arr[l...r]`.\n\nThere are two types of queries:\n\n*   **Type 1:** `update(l, r, val)` operation.\n*   **Type 2:** `rangeSum(l, r)` operation.\n\n**Note:** The queries are 1-based indexed.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= Q <= 10^5",
                    "1 <= l <= r <= N",
                    "0 <= val <= 10^6",
                    "0 <= arr[i] <= 10^6",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "4 4\n1 1 1 0\n2 1 4\n1 4 4 1\n2 3 4\n2 1 2",
                        "output": "3\n2\n2",
                        "explanation": "Initially, let's assume ARR = [1, 1, 1, 0].\nQuery 1 (2 1 4): Calculate the sum from index 1 to 4: 1 + 1 + 1 + 0 = 3.\nQuery 2 (1 4 4 1): Update ARR[4] by adding (1 + 0) = 1, making ARR[4] = 0 + 1 = 1. ARR is now [1, 1, 1, 1].\nQuery 3 (2 3 4): Calculate the sum from index 3 to 4: 1 + 1 = 2.\nQuery 4 (2 1 2): Calculate the sum from index 1 to 2: 1 + 1 = 2."
                    },
                    {
                        "input": "5 4\n1 2 2 3 3\n1 1 3 2\n2 1 5\n1 1 3 1\n2 3 5",
                        "output": "20\n15",
                        "explanation": "Initially, let's assume ARR = [1, 2, 3, 3, 0] for calculations. Actual values of initial array are not important and are not given explicitly. First query is of type 1, but it is not array initialization. Input array is given in the body as constraints say '0 <= arr[i] <= 10^6'.\n\nFor easier explanation let us assume ARR = [0, 0, 0, 0, 0].\nQuery 1 (1 2 2 3): Add (3 + 0) to ARR[2] and (3 + 1) to ARR[2]:\nARR becomes [0, 3, 4, 0, 0].\nQuery 2 (1 1 3 2): Add (2 + 0) to ARR[1], (2 + 1) to ARR[2], (2 + 2) to ARR[3]:\nARR becomes [2, 3+3, 4+4, 0+6, 0] i.e., [2, 6, 8, 6, 0].\nQuery 3 (2 1 5): Calculate the sum from index 1 to 5: 2 + 6 + 8 + 6 + 0 = 22. Actually 22.\nQuery 4 (1 1 3 1): Add (1 + 0) to ARR[1], (1 + 1) to ARR[2], (1 + 2) to ARR[3]:\nARR becomes [2 + 1, 6 + 2, 8 + 3, 6 + 4, 0] i.e., [3, 8, 11, 10, 0].\nQuery 5 (2 3 5): Calculate the sum from index 3 to 5: 11 + 10 + 0 = 21. Actually 21.\n\n"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Iterate over the array to perform both update and range sum operations.</p>",
            "<p>Use the prefix sum technique.</p>",
            "<p>Try to use a data structure that allows maintaining the sum of all possible ranges of an array efficiently and also do the update efficiently, i.e., both operations in logarithmic complexity.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}