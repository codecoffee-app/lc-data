{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16971,
            "title": "Arrange Grid",
            "titleSlug": "arrange-grid_3743917",
            "content": "<h4 id=\"one-of-your-friends-started-working-at-a-toy-store-and-today-is-his-first-day-he-gets-a-box-of-some-toys-the-box-looks-like-a-grid-b-consisting-of-n-rows-and-m-columns-and-each-cell-has-exactly-one-toy-his-task-is-to-arrange-these-toys-on-the-shelf-s-in-front-of-him-which-is-empty-the-shelf-has-r-rows-and-c-columns-help-your-friend-to-arrange-the-toys-on-the-shelf-s-in-the-same-row-order-traversal-as-in-the-box-b\">One of your friends started working at a toy store, and today is his first day. He gets a box of some toys. The box looks like a grid &#39;B&#39; consisting of &#39;N&#39; rows and &#39;M&#39; columns, and each cell has exactly one toy. His task is to arrange these toys on the shelf &#39;S&#39; in front of him, which is empty. The shelf has &#39;R&#39; rows and &#39;C&#39; columns. Help your friend to arrange the toys on the shelf &#39;S&#39; in the same row-order traversal as in the box &#39;B&#39;.</h4>\n\n<h4 id=\"you-are-given-the-box-arrangement-of-toys-in-a-matrix-of-size-n-m-where-values-in-the-matrix-are-integers-and-denote-the-ids-of-toys-your-task-is-to-return-a-matrix-of-size-r-c-denoting-the-shelf-arrangement-of-toys\">You are given the box arrangement of toys in a matrix of size &#39;N * M&#39; where values in the matrix are integers and denote the IDs of toys. Your task is to return a matrix of size &#39;R * C&#39; denoting the shelf arrangement of toys.</h4>\n\n<h4 id=\"after-arranging-the-toys-on-the-shelf-s-if-any-toy-remains-in-the-box-or-any-cell-remains-empty-in-the-shelf-return-the-given-box-arrangement\">After arranging the toys on the shelf &#39;S&#39;, if any toy remains in the box or any cell remains empty in the shelf, return the given box arrangement.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>N = 2\nM = 2\nB = [ [1, 2], [3, 4] ]\nR = 1\nC = 4\n\nBoth arrangements (box and shelf) are shown below:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000575_1641210879_arrange-grid.png\" alt=\"\"></p>\n\n<pre><code>Return [ [1, 2, 3, 4] ] as our final answer.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39;, denoting the number of test cases.\nThen the test cases follow:\n\nThe first line of each test case contains two space-separated integers, &#39;N&#39; and &#39;M&#39;, denoting the number of rows and columns in the box &#39;B&#39;, respectively.\n\nThe following &#39;N&#39; lines contain &#39;M&#39; integers, denoting the toys&#39; IDs in box &#39;B&#39;.\n\nNext line contains two space-separated integers, &#39;R&#39; and &#39;C&#39;, denoting the number of rows and columns in the shelf &#39;S&#39;, respectively.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a matrix of size &#39;R*C&#39; denoting the toy&#39;s arrangement on the shelf &#39;S&#39;.\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print the expected output. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 10\n1 &lt;= &#39;N&#39;, &#39;M&#39;, &#39;R&#39;, &#39;C&#39; &lt;= 100\n-10^3 &lt;= &#39;B[i][j]&#39; &lt;= 10^3\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2 4\n5 0 3 2\n1 5 5 3\n4 2\n3 3\n3 2 6\n1 2 3\n5 1 9\n2 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>5 0\n3 2\n1 5\n5 3\n3 2 6\n1 2 3\n5 1 9\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>For test case 1:\nGiven matrix &#39;B&#39; is [ [5, 0, 3, 2], [1, 5, 5, 3] ]. Converting it to a matrix of size 4*2 will look as &#39;S&#39; = [ [5, 0], [3, 2], [1, 5], [5, 3] ].\n\nFor test case 2:\nAfter arrangement on the shelf, one toy (with toy ID = 9) remains in the box. Shown in the below image.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000576_1641298748_arrange-grid-2.png\" alt=\"\"></p>\n\n<pre><code>Hence return the given matrix &#39;B&#39; as the final answer.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 3\n4 -1 3\n2 2 -2\n1 3 1\n3 5\n3 4\n5 2 4 7\n6 3 4 2\n3 7 5 6\n2 6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4 -1 3\n2 2 -2\n1 3 1\n5 2 4 7 6 3\n4 2 3 7 5 6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a box represented as a 2D grid 'B' of size N x M, where each cell contains the ID of a toy, arrange these toys onto a shelf 'S' of size R x C in row-major order (left to right, top to bottom). If all toys from the box can be placed on the shelf without any leftovers, return the shelf arrangement. If either some toys remain in the box after filling the shelf, or the shelf has empty spaces after placing all toys, return the original box arrangement 'B'.",
                "constraints": [
                    "1 <= N, M, R, C <= 100",
                    "-1000 <= B[i][j] <= 1000",
                    "1 <= T <= 10"
                ],
                "testcases": [
                    {
                        "input": "n = 2, m = 2, b = [[1, 2], [3, 4]], r = 1, c = 4",
                        "output": "[[1, 2, 3, 4]]",
                        "explanation": "The toys from the 2x2 box can be arranged perfectly on the 1x4 shelf."
                    },
                    {
                        "input": "n = 2, m = 4, b = [[5, 0, 3, 2], [1, 5, 5, 3]], r = 4, c = 2",
                        "output": "[[5, 0], [3, 2], [1, 5], [5, 3]]",
                        "explanation": "The toys from the 2x4 box can be arranged perfectly on the 4x2 shelf."
                    },
                    {
                        "input": "n = 3, m = 3, b = [[3, 2, 6], [1, 2, 3], [5, 1, 9]], r = 2, c = 4",
                        "output": "[[3, 2, 6], [1, 2, 3], [5, 1, 9]]",
                        "explanation": "The shelf (2x4) is smaller than the box(3x3). After placing 8 toys the 9th toy remains in the box therefore returning the box."
                    },
                    {
                        "input": "n = 3, m = 4, b = [[5, 2, 4, 7], [6, 3, 4, 2], [3, 7, 5, 6]], r = 2, c = 6",
                        "output": "[[5, 2, 4, 7], [6, 3, 4, 2], [3, 7, 5, 6]]",
                        "explanation": "The box has size 3x4 = 12 and the shelf has size 2x6 = 12. However to arrange the toys we have to return box in this case."
                    },
                    {
                        "input": "n = 3, m = 3, b = [[4, -1, 3], [2, 2, -2], [1, 3, 1]], r = 3, c = 5",
                        "output": "[[4, -1, 3], [2, 2, -2], [1, 3, 1]]",
                        "explanation": "The shelf is larger (3x5 = 15) than the number of toys (3x3 = 9).  Therefore, returning the box."
                    },
                    {
                        "input": "n = 1, m = 1, b = [[5]], r = 2, c = 2",
                        "output": "[[5]]",
                        "explanation": "The shelf is larger (2x2 = 4) than the number of toys (1x1 = 1).  Therefore, returning the box."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Do you know how to map 1-d indices into 2-d and vice versa?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}