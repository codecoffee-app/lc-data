{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10181,
            "title": "Arranging Amplifiers",
            "titleSlug": "arranging-amplifiers_1171045",
            "content": "<h4 id=\"given-an-array-of-size-n-containing-n-integers-find-out-in-what-order-should-the-elements-be-organized-such-that-the-function-f-i-a-i-1-a-i-is-maximum-for-0-i-n-1\">Given an array of size N, containing N integers. Find out in what order should the elements be organized such that the function F(i) = a[i+1] ^ a[i] is maximum for 0 &lt;= i &lt;= N - 1.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains T, the number of test cases. \n\nFor each test case, the first line contains a number \u2018N\u2019, which is the size of the array.\nThe next line contains N space-separated integers, that denote the values of the elements in the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The output of each test case contains \u2018N\u2019 integers, denoting the order in which the elements should be kept such that the result is largest.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 3000\n1 &lt;= data &lt;= 10^5\n\nwhere \u2018T\u2019 is the number of test cases, N is the number of elements in the array. \n\nTime Limit : 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n3\n5 4 6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>6 5 4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>This is because ( 4 ^ (5 ^ 6) ) is the greatest value when compared to any other permutations.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n2\n2 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2 3 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 71,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of N integers, rearrange the elements to maximize the sum of XOR values between adjacent elements. Specifically, the goal is to find a permutation of the input array such that the sum of a[i+1] ^ a[i] for all 0 <= i < N-1 is maximized.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 3000",
                    "1 <= data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr=[5, 4, 6]",
                        "output": "[6, 5, 4]",
                        "explanation": "The permutation [6, 5, 4] maximizes the sum of XOR values: (5 ^ 6) + (4 ^ 5) = 3 + 1 = 4. Other permutations yield smaller sums.  For example, [5, 4, 6] gives (4 ^ 5) + (6 ^ 4) = 1 + 2 = 3, and [5, 6, 4] gives (6 ^ 5) + (4 ^ 6) = 3 + 2 = 5, [4,5,6] gives (5^4) + (6^5) = 1+3 = 4, [4,6,5] gives (6^4) + (5^6) = 2 + 3 = 5, [6,4,5] gives (4^6) + (5^4) = 2+1 = 3."
                    },
                    {
                        "input": "arr=[2, 3]",
                        "output": "[2, 3]",
                        "explanation": "For N=2, there are only two possible permutations: [2, 3] and [3, 2]. In this case 2 ^ 3 is equal to 3 ^ 2 so both permutations are valid and [2,3] can be the answer. Since 2^3 = 1, both yield same result."
                    },
                    {
                        "input": "arr=[1, 2, 3, 4]",
                        "output": "[4, 2, 1, 3]",
                        "explanation": "One possible optimal arrangement is [4, 2, 1, 3].  The XOR sums are (2^4) + (1^2) + (3^1) = 6 + 3 + 2 = 11. Note that there might be other valid permutations as well, yielding the same maximum sum."
                    },
                    {
                        "input": "arr=[7, 2, 9, 1]",
                        "output": "[9, 7, 2, 1]",
                        "explanation": "One possible optimal arrangement is [9, 7, 2, 1]. The XOR sums are (7^9) + (2^7) + (1^2) = 2 + 5 + 3 = 10."
                    },
                    {
                        "input": "arr=[10, 5, 15, 1]",
                        "output": "[15, 10, 5, 1]",
                        "explanation": "One possible optimal arrangement is [15, 10, 5, 1]. The XOR sums are (10^15) + (5^10) + (1^5) = 5 + 15 + 4 = 24."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Does sorting the elements help?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}