{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14516,
            "title": "Article",
            "titleSlug": "article_2181187",
            "content": "<pre><code>Table: Views\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| article_id    | int     |\n| author_id     | int     |\n| viewer_id     | int     |\n| view_date     | date    |\n+---------------+---------+\nThere is no primary key for this table, it may have duplicate rows.\nEach row of this table indicates that some viewer viewed an article (written by some author) on some date. \nNote that equal author_id and viewer_id indicate the same person.\n\n\nWrite an SQL query to find all the people who viewed more than one article on the same date, sorted in ascending order by their id.\n\nThe query result format is in the following example:\n\nViews table:\n+------------+-----------+-----------+------------+\n| article_id | author_id | viewer_id | view_date  |\n+------------+-----------+-----------+------------+\n| 1          | 3         | 5         | 2019-08-01 |\n| 3          | 4         | 5         | 2019-08-01 |\n| 1          | 3         | 6         | 2019-08-02 |\n| 2          | 7         | 7         | 2019-08-01 |\n| 2          | 7         | 6         | 2019-08-02 |\n| 4          | 7         | 1         | 2019-07-22 |\n| 3          | 4         | 4         | 2019-07-21 |\n| 3          | 4         | 4         | 2019-07-21 |\n+------------+-----------+-----------+------------+\n\nResult table:\n+------+\n| id   |\n+------+\n| 5    |\n| 6    |\n+------+\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a table `Views` containing information about article views, find all viewer IDs that have viewed more than one article on the same date. The result should be sorted in ascending order by the viewer's ID.",
                "constraints": [],
                "testcases": [
                    {
                        "input": "Table: Views\n+------------+-----------+-----------+------------+\n| article_id | author_id | viewer_id | view_date  |\n+------------+-----------+-----------+------------+\n| 1          | 3         | 5         | 2019-08-01 |\n| 3          | 4         | 5         | 2019-08-01 |\n| 1          | 3         | 6         | 2019-08-02 |\n| 2          | 7         | 7         | 2019-08-01 |\n| 2          | 7         | 6         | 2019-08-02 |\n| 4          | 7         | 1         | 2019-07-22 |\n| 3          | 4         | 4         | 2019-07-21 |\n| 3          | 4         | 4         | 2019-07-21 |\n+------------+-----------+-----------+------------+",
                        "output": "+------+\n| id   |\n+------+\n| 5    |\n| 6    |\n+------+",
                        "explanation": "Viewer 5 viewed articles 1 and 3 on 2019-08-01.\nViewer 6 viewed article 1 on 2019-08-02 and article 2 on 2019-08-02.\nViewer 4 viewed article 3 on 2019-07-21, although there are duplicate entries on same article and date, still only one article is being viewed"
                    },
                    {
                        "input": null,
                        "output": null,
                        "explanation": "If the Views table is empty, the output table would be empty."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}