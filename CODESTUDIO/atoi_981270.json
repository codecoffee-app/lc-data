{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9239,
            "title": "atoi",
            "titleSlug": "atoi_981270",
            "content": "<h4 id=\"you-are-given-a-string-s-of-length-n\">You are given a string <em><strong>\u2018s\u2019</strong></em> of length <em><strong>&#39;n&#39;</strong></em>.</h4>\n\n<p><br></p>\n\n<h4 id=\"implement-the-atoi-string-s-function-which-converts-a-given-string-into-a-32-bit-signed-integer-following-similar-principles-as-the-atoi-function-in-c-c\">Implement the atoi(string s) function, which converts a given string into a 32-bit signed integer, following similar principles as the atoi function in C/C++.</h4>\n\n<p><br></p>\n\n<h4 id=\"heres-the-step-by-step-algorithm-for-myatoi-string-s\">Here&#39;s the step-by-step algorithm for myAtoi(string s):</h4>\n\n<p><br></p>\n\n<h4 id=\"1-discard-any-leading-whitespaces\">1. Discard any leading whitespaces.</h4>\n\n<p><br></p>\n\n<h4 id=\"2-if-the-next-character-if-not-at-the-end-of-the-string-is-or-consider-it-to-determine-the-sign-of-the-result-if-neither-is-present-assume-the-result-is-positive\">2. If the next character (if not at the end of the string) is &#39;-&#39; or &#39;+&#39;, consider it to determine the sign of the result. If neither is present, assume the result is positive.</h4>\n\n<p><br></p>\n\n<h4 id=\"3-read-and-accumulate-digits-until-a-non-digit-character-is-encountered-or-the-end-of-the-input-is-reached\">3. Read and accumulate digits until a non-digit character is encountered or the end of the input is reached.</h4>\n\n<p><br></p>\n\n<h4 id=\"4-convert-the-collected-digits-into-an-integer-e-g-123-becomes-123-0032-becomes-32-if-no-digits-were-read-the-integer-is-0-adjust-the-sign-as-needed-as-determined-in-step-2\">4. Convert the collected digits into an integer (e.g., &quot;123&quot; becomes 123, &quot;0032&quot; becomes 32). If no digits were read, the integer is 0. Adjust the sign as needed (as determined in step 2).</h4>\n\n<p><br></p>\n\n<h4 id=\"5-if-the-integer-falls-outside-the-range-of-a-32-bit-signed-integer-2-31-2-31-1-constrain-it-to-stay-within-the-range-for-instance-if-the-integer-is-less-than-2-31-set-it-to-2-31-if-its-greater-than-2-31-1-set-it-to-2-31-1\">5. If the integer falls outside the range of a 32-bit signed integer [-2^31, 2^31 - 1], constrain it to stay within the range. For instance, if the integer is less than -2^31, set it to -2^31; if it&#39;s greater than 2^31 - 1, set it to 2^31 - 1.</h4>\n\n<p><br></p>\n\n<h4 id=\"6-return-the-resulting-integer\">6. Return the resulting integer.</h4>\n\n<p></br></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. Only the space character &#39; &#39; is treated as a whitespace.\n\n2. All characters other than leading whitespace or digits are considered.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: 45rohit12\n\nOutput: 45\n\nExplanation: \nLeading Whitespace: Leading whitespace characters (&quot; &quot;) are ignored.\n\nNumeric Portion: The numeric portion starts with the digit &quot;4&quot;.\n\nReading Numeric Characters: The algorithm reads &quot;4&quot; and &quot;5&quot; to form &quot;45&quot;.\n\nEnd of Numeric Portion: The numeric portion ends at &quot;r&quot;, non-numeric characters are skipped.\n\nParsing Result: &quot;45&quot; is parsed into the integer value 45, the final result.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The only line of the test case contains the string \u2018s\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>The output contains the integer formed by the given string.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<p><br></p>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>-546+er\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>-546\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>Leading Whitespace: Leading whitespace characters (&quot; &quot;) are ignored.\n\nSign Detection: The &quot;-&quot; sign indicates a negative result.\n\nNumeric Portion: The numeric portion begins with the digit &quot;5&quot;.\n\nReading Numeric Characters: The algorithm reads &quot;5&quot;, &quot;4&quot;, and &quot;6&quot; to form &quot;546&quot;.\n\nEnd of Numeric Portion: The numeric portion ends at &quot;+&quot;.\n\nParsing Result: &quot;546&quot; is parsed into the integer value 546. Due to the negative sign, the final result is -546.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>-ban23\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>0 &lt;= n &lt;= 200\n\n&#39;s&#39; consists of English letters (lower-case and upper-case), digits (0-9), &#39;  &#39;, &#39;+&#39;, &#39;-&#39;, and &#39;.&#39;.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 96,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement the `atoi(string s)` function to convert a given string `s` of length `n` into a 32-bit signed integer, following the same principles as the `atoi` function in C/C++.\n\nAlgorithm:\n\n1.  Discard leading whitespaces.\n2.  Determine the sign: If the next character is '-' or '+', use it to determine the sign. Otherwise, assume the result is positive.\n3.  Accumulate digits: Read and accumulate digits until a non-digit character or the end of the string is reached.\n4.  Convert to integer: Convert the collected digits into an integer. If no digits were read, the integer is 0. Adjust the sign accordingly.\n5.  Handle overflow: If the integer falls outside the range [-2^31, 2^31 - 1], constrain it to the minimum or maximum value of the range respectively.\n6.  Return the resulting integer.\n\nNote:\n\n*   Only the space character ' ' is considered whitespace.\n*   All characters other than leading whitespace or digits are considered non-numeric characters.",
                "constraints": [
                    "0 <= n <= 200",
                    "`s` consists of English letters (lower-case and upper-case), digits (0-9), '  ', '+', '-', and '.'."
                ],
                "testcases": [
                    {
                        "input": "45rohit12",
                        "output": "45",
                        "explanation": "The leading whitespace is ignored. The numeric portion starts with '4'. Reading '4' and '5' gives '45'. The numeric portion ends at 'r'. '45' is parsed to the integer 45."
                    },
                    {
                        "input": "-546+er",
                        "output": "-546",
                        "explanation": "The leading whitespace is ignored. The sign is negative ('-'). Reading '5', '4', and '6' gives '546'. The numeric portion ends at '+'. '546' is parsed to the integer 546. Due to the negative sign, the result is -546."
                    },
                    {
                        "input": "-ban23",
                        "output": "0",
                        "explanation": "The leading whitespace is ignored. The sign is negative ('-'). However, after the sign the string is not numeric, thus the result is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to solve the problem Iteratively.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/* \r\n\tTime complexity: O(N). \r\n\tSpace complexity: O(1). \r\n\r\n\tWhere 'N' is the length of string 's'\r\n*/\r\n\r\nint createAtoi(string s) {\r\n    int i = 0, n = s.size();\r\n\r\n    // Skipping space characters at the beginning\r\n    while (s[i] == ' ') {\r\n        i++;\r\n    }\r\n\r\n    int positive = 0, negative = 0; \r\n\r\n    // Detecting and counting positive and negative signs\r\n    if (s[i] == '+') {\r\n        positive++; // Number of positive signs at the start of the string\r\n        i++;\r\n    }\r\n\r\n    if (s[i] == '-') {\r\n        negative++; // Number of negative signs at the start of the string\r\n        i++;\r\n    }\r\n\r\n    double ans = 0; \r\n\r\n    // Parsing the numeric portion of the string\r\n    while (i < n && s[i] >= '0' && s[i] <= '9') {\r\n        ans = ans * 10 + (s[i] - '0'); // (s[i] - '0') converts character to integer\r\n        i++;\r\n    }\r\n\r\n    // Handling negative sign\r\n    if (negative > 0) {\r\n        ans = -ans;\r\n    }\r\n    \r\n    // Handling cases where both +ve and -ve signs exist\r\n    if (positive > 0 && negative > 0) {\r\n        return 0;\r\n    }\r\n\r\n    // Handling integer overflows and underflows\r\n    if (ans > INT_MAX) {\r\n        ans = INT_MAX;\r\n    }\r\n\r\n    if (ans < INT_MIN) {\r\n        ans = INT_MIN;\r\n    }\r\n\r\n    return (int)ans;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time complexity: O(N). \r\n\tSpace complexity: O(1). \r\n\r\n\tWhere 'N' is the length of string 's'\r\n'''\r\nfrom typing import Optional\r\n\r\ndef createAtoi(s: str) -> int:\r\n    i = 0\r\n    n = len(s)\r\n\r\n    # Skipping space characters at the beginning\r\n    while i < n and s[i] == ' ':\r\n        i += 1\r\n\r\n    positive = 0\r\n    negative = 0\r\n\r\n    # Detecting and counting positive and negative signs\r\n    if i < n and s[i] == '+':\r\n        positive += 1  # Number of positive signs at the start of the string\r\n        i += 1\r\n\r\n    if i < n and s[i] == '-':\r\n        negative += 1  # Number of negative signs at the start of the string\r\n        i += 1\r\n\r\n    ans = 0.0\r\n\r\n    # Parsing the numeric portion of the string\r\n    while i < n and '0' <= s[i] <= '9':\r\n        ans = ans * 10 + (ord(s[i]) - ord('0'))  # (ord(s[i]) - ord('0')) converts character to integer\r\n        i += 1\r\n\r\n    # Handling negative sign\r\n    if negative > 0:\r\n        ans = -ans\r\n    \r\n    # Handling cases where both +ve and -ve signs exist\r\n    if positive > 0 and negative > 0:\r\n        return 0\r\n\r\n    # Handling integer overflows and underflows\r\n    INT_MAX = 2**31 - 1\r\n    INT_MIN = -2**31\r\n\r\n    if ans > INT_MAX:\r\n        ans = INT_MAX\r\n\r\n    if ans < INT_MIN:\r\n        ans = INT_MIN\r\n\r\n    return int(ans)",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1)\r\n\r\n    Where 'N' is the length of the string.\r\n*/\r\n\r\npublic class Solution {\r\n\r\n    public static int createAtoi(String s) {\r\n        int i = 0, n = s.length();\r\n\r\n        // Skipping space characters at the beginning\r\n        while (i < n && s.charAt(i) == ' ') {\r\n            i++;\r\n        }\r\n\r\n        int positive = 0, negative = 0;\r\n\r\n        // Detecting and counting positive and negative signs\r\n        if (i < n && s.charAt(i) == '+') {\r\n            positive++; // Number of positive signs at the start of the string\r\n            i++;\r\n        }\r\n\r\n        if (i < n && s.charAt(i) == '-') {\r\n            negative++; // Number of negative signs at the start of the string\r\n            i++;\r\n        }\r\n\r\n        double ans = 0;\r\n\r\n        // Parsing the numeric portion of the string\r\n        while (i < n && s.charAt(i) >= '0' && s.charAt(i) <= '9') {\r\n            ans = ans * 10 + (s.charAt(i) - '0'); // (s.charAt(i) - '0') converts character to integer\r\n            i++;\r\n        }\r\n\r\n        // Handling negative sign\r\n        if (negative > 0) {\r\n            ans = -ans;\r\n        }\r\n\r\n        // Handling cases where both +ve and -ve signs exist\r\n        if (positive > 0 && negative > 0) {\r\n            return 0;\r\n        }\r\n\r\n        // Handling integer overflows and underflows\r\n        if (ans > Integer.MAX_VALUE) {\r\n            ans = Integer.MAX_VALUE;\r\n        }\r\n\r\n        if (ans < Integer.MIN_VALUE) {\r\n            ans = Integer.MIN_VALUE;\r\n        }\r\n\r\n        return (int) ans;\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}