{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16451,
            "title": "Auto Suggestion ",
            "titleSlug": "auto-suggestion_3155171",
            "content": "<h4 id=\"bob-had-a-hard-time-remembering-the-spelling-of-words-alice-his-best-friend-decided-to-make-a-program-that-suggests-words-after-every-character-bob-types\">Bob had a hard time remembering the spelling of words. Alice, his best friend, decided to make a program that suggests words after every character Bob types.</h4>\n\n<h4 id=\"alice-had-an-array-of-n-strings-s-containing-bob-s-most-commonly-used-words-she-decided-to-suggest-at-most-three-words-after-each-character-is-typed-the-typed-word-and-the-suggested-word-should-have-the-same-prefix-if-there-are-more-than-3-such-words-in-the-array-print-the-three-lexicographically-minimum-words\">Alice had an array of \u2018N\u2019 strings \u2018S\u2019 containing Bob\u2019s most commonly used words. She decided to suggest at most three words after each character is typed. The typed word and the suggested word should have the same prefix. If there are more than 3 such words in the array, print the three lexicographically minimum words.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases.\n\nThe first line of each test case contains one integer \u2018N\u2019, denoting the number of strings in the array.\n\nThe following line contains an array \u2018S\u2019 of \u2018N\u2019 spaced strings denoting the commonly used strings by Bob.\n\nThe following line contains an integer \u2018L\u2019 denoting the length of the string Bob is going to type.\n\nThe following line contains a string \u2018P\u2019 denoting the string Bob is going to type.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print \u2018L\u2019 lines containing at most three single space-separated words that the Alices program will suggest after each character of string \u2018P\u2019 is typed.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 1000\n1 &lt;= L &lt;= 1000 \n1 &lt;= Sum of lengths of all \u2018S[i]\u2019 &lt;= 2 * 10 ^ 4.\nThere are no repeated elements in the array \u2018S\u2019.\nAll characters in \u2018S[i]\u2019 and \u2018P\u2019 are lower-case English letters.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 \nabc ab aa a\n3\nabc\n3\nna bw a\n3\nabc\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>a aa ab\nab abc \nabc\na\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>In the first test case, after Bob types \u2018a\u2019, the program suggests \u2018a aa ab\u2019. After typing \u2018ab\u2019 , the program suggests \u2018ab abc\u2019, and after typing \u2018abc\u2019 the program suggests \u2018abc\u2019.  \nIn the second test case, after Bob types \u2018a\u2019, the program suggests \u2018a\u2019 but after typing \u2018ab\u2019 and \u2018abc\u2019, the program suggests noting.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2 \ncn cnn\n1 \nc\n1\nroll\n4\nroll\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>cn cnn \nroll\nroll\nroll\nroll\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement an auto-suggestion system for Bob, who has difficulty spelling words. Given a list of Bob's commonly used words, generate suggestions as he types a word. The suggestions should share a prefix with the partially typed word. After each character Bob types, suggest at most three lexicographically smallest words from the provided list that match the current prefix. If fewer than three words match, suggest all matching words. If no words match, provide no suggestions.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 1000",
                    "1 <= L <= 1000",
                    "1 <= Sum of lengths of all \u2018S[i]\u2019 <= 2 * 10 ^ 4",
                    "There are no repeated elements in the array \u2018S\u2019.",
                    "All characters in \u2018S[i]\u2019 and \u2018P\u2019 are lower-case English letters."
                ],
                "testcases": [
                    {
                        "input": "n = 4, S = [\"abc\", \"ab\", \"aa\", \"a\"], l = 3, P = \"abc\"",
                        "output": "a aa ab\nab abc\nabc",
                        "explanation": "After 'a', suggestions are 'a', 'aa', 'ab'. After 'ab', suggestions are 'ab', 'abc'. After 'abc', suggestion is 'abc'."
                    },
                    {
                        "input": "n = 3, S = [\"na\", \"bw\", \"a\"], l = 3, P = \"abc\"",
                        "output": "a\n\n",
                        "explanation": "After 'a', the suggestion is 'a'.  After 'ab' and 'abc', there are no matching words, so no suggestions are given."
                    },
                    {
                        "input": "n = 2, S = [\"cn\", \"cnn\"], l = 1, P = \"c\"",
                        "output": "cn cnn",
                        "explanation": "After 'c', the suggestions are 'cn' and 'cnn'."
                    },
                    {
                        "input": "n = 1, S = [\"roll\"], l = 4, P = \"roll\"",
                        "output": "roll\nroll\nroll\nroll",
                        "explanation": "After each character of roll is typed, only suggestion possible is 'roll' so the same is suggested."
                    },
                    {
                        "input": "n = 5, S = [\"apple\", \"app\", \"ap\", \"a\", \"banana\"], l = 4, P = \"appl\"",
                        "output": "a ap app\nap app apple\napp apple\napple",
                        "explanation": "Shows the lexicographically smallest 3 matches for each prefix."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>How to optimise the searching process?</p>",
            "<p>Can we use any data structure?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tries",
                "slug": "tries"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}