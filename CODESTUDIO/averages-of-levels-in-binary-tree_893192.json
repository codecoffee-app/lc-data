{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8635,
            "title": "Averages of Levels in Binary Tree",
            "titleSlug": "averages-of-levels-in-binary-tree_893192",
            "content": "<h4 id=\"you-are-given-an-arbitrary-binary-tree-consisting-of-n-nodes-numbered-from-1-to-n-and-each-node-is-associated-with-some-positive-integer-value-your-task-is-to-find-the-average-of-all-the-levels-in-the-given-tree-i-e-you-have-to-find-the-average-of-all-the-node-values-present-on-the-level-for-each-level\">You are given an arbitrary binary tree consisting of &#39;N&#39; nodes numbered from 1 to &#39;N&#39;,  and each node is associated with some positive integer value. Your task is to find the average of all the levels in the given tree, i.e you have to find the average of all the node values present on the level, for each level.</h4>\n\n<h4 id=\"two-nodes-of-a-tree-are-said-to-be-at-the-same-level-k-if-both-of-them-are-at-equal-distance-k-from-the-root-node-the-root-node-is-said-to-be-at-level-0\">Two nodes of a tree are said to be at the same level \u2018K\u2019  if both of them are at equal distance( &#39;K&#39; ) from the &#39;ROOT&#39; node. The &#39;ROOT&#39; node is said to be at level 0.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1. Two nodes may have the same value associated with it.\n2. Average of any level is computed as the sum of the values of all the nodes at that level divided by the number of nodes at that level.\n3. You will be given the &#39;ROOT&#39; node of the binary tree.\n4. You need to print the floor value for each average. For example,  if the average of node values at some level is 3.5 then you have to print 3.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains a single integer &#39;T&#39;, representing the number of test cases.\n\nThe first line of each test case contains a single integer &#39;N&#39; denoting the number of nodes in the tree. \n\nThe second line contains the values of the nodes of the tree in the level order form ( -1 for NULL node) \n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Consider the binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-10-09-12-55-45-5134.png\" alt=\"altImage\"></p>\n\n<pre><code>The input of the tree depicted in the image above will be like : \n\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first non-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second non-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print &#39;X&#39; space-separated values where &#39;X&#39; is the number of levels in the given binary tree, where the &#39;i&#39;th integer will denote the average of node values at the &#39;ith level.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n1 &lt;= N &lt;= 10^4\n1 &lt;= data &lt;= 10^9\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n3\n1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/ex1-6007.PNG\" alt=\"altImage\"></p>\n\n<pre><code>This is the tree as described in the input here l0 denotes level-0 and l1 denotes level-1. Now the average of nodes at level 0 is (1/1), which is 1. And the average at level 1 is ((2+3)/2) which is 2.50\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n4\n5 6 7 8 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5 6 8\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/ex2-6008.PNG\" alt=\"altImage\"></p>\n\n<pre><code>This is the tree as described in the input here l0 denotes level-0 and l1 denotes level-1 and l2 denotes level-2. Now the average of nodes at level 0 is (5/1), which is 5. And the average at level 1 is ((6+7)/2) which is 6.50, and the average at level-2 is (8/1) which is 8.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree represented by its root node, calculate the floor of the average of node values at each level of the tree. Return a vector containing these averages, level by level.",
                "constraints": [
                    "1 <= T <= 10^2",
                    "1 <= N <= 10^4",
                    "1 <= data <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "root = [1, 2, 3, -1, -1, -1, -1], N = 3",
                        "output": "1 2",
                        "explanation": "The tree is represented as 1 / \\ 2 3.  Level 0 average: 1/1 = 1. Level 1 average: (2+3)/2 = 2.5. Floor(2.5) = 2."
                    },
                    {
                        "input": "root = [5, 6, 7, 8, -1, -1, -1, -1, -1], N = 4",
                        "output": "5 6 8",
                        "explanation": "The tree is represented as 5 / \\ 6 7 / 8. Level 0 average: 5/1 = 5. Level 1 average: (6+7)/2 = 6.5. Floor(6.5) = 6. Level 2 average: 8/1 = 8."
                    },
                    {
                        "input": "root = [2147483647, 2147483647, 2147483647, -1, -1, -1, -1], N = 3",
                        "output": "2147483647 2147483647",
                        "explanation": "A test case with max integer values to test for potential overflow issues."
                    },
                    {
                        "input": "root = [1, -1, 2, -1, -1, -1, -1], N = 2",
                        "output": "1 2",
                        "explanation": "Testing a skewed tree where the left child of the root is null and only the right child exists."
                    },
                    {
                        "input": "root = [1], N = 1",
                        "output": "1",
                        "explanation": "Test case with only a root node."
                    },
                    {
                        "input": "root = [1, 2, 2, 3, 4, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1], N = 7",
                        "output": "1 2 3",
                        "explanation": "The tree is represented as 1 / \\ 2 2 / \\ / \\ 3 4 4 3. Level 0 average: 1/1 = 1. Level 1 average: (2+2)/2 = 2. Level 2 average: (3+4+4+3)/4 = 3.5. Floor(3.5) = 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Do the level - order traversal.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}