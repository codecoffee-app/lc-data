{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9332,
            "title": "AVL: Delete",
            "titleSlug": "avl-delete_982930",
            "content": "<h4 id=\"given-an-avl-tree-delete-an-element-in-the-avl-tree\">Given an AVL tree,delete an element in the AVL Tree.</h4>\n\n<h4 id=\"an-avl-tree-is-a-self-balancing-binary-search-tree\">An AVL tree is a self-balancing binary search tree.</h4>\n\n<h4 id=\"it-has-the-following-properties\">It has the following properties:</h4>\n\n<h4 id=\"it-has-the-property-of-the-binary-search-tree-i-e-for-every-node-the-nodes-in-its-left-subtree-is-less-than-the-node-and-the-node-in-the-right-subtree-is-greater-than-the-current-node\">It has the property of the binary search tree , i.e for every node , the nodes in its left subtree is less than the node and the node in the right subtree is greater than the current node.</h4>\n\n<h4 id=\"the-absolute-difference-between-the-height-of-left-subtree-and-right-subtree-of-any-node-is-less-than-or-equal-to-1\">The absolute difference between the height of left subtree and right subtree of any node is less than or equal to 1.</h4>\n\n<h4 id=\"read-more-about-avl-tree-here-https-en-wikipedia-org-wiki-avl_tree\">Read more about AVL Tree Here: https://en.wikipedia.org/wiki/AVL_tree</h4>\n\n<p><img src=\"https://files.codingninjas.in/image1-6778.png\" alt=\"\"></p>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>1. Do not print anything, just return the root node of the tree.\n2. Your constructed tree will be checked by doing an in-order traversal of the tree from the returned root node.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an Integer &#39;t&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of input contains the elements of the tree in the level order form separated by a single space.\nThe second line contains an integer denoting the value to be deleted.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree.\n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, the root node of the AVL tree with the given node inserted.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1&lt;= N &lt;= 3*10^3\n\nWhere \u2018T\u2019 is the total number of test cases and N denotes the number of nodes in the given binary tree.\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n15 12 20 10 14 -1 -1 -1 -1 -1 -1 \n20\n50 20 60 -1 -1 -1 -1 \n60 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>10 12 14 15\n20 50     \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>Test Case 1:\n\nInitially, the tree is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image6-6783.jpg\" alt=\"\"></p>\n\n<pre><code>We can see that the given Tree is an avl tree because, for each node in the tree, the balance factor is less than 1.\n\nFor node 15 it is 1 (height of left subtree is 2 and right subtree is 1.)\nFor node 12 it is 0 (height of left subtree is 1 and right subtree is 1.)\nFor node 10 it is 0 (height of left subtree is 0 and right subtree is 0.)\nFor node 14 it is 0 (height of left subtree and right subtree is 0.)\nFor node 20 it is 0 (height of left subtree is 0 and right subtree is 0.)\n\nAfter deleting 20 using the standard deletion procedure we get:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image5-6782.jpg\" alt=\"\"></p>\n\n<pre><code>We can clearly see that the node with value 15 is imbalanced as it has balance factor 2.\n\nAfter rebalancing we get:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image1-6778.png\" alt=\"\"></p>\n\n<pre><code>Now this final tree is balanced as all the nodes have the balance factor less than or equal to 1.\n\nWe return the root node of the balanced AVL Tree and can verify that the in-order traversal of the AVL tree will be:{10 14 12 15 }\n\nTest Case 2:\nInitially, the tree is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-2020-12-19-at-4-20-04-pm-6730.png\" alt=\"\"></p>\n\n<pre><code>The Balance Factor are:\n\nFor node 20 it is 0 (height of left subtree is 0 and right subtree is 0.)\nFor node 50 it is 1 (height of left subtree is 1 and right subtree is 0.)\nFor node 60 it is 0(height of left subtree is 0 and right subtree is 0.)\n\n\nAfter deleting, the tree is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-2020-12-19-at-4-19-52-pm-6729.png\" alt=\"\"></p>\n\n<pre><code>The balance Factor are:\n\nFor node 20 it is 0 (height of left subtree is 0 and right subtree is 0.)\nFor node 50 it is 0 (height of left subtree is 1 and right subtree is 1.)\n\n\nSince this tree is already balanced, we return the root node of the tree and can verify that the in-order traversal will be {20,50}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 1 4 -1 -1 -1 -1\n1\n1 2 3 -1 -1 -1 4 -1 -1 \n3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5 4\n2 1 4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an AVL tree, implement a function to delete a specified element from the tree while maintaining the AVL tree properties. An AVL tree is a self-balancing binary search tree where the height difference between the left and right subtrees of any node is at most 1. Your function should return the root of the modified AVL tree. Do not print anything; only return the root node.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 3 * 10^3 (Number of nodes in the AVL tree)",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "15 12 20 10 14 -1 -1 -1 -1 -1 -1 \n20",
                        "output": "10 12 14 15",
                        "explanation": "Initially, the AVL tree contains nodes [15, 12, 20, 10, 14]. After deleting 20 and rebalancing the tree to maintain AVL properties, the resulting in-order traversal is [10, 12, 14, 15]."
                    },
                    {
                        "input": "50 20 60 -1 -1 -1 -1 \n60",
                        "output": "20 50",
                        "explanation": "Initially, the AVL tree contains nodes [50, 20, 60]. After deleting 60, the tree remains balanced, and its in-order traversal is [20, 50]."
                    },
                    {
                        "input": "5 1 4 -1 -1 -1 -1\n1",
                        "output": "5 4",
                        "explanation": "Initially, the AVL tree contains nodes [5, 1, 4]. After deleting 1 and rebalancing the tree to maintain AVL properties, the resulting in-order traversal is [5, 4]."
                    },
                    {
                        "input": "1 2 3 -1 -1 -1 4 -1 -1 \n3",
                        "output": "2 1 4",
                        "explanation": "Initially, the AVL tree contains nodes [1, 2, 3, 4]. After deleting 3 and rebalancing the tree to maintain AVL properties, the resulting in-order traversal is [2, 1, 4]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find node and delete then rebalance the tree</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}