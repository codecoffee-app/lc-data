{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8166,
            "title": "Avoiding traps",
            "titleSlug": "avoiding-traps_839704",
            "content": "<h4 id=\"given-an-array-of-n-elements-obstacles-where-each-element-represents-the-coordinate-of-the-obstacle-on-a-straight-line-we-start-jumping-from-point-0-and-we-need-to-reach-the-end-of-the-line-avoiding-all-the-obstacles-which-are-present-on-the-line-the-length-of-every-jump-should-be-the-same-for-example-if-we-jump-from-0-to-3-the-jump-is-of-3-units-hence-the-next-jump-should-also-be-of-3-units-that-is-from-3-to-6-and-so-on\">Given an array of &#39;N&#39; elements &#39;OBSTACLES&#39;, where each element represents the coordinate of the obstacle on a straight line. We start jumping from point 0 and we need to reach the end of the line avoiding all the obstacles which are present on the line. The length of every jump should be the same. For example, if we jump from 0 to 3, the jump is of 3 units hence the next jump should also be of 3 units that is from 3 to 6 and so on.</h4>\n\n<h4 id=\"find-the-minimum-length-of-the-jump-so-that-we-can-reach-the-end-of-the-line-avoiding-all-obstacles\">Find the minimum length of the jump so that we can reach the end of the line avoiding all obstacles.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1.The end will be a minimum possible coordinate, greater than the maximum element in the given array of elements.\n\n2.Avoiding obstacles means that we cannot stop at the given coordinates.\n\n3.The elements may not be in sorted order.\n\n4.The last jump can be of any unit, provided it crosses the endpoint.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next 2 * T lines represent the \u2018T\u2019 test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019, denoting the number of obstacles on the straight line.\n\nThe second line of each test case contains an array &#39;OBSTACLES&#39; of &#39;N&#39; elements, denoting the obstacles on the straight line.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the minimum length of the jump to reach the end, avoiding all the obstacles.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You don&#39;t have to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 1000\n1 &lt;= OBSTACLES[i] &lt;= 10 ^ 6\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 denotes the number of obstacles on the straight line, and \u2018OBSTACLES[i]\u2019 denotes the coordinates of obstacles on the straight line.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\n5 3 6 7 9\n5\n5 8 9 13 14\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n6\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>Test case 1\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/jump-5448.png\" alt=\"alt text\"></p>\n\n<pre><code>Obstacles are at positions 5, 3, 6, 7, 9. \nIf we take a jump of size 1, it will touch 3 and so it is not viable\nFor jump size 2, it will touch 6 and so it is discarded.\nFor jump size 3, it will touch 3 and so it is also discarded.\n\nFor jump size 4, we will jump from 0 to 4, then 4 to 8, then 8 to 12. Hence, we reach the end by avoiding all the obstacles.\n\nTest case 2:\n\nObstacles are at positions 5, 8, 9, 13, 14.\nWith jump size 6, we will jump from 0 to 6, then 6 to 12, followed by 12 to 18. Hence, we reach the end by avoiding all the obstacles.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n6\n10 1 2 3 6 9\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 27,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `OBSTACLES` of size 'N', where each element represents the coordinate of an obstacle on a straight line. Starting from point 0, find the minimum jump length to reach the end of the line, avoiding all obstacles. The jump length must be constant throughout the journey. The end is defined as the smallest possible coordinate greater than the maximum obstacle coordinate. Landing on an obstacle is not allowed. The final jump can exceed the end point.",
                "constraints": [
                    "1 <= T <= 50 (T is the number of test cases)",
                    "1 <= N <= 1000 (N is the number of obstacles)",
                    "1 <= OBSTACLES[i] <= 10^6 (OBSTACLES[i] is the coordinate of an obstacle)",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n5 3 6 7 9",
                        "output": "4",
                        "explanation": "Obstacles are at 5, 3, 6, 7, 9. Jump sizes 1, 2, and 3 are not viable because they would cause a landing on an obstacle. With a jump size of 4, the jumps are 0 -> 4 -> 8 -> 12, avoiding all obstacles. Therefore, 4 is the minimum jump length."
                    },
                    {
                        "input": "5\n5 8 9 13 14",
                        "output": "6",
                        "explanation": "Obstacles are at 5, 8, 9, 13, 14. With a jump size of 6, the jumps are 0 -> 6 -> 12 -> 18, avoiding all obstacles. Hence, the minimum jump length is 6."
                    },
                    {
                        "input": "6\n10 1 2 3 6 9",
                        "output": "4",
                        "explanation": "Null"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>What could be the possible range of jumps?</p>",
            "<p>Try solving without using extra space.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}