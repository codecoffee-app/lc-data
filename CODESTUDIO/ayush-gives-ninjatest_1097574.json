{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9912,
            "title": "Ayush gives ninjatest",
            "titleSlug": "ayush-gives-ninjatest_1097574",
            "content": "<h4 id=\"ayush-is-studying-for-ninjatest-which-will-be-held-after-n-days-and-to-score-good-marks-he-has-to-study-m-chapters-and-the-ith-chapter-requires-time-i-seconds-to-study-the-day-in-ayush-s-world-has-100-100-seconds-there-are-some-rules-that-are-followed-by-ayush-while-studying\">Ayush is studying for ninjatest which will be held after &#39;N&#39; days, And to score good marks he has to study &#39;M&#39; chapters and the ith chapter requires TIME[i] seconds to study. The day in Ayush\u2019s world has 100^100 seconds. There are some rules that are followed by Ayush while studying.</h4>\n\n<h4 id=\"1-he-reads-the-chapter-in-a-sequential-order-i-e-he-studies-i-1th-chapter-only-after-he-studies-ith-chapter\">1. He reads the chapter in a sequential order, i.e. he studies i+1th chapter only after he studies ith chapter.</h4>\n\n<h4 id=\"2-if-he-starts-some-chapter-on-a-particular-day-he-completes-it-that-day-itself\">2. If he starts some chapter on a particular day he completes it that day itself.</h4>\n\n<h4 id=\"3-he-wants-to-distribute-his-workload-over-n-days-so-he-wants-to-minimize-the-maximum-amount-of-time-he-studies-in-a-day\">3. He wants to distribute his workload over &#39;N&#39; days, so he wants to minimize the maximum amount of time he studies in a day.</h4>\n\n<h4 id=\"your-task-is-to-find-out-the-minimal-value-of-the-maximum-amount-of-time-for-which-ayush-studies-in-a-day-in-order-to-complete-all-the-m-chapters-in-no-more-than-n-days\">Your task is to find out the minimal value of the maximum amount of time for which Ayush studies in a day, in order to complete all the &#39;M&#39; chapters in no more than &#39;N&#39; days.</h4>\n\n<h4 id=\"for-example\">For example</h4>\n\n<pre><code>if Ayush want to study 6 chapters in 3 days and the time that each chapter requires is as follows:\nChapter 1 = 30\nChapter 2 = 20\nChapter 3 = 10\nChapter 4 = 40\nChapter 5 = 5\nChapter 6 = 45\n\nThen he will study the chapters in the following order \n\n| day 1 : 1 , 2 | day 2 : 3 , 4 | day 3 : 5 , 6 |\nHere we can see that he study chapters in sequential order and the maximum time to study on a day is 50, which is the minimum possible in this case.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains a single positive integer &#39;T&#39;, denoting the number of test cases.\n\nThe first line of each test case contains two space-separated positive integers &#39;N&#39; and &#39;M&#39;, denoting the number of days he can study before the ninja test and the number of chapters he has to study for the ninja test respectively.\n\nThe second line of each test case contains &#39;M&#39; space-separated positive integers, where the ith integer denotes the time required to study the ith chapter.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case print a single line containing a single integer denoting the maximum time Ayush studies in a day.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t have to print anything, it has already been taken care of. Just Implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N , M &lt;= 10 ^ 4\n1 &lt;= TIME[i] &lt;= 10 ^ 9 \nIt is considered that there are infinite seconds in a day, on the planet where Ayush lives.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n3 5\n1 2 2 3 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>The ayush will read the chapter as follows,\nDay 1 : 1 , 2         Time required : 3\nDay 2 : 3             Time required : 2\nDay 3 : 4 , 5         Time required : 4\nSo the maximum time in a day is 4.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n4 7\n2 2 3 3 4 4 1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>6\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2:</h5>\n\n<pre><code>The ayush will read the chapter as follows,\nDay 1 : 1 , 2          Time required : 4\nDay 2 : 3 , 4          Time required : 6\nDay 3 : 5              Time required : 4\nDay 4 : 6 , 7          Time required : 5\nSo the maximum time in a day is 6.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 697,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ayush needs to prepare for the NinjaTest, which is happening in 'N' days. To get a good score, he must study 'M' chapters. Each chapter 'i' takes TIME[i] seconds to complete. Ayush follows specific rules: he studies chapters sequentially, completes a chapter on the day he starts it, and aims to distribute his workload to minimize the maximum study time on any single day. Your task is to determine the minimum possible value for the maximum study time Ayush spends on a day while ensuring he finishes all 'M' chapters within 'N' days.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N, M <= 10^4",
                    "1 <= TIME[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 5, time = [1, 2, 2, 3, 1]",
                        "output": "4",
                        "explanation": "Ayush can read chapters as follows:\nDay 1: 1, 2 (Time: 3)\nDay 2: 3 (Time: 2)\nDay 3: 4, 5 (Time: 4)\nThe maximum time in a day is 4."
                    },
                    {
                        "input": "n = 4, m = 7, time = [2, 2, 3, 3, 4, 4, 1]",
                        "output": "6",
                        "explanation": "Ayush can read chapters as follows:\nDay 1: 1, 2 (Time: 4)\nDay 2: 3, 4 (Time: 6)\nDay 3: 5 (Time: 4)\nDay 4: 6, 7 (Time: 5)\nThe maximum time in a day is 6."
                    },
                    {
                        "input": "n = 3, m = 6, time = [30, 20, 10, 40, 5, 45]",
                        "output": "50",
                        "explanation": "Ayush can read chapters as follows:\nDay 1: 1, 2 (Time: 50)\nDay 2: 3, 4 (Time: 50)\nDay 3: 5, 6 (Time: 50)\nThe maximum time in a day is 50."
                    },
                    {
                        "input": "n = 1, m = 5, time = [1, 2, 3, 4, 5]",
                        "output": "15",
                        "explanation": "Ayush has only one day, so he must study all chapters on that day.\nDay 1: 1, 2, 3, 4, 5 (Time: 15)\nThe maximum time in a day is 15."
                    },
                    {
                        "input": "n = 5, m = 1, time = [1000]",
                        "output": "1000",
                        "explanation": "Ayush has 5 days but only one chapter. He will study the chapter on one of the days.\nDay 1: 1 (Time: 1000)\nThe maximum time in a day is 1000."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can &nbsp;we check all possible answers using brute force?</p>",
            "<p>Can we use binary search?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(M * log(K))\r\n    Space complexity: O(1),\r\n\r\n    where 'K' is the sum of the time required to study all the chapters \r\n    and 'M' is the number of chapters.\r\n*/\r\n\r\nlong long ayushGivesNinjatest(int n, int m, vector<int> time)\r\n{\r\n\r\n    long long sum = 0;\r\n\r\n    int maxTime = INT_MIN;\r\n\r\n    // We will iterate through all the chapters and calculate the sum.\r\n    for (int i = 0; i < m; i++)\r\n    {\r\n        sum += time[i];\r\n        maxTime = max(maxTime , time[i]);\r\n    }\r\n\r\n    // We will initialize the lower limit of binary search l with maxTime and the upper limit of binary search with sum.\r\n    long long l = maxTime, r = sum, answer = sum;\r\n\r\n    while (l <= r)\r\n    {\r\n        \r\n        long long mid = (l + r) / 2;\r\n        long days = 1;\r\n        long long currentTime = 0;\r\n\r\n        for (int i = 0; i < m; i++)\r\n        {\r\n            currentTime += time[i];\r\n            if (currentTime > mid)\r\n            {\r\n                days++;\r\n                currentTime = time[i];\r\n            }\r\n\r\n        }\r\n\r\n        /*\r\n            If the days required to study all the chaptes is greater than n than answer is not possible\r\n            and we want more time to study in a given day so we will compress the range to the right hand side.\r\n            Else we can study all the chapters and we will update the answer with mid.\r\n        */\r\n        if (days <= n)\r\n        {\r\n            answer = mid;\r\n            r = mid - 1;\r\n        }\r\n        else\r\n        {\r\n            l = mid + 1;\r\n        }\r\n\r\n    }\r\n\r\n    // We will return the final answer.\r\n    return answer;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(M * log(K))\r\n    Space complexity: O(1),\r\n\r\n    where 'K' is the sum of the time required to study all the chapters \r\n    and 'M' is the number of chapters.\r\n*/\r\n\r\npublic class Solution {\r\n    public static long ayushGivesNinjatest(int n, int m, int[] time) {\r\n\r\n        long sum = 0;\r\n        \r\n        int maxTime = Integer.MIN_VALUE;\r\n\r\n        // We will iterate through all the chapters and calculate the sum. \r\n        for (int i = 0; i < m; i++) {\r\n            sum += time[i];\r\n            maxTime = Math.max(maxTime , time[i]);\r\n        }\r\n\r\n        // We will initialize the lower limit of binary search l with 1 and the upper limit of binary search with sum.\r\n        long l = maxTime, r = sum, answer = sum;\r\n        while (l <= r) {\r\n            \r\n            long mid = (l + r) / 2;\r\n            long days = 1;\r\n            long currentTime = 0;\r\n            for (int i = 0; i < m; i++) {\r\n                currentTime += time[i];\r\n                if (currentTime > mid) {\r\n                    days++;\r\n                    currentTime = time[i];\r\n                }\r\n\r\n            }\r\n\r\n            /*\r\n                If the days required to study all the chaptes is greater than n than answer is not possible\r\n                and we want more time to study in a given day so we will compress the range to the right hand side.\r\n                Else we can study all the chapters and we will update the answer with mid.\r\n            */\r\n            if (days <= n) {\r\n                answer = mid;\r\n                r = mid - 1;\r\n            }\r\n\r\n            else {\r\n                l = mid + 1;\r\n            }\r\n\r\n        }\r\n\r\n        // We will return the final answer.\r\n        return answer;\r\n    }\r\n\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(M * log(K))\r\n    Space complexity: O(1),\r\n\r\n    where 'K' is the sum of the time required to study all the chapters \r\n    and 'M' is the number of chapters.\r\n'''\r\n\r\ndef ayushGivesNinjatest(n, m, time):\r\n    \r\n    s = sum(time)\r\n    maxTime = max(time)\r\n    \r\n    # We will initialize the lower limit of binary search l with maxTime and the upper limit of binary search with sum.\r\n    l = maxTime\r\n    r = s\r\n    answer = s\r\n    \r\n    while l <= r:\r\n        mid = (l + r) // 2\r\n        \r\n        days = 1\r\n        currentTime = 0\r\n        \r\n        for j in range (m):\r\n            currentTime += time[j]\r\n            if currentTime > mid:\r\n                days += 1\r\n                currentTime = time[j]\r\n                \r\n        '''\r\n            If the days required to study all the chaptes is greater than n than answer is not possible\r\n            and we want more time to study in a given day so we will compress the range to the right hand side.\r\n            Else we can study all the chapters and we will update the answer with mid.\r\n        '''\r\n        if days <= n:\r\n            answer = mid\r\n            r = mid - 1\r\n        else:\r\n            l = mid + 1\r\n        \r\n    return answer",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}