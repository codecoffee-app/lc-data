{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13791,
            "title": "Balanced Binary Tree",
            "titleSlug": "balanced-binary-tree_1799468",
            "content": "<h4 id=\"you-are-given-an-integer-h-your-task-is-to-count-and-print-the-maximum-number-of-balanced-binary-trees-possible-with-height-h\">You are given an integer &#39;H&#39;. Your task is to count and print the maximum number of balanced binary trees possible with height &#39;H&#39;.</h4>\n\n<h4 id=\"the-balanced-binary-tree-is-one-in-which-for-every-node-the-difference-between-the-left-and-right-subtree-heights-is-less-than-or-equal-to-1\">The balanced binary tree is one in which, for every node, the difference between the left and right subtree heights is less than or equal to 1.</h4>\n\n<h4 id=\"you-have-to-print-the-answer-with-modulo-1e9-7\">You have to print the answer with modulo 1e9+7.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>Input:\nH = 2\n\nOutput: \n3\n\nThere will be a total 3 different balanced binary trees with height 2. \nOne node as a root and other nodes on one of the two sides.\nOne with root and left subtree with one more node than right.\nOne with root and right subtree with one more node than left. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer &#39;T&#39; denoting the number of test cases to be run. Then the test cases follow.\n\nEach test case contains a single integer &#39;H&#39; denoting the height of the tree. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an integer denoting the number of balanced binary trees that can be made with a given height. \n\nAnswers for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function and return the answer.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= H &lt;= 10^6\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\n1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>15\n1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>In test case 1:\nWe can make 15 different balanced binary trees with a height 3.\n\nIn test case 2:\nWe can make only 1 balanced binary tree with a height 1.\n</code></pre>\n\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\n4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n315\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer H, determine the maximum number of balanced binary trees possible with height H. A balanced binary tree is defined as a tree where, for every node, the difference between the heights of its left and right subtrees is less than or equal to 1. Return the answer modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= H <= 10^6",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "3\n3\n1\n2",
                        "output": "15\n1\n3",
                        "explanation": "Test Case 1 (H=3): There are 15 possible balanced binary trees with height 3.\nTest Case 2 (H=1): There is only 1 balanced binary tree with height 1.\nTest Case 3 (H=2): There are 3 balanced binary trees with height 2. This includes one node as the root, with other nodes on one of the two sides; one with root and left subtree with one more node than the right; and one with root and right subtree with one more node than the left."
                    },
                    {
                        "input": "2\n2\n4",
                        "output": "3\n315",
                        "explanation": "Test Case 1 (H=2): There are 3 balanced binary trees with height 2.\nTest Case 2 (H=4): There are 315 balanced binary trees with height 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Height of the binary tree is 1 + max(left_subtree_height, right_subtree_height).</p>",
            "<p><strong>Try to overcome the revisiting of nodes.</strong></p>"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}