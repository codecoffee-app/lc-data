{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10868,
            "title": "BALLOONS GAME",
            "titleSlug": "balloons-game_1279641",
            "content": "<h4 id=\"ninja-went-to-an-amusement-park-to-enjoy-his-weekends-there-is-an-offer-running-in-the-amusement-park-for-free-passes-for-the-park-for-that-a-visitor-has-to-win-a-game-of-balloons-in-this-game-the-visitor-will-be-provided-with-a-gun-and-he-has-to-hit-a-balloon\">Ninja went to an amusement park to enjoy his weekends. There is an offer running in the amusement park for free passes for the park. For that, a visitor has to win a game of balloons. In this game, the visitor will be provided with a gun and he has to hit a balloon.</h4>\n\n<h4 id=\"he-has-to-select-a-balloon-by-taking-into-consideration-some-conditions-each-balloon-is-marked-with-some-number-and-balloons-were-arranged-in-the-form-of-a-binary-search-tree-so-the-visitor-has-to-hit-the-balloon-which-has-the-largest-repeating-frequency\">He has to select a balloon by taking into consideration some conditions. Each balloon is marked with some number and balloons were arranged in the form of a binary search tree so the visitor has to hit the balloon which has the largest repeating frequency.</h4>\n\n<h4 id=\"ninja-is-good-with-hitting-the-target-with-the-gun-but-not-in-algorithms-so-help-our-ninja-in-choosing-the-balloon-with-repeated-frequency\">Ninja is good with hitting the target with the gun but not in algorithms so help our Ninja in choosing the balloon with repeated frequency.</h4>\n\n<h4 id=\"your-task-is-to-write-a-code-that-can-find-the-element-with-a-maximum-frequency-in-the-given-binary-search-tree-you-will-be-provided-with-the-root-of-the-tree\">Your task is to write a code that can find the element with a maximum frequency in the given binary search tree you will be provided with the root of the tree.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Consider the following binary search tree so the \u20187\u2019 is the element with the highest repeated frequency i.e \u20183\u2019 so \u20187\u2019 is our answer.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture-8465.JPG\" alt=\"Example\"></p>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>If there is more than one element with the same maximum frequency you have to return a minimum of them.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer  \u2018T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 -1 5 6 7 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the node with maximum repeated frequency.\n\nPrint output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n0 &lt;= DATA &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n6 5 7 4 5 7 7 -1 -1 -1 -1 -1 -1 -1 -1\n10 5 12 5 6 12 16 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>7\n5\n</code></pre>\n\n<h4 id=\"explanation-for-sample-1\">Explanation for Sample 1:</h4>\n\n<pre><code>Test case 1:\n\nThe binary tree according to the test case is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture-8465.JPG\" alt=\"Example\"></p>\n\n<pre><code>So we choose the node which has a maximum repeated frequency i.e \u20187\u2019 so our answer is \u20187\u2019.\n\n\nTest case 2:\n\nThe binary tree according to the test case is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture-8470.JPG\" alt=\"Example\"></p>\n\n<pre><code>So as there are two nodes with the same repeated frequency \u20185\u2019 and \u201812\u2019 so we choose \u20185\u2019 as \u20185\u2019 is smaller than \u201812\u2019.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n1 2 1 -1 -1 -1 -1\n2 -1 -1\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>1\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a binary search tree where each node represents a balloon marked with a number, find the number of the balloon with the highest frequency. If multiple numbers have the same highest frequency, return the smallest one.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3000 (number of nodes in the tree)",
                    "0 <= DATA <= 10^5 (value of each node)"
                ],
                "testcases": [
                    {
                        "input": "root = (6, (5, (4, null, null), (5, null, null)), (7, null, (7, null, (7, null, null))))",
                        "output": "7",
                        "explanation": "The tree contains the numbers 6, 5, 7, 4, 5, 7, 7. The frequency of 4 is 1, the frequency of 5 is 2, the frequency of 6 is 1 and the frequency of 7 is 3. Therefore, the number with the highest frequency is 7."
                    },
                    {
                        "input": "root = (10, (5, null, (6, null, null)), (12, (12, null, null), (16, null, null)))",
                        "output": "5",
                        "explanation": "The tree contains the numbers 10, 5, 12, 5, 6, 12, 16. The frequency of 5 is 2, the frequency of 6 is 1, the frequency of 10 is 1, the frequency of 12 is 2, and the frequency of 16 is 1. Since 5 and 12 both have the same frequency of 2, we return the smallest value, which is 5."
                    },
                    {
                        "input": "root = (1, (2, null, null), (1, null, null))",
                        "output": "1",
                        "explanation": "The tree contains the numbers 1, 2, 1. The frequency of 1 is 2, and the frequency of 2 is 1.  Therefore, the number with the highest frequency is 1."
                    },
                    {
                        "input": "root = (2, null, null)",
                        "output": "2",
                        "explanation": "The tree contains only the number 2, so the output is 2."
                    },
                    {
                        "input": "root = (1, null, (1, (1, null, null), null))",
                        "output": "1",
                        "explanation": "The tree contains the numbers 1, 1, 1. the frequency of number '1' is 3. Thus output is 1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you sort the elements of the tree?</p>",
            "<p>Can you traverse the tree to get all nodes and then find the node with maximum frequency?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}