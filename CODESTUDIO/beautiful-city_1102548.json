{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9932,
            "title": "Beautiful City     ",
            "titleSlug": "beautiful-city_1102548",
            "content": "<h4 id=\"ninja-decided-to-travel-to-a-city-each-house-in-the-city-is-connected-via-roads-with-at-most-two-houses-and-forms-a-binary-tree-like-structure-such-that-kth-level-can-have-at-most-2-k-houses-now-the-problem-in-the-city-is-that-persons-from-different-houses-at-the-same-level-can-not-meet-without-changing-their-level-ninja-wants-to-make-this-city-beautiful-by-connecting-houses-at-the-same-level-as-ninja-is-busy-preparing-for-his-travel-he-gives-this-task-to-you-can-you-help-ninja-to-make-this-city-beautiful\">Ninja decided to travel to a city. Each house in the city is connected via roads with at most two houses and forms a binary tree-like structure such that  Kth level can have at most 2 ^ K houses. Now, the problem in the city is that persons from different houses at the same level can not meet without changing their level. Ninja wants to make this city beautiful by connecting houses at the same level. As Ninja is busy preparing for his travel, he gives this task to you. Can you help Ninja to make this city beautiful?</h4>\n\n<h4 id=\"for-example-figure-a-represents-the-city-before-making-it-beautiful-figure-b-represents-a-beautiful-city-because-all-the-houses-on-the-same-level-are-connected\">For example Figure A represents the city before making it Beautiful. Figure B represents a Beautiful city because all the houses on the same level are connected.</h4>\n\n<p><img src=\"https://files.codingninjas.in/tree1-7668.JPG\" alt=\"alt txt\">\n<img src=\"https://files.codingninjas.in/tree2-7669.JPG\" alt=\"alt txt\"></p>\n\n<h4 id=\"your-task-is-to-connect-all-the-houses-at-the-same-level-in-the-city-you-are-given-a-pointer-next-in-the-house-class-to-do-this-if-there-is-no-house-on-the-right-then-set-null-to-the-next-pointer\">Your task is to connect all the houses at the same level in the city. You are given a pointer next in the house class to do this. If there is no house on the right then set NULL to the next pointer.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The structure of the city is already defined. You should not change it.   \n\n2. The address of the house at the 0\u2019th level is already given.  \n\n3. There is at least one house in the city.\n\n4. You may only use constant extra space.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. \n\nThen the description of  \u2018T\u2019 test cases follows.\n\nThe first line of each test case contains elements in the level order form. The line consists of a HOUSENUMBER of houses separated by a single space. In case there is no House on the left, right or adjacent then set NULL in those pointers. house is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/test1-7670.JPG\" alt=\"alt test1\"></p>\n\n<pre><code> 1\n 2 3\n-1 4  -1 5 \n-1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe House at 0\u2019th level has HOUSENUMBER 1\n\nLevel 2 :\nHouse on the Left of HOUSENUMBER 1 is 2\nHouse on the Left of HOUSENUMBER 1 is 3\n\nLevel 3 :\nThere is no House on the Left of HOUSENUMBER 2 so we have -1\nHouse on the Right of HOUSENUMBER 2 is 4\nThere is no House on the Left of HOUSENUMBER 3 so we have -1\nHouse on the Right of HOUSENUMBER 3 is 5\n\n\nLevel 4 :\nThere is no house on the left and right of the 4 and 5 so we have all -1 on this level\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 -1 4 -1 5 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a single line containing the level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n-10 ^ 9 &lt;= HOUSENUMBER &lt;= 10 ^ 9\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 is the number of Houses in the given city and &#39;HOUSENUMBER&#39; is the House number of each House.\n\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n1 2 3 -1 4 -1 5 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 # 2 3 # 4 5 #   \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nThe level order traversal of a given city is 1 2 3 -1 4 -1 5 -1 -1 -1 -1, thus its first House is HOUSENUMBER with value 1, and left and right Houses of the 1 are nodes with 2 and 3 respectively.\nThe initial binary tree and the binary tree after connecting adjacent nodes are shown below\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/test1-7670.JPG\" alt=\"alt test1\">\n<img src=\"https://files.codingninjas.in/test1out-7671.JPG\" alt=\"alt testout\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n1 2 -1 -1 4 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 # 2 # 4 # \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>See the figures below for their explanation.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/testinput2-7672.JPG\" alt=\"alt out2\">\n<img src=\"https://files.codingninjas.in/testin2-7673.JPG\" alt=\"alt out1\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "In a city represented as a binary tree, where each house has at most two connections and level *k* can have at most 2^*k* houses, residents from different houses at the same level cannot interact directly. Given the root of this binary tree, connect all houses at the same level using the `next` pointer of the `House` class to enable easy communication between neighbors. If a house has no house to its right on the same level, set its `next` pointer to `NULL`. Implement this task using constant extra space.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3000",
                    "-10 ^ 9 <= HOUSENUMBER <= 10 ^ 9",
                    "You may only use constant extra space."
                ],
                "testcases": [
                    {
                        "input": "firstHouse represents the root of a binary tree where each node is of type House<int>.\nInput Tree represented as level order traversal: 1 2 3 -1 4 -1 5 -1 -1 -1 -1",
                        "output": "The tree after connecting the 'next' pointers at each level such that a level order traversal with 'next' pointers gives: 1 # 2 3 # 4 5 # ",
                        "explanation": "The level order traversal of a given city is 1 2 3 -1 4 -1 5 -1 -1 -1 -1, thus its first House is HOUSENUMBER with value 1, and left and right Houses of the 1 are nodes with 2 and 3 respectively.\nThe initial binary tree and the binary tree after connecting adjacent nodes are as shown in the problem description."
                    },
                    {
                        "input": "firstHouse represents the root of a binary tree where each node is of type House<int>.\nInput Tree represented as level order traversal: 1 2 -1 -1 4 -1 -1",
                        "output": "The tree after connecting the 'next' pointers at each level such that a level order traversal with 'next' pointers gives: 1 # 2 # 4 # ",
                        "explanation": "See the figures in the problem description for a visual representation of the input and output."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use inorder traversal and store addresses of House at every level in some data structure.</p>",
            "<p>Try to optimize space by making use of the next links you are creating.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}