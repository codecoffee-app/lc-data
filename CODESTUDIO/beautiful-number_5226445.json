{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 21270,
            "title": "Beautiful number",
            "titleSlug": "beautiful-number_5226445",
            "content": "<h4 id=\"ninja-loves-beautiful-numbers-and-also-has-two-integers-l-and-r-denoting-an-interval-l-r\">Ninja loves beautiful numbers and also has two integers, \u2018L\u2019 and \u2018R\u2019, denoting an interval [L, R].</h4>\n\n<h4 id=\"given-the-interval-l-r-ninja-wants-you-to-find-the-number-of-beautiful-numbers-in-the-interval\">Given the interval [L, R], Ninja wants you to find the number of Beautiful numbers in the interval.</h4>\n\n<h4 id=\"a-beautiful-number-is-a-number-that\">A Beautiful Number is a number that:</h4>\n\n<h4 id=\"becomes-1-by-repeatedly-replacing-the-number-with-the-sum-of-squares-of-its-digits\">Becomes 1 by repeatedly replacing the number with the sum of squares of its digits.</h4>\n\n<h4 id=\"if-the-number-does-not-become-1-then-it-s-not-a-beautiful-number\">If the number does not become 1, then it\u2019s not a Beautiful Number.</h4>\n\n<h4 id=\"for-example-given-interval-1-3\">For example, given interval = [1, 3]</h4>\n\n<h4 id=\"we-see-that-1-is-a-beautiful-number-but-2-3-are-not-hence-the-answer-is-1\">We see that 1 is a Beautiful Number but 2,3 are not. Hence the answer is 1.</h4>\n\n<h4 id=\"output-the-single-integer-the-sum-of-all-beautiful-numbers-in-the-given-range\">Output the single integer, the sum of all Beautiful Numbers in the given range.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018L\u2019 = \u20181\u2019 ,  &#39;R&#39; = \u20183\u2019\n\nOutput: 1\n\nAs \u20181\u2019 is the only Beautiful Number.\n\n3 is not Beautiful as, \n3 -&gt; 9\n9 -&gt; 81\n81 -&gt; 65\n65 -&gt; 61 \u2026 and so on\nIt can be shown that we cannot get 1. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain the integer &#39;T&#39;, denoting the number of test cases.\n\nFor each test case, the first line contains two integers \u2018L\u2019 and \u2018R\u2019 denoting the ends of an interval.    \n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a single integer representing the sum of all Beautiful Numbers in the given interval [L, R].     \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= L &lt;= R &lt;= 10^5\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n31 33\n1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>63\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<p>For the first test case:</p>\n\n<pre><code>Both 31 and 32 can be shown to be Beautiful Numbers as shown below. \n\n31 -&gt; 3^2 + 1^2 = 10 \n10 -&gt; 1^2 +0^2 = 1\n\n32 -&gt; 3^2 + 2^2 = 13\n13 -&gt; 1^2 + 3^2 = 10\n10 -&gt; 1^2  = 1\n\nHence the num = 31 + 32 = 63. It can be shown that no other numbers in the given interval are beautiful. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n13 20\n2 23\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>32\n72\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an interval [L, R], determine the sum of all 'beautiful numbers' within that interval. A beautiful number is defined as a number that eventually becomes 1 when repeatedly replaced by the sum of the squares of its digits. If a number does not become 1 through this process, it is not considered a beautiful number.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= L <= R <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "l = 31, r = 33",
                        "output": "63",
                        "explanation": "Both 31 and 32 are beautiful numbers. 31 -> 3^2 + 1^2 = 10 -> 1^2 + 0^2 = 1. 32 -> 3^2 + 2^2 = 13 -> 1^2 + 3^2 = 10 -> 1^2 + 0^2 = 1. Thus, 31 + 32 = 63."
                    },
                    {
                        "input": "l = 1, r = 3",
                        "output": "1",
                        "explanation": "Only 1 is a beautiful number within the interval [1, 3]."
                    },
                    {
                        "input": "l = 13, r = 20",
                        "output": "32",
                        "explanation": "13 and 19 are beautiful numbers in the given range. 13 -> 10 -> 1 and 19 -> 82 -> 68 -> 100 -> 1. Hence the sum is 13+19=32"
                    },
                    {
                        "input": "l = 2, r = 23",
                        "output": "72",
                        "explanation": "2, 4, 13, 16, 19 and 23 are beautiful numbers between 2 and 23. Therefore 4 + 13 + 16 + 19 + 23 = 75"
                    },
                    {
                        "input": "l=50, r=55",
                        "output": "0",
                        "explanation": "No numbers in the range [50, 55] are beautiful."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>&nbsp;</strong>Handle repeated numbers while simulating the process.&nbsp;</p>",
            "<p>Observe that the max number of operations to reach \u20181\u2019 is very small&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}