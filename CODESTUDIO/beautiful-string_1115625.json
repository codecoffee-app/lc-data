{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9998,
            "title": "Beautiful String",
            "titleSlug": "beautiful-string_1115625",
            "content": "<h4 id=\"ninja-has-been-given-a-binary-string-str-containing-either-0-or-1-a-binary-string-is-called-beautiful-if-it-contains-alternating-0s-and-1s\">Ninja has been given a binary string \u2018STR\u2019 containing either \u20180\u2019 or \u20181\u2019. A binary string is called beautiful if it contains alternating 0s and 1s.</h4>\n\n<h4 id=\"for-example-0101-1010-101-010-are-beautiful-strings\">For Example:\u20180101\u2019, \u20181010\u2019, \u2018101\u2019, \u2018010\u2019 are beautiful strings.</h4>\n\n<h4 id=\"he-wants-to-make-str-beautiful-by-performing-some-operations-on-it-in-one-operation-ninja-can-convert-0-into-1-or-vice-versa\">He wants to make \u2018STR\u2019 beautiful by performing some operations on it. In one operation, Ninja can convert \u20180\u2019 into \u20181\u2019 or vice versa.</h4>\n\n<h4 id=\"your-task-is-to-determine-the-minimum-number-of-operations-ninja-should-perform-to-make-str-beautiful\">Your task is to determine the minimum number of operations Ninja should perform to make \u2018STR\u2019 beautiful.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>Minimum operations to make \u2018STR\u2019 \u20180010\u2019 beautiful is \u20181\u2019. In one operation, we can convert \u20180\u2019 at index \u20180\u2019 (0-based indexing) to \u20181\u2019. The \u2018STR\u2019 now becomes \u20181010\u2019 which is a beautiful string. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe only line of each test case contains a binary string &#39;STR&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the minimum operations needed to make \u2018STR\u2019 beautiful.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n2 &lt;= |STR| &lt;= 10^5\nSTR[i] = \u20181\u2019 or \u20180\u2019\n\nWhere &#39;|STR|&#39; denotes the length of \u2018STR\u2019.\n\nTime Limit: 1 sec \n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n0000\n1010\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>2\n0\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h4>\n\n<pre><code>For the first test case:\nThe two beautiful strings that can be formed from the given \u2018STR\u2019 \nare \u201c1010\u201d and \u201c0101\u201d. Ninja can transform \u2018STR\u2019 to \u201c1010\u201d by \nperforming the following operations:\nReplace \u20180\u2019 at index 0 by \u20181\u2019.\nReplace \u20180\u2019 at index 2 by \u20181\u2019.\n\nNinja can transform \u2018STR\u2019 to \u201c0101\u201d by performing the following \noperations:\nReplace \u20180&#39; at index 1 by \u20181\u2019.\nReplace \u20180\u2019 at index 3 by \u20181\u2019.\n\nThe minimum number of operations in transforming \u2018STR\u2019 to either of the two beautiful strings is 2.\n\nFor the second test case:\nGiven \u2018STR\u2019 is already beautiful so the minimum number of operations required is 0.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n01011\n1001\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>1\n2\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h4>\n\n<pre><code>For the first test case:\nThe two beautiful strings that can be formed from the given \u2018STR\u2019 are \u201c10101\u201d and \u201c01010\u201d. Ninja can transform \u2018STR\u2019 to \u201c10101\u201d by performing the following operations:\nReplace \u20180\u2019 at index 0 by \u20181\u2019.\nReplace \u20181\u2019 at index 1 by \u20180\u2019.\nReplace \u20180\u2019 at index 2 by \u20181\u2019\nReplace \u20181\u2019 at index 4 by \u20180\u2019.\n\nNinja can transform \u2018STR\u2019 to \u201c01010\u201d by performing the following operations:\nReplace \u20181\u2019 at index 4 by \u20180\u2019.\n\nThe minimum number of operations in transforming \u2018STR\u2019 to beautiful is the minimum of the above two which is 1.\n\nFor the second test case:\nThe two beautiful strings that can be formed from the given \u2018STR\u2019 are \u201c1010\u201d and \u201c0101\u201d. Ninja can transform \u2018STR\u2019 to \u201c1010\u201d by performing the following operations:\nReplace \u20180\u2019 at index 2 by \u20181\u2019.\nReplace \u20181\u2019 at index 3 by \u20180\u2019.\n\nNinja can transform \u2018STR\u2019 to \u201c0101\u201d by performing the following operations:\nReplace \u20180\u2019 at index 0 by \u20181\u2019.\nReplace \u20181\u2019 at index 1 by \u20180\u2019.\n\nThe minimum number of operations in transforming \u2018STR\u2019 to either of the two beautiful strings is 2.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 610,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary string `STR` consisting of '0's and '1's, determine the minimum number of operations required to transform it into a beautiful string. A beautiful string is defined as a string with alternating '0's and '1's (e.g., '0101', '1010', '101', '010'). In a single operation, you can convert a '0' to '1' or vice versa.",
                "constraints": [
                    "1 <= T <= 100",
                    "2 <= |STR| <= 10^5",
                    "STR[i] = '1' or '0'",
                    "Where |STR| denotes the length of STR.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "0000",
                        "output": "2",
                        "explanation": "To make '0000' a beautiful string, we can either transform it to '0101' or '1010'.  Transforming it to '0101' requires changing the characters at indices 1 and 3 (0-based indexing). Transforming it to '1010' requires changing the characters at indices 0 and 2. Thus, the minimum operations required is 2."
                    },
                    {
                        "input": "1010",
                        "output": "0",
                        "explanation": "The input string '1010' is already a beautiful string, so no operations are required."
                    },
                    {
                        "input": "01011",
                        "output": "1",
                        "explanation": "We can transform '01011' to either '01010' or '10101'. Converting to '01010' requires only one change (the last digit), while converting to '10101' requires more than one change. Thus minimum number of operations is 1."
                    },
                    {
                        "input": "1001",
                        "output": "2",
                        "explanation": "We can transform '1001' to either '0101' or '1010'.  Transforming it to '0101' requires changing the characters at indices 0 and 1. Transforming it to '1010' requires changing the characters at indices 2 and 3. Thus, the minimum operations required is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For any length of the given string \u2018STR\u2019, there are only two possible beautiful strings ie: one starting with \u20181\u2019 and the other starting with \u20180\u2019.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(|STR|)\r\n    Space Complexity : O(1)\r\n\r\n    Where |STR| is the length of STR\r\n\r\n*/\r\n\r\nint makeBeautiful(string str) \r\n{\r\n    int n = str.length();\r\n\r\n    // 'T1' denotes the difference between values at indices in 'STR' and the possible beautiful string starting with 0 \r\n    // 'T2' denotes the difference between values at indices in 'STR' and the possible beautiful string starting with 1\r\n    // 'S1' and 'S2' denote the expected value at index 'i' in both of the possible beautiful strings \r\n    int t1 = 0, t2 = 0;\r\n    char s1 = '0', s2 = '1';\r\n\r\n    for (int i = 0; i < n; i++) \r\n    {\r\n        // Iterate over the string \r\n        if (str[i] == '1') \r\n        {\r\n            if (s1 == '0') \r\n            {\r\n                t1++;\r\n            }\r\n            else {\r\n                t2++;\r\n            }\r\n        }\r\n\r\n        // If 'STR[i]' == 0\r\n        else \r\n        {\r\n            if (s1 == '1') \r\n            {\r\n                t1++;\r\n            }\r\n            else \r\n            {\r\n                t2++;\r\n            }\r\n        }\r\n        \r\n        // If 'S1' == '0' then make it 1 and vise versa do the same for 'S2'\r\n        if (s1 == '1') \r\n        {\r\n            s1 = '0';\r\n            s2 = '1';\r\n        }\r\n        else \r\n        {\r\n            s1 = '1';\r\n            s2 = '0';\r\n        }\r\n    }\r\n    \r\n    // Return the minimum of 'T1' and 'T2'\r\n    return min(t1, t2);\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(|STR|)\r\n    Space Complexity : O(1)\r\n\r\n    Where |STR| is the length of STR\r\n*/\r\n\r\nimport java.lang.Math;\r\n\r\npublic class Solution \r\n{\r\n    public static int makeBeautiful(String str) \r\n    {\r\n        int n = str.length();\r\n\r\n        // 'T1' denotes the difference between values at indices in 'STR' and the possible beautiful string starting with 0 \r\n        // 'T2' denotes the difference between values at indices in 'STR' and the possible beautiful string starting with 1\r\n        // 'S1' and 'S2' denote the expected value at index 'i' in both of the possible beautiful strings \r\n        int t1 = 0, t2 = 0;\r\n        char s1 = '0', s2 = '1';\r\n        \r\n        // Iterate over the string \r\n        for (int i = 0; i < n; i++) \r\n        {   \r\n            // If 'STR[i]' == 1\r\n            if (str.charAt(i) == '1') \r\n            {\r\n                if (s1 == '0') \r\n                {\r\n                    t1++;\r\n                } \r\n                else \r\n                {\r\n                    t2++;\r\n                }\r\n            } \r\n            // If 'STR[i]' == 0\r\n            else \r\n            {\r\n                if (s1 == '1') \r\n                {\r\n                    t1++;\r\n                } \r\n                else {\r\n                    t2++;\r\n                }\r\n            }\r\n            \r\n            // If 'S1' == '0' then make it 1 and vise versa do the same for 'S2'\r\n            if (s1 == '1') \r\n            {\r\n                s1 = '0';\r\n                s2 = '1';\r\n            } \r\n            else \r\n            {\r\n                s1 = '1';\r\n                s2 = '0';\r\n            }\r\n        }\r\n        \r\n        // Return the minimum of 'T1' and 'T2'\r\n        return Math.min(t1, t2);\r\n\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n\r\n    Time Complexity : O(|STR|)\r\n    Space Complexity : O(1)\r\n\r\n    Where |STR| is the length of STR\r\n\r\n'''\r\n\r\ndef makeBeautiful(str):\r\n    n = len(str)\r\n\r\n    # 'T1' denotes the difference between values at indices in 'STR' and the possible beautiful string starting with 0 \r\n    # 'T2' denotes the difference between values at indices in 'STR' and the possible beautiful string starting with 1\r\n    #'S1' and 'S2' denote the expected value at index 'i' in both of the possible beautiful strings    \r\n    t1 = 0\r\n    t2 = 0\r\n    s1 = '0'\r\n    s2 = '1'\r\n    \r\n    # Iterate over the string \r\n    for i in range(n):\r\n\r\n        # If 'STR[i]' == 1\r\n        if (str[i] == '1'):\r\n            if (s1 == '0'):\r\n                t1 += 1\r\n            else:\r\n                t2 += 1\r\n\r\n        # If 'STR[i]' == 0\r\n        else:\r\n            if (s1 == '1'):\r\n                t1 += 1\r\n            else:\r\n                t2 += 1\r\n        \r\n        # If 'S1' == '0' then make it 1 and vise versa do the same for 'S2'\r\n        if (s1 == '1'):\r\n            s1 = '0'\r\n            s2 = '1'\r\n        else:\r\n            s1 = '1'\r\n            s2 = '0'\r\n    \r\n    # Return the minimum of 'T1' and 'T2'\r\n    return min(t1, t2)\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}