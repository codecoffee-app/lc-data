{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12755,
            "title": "Beautiful String",
            "titleSlug": "beautiful-string_1474888",
            "content": "<h4 id=\"suppose-we-are-given-an-empty-string-inputstring-we-have-to-convert-this-inputstring-into-a-beautiful-string\">Suppose we are given an empty string \u201cinputString\u201d. We have to convert this \u201cinputString\u201d into a \u201cBeautiful String\u201d</h4>\n\n<h4 id=\"we-can-perform-any-number-of-operations-on-inputstring-to-convert-it-to-beautiful-string\">We can perform any number of operations on \u201cinputString\u201d to convert it to \u201cBeautiful String\u201d.</h4>\n\n<h4 id=\"operation\">Operation :</h4>\n\n<pre><code>You have to insert \u201cabc\u201d to \u201cinputString\u201d in every operation.\nIf \u201cinputString\u201d is empty just insert \u201cabc\u201d in \u201cinputString\u201d\nIf \u201cinputString\u201d is not empty, you can insert \u201cabc\u201d in any position in \u201cinputString\u201d in such a way that:\n1. \u201c LEFT PORTION OF \u201cinputString\u201d \u201d + \u201c abc \u201d + \u201c RIGHT PORTION OF \u201cinputString\u201d \u201d = \u201cBeautiful String\u201d.\n2. \u201c LEFT PORTION OF \u201cinputString\u201d \u201d maybe EMPTY OR \u201ca\u201d OR \u201cab\u201d OR \u201cabc\u201d.\n3. \u201c LEFT PORTION OF \u201cinputString\u201d \u201d maybe EMPTY OR \u201cc\u201d OR \u201cbc\u201d OR \u201cabc\u201d.\n</code></pre>\n\n<h4 id=\"your-task-is-to-find-whether-the-given-string-inputstring-is-a-beautiful-string-or-not\">Your task is to find whether the given string \u201cinputString\u201d is a \u201cBeautiful String\u201d, or not.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The given string &quot;inputString&quot; cannot be empty.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run.\n\nThe next line of each test case contains a string \u201cinputString\u201d, representing the string for which you have to determine if the string is a \u201cBeautiful String\u201d or not.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, print a single line as \u201cTrue\u201d or \u201cFalse\u201d  as per the given condition.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything, It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= |inputString| &lt;= 1000  \n\nWhere \u201cinputString\u201d will have only lowercase alphabets and |inputString| represents the length of the input string.\n\nTime Limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\nabcabc     \nabccba\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>Test Case 1 :\nFor the first test case, the given string is \u201cabcabc\u201d so we return \u201cTrue\u201d as first we add \u201cabc\u201d then again \u201cabc\u201d so we can say we are able to build the string \u201cinputString\u201d to \u201cBeautiful String\u201d.\n\nTest Case 2 :\nFor this test case, the given string is \u201cabccba\u201d so we return \u201cFalse\u201d as first we add \u201cabc\u201d then we can\u2019t add \u201cabc\u201d as \u201ccba\u201d is present so we return false.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\naabcbc\nbabcc\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>True\nFalse\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `inputString`, determine if it can be constructed by repeatedly inserting the string \"abc\" into an initially empty string.  You can insert \"abc\" at any position such that the left portion of the string is empty or ends with \"a\", \"ab\", or \"abc\" and the right portion of the string begins with empty or  \"c\", \"bc\", or \"abc\".\n\nFor example:\n\n*   Inserting into an empty string is valid.\n*   Inserting \"abc\" into \"abc\" to form \"abcabc\" is valid.\n*   Inserting \"abc\" into \"ab\" to form \"ababc\" or \"abcab\" is invalid, because \"ab\" doesn't end with \"abc\".\n\n",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= |inputString| <= 1000",
                    "`inputString` will contain only lowercase alphabets.",
                    "`inputString` cannot be empty."
                ],
                "testcases": [
                    {
                        "input": "abcabc",
                        "output": "True",
                        "explanation": "The string \"abcabc\" can be formed by inserting \"abc\" into the empty string, and then inserting \"abc\" again at the end (or the beginning)."
                    },
                    {
                        "input": "abccba",
                        "output": "False",
                        "explanation": "The string \"abccba\" cannot be constructed by inserting \"abc\" repeatedly following the given rules.  Once 'cba' appears you can't get rid of it."
                    },
                    {
                        "input": "aabcbc",
                        "output": "True",
                        "explanation": "The string \"aabcbc\" can be formed by first adding \"abc\", and then inserting \"abc\" into it in a valid place."
                    },
                    {
                        "input": "babcc",
                        "output": "False",
                        "explanation": "The string \"babcc\" cannot be constructed by repeatedly adding \"abc\".  The 'b' at the beginning makes it impossible."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a Brute Force approach?</p>",
            "<p>Can you think of using a stack?</p>",
            "<p>Can you think of this solution using two-pointers?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}