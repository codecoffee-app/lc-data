{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22704,
            "title": "Beautiful Subarray Pair",
            "titleSlug": "beautiful-subarray-pair_5828900",
            "content": "<h4 id=\"ninja-is-very-fond-of-subarrays-so-he-gave-you-a-problem-related-to-subarrays\">Ninja is very fond of subarrays, so he gave you a problem related to subarrays.</h4>\n\n<h4 id=\"a-subarray-is-a-contiguous-part-of-an-array\">A subarray is a contiguous part of an array.</h4>\n\n<h4 id=\"your-task-is-to-find-the-maximum-possible-beauty-of-non-overlapping-non-empty-subarray-pairs-present-in-the-array-a\">Your task is to find the maximum possible beauty of non-overlapping non-empty subarray pairs present in the array \u2018A\u2019.</h4>\n\n<h4 id=\"beauty-of-a-subarray-pair-is-defined-as-the-absolute-difference-of-the-sum-of-elements-of-both-the-subarrays\">Beauty of a subarray pair is defined as the absolute difference of the sum of elements of both the subarrays.</h4>\n\n<h4 id=\"a-subarray-pair-is-said-to-be-non-overlapping-if-there-is-no-index-common-to-both-subarrays\">A subarray pair is said to be non-overlapping if there is no index common to both subarrays.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: [1,2,-3,4,5]\n\nOutput: 12\n\nIn the given array we can consider the subarray pair { [-3] , [4,5] } which has the maximum beauty.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain the integer &#39;T&#39;, denoting the number of test cases.\n\nThe first line of each test case contains one integer \u2018N\u2019 denoting the size of array \u2018A\u2019.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers, elements of the array \u2018A\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, Return the maximum possible beauty of all valid subarray pairs.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10000\n-10^9 &lt;= A[i] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5   \n-6 3 1 -5 9\n4\n-3 1 9 -10\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>16\n20\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first case:\nWe can consider the subarray pair { [-6,3,1,-5] , [9] } which has the maximum beauty (9-(-6+3+1-5) = 16).\n\nFor the second case:\nWe can consider the subarray pair { [1,9] , [-10] } which has the maximum beauty ((1+9)-(-10) = 20).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n8\n6 1 -50 1 50 30 6 -100\n6\n55 19 -21 13 -10 -67\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>187\n159\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'A', find the maximum possible beauty of non-overlapping, non-empty subarray pairs. The beauty of a subarray pair is defined as the absolute difference between the sums of their elements. Subarrays are contiguous parts of the array, and non-overlapping means they have no index in common.",
                "constraints": [
                    "1 <= T <= 50 (Number of test cases)",
                    "1 <= N <= 10000 (Size of array 'A')",
                    "-10^9 <= A[i] <= 10^9 (Elements of array 'A')",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n-6 3 1 -5 9",
                        "output": "16",
                        "explanation": "Consider the subarray pair { [-6, 3, 1, -5], [9] }.  The sum of the first subarray is -7, and the sum of the second is 9. The absolute difference is |9 - (-7)| = |9 + 7| = 16."
                    },
                    {
                        "input": "4\n-3 1 9 -10",
                        "output": "20",
                        "explanation": "Consider the subarray pair { [1, 9], [-10] }. The sum of the first subarray is 10, and the sum of the second is -10. The absolute difference is |10 - (-10)| = |10 + 10| = 20."
                    },
                    {
                        "input": "8\n6 1 -50 1 50 30 6 -100",
                        "output": "187",
                        "explanation": null
                    },
                    {
                        "input": "6\n55 19 -21 13 -10 -67",
                        "output": "159",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check all possible subarray pairs.</p>",
            "<p>Precompute the maximum and minimum subarray sums for both left and right part of the array at each index i.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}