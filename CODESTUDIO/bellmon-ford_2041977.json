{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14183,
            "title": "Bellmon Ford",
            "titleSlug": "bellmon-ford_2041977",
            "content": "<h4 id=\"you-have-been-given-a-directed-weighted-graph-of-n-vertices-labeled-from-1-to-n-and-m-edges-each-edge-connecting-two-nodes-u-and-v-has-a-weight-w-denoting-the-distance-between-them\">You have been given a directed weighted graph of <em><strong>\u2018N\u2019</strong></em> vertices labeled from 1 to &#39;N&#39; and <em><strong>\u2018M\u2019</strong></em> edges. Each edge connecting two nodes <em><strong>&#39;u&#39;</strong></em> and <em><strong>&#39;v&#39;</strong></em> has a weight <em><strong>&#39;w&#39;</strong></em> denoting the distance between them.</h4>\n\n<p><br></p>\n\n<h4 id=\"your-task-is-to-calculate-the-shortest-distance-of-all-vertices-from-the-source-vertex-src\">Your task is to calculate the shortest distance of all vertices from the source vertex <em><strong>&#39;src&#39;</strong></em>.</h4>\n\n<p><br></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>If there is no path between &#39;src&#39; and &#39;ith&#39; vertex, the value at &#39;ith&#39; index in the answer array will be 10^8.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<p><img src=\"https://files.codingninjas.in/image-11779.png\" alt=\"Alt text\"></p>\n\n<pre><code>3 3 1\n1 2 2\n1 3 2\n2 3 -1\n\nIn the above graph: \n\nThe length of the shortest path between vertex 1 and vertex 1 is 1-&gt;1 and the cost is 0.\n\nThe length of the shortest path between vertex 1 and vertex 2 is 1-&gt;2 and the cost is 2.\n\nThe length of the shortest path between vertex 1 and vertex 3 is 1-&gt;2-&gt;3 and the cost is 1.\n\nHence we return [0, 2, 1].\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>It&#39;s guaranteed that the graph doesn&#39;t contain self-loops and multiple edges. Also, the graph does not contain negative weight cycles.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line contains three single space-separated integers \u2018N\u2019,  \u2018M\u2019, and \u2018src\u2019 denoting the number of vertices, the number of edges in the directed graph, the source vertex, respectively.\n\nThe following \u2018M\u2019 lines contain three single space-separated integers \u2018u\u2019, \u2018v\u2019, and \u2018w\u2019, denoting an edge from vertex \u2018u\u2019 to vertex \u2018v\u2019, having weight \u2018w\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>Return an integer denoting the shortest path length from \u2018src\u2019 to \u2018dest\u2019. If no path is possible, return 10^9. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>4 4 1\n1 2 4\n1 3 3\n2 4 7 \n3 4 -2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>0 4 3 1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/colimage-11780.png\" alt=\"Alt text\"></p>\n\n<pre><code>In the above graph: \n\nThe length of the shortest path between vertex 1 and vertex 1 is 1-&gt;1 and the cost is 0.\n\nThe length of the shortest path between vertex 1 and vertex 2 is 1-&gt;2 and the cost is 4.\n\nThe length of the shortest path between vertex 1 and vertex 3 is 1-&gt;3 and the cost is 3.\n\nThe length of the shortest path between vertex 1 and vertex 4 is 1-&gt;3-&gt;4 and the cost is 1.\n\nHence we return [0, 4, 3, 1].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2 1 1\n2 1 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0 1000000000\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= N &lt;= 50\n1 &lt;= M &lt;= 300\n1 &lt;= src &lt;= N\n1 &lt;= u,v &lt;= N\n-10^5 &lt;= w &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 98,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed weighted graph with 'N' vertices (labeled 1 to 'N') and 'M' edges, where each edge connects nodes 'u' and 'v' with a weight 'w' representing the distance between them, calculate the shortest distance from the source vertex 'src' to all other vertices. If no path exists between 'src' and the 'i-th' vertex, the distance is 10^8.",
                "constraints": [
                    "1 <= N <= 50",
                    "1 <= M <= 300",
                    "1 <= src <= N",
                    "1 <= u, v <= N",
                    "-10^5 <= w <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 4 1\n1 2 4\n1 3 3\n2 4 7\n3 4 -2",
                        "output": "0 4 3 1",
                        "explanation": "The shortest distances from vertex 1 to all other vertices are as follows:\n- Vertex 1: Distance is 0 (1 -> 1).\n- Vertex 2: Distance is 4 (1 -> 2).\n- Vertex 3: Distance is 3 (1 -> 3).\n- Vertex 4: Distance is 1 (1 -> 3 -> 4)."
                    },
                    {
                        "input": "2 1 1\n2 1 3",
                        "output": "0 1000000000",
                        "explanation": "The shortest distances from vertex 1 to all other vertices are as follows:\n- Vertex 1: Distance is 0 (1 -> 1).\n- Vertex 2: There is no path from vertex 1 to vertex 2, so the distance is 10^8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of negative edges and see which algorithm works on negative edges.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity: O(N * M)\r\n    Space complexity: O(N)\r\n\r\n    where 'N' is the number of vertices in the graph and 'M' is the number of edges in the graph.\r\n*/\r\n\r\nvector<int> bellmonFord(int n, int m, int src, vector<vector<int>> &edges) {\r\n\r\n    // Create a vector to store the distances from source.\r\n    vector<int> d(n + 1, 1e8);\r\n    // Distance of source to source is 0.\r\n    d[src] = 0;\r\n\r\n    // Apply bellmonford algorithm.\r\n    for (int i = 1; i < n; i++)\r\n    {\r\n        for (int j = 0; j < m; j++)\r\n        {\r\n            int u = edges[j][0];\r\n            int v = edges[j][1];\r\n            int w = edges[j][2];\r\n\r\n            if (d[u] != 1e9 && d[v] > (d[u] + w)) {\r\n                d[v] = d[u] + w;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Return the distance of destination.\r\n    return d;\r\n\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity: O(N * M)\r\n    Space complexity: O(N)\r\n\r\n    where 'N' is the number of vertices in the graph and 'M' is the number of edges in the graph.\r\n*/\r\n\r\nimport java.util.List;\r\nimport java.util.Arrays;\r\npublic class Solution {\r\n\r\n    public static int[] bellmonFord(int n, int m, int src, List<List<Integer>> edges) {\r\n\r\n        // Create an array to store the distances from source.\r\n        int [] d=new int[n + 1];\r\n\r\n        Arrays.fill(d,100000000);\r\n\r\n\r\n        // Distance of source to source is 0.\r\n        d[src] = 0;\r\n\r\n        // Apply bellmonford algorithm.\r\n        for (int i = 1; i < n; i++)\r\n        {\r\n            for (int j = 0; j < m; j++)\r\n            {\r\n                int u = edges.get(j).get(0);\r\n                int v =  edges.get(j).get(1);\r\n                int w =  edges.get(j).get(2);\r\n\r\n                if (d[u] != 1000000000 && d[v] > (d[u] + w)) {\r\n                    d[v] = d[u] + w;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Return the distance of destination.\r\n        return d;\r\n    }\r\n\r\n\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time complexity: O(N * M)\r\n    Space complexity: O(N)\r\n\r\n    where 'N' is the number of vertices in the graph and 'M' is the number of edges in the graph.\r\n'''\r\n\r\n\r\ndef bellmonFord(n, m, src, edges):\r\n\r\n    # Create an array to store the distances from source.\r\n    d = [100000000 for i in range(n + 1)]\r\n\r\n    # Distance of source to source is 0.\r\n    d[src] = 0\r\n\r\n    # Apply bellmonford algorithm.\r\n    for i in range(1, n):\r\n\r\n        for j in range(m):\r\n\r\n            u = edges[j][0]\r\n            v = edges[j][1]\r\n            w = edges[j][2]\r\n\r\n            if (d[u] != 1000000000 and d[v] > (d[u] + w)):\r\n                d[v] = d[u] + w\r\n\r\n    # Return the distance of destination.\r\n    return d\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}