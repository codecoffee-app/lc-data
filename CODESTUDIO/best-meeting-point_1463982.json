{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12528,
            "title": " Best Meeting Point",
            "titleSlug": "best-meeting-point_1463982",
            "content": "<h4 id=\"ninja-along-with-his-family-moved-to-a-new-city-and-ninja-has-no-friends-he-started-making-new-friends-from-his-school-now-he-has-a-number-of-friends-his-friends-decided-to-meet-in-the-evening-but-all-are-confused-about-where-to-meet\">Ninja, along with his family, moved to a new city, and Ninja has no friends. He started making new friends from his school. Now he has a number of friends. His friends decided to meet in the evening, but all are confused about where to meet?</h4>\n\n<h4 id=\"ninja-is-very-busy-doing-some-other-works-can-you-help-ninja-find-a-place-where-ninja-and-all-his-friends-can-meet-such-that-the-sum-of-distance-traveled-by-ninja-and-his-friends-is-the-minimum-possible-find-the-place-and-print-the-total-sum-of-distances-traveled-by-ninja-and-his-friends\">Ninja is very busy doing some other works. Can you help Ninja find a place where Ninja and all his friends can meet such that the sum of distance traveled by Ninja and his friends is the minimum possible? Find the place and print the total sum of distances traveled by Ninja and his friends.</h4>\n\n<h4 id=\"you-are-given-the-location-of-ninja-and-his-friends-in-the-form-of-a-matrix-in-the-matrix-wherever-the-value-is-1-it-means-that-there-is-a-home-at-that-point-ninja-s-home-or-the-home-of-some-of-his-friends-ninja-and-his-friends-can-meet-at-any-possible-coordinate-in-the-matrix-not-necessarily-at-the-home-of-any-of-the-friends\">You are given the location of Ninja and his friends in the form of a matrix. In the matrix, wherever the value is 1, it means that there is a home at that point (Ninja\u2019s home or the home of some of his friends). Ninja and his friends can meet at any possible coordinate in the matrix, not necessarily at the home of any of the friends.</h4>\n\n<h4 id=\"manhattan-distance-is-used-to-calculate-the-distance-between-two-points-i-e-distance-a-b-a-x-b-x-a-y-b-y-where-a-x-is-the-x-coordinate-of-point-a-a-y-is-the-y-coordinate-of-point-a-b-x-is-the-x-coordinate-of-point-b-b-y-is-the-y-coordinate-of-point-b-respectively\">Manhattan distance is used to calculate the distance between two points, i.e, distance(a, b) = |a.x - b.x| + |a.y - b.y|, (where a.x is the x coordinate of point \u2018a\u2019, a.y is the y coordinate of point \u2018a\u2019, b.x is the x coordinate of point \u2018b\u2019, b.y is the y coordinate of point \u2018b\u2019 respectively).</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. The test cases follow.\n\nThe first line contains two space-separated integers, \u2018N\u2019 and \u2018M\u2019, which denotes the number of rows and columns in the matrix \u2018MAT\u2019.\n\nEach of the next \u2018N\u2019 lines contains \u2018M\u2019 space-separated integers denoting the &#39;N&#39; tows of the matrix &#39;MAT&#39;\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the minimum total distance traveled by you and your friends.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 500\n1 &lt;= M &lt;= 500\n0 &lt;= MAT[i][j] &lt;= 1\n\nWhere &#39;T&#39; is the number of test cases, N, M denotes the number of rows and columns in the matrix \u2018MAT\u2019, and MAT[i][j] denotes the element present at the i&#39;th row and the j&#39;th column of the matrix &#39;MAT&#39;.  \n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 3\n1 0 0\n0 0 0\n0 0 1\n3 3\n1 1 0\n0 1 0\n0 1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n6\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>In the first test case, there are two friends, including Ninja, with homes at (0, 0), and (2, 2). The minimum sum of distance which both have to travel is 4, and one of the meeting points is (0, 0). There are also other meeting points that have total distance traveled equal to 4 - (0, 2), (2, 0), (2, 2). You can choose any of the points to satisfy the given conditions.\n\nIn the second test case, there are six friends, including Ninja, with homes at (0, 0), (0, 1), (1, 1), (2, 1), and (2, 2). The minimum sum of distance which all have to travel is 6, and the meeting point is (1, 1). There is only one meeting point that has the sum of distances equal to 6.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 5\n1 0 1 0 1\n0 1 0 1 0\n1 0 1 0 1\n0 1 0 1 0\n1 0 1 0 1\n4 3\n1 0 1\n1 1 0\n0 0 0\n1 0 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>32\n7\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja and his friends want to find a meeting place that minimizes the total Manhattan distance each person has to travel. You are given a matrix representing the city, where '1' indicates the presence of a home (Ninja's or one of his friends'). The meeting point can be any coordinate within the matrix.  Your task is to calculate and return the minimum total Manhattan distance that Ninja and his friends must travel to meet at the optimal location.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 500",
                    "1 <= M <= 500",
                    "0 <= MAT[i][j] <= 1",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 3\n1 0 0\n0 0 0\n0 0 1",
                        "output": "4",
                        "explanation": "There are two friends located at (0, 0) and (2, 2). Meeting at (0,0), (0,2), (2,0) or (2,2) all result in a total Manhattan distance of 4. For example, meeting at (0, 0), the friend at (0,0) travels 0 and the friend at (2,2) travels |0-2| + |0-2| = 4. Total distance: 0 + 4 = 4."
                    },
                    {
                        "input": "3 3\n1 1 0\n0 1 0\n0 1 1",
                        "output": "6",
                        "explanation": "There are five friends located at (0, 0), (0, 1), (1, 1), (2, 1) and (2, 2). The optimal meeting point is (1, 1) resulting a total manhattan distance of 6.  Friend at (0,0) : |1-0|+|1-0| = 2. Friend at (0,1) : |1-0|+|1-1| = 1. Friend at (1,1) : 0. Friend at (2,1) : |1-2|+|1-1| = 1. Friend at (2,2) : |1-2|+|1-2| = 2. Total distance: 2 + 1 + 0 + 1 + 2 = 6."
                    },
                    {
                        "input": "5 5\n1 0 1 0 1\n0 1 0 1 0\n1 0 1 0 1\n0 1 0 1 0\n1 0 1 0 1",
                        "output": "32",
                        "explanation": null
                    },
                    {
                        "input": "4 3\n1 0 1\n1 1 0\n0 0 0\n1 0 0",
                        "output": "7",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you iterate over all the points and find the total distance traveled by all the friends?</p>",
            "<p>Can you find the optimal point for the meeting by storing the x and y coordinates and analyzing for x and y coordinates separately?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}