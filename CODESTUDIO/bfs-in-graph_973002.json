{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8986,
            "title": "BFS in Graph",
            "titleSlug": "bfs-in-graph_973002",
            "content": "<h4 id=\"given-an-adjacency-list-representation-of-a-directed-graph-with-n-vertices-and-m-edges-your-task-is-to-return-a-list-consisting-of-breadth-first-traversal-bfs-starting-from-vertex-0\">Given an adjacency list representation of a directed graph with <em><strong>\u2018n\u2019</strong></em> vertices and <em><strong>\u2018m\u2019</strong></em> edges. Your task is to return a list consisting of Breadth-First Traversal (BFS) starting from vertex 0.</h4>\n\n<p><br></p>\n\n<h4 id=\"in-this-traversal-one-can-move-from-vertex-u-to-vertex-v-only-if-there-is-an-edge-from-u-to-v-the-bfs-traversal-should-include-all-nodes-directly-or-indirectly-connected-to-vertex-0\">In this traversal, one can move from vertex &#39;u&#39; to vertex &#39;v&#39; only if there is an edge from &#39;u&#39; to &#39;v&#39;. The BFS traversal should include all nodes directly or indirectly connected to vertex 0.</h4>\n\n<p><br></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The traversal should proceed from left to right according to the input adjacency list.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Adjacency list: { {1,2,3},{4}, {5}, {},{},{}}\n\nThe interpretation of this adjacency list is as follows:\nVertex 0 has directed edges towards vertices 1, 2, and 3.\nVertex 1 has a directed edge towards vertex 4.\nVertex 2 has a directed edge towards vertex 5.\nVertices 3, 4, and 5 have no outgoing edges.\n\nWe can also see this in the diagram below.\n\nBFS traversal: 0 1 2 3 4 5\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-23-29658.jpg\" alt=\"example\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains two integers &#39;n&#39; and &#39;m&#39;, where &#39;n&#39; is the number of vertices in the directed graph, and &#39;m&#39; is the number of directed edges in the graph. \n\nThe second line contains &#39;m&#39; pairs of integers, representing the directed edges in the graph.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The only line contains the BFS Traversal, as described in the task.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>8 7\n0 1\n0 2\n0 3\n1 4\n1 7\n2 5\n3 6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0 1 2 3 4 7 5 6\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/untitled-24-29662.jpg\" alt=\"example\"></p>\n\n<pre><code>n = 8: There are 8 vertices in the graph, labeled from 0 to 7.\nm = 7: There are 7 directed edges in the graph.\n\nThe directed edges are as follows:\nVertex 0 has directed edges towards vertices 1, 2, and 3.\nVertex 1 has directed edges towards vertices 4 and 7.\nVertex 2 has a directed edge towards vertex 5.\nVertex 3 has a directed edge towards vertex 6.\nVertices 4, 5, 6, and 7 have no outgoing edges.\n\nAdjacency list: {{1,2,3}, {4,7}, {5}, {6}, {}, {}, {}, {}}. This is passed to the bfsTraversal function.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4 4\n0 1\n0 2\n1 2\n0 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0 1 2 3\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;n&#39;, &#39;m&#39; &lt;= 10^4\n\nWhere &#39;n&#39; is the number of vertices and &#39;m&#39; is the number of edges.\n\nTime Limit: 1 second\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 240,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph represented by an adjacency list with 'n' vertices and 'm' edges, perform a Breadth-First Traversal (BFS) starting from vertex 0. The BFS should visit all nodes reachable from vertex 0, traversing edges from left to right according to the adjacency list. The traversal should include all nodes directly or indirectly connected to vertex 0. The traversal can only proceed from vertex 'u' to vertex 'v' if there is an edge from 'u' to 'v'.",
                "constraints": [
                    "1 <= 'n', 'm' <= 10^4",
                    "'n' is the number of vertices, and 'm' is the number of edges.",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "8 7\n0 1\n0 2\n0 3\n1 4\n1 7\n2 5\n3 6",
                        "output": "0 1 2 3 4 7 5 6",
                        "explanation": "The graph has 8 vertices and 7 directed edges.  Starting from vertex 0, the BFS visits adjacent nodes 1, 2, and 3. From vertex 1, it visits 4 and 7. From 2 it visits 5 and from 3 it visits 6. The final BFS traversal order is 0 1 2 3 4 7 5 6."
                    },
                    {
                        "input": "4 4\n0 1\n0 2\n1 2\n0 3",
                        "output": "0 1 2 3",
                        "explanation": "The graph has 4 vertices and 4 directed edges. Starting from vertex 0, BFS visits 1, 2 and 3. From vertex 1, it can reach 2 (but 2 is already visited from 0, so we ignore it). The final BFS traversal is 0 1 2 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use a queue to maintain the order of vertices to be visited.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/* \r\n\tTime complexity: O(n + m). \r\n\tSpace complexity: O(n). \r\n\r\n\tWhere 'n' is the number of vertices in the input graph and \r\n   'm' is the number of edges in the input graph.\r\n*/\r\n\r\n\r\nvector<int> bfsTraversal(int n, vector<vector<int>>& adj) {\r\n    vector<int> res;\r\n    queue<int> q;\r\n\r\n    // Start BFS from vertex 0\r\n    q.push(0);\r\n\r\n    // Initialize the visited array with all zeros\r\n    vector<int> vis(n, 0);\r\n\r\n    // Mark vertex 0 as visited (1 indicates visited, 0 indicates not visited)\r\n    vis[0] = 1;\r\n\r\n    while (!q.empty()) {\r\n        // Get the front vertex from the queue\r\n        int topVertex = q.front();\r\n        q.pop();\r\n\r\n        // Add the current vertex to the result vector\r\n        res.push_back(topVertex);\r\n\r\n        // Traverse all neighbors of the current vertex\r\n        for (auto neighbor : adj[topVertex]) {\r\n            // If the neighbor is not visited, mark it as visited and enqueue it\r\n            if (!vis[neighbor]) {\r\n                vis[neighbor] = 1;\r\n                q.push(neighbor);\r\n            }\r\n        }\r\n    }\r\n\r\n    return res;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time complexity: O(n + m). \r\n    Space complexity: O(n). \r\n\r\n    Where 'n' is the number of vertices in the input graph and \r\n    'm' is the number of edges in the input graph.\r\n\"\"\"\r\nfrom typing import List\r\nfrom collections import deque\r\n\r\ndef bfsTraversal(n: int, adj: List[List[int]]) -> List[int]:\r\n    res = []\r\n    q = deque()\r\n\r\n    # Start BFS from vertex 0\r\n    q.append(0)\r\n\r\n    # Initialize the visited array with all zeros\r\n    vis = [0] * n\r\n\r\n    # Mark vertex 0 as visited (1 indicates visited, 0 indicates not visited)\r\n    vis[0] = 1\r\n\r\n    while q:\r\n        # Get the front vertex from the queue\r\n        top_vertex = q.popleft()\r\n\r\n        # Add the current vertex to the result list\r\n        res.append(top_vertex)\r\n\r\n        # Traverse all neighbors of the current vertex\r\n        for neighbor in adj[top_vertex]:\r\n            # If the neighbor is not visited, mark it as visited and enqueue it\r\n            if not vis[neighbor]:\r\n                vis[neighbor] = 1\r\n                q.append(neighbor)\r\n\r\n    return res\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n\tTime complexity: O(n + m).\r\n\tSpace complexity: O(n).\r\n\r\n\tWhere 'n' is the number of vertices in the input graph and\r\n   'm' is the number of edges in the input graph.\r\n*/\r\nimport java.util.ArrayList;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.Queue;\r\npublic class Solution {\r\n    public static List<Integer> bfsTraversal(int n, List<List<Integer>> adj) {\r\n        List<Integer> res = new ArrayList<>();\r\n        Queue<Integer> q = new LinkedList<>();\r\n\r\n        // Start BFS from vertex 0\r\n        q.add(0);\r\n\r\n        // Initialize the visited array with all zeros\r\n        int[] vis = new int[n];\r\n\r\n        // Mark vertex 0 as visited (1 indicates visited, 0 indicates not visited)\r\n        vis[0] = 1;\r\n\r\n        while (!q.isEmpty()) {\r\n            // Get the front vertex from the queue\r\n            int topVertex = q.poll();\r\n\r\n            // Add the current vertex to the result list\r\n            res.add(topVertex);\r\n\r\n            // Traverse all neighbors of the current vertex\r\n            for (int neighbor : adj.get(topVertex)) {\r\n                // If the neighbor is not visited, mark it as visited and enqueue it\r\n                if (vis[neighbor] == 0) {\r\n                    vis[neighbor] = 1;\r\n                    q.add(neighbor);\r\n                }\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n}\r\n\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}