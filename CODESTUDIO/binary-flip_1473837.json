{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12718,
            "title": "Binary Flip",
            "titleSlug": "binary-flip_1473837",
            "content": "<h4 id=\"you-are-given-a-binary-string-of-size-n-and-q-queries-to-work-on\">You are given a binary string of size \u2018N\u2019, and \u2018Q\u2019 queries to work on.</h4>\n\n<h4 id=\"the-queries-are-of-two-types\">The queries are of two types:</h4>\n\n<h4 id=\"i-1-l-r-denoting-that-the-query-is-of-type-1-and-you-have-to-return-the-integer-forming-from-binary-string-in-range-l-r-3\">i)  1 \u2018l\u2019 \u2018r\u2019, denoting that the query is of type-1, and you have to return the integer forming from binary string in range [l, r]  % 3.</h4>\n\n<h4 id=\"ii-2-idx-denoting-that-the-query-is-of-type-2-and-you-have-to-flip-the-bit-at-position-idx\">ii) 2 \u2018idx\u2019, denoting that the query is of type-2, and you have to flip the bit at position \u2018idx\u2019.</h4>\n\n<h4 id=\"eg-if-s-010010-in-query-2-if-l-0-and-r-4-then-then-we-will-take-the-substring-01001-which-is-9-thus-our-answer-will-be-9-3-0\">Eg: If S=\u201d010010\u201d, in query-2 if \u2018l\u2019= 0, and \u2018r\u2019= 4, then then we will take the substring \u201c01001\u201d which is 9, thus our answer will be 9%3 = 0.</h4>\n\n<h4 id=\"note-l-r-idx-are-in-0-based-indexing\">Note: l, r, idx are in 0-based indexing.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer \u2018N\u2019, denoting the length of binary string \u2018S\u2019.\n\nThe next line contains the binary string \u2018S\u2019.\n\nThe next line contains an integer \u2018Q\u2019, denoting the number of queries.\n\nThe next \u2018Q\u2019 lines contain the queries of type-1 or type-2. The two types of queries are: \ni)  1 \u2018l\u2019 \u2018r\u2019, denoting that the query is of type-1, and you have to return the integer forming from binary string in range [l, r]  % 3.\nii) 2 \u2018idx\u2019, denoting that the query is of type-2, and you have to flip the bit at position \u2018idx\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each query of type-1 return the number forming in the range % 3.\n\nNote: Don&#39;t print anything it has already been taken care of. Just implement the given functions.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N, Q &lt;= 3000\n0 &lt;= l, r, idx &lt;= N - 1\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>5\n10010\n5\n1 0 4\n2 1\n1 0 3\n2 3\n1 1 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>0\n1\n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>S=\u201d10010\u201d\n\nQuery 1: [0, 4] we will have substring  \u201c10010\u201d, which is (2+16)%3 = 0\n\nQuery 2: flip bit at position 1, i.e. flip S[1], which makes,  S=\u201d11010\u201d\n\nQuery 3: [0, 3] we will have substring  \u201c1101\u201d, which is (1+4+8)%3 = 1\n\nQuery 4: flip bit at position 3, i.e. flip S[3], which makes,  S=\u201d11000\u201d\n\nQuery 5: [1, 4] we will have substring  \u201c1000\u201d, which is (8)%3 = 2\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>7\n0111110\n7\n2 4\n1 5 6\n1 6 6\n2 1\n2 6\n1 3 3\n1 0 6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n0\n1\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary string 'S' of length 'N' and 'Q' queries, process each query. There are two types of queries:\n\nType 1: 1 'l' 'r':  Calculate the integer value represented by the substring S[l...r] (inclusive) and return its remainder when divided by 3.\n\nType 2: 2 'idx': Flip the bit at index 'idx' in the string 'S'. (0 becomes 1, and 1 becomes 0).",
                "constraints": [
                    "1 <= N, Q <= 3000",
                    "0 <= l, r, idx <= N - 1",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n10010\n5\n1 0 4\n2 1\n1 0 3\n2 3\n1 1 4",
                        "output": "0\n1\n2",
                        "explanation": "Initially, S = \"10010\".\n\nQuery 1: Substring from index 0 to 4 is \"10010\", which represents the integer 18. 18 % 3 = 0.\n\nQuery 2: Flip the bit at index 1. S becomes \"11010\".\n\nQuery 3: Substring from index 0 to 3 is \"1101\", which represents the integer 13. 13 % 3 = 1.\n\nQuery 4: Flip the bit at index 3. S becomes \"11000\".\n\nQuery 5: Substring from index 1 to 4 is \"1000\", which represents the integer 8. 8 % 3 = 2."
                    },
                    {
                        "input": "7\n0111110\n7\n2 4\n1 5 6\n1 6 6\n2 1\n2 6\n1 3 3\n1 0 6",
                        "output": "2\n0\n1\n0",
                        "explanation": "Initially, S = \"0111110\".\n\nQuery 1: Flip index 4. S becomes \"0111010\"\n\nQuery 2: Substring indices 5 to 6: \"10\", Integer equivalent is 2, remainder is 2.\n\nQuery 3: Substring index 6 to 6: \"0\", integer equivalent is 0, remainder is 0.\n\nQuery 4: Flip index 1. S becomes \"0011010\"\n\nQuery 5: Flip index 6. S becomes \"0011011\"\n\nQuery 6: Substring index 3 to 3: \"1\", integer equivalent is 1, remainder is 1.\n\nQuery 7: Substring indices 0 to 6: \"0011011\", Integer equivalent is 27, remainder is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Brute force the queries, calculate answer for each query in linear time</p>",
            "<p>create a segment tree</p>"
        ],
        "relatedTopics": [],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}