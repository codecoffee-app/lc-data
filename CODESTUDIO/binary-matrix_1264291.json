{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10759,
            "title": "Binary Matrix",
            "titleSlug": "binary-matrix_1264291",
            "content": "<h4 id=\"you-are-given-a-matrix-mat-consisting-of-n-rows-and-m-columns-let-i-j-represent-the-cell-at-the-intersection-of-the-ith-row-and-the-jth-column-each-cell-of-the-matrix-mat-has-either-integer-0-or-1-for-each-cell-in-mat-you-have-to-find-the-manhattan-distance-of-the-nearest-cell-from-this-cell-that-has-the-integer-0-the-nearest-cell-will-be-the-cell-having-the-minimum-manhattan-distance-from-it\">You are given a matrix \u2018MAT\u2019 consisting of \u2018N\u2019 rows and \u2018M\u2019 columns. Let (i, j) represent the cell at the intersection of the ith row and the jth column.  Each cell of the matrix \u2018MAT\u2019 has either integer 0 or 1. For each cell in \u2018MAT\u2019, you have to find the Manhattan distance of the nearest cell from this cell that has the integer 0. The nearest cell will be the cell having the minimum Manhattan distance from it.</h4>\n\n<h4 id=\"manhattan-distance-between-two-cells-p1-q1-and-p2-q2-is-p1-p2-q1-q2\">Manhattan distance between two cells, (p1, q1) and (p2, q2) is |p1 - p2| + |q1 - q2|.</h4>\n\n<h4 id=\"you-should-return-a-matrix-consisting-of-n-rows-and-m-columns-where-the-cell-i-j-represents-the-manhattan-distance-of-the-nearest-cell-from-the-cell-i-j-in-mat-that-has-integer-0\">You should return a matrix consisting of \u2018N\u2019 rows and \u2018M\u2019 columns, where the cell (i, j) represents the  Manhattan distance of the nearest cell from the cell (i, j) in \u2018MAT\u2019 that has integer 0.</h4>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>1. There is at least one cell having the integer 0 in the given matrix.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Consider the following 2*3 matrix \u2018MAT\u2019:\n                 [0, 1, 1]\n                 [0, 1, 1]\n\nHere, the nearest cell having the integer 0 from the cell (0, 0) is the cell (0, 0) itself. The Manhattan distance between them is |0 - 0| + |0 - 0| = 0.\n\nThe nearest cell having the integer 0 from the cell (0, 1) is cell (0, 0). The Manhattan distance between them is |0 - 0| + |1 - 0| = 1.\n\nThe nearest cell having the integer 0 from the cell (0, 2) is cell (0, 0). The Manhattan distance between them is |0 - 0| + |2 - 0| = 2.\n\nThe nearest cell having the integer 0 from the cell (1, 0) is cell (1, 0) itself. The Manhattan distance between them is |1 - 1| + |0 - 0| = 0.\n\nThe nearest cell having the integer 0 from the cell (1, 1) is cell (1, 0). The Manhattan distance between them is |1 - 1| + |1 - 0| = 1.\n\nThe nearest cell having the integer 0 from the cell (1, 2) is cell (1, 0). The Manhattan distance between them is |1 - 1| + |2 - 0| = 2.\nThus we should return matrix:\n\n                [0, 1, 2]\n                [0, 1, 2]\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. then \u2018T\u2019 test cases follow.\n\nThe first line of each test case consists of two single space-separated integers \u2018N\u2019 and \u2018M\u2019 representing the number of rows and columns in matrix \u2018MAT\u2019\n\nThen next \u2018N\u2019 lines follow in each test case. Each of these \u2018N\u2019 lines consists of \u2018M\u2019 single space-separated integers (either 0 or 1).  These \u2018N\u2019 lines together represent the matrix \u2018MAT\u2019. \n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print \u2018N\u2019 lines each of which consists of \u2018M\u2019 space-separated integers. The jth integer in the ith line will be the Manhattan distance of the nearest cell from the cell (i, j) in  \u2018MAT\u2019 that has integer 0.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 100\n1 &lt;= M &lt;= 100\n0 &lt;= MAT[i][j] &lt;= 1\n\n\nWhere \u2018T\u2019 is the total number of test cases,  \u2018N\u2019 and \u2018M\u2019 denote the number of rows and columns in the given matrix \u2018MAT\u2019, and MAT[i][j] is the element of the given matrix at cell (i, j). \n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 1\n0\n2 3\n0 1 1\n0 1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0\n0 1 2\n0 1 2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nThere is only one cell in the given matrix and that cell has integer 0, so the nearest cell from this cell having integer 0 is this cell itself. The Manhattan distance of the cell from itself will be 0.\n\nTest case 2:\nSee the problem statement for an explanation.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 3\n1 1 1\n1 1 1\n1 1 0\n3 4\n1 1 0 1\n1 1 1 1\n0 1 1 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4 3 2\n2 3 1\n2 1 0\n2 1 0 1\n1 2 1 1\n0 1 1 0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -5,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a matrix 'MAT' of size N x M, where each cell contains either 0 or 1. For each cell (i, j) in 'MAT', find the Manhattan distance to the nearest cell containing the value 0.  Return a matrix of the same size, where each cell (i, j) contains the calculated Manhattan distance.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 100",
                    "1 <= M <= 100",
                    "0 <= MAT[i][j] <= 1",
                    "There is at least one cell having the integer 0 in the given matrix."
                ],
                "testcases": [
                    {
                        "input": "1 1\n0",
                        "output": "0",
                        "explanation": "The matrix is 1x1 and the only cell contains 0. Therefore the Manhattan distance to the nearest 0 is 0."
                    },
                    {
                        "input": "2 3\n0 1 1\n0 1 1",
                        "output": "0 1 2\n0 1 2",
                        "explanation": "The provided example showcases how Manhattan distance is calculated for each cell in the 2x3 matrix. The output shows the distance to the closest 0 for each cell."
                    },
                    {
                        "input": "3 3\n1 1 1\n1 1 1\n1 1 0",
                        "output": "4 3 2\n2 3 1\n2 1 0",
                        "explanation": null
                    },
                    {
                        "input": "3 4\n1 1 0 1\n1 1 1 1\n0 1 1 0",
                        "output": "2 1 0 1\n1 2 1 1\n0 1 1 0",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find the Manhattan distance of the cell from each cell that has an integer 0.</p>",
            "<p>Represent matrix as a graph where each cell represents a node in the graph. Consider all the cells that have integer 0 as a source node, and then apply multi-source BFS.</p>",
            "<p>The Manhattan distance of each cell from the nearest cell having integer 0 will be either 0 or 1 more than the Manhattan distance of its neighbouring cells from their nearest cell having integer 0.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}