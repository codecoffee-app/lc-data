{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9138,
            "title": "Binary Numbers",
            "titleSlug": "binary-numbers_975493",
            "content": "<h4 id=\"given-a-number-n-you-are-supposed-to-calculate-the-number-of-1s-in-the-binary-representation-of-the-given-number\">Given a number \u2018N\u2019, you are supposed to calculate the number of 1s in the binary representation of the given number.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Given \u2018N\u2019 = 4, \nIts binary representation is 0..0100, therefore there is only 1 set bit, hence the answer will be 1.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains \u2018T\u2019, denoting the number of test cases. Then each test case follows.\n\nEach test case contains a single integer \u2018N\u2019, denoting the number given.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single line that contains a single integer that denotes the total number of 1s which satisfy the above description.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10 ^ 18\n\nTime Limit: 1 sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n4\n3\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>1\n2    \n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>For the first test case :  \nThe binary representation 4 is 0..0100, therefore there is only 1 set bit. Hence, the answer will be 1.\n\nFor the Second Test case:\nThe binary representation 3 is 0..0011, therefore there are 2 set bits. Hence, the answer will be 2.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n16 \n15\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>1\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 12,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer 'N', determine the number of 1s present in its binary representation.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^18",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "4",
                        "output": "1",
                        "explanation": "The binary representation of 4 is 100.  There is one '1' bit."
                    },
                    {
                        "input": "3",
                        "output": "2",
                        "explanation": "The binary representation of 3 is 11.  There are two '1' bits."
                    },
                    {
                        "input": "16",
                        "output": "1",
                        "explanation": "The binary representation of 16 is 10000. There is one '1' bit."
                    },
                    {
                        "input": "15",
                        "output": "4",
                        "explanation": "The binary representation of 15 is 1111. There are four '1' bits."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you check every bit of the given number?</p>",
            "<p>Can you try <strong>Brian Kernighan\u2019s Algorithm?</strong></p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}