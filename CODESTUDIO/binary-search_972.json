{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 45,
            "title": "Binary Search",
            "titleSlug": "binary-search_972",
            "content": "<h4 id=\"you-are-given-an-integer-array-a-of-size-n-sorted-in-non-decreasing-order-you-are-also-given-an-integer-target-your-task-is-to-write-a-function-to-search-for-target-in-the-array-a-if-it-exists-return-its-index-in-0-based-indexing-if-target-is-not-present-in-the-array-a-return-1\">You are given an integer array <strong><em>&#39;A&#39;</strong></em> of size <strong><em>&#39;N&#39;</strong></em>, sorted in non-decreasing order. You are also given an integer <em><strong>&#39;target&#39;</strong></em>. Your task is to write a function to search for <em><strong>&#39;target&#39;</strong></em> in the array <em><strong>&#39;A&#39;</strong></em>. If it exists, return its index in 0-based indexing. If <em><strong>&#39;target&#39;</strong></em> is not present in the array <em><strong>&#39;A&#39;</strong></em>, return -1.</h4>\n\n<p><br></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You must write an algorithm whose time complexity is O(LogN)\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an Integer &#39;N&#39;, which denotes the size of the array/list.\n\nThe second line contains &#39;N&#39; single space-separated integers representing the elements in the array/list.\n\nThe third line contains the value of &#39;target&#39; to be searched for in the array/list.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Return the index at which &#39;target&#39; is present for each test case, -1 otherwise.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^5\n1 &lt;= A[i] &lt;= 10^9\n1 &lt;= target &lt;= 10^9\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>7\n1 3 7 9 11 12 45\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of sample output 1:</h5>\n\n<pre><code>nums = [1, 3, 7, 9, 11, 12, 45],\nThe index of element &#39;3&#39; is 1.\nHence, the answer is &#39;1&#39;.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>7\n1 2 3 4 5 6 7\n9\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of sample output 2:</h5>\n\n<pre><code>nums = [1, 2, 3, 4, 5, 6, 7],\nElement &#39;9&#39; doesn&#39;t exist.\nHence, the answer is &#39;-1&#39;.\n</code></pre>\n\n<p><br></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 955,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted integer array 'A' of size 'N' (non-decreasing order) and an integer 'target', find the index of 'target' in 'A'. If 'target' exists, return its 0-based index. Otherwise, return -1.  The algorithm must have a time complexity of O(LogN).",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= A[i] <= 10^9",
                    "1 <= target <= 10^9",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "7\n1 3 7 9 11 12 45\n3",
                        "output": "1",
                        "explanation": "The array is [1, 3, 7, 9, 11, 12, 45]. The target is 3, which is located at index 1."
                    },
                    {
                        "input": "7\n1 2 3 4 5 6 7\n9",
                        "output": "-1",
                        "explanation": "The array is [1, 2, 3, 4, 5, 6, 7]. The target is 9, which is not present in the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Apply Binary Search.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "int search(vector<int> &nums, int target)\n{\n  // n is the size of the array 'nums'\n  int n = nums.size();\n\n  // Initialising two variables\n  // 's' and 'e'\n  int s = 0, e = n - 1;\n  while (s <= e)\n  {\n    // Initializing the variable 'mid'\n    int mid = s + (e - s) / 2;\n\n    // If the current index's value is equal to\n    // target, we will return the current index\n    if (nums[mid] == target)\n    {\n      return mid;\n    }\n    // If the value is greater than target,\n    // we will decrease the value of 'e'\n    else if (nums[mid] > target)\n    {\n      e = mid - 1;\n    }\n    // Otherwise, we will increase the value\n    // of 's'\n    else\n    {\n      s = mid + 1;\n    }\n  }\n\n  // If we didn't find anything, we will return -1.\n  return -1;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "def search(nums: [int], target: int):\n    # n is the size of the array 'nums'\n    n = len(nums) - 1\n\n    # Initialising two variables\n    # 's' and 'e'\n    s = 0\n    e = n - 1\n    while s <= e:\n        # Initializing the variable 'mid'\n        mid = (s + e) >> 1\n\n        # If the current index's value is equal to\n        # target, we will return the current index\n        if nums[mid] == target:\n            return mid\n        # If the value is greater than target,\n        # we will decrease the value of 'e'\n        elif nums[mid] > target:\n            e = mid - 1\n        # Otherwise, we will increase the value\n        # of 's'\n        else:\n            s = mid + 1\n    # If we didn't find anything, we will return -1.\n    return -1",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "public class Solution {\n    public static int search(int []nums, int target) {\n        // n is the size of the array 'nums'\n        int n = nums.length - 1;\n\n        // Initialising two variables\n        // 's' and 'e'\n        int s = 0, e = n - 1;\n        while(s <= e) {\n            // Initializing the variable 'mid'\n            int mid = (s + e) >> 1;\n\n            // If the current index's value is equal to\n            // target, we will return the current index\n            if(nums[mid] == target) {\n                return mid;\n            }\n            // If the value is greater than target,\n            // we will decrease the value of 'e'\n            else if(nums[mid] > target) {\n                e = mid - 1;\n            }\n            // Otherwise, we will increase the value \n            // of 's'\n            else {\n                s = mid + 1;\n            }\n        }\n\n        // If we didn't find anything, we will return -1.\n        return -1;\n    }\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}