{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9127,
            "title": "Binary Search",
            "titleSlug": "binary-search_975480",
            "content": "<h4 id=\"you-have-given-a-sorted-array-a-of-n-integers\">You have given a sorted array &#39;A&#39; of &#39;N&#39; integers.</h4>\n\n<h4 id=\"now-you-are-given-q-queries-and-each-query-consists-of-a-single-integer-x-your-task-is-to-check-whether-x-is-present-in-array-a-or-not-for-each-query-if-x-exists-in-array-a-you-need-to-print-1-else-print-0\">Now, you are given &#39;Q&#39; queries, and each query consists of a single integer  &#39;X&#39;. Your task is to check whether &#39;X&#39; is present in array &#39;A&#39; or not for each query. If &#39;X&#39; exists in array &#39;A&#39;, you need to print 1 else print 0.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The given array is sorted in non-decreasing order. \n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of the input contains an integer &#39;T&#39; representing the number of test cases or queries to be processed. Then the &#39;T&#39; test case follows. \n\nThe first line of each test case contains a single integer &#39;N&#39; denoting the size of the array &#39;A&#39;.\n\nThe second line of each test case contains &#39;N&#39; space-separated integers denoting the elements of the array &#39;A&#39;.\n\nThe third line of each test contains a single integer &#39;Q&#39;, denoting the number of queries. \n\nThen each of the &#39;Q&#39; lines from the fourth line of each test case contains a single integer &#39;X&#39;, denoting the desired element to be searched.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print &#39;Q&#39; space-separated integers that denote the answer to the given &#39;Q&#39; queries, i.e., print 1 if the desired value &#39;X&#39; exists in the array &#39;A&#39;, otherwise print 0.\n\nPrint the answer for each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 \n1 &lt;= N &lt;= 10^5    \n-10^9 &lt;= A[i] &lt;= 10^9 \n1 &lt;= Q &lt;= 10^4\n-10^9 &lt;= X &lt;= 10^9\n\nWhere &#39;T&#39; represents the number of test cases, &#39;N&#39; represents the size of the array, &#39;A[i]&#39; represents the elements of the array, &#39;Q&#39; represents the number of queries and, &#39;X&#39; denotes the number to be searched.\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n5\n1 3 5 7 8\n2\n5\n2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>  1 0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>For the first test case, the given array A is [1, 3, 5, 7,8].\n\nSo the answer for the given first query is 1 as 5 is present in the array.\n\nFor the second query answer is 0 as 2 is not present in the array.  \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n6\n1 2 2 3 4 10\n3\n5\n7 \n2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code> 0 0 1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>For the first test case, the given array A is [1, 2, 2, 3, 4, 10].\n\nSo the answer for the given first query is 0 as 5 is not present in the array.\n\nFor the given second query answer is 0 as 7 is not present in the array.  \n\nFor the given third query answer is 1 as 2 is present in the array.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 14,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array 'A' of 'N' integers and 'Q' queries, each consisting of a single integer 'X', determine if 'X' is present in array 'A'. For each query, print 1 if 'X' exists in 'A', otherwise print 0.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 10^5 (Size of the array 'A')",
                    "-10^9 <= A[i] <= 10^9 (Elements of the array 'A')",
                    "1 <= Q <= 10^4 (Number of queries)",
                    "-10^9 <= X <= 10^9 (Element to be searched)",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n1 3 5 7 8\n2\n5\n2",
                        "output": "1 0",
                        "explanation": "The array is [1, 3, 5, 7, 8]. For the query '5', the output is 1 because 5 is present in the array. For the query '2', the output is 0 because 2 is not present in the array."
                    },
                    {
                        "input": "6\n1 2 2 3 4 10\n3\n5\n7\n2",
                        "output": "0 0 1",
                        "explanation": "The array is [1, 2, 2, 3, 4, 10]. For the query '5', the output is 0 because 5 is not present in the array. For the query '7', the output is 0 because 7 is not present in the array. For the query '2', the output is 1 because 2 is present in the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a brute force solution.</p>",
            "<p>Use the fact that the array is sorted and try to discard some searching space by comparing the middle element with X(the desired element to be searched) recursively.</p>",
            "<p>Maintain two pointers left and right, denoting the current interval of searching, and move left or right by comparing the middle element with X (desired element to be searched).</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}