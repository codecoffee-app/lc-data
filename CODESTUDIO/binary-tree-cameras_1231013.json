{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10526,
            "title": "Binary Tree Cameras",
            "titleSlug": "binary-tree-cameras_1231013",
            "content": "<h4 id=\"given-a-binary-tree-we-need-to-install-cameras-on-the-nodes-of-the-tree-each-camera-at-a-node-monitors-its-parent-itself-and-its-immediate-children-calculate-the-minimum-number-of-cameras-needed-to-monitor-all-nodes-of-the-tree\">Given a binary tree, we need to install cameras on the nodes of the tree. Each camera at a node monitors its parent, itself, and its immediate children. Calculate the minimum number of cameras needed to monitor all nodes of the tree.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return an integer denoting the minimum number of cameras needed to monitor all nodes of the tree.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= DATA &lt;=10^5 and DATA != -1\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n0 1 -1 2 3 -1 -1 -1 -1\n0 1 -1 2 -1 3 -1 -1 4 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>For the first test case, we can monitor all the nodes if we place the camera at node - 1.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000285_1615452719_asset_r_cn.png\" alt=\"alt text\"></p>\n\n<pre><code>For the second test case, we can monitor all the nodes by placing cameras at nodes - 1, 3.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000286_1615452637_asset_r_2_cn.png\" alt=\"alt text\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n0 -1 1 -1 -1\n0 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, determine the minimum number of cameras required to monitor all nodes. A camera placed at a node monitors the node itself, its parent, and its immediate children.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= DATA <= 10^5 and DATA != -1",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "0 1 -1 2 3 -1 -1 -1 -1",
                        "output": "1",
                        "explanation": "Placing a camera at the root node (0) monitors the entire tree."
                    },
                    {
                        "input": "0 1 -1 2 -1 3 -1 -1 4 -1 -1",
                        "output": "2",
                        "explanation": "Cameras can be placed at nodes 1 and 3 to monitor the entire tree."
                    },
                    {
                        "input": "0 -1 1 -1 -1",
                        "output": "1",
                        "explanation": "Placing the camera at node 1 monitors the entire tree."
                    },
                    {
                        "input": "0 -1 -1",
                        "output": "1",
                        "explanation": "Placing the camera at node 0 monitors the entire tree."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find the cases when we have only three nodes.</p>",
            "<p>Can you think about a greedy approach?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}