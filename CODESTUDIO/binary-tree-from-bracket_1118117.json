{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10043,
            "title": "Binary tree from bracket",
            "titleSlug": "binary-tree-from-bracket_1118117",
            "content": "<h4 id=\"you-are-given-a-string-str-which-consists-of-brackets-and-integers-1-9-your-task-is-to-construct-a-binary-tree-from-the-given-string-and-return-the-pre-order-traversal-of-it\">You are given a string \u2018str\u2019 which consists of brackets and integers \u2208 [1, 9]. Your task is to construct a binary tree from the given string and return the Pre-Order Traversal of it.</h4>\n\n<h4 id=\"the-rules-are-as-follows\">The rules are as follows</h4>\n\n<pre><code>1. The first character of the string is guaranteed to be an integer which denotes the root element of the tree.\n\n2. This is followed by zero, one or two pairs of parenthesis, which contains a child binary tree with the same structure.\n\n3. The first parenthesis denotes the left child of the binary then the right child.\n</code></pre>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>Let str= \u201c1(2)(3)\u201d\n\nThe tree will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image2-7866.jpg\" alt=\"img-2\"></p>\n\n<pre><code>The first element i.e 1 is the root node and the first bracket signifies the left child of the root node which has only 1 element i.e 2 and the second bracket signifies the right child of the root node that has only 1 node i.e 3 . Hence we have the binary tree as shown above.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test cases follow.\n\nThe first line of each test case contains the string \u2018str\u2019.        \n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, return the root node of the constructed binary tree.\nThe printed output is the preorder traversal of the binary tree.\nOutput for each test case will be printed in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 1000\n\nWhere &#39;N&#39; denotes the length of the string &#39;str&#39;\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1</h5>\n\n<pre><code>2\n4(2(3)(1))(6(5))\n4(2(3(1)))(5)\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code>4 2 3 1 6 5 \n4 2 3 1 5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1</h5>\n\n<pre><code>Test Case 1:\n\nIn the first test case,\nWe will have the following binary tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image1-7865.jpg\" alt=\"img-1\"></p>\n\n<pre><code>Test Case 2:\n\nIn the second first case we will have the following tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image3-7867.jpg\" alt=\"img-3\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2</h5>\n\n<pre><code>1\n1(2(4)(5))(3(6)(7))\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>1 2 4 5 3 6 7\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a string \u2018str\u2019 consisting of brackets and integers from 1 to 9. Your task is to construct a binary tree from the given string representation. The string follows a specific format: the first character is the root node's value, followed by zero, one, or two pairs of parentheses representing the left and right subtrees. The first parenthesis encloses the left child, and the second encloses the right child.  Return the pre-order traversal of the constructed binary tree.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 1000 (where N is the length of the string 'str')",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "4(2(3)(1))(6(5))",
                        "output": "4 2 3 1 6 5",
                        "explanation": "The tree is constructed as follows: 4 is the root. 2 is the left child of 4, which has 3 as its left child and 1 as its right child. 6 is the right child of 4, which has 5 as its left child."
                    },
                    {
                        "input": "4(2(3(1)))(5)",
                        "output": "4 2 3 1 5",
                        "explanation": "The tree is constructed as follows: 4 is the root. 2 is the left child of 4, which has 3 as its left child, and 3 has 1 as its left child. 5 is the right child of 4."
                    },
                    {
                        "input": "1(2(4)(5))(3(6)(7))",
                        "output": "1 2 4 5 3 6 7",
                        "explanation": "The tree is constructed as follows: 1 is the root. 2 is the left child of 1, which has 4 as its left child and 5 as its right child. 3 is the right child of 1, which has 6 as its left child and 7 as its right child."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}