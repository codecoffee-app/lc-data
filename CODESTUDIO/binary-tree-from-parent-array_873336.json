{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8392,
            "title": "Binary tree from parent array",
            "titleSlug": "binary-tree-from-parent-array_873336",
            "content": "<h4 id=\"given-an-array-parent-which-represents-a-binary-tree-such-that-parent-child-relationship-is-defined-by-parent-i-i-which-means-that-parent-of-i-is-parent-i-the-value-of-the-root-node-will-be-i-if-1-is-present-at-parent-i\">Given an array parent which represents a binary tree such that parent-child relationship is defined by (&#39;PARENT&#39;[i], &#39;i&#39;) which means that parent of i is &#39;PARENT&#39;[i]. The value of the root node will be i if -1 is present at &#39;PARENT&#39;[i].</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>For the parent array {1, -1, 1}, the tree will be:- \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-5823.png\" alt=\"1\"></p>\n\n<pre><code>As, parent of 0 is &#39;PARENT&#39;[0] i.e. 1.\n1 is the root as &#39;PARENT&#39;[1] = -1.\nParent of 2 is &#39;PARENT&#39;[2] i.e. 1.\n</code></pre>\n\n<h4 id=\"similarly-for-the-parent-array-1-2-1-the-tree-will-be\">Similarly for the parent array { 1, 2, -1}, the tree will be:-</h4>\n\n<p><img src=\"https://files.codingninjas.in/2-5824.png\" alt=\"2\"></p>\n\n<h4 id=\"your-task-is-to-create-the-binary-tree-from-the-given-parent-array\">Your task is to create the Binary tree from the given parent array.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>From the parent array, multiple binary trees may be possible. You have to create a binary tree in such a way that these conditions satisfy:-\n\nIf the node has a left child as well as a right child, make sure the left child is smaller than the right child. \n\nIf the node has only one child, make sure it has an only left child. \n\nFor {1, -1, 1}, the accepted tree will be:- \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/3-5825.png\" alt=\"3\"></p>\n\n<pre><code>And for {1, -1}, the accepted tree will be, \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/4-5826.png\" alt=\"4\"></p>\n\n<pre><code>Instead of \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/5-5827.png\" alt=\"5\"></p>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; denoting the number of queries or test cases. \n\nThe first line of every test case contains an integer &#39;N&#39; denoting the size of the parent array. \n\nThe second line of every test case contains &#39;N&#39; single space-separated integers, representing the elements of the parent array.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the level order of the Binary tree in a separate line. \n\nFor example, the level order output for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the output is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 100\n1 &lt;= &#39;N&#39; &lt;= 3000\n\nWhere &#39;T&#39; is the number of test cases and &#39;N&#39; denotes the number of nodes in the tree.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1:</h5>\n\n<pre><code>2\n2\n1 -1 \n6\n-1 0 1 2 2 3 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>1 0 -1 -1 -1 \n0 1 -1 2 -1 3 4 5 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>For test case 2: The resulting tree will be:- \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/6-5828.png\" alt=\"6\"></p>\n\n<h5 id=\"sample-input-2\">Sample input 2:</h5>\n\n<pre><code>2\n4\n2 3 3 -1 \n7  \n1 5 5 2 2 -1 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>3 1 2 -1 -1 0 -1 -1 -1\n5 1 2 0 -1 3 4 -1 -1 6 -1 -1 -1 -1 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 15,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `parent` representing a binary tree where the parent-child relationship is defined by `parent[i] = j`, meaning the parent of node `i` is node `j`. The root node is identified by `parent[i] = -1`. Construct the binary tree from the given `parent` array, adhering to the following rules:\n\n1.  If a node has both left and right children, the left child's index must be smaller than the right child's index.\n2.  If a node has only one child, it must be the left child.",
                "constraints": [
                    "1 <= T <= 100 (T is the number of test cases)",
                    "1 <= N <= 3000 (N is the number of nodes in the tree)",
                    "Time limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "2\n2\n1 -1",
                        "output": "1 0 -1 -1 -1",
                        "explanation": "For the first test case:\nParent array: [1, -1]\nRoot: 1\nLeft child of 1: 0\nLevel order traversal with -1 representing null: 1 0 -1 -1 -1"
                    },
                    {
                        "input": "6\n-1 0 1 2 2 3",
                        "output": "0 1 -1 2 -1 3 4 5 -1 -1 -1 -1 -1",
                        "explanation": "For the second test case:\nParent array: [-1, 0, 1, 2, 2, 3]\nRoot: 0\nChildren of 0: 1\nChildren of 1: 2\nChildren of 2: 3, 4\nChildren of 3: 5\nLevel order traversal with -1 representing null: 0 1 -1 2 -1 3 4 5 -1 -1 -1 -1 -1"
                    },
                    {
                        "input": "2\n4\n2 3 3 -1",
                        "output": "3 1 2 -1 -1 0 -1 -1 -1",
                        "explanation": "Parent array: [2, 3, 3, -1]\nRoot: 3\nChildren of 3: 1, 2\nChildren of 1: 0\nLevel order traversal with -1 representing null: 3 1 2 -1 -1 0 -1 -1 -1"
                    },
                    {
                        "input": "7\n1 5 5 2 2 -1 3",
                        "output": "5 1 2 0 -1 3 4 -1 -1 6 -1 -1 -1 -1 -1",
                        "explanation": "Parent array: [1, 5, 5, 2, 2, -1, 3]\nRoot: 5\nChildren of 5: 1, 2\nChildren of 1: 0\nChildren of 2: 3, 4\nChildren of 3: 6\nLevel order traversal with -1 representing null: 5 1 2 0 -1 3 4 -1 -1 6 -1 -1 -1 -1 -1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We can observe that we can get the root node only by searching for -1 in the array. According to the properties of a binary tree, it will have at max 2 children, thus you can search for the two children and assign children to the parent nodes. Repeatedly following the above point will end up fetching you the final binary tree.&nbsp;</p>",
            "<p>Now, let us emphasise on the fact that parent[index] is the parent of the index. Thus, the values of nodes will be from 0 to N-1 where N is the size of the given parent array. We need to come up with an approach that uses the above-mentioned points.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}