{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9378,
            "title": "Binary Tree Leaves to Doubly Linked List. ",
            "titleSlug": "binary-tree-leaves-to-doubly-linked-list_983643",
            "content": "<h4 id=\"you-are-given-an-arbitrary-binary-tree-with-n-nodes-numbered-from-1-to-n-your-task-is-to-remove-all-the-leaf-nodes-from-the-tree-and-return-them-as-the-nodes-of-a-doubly-linked-list-also-you-have-to-use-the-existing-tree-class-for-the-doubly-linked-list-with-the-left-and-the-right-pointers-may-act-as-the-previous-and-next-pointers-of-the-nodes-of-the-list\">You are given an arbitrary binary tree with N nodes numbered from 1 to N. Your task is to remove all the leaf nodes from the tree and return them as the nodes of a doubly linked list. Also, you have to use the existing tree class for the doubly linked list with the left and the right pointers may act as the previous and next pointers of the nodes of the list.</h4>\n\n<h4 id=\"a-leaf-of-a-binary-tree-is-the-node-which-does-not-have-a-left-child-and-a-right-child\">A leaf of a binary tree is the node which does not have a left child and a right child.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>Given a binary tree - \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-11-06-15-04-33-5639.png\" alt=\"alt txt\"></p>\n\n<pre><code>Doubly Linked List is -\n4 5 3 \nAnd after removal of all the leaves, the inorder traversal of the tree will look like - \n2 1\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. Two nodes may have the same value associated with them.\n2. The root node will be fixed and will be provided in the function.\n3. The order of nodes in the doubly linked list should be the order of leaves in the tree from left to right.\n3. You need to modify the binary tree in place and you only need to return the head of the doubly linked list\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains a single integer T, representing the number of test cases. \n\nThe first line of each test case contains an integer &#39;n&#39;, representing the number of nodes in the tree.\n\nThe second line of each test case will contain the values of the nodes of the tree in the level order form ( -1 for NULL node) \nRefer to the example for further clarification.\n</code></pre>\n\n<p>Example: \n    Consider the binary tree\n<img src=\"https://files.codingninjas.in/screenshot-from-2020-10-09-12-55-45-5134.png\" alt=\"altImage\"></p>\n\n<h5 id=\"the-input-of-the-tree-depicted-in-the-image-above-will-be-like\">The input of the tree depicted in the image above will be like:</h5>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, two lines will be printed-\nLine 1: Doubly Linked List\nLine 2: Inorder Traversal of the updated binary tree.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n5\n1 2 3 4 5 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4 5 3 \n2 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an arbitrary binary tree with N nodes (numbered 1 to N), remove all leaf nodes and construct a doubly linked list from them, maintaining the left-to-right order of the leaves in the tree. Use the existing tree node structure for the doubly linked list, where the 'left' and 'right' pointers serve as 'previous' and 'next' pointers, respectively. Modify the original tree in-place, and return the head of the doubly linked list.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3000",
                    "Time Limit: 1 second",
                    "Two nodes may have the same value.",
                    "The root node is provided in the function.",
                    "The doubly linked list order must match the left-to-right leaf order.",
                    "Modify the binary tree in-place."
                ],
                "testcases": [
                    {
                        "input": "1\n5\n1 2 3 4 5 -1 -1 -1 -1 -1 -1",
                        "output": "4 5 3\n2 1",
                        "explanation": "The input represents a binary tree. The first line is the number of test cases (1). The second line is the number of nodes in the tree (5). The third line provides the level-order traversal of the tree: Root is 1, its left child is 2, and right child is 3.  2's left child is 4, and its right child is null (-1). 3's left child is 5, and its right child is null (-1). Remaining nodes are null (-1). After removing leaves (4, 5, and 3) and forming the doubly linked list, the inorder traversal of the modified tree (containing only nodes 1 and 2) is 2 1. The doubly linked list is 4 5 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}