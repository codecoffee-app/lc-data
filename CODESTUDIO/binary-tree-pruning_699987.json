{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7592,
            "title": "Binary Tree Pruning",
            "titleSlug": "binary-tree-pruning_699987",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-where-the-value-of-each-node-is-either-0-or-1-your-task-is-to-return-the-same-binary-tree-but-all-of-its-subtrees-that-dont-contain-a-1-have-been-removed\">You have been given a Binary Tree where the value of each node is either 0 or 1. Your task is to return the same Binary Tree but all of its subtrees that don&#39;t contain a 1 have been removed.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>A subtree of a node X is X, plus every node that is a descendant of X.\n</code></pre>\n\n<h4 id=\"for-example\">For Example :</h4>\n\n<pre><code>Look at the below example to see a Binary Tree pruning.\nInput: [1, 1, 1, 0, 1, 0, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/ex2-4852.JPG\" alt=\"alt text\"></p>\n\n<pre><code>Output: [1, 1, 1, -1, 1, -1, 1, -1, -1, -1, -1]\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree.\n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>Print the level order traversal of the pruned binary tree.\n\nPrint output of each test case in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n0 &lt;= N &lt;= 10^3\n0 &lt;= data &lt;= 1\n\nWhere &#39;N&#39; is the number of nodes in the tree and &#39;data&#39; is the value of nodes.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1 -1 0 0 1 -1 -1 -1 -1\n0 1 1 0 0 0 -1 -1 -1 1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 -1 0 -1 1 -1 -1 \n0 1 1 -1 0 -1 -1 1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first test case, the given binary tree(on left) and the pruned binary tree(on right) are\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/ex1-1-4851.JPG\" alt=\"alt text\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n0 -1 -1\n1 0 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>-1\n1 -1 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 27,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree where each node has a value of either 0 or 1, your task is to prune the tree.  Prune any subtree that does not contain the value 1. A subtree of a node X is defined as X and all its descendants.",
                "constraints": [
                    "1 <= T <= 10^2",
                    "0 <= N <= 10^3",
                    "0 <= data <= 1",
                    "Where 'N' is the number of nodes in the tree and 'data' is the value of nodes.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 -1 0 0 1 -1 -1 -1 -1",
                        "output": "1 -1 0 -1 1 -1 -1",
                        "explanation": "The initial tree has been pruned. Subtrees containing only zeros have been removed. The original tree contained a root node with value '1', a left child (null), and a right child with value '0'. The '0' node had a left child with value '0' and a right child with value '1'. The '0' node's left child is pruned because it doesn't contain a '1'. The right child is kept."
                    },
                    {
                        "input": "0 1 1 0 0 0 -1 -1 -1 1 -1 -1 -1 -1 -1",
                        "output": "0 1 1 -1 0 -1 -1 1 -1 -1 -1",
                        "explanation": "The initial tree has been pruned. The root has value 0. The children are 1 and 1. The rest of the pruning occurs in lower levels and some nodes are discarded because of absence of value 1 in its subtree."
                    },
                    {
                        "input": "0 -1 -1",
                        "output": "-1",
                        "explanation": "The root node is 0 and has no children. Since the subtree doesn't contain '1', it's pruned, resulting in an empty tree represented by -1."
                    },
                    {
                        "input": "1 0 -1 -1 -1",
                        "output": "1 -1 -1",
                        "explanation": "The root node has value 1. The left child is 0. Pruning the '0' subtree would result in a tree with the root node '1' only."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find out whether a 1 is present or not in a subtree using recursion. Check for each node that we need to prune this node or not by checking its subtree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}