{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8930,
            "title": "Binary tree to a circular doubly linked list",
            "titleSlug": "binary-tree-to-a-circular-doubly-linked-list_920535",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-integers-you-are-supposed-to-convert-the-given-binary-tree-into-a-circular-doubly-linked-list-in-place-i-e-without-using-any-extra-space-the-nodes-of-the-circular-doubly-linked-list-must-follow-the-same-order-as-the-inorder-traversal-of-the-given-binary-tree-the-head-of-the-circular-doubly-linked-list-must-point-to-the-first-node-in-the-inorder-traversal-of-the-binary-tree-you-are-supposed-to-use-the-left-and-the-right-pointers-of-the-binary-tree-as-the-prev-and-next-pointers-respectively-of-the-circular-doubly-linked-list\">You have been given a binary tree of integers. You are supposed to convert the given binary tree into a circular doubly linked list (In place, i.e. without using any extra space). The nodes of the circular doubly linked list must follow the same order as the inorder traversal of the given binary tree. The head of the circular doubly linked list must point to the first node in the inorder traversal of the binary tree. You are supposed to use the left and the right pointers of the binary tree as the &#39;prev&#39; and &#39;next&#39; pointers respectively of the circular doubly linked list.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Consider the binary tree below and the following circular doubly linked list.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binarytreetocdll_01-6419.jpg\" alt=\"Example\"></p>\n\n<pre><code>The head node of the above doubly linked list should be the node with value 12.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place. So -1 would not be a part of the tree nodes.\n\nFor example, the input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the nodes of the circular doubly linked list separated by a single space.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 100\n1 &lt;= &#39;N&#39; &lt;= 3000\n0 &lt;= &#39;data&#39; &lt;= 10^5 and &#39;data&#39; != -1\n\nWhere &#39;data&#39; is the value of the binary tree node.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 2 5 -1 -1 -1 -1\n5 9 -1 1 -1 -1 1 9 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2 3 5\n1 9 1 9 5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>For the first test case, the inorder traversal of the binary tree is {2, 3, 5 }.\n\nFor the second test case, the inorder traversal of the binary tree is {1, 9, 1, 9, 5  }.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 -1 2 -1 -1\n5 3 -1 2 -1 8 4 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 2\n8 2 4 3 5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h5>\n\n<pre><code>For the first test case, the inorder traversal of the given binary tree is {1, 2 }.\n\nFor the second test case,  the inorder traversal of the binary tree is {8, 2, 4, 3, 5  }.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of integers, convert it into a circular doubly linked list in-place (without using extra space). The linked list should follow the inorder traversal of the binary tree. Use the left and right pointers of the binary tree nodes as the 'prev' and 'next' pointers of the linked list, respectively. The head of the linked list should point to the first node in the inorder traversal.",
                "constraints": [
                    "1 <= 'T' <= 100 (Number of test cases)",
                    "1 <= 'N' <= 3000 (Number of nodes in the binary tree)",
                    "0 <= 'data' <= 10^5 and 'data' != -1 (Value of a node in the binary tree)"
                ],
                "testcases": [
                    {
                        "input": "3 2 5 -1 -1 -1 -1",
                        "output": "2 3 5",
                        "explanation": "The inorder traversal of the binary tree is {2, 3, 5}."
                    },
                    {
                        "input": "5 9 -1 1 -1 -1 1 9 -1 -1 -1",
                        "output": "1 9 1 9 5",
                        "explanation": "The inorder traversal of the binary tree is {1, 9, 1, 9, 5}."
                    },
                    {
                        "input": "1 -1 2 -1 -1",
                        "output": "1 2",
                        "explanation": "The inorder traversal of the given binary tree is {1, 2}."
                    },
                    {
                        "input": "5 3 -1 2 -1 8 4 -1 -1 -1 -1",
                        "output": "8 2 4 3 5",
                        "explanation": "The inorder traversal of the binary tree is {8, 2, 4, 3, 5}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about manipulating with the left node and the right node of the binary tree separately?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}