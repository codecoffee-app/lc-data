{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8581,
            "title": "Binary Tree To BST",
            "titleSlug": "binary-tree-to-bst_893074",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-consisting-of-n-nodes-where-nodes-have-distinct-integer-values-your-task-is-to-convert-the-given-binary-tree-to-a-binary-search-tree-bst\">You have been given a binary tree consisting of \u2018N\u2019 nodes where nodes have distinct integer values. Your task is to convert the given Binary Tree to a Binary Search Tree(BST).</h4>\n\n<h4 id=\"note-the-conversion-must-be-done-in-such-a-way-that-keeps-the-original-structure-of-the-binary-tree\">Note: The conversion must be done in such a way that keeps the original structure of the Binary Tree.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-which-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure which has the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees. \n</code></pre>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>For the given binary tree :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-17-5924.png\" alt=\"Input\"></p>\n\n<pre><code>The BST will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-19-5928.png\" alt=\"Ouput\"></p>\n\n<pre><code>Note: Each node is associated with a unique integer value.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example for further clarification.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n\nNote :\nThe above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single line containing the level order traversal of the modified binary tree.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 ^ 2\n1 &lt;= N &lt;= 5 * 10 ^ 3\n0 &lt;= data &lt;= 10 ^ 5 and data != -1\n\nWhere \u2018N\u2019 is the number of nodes in the tree, \u2018T\u2019 represents the number of test cases and \u2018data&#39; denotes data contained in the node of the binary tree.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n10 30 15 20 -1 -1 5 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>15 10 20 5 30 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample output 1:</h5>\n\n<pre><code>The binary tree is represented as follows:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-21-5930.png\" alt=\"Example\"></p>\n\n<pre><code>The inorder traversal of this tree will be 20 30 10 15 5. \n\n\nAfter converting this tree to BST. It will look like this:   \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-23-5931.png\" alt=\"Output\"></p>\n\n<pre><code>The inorder traversal of the modified tree will be 5 10 15 20 30. Since the inorder is sorted. Hence, it is a valid BST. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2 \n10 5 -1 -1 -1 -1\n20 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>10 5 \n20\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with 'N' nodes, where each node contains a distinct integer value, convert it into a Binary Search Tree (BST) while maintaining the original structure of the tree. A BST follows the property that the left subtree of a node contains only nodes with data less than the node\u2019s data, the right subtree contains only nodes with data greater than the node\u2019s data, and both the left and right subtrees are also binary search trees.",
                "constraints": [
                    "1 <= T <= 10 ^ 2, where \u2018T\u2019 represents the number of test cases.",
                    "1 <= N <= 5 * 10 ^ 3, where \u2018N\u2019 is the number of nodes in the tree.",
                    "0 <= data <= 10 ^ 5 and data != -1, where \u2018data' denotes data contained in the node of the binary tree."
                ],
                "testcases": [
                    {
                        "input": "root=[10, 30, 15, 20, -1, -1, 5, -1, -1, -1, -1]",
                        "output": "15 10 20 5 30",
                        "explanation": "The initial binary tree is converted into a BST. The level order traversal of the resulting BST is 15 10 20 5 30.  The inorder traversal is 5 10 15 20 30."
                    },
                    {
                        "input": "root=[10, 5, -1, -1, -1], root2=[20, -1, -1]",
                        "output": "10 5\n20",
                        "explanation": "Two separate test cases are provided. First Binary tree [10, 5, -1, -1, -1] and second Binary tree [20, -1, -1]. The output consists of level order traversal of the converted BST for each test case on separate lines. First Binary Tree inorder traversal is 5 10, after converting to BST level order traversal is 10 5. Second Binary Tree inorder traversal is 20, after converting to BST level order traversal is 20."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the inorder traversal of the BST.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}