{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14681,
            "title": "Bob's Game",
            "titleSlug": "bob-s-game_2221210",
            "content": "<h4 id=\"bob-is-playing-a-game-where-there-is-a-grid-of-size-n-x-m-where-each-cell-is-either-0-1-or-2\">Bob is playing a game where there is a grid of size \u2018N\u2019 X \u2018M\u2019, where each cell is either 0, 1, or 2.</h4>\n\n<h4 id=\"0-means-the-cell-is-empty-1-means-the-cell-contains-a-block-and-2-means-there-is-a-guard-present-in-that-block-a-guard-can-see-in-all-four-directions-i-e-left-right-up-down-till-there-is-a-block-or-to-the-end-of-the-grid-if-there-are-no-blocks-present-in-that-direction\">0 means the cell is empty, 1 means the cell contains a block, and 2 means there is a guard present in that block. A guard can see in all four directions, i.e., left, right, up, down till there is a block or to the end of the grid if there are no blocks present in that direction.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>0 0\n0 0\n2 1\nIn the above grid, if Bob is present at (0,1), he can&#39;t move to (0,0) because the cell at (0,0) is seen by the guard present at (2,0).\n\n0 0\n1 0\n2 1\nIn the above grid, Bob can move from (0,1) to (0,0) since this cell is not seen by the guard at (2,0) due to the block present at (1,0).\n</code></pre>\n\n<h4 id=\"at-each-step-one-can-move-to-any-valid-adjacent-cells-that-share-a-common-side-with-the-current-cell-a-cell-is-valid-if-it-is-present-inside-the-grid-empty-and-not-seen-by-any-of-the-guards\">At each step, one can move to any valid adjacent cells that share a common side with the current cell. A cell is valid if it is present inside the grid, empty, and not seen by any of the guards.</h4>\n\n<h4 id=\"now-bob-can-enter-the-grid-from-any-of-the-four-corners-of-the-grid-if-it-is-a-valid-cell-i-e-0-0-n-1-0-0-m-1-n-1-m-1-and-he-wants-to-reach-a-destination-cell\">Now Bob can enter the grid from any of the four corners of the grid(if it is a valid cell) i.e, (0,0), (N - 1,0), (0,M - 1), (N - 1,M - 1), and he wants to reach a destination cell.</h4>\n\n<h4 id=\"can-you-tell-whether-bob-can-reach-the-destination-cell-or-not\">Can you tell whether Bob can reach the destination cell or not?</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>If all the corner cells are invalid, then return false.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain a single integer \u2018T\u2019 denoting the number of test cases. Then \u2018T\u2019 test cases follow.\n\nThe first line of each test case will contain two space-separated integers \u2018N\u2019 and \u2018M\u2019, denoting the number of rows and number of columns, respectively.\n\nThe next \u2018N\u2019 lines of each test case will contain \u2018M\u2019 space-separated integers denoting the cell values of that corresponding row.\n\nThe next line of each test case will contain two space-separated integers denoting the row and column numbers of the destination cell. \n\nIt is guaranteed that the integer values in the grid are either 0, 1, or 2.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print \u201cYES\u201d if Bob can reach the destination cell, else print \u201cNO\u201d. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N,M &lt;= 10^3\nX[i][j] = { 0, 1, 2 }     0 &lt;= i &lt; N, 0 &lt;= j &lt; M\n\nWhere X[i][j] denotes the cell value of ith row and jth cell.\n\nIt is guaranteed that the sum of N*M over all test cases doesn\u2019t exceed 10^6.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 3\n0 0 0\n1 0 0\n0 0 2\n1 1\n4 3\n0 1 0\n2 1 0\n0 0 0\n0 0 1\n3 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>YES\nYES\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case, Bob can reach the destination cell by the following path:\n(0,0) -&gt; (0,1) -&gt; (1,1).\n\nFor the second test case, Bob can reach the destination cell by the following path:\n(0,2) -&gt; (1,2) -&gt; (2,2) -&gt; (2,1) -&gt; (3,1).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4 3\n0 1 0\n2 0 0\n0 0 0\n0 0 1\n3 1\n4 4\n0 0 0 0\n0 0 1 1\n1 1 2 0\n0 1 0 2\n1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>NO\nYES\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Bob is playing a game on an N x M grid. Each cell is either empty (0), contains a block (1), or has a guard (2). Guards can see in all four directions until they encounter a block or the edge of the grid. Bob can move to adjacent empty cells that are not seen by any guard. He can enter the grid from any of the four corners (0,0), (N-1,0), (0,M-1), (N-1,M-1) if the corner is a valid cell. The goal is to determine if Bob can reach a specified destination cell from any valid starting corner.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N, M <= 10^3",
                    "X[i][j] = {0, 1, 2} for 0 <= i < N, 0 <= j < M",
                    "Sum of N*M over all test cases doesn\u2019t exceed 10^6",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 3\n0 0 0\n1 0 0\n0 0 2\n1 1",
                        "output": "YES",
                        "explanation": "Bob can reach the destination (1,1) from (0,0) by the path (0,0) -> (0,1) -> (1,1)."
                    },
                    {
                        "input": "4 3\n0 1 0\n2 1 0\n0 0 0\n0 0 1\n3 1",
                        "output": "YES",
                        "explanation": "Bob can reach the destination (3,1) from (0,2) by the path (0,2) -> (1,2) -> (2,2) -> (2,1) -> (3,1)."
                    },
                    {
                        "input": "4 3\n0 1 0\n2 0 0\n0 0 0\n0 0 1\n3 1",
                        "output": "NO",
                        "explanation": "In this case, no path exists from any valid corner to reach destination (3,1)."
                    },
                    {
                        "input": "4 4\n0 0 0 0\n0 0 1 1\n1 1 2 0\n0 1 0 2\n1 1",
                        "output": "YES",
                        "explanation": "Bob can reach the destination (1,1) from the corner (0,0) by a valid path."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to identify all the invalid cells and then use graph algorithms to traverse the grid.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}