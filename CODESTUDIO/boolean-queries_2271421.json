{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14819,
            "title": "Boolean Queries",
            "titleSlug": "boolean-queries_2271421",
            "content": "<h4 id=\"you-are-given-a-stream-of-boolean-values-your-task-is-to-maintain-a-data-structure-that-supports-the-following-functions\">You are given a stream of boolean values. Your task is to maintain a data structure that supports the following functions.</h4>\n\n<pre><code>setAllTrue(): Sets all the indicies to true\n\nsetAllFalse(): Sets all the indices to false\n\nsetIndexTrue(index): Set the value at position index to true\n\nsetIndexFalse(index): Set the value at position index to False\n\ngetIndex(index): Return the value of position index\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Initially, all the values of the data structure are set to false.\n\nThe Queries are in the format below-:\n(1, index, value): Set the value at the given index\n\n(2, index): Get the value at the given index \n\n(3, value): Set all the indices to the boolean value given.\n\nThe value 1 represents true and 0 represents false.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>You are given Q = [[1, 2, 1], [3, 0], [2, 4]], Here \nQ[0] is the query that sets the boolean value at index 2 to True.\nQ[1] is the query that sets the value of all indices to False.\nQ[2] is the query that gets the value at index 4 that is False.\nHence the answer is [False].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains the integer \u2018T\u2019 representing the number of test cases.\n\nThe second line of input contains a single integer \u2018Q\u2019, representing the number of queries.\n\nThe next \u2018Q\u2019 lines contain space-separated integers denoting the queries.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the list of boolean in separate lines representing the output of the queries.\n\nPrint a separate line for each test case.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= Q &lt;= 10^6\n1 &lt;= index &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\n1 2 1\n3 0\n2 4 \n3\n3 1\n2 6\n2 5\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>False\nTrue\nTrue    \n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For first test case,  Q = [[1, 2, 1], [3, 0], [2, 4]], Here \nQ[0] is the query that sets the boolean value at index 2 to True\nQ[1] is the query that sets the value of all indices to False\nQ[2] is the query that gets the value at index 4 that is False.\nHence the answer is in a single line [False]\n\nFor the second test case, Q = [[3, 1], [2, 6], [2, 5]], Here\nQ[0] is the query that sets all the indices to True.\nQ[1] is the query that gets the value at index 6, this is True.\nQ[2] is the query that gets the value at index 5 that is True.\nHence the answer is [True, True].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n2 4\n1 4 1\n2 4\n3 0\n2 4\n2\n3 1\n2 9\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>False\nTrue\nFalse\nTrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -5,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a stream of boolean values. Your task is to maintain a data structure that supports the following operations:\n\n*   `setAllTrue()`: Sets all indices to `true`.\n*   `setAllFalse()`: Sets all indices to `false`.\n*   `setIndexTrue(index)`: Sets the value at the given `index` to `true`.\n*   `setIndexFalse(index)`: Sets the value at the given `index` to `false`.\n*   `getIndex(index)`: Returns the value at the given `index`.\n\nInitially, all values in the data structure are set to `false`. The queries will be provided in the following format:\n\n*   `(1, index, value)`: Set the value at the given `index` to the boolean `value` (1 for true, 0 for false).\n*   `(2, index)`: Get the value at the given `index`.\n*   `(3, value)`: Set all indices to the boolean `value` (1 for true, 0 for false).",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= Q <= 10^6",
                    "1 <= index <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n3\n1 2 1\n3 0\n2 4",
                        "output": "False",
                        "explanation": "The first query sets index 2 to true. The second query sets all indices to false. The third query asks for the value at index 4, which is currently false."
                    },
                    {
                        "input": "3\n3 1\n2 6\n2 5",
                        "output": "True\nTrue",
                        "explanation": "The first query sets all indices to true. The second query asks for the value at index 6, which is now true. The third query asks for the value at index 5, which is also true."
                    },
                    {
                        "input": "2\n5\n2 4\n1 4 1\n2 4\n3 0\n2 4",
                        "output": "False\nTrue\nFalse",
                        "explanation": "Initially all indices are false. First query checks index 4 which is false. Second query set index 4 to true. Third query checks index 4 which is true now. Fourth query sets all indices to false. Last query checks index 4 which is now false."
                    },
                    {
                        "input": "2\n3 1\n2 9",
                        "output": "True",
                        "explanation": "First query set all indices to true. Second query checks the value at index 9 which is now true."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of an approach by maintaining an array.</p>",
            "<p>Try to use a HashMap.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}