{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9692,
            "title": "Bottom Right View of Binary Tree",
            "titleSlug": "bottom-right-view-of-binary-tree_1081489",
            "content": "<h4 id=\"given-a-binary-tree-your-task-is-to-print-the-bottom-right-view-of-the-binary-tree\">Given a binary tree. Your task is to print the bottom right view of the binary tree.</h4>\n\n<h4 id=\"bottom-right-view-on-viewing-the-given-binary-tree-at-the-angle-of-45-degrees-from-the-bottom-right-side\">Bottom right view, on viewing the given binary tree at the angle of 45 degrees from the bottom right side.</h4>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-157-_li-7017.jpg\" alt=\"alt text\"></p>\n\n<pre><code>In the above binary tree, only node { 4, 5, 6 } is visible from the bottom right only node \u20181\u2019 and node \u20183\u2019 are hidden behind node \u20186\u2019.\nnode \u20182\u2019 is hidden behind node \u20185\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases. Then the test cases are as follows.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-input-format-2-8282.png\" alt=\"tree\"></p>\n\n<pre><code>For example, the input for the tree depicted in the above image would be :\n\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, print the array of the values of visible nodes.\n\nThere can be multiple orders to arrange the node\u2019s value which is visible from the bottom-right so return sorted order (ascending order).\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n-10^9 &lt;= data &lt;= 10^9 (data != -1) \n\nWhere \u2018N\u2019 is the number of nodes in the tree and \u2018data\u2019 denotes data contained in the node of a binary tree.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1</h5>\n\n<pre><code>2\n1 2 3 -1 4 -1 5 -1 -1 -1 -1\n1 2 3 4 -1 5 -1 -1 -1 -1 6 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code> 4 5\n 3 4 6\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1</h5>\n\n<pre><code>Test Case 1: node \u2018{ 4, 5 }\u2019 is visible from the bottom right only node \u20181\u2019 and node \u20183\u2019 are hidden behind node \u20185\u2019.\nnode \u20182\u2019 is hidden behind node \u20184\u2019.\nHence return { 4, 5 }.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-152-_li-7018.jpg\" alt=\"alt text\"></p>\n\n<pre><code>Test Case 2:  node \u2018{ 4, 3, 6 }\u2019 is visible from the bottom right only node \u20182\u2019 and node \u20185\u2019 are hidden behind node \u20186\u2019.\nnode \u20181\u2019 is hidden behind node \u20183\u2019.\nHence return { 3, 4, 6 } because is sorted (acending) order of { 4, 3, 6 }.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-154-_li-7019.jpg\" alt=\"alt text\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2</h5>\n\n<pre><code>2\n1 2 3 -1 -1 -1 -1\n1 2 -1 3 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code> 2 3\n 1 2 3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, your task is to print the bottom-right view of the tree. The bottom-right view is defined as the set of nodes visible when viewing the tree at a 45-degree angle from the bottom-right side. Return the values of the visible nodes in sorted (ascending) order.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3000",
                    "-10^9 <= data <= 10^9 (data != -1)",
                    "Where \u2018N\u2019 is the number of nodes in the tree and \u2018data\u2019 denotes data contained in the node of a binary tree.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 -1 4 -1 5 -1 -1 -1 -1",
                        "output": "4 5",
                        "explanation": "From the bottom right, nodes 4 and 5 are visible. Node 1 is hidden behind node 3, and node 2 is hidden behind node 4. The sorted order of visible nodes is {4, 5}."
                    },
                    {
                        "input": "1 2 3 4 -1 5 -1 -1 -1 -1 6 -1 -1",
                        "output": "3 4 6",
                        "explanation": "From the bottom right, nodes 3, 4, and 6 are visible. Nodes 2 and 5 are hidden behind node 6, and node 1 is hidden behind node 3. The sorted order of visible nodes is {3, 4, 6}."
                    },
                    {
                        "input": "1 2 3 -1 -1 -1 -1",
                        "output": "2 3",
                        "explanation": "From the bottom right, nodes 2 and 3 are visible. The sorted order of visible nodes is {2, 3}."
                    },
                    {
                        "input": "1 2 -1 3 -1 -1 -1",
                        "output": "1 2 3",
                        "explanation": "From the bottom right, nodes 1, 2, and 3 are visible. The sorted order of visible nodes is {1, 2, 3}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to traverse in a diagonal manner.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}