{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8613,
            "title": "Bottom view of binary tree",
            "titleSlug": "bottom-view-of-binary-tree_893110",
            "content": "<h4 id=\"you-are-given-a-binary-tree\">You are given a <em><strong>&#39;Binary Tree&#39;</strong></em>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"return-the-bottom-view-of-the-binary-tree\">Return the bottom view of the binary tree.</h4>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. A node will be in the bottom-view if it is the bottom-most node at its horizontal distance from the root. \n\n2. The horizontal distance of the root from itself is 0. The horizontal distance of the right child of the root node is 1 and the horizontal distance of the left child of the root node is -1. \n\n3. The horizontal distance of node &#39;n&#39; from root = horizontal distance of its parent from root + 1, if node &#39;n&#39; is the right child of its parent.\n\n4. The horizontal distance of node &#39;n&#39; from root = horizontal distance of its parent from the root - 1, if node &#39;n&#39; is the left child of its parent.\n\n5. If more than one node is at the same horizontal distance and is the bottom-most node for that horizontal distance, including the one which is more towards the right.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: Consider the given Binary Tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/first-5997.jpg\" alt=\"alt text\"></p>\n\n<pre><code>Output: 4 2 6 3 7\n\nExplanation:\nBelow is the bottom view of the binary tree.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-5-5998.jpg\" alt=\"alt text\"></p>\n\n<pre><code>1 is the root node, so its horizontal distance = 0.\nSince 2 lies to the left of 0, its horizontal distance = 0-1= -1\n3 lies to the right of 0, its horizontal distance = 0+1 = 1\nSimilarly, horizontal distance of 4 = Horizontal distance of 2 - 1= -1-1=-2\nHorizontal distance of 5 = Horizontal distance of 2 + 1=  -1+1 = 0\nHorizontal distance of 6 = 1-1 =0\nHorizontal distance of 7 = 1+1 = 2\n\nThe bottom-most node at a horizontal distance of -2 is 4.\nThe bottom-most node at a horizontal distance of -1 is 2.\nThe bottom-most node at a horizontal distance of 0 is 5 and 6. However, 6 is more towards the right, so 6 is included.\nThe bottom-most node at a horizontal distance of 1 is 3.\nThe bottom-most node at a horizontal distance of 2 is 7.\n\nHence, the bottom view would be 4 2 6 3 7\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The only line contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null(-1).\n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return an array representing the bottom view of the given binary tree.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample input 1 :</h4>\n\n<pre><code>1 2 3 -1 -1 5 6 7 8 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<p><br/></p>\n\n<h4 id=\"sample-output-1\">Sample output 1 :</h4>\n\n<pre><code>7 5 8 6\n</code></pre>\n\n<p><br/></p>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h4>\n\n<pre><code>Test case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/aa-6000.jpg\" alt=\"alt text\"></p>\n\n<pre><code>As shown in the above figure,\n\n1 is the root node, so its horizontal distance = 0.\nSince 2 lies to the left of 0, its horizontal distance = 0-1= -1\n3 lies to the right of 0, its horizontal distance = 0+1 = 1\nSimilarly, horizontal distance of 5 = Horizontal distance of 3 - 1= 1-1= 0\nHorizontal distance of 6 = Horizontal distance of 3 + 1=  1+1 = 2\nHorizontal distance of 7 = 0-1 =-1\nHorizontal distance of 8 = 0+1 = 1\n\nThe bottom-most node at a horizontal distance of -1 is 7.\nThe bottom-most node at a horizontal distance of 0 is 5.\nThe bottom-most node at a horizontal distance of 1 is 8.\nThe bottom-most node at a horizontal distance of 2 is 6.\n\nHence, the bottom view would be 7 5 8 6.\n</code></pre>\n\n<p><br/></p>\n\n<h4 id=\"sample-input-2\">Sample input 2 :</h4>\n\n<pre><code>1 2 3 4 -1 6 7 -1 -1 -1 8 -1 -1 -1 -1 \n</code></pre>\n\n<p><br/></p>\n\n<h4 id=\"sample-output-2\">Sample output 2 :</h4>\n\n<pre><code>4 2 6 8 7\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to do this in O(n*log(n)).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= n &lt;= 10000\n\nWhere &#39;n&#39; is the total number of nodes in the binary tree.\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 147,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, return its bottom view. The bottom view consists of the bottom-most nodes at each horizontal distance from the root. The horizontal distance of the root is 0.  The horizontal distance of the right child is +1 and the left child is -1 relative to its parent.",
                "constraints": [
                    "1 <= n <= 10000, where 'n' is the total number of nodes in the binary tree.",
                    "Time Limit: 1 sec",
                    "Expected Time Complexity: O(n*log(n))"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 -1 -1 5 6 7 8 -1 -1 -1 -1 -1 -1",
                        "output": "7 5 8 6",
                        "explanation": "The bottom-most node at a horizontal distance of -1 is 7. The bottom-most node at a horizontal distance of 0 is 5. The bottom-most node at a horizontal distance of 1 is 8. The bottom-most node at a horizontal distance of 2 is 6. Hence, the bottom view is 7 5 8 6."
                    },
                    {
                        "input": "1 2 3 4 -1 6 7 -1 -1 -1 8 -1 -1 -1 -1",
                        "output": "4 2 6 8 7",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the horizontal distances and level of nodes to find the answer.</p>",
            "<p>Use the horizontal distances to find the answer.</p>",
            "<p>Use the horizontal distances to find the answer.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity: O(n*logn)\r\n    Space complexity: O(n)\r\n\r\n    Where \u2018n\u2019 is the number of nodes in the binary tree.\r\n*/\r\n\r\n#include <map>\r\n\r\nvector<int> bottomView(TreeNode<int> *root){\r\n    // Horizontal distance of the root is initialised to 0\r\n    int horizontalDistance = 0;\r\n\r\n    // Map with key as horzontal distance and value as the tree node.\r\n    map<int, TreeNode<int> *> mp;\r\n    queue<pair<TreeNode<int> *, int>> q;\r\n    // Enqueue the root\r\n    q.push({root, 0});\r\n    while (!q.empty())\r\n    {\r\n        pair<TreeNode<int> *, int> p = q.front();\r\n        q.pop();\r\n\r\n        // Update the value for every horizontal distance\r\n        mp[p.second] = p.first;\r\n\r\n        // If left child is present, push it.\r\n        if (p.first->left != NULL)\r\n        {\r\n            q.push({p.first->left, p.second - 1});\r\n        }\r\n        // If right child is present, push it.\r\n        if (p.first->right != NULL)\r\n        {\r\n            q.push({p.first->right, p.second + 1});\r\n        }\r\n    }\r\n    vector<int> answer;\r\n\r\n    // Store all final set of nodes in the answer vector.\r\n    for (auto i = mp.begin(); i != mp.end(); i++)\r\n    {\r\n        answer.push_back(i->second->data);\r\n    }\r\n    return answer;\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time complexity: O(N*log(N))\n    Space complexity: O(N)\n\n    Where 'N' is the number of nodes present in the binary tree.\n\n'''\nfrom collections import OrderedDict\n\n# Following is the structure used to represent the Binary Tree Node.\nclass BinaryTreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n\nclass Pair:\n    def __init__(self, root, level):\n        self.root = root\n        self.level = level\n\n\ndef bottomView(root):\n    ans = []\n    mp = OrderedDict()\n    q = []\n    p1 = Pair(root, 0)\n    q.append(p1)\n\n    while len(q) > 0:\n        p = q.pop(0)\n\n        mp[p.level] = p.root\n\n        if p.root.left is not None:\n            q.append(Pair(p.root.left, p.level - 1))\n\n        if p.root.right is not None:\n            q.append(Pair(p.root.right, p.level + 1))\n\n    bottomViewList = []\n\n    for key in mp.keys():\n        bottomViewList.append(key)\n\n    bottomViewList.sort()\n\n    for i in bottomViewList:\n        ans.append(mp.get(i).data)\n\n    return ans\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/* \r\n\tTime complexity: O(N*log(N))\r\n\tSpace complexity: O(N)\r\n\r\n\tWhere 'N' is the number of nodes in the binary tree.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\n\r\nclass Pair {\r\n    TreeNode root;\r\n    int level;\r\n\r\n    Pair() {\r\n    }\r\n\r\n    Pair(TreeNode root, int level) {\r\n        this.root = root;\r\n        this.level = level;\r\n    }\r\n}\r\n\r\npublic class Solution {\r\n\r\n    public static ArrayList<Integer> bottomView(TreeNode root) {\r\n        // Horizontal distance of the root is initialised to 0.\r\n        int horizontalDistance = 0;\r\n        ArrayList<Integer> ans = new ArrayList<>();\r\n        // Map with key as horzontal distance and value as the tree node.\r\n        HashMap<Integer, TreeNode> mp = new HashMap<>();\r\n\r\n        Queue<Pair> q = new LinkedList<>();\r\n        // Enqueue the root.\r\n        Pair p1 = new Pair(root, 0);\r\n        q.add(p1);\r\n        while (!q.isEmpty()) {\r\n            Pair p = q.poll();\r\n\r\n            // Update the value for every horizontal distance.\r\n            mp.put(p.level, p.root);\r\n            // If left child is present, push it.\r\n            if (p.root.left != null) {\r\n                q.add(new Pair(p.root.left, p.level - 1));\r\n            }\r\n            // If right child is present, push it.\r\n            if (p.root.right != null) {\r\n                q.add(new Pair(p.root.right, p.level + 1));\r\n            }\r\n        }\r\n        ArrayList<Integer> bottomView = new ArrayList<>();\r\n\r\n        for (int key : mp.keySet()) {\r\n            bottomView.add(key);\r\n        }\r\n        // Sorting Keys according to the level Example (-2,-1,0,1,2).\r\n        Collections.sort(bottomView);\r\n        // Store all final set of nodes in the answer vector.\r\n        for (int i : bottomView) {\r\n            ans.add(mp.get(i).val);\r\n        }\r\n\r\n        return ans;\r\n    }\r\n\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}