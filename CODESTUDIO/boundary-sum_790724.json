{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7845,
            "title": "Boundary Sum",
            "titleSlug": "boundary-sum_790724",
            "content": "<h4 id=\"given-a-binary-tree-of-n-nodes-find-and-print-the-sum-of-all-the-boundary-nodes-boundary-nodes-consist-of-a-root-node-leftmost-external-nodes-rightmost-external-nodes-and-all-the-leaves-of-the-tree\">Given a Binary Tree of &#39;N&#39; nodes, find and print the sum of all the boundary nodes. Boundary nodes consist of a root node, leftmost external nodes, rightmost external nodes and all the leaves of the tree.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Given binary tree :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/treeimage-5138.PNG\" alt=\"input\"></p>\n\n<pre><code>Boundary Nodes :\n         Root : 2\n         Leftmost : 35\n         Rightmost : 10\n         Leaf nodes : 2,3,5,2\n         Sum : 59\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an Integer &#39;T&#39; which denotes the number of test cases. Then the test cases follow.\n\nThe first line of input contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have left or right child, take -1 in its place. Refer to the example below.\n\nExample :\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer denoting the sum of boundary nodes.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 1000\n-10^6 &lt;= node.data &lt;= 10^6\n\nWhere N is the number of nodes in the tree,  and &#39;node.data&#39; denotes data contained in the node of the binary tree.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>109\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-739-5141.png\" alt=\"sample test case\"></p>\n\n<pre><code>Test Case 1 : For the tree in the above image, the root node is 1, the sum of left-most nodes is 2 + 4 =  6, the sum of rightmost nodes is 3 + 7 = 10  and the sum of leaf nodes is 92. Hence adding up all gives us the boundary sum, which is 1 + 6 + 10 + 92. Hence the boundary sum is 109.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>28\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h5>\n\n<pre><code>Test Case 1 : For the tree, the root node is 1, the sum of left-most nodes is 6, the sum of rightmost nodes is 3 and the sum of leaf nodes is 18. Hence adding up all give us the boundary sum, which is 1 + 6 + 3 + 18. Hence the boundary sum is 28.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Tree of 'N' nodes, find and print the sum of all the boundary nodes. Boundary nodes consist of the root node, leftmost external nodes, rightmost external nodes, and all the leaf nodes of the tree.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 1000",
                    "-10^6 <= node.data <= 10^6",
                    "Where N is the number of nodes in the tree, and 'node.data' denotes data contained in the node of the binary tree.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "109",
                        "explanation": "The root node is 1. Leftmost nodes are 2 and 4. Rightmost nodes are 3 and 7. Leaf nodes sum to 92. The boundary sum is 1 + 2 + 4 + 3 + 7 + 92 = 109. Note: this explanation simplifies the leftmost and rightmost additions. The full leftmost path is 2 -> 4 and the full rightmost path is 3 -> 7."
                    },
                    {
                        "input": "1 1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "28",
                        "explanation": "The root node is 1. The sum of the leftmost nodes is 4 + 2= 6. The sum of the rightmost nodes is 3 + 7= 10. The sum of leaf nodes is 4 + 5 + 6 + 7 = 22.  Hence the boundary sum is 1 + 6 + 10 + 4 + 5 + 6 + 7 = 28."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find the sum of leftmost nodes, rightmost nodes, and leaf nodes individually and add them.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}