{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8571,
            "title": "Boundary Traversal",
            "titleSlug": "boundary-traversal_893063",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-integers-your-task-is-to-print-the-boundary-nodes-of-this-binary-tree-in-an-anti-clockwise-direction-starting-from-the-root-node\">You have been given a binary tree of integers. Your task is to print the boundary nodes of this binary tree in an Anti-Clockwise direction starting from the root node.</h4>\n\n<h4 id=\"note-the-boundary-nodes-of-a-binary-tree-include-nodes-from-the-left-boundary-right-boundary-and-the-leaf-nodes-without-duplicate-nodes-however-the-values-from-the-nodes-may-contain-duplicates\">NOTE: The boundary nodes of a binary tree include nodes from the left boundary, right boundary and the leaf nodes without duplicate nodes. However, the values from the nodes may contain duplicates.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<p><img src=\"https://files.codingninjas.in/boundarytraversal-5149.png\" alt=\"alt text\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the boundary nodes of the given binary tree separated by single spaces.\n\nPrint the output of each test case in a separate line.\n\nNote: \nYou are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 5000\n1 &lt;= val &lt;= 10^5 and val != -1\n\nWhere \u2018T\u2019 is the number of test cases, and \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cval\u201d is the value of the binary tree node\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 4 -1 5 -1 -1 -1 -1 -1\n1 2 -1 3 4 5 -1 6 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 4 5 3 \n1 2 3 5 6\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, we have 1 as the root node. 2, 4 as left boundary nodes. 3, 5 as the right boundary nodes. We don&#39;t have any leaf nodes.\n\nFor the second test case, we have 1 as the root node. 2, 3 as the left boundary nodes and 5, 6 as leaf nodes. We don&#39;t have any right boundary. Notice that we don\u2019t include 4 in our traversal because the right boundary will start from the right child of the root node.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n4 7 6 -1 -1 8 9 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 2 4 5 6 7 3\n4 7 8 9 6\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, we have 1 as the root node. 2, 4 as left boundary nodes and 5,6 as leaf nodes and 3, 7 as the right boundary nodes. \n\nFor the second test case, we have 4 as the root node. 7 as the left boundary node and 8 as a leaf node and 9,6 as the right boundary.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of integers, your task is to implement a function `boundaryTraversal` that prints the boundary nodes of this binary tree in an anti-clockwise direction, starting from the root node. The boundary includes the left boundary, leaf nodes, and the right boundary, without including duplicate nodes.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "0 <= N <= 5000 (Total number of nodes in the binary tree)",
                    "1 <= val <= 10^5 and val != -1 (Value of a binary tree node)"
                ],
                "testcases": [
                    {
                        "input": "root=[1, 2, 3, 4, -1, 5, -1, -1, -1, -1, -1]",
                        "output": "1 2 4 5 3",
                        "explanation": "The root is 1. The left boundary nodes are 2 and 4. The right boundary nodes are 3 and 5. No leaf nodes in addition to boundaries. Therefore, the anti-clockwise boundary traversal is 1 2 4 5 3."
                    },
                    {
                        "input": "root=[1, 2, -1, 3, 4, 5, -1, 6, -1, -1, -1, -1, -1]",
                        "output": "1 2 3 5 6",
                        "explanation": "The root is 1. The left boundary nodes are 2 and 3. The leaf nodes are 5 and 6. There are no right boundary nodes other than the root. Therefore, the anti-clockwise boundary traversal is 1 2 3 5 6."
                    },
                    {
                        "input": "root=[1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "1 2 4 5 6 7 3",
                        "explanation": "The root is 1. The left boundary is 2, 4, 5, 6, 7. The right boundary is 3. Thus the output is 1 2 4 5 6 7 3"
                    },
                    {
                        "input": "root=[4, 7, 6, -1, -1, 8, 9, -1, -1, -1, -1]",
                        "output": "4 7 8 9 6",
                        "explanation": "The root is 4. The left boundary is 7. The leaf nodes are 8, 9. The right boundary is 6. Thus the output is 4 7 8 9 6."
                    },
                    {
                        "input": "root=[1, -1, 2]",
                        "output": "1 2",
                        "explanation": "The root is 1. Left boundary is none. The right boundary is 2. Thus, the boundary traversal output is 1 2"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse the left, right boundaries and leaf nodes separately and then combine the result.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}