{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10792,
            "title": "Bounded Blocking Queue",
            "titleSlug": "bounded-blocking-queue_1264944",
            "content": "<h4 id=\"implement-a-bounded-blocking-queue-that-has-the-following-functions\">Implement a bounded blocking queue that has the following functions:</h4>\n\n<pre><code>BoundedBlockingQueue( int capacity ): Creates a queue of the given capacity.\n\nVoid Enqueue(int val): Adds an element to the end of the queue. If the queue is full, enqueue request gets blocked until the queue has no empty space i.e the element is stored at some other space and enqueued in the list when there is space in the queue.  \n\nInt Dequeue(): Returns the element at the front of the queue and blocks the dequeue request if there are no items in the queue until the queue has an element enqueued.\n\nInt Size(): Returns the size of the queue.\n\nYou will be given \u2018Q\u2019 queries. You need to implement a bounded blocking queue according to those queries. Each query will belong to one of these two types:\n\n0 \u2018C\u2019: Creates a queue of a capacity \u2018C\u2019.\n\n1 \u2018X\u2019: Enqueue element \u2018X\u2019  into the end of the queue. \n\n2: Dequeue the element at the front of the queue. \nReturns -1 if the queue is empty, otherwise, returns the dequeued element.\n\n3: Returns the size of the queue.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains \u2018T\u2019 denoting the number of the test cases.\n\nEach of the test cases is described as:\n\nThe first line contains \u2018Q\u2019 denoting the number of queries to be answered.\n\nThe next \u2018Q\u2019 lines specify the type of query to be performed as mentioned above.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, for all the query of type:-\n\n2: Return -1 if the queue is empty otherwise return the dequeued element.\n\n3: Returns the size of the queue.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= Q &lt;= 10^5 \n0 &lt;= P &lt;= 3\n1 &lt;= X &lt;= 10^5\n\nWhere &#39;P\u2019, denotes the type of query.\u2018X\u2019 is the element to be enqueued in case the query type is \u20181\u2019.\n\nTime Limit : 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n7\n0 5\n1 3\n1 9\n2 \n3\n2\n3\n4\n0 2\n2\n1 7\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3 1 9 0\n-1 7 0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>Test Case 1:  For this input, we have number of queries, Q = 7.\nOperations performed on the queue are as follows:\n0 5 -&gt; A queue of capacity \u20185\u2019 is initialized.\n1 3-&gt; Enqueue 1 to back of the queue. q= [3]\n1 9 -&gt; Enqueue 9 to back of queue. q= [3,9]\n2 -&gt; Dequeue front element and return 3 . q= [ 9 ].\n3 -&gt; Return size of queue i.e 1.\n2-&gt; Dequeue front element. q= [ ].\n3 -&gt; Return the size of the queue. I.e 0.\n\nTest Case 2: For this input, we have the number of queries, Q = 4.\n0 2 -&gt; A queue of capacity \u20182\u2019 is initialized.\n2 -&gt; We have to dequeue an element but as the queue is empty this request will go to a blocked state and return -1.\n1 7 -&gt; Enqueue 7 to the queue. Now the blocked request of dequeue will be unblocked So dequeue front element i.e \u20187\u2019 and return it. \n3 -&gt; Return the size of the queue i.e \u20180\u2019.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2\n0 8\n2\n3\n0 11\n1 4\n1 21\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>-1    \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a bounded blocking queue with the following functionalities:\n\n*   `BoundedBlockingQueue(int capacity)`: Initializes a queue with a specified capacity.\n*   `void Enqueue(int val)`: Adds an element to the rear of the queue. If the queue is full, the enqueue operation blocks until space becomes available.\n*   `int Dequeue()`: Removes and returns the element at the front of the queue. If the queue is empty, the dequeue operation blocks until an element is enqueued.\n*   `int Size()`: Returns the current number of elements in the queue.\n\nYou will process a series of queries. Each query belongs to one of the following types:\n\n*   `0 C`: Create a bounded blocking queue with a capacity of `C`.\n*   `1 X`: Enqueue the element `X` into the queue.\n*   `2`: Dequeue an element from the queue. Return -1 if the queue is initially empty; otherwise, return the dequeued element.\n*   `3`: Return the current size of the queue.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= Q <= 10^5",
                    "0 <= P <= 3",
                    "1 <= X <= 10^5",
                    "Where 'P' denotes the type of query and 'X' is the element to be enqueued when the query type is '1'.",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "2\n7\n0 5\n1 3\n1 9\n2 \n3\n2\n3\n4\n0 2\n2\n1 7\n3",
                        "output": "3 1 9 0\n-1 7 0",
                        "explanation": "Test Case 1: The queue is initialized with a capacity of 5. The elements 3 and 9 are enqueued. A dequeue operation returns 3, leaving 9 in the queue. The size of the queue is 1. Another dequeue operation returns 9, emptying the queue. The size becomes 0.\n\nTest Case 2: The queue is initialized with a capacity of 2. A dequeue operation is attempted on an empty queue, so -1 is returned (and potentially blocked). The element 7 is enqueued. The blocked dequeue operation is unblocked, dequeuing 7. The queue is now empty, and the size is 0."
                    },
                    {
                        "input": "2\n2\n0 8\n2\n3\n0 11\n1 4\n1 21",
                        "output": "-1",
                        "explanation": "The queue is initialized with a capacity of 8. A dequeue is called on an empty queue, so -1 is returned (and potentially blocked)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of the blocked requests, maybe we can use a separate queue to handle them.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}