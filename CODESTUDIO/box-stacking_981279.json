{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9248,
            "title": "Box Stacking",
            "titleSlug": "box-stacking_981279",
            "content": "<h4 id=\"you-are-given-a-set-of-n-types-of-rectangular-3-d-boxes-the-height-width-and-length-of-each-type-of-box-are-given-by-arrays-height-width-and-length-respectively-each-consisting-of-n-positive-integers-the-height-width-length-of-the-i-th-type-box-is-given-by-height-i-width-i-and-length-i-respectively\">You are given a set of \u2018n\u2019 types of rectangular 3-D boxes. The height, width, and length of each type of box are given by arrays, \u2018height\u2019, \u2018width\u2019, and \u2018length\u2019 respectively, each consisting of \u2018n\u2019 positive integers. The height, width, length of the i^th type box is given by \u2018height[i]\u2019, \u2018width[i]\u2019 and \u2018length[i]\u2019 respectively.</h4>\n\n<h4 id=\"you-need-to-create-a-stack-of-boxes-that-is-as-tall-as-possible-using-the-given-set-of-boxes\">You need to create a stack of boxes that is as tall as possible using the given set of boxes.</h4>\n\n<h4 id=\"below-are-a-few-allowances\">Below are a few allowances:</h4>\n\n<pre><code>You can only stack a box on top of another box if the dimensions of the 2-D base of the lower box ( both length and width ) are strictly larger than those of the 2-D base of the higher box. \n\nYou can rotate a box so that any side functions as its base. It is also allowed to use multiple instances of the same type of box. This means, a single type of box when rotated, will generate multiple boxes with different dimensions, which may also be included in stack building.\n</code></pre>\n\n<h4 id=\"return-the-height-of-the-highest-possible-stack-so-formed\">Return the height of the highest possible stack so formed.</h4>\n\n<p><img src=\"https://files.codingninjas.in/boxstack-6650.png\" alt=\"alt text\"></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The height, Width, Length of the type of box will interchange after rotation.\n\nNo two boxes will have all three dimensions the same.\n\nDon\u2019t print anything, just return the height of the highest possible stack that can be formed.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe next \u20184*T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of each test case contains an integer \u2018n\u2019, representing the number of types of boxes.\n\nThe second line of the test case contains \u2018n\u2019 space-separated integers representing elements of the array \u2018height\u2019.\n\nThe third line of the test case contains \u2018n\u2019 space-separated integers representing elements of the array \u2018width\u2019.\n\nThe fourth line of the test case contains \u2018n\u2019 space-separated integers representing elements of the array \u2018length\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Return a single integer representing the height of the highest possible stack that can be formed.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= n &lt;= 10^2\n1 &lt;= height[i] &lt;= 10^2\n1 &lt;= width[i] &lt;= 10^2\n1 &lt;= length[i] &lt;= 10^2\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\n1 2\n2 4\n3 6  \n1\n3\n3\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>11 \n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>Test case 1:\nThe number of types of boxes, \u2018n\u2019 = 2 \n\u2018height\u2019 = {1, 2}\n\u2018width\u2019= {2, 6}\n\u2018length\u2019 = {3, 4}\nLet donate box in (Height, Width, Length) manner then, one way of placing the box in bottom to top manner is as follow:\n\nPlace the box of the second type i.e box (2, 4, 6) in the bottom.\n\nPlace the box of the second type after rotating i.e box (6, 2, 4) above the previous box.\n\nPlace the box of the first type after rotating i.e box (3, 1, 2) above the previous box.\n\nHence, the total height of the box stack is 2 + 6 + 3 = 11.\n\nNo other combination of boxes produces a height greater than 11.\n\nTest case 2:\nThere is only one type of box, with each of the dimensions equal to 3.\n\nThus, the maximum height of the box stack will be 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2\n1 2\n1 2\n1 2\n4\n4 1 4 10\n6 2 5 12\n7 3 6 32\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code> 3\n 60\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'n' types of rectangular 3-D boxes, represented by their height, width, and length. The goal is to create the tallest possible stack of boxes, subject to the following constraints:\n\n1.  A box can only be placed on top of another if both the length and width of the base of the lower box are strictly greater than the length and width of the base of the higher box.\n2.  Boxes can be rotated to use any side as the base.\n3.  Multiple instances of the same type of box can be used in the stack.\n\nDetermine the maximum possible height of a stack formed using these rules.",
                "constraints": [
                    "1 <= T <= 50 (Number of test cases)",
                    "1 <= n <= 100 (Number of box types)",
                    "1 <= height[i] <= 100",
                    "1 <= width[i] <= 100",
                    "1 <= length[i] <= 100",
                    "Time limit: 1 second",
                    "No two boxes will have all three dimensions the same."
                ],
                "testcases": [
                    {
                        "input": "2\n2\n1 2\n2 4\n3 6",
                        "output": "11",
                        "explanation": "Test Case 1: We have two box types.\nBox 1: (1, 2, 3)\nBox 2: (2, 4, 6)\nOne possible stack can be:\n1. Bottom: Box 2 (2, 4, 6) - Height: 2\n2. Middle: Box 2 rotated (6, 2, 4) - Height: 6\n3. Top: Box 1 rotated (3, 1, 2) - Height: 3\nTotal height: 2 + 6 + 3 = 11. This is the maximum possible height."
                    },
                    {
                        "input": "1\n1\n3\n3\n3",
                        "output": "3",
                        "explanation": "Test Case 2:  We have one box type (3, 3, 3).  The maximum stack height is simply the height of one box, which is 3."
                    },
                    {
                        "input": "2\n2\n1 2\n1 2\n1 2",
                        "output": "3",
                        "explanation": "Test Case 1: We have two box types.\nBox 1: (1, 1, 1)\nBox 2: (2, 2, 2)\nOne possible stack can be:\n1. Bottom: Box 2 (2, 2, 2) - Height: 2\n2. Top: Box 1 (1, 1, 1) - Height: 1\nTotal height: 2 + 1 = 3. This is the maximum possible height."
                    },
                    {
                        "input": "4\n4 1 4 10\n6 2 5 12\n7 3 6 32",
                        "output": "60",
                        "explanation": "Test Case 2: We have four box types with the following dimensions:\nBox 1: (4, 6, 7)\nBox 2: (1, 2, 3)\nBox 3: (4, 5, 6)\nBox 4: (10, 12, 32)\nOptimal stack: Stack only Box4 height: 32. Stack Box3 on top of Box2 : No possible. One Possible Solution Only stack Box 4:32 + Box1:4+ Box3:4+ Box2:10= 60"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try out all the possible ways of placing boxes.</p>",
            "<p>Is sorting the type of boxes and their rotation in decreasing order of their base area make this problem similar to finding Longest Increasing Subsequence??</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}