{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10791,
            "title": "Boxes and chocolates",
            "titleSlug": "boxes-and-chocolates_1264941",
            "content": "<h4 id=\"kevin-has-three-children-and-he-wants-to-buy-chocolates-for-them-the-shopkeeper-has-n-boxes-of-chocolates-numbered-from-1-to-n-each-box-has-some-amount-of-chocolates-if-kevin-selects-the-i-th-box-for-buying-the-chocolates-then-he-must-have-to-buy-all-the-chocolates-present-in-that-box-kevin-wants-to-distribute-an-equal-amount-of-chocolates-among-his-children\">Kevin has three children and he wants to buy chocolates for them. The shopkeeper has \u2018N\u2019 boxes of chocolates (numbered from 1 to \u2018N\u2019). Each box has some amount of chocolates. If Kevin selects the \u201ci-th\u201d box for buying the chocolates then he must have to buy all the chocolates present in that box. Kevin wants to distribute an equal amount of chocolates among his children.</h4>\n\n<h4 id=\"this-problem-is-divided-into-3-subproblems-you-must-have-to-solve-all-three-subproblems\">This problem is divided into 3 subproblems. You must have to solve all three subproblems.</h4>\n\n<h4 id=\"first\">FIRST:</h4>\n\n<pre><code>You have to find the maximum number of ways in which Kevin can buy the chocolates if he is allowed to choose boxes in random order.\n</code></pre>\n\n<h4 id=\"second\">SECOND:</h4>\n\n<pre><code>You have to find the maximum number of ways in which Kevin can buy the chocolates if he is only allowed to choose the consecutive boxes.\n</code></pre>\n\n<h4 id=\"third\">THIRD:</h4>\n\n<pre><code>There are \u2018Q\u2019 queries given to you and each query can be of two types:\n\n0 I V\n1 L R\n\nThe first type has 0 as a first character that represents this is an update query in which you have to update the number of chocolates in the \u201cIth\u201d box to \u2018V\u2019.\n\nThe second type has 1 as a first character that represents this is a range query in which you have to find the maximum number of ways in which Kevin can buy the chocolates in the range [L, R] if he is allowed to choose boxes in any order.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. There is no need to maximize the number of chocolates bought by Kevin. \n2. Consider 1 based indexing for queries. There must be a single query of type 1. \n3. You have to take the modulo with 10^9 + 7 as the result can be very large.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain a single integer \u2018N\u2019 which denotes the number of chocolate boxes in the shop.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers which denote the number of chocolates in a particular box.\n\nThe third line of each test case will contain a single integer \u2018Q\u2019 which denotes the number of queries.\n\nThe next \u2018Q\u2019 lines contain three integers \u201c0 I V\u201d or \u201c1 L R\u201d in which \u2018I\u2019 represents the index whose value will have to be updated to \u2018V\u2019. \u2018L\u2019 and \u2018R\u2019 represent the inclusive range for which the result has been asked.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the result of all three subproblems in order such that:\n\nIn the first line, the result of subproblem 1 (FIRST) is printed.\n\nIn the second line, the result of subproblem 2 (SECOND) is printed.\n\nIn the third line, the result of each range query of type 1 is printed and each integer must be separated by a single space.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 100\n1 &lt;= ARR[ i ] &lt;= 10^5\n1 &lt;= Q &lt;= 100\n1 &lt;= I, L, and R &lt;= N\n1 &lt;= V &lt;= 10^5\n\nWhere &quot;ARR[i]\u201d is the number of chocolates in the \u201ci-th\u201d box, \u2018Q\u2019 is the number of queries, and \u2018I\u2019, \u2018V\u2019, \u2018L\u2019, and \u2018R\u2019 are described in the Input format.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n4\n2 3 5 8\n2\n0 1 3\n1 1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code>3\n2\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>In the first test case, the number of ways in which Kevin can buy the chocolates if he chooses boxes in any order is 3 ([2, 5, 8], [3], [2, 3, 5, 8]), if he chooses only consecutive boxes then answer is 2 ([2, 3, 5, 8] and [3]) and after updating the array answer for the range query is 3 ([3], [3], [3,3]).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1\n12\n4\n0 1 2\n1 1 1\n0 1 3\n1 1 1\n3\n3 1 3\n2\n0 2 3\n1 1 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n1\n0 1\n3\n2\n7\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>In the second test case, Results for each subproblem are as follows:\nFIRST :- [3], [3, 3], and [3].\nSECOND :- [3], and [3]\nTHIRD :- [3], [3, 3], [3, 3], [3, 3, 3], [3], [3, 3], and [3].\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Ninja",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Kevin has three children and wants to buy chocolates for them. A shop has N boxes of chocolates, each containing a certain amount. Kevin must buy all chocolates in a selected box. His goal is to buy boxes such that he can divide the total chocolates equally among his three children.\n\nThis problem consists of three subproblems:\n\n**FIRST:** Find the maximum number of ways Kevin can choose boxes in any order to achieve an equal distribution.\n\n**SECOND:** Find the maximum number of ways Kevin can choose *consecutive* boxes to achieve an equal distribution.\n\n**THIRD:**  Process Q queries.  There are two types of queries:\n    *   `0 I V`: Update the number of chocolates in box I to V.\n    *   `1 L R`: Find the maximum number of ways Kevin can choose boxes within the range [L, R] (inclusive) in any order to achieve an equal distribution.\n\n**Note:**\n\n*   The goal is not to maximize the total number of chocolates bought, but the number of valid combinations.\n*   Use 1-based indexing for queries.\n*   Always have at least one query of type '1'.\n*   Return result modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 100",
                    "1 <= ARR[ i ] <= 10^5",
                    "1 <= Q <= 100",
                    "1 <= I, L, and R <= N",
                    "1 <= V <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "1\n4\n2 3 5 8\n2\n0 1 3\n1 1 3",
                        "output": "3\n2\n3",
                        "explanation": "In the first test case:\n\n*   **FIRST:** The valid combinations are [2, 5, 8], [3], [2, 3, 5, 8] which is 3.\n*   **SECOND:** The valid consecutive combinations are [2, 3, 5, 8], [3] which is 2.\n*   **THIRD:** After updating the array to [3, 3, 5, 8], the valid combination within the range [1,3] is [3], [3], [3,3] which is 3."
                    },
                    {
                        "input": "2\n1\n12\n4\n0 1 2\n1 1 1\n0 1 3\n1 1 1\n3\n3 1 3\n2\n0 2 3\n1 1 3",
                        "output": "1\n1\n0 1\n3\n2\n7",
                        "explanation": "In the second test case, Results for each subproblem are as follows:\n* FIRST :- [3], [3, 3], and [3].\n* SECOND :- [3], and [3]\n* THIRD :- [3], [3, 3], [3, 3], [3, 3, 3], [3], [3, 3], and [3]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of going through recursively and forming a segment tree and reach to the answer?</p>",
            "<p>Can you think about a solution using Dynamic Programming for the FIRST subproblem and the HashMap for the SECOND?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}