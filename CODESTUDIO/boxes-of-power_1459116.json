{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12284,
            "title": "Boxes of Power",
            "titleSlug": "boxes-of-power_1459116",
            "content": "<h4 id=\"you-are-given-a-set-of-n-boxes-the-boxes-are-given-in-the-form-of-an-array-gainpower-each-box-has-some-power-associated-with-it-also-you-are-given-some-initial-power-power-you-are-playing-a-game-by-choosing-the-boxes-in-such-a-way-to-maximize-the-total-score-in-one-move-you-can-perform-one-of-the-two-operations\">You are given a set of \u2018N\u2019 boxes. The boxes are given in the form of an array \u2018gainPower\u2019. Each box has some power associated with it. Also, you are given some initial power \u2018power\u2019. You are playing a game by choosing the boxes in such a way to maximize the total score. In one move, you can perform one of the two operations:</h4>\n\n<h4 id=\"1-for-any-index-i-if-the-current-power-is-power-and-gainpower-i-is-less-than-or-equal-to-power-you-can-lose-gainpower-i-from-your-current-power-and-gain-1-score-and-then-remove-it-from-the-set-of-n-boxes\">1. For any index \u2018i\u2019, If the current power is \u2018power\u2019, and gainPower[i] is less than or equal to \u2018power\u2019, you can lose gainPower[i] from your current power and gain 1 score and then remove it from the set of \u2018N\u2019 boxes.</h4>\n\n<h4 id=\"2-for-any-index-i-if-the-current-power-is-power-and-score-is-greater-than-or-equal-to-1-you-can-gain-gainpower-i-to-your-current-power-and-lose-1-score-and-then-remove-it-from-the-set-of-n-boxes\">2. For any index \u2018i\u2019, If the current power is \u2018power\u2019, and \u2018score\u2019 is greater than or equal to 1, you can gain gainPower[i] to your current power and lose 1 score and then remove it from the set of \u2018N\u2019 boxes.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The initial score is 0.\n\nEach box can be used at most once.\n\nThe boxes can be used in any order.\n\nYou don\u2019t have to remove all the boxes.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. The test cases follow.\n\nThe first line contains two integers \u2018N\u2019, and \u2018power\u2019, which denotes the number of elements in the array \u2018gainPower\u2019, and the initial power you have.\n\nThe second line contains N integers denoting the elements of the array \u2018gainPower\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the maximum score you can have after choosing any number of boxes and performing any of the two operations from the boxes chosen.\n\nPrint the output of the test case in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^4\n1 &lt;= gainPower[i], power &lt;= 10^4\n\nWhere \u2019T\u2019 is the number of test cases, N denotes the number of elements in the array \u2018gainPower\u2019,gainPower[i] denotes the power associated with the box at index \u2018i\u2019, and power denotes the initial power you have.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 100\n50 300 100 200\n4 100\n50 50 50 50\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>In the first test case, there are 4 boxes with power [50, 300, 100, 200]. You have initial power = 100 and initial score = 0. We can follow the following steps to maximize the score:\n\n    Apply operation 1 on the box with power = 50. After applying the operation, gainPower = [300, 100, 200], power = 50, score = 1.\n    Apply operation 2 on the box with power = 300. \n\nAfter applying the operation, gainPower = [100, 200], power = 350, score = 0.\n\n    Apply operation 1 on the box with power = 100. After applying the operation, gainPower = [200], power = 250, score = 1.\n\n    Apply operation 1 on the box with power = 200. After applying the operation, gainPower = [], power = 50, score = 2.\n\nHence, the answer is 2.\n\nIn the second test case, there are 4 boxes with power [50, 50, 50, 50]. You have initial power = 100 and initial score = 0. We can follow the following steps to maximize the score:\n\n    Apply operation 1 on the first box with power = 50. After applying the operation, gainPower = [50, 50, 50], power = 50, score = 1.\n\n    Apply operation 1 on the second box with power = 50. After applying the operation, gainPower = [50, 50], power = 0, score = 2.\n\nNow, you can also apply operation 2 in other boxes but the maximum score you can get is 2. Hence, the answer is 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n8 500\n100 200 300 400 500 600 700 800 \n3 500\n100 200 300 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -6,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a set of \u2018N\u2019 boxes, represented by an array 'gainPower' where each element denotes the power associated with a box. You also have an initial 'power'. The goal is to maximize your 'score' by choosing boxes and performing operations.\n\nThere are two possible operations:\n\n1.  If the current 'power' is greater than or equal to gainPower[i], you can subtract gainPower[i] from your 'power' and increase your 'score' by 1.\n2.  If your current 'score' is greater than or equal to 1, you can add gainPower[i] to your 'power' and decrease your 'score' by 1.\n\nEach box can be used at most once and in any order. You don't have to use all boxes. The initial score is 0. Find the maximum possible score.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^4",
                    "1 <= gainPower[i], power <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "4 100\n50 300 100 200",
                        "output": "2",
                        "explanation": "Initial power is 100 and initial score is 0.  We can follow the following steps to maximize the score:\n\n1. Use operation 1 on the box with power 50. power becomes 50, score becomes 1.\n2. Use operation 2 on the box with power 300. power becomes 350, score becomes 0.\n3. Use operation 1 on the box with power 100. power becomes 250, score becomes 1.\n4. Use operation 1 on the box with power 200. power becomes 50, score becomes 2.\n\nHence, the answer is 2."
                    },
                    {
                        "input": "4 100\n50 50 50 50",
                        "output": "2",
                        "explanation": "Initial power is 100 and initial score is 0. We can follow the following steps to maximize the score:\n\n1. Use operation 1 on the first box with power 50. power becomes 50, score becomes 1.\n2. Use operation 1 on the second box with power 50. power becomes 0, score becomes 2.\n\nThe maximum score you can get is 2."
                    },
                    {
                        "input": "8 500\n100 200 300 400 500 600 700 800",
                        "output": "3",
                        "explanation": null
                    },
                    {
                        "input": "3 500\n100 200 300",
                        "output": "2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you use the two-pointer approach to find the answer?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}