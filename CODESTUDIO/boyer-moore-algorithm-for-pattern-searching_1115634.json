{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9999,
            "title": " Boyer Moore Algorithm for Pattern Searching",
            "titleSlug": "boyer-moore-algorithm-for-pattern-searching_1115634",
            "content": "<h4 id=\"you-are-given-a-string-text-and-a-string-pattern-your-task-is-to-find-all-occurrences-of-pattern-in-the-string-text-and-return-an-array-of-indexes-of-all-those-occurrences-you-may-assume-that-the-length-of-text-is-always-greater-than-the-length-of-pattern\">You are given a string \u2018text\u2019 and a string \u2018pattern\u2019, your task is to find all occurrences of pattern in the string \u2018text\u2019 and return an array of indexes of all those occurrences. You may assume that the length of \u2018text\u2019 is always greater than the length of \u2018pattern\u2019.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>Let text = \u201cthis is a good place to have a good start\u201d, pattern = \u201cgood\u201d so you have to return {10, 31} because at 10 and 31 index pattern is present in the text.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>If there is no such index in the text then just return an array containing -1.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a string \u2018text\u2019 in which the pattern will be searched for.\n\nThe second line of each test case contains a string \u2018pattern\u2019 of which you have to find all occurrences in \u2019text\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return an array representing the indices where the pattern is found in the text. The output of each test case is printed in a separate line. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t have to print anything; it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= M &lt; 100\n1 &lt;= N &lt; M\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\nXYXXXYZW\nXYZ\nABAAAABAACD\nABA\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>4\n0 5   \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For the first test case:\nThe given text is  \u201cXYXXXYZW\u201d and we have to find the pattern \u201cXYZ\u201d as we can clearly see that this pattern only exists once in the text at index 4 to index 6 so we will return an array containing just a single element that is 4. \n\nFor the second test case:\nThe given text is  \u201cABAAAABAACD\u201d and we have to find the pattern \u201cABA\u201d as we can clearly see that this pattern exists at two places in the given text that is from index 0 to 2 and from index 5 to 7, so clearly we will return both the starting indices where the pattern is found therefore we will return 0 and 5.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>3\nDDDVVVBHHUT\nHUT\nSSYTPQSSYGVBFSSY\nSSY\nPABCDABCDABCD\nABCDE    \n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>8\n0 6 13\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `text` and a string `pattern`, implement the function `patternSearch` to find all occurrences of `pattern` within `text`. Return a vector (array) containing the starting indices of each occurrence. If the `pattern` is not found in `text`, return a vector containing only the value -1. Assume that the length of `text` is always greater than or equal to the length of `pattern`.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= M <= 100 (length of text)",
                    "1 <= N < M (length of pattern)"
                ],
                "testcases": [
                    {
                        "input": "text = \"XYXXXYZW\", pattern = \"XYZ\"",
                        "output": "[4]",
                        "explanation": "The pattern \"XYZ\" occurs once in the text \"XYXXXYZW\" starting at index 4."
                    },
                    {
                        "input": "text = \"ABAAAABAACD\", pattern = \"ABA\"",
                        "output": "[0, 5]",
                        "explanation": "The pattern \"ABA\" occurs twice in the text \"ABAAAABAACD\" starting at indices 0 and 5."
                    },
                    {
                        "input": "text = \"DDDVVVBHHUT\", pattern = \"HUT\"",
                        "output": "[8]",
                        "explanation": "The pattern \"HUT\" occurs once in the text \"DDDVVVBHHUT\" starting at index 8."
                    },
                    {
                        "input": "text = \"SSYTPQSSYGVBFSSY\", pattern = \"SSY\"",
                        "output": "[0, 6, 13]",
                        "explanation": "The pattern \"SSY\" occurs three times in the text \"SSYTPQSSYGVBFSSY\" starting at indices 0, 6, and 13."
                    },
                    {
                        "input": "text = \"PABCDABCDABCD\", pattern = \"ABCDE\"",
                        "output": "[-1]",
                        "explanation": "The pattern \"ABCDE\" does not occur in the text \"PABCDABCDABCD\", so we return an array containing -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}