{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10471,
            "title": "Bracket Number",
            "titleSlug": "bracket-number_1229411",
            "content": "<h4 id=\"given-a-string-s-comprising-of-some-brackets-you-need-to-print-the-number-of-every-bracket\">Given a string \u2018S\u2019 comprising of some brackets. You need to print the number of every bracket.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>If S = (pq)() \nThen the output will be 1 1 2 2. First pair of opening and closing brackets will get the same number and so does the 2nd pair.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a string \u2018S\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the number of every bracket separated by a space.\n\nOutput of each test case will be printed on a new line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= |S| &lt;= 10^5\n\nWhere \u2018|S|\u2019 is the length of a particular string.\n\nTime Limit: 1 Sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\nab(cd)(e)\n(zyz)\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 1 2 2\n1 1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>Test Case 1: In the given string, there are two pairs of brackets and the order is 1 1 2 2.\n\nTest Case 2: There is only one pair of brackets. So the number of brackets is 1 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n(())()\na(b(pq)(t))\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>1 2 2 1 3 3\n1 2 2 3 3 1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>Test Case 1: In the given string, there are three pairs of brackets and the order is 1 2 2 1 3 3.\n\nTest Case 2: In the given string, there are three pairs of brackets and the order is 1 2 2 3 3 1.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S' containing brackets, determine the numbering of each bracket pair based on their nesting order. The first opening and closing bracket pair encountered will be numbered '1', the next '2', and so on.  Output the bracket numbers in the order they appear in the string.",
                "constraints": [
                    "1 <= T <= 50 (Number of test cases)",
                    "1 <= |S| <= 10^5 (Length of the string S)",
                    "String 'S' will only contain brackets and other characters."
                ],
                "testcases": [
                    {
                        "input": "s = \"ab(cd)(e)\"",
                        "output": "1 1 2 2",
                        "explanation": "The string contains two bracket pairs. The first pair is assigned '1', and the second pair is assigned '2'."
                    },
                    {
                        "input": "s = \"(zyz)\"",
                        "output": "1 1",
                        "explanation": "The string contains only one bracket pair, so it's assigned '1'."
                    },
                    {
                        "input": "s = \"(())()\"",
                        "output": "1 2 2 1 3 3",
                        "explanation": "The string has three bracket pairs with nesting.  The outermost pair is '1', the inner pair '2', and the last pair '3'."
                    },
                    {
                        "input": "s = \"a(b(pq)(t))\"",
                        "output": "1 2 2 3 3 1",
                        "explanation": "The string has three bracket pairs with nesting. The outermost pair is '1', the next level pair '2', and the innermost pair '3'."
                    },
                    {
                        "input": "s = \"\"",
                        "output": "",
                        "explanation": "Empty string should return an empty output."
                    },
                    {
                        "input": "s = \"abc\"",
                        "output": "",
                        "explanation": "No brackets present, so empty output."
                    },
                    {
                        "input": "s = \"(((((())))))",
                        "output": "1 2 3 4 5 6 6 5 4 3 2 1",
                        "explanation": "Nested brackets to a depth of 6."
                    },
                    {
                        "input": "s = \"()()()()()\"",
                        "output": "1 1 2 2 3 3 4 4 5 5",
                        "explanation": "Multiple non-nested bracket pairs"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to iterate through entire string and take note of all starting and ending parenthesis.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}