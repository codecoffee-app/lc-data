{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8944,
            "title": "Braille's Dilemma",
            "titleSlug": "braille-s-dilemma_920550",
            "content": "<h4 id=\"abhishek-a-blind-man-has-n-distinct-binary-strings-all-of-the-equal-lengths-a-binary-string-only-contains-0s-and-1s-the-strings-are-numbered-from-1-to-n-and-all-are-distinct-strings-abhishek-can-only-differentiate-between-these-strings-by-touching-them-in-one-touch-abhishek-can-identify-one-character-at-a-position-of-any-particular-string-from-the-set-your-task-is-to-find-the-minimum-number-of-touches-abhishek-has-to-make-so-that-he-finds-that-all-strings-are-different\">Abhishek, a blind man has N distinct binary strings all of the equal lengths. A binary string only contains &#39;0&#39;s and &#39;1&#39;s. The strings are numbered from 1 to N and all are distinct strings.  Abhishek can only differentiate between these strings by touching them. In one touch Abhishek can identify one character at a position of any particular string from the set. Your task is to find the minimum number of touches  Abhishek has to make so that he finds that all strings are different.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer T, the number of test cases.\n\n The first line of each test case contains a single integer \u2018N\u2019 denoting the number of strings given.\n\n From the second line onwards the next line \u2018N\u2019 lines of the test case contains distinct strings.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return an integer denoting the minimum number of touches Abhishek has to make to distinguish between all given \u2018N\u2019 strings.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n3 &lt;= N &lt;= 10\n1 &lt;= k &lt;= 100\nWhere k  is the length of the string. \nAll the strings are distinct.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\n11100\n11101\n01100\n2\n111\n000\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>5\n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>For the first test case :\nThere are three strings.\nFirst Abhishkek will touch the last character of all strings.\nFor the first and third-string Abhishek will identify 0 for the first and third strings and for the second string Abhishek will identify 1. In this way, Abhishek will be able to distinguish the 2nd string.\nNext Abhishek will touch 1st character of the 1st and 3rd string. Abhishek will identify 1 for 1st string and 0 for the third string. In this way, Abhishek will distinguish 1st and 3rd strings.\nThus the total number of touches Abhishek make is 5.\n\nFor the second test case :\nThere are two strings.\nAbhishek will touch the first character of the first and second string. Abhishek will identify 1 for 1st string and 0 for the second string. In this way, Abhishek will distinguish 1st and 2nd strings.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4\n10010\n11010\n01010\n01100\n3\n000101\n100010\n111000\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code> 8\n 5\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a set of N distinct binary strings of equal length, determine the minimum number of touches required to differentiate all strings. A touch allows you to identify one character at a specific position in a string.",
                "constraints": [
                    "1 <= T <= 10",
                    "3 <= N <= 10",
                    "1 <= k <= 100, where k is the length of the string."
                ],
                "testcases": [
                    {
                        "input": "N = 3, arr = [\"11100\", \"11101\", \"01100\"]",
                        "output": "5",
                        "explanation": "Touch the last character of all strings (3 touches). Strings 1 and 3 have '0', string 2 has '1'.  Now string 2 is uniquely identified. Touch the first character of strings 1 and 3 (2 touches). String 1 has '1', string 3 has '0'. Total touches: 3 + 2 = 5."
                    },
                    {
                        "input": "N = 2, arr = [\"111\", \"000\"]",
                        "output": "2",
                        "explanation": "Touch the first character of both strings (2 touches). String 1 has '1', string 2 has '0'. The strings are now distinguished. Total touches: 2."
                    },
                    {
                        "input": "N = 4, arr = [\"10010\", \"11010\", \"01010\", \"01100\"]",
                        "output": "8",
                        "explanation": "This requires touching more characters, it can be achieved by various valid ways, one possible way: Touch last characters of all four (4 touches). Strings are now : [\"10010\", \"11010\", \"01010\", \"01100\"] . all end in 0, now we can touch first character of all of them, resulting in 4 additional touches. 4+4 = 8 touches total."
                    },
                    {
                        "input": "N = 3, arr = [\"000101\", \"100010\", \"111000\"]",
                        "output": "5",
                        "explanation": "Touch the first character of all strings. (3 touches) 0,1,1. We can determine the first string now. Then, touch the second character of the second and third strings (2 touches). The second character is '0' and '1'. So, we can now uniquely distinguish them. 3+2=5"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try bruteforce using bitmasks</p>",
            "<p>We have overlapping subproblems. Try to memoize.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}