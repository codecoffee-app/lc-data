{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15723,
            "title": "Break and Merge",
            "titleSlug": "break-and-merge_2684591",
            "content": "<h4 id=\"given-an-array-of-n-integers-which-contains-all-numbers-in-the-range-0-n-1-exactly-once-john-wants-to-sort-this-array-but-sorting-a-large-array-is-a-difficult-task-for-him-so-he-will-break-this-array-into-k-disjoint-subarrays-and-sort-them-individually-after-sorting-all-k-subarrays-he-will-put-them-together-and-obtain-the-complete-sorted-array\">Given an array of \u2018N\u2019 integers which contains all numbers in the range [0, N-1] exactly once. John wants to sort this array, but sorting a large array is a difficult task for him. So he will break this array into \u2018K\u2019 disjoint subarrays and sort them individually. After sorting all \u2018K\u2019 subarrays, he will put them together and obtain the complete sorted array.</h4>\n\n<h4 id=\"e-g-let-an-array-be-1-0-4-2-3-he-can-divide-this-into-two-subarrays-1-0-4-2-3-and-after-sorting-both-the-subarrays-individually-he-get-0-1-2-3-4-then-he-put-them-together-and-obtain-final-array-0-1-2-3-4\">E.g: let an array be [1, 0, 4, 2, 3]. He can divide this into two subarrays: [1, 0] , [4, 2, 3] and after sorting both the subarrays individually he get : [0, 1] , [2, 3, 4], then he put them together and obtain final array [0, 1, 2, 3, 4].</h4>\n\n<h4 id=\"your-task-is-to-find-the-maximum-possible-value-of-k-such-that-it-is-possible-to-sort-the-original-array-by-breaking-it-into-k-subarrays\">Your task is to find the maximum possible value of \u2018K\u2019 such that it is possible to sort the original array by breaking it into \u2018K\u2019 subarrays.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains \u2018T\u2019, denoting the number of tests.\nFor each Test :\n    The first line contains an integer \u2018N\u2019, denoting the length of the array.\n    The second line contains an array \u2018A\u2019 of length \u2018N\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test, print an integer, denoting the maximum number of subarrays in which he can break the array and still get the final array sorted.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints -</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 5\n1 &lt;= \u2018N\u2019 &lt;= 10^5\n0 &lt;= A[i] &lt; N  i \u2208  (1,N)\nAll elements A[i] are unique.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\n2 1 0 3\n5\n1 0 2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code>2\n4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>For case 1:\n    The array will be divided into two parts [2, 1, 0], [3]. No more subparts are possible, which give the sorted array. Hence answer is 2.\nFor Case 2:\n    The subarrays will be [1, 0], [2], [3], [4]. Hence answer is 4.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n4 3 2 1 0\n3\n0 1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'A' of 'N' unique integers, where each integer is in the range [0, N-1], determine the maximum number of disjoint subarrays ('K') into which the array can be divided.  When each subarray is individually sorted and then concatenated in the original order, the resulting array should be the fully sorted array [0, 1, 2, ..., N-1]. Return the maximum possible value of 'K'.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 5",
                    "1 <= \u2018N\u2019 <= 10^5",
                    "0 <= A[i] < N  i \u2208  (1,N)"
                ],
                "testcases": [
                    {
                        "input": "n = 4, nums = [2, 1, 0, 3]",
                        "output": "2",
                        "explanation": "The array can be divided into two parts [2, 1, 0] and [3]. Sorting these subarrays yields [0, 1, 2] and [3]. Concatenating them gives the sorted array [0, 1, 2, 3]."
                    },
                    {
                        "input": "n = 5, nums = [1, 0, 2, 3, 4]",
                        "output": "4",
                        "explanation": "The array can be divided into [1, 0], [2], [3], [4].  Sorting yields [0, 1], [2], [3], [4], concatenating gives [0, 1, 2, 3, 4]."
                    },
                    {
                        "input": "n = 5, nums = [4, 3, 2, 1, 0]",
                        "output": "1",
                        "explanation": "The array can only be divided into one subarray [4, 3, 2, 1, 0]. Sorting yields [0, 1, 2, 3, 4]."
                    },
                    {
                        "input": "n = 3, nums = [0, 1, 2]",
                        "output": "3",
                        "explanation": "The array can be divided into [0], [1], [2]. Sorting each gives [0], [1], [2], so concatenating yields [0, 1, 2]."
                    },
                    {
                        "input": "n = 6, nums = [0, 2, 1, 3, 5, 4]",
                        "output": "3",
                        "explanation": "The array can be divided into [0], [2, 1], [3, 5, 4]. These sort to [0], [1, 2], [3, 4, 5] and concatenate to [0, 1, 2, 3, 4, 5]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find positions of each element in the final array ?</p>",
            "<p>When can you end a segment at the \u2018ith\u2019 index?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}