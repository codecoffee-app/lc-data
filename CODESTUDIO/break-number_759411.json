{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7706,
            "title": "Break Number",
            "titleSlug": "break-number_759411",
            "content": "<h4 id=\"given-a-number-n-you-need-to-find-all-possible-unique-ways-to-represent-this-number-as-the-sum-of-positive-integers\">Given a number &#39;N&#39;, you need to find all possible unique ways to represent this number as the sum of positive integers.</h4>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>1. By unique it is meant that no other composition can be expressed as a permutation of the generated composition. For eg. [1, 2, 1] and [1, 1, 2] are not unique.  \n\n2. You need to print all combinations in non-decreasing order for eg. [1, 2, 1] or [1, 1, 2] will be printed as [1, 1, 2], however, the order of printing all the sequences can be random. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first and the only line of the input contains an integer &#39;N&#39; representing the given number.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Each line of the output contains one unique sequence which sums up to &#39;N&#39;.\n\nThere will be &#39;K&#39; lines of output containing one unique sequence on each line in non-decreasing order which sums up to &#39;N&#39;. &#39;K&#39; is the total number of unique sequences. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 50\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n1 1 1 1 \n1 1 2\n2 2\n1 3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>Here notice that all combinations are sorted in non-decreasing order and [1, 1, 2] and [1, 2, 1] are the same and printed as [1, 1, 2]. \n\nNote: 1 1 1 1\n      2 2\n      4 \n      1 3\n      1 1 2  is also a valid output as the order of different sequences doesn\u2019t matter.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer 'N', find all unique combinations of positive integers that sum up to 'N'. The combinations should be printed in non-decreasing order. Unique means that permutations of the same integers are considered as the same combination (e.g., [1, 2, 1] and [1, 1, 2] are the same).",
                "constraints": [
                    "1 <= N <= 50",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "4",
                        "output": "4\n1 1 1 1\n1 1 2\n2 2\n1 3",
                        "explanation": "The combinations are sorted in non-decreasing order. [1, 1, 2] and [1, 2, 1] are the same and printed as [1, 1, 2]. The order of the sequences doesn't matter, meaning multiple valid outputs exists."
                    },
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try brute force, try all possible combinations.</p>",
            "<p>Why do we need to always make two calls? Can we always make a valid call?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}