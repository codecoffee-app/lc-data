{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10900,
            "title": "Break the Tree",
            "titleSlug": "break-the-tree_1279898",
            "content": "<h4 id=\"you-are-given-a-binary-tree-whose-each-node-is-associated-with-some-integer-value-you-have-to-break-this-tree-into-two-parts-by-removing-exactly-one-edge-you-also-have-to-maximise-the-product-of-the-sum-of-the-integers-associated-with-each-node-in-both-parts\">You are given a binary tree whose each node is associated with some integer value. You have to break this tree into two parts by removing exactly one edge. You also have to maximise the product of the sum of the integers associated with each node in both parts.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<p><img src=\"https://files.codingninjas.in/break-the-tree-8473.png\" alt=\"Example\"></p>\n\n<pre><code>Consider the above example, if we break the tree by removing the edge between nodes that has integers 5 and 6 then we get the maximum product of the sum of integers on nodes i.e. ( (6 + 4 + 1) * (5 + 1 + 3 + 2) ) = 121.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The answer may be very large so, you have to take the modulo with 10^9 + 7.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases are as follows.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the maximum product of the sum of integers associated with each node in both the broken parts of the tree.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 100000\n1 &lt;= data &lt;= 10^5\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 -1 -1 -1 -1\n4 3 -1 -1 -1    \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>9\n12\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input\">Explanation For Sample Input !:</h5>\n\n<pre><code>In the first test case, remove the edge between 1 and 3.\n\nIn the second test case, there is only a single edge so just remove it and the answer becomes 4  * 3 = 12.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n5 6 1 4 1 3 2 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>121\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -5,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a binary tree where each node has an integer value. Your task is to break the tree into two subtrees by removing exactly one edge. The goal is to maximize the product of the sums of the node values in each of the resulting subtrees. Calculate this maximum product modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "2 <= N <= 100000 (Number of nodes in the tree)",
                    "1 <= data <= 10^5 (Value of each node)",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 -1 -1 -1 -1",
                        "output": "9",
                        "explanation": "Removing the edge between nodes with values 1 and 3 results in two subtrees with sums 1+2=3 and 3. The product is 3 * 3 = 9."
                    },
                    {
                        "input": "4 3 -1 -1 -1",
                        "output": "12",
                        "explanation": "There's only one edge between the nodes with values 4 and 3. Removing it leads to two subtrees with sums 4 and 3. The product is 4 * 3 = 12."
                    },
                    {
                        "input": "5 6 1 4 1 3 2 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "121",
                        "explanation": "Removing the edge between nodes with values 5 and 6 creates two subtrees with node sums (6 + 4 + 1) = 11 and (5 + 1 + 3 + 2) = 11, resulting in a product of 11 * 11 = 121."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of performing postorder Traversal?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}