{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13759,
            "title": "Bridge and Query",
            "titleSlug": "bridge-and-query_1796210",
            "content": "<h4 id=\"you-are-given-a-connected-unweighted-and-undirected-graph-with-n-nodes-0-to-n-1-and-m-edges-your-task-is-to-answer-q-queries-on-this-graph-each-query-consists-of-four-integers-a-b-c-and-d-for-the-current-query-add-an-edge-between-nodes-numbered-a-and-b-note-that-this-operation-is-temporary-and-only-for-the-current-query-now-output-the-maximum-number-of-bridge-edges-occurring-on-any-path-between-c-and-d\">You are given a connected, unweighted and undirected graph with \u2018N\u2019 nodes [0 to N - 1] and \u2018M\u2019 edges. Your task is to answer \u2018Q\u2019 queries on this graph. Each query consists of four integers \u2018A\u2019, \u2018B\u2019, \u2018C\u2019, and \u2018D\u2019. For the current query add an edge between nodes numbered \u2018A\u2019 and \u2018B\u2019 (note that this operation is temporary and only for the current query). Now, output the maximum number of bridge edges occurring on any path between \u2018C\u2019 and \u2018D\u2019.</h4>\n\n<h4 id=\"note-an-edge-between-node-u-and-v-is-said-to-be-a-bridge-edge-if-after-removal-of-an-edge-u-v-there-is-no-path-between-node-u-and-v\">Note: An edge between node \u2018u\u2019 and \u2018v\u2019 is said to be a bridge edge, if after removal of an edge \u2018u\u2019 - \u2018v\u2019,  there is no path between node \u2018u\u2019 and \u2018v\u2019.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>For given N = 4, M = 3, Q = 1, A = 2, B = 3, C = 0 and D = 3\nFor all queries, we are temporarily adding an edge between nodes, and here, after the addition of an edge 2 - 3,  the graph looks like this:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bridge1-11402.png\" alt=\"1\"></p>\n\n<pre><code>So, the number of bridge edges on the path from node 0 to 3 is 1 i.e 0 - 1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains three integers \u2018N\u2019, \u2018M\u2019, and \u2018Q, denoting the number of nodes, number of edges, and number of queries.\n\nThe next \u2018M\u2019 line contains two space-separated integers \u2019u\u2019 and \u2018v\u2019, denoting an undirected edge between \u2018u\u2019 and \u2018v\u2019.\n\nThe next \u2018Q\u2019 line contains four space-separated integers \u2018A\u2019, \u2018B\u2019, \u2018C\u2019 and \u2018D\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each query, print a single integer \u2018X\u2019, denoting the maximum number of bridge edges occurring on any path between \u2018C\u2019 and \u2018D\u2019.\n\nThe output of each test case will be printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= Q &lt;= 100\n1 &lt;= N, M &lt;= 100\n0 &lt;= u, v &lt;= N - 1\n0 &lt;= A, B, C, D &lt; N - 1\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4 3 2\n0 1\n1 2\n1 3\n2 3 0 3\n2 3 2 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output1\">Explanation of Sample Output1:</h5>\n\n<pre><code>In the first query, after the addition of an edge 2 - 3,  the graph looks like this: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bridge1-11402.png\" alt=\"1\"></p>\n\n<pre><code>So, the number of bridge edges on the path from node 0 to 3 is 1 i.e 0 - 1.\n\nIn the second query, there is no bridge edge in the above graph after adding edges 2-3. So the number of bridge edges is equal to 0.\n\nNote: For each query, we are temporarily adding an edge between nodes.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>6 5 1\n0 1\n1 2\n1 3\n3 4\n4 5\n0 4 2 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2:</h5>\n\n<pre><code>In the first query, after the addition of an edge 0 - 4  the graph looks like this:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bridge2-11403.png\" alt=\"1\"></p>\n\n<pre><code>So, the number of bridge edges are 2 i.e( 2 - 1 and 4 - 5)\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a connected, undirected, and unweighted graph with 'N' nodes (numbered from 0 to N-1) and 'M' edges, determine the maximum number of bridge edges present on any path between two specified nodes for a series of 'Q' queries. Each query involves temporarily adding an edge between two nodes and then finding the maximum number of bridge edges on a path between two other nodes. A bridge edge is defined as an edge whose removal would disconnect the graph. For each query, find the maximum number of bridge edges on any path between the specified source and destination nodes after the temporary edge addition.",
                "constraints": [
                    "1 <= Q <= 100",
                    "1 <= N, M <= 100",
                    "0 <= u, v < N",
                    "0 <= A, B, C, D < N"
                ],
                "testcases": [
                    {
                        "input": "n = 4, m = 3, q = 2, edges = [[0, 1], [1, 2], [1, 3]], queries = [[2, 3, 0, 3], [2, 3, 2, 3]]",
                        "output": "[1, 0]",
                        "explanation": "Query 1: Adding edge (2, 3). Path 0-1-3 has 1 bridge (0-1). Path 0-1-2-3 has 1 bridge (0-1). Max bridge edges = 1.\nQuery 2: Adding edge (2, 3). Path 2-3 has 0 bridges. Max bridge edges = 0."
                    },
                    {
                        "input": "n = 6, m = 5, q = 1, edges = [[0, 1], [1, 2], [1, 3], [3, 4], [4, 5]], queries = [[0, 4, 2, 5]]",
                        "output": "[2]",
                        "explanation": "Query 1: Adding edge (0, 4). One possible path from 2 to 5 is 2-1-3-4-5, bridge edges are 4-5 and 1-2, so answer is 2."
                    },
                    {
                        "input": "n = 3, m = 2, q = 1, edges = [[0, 1], [1, 2]], queries = [[0, 2, 0, 2]]",
                        "output": "[0]",
                        "explanation": "Adding edge (0, 2) creates a cycle. There are no bridge edges from 0 to 2 using the added edge path 0-2, there is no bridge edge path 0-1-2. Therefore the answer is 0."
                    },
                    {
                        "input": "n = 5, m = 4, q = 1, edges = [[0, 1], [1, 2], [2, 3], [3, 4]], queries = [[0, 4, 0, 4]]",
                        "output": "[0]",
                        "explanation": "Adding edge (0, 4), path from 0 to 4 is 0-4 or 0-1-2-3-4. Path 0-4 has 0 bridges. Path 0-1-2-3-4 has no bridges."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Take help from a bridge tree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}