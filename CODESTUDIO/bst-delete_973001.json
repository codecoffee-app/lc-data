{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8985,
            "title": "BST Delete",
            "titleSlug": "bst-delete_973001",
            "content": "<h4 id=\"you-are-given-a-binary-search-tree-bst-and-a-key-value-k-you-need-to-delete-the-node-with-value-k-it-is-guaranteed-that-a-node-has-the-value-k\">You are given a binary search tree (BST) and a key value &#39;K&#39;. You need to delete the node with value &#39;K&#39;. It is guaranteed that a node has the value &#39;K&#39;.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-also-called-an-ordered-or-sorted-binary-tree-is-a-rooted-binary-tree-whose-internal-nodes-each-store-a-key-greater-than-all-the-keys-in-the-nodes-left-subtree-and-less-than-those-in-its-right-subtree\">A binary search tree (BST), also called an ordered or sorted binary tree, is a rooted binary tree whose internal nodes each store a key greater than all the keys in the node&#39;s left subtree and less than those in its right subtree.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>All the elements of the binary search tree are unique.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39;, the number of test cases.\n\nThe first line of every test case contains elements in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 on its place.\n\nThe second line of every test case contains a single integer &#39;K&#39; denoting the value of the node to be deleted. It is guaranteed that this value exists in the Binary Tree.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/unnamed-4-6332.png\" alt=\"alt txt\"></p>\n\n<pre><code>20 10 35 5 15 30 42 -1 -1 -1 13 -1 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 20\n\nLevel 2 :\nLeft child of 20 = 10\nRight child of 20 = 35\n\nLevel 3 :\nLeft child of 10 = 5\nRight child of 10 = 15\nLeft child of 35 = 30\nRight child of 35 = 42\n\nLevel 4 :\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 15 = null (-1)\nRight child of 15 = 13\nLeft child of 30 = null (-1)\nRight child of 30 = null (-1)\nLeft child of 42 = null (-1)\nRight child of 42 = null (-1)\n\nLevel 5 :\nLeft child of 13 = null (-1)\nRight child of 13 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. \n\nThe second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n20 10 35 5 15 30 42 -1 -1 -1 13 -1 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, you need to return the head of the BST after deletion.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the output explicitly, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 1000 \n1 &lt;= data &lt;= 10^9 and data != -1\n1 &lt;= K&lt;= 10^9 \n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n6\n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n5\n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>8 5 10 2 7 -1 -1 -1 -1 -1 -1\n8 6 10 2 7 -1 -1 -1 -1 -1 -1\n8 5 10 2 6 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">Explanation to sample input 1:</h5>\n\n<pre><code>The given BST is the same for both the test cases.    \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/unnamed-3-6331.png\" alt=\"alt txt\"></p>\n\n<pre><code>For the first test case, we need to delete the node with value 6. After deletion, the BST would look like:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/unnamed-1-6329.png\" alt=\"alt txt\"></p>\n\n<pre><code>For the second test case, we need to delete the node with value 5. After deletion, the BST would look like:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/unnamed-2-6330.png\" alt=\"alt txt\"></p>\n\n<pre><code>For the third test case, we need to delete the node with value 7. After deletion, the BST would look like:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/unnamed-6333.png\" alt=\"alt txt\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n20 16 -1 12 -1 8 -1 4 -1 -1 -1 \n12\n1 2 3 -1 -1 -1 -1\n3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>20 16 -1 8 -1 4 -1 -1 -1\n1 2 -1 -1 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) represented by its root node and a key value 'K', implement a function to delete the node with value 'K' from the BST. The BST maintains the property that for any node, all keys in its left subtree are smaller, and all keys in its right subtree are greater. It is guaranteed that a node with the value 'K' exists in the BST.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 1000",
                    "1 <= data <= 10^9 and data != -1",
                    "1 <= K <= 10^9",
                    "All elements of the BST are unique."
                ],
                "testcases": [
                    {
                        "input": "root=[8, 5, 10, 2, 6, -1, -1, -1, -1, -1, 7, -1, -1], key=6",
                        "output": "8 5 10 2 7 -1 -1 -1 -1 -1 -1",
                        "explanation": "Delete node with value 6. The resulting BST is [8, 5, 10, 2, 7, -1, -1, -1, -1, -1, -1]."
                    },
                    {
                        "input": "root=[8, 5, 10, 2, 6, -1, -1, -1, -1, -1, 7, -1, -1], key=5",
                        "output": "8 6 10 2 7 -1 -1 -1 -1 -1 -1",
                        "explanation": "Delete node with value 5. The resulting BST is [8, 6, 10, 2, 7, -1, -1, -1, -1, -1, -1]."
                    },
                    {
                        "input": "root=[8, 5, 10, 2, 6, -1, -1, -1, -1, -1, 7, -1, -1], key=7",
                        "output": "8 5 10 2 6 -1 -1 -1 -1 -1 -1",
                        "explanation": "Delete node with value 7. The resulting BST is [8, 5, 10, 2, 6, -1, -1, -1, -1, -1, -1]."
                    },
                    {
                        "input": "root=[20, 16, -1, 12, -1, 8, -1, 4, -1, -1, -1], key=12",
                        "output": "20 16 -1 8 -1 4 -1 -1 -1",
                        "explanation": "Delete node with value 12. The resulting BST is [20, 16, -1, 8, -1, 4, -1, -1, -1]."
                    },
                    {
                        "input": "root=[1, 2, 3, -1, -1, -1, -1], key=3",
                        "output": "1 2 -1 -1 -1",
                        "explanation": "Delete node with value 3. The resulting BST is [1, 2, -1, -1, -1]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a recursive solution.</p>",
            "<p>Optimise finding the Inorder Successor</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}