{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11113,
            "title": "BST Iterator 2",
            "titleSlug": "bst-iterator-2_1377938",
            "content": "<h4 id=\"you-are-given-a-class-named-as-bstiterator-that-represents-an-iterator-over-inorder-traversal-of-a-binary-search-tree-you-need-to-implement-the-following-things-as-follows\">You are given a class named as BSTIterator that represents an iterator over inorder traversal of a binary search tree. You need to implement the following things as follows:</h4>\n\n<pre><code>1. BSTIterator(Node root) - It is a parameterized constructor in which you are given the root of the Binary search tree. It will be called whenever an object of BSTIterator is created.\n\n2. next() - This member function will return the next element in the in-order traversal of the binary search tree. You need to implement this function.\n\n3. hasNext() - This function will return true if there exists the next element in the traversal else it will return false. You need to implement this function\n\n4. prev() - This member function will return the previous element in the in-order traversal of the binary search tree. You need to implement this function.\n\n5. hasPrev() - This function will return true if there exists the previous element in the traversal else it will return false. You need to implement this function\n</code></pre>\n\n<h4 id=\"the-binary-search-tree-has-n-nodes-and-you-need-to-print-the-inorder-traversal-of-the-tree-using-the-iterator\">The binary search tree has \u2018N\u2019 nodes and you need to print the inorder traversal of the tree using the iterator.</h4>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of the input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bsttominheap-6482.jpg\" alt=\"image\"></p>\n\n<pre><code>4\n2 6\n1 3 5 7\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 4\n\nLevel 2 :\nLeft child of 4 = 2\nRight child of 4 = 6\n\nLevel 3 :\nLeft child of 2 = 1\nRight child of 2 = 3\nLeft child of 6 = 5\nRight child of 6 = 7\n\nLevel 4 :\nLeft child of 1 = null (-1)\nRight child of 1 = null (-1)\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree.\n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case print a single line containing space-separated integers denoting the inorder traversal of the binary search tree.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10 ^ 4  \n1 &lt;= A[i] &lt;= 10 ^ 9 \n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the number of nodes, and A[i] is the value of a node.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 1 3 -1 -1 -1 -1\n10 5 -1 2 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 3\n2 5 10\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>Test case 1:\nThe tree will look like this and its inorder traversal will be 1, 2, 3. :\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000325_1617265406_BST Iterator _ 2.png\"/></p>\n\n<pre><code>Test case 2:\nThe tree will look like this and its inorder traversal will be 2, 5, 10:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000326_1617265414_BST Iterator _ 2 (1).png\"/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n6 -1 7 -1 8 -1 -1    \n3 2 4 1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>6 7 8\n1 2 3 4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a class `BSTIterator` that represents an iterator over the inorder traversal of a binary search tree. Implement the following methods:\n\n1.  `BSTIterator(Node root)`: A constructor that initializes the iterator with the root of the binary search tree.\n2.  `next()`: Returns the next element in the inorder traversal.\n3.  `hasNext()`: Returns `true` if there is a next element in the traversal, `false` otherwise.\n4.  `prev()`: Returns the previous element in the inorder traversal.\n5.  `hasPrev()`: Returns `true` if there is a previous element in the traversal, `false` otherwise.\n\nThe binary search tree has 'N' nodes. Print the inorder traversal of the tree using the iterator.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 10^4 (Number of nodes)",
                    "1 <= A[i] <= 10^9 (Value of a node)",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "2 1 3 -1 -1 -1 -1",
                        "output": "1 2 3",
                        "explanation": "The tree has root 2, left child 1, and right child 3. The inorder traversal is 1, 2, 3."
                    },
                    {
                        "input": "10 5 -1 2 -1 -1 -1",
                        "output": "2 5 10",
                        "explanation": "The tree has root 10, left child 5, and the left child of 5 is 2. The inorder traversal is 2, 5, 10."
                    },
                    {
                        "input": "6 -1 7 -1 8 -1 -1",
                        "output": "6 7 8",
                        "explanation": "The tree has root 6, right child 7 and the right child of 7 is 8. The inorder traversal is 6, 7, 8."
                    },
                    {
                        "input": "3 2 4 1 -1 -1 -1 -1 -1",
                        "output": "1 2 3 4",
                        "explanation": "The tree has root 3, left child 2 and right child 4. The left child of 2 is 1. The inorder traversal is 1, 2, 3, 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of doing some preprocessing?</p>",
            "<p>Can you think of using a double ended queue?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}