{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9952,
            "title": "BST iterator",
            "titleSlug": "bst-iterator_1112601",
            "content": "<h4 id=\"you-are-given-a-class-named-as-bstiterator-that-represents-an-iterator-over-inorder-traversal-of-a-binary-search-tree-you-need-to-implement-the-following-things-as-follows\">You are given a class named as BSTIterator that represents an iterator over inorder traversal of a binary search tree. You need to implement the following things as follows:</h4>\n\n<pre><code>1. BSTIterator(Node root) - It is a parameterized constructor in which you are given the root of the Binary search tree. It will be called whenever an object of BSTIterator is created.\n\n2. next() - This member function will return the next smallest element in the in-order traversal of the binary search tree. You need to implement this function.\n\n3. hasNext() - This function will return true if there exists the next smallest element in the traversal else it will return false. You need to implement this function\n</code></pre>\n\n<h4 id=\"the-binary-search-tree-has-n-nodes-you-need-to-print-the-inorder-traversal-of-the-tree-using-the-iterator\">The binary search tree has \u2018N\u2019 nodes you need to print the inorder traversal of the tree using the iterator.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first and the only line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bsttominheap-6482.jpg\" alt=\"image\"></p>\n\n<pre><code>4\n2 6\n1 3 5 7\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 4\n\nLevel 2 :\nLeft child of 4 = 2\nRight child of 4 = 6\n\nLevel 3 :\nLeft child of 2 = 1\nRight child of 2 = 3\nLeft child of 6 = 5\nRight child of 6 = 7\n\nLevel 4 :\nLeft child of 1 = null (-1)\nRight child of 1 = null (-1)\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree.\n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The single line of output for each test case should contain the inorder traversal of the binary search tree.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^4  \n1 &lt;= A[i] &lt;= 10^9 \n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the number of nodes, and A[i] is the value of a node.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 1 3 -1 -1 -1 -1\n10 5 -1 2 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 3\n2 5 10\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>Test case 1:\nThe tree will look like this :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/t1-7711.png\" alt=\"image\"></p>\n\n<pre><code>The inorder traversal of the tree will be 1, 2, 3.\n\nTest case 2:\nThe tree will look like this:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000449_1621431290_temp.jpg\" alt=\"image\"></p>\n\n<pre><code>The inorder traversal of the tree will be 2, 5, 10.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n6 -1 7 -1 8 -1 -1    \n3 2 4 1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>6 7 8\n1 2 3 4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 28,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a `BSTIterator` class that allows for iterating through the nodes of a Binary Search Tree in inorder fashion. The class should support the following methods:\n\n*   `BSTIterator(TreeNode<int> *root)`: Initializes the iterator with the root of the BST.\n*   `next()`: Returns the next smallest element in the BST.\n*   `hasNext()`: Returns `true` if there is a next smallest element, `false` otherwise.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^4",
                    "1 <= A[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 3, nums = [2, 1, 3], nodes = [2, 1, 3, -1, -1, -1, -1]",
                        "output": "1 2 3",
                        "explanation": "The tree is constructed as follows:\n    2\n   / \\\n  1   3\nThe inorder traversal is 1, 2, 3."
                    },
                    {
                        "input": "n = 3, nums = [10, 5, -1], nodes = [10, 5, -1, 2, -1, -1, -1]",
                        "output": "2 5 10",
                        "explanation": "The tree is constructed as follows:\n     10\n    /\n   5\n  /\n 2\nThe inorder traversal is 2, 5, 10."
                    },
                    {
                        "input": "n = 3, nums = [6, -1, 7], nodes = [6, -1, 7, -1, 8, -1, -1]",
                        "output": "6 7 8",
                        "explanation": "The tree is constructed as follows:\n   6\n    \\\n     7\n      \\\n       8\nThe inorder traversal is 6, 7, 8."
                    },
                    {
                        "input": "n = 4, nums = [3, 2, 4, 1], nodes = [3, 2, 4, 1, -1, -1, -1, -1, -1]",
                        "output": "1 2 3 4",
                        "explanation": "The tree is constructed as follows:\n     3\n   /  \\\n  2   4\n / \n1\nThe inorder traversal is 1, 2, 3, 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Do some preprocessing to store nodes in sorted order</p>",
            "<p>Try thinking inorder traversal in an iterative manner</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}