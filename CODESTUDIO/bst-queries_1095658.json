{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9906,
            "title": "BST queries",
            "titleSlug": "bst-queries_1095658",
            "content": "<h4 id=\"you-are-given-an-arbitrary-binary-search-tree-bst-with-n-nodes-numbered-1-to-n-and-each-node-is-associated-with-a-value-you-are-also-given-q-queries-each-of-the-q-queries-are-of-the-form-l-r-your-task-is-to-find-the-number-of-nodes-in-the-bst-which-lie-in-the-range-l-to-r-for-each-query\">You are given an arbitrary binary search tree (BST) with N nodes numbered 1 to N, and each node is associated with a value. You are also given Q queries, each of the Q queries are of the form [ L, R ], your task is to find the number of nodes in the BST which lie in the range L to R for each query.</h4>\n\n<h5 id=\"for-example\">For example</h5>\n\n<pre><code>You are given the following tree.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-2021-01-19-193442-7575.png\" alt=\"altImage\"></p>\n\n<pre><code>And you are given 3 queries as follows\nQ1 = [ 2 , 12 ]\nQ2 = [ 10 , 50 ]\nQ3 = [ 14 , 20 ] \n\nThen the answers for them will be as follows.\nAnswer for Q1 = 3 i.e. nodes 5, 10 , 12.\nAnswer for Q2 = 6 i.e. nodes 10 , 12 , 15 , 19 , 20 , 28.\nAnswer for Q3 = 3 i.e. nodes 15 , 19 , 20. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>It is guaranteed that the tree given will be a binary search tree.\nIt is guaranteed that all the node values will be distinct.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains a single positive integer T, denoting the number of test cases.\n\nThe first line of each test case contains two positive integers N and Q, denoting the number of nodes in the BST and the number of queries respectively.\n\nThe second line contains the values of the nodes of the tree in the level order form ( 0 for NULL node) Refer to the example for further clarification.\n\nThe next Q lines of each test case contain two positive integers L and R as described in the problem statement.\n</code></pre>\n\n<h4 id=\"example-consider-the-binary-tree\">Example: Consider the binary tree</h4>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-2021-01-19-193559-7576.png\" alt=\"altImage\"></p>\n\n<pre><code>The input of the tree depicted in the image above will be like: \n\n4\n3 6\n1 0 5 7\n0 2 0 0 0 0\n0 0\n\nExplanation :\n    7 is the number of nodes\n    The second line contains the value of nodes from 1 to 7.\n    Then the structure of the tree follows. \nLevel 1 :\n    The root node of the tree is 4\n\nLevel 2 :\n    Left child of 4 = 3\n    Right child of 4 = 6\n\nLevel 3 :\n    Left child of 3 = 1\n    Right child of 3 = null (0)\n    Left child of 6 = 5\n    Right child of 6 = 7\n\nLevel 4 :\n    Left child of 1 = null (0)\n    Right child of 1 = 2\n    Left child of 5 = null (0)\n    Right child of 5 = null (0)\n    Left child of 7 = null (0)\n    Right child of 7 = null (0)\n\nLevel 5 :\n    Left child of 2 = null (0)\n    Right child of 2 = null (0)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (0).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each query print a single integer on a new line, denoting the number of nodes in the tree with a value between L and R.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t have to print anything, it has already been taken care of. Just Implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N, Q &lt;= 3000\n1 &lt;= Value in a node &lt;= 10^9 \n1  &lt;= L &lt;= R &lt;= 10^9\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1      \n6 3\n1 0 2 0 3 0 4 0 5 0 6 0 0\n3 4 \n3 8\n1 6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n4\n6\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>The above test case represents following bst\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-2021-01-19-193722-7577.png\" alt=\"altImage\"></p>\n\n<pre><code>And you are given 3 queries as follows\nQ1 = [ 3 , 4 ]\nQ2 = [ 3 , 8 ]\nQ3 = [ 1 , 6 ] \nThen the answers for them will be as follows.\nAnswer for Q1 = 2 i.e, nodes 3 , 4.\nAnswer for Q2 = 4 i.e, nodes 3 , 4 , 5 , 6.\nAnswer for Q3 = 6 i.e, nodes 1 , 2 , 3 , 4 , 5 , 6. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n7 3\n19 10 20 5 15 0 28 0 0 12 0 0 0 0 0\n2 12\n10 50\n14 20\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3 \n6 \n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 32,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an arbitrary binary search tree (BST) with N nodes (numbered 1 to N, and each node has a distinct value), and Q queries, determine the number of nodes within the BST that fall within the specified range [L, R] for each query. The BST is constructed using a level-order representation where '0' denotes a NULL node.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N, Q <= 3000",
                    "1 <= Value in a node <= 10^9",
                    "1 <= L <= R <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 6, nums=[1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 0], q = 3, queries=[(3, 4), (3, 8), (1, 6)]",
                        "output": "2\n4\n6",
                        "explanation": "The BST is 1->2->3->4->5->6. Q1 = [3, 4] has 2 nodes (3, 4). Q2 = [3, 8] has 4 nodes (3, 4, 5, 6). Q3 = [1, 6] has 6 nodes (1, 2, 3, 4, 5, 6)."
                    },
                    {
                        "input": "n = 7, nums=[19, 10, 20, 5, 15, 0, 28, 0, 0, 12, 0, 0, 0, 0, 0], q = 3, queries=[(2, 12), (10, 50), (14, 20)]",
                        "output": "3\n6\n3",
                        "explanation": "The BST is as depicted in the original problem statement. Q1 = [2, 12] has 3 nodes (5, 10, 12). Q2 = [10, 50] has 6 nodes (10, 12, 15, 19, 20, 28). Q3 = [14, 20] has 3 nodes (15, 19, 20)."
                    },
                    {
                        "input": "n = 3, nums=[2, 1, 3, 0, 0, 0, 0], q = 2, queries=[(1, 2), (2, 3)]",
                        "output": "2\n2",
                        "explanation": "The BST has root 2, left child 1, right child 3. Q1 = [1, 2] has 2 nodes (1, 2). Q2 = [2, 3] has 2 nodes (2, 3)."
                    },
                    {
                        "input": "n = 5, nums=[5,3,7,2,4,6,8,0,0,0,0,0,0,0,0], q = 1, queries=[(4, 6)]",
                        "output": "3",
                        "explanation": "The BST is 5, left: 3, right: 7, left of 3: 2, right of 3: 4, left of 7: 6, right of 7: 8.  Query (4,6) results in nodes 4, 5, 6 being in the range so output is 3"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Preorder Traversal</p>",
            "<p>Binary search</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}