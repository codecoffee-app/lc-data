{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10317,
            "title": "BST Sequences",
            "titleSlug": "bst-sequences_1214548",
            "content": "<h4 id=\"you-are-given-a-binary-search-tree-consisting-of-distinct-elements-the-binary-search-tree-is-created-by-traversing-through-the-sequence-from-left-to-right-and-inserting-each-element-you-need-to-print-all-the-sequences-or-ways-that-would-result-in-creating-the-given-bst\">You are given a binary search tree consisting of distinct elements. The binary search tree is created by traversing through the sequence from left to right and inserting each element. You need to print all the sequences or ways that would result in creating the given BST.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Keep in mind that while merging the sequences the relative order of elements should be preserved.\n</code></pre>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>For the given binary search tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst-sequences-8069.png\" alt=\"Example\"></p>\n\n<pre><code>The valid BST sequences for the above BST are:\n4 2 1 3 5 6 \n4 2 1 5 3 6 \n4 2 1 5 6 3 \n4 2 3 1 5 6 \n4 2 3 5 1 6 \n4 2 3 5 6 1 \n4 2 5 1 3 6 \n4 2 5 1 6 3 \n4 2 5 3 1 6 \n4 2 5 3 6 1 \n4 2 5 6 1 3 \n4 2 5 6 3 1 \n4 5 2 1 3 6 \n4 5 2 1 6 3 \n4 5 2 3 1 6 \n4 5 2 3 6 1 \n4 5 2 6 1 3 \n4 5 2 6 3 1 \n4 5 6 2 1 3 \n4 5 6 2 3 1 \n\n\nYou need to print all of them.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases are as follows.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst-sequences-1-8068.png\" alt=\"Example\"></p>\n\n<pre><code>Input Format:   \n5\n4 7\n2 -1 6 8\n-1 3 -1 -1 -1 -1\n-1 -1\n\n\n Explanation :\n Level 1 :\n The root node of the tree is 5\n\nLevel 2 :\nLeft child of 5 = 4\nRight child of 5 = 7\n\nLevel 3 :\nLeft child of 4 = 2\nRight child of 4 = null (-1)\nLeft child of 7 = 6\nRight child of 7 = 8\n\nLevel 4 :\nLeft child of 2 = null (-1)\nRight child of 2 = 3\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\nLeft child of 8 = null (-1)\nRight child of 8 = null (-1)\n\nLevel 5 :\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n5 4 7 2 -1 6 8 -1 3 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print all the valid BST sequences of the given Binary Search Tree in a separate line.\n\nPrint the output of each test case in sorted order.\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. You just need to store all valid sequences of the given BST in a predefined data structure. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n0 &lt;= N &lt;= 10\n1 &lt;= data &lt;= 10^4\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n4 2 5 1 3 -1 6 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4 2 1 3 5 6 \n4 2 1 5 3 6 \n4 2 1 5 6 3 \n4 2 3 1 5 6 \n4 2 3 5 1 6 \n4 2 3 5 6 1 \n4 2 5 1 3 6 \n4 2 5 1 6 3 \n4 2 5 3 1 6 \n4 2 5 3 6 1 \n4 2 5 6 1 3 \n4 2 5 6 3 1 \n4 5 2 1 3 6 \n4 5 2 1 6 3 \n4 5 2 3 1 6 \n4 5 2 3 6 1 \n4 5 2 6 1 3 \n4 5 2 6 3 1 \n4 5 6 2 1 3 \n4 5 6 2 3 1   \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>The binary search tree will look like this:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst-sequences-2-8067.png\" alt=\"Example\"></p>\n\n<pre><code>In the above Binary Search Tree, all the valid sequences are:\n\n4 2 1 3 5 6  \n4 2 1 5 3 6  \n4 2 1 5 6 3   \n4 2 5 1 3 6 \n4 2 5 1 6 3  \n4 2 5 6 1 3  \n4 5 2 1 3 6  \n4 5 2 1 6 3  \n4 5 2 6 1 3  \n4 5 6 2 1 3  \n4 2 3 1 5 6  \n4 2 3 5 1 6 \n4 2 3 5 6 1 \n4 2 5 3 1 6 \n4 2 5 3 6 1 \n4 2 5 6 3 1 \n4 5 2 3 1 6 \n4 5 2 3 6 1 \n4 5 2 6 3 1 \n4 5 6 2 3 1  \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2 1 3 -1 -1 -1 -1\n7 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2 1 3\n2 3 1\n7\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary search tree (BST) where each node contains a distinct integer value, reconstruct all possible sequences of insertions that could have resulted in the creation of the given BST. The BST is built by inserting elements from a sequence from left to right. The task is to generate all such valid sequences. While merging sequences from the left and right subtrees, ensure the relative order of elements within each subtree's sequence is preserved.",
                "constraints": [
                    "1 <= T <= 10",
                    "0 <= N <= 10",
                    "1 <= data <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "root = {4, 2, 5, 1, 3, -1, 6, -1, -1, -1, -1, -1, -1}, where -1 represents null nodes in level order",
                        "output": "[[4, 2, 1, 3, 5, 6], [4, 2, 1, 5, 3, 6], [4, 2, 1, 5, 6, 3], [4, 2, 3, 1, 5, 6], [4, 2, 3, 5, 1, 6], [4, 2, 3, 5, 6, 1], [4, 2, 5, 1, 3, 6], [4, 2, 5, 1, 6, 3], [4, 2, 5, 3, 1, 6], [4, 2, 5, 3, 6, 1], [4, 2, 5, 6, 1, 3], [4, 2, 5, 6, 3, 1], [4, 5, 2, 1, 3, 6], [4, 5, 2, 1, 6, 3], [4, 5, 2, 3, 1, 6], [4, 5, 2, 3, 6, 1], [4, 5, 2, 6, 1, 3], [4, 5, 2, 6, 3, 1], [4, 5, 6, 2, 1, 3], [4, 5, 6, 2, 3, 1]]",
                        "explanation": "The provided input represents a BST. The output lists all possible insertion sequences that could have created the BST, maintaining the relative order of left and right subtree elements during merging."
                    },
                    {
                        "input": "root = {2, 1, 3, -1, -1, -1, -1}, where -1 represents null nodes in level order",
                        "output": "[[2, 1, 3], [2, 3, 1]]",
                        "explanation": "This test case presents a smaller BST. The two possible insertion sequences are [2, 1, 3] and [2, 3, 1]."
                    },
                    {
                        "input": "root = {7, -1, -1}, where -1 represents null nodes in level order",
                        "output": "[[7]]",
                        "explanation": "A single node BST has only one possible insertion sequence, which is just the node's value itself."
                    },
                    {
                        "input": "root = {1}, where 1 is root node with no children",
                        "output": "[[1]]",
                        "explanation": "BST with only root node is trivial case."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about using recursion?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}