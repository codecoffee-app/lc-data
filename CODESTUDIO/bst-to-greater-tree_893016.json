{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8539,
            "title": " BST to greater tree",
            "titleSlug": "bst-to-greater-tree_893016",
            "content": "<h4 id=\"given-a-binary-search-tree-of-integers-with-n-number-of-nodes-your-task-is-to-convert-it-to-a-greater-tree\">Given a binary search tree of integers with N number of nodes. Your task is to convert it to a Greater Tree.</h4>\n\n<h4 id=\"a-greater-tree-is-formed-when-data-of-every-node-of-the-original-bst-is-changed-to-the-original-node-s-data-plus-the-sum-of-all-node-s-data-greater-than-or-equal-to-it\">A Greater Tree is formed when data of every node of the original BST is changed to the original node\u2019s data plus the sum of all node\u2019s data greater than or equal to it.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-which-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure which has the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<h4 id=\"input\">Input:</h4>\n\n<p><img src=\"https://files.codingninjas.in/greater1-5405.png\" alt=\"Example\"></p>\n\n<h4 id=\"output\">Output:</h4>\n\n<pre><code>Because only 5 is greater than 4 in the above BST, node 4 will be updated to 9 (4 + 5 = 9).\nNodes 3, 4, and 5 are greater than 2, hence node 2 will be modified to 14 (2 + 3 + 4 + 5 = 14). \nNode with data 5 will remain the same because there is no node in the BST with data greater than 5.\nNodes 2,3, 4, and 5 are greater than 1, hence node 1 will be modified to 15 (1 + 2 + 3 + 4 + 5 = 15).   \nNodes 4 and 5 are greater than 3, hence node 3 will be modified to 12 (3 + 4 + 5 = 12). \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe only line of each test case contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n\nNote :\nThe above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the level order traversal of the Greater Tree with node values separated by a single space. Print -1 for NULL nodes. \n\nOutput for every test case will be denoted in a separate line.\n\nNote: \nYou are not required to print anything explicitly. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n0 &lt;= data &lt;= 10^6\nwhere N is the number of nodes in the tree, T represents the number of test cases and data denotes data contained in the node of the binary tree.\n\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 1 5 -1 2 -1 -1 -1 -1\n9 6 10 4 7 -1 11 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code> 8 11 5 -1 10 -1 -1  -1 -1 \n 30 43 21 47 37 -1 11 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input1\">Explanation of the Sample Input1:</h5>\n\n<pre><code>Here we have 2 test cases, hence there are 2 binary trees.\n\nTest Case 1: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst1-2-5406.png\" alt=\"Test case 1\"></p>\n\n<pre><code>Node 5 is greater than node 3, hence node 3 modifies to 8 (5 + 3 = 8).\n\nNodes 2,3 and 5 are greater than node 1, hence node 1 modifies to 10 (1 + 5 + 3 + 2 = 11).\n\nNo node is greater than node 5, hence node 5 remains unchanged.\n\nNodes 3 and 5 are greater than node 2, hence node 2 modifies to 10 (5 + 3 + 2 = 10).\n\n\n\n\nTest Case 2:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst1-1-5407.png\" alt=\"Test case 2\"></p>\n\n<pre><code>Nodes 10 and 11 are greater than node 9, hence node 9 modifies to 30 (10 + 11 + 9 = 30).\n\nNodes 7,9,11 and 10 are greater than node 6, hence node 6 modifies to 43 (7 + 9 + 11 + 10 + 6 = 43).\n\nNode 11 is greater than node 10, hence node 10 modifies to 21 (10 + 11 = 21).\n\nNodes 6,7,9,11 and 10 are greater than node 4, hence node 4 modifies to 47 (7 + 9 + 11 + 10 + 6 + 4 = 47).\n\nNodes 9,10 and 11 are greater than node 7, hence node 7 modifies to 37 (10 + 11 + 9 + 7 = 37).\n\nNo node is greater than node 11, hence node 11 remains unchanged.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a Binary Search Tree (BST) containing integer values, modify the tree such that the value of each node is replaced with the sum of all nodes greater than or equal to the original node's value. Return the root of the modified Greater Tree.",
                "constraints": [
                    "1 <= N <= 5000, where N is the number of nodes in the tree.",
                    "0 <= data <= 10^6, where data denotes the data contained in the node of the binary tree.",
                    "1 <= T <= 100, where T represents the number of test cases."
                ],
                "testcases": [
                    {
                        "input": "root = [3,1,5,-1,2,-1,-1,-1,-1]",
                        "output": "level order: 8 11 5 -1 10 -1 -1  -1 -1",
                        "explanation": "Initially: [3, 1, 5, null, 2].\nGreater Tree: [8, 11, 5, null, 10].\n- Node 3 becomes 8 (3 + 5).\n- Node 1 becomes 11 (1 + 2 + 3 + 5).\n- Node 5 remains 5.\n- Node 2 becomes 10 (2 + 3 + 5)."
                    },
                    {
                        "input": "root = [9,6,10,4,7,-1,11,-1,-1,-1,-1,-1,-1]",
                        "output": "level order: 30 43 21 47 37 -1 11 -1 -1 -1 -1 -1 -1",
                        "explanation": "Initially: [9, 6, 10, 4, 7, null, 11].\nGreater Tree: [30, 43, 21, 47, 37, null, 11].\n- Node 9 becomes 30 (9 + 10 + 11).\n- Node 6 becomes 43 (6 + 7 + 9 + 10 + 11).\n- Node 10 becomes 21 (10 + 11).\n- Node 4 becomes 47 (4 + 6 + 7 + 9 + 10 + 11).\n- Node 7 becomes 37 (7 + 9 + 10 + 11).\n- Node 11 remains 11."
                    },
                    {
                        "input": "root = [0]",
                        "output": "level order: 0",
                        "explanation": "Single node tree. Node value remains unchanged."
                    },
                    {
                        "input": "root = [1,0,2]",
                        "output": "level order: 3 3 2",
                        "explanation": "1 becomes 3(1+2), 0 becomes 3(0+1+2), 2 becomes 2"
                    },
                    {
                        "input": "root = [4,1,6,0,2,5,7,-1,-1,-1,3,-1,-1,-1,8]",
                        "output": "level order: 26 34 13 34 31 18 6 -1 -1 -1 33 -1 -1 -1 8",
                        "explanation": "Complex case with multiple levels"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of naively updating one element/node at a time.</p>",
            "<p>Can we use inorder traversal?</p>",
            "<p>Can we use the stack for inorder traversal?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}