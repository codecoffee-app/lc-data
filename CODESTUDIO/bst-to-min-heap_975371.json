{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9100,
            "title": "BST TO Min Heap",
            "titleSlug": "bst-to-min-heap_975371",
            "content": "<h4 id=\"you-are-given-a-binary-search-tree-which-is-also-a-complete-binary-tree-you-have-to-convert-the-given-bst-into-a-min-heap-with-the-condition-that-all-the-values-in-the-left-subtree-of-a-node-should-be-less-than-all-the-values-in-the-right-subtree-of-the-node\">You are given a binary search tree which is also a complete binary tree. You have to convert the given BST into a Min Heap with the condition that all the values in the left subtree of a node should be less than all the values in the right subtree of the node.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-which-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure which has the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h4 id=\"a-binary-tree-is-a-complete-binary-tree-if-all-the-levels-are-completely-filled-except-possibly-the-last-level-and-the-last-level-has-all-keys-as-left-as-possible\">A Binary Tree is a Complete Binary Tree if all the levels are completely filled except possibly the last level and the last level has all keys as left as possible.</h4>\n\n<h4 id=\"a-min-heap-is-a-binary-tree-in-which-the-value-in-each-internal-node-is-smaller-than-or-equal-to-the-values-in-the-children-of-that-node-in-this-problem-there-is-also-a-condition-that-all-the-values-in-the-left-subtree-of-a-node-should-be-less-than-all-the-values-in-the-right-subtree-of-the-node\">A Min Heap is a binary tree in which the value in each internal node is smaller than or equal to the values in the children of that node. In this problem, there is also a condition that all the values in the left subtree of a node should be less than all the values in the right subtree of the node.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, just return the root of the Min Heap\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases. Then the test cases follow.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bsttominheap-6482.jpg\" alt=\"image\"></p>\n\n<pre><code>4\n2 6\n1 3 5 7\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 4\n\nLevel 2 :\nLeft child of 4 = 2\nRight child of 4 = 6\n\nLevel 3 :\nLeft child of 2 = 1\nRight child of 2 = 3\nLeft child of 6 = 5\nRight child of 6 = 7\n\nLevel 4 :\nLeft child of 1 = null (-1)\nRight child of 1 = null (-1)\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the Min Heap in the level order form.\n\nThe output for each test case is in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 5 * 10^4\n-10^9 &lt;= data &lt;= 10^9 and data != -1\n\nWhere N is the number of nodes in the tree.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 5 3 4 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/sample-6483.jpg\" alt=\"sample\"></p>\n\n<pre><code>The level order traversal of the heap is 1 2 5 3 4 6 7 -1 -1 -1 -1 -1 -1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n1 0 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0 1 -1 -1 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a complete binary search tree (BST), transform it into a min-heap while preserving the property that all values in the left subtree of any node are less than all values in its right subtree. You are provided with the root of the BST. Modify the existing tree structure in-place and return the root of the transformed min-heap. The input BST is guaranteed to satisfy the properties of a complete binary tree and a binary search tree.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 5 * 10^4",
                    "-10^9 <= data <= 10^9 and data != -1 (where N is the number of nodes in the tree and data is the node value)"
                ],
                "testcases": [
                    {
                        "input": "n = 7, nums = [4, 2, 6, 1, 3, 5, 7]",
                        "output": "1 2 5 3 4 6 7 -1 -1 -1 -1 -1 -1 -1 -1",
                        "explanation": "The given BST is transformed into a min-heap where the root is 1, followed by its children 2 and 5, and so on, maintaining the left subtree < right subtree property. The level order traversal is: 1 2 5 3 4 6 7. -1's denote null nodes when representing the complete binary tree in a level order manner."
                    },
                    {
                        "input": "n = 2, nums = [1, 0]",
                        "output": "0 1 -1 -1",
                        "explanation": "The BST with root 1 and left child 0 is transformed into a min-heap with root 0 and right child 1. The level order traversal representation is: 0 1 -1 -1."
                    },
                    {
                        "input": "n = 3, nums = [2,1,3]",
                        "output": "1 2 3 -1 -1 -1 -1",
                        "explanation": "The BST [2,1,3] becomes Min Heap [1,2,3].  The level order traversal is 1 2 3 -1 -1 -1 -1. The constraint of left subtree values being smaller than right subtree values is maintained."
                    },
                    {
                        "input": "n = 5, nums = [5, 1, 8, 0, 2]",
                        "output": "0 1 5 2 8 -1 -1 -1 -1 -1 -1 -1 -1",
                        "explanation": "The input BST is [5,1,8,0,2]. After converting it to a min-heap, the tree structure becomes [0, 1, 5, 2, 8]. The level order traversal of the min-heap is 0 1 5 2 8, and the null children are represented as -1."
                    },
                    {
                        "input": "n = 1, nums = [10]",
                        "output": "10 -1 -1",
                        "explanation": "A single node BST with value 10 is already a valid min-heap (trivially). The level order traversal of the min-heap is 10, with left and right children as null represented as -1's."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Change the node value of BST such that it becomes Min heap.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}