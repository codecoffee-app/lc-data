{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10728,
            "title": "BST to sorted DLL",
            "titleSlug": "bst-to-sorted-dll_1263694",
            "content": "<h4 id=\"you-are-provided-with-a-binary-search-tree-bst-all-you-have-to-do-is-to-convert-it-into-the-sorted-doubly-linked-list-dll\">You are provided with a Binary Search Tree (BST), all you have to do is to convert it into the sorted doubly linked list (DLL).</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<p><img src=\"https://files.codingninjas.in/bst-to-sorted-dll-8347.png\" alt=\"Example\"></p>\n\n<h4 id=\"consider-the-above-bst-it-will-be-converted-into-the-below-sorted-dll\">Consider the above BST, it will be converted into the below sorted DLL.</h4>\n\n<p><img src=\"https://files.codingninjas.in/bst-to-sorted-dll-2-8348.png\" alt=\"Example\"></p>\n\n<h4 id=\"here-20-is-the-head-node-and-80-is-the-tail-node\">Here, 20 is the head node and 80 is the tail node.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space according to the Binary Search tree. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the elements of the sorted doubly linked list in the space-separated form.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow up:</h5>\n\n<pre><code>Try to do the problem in order O(N) time complexity or less for getting the solution accepted.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n0 &lt;= N &lt;= 10^4\n-10^5 &lt;= DATA &lt;= 10^5\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n50 30 70 20 40 60 80 -1 -1 -1 -1 -1 -1 -1 -1\n-1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>20 30 40 50 60 70 80 -1\n-1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>For the first test case, the explanation is given in the description. -1 represents the end of DLL.\n\nIn the second test case, there is no node in BST and so, there is also no node in DLL.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n0 -2 -1 -3 -1 -1 -1\n1 -1 2 -1 3 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-3 -2 0 -1\n1 2 3 -1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2:</h5>\n\n<pre><code>In the first test case, the sorted DLL formed is [-3, -2, 0].\n\nIn the second test case, the sorted DLL formed is [1, 2, 3].\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 24,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST), convert it into a sorted Doubly Linked List (DLL). The DLL should maintain the sorted order of the BST's nodes.",
                "constraints": [
                    "1 <= T <= 10",
                    "0 <= N <= 10^4, where N is the number of nodes in the BST",
                    "-10^5 <= DATA <= 10^5, where DATA is the value of a node",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "50 30 70 20 40 60 80 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "20 30 40 50 60 70 80 -1",
                        "explanation": "The BST is constructed from the input. An in-order traversal provides the sorted order: 20, 30, 40, 50, 60, 70, 80. This sorted order becomes the DLL. -1 marks the end of the DLL."
                    },
                    {
                        "input": "-1",
                        "output": "-1",
                        "explanation": "An empty BST results in an empty DLL, represented by -1."
                    },
                    {
                        "input": "0 -2 -1 -3 -1 -1 -1",
                        "output": "-3 -2 0 -1",
                        "explanation": "The BST formed is: 0, left: -2, left of -2: -3. The in-order traversal is -3, -2, 0. The sorted DLL is therefore -3, -2, 0. -1 represents end of DLL."
                    },
                    {
                        "input": "1 -1 2 -1 3 -1 -1",
                        "output": "1 2 3 -1",
                        "explanation": "The BST formed is 1, right: 2, right of 2: 3. The in-order traversal is 1, 2, 3. The sorted DLL is therefore 1, 2, 3. -1 represents end of DLL."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of going through each node using the Inorder tree traversal?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}