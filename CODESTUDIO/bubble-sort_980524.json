{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9187,
            "title": "Bubble Sort",
            "titleSlug": "bubble-sort_980524",
            "content": "<h4 id=\"bubble-sort-is-one-of-the-sorting-algorithms-that-works-by-repeatedly-swapping-the-adjacent-elements-of-the-array-if-they-are-not-in-sorted-order\">Bubble Sort is one of the sorting algorithms that works by repeatedly swapping the adjacent elements of the array if they are not in sorted order.</h4>\n\n<h4 id=\"you-are-given-an-unsorted-array-consisting-of-n-non-negative-integers-your-task-is-to-sort-the-array-in-non-decreasing-order-using-the-bubble-sort-algorithm\">You are given an unsorted array consisting of N non-negative integers. Your task is to sort the array in non-decreasing order using the Bubble Sort algorithm.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>Bubble Sort implementation for the given array:  {6,2,8,4,10} is shown below :-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture-6583.JPG\" alt=\"Alt test\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\nThen the test case follows.\n\nThe first line of each test case contains integer N denoting the size of the array.\n\nThe second line of each test case contains &#39;N&#39; space-separated integers representing the array elements\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output of each test case should print the sorted array in increasing order.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. Also, you need to update the given array in place only.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 100\n1 &lt;= Arr[i] &lt;= 1000\n\nWhere &#39;T&#39; represents the number of test cases, &#39;N&#39; represents the size of the array, and Arr[i] represents the elements of the array.\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n5\n6 2 8 4 10\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 4 6 8 10\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2\n1 2\n4\n4 3 2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 2\n1 2 3 4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 168,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement the Bubble Sort algorithm to sort an array of non-negative integers in non-decreasing order. You are given an unsorted array and its size. Your task is to modify the array in-place such that it becomes sorted using Bubble Sort.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 100",
                    "1 <= Arr[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "n = 5, arr=[6, 2, 8, 4, 10]",
                        "output": "2 4 6 8 10",
                        "explanation": "The array {6, 2, 8, 4, 10} is sorted using Bubble Sort, resulting in {2, 4, 6, 8, 10}."
                    },
                    {
                        "input": "n = 2, arr=[1, 2]",
                        "output": "1 2",
                        "explanation": "The array {1, 2} is already sorted, so the output remains {1, 2}."
                    },
                    {
                        "input": "n = 4, arr=[4, 3, 2, 1]",
                        "output": "1 2 3 4",
                        "explanation": "The array {4, 3, 2, 1} is sorted in ascending order using Bubble Sort, resulting in {1, 2, 3, 4}."
                    },
                    {
                        "input": "n = 3, arr=[5, 1, 4]",
                        "output": "1 4 5",
                        "explanation": "The array {5, 1, 4} is sorted using Bubble Sort, resulting in {1, 4, 5}."
                    },
                    {
                        "input": "n = 1, arr=[7]",
                        "output": "7",
                        "explanation": "An array with a single element is already sorted."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the Bubble Sort Algorithm.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity : O(N^2)\n    Space Complexity : O(1)\n    \n    Where N is the length of the given array.\n*/\n\n// This function is used to swap two elements of the array.\nvoid swap(int *first, int *second)\n{\n    int temp = *first;\n    *first = *second;\n    *second = temp;\n}\n\nvoid bubbleSort(vector<int>& arr, int n)\n{   \n    // This is used to skip extra iterations in case of sorted array.\n    bool flag;\n\n    for (int i = 0; i < n - 1; i++)\n    {\n        flag = false;\n        for (int j = 0; j < n - i - 1; j++)\n        {   \n            // If the adjacent element is not sorted, swap the elements.\n            if (arr[j] > arr[j + 1])\n            {\n                swap(&arr[j], &arr[j + 1]);\n                flag = true;\n            }\n        }\n        \n        // If the array is already sorted, break from the current loop iteration.\n        if (flag == false) {\n            break;\n        }\n    }\n\n    return;\n}\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity : O(N^2)\n    Space Complexity : O(1)\n\n    Where N is the length of the given array.\n*/\n\npublic class Solution {\n\n\tpublic static void bubbleSort(int[] arr, int n) {\n\n\t\t// This is used to skip extra iterations in case of sorted array.\n\t\tboolean flag;\n\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tflag = false;\n\n\t\t\tfor (int j = 0; j < n - i - 1; j++) { \n\n                // If the adjacent element is not sorted, swap the elements.\n\t\t\t\tif (arr[j] > arr[j + 1]) {\n\t\t\t\t\t\n\t\t\t\t\tint temp = arr[j];\n\t\t\t\t\tarr[j] = arr[j + 1];\n\t\t\t\t\tarr[j + 1] = temp;\n\t\t\t\t\t\n\t\t\t\t\tflag = true;\n\t\t\t\t}\n\t\t\t}\n            \n\t\t\t// If the array is already sorted, break from the current loop iteration.\n\t\t\tif (flag == false) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn;\n\t}\n\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity : O(N^2)\n    Space Complexity : O(1)\n\n    Where N is the length of the given array.\n'''\n\ndef bubbleSort(arr, n):\n\n    for i in range(n - 1):\n        flag = False\n\n        for j in range(n - i - 1):\n            if arr[j] > arr[j + 1]:\n                \n                # Swap adjacent elements.\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                flag = True\n\n        # If array already sorted, break.\n        if flag is False:\n            break\n\n    return\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}