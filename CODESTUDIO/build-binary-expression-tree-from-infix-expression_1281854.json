{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10998,
            "title": "Build Binary Expression Tree From Infix Expression",
            "titleSlug": "build-binary-expression-tree-from-infix-expression_1281854",
            "content": "<h4 id=\"you-are-given-a-string-s-an-infix-expression-that-has-operands-operators-and-parentheses-and\">You are given a string \u2018S\u2019, an infix expression that has operands, operators and parentheses \u2018(\u2018 and \u2018)\u2019.</h4>\n\n<h4 id=\"you-need-to-return-the-binary-expression-tree-whose-inorder-traversal-is-the-same-as-s\">You need to return the binary expression tree, whose inorder traversal is the same as \u2018S\u2019.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Infix expression: The expression of the form \u2018a operator b\u2019. When an operator is in-between every pair of operands.\nThe expression tree is a binary tree in which each internal node corresponds to the operator and each leaf node corresponds to the operand so for example expression tree for 5 * ( 6 - 3 ) / 2 - 8 would be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2021-03-27-20-34-15-8658.png\" alt=\"\"></p>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains a string S representing infix expression.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the binary expression tree, whose inorder traversal is the same as &#39;S&#39;. \n\nReturn -1 instead of NULL.\n\nThe output for each test case is printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 5000\nOperands are only numbers between 0 and 9 (included).\nIt is guaranteed that \u2018S\u2019 is a valid infix expression.\n\nTime limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n5*(9-4)/7+6\n5*7-8/6\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>[+, /, 6, *, 7, -1, -1, 5, -, -1, -1, -1, -1, 9, 4, -1, -1, -1, -1]\n[-, *, /, 5, 7, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1]    \n</code></pre>\n\n<h4 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h4>\n\n<pre><code>Test Case 1: The expression tree for the given infix expression will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2021-03-27-20-34-23-8657.png\" alt=\"\"></p>\n\n<pre><code>Test Case 2:  The expression tree for the given infix expression will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2021-03-27-20-34-31-8656.png\" alt=\"\"></p>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n7*6/4-2+4\n7+(5/9)-6    \n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>[+, -, 4, /, 2, -1, -1, *, 4, -1, -1, 7, 6, -1, -1, -1, -1, -1, -1]\n[-, +, 6, 7, /, -1, -1, -1, -1, 5, 9, -1, -1, -1, -1]    \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S' representing an infix expression containing operands (numbers 0-9), operators (+, -, *, /), and parentheses '(', ')', construct a binary expression tree whose inorder traversal matches 'S'. The expression tree should have operators as internal nodes and operands as leaf nodes.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 5000 (where N is the length of the infix expression S)",
                    "Operands are single-digit numbers between 0 and 9 (inclusive).",
                    "It is guaranteed that \u2018S\u2019 is a valid infix expression.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5*(9-4)/7+6",
                        "output": "[+, /, 6, *, 7, -1, -1, 5, -, -1, -1, -1, -1, 9, 4, -1, -1, -1, -1]",
                        "explanation": "The expression tree for '5*(9-4)/7+6' has '+' as the root. Its left child is '/', and right child is '6'. The left child of '/' is '*' and right child is '7'. The left child of '*' is '5' and right child is '-'. The left child of '-' is '9', and right child is '4'."
                    },
                    {
                        "input": "5*7-8/6",
                        "output": "[-, *, /, 5, 7, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "explanation": "The expression tree for '5*7-8/6' has '-' as the root. Its left child is '*' and right child is '/'. The left child of '*' is '5', and the right child is '7'. The left child of '/' is '8' and the right child is '6'."
                    },
                    {
                        "input": "7*6/4-2+4",
                        "output": "[+, -, 4, /, 2, -1, -1, *, 4, -1, -1, 7, 6, -1, -1, -1, -1, -1, -1]",
                        "explanation": "The expression tree for '7*6/4-2+4' has '+' as the root. Its left child is '-' and right child is '4'. The left child of '-' is '/' and the right child is '2'. The left child of '/' is '*' and the right child is '4'. The left child of '*' is '7' and the right child is '6'."
                    },
                    {
                        "input": "7+(5/9)-6",
                        "output": "[-, +, 6, 7, /, -1, -1, -1, -1, 5, 9, -1, -1, -1, -1]",
                        "explanation": "The expression tree for '7+(5/9)-6' has '-' as the root. The left child is '+' and the right child is '6'. The left child of '+' is '7' and the right child is '/'. The left child of '/' is '5' and the right child is '9'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use stacks to store the nodes.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}