{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16441,
            "title": "Build Electric Poles",
            "titleSlug": "build-electric-poles_3153014",
            "content": "<h4 id=\"there-are-n-plots-on-each-side-of-a-road-the-plots-on-each-side-are-arranged-in-a-row-you-have-to-find-the-number-of-ways-in-which-you-can-build-electric-poles-there-is-no-limit-on-the-number-of-poles-that-you-build-that-is-you-can-even-build-zero-poles-but-you-must-take-care-that-the-electric-poles-are-not-built-on-the-adjacent-plots\">There are \u2018N\u2019 plots on each side of a road, the plots on each side are arranged in a row. You have to find the <strong>number of ways</strong> in which you can build electric poles, there is no limit on the number of poles that you build, that is: you can even build zero poles, but you must take care that the electric poles are not built on the adjacent plots.</h4>\n\n<h4 id=\"as-the-answer-can-be-large-print-its-value-modulo-10-9-7\">As the answer can be large, print its value <strong>modulo 10^9 + 7</strong>.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If \u2018N\u2019 = 4\n\nIf \u201c| |\u201d represents the road, \u201c#\u201d represents an empty plot, and \u201c^\u201d represents an electric pole.\n\nThen the following arrangements are valid:\n1) # # # # | | # # # #\n2) # # # ^ | | ^ # # #\n3) ^ # ^ # | | # ^ # ^\n4) ^ # # ^ | | ^ # # ^\nIn total, there are 64 valid ways to build electric poles.\n\nNote that an arrangement like this:  # # ^ ^ | | # # # #  is invalid as it contains two electric poles that are adjacent to each other.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up :</h5>\n\n<pre><code>Can you try to solve this problem in O(N) time and O(1) space?\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains a single integer \u2018N\u2019, denoting the number of plots on each side of the road.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the number of ways in which we can build the electric poles.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 T \u2264 10      \n1 \u2264 N \u2264 10000\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4\n2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>64\n9\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For test case 1 :\nWe will print 64 because:\nThere are 64 possible arrangements to build the electric poles when we have four plots on each side of the road.\n\nFor test case 2 : \nWe will print 9 because:\nThere are 9 possible arrangements to build the electric poles when we have four plots on each side of the road.\nIf \u201c| |\u201d represents the road, \u201c#\u201d represents an empty plot, and \u201c^\u201d represents an electric pole. Then all the possible arrangements are:\n1) # # | | # #\n2) # # | | # ^\n3) # ^ | | # ^\n4) ^ # | | # ^\n5) # # | | ^ #\n6) # ^ | | ^ #\n7) ^ # | | ^ #\n8) # ^ | | # #\n9) ^ # | | # #\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n10\n100\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>20736\n20522904\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'N' plots on each side of a road, arranged in a row, determine the number of ways to build electric poles such that no two poles are adjacent. You can build zero or more poles. Return the result modulo 10^9 + 7.",
                "constraints": [
                    "1 \u2264 T \u2264 10",
                    "1 \u2264 N \u2264 10000",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 4",
                        "output": "64",
                        "explanation": "With N=4, there are 64 possible valid arrangements of electric poles on both sides of the road, ensuring no adjacent poles."
                    },
                    {
                        "input": "n = 2",
                        "output": "9",
                        "explanation": "With N=2, there are 9 possible valid arrangements of electric poles, adhering to the no-adjacent-poles rule."
                    },
                    {
                        "input": "n = 10",
                        "output": "20736",
                        "explanation": "For N=10, the number of valid arrangements, calculated modulo 10^9 + 7, is 20736."
                    },
                    {
                        "input": "n = 100",
                        "output": "20522904",
                        "explanation": "For N=100, the number of valid arrangements, calculated modulo 10^9 + 7, is 20522904."
                    },
                    {
                        "input": "n = 1",
                        "output": "4",
                        "explanation": "For N=1, the number of ways to arrange are 4. They are both sides with no poles, one side with pole one side with no pole or vice versa, and both sides with a pole. "
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find some symmetry and think of a brute force recursive approach.</p>",
            "<p>Search for some symmetry and then try to think of a DP state(s) and further use some DP transitions to calculate the answer.</p>",
            "<p>Try to think of some dp states, can you optimize it further so that constant space is needed?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}