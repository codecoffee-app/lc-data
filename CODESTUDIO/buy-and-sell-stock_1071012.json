{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9645,
            "title": "Buy and Sell Stock",
            "titleSlug": "buy-and-sell-stock_1071012",
            "content": "<h4 id=\"you-are-harshad-mehta-s-friend-he-told-you-the-price-of-a-particular-stock-for-the-next-n-days\">You are Harshad Mehta\u2019s friend. He told you the price of a particular stock for the next <em><strong>\u2018n\u2019</strong></em> days.</h4>\n\n<p><br></p>\n\n<h4 id=\"you-are-given-an-array-prices-which-such-that-prices-i-denotes-the-price-of-the-stock-on-the-ith-day\">You are given an array <em><strong>\u2018prices\u2019</strong></em> which such that \u2018prices[i]\u2019 denotes the price of the stock on the ith day.</h4>\n\n<p><br></p>\n\n<h4 id=\"you-dont-want-to-do-more-than-2-transactions-find-the-maximum-profit-that-you-can-earn-from-these-transactions\">You don&#39;t want to do more than 2 transactions. Find the maximum profit that you can earn from these transactions.</h4>\n\n<p><br></p>\n\n<h4 id=\"note\">Note</h4>\n\n<pre><code>1. Buying a stock and then selling it is called one transaction.\n\n2. You are not allowed to do multiple transactions at the same time. This means you have to sell the stock before buying it again. \n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018n\u2019 = 7, \u2018prices\u2019 = [3, 3, 5, 0, 3, 1, 4].\n\nOutput: 6\n\nExplanation: \nThe maximum profit can be earned by:\nTransaction 1: Buying the stock on day 4 (price 0) and then selling it on day 5 (price 3). \nTransaction 2: Buying the stock on day 6 (price 1) and then selling it on day 6 (price 4).\nTotal profit earned will be (3 - 0) + ( 4 - 1) = 6. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of each test case contains an integer &#39;n&#39; denoting the number of days. \n\nThe second line of each test case contains &#39;n&#39; space-separated integers, the array \u2018prices\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return an integer denoting the maximum profit. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>6\n1 3 1 2 4 8\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>9\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>The maximum profit can be earned by:\nTransaction 1: Buying the stock on day 1 (price 1) and then selling it on day 2 (price 3). \nTransaction 2: Buying the stock on day 3 (price 1) and then selling it on day 6 (price 8).\nTotal profit earned will be (3 - 1) + ( 8 - 1) = 9. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5\n5 4 3 2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2:</h5>\n\n<pre><code>It&#39;s better not to do any transactions as the stock prices are decreasing. \n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity:</h5>\n\n<pre><code>The expected time complexity is O(n).\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018n\u2019 &lt;= 10^6\n0 &lt;= \u2018prices[i]\u2019 &lt;= 10^3\n\nWhere \u2018prices[i]\u2019 is the stock price on ith day. \n\nTime Limit: 1 sec.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 153,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `prices` representing the price of a stock on each of the next `n` days, find the maximum profit you can earn by performing at most two transactions.  A transaction consists of buying a stock and then selling it. You cannot perform multiple transactions simultaneously; you must sell a stock before buying it again.",
                "constraints": [
                    "1 <= n <= 10^6",
                    "0 <= prices[i] <= 10^3",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "6\n1 3 1 2 4 8",
                        "output": "9",
                        "explanation": "Buy on day 1 (price 1), sell on day 2 (price 3). Profit = 2.\nBuy on day 3 (price 1), sell on day 6 (price 8). Profit = 7.\nTotal profit = 2 + 7 = 9."
                    },
                    {
                        "input": "5\n5 4 3 2 1",
                        "output": "0",
                        "explanation": "Since the prices are decreasing, it's better not to perform any transactions."
                    },
                    {
                        "input": "7\n3 3 5 0 3 1 4",
                        "output": "6",
                        "explanation": "Buy on day 4 (price 0), sell on day 5 (price 3). Profit = 3.\nBuy on day 6 (price 1), sell on day 7 (price 4). Profit = 3.\nTotal profit = 3 + 3 = 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you do this recursively? Try to solve the problem by solving its subproblems first.</p>",
            "<p>Can you optimise the previous approach? Try to memoize the subproblems.&nbsp;</p>",
            "<p>Initially, we were breaking the large problem into small problems but now, let us look at it in a different way. Can you solve the small problem first and then reach the final answer? Try to use the bottom-up approach now.</p>",
            "<p>Try to optimize the space complexity of the previous approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n\t\r\n\tTime Complexity: O(n)\r\n\tSpace Complexity: O(1)\r\n\r\n\tWhere n is the number of days.\r\n\r\n*/\r\n\r\nint maxProfit(vector<int>& prices)\r\n{\r\n    int n = prices.size();\r\n    int firstBuy = INT_MIN, firstSell = 0;\r\n    int secondBuy = INT_MIN, secondSell = 0;\r\n\r\n    // Loop to consider each day\r\n    for(int i = 0; i < n; i++)\r\n    {\r\n    \t// Maximum profit after buying the stock for the first time \r\n    \tfirstBuy = max(firstBuy, - prices[i]);\r\n\r\n    \t// Maximum profit after selling the stock for the first time \r\n    \tfirstSell = max(firstSell, firstBuy + prices[i]);\r\n\r\n    \t// Maximum profit after buying the stock for the second time \r\n    \tsecondBuy = max(secondBuy, firstSell - prices[i]);\r\n\r\n    \t// Maximum profit afer selling the stock for the second time \r\n    \tsecondSell = max(secondSell, secondBuy + prices[i]);\r\n    }\r\n\r\n    // Return the final profit\r\n    return secondSell;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n\r\n\tTime Complexity: O(n)\r\n\tSpace Complexity: O(1)\r\n\r\n\tWhere n is the number of days.\r\n\r\n*/\r\npublic class Solution {\r\n    public static int maxProfit(int[] prices) {\r\n        int n = prices.length;\r\n        int firstBuy = Integer.MIN_VALUE, firstSell = 0;\r\n        int secondBuy = Integer.MIN_VALUE, secondSell = 0;\r\n\r\n        // Loop to consider each day\r\n        for (int i = 0; i < n; i++) {\r\n            // Maximum profit after buying the stock for the first time\r\n            firstBuy = Math.max(firstBuy, -prices[i]);\r\n\r\n            // Maximum profit after selling the stock for the first time\r\n            firstSell = Math.max(firstSell, firstBuy + prices[i]);\r\n\r\n            // Maximum profit after buying the stock for the second time\r\n            secondBuy = Math.max(secondBuy, firstSell - prices[i]);\r\n\r\n            // Maximum profit after selling the stock for the second time\r\n            secondSell = Math.max(secondSell, secondBuy + prices[i]);\r\n        }\r\n\r\n        // Return the final profit\r\n        return secondSell;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int[] prices = {1, 7, 5, 3, 6, 4};\r\n\r\n        int maxProfit = maxProfit(prices);\r\n        System.out.println(\"Maximum profit: \" + maxProfit);\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n\tTime Complexity: O(N)\n\tSpace Complexity: O(1)\n\n\tWhere N is the number of days.\n'''\nfrom typing import List\nfrom sys import maxsize\n\ndef maxProfit(prices: List[int]) -> int:\n\n    firstBuy, firstSell = -maxsize, 0\n    secondBuy, secondSell = -maxsize, 0\n\n    # Loop to consider each day.\n    for i in range(len(prices)):\n\n        # Maximum profit after buying the stock for the first time.\n        firstBuy = max(firstBuy, - prices[i])\n\n        # Maximum profit after selling the stock for the first time.\n        firstSell = max(firstSell, firstBuy + prices[i])\n\n        # Maximum profit after buying the stock for the second time.\n        secondBuy = max(secondBuy, firstSell - prices[i])\n\n        # Maximum profit after selling the stock for the second time.\n        secondSell = max(secondSell, secondBuy + prices[i])\n\n    # Return the final profit.\n    return secondSell",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}