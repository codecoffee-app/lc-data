{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 23051,
            "title": "Cakes",
            "titleSlug": "cakes_6286388",
            "content": "<h4 id=\"you-have-n-cakes-of-different-names-you-want-to-choose-exactly-3-cakes-out-of-these-n-cakes-the-name-of-the-ith-cake-is-s-i-0-i-n-the-three-chosen-cakes-should-follow-the-following-conditions\">You have &#39;N&#39; cakes of different names. You want to choose exactly 3 cakes out of these &#39;N&#39; cakes. The name of the ith cake is &#39;S[i]&#39; (0 &lt;= i &lt; &#39;N&#39;). The three chosen cakes should follow the following conditions.</h4>\n\n<pre><code>The name of the cake should start with &#39;c&#39;, &#39;a&#39;, &#39;k&#39;, &#39;e&#39;, or &#39;s&#39;.\nNo two cakes should begin with the same letter.\n</code></pre>\n\n<h4 id=\"return-the-number-of-ways-to-choose-three-cakes-irrespective-of-the-order\">Return the number of ways to choose three cakes irrespective of the order.</h4>\n\n<h4 id=\"note-assume-0-based-indexing\">Note : Assume 0-based indexing.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Let &#39;N&#39; = 4, S = [&quot;choco&quot;, &quot;apple&quot;, &quot;kesar&quot;, &quot;strawberry&quot;].\nThere exist 4 different ways to choose three cakes following all the required conditions i.e. {&quot;choco&quot;, &quot;apple&quot;, &quot;kesar&quot;}, {&quot;choco&quot;, &quot;apple&quot;, &quot;strawberry&quot;}, {&quot;choco&quot;, &quot;strawberry&quot;, &quot;kesar&quot;}, {&quot;strawberry&quot;, &quot;apple&quot;, &quot;kesar&quot;}.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:-</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39;, which denotes the number of test cases.\nFor every test case:-\nThe first line contains only one integer &#39;N&#39; the number of cakes.\nThe second line contains &#39;N&#39; space-separated strings denoting the elements of the &#39;S&#39;. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:-</h5>\n\n<pre><code>For each test case, return the number of ways to choose three cakes irrespective of the order.\n</code></pre>\n\n<h5 id=\"note\">Note:-</h5>\n\n<pre><code>You don\u2019t need to print anything. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:-</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 10\n1 &lt;= &#39;N&#39; &lt;= 10^4\n0 &lt;= |S[i]| &lt;= 10\nAll the names of cakes are distinct and consist of lowercase letters.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:-</h5>\n\n<pre><code>2\n4\napple kesar strawberry peach\n2\napple kesar \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:-</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:-</h5>\n\n<pre><code>&#39;N&#39; = 4, S = [&quot;apple&quot;, &quot;kesar&quot;, &quot;strawberry&quot;, &quot;peach&quot;].\nThere exists only one way to choose three cakes following all the required conditions i.e. {&quot;strawberry&quot;, &quot;apple&quot;, &quot;kesar&quot;}. So, the answer is 1.\n\nSecond test case:-\n&#39;N&#39; = 2, S = [&quot;apple&quot;, &quot;kesar&quot;]. As &#39;N&#39; is less than 3, So there is no way to choose the three cakes. Hence, the answer is 0. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:-</h5>\n\n<pre><code>2\n5\napple kesar strawberry peach almond\n1\napple\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:-</h5>\n\n<pre><code>2\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -6,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a list of 'N' cakes, each with a distinct name. Your task is to determine the number of ways to choose exactly three cakes such that: \n\n1.  Each chosen cake's name must start with one of the following letters: 'c', 'a', 'k', 'e', or 's'.\n2.  No two chosen cakes can have names that begin with the same letter.\n\nReturn the total number of valid combinations of three cakes, disregarding the order in which they are selected.",
                "constraints": [
                    "1 <= 'T' <= 10 (Number of test cases)",
                    "1 <= 'N' <= 10^4 (Number of cakes)",
                    "0 <= |S[i]| <= 10 (Length of cake name)",
                    "All cake names are distinct and consist of lowercase letters.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4\napple kesar strawberry peach",
                        "output": "1",
                        "explanation": "With N = 4 and the given cake names, only one combination satisfies the conditions: {apple, kesar, strawberry}. These cakes start with 'a', 'k', and 's' respectively, fulfilling both criteria."
                    },
                    {
                        "input": "2\napple kesar",
                        "output": "0",
                        "explanation": "Since N = 2, it's impossible to choose three cakes, therefore no valid combination exists."
                    },
                    {
                        "input": "5\napple kesar strawberry peach almond",
                        "output": "2",
                        "explanation": "With N = 5 and the provided names, two combinations meet the constraints: {apple, kesar, strawberry} and {apple, kesar, almond}."
                    },
                    {
                        "input": "1\napple",
                        "output": "0",
                        "explanation": "Since N = 1, it's impossible to choose three cakes, therefore no valid combination exists."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>When choosing 3 cakes, there are no more than 10 patterns of the first character of those names.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}