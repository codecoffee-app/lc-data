{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8228,
            "title": "Calculate the height of Binary Tree Using Inorder and Level Order Traversal ",
            "titleSlug": "calculate-the-height-of-binary-tree-using-inorder-and-level-order-traversal_841416",
            "content": "<h4 id=\"you-have-been-given-the-inorder-traversal-and-level-order-traversal-of-a-binary-tree-of-integers-your-task-is-to-calculate-the-height-of-the-binary-tree-without-constructing-it\">You have been given the Inorder Traversal and Level Order Traversal of a Binary Tree of integers. Your task is to calculate the height of the Binary tree without constructing it.</h4>\n\n<h4 id=\"the-height-of-the-binary-tree-is-the-number-of-edges-in-the-longest-path-from-the-root-node-to-any-leaf-node-in-the-tree-in-case-the-tree-has-only-one-node-the-height-is-taken-to-be-0\">The height of the binary tree is the number of edges in the longest path from the root node to any leaf node in the tree. In case the tree has only one node, the height is taken to be 0.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first line of each test case contains an integer  \u2018N\u2019 denoting the number of nodes of the binary tree.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers, denoting the Inorder traversal of the binary tree.\n\nThe third line of each test case contains \u2018N\u2019 single space-separated integers, denoting the Level Order traversal of the binary tree.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the height of the binary tree.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n1 &lt;= inorder[i] &lt;= N\n1 &lt;= levelOrder[i] &lt;= N\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n5\n4 2 5 1 3\n1 2 3 4 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for Sample 1:</h5>\n\n<pre><code>The binary tree(rooted at node 1) represented by the above inorder and level order traversals is-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image1-5549.png\" alt=\"alt text\"></p>\n\n<pre><code>We can see that the height of the above binary tree is 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n7\n7 4 2 1 5 3 6\n1 2 3 4 5 6 7\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 113,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the inorder and level order traversals of a binary tree of integers, calculate the height of the binary tree without explicitly constructing it. The height of a binary tree is defined as the number of edges in the longest path from the root to any leaf node. A tree with only one node has a height of 0.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3000",
                    "1 <= inorder[i] <= N",
                    "1 <= levelOrder[i] <= N",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n4 2 5 1 3\n1 2 3 4 5",
                        "output": "2",
                        "explanation": "The binary tree has the root as 1, left subtree with root 2 and right subtree with root 3. The height of the tree is the longest path from root to leaf, which is 2."
                    },
                    {
                        "input": "7\n7 4 2 1 5 3 6\n1 2 3 4 5 6 7",
                        "output": "3",
                        "explanation": "The binary tree has root 1, left subtree with root 2 and right subtree with root 3. The height of the tree is the longest path from the root to a leaf, which has 3 edges."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use properties of Inorder and Level order Traversal of the tree.</p>",
            "<p>Can we simplify the above brute force approach by some precomputation?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n\r\n    Where N is the total number of nodes in the binary tree.\r\n*/\r\n\r\n\r\ntypedef struct Node{\r\n\r\n\t// Height stores the height of the current subtree.\r\n\tint height;\r\n\tint leftIndex;\r\n\tint rightIndex;\r\n} \r\nNode;\r\n\r\n#include <queue>\r\n\r\nint heightOfTheTree(vector<int>& inorder, vector<int>& levelOrder, int N){\r\n\tqueue<Node> q;\r\n\tNode init;\r\n\r\n\tinit.height = 0;\r\n\tinit.leftIndex = 0;\r\n\tinit.rightIndex = N - 1;\r\n\r\n\tq.push(init);\r\n      \r\n\tint pos[N+1];\r\n\r\n\tfor(int i = 0; i < N; i++){\r\n\t\tpos[inorder[i]] = i;\r\n\t}\r\n\r\n\tint maxHeight = 0;\r\n\r\n\tfor(int i = 0; i < N; i++){\r\n\t\tint curr = levelOrder[i];\r\n\r\n\t\tNode now = q.front();\r\n\r\n\t\tq.pop();\r\n\r\n\t\t// Position of levelOrder[i] in the inorder array. \r\n\t\tint currPos = pos[levelOrder[i]];\r\n\t\t\r\n\t\t// There is a left child present.\r\n\t\tif(currPos > now.leftIndex){\r\n\t\t\tNode newNode;\r\n\r\n\t\t\t// Height will increase by 1 as we are descending 1 level downwards in the tree.\r\n\t\t\tnewNode.height = now.height + 1;\r\n\r\n\t\t\tmaxHeight = max(maxHeight, newNode.height);\r\n\r\n\t\t\t// New borders of the left subtree in the inorder array.\r\n\t\t\tnewNode.leftIndex = now.leftIndex;\r\n\t\t\tnewNode.rightIndex = currPos - 1;\r\n\r\n\t\t\tq.push(newNode);\r\n\t\t}\r\n\r\n\t\t// There is a right child present.\r\n\t\tif(currPos < now.rightIndex){\r\n\t\t\tNode newNode;\r\n\t\t\tnewNode.height = now.height + 1;\r\n\t\t\tmaxHeight = max(maxHeight, newNode.height);\r\n\r\n\t\t\t// New borders of the right subtree in the inorder array.\r\n\t\t\tnewNode.leftIndex = currPos + 1;\r\n\t\t\tnewNode.rightIndex = now.rightIndex;\r\n\r\n\t\t\tq.push(newNode);\r\n\t\t}\r\n\t}\r\n\r\n\treturn maxHeight;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n\r\n    Where N is the total number of nodes in the binary tree.\r\n*/\r\n\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\n\r\nclass Node {\r\n\r\n    // Height stores the height of the current subtree.\r\n    int height;\r\n    int leftIndex;\r\n    int rightIndex;\r\n}\r\n\r\npublic class Solution {\r\n    public static int heightOfTheTree(int[] inorder, int[] levelOrder, int N) {\r\n        Queue<Node> q = new LinkedList<>();\r\n\r\n        Node init = new Node();\r\n\r\n        init.height = 0;\r\n        init.leftIndex = 0;\r\n        init.rightIndex = N - 1;\r\n\r\n        q.add(init);\r\n\r\n        int [] pos= new int[N+1];\r\n        for(int i=0;i<N;i++){\r\n            pos[inorder[i]] = i;\r\n        }\r\n\r\n        int maxHeight = 0;\r\n\r\n        for (int i = 0; i < N; i++) {\r\n            int curr = levelOrder[i];\r\n\r\n            Node now = q.poll();\r\n            int currPos =  pos[levelOrder[i]];\r\n\r\n            // There is a left child present.\r\n            if (currPos > now.leftIndex) {\r\n                Node newNode = new Node();\r\n\r\n                // Height will increase by 1, as we are descending 1 level downwards in the tree.\r\n                newNode.height = now.height + 1;\r\n\r\n                maxHeight = Math.max(maxHeight, newNode.height);\r\n\r\n                // New borders of the left subtree in the inorder array.\r\n                newNode.leftIndex = now.leftIndex;\r\n                newNode.rightIndex = currPos - 1;\r\n\r\n                q.add(newNode);\r\n            }\r\n\r\n            // There is a right child present.\r\n            if (currPos < now.rightIndex) {\r\n                Node newNode = new Node();\r\n\r\n                newNode.height = now.height + 1;\r\n\r\n                maxHeight = Math.max(maxHeight, newNode.height);\r\n\r\n                // New borders of the right subtree in the inorder array.\r\n                newNode.leftIndex = currPos + 1;\r\n                newNode.rightIndex = now.rightIndex;\r\n\r\n                q.add(newNode);\r\n            }\r\n\r\n        }\r\n\r\n        return maxHeight;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n\r\n    Where N is the total number of nodes in the binary tree.\r\n'''\r\n\r\nimport sys\r\nsys.setrecursionlimit(10**7)\r\n\r\nfrom queue import Queue\r\n\r\nclass Node:\r\n\t# Height stores the height of the current subtree.\r\n\theight = 0\r\n\tleftIndex = -1\r\n\trightIndex = -1\r\n\r\ndef heightOfTheTree(inorder, levelOrder, N):\r\n\t\r\n\tq = Queue()\r\n\r\n\tinit = Node()\r\n\r\n\tinit.height = 0\r\n\tinit.leftIndex = 0\r\n\tinit.rightIndex = N - 1\r\n\r\n\tq.put(init)\r\n      \r\n\tpos = [0] * (N + 1)\r\n\r\n\tfor i in range(N):\r\n\t\tpos[inorder[i]] = i\r\n\r\n\tmaxHeight = 0\r\n\r\n\tfor i in range(N):\r\n\t\tcurr = levelOrder[i]\r\n\r\n\t\tnow = q.get()\r\n\r\n\t\t# Position of levelOrder[i] in the inorder array. \r\n\t\tcurrPos = pos[levelOrder[i]]\r\n\t\t\r\n\t\t# There is a left child present.\r\n\t\tif currPos > now.leftIndex:\r\n\t\t\tnewNode = Node()\r\n\r\n\t\t\t# Height will increase by 1 as we are descending 1 level downwards in the tree.\r\n\t\t\tnewNode.height = now.height + 1\r\n\r\n\t\t\tmaxHeight = max(maxHeight, newNode.height)\r\n\r\n\t\t\t# New borders of the left subtree in the inorder array.\r\n\t\t\tnewNode.leftIndex = now.leftIndex\r\n\t\t\tnewNode.rightIndex = currPos - 1\r\n\r\n\t\t\tq.put(newNode)\r\n\t\t\r\n\r\n\t\t# There is a right child present.\r\n\t\tif currPos < now.rightIndex:\r\n\t\t\tnewNode = Node()\r\n\r\n\t\t\tnewNode.height = now.height + 1\r\n\r\n\t\t\tmaxHeight = max(maxHeight, newNode.height)\r\n\r\n\t\t\t# New borders of the right subtree in the inorder array.\r\n\t\t\tnewNode.leftIndex = currPos + 1\r\n\t\t\tnewNode.rightIndex = now.rightIndex\r\n\r\n\t\t\tq.put(newNode)\r\n\r\n\treturn maxHeight\r\n\r\n\t\r\n# Taking input.\r\ndef takeInput() :\r\n\tn = int(input().strip())\r\n\tinorder = list(map(int, sys.stdin.readline().strip().split(\" \")))\r\n\tlevelOrder = list(map(int, sys.stdin.readline().strip().split(\" \")))\r\n\treturn n, inorder, levelOrder\r\n\r\n#   main\r\nt = int(input().strip())\r\nfor i in range(t):\r\n\tn, inorder, levelOrder = takeInput()\r\n\tprint(heightOfTheTree(inorder, levelOrder, n))",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}