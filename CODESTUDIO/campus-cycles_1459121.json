{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12289,
            "title": "Campus Cycles",
            "titleSlug": "campus-cycles_1459121",
            "content": "<h4 id=\"a-school-campus-is-represented-as-a-2d-grid-the-campus-has-n-students-and-m-cycles-and-the-number-of-students-are-less-than-or-equal-to-the-number-of-cycles-each-student-and-cycle-is-represented-as-a-2d-coordinate-x-y-on-this-grid\">A school campus is represented as a 2D grid. The campus has N students and M cycles, and the number of students are less than or equal to the number of cycles. Each student and cycle is represented as a 2D coordinate (X, Y) on this grid.</h4>\n\n<h4 id=\"our-goal-is-to-assign-exactly-one-cycle-to-each-student-among-the-available-cycles-and-students-we-choose-the-student-cycle-pair-with-the-shortest-manhattan-distance-between-each-other-and-assign-the-cycle-to-that-student-if-there-are-multiple-student-cycle-pairs-with-the-same-shortest-manhattan-distance-we-choose-the-pair-with-the-smallest-student-index-if-there-are-multiple-ways-to-do-that-we-choose-the-pair-with-the-smallest-cycle-index-we-repeat-this-process-until-a-cycle-is-assigned-to-each-student\">Our goal is to assign exactly one cycle to each student. Among the available cycles and students, we choose the (student, cycle) pair with the shortest Manhattan distance between each other, and assign the cycle to that student. If there are multiple (student, cycle) pairs with the same shortest Manhattan distance, we choose the pair with the smallest student index; if there are multiple ways to do that, we choose the pair with the smallest cycle index. We repeat this process until a cycle is assigned to each student.</h4>\n\n<h4 id=\"given-the-description-of-the-school-campus-your-task-is-to-find-the-index-0-based-of-the-cycle-that-is-assigned-to-each-student\">Given the description of the school campus, your task is to find the index (0-based) of the cycle that is assigned to each student.</h4>\n\n<h4 id=\"the-manhattan-distance-between-two-points-p1-and-p2-is-defined-as-d-p1-x-p2-x-p1-y-p2-y-where-x-y-represents-the-location-of-a-point-in-both-horizontal-as-well-as-vertical-direction-respectively-from-the-origin-0-0\">The Manhattan distance between two points P1 and P2 is defined as D = |P1.X - P2.X| + |P1.Y - P2.Y| where X, Y represents the location of a point in both horizontal as well as vertical direction respectively from the origin(0,0).</h4>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. \nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018M\u2019, where \u2018N\u2019 represents the number of students and \u2018M\u2019 represents the number of cycles.\nThen the next \u2018N\u2019 lines of each test case contains two space-separated integers denoting the \u2018X\u2019 and \u2018Y\u2019 coordinates of students one in each line.\nThen the next \u2018M\u2019 lines of each test case contains two space-separated integers denoting the \u2018X\u2019 and \u2018Y\u2019 coordinates of cycles one in each line.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print N space-separated integers denoting the index of the cycle that each student on the campus is assigned to.\n\nOutput for each test case is printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N , M &lt;= 1000\n0 &lt;= Student[i][j] , Cycle[i][j] &lt;= 10^4\n\nAll student and bike locations are distinct.\n\nWhere \u2018T\u2019 represents the number of test cases, \u2018N\u2019 represents the number of students, \u2018M\u2019 represents the number of cycles, \u2018Student[i][j]\u2019 represents the location of each student on the campus, and \u2018Cycle[i][j]\u2019 represents the location of each cycle in the campus.  \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 2\n0 0\n2 1\n1 2\n3 3\n2 2\n1 1\n2 1 \n2 2\n2 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 0\n0 1\n</code></pre>\n\n<h5 id=\"explanation-1\">Explanation 1:</h5>\n\n<pre><code>For the first test case, \nDistance of Student 0 from Cycle 0  = |1-0| + |2-0| = 3\nDistance of Student 0 from Cycle 1  = |3-0| + |3-0| = 6\nDistance of Student 1 from Cycle 0  = |1-2| + |2-1| = 2\nDistance of Student 0 from Cycle 0  = |1-0| + |2-0| = 3\nStudent 1 grabs Cycle 0 as it is closest (without ties), and Student 0 is assigned Cycle 1. So the output is [1, 0].\n\nFor the second test case, \nDistance of Student 0 from Cycle 0  = |2-1| + |2-1| = 2\nDistance of Student 0 from Cycle 1  = |2-1| + |1-1| = 1\nDistance of Student 1 from Cycle 0  = |2-2| + |2-1| = 1\nDistance of Student 1 from Cycle 1  = |2-1| + |2-1| = 0\nStudent 1 grabs Cycle 1 as it is closest and Student 0 is assigned Cycle 0. So the output is [1, 0]\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 3\n0 0\n1 1\n2 0\n1 0\n2 2\n2 1\n2 3\n0 1\n2 0 \n0 0\n1 1\n2 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code> 0 2 1\n 0 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the coordinates of N students and M cycles on a 2D grid, assign each student to exactly one cycle. The assignment should minimize the total Manhattan distance between students and their assigned cycles. When multiple (student, cycle) pairs have the same shortest Manhattan distance, prioritize the student with the smaller index. If there are still ties, prioritize the cycle with the smaller index. Implement a function that takes the coordinates of the students and cycles as input and returns an array containing the index of the cycle assigned to each student.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N , M <= 1000",
                    "0 <= Student[i][j] , Cycle[i][j] <= 10^4",
                    "All student and cycle locations are distinct."
                ],
                "testcases": [
                    {
                        "input": "students=[[0, 0], [2, 1]], cycles=[[1, 2], [3, 3]]",
                        "output": "1 0",
                        "explanation": "Distance of Student 0 from Cycle 0 = |1-0| + |2-0| = 3\nDistance of Student 0 from Cycle 1 = |3-0| + |3-0| = 6\nDistance of Student 1 from Cycle 0 = |1-2| + |2-1| = 2\nDistance of Student 1 from Cycle 1 = |3-2| + |3-1| = 3\nStudent 1 grabs Cycle 0 as it is closest (without ties), and Student 0 is assigned Cycle 1. So the output is [1, 0]."
                    },
                    {
                        "input": "students=[[1, 1], [2, 1]], cycles=[[2, 1], [2, 2]]",
                        "output": "0 1",
                        "explanation": "Distance of Student 0 from Cycle 0 = |2-1| + |2-1| = 2\nDistance of Student 0 from Cycle 1 = |2-1| + |1-1| = 1\nDistance of Student 1 from Cycle 0 = |2-2| + |2-1| = 1\nDistance of Student 1 from Cycle 1 = |2-1| + |2-1| = 2\nStudent 1 grabs Cycle 0 as it is closest and Student 0 is assigned Cycle 1. So the output is [1, 0]"
                    },
                    {
                        "input": "students=[[0, 0], [1, 1], [2, 0]], cycles=[[1, 0], [2, 2], [2, 1]]",
                        "output": "0 2 1",
                        "explanation": "Calculate manhattan distance for each student and cycle combination and pick the smallest one prioritizing student index and then cycle index to generate output"
                    },
                    {
                        "input": "students=[[2, 3], [0, 1]], cycles=[[2, 0], [0, 0], [1, 1]]",
                        "output": "0 1",
                        "explanation": "Calculate manhattan distance for each student and cycle combination and pick the smallest one prioritizing student index and then cycle index to generate output"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you solve this problem by simply sorting according to the conditions?</p>",
            "<p>Can you solve this problem by using bucket sort?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}