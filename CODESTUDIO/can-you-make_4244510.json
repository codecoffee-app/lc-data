{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 18802,
            "title": "Can You Make",
            "titleSlug": "can-you-make_4244510",
            "content": "<h4 id=\"you-are-given-2-non-empty-strings-s1-and-s2-consisting-of-lowercase-english-alphabets-only\">You are given 2 non-empty strings <em><strong>&#39;s1&#39;</strong></em> and <em><strong>&#39;s2&#39;</strong></em> consisting of lowercase English alphabets only.</h4>\n\n<p><br/></p>\n\n<h4 id=\"in-one-operation-you-can-do-either-of-the-following-on-s1\">In one operation you can do either of the following on &#39;s1&#39;:</h4>\n\n<h4 id=\"1-remove-a-character-from-any-position-in-s1\">(1) Remove a character from any position in &#39;s1&#39;.</h4>\n\n<h4 id=\"2-add-a-character-to-any-position-in-s1\">(2) Add a character to any position in &#39;s1&#39;.</h4>\n\n<p><br/></p>\n\n<h4 id=\"find-the-minimum-number-of-operations-required-to-convert-string-s1-into-s2\">Find the minimum number of operations required to convert string &#39;s1&#39; into &#39;s2&#39;.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: &#39;s1&#39; = &quot;abcd&quot;, &#39;s2&#39; = &quot;anc&quot;\n\nOutput: 3\n\nExplanation:\nHere, &#39;s1&#39; = &quot;abcd&quot;, &#39;s2&#39; = &quot;anc&quot;.\nIn one operation remove &#39;s1[3]&#39;, after this operation &#39;s1&#39; becomes &quot;abc&quot;.    \nIn the second operation remove &#39;s1[1]&#39;, after this operation &#39;s1&#39; becomes &quot;ac&quot;.\nIn the third operation add &#39;n&#39; in &#39;s1[1]&#39;, after this operation &#39;s1&#39; becomes &quot;anc&quot;.\n\nHence, the minimum operations required will be 3. It can be shown that there&#39;s no way to convert s1 into s2 in less than 3 moves.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains a string &#39;s1&#39;.\n\nThe second line of the input contains a string &#39;s2&#39;.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Return the minimum number of operations required to convert string &#39;s1&#39; into &#39;s2&#39;.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>aaa\naa\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-answer\">Expected Answer :</h5>\n\n<pre><code>1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-on-console\">Output on console :</h5>\n\n<pre><code>1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For this test case,\n&#39;s1&#39; = &quot;aaa&quot;, &#39;s2&#39; = &quot;aa&quot;\n\nIn one operation remove &#39;s1[2]&#39;, after this operation &#39;s1&#39; becomes &quot;aa&quot;.\n\nHence, the output will be 1.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>edl \nxcqja\n</code></pre>\n\n<h5 id=\"expected-answer\">Expected Answer :</h5>\n\n<pre><code>8\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-on-console\">Output on console :</h5>\n\n<pre><code>8\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity :</h5>\n\n<pre><code>Try to do this in O(n*m), where n is the length of string &#39;s1&#39; and &#39;m&#39; is the length of string &#39;s2&#39;.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= s1.length, s2.length &lt;= 100\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 61,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two non-empty strings, 's1' and 's2', consisting of lowercase English alphabets, determine the minimum number of operations required to transform 's1' into 's2'. Allowed operations are:\n\n1.  Remove a character from any position in 's1'.\n2.  Add a character to any position in 's1'.",
                "constraints": [
                    "1 <= s1.length, s2.length <= 100",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "abcd\nanc",
                        "output": "3",
                        "explanation": "To convert \"abcd\" to \"anc\", we can remove 'b' and 'd' from 's1' and add 'n' to the modified 's1'. This requires 3 operations."
                    },
                    {
                        "input": "aaa\naa",
                        "output": "1",
                        "explanation": "To convert \"aaa\" to \"aa\", we can remove the last 'a' from 's1'. This requires 1 operation."
                    },
                    {
                        "input": "edl\nxcqja",
                        "output": "8",
                        "explanation": "To convert \"edl\" to \"xcqja\", we can remove all 3 characters from 's1' and add 5 characters to it which makes total operations to 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>What if you know the longest common subsequence(LCS) of str and ptr.</p>",
            "<p>&nbsp;Can you optimize your recursive solution using some extra space?</p>",
            "<p>Can you think of doing it iteratively to avoid stack size problems?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}