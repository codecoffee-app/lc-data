{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10668,
            "title": "Candies in Jar",
            "titleSlug": "candies-in-jar_1262351",
            "content": "<h4 id=\"there-is-a-jar-full-of-candies-for-sale-at-a-mall-counter-jar-has-the-capacity-n-that-is-jar-can-contain-maximum-n-candies-when-a-jar-is-full-at-any-point-in-time-jar-can-not-have-0-or-fewer-candies\">There is a jar full of candies for sale at a mall counter. Jar has the capacity \u2018N\u2019. That is, jar can contain maximum \u2018N\u2019 candies when a jar is full. At any point in time jar can not have 0 or fewer candies.</h4>\n\n<h4 id=\"given-the-number-k-the-number-of-candies-the-customer-wants-your-task-is-to-return-the-candies-left-in-the-jar\">Given the number \u2018K\u2019, the number of candies the customer wants. Your task is to return the candies left in the jar.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>If &#39;K&#39; is greater than &#39;N&#39;, return -1 denoting the invalid order.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Given if &#39;N&#39; = 10, &#39;K&#39; = 5. Then 5 candies are left in the jar after the event.\n</code></pre>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first and the only line of each test case contains two space-separated integers N and K, where \u2018N\u2019 is the number of candies in jar and \u2018K\u2019 is the number of candies the customer requires.\n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>For each test case, return the candies left in the jar. If the order is invalid return -1.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don\u2019t need to print anything; it has already been taken care of. You just need to implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N, K &lt;= 10^4\n\nTime Limit: 1 second\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n5 3\n5 6\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>2\n-1\n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>For the first test case:\nThe jar had 5 candies and the customer asked for 3, therefore leftover candies will be (5 - 3) = 2. Hence 2 candies are left in a jar.\n\nFor the second test case:\nThe jar had 5 candies and the customer asked for 6, Hence it is an invalid order, therefore return -1.    \n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n4 3\n1 1\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>1\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "A candy jar at a mall has a maximum capacity of 'N' candies. Given the initial capacity 'N' and the number of candies 'K' a customer wants to buy, determine the number of candies remaining in the jar after the purchase. If the customer requests more candies than are available in the jar (K > N), the order is invalid. Return -1 in such cases.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N, K <= 10^4",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "n = 5, k = 3",
                        "output": "2",
                        "explanation": "The jar initially contains 5 candies. The customer buys 3.  Therefore, 5 - 3 = 2 candies remain."
                    },
                    {
                        "input": "n = 5, k = 6",
                        "output": "-1",
                        "explanation": "The jar initially contains 5 candies. The customer wants to buy 6, which is more than available. Therefore, it's an invalid order, and -1 is returned."
                    },
                    {
                        "input": "n = 4, k = 3",
                        "output": "1",
                        "explanation": "The jar initially contains 4 candies. The customer buys 3. Therefore, 4 - 3 = 1 candy remains."
                    },
                    {
                        "input": "n = 1, k = 1",
                        "output": "0",
                        "explanation": "The jar initially contains 1 candy. The customer buys 1.  Therefore, 1 - 1 = 0 candies remain."
                    },
                    {
                        "input": "n = 10, k = 5",
                        "output": "5",
                        "explanation": "The jar initially contains 10 candies. The customer buys 5. Therefore, 10 - 5 = 5 candies remain."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>can you think about \u2018left = N-K\u2019?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Ad-Hoc",
                "slug": "ad-hoc"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}