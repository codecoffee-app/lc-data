{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10446,
            "title": "Capacity To Ship Packages Within D Days",
            "titleSlug": "capacity-to-ship-packages-within-d-days_1229379",
            "content": "<h4 id=\"you-are-the-owner-of-a-shipment-company-you-use-conveyor-belts-to-ship-packages-from-one-port-to-another-the-packages-must-be-shipped-within-d-days\">You are the owner of a Shipment company. You use conveyor belts to ship packages from one port to another. The packages must be shipped within <em><strong>&#39;d&#39;</strong></em> days.</h4>\n\n<p><br /></p>\n\n<h4 id=\"the-weights-of-the-packages-are-given-in-an-array-weights-the-packages-are-loaded-on-the-conveyor-belts-every-day-in-the-same-order-as-they-appear-in-the-array-the-loaded-weights-must-not-exceed-the-maximum-weight-capacity-of-the-ship\">The weights of the packages are given in an array <em><strong>&#39;weights&#39;</strong></em>. The packages are loaded on the conveyor belts every day in the same order as they appear in the array. The loaded weights must not exceed the maximum weight capacity of the ship.</h4>\n\n<p><br /></p>\n\n<h4 id=\"find-out-the-least-weight-capacity-so-that-you-can-ship-all-the-packages-within-d-days\">Find out the least-weight capacity so that you can ship all the packages within &#39;d&#39; days.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains two integers, \u2018n\u2019 and \u2018d\u2019, denoting the size of the array \u2018weights\u2019 and the maximum weight capacity of the ship.\n\nThe second line contains \u2018n\u2019 integers denoting the elements of the array \u2018weights\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return the least weight capacity so that you can ship all the packages within &#39;d&#39; days.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the output explicitly, it has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>8 5\n5 4 5 2 3 4 5 6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>9\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>In the test case, the given weights are [5,4,5,2,3,4,5,6] and these are needed to be shipped in 5 days. We can divide these weights in the following manner:\nDay         Weights            Total\n1        -   5, 4          -    9\n2        -   5, 2          -    7\n3        -   3, 4          -    7\n4        -   5             -    5\n5        -   6             -    6\nThe least weight capacity needed is 9, which is the total amount of weight that needs to be taken on Day 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>10 1\n1 2 3 4 5 6 7 8 9 10\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>55\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= n &lt;= 10^5\n1 &lt;= d &lt;= 10^5\n1 &lt;= weights[i] &lt;= 500\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 136,
            "dislikes": "NA",
            "rephrased": {
                "body": "A shipment company needs to transport packages using conveyor belts from one port to another within a specified number of days, 'd'. The weights of the packages are given in an array called 'weights'. The packages must be loaded onto the conveyor belts in the order they appear in the array. The total weight loaded each day must not exceed the ship's maximum weight capacity. The goal is to find the minimum weight capacity required to ship all packages within 'd' days.",
                "constraints": [
                    "1 <= n <= 10^5 (where n is the size of the 'weights' array)",
                    "1 <= d <= 10^5 (where d is the maximum number of days)",
                    "1 <= weights[i] <= 500 (where weights[i] is the weight of each package)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "8 5\n5 4 5 2 3 4 5 6",
                        "output": "9",
                        "explanation": "The packages with weights [5, 4, 5, 2, 3, 4, 5, 6] need to be shipped in 5 days.  One possible distribution is:\nDay 1: 5, 4 (Total: 9)\nDay 2: 5, 2 (Total: 7)\nDay 3: 3, 4 (Total: 7)\nDay 4: 5 (Total: 5)\nDay 5: 6 (Total: 6)\nThe maximum weight carried on any single day is 9, which is the minimum weight capacity needed to ship all the packages within 5 days."
                    },
                    {
                        "input": "10 1\n1 2 3 4 5 6 7 8 9 10",
                        "output": "55",
                        "explanation": "All packages [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] must be shipped in a single day. Therefore, the minimum weight capacity required is the sum of all the package weights: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 55"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Iterate through every possible value of weight that the ship can have.&nbsp;</p>",
            "<p>Can you apply binary search to find the least weight capacity?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(log(sum)*n)\n    Space Complexity: O(1)\n\n    where 'sum' denotes the sum of weights of all packages and 'n' is the number of packages.\n*/\n\nbool checkValidity(int capacity, vector<int> &weights, int d)\n{\n    // 'currentDayWeight' denotes the total weight to be taken in currentDay.\n    int currentDay = 1, currentDayWeight = 0;\n\n    // Iterating over the array 'weights'\n    for (int currentWeight : weights)\n    {\n        /*\n            After adding the current weight, if the total weight in Kth day \n            is less than capacity\n            Otherwise, increase the number of days.\n        */\n        if (currentDayWeight + currentWeight <= capacity)\n        {\n            currentDayWeight += currentWeight;\n        }\n        else\n        {\n            currentDay++;\n            currentDayWeight = currentWeight;\n        }\n\n        // If number of days exceeds the day limit.\n        if (currentDay > d)\n        {\n            return 0;\n        }\n    }\n\n    return 1;\n}\n\nint leastWeightCapacity(vector<int> &weights, int d)\n{\n\n    // Finding the range in which the least weight capacity lie.\n    int minShipCapacity = INT_MIN, maxShipCapacity = 0;\n    for (int i = 0; i < weights.size(); i++)\n    {\n        minShipCapacity = max(minShipCapacity, weights[i]);\n        maxShipCapacity += weights[i];\n    }\n\n    // Binary search over the range.\n    while (maxShipCapacity >= minShipCapacity)\n    {\n        int capacity = minShipCapacity + (maxShipCapacity - minShipCapacity) / 2;\n\n        // Check if the we can complete shipping in d days.\n        if (checkValidity(capacity, weights, d))\n        {\n            maxShipCapacity = capacity - 1;\n        }\n        else\n        {\n            minShipCapacity = capacity + 1;\n        }\n    }\n\n    return minShipCapacity;\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(log(SUM)*N)\r\n    Space Complexity: O(1)\r\n\r\n    where 'SUM' denotes the sum of weights of all packages and 'N' is the number of packages.\r\n'''\r\n\r\ndef checkValidity(capacity, weights, d):\r\n\r\n    # 'currentDayWeight' denotes the total weight to be taken in currentDay.\r\n    currentDay, currentDayWeight = 1, 0\r\n\r\n    # Iterating over the array 'weights'.\r\n    for currentWeight in weights:\r\n\r\n        ''' \r\n            After adding the current weight, if the total weight in Kth day \r\n            is less than capacity.\r\n            Otherwise, increase the number of days.\r\n        '''\r\n        if (currentDayWeight + currentWeight <= capacity):\r\n            currentDayWeight += currentWeight\r\n        else:\r\n            currentDay += 1\r\n            currentDayWeight = currentWeight\r\n\r\n        # If number of days exceeds the day limit.\r\n        if (currentDay > d):\r\n            return 0\r\n\r\n    return 1\r\n\r\n\r\ndef leastWeightCapacity(weights, d):\r\n\r\n    # Finding the range in which the least weight capacity lie.\r\n    minShipCapacity, maxShipCapacity = -2147483648, 0\r\n\r\n    for i in range(len(weights)):\r\n        minShipCapacity = max(minShipCapacity, weights[i])\r\n        maxShipCapacity += weights[i]\r\n\r\n    # Binary search over the range.\r\n    while (maxShipCapacity >= minShipCapacity):\r\n        capacity = minShipCapacity + (maxShipCapacity - minShipCapacity) // 2\r\n\r\n        # Check if the we can complete shipping in d days.\r\n        if (checkValidity(capacity, weights, d)):\r\n            maxShipCapacity = capacity - 1\r\n        else:\r\n            minShipCapacity = capacity + 1\r\n\r\n    return minShipCapacity",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(log(SUM)*N)\r\n    Space Complexity: O(1)\r\n\r\n    where 'SUM' denotes the sum of weights of all packages and 'N' is the number of packages.\r\n*/\r\n\r\npublic class Solution {\r\n    public static boolean checkValidity(int capacity, int[] weights, int d)\r\n\t{\r\n\t    // 'currentDayWeight' denotes the total weight to be taken in currentDay.\r\n\t    int currentDay = 1, currentDayWeight = 0;\r\n\r\n\t    // Iterating over the array 'weights'\r\n\t    for (int currentWeight : weights)\r\n\t    {\r\n\t        /*\r\n\t            After adding the current weight, if the total weight in Kth day \r\n\t            is less than capacity.\r\n\t            Otherwise, increase the number of days.\r\n\t        */\r\n\t        if (currentDayWeight + currentWeight <= capacity)\r\n\t        {\r\n\t            currentDayWeight += currentWeight;\r\n\t        }\r\n\t        else\r\n\t        {\r\n\t            currentDay++;\r\n\t            currentDayWeight = currentWeight;\r\n\t        }\r\n\r\n\t        // If number of days exceeds the day limit.\r\n\t        if (currentDay > d)\r\n\t        {\r\n\t            return false;\r\n\t        }\r\n\t    }\r\n\r\n\t    return true;\r\n\t}\r\n\r\n    public static int leastWeightCapacity(int[] weights, int d) {\r\n        // Finding the range in which the least weight capacity lie.\r\n\t    int minShipCapacity = Integer.MIN_VALUE, maxShipCapacity = 0;\r\n\t    for (int i = 0; i < weights.length; i++)\r\n\t    {\r\n\t        minShipCapacity = Math.max(minShipCapacity, weights[i]);\r\n\t        maxShipCapacity += weights[i];\r\n\t    }\r\n\r\n\t    // Binary search over the range.\r\n\t    while (maxShipCapacity >= minShipCapacity)\r\n\t    {\r\n\t        int capacity = minShipCapacity + (maxShipCapacity - minShipCapacity) / 2;\r\n\r\n\t        // Check if the we can complete shipping in d days.\r\n\t        if (checkValidity(capacity, weights, d))\r\n\t        {\r\n\t            maxShipCapacity = capacity - 1;\r\n\t        }\r\n\t        else\r\n\t        {\r\n\t            minShipCapacity = capacity + 1;\r\n\t        }\r\n\t    }\r\n\r\n\t    return minShipCapacity;\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}