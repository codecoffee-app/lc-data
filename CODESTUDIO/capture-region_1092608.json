{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9813,
            "title": "Capture region",
            "titleSlug": "capture-region_1092608",
            "content": "<h4 id=\"you-are-given-a-matrix-having-n-rows-and-m-columns-each-cell-of-the-matrix-is-either-x-or-o-you-need-to-flip-all-those-regions-of-o-which-are-surrounded-by-x-i-e-you-need-to-change-all-o-s-which-are-present-in-the-region-to-x\">You are given a matrix having \u2018N\u2019 rows and \u2018M\u2019 columns. Each cell of the matrix is either \u2018X\u2019 or \u2018O\u2019. You need to flip all those regions of \u2018O\u2019 which are surrounded by \u2018X\u2019 i.e. you need to change all \u2018O\u2019s which are present in the region to \u2018X\u2019.</h4>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>1. Surrounded regions shouldn\u2019t be on the border, which means that any &#39;O&#39; on the border of the matrix is not flipped to &#39;X&#39;. \n2. Any \u2018O\u2019 or group of connected \u2018O\u2019 are said to be surrounded by \u2018X\u2019 when all cells touching the boundary of the group of \u2018O\u2019 must contain \u2018X\u2019.\n</code></pre>\n\n<h5 id=\"for-example\">For example</h5>\n\n<p><img src=\"https://files.codingninjas.in/capture-region-1-7308.png\" alt=\"alt text\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe next 2 * T lines describe the \u2018T\u2019 test cases.\n\nThe first line of each test case contains two space-separated positive integers \u2018N\u2019 and \u2018M\u2019 denoting the number of the rows and columns in a matrix respectively. \n\nIn the next \u2018N\u2019 lines of each test case, the ith line contains a string of length \u2018M\u2019 containing either \u2018X\u2019 or \u2018O\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print N lines each line containing M characters denoting the matrix element at position MATRIX[i][j] where i and j are the indices of the 2 - D array.\n\nThe output of each test case will begin from a new line.   \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10 ^ 4  \n1 &lt;= M &lt;= 10 ^ 4\n1 &lt;= N * M &lt;= 10 ^ 4 \n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the number of rows, \u2018M\u2019 is the number of columns.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 2\nXO\nOX\n5 3\nXXX\nXOX\nXXX\nXOX\nOOO\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>XO\nOX\nXXX\nXXX\nXXX\nXOX\nOOO      \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>Test case 1:\nThe Os present at [0,1] and [1,0] both lies on boundaries hence they remain as it is.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture-region-1-7309.png\" alt=\"alt text\"></p>\n\n<pre><code>Test case 2:\nThe Os present at [4,0], [4,1], and [4,2] lies on boundaries hence they remain as it is.\nThe O present at [3,1] is connected to O present at boundaries so it will also remain the same.\nThe O present at [1,1] is not connected to any O which lies on the boundary so it will be considered as a captured region. Hence they will be flipped to X.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture-region-2-7310.png\" alt=\"alt text\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 3\nOOO\nOXO\nOOO\n3 3\nXXX\nXOX\nXXX\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>OOO\nOXO\nOOO\nXXX\nXXX\nXXX\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix represented as a 2D vector of characters, where each cell is either 'X' or 'O', identify and flip regions of 'O's that are completely surrounded by 'X's.  'O's on the border of the matrix, or 'O's connected to those on the border, should not be flipped.",
                "constraints": [
                    "1 <= T <= 50 (Number of test cases)",
                    "1 <= N <= 10^4 (Number of rows)",
                    "1 <= M <= 10^4 (Number of columns)",
                    "1 <= N * M <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "n = 2, m = 2, s = [['X', 'O'], ['O', 'X']]",
                        "output": "[['X', 'O'], ['O', 'X']]",
                        "explanation": "The Os present at [0,1] and [1,0] both lies on boundaries hence they remain as it is."
                    },
                    {
                        "input": "n = 5, m = 3, s = [['X', 'X', 'X'], ['X', 'O', 'X'], ['X', 'X', 'X'], ['X', 'O', 'X'], ['O', 'O', 'O']]",
                        "output": "[['X', 'X', 'X'], ['X', 'X', 'X'], ['X', 'X', 'X'], ['X', 'O', 'X'], ['O', 'O', 'O']]",
                        "explanation": "The Os present at [4,0], [4,1], and [4,2] lies on boundaries hence they remain as it is.\nThe O present at [3,1] is connected to O present at boundaries so it will also remain the same.\nThe O present at [1,1] is not connected to any O which lies on the boundary so it will be considered as a captured region. Hence they will be flipped to X."
                    },
                    {
                        "input": "n = 3, m = 3, s = [['O', 'O', 'O'], ['O', 'X', 'O'], ['O', 'O', 'O']]",
                        "output": "[['O', 'O', 'O'], ['O', 'X', 'O'], ['O', 'O', 'O']]",
                        "explanation": "All 'O's are on the border or connected to the border, so none are flipped."
                    },
                    {
                        "input": "n = 3, m = 3, s = [['X', 'X', 'X'], ['X', 'O', 'X'], ['X', 'X', 'X']]",
                        "output": "[['X', 'X', 'X'], ['X', 'X', 'X'], ['X', 'X', 'X']]",
                        "explanation": "The single 'O' is surrounded by 'X's and not on the border, so it's flipped."
                    },
                    {
                        "input": "n = 3, m = 4, s = [['X', 'O', 'O', 'X'], ['X', 'X', 'O', 'X'], ['X', 'X', 'X', 'X']]",
                        "output": "[['X', 'O', 'O', 'X'], ['X', 'X', 'O', 'X'], ['X', 'X', 'X', 'X']]",
                        "explanation": "The O's on the top and middle row are connected to border, so none are flipped."
                    },
                    {
                        "input": "n = 4, m = 4, s = [['X', 'X', 'X', 'X'], ['X', 'O', 'O', 'X'], ['X', 'X', 'O', 'X'], ['X', 'O', 'X', 'X']]",
                        "output": "[['X', 'X', 'X', 'X'], ['X', 'O', 'O', 'X'], ['X', 'X', 'O', 'X'], ['X', 'O', 'X', 'X']]",
                        "explanation": "All 'O's are somehow connected to the boundary and so are not flipped."
                    },
                    {
                        "input": "n = 1, m = 5, s = [['O', 'X', 'O', 'X', 'O']]",
                        "output": "[['O', 'X', 'O', 'X', 'O']]",
                        "explanation": "All O's are on boundary"
                    },
                    {
                        "input": "n = 5, m = 1, s = [['O'], ['X'], ['O'], ['X'], ['O']]",
                        "output": "[['O'], ['X'], ['O'], ['X'], ['O']]",
                        "explanation": "All O's are on boundary"
                    },
                    {
                        "input": "n = 1, m = 1, s = [['O']]",
                        "output": "[['O']]",
                        "explanation": "Single O is on boundary"
                    },
                    {
                        "input": "n = 1, m = 1, s = [['X']]",
                        "output": "[['X']]",
                        "explanation": "Single X, nothing to change"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Perform a traversal from each cell, wonder which traversal can be used think it in form of recursive traversal.</p>",
            "<p>Keep track of the visited cells from the boundary.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}