{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12750,
            "title": "Carnival with Friends",
            "titleSlug": "carnival-with-friends_1474829",
            "content": "<h4 id=\"india-s-one-of-the-most-prominent-and-much-awaited-surajkund-mela-in-haryana-has-started-ninja-and-his-k-friends-are-going-to-this-carnival-this-carnival-has-an-n-number-of-amusement-rides-lined-up-and-each-ride-s-starting-and-finishing-time-is-given-on-the-visiting-card-what-is-the-maximum-total-number-of-rides-can-the-friends-take-if-they-act-optimally\">India\u2019s one of the most prominent and much-awaited Surajkund Mela in Haryana has started. Ninja and his \u2018K\u2019 friends are going to this carnival. This carnival has an \u2018N\u2019 number of amusement rides lined up and each ride\u2019s starting and finishing time is given on the visiting card. What is the maximum total number of rides can the friends take if they act optimally?</h4>\n\n<h4 id=\"for-example\">For example :</h4>\n\n<pre><code>If \u2018N\u2019 = 3 and \u2018K\u2019 = 2, and the [\u2018startTime\u2019 , \u2018endTime\u2019] of the 3 rides are [0,2],[1,3],[2,4]\nThen the 2 friends can attend all the 3 rides as follows:\nFriend 1 will attend ride [0,2] at t = 0\nFriend 2 will attend ride [1,3] at t = 1\nFriend 1 will be free at t = 2, and will now attend ride [2,4] at t = 2\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then \u2018T\u2019 test cases follow:\n\nThe first line of each test case has 2 space-separated integers \u2018N\u2019 and \u2018K\u2019, where \u2018N\u2019 is the number of rides given and \u2018K\u2019 is the number of friends.\n\nFollowing \u2018N\u2019 lines of each test case have 2 space-separated integers, \u2018startTime\u2019 and \u2018endTime\u2019 of each ride.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print an integer denoting the maximum number of rides the Ninja&#39;s friends can attend.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= K &lt;= N &lt;= 10 ^ 5\n0 &lt;= startTime &lt;= endTime &lt;= 10 ^ 9\n\nWhere \u2018startTime\u2019 is the starting time of a ride and \u2018endTime\u2019 is the ending time of the ride.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n3 2\n2 5\n2 3\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>In the first test case, \u2018N\u2019 = 3 and \u2018K\u2019 = 2, and the [\u2018startTime\u2019 , \u2018endTime\u2019] of the 3 rides are [1, 2] , [2, 3] , [2, 5]. Then the 2 friends can attend all the 3 rides as follows:\nFriend 1 will attend ride [1, 2] at t = 1\nFriend 2 will attend ride [2, 3] at t = 2\nFriend 1 will be free at t = 2, and will now attend ride [2, 5] at t = 2\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n4 2\n2 12\n0 3\n1 2\n2 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h5>\n\n<pre><code>In the first test case,  \u2018N\u2019 = 4 and \u2018K\u2019 = 2, and the [\u2018startTime\u2019 , \u2018endTime\u2019] of the 3 rides are [2, 12] , [0, 3] , [1, 2] , [2, 4]. Then the 2 friends can attend 3 rides as follows:\nFriend 1 will attend ride [0, 3] at t = 0\nFriend 2 will attend ride [1, 2] at t = 2\nFriend 2 will be free at t = 2, and will now attend ride [2, 4] at t = 2, but friend 1 will not be able to attend the remaining ride [2, 12] because its \u2018start time\u2019 is 2 and he will be free at 3.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "A carnival features N amusement rides with given start and end times. Ninja and his K friends want to maximize the number of rides they can collectively take. Given the start and end times of each ride, determine the maximum number of rides the friends can attend, acting optimally.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= K <= N <= 10^5",
                    "0 <= startTime <= endTime <= 10^9",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 2\n2 5\n2 3\n1 2",
                        "output": "3",
                        "explanation": "There are 3 rides and 2 friends. Rides are [2, 5], [2, 3], and [1, 2]. Friend 1 takes ride [1, 2] at t=1. Friend 2 takes ride [2, 3] at t=2. Friend 1 is free at t=2 and takes ride [2, 5] at t=2. All 3 rides are attended."
                    },
                    {
                        "input": "4 2\n2 12\n0 3\n1 2\n2 4",
                        "output": "3",
                        "explanation": "There are 4 rides and 2 friends. Rides are [2, 12], [0, 3], [1, 2], and [2, 4]. Friend 1 takes ride [0, 3] at t=0. Friend 2 takes ride [1, 2] at t=1. Friend 2 is free at t=2 and takes ride [2, 4] at t=2. Friend 1 finishes ride at t=3 and cannot take ride [2,12] as it starts before. So, 3 rides are attended."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you search which friends are free to attend a specific ride?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}