{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8877,
            "title": "Ceil from BST",
            "titleSlug": "ceil-from-bst_920464",
            "content": "<h4 id=\"ninja-is-given-a-binary-search-tree-and-an-integer-now-he-is-given-a-particular-key-in-the-tree-and-returns-its-ceil-value-can-you-help-ninja-solve-the-problem\">Ninja is given a binary search tree and an integer. Now he is given a particular key in the tree and returns its ceil value. Can you help Ninja solve the problem?</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Ceil of an integer is the closest integer greater than or equal to a given number.\nFor example:\narr[] = {1, 2, 5, 7, 8, 9}, key = 3.\nThe closest integer greater than 3 in the given array is 5. So, its ceil value in the given array is 5.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases.\n\nThe first line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nThe second line of each test case contains integer X, denoting the key value.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code> The first and only line of each test case in the output contains ceil of integer X from given BST.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"example\">Example</h5>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/0000000000000742.PNG\" alt=\"alttext\"></p>\n\n<pre><code>for the above tree\nX=2\nceil =3\nX=7\nceil =8\nX=12\nceil =13\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10    \n1 &lt;= N &lt;= 10^5\n0 &lt;= node data &lt;= 10^9\n1 &lt;= X &lt;= 10^9     \n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n4\n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>5\n7\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h5>\n\n<pre><code> In the first test case, we traverse the tree starting from the root node which has a value of 8. Now the value of its left child is 5 and its right child is 10. Key-value 4 is less than the left child so we traverse the left subtree. Now we reach a node with value 5 and then again repeat the above process till we reach a null node. Finally, we return 5 as our answer.\n\nIn the second test case, we traverse the tree starting from the root node which has a value of 8. Now the value of its left child is 5 and its right child is 10. Key-value 7 is less than the right child and more than the left child, so we traverse the right subtree. Now we reach a node with value 10 and then again follow the same procedure and reach a node with value 7 and stop there and return 7 as our final answer.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n55 25 82 13 34 67 86 6 21 28 47 61 70 84 92 1 10 17 24 26 29 45 54 56 65 68 81 83 85 91 \n96 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 \n34\n84 19 97 0 56 96 99 -1 8 50 83 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 \n50\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>34\n50\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 102,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) and an integer 'X', find the ceil value of 'X' in the BST. The ceil value is the smallest integer in the BST that is greater than or equal to 'X'. If no such value exists, return null.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "0 <= node data <= 10^9",
                    "1 <= X <= 10^9",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n4",
                        "output": "5",
                        "explanation": "The BST contains the nodes 2, 5, 6, 7, 8, 10. The smallest value greater than or equal to 4 is 5."
                    },
                    {
                        "input": "8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n7",
                        "output": "7",
                        "explanation": "The BST contains the nodes 2, 5, 6, 7, 8, 10. The smallest value greater than or equal to 7 is 7."
                    },
                    {
                        "input": "55 25 82 13 34 67 86 6 21 28 47 61 70 84 92 1 10 17 24 26 29 45 54 56 65 68 81 83 85 91 96 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n34",
                        "output": "34",
                        "explanation": "The BST contains the node 34. The smallest value greater than or equal to 34 is 34 itself."
                    },
                    {
                        "input": "84 19 97 0 56 96 99 -1 8 50 83 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n50",
                        "output": "50",
                        "explanation": "The BST contains the node 50. The smallest value greater than or equal to 50 is 50 itself."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you traverse the tree?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity: O(logN)\r\n    Space complexity: O(logN)\r\n\r\n    Where 'N' is the number of nodes of the tree\r\n*/\r\n\r\nint findCeil(BinaryTreeNode < int > * node, int x) {\r\n  // Initializing ceil value\r\n  int ceil = -1;\r\n\r\n  // Traverse till the node is not null\r\n  while (node != NULL) {\r\n\r\n    // If node value equals key then return it\r\n    if (x == node -> data) {\r\n      return node -> data;\r\n    }\r\n\r\n    // Traverse right sub-tree\r\n    if (x > node -> data) {\r\n\r\n      node = node -> right;\r\n    }\r\n\r\n    // Traverse left sub-tree\r\n    else {\r\n      ceil = node -> data;\r\n      node = node -> left;\r\n    }\r\n  }\r\n\r\n  // Return the ceil value\r\n  return ceil;\r\n\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time complexity: O(logN)\r\n    Space complexity: O(logN)\r\n\r\n    Where 'N' is the number of nodes of the tree\r\n'''\r\n\r\n\r\ndef findCeil(node, x):\r\n    # Initializing ceil value\r\n    ceil = -1\r\n\r\n    # Traverse till the node is not null\r\n    while(node != None):\r\n\r\n        # If node value equals key then return it\r\n        if x == node.data:\r\n            return node.data\r\n\r\n        # Traverse right sub-tree\r\n        if x > node.data:\r\n            node = node.right\r\n\r\n        # Traverse left sub-tree\r\n        else:\r\n            ceil = node.data\r\n            node = node.left\r\n\r\n    return ceil\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity: O(logN)\r\n    Space complexity: O(logN)\r\n\r\n    Where 'N' is the number of nodes of the tree\r\n*/\r\n\r\npublic class Solution {\r\n\r\n    public  static int findCeil(TreeNode<Integer> node, int x) {\r\n\r\n        // Initializing ceil value\r\n        int ceil = -1;\r\n\r\n        // Traverse till the node is not null\r\n        while (node != null) {\r\n\r\n            // If node value equals key then return it\r\n            if (x == node.data) {\r\n                return node.data;\r\n            }\r\n\r\n            // Traverse right sub-tree\r\n            if (x > node.data) {\r\n\r\n                node = node.right;\r\n            }\r\n\r\n            // Traverse left sub-tree\r\n            else {\r\n                ceil = node.data;\r\n                node = node.left;\r\n            }\r\n        }\r\n\r\n        // Return the ceil value\r\n        return ceil;\r\n\r\n    }\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}