{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13945,
            "title": "Ceiling in a sorted array",
            "titleSlug": "ceiling-in-a-sorted-array_1825401",
            "content": "<h4 id=\"youre-given-a-sorted-array-a-of-n-integers-and-an-integer-x\">You&#39;re given a sorted array <strong><em>&#39;a&#39;</em></strong> of <strong><em>&#39;n&#39;</em></strong> integers and an integer <strong><em>&#39;x&#39;</em></strong>.</h4>\n\n<p><br></p>\n\n<h4 id=\"find-the-floor-and-ceiling-of-x-in-a-0-n-1\">Find the floor and ceiling of &#39;x&#39; in &#39;a[0..n-1]&#39;.</h4>\n\n<p><br></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Floor of &#39;x&#39; is the largest element in the array which is smaller than or equal to &#39;x&#39;.\nCeiling of &#39;x&#39; is the smallest element in the array greater than or equal to &#39;x&#39;.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \nn=6, x=5, a=[3, 4, 7, 8, 8, 10]   \n\nOutput:\n4\n\nExplanation:\nThe floor and ceiling of &#39;x&#39; = 5 are 4 and 7, respectively.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains two integers, \u2018n\u2019 and &#39;x&#39;, where n represents the size of the array.\n\nThe next line contains &#39;n&#39; integers, denoting the elements of the given array.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Return two integers, the floor and ceiling of &#39;x&#39;.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been handled. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>6 8\n3 4 4 7 8 10\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>8 8\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>Since x = 8 is present in the array, it will be both floor and ceiling.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>6 2\n3 4 4 7 8 10\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>-1 3\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2 :</h5>\n\n<pre><code>Since no number is less than or equal to x = 2 in the array, its floor does not exist. The ceiling will be 3.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= n &lt;= 2 * 10^5      \n1 &lt;= a[i] &lt;= 10^9\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 444,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array 'a' of 'n' integers and an integer 'x', find the floor and ceiling of 'x' in 'a'. The floor of 'x' is the largest element in the array less than or equal to 'x'. The ceiling of 'x' is the smallest element in the array greater than or equal to 'x'. If the floor or ceiling doesn't exist, return -1.",
                "constraints": [
                    "1 <= n <= 2 * 10^5",
                    "1 <= a[i] <= 10^9",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "6 8\n3 4 4 7 8 10",
                        "output": "8 8",
                        "explanation": "Since x = 8 is present in the array, it is both the floor and the ceiling."
                    },
                    {
                        "input": "6 2\n3 4 4 7 8 10",
                        "output": "-1 3",
                        "explanation": "Since no number is less than or equal to x = 2 in the array, the floor does not exist (-1). The ceiling is 3."
                    },
                    {
                        "input": "6 5\n3 4 7 8 8 10",
                        "output": "4 7",
                        "explanation": "The floor of x = 5 is 4 (the largest element less than or equal to 5). The ceiling of x = 5 is 7 (the smallest element greater than or equal to 5)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try iterating each element of the array!</p>",
            "<p>We don\u2019t need to linearly traverse the entire array, think about reducing the search by half.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity : O(log(N))\n    Space Complexoty: O(1)\n\n    Where N is the size of the array.\n*/\n\nint getCeil(int n, int x, vector<int> &arr)\n{\n    int ans = -1;\n\n    // Initial range of search\n    int l = 0, h = n - 1;\n    while (l <= h)\n    {\n\n        int mid = (l + h) / 2;\n\n        // Array element at Mid is greater than x.\n        if (arr[mid] >= x)\n        {\n            ans = arr[mid];\n\n            // We reduce search space to left half.\n            h = mid - 1;\n        }\n        else\n        {\n\n            // We reduce search space to right half.\n            l = mid + 1;\n        }\n    }\n    return ans;\n}\nint getFloor(int n, int x, vector<int> &arr)\n{\n    int ans = -1;\n\n    // Initial range of search\n    int l = 0, h = n - 1;\n    while (l <= h)\n    {\n\n        int mid = (l + h) / 2;\n\n        // Array element at Mid is less than x.\n        if (arr[mid] <= x)\n        {\n            ans = arr[mid];\n            // We reduce search space to right half.\n            l = mid + 1;\n        }\n        else\n        {\n            // We reduce search space to left half.\n            h = mid - 1;\n        }\n    }\n    return ans;\n}\npair<int, int> getFloorAndCeil(vector<int> &a, int n, int x)\n{\n    return make_pair(getFloor(n, x, a), getCeil(n, x, a));\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "import java.util.* ;\r\nimport java.io.*; \r\n\r\npublic class Solution {\r\n\tpublic static int getCeil(int n, int x, int[] arr) {\r\n        int ans = -1;\r\n        int l = 0, h = n - 1;\r\n        while (l <= h) {\r\n            int mid = (l + h) / 2;\r\n            if (arr[mid] >= x) {\r\n                ans = arr[mid];\r\n                h = mid - 1;\r\n            } else {\r\n                l = mid + 1;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n\r\n    public static int getFloor(int n, int x, int[] arr) {\r\n        int ans = -1;\r\n        int l = 0, h = n - 1;\r\n        while (l <= h) {\r\n            int mid = (l + h) / 2;\r\n            if (arr[mid] <= x) {\r\n                ans = arr[mid];\r\n                l = mid + 1;\r\n            } else {\r\n                h = mid - 1;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n\r\n    public static int[] getFloorAndCeil(int[] a, int n, int x) {\r\n        return new int[]{getFloor(n, x, a), getCeil(n, x, a)};\r\n    }\r\n    \r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "def getCeil(n, x, arr):\r\n    ans = -1\r\n    l, h = 0, n - 1\r\n    while l <= h:\r\n        mid = (l + h) // 2\r\n        if arr[mid] >= x:\r\n            ans = arr[mid]\r\n            h = mid - 1\r\n        else:\r\n            l = mid + 1\r\n    return ans\r\n\r\ndef getFloor(n, x, arr):\r\n    ans = -1\r\n    l, h = 0, n - 1\r\n    while l <= h:\r\n        mid = (l + h) // 2\r\n        if arr[mid] <= x:\r\n            ans = arr[mid]\r\n            l = mid + 1\r\n        else:\r\n            h = mid - 1\r\n    return ans\r\n\r\ndef getFloorAndCeil(a, n, x):\r\n    return getFloor(n, x, a), getCeil(n, x, a)\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}