{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10114,
            "title": "Check For Dead End In A BST",
            "titleSlug": "check-for-dead-end-in-a-bst_1169457",
            "content": "<h4 id=\"you-are-given-a-binary-search-tree-bst-that-contains-positive-integers-only-your-task-is-to-find-out-whether-the-bst-contains-a-dead-end-a-bst-is-said-to-have-a-dead-end-if-there-exists-a-leaf-node-in-the-bst-for-which-it-is-impossible-to-insert-any-further-nodes-after-that-node-in-that-bst-if-such-nodes-do-not-exist-then-the-bst-doesn-t-contain-a-dead-end\">You are given a Binary Search Tree (BST) that contains positive integers only. Your task is to find out whether the BST contains a Dead End. A BST is said to have a Dead End if there exists a leaf node in the BST, for which it is impossible to insert any further nodes after that node in that BST. If such nodes do not exist, then the BST doesn\u2019t contain a Dead End.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-also-called-an-ordered-or-sorted-binary-tree-is-a-rooted-binary-tree-whose-internal-nodes-each-store-a-value-greater-than-all-the-values-in-the-nodes-left-subtree-and-less-than-those-in-its-right-subtree\">A binary search tree (BST), also called an ordered or sorted binary tree, is a rooted binary tree whose internal nodes each store a value greater than all the values in the node&#39;s left subtree and less than those in its right subtree.</h4>\n\n<h5 id=\"follow-up\">Follow Up :</h5>\n\n<pre><code>Can you solve this in O(N) time, and O(H)  space complexity?\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \n\nThen the T test cases follow. \n\nThe first and only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst_example-6878.png\" alt=\"bst_example\"> </p>\n\n<pre><code>4\n2 6\n1 3 5 7\n-1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 4\n\nLevel 2 :\nLeft child of 4 = 2\nRight child of 4 = 6\n\nLevel 3 :\nLeft child of 2 = 1\nRight child of 2 = 3\nLeft child of 6 = 5\nRight child of 6 = 7\n\nLevel 4 :\nLeft child of 1 = null (-1)\nRight child of 1 = null (-1)\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print True or False in a separate line.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n1 &lt;= node data &lt;= 10^9, (where node data != -1)\nWhere N denotes the number of nodes in the given tree.\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n10 6 12 2 8 11 15 -1 -1 -1 -1 -1 -1 -1 -1\n7 4 8 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for sample 1 :</h5>\n\n<pre><code>For the first test case, the given BST is depicted below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bstinput1-6879.png\" alt=\"bst_input1\"></p>\n\n<pre><code>So, it is impossible to insert any node after the node having the data 11.\n\nFor the second test case, the given BST is depicted below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst_input1_ex2_deadend-7937.png\" alt=\"bst_input1_ex2\"></p>\n\n<pre><code>New nodes can be inserted after both the leaf nodes.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5 3 7 -1 -1 6 8 -1 -1 -1 -1\n2 1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>True\nTrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) consisting of positive integers, determine if it contains a 'dead end'. A dead end exists if a leaf node cannot have any further nodes inserted after it while maintaining the BST properties. Can you efficiently solve this?",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 5000",
                    "1 <= node data <= 10^9, (where node data != -1)",
                    "Where N denotes the number of nodes in the given tree."
                ],
                "testcases": [
                    {
                        "input": "root = [10, 6, 12, 2, 8, 11, 15, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "True",
                        "explanation": "The BST contains a dead end because node 11 is a leaf, and no further nodes can be inserted after it without violating BST properties."
                    },
                    {
                        "input": "root = [7, 4, 8, -1, -1, -1, -1]",
                        "output": "False",
                        "explanation": "The BST does not contain a dead end. New nodes can be inserted after both leaf nodes 4 and 8."
                    },
                    {
                        "input": "root = [5, 3, 7, -1, -1, 6, 8, -1, -1, -1, -1]",
                        "output": "True",
                        "explanation": "The BST contains a dead end because node 6 is a leaf node that no other nodes can connect to."
                    },
                    {
                        "input": "root = [2, 1, -1, -1, -1]",
                        "output": "True",
                        "explanation": "The BST contains a dead end since 1 is a leaf node, and we cannot insert anything below it."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a brute force solution to check whether there exists a leaf node for which it is impossible to insert any further nodes.</p>",
            "<p>Think of a solution to optimize the above approach by storing the value of nodes in a Data Structure.</p>",
            "<p>Think of a solution to reduce the memory used in the above approach by storing a range of minimum and maximum values for each node.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}