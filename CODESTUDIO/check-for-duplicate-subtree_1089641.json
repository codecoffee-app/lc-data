{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9774,
            "title": "Check for Duplicate Subtree",
            "titleSlug": "check-for-duplicate-subtree_1089641",
            "content": "<h4 id=\"given-an-arbitrary-binary-tree-consisting-of-n-nodes-each-node-is-associated-with-a-character-value-your-task-is-to-check-whether-there-exist-a-pair-of-nodes-such-that-their-subtrees-are-equal\">Given an arbitrary binary tree consisting of N nodes, each node is associated with a character value. Your task is to check whether there exist a pair of nodes such that their subtrees are equal.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>A subtree of a node X is all the nodes that are below X and X itself.\n\nA binary tree is a tree consisting of at most two children.\n\nTwo subtrees are said to be equal if they both have the same structure and the corresponding nodes in both the subtrees are associated with the same character value.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of each input has a single integer T, denoting the number of test cases.\n\nThe first line of each test case contains a single integer N, denoting the number of nodes in a tree.\n\nThe second line contains the keys of the nodes of the tree in the level order form ( # for NULL node) Refer to the example for further clarification.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Consider the binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-2021-01-19-200603-7578.png\" alt=\"altImage\"></p>\n\n<h5 id=\"the-input-of-the-tree-depicted-in-the-image-above-will-be-like\">The input of the tree depicted in the image above will be like:</h5>\n\n<pre><code>a\nb c\nd # e f\n# g # # # #\n# #\n\nExplanation :\nLevel 1 :\nThe root node of the tree is a\n\nLevel 2 :\nThe left child of a = b\nRight child of a = c\n\nLevel 3 :\nLeft child of b= d\nRight child of b = null (#)\nLeft child of c = e\nRight child of c = f\n\nLevel 4 :\nLeft child of d = null (#)\nRight child of d = g\nLeft child of e = null (#)\nRight child of e = null (#)\nLeft child of f = null (#)\nRight child of f = null (#)\n\nLevel 5 :\nLeft child of g = null (#)\nRight child of g = null (#)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (#).\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case print on a new line \u201cTrue\u201d, if there are two similar subtrees with size greater than or equal to 2, otherwise print \u201cFalse\u201d.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 500\na &lt;= node value &lt;= z\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n6\na b a c # b # # # c # # #\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>True\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>The given test case represents the following tree.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-2021-01-19-200822-7579.png\" alt=\"altImage\"></p>\n\n<pre><code>Here the subtree of 2 and 5 are the same that is \n   b\n /\nc\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n6\na a # a # a # a # a # # #\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>False\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a binary tree where each node contains a character, determine if there exist two distinct nodes within the tree such that their subtrees are structurally identical and have the same character values at corresponding nodes. A subtree must contain at least 2 nodes.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 500",
                    "a <= node value <= z"
                ],
                "testcases": [
                    {
                        "input": "root = a, nodes = [a, b, a, c, '#', b, '#', '#', '#', c, '#', '#', '#']",
                        "output": "True",
                        "explanation": "The subtrees rooted at the second and sixth nodes ('b') are identical, each containing 'b' as the root and 'c' as the left child."
                    },
                    {
                        "input": "root = a, nodes = [a, a, '#', a, '#', a, '#', a, '#', a, '#', '#', '#']",
                        "output": "False",
                        "explanation": "While there are duplicate node values, no two subtrees of size greater or equal to 2 are structurally identical."
                    },
                    {
                        "input": "root = a, nodes = [a,b,c,d,e,f,g]",
                        "output": "False",
                        "explanation": "A complete binary tree where all nodes have different values, ensures that no two subtrees are identical."
                    },
                    {
                        "input": "root = a, nodes = [a, b, b, '#', '#', '#', '#']",
                        "output": "True",
                        "explanation": "The left and right children of the root are 'b', and they have identical structure (both null). Since N = 3 (>=2), the output is True."
                    },
                    {
                        "input": "root = a, nodes = [a, b, c, '#', '#', d, e, '#', '#', '#', '#']",
                        "output": "False",
                        "explanation": "No similar subtrees with size >= 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Considering all possible pairs&nbsp;</p>",
            "<p>Try traversing the tree only once.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}