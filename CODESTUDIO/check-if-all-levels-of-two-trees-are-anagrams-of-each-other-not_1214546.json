{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10315,
            "title": "Check if all levels of two trees are anagrams of each other not",
            "titleSlug": "check-if-all-levels-of-two-trees-are-anagrams-of-each-other-not_1214546",
            "content": "<h4 id=\"you-re-given-two-binary-trees-your-task-is-to-check-if-all-the-trees-levels-are-anagrams-of-each-other-if-they-re-anagram-of-each-other-print-yes-else-print-no\">You\u2019re given two binary trees. Your task is to check if all the trees\u2019 levels are anagrams of each other. If they\u2019re anagram of each other, print \u2018Yes\u2019 else print \u2018No.\u2019</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of the input contains an integer T denoting the number of test cases.\n\nThe first line of each test case contains two integers denoting N and M, denoting the number of nodes in Tree one and Tree two.\n\nThe second line of each test contains the first tree elements in the level order form separated by a single space. If any node does not have a left or right child, take -1 in its place. \n\nThe third line of each test contains the elements of the second tree in the level order form separated by a single space. If any node does not have a left or right child, take -1 in its place. \n\nRefer to the example below.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/0000000000000614.PNG\" alt=\"Alt text\"></p>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For every test case, print \u201cYes\u201d of the given binary trees is an anagram of each other, else print \u201cNo.\u201d\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;=  N &lt;= 100\n\nWhere N is the number of nodes.\n\nTime limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>1\n3 3\n1 2 3 -1 -1 -1 -1 \n1 3 2 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>Yes\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>The first level of both trees is an anagram of each other since it only has 1. The second level of the first tree contains elements 2, 3, which is also an anagram, to the second tree\u2019s second level, including elements 3,2.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000261_1614357812_1tc.png\" alt=\"Alt text\"></p>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>1\n5 5\n1 3 2 -1 -1 5 4 -1 -1 -1 -1 \n1 2 3 4 5 -1 -1 -1 -1 -1 -1   \n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>Yes\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h4>\n\n<pre><code>The first level of both trees contains 1. Hence they are an anagram of each other. The second level of the first tree has 3,2, is an anagram to the second level of the second tree, which contains 2,3, and the third level of the first tree contains 5,4, which is also an anagram to the third level of the second tree, which includes 4,5.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000263_1614358006_2tc%20(1).png\" alt=\"Alt text\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two binary trees represented in level order, determine if the nodes at each level of the two trees are anagrams of each other. Anagrams are sequences that contain the same elements with the same frequency, but possibly in a different order. If all levels are anagrams, output 'Yes'; otherwise, output 'No'. Note that a node value of -1 indicates a null node.",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= N <= 100 (Number of nodes in a tree)"
                ],
                "testcases": [
                    {
                        "input": "3 3\n1 2 3 -1 -1 -1 -1\n1 3 2 -1 -1 -1 -1",
                        "output": "Yes",
                        "explanation": "The first level of both trees contains only the value 1. The second level of the first tree contains 2 and 3, while the second level of the second tree contains 3 and 2.  Since {2,3} and {3,2} are anagrams, the output is 'Yes'."
                    },
                    {
                        "input": "5 5\n1 3 2 -1 -1 5 4 -1 -1 -1 -1\n1 2 3 4 5 -1 -1 -1 -1 -1 -1",
                        "output": "Yes",
                        "explanation": "The first level of both trees contains 1. The second level of the first tree contains 3 and 2, and the second level of the second tree contains 2 and 3, which are anagrams. The third level of the first tree contains 5 and 4, and the third level of the second tree contains 4 and 5, which are also anagrams. Therefore, the output is 'Yes'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Nodes at each level should be equal.</p>",
            "<p>Try to solve using hashing</p>",
            "<p>Nodes at each level should be equal.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}