{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10007,
            "title": "Check if one string is a rotation of another string",
            "titleSlug": "check-if-one-string-is-a-rotation-of-another-string_1115683",
            "content": "<h4 id=\"you-are-given-two-strings-p-and-q-of-equal-length\">You are given two Strings <strong><em>&#39;P&#39;</em></strong> and <strong><em>&#39;Q&#39;</em></strong> of equal length.</h4>\n\n<p><br></p>\n\n<h4 id=\"your-task-is-to-return-1-if-string-p-can-be-converted-into-string-q-by-cyclically-rotating-it-to-the-right-any-number-of-times-possibly-zero-else-return-0\">Your task is to return 1 if String &#39;P&#39; can be converted into String &#39;Q&#39; by cyclically rotating it to the right any number of times ( Possibly Zero ), else return 0.</h4>\n\n<p><br></p>\n\n<h4 id=\"a-cyclic-rotation-to-the-right-on-string-a-consists-of-taking-string-a-and-moving-the-rightmost-character-to-the-leftmost-position-for-example-if-a-pqrst-then-it-will-be-tpqrs-after-one-cyclic-rotation-on-a\">A cyclic rotation to the right on String &#39;A&#39; consists of taking String &#39;A&#39; and moving the rightmost character to the leftmost position. For example, if &#39;A&#39; = &quot;pqrst&quot;,  then it will be &quot;tpqrs&quot;  after one cyclic rotation on &#39;A&#39;.</h4>\n\n<p><Br></p>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Consider the two strings &#39;P&#39; = &quot;abfyg&quot; and &#39;Q&#39; = &quot;gabfy&quot; \n\nIf we cyclically rotate String &#39;P&#39; to the right once. The resulting string P becomes &quot;gabfy&quot; which is equal to String &#39;Q&#39;. \n\nTherefore it is possible to convert String &#39;P&#39; to String &#39;Q&#39;.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains the String &#39;P&#39;.\nThe second line contains the String &#39;Q&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line contains 1 if String &#39;P&#39; can be converted to String &#39;Q&#39; by cyclically rotating it to the right any number of times, otherwise 0.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>abac\nbaca\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>Let&#39;s try rotating the String &#39;P&#39; to the right and try all the possible rotations:\n\n1) If we rotate &quot;abac&quot; to the right, the resulting string becomes &quot;caba&quot;.\n\n2) If we rotate &quot;caba&quot; to the right, the resulting string becomes &quot;acab&quot;.\n\n3) If we rotate &quot;acab&quot; to the right, the resulting string becomes &quot;baca&quot; which is equal to String &#39;Q&#39;.\n\nTherefore it is possible to convert String &#39;P&#39; to String &#39;Q&#39;. Hence, we will return 1 in this case.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>aabca\nbacaa\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= |P| , |Q| &lt;= 10^5\n|P| = |Q|\n\nString &#39;P&#39; and &#39;Q&#39; have the same length and contain only lowercase English letters.\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve this in O(N) time?\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 107,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, P and Q, of equal length. Determine if string P can be transformed into string Q by cyclically rotating P to the right any number of times (including zero rotations). A cyclic right rotation shifts the rightmost character to the leftmost position. Return 1 if P can be converted to Q, otherwise return 0.",
                "constraints": [
                    "1 <= |P|, |Q| <= 10^5",
                    "|P| = |Q|",
                    "Strings P and Q contain only lowercase English letters.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "abac\nbaca",
                        "output": "1",
                        "explanation": "String 'P' = \"abac\" can be converted to 'Q' = \"baca\" with three right cyclic rotations: 'abac' -> 'caba' -> 'acab' -> 'baca'."
                    },
                    {
                        "input": "aabca\nbacaa",
                        "output": "0",
                        "explanation": "String 'P' = \"aabca\" cannot be converted to 'Q' = \"bacaa\" by any number of right cyclic rotations."
                    },
                    {
                        "input": "abfyg\ngabfy",
                        "output": "1",
                        "explanation": "String 'P' = \"abfyg\" can be converted to 'Q' = \"gabfy\" with one right cyclic rotation: 'abfyg' -> 'gabfy'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to generate all the cyclic rotations of the first string and compare them with the second string.</p>",
            "<p>Try to make a new string in which all the rotations of the original string are present as substrings.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n\r\n    Where 'N' denotes the length of both strings 'P' and 'Q'.\r\n*/\r\n\r\n// Function that checks whether string 'a' is present in string 'b' as substring using KMP algorithm.\r\nint isSubstring(string &a, string &b)\r\n{\r\n    // Finding the length of both strings.\r\n    int m = a.length();\r\n    int n = b.length();\r\n\r\n    // Defining and initializing the pointer variables to preprocess the string 'a'.\r\n    int i = 1, j = 0;\r\n\r\n    // Defining the lps array.\r\n    int lps[m] = {0};\r\n\r\n    while (i < m)\r\n    {\r\n\r\n        // If the ith index of string 'a' matches with its jth index, then store the value 'j'+1 at lps[i] and increment both 'i' and 'j'.\r\n        if (a[i] == a[j])\r\n        {\r\n            lps[i] = j + 1;\r\n            i++;\r\n            j++;\r\n        }\r\n        // If the ith index of 'a' does not match with its jth index of 'a' and 'j' > 0, then 'j' redirects to lps[j-1].\r\n        else if (j > 0)\r\n        {\r\n            j = lps[j - 1];\r\n        }\r\n        // If none of the above condition matches then make lps[i] as 0 and increment 'i'.\r\n        else\r\n        {\r\n            lps[i] = 0;\r\n            i++;\r\n        }\r\n    }\r\n\r\n    i = 0, j = 0;\r\n\r\n    // Iterating through both the strings to find a match.\r\n    while (i < n && j < m)\r\n    {\r\n        // If the ith character of 'b' matches with the jth character of 'a', then increment both 'i' and 'j'.\r\n        if (b[i] == a[j])\r\n        {\r\n            i++;\r\n            j++;\r\n        }\r\n        // If the above characters do not match and 'j' > 0, then 'j' redirects to lps[j-1].\r\n        else if (j > 0)\r\n        {\r\n            j = lps[j - 1];\r\n        }\r\n        // If none of the above mentioned condition matches, then increment 'i'.\r\n        else\r\n        {\r\n            i++;\r\n        }\r\n    }\r\n\r\n    // If 'j' is equal to 'm', then we will return 1 otherwise we will return 0.\r\n    if (j == m)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        return 0;\r\n    }\r\n}\r\n\r\nint isCyclicRotation(string &p, string &q)\r\n{\r\n    // Performing the concatenation of string 'p' with itself.\r\n    string res = p + p;\r\n\r\n    // Checking if the substring 'q' is present in the string 'res'.\r\n    return isSubstring(q, res);\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n\n    Where 'N' denotes the length of both strings 'P' and 'Q'.\n\"\"\"\n\ndef isSubstring(a: str, b: str) -> int:\n    # Finding the length of both strings.\n    m = len(a)\n    n = len(b)\n\n    # Defining and initializing the pointer variables to preprocess the string 'a'.\n    i = 1\n    j = 0\n\n    # Defining the lps array.\n    lps = [0] * m\n\n    while i < m:\n\n        # If the ith index of string 'a' matches with its jth index, then store the value 'j'+1 at lps[i] and increment both 'i' and 'j'.\n        if a[i] == a[j]:\n            lps[i] = j + 1\n            i += 1\n            j += 1\n        # If the ith index of 'a' does not match with its jth index of 'a' and 'j' > 0, then 'j' redirects to lps[j-1].\n        elif j > 0:\n            j = lps[j - 1]\n        # If none of the above condition matches then make lps[i] as 0 and increment 'i'.\n        else:\n            lps[i] = 0\n            i += 1\n\n    i = 0\n    j = 0\n\n    # Iterating through both the strings to find a match.\n    while i < n and j < m:\n        # If the ith character of 'b' matches with the jth character of 'a', then increment both 'i' and 'j'.\n        if b[i] == a[j]:\n            i += 1\n            j += 1\n        # If the above characters do not match and 'j' > 0, then 'j' redirects to lps[j-1].\n        elif j > 0:\n            j = lps[j - 1]\n        # If none of the above mentioned condition matches, then increment 'i'.\n        else:\n            i += 1\n\n    # If 'j' is equal to 'm', then we will return 1 otherwise we will return 0.\n    if j == m:\n        return 1\n    else:\n        return 0\n\ndef isCyclicRotation(p: str, q: str) -> int:\n    # Performing the concatenation of string 'p' with itself.\n    res = p + p\n\n    # Checking if the substring 'q' is present in the string 'res'.\n    return isSubstring(q, res)\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n\r\n    Where N denotes the length of both strings P and Q.\r\n*/\r\n\r\npublic class Solution\r\n{\r\n    // Function that checks whether string a is present in string b as substring using KMP algorithm.\r\n    public static int isSubstring(String a, String b)\r\n    {\r\n        // Finding the length of both strings.\r\n        int m = a.length();\r\n        int n = b.length();\r\n\r\n        // Defining and initializing the pointer variables to preprocess the string 'a'.\r\n        int i = 1, j = 0;\r\n\r\n        // Defining the lps array.\r\n        int[] lps = new int[m];\r\n\r\n        while (i < m)\r\n        {\r\n\r\n            // If the ith index of string a matches with its jth index , then store the value 'j+1' at lps[i] and increment both 'i' and 'j'.\r\n            if (a.charAt(i) == a.charAt(j))\r\n            {\r\n                lps[i] = j + 1;\r\n\r\n                i++;\r\n\r\n                j++;\r\n            }\r\n\r\n            // If the ith index of a does not match with its jth index of 'a' and 'j' > 0, then 'j' redirects to lps[j-1].\r\n            else if (j > 0)\r\n            {\r\n                j = lps[j - 1];\r\n            }\r\n\r\n            // If none of the above condition matches then make lps[i] as 0 and increment i.\r\n            else\r\n            {\r\n                lps[i] = 0;\r\n                i++;\r\n            }\r\n        }\r\n\r\n        i = 0;\r\n        j = 0;\r\n\r\n        //Iterating through both the strings to find a match.\r\n        while (i < n && j < m)\r\n        {\r\n            // If the ith character of 'b' matches with the jth character of 'a', then increment both 'i' and 'j'.\r\n            if (b.charAt(i) == a.charAt(j))\r\n            {\r\n                i++;\r\n                j++;\r\n            }\r\n\r\n            // If the above characters do not match and 'j' > 0, then 'j' redirects to lps[j-1].\r\n            else if (j > 0)\r\n            {\r\n                j = lps[j - 1];\r\n            }\r\n\r\n            // If none of the above mentioned condition matches, then increment 'i'.\r\n            else\r\n            {\r\n                i++;\r\n            }\r\n        }\r\n\r\n        // If 'j' is equal to 'm', then we will return 1 otherwise we will return 0.\r\n        if (j == m)\r\n        {\r\n            return 1;\r\n        }\r\n        else\r\n        {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    public static int isCyclicRotation(String p, String q)\r\n    {\r\n        // Performing the concatenation of string 'p' with itself.\r\n        String res = p + p;\r\n\r\n        // Checking if the substring 'q' is present in the string 'res'.\r\n        return isSubstring(q, res);\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}