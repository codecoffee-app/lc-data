{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10111,
            "title": "Check if Preorder Traversal is Valid",
            "titleSlug": "check-if-preorder-traversal-is-valid_1164410",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-positive-integers-your-task-is-to-check-whether-the-array-arr-is-a-valid-preorder-traversal-of-a-binary-search-tree\">You are given an array &#39;ARR&#39; of positive integers. Your task is to check whether the array &#39;ARR&#39; is a valid Preorder Traversal of a Binary Search Tree.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-also-called-an-ordered-or-sorted-binary-tree-is-a-rooted-binary-tree-whose-internal-nodes-each-store-a-value-greater-than-or-equal-all-the-values-in-the-nodes-left-subtree-and-less-than-those-in-its-right-subtree\">A binary search tree (BST), also called an ordered or sorted binary tree, is a rooted binary tree whose internal nodes each store a value greater than or equal all the values in the node&#39;s left subtree and less than those in its right subtree.</h4>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>Consider the array ARR = [ 7, 4, 8 ] having 3 elements. \nThis array represents the pre-order traversal of the below tree. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst-7932.png\" alt=\"bst\"></p>\n\n<pre><code>Hence, the above array &#39;ARR&#39; is a valid Preorder Traversal of a Binary Search Tree.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains an integer &#39;N&#39;, denoting the number of elements in the array &#39;ARR&#39;.\n\nThe second line of each test case contains &#39;N&#39; space-separated integers denoting the array elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, print 1 if the array represents a valid preorder traversal of a Binary Search Tree. Otherwise, print 0.\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n0 &lt;= ARR[i]  &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1</h5>\n\n<pre><code>2\n7\n4 2 1 3 6 5 7\n4\n5 4 6 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1</h5>\n\n<pre><code>For the first test case : \nConsider the below Binary Search Tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst_example-6878.png\" alt=\"bst_example\"> </p>\n\n<pre><code>Its preorder traversal is [ 4, 2, 1, 3, 6, 5, 7 ] which is equal to the input array &#39;ARR&#39;. \nTherefore, the answer is 1 in this case.\n\nFor the second test case : \nIt can be seen that for the array ARR = [ 5, 4, 6, 4 ], there does not exist a Binary Search Tree for which the above array can represent its pre-order traversal.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2</h5>\n\n<pre><code>2\n3\n6 2 6\n4\n5 6 1 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>1\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers, determine if it represents a valid preorder traversal of a Binary Search Tree (BST).",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "0 <= ARR[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "arr=[4, 2, 1, 3, 6, 5, 7]",
                        "output": "1",
                        "explanation": "The array [4, 2, 1, 3, 6, 5, 7] is a valid preorder traversal of a BST. One possible BST is a root node 4 with a left subtree having nodes [2, 1, 3] and a right subtree with nodes [6, 5, 7]."
                    },
                    {
                        "input": "arr=[5, 4, 6, 4]",
                        "output": "0",
                        "explanation": "The array [5, 4, 6, 4] is not a valid preorder traversal of any BST. After 5 and 4, 6 could be valid (right child of 5). However, 4 cannot come after 6 as the next node to be processed in the preorder traversal because it would have to be in 6's left subtree which is invalid as 4 is not less than 5 (the root)."
                    },
                    {
                        "input": "arr=[6, 2, 6]",
                        "output": "1",
                        "explanation": "The array [6, 2, 6] represents a valid preorder traversal. The root is 6, the left child is 2 and the right child is 6."
                    },
                    {
                        "input": "arr=[5, 6, 1, 4]",
                        "output": "0",
                        "explanation": "The array [5, 6, 1, 4] is not a valid preorder traversal of a BST.  6 indicates the element is in the right subtree of 5, so all subsequent elements until the right child of 6 must be greater than 5.  However, the next element 1 violates this condition."
                    },
                    {
                        "input": "arr=[1,2,3,4,5]",
                        "output": "1",
                        "explanation": "This represents a right skewed BST with nodes in ascending order"
                    },
                    {
                        "input": "arr=[5,4,3,2,1]",
                        "output": "1",
                        "explanation": "This represents a left skewed BST with nodes in descending order"
                    },
                    {
                        "input": "arr=[10,5,1,7,15,12,20]",
                        "output": "1",
                        "explanation": "This is a valid preorder traversal for a more balanced BST."
                    },
                    {
                        "input": "arr=[10]",
                        "output": "1",
                        "explanation": "A single node is always a valid BST."
                    },
                    {
                        "input": "arr=[2,1]",
                        "output": "1",
                        "explanation": "Simple example of root followed by left child"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of a recursive approach to divide the array into left subtree and right subtree and check for them independently.</p>",
            "<p>Try to think of optimizing the previous approach by using a data structure to find the first element having a greater value.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}