{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9501,
            "title": "Check if the door is open or closed",
            "titleSlug": "check-if-the-door-is-open-or-closed_1062577",
            "content": "<h4 id=\"there-are-n-doors-and-n-people-in-a-house-each-person-and-door-has-a-unique-id-ranging-from-1-to-n-a-person-can-change-the-status-of-the-door-i-e-if-the-door-is-open-then-a-person-can-close-the-door-and-vice-versa-initially-all-the-doors-are-closed-and-each-person-wants-to-change-the-status-of-all-doors-whose-id-is-a-multiple-of-the-id-of-the-person-you-need-to-find-out-the-final-status-of-all-the-doors\">There are \u2018N\u2019 doors and \u2018N\u2019 people in a house. Each person and door has a unique ID ranging from 1 to \u2018N\u2019. A person can change the status of the door i.e, if the door is open then a person can close the door and vice versa. Initially, all the doors are closed and each person wants to change the status of all doors whose ID  is a multiple of the ID of the person. You need to find out the final status of all the doors.</h4>\n\n<h4 id=\"the-answer-should-be-given-in-a-form-of-a-binary-string-where-0-represents-the-closed-door-and-1-represents-the-open-door-for-example-the-status-close-open-close-will-form-a-binary-string-010\">The answer should be given in a form of a binary string where \u20180\u2019 represents the closed door and \u20181\u2019 represents the open door. For example, the status \u201cclose open close\u201d  will form a binary string \u201c010\u201d.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe only line of each test case contains a single positive integer \u2018N\u2019 denoting the number of doors and persons.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output of each test case should contain a binary string representing the final status of doors.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve this in O(N) time and using constant extra space. The output string does not count as extra space.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^4  \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\n4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>10\n1001    \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>Test case 1:\nInitially, all the doors are closed -&gt; 00\nThe first person has an ID 1 so it will change the status of doors 1(1 * 1) and 2(1 * 2) -&gt; 11\nThe second person has an ID 2 so it will change the status of door 2 (2 * 1)-&gt; 10\n\nTest case 2:\nInitially, all the doors are closed -&gt; 0000\nThe first person has an ID 1 so it will change the status of door 1, 2, 3 and 4 -&gt; 1111\nThe second person has an ID 2 so it will change the status of door  2 and 4 -&gt; 1010\nThe third person has an ID 3 so it will change the status of door 3-&gt; 1000\nThe fourth person has an ID 4 so it will change the status of door 4 -&gt; 1001\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n6\n8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>100100\n10010000\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Imagine a row of N doors, all initially closed. There are also N people, each assigned a unique ID from 1 to N. Each person walks down the row and interacts with specific doors. A person with ID 'i' will toggle the state (open to close, or close to open) of every door whose ID is a multiple of 'i'. Your task is to determine the final state of the doors after all N people have taken their turn, representing 'closed' as '0' and 'open' as '1' in a binary string.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^4",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 2",
                        "output": "10",
                        "explanation": "Initially, doors are 00. Person 1 toggles doors 1 and 2 -> 11. Person 2 toggles door 2 -> 10."
                    },
                    {
                        "input": "n = 4",
                        "output": "1001",
                        "explanation": "Initially, doors are 0000. Person 1 toggles doors 1, 2, 3, and 4 -> 1111. Person 2 toggles doors 2 and 4 -> 1010. Person 3 toggles door 3 -> 1000. Person 4 toggles door 4 -> 1001."
                    },
                    {
                        "input": "n = 6",
                        "output": "100100",
                        "explanation": "The doors are toggled as follows:\nInitial: 000000\nPerson 1: 111111\nPerson 2: 101010\nPerson 3: 100100\nPerson 4: 100110\nPerson 5: 100111\nPerson 6: 100100"
                    },
                    {
                        "input": "n = 8",
                        "output": "10010000",
                        "explanation": "The doors are toggled as follows:\nInitial: 00000000\nPerson 1: 11111111\nPerson 2: 10101010\nPerson 3: 10010010\nPerson 4: 10011010\nPerson 5: 10011000\nPerson 6: 10010000\nPerson 7: 10010001\nPerson 8: 10010000"
                    },
                    {
                        "input": "n = 5",
                        "output": "10010",
                        "explanation": "Initially: 00000\nPerson 1: 11111\nPerson 2: 10101\nPerson 3: 10011\nPerson 4: 10010\nPerson 5: 10010"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find all multiples of every person's ID.</p>",
            "<p>Find the parity of the total number of factors of each ID.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}