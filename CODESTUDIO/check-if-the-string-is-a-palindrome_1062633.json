{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9553,
            "title": "Check If The String Is A Palindrome",
            "titleSlug": "check-if-the-string-is-a-palindrome_1062633",
            "content": "<h4 id=\"you-are-given-a-string-s-your-task-is-to-check-whether-the-string-is-palindrome-or-not-for-checking-palindrome-consider-alphabets-and-numbers-only-and-ignore-the-symbols-and-whitespaces\">You are given a string &#39;S&#39;. Your task is to check whether the string is palindrome or not. For checking palindrome, consider alphabets and numbers only and ignore the symbols and whitespaces.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>String &#39;S&#39; is NOT case sensitive.\n</code></pre>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>Let S = \u201cc1 O$d@eeD o1c\u201d.\nIf we ignore the special characters, whitespaces and convert all uppercase letters to lowercase, we get S = \u201cc1odeedo1c\u201d, which is a palindrome. Hence, the given string is also a palindrome.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The very first line of input contains an integer &#39;T&#39; denoting the number of test cases. \n\nThe first line of every test case contains the string &#39;S&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print \u201cYes\u201d if &#39;S&#39; is a palindrome, and \u201cNo\u201d otherwise.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up :</h5>\n\n<pre><code>Can you solve the problem using O(1) space complexity?\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100 \n1 &lt;= Length(S) &lt;= 10^4\n\nWhere &#39;T&#39; denotes the number of test cases and &#39;S&#39; denotes the given string.\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\nN2 i&amp;nJA?a&amp; jnI2n\nA1b22Ba\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>Yes\nNo\n</code></pre>\n\n<h5 id=\"explanation-1\">Explanation 1 :</h5>\n\n<pre><code>For the first test case, S = \u201cN2 i&amp;nJA?a&amp; jnI2n\u201d. If we ignore the special characters, whitespaces and convert all uppercase letters to lowercase, we get S = \u201cn2injaajni2n\u201d, which is a palindrome. Hence, the given string is also a palindrome.\n\nFor the second test case, S = \u201cA1b22Ba\u201d. If we ignore the special characters, whitespaces and convert all uppercase letters to lowercase, we get S = \u201ca1b22ba\u201d, which is not a palindrome. Hence, the given string is not a palindrome.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3\ncodingninjassajNiNgNidoc\n5?36@6?35\naaBBa@\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>Yes\nYes\nNo\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 485,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a string 'S'. Determine if the string is a palindrome, considering only alphanumeric characters (alphabets and numbers) and ignoring all other symbols, whitespace, and case. In other words, convert the string to lowercase, remove non-alphanumeric characters, and then check if it reads the same forwards and backward.",
                "constraints": [
                    "1 <= T <= 100 (where 'T' denotes the number of test cases)",
                    "1 <= Length(S) <= 10^4 (where 'S' denotes the given string)",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "N2 i&nJA?a& jnI2n\nA1b22Ba",
                        "output": "Yes\nNo",
                        "explanation": "Case 1: S = \u201cN2 i&nJA?a& jnI2n\u201d. After processing, it becomes \u201cn2injaajni2n\u201d, which is a palindrome.\nCase 2: S = \u201cA1b22Ba\u201d. After processing, it becomes \u201ca1b22ba\u201d, which is not a palindrome."
                    },
                    {
                        "input": "codingninjassajNiNgNidoc\n5?36@6?35\naaBBa@",
                        "output": "Yes\nYes\nNo",
                        "explanation": "Case 1: S = \u201ccodingninjassajNiNgNidoc\u201d. After processing it becomes 'codingninjassajningnidoc' which is a palindrome.\nCase 2: S = \u201c5?36@6?35\u201d. After processing it becomes '536635' which is a palindrome.\nCase 3: S = \u201caaBBa@\u201d. After processing, it becomes \u201caabba\u201d, which is not a palindrome."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>A simple and intuitive approach could be to compare the given string with its reversed form and check whether they are equal or not. Ignoring the symbols, whitespaces and case during the comparison.</p>",
            "<p>Instead of reversing the string, another approach could be to simultaneously iterate over the start and end of the string and check if the string is a palindrome. During the iteration, we ignore the special characters, whitespaces and case of the string.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n\tTime complexity: O((length(S))\r\n\tSpace Complexity: O(1)\r\n\t\r\n\tWhere S is the given string. \r\n*/\r\n\r\nvoid toLowerCase(string &s)\r\n{\t\r\n    // Traverse through the string s\r\n    for (int i = 0; i < s.length(); i++)\r\n    {\r\n        char ch = s[i];\r\n        \r\n        // Check if ch is a uppercase letter\r\n        if (ch <= 'Z' && ch >= 'A')\r\n        {\r\n            ch = ch - ('A' - 'a');\r\n            s[i] = ch;\r\n        }\r\n    }\r\n}\r\n\r\nbool checkPalindrome(string s)\r\n{\t\r\n    // Convert uppercase letter into lowercase letter\r\n    toLowerCase(s);\r\n\r\n    int i = 0;\r\n    int j = s.length() - 1;\r\n\r\n    while (i < j)\r\n    {\r\n        if (isalnum(s[i]) == 0)\r\n        {\r\n            // ith pointer points to invalid character.\r\n            ++i;\r\n        }\r\n        else if (isalnum(s[j]) == 0)\r\n        {\r\n            // jth pointer points to invalid character.\r\n            --j;\r\n        }\r\n        else if (s[i] == s[j])\r\n        {\r\n            ++i, --j;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    return true;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n\tTime complexity: O((length(S))\r\n\tSpace Complexity: O(1)\r\n\t\r\n\tWhere S is the given string. \r\n*/\r\n\r\npublic class Solution \r\n{\t\r\n    // This function check if the character c is alpha numberic\r\n    public static boolean isAlphaNumeric(char c) \r\n    {\r\n        if (!(c >= 'A' && c <= 'Z') && !(c >= 'a' && c <= 'z') && !(c >= '0' && c <= '9')) \r\n        {\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    public static void toLowercase(StringBuilder str) \r\n    {\t\r\n        // Traverse through the string s\r\n        for (int i = 0; i < str.length(); i++)\r\n        {\r\n            char ch = str.charAt(i);\r\n            \r\n            // Check if ch is a uppercase letter\r\n            if (ch <= 'Z' && ch >= 'A')\r\n            {\r\n                char c = Character.toLowerCase(ch);\r\n                str.setCharAt(i, c);\r\n            }\r\n        }\r\n    }\r\n\r\n\tpublic static boolean checkPalindrome(String s) \r\n    {\t\r\n        // Convert uppercase letter into lowercase letter\r\n        StringBuilder str = new StringBuilder(s);\r\n        toLowercase(str);\r\n        \r\n        int i = 0;\r\n        int j = s.length() - 1;\r\n\r\n        while (i < j)\r\n        {\r\n            if (!isAlphaNumeric(str.charAt(i)))\r\n            {\r\n                // ith pointer points to invalid character.\r\n                i++;\r\n            }\r\n            else if (!isAlphaNumeric(str.charAt(j)))\r\n            {\r\n                // jth pointer points to invalid character.\r\n                j--;\r\n            }\r\n            else if (str.charAt(i) == str.charAt(j))\r\n            {\r\n                i++; \r\n                j--;\r\n            }\r\n            else\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n}\r\n\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n\tTime complexity: O((length(S))\r\n\tSpace Complexity: O(1)\r\n\t\r\n\tWhere S is the given string. \r\n'''\r\n\r\ndef toLowerCase(s):\r\n\r\n    str = \"\"\r\n\r\n\t# Traverse through the string s\r\n    for i in range(len(s)):\r\n\r\n        ch = s[i]\r\n\r\n\t\t# Check if ch is a uppercase letter\r\n        if (ch <= 'Z' and ch >= 'A'):\r\n            ch = ord(ch) - (ord('A') - ord('a'))\r\n            ch = chr(ch)\r\n\r\n        str = str + ch\r\n\t\r\n    return str\r\n\r\ndef checkPalindrome(s):\r\n\r\n\t# Convert uppercase letter into lowercase letter\r\n    s = toLowerCase(s)\r\n\r\n    i = 0\r\n    j = len(s) - 1\r\n\r\n    while (i < j):\r\n\r\n        if (s[i].isalnum() == False):\r\n\r\n            # ith pointer points to invalid character.\r\n            i += 1\r\n\r\n        elif (s[j].isalnum() == False):\r\n\r\n            # jth pointer points to invalid character.\r\n            j -= 1\r\n\r\n        elif (s[i] == s[j]):\r\n            i += 1\r\n            j -= 1\r\n\r\n        else:\r\n            return False\r\n\r\n    return True",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}