{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9171,
            "title": "Check if two nodes are cousins",
            "titleSlug": "check-if-two-nodes-are-cousins_977247",
            "content": "<h4 id=\"you-are-given-an-arbitrary-binary-tree-consisting-of-n-nodes-where-each-node-is-associated-with-a-certain-value-and-two-node-values-a-and-b-you-need-to-check-if-these-nodes-are-cousins\">You are given an arbitrary binary tree consisting of N nodes, where each node is associated with a certain value,  and two node values, a and b, you need to check if these nodes are cousins.</h4>\n\n<h4 id=\"two-nodes-are-cousins-of-each-other-if-they-are-at-the-same-level-and-have-different-parents-two-nodes-are-said-to-be-at-the-same-level-if-the-distance-of-both-the-nodes-from-the-root-node-is-the-same\">Two nodes are cousins of each other if they are at the same level and have different parents. Two nodes are said to be at the same level if the distance of both the nodes from the root node is the same.</h4>\n\n<h4 id=\"a-binary-tree-bt-is-a-data-structure-in-which-each-node-has-at-most-two-children\">A binary tree (BT) is a data structure in which each node has at most two children.</h4>\n\n<h4 id=\"for-the-given-binary-tree\">For the given binary tree:</h4>\n\n<p><img src=\"https://files.codingninjas.in/graph-6519.png\" alt=\"alt txt\"></p>\n\n<pre><code>4 and 7 are cousins of each other since they are at the same level and have different parents, 3 and 2 respectively.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases  Then the test cases follow.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space.\n\nThe second line of each contains two space-separated integers which are values present as nodes in the Binary Tree. It is guaranteed that all nodes will have distinct values.\n\nRefer to the example below to understand the input format.\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-1-6520.png\" alt=\"alt txt\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, you need to return \u201cYES\u201d if the given two nodes are cousins of each other and \u201cNO\u201d, otherwise.(return without the quotes)\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The Binary Tree has only distinct elements.\nYou are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 1000\n-10^6 &lt;= data &lt;= 10^6 and data != -1\n\nTime Limit: 1 sec \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n1 2 3 -1 4 -1 -1 -1 -1\n2 3\n1 2 3 4 8 5 6 -1 -1 -1 -1 -1 -1 7 -1 -1 -1\n4 6\n1 2 3 -1 4 -1 -1 -1 -1\n3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>NO\nYES\nNO\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>Here we have 3 test cases, hence there are 2 binary trees\n\nTest Case 1: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-3-6522.png\" alt=\"alt txt\"></p>\n\n<pre><code>We can see that the nodes with values 2 and 3 are in the same level but have the same parents.\n\nTest Case 2: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-2-6521.png\" alt=\"alt txt\"></p>\n\n<pre><code>We can see that the nodes with values 4 and 6 are in the same level and have different parents, so they are cousins.\n\nTest Case 3: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-3-6522.png\" alt=\"alt txt\"></p>\n\n<pre><code>We can see that the nodes with values 3 and 4 have different parents but are not in the same level.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 3 2 4 5 -1 7 -1 -1 -1 6 -1 -1 -1 -1\n4 7\n1 2 -1 3 -1 4 -1 -1 -1\n2 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>YES\nNO\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree consisting of N nodes, where each node has a unique value, determine if two nodes with specified values 'a' and 'b' are cousins. Two nodes are cousins if they are at the same level in the tree but have different parents. The binary tree structure is defined such that each node has at most two children.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 1000 (Number of nodes in the tree)",
                    "-10^6 <= data <= 10^6 and data != -1 (Value of nodes)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 -1 4 -1 -1 -1 -1\n2 3",
                        "output": "NO",
                        "explanation": "Nodes with values 2 and 3 are at the same level but have the same parent (1), so they are not cousins."
                    },
                    {
                        "input": "1 2 3 4 8 5 6 -1 -1 -1 -1 -1 -1 7 -1 -1 -1\n4 6",
                        "output": "YES",
                        "explanation": "Nodes with values 4 and 6 are at the same level and have different parents (2 and 3, respectively), so they are cousins."
                    },
                    {
                        "input": "1 2 3 -1 4 -1 -1 -1 -1\n3 4",
                        "output": "NO",
                        "explanation": "Nodes with values 3 and 4 have different parents but are not at the same level, so they are not cousins."
                    },
                    {
                        "input": "1 3 2 4 5 -1 7 -1 -1 -1 6 -1 -1 -1 -1\n4 7",
                        "output": "YES",
                        "explanation": "Nodes with values 4 and 7 are at the same level and have different parents, therefore, they are cousins."
                    },
                    {
                        "input": "1 2 -1 3 -1 4 -1 -1 -1\n2 3",
                        "output": "NO",
                        "explanation": "Nodes with values 2 and 3 are not at the same level. Therefore, they are not cousins."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a recursive solution.</p>",
            "<p>Think of level order traversal</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}