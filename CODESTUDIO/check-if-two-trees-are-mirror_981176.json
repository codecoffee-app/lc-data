{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9203,
            "title": "Check if two trees are Mirror",
            "titleSlug": "check-if-two-trees-are-mirror_981176",
            "content": "<h4 id=\"you-are-given-two-arbitrary-binary-trees-consisting-of-n-and-m-number-of-nodes-respectively-your-task-is-to-check-whether-the-two-trees-are-mirror-of-each-other-or-not\">You are given two arbitrary binary trees consisting of N and M number of nodes respectively, your task is to check whether the two trees are mirror of each other or not.</h4>\n\n<h4 id=\"two-trees-are-said-to-be-mirror-of-each-other-if\">Two trees are said to be mirror of each other, if</h4>\n\n<pre><code>1. Roots of both the given trees are same.\n2. Left subtree of the root of the first tree is the mirror of the right subtree of the root of the second tree.\n3. Right subtree of the root of the first tree is the mirror of the left subtree of the root of the second tree.\n</code></pre>\n\n<p>For example,both the given trees are mirror image of each other:\n<img src=\"https://files.codingninjas.in/mirror-bt-3-6602.png\" alt=\"example\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains elements of the first tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nThe second line of each test case contains elements of the second tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image would be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binary-tree-2-5399.png\" alt=\"example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation:</h4>\n\n<pre><code>Level 1:\nThe root node of the tree is 1\n\nLevel 2:\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3:\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4:\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5:\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree.\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the only line of output prints \u201ctrue\u201d if two trees are mirror of each other else prints \u201cfalse\u201d.\n\nThe output for each test case is in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 80\n1 &lt;= N, M &lt;= 3000\n-10^6 &lt;= data &lt;= 10^6 and data != -1\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 and \u2018M\u2019 are the number of nodes in the given binary trees\u2019, and \u201cdata\u201d is the value of the binary tree node.\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n9 8 -1 6 1 -1 -1 -1 -1\n9 -1 8 1 6 -1 -1 -1 -1\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n3 6 7 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/mirror-binary-tree-2-6603.jpg\" alt=\"Sample Input 1\"></p>\n\n<pre><code>For the first test case, true gets printed as the second tree is the mirror image of the first tree.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/two-binary-trees-5944.png\" alt=\"Sample Input 1\"></p>\n\n<pre><code>For the second test case, false gets printed as both trees are not the mirror image of each other.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n9 8 -1 6 1 -1 -1 -1 -1\n9 -1 8 1 6 -1 -1 -1 -1\n26 10 3 4 6 -1 3 -1 30 -1 -1 -1 -1 -1 -1\n10 4 6 -1 30 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two binary trees represented by level order traversals, determine if they are mirror images of each other. Two trees are mirrors if:\n\n1.  Their roots have the same value.\n2.  The left subtree of the first tree is a mirror of the right subtree of the second tree.\n3.  The right subtree of the first tree is a mirror of the left subtree of the second tree.",
                "constraints": [
                    "1 <= T <= 80 (Number of test cases)",
                    "1 <= N, M <= 3000 (Number of nodes in each tree)",
                    "-10^6 <= data <= 10^6 and data != -1 (Node values)"
                ],
                "testcases": [
                    {
                        "input": "9 8 -1 6 1 -1 -1 -1 -1\n9 -1 8 1 6 -1 -1 -1 -1",
                        "output": "true",
                        "explanation": "The second tree is the mirror image of the first tree."
                    },
                    {
                        "input": "1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n3 6 7 -1 -1 -1 -1",
                        "output": "false",
                        "explanation": "The two trees are not mirror images of each other."
                    },
                    {
                        "input": "9 8 -1 6 1 -1 -1 -1 -1\n9 -1 8 1 6 -1 -1 -1 -1",
                        "output": "true",
                        "explanation": "The second tree is the mirror image of the first tree."
                    },
                    {
                        "input": "26 10 3 4 6 -1 3 -1 30 -1 -1 -1 -1 -1 -1\n10 4 6 -1 30 -1 -1 -1 -1",
                        "output": "false",
                        "explanation": "The two trees are not mirror images of each other."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Recursively check if the left subtree of the first tree is the mirror of the right subtree of the second subtree and vice versa.</p>",
            "<p>Use level order traversal to check equality of the left node of the first tree with the right node of the second tree and vice versa.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}