{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8984,
            "title": "Check N numbers",
            "titleSlug": "check-n-numbers_973000",
            "content": "<h4 id=\"given-an-array-arr-of-n-integers-make-a-number-from-those-set-of-all-integers-from-the-arr-such-that-if-number-of-ith-set-bits-are-greater-than-the-number-of-ith-unset-bits-then-make-that-ith-bit-of-the-new-number-as-set-bi-otherwise-make-that-ith-bit-as-unset-bit\">Given an array \u2018arr\u2019 of \u2018N\u2019 integers, make a number from those set of all integers from the \u2018arr\u2019 such that if number of \u2018ith\u2019 set bits are greater than the number of \u2018ith\u2019 unset bits then make that \u2018ith\u2019 bit of the new number as set bi otherwise make that \u2018ith\u2019 bit as unset bit.</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>There are three numbers, say 8, 5 and 10. \n8 can be written as      1 0 0 0 .\n5 can be written as      0 1 0 1.\n10 can be written as     1 0 1 0. \npositions of the bits as i j k l.\nSo we can see majority bit at ith position are set bits so ith bit will be 1. Similarly for positions of j, k and l are set as 0 0 0 respectively.\nSo the number generated is 1 0 0 0 i.e. 8. \n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases.    \n\nThen \u2018T\u2019 test cases follows:\n\nFirst line of each test case contains an integer \u2018N\u2019 representing the size of the input array \u2018arr\u2019. \n\nNext line contains \u2018N\u2019 space separated integers denoting the elements in the \u2018arr\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>Output of each test case an integer as per the condition. \n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10 ^ 3\n1 &lt;= arr[i] &lt;= 5 * (10 ^ 3)\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\n8 4 2\n3\n8 8 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0\n8\n</code></pre>\n\n<h5 id=\"explanation-for-sample-test-case-1\">Explanation for Sample Test Case 1:</h5>\n\n<pre><code>Test Case 1 :\nNumbers can be represented in bits as:\n1 0 0 0\n0 1 0 0\n0 0 1 0\ni j k l\nNumber of set bits for ith index is 1. Number of unset bits for ith index is 2. Therefore the number of unset bits for ith index is greater than the number of set bits for ith index. So ith bit for the number will be 0.\n\nSimilarly for jth, kth and lth bit will be 0. As the number of unset bits is greater than the number of set bits. Answer will be 0 0 0 0 which represents number 0.\n\nTest Case 2:\nNumbers can be represented in bits as\n1 0 0 0\n1 0 0 0\n0 0 1 0\ni j k l\n\nNumber of set bits for ith index is 2. Number of unset bits for ith index is 1. Therefore the number of set bits for ith index is greater than the number of unset bits for ith index. So ith bit for the number will be 1.\n\nSimilarly for jth, kth and lth bit will be 0. As the number of unset bits is greater than the number of set bits. Answer will be 1 0 0 0 which represents the number 8.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n1 2 3 4 5\n4\n6 7 8 9\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, construct a new number. For each bit position, if the count of set bits across all integers in the array is greater than the count of unset bits at that position, then the corresponding bit in the new number is set. Otherwise, the bit in the new number is unset. Return the resulting integer.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10 ^ 3",
                    "1 <= arr[i] <= 5 * (10 ^ 3)"
                ],
                "testcases": [
                    {
                        "input": "n = 3, nums = [8, 4, 2]",
                        "output": "0",
                        "explanation": "Numbers in bits: 8 (1000), 4 (0100), 2 (0010). \n- 1st bit: Set bits count = 1, Unset bits count = 2. Result: 0\n- 2nd bit: Set bits count = 1, Unset bits count = 2. Result: 0\n- 3rd bit: Set bits count = 1, Unset bits count = 2. Result: 0\n- 4th bit: Set bits count = 0, Unset bits count = 3. Result: 0\nThe new number is 0000, which is 0."
                    },
                    {
                        "input": "n = 3, nums = [8, 8, 2]",
                        "output": "8",
                        "explanation": "Numbers in bits: 8 (1000), 8 (1000), 2 (0010). \n- 1st bit: Set bits count = 2, Unset bits count = 1. Result: 1\n- 2nd bit: Set bits count = 0, Unset bits count = 3. Result: 0\n- 3rd bit: Set bits count = 0, Unset bits count = 3. Result: 0\n- 4th bit: Set bits count = 0, Unset bits count = 3. Result: 0\nThe new number is 1000, which is 8."
                    },
                    {
                        "input": "n = 5, nums = [1, 2, 3, 4, 5]",
                        "output": "1",
                        "explanation": "Numbers in bits: 1 (001), 2 (010), 3 (011), 4 (100), 5 (101).\n- 1st bit: Set bits count = 2, Unset bits count = 3. Result: 0\n- 2nd bit: Set bits count = 2, Unset bits count = 3. Result: 0\n- 3rd bit: Set bits count = 3, Unset bits count = 2. Result: 1\nThe new number is 001, which is 1."
                    },
                    {
                        "input": "n = 4, nums = [6, 7, 8, 9]",
                        "output": "0",
                        "explanation": "Numbers in bits: 6 (0110), 7 (0111), 8 (1000), 9 (1001).\n- 1st bit: Set bits count = 2, Unset bits count = 2. Result: 0\n- 2nd bit: Set bits count = 2, Unset bits count = 2. Result: 0\n- 3rd bit: Set bits count = 2, Unset bits count = 2. Result: 0\n- 4th bit: Set bits count = 2, Unset bits count = 2. Result: 0\nThe new number is 0000, which is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try thinking of counting the set bits and unset bits for every integer in the array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}