{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10925,
            "title": "Check whether Binary tree is Complete",
            "titleSlug": "check-whether-binary-tree-is-complete_1280147",
            "content": "<h4 id=\"you-are-given-a-binary-tree-your-task-is-to-check-whether-the-given-binary-tree-is-a-complete-binary-tree-or-not\">You are given a binary tree. Your task is to check whether the given binary tree is a Complete Binary tree or not.</h4>\n\n<h4 id=\"a-complete-binary-tree-is-a-binary-tree-whose-every-level-except-possibly-the-last-is-completely-filled-and-all-nodes-in-the-last-level-are-placed-at-the-left-end\">A Complete Binary tree is a binary tree whose every level, except possibly the last, is completely filled, and all nodes in the last level are placed at the left end.</h4>\n\n<h4 id=\"example-of-a-complete-binary-tree\">Example of a complete binary tree :</h4>\n\n<p><img src=\"https://files.codingninjas.in/screenshot_20210325_144338-8536.jpg\" alt=\"Example\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases. Then the test cases follow.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binarytree3-5126.png\" alt=\"Example Input\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print 1 if the given Binary Tree is a complete Binary Tree, otherwise, print 0.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n1 &lt;= data &lt;= 10^5 and data!=-1\n\nWhere \u2018N\u2019 is the total number of nodes in the binary tree, and &#39;data&#39; is the value of the binary tree node\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1 3 2 4 -1 -1 -1 -1 -1\n1 2 3 -1 -1 4 5 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first test case: \nThe given Binary Tree is a Complete Binary Tree. Hence, the answer is 1 in this case.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot_20210325_144338-8536.jpg\" alt=\"Example\"></p>\n\n<pre><code>For the second test case: \nThe given Binary Tree is not a complete Binary Tree. Hence, the answer is 0 in this case. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot_20210325_144426-8537.jpg\" alt=\"Example\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 2 -1 -1 -1\n5 7 8 -1 2 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree represented by its root node, determine if it is a complete binary tree. A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3000",
                    "1 <= data <= 10^5 and data != -1"
                ],
                "testcases": [
                    {
                        "input": "root=TreeNode(1), values=[1, 3, 2, 4, -1, -1, -1, -1, -1]",
                        "output": "1",
                        "explanation": "The tree represented by [1, 3, 2, 4, -1, -1, -1, -1, -1] is a complete binary tree. Level order traversal: 1 -> 3 -> 2 -> 4. Null nodes are represented by -1."
                    },
                    {
                        "input": "root=TreeNode(1), values=[1, 2, 3, -1, -1, 4, 5, -1, -1, -1, -1]",
                        "output": "0",
                        "explanation": "The tree represented by [1, 2, 3, -1, -1, 4, 5, -1, -1, -1, -1] is not a complete binary tree because node 4 and 5 exists at level 3 but 2 and 3 has null children before that. Level order traversal: 1 -> 2 -> 3 -> 4 -> 5. Null nodes are represented by -1."
                    },
                    {
                        "input": "root=TreeNode(1), values=[1, 2, -1, -1, -1]",
                        "output": "1",
                        "explanation": "The tree represented by [1, 2, -1, -1, -1] is a complete binary tree. Level order traversal: 1 -> 2. Null nodes are represented by -1."
                    },
                    {
                        "input": "root=TreeNode(5), values=[5, 7, 8, -1, 2, -1, -1, -1, -1]",
                        "output": "0",
                        "explanation": "The tree represented by [5, 7, 8, -1, 2, -1, -1, -1, -1] is not a complete binary tree. 2 appears as a left child to 7 before 7's right child can exist. The 8's level isn't completely filled before 2 appears at the same level. Null nodes are represented by -1."
                    },
                    {
                        "input": "root=TreeNode(1), values=[1]",
                        "output": "1",
                        "explanation": "A single node tree is considered a complete binary tree."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>All the Non-Null nodes of a Complete Binary tree occur consecutively in the Level order Traversal of the Tree.</p>",
            "<p>Try to think of an approach by numbering the nodes of the tree in some manner.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}