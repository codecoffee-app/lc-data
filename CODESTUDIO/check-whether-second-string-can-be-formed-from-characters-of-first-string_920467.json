{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8880,
            "title": "Check whether second string can be formed from characters of first string ",
            "titleSlug": "check-whether-second-string-can-be-formed-from-characters-of-first-string_920467",
            "content": "<h4 id=\"you-are-given-two-strings-str1-and-str2-you-need-to-check-whether-str2-can-be-formed-from-the-characters-of-str1-both-the-strings-can-contain-any-characters\">You are given two strings STR1 and STR2. You need to check whether STR2 can be formed from the characters of STR1. Both the strings can contain any characters.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>If STR1 = \u201ccodingninjas\u201d and STR2 = \u201csing\u201d. We can form the second string using the characters of the first string. This is because \u201cs\u201d, \u201ci\u201d, \u201cn\u201d, \u201cg\u201d are present in the string STR1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \nThen the T test cases follow.\nThe first line of each test case contains the first string STR1.\nThe second line of each test case contains the second string STR2.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return \u201cYES\u201d if the second string can be formed from the characters of the first string. Otherwise, return \u201dNO\u201d. (without the inverted commas)\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, and it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 \u2264 T \u2264 100\n1 \u2264 |STR1|, |STR2| \u2264 1000\n\nWhere &#39;T&#39; is the number of test cases, |STR1| and |STR2| are the lengths of the strings STR1 and STR2 respectively.\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\ncodingninjas\nsing\ngood human\n14good\ncoder\ncode\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>YES\nNO\nYES\n</code></pre>\n\n<h5 id=\"explanation-of-input-1\">Explanation of Input 1:</h5>\n\n<pre><code>The first test case has already been explained in the problem statement.\n\nFor the second test case, STR1 = \u201cgood human\u201d and STR2 = \u201c14good\u201d. We cannot form the second string using the characters of the first string. This is because \u201c1\u201d and \u201c4\u201d are not present in the string STR1.\n\nFor the third test case, STR1 = \u201ccoder\u201d and STR2 = \u201ccode. We can form the second string using the characters of the first string. This is because \u201cc\u201d, \u201co\u201d, \u201cd\u201d, \u201ce\u201d are present in the string STR1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\nmadam\nadam\nH#LLO\nhello\norange\norange\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>YES\nNO\nYES\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `str1` and `str2`, determine if `str2` can be formed using the characters present in `str1`.  The function should return \"YES\" if it is possible, and \"NO\" otherwise.  Characters can appear any number of times in either string.",
                "constraints": [
                    "1 \u2264 T \u2264 100 (where T is the number of test cases)",
                    "1 \u2264 |STR1|, |STR2| \u2264 1000 (|STR1| and |STR2| are the lengths of the input strings)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "str1 = \"codingninjas\", str2 = \"sing\"",
                        "output": "YES",
                        "explanation": "The string \"sing\" can be formed using the characters in \"codingninjas\"."
                    },
                    {
                        "input": "str1 = \"good human\", str2 = \"14good\"",
                        "output": "NO",
                        "explanation": "The string \"14good\" cannot be formed using the characters in \"good human\" because '1' and '4' are missing."
                    },
                    {
                        "input": "str1 = \"coder\", str2 = \"code\"",
                        "output": "YES",
                        "explanation": "The string \"code\" can be formed using the characters in \"coder\"."
                    },
                    {
                        "input": "str1 = \"madam\", str2 = \"adam\"",
                        "output": "YES",
                        "explanation": "The string \"adam\" can be formed using the characters in \"madam\"."
                    },
                    {
                        "input": "str1 = \"H#LLO\", str2 = \"hello\"",
                        "output": "NO",
                        "explanation": "The string \"hello\" cannot be formed using the characters in \"H#LLO\". The counts for 'l', 'e', and 'o' are incorrect and '#' isn't found"
                    },
                    {
                        "input": "str1 = \"orange\", str2 = \"orange\"",
                        "output": "YES",
                        "explanation": "The string \"orange\" can be formed using the characters in \"orange\"."
                    },
                    {
                        "input": "str1 = \"abcabc\", str2 = \"aabbcc\"",
                        "output": "YES",
                        "explanation": "The string \"aabbcc\" can be formed using the characters in \"abcabc\"."
                    },
                    {
                        "input": "str1 = \"abab\", str2 = \"ababa\"",
                        "output": "NO",
                        "explanation": "The string \"ababa\" cannot be formed from \"abab\", as 'a' would need to appear 3 times but it only appears twice"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Maintain count of characters.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}