{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9268,
            "title": "Chess Tournament",
            "titleSlug": "chess-tournament_981299",
            "content": "<h4 id=\"chess-tournament-is-going-to-be-organized-in-ninjaland-there-will-be-c-chess-players-going-to-attend-the-tournament-all-the-players-will-be-staying-in-a-hotel-the-hotel-has-n-free-rooms-available-for-the-players-where-one-player-will-choose-one-room-to-live-in-the-ith-room-is-at-position-i-in-the-hotel-all-rooms-are-in-distinct-positions\">Chess tournament is going to be organized in Ninjaland. There will be C chess players going to attend the tournament. All the players will be staying in a hotel. The hotel has N free rooms available for the players, where one player will choose one room to live in.  The ith room is at position[i] in the hotel. All rooms are in distinct positions.</h4>\n\n<h4 id=\"focus-level-of-a-chess-player-is-defined-as-the-minimum-distance-between-his-room-and-the-room-of-another-player-the-overall-focus-of-a-tournament-is-defined-as-the-minimum-focus-level-among-all-players-you-as-an-organizer-obviously-want-the-overall-focus-as-high-as-possible-so-you-assign-the-rooms-to-players-such-that-the-overall-focus-is-as-high-as-possible\">Focus level of a chess player is defined as the minimum distance between his room and the room of another player. The overall focus of a tournament is defined as the minimum focus level among all players. You as an organizer obviously want the overall focus as high as possible so you assign the rooms to players such that the overall focus is as high as possible.</h4>\n\n<h5 id=\"for-example\">For example,</h5>\n\n<pre><code>let say we have 3 players and 5 rooms available and the rooms are at positions:  1 2 3 4 6\nHere the optimal allocation is in rooms 1 3 6 and the overall focus level is 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \n\nThen the T test cases follow.\n\nThe first line of each test case contains two positive integers N and C, which represent the number of rooms in the hotel and the number of chess players.\n\nThe next line contains N space-separated positive integers representing the position of available room in the hotel.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer, representing the maximum overall focus of the tournament.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 10 ^ 4\n2 &lt;= C &lt;= N\n1 &lt;= positions[i] &lt;= 10 ^ 9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1 :</h5>\n\n<pre><code>1\n5 3\n1 2 3 4 6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample input 2 :</h5>\n\n<pre><code>2\n4 2\n5 4 2 1\n6 4\n6 7 9 13 15 11\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>4\n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h5>\n\n<pre><code>In test case 1, \nwe only have to allocate rooms to 2 players so we can assign rooms that are first and last which are 1 and 5, so our answer is 5 - 1 = 4.\n\nIn test case 2, \nthere is no way by which we can allocate rooms such that every player will have the 3 or more as its least distance to other players. So the answer is 2 and one possible allocation of rooms is as follows.\n    Player1 = 6\n    Player2 = 9\n    Player3 = 11\n    Player4 = 13 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 121,
            "dislikes": "NA",
            "rephrased": {
                "body": "A chess tournament is being held in Ninjaland with C chess players attending. They will be staying in a hotel with N available rooms. Each player occupies one room. The rooms are at distinct positions within the hotel, represented by an array. The 'focus level' of a player is the minimum distance between their room and any other player's room. The 'overall focus' of the tournament is the minimum focus level among all players. The goal is to maximize the overall focus by optimally assigning rooms to players.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 10^4",
                    "2 <= C <= N",
                    "1 <= positions[i] <= 10^9",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 3\n1 2 3 4 6",
                        "output": "2",
                        "explanation": "The optimal allocation is in rooms 1, 3, and 6. The minimum distance between any two players is 2.  For example, the distance between player 1 (room 1) and player 2 (room 3) is 2, and the distance between player 2 (room 3) and player 3 (room 6) is 3, and the distance between player 1 (room 1) and player 3 (room 6) is 5. The minimum of all distances is 2."
                    },
                    {
                        "input": "4 2\n5 4 2 1",
                        "output": "4",
                        "explanation": "We only need to allocate rooms to 2 players. An optimal assignment would be rooms at positions 1 and 5, resulting in a focus level of 5 - 1 = 4."
                    },
                    {
                        "input": "6 4\n6 7 9 13 15 11",
                        "output": "2",
                        "explanation": "An optimal room allocation that maximizes the overall focus results in a focus level of 2.  A possible allocation is: Player 1 = 6, Player 2 = 9, Player 3 = 11, Player 4 = 13."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n\t\tTime Complexity: O(N * log(max))\r\n\t\tSpace Complexity: O(1),\r\n   \r\n\t\twhere N is the total number of rooms and max is the maximum possible position for any room.\r\n\r\n*/\r\n\r\nint chessTournament( vector<int> &positions, int n , int c) \r\n{\r\n\t// Sorting all positions of empty rooms.\r\n\tsort(positions.begin(),positions.end());   \r\n\t\r\n    // l is the least possible answer and r is the max possible answer.\r\n\tint ans=0 , l=1 , r = positions[n-1]; \r\n\t\r\n    // We will find answer by using binary search.\r\n\twhile(l<=r)\r\n    { \r\n\t\t// Lets check wether the allocation is possible for mid.\r\n\t\tint mid=(l+r)/2; \r\n\t\t\r\n        // previous_room stores the previous occupied empty room.\r\n        int count=1 , previousRoom=positions[0]; \r\n        \r\n\t\tfor(int i = 1 ; i < n ; i++) \r\n        {\r\n\t\t\t// If the diffrence between current and previous room >= mid we will allocate it.\r\n\t\t\tif(positions[i]-previousRoom >= mid) \r\n            {  \r\n\t\t\t\tcount++;\r\n\t\t\t\tpreviousRoom=positions[i];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Compressing length to right half if allocation is possible.\r\n\t\tif(count >= c)\r\n        { \r\n\t\t\tans=mid;\r\n\t\t\tl=mid+1;\r\n\t\t}\r\n\r\n\t\t// Compressing length to left half if allocation is not possible.\r\n\t\telse \r\n        {  \r\n\t\t\tr=mid-1;\r\n\t\t}\r\n\t}\r\n \r\n\treturn ans;\r\n}\r\n\r\n\r\n\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N * log(max))\r\n    Space Complexity: O(1),\r\n\r\n    where N is the total number of rooms and max is the maximum possible position for any room.\r\n\r\n'''\r\n\r\ndef chessTournament(positions, n, c):\r\n\r\n    # Sorting all positions of empty rooms.\r\n    positions.sort()\r\n\r\n    # l is the least possible answer and r is the max possible answer.\r\n    ans = 0\r\n    l = 1\r\n    r = positions[n - 1]\r\n\r\n    # We will find answer by using binary search.\r\n    while (l <= r):\r\n\r\n        # Lets check wether the allocation is possible for mid.\r\n        mid = (l + r) // 2\r\n\r\n        # previous_room stores the previous occupied empty room.\r\n        count = 1\r\n        previousRoom = positions[0]\r\n\r\n        for i in range(1, n):\r\n\r\n            # If the difference between current and previous room >= mid we will allocate it.\r\n            if (positions[i] - previousRoom >= mid):\r\n                count += 1\r\n                previousRoom = positions[i]\r\n\r\n        # Compressing length to right half if allocation is possible.\r\n        if (count >= c):\r\n            l = mid + 1\r\n            ans = mid\r\n        else:\r\n            r = mid - 1\r\n\r\n    # Return the variable ans\r\n    return ans\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n        Time Complexity: O(N * log(max))\r\n        Space Complexity: O(1),\r\n\r\n        where N is the total number of rooms and max is the maximum possible position for any room.\r\n\r\n*/\r\n\r\nimport java.util.Arrays;\r\n\r\npublic class Solution \r\n{\r\n    public static int chessTournament(int[] positions, int n, int c) \r\n    {        \r\n        // Sorting all positions of empty rooms\r\n        Arrays.sort(positions);\r\n        \r\n        // l is the least possible answer and r is the max possible answer\r\n        int ans = 0, l = 1,  r = positions[n - 1];\r\n        \r\n        // We will find the answer by using binary search\r\n        while (l <= r) \r\n        {\r\n            // Lets check whether the allocation is possible for mid\r\n            int mid = (l + r) / 2;\r\n            \r\n            // previousRoom stores the previous occupied empty room\r\n            int count = 1, previousRoom = positions[0];\r\n            \r\n            for (int i = 1; i < n; i++) \r\n            {\r\n                if (positions[i] - previousRoom >= mid) \r\n                {\r\n                    count++;\r\n                    previousRoom = positions[i];\r\n                }\r\n            }\r\n\r\n            // Compressing length to right half if allocation is possible\r\n            if (count >= c) \r\n            {\r\n                ans = mid;\r\n                l = mid + 1;\r\n            }\r\n\r\n            // Compressing length to left half if allocation is not possible\r\n            else \r\n            {\r\n                r = mid - 1;\r\n            }\r\n        }\r\n\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}