{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7844,
            "title": "ChildrenSumProperty",
            "titleSlug": "childrensumproperty_790723",
            "content": "<h4 id=\"given-a-binary-tree-of-nodes-n-you-need-to-modify-the-value-of-its-nodes-such-that-the-tree-holds-the-children-sum-property\">Given a binary tree of nodes &#39;N&#39;, you need to modify the value of its nodes, such that the tree holds the Children sum property.</h4>\n\n<h4 id=\"a-binary-tree-is-said-to-follow-the-children-sum-property-if-for-every-node-of-that-tree-the-value-of-that-node-is-equal-to-the-sum-of-the-value-s-of-all-of-its-children-nodes-left-child-and-the-right-child\">A binary tree is said to follow the children sum property if, for every node of that tree, the value of that node is equal to the sum of the value(s) of all of its children nodes( left child and the right child).</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code> 1. You can only increment the value of the nodes, in other words, the modified value must be at least equal to the original value of that node.\n 2. You can not change the structure of the original binary tree.\n 3. A binary tree is a tree in which each node has at most two children.      \n 4. You can assume the value can be 0 for a NULL node and there can also be an empty tree.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer &#39;T&#39; representing the number of test cases. \n\nThe first and the only line of each test case will contain the values of the nodes of the tree in the level order form ( -1 for NULL node) Refer to the example for further clarification.\nExample : \nConsider the binary tree :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-10-09-12-55-45-5134.png\" alt=\"abcd\"></p>\n\n<pre><code>The input of the tree depicted in the image above will be like : \n\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<p>##### Note :\n    The above format was just to provide clarity on how the input is formed for a given tree. \n    The sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:</p>\n\n<pre><code>1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, you just need to update the given tree in-place. If the updated tree satisfies all the conditions, the output will be shown as \u201cValid\u201d, else the output will be \u201cInvalid\u201d.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n0 &lt;= N &lt;= 10^2\n1 &lt;= node.Value &lt;= 10^6\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n2 35 10 2 3 5 2 -1 -1 -1 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>Valid ( One of the possible answers is : 45 35 10 32 3 8 2 -1 -1 -1 -1 -1, thus if the user modifies the given tree like this, the output printed will be valid).\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>The tree can be represented as follows :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-10-09-12-55-59-5133.png\" alt=\"altimage\"></p>\n\n<pre><code>The value at the root node is 2 which is less than the sum of its children\u2019s values (35 + 10). So we simply increase the value at the root node to 45. The node with value  = 35 has children with values 2 and 3 so their sum i.s 2 + 3 = 5 &lt; 35. As we can&#39;t decrement any value, so instead we have to increase the sum of children and thus we update 35&#39;s children (2 and 3) as 30 and 5 so that 30 + 5 = 35 and the same is done for the children of the node with value = 10.\n</code></pre>\n\n<h4 id=\"the-final-tree-looks-like-this\">The final tree looks like this :</h4>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-10-09-12-56-05-5132.png\" alt=\"altimage\"></p>\n\n<pre><code>Note that there can be many other valid solutions.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n10 5 5 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>Valid\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 191,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of nodes, modify the value of its nodes such that the tree holds the Children Sum Property. A binary tree follows the Children Sum Property if, for every node, the value of that node is equal to the sum of its children's values (left and right child). You can only increment node values; the modified value must be at least equal to the original value. The structure of the tree cannot be changed. Assume a NULL node has a value of 0, and an empty tree is possible.",
                "constraints": [
                    "1 <= T <= 100",
                    "0 <= N <= 100",
                    "1 <= node.Value <= 1000000"
                ],
                "testcases": [
                    {
                        "input": "2 35 10 2 3 5 2 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "Valid",
                        "explanation": "The root node (2) is less than the sum of its children (35 + 10 = 45). Increase the root's value to 45. The node with value 35 has children with values 2 and 3 (sum = 5), so increment the children appropriately so sum becomes 35. Similarly for other subtrees. Note that there can be many other valid solutions. One such solution could be 45 35 10 32 3 8 2 -1 -1 -1 -1 -1 -1 -1 -1 "
                    },
                    {
                        "input": "10 5 5 -1 -1 -1 -1",
                        "output": "Valid",
                        "explanation": "The root node (10) is equal to the sum of its children (5 + 5 = 10). Therefore, the tree already satisfies the Children Sum Property."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Update subtrees first then the parent of that subtree.</p>",
            "<p>Try using any other traversal method to update the values.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time complexity : O(N)\n    Space complexity : O(N)\n\n    Where 'N' is the number of nodes.\n*/\n\nvoid changeTree(BinaryTreeNode<int> *root) {\n\n    // Base Cases.\n    if (root == NULL) {\n        return;\n    }\n\n    if (root->left == NULL && root->right == NULL) {\n        return;\n    }\n\n    // Calculate the difference between the root and its children.\n    int difference = root->data - ((root->left ? root->left->data : 0) + (root->right ? root->right->data : 0));\n\n    /*\n        if the differnce is positive, increment either\n        left or right child node.\n    */\n    if (difference > 0) {\n        if (root->left) {\n            root->left->data += difference;\n        }\n        else {\n            root->right->data += difference;\n        }\n    }\n\n    // Call this function again for the left and right subtree.\n    changeTree(root->left);\n    changeTree(root->right);\n\n    // Update root with the sum of the left and right child's data.\n    root->data =  ((root->left ? root->left->data : 0) + (root->right ? root->right->data : 0));\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity : O(N)\r\n    Space complexity : O(N)\r\n\r\n    Where 'N' is the number of nodes.\r\n*/\r\n\r\npublic class Solution {\r\n    public static void changeTree(BinaryTreeNode<Integer> root) {\r\n\r\n        // Base Cases.\r\n        if (root == null) {\r\n            return;\r\n        }\r\n\r\n        if (root.left == null && root.right == null) {\r\n            return;\r\n        }\r\n\r\n        // Calculate the difference between the root and its children.\r\n        int differnce = root.data\r\n                - ((root.left != null ? root.left.data : 0) + (root.right != null ? root.right.data : 0));\r\n\r\n        /*\r\n         * If the differnce is positive, increment either left or right child node.\r\n         */\r\n        if (differnce > 0) {\r\n            if (root.left != null) {\r\n                root.left.data += differnce;\r\n            }\r\n\r\n            else {\r\n                root.right.data += differnce;\r\n            }\r\n\r\n        }\r\n\r\n        // Call this function again for the left and right subtree.\r\n        changeTree(root.left);\r\n        changeTree(root.right);\r\n\r\n        // Update root with the sum of the left and right child's data.\r\n        root.data = ((root.left != null ? root.left.data : 0) + (root.right != null ? root.right.data : 0));\r\n    }\r\n\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time complexity : O(N)\n    Space complexity : O(N)\n\n    Where 'N' is the number of nodes.\n'''\n\ndef changeTree(root):\n    \n    # Base Cases.\n    if root == None:\n        return \n    \n    if root.left == None and root.right == None:\n        return \n    \n    # Calculate the difference between the root and its children.\n    \n    if root.left != None:\n        difference = root.data - root.left.data\n    else:\n        difference = root.data\n    if root.right != None:\n        difference += root.data\n        \n    '''\n        If the difference is positive, increment either left or right child node.\n    '''\n    if (difference > 0):\n        if root.left != None:\n            root.left.data += difference\n            \n        else:\n            root.right.data += difference\n            \n    # Call this function again for the left and right subtree.\n    changeTree(root.left)\n    changeTree(root.right)\n    \n    # Update root with the sum of the left and right child's data.\n    if root.left != None:\n        if root.right != None:\n            root.data = root.left.data + root.right.data\n        else:\n            root.data = root.left.data\n    else:\n        if root.right != None:\n            root.data = root.right.data\n        ",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}