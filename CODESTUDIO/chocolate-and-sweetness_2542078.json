{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15483,
            "title": "Chocolate and Sweetness",
            "titleSlug": "chocolate-and-sweetness_2542078",
            "content": "<h4 id=\"ninja-wants-to-try-some-sweets-in-a-sweet-shop-there-are-n-types-of-sweets-available-at-that-shop-each-sweet-has-a-sweetness-level-and-expiry-date-ninja-is-fond-of-sweets-so-he-sets-a-specific-sweetness-level-x-and-is-only-likely-to-buy-the-sweets-having-a-sweetness-level-greater-than-equal-to-x-but-ninja-also-wants-fresher-sweets-so-he-only-buys-having-expiry-date-strictly-greater-than-y-can-you-help-ninja-to-find-the-number-of-sweets-suitable-for-him-to-buy\">Ninja wants to try some sweets in a sweet shop. There are \u2018N\u2019 types of sweets available at that shop. Each sweet has a sweetness level and expiry date. Ninja is fond of sweets, so he sets a specific sweetness level \u2018X\u2019 and is only likely to buy the sweets having a sweetness level greater than equal to \u2018X\u2019. But Ninja also wants fresher sweets, so he only buys having expiry date strictly greater than \u2018Y\u2019. Can you help Ninja to find the number of sweets suitable for him to buy?</h4>\n\n<h4 id=\"you-are-given-two-arrays-sweet-and-expiry-both-having-n-values-corresponding-to-the-sweetness-and-expiry-date-of-ith-sweet-ninja-will-ask-q-queries-with-x-as-the-minimum-sweetness-level-and-y-as-the-minimum-expiry-date-your-task-is-to-answer-all-q-queries-and-tell-the-number-of-sweets-satisfying-the-given-condition-for-each-query\">You are given two arrays, \u2018SWEET\u2019 and \u2018EXPIRY\u2019, both having \u2018N\u2019 values corresponding to the sweetness and expiry date of ith sweet. Ninja will ask \u2018Q\u2019 queries with \u2018X\u2019 as the minimum sweetness level and \u2018Y\u2019 as the minimum expiry date. Your task is to answer all \u2018Q\u2019 queries and tell the number of sweets satisfying the given condition for each query.</h4>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>For the given if N = \u20185\u2019, \u2018SWEET\u2019 = [1,3,6,7,2] and \u2018EXPIRY = [10,7,2,6,4].\nAnd the query is \u2018X\u2019=2  and  \u2018Y\u2019 =6 ,then the number of sweets satisfying the condition is only 1 (having sweetness 3 and expiry date 7). \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains two integers, \u2018N\u2019 and \u2018Q\u2019, representing the number of sweets and the number of queries.\nThe second line of each test case contains a \u2018SWEET\u2019 array.\nThe third line contains the \u2018EXPIRY\u2019 array.\nThe next \u2018Q\u2019 line contains two integers \u2018X\u2019 and \u2018Y\u2019, for the respective query.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print \u2018Q\u2019 values corresponding to the answer for each query.  \nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 100000.\n1 &lt;= Q &lt;= 100000.\n1 &lt;= SWEET[i] &lt;=100000 \n1 &lt;= EXPIRY[i] &lt;= 100000\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5 2\n1 3 6 7 2\n10 7 2 6 4\n2 6\n3 9\n3 1 \n1 5 7\n11 7 10\n3 6 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 0\n2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case,\nFor the first query, the number of sweets having sweetness greater than 2 and expiry greater than 6 is only 1(Sweet number 4 ).\nFor the second query, there is no sweet satisfying both the condition. Hence the answer is 0.\n</code></pre>\n\n<p>Hence the answer is [1,0].</p>\n\n<pre><code>For the second test case:\nThe number of sweets satisfying both the conditions is 2. (2nd and the 3rd sweet.)\n Hence the answer is [2].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 2\n2 9 4 8 7 \n3 8 3 2 8 \n7 9\n3 3\n4 3\n9 2 6 4 \n1 10 10 2 \n1 2\n7 2\n2 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0 2\n2 0 2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "A sweet shop has N types of sweets, each with a sweetness level and an expiry date. Given two arrays representing the sweetness and expiry of each sweet, and a set of queries where each query specifies a minimum sweetness level (X) and a minimum expiry date (Y), determine the number of sweets that satisfy both conditions for each query. A sweet is suitable if its sweetness level is greater than or equal to X and its expiry date is strictly greater than Y.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 100000",
                    "1 <= Q <= 100000",
                    "1 <= SWEET[i] <= 100000",
                    "1 <= EXPIRY[i] <= 100000"
                ],
                "testcases": [
                    {
                        "input": "n = 5, q = 2, expiry = [10, 7, 2, 6, 4], sweetness = [1, 3, 6, 7, 2], query = [[2, 6], [3, 9]]",
                        "output": "1 0",
                        "explanation": "For the first query (X=2, Y=6), only the sweet with sweetness 3 and expiry 7 satisfies the condition (sweetness >= 2 and expiry > 6). For the second query (X=3, Y=9), no sweet satisfies the condition (sweetness >= 3 and expiry > 9)."
                    },
                    {
                        "input": "n = 3, q = 1, expiry = [11, 7, 10], sweetness = [1, 5, 7], query = [[3, 6]]",
                        "output": "2",
                        "explanation": "For the query (X=3, Y=6), the sweets with (sweetness 5, expiry 7) and (sweetness 7, expiry 10) satisfy the condition (sweetness >= 3 and expiry > 6)."
                    },
                    {
                        "input": "n = 5, q = 2, expiry = [3, 8, 3, 2, 8], sweetness = [2, 9, 4, 8, 7], query = [[7, 9], [3, 3]]",
                        "output": "0 2",
                        "explanation": "For the first query (X=7, Y=9), no sweet satisfies the condition (sweetness >= 7 and expiry > 9). For the second query (X=3, Y=3), the sweets with (sweetness 9, expiry 8) and (sweetness 7, expiry 8) satisfy the condition (sweetness >= 3 and expiry > 3)."
                    },
                    {
                        "input": "n = 4, q = 3, expiry = [1, 10, 10, 2], sweetness = [9, 2, 6, 4], query = [[1, 2], [7, 2], [2, 2]]",
                        "output": "2 0 2",
                        "explanation": "For the first query (X=1, Y=2), the sweets with (sweetness 2, expiry 10) and (sweetness 6, expiry 10) satisfy the condition. For the second query (X=7, Y=2), no sweets satisfy the condition (sweetness >= 7 and expiry > 2). For the third query (X=2, Y=2), the sweets with (sweetness 2, expiry 10) and (sweetness 6, expiry 10) satisfy the condition."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>&nbsp;</strong>Try to check each sweet for each query.</p>",
            "<p>Try to use any data structure that stores the values in sorted order.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}