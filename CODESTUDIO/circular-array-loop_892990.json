{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8517,
            "title": "Circular Array Loop",
            "titleSlug": "circular-array-loop_892990",
            "content": "<h4 id=\"you-are-given-a-circular-array-arr-of-size-n-consisting-of-positive-and-negative-integers-for-each-index-i-if-arr-i-is-positive-then-move-arr-i-steps-in-clockwise-direction-else-move-arr-i-steps-in-counterclockwise-direction\">You are given a circular array &#39;ARR&#39; of size &#39;N&#39;, consisting of positive and negative integers. For each index &#39;i&#39;, if ARR[i] is positive then move ARR[i] steps in clockwise direction else move ARR[i] steps in counterclockwise direction.</h4>\n\n<h4 id=\"assume-that-the-first-arr-0-and-last-element-arr-n-1-are-adjacent-to-each-other-i-e-when-we-move-in-the-counterclockwise-direction-the-next-element-for-arr-0-is-arr-n-1-and-similarly-when-we-move-in-the-clockwise-direction-the-next-element-for-arr-n-1-is-arr-0\">Assume that the first ( ARR[0] ) and last element ( ARR[N - 1] ) are adjacent to each other i.e. when we move in the counterclockwise direction, the next element for ARR[0] is ARR[N - 1] and similarly, when we move in the clockwise direction, the next element for ARR[N - 1] is ARR[0].</h4>\n\n<h4 id=\"determine-if-there-is-a-cycle-present-in-the-array-or-not-a-cycle-must-hold-the-following-conditions\">Determine if there is a cycle present in the array or not. A cycle must hold the following conditions:</h4>\n\n<pre><code>1. A cycle must start and end at the same index.\n\n2. The cycle\u2019s length should be greater than 1. For example, if the given array is {1,-2,4,1} then there is a cycle of length 1 from index 3 (1 based indexing). \n\n3. All movements in a cycle must follow a single direction, they should be either in a clockwise or counterclockwise direction.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \n\nThe first line of each test case contains a positive integer N, which represents the size of the circular array.\n\nThe next line contains &#39;N&#39; single space-separated integers representing the elements of the circular array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print \u201cTrue\u201d if there is a cycle, else print \u201cFalse\u201d.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n-10^5 &lt;= ARR[i] &lt;= 10^5 (ARR[i] != 0)\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3\n5\n2 -1 1 2 2\n2\n-1 2\n5\n-2 1 -1 -2 -2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>True\nFalse\nFalse\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>In the 1st test case, there is a cycle, from index 0 -&gt; 2 -&gt; 3 -&gt; 0. The cycle&#39;s length is 3.\n\nIn the 2nd test case, there is no cycle. The movement from index 1 -&gt; 1 -&gt; 1 ... is not a cycle, because the cycle&#39;s length is 1.\n\nIn the 3rd test case,  there is no cycle. The movement from index 1 -&gt; 2 -&gt; 1 is not a cycle, because all movements in a cycle must follow a single direction.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4\n-1 2 2 -1\n2\n1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>False\nTrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -6,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a circular array 'ARR' of size 'N' consisting of positive and negative integers. Each element dictates movement: a positive value at index 'i' means move ARR[i] steps clockwise, while a negative value means move ARR[i] steps counterclockwise.\n\nThe array is circular, meaning the first element (ARR[0]) and the last element (ARR[N-1]) are adjacent. Moving counterclockwise from ARR[0] leads to ARR[N-1], and moving clockwise from ARR[N-1] leads to ARR[0].\n\nDetermine if a cycle exists in the array. A valid cycle must meet these conditions:\n\n1.  The cycle must start and end at the same index.\n2.  The cycle's length must be greater than 1 (it cannot be a loop of just one element).\n3.  All movements within the cycle must follow the same direction (either all clockwise or all counterclockwise).",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "-10^5 <= ARR[i] <= 10^5 (ARR[i] != 0)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n2 -1 1 2 2",
                        "output": "True",
                        "explanation": "There is a cycle: 0 -> 2 -> 3 -> 0. The cycle's length is 3 and moves are in same direction."
                    },
                    {
                        "input": "2\n-1 2",
                        "output": "False",
                        "explanation": "There is no cycle because the movement from index 1 -> 1 -> 1 ... is not a cycle, because the cycle's length is 1."
                    },
                    {
                        "input": "5\n-2 1 -1 -2 -2",
                        "output": "False",
                        "explanation": "There is no cycle because the movement from index 1 -> 2 -> 1 is not a cycle, because all movements in a cycle must follow a single direction."
                    },
                    {
                        "input": "4\n-1 2 2 -1",
                        "output": "False",
                        "explanation": null
                    },
                    {
                        "input": "2\n1 1",
                        "output": "True",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For each index, check If there exists a cycle passing through that index.</p>",
            "<p>Think of a way in which you visit every index only once.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}