{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10498,
            "title": "Circular Permutation in Binary Representation",
            "titleSlug": "circular-permutation-in-binary-representation_1229778",
            "content": "<h4 id=\"you-are-given-the-two-integers-n-and-x-your-task-is-to-find-an-array-p-such-that\">You are given the two integers &#39;N&#39; and &#39;X&#39;. Your task is to find an array &#39;P&#39; such that:</h4>\n\n<pre><code>&#39;P&#39; is a permutation of (0, 1, 2, ..., 2 ^ (N  - 1)).\n\nThe first element of the array &#39;P&#39; is &#39;X&#39;, i.e., P[0] = X.\n\nAdjacent elements of &#39;P&#39; (i.e., P[i] and P[i + 1]) differ by only 1 bit in their binary representation.\n\nThe first and the last element (i.e., P[0] and P[2^N -1]) are also considered as adjacent elements.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>For N = 2, [0,1,2,3], [0,2,3,1], [1,2,3,0] are some of the valid permutations but [0,0,1,2], [1,2,3,4], [1,1,1,3] are not.\n\nIt is guaranteed that an array &#39;P&#39; always exits with the given requirements.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39;, which denotes the number of test cases or queries to be run. Then, the &#39;T&#39; test cases follow. \n\nThe first line and only line of each test case contain 2 positive integers, &#39;N&#39; and &#39;X&#39;, as described in the problem statement.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print in a new line an array &#39;P&#39; of size 2^N denoting a permutation of (0,1, ..., 2^N -1) with the given requirements, as described in the problem statement.\n\nIf there exist multiple permutations satisfying the above conditions, then you can print any.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 13\n0 &lt;= X &lt; 2^N\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>The binary representation of the array [1,0] is also (1,0) in which adjacent elements differ by only 1 bit.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n2 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0 1 3 2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, 'N' and 'X', construct an array 'P' that satisfies the following conditions:\n\n1.  'P' must be a permutation of the numbers from 0 to 2<sup>N</sup> - 1.\n2.  The first element of 'P' must be 'X' (i.e., P[0] = X).\n3.  Adjacent elements in 'P' must differ by exactly one bit in their binary representation.\n4.  The first and last elements of 'P' are also considered adjacent, so they must also differ by only one bit.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 13",
                    "0 <= X < 2^N"
                ],
                "testcases": [
                    {
                        "input": "n = 1, x = 1",
                        "output": "1 0",
                        "explanation": "The binary representation of the array [1, 0] is also (1, 0), in which adjacent elements differ by only 1 bit."
                    },
                    {
                        "input": "n = 2, x = 0",
                        "output": "0 1 3 2",
                        "explanation": "The array [0, 1, 3, 2] is a permutation of [0, 1, 2, 3]. 0 and 1 differ by 1 bit. 1 and 3 (01 and 11) differ by 1 bit. 3 and 2 (11 and 10) differ by 1 bit. 0 and 2 (00 and 10) differ by 1 bit."
                    },
                    {
                        "input": "n = 3, x = 5",
                        "output": "5 4 6 7 3 1 0 2",
                        "explanation": "One possible valid permutation for N = 3 and X = 5. Each adjacent pair of numbers differ by only one bit, and it is a circular permutation."
                    },
                    {
                        "input": "n = 4, x = 10",
                        "output": "10 11 9 8 12 13 15 14 6 7 5 4 0 1 3 2",
                        "explanation": "One possible valid permutation for N=4 and X=10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><i>Think of using n-bit gray code.</i></p>",
            "<p><i>Think of using xor to generate the gray code.</i></p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}