{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10138,
            "title": "Circular Queue",
            "titleSlug": "circular-queue_1170058",
            "content": "<h4 id=\"you-will-be-given-q-queries-you-need-to-implement-a-circular-queue-according-to-those-queries-each-query-will-belong-to-one-of-these-two-types\">You will be given \u2018Q\u2019 queries. You need to implement a circular queue according to those queries. Each query will belong to one of these two types:</h4>\n\n<pre><code>1 \u2018X\u2019: Enqueue element \u2018X\u2019 into the end of the nth queue. Returns true if the element is enqueued, otherwise false.\n\n2: Dequeue the element at the front of the nth queue. Returns -1 if the queue is empty, otherwise, returns the dequeued element.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Enqueue means adding an element to the end of the queue, while Dequeue means removing the element from the front of the queue.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains two space-separated integers \u2018N\u2019 and \u2018Q\u2019 denoting the size of queue and number of queries, respectively. \n\nThe next \u2018Q\u2019 lines specify the type of operation/query to be performed on the data structure.\n\nEach query contains an integer \u2018P\u2019 denoting the type of query.\n\nFor query of type 1, the integer \u2018P\u2019 is equal to 1 and it is followed by one integer \u2018X\u2019 denoting the element on which operation is to be performed.\n\nFor query of type 2, the integer \u2018P\u2019 is equal to 2 which dequeues the element.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each query, return the output returned after performing the corresponding operation on the data structure. \n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. You just have to complete the given functions.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 1000\n1 &lt;= Q &lt;= 10^5 \n1 &lt;= P &lt;= 2\n1 &lt;= X &lt;= 10^5\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3 7\n1 2 \n1 3 \n2 \n1 4 \n1 6 \n1 7 \n2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True \nTrue\n2\nTrue\nTrue\nFalse\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h5>\n\n<pre><code>For this input, we have the size of the queue, &#39;N&#39; = 3, and the number of queries, &#39;Q&#39; = 7.\n\nOperations performed on the queue are as follows:\n\npush(2): Push element \u20182\u2019 into the queue. This returns true.\npush(3): Push element \u20183\u2019 into the queue. This returns true.\npop(): Pop the top element from the queue. This returns 2.\npush(4): Push element \u20184\u2019 into the queue. This returns true.\npush(6): Push element \u20186\u2019 into the queue. This returns true.\npush(7): Push element \u20187\u2019 into the queue. This returns false because the queue is full.\npop(): Pop the top element from the queue. This returns 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4 7\n1 11 \n1 51 \n1 26 \n2 \n1 6\n2\n2 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>True\nTrue\nTrue\n11\nTrue\n51\n26\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h5>\n\n<pre><code>For this input, we have the size of the queue, &#39;N&#39; = 3, and the number of queries, &#39;Q&#39; = 7.\n\nOperations performed on the queue are as follows:\n\npush(11): Push element \u201811\u2019 into the queue. This returns true.\npush(51): Push element \u201851\u2019 into the queue. This returns true.\npush(26): Push element \u201826\u2019 into the queue. This returns true.\npop(): Pop the top element from the queue. This returns 11.\npush(6): Push element \u20186\u2019 into the queue. This returns true.\npop(): Pop the top element from the queue. This returns 51.\npop(): Pop the top element from the queue. This returns 26.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 121,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a circular queue to handle 'Q' queries. The queue has a fixed size of 'N'. Each query is one of the following types:\n\n1.  Enqueue (1 X): Add element 'X' to the rear of the queue. Return `true` if successful, `false` if the queue is full.\n2.  Dequeue (2): Remove the element at the front of the queue. Return the dequeued element if the queue is not empty. Return -1 if the queue is empty.",
                "constraints": [
                    "1 <= N <= 1000",
                    "1 <= Q <= 10^5",
                    "1 <= P <= 2",
                    "1 <= X <= 10^5",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 7\n1 2\n1 3\n2\n1 4\n1 6\n1 7\n2",
                        "output": "True\nTrue\n2\nTrue\nTrue\nFalse\n3",
                        "explanation": "Queue size N = 3, 7 queries.\n- Enqueue 2: Returns True. Queue: [2]\n- Enqueue 3: Returns True. Queue: [2, 3]\n- Dequeue: Returns 2. Queue: [3]\n- Enqueue 4: Returns True. Queue: [3, 4]\n- Enqueue 6: Returns True. Queue: [3, 4, 6]\n- Enqueue 7: Returns False (queue full). Queue: [3, 4, 6]\n- Dequeue: Returns 3. Queue: [4, 6]"
                    },
                    {
                        "input": "4 7\n1 11\n1 51\n1 26\n2\n1 6\n2\n2",
                        "output": "True\nTrue\nTrue\n11\nTrue\n51\n26",
                        "explanation": "Queue size N = 4, 7 queries.\n- Enqueue 11: Returns True. Queue: [11]\n- Enqueue 51: Returns True. Queue: [11, 51]\n- Enqueue 26: Returns True. Queue: [11, 51, 26]\n- Dequeue: Returns 11. Queue: [51, 26]\n- Enqueue 6: Returns True. Queue: [51, 26, 6]\n- Dequeue: Returns 51. Queue: [26, 6]\n- Dequeue: Returns 26. Queue: [6]"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of using arrays?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n\tTime complexity: O(1) for all operations.\n\tSpace Complexity: O(N)\n\t\n\tWhere 'N' is the size of the queue. \n*/\n\nclass CircularQueue{\n    // Initialise front and rear of the queue.\n    int rear, front;\n\n    // Size of the queue.\n    int d;\n\n    // Array To be used for the implementation.\n    vector<int> arr;\n\npublic:\n    // Initialize the circular queue.\n    CircularQueue(int n){\n        d = n;\n\n        // For a circular queue the front and rear both start as empty.\n        front = rear = -1;\n\n        // Create the arrays.\n        arr = vector<int>(d);\n    }\n\n    // Enqueues 'X' into the Queue. Returns true if it gets enqueued into the queue, and false otherwise..\n    bool enqueue(int value){\n        if ((front == 0 && rear == d - 1) || (rear == (front - 1) % (d - 1))) {\n            /* \n               If the queue is full, no more elements can be added so return false.\n               Queue will be full if front is at 1st element and rear is at last element.\n               OR if rear is equal to front - 1.\n            */\n            return false; \n        } \n        else if (front == -1) { \n            // Queue is empty, hence insert the first element.\n            front = rear = 0; \n            arr[rear] = value; \n        } \n        else if (rear == d - 1 && front != 0) { \n            // If rear reaches end of queue but the first element is empty.\n            rear = 0; \n            arr[rear] = value; \n        } \n        else{ \n            // Otherwise simply enqueue the element.\n            rear ++; \n            arr[rear] = value; \n        } \n        return true;\n    }\n\n    // Dequeues top element from the Queue. Returns -1 if the queue is empty, otherwise returns the dequeued element.\n    int dequeue(){\n        if (front == -1) {\n            // If queue is empty.\n            return -1; \n        } \n  \n        // Initialise element to store dequeud element.\n        int data = arr[front]; \n        arr[front] = -1; \n        \n        if (front == rear) {\n            // If the queue has only one element.\n            front = -1; \n            rear = -1; \n        } \n        else if (front == d - 1){\n            // If front is the last element of the queue.\n            front = 0; \n        }\n        else{\n            // In all other cases simply dequeue.\n            front++; \n        }\n        // Return the dequeued element.\n        return data; \n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\n    Time complexity: O(1) for all operations.\n    Space Complexity: O(N)\n    \n    Where 'N' is the size of the queue. \n\"\"\"\n\nclass CircularQueue:\n    def __init__(self, n):\n        self.d = n\n\n        # For a circular queue the front and rear both start as empty.\n        self.front = -1\n        self.rear = -1\n\n        # Create the arrays.\n        self.arr = [-1 for i in range(self.d)]\n\n    # Enqueues 'X' into the queue. Returns true if it gets pushed into the queue, and false otherwise.\n    def enqueue(self, value):\n        if ((self.front == 0 and self.rear == self.d - 1) or (self.rear == (self.front - 1) % (self.d - 1))): \n            \"\"\"\n               If the queue is full, no more elements can be added so return false.\n               Queue will be full if front is at 1st element and rear is at last element.\n               OR if rear is equal to front - 1.\n            \"\"\"\n            return False\n         \n        elif (self.front == -1):  \n            # Queue is empty, hence insert the first element.\n            self.front = self.rear = 0\n            self.arr[self.rear] = value\n         \n        elif (self.rear == self.d - 1 and self.front != 0):  \n            # If self.rear reaches end of queue but the first element is empty.\n            self.rear = 0 \n            self.arr[self.rear] = value\n         \n        else:\n            # Otherwise simply enqueue the element.\n            self.rear += 1\n            self.arr[self.rear] = value\n         \n        return True\n\n    # Dequeues pop element from queue. Returns -1 if the queue is empty, otherwise returns the popped element.\n    def dequeue(self):\n        if (self.front == -1): \n            # If queue is empty.\n            return -1\n  \n        # Initialise element to store dequeud element.\n        data = self.arr[self.front]\n        self.arr[self.front] = -1\n        \n        if (self.front == self.rear): \n            # If the queue has only one element.\n            self.front = -1\n            self.rear = -1 \n         \n        elif (self.front == self.d - 1):\n            # If self.front is the last element of the queue.\n            self.front = 0\n        \n        else:\n            # In all other cases simply dequeue.\n            self.front += 1\n        \n        # Return the dequeued element.\n        return data",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\n\tTime complexity: O(1) for all operations.\n\tSpace Complexity: O(N)\n\t\n\tWhere 'N' is the size of the queue.  \n*/\n\nimport java.util.ArrayList;\n\npublic class CircularQueue {\n\t// Initialise front and rear of the queue.\n\tprivate int rear, front;\n\n\t// Size of the queue.\n\tprivate int d;\n\n\t// Array To be used for the implementation.\n\tprivate ArrayList<Integer> arr;\n\n\t// Initialize your data structure..\n\tpublic CircularQueue(int n) {\n\t\td = n;\n\n\t\t// For a circular queue the front and rear both start as empty.\n\t\tfront = rear = -1;\n\n\t\t// Create the arrays..\n\t\tarr = new ArrayList<Integer>(d);\n\t\tfor (int i = 0; i < d; i++) {\n\t\t\tarr.add(0);\n\t\t}\n\t}\n\n\t// Enqueues 'X' into the Queue. Returns true if it gets enqueued into the queue and false otherwise..\n\tpublic boolean enqueue(int value) {\n\t\tif ((front == 0 && rear == d - 1) || (rear == (front - 1) % (d - 1))) {\n\t\t\t/*\n\t\t\t  If the queue is full, no more elements can be added so return false.\n\t\t\t   Queue will be full if front is at 1st element and rear is at last element.\n\t\t\t   OR if rear is equal to front - 1.\n\t\t\t*/\n\t\t\treturn false;\n\t\t}\n\n\t\telse if (front == -1) {\n\t\t\t// Queue is empty, hence insert the first element.\n\t\t\tfront = rear = 0;\n\t\t\tarr.set(rear, value);\n\t\t}\n\t\telse if (rear == d - 1 && front != 0) {\n\t\t\t// If rear reaches end of queue but the first element is empty.\n\t\t\trear = 0;\n\t\t\tarr.set(rear, value);\n\t\t}\n\t\telse {\n\t\t\t// Otherwise simply enqueue the element.\n\t\t\trear++;\n\t\t\tarr.set(rear, value);\n\t\t}\n\t\treturn true;\n\t}\n\t/*\n\t   Dequeues top element from Mth Queue. Returns -1 if the queue is empty,\n\t   otherwise returns the dequeued element.\n\t*/\n\tpublic int dequeue() {\n\t\tif (front == -1) {\n\t\t\t// If queue is empty.\n\t\t\treturn -1;\n\t\t}\n\t\t// Initialise element to store dequeud element.\n\t\tint data = arr.get(front);\n\t\tarr.set(front, -1);\n\n\t\tif (front == rear) {\n\t\t\t// If the queue has only one element.\n\t\t\tfront = -1;\n\t\t\trear = -1;\n\t\t}\n\t\telse if (front == d - 1) {\n\t\t\t// If front is the last element of the queue.\n\t\t\tfront = 0;\n\t\t}\n\t\telse {\n\t\t\t// In all other cases simply dequeue.\n\t\t\tfront++;\n\t\t}\n\t\t// Return the dequeued element.\n\t\treturn data;\n\t}\n};",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}