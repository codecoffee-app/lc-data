{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9640,
            "title": "Circularly Linked",
            "titleSlug": "circularly-linked_1070232",
            "content": "<h4 id=\"you-are-given-the-head-of-a-linked-list-containing-integers-you-need-to-find-out-whether-the-given-linked-list-is-circular-or-not\">You are given the head of a linked list containing integers, You need to find out whether the given linked list is circular or not.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1. A linked list is said to be circular if it has no node having its next pointer equal to NULL and all the nodes form a circle i.e. the next pointer of last node points to the first node.\n2. An empty linked will also be considered as circular.\n3. All the integers in the linked list are unique.\n4. In the input, the next pointer of a node with i\u2019th integer is linked to the node with data (i+1)\u2019th integer (If (i+1)\u2019th node exists). If there is no such (i+1)\u2019th integer then the next pointer of such node is set to NULL.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer T, denoting the number of test cases.\n\nThe first line of each test case consists of an integer N, denoting the number of links in the linked list. \n\nThe second line of each test case consists of N space-separated integers denoting the data of the linked list and linking between nodes of the linked list as described in the notes above.\n\nFor more clarity please refer to the sample input.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print \u2018True\u2019 or \u2018False\u2019 depending on whether the linked list is circular or not, in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t have to print anything, it has already been taken care of. Just Implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 ^ 2\n1 &lt;= D &lt;= 10 ^ 6, here D is data stored in the node.\n0 &lt;= N &lt;= 10 ^ 4\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n5\n1 2 3 4 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>True\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>Given Linked list look like following:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/circularlylinkedeg1-6949.png\" alt=\"alt-text\"></p>\n\n<pre><code>As given linked list form a circle, hence it is a Circular linked list.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n7\n1 2 3 4 5 6 7\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>False\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2 :</h5>\n\n<pre><code>Given Linked list look like following:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/circularlylinkedeg2-6950.png\" alt=\"alt-text\"></p>\n\n<pre><code>In the given linked list there is a node at which this linked list terminates, hence it is not a circular linked list.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 119,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given the head of a linked list containing integers. Determine if the given linked list is circular or not.\n\nNote:\n1. A linked list is considered circular if it has no node with a NULL 'next' pointer and forms a closed loop, where the last node's 'next' pointer points to the first node.\n2. An empty linked list is also considered circular.\n3. All integers in the linked list are unique.\n4. In the input, the 'next' pointer of a node with the i-th integer is linked to the node with the (i+1)-th integer, if it exists. Otherwise, the 'next' pointer is set to NULL.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= D <= 1000000 (Data stored in the node)",
                    "0 <= N <= 10000 (Number of links in the linked list)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "1\n5\n1 2 3 4 1",
                        "output": "True",
                        "explanation": "The linked list forms a circle because the last node points back to the first node.  The sequence 1 -> 2 -> 3 -> 4 -> 1 forms a closed loop."
                    },
                    {
                        "input": "1\n7\n1 2 3 4 5 6 7",
                        "output": "False",
                        "explanation": "The linked list is not circular because the last node (7) points to NULL, indicating the end of the list and no loop formation."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use slow and fast pointers to detect a loop in the linked list.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n\t\tTime Complexity: O(N)\n\t\tSpace Complexity: O(1),\n\t\t\n\t\twhere N is the length of the given Linked List.\n*/\n\n\nbool isCircular(Node * head) {\n    // If head is already NULL, then it is the circular linked list\n    // with length zero.\n    if (head == NULL) {\n        return true;\n    }\n\n    // If next pointer of head is already NULL, then it the linear linked\n    // list of length 1, hence we return false here.\n    if (head -> next == NULL) {\n        return false;\n    }\n\n    // Initialising slow and fast pointers with head.\n    Node * slow = head, * fast = head;\n\n    // Iterating through the linkedlist till, fast doesn't reach end of \n    // linked list or slow pointer will not become equal to fast pointer.\n    while (fast != NULL && fast -> next != NULL) {\n\n        // Moving slow pointer by one step.\n        slow = slow -> next;\n        // Moving fast pointer by two steps.\n        fast = fast -> next -> next;\n\n        // Checking if updated slow and fast pointer values are same or not.\n        if (slow == fast) {\n            break;\n        }\n\n    }\n\n    // After completing the traversal, if slow and fast pointers meet and \n    // the node of meeting is node pointed by head, then linkedlist is circular.\n    if (slow == fast && slow == head) {\n        return true;\n    }\n\n    // If linkedlist is not circular, then return false.\n    return false;\n}\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n        Time Complexity: O(N)\r\n        Space Complexity: O(1),\r\n\r\n        where N is the length of the given Linked List.\r\n*/\r\n\r\npublic class Solution {\r\n    \r\n    public static boolean isCircular(Node<Integer> head) {\r\n        // If head is already NULL, then it is the circular linked list\r\n        // with length zero.\r\n        if (head == null) {\r\n            return true;\r\n        }\r\n\r\n        // If next pointer of head is already NULL, then it the linear linked\r\n        // list of length 1, hence we return false here.\r\n        if (head.next == null) {\r\n            return false;\r\n        }\r\n\r\n        // Initialising slow and fast pointers with head.\r\n        Node<Integer> slow = head, fast = head;\r\n\r\n        // Iterating through the linkedlist till, fast doesn't reach end of\r\n        // linked list or slow pointer will not become equal to fast pointer.\r\n        while (fast != null && fast.next != null) {\r\n\r\n            // Moving slow pointer by one step.\r\n            slow = slow.next;\r\n            // Moving fast pointer by two steps.\r\n            fast = fast.next.next;\r\n\r\n            // Checking if updated slow and fast pointer values are same or not.\r\n            if (slow == fast) {\r\n                break;\r\n            }\r\n\r\n        }\r\n\r\n        // After completing the traversal, if slow and fast pointers meet and\r\n        // the node of meeting is node pointed by head, then linkedlist is circular.\r\n        if (slow == fast && slow == head) {\r\n            return true;\r\n        }\r\n\r\n        // If linkedlist is not circular, then return false.\r\n        return false;\r\n    }\r\n\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\r\n\t\tTime Complexity: O(N)\r\n\t\tSpace Complexity: O(1),\r\n\t\t\r\n\t\twhere N is the length of the given Linked List.\r\n\"\"\"\r\n\r\n\r\ndef isCircular(head):\r\n    # If head is already NULL, then it is the circular linked list\r\n    # with length zero.\r\n    if head == None:\r\n        return True\r\n\r\n    # If next pointer of head is already NULL, then it the linear linked\r\n    # list of length 1, hence we return false here.\r\n    if head.next == None:\r\n        return False\r\n\r\n    # Initialising slow and fast pointers with head.\r\n    slow, fast = head, head\r\n\r\n    # Iterating through the linkedlist till, fast doesn't reach end of\r\n    # linked list or slow pointer will not become equal to fast pointer.\r\n    while fast != None and fast.next != None:\r\n\r\n        # Moving slow pointer by one step.\r\n        slow = slow.next\r\n        # Moving fast pointer by two steps.\r\n        fast = fast.next.next\r\n\r\n        # Checking if updated slow and fast pointer values are same or not.\r\n        if slow == fast:\r\n            break\r\n\r\n    # After completing the traversal, if slow and fast pointers meet and\r\n    # the node of meeting is node pointed by head, then linkedlist is circular.\r\n    if slow == fast and slow == head:\r\n        return True\r\n\r\n    # If linkedlist is not circular, then return false.\r\n    return False\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}