{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8262,
            "title": "Climbing the leaderboard",
            "titleSlug": "climbing-the-leaderboard_842427",
            "content": "<h4 id=\"given-a-leaderboard-of-a-game-with-the-following-ranking-pattern\">Given a leaderboard of a game with the following ranking pattern:</h4>\n\n<h4 id=\"the-player-with-the-highest-score-is-ranked-number-1-on-the-leaderboard\">The player with the highest score is ranked number 1 on the leaderboard.</h4>\n\n<h4 id=\"players-who-have-equal-scores-receive-the-same-ranking-number-and-the-next-player-s-receive-the-immediately-following-ranking-number\">Players who have equal scores receive the same ranking number, and the next player(s) receive the immediately following ranking number.</h4>\n\n<h4 id=\"you-are-given-game-scores-of-a-player-of-m-rounds-your-task-is-to-return-the-position-obtained-in-each-round\">You are given game scores of a player of \u2018M\u2019 rounds. Your task is to return the position obtained in each round.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The leaderboard scores are in descending order.\nThe game scores are given in ascending order.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u20184*T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the number of players on the leaderboard.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the leaderboard scores in decreasing order.\n\nThe third line of each test case contains an integer \u2018M\u2019 denoting the number of rounds of the game.\n\nThe last line contains \u2018M\u2019 space-separated integers denoting the game scores, for each round, in ascending order.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, return the ranks of the player corresponding to the game scores obtained.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^4\n1 &lt;= M &lt;= 10^3\n0 &lt;= LEADERBOARD_SCORE[i] &lt;= 10^9\n0 &lt;= PLAYER_SCORE[i] &lt;= 10^9\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n7\n100 100 50 40 40 20 10\n4\n5 25 50 120\n6\n100 90 90 80 75 60\n5\n50 65 77 90 102\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>6 4 2 1\n6 5 4 2 1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>Test case 1:\n\nLeaderboard Scores: 100   100   50   40   40   20   10\nRanks          :     1    1     2    3    3    4    5 \n\nSince 2 players scored 100, they get rank 1. Also, 2 players scored 40 and hence have the same rank, i.e rank 3. While others received different rankings according to their scores.\n\nFor the first round player scores 5 points, the player will stand at a position after the player at position 5 because the score is less than 10. So, the player gets position 6.\n\nFor the second round player scores 25 points, the player will stand after the player at position 3 and before the player at position 4. So, gets position 4, shifting the other players by 1 position.\n\nThe same goes for other rounds.\n\nTest case 2:\n\nLeaderboard Scores: 100    90    90    80    75    60   \nRanks            :   1     2     2     3     4     5 \n\nSo, 50 points will get position 6.\n65 points will get position 5\nAnd so on.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n5\n80 66 54 42 30\n3\n45 55 65\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4 3 3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 13,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a leaderboard of game scores with a specific ranking system: the highest score gets rank 1, and players with equal scores share the same rank, with the next rank immediately following. You're provided with the current leaderboard scores and a player's scores across multiple rounds. Determine the player's rank after each round, considering the leaderboard is in descending order and the player's scores are in ascending order.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^4",
                    "1 <= M <= 10^3",
                    "0 <= LEADERBOARD_SCORE[i] <= 10^9",
                    "0 <= PLAYER_SCORE[i] <= 10^9",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "2\n7\n100 100 50 40 40 20 10\n4\n5 25 50 120\n6\n100 90 90 80 75 60\n5\n50 65 77 90 102",
                        "output": "6 4 2 1\n6 5 4 2 1",
                        "explanation": "Test case 1: Leaderboard Ranks: [1, 1, 2, 3, 3, 4, 5].  A score of 5 gets rank 6, 25 gets rank 4, 50 gets rank 2 and 120 gets rank 1.\n\nTest case 2: Leaderboard Ranks: [1, 2, 2, 3, 4, 5]. A score of 50 gets rank 6, 65 gets rank 5, 77 gets rank 4, 90 gets rank 2, and 102 gets rank 1."
                    },
                    {
                        "input": "1\n5\n80 66 54 42 30\n3\n45 55 65",
                        "output": "4 3 3",
                        "explanation": "Leaderboard Ranks: [1, 2, 3, 4, 5]. A score of 45 gets rank 4, 55 gets rank 3, and 65 gets rank 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>&nbsp;</strong>Leaderboard scores are given in descending order.</p>",
            "<p>Try to reduce the search time using binary search.</p>",
            "<p>Try to search positions for all rounds in a single traversal.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}