{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9309,
            "title": "Clone a binary tree with random pointers.",
            "titleSlug": "clone-a-binary-tree-with-random-pointers_982797",
            "content": "<h4 id=\"you-are-given-a-binary-tree-apart-from-the-left-and-right-child-pointers-each-node-in-the-given-binary-tree-points-to-a-random-node-in-the-given-binary-tree-you-are-supposed-to-return-a-clone-of-the-binary-tree\">You are given a binary tree. Apart from the left and right child pointers, each node in the given binary tree points to a random node in the given binary tree. You are supposed to return a clone of the binary tree.</h4>\n\n<h4 id=\"cloning-a-binary-tree-means-making-a-deep-copy-of-the-input-binary-tree\">Cloning a binary tree means making a deep copy of the input binary tree.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Two nodes may have the same value associated with them.\nThe root node will be fixed and will be provided in the function.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place. So -1 would not be a part of the tree nodes.\n\nThe second line of each test case contains the values of the nodes of the tree in the random order ( -1 for NULL node), connecting the node values of the original tree with random nodes of the tree.\n\nFor example, the input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the inorder traversal of the cloned binary tree separated by a single space.\nOn the next line, the checker will output a \u20181\u2019 if you have cloned the tree successfully; otherwise, it will print \u20180\u2019.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 3000\n1 &lt;= data &lt;= 10 ^ 5 and data!=-1\n\nWhere \u2018T\u2019 is the number of test cases, and \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cdata\u201d is the value of the binary tree node\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1 2 3 -1 -1 -1 -1\n2 3 1 -1 -1 -1 -1\n5 6 7 8 -1 -1 -1 -1 -1 -1\n6 8 5 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2 1 3\n1\n8 6 5 7\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>For the first test case, the inorder traversal of the cloned binary tree is  {2, 1, 3}. On the next line, the checker code will print 1 if the tree was successfully cloned.\n\nFor the second test case, the inorder traversal of the cloned binary tree is {8, 6, 5, 7}. On the next line, the checker code will print 1 if the tree was cloned successfully.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 7 -1 -1 -1\n1 -1 -1 -1 -1\n3 4 5 -1 -1 -1 9 -1 -1\n5 3 3 -1 -1 -1 4 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>7 1\n1\n4 3 5 9\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>For the first test case, the inorder traversal of the cloned binary tree is  {1, 7}. On the next line, the checker code will print 1 if the tree was successfully cloned.\n\nFor the second test case, the inorder traversal of the cloned binary tree is {8, 6, 5, 7}. On the next line, the checker code will print 1 if the tree was cloned successfully.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a binary tree where each node, in addition to left and right child pointers, has a 'random' pointer pointing to another node within the same tree. Your task is to create a deep copy (clone) of this binary tree. Cloning must preserve the structure, node values, and the random pointer relationships.",
                "constraints": [
                    "1 <= T <= 100",
                    "0 <= N <= 3000",
                    "1 <= data <= 10^5 and data != -1",
                    "T is the number of test cases.",
                    "N is the total number of nodes in the binary tree.",
                    "data is the value of a binary tree node."
                ],
                "testcases": [
                    {
                        "input": "1 2 3 -1 -1 -1 -1\n2 3 1 -1 -1 -1 -1",
                        "output": "2 1 3\n1",
                        "explanation": "The inorder traversal of the cloned tree is {2, 1, 3}. The second line '1' indicates that the cloning was successful."
                    },
                    {
                        "input": "5 6 7 8 -1 -1 -1 -1 -1 -1\n6 8 5 7 -1 -1 -1 -1 -1 -1",
                        "output": "8 6 5 7\n1",
                        "explanation": "The inorder traversal of the cloned tree is {8, 6, 5, 7}. The second line '1' indicates that the cloning was successful."
                    },
                    {
                        "input": "2\n1 7 -1 -1 -1\n1 -1 -1 -1 -1",
                        "output": "7 1\n1",
                        "explanation": "The inorder traversal of the cloned tree is {7, 1}. The second line '1' indicates that the cloning was successful."
                    },
                    {
                        "input": "2\n3 4 5 -1 -1 -1 9 -1 -1\n5 3 3 -1 -1 -1 4 -1 -1",
                        "output": "4 3 5 9\n1",
                        "explanation": "The inorder traversal of the cloned tree is {4, 3, 5, 9}. The second line '1' indicates that the cloning was successful."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about using a HashMap to map the cloned nodes to the original tree?</p>",
            "<p>Can you think about temporarily changing the structure of the given tree to insert cloned nodes in the given tree itself?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}