{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9350,
            "title": "Clone a Linked List with random pointers",
            "titleSlug": "clone-a-linked-list-with-random-pointers_983604",
            "content": "<h4 id=\"you-are-given-a-linked-list-containing-n-nodes-where-every-node-in-the-linked-list-contains-two-pointers\">You are given a linked list containing <strong><em>&#39;n&#39;</em></strong> nodes, where every node in the linked list contains two pointers:</h4>\n\n<p><br/></p>\n\n<h4 id=\"1-next-which-points-to-the-next-node-in-the-list\">(1) <strong><em>\u2018next\u2019</em></strong> which points to the next node in the list</h4>\n\n<h4 id=\"2-random-which-points-to-a-random-node-in-the-list-or-null\">(2) <strong><em>\u2018random\u2019</em></strong> which points to a random node in the list or &#39;null&#39;.</h4>\n\n<p><br/></p>\n\n<h4 id=\"your-task-is-to-create-a-deep-copy-of-the-given-linked-list-and-return-its-head\">Your task is to create a <strong><em>&#39;deep copy&#39;</em></strong> of the given linked list and return its head.</h4>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>A &#39;deep copy&#39; of a linked list means we do not copy the references of the nodes of the original linked list, rather for each node in the original linked list, a new node is created.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer &#39;n&#39;, denoting the number of nodes in the &#39;linked list&#39;.\n\nThe second line of the input contains &#39;n&#39; spaced integers, representing the elements of the linked list, where &#39;next&#39; pointer of &#39;ith&#39; node points to &#39;i+1&#39;th node.\n\nThe third line of the input contains &#39;n&#39; spaced integers, where &#39;ith&#39; integer &#39;ri&#39; represents the index (0-indexed) of the node that the random pointer of &#39;ith&#39; node points to, or &#39;-1&#39; if &#39;random&#39; pointer points to &#39;null&#39;.  \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return the &#39;head&#39; node of final linked list.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. We will validate your returned linked list. &quot;True&quot; will be printed if the linked list was cloned successfully and &quot;False&quot; otherwise.\n</code></pre>\n\n<p><br/></p>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>5\n1 2 3 4 5\n2 0 4 4 1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the given test case, \u201cTrue\u201d will be printed if the linked list is successfully cloned.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/clo-6765.png\" alt=\"\">\n<br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 2\n1 0\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>True\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to do this in O(n).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-space-complexity\">Expected Space Complexity:</h5>\n\n<pre><code>Try to do this without using extra space.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= n &lt;= 5 * 10^4\n-10^5 &lt;= Node.data &lt;= 10^5\n-1 &lt;= ri &lt; n\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 60,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a linked list with 'n' nodes. Each node has two pointers: 'next' (pointing to the next node) and 'random' (pointing to a random node or null). Your task is to create a deep copy of this linked list. A deep copy means creating new nodes with the same values and linking them in the same way as the original list, without sharing references.",
                "constraints": [
                    "1 <= n <= 5 * 10^4",
                    "-10^5 <= Node.data <= 10^5",
                    "-1 <= ri < n"
                ],
                "testcases": [
                    {
                        "input": "5\n1 2 3 4 5\n2 0 4 4 1",
                        "output": "True",
                        "explanation": "The provided input represents a linked list of 5 nodes with values 1 to 5. The third line indicates the 'random' pointer connections: node 0's random points to node 2, node 1's random points to node 0, node 2's random points to node 4, node 3's random points to node 4, and node 4's random points to node 1. 'True' signifies that a deep copy was successfully created and validated."
                    },
                    {
                        "input": "2\n1 2\n1 0",
                        "output": "True",
                        "explanation": "The linked list has two nodes with values 1 and 2. The 'random' pointers connect node 0 to node 1 and node 1 to node 0. 'True' means the deep copy process was successful."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Additionally, we have a HashMap that maintains the old node to new node mapping. We will need it later on.</p>",
            "<p>Use HashMap to maintain links between old nodes and new nodes.</p>",
            "<p>Create new nodes in the same Linked List and update the random connections by traversing the list again.</p>"
        ],
        "relatedTopics": [],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}