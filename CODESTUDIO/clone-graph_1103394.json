{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9933,
            "title": "Clone Graph",
            "titleSlug": "clone-graph_1103394",
            "content": "<h4 id=\"you-are-given-a-reference-address-of-a-node-in-a-connected-undirected-graph-containing-n-nodes-and-m-edges-you-are-supposed-to-return-a-clone-of-the-given-graph-which-is-nothing-but-a-deep-copy-each-node-in-the-graph-contains-an-integer-data-and-an-array-list-of-its-neighbours\">You are given a reference/address of a node in a connected undirected graph containing N nodes and M edges. You are supposed to return a clone of the given graph which is nothing but a deep copy. Each node in the graph contains an integer \u201cdata\u201d and an array/list of its neighbours.</h4>\n\n<h4 id=\"the-structure-of-the-graphnode-class-is-as-follows\">The structure of the graphNode class is as follows:</h4>\n\n<pre><code>class graphNode \n{  \n    public:\n        int data;\n        vector&lt;graphNode*&gt; neighbours;\n}\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. Nodes are numbered from 1 to N.\n\n2. Your solution will run on multiple test cases. If you are using global variables make sure to clear them.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of the test case. Then the test cases are as follows.\n\nThe first line of each test case contains a single integer \u2018N\u2019 representing the number of nodes in the graph.\n\nThe second line of each test case contains a single integer \u2018M\u2019 representing the number of edges. \n\nThe next \u2018M\u2019 lines in each test case contain two integers \u2018U\u2019 and \u2018V\u2019 separated by a single space denoting an undirected edge between nodes U and V. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single line containing &quot;true&quot; if the graph is cloned correctly otherwise it will print &quot;false&quot;.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n2 &lt;= N &lt;= 100000\n1 &lt;= M &lt;= min(N(N-1)/2,100000)\n1 &lt;= E[i][0], E[i][1] &lt;= N\n\nWhere  \u2018N\u2019 is the number of nodes in the given graph, \u2018M\u2019 denotes the number of edges and \u2018E\u2019 denotes the edge matrix.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5\n6\n1 2\n4 1\n2 4\n3 4\n5 2\n1 3\n3\n2\n1 2\n1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>true\ntrue\n</code></pre>\n\n<h5 id=\"explanation-of-input-1\">Explanation of Input 1 :</h5>\n\n<pre><code>In the first test case, the returned graph contains 5 nodes and 6 edges which are:\n1 2\n4 1\n2 4\n3 4\n5 2\n1 3\nSince it is similar to the given graph with different address nodes then the solution is correct.\n\nIn the second test case, the returned graph contains 3 nodes and 2 edges which are:\n1 2\n1 3\nSince it is similar to the given graph with different address nodes then the solution is correct.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5\n4\n1 2\n2 3\n3 4\n4 5\n2\n1\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>true\ntrue\n</code></pre>\n\n<h5 id=\"explanation-of-input-2\">Explanation of Input 2 :</h5>\n\n<pre><code>In the first test case, the returned graph contains 5 nodes and 4 edges which are:\n1 2\n2 3\n3 4\n4 5\nSince it is similar to the given graph with different address nodes then the solution is correct.\n\nIn the second test case, the returned graph contains 2 nodes and 1 edge which is:\n1 2\n\nSince it is similar to the given graph with different address nodes then the solution is correct.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 39,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a reference to a node in a connected, undirected graph with N nodes and M edges, create a deep copy (clone) of the graph. Each node in the graph has an integer 'data' and a list of its neighbors. The graphNode class structure is as follows:\n\ncpp\nclass graphNode \n{\npublic:\n    int data;\n    vector<graphNode*> neighbours;\n};\n\n\nNodes are numbered from 1 to N.  Ensure to clear global variables between test cases.",
                "constraints": [
                    "1 <= T <= 5",
                    "2 <= N <= 100000",
                    "1 <= M <= min(N(N-1)/2, 100000)",
                    "1 <= E[i][0], E[i][1] <= N",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n6\n1 2\n4 1\n2 4\n3 4\n5 2\n1 3",
                        "output": "true",
                        "explanation": "The cloned graph contains 5 nodes and 6 edges: (1,2), (4,1), (2,4), (3,4), (5,2), (1,3). This matches the original graph's structure, confirming a correct clone."
                    },
                    {
                        "input": "3\n2\n1 2\n1 3",
                        "output": "true",
                        "explanation": "The cloned graph contains 3 nodes and 2 edges: (1,2), (1,3). This matches the original graph's structure, confirming a correct clone."
                    },
                    {
                        "input": "5\n4\n1 2\n2 3\n3 4\n4 5",
                        "output": "true",
                        "explanation": "The cloned graph contains 5 nodes and 4 edges: (1,2), (2,3), (3,4), (4,5). This matches the original graph's structure, confirming a correct clone."
                    },
                    {
                        "input": "2\n1\n1 2",
                        "output": "true",
                        "explanation": "The cloned graph contains 2 nodes and 1 edge: (1,2). This matches the original graph's structure, confirming a correct clone."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of BFS graph traversal algorithm.</p>",
            "<p>Think of DFS graph traversal algorithm.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}