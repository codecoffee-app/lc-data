{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8418,
            "title": "Clone Linked List with Random Pointer",
            "titleSlug": "clone-linked-list-with-random-pointer_873376",
            "content": "<h4 id=\"given-a-linked-list-having-two-pointers-in-each-node-the-first-one-points-to-the-next-node-of-the-list-however-the-other-pointer-is-random-and-can-point-to-any-node-of-the-list-or-null-the-task-is-to-create-a-deep-copy-of-the-given-linked-list-and-return-its-head-we-will-validate-whether-the-linked-list-is-a-copy-of-the-original-linked-list-or-not\">Given a linked list having two pointers in each node. The first one points to the next node of the list, however, the other pointer is random and can point to any node of the list or null. The task is to create a deep copy of the given linked list and return its head. We will validate whether the linked list is a copy of the original linked list or not.</h4>\n\n<h4 id=\"a-deep-copy-of-a-linked-list-means-we-do-not-copy-the-references-of-the-nodes-of-the-original-linked-list-rather-for-each-node-in-the-original-linked-list-a-new-node-is-created\">A deep copy of a Linked List means we do not copy the references of the nodes of the original Linked List rather for each node in the original Linked List, a new node is created.</h4>\n\n<h4 id=\"for-example\">For example,</h4>\n\n<p><img src=\"https://files.codingninjas.in/linkedlist-5722.png\" alt=\"example\"></p>\n\n<h4 id=\"random-pointers-are-shown-in-red-and-next-pointers-in-black\">Random pointers are shown in red and next pointers in black.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases. Then the test cases follow.\n\nThe only line of each test case contains the elements of the linked-list with random pointers. The line consists of nodes (value of node followed by its random pointer) separated by a single space. In case a node (next or random pointer) is null, we take -1 in its place.\n\nEach node is represented as a pair of a value and its random index where,\nValue: an integer representing the value of the node\nRandom index: the index of the node where the random pointer points to, or -1 if it does not point to any node.\n\nFor example, the input for the linked list depicted in the below image would be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/linkedlist-5722.png\" alt=\"example\"></p>\n\n<pre><code>1 2 2 0 3 4 4 4 5 1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation:</h4>\n\n<pre><code>The head node of the linked-list is 1, and its random pointer points to a node present at index 2, i.e. node 3.\n\nThe second node of the linked list is 2, and its random pointer points to a node present at index 0, i.e. node 1.\n\nIn this way, input for each node is taken until a pair having its first part as -1 is encountered since it denotes a node having null value, i.e. end of the linked list.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the only output line contains \u201ctrue\u201d if the linked list is successfully cloned.\n\nThe output for each test case is in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 ^ 2\n0 &lt;= N &lt;= 10 ^ 3\n0 &lt;= DATA &lt;= 10 ^ 6 and data != -1\n-1 &lt;= RANDOMINDEX &lt; N\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the total number of nodes in the linked list, &#39;DATA&#39; is the value of the linked list node and &#39;RANDOMINDEX&#39; is the index of the node where the random pointer points to.\n\nTime limit: 1 sec.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow up:</h5>\n\n<pre><code>Can you do it without using extra space?\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n1 2 2 0 3 4 4 4 5 1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>true\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, \u201ctrue\u201d will be printed if the linked list is successfully cloned.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/linkedlist-2-5747.png\" alt=\"example\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 1 2 1 -1\n7 -1 13 0 11 4 10 2 1 0 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>true\ntrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 81,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a linked list where each node has two pointers: 'next' pointing to the next node in the list, and 'random' pointing to any node in the list or null. The task is to create a deep copy of this linked list and return the head of the copied list. A deep copy implies creating new nodes with the same values and random pointer relationships as the original list, without sharing references to the original nodes.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "0 <= N <= 1000 (Number of nodes in the linked list)",
                    "0 <= DATA <= 1000000 and DATA != -1 (Value of the linked list node)",
                    "-1 <= RANDOMINDEX < N (Index of the node where the random pointer points to)"
                ],
                "testcases": [
                    {
                        "input": "1 2 2 0 3 4 4 4 5 1 -1",
                        "output": "true",
                        "explanation": "The linked list is: 1(random=node at index 2 which is 3) -> 2(random=node at index 0 which is 1) -> 3(random=node at index 4 which is 5) -> 4(random=node at index 4 which is 5) -> 5(random=node at index 1 which is 2).  The deep copy is successful, as new nodes are created with the same structure."
                    },
                    {
                        "input": "1 1 2 1 -1",
                        "output": "true",
                        "explanation": "The linked list is: 1(random=node at index 2 which is null) -> 2(random=node at index 1 which is 2).  The deep copy is successful."
                    },
                    {
                        "input": "7 -1 13 0 11 4 10 2 1 0 -1",
                        "output": "true",
                        "explanation": "The linked list is: 7(random=null) -> 13(random=node at index 0 which is 7) -> 11(random=node at index 4 which is 1) -> 10(random=node at index 2 which is 11) -> 1(random=node at index 0 which is 7). The deep copy is successful."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Consider the linked list as a binary tree. Now recursively traverse the binary tree (list) and clone it.</p>",
            "<p>Use HashMap to maintain links between old nodes and new nodes.</p>",
            "<p>Create new nodes in the same Linked List and update the random connections by traversing the list again.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}