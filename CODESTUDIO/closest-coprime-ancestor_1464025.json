{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12543,
            "title": "Closest Coprime Ancestor",
            "titleSlug": "closest-coprime-ancestor_1464025",
            "content": "<h4 id=\"you-are-given-an-integer-array-nodes-and-a-2-d-array-edges-to-represent-a-tree-i-e-a-connected-undirected-graph-consisting-of-n-nodes-numbered-from-0-to-n-1-and-exactly-n-1-edges-where-the-edges-i-ui-vi-represents-an-edge-between-the-u-th-and-v-th-node-each-node-has-a-value-associated-with-it-stored-in-the-nodes-array-where-nodes-i-represents-the-i-th-node-s-value\">You are given an integer array, \u2018NODES\u2019 and a 2 - D array, \u2018EDGES\u2019 to represent a tree (i.e. a connected undirected graph) consisting of \u2018N\u2019 nodes (numbered from 0 to N - 1) and exactly (N - 1) edges where the EDGES[ i ] = {Ui, Vi} represents an edge between the \u2018U\u2019th and \u2018V\u2019th node. Each node has a value associated with it, stored in the \u2018NODES\u2019 array where \u2018NODES[ i ]\u2019 represents the \u2018i\u2019th node\u2019s value.</h4>\n\n<h4 id=\"your-task-is-to-return-an-n-size-array-result-where-result-i-the-closest-ancestor-to-i-th-node-such-that-nodes-i-and-nodes-result-i-are-coprime-else-if-no-such-ancestor-found-result-i-1\">Your task is to return an \u2018N\u2019 size array, \u2018RESULT\u2019, where RESULT[ i ] = the closest ancestor to \u2018i\u2019th node such that NODES[ i ] and NODES[RESULT[ i ]] are coprime, else if no such ancestor found, RESULT[ i ] = -1.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1) The value associated with the \u2018ROOT\u2019 node of the tree is considered zero.\n2) Two integers \u2018A\u2019 and \u2018B\u2019 are coprime if the only positive integer that evenly divides (is a divisor of) both of them is 1, i.e., GCD(A, B) = 1 where GCD(A, B) is the greatest common divisor of \u2018A\u2019 and \u2018B\u2019.\n3) Any node on the shortest path from \u2018i\u2019th node to the root is the ancestor of the \u2018i\u2019th node.\n4) A node is not considered an ancestor of itself.\n5) A graph is said to be a connected undirected graph if all the edges are bidirectional and there is a path between every pair of distinct vertices of the graph.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 representing the number of nodes in the tree.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers representing the elements of the \u2018NODES\u2019 array.\n\nThe next \u2018N - 1\u2019 lines of each test case contain two space-separated integers, \u2018U\u2019 and \u2018V\u2019, representing an edge between \u2018U\u2019 and \u2018V\u2019. \n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, print a \u2018N\u2019 size array, \u2019RESULT\u2019 where RESULT[i] = the closest ancestor to \u2018i\u2019th node such that NODES[ i ] and NODES[RESULT[ i ]] are coprime, else if no such ancestor found, RESULT[ i ] = -1.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;=  N &lt;= 2000\n|EDGES[ i ]| = 2\n1 &lt;= NODES[ i ] &lt;= 20\nEDGES[ i ] = {Ui, Vi} where 0 &lt;= Ui, Vi &lt; N\nUi != Vi\n\nWhere \u2018|EDGES[ i ]| is the length of \u2018i\u2019 the array in \u2018EDGES\u2019, \u2018NODES[ i ]\u2019 is the \u2018i\u2019th element in the \u2018NODES\u2019 array, \u2018EDGES[ i ]\u2019 is the \u2018i\u2019th array of two integers \u2018Ui\u2019 and \u2018Vi\u2019 in the 2 - D array, \u2018EDGES\u2019.\n\nTime limit: 1 sec\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code> You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n4\n8 7 4 5\n0 1\n0 2\n2 3\n5\n2 5 4 7 2\n0 2\n0 3\n0 4\n1 2\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>-1 0 -1 2\n-1 2 -1 0 -1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-output-1\">Explanation Of Sample Output 1 :</h4>\n\n<pre><code>Test Case 1 :  \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample_output_1_tree-9205.png\" alt=\"\"></p>\n\n<pre><code>Given input can be represented as the above tree where the node\u2019s value is in parenthesis.\nNode 0 has no coprime ancestor. So, RESULT[ 0 ] = -1.\nNode 1 has only one coprime ancestor, i.e., 0. So, RESULT[ 1 ] = 0.\nNode 2 has no coprime ancestor. So, RESULT[ 2 ] = -1.\nNode 3 has two coprime ancestors, 2 and 0. Since node 2 is closest to node 3, therefore, RESULT[ 3 ] = 2.\n\nTest Case 2 : \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample_output_2_tree-9206.png\" alt=\"\"></p>\n\n<pre><code>Given input can be represented as the above tree where the node\u2019s value is in parenthesis.\nNode 0 has no coprime ancestor. So, RESULT[ 0 ] = -1.\nNode 1 has two coprime ancestors, 2 and 0. Since node 2 is closest to node 1, therefore, RESULT[ 1 ] = 2.\nNode 2 has no coprime ancestor. So, RESULT[ 2 ] = -1.\nNode 3 has only one coprime ancestor, i.e., 0. So, RESULT[ 3 ] = 0.\nNode 4 has no coprime ancestor. So, RESULT[ 4 ] = -1.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>1\n6\n7 4 5 2 6 8\n0 2\n0 4\n1 2\n1 3\n2 5\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>-1 2 0 2 0 2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a tree represented by an array of node values `NODES` and a 2D array of edges `EDGES`, find the closest ancestor for each node such that the node's value and the ancestor's value are coprime (their greatest common divisor is 1). If no such ancestor exists, return -1. The root node has a value of 0.",
                "constraints": [
                    "1 <= N <= 2000",
                    "1 <= NODES[i] <= 20",
                    "0 <= Ui, Vi < N"
                ],
                "testcases": [
                    {
                        "input": "n = 4, nodes = [8, 7, 4, 5], edges = [[0, 1], [0, 2], [2, 3]]",
                        "output": "-1 0 -1 2",
                        "explanation": "Node 0 has no coprime ancestor. Node 1 has 0 as the closest coprime ancestor. Node 2 has no coprime ancestor. Node 3 has 2 as the closest coprime ancestor."
                    },
                    {
                        "input": "n = 5, nodes = [2, 5, 4, 7, 2], edges = [[0, 2], [0, 3], [0, 4], [1, 2]]",
                        "output": "-1 2 -1 0 -1",
                        "explanation": "Node 0 has no coprime ancestor. Node 1 has 2 as the closest coprime ancestor. Node 2 has no coprime ancestor. Node 3 has 0 as the closest coprime ancestor. Node 4 has no coprime ancestor."
                    },
                    {
                        "input": "n = 6, nodes = [7, 4, 5, 2, 6, 8], edges = [[0, 2], [0, 4], [1, 2], [1, 3], [2, 5]]",
                        "output": "-1 2 0 2 0 2",
                        "explanation": "Node 0 has no coprime ancestor. Node 1 has 2 as the closest coprime ancestor. Node 2 has 0 as the closest coprime ancestor. Node 3 has 2 as the closest coprime ancestor. Node 4 has 0 as the closest coprime ancestor. Node 5 has 2 as the closest coprime ancestor."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use brute force approach to traverse the tree and calculate the closest coprime ancestor for each node.</p>",
            "<p>The maximum node value can be 20 only. Can you now think of some precomputation to optimize the brute force approach?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}