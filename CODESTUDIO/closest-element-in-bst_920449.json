{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8862,
            "title": "Closest element in BST",
            "titleSlug": "closest-element-in-bst_920449",
            "content": "<h4 id=\"you-have-been-given-a-binary-search-tree-of-integers-with-n-nodes-and-a-target-integer-value-k-your-task-is-to-find-the-closest-element-to-the-target-k-in-the-given-binary-search-tree\">You have been given a binary search tree of integers with \u2018N\u2019 nodes and a target integer value \u2018K\u2019. Your task is to find the closest element to the target \u2018K\u2019 in the given binary search tree.</h4>\n\n<h4 id=\"a-node-in-bst-is-said-to-be-the-closest-to-the-target-if-its-absolute-difference-with-the-given-target-value-k-is-minimum-in-the-case-of-more-than-one-closest-element-return-the-element-with-a-minimum-value\">A node in BST is said to be the closest to the target if its absolute difference with the given target value \u2018K\u2019 is minimum. In the case of more than one closest element, return the element with a minimum value.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-with-the-following-properties\">A binary search tree (BST) is a binary tree data structure with the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<p><img src=\"https://files.codingninjas.in/first-5644.png\" alt=\"example\"></p>\n\n<pre><code>For the given BST and target value \u2018K\u2019 =  32, the closest element is 30 as the absolute difference between 30 and 32 (|32 - 30|) is the minimum among all other possible node-target pairs.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an Integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nThe second line of each test case contains a single non-negative integer \u2018K\u2019 denoting the target value.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nThe input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\n\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer representing the closest element to the given target \u2018K\u2019.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5 * 10^3\n0 &lt;= Node.data &lt;= 10^5\n0 &lt;= K &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n6 3 9 2 5 -1 10 -1 -1 -1 -1 -1 -1\n4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-for-the-sample-output-1\">Explanation For The Sample Output 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-19-5928.png\" alt=\"Output\"></p>\n\n<pre><code>The minimum possible absolute difference between the given target and node is 1 for nodes 3 and 5. Since 3 is smaller than 5, the output is 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 1 5 -1 2 -1 -1 -1 -1\n4\n9 6 10 4 7 -1 11 -1 -1 -1 -1 -1 -1\n100\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n11\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary search tree (BST) of integers with 'N' nodes and a target integer value 'K', find the node in the BST whose value is closest to 'K'. Closeness is determined by the absolute difference between the node's value and 'K'. If multiple nodes have the same minimum absolute difference, return the node with the smallest value.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 5 * 10^3 (Number of nodes in the BST)",
                    "0 <= Node.data <= 10^5 (Value of each node)",
                    "0 <= K <= 10^5 (Target value)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "6 3 9 2 5 -1 10 -1 -1 -1 -1 -1 -1\n4",
                        "output": "3",
                        "explanation": "The BST contains the nodes 6, 3, 9, 2, 5, and 10. The target is 4. The closest nodes are 3 (abs(4-3) = 1) and 5 (abs(4-5) = 1). Since 3 < 5, the output is 3."
                    },
                    {
                        "input": "3 1 5 -1 2 -1 -1 -1 -1\n4",
                        "output": "3",
                        "explanation": "The BST contains the nodes 3, 1, 5, and 2. The target is 4. The closest node is 3 (abs(4-3) = 1)."
                    },
                    {
                        "input": "9 6 10 4 7 -1 11 -1 -1 -1 -1 -1 -1\n100",
                        "output": "11",
                        "explanation": "The BST contains the nodes 9, 6, 10, 4, 7, and 11. The target is 100. The closest node is 11 (abs(100-11) = 89)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a solution by visiting all the nodes in the BST?</p>",
            "<p>The left subtree of BST contains values lesser than the node value, and the right subtree of BST contains values greater than the node value. Can you use this property to find the closest element?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}