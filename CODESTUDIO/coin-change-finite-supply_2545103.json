{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15508,
            "title": "Coin Change(Finite Supply)",
            "titleSlug": "coin-change-finite-supply_2545103",
            "content": "<h4 id=\"you-are-given-an-array-of-integers-coins-denoting-the-denomination-of-coins-and-another-array-of-integers-freq-denoting-the-number-of-coins-of-each-denomination\">You are given an array of integers \u2018coins\u2019 denoting the denomination of coins and another array of integers \u2018freq\u2019 denoting the number of coins of each denomination.</h4>\n\n<h4 id=\"you-have-to-find-the-number-of-ways-to-make-the-sum-v-by-selecting-some-or-all-coins-from-the-array\">You have to find the number of ways to make the sum \u2018V\u2019 by selecting some(or all) coins from the array.</h4>\n\n<h4 id=\"the-answer-can-be-very-large-so-return-the-answer-modulo-1000000007\">The answer can be very large. So, return the answer modulo 1000000007.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>\u2018N\u2019 = 3, \u2018coins\u2019 = {1, 2, 3}, \u2018freq\u2019 = {1, 1, 3}, \u2018V\u2019 = 6\n\nFor the given example, we can make six by using the following coins:\n{1, 2, 3}\n{3. 3}\nHence, the answer is 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the total number of coins.\n\nThe second line of the test case contains \u2018N\u2019 integers denoting the elements of the array \u2018coins\u2019.\n\nThe third line of the test case contains \u2018N\u2019 integers denoting the elements of the array \u2018freq\u2019.\n\nThe fourth line of the test case contains the integer \u2018V\u2019 denoting the change we want. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer denoting the total number of possible ways to get change \u2018V\u2019.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10    \n1 &lt;= N &lt;= 100\n1 &lt;= coins[i] &lt;= 100\n1 &lt;= freq[i] &lt;= 100\n1 &lt;= V &lt;= 100\n\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3\n1 2 4\n1 1 1\n7\n3\n1 2 4\n2 3 2\n7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>In the first test case, there is only one possible way to make the sum equal to 7 i.e., taking all the coins. Hence answer is 1.\n\nIn the second test case, You can make the sum seven by using the following coins:\n{1, 2, 4}, {1, 2, 2, 2}. Hence the answer is 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4\n1 11 7 6\n1 2 3 1\n10\n3\n5 1 2\n1 1 3\n6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `coins` representing coin denominations and another array `freq` representing the number of coins available for each denomination, find the number of distinct ways to form a target sum `V` using any combination of the available coins.  Since the number of ways can be very large, return the answer modulo 1000000007.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 100",
                    "1 <= coins[i] <= 100",
                    "1 <= freq[i] <= 100",
                    "1 <= V <= 100",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\n1 2 4\n1 1 1\n7",
                        "output": "1",
                        "explanation": "Only one way to form the sum 7 is by using the denominations {1, 2, 4} once each."
                    },
                    {
                        "input": "3\n1 2 4\n2 3 2\n7",
                        "output": "2",
                        "explanation": "Two ways to form the sum 7 are {1, 2, 4} and {1, 2, 2, 2}."
                    },
                    {
                        "input": "4\n1 11 7 6\n1 2 3 1\n10",
                        "output": "0",
                        "explanation": "There are no ways to form the sum of 10 using the given coin denominations and their frequencies."
                    },
                    {
                        "input": "3\n5 1 2\n1 1 3\n6",
                        "output": "2",
                        "explanation": "Two ways to form the sum 6 are {5, 1} and {2, 2, 2}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Recursively call all the possible changes and check if the sum is equal to the required sum.</p>",
            "<p>There can be many repetitive calculations in the recursive solution, which can be skipped by storing them while computing for the first time</p>",
            "<p>Iterate through all the coins in a bottom-up fashion and store the answer in \u2018dp\u2019 array</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}