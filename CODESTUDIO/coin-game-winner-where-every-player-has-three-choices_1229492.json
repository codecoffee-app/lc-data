{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10476,
            "title": "Coin game winner where every player has three choices",
            "titleSlug": "coin-game-winner-where-every-player-has-three-choices_1229492",
            "content": "<h4 id=\"two-players-x-and-y-are-playing-a-coin-game-initially-there-are-n-coins-each-player-can-pick-exactly-a-coins-or-b-coins-or-1-coin-a-player-loses-the-game-if-he-is-not-able-to-pick-any-coins-x-always-starts-the-game-and-each-player-plays-optimally-you-are-supposed-to-find-which-player-wins-the-coin-game\">Two players &#39;X&#39; and &#39;Y&#39;, are playing a coin game. Initially, there are &#39;N&#39; coins. Each player can pick exactly &#39;A&#39; coins or &#39;B&#39; coins or 1 coin. A player loses the game if he is not able to pick any coins. &#39;X&#39; always starts the game, and each player plays optimally. You are supposed to find which player wins the coin game.</h4>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains three integers: \u2018N\u2019 denoting the number of coins, integer \u2018A\u2019, integer \u2018B\u2019 denoting the number of coins each player can take in a turn.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return one integer 0 or 1. return 1, if X wins the coin game, or return 0, if Y wins the coin game.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5 3 4\n4 2 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>For the first test case, There are 5 coins, every player can pick 1 or 3 or 4 coins on his/her turn. X picks 3 coins in the first turn, now the remaining coins are 2, Y can only pick 1 coin. So, X wins by picking the last coin.\n\nFor the second test case, No, matter what coins X picks, Y always wins.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n8 2 4\n9 3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 20,
            "dislikes": "NA",
            "rephrased": {
                "body": "Two players, X and Y, are playing a coin game. Initially, there are N coins. Each player can pick exactly A coins, B coins, or 1 coin in their turn. A player loses if they cannot pick any coins. X starts the game. Determine which player wins, assuming both play optimally.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 3 4",
                        "output": "1",
                        "explanation": "There are 5 coins. Each player can pick 1, 3, or 4 coins. X can pick 3 coins, leaving 2. Y can only pick 1, leaving 1 for X to win."
                    },
                    {
                        "input": "4 2 3",
                        "output": "0",
                        "explanation": "There are 4 coins. Each player can pick 1, 2, or 3 coins. No matter what coins X picks, Y can always make a move to eventually win."
                    },
                    {
                        "input": "8 2 4",
                        "output": "1",
                        "explanation": null
                    },
                    {
                        "input": "9 3 4",
                        "output": "0",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try every possible option.</p>",
            "<p>Can you think of some optimization to solve the issue of overlapping subproblems.</p>",
            "<p>Try to solve the problem iteratively.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}