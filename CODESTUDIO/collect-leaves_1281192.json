{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10964,
            "title": "Collect Leaves",
            "titleSlug": "collect-leaves_1281192",
            "content": "<h4 id=\"you-are-given-a-binary-tree-with-n-nodes-each-node-has-an-integer-value-associated-with-it-your-task-is-to-print-the-leaf-nodes-and-then-remove-these-leaf-nodes-now-print-the-new-leaf-nodes-and-repeat-the-process-until-the-tree-becomes-empty\">You are given a binary tree with \u2018N\u2019 nodes. Each node has an integer value associated with it. Your task is to print the leaf nodes and then remove these leaf nodes. Now, print the new leaf nodes and repeat the process until the tree becomes empty.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t require to remove the leaf nodes. Just print the values in the required order.\n\nThe leaf nodes must be printed in a left to right order.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019, which denotes the number of test cases to be run. Then, the T test cases follow. \n\nThe first and only line of each test case contains elements of the binary tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/pathsum1-8238.png\" alt=\"binarytree_example\"> </p>\n\n<pre><code>6 \n-3 3\n-1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 6\n\nLevel 2 :\nLeft child of 6 = -3\nRight child of 6 = 3\n\nLevel 3 :\nLeft child of -3 = null (-1)\nRight child of -3 = null (-1)\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as: \n\n6 -3 3  -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print in a separate line the leaf nodes of the tree. After removing the current leaf nodes, print the new leaf nodes in a separate line. Keep repeating the process until the tree becomes empty. \n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^5\n-10^9 &lt;= node data &lt;= 10^9, (where node data != -1).\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n6 -3 3 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>-3 3\n6\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case, the given binary tree is depicted below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/pathsum1-8238.png\" alt=\"binarytree_example\"> </p>\n\n<pre><code>In the given tree, the leaf nodes are -3 and 3. When we remove these nodes, we will get 6 as the only node present in the tree. We print it in a separate line as it is the only leaf node left in the tree.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n1 2 1 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2 1 \n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with 'N' nodes, where each node has an integer value. The task is to iteratively identify and print leaf nodes, removing them conceptually after each iteration, until the tree is empty. Print the leaf nodes in left-to-right order for each iteration.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^5",
                    "-10^9 <= node data <= 10^9, (where node data != -1)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "6 -3 3 -1 -1 -1 -1",
                        "output": "-3 3\n6",
                        "explanation": "Initially, the leaf nodes are -3 and 3. After removing these, the remaining tree consists of only the root node 6, which then becomes the only leaf node."
                    },
                    {
                        "input": "1 2 1 -1 -1 -1 -1",
                        "output": "2 1\n1",
                        "explanation": "The initial leaf nodes are 2 and 1. After their removal, the root node 1 becomes the only leaf node."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a solution using depth-first traversal.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}