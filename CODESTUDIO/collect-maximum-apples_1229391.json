{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10452,
            "title": " Collect Maximum Apples",
            "titleSlug": "collect-maximum-apples_1229391",
            "content": "<h4 id=\"alice-always-loves-to-visit-her-garden-and-collect-apples-the-garden-can-be-represented-in-the-form-of-n-n-grid-say-matrix-where-each-cell-of-the-grid-can-have-one-of-the-possible-values\">Alice always loves to visit her garden and collect apples. The garden can be represented in the form of \u2018N\u2019 * \u2019N\u2019 grid say \u2018MATRIX\u2019, where each cell of the grid can have one of the possible values:</h4>\n\n<pre><code>1 -&gt; The cell contains an apple that Alice can pick up and pass through it.\n\n-1 -&gt; The cell contains a bush and Alice can not visit this cell.\n\n0 -&gt; The cell is empty and Alice can pass through it.\n</code></pre>\n\n<h4 id=\"alice-is-present-at-the-top-left-corner-of-the-matrix-or-we-can-say-at-point-0-0\">Alice is present at the top left corner of the matrix or we can say at point (0,0).</h4>\n\n<h4 id=\"alice-has-to-reach-the-bottom-right-corner-of-the-matrix-n-1-n-1-and-return-back-to-the-starting-point-0-0\">Alice has to reach the bottom right corner of the matrix (\u2018N\u2019-1,\u2019N\u2019-1) and return back to the starting point (0,0).</h4>\n\n<pre><code>1. After picking an apple the cell will become empty.\n\n2. While going towards the bottom right corner, Alice can either move Right or Down at each step.\n\n3. While going towards the top left corner, Alice can either move Left or Up at each step.\n\n4. If there is no path from (0,0) to (\u2018N\u2019-1, \u2018N\u2019-1) then Alice will not pick any apple.\n</code></pre>\n\n<h4 id=\"your-task-is-to-help-alice-to-collect-the-maximum-number-of-apples-during-her-journey\">Your task is to help Alice to collect the maximum number of apples during her journey.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>If the given matrix is :\n[1, 1, -1, 1]\n[1, 0, 1, 1]\n[1, 1, 0, 1]\n[0, -1, -1, 1]\n\nOne of the possible ways to collect maximum apples is :\n\nPath for going towards bottom right corner: \n(0,0) -&gt; (0,1) -&gt; (1,1) -&gt; (1,2) -&gt; (1,3) -&gt; (2,3) -&gt; (3,3)\n\nApples collected are equal to 6.\n\nPath for going towards top left corner:\n(3,3) -&gt; (2,3) -&gt;(2,2) -&gt; (2,1) -&gt; (2,0) -&gt; (1,0) -&gt; (0,0)\n\nApples collected are equal to 3.\n\nSo Alice can collect a maximum of 9 apples.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. Then each test case follows.\n\nThe first line of each test case contains a space-separated integer \u2018N\u2019 representing the number of rows and columns. \n\nThe next \u2018N\u2019 lines of each test case contain \u2018N\u2019 single space-separated integers denoting the values of \u2018MATRIX\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>For each test case, print a single line containing a single integer representing the maximum number of apples Alice can collect.\n\nThe output of every test case will be printed in a separate line. \n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints</h4>\n\n<pre><code>1 &lt;= T &lt;=10\n1 &lt;= N &lt;= 50\n-1 &lt;= MATRIX[i] &lt;= 1\n\nWhere \u2018T\u2019 denotes the number of test cases, \u2018N\u2019 denotes the number of rows and columns of \u2018MATRIX\u2019.\n\nTime limit: 1 sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample input 1:</h4>\n\n<pre><code>1\n3\n1 -1 1\n0 1 -1\n1 -1 0\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample output 1:</h4>\n\n<pre><code>0\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h4>\n\n<pre><code>We can see there is no possible path to reach (2,2) from (0,0), so no apples will be collected.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample input 2:</h4>\n\n<pre><code>2    \n4\n1 1 0 0 \n0 1 0 1\n1 1 0 0 \n0 1 1 1\n2\n-1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample output 2:</h4>\n\n<pre><code>9\n0\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h4>\n\n<pre><code>For the test case 1:\nOne of the possible way to collect 9 apples is :\n\nPath for going towards bottom right corner: \n(0,0) -&gt; (0,1) -&gt; (1,1) -&gt; (1,2) -&gt; (1,3) -&gt; (2,3) -&gt; (3,3)\n\nApples collected are equal to 5.\n\nPath forgoing towards top left corner:\n(3,3) -&gt; (3,2) -&gt;(3,1) -&gt; (2,1) -&gt; (2,0) -&gt; (1,0) -&gt; (0,0)\nApples collected are equal to 4.\n\nFor the test case 2:\nAs Alice can not visit (0,0), so she will never be able to reach (\u2018N\u2019-1,\u2019N\u2019-1).\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Alice is in a garden represented by an N x N grid (matrix). Each cell can contain an apple (1), a bush (-1), or be empty (0). Alice starts at (0, 0) and needs to reach (N-1, N-1) and then return to (0, 0).  She can only move right or down when going to (N-1, N-1) and left or up when returning. She can pick an apple when visiting a cell with an apple, after which the cell becomes empty. Bushes cannot be traversed. Determine the maximum number of apples Alice can collect during her journey.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 50",
                    "-1 <= MATRIX[i] <= 1"
                ],
                "testcases": [
                    {
                        "input": "matrix = [[1, -1, 1], [0, 1, -1], [1, -1, 0]]",
                        "output": "0",
                        "explanation": "There is no possible path to reach (2,2) from (0,0), so no apples will be collected."
                    },
                    {
                        "input": "matrix = [[1, 1, 0, 0], [0, 1, 0, 1], [1, 1, 0, 0], [0, 1, 1, 1]]",
                        "output": "9",
                        "explanation": "One possible path collects 9 apples. Going towards bottom right corner: (0,0) -> (0,1) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) - collects 5 apples. Returning: (3,3) -> (3,2) -> (3,1) -> (2,1) -> (2,0) -> (1,0) -> (0,0) - collects 4 apples."
                    },
                    {
                        "input": "matrix = [[-1, -1], [-1, -1]]",
                        "output": "0",
                        "explanation": "Alice cannot visit (0,0), so she can't reach (N-1, N-1)."
                    },
                    {
                        "input": "matrix = [[1, 1, -1, 1], [1, 0, 1, 1], [1, 1, 0, 1], [0, -1, -1, 1]]",
                        "output": "9",
                        "explanation": "One possible path collects 9 apples. Going towards bottom right corner: (0,0) -> (0,1) -> (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) - collects 6 apples. Returning: (3,3) -> (2,3) -> (2,2) -> (2,1) -> (2,0) -> (1,0) -> (0,0) - collects 3 apples."
                    },
                    {
                        "input": "matrix = [[1]]",
                        "output": "1",
                        "explanation": "Alice starts at (0,0) and can collect the apple there on the way to (0,0), resulting in 1 apple collected."
                    },
                    {
                        "input": "matrix = [[0]]",
                        "output": "0",
                        "explanation": "Alice starts at (0,0) and there are no apples, she collects 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a solution that explores various paths simultaneously?</p>",
            "<p><strong>&nbsp;</strong>Can we avoid the overlapping subproblems?</p>",
            "<p>Can you think of an iterative approach?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}