{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15722,
            "title": "Collect Maximum Coins in Matrix",
            "titleSlug": "collect-maximum-coins-in-matrix_2684590",
            "content": "<h4 id=\"you-are-given-a-matrix-of-m-rows-and-n-columns-the-cells-of-the-matrix-contain-either-a-coin-or-are-empty\">You are given a matrix of \u2018M\u2019 rows and \u2018N\u2019 columns. The cells of the matrix contain either a coin or are empty.</h4>\n\n<h4 id=\"you-are-allowed-to-visit-every-boundary-cell-that-has-a-coin-in-it-and-collects-that-coin-apart-from-that-you-are-allowed-to-collect-the-coin-in-one-of-the-four-adjacent-cells-find-the-maximum-number-of-coins-that-you-can-collect-from-the-matrix\">You are allowed to visit <strong>every</strong> boundary cell that has a coin in it and collects that coin apart from that, you are allowed to collect the coin in one of the four adjacent cells. Find the maximum number of coins that you can collect from the matrix.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If Matrix of size 3 * 5 is: \n0 1 1 0 0\n0 1 0 1 0\n1 0 0 0 0\n\n\nThen, out of the five coins in the matrix, you can collect a maximum of four coins. This is because the coin at (0, 1) lies on the boundary and after collecting the coin one can also collect the coin at (1, 1) as it lies in the adjacent cell. We can also collect the coin at (2, 0). But we cannot collect the coin at (1, 3), as this coin doesn\u2019t lie on the boundary and it cannot be reached from one of the boundary coins.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains two integers \u2018M\u2019 and \u2018N\u2019 denoting the number of rows and columns of the matrix.\n\nThe next M lines each contain N integers denoting the number of coins corresponding to each cell of the current row.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the maximum number of coins that we can collect.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 T \u2264 10      \n1 \u2264 M, N \u2264 200\nMatrix[i][j] = {0, 1}\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 5\n0 1 1 0 0\n0 1 0 1 0\n1 0 0 0 0\n4 5\n0 0 1 0 0\n0 1 1 1 0\n0 1 1 1 0\n0 0 0 0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>4\n7\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For test case 1 :\nWe will print 4 because:\nOut of the five coins in the matrix, you can collect a maximum of four coins. This is because the coin at (0, 1) lies on the boundary and after collecting the coin one can also collect the coin at (1, 1) as it lies in the adjacent cell of (0, 1). We can also collect the coin at (2, 0). But we cannot collect the coin at (1, 3), as this coin doesn\u2019t lie on the boundary and it cannot be reached from one of the boundary coins.\n\nFor test case 2 : \nWe will print 7 because:\nOut of the seven coins in the matrix, we can collect all the seven coins using the boundary coin at (0, 2) we can directly/indirectly reach all the coins at the centre that do not directly lie on the boundary.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 1\n0\n1 5\n1 1 1 1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n5\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix of 'M' rows and 'N' columns, where each cell contains either a coin (represented by 1) or is empty (represented by 0). You can collect coins from every boundary cell that contains a coin. Additionally, you can collect coins from cells that are adjacent (up, down, left, or right) to a cell from which a coin has already been collected. Determine the maximum number of coins that can be collected from the matrix using these rules.",
                "constraints": [
                    "1 \u2264 T \u2264 10",
                    "1 \u2264 M, N \u2264 200",
                    "Matrix[i][j] = {0, 1}"
                ],
                "testcases": [
                    {
                        "input": "m = 3, n = 5, matrix = [[0, 1, 1, 0, 0], [0, 1, 0, 1, 0], [1, 0, 0, 0, 0]]",
                        "output": "4",
                        "explanation": "The coin at (0, 1) lies on the boundary and is collected. The coin at (1, 1) is adjacent to (0, 1) and is also collected.  The coin at (2, 0) lies on the boundary and is collected. The coin at (1, 3) cannot be collected as it is not on the boundary and cannot be reached from any collected coins."
                    },
                    {
                        "input": "m = 4, n = 5, matrix = [[0, 0, 1, 0, 0], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]",
                        "output": "7",
                        "explanation": "The coin at (0, 2) lies on the boundary and is collected. From there, we can reach all the other coins that are marked '1'. Total of 7 coins can be collected."
                    },
                    {
                        "input": "m = 1, n = 1, matrix = [[0]]",
                        "output": "0",
                        "explanation": "No coin is present in the matrix."
                    },
                    {
                        "input": "m = 1, n = 5, matrix = [[1, 1, 1, 1, 1]]",
                        "output": "5",
                        "explanation": "All coins are on the boundary. So, we can collect all of them."
                    },
                    {
                        "input": "m = 2, n = 2, matrix = [[1, 0], [0, 1]]",
                        "output": "2",
                        "explanation": "Both the coins at the boundary can be collected."
                    },
                    {
                        "input": "m = 3, n = 3, matrix = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]",
                        "output": "8",
                        "explanation": "Boundary elements are all 1 and are thus initially selected. Since all internal 0s are adjacent to the already selected elements, these can't be added. Therefore, all the boundary coins are selected and the maximum is 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Apply depth-first search from all the boundary cells that contain a coin.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}