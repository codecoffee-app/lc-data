{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12706,
            "title": "Collecting Numbers II",
            "titleSlug": "collecting-numbers-ii_1473825",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-size-n-containing-each-number-between-1-and-n-exactly-once-on-each-round-you-can-traverse-through-the-array-arr-from-left-to-right-and-collect-as-many-numbers-as-possible-in-increasing-order-you-are-given-m-operations-in-a-2-dimensional-array-queries-in-which-queries-i-contains-two-positions-of-the-array-arr-whose-values-need-to-be-swapped-the-operations-are-performed-one-by-one-in-the-given-order-your-task-is-to-find-the-total-number-of-rounds-required-to-collect-all-the-numbers-from-1-to-n-in-increasing-order-after-each-operation\">You are given an array \u2018ARR\u2019 of size \u2018N\u2019 containing each number between 1 and \u2018N\u2019 exactly once. On each round, you can traverse through the array \u2018ARR\u2019 from left to right and collect as many numbers as possible in increasing order. You are given \u2018M\u2019 operations in a 2-dimensional array \u2018Queries\u2019, in which Queries[i] contains two positions of the array \u2018ARR\u2019, whose values need to be swapped. The operations are performed one by one in the given order. Your task is to find the total number of rounds required to collect all the numbers from 1 to \u2018N\u2019 in increasing order after each operation.</h4>\n\n<h4 id=\"for-example\">For example :</h4>\n\n<pre><code>Consider ARR = [4, 5, 1, 2, 3] and Queries=[[2, 3]], in the first operation, we will swap numbers at positions 2 and 3, then the array will be [4, 1, 5, 2, 3]. We will collect 1, 2, and 3 in the first round, and the array after the first round will be [4, 5]. Finally, we will collect 4 and 5 in the second round. Hence, the total number of rounds required is 2 in this case.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers, &#39;N&#39; and \u2018M\u2019, denoting the number of elements in the array &#39;ARR&#39;, and the number of operations to be performed, respectively.\n\nThe second line of each test case contains &#39;N&#39; space-separated integers denoting the elements of the array &#39;ARR&#39;.\n\nThe Next &#39;M&#39; lines of each test case contain two space-separated integers denoting the elements of the array \u2018Queries\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print \u2018M\u2019 space-separated integers - the total number of rounds required to collect the numbers from 1 to \u2018N\u2019,  in increasing order after each operation.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;=  T  &lt;= 10\n1 &lt;=  N &lt;= 10^5\n1 &lt;=  ARR[i]  &lt;= N\n1 &lt;=  Queries[i][0], Queries[i][1]  &lt;= N\n\nAll elements present in the array ARR are unique.\nQueries[i][0] is not equal to Queries[i][1].\n\nWhere &#39;T&#39; denotes the number of test cases, &#39;N&#39; denotes the number of elements in the array, &#39;ARR[i]&#39; denotes the &#39;i&#39;th&#39; element of the array &#39;ARR&#39; and &#39;Queries[i]&#39; is a tuple of two positions of the array \u2018ARR\u2019, whose numbers are needed to be swapped.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 1 \n2 1 3\n2 3\n3 2\n3 2 1\n1 3\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n1 2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>For the first test case, \nIn the first operation, we will swap numbers at positions 2 and 3, and then the array will be [2, 3, 1]. We will collect 1 in the first round, and the array after the first round will be [2, 3]. Finally, we will collect 2 and 3 in the second round. Hence, the total number of rounds required is 2 in this case.\n\nFor the second test case,\nIn the first operation, we will swap numbers at positions 1 and 3, and then the array will be [1, 2, 3]. We will collect all numbers in the first round. Hence, the total number of rounds required is 1 in this case.\nIn the second operation, we will swap numbers at positions 1 and 2, then the array will be [2, 1, 3]. We will collect 1 in the first round, and the array after the first round will be [2, 3]. Finally, we will collect 2 and 3 in the second round. Hence, the total number of rounds required is 2 in this case.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5 2\n4 2 1 5 3\n2 3 \n3 5\n5 2\n1 2 3 4 5\n2 3\n5 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2 3\n2 3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of size `N` containing a permutation of numbers from 1 to N, and a list of `M` swap operations, determine the number of rounds required to collect all numbers from 1 to N in increasing order after each swap operation. In each round, traverse the array from left to right and collect as many numbers as possible in increasing order.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "1 <= ARR[i] <= N",
                    "1 <= Queries[i][0], Queries[i][1] <= N",
                    "All elements present in the array ARR are unique.",
                    "Queries[i][0] is not equal to Queries[i][1]."
                ],
                "testcases": [
                    {
                        "input": "n = 3, nums = [2, 1, 3], queries = [[2, 3]]",
                        "output": "[2]",
                        "explanation": "Initial array: [2, 1, 3]. Swap elements at indices 2 and 3 (1-based indexing). Resulting array: [2, 3, 1].  Round 1: Collect 1. Remaining: [2, 3]. Round 2: Collect 2, 3. Total rounds: 2."
                    },
                    {
                        "input": "n = 3, nums = [3, 2, 1], queries = [[1, 3], [1, 2]]",
                        "output": "[1, 2]",
                        "explanation": "Initial array: [3, 2, 1].\nOperation 1: Swap elements at indices 1 and 3. Array becomes [1, 2, 3]. Round 1: Collect 1, 2, 3. Total rounds: 1.\nOperation 2: Swap elements at indices 1 and 2. Array becomes [2, 1, 3]. Round 1: Collect 1. Remaining: [2, 3]. Round 2: Collect 2, 3. Total rounds: 2."
                    },
                    {
                        "input": "n = 5, nums = [4, 2, 1, 5, 3], queries = [[2, 3], [3, 5]]",
                        "output": "[2, 3]",
                        "explanation": "Initial array: [4, 2, 1, 5, 3].\nOperation 1: Swap elements at indices 2 and 3. Array becomes [4, 1, 2, 5, 3]. Round 1: Collect 1, 2, 3. Remaining: [4, 5]. Round 2: Collect 4, 5. Total rounds: 2.\nOperation 2: Swap elements at indices 3 and 5. Array becomes [4, 1, 3, 5, 2]. Round 1: Collect 1, 2. Remaining: [4, 3, 5]. Round 2: Collect 3, 4, 5. Total rounds: 3."
                    },
                    {
                        "input": "n = 5, nums = [1, 2, 3, 4, 5], queries = [[2, 3], [5, 4]]",
                        "output": "[2, 2]",
                        "explanation": "Initial array: [1, 2, 3, 4, 5].\nOperation 1: Swap elements at indices 2 and 3. Array becomes [1, 3, 2, 4, 5]. Round 1: Collect 1, 2. Remaining: [3, 4, 5]. Round 2: Collect 3, 4, 5. Total rounds: 2.\nOperation 2: Swap elements at indices 5 and 4. Array becomes [1, 3, 2, 5, 4]. Round 1: Collect 1, 2. Remaining: [3, 5, 4]. Round 2: Collect 3, 4, 5. Total rounds: 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>After performing each operation on the array, traverse through the input array in the described manner and collect as many numbers as possible in each round.</p>",
            "<p>Try to think of an approach using an array to store the index of all elements present in the given array.</p>",
            "<p>Try to think of an approach using the total rounds of the current permutation to find the total rounds of the modified permutation after each operation.&nbsp;&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}