{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7181,
            "title": "Colorful Knapsack",
            "titleSlug": "colorful-knapsack_630415",
            "content": "<h4 id=\"you-are-given-n-stones-labeled-from-1-to-n-the-i-th-stone-has-the-weight-w-i-there-are-m-colors-labeled-by-integers-from-1-to-m-the-i-th-stone-has-the-color-c-i-which-is-an-integer-between-1-to-m-both-inclusive\">You are given &#39;N&#39; stones labeled from 1 to &#39;N&#39;. The &#39;i-th&#39; stone has the weight W[i]. There are &#39;M&#39; colors labeled by integers from 1 to &#39;M&#39;. The &#39;i-th&#39; stone has the color C[i] which is an integer between 1 to &#39;M&#39;, both inclusive.</h4>\n\n<h4 id=\"you-have-been-required-to-fill-a-knapsack-with-these-stones-the-knapsack-can-hold-a-total-weight-of-x\">You have been required to fill a Knapsack with these stones. The Knapsack can hold a total weight of &#39;X&#39;.</h4>\n\n<h4 id=\"you-are-required-to-select-exactly-m-stones-one-of-each-color-the-sum-of-the-weights-of-the-stones-must-not-exceed-x-since-you-paid-a-premium-for-a-knapsack-with-capacity-x-you-are-required-to-fill-the-knapsack-as-much-as-possible\">You are required to select exactly &#39;M&#39; stones; one of each color. The sum of the weights of the stones must not exceed &#39;X&#39;. Since you paid a premium for a Knapsack with capacity &#39;X&#39;, you are required to fill the Knapsack as much as possible.</h4>\n\n<h4 id=\"write-a-program-to-calculate-the-best-way-to-fill-the-knapsack-that-is-the-unused-capacity-should-be-minimized\">Write a program to calculate the best way to fill the Knapsack - that is, the unused capacity should be minimized.</h4>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains three integers &#39;N&#39;, &#39;M&#39;, and &#39;X&#39;, separated by a single space. Where &#39;N&#39; represents the total number of stones, &#39;M&#39; represents the total number of colour stones, and &#39;X&#39; represents the total weight of the knapsack.\n\nThe second line contains &#39;N&#39; integers, W[1], W[2], W[3] ..W[i]\u2026 W[N], separated by a single space. \n\nThe third line contains &#39;N&#39; integers C[1], C[2], C[3] ..C[i]\u2026 C[N], separated by single space.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The output prints the minimum unused capacity of the Knapsack(a single integer). If there is no way to fill the Knapsack, print -1.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= M &lt;= N &lt;= 100\n1 &lt;= X &lt;= 10000\n1 &lt;= W[i] &lt;= 100\n1 &lt;= C[i] &lt;= M\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3 3 5\n1 1 1\n1 2 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>We have three stones of each color and hence, we have to select it and in turn, we get a total weight equal to 1 + 1 + 1 = 3. So the minimum unused capacity is 5 - 3 = 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>8 3 13\n2 3 4 2 4 5 2 3\n1 1 1 2 2 2 3 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>We can choose the stone with:\n1. Colour as 1 and with Weight 4, \n2. Colour as 2 and with Weight 5, and\n3. Colour as 3 and with Weight 3 \n\nSo we a total weight 4 + 5 + 3 = 12. Hence the minimum unused capacity is 13 - 12 = 1.\n\nWe cannot get weight more than 12 with any other combination.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 77,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'N' stones with weights W[i] and colors C[i], you need to fill a knapsack with capacity 'X'. You must select exactly 'M' stones, one of each color. The goal is to minimize the unused capacity of the knapsack while ensuring the total weight of selected stones does not exceed 'X'. Return the minimum unused capacity. If it is impossible to fill the knapsack with the given constraints, return -1.",
                "constraints": [
                    "1 <= M <= N <= 100",
                    "1 <= X <= 10000",
                    "1 <= W[i] <= 100",
                    "1 <= C[i] <= M"
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 3, x = 5, w = [1, 1, 1], c = [1, 2, 3]",
                        "output": "2",
                        "explanation": "We have three stones of each color and hence, we have to select it and in turn, we get a total weight equal to 1 + 1 + 1 = 3. So the minimum unused capacity is 5 - 3 = 2."
                    },
                    {
                        "input": "n = 8, m = 3, x = 13, w = [2, 3, 4, 2, 4, 5, 2, 3], c = [1, 1, 1, 2, 2, 2, 3, 3]",
                        "output": "1",
                        "explanation": "We can choose the stone with:\n1. Colour as 1 and with Weight 4,\n2. Colour as 2 and with Weight 5, and\n3. Colour as 3 and with Weight 3\nSo we a total weight 4 + 5 + 3 = 12. Hence the minimum unused capacity is 13 - 12 = 1.\nWe cannot get weight more than 12 with any other combination."
                    },
                    {
                        "input": "n = 4, m = 2, x = 7, w = [2, 3, 4, 5], c = [1, 2, 1, 2]",
                        "output": "0",
                        "explanation": "We can choose the stone with weight 2 (color 1) and the stone with weight 5 (color 2). The total weight is 7, and the unused capacity is 0."
                    },
                    {
                        "input": "n = 4, m = 2, x = 5, w = [2, 3, 4, 5], c = [1, 2, 1, 2]",
                        "output": "0",
                        "explanation": "We can choose the stone with weight 2 (color 1) and the stone with weight 3 (color 2). The total weight is 5, and the unused capacity is 0."
                    },
                    {
                        "input": "n = 4, m = 2, x = 4, w = [2, 3, 4, 5], c = [1, 2, 1, 2]",
                        "output": "-1",
                        "explanation": "The lightest stones of each color are 2 and 3, which have a combined weight of 5. Since the total weight cannot be more than x=4 the knapsack cannot be filled so -1 is returned"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you relate this problem to the standard knapsack problem? If you have weights of each colour separated, think of how you would create the recurrence relation.</p>",
            "<p>Can you relate this problem to the standard knapsack problem? If you have weights of each colour separated, think of how you would create the recurrence relation then apply dynamic programming to it.</p>",
            "<p>Can you do iteratively to avoid stack overflow?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}