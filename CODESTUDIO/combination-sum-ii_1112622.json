{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9961,
            "title": "Combination Sum II",
            "titleSlug": "combination-sum-ii_1112622",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-n-positive-integers\">You are given an array <em><strong>\u2018arr\u2019</strong></em> of <em><strong>\u2018n\u2019</strong></em> positive integers.</h4>\n\n<p><br/></p>\n\n<h4 id=\"you-are-also-given-a-positive-integer-target\">You are also given a positive integer <em><strong>\u2018target\u2019</strong></em>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"your-task-is-to-find-all-unique-combinations-of-elements-of-array-arr-whose-sum-is-equal-to-target-each-number-in-arr-may-only-be-used-once-in-the-combination\">Your task is to find all unique combinations of elements of array \u2018arr\u2019 whose sum is equal to \u2018target\u2019. Each number in \u2018arr\u2019 may only be used once in the combination.</h4>\n\n<p><br/></p>\n\n<h4 id=\"elements-in-each-combination-must-be-in-non-decreasing-order-and-you-need-to-print-all-unique-combinations-in-lexicographical-order\">Elements in each combination must be in non-decreasing order and you need to print all unique combinations in lexicographical order.</h4>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>In lexicographical order, combination/array  \u2018a\u2019  comes before array \u2018b\u2019 if at the first index &#39;i&#39; where &#39;a[i]&#39; differs from &#39;b[i]&#39;, &#39;a[i]&#39; &lt; &#39;b[i]  or length of &#39;a&#39; is less than &#39;b&#39;.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018arr\u2019 = [1, 2, 3, 1], \u2018target\u2019 = 5. \n\nOutput: [[1,1,3], [2,3]]\n\nExplanation:\nAll possible valid combinations with sum = 5 in lexicographical order are -:\n(1, 1, 3)\n(2, 3)\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>Then the first line of input contains two space-separated integers  \u2018n\u2019 and \u2018target\u2019 denoting the number of elements in \u2018arr\u2019 and the \u2018target&#39;.\n\nThe second line of input contains &#39;n&#39; space-separated integers the elements of array \u2018arr\u2019.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print all possible valid combinations in a separate line in the lexicographical order. Elements in each combination must be in non-decreasing order.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>7 8\n10 1 2 7 6 1 5\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 1 6\n1 2 5\n1 7\n2 6\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>Here \u2018n\u2019 = 7, &#39;arr&#39; = [10, 1, 2, 7, 6, 1 , 5], and \u2018target\u2019 = 8\nAll unique combinations whose sum of elements is 8 are -:     \n\n(1, 1, 6)  because, 1 + 1 + 6 = 8\n(1, 2, 5)  because,  1 + 2 + 5 = 8\n(1, 7)  because, 1 + 7 = 8                                                                                                               \n(2, 6)  because,  2 + 6 = 8\n\nNote that, elements in each combination are in non-decreasing order and all unique combinations are arranged in lexicographical order. \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5 5\n1 2 3 1 5\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 1 3\n2 3\n5\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to do this in O(2^n).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= n &lt;= 20\n1 &lt;= arr[i] &lt;= 30\n1 &lt;= target &lt;= 500\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 70,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers `arr` of size `n` and a positive integer `target`, find all unique combinations of elements from `arr` that sum up to `target`. Each number in `arr` can be used only once in a combination. The elements within each combination must be in non-decreasing order, and the unique combinations should be returned in lexicographical order.",
                "constraints": [
                    "1 <= n <= 20",
                    "1 <= arr[i] <= 30",
                    "1 <= target <= 500"
                ],
                "testcases": [
                    {
                        "input": "n = 7, nums = [10, 1, 2, 7, 6, 1, 5], target = 8",
                        "output": "[[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]]",
                        "explanation": "The valid combinations that sum to 8 are [1, 1, 6], [1, 2, 5], [1, 7], and [2, 6]. These are sorted in non-decreasing order within each combination and in lexicographical order among the combinations."
                    },
                    {
                        "input": "n = 5, nums = [1, 2, 3, 1, 5], target = 5",
                        "output": "[[1, 1, 3], [2, 3], [5]]",
                        "explanation": "The valid combinations that sum to 5 are [1, 1, 3], [2, 3], and [5]. These are sorted in non-decreasing order within each combination and in lexicographical order among the combinations."
                    },
                    {
                        "input": "n = 4, nums = [2, 5, 2, 1], target = 5",
                        "output": "[[1, 2, 2], [5]]",
                        "explanation": "The valid combinations that sum to 5 are [1, 2, 2], [5]. Note that we only use each number in nums once when constructing combinations."
                    },
                    {
                        "input": "n = 3, nums = [1, 2, 3], target = 6",
                        "output": "[[1, 2, 3]]",
                        "explanation": "The valid combination that sum to 6 is [1, 2, 3]."
                    },
                    {
                        "input": "n = 3, nums = [1, 2, 3], target = 7",
                        "output": "[]",
                        "explanation": "There are no valid combination whose sum equals to 7."
                    },
                    {
                        "input": "n = 5, nums = [1, 1, 1, 1, 1], target = 5",
                        "output": "[[1, 1, 1, 1, 1]]",
                        "explanation": "The valid combination that sums to 5 is [1, 1, 1, 1, 1]."
                    },
                    {
                        "input": "n = 4, nums = [4, 4, 2, 1, 4], target = 6",
                        "output": "[[2, 4]]",
                        "explanation": "The valid combinations that sum to 6 is [2, 4]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find the sum of all 2 ^ N combinations.</p>",
            "<p>Incrementally build the combination by adding numbers one at a time</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}