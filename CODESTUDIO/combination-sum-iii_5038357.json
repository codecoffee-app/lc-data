{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 20983,
            "title": "Combination Sum III",
            "titleSlug": "combination-sum-iii_5038357",
            "content": "<h4 id=\"you-are-given-k-and-n-and-you-have-to-do-the-following\">You are given <em><strong>\u2018k\u2019</strong></em> and <em><strong>\u2018n\u2019</strong></em> and you have to do the following:-</h4>\n\n<p><br /></p>\n\n<h4 id=\"return-all-possible-combinations-of-arrays-whose-elements-sum-is-equal-to-n-and-you-can-use-only-elements-in-the-range-1-to-9-inclusive-and-you-can-use-each-element-at-most-once-and-the-size-of-the-combination-should-be-exactly-k\">Return all possible combinations of arrays whose elements sum is equal to \u2018n\u2019, and you can use only elements in the range &#39;1&#39; to &#39;9&#39; inclusive, and you can use each element at most once, and the size of the combination should be exactly \u2018k\u2019.</h4>\n\n<p><br /></p>\n\n<h4 id=\"if-there-is-no-combination-return-an-empty-array\">If there is no combination, return an empty array.</h4>\n\n<p><br /></p>\n\n<h4 id=\"it-should-be-noted-that-the-2-d-array-should-be-returned-in-sorted-order-meaning-the-lexicographically-smaller-array-should-come-first\">It should be noted that the 2-D array should be returned in sorted order, meaning the lexicographically smaller array should come first.</h4>\n\n<p><br /></p>\n\n<h4 id=\"also-at-each-index-of-the-2-d-array-the-elements-present-in-the-array-present-at-that-index-should-be-in-sorted-order\">Also, at each index of the 2-D array, the elements present in the array present at that index should be in sorted order.</h4>\n\n<p><br /></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Two combinations are called different if an element is in one combination and not in another. \n\nAlso, in the output, you will see the 2-D array returned by you.\n</code></pre>\n\n<p><br /></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018k\u2019 = 2, \u2018n\u2019 = \u20185\u2019\n\nOutput: [[1, 4], [2, 3]]\n\nSample Explanation: 1 + 4 = 5 and 2 + 3 = 5. Only these two combinations are there, which sum up to n, so the answer is [[1, 4], [2, 3]].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain the value of \u2018k\u2019.\n\nThe second line will contain the value of \u2018n\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Return all possible combinations. If there is no combination, return an empty 2-D array.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 4\n2 3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>1 + 4 = 5 and 2 + 3 = 5. Only these two combinations are there which sum upto n so answer is [[1, 4], [2, 3]].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3\n8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 2 5\n1 3 4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2 :</h5>\n\n<pre><code>1 + 2 + 5 = 8 and 1 + 3 + 4 = 8. Only these two combinations are there which sum upto n so answer is [[1, 2, 5], [1, 3, 4]].\n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity :</h5>\n\n<pre><code>The expected time complexity is O(2^k), where k is the given integer.\n</code></pre>\n\n<h5 id=\"expected-space-complexity\">Expected Space Complexity :</h5>\n\n<pre><code>The expected space complexity is O(k), where k is the given integer.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>2 &lt;= k &lt;= 9\n1 &lt;= n &lt;= 60\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 18,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers 'k' and 'n', find all possible combinations of 'k' distinct numbers from the range [1, 9] (inclusive) such that the sum of these numbers equals 'n'. Each number can be used at most once in a combination. Return a list of these combinations. The combinations within the list should be sorted lexicographically, and the numbers within each combination should be sorted in ascending order. If no such combinations exist, return an empty list.",
                "constraints": [
                    "2 <= k <= 9",
                    "1 <= n <= 60",
                    "Each number in the range [1, 9] can be used at most once."
                ],
                "testcases": [
                    {
                        "input": "k = 2, n = 5",
                        "output": "[[1, 4], [2, 3]]",
                        "explanation": "The combinations of size 2 from the range [1, 9] that sum up to 5 are [1, 4] and [2, 3]. These are sorted lexicographically."
                    },
                    {
                        "input": "k = 3, n = 8",
                        "output": "[[1, 2, 5], [1, 3, 4]]",
                        "explanation": "The combinations of size 3 from the range [1, 9] that sum up to 8 are [1, 2, 5] and [1, 3, 4]. These are sorted lexicographically."
                    },
                    {
                        "input": "k = 3, n = 7",
                        "output": "[[1, 2, 4]]",
                        "explanation": "The only combination of size 3 from the range [1, 9] that sums up to 7 is [1, 2, 4]."
                    },
                    {
                        "input": "k = 9, n = 45",
                        "output": "[[1, 2, 3, 4, 5, 6, 7, 8, 9]]",
                        "explanation": "The only combination of size 9 from the range [1, 9] that sums up to 45 (1+2+3+4+5+6+7+8+9) is [1, 2, 3, 4, 5, 6, 7, 8, 9]."
                    },
                    {
                        "input": "k = 4, n = 1",
                        "output": "[]",
                        "explanation": "It's impossible to find a combination of 4 distinct numbers from [1, 9] which sums to 1 as the minimum sum possible is 1 + 2 + 3 + 4 = 10 > 1. Therefore, there are no combinations."
                    },
                    {
                        "input": "k = 2, n = 18",
                        "output": "[]",
                        "explanation": "The maximum sum for k=2 would be 8+9=17. Since 18 is greater than 17, no solution exists."
                    },
                    {
                        "input": "k = 2, n = 6",
                        "output": "[[1, 5], [2, 4]]",
                        "explanation": "The combinations of size 2 from the range [1, 9] that sum up to 6 are [1, 5] and [2, 4]. These are sorted lexicographically."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about some backtracking solution?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}