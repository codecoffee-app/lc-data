{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 20983,
            "title": "Combination Sum III",
            "titleSlug": "combination-sum-iii_5038357",
            "content": "<h4 id=\"you-are-given-k-and-n-and-you-have-to-do-the-following\">You are given <em><strong>\u2018k\u2019</strong></em> and <em><strong>\u2018n\u2019</strong></em> and you have to do the following:-</h4>\n\n<p><br /></p>\n\n<h4 id=\"return-all-possible-combinations-of-arrays-whose-elements-sum-is-equal-to-n-and-you-can-use-only-elements-in-the-range-1-to-9-inclusive-and-you-can-use-each-element-at-most-once-and-the-size-of-the-combination-should-be-exactly-k\">Return all possible combinations of arrays whose elements sum is equal to \u2018n\u2019, and you can use only elements in the range &#39;1&#39; to &#39;9&#39; inclusive, and you can use each element at most once, and the size of the combination should be exactly \u2018k\u2019.</h4>\n\n<p><br /></p>\n\n<h4 id=\"if-there-is-no-combination-return-an-empty-array\">If there is no combination, return an empty array.</h4>\n\n<p><br /></p>\n\n<h4 id=\"it-should-be-noted-that-the-2-d-array-should-be-returned-in-sorted-order-meaning-the-lexicographically-smaller-array-should-come-first\">It should be noted that the 2-D array should be returned in sorted order, meaning the lexicographically smaller array should come first.</h4>\n\n<p><br /></p>\n\n<h4 id=\"also-at-each-index-of-the-2-d-array-the-elements-present-in-the-array-present-at-that-index-should-be-in-sorted-order\">Also, at each index of the 2-D array, the elements present in the array present at that index should be in sorted order.</h4>\n\n<p><br /></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Two combinations are called different if an element is in one combination and not in another. \n\nAlso, in the output, you will see the 2-D array returned by you.\n</code></pre>\n\n<p><br /></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018k\u2019 = 2, \u2018n\u2019 = \u20185\u2019\n\nOutput: [[1, 4], [2, 3]]\n\nSample Explanation: 1 + 4 = 5 and 2 + 3 = 5. Only these two combinations are there, which sum up to n, so the answer is [[1, 4], [2, 3]].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain the value of \u2018k\u2019.\n\nThe second line will contain the value of \u2018n\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Return all possible combinations. If there is no combination, return an empty 2-D array.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 4\n2 3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>1 + 4 = 5 and 2 + 3 = 5. Only these two combinations are there which sum upto n so answer is [[1, 4], [2, 3]].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3\n8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 2 5\n1 3 4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2 :</h5>\n\n<pre><code>1 + 2 + 5 = 8 and 1 + 3 + 4 = 8. Only these two combinations are there which sum upto n so answer is [[1, 2, 5], [1, 3, 4]].\n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity :</h5>\n\n<pre><code>The expected time complexity is O(2^k), where k is the given integer.\n</code></pre>\n\n<h5 id=\"expected-space-complexity\">Expected Space Complexity :</h5>\n\n<pre><code>The expected space complexity is O(k), where k is the given integer.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>2 &lt;= k &lt;= 9\n1 &lt;= n &lt;= 60\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 18,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, 'k' and 'n', find all possible combinations of 'k' distinct numbers from the set {1, 2, 3, 4, 5, 6, 7, 8, 9} that sum up to 'n'. Each number can be used at most once in a combination.\n\nReturn a 2D array containing all such combinations. The combinations within the 2D array must be lexicographically sorted, and the numbers within each combination must also be sorted in ascending order. If no such combination exists, return an empty 2D array.",
                "constraints": [
                    "2 <= k <= 9",
                    "1 <= n <= 60",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n5",
                        "output": "1 4\n2 3",
                        "explanation": "The possible combinations of size 2 with numbers from 1 to 9 that sum up to 5 are [1, 4] and [2, 3]. Both 1+4 and 2+3 equal 5."
                    },
                    {
                        "input": "3\n8",
                        "output": "1 2 5\n1 3 4",
                        "explanation": "The possible combinations of size 3 with numbers from 1 to 9 that sum up to 8 are [1, 2, 5] and [1, 3, 4]. Both 1+2+5 and 1+3+4 equal 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about some backtracking solution?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}