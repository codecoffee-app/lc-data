{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9265,
            "title": "Combination Sum",
            "titleSlug": "combination-sum_981296",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-n-distinct-positive-integers-you-are-also-given-a-non-negative-integer-b\">You are given an array <strong><em>&#39;ARR&#39;</strong></em> of <strong><em>&#39;N&#39;</strong></em> distinct positive integers. You are also given a non-negative integer <strong><em>&#39;B&#39;</strong></em>.</h4>\n\n<p><Br/></p>\n\n<h4 id=\"your-task-is-to-return-all-unique-combinations-in-the-array-whose-sum-equals-b-a-number-can-be-chosen-any-number-of-times-from-the-array-arr\">Your task is to return all unique combinations in the array whose sum equals &#39;B&#39;. A number can be chosen any number of times from the array &#39;ARR&#39;.</h4>\n\n<p><Br/></p>\n\n<h4 id=\"elements-in-each-combination-must-be-in-non-decreasing-order\">Elements in each combination must be in non-decreasing order.</h4>\n\n<p><Br/></p>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Let the array &#39;ARR&#39; be [1, 2, 3] and &#39;B&#39; = 5. Then all possible valid combinations are-\n\n(1, 1, 1, 1, 1)\n(1, 1, 1, 2)\n(1, 1, 3)\n(1, 2, 2)\n(2, 3)\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>Then the first line contains two space-separated integers, &#39;N&#39; and &#39;B&#39;, denoting the number of elements in the array and the target sum, respectively.\nThe second line of each test case contains &#39;N&#39; space-separated integers representing the elements of the array &#39;ARR&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The only line will contain &#39;Yes&#39;, if the answer is correct. Else, it will contain &#39;No&#39;.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3 8\n2 3 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>Yes\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>All possible valid combinations are:\n2 2 2 2\n2 3 3\n3 5\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3 5\n1 2 3 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>Yes\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;N&#39; &lt;= 15\n1 &lt;= &#39;B&#39; &lt;= 20\n1 &lt;= &#39;ARR[i]&#39; &lt;= 20\n\nTime Limit: 1sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 75,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `ARR` of `N` distinct positive integers and a non-negative integer `B`, find all unique combinations of elements from `ARR` that sum up to `B`.  Each number in `ARR` can be chosen an unlimited number of times. The elements within each combination must be in non-decreasing order.",
                "constraints": [
                    "1 <= N <= 15",
                    "1 <= B <= 20",
                    "1 <= ARR[i] <= 20",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "3 8\n2 3 5",
                        "output": "Yes",
                        "explanation": "The valid combinations that sum to 8 are:\n2 2 2 2\n2 3 3\n3 5"
                    },
                    {
                        "input": "3 5\n1 2 3",
                        "output": "Yes",
                        "explanation": "The valid combinations that sum to 5 are:\n1 1 1 1 1\n1 1 1 2\n1 1 3\n1 2 2\n2 3"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think about a recursive solution</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}