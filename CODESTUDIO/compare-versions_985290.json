{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9426,
            "title": "Compare versions",
            "titleSlug": "compare-versions_985290",
            "content": "<h4 id=\"you-are-given-two-strings-version1-and-version2-representing-the-version-numbers-your-task-is-to-compare-them-and-find-out-which-one-of-them-is-the-latest-version\">You are given two strings \u2018Version1\u2019 and \u2018Version2\u2019 representing the version numbers. Your task is to compare them and find out which one of them is the latest version.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The input strings consist of digits and dots only and both the strings are started and terminated by a digit. There are no leading zeros and no zeros following a dot in both the strings except in the case of zero itself.\n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>Version1 = \u201c1.23.45\u201d, Version2 = \u201c1.23.456\u201d\n\nThe first two parts of both the strings are the same. The third part of Version2 is greater than the third part of Version1, thus string Version2 is of the latest version.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then, the T test cases follow.\n\nThe first line of each test case contains the string \u2018Version1\u2019.\n\nThe second line of each test case contains the string \u2018Version2\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print 1 if version 1 is latest, -1  if version 2 is latest and 0 if both versions are the same.\n\nPrint output of each test case in separate lines.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= |Version1| &lt;= 10000 \n1 &lt;= |Version2| &lt;= 10000\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1.2.4\n1.2.3\n10.2.2\n10.2.2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case:\nThe first two parts of both the strings are the same but the third part of the 1st string is bigger than that of the 2nd string. Hence our answer is 1.\n\nFor the second test case:\nAs both the versions are identical in this case, the answer will be 0 in this case.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n123.45\n123\n1.999\n10\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>1\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a function `compareVersions` that takes two strings, `version1` and `version2`, as input. These strings represent version numbers. Your function should compare these version numbers and return: 1 if `version1` is the latest version, -1 if `version2` is the latest version, and 0 if both versions are the same.  Version strings consist of digits and dots only. They start and end with a digit. There are no leading zeros or zeros following a dot, except in the case of zero itself.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= |Version1| <= 10000 (Length of version1 string)",
                    "1 <= |Version2| <= 10000 (Length of version2 string)"
                ],
                "testcases": [
                    {
                        "input": "version1 = \"1.2.4\", version2 = \"1.2.3\"",
                        "output": "1",
                        "explanation": "The first two parts of both the strings are the same but the third part of the 1st string is bigger than that of the 2nd string. Hence the output is 1."
                    },
                    {
                        "input": "version1 = \"10.2.2\", version2 = \"10.2.2\"",
                        "output": "0",
                        "explanation": "As both the versions are identical in this case, the output will be 0."
                    },
                    {
                        "input": "version1 = \"123.45\", version2 = \"123\"",
                        "output": "1",
                        "explanation": "Version1 has an additional part after '123' making it larger after comparison, therefore the output is 1."
                    },
                    {
                        "input": "version1 = \"1.999\", version2 = \"10\"",
                        "output": "-1",
                        "explanation": "Version2, '10', is greater than '1.999'. Therefore, the output is -1."
                    },
                    {
                        "input": "version1 = \"1.0.1\", version2 = \"1\"",
                        "output": "1",
                        "explanation": "Version1 has values in its subsequent parts (0 and 1) and thus is greater than Version2."
                    },
                    {
                        "input": "version1 = \"1\", version2 = \"1.0.1\"",
                        "output": "-1",
                        "explanation": "Version2 has values in its subsequent parts (0 and 1) and thus is greater than Version1."
                    },
                    {
                        "input": "version1 = \"0.1\", version2 = \"0.0.1\"",
                        "output": "1",
                        "explanation": "After splitting into parts, comparing 0.1 and 0.0.1. The version '0.1' is greater since '1' is greater than '0'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a recursive comparison approach.</p>",
            "<p>Think of an iterative comparison approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}