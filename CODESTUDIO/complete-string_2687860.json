{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15725,
            "title": "Complete String",
            "titleSlug": "complete-string_2687860",
            "content": "<h4 id=\"ninja-developed-a-love-for-arrays-and-strings-so-this-time-his-teacher-gave-him-an-array-of-strings-a-of-size-n-each-element-of-this-array-is-a-string-the-teacher-taught-ninja-about-prefixes-in-the-past-so-he-wants-to-test-his-knowledge\">Ninja developed a love for arrays and strings so this time his teacher gave him an array of strings, \u2018A\u2019 of size \u2018N\u2019. Each element of this array is a string. The teacher taught Ninja about prefixes in the past, so he wants to test his knowledge.</h4>\n\n<h4 id=\"a-string-is-called-a-complete-string-if-every-prefix-of-this-string-is-also-present-in-the-array-a-ninja-is-challenged-to-find-the-longest-complete-string-in-the-array-a-if-there-are-multiple-strings-with-the-same-length-return-the-lexicographically-smallest-one-and-if-no-string-exists-return-none\">A string is called a complete string if every prefix of this string is also present in the array \u2018A\u2019. Ninja is challenged to find the longest complete string in the array \u2018A\u2019.If there are multiple strings with the same length, return the lexicographically smallest one and if no string exists, return &quot;None&quot;.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>String \u2018P\u2019 is lexicographically smaller than string \u2018Q\u2019, if : \n\n1. There exists some index \u2018i\u2019 such that for all \u2018j\u2019 &lt; \u2018i\u2019 , \u2018P[j] = Q[j]\u2019 and \u2018P[i] &lt; Q[i]\u2019. E.g. \u201cninja\u201d &lt; \u201cnoder\u201d.\n\n2. If \u2018P\u2019 is a prefix of string \u2018Q\u2019, e.g. \u201ccode\u201d &lt; \u201ccoder\u201d.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>N = 4\nA = [ \u201cab\u201d , \u201cabc\u201d , \u201ca\u201d , \u201cbp\u201d ] \n\nExplanation : \n\nOnly prefix of the string \u201ca\u201d is \u201ca\u201d which is present in array \u2018A\u2019. So, it is one of the possible strings.\n\nPrefixes of the string \u201cab\u201d are \u201ca\u201d and \u201cab\u201d both of which are present in array \u2018A\u2019. So, it is one of the possible strings.\n\nPrefixes of the string \u201cbp\u201d are \u201cb\u201d and \u201cbp\u201d. \u201cb\u201d is not present in array \u2018A\u2019. So, it cannot be a valid string.\n\nPrefixes of the string \u201cabc\u201d are \u201ca\u201d,\u201cab\u201d and \u201cabc\u201d all of which are present in array \u2018A\u2019. So, it is one of the possible strings.\n\nWe need to find the maximum length string, so \u201cabc\u201d is the required string.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases to be run. Then the test cases follow.\n\nThe second line of each test case contains an integer \u2018N\u2019 denoting the size of array \u2018A\u2019.\n\nThe third line of each test case contains \u2018N\u2019 space-separated strings denoting the elements of array \u2018A\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the longest string in \u2018A\u2019, such that every prefix of this string is also present in the array \u2018A\u2019. If there are multiple strings with the same length, return the lexicographically smallest one and if no string exists, return &quot;None&quot; as answer.\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n1 &lt;= A[i].length &lt;= 10^5\nA[i] only consists of lowercase english letters.\nSum of A[i].length &lt;= 10^5 over all test cases\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n6\nn ni nin ninj ninja ninga\n2\nab bc\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>ninja\nNone\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For test case 1 we have, \n\nAll the prefixes of \u201cninja\u201d -&gt; \u201cn\u201d, \u201cni\u201d, \u201cnin\u201d, \u201cninj\u201d and \u201cninja\u201d are present in array \u2018A\u2019. So, \u201cninja\u201d is a valid answer whereas for \u201cninga\u201d , the prefix \u201cning\u201d is not present in array \u2018A\u2019.\n\nSo we output \u201cninja\u201d.\n\nFor test case 2 we have, \n\nThe prefixes of \u201cab\u201d are \u201ca\u201d and \u201cab\u201d. \u201ca\u201d is not present in array \u2018A\u2019. So, \u201cab\u201d is not a valid answer.\n\nThe prefixes of \u201cbc\u201d are \u201cb\u201d and \u201cbc\u201d. \u201cb\u201d is not present in array \u2018A\u2019. So, \u201cab\u201d is not a valid answer.\n\nSince none of the strings is a valid answer we output \u201cNone\u201d.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5\ng a ak szhkb hy \n4\nkez vfj vfjq vfjqo \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>ak\nNone\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 211,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of strings 'A' of size 'N', find the longest string in 'A' such that every prefix of this string is also present in the array 'A'. If there are multiple strings with the same length, return the lexicographically smallest one. If no such string exists, return \"None\". A string is considered complete if all its prefixes are present in the array.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "1 <= A[i].length <= 10^5",
                    "A[i] only consists of lowercase english letters.",
                    "Sum of A[i].length <= 10^5 over all test cases",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "6\nn ni nin ninj ninja ninga",
                        "output": "ninja",
                        "explanation": "The string 'ninja' has prefixes 'n', 'ni', 'nin', 'ninj', and 'ninja', all of which are present in the array. 'ninga' is not a valid answer because prefix 'ning' is not present."
                    },
                    {
                        "input": "2\nab bc",
                        "output": "None",
                        "explanation": "Neither 'ab' nor 'bc' are complete strings as their prefixes ('a' and 'b' respectively) are not present in the array."
                    },
                    {
                        "input": "5\ng a ak szhkb hy",
                        "output": "ak",
                        "explanation": "The string 'ak' has prefixes 'a' and 'ak', both of which are present in the array. other strings either have not prefixes or not complete"
                    },
                    {
                        "input": "4\nkez vfj vfjq vfjqo",
                        "output": "None",
                        "explanation": "No string is a complete string as their prefixes are not present in the array."
                    },
                    {
                        "input": "4\nab abc a bp",
                        "output": "abc",
                        "explanation": "The string 'abc' is the longest complete string as prefixes 'a', 'ab' and 'abc' all exist in array"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try finding the prefix of each string and checking if they exist in the array.</p>",
            "<p>Can you think of using some data structure to avoid finding all prefixes of strings.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Tries",
                "slug": "tries"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity : O(Sum(A[i]))\n    Space Complexity : O(Sum(A[i]))\n\n    where 'Sum(A[i])' is the sum of size of all words 'A[i]'.\n */\n\n// Trie data structure class.\nstruct trieNode \n{ \n    struct trieNode *child[26]; \n    bool isEnding;\n}; \nstruct trieNode *newTrieNode(void) \n{ \n    struct trieNode *newNode = new trieNode; \n    newNode->isEnding = false;\n    for (int i = 0; i<26; i++) \n        newNode->child[i] = NULL; \n    return newNode; \n} \n\n// Functon to insert the word into the trie.\nvoid insert(struct trieNode *root, string str) \n{ \n    int len = str.length(); \n    struct trieNode *pCrawl = root; \n  \n    for (int level = 0; level<len; level++) \n    { \n        int index = str[level]-'a'; \n        if (!pCrawl->child[index]) \n            pCrawl->child[index] = newTrieNode(); \n        pCrawl = pCrawl->child[index]; \n    } \n    // Mark the ending of this word in trie.\n    pCrawl ->isEnding = true;\n}\n\n  // Function to check if this word has all prefixes in array.\nbool allPrefixed(struct trieNode *root, string word) {\n    struct trieNode *pCrawl = root; \n    for (char c: word) {\n      int i = c - 'a';\n      pCrawl = pCrawl -> child[i];\n      if(pCrawl == NULL || pCrawl->isEnding == false){\n        return false;\n      }\n    }\n    // We reach here if each prefix of word is present in array.\n    return true;\n}\n\n\nstring completeString(int n, vector<string> &a) {\n\n    // Initialise answer as empty string.\n    string ans = \"\";\n\n    struct trieNode *root = newTrieNode();\n\n    // Insert each element of array into Trie.\n    for (string word: a)\n      insert(root, word);\n\n    // Traverse over strings and check which of them have all prefixes present in array.\n    for (string word: a) {\n      if (!allPrefixed(root, word))\n        continue;\n      // If current word is longer than 'ans'.\n      if (ans.size() < word.size()) {\n        ans = word;\n      }\n      // If current word is of same size as 'ans', but is lexicographically smaller than 'ans'.\n      else if (ans.size() == word.size() && word < ans) {\n        ans = word;\n      }\n    }\n\n    // If no valid word is present, return \"None\".\n    if (ans.size() == 0) {\n      ans = \"None\";\n    }\n\n    // Return the result.\n    return ans;\n  }\n\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity : O(Sum(A[i]))\r\n    Space Complexity : O(Sum(A[i]))\r\n\r\n    where 'Sum(A[i])' is the sum of length of all words 'A[i]'.\r\n\r\n'''\r\n\r\nfrom typing import *\r\n\r\nclass TrieNode:\r\n    def __init__(self):\r\n        self.children = [None for i in range(26)]\r\n        self.isEnding = False\r\n\r\n# Function to insert a string into trie.\r\ndef insert(word, root):\r\n\r\n    node = root\r\n    for c in word:\r\n        i = ord(c) - ord('a')\r\n        # If the next pointer is null for next character, allot the new memory.\r\n        if node.children[i] == None:\r\n            node.children[i] = TrieNode()\r\n        \r\n        node = node.children[i]\r\n    \r\n    # Mark the ending of word in trie.\r\n    node.isEnding = True\r\n\r\n# Function to check if this word has all prefixes in array.\r\ndef allPrefixed(word, root):\r\n    node = root\r\n    for c in word:\r\n        i = ord(c) - ord('a')\r\n        node = node.children[i]\r\n        # Check if each prefix is a word in the trie.\r\n        if node.isEnding == False:\r\n            return False\r\n        \r\n    \r\n    # We reach here if each prefix of word is present in array.\r\n    return True\r\n\r\ndef completeString(n: int, a: List[str])-> str:\r\n\r\n    # Initialise final answer as empty string.\r\n    ans = \"\"\r\n\r\n    root = TrieNode()\r\n\r\n    # Insert each element of array into Trie.\r\n    for i in a:\r\n        insert(i, root)\r\n    \r\n\r\n    # Traverse over strings and check which of them have all prefixes present in array.\r\n    for word in a:\r\n        # This word is not valid.\r\n        if allPrefixed(word, root) == False:\r\n            continue\r\n        \r\n        # If current word is longer than 'ans'.\r\n        if len(ans) < len(word):\r\n            ans = word\r\n\r\n        # If current word is of same length as 'ans', but is lexicographically smaller than 'ans'.\r\n        elif len(ans) == len(word) and word < ans:\r\n            ans = word\r\n        \r\n    \r\n\r\n    # If no valid word is present, return \"None\".\r\n    if len(ans)== 0:\r\n        ans = \"None\"\r\n    \r\n\r\n    # Return the final result.\r\n    return ans",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(Sum(A[i]))\r\n    Space Complexity : O(Sum(A[i]))\r\n\r\n    where 'Sum(A[i])' is the sum of length of all words 'A[i]'.\r\n */\r\n\r\n// Trie data structure class.\r\nclass TrieNode {\r\n  public TrieNode[] children = new TrieNode[26];\r\n  public boolean isEnding = false;\r\n}\r\n\r\nclass Solution {\r\n\r\n  private static TrieNode root = new TrieNode();\r\n\r\n  public static String completeString(int n, String[] a) {\r\n\r\n    // Initialise final answer as empty string.\r\n    String ans = \"\";\r\n\r\n    root=new TrieNode();\r\n\r\n    // Insert each element of array into Trie.\r\n    for (final String word: a) {\r\n      insert(word);\r\n    }\r\n\r\n    // Traverse over strings and check which of them have all prefixes present in array.\r\n    for (final String word: a) {\r\n      // This word is not valid.\r\n      if (!allPrefixed(word)) {\r\n         continue;\r\n      }\r\n      // If current word is longer than 'ans'.\r\n      if (ans.length() < word.length()) {\r\n        ans = word;\r\n      }\r\n      // If current word is of same length as 'ans', but is lexicographically smaller than 'ans'.\r\n      else if (ans.length() == word.length() && ans.compareTo(word) > 0) {\r\n        ans = word;\r\n      }\r\n    }\r\n\r\n    // If no valid word is present, return \"None\".\r\n    if (ans.length() == 0) {\r\n      ans = \"None\";\r\n    }\r\n\r\n    // Return the final result.\r\n    return ans;\r\n  }\r\n\r\n  // Function to insert a string into trie.\r\n  private static void insert(final String word) {\r\n    TrieNode node = root;\r\n    for (final char c: word.toCharArray()) {\r\n      final int i = c - 'a';\r\n      // If the next pointer is null for next character, allot the new memory.\r\n      if (node.children[i] == null) {\r\n        node.children[i] = new TrieNode();\r\n      }\r\n      node = node.children[i];\r\n    }\r\n    // Mark the ending of word in trie.\r\n    node.isEnding = true;\r\n  }\r\n\r\n  // Function to check if this word has all prefixes in array.\r\n  private static boolean allPrefixed(final String word) {\r\n    TrieNode node = root;\r\n    for (final char c: word.toCharArray()) {\r\n      final int i = c - 'a';\r\n      node = node.children[i];\r\n      // Check if each prefix is a word in the trie.\r\n      if (!node.isEnding) {\r\n        return false;\r\n      }\r\n    }\r\n    // We reach here if each prefix of word is present in array.\r\n    return true;\r\n  }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}