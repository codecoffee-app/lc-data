{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10209,
            "title": "Complex Number Class",
            "titleSlug": "complex-number-class_1171182",
            "content": "<h4 id=\"a-complexnumber-class-contains-two-data-members-one-is-the-real-part-r-and-the-other-is-imaginary-i-both-integers\">A ComplexNumber class contains two data members: one is the real part (R) and the other is imaginary (I) (both integers).</h4>\n\n<h4 id=\"implement-the-complex-numbers-class-that-contains-the-following-functions\">Implement the Complex numbers class that contains the following functions -</h4>\n\n<h5 id=\"1-constructor\">1. constructor</h5>\n\n<h4 id=\"you-need-to-create-the-appropriate-constructor\">You need to create the appropriate constructor.</h4>\n\n<h5 id=\"2-plus\">2. plus -</h5>\n\n<h4 id=\"this-function-adds-two-given-complex-numbers-and-updates-the-first-complex-number\">This function adds two given complex numbers and updates the first complex number.</h4>\n\n<h4 id=\"e-g\">e.g.</h4>\n\n<pre><code>if C1 = 4 + i5 and C2 = 3 +i1\nC1.plus(C2) results in: \nC1 = 7 + i6 and C2 = 3 + i1\n</code></pre>\n\n<h5 id=\"3-multiply\">3. multiply -</h5>\n\n<h4 id=\"this-function-multiplies-two-given-complex-numbers-and-updates-the-first-complex-number\">This function multiplies two given complex numbers and updates the first complex number.</h4>\n\n<h4 id=\"e-g\">e.g.</h4>\n\n<pre><code>if C1 = 4 + i5 and C2 = 1 + i2\nC1.multiply(C2) results in: \nC1 = -6 + i13 and C2 = 1 + i2\n</code></pre>\n\n<h5 id=\"4-print\">4. print -</h5>\n\n<h4 id=\"this-function-prints-the-given-complex-number-in-the-following-format\">This function prints the given complex number in the following format :</h4>\n\n<pre><code>a + ib\n</code></pre>\n\n<h4 id=\"note-there-is-space-before-and-after-plus-sign-and-no-space-between-i-iota-symbol-and-b\">Note: There is space before and after &#39;+&#39; (plus sign) and no space between &#39;i&#39; (iota symbol) and b.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains two integers - real and imaginary part of 1st complex number.\n\nThe second line of the input contains Two integers - the real and imaginary part of the 2nd complex number.\n\nThe first line of the input contains an integer representing choice (1 or 2) (1 represents plus function will be called and 2 represents multiply function will be called)\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>The only line of the output prints the complex number in the following format a + ib\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>4 5\n6 7\n1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>10 + i12\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>4 5\n6 7\n2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>-11 + i58\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 299,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a `ComplexNumber` class that represents complex numbers with integer real and imaginary parts. The class should include the following functionalities:\n\n1.  **Constructor:**  Initialize a `ComplexNumber` object with given real and imaginary parts.\n2.  **`plus(ComplexNumber other)`:** Add the `other` complex number to the current complex number, modifying the current complex number. The real and imaginary parts of the current object are updated to reflect the sum.\n3.  **`multiply(ComplexNumber other)`:** Multiply the `other` complex number with the current complex number, modifying the current complex number.  The real and imaginary parts of the current object are updated to reflect the product.\n4.  **`print()`:** Print the complex number in the format \"a + ib\", where 'a' is the real part and 'b' is the imaginary part. Note the space before and after the '+' sign and no space between 'i' and 'b'.",
                "constraints": [],
                "testcases": [
                    {
                        "input": "4 5\n6 7\n1",
                        "output": "10 + i12",
                        "explanation": "The first complex number is 4 + i5, and the second is 6 + i7. The operation is addition. The result is (4+6) + i(5+7) = 10 + i12."
                    },
                    {
                        "input": "4 5\n6 7\n2",
                        "output": "-11 + i58",
                        "explanation": "The first complex number is 4 + i5, and the second is 6 + i7. The operation is multiplication. The result is (4*6 - 5*7) + i(4*7 + 5*6) = (24 - 35) + i(28 + 30) = -11 + i58."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Ad-Hoc",
                "slug": "ad-hoc"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "#include<iostream>\n\nusing namespace std;\n\nclass ComplexNumbers {\n    int real;\n    int imaginary;\n\n    public:\n        ComplexNumbers(int real, int imaginary) {\n            this -> real = real;\n            this -> imaginary = imaginary;\n        }\n\n    void plus(ComplexNumbers c) {\n        int real = this -> real + c.real;\n        int imaginary = this -> imaginary + c.imaginary;\n        this -> real = real;\n        this -> imaginary = imaginary;\n    }\n\n    void multiply(ComplexNumbers c) {\n        int real = (this -> real * c.real) - (this -> imaginary * c.imaginary);\n        int imaginary = (this -> real * c.imaginary) + (this -> imaginary * c.real);\n        this -> real = real;\n        this -> imaginary = imaginary;\n    }\n\n    void print() {\n        cout << this -> real << \" + \" << \"i\" << this -> imaginary << endl;\n    }\n\n};\n\nint main() {\n    int real1, imaginary1, real2, imaginary2;\n\n    cin >> real1 >> imaginary1;\n    cin >> real2 >> imaginary2;\n\n    ComplexNumbers c1(real1, imaginary1);\n    ComplexNumbers c2(real2, imaginary2);\n\n    int choice;\n    cin >> choice;\n\n    if (choice == 1) {\n        c1.plus(c2);\n        c1.print();\n    } else if (choice == 2) {\n        c1.multiply(c2);\n        c1.print();\n    } else {\n        return 0;\n    }\n\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "class ComplexNumbers:\n    \n    def __init__(self,real,imaginary):\n        self.real = real\n        self.imaginary = imaginary\n        \n    def plus(self,c):\n        \n        real = self.real + c.real\n        imaginary = self.imaginary + c.imaginary\n        \n        self.real = real\n        self.imaginary = imaginary\n        \n    def multiply(self,c):\n        \n        real = (self.real * c.real) - (self.imaginary * c.imaginary)\n        imaginary = (self.real * c.imaginary) + (self.imaginary * c.real)\n        \n        self.real = real\n        self.imaginary = imaginary\n        \n    def print(self):\n        \n        print(str(self.real) + \" + \" + \"i\" + str(self.imaginary))\n\n        \nreal1,imaginary1 = map(int,input().split(' '))\nreal2,imaginary2 = map(int,input().split(' '))\n\nC1 = ComplexNumbers(real1,imaginary1)\nC2 = ComplexNumbers(real2,imaginary2)\nchoice = int(input())\n\nif(choice == 1):\n    C1.plus(C2)\n    C1.print()\n    \nelif choice == 2:\n    C1.multiply(C2)\n    C1.print()\n    \nelse:\n    pass\n\n\n\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "import java.util.Scanner;\r\n\r\nclass ComplexNumbers {\r\n\r\n\tint real;\r\n\tint imaginary;\r\n\r\n\tpublic ComplexNumbers(int real, int imaginary) {\r\n\t\tthis.real = real;\r\n\t\tthis.imaginary = imaginary;\r\n\t}\r\n\r\n\tpublic void plus(ComplexNumbers c) {\r\n\t\tint real = this.real + c.real;\r\n\t\tint imaginary = this.imaginary + c.imaginary;\r\n\t\tthis.real = real;\r\n\t\tthis.imaginary = imaginary;\r\n\t}\r\n\r\n\tpublic void multiply(ComplexNumbers c) {\r\n\t\tint real = (this.real * c.real) - (this.imaginary * c.imaginary);\r\n\t\tint imaginary = (this.real * c.imaginary) + (this.imaginary * c.real);\r\n\t\tthis.real = real;\r\n\t\tthis.imaginary = imaginary;\r\n\t}\r\n\r\n\tpublic void print() {\r\n\t\tSystem.out.print(this.real + \" + \" + \"i\" + this.imaginary);\r\n\t}\r\n\r\n}\r\n\r\nclass Solution {\r\n\r\n\tpublic static void main(String args[]) {\r\n\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint real1, imaginary1, real2, imaginary2;\r\n\t\treal1 = sc.nextInt();\r\n\t\timaginary1 = sc.nextInt();\r\n\t\treal2 = sc.nextInt();\r\n\t\timaginary2 = sc.nextInt();\r\n\r\n\t\tComplexNumbers c1 = new ComplexNumbers(real1, imaginary1);\r\n\t\tComplexNumbers c2 = new ComplexNumbers(real2, imaginary2);\r\n\r\n\t\tint choice = sc.nextInt();\r\n\t\tif (choice == 1) {\r\n\t\t\tc1.plus(c2);\r\n\t\t\tc1.print();\r\n\t\t} else if (choice == 2) {\r\n\t\t\tc1.multiply(c2);\r\n\t\t\tc1.print();\r\n\t\t}\r\n\r\n\t}\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}