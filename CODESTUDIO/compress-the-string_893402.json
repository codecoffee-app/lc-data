{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8781,
            "title": "Compress the String",
            "titleSlug": "compress-the-string_893402",
            "content": "<h4 id=\"ninja-has-been-given-a-program-to-do-basic-string-compression-for-a-character-that-is-consecutively-repeated-more-than-once-he-needs-to-replace-the-consecutive-duplicate-occurrences-with-the-count-of-repetitions\">Ninja has been given a program to do basic string compression. For a character that is consecutively repeated more than once, he needs to replace the consecutive duplicate occurrences with the count of repetitions.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>If a string has &#39;x&#39; repeated 5 times, replace this &quot;xxxxx&quot; with &quot;x5&quot;.\n\nThe string is compressed only when the repeated character count is more than 1.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The consecutive count of every character in the input string is less than or equal to 9.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run.\n\nThe first line of each test case contains one string \u2018S\u2019 denoting the input string that needs to be compressed.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each case, we need to print a string representing the compressed string.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to input or print anything, and it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= |S| &lt;= 5000\n\nWhere |S| is the size of the string.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\naaabbddccc\nggttttffffrreee\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>a3b2d2c3\ng2t4f4r2e3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nFor the first test case of sample output 1, our compressed string is \u201ca3b2d2c3\u201d. It represents that the string contains 3 consecutive \u2018a\u2019, 2 consecutive \u2018b\u2019, 2 consecutive \u2018d\u2019, and 3 consecutive \u2018c\u2019.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\nxyzzz\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>xyz3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>Test case 1:\nFor the first test case of sample output 2, our compressed string is \u2018xyz3\u2019. As the occurrence of \u2018x\u2019 and \u2018y\u2019 is 1, hence we do not need to add the count of their repetitions. For the last character \u2018z\u2019, we have 3 repetitions.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 25,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 's', compress it by replacing consecutive duplicate characters with the count of their repetitions if the repetition count is greater than 1. For example, 'xxxxx' should be replaced with 'x5'. The consecutive count of every character in the input string is less than or equal to 9. Implement the function `compressTheString` to perform this compression.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= |S| <= 5000",
                    "The consecutive count of every character in the input string is less than or equal to 9."
                ],
                "testcases": [
                    {
                        "input": "s = \"aaabbddccc\"",
                        "output": "a3b2d2c3",
                        "explanation": "The string contains 3 consecutive 'a', 2 consecutive 'b', 2 consecutive 'd', and 3 consecutive 'c'."
                    },
                    {
                        "input": "s = \"ggttttffffrreee\"",
                        "output": "g2t4f4r2e3",
                        "explanation": "The string contains 2 consecutive 'g', 4 consecutive 't', 4 consecutive 'f', 2 consecutive 'r', and 3 consecutive 'e'."
                    },
                    {
                        "input": "s = \"xyzzz\"",
                        "output": "xyz3",
                        "explanation": "The string contains 1 'x', 1 'y', and 3 consecutive 'z'. Only 'z' needs to be compressed as its count > 1."
                    },
                    {
                        "input": "s = \"abcd\"",
                        "output": "abcd",
                        "explanation": "No character repeats consecutively, so the string remains unchanged."
                    },
                    {
                        "input": "s = \"a\"",
                        "output": "a",
                        "explanation": "Single character, no compression needed."
                    },
                    {
                        "input": "s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\"",
                        "output": "a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2q2r2s2t2u2v2w2x2y2z2",
                        "explanation": "All letters are repeated twice."
                    },
                    {
                        "input": "s = \"aaaaabbbbbbbbccccccddddddeeeeeeeeeefffffffffggggggggghhhhhhhhhiiiiiiiiijjjjjjjjj\"",
                        "output": "a5b8c6d6e9f9g9h9i9j9",
                        "explanation": "Tests larger consecutive repetitions."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Keep a count of each consecutive repeating character traveling the string.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}