{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12844,
            "title": "Concert Tickets",
            "titleSlug": "concert-tickets_1496516",
            "content": "<h4 id=\"there-is-a-song-concert-going-to-happen-in-the-city-there-are-n-tickets-available-for-the-concert-each-with-a-certain-price-the-prices-of-n-tickets-are-given-in-an-n-sized-price-array-there-are-m-customers-which-come-one-by-one-in-order-to-buy-a-ticket-each-customer-offers-a-maximum-price-he-or-she-can-pay-to-buy-a-ticket-the-maximum-price-offered-by-m-customers-are-given-in-an-m-sized-pay-array-the-customer-will-get-the-ticket-at-the-nearest-possible-price-which-will-not-exceed-their-offered-maximum-price-your-task-is-to-return-the-price-at-which-each-customer-will-buy-a-ticket-if-a-particular-is-not-able-to-buy-the-ticket-then-consider-1-as-the-ticket-cost-in-that-case\">There is a song concert going to happen in the city. There are \u2018N\u2019 tickets available for the concert each with a certain price. The prices of \u2018N\u2019 tickets are given in an \u2018N\u2019 sized \u2018price\u2019 array. There are \u2018M\u2019 customers which come one by one in order to buy a ticket. Each customer offers a maximum price he or she can pay to buy a ticket. The maximum price offered by \u2018M\u2019 customers are given in an \u2018M\u2019 sized \u2018pay\u2019 array. The customer will get the ticket at the nearest possible price which will not exceed their offered maximum price. Your task is to return the price at which each customer will buy a ticket. If a particular is not able to buy the ticket, then consider -1 as the ticket cost in that case.</h4>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. \n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018M\u2019, denoting the number of tickets and the number of customers respectively.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the price of tickets.\n\nThe third line of each test case contains \u2018M\u2019 space-separated integers denoting the maximum price each customer can pay to buy a ticket.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print &#39;N&#39; space-separated integers denoting the price at which each customer will buy a ticket. \n\nPrint the output for each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N , M &lt;= 10^4\n1 &lt;= price[i] , pay[i] &lt;= 10^9 \n\nWhere \u2018T\u2019 represents the number of test cases, \u2018N\u2019 represents the total number of tickets, \u2018M\u2019 represents the total number of customers, &#39;price[i]&#39; represents the cost of the &#39;i&#39;th&#39; ticket, and &#39;pay[i]&#39; represents the maximum price &#39;i&#39;th&#39; customer can pay to buy a ticket.\n\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 2\n1\n10 10\n5 3\n5 3 7 8 5\n4 8 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code> 1 -1\n 3 8 -1\n</code></pre>\n\n<h5 id=\"explanation-1\">Explanation 1:</h5>\n\n<pre><code>For the first test case,\nThere is only one ticket with a price of 1 unit, and the number of customers to buy tickets are 2. The first person comes and offers a maximum price of 10 units so he gets the ticket by paying 1 unit as price. Now tickets left are 0. So when the second person comes and offers a price of 10 units, he will not get the ticket as there are no tickets left. So the output is {1, -1}.     \n\nFor the second test case,\nThere are 5 tickets with prices as {5, 3, 7, 8, 5}, and the number of customers to buy tickets are 3. The first person comes and offers a maximum price of 4 units so he gets the ticket by paying 3 units as price. The tickets left are {5, 7, 8, 5}. The second person comes and offers a maximum price of 8 units so he gets the ticket by paying 8 units as price. The tickets left are {5, 7, 5}. The third person comes and offers a maximum price of 3 units so he will not get the ticket as there is no ticket left with a price less than or equal to 3. So the output is {3, 8 , -1}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 2\n1 2 3\n2 2\n4 4\n10 10 10 10\n10 1 1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code> 2 1\n 10 -1 -1 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "A concert is being held with N tickets available, each with a specific price.  Given an array 'price' representing the prices of the tickets, and an array 'pay' representing the maximum amount each of M customers is willing to pay, determine the price each customer will pay for a ticket.  Each customer will buy a ticket at the nearest possible price that does not exceed their maximum offer. If a customer cannot purchase a ticket within their budget, they will not buy a ticket (represented by -1). Return an array representing the price each customer pays, in the order they arrive.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N, M <= 10^4",
                    "1 <= price[i], pay[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "price = [1], pay = [10, 10]",
                        "output": "1 -1",
                        "explanation": "There is one ticket priced at 1. The first customer offers 10 and buys the ticket for 1. No tickets remain. The second customer offers 10 but cannot buy a ticket, resulting in -1."
                    },
                    {
                        "input": "price = [5, 3, 7, 8, 5], pay = [4, 8, 3]",
                        "output": "3 8 -1",
                        "explanation": "Customer 1 offers 4, buys the ticket for 3. Remaining tickets: [5, 7, 8, 5]. Customer 2 offers 8, buys the ticket for 8. Remaining tickets: [5, 7, 5]. Customer 3 offers 3, but no remaining tickets are affordable, resulting in -1."
                    },
                    {
                        "input": "price = [1, 2, 3], pay = [2, 2]",
                        "output": "2 1",
                        "explanation": "Customer 1 offers 2, buys the ticket for 2. Remaining tickets: [1, 3]. Customer 2 offers 2, buys the ticket for 1. Remaining tickets: [3]."
                    },
                    {
                        "input": "price = [10, 10, 10, 10], pay = [10, 1, 1, 1]",
                        "output": "10 -1 -1 -1",
                        "explanation": "Customer 1 offers 10, buys the ticket for 10. Remaining tickets: [10, 10, 10]. Customers 2, 3, and 4 offer 1, which is less than the price of any remaining ticket, resulting in -1 for each."
                    },
                    {
                        "input": "price = [5, 5, 5], pay = [5, 5, 5]",
                        "output": "5 5 5",
                        "explanation": "Each customer can afford the price of the ticket and buys one."
                    },
                    {
                        "input": "price = [100], pay = [1]",
                        "output": "-1",
                        "explanation": "The customer cannot afford the only available ticket."
                    },
                    {
                        "input": "price = [1, 5, 10, 15, 20], pay = [3, 7, 12, 18, 22]",
                        "output": "1 5 10 15 20",
                        "explanation": "Each customer buys the nearest possible ticket below their budget."
                    },
                    {
                        "input": "price = [2,4,6,8], pay = [1,3,5,7]",
                        "output": "-1 2 4 6",
                        "explanation": "The customer 1 doesn't have enough money, so buys -1. The rest of the customer can buy nearest value ticket"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find the greatest price which is smaller than or equal to the maximum price offered by the customer.</p>",
            "<p>Solve this question by storing the price of tickets in a multiset.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}