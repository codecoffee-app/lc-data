{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10622,
            "title": "Confusing Number",
            "titleSlug": "confusing-number_1235244",
            "content": "<h4 id=\"you-have-been-given-two-exact-same-binary-tree-structures-say-originaltree-and-clonetree-and-a-reference-to-one-of-the-nodes-in-originaltree\">You have been given two exact same binary tree structures say \u2018originalTree\u2019 and \u2018cloneTree\u2019 and a reference to one of the nodes in \u2018originalTree\u2019.</h4>\n\n<h4 id=\"you-need-to-find-the-reference-of-the-node-in-clonetree-with-the-same-value-as-the-given-node\">You need to find the reference of the node in \u2018cloneTree\u2019, with the same value as the given node.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. \u2018cloneTree\u2019 is an exact copy of the \u2018originalTree\u2019.\n2. All nodes in \u2018originalTree\u2019 are distinct.\n3. The given node in the \u2018originalTree\u2019 will not be  NULL.\n4. You cannot change any of the two given trees.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nThe second line contains an integer \u2018K\u2019 which denotes the value of the reference node in \u2018originalTree\u2019.\n\nFor example, the level order input for the tree depicted in the below image.     \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-8634.png\" alt=\"1\"></p>\n\n<pre><code>50  \n13 72  \n3 25 66 -1  \n-1 -1 -1 -1 -1 -1   \n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 50\n\nLevel 2 :\nLeft child of 50 = 13\nRight child of 50 = 72\n\nLevel 3 :\nLeft child of 13 = 3\nRight child of 13 = 25\nLeft child of 72 = 66\nRight child of 72 =  \u2018Null\u2019\n\n\nLevel 4 :\nAll children are \u2018Null\u2019\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n50 13 72 3 25 66 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, the output will be \u201c1\u201d if you have returned the correct node in \u2018cloneTree\u2019, else it will be \u201c0\u201d.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to input or print anything, and it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 3000\n1 &lt;= data &lt;= 10 ^ 9\n1 &lt;= K &lt;=  10 ^ 9\n\nWhere \u2018data\u2019 is the value of the nodes of the given binary tree, and \u2018K\u2019 represents the value of the given reference node in \u2018originalTree\u2019.\n\nFor a single test case, all given \u2018data\u2019 are distinct from each other and \u2018K\u2019 is equal to one given of \u2018data\u2019.\n\nTime Limit: 1 Sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n1 -1 3 -1 4 -1 -1\n4\n50 -1 -1\n50\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>1\n1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h4>\n\n<pre><code>For the first test case, the given tree is\n\nOriginal tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/2-8635.png\" alt=\"1\"></p>\n\n<pre><code>Clone Tree \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/3-8636.png\" alt=\"1\"></p>\n\n<pre><code>The given tree in the second test case is.\n\nOriginal tree.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/4-8637.png\" alt=\"1\"></p>\n\n<pre><code>Clone Tree  \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/5-8638.png\" alt=\"1\"> </p>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>1\n10 2 12 1 3 -1 13 -1 -1 -1 -1 -1 -1\n2\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2:</h4>\n\n<pre><code>For the first test case, the given tree is\n\nOriginal tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/6-8639.png\" alt=\"1\"></p>\n\n<pre><code>Clone Tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/7-8640.png\" alt=\"1\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two identical binary tree structures, 'originalTree' and 'cloneTree', along with a reference to a node within 'originalTree', the task is to locate and return a reference to the corresponding node in 'cloneTree' that shares the same value as the given node. 'cloneTree' is a perfect replica of 'originalTree', ensuring a one-to-one correspondence between their nodes.  All node values in 'originalTree' are unique, and the referenced node in 'originalTree' is guaranteed to be non-null.  You are prohibited from modifying either of the given trees.",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= N <= 3000 (Number of nodes in the tree)",
                    "1 <= data <= 10^9 (Value of nodes)",
                    "1 <= K <= 10^9 (Value of the reference node)",
                    "All node values ('data') within a single test case are distinct.",
                    "'K' is guaranteed to be equal to the value of one of the nodes in 'originalTree'."
                ],
                "testcases": [
                    {
                        "input": "1 -1 3 -1 4 -1 -1\n4",
                        "output": "1",
                        "explanation": "The original tree is structured as follows:\n\n   1\n    \\ \n     3\n      \\ \n       4\n\nThe clone tree is identical. The reference node in the original tree has a value of 4. The function should return the node in the clone tree with the value 4."
                    },
                    {
                        "input": "50 -1 -1\n50",
                        "output": "1",
                        "explanation": "The original tree consists of a single node with the value 50. The clone tree is identical. The reference node in the original tree has a value of 50. The function should return the node in the clone tree with the value 50."
                    },
                    {
                        "input": "10 2 12 1 3 -1 13 -1 -1 -1 -1 -1 -1\n2",
                        "output": "1",
                        "explanation": "The original tree is:\n\n      10\n     /  \\\n    2    12\n   / \\    \\\n  1   3   13\n\nThe clone tree is identical. The reference node in the original tree has value 2. The function should return the node in the clone tree with value 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to iterate all the nodes in one go. If any node matches then return or else iterate both subtree one by one.</p>",
            "<p>Try to iterate all the nodes in one level. If any node matches then return or else check both subtree nodes.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}