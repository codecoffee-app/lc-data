{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7855,
            "title": "Connect MidPoints",
            "titleSlug": "connect-midpoints_794953",
            "content": "<h4 id=\"you-have-been-given-a-curve-whose-edges-are-parallel-to-either-x-axis-or-y-axis-you-need-to-return-another-curve-which-will-pass-through-the-midpoints-of-all-the-edges-of-the-curve-the-curve-will-be-given-in-the-form-of-a-linked-list-where-each-node-represents-the-coordinates-of-the-curve\">You have been given a curve whose edges are parallel to either x-axis or y-axis. You need to return another curve which will pass through the midpoints of all the edges of the curve. The curve will be given in the form of a linked list, where each node represents the coordinates of the curve.</h4>\n\n<h4 id=\"the-curve-to-be-returned-will-also-be-in-the-form-of-a-linked-list-where-each-node-may-represent-the-coordinates-of-the-midpoints-of-the-edges\">The curve to be returned will also be in the form of a linked list, where each node may represent the coordinates of the midpoints of the edges.</h4>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>1. The coordinates of the curve will be given in non-descending order of x coordinate from start to end of the linked list and for every two adjacent coordinates either the x-coordinate or the y-coordinate will be the same.\n2. All the coordinates will be pairwise distinct i.e there are no two coordinates (x1, y1) and (x2, y2) such that x1 = x2 and y1 = y2.\n3. The first coordinate and the last coordinate in the input can be assumed as the starting point and the ending point of the curve respectively.\n4. You may assume that the starting point and ending point of the curve will be the midpoint of the first edge, and the last edge of the input curve( in the order of input coordinates) respectively.\n5. If the coordinates of the midpoint are not whole numbers, you may take the floor value of the coordinates. For example, the midpoint (3.5, 5) will be taken as (3, 5).\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer &#39;T&#39; -denoting the number of test cases. Each test case consists of 4 lines as follows:\n\nThe first and the only line of each test case will contain 2 * N + 1  linked list elements (separated by space and terminated by -1), where &#39;N&#39; is the total number of coordinates. Each node consists of two parts (x coordinate and y coordinate). \n\nFor example, if the input is:  a1 a2 a3 a4 -1 ,                                                                                       then the linked list is like  (a1, a2) -&gt; (a3, a4) -&gt; NULL.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the coordinates of the required curve in descending order of x-coordinate. See Sample Output 1 explanation for further clarification.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 10^4\n-10^9 &lt;= x, y &lt;= 10^9\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n0 10 1 10 5 10 7 10 7 5 20 5 40 5 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3 10 7 7 23 5\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input1\">Explanation of the Sample Input1:</h5>\n\n<pre><code>The curve can be represented on a x-y plane as follows:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-10-11-23-19-03-5154.png\" alt=\"altImage\"></p>\n\n<pre><code>Clearly, there are two horizontal edges, and one vertical edge. \nFor the first edge i.e (0, 10) -&gt; (7, 10), the midpoint will be (3, 10). \nFor the second edge i.e (7, 10) -&gt; (7, 5), the midpoint will be (7, 7).\nFor the last edge i.e (7, 5) -&gt; (40, 5), the midpoint will be (23, 5).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n1 10 1 15 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 12\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a curve represented as a linked list of coordinates, where each node contains (x, y) values and edges are parallel to either the x or y-axis, construct a new curve by connecting the midpoints of each edge of the original curve. Return the new curve as a linked list of midpoint coordinates, sorted in descending order of their x-coordinates. If the coordinates of the midpoint are not whole numbers, take the floor value of the coordinates. For example, the midpoint (3.5, 5) will be taken as (3, 5).",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 10^4 (N is the number of coordinates)",
                    "-10^9 <= x, y <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "head = [(0, 10), (1, 10), (5, 10), (7, 10), (7, 5), (20, 5), (40, 5)]",
                        "output": "(3, 10) -> (7, 7) -> (23, 5)",
                        "explanation": "The curve consists of points (0,10), (1,10), (5,10), (7,10), (7,5), (20,5), (40,5). The midpoints are calculated as follows:\n- Edge 1: (0,10) -> (1,10) midpoint: (0, 10)\n- Edge 2: (1,10) -> (5,10) midpoint: (3, 10)\n- Edge 3: (5,10) -> (7,10) midpoint: (6, 10)\n- Edge 4: (7,10) -> (7,5) midpoint: (7, 7)\n- Edge 5: (7,5) -> (20,5) midpoint: (13, 5)\n- Edge 6: (20,5) -> (40,5) midpoint: (30, 5)\nThe midpoints are ordered by the order in which they appear. so, midpoints from  (1,10), (5,10), (7,10), (7,5), (20,5). Then they are ordered by descending x coordinate which are (3, 10), (6, 10), (7, 7), (13, 5), (30, 5), so we get (30, 5), (13, 5), (7, 7), (6, 10), (3, 10). Since it has to be in original order, we need to take just adjacent ones and maintain the order."
                    },
                    {
                        "input": "head = [(1, 10), (1, 15)]",
                        "output": "(1, 12)",
                        "explanation": "The curve consists of points (1,10), (1,15).\nThe midpoint is calculated as follows:\n- Edge 1: (1,10) -> (1,15) midpoint: (1, 12)\nTherefore, the final output is (1,12)."
                    },
                    {
                        "input": "head = [(2, 2), (2, 4), (4, 4), (4, 2)]",
                        "output": "(3, 4) -> (4, 3) -> (3, 2)",
                        "explanation": "The curve consists of points (2,2), (2,4), (4,4), (4,2).\nThe midpoints are calculated as follows:\n- Edge 1: (2,2) -> (2,4) midpoint: (2, 3)\n- Edge 2: (2,4) -> (4,4) midpoint: (3, 4)\n- Edge 3: (4,4) -> (4,2) midpoint: (4, 3)\n- Edge 4: (4,2) -> (2,2) midpoint: (3, 2)\nTherefore, the final output is (2,3), (3, 4), (4, 3), (3, 2)."
                    },
                    {
                        "input": "head = [(0, 0), (0, 1)]",
                        "output": "(0, 0)",
                        "explanation": "The curve consists of points (0,0), (0,1).\nThe midpoint is calculated as follows:\n- Edge 1: (0,0) -> (0,1) midpoint: (0, 0)\nTherefore, the final output is (0,0)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Implementation, use midpoint formula</p>"
        ],
        "relatedTopics": [
            {
                "name": "Computational Geometry",
                "slug": "computational-geometry"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}