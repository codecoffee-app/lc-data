{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9443,
            "title": "Connect nodes at same level",
            "titleSlug": "connect-nodes-at-same-level_985347",
            "content": "<h4 id=\"a-binary-tree-is-a-tree-where-each-node-has-at-most-two-children-i-e-left-child-and-right-child\">A binary tree is a tree where each node has at most two children i.e left child and right child.</h4>\n\n<h4 id=\"you-are-given-a-binary-tree-where-the-structure-of-the-node-is-as-follow\">You are given a binary tree, where the structure of the node is as follow -:</h4>\n\n<pre><code>class BinaryTreeNode {\n int data;      // Value of the node.\n BinaryTreeNode *left;  // Pointer to left child node.\n BinaryTreeNode *right; // Pointer to right child node.\n BinaryTreeNode *next;  // Pointer to next right node at same level. \n}\n</code></pre>\n\n<h4 id=\"your-task-is-to-connect-all-the-adjacent-nodes-at-the-same-level-in-the-given-binary-tree-you-can-do-this-by-populating-each-next-pointer-to-point-to-its-next-right-node-if-there-is-no-next-right-node-the-next-pointer-should-be-set-to-null-initially-all-the-next-pointers-are-set-to-null\">Your task is to connect all the adjacent nodes at the same level in the given binary tree. You can do this by populating each &#39;next&#39; pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL. Initially, all the next pointers are set to NULL.</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>Consider the figure shown below. The left part represents the initial binary tree and right part represents the binary tree after connecting adjacent nodes at the same level.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binary-tree-6821.png\" alt=\"alt text\"></p>\n\n<pre><code>In the tree shown in the picture above -:\nThe \u2018next\u2019 pointer of the node having value 2 is connected to the node having value 3.\nThe \u2018next\u2019 pointer of the node having value 4 is connected to the node having value 5.\nThe \u2018next\u2019 pointer of the node having value 5 is connected to the node having value 6.\nThe \u2018next\u2019 pointer of nodes having value 1, 3, 6 will have a value NULL as there are no next right nodes in their cases.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. The structure of the \u2018Node\u2019 of a binary tree is already defined. You should not change it.   \n2. The root of the binary tree is known to you.  \n3. There is at least one node in the given binary tree.\n4. You may only use constant extra space.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. \n\nThen the description of  \u2018T\u2019 test cases follows.\n\nThe first line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n-10^9 &lt;= DATA &lt;= 10^9\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 is the number of nodes in the given binary tree and &#39;DATA&#39; is the value in each node.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 # 2 3 #    \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>In the first test case, the level order traversal of a binary tree is 1, 2, 3, -1, -1,  thus its root is a node with value 1, and left and right child of the root are nodes with 2 and 3 respectively.\nThe initial binary tree and the binary tree after connecting adjacent nodes are shown below\nThe output is only for convenience,  It is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bt-6820.png\" alt=\"alt text\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n1 2 3 4 5 -1 6 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 # 2 3 # 4 5 6 # \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>In the first test case, see problem statement for its explanation.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 17,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree where each node has at most two children (left and right), your task is to connect all adjacent nodes at the same level. Modify each node's 'next' pointer to point to its next right node. If a node is the rightmost node at its level, its 'next' pointer should be set to NULL. The initial value of all 'next' pointers is NULL.  You must solve this problem using constant extra space.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 3000 (Number of nodes in the binary tree)",
                    "-10^9 <= DATA <= 10^9 (Value in each node)"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 -1 -1 -1 -1",
                        "output": "1 # 2 3 #",
                        "explanation": "The root node is 1.  Node 2 is the left child and node 3 is the right child of 1. The 'next' pointer of node 2 should point to node 3, and the 'next' pointers of nodes 1 and 3 should be NULL because they are the rightmost nodes at their respective levels."
                    },
                    {
                        "input": "1 2 3 4 5 -1 6 -1 -1 -1 -1 -1 -1",
                        "output": "1 # 2 3 # 4 5 6 #",
                        "explanation": "The root node is 1. Node 2 and 3 are its children. Nodes 4, 5 and 6 are children of 2 and 3, respectively. Node 2's 'next' pointer points to node 3. Nodes 4's and 5's 'next' pointers should point to nodes 5 and 6, respectively, and all others should be NULL."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you try to iterate one by one over each level of the given binary tree?</p>",
            "<p>Can you try making use of the next links you are creating?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}