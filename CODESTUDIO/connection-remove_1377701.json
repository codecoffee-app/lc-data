{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11098,
            "title": "Connection remove",
            "titleSlug": "connection-remove_1377701",
            "content": "<h4 id=\"you-are-given-a-weighted-undirected-connected-graph-with-n-vertices-numbered-from-0-to-n-1-and-array-edges-where-edges-i-ai-bi-weight-represents-a-bidirectional-and-weighted-edge-between-nodes-ai-and-bi-a-minimum-spanning-tree-mst-is-a-subset-of-the-graphs-edges-that-connects-all-vertices-without-cycles-and-with-the-minimum-possible-total-edge-weight\">You are given a weighted undirected connected graph with \u2018n\u2019 vertices numbered from 0 to (n - 1), and array &#39;EDGES&#39; where EDGES[i] = [ ai, bi, WEIGHT ] represents a bidirectional and weighted edge between nodes ai and bi. A minimum spanning tree (MST) is a subset of the graph&#39;s edges that connects all vertices without cycles and with the minimum possible total edge weight.</h4>\n\n<h4 id=\"your-task-is-to-find-all-the-critical-and-pseudo-critical-edges-in-the-given-graphs-minimum-spanning-tree-mst-an-mst-edge-whose-deletion-from-the-graph-would-cause-the-mst-weight-to-increase-is-called-a-critical-edge-on-the-other-hand-a-pseudo-critical-edge-is-that-which-can-appear-in-some-msts-but-not-all\">Your task is to find all the critical and pseudo-critical edges in the given graph&#39;s minimum spanning tree (MST). An MST edge whose deletion from the graph would cause the MST weight to increase is called a critical edge. On the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1) A weighted graph refers to one where weights are assigned to each edge, undirected graphs are those where edges are bi-directional and have no arrows.\n\n2) If no edge exists return -1.\n\n3) Return the edges in the sorted order of their indices.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>N = 4, M = 4\n[[0, 1, 1],\n[0, 2, 1],\n[0, 3, 2],\n[2, 3, 2]]\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/t1-2-8761.png\" alt=\"\"></p>\n\n<pre><code>The critical connections are the 0th connection and the 1st connection because removing the causes the MST weight to increase.\n\nThe 2nd and 3rd connections are pseudo-critical because any one of the edges can be taken to make MST.\n</code></pre>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line of input contains an integer T denoting the number of test cases.\n\nThe first line of each test case contains exactly two space-separated integers, \u2018N\u2019, which denotes the number of nodes, and \u2018M\u2019, which denotes the number of edges.\n\nThe next &#39;M&#39; lines contain exactly three space-separated integers representing &#39;NODE1&#39;, &#39;NODE2&#39;, and &#39;EDGE WEIGHT&#39;.\n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>For each test case, print single lines containing two space-separated integers for each pseudo-critical connections and the critical connection. If any of this doesn\u2019t exist return -1.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 500\n1 &lt;= M &lt;= 1000 \n0 &lt;= EDGES[i][j] &lt;= 10^5\n\nWhere \u2018T\u2019 is the total number of test cases, &#39;N&#39; is the number of nodes and &#39;M&#39; is the number of edges, \u2018EDGES\u2019 is the given matrix and \u2018EDGES\u2019[i][j] is the value of pairs (i,j).\n\nTime limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n4 4\n0 1 1\n0 2 1\n0 3 2\n2 3 2\n3 3\n0 1 2\n2 0 1\n1 2 1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>0 1 \n2 3 \n1 2 \n-1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h4>\n\n<pre><code>For the first test case:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/t1-2-8761.png\" alt=\"\"></p>\n\n<pre><code>The critical connections are the 0th connection and the 1st connection because removing the causes the MST weight to increase.\nThe 2nd and 3rd connections are pseudo critical because any one of the edges can be taken to make MST.\n\nFor the second Test case : \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/t2-8762.png\" alt=\"\"></p>\n\n<pre><code>Edge 1 and 2 are critical for the formation of a minimum spanning tree.\nThere is no other edge that is required for the formation of MST, hence there is no pseudo-critical connection, therefore we returned -1.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n4 4\n0 1 1\n1 2 1\n2 3 1\n0 3 1\n5 7\n0 1 1\n1 2 1\n2 3 2\n0 3 2\n0 4 3\n3 4 3\n1 4 6\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>-1 \n0 1 2 3 \n0 1 \n2 3 4 5\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a weighted, undirected, and connected graph with 'n' vertices labeled from 0 to (n - 1). The graph is represented by an array 'edges', where edges[i] = [ai, bi, weight] indicates a bidirectional edge between nodes ai and bi with the specified weight. Your task is to identify and return the critical and pseudo-critical edges within the graph's Minimum Spanning Tree (MST). A critical edge is an MST edge whose removal from the graph would increase the MST weight. A pseudo-critical edge is an edge that can be part of some MSTs, but not all.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 500",
                    "1 <= M <= 1000",
                    "0 <= EDGES[i][j] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 4, edges = [[0, 1, 1], [0, 2, 1], [0, 3, 2], [2, 3, 2]]",
                        "output": "[[0, 1], [2, 3]]",
                        "explanation": "Edges 0 and 1 are critical. Removing either of them will increase the MST weight. Edges 2 and 3 are pseudo-critical because either one can be included in a valid MST."
                    },
                    {
                        "input": "n = 3, edges = [[0, 1, 2], [2, 0, 1], [1, 2, 1]]",
                        "output": "[[1, 2], [-1]]",
                        "explanation": "Edges 1 and 2 are critical edges. There are no pseudo critical edges."
                    },
                    {
                        "input": "n = 4, edges = [[0, 1, 1], [1, 2, 1], [2, 3, 1], [0, 3, 1]]",
                        "output": "[[-1], [0, 3]]",
                        "explanation": "Edges 0, 1 and 2 are always part of MST, thus no critical edge. Only one among 0 and 3 would part of the MST. Hence Pseudo-critical edges 0 and 3 exist."
                    },
                    {
                        "input": "n = 5, edges = [[0, 1, 1], [1, 2, 1], [2, 3, 2], [0, 3, 2], [0, 4, 3], [3, 4, 3], [1, 4, 6]]",
                        "output": "[[0, 1], [2, 3], [4, 5]]",
                        "explanation": "Edges 0 and 1 are critical. Edges 2 and 3 are pseudo critical. Edges 4 and 5 are pseudo critical"
                    },
                    {
                        "input": "n = 4, edges = [[0, 1, 1], [1, 2, 1], [2, 3, 1], [0, 3, 3]]",
                        "output": "[[-1], [-1]]",
                        "explanation": "Edges 0, 1, 2 are always part of MST, thus no critical edge, similarly no pseudo critical edges."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you find the connected components using DSU?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}