{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14333,
            "title": "Consecutive Available Seats",
            "titleSlug": "consecutive-available-seats_2111953",
            "content": "<pre><code> Several friends at a cinema ticket office would like to reserve consecutive available seats.\n Can you help to query all the consecutive available seats order by the seat_id using the following cinema table?\n\n | seat_id | free |\n |------- |------|\n | 1       | 1    |\n | 2       | 0    |\n | 3       | 1    |\n | 4       | 1    |\n | 6       | 1    |\n\n Your query should return the following result for the sample case above.\n\n| seat_id |\n|---------|\n| 3       |\n| 4       |\nNote:\nThe seat_id is an auto increment int, and free is bool (&#39;1&#39; means free, and &#39;0&#39; means occupied.).\n Consecutive available seats are more than 2(inclusive) seats consecutively available.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a table `cinema` with columns `seat_id` (an auto-incrementing integer) and `free` (a boolean indicating seat availability where '1' means free and '0' means occupied), find all `seat_id`s that are part of a consecutive sequence of at least two available seats. The results should be ordered by `seat_id` in ascending order.",
                "constraints": [
                    "The seat_id is an auto-incrementing integer.",
                    "The free column is a boolean ('1' for free, '0' for occupied).",
                    "Consecutive available seats must be at least two (inclusive)."
                ],
                "testcases": [
                    {
                        "input": "cinema=[(1,1),(2,0),(3,1),(4,1),(6,1)]",
                        "output": "[(3),(4)]",
                        "explanation": "Seats 3 and 4 are consecutive available seats. Seat 1 and 6 are available but not part of a consecutive sequence of at least two free seats."
                    },
                    {
                        "input": "cinema=[(1,0),(2,0),(3,1),(4,1),(5,0),(6,1),(7,1),(8,1)]",
                        "output": "[(3),(4),(6),(7),(8)]",
                        "explanation": "Seats 3 and 4 are consecutive. Seats 6, 7, and 8 are also consecutive."
                    },
                    {
                        "input": "cinema=[(1,1),(2,1),(3,1),(4,1),(5,1)]",
                        "output": "[(1),(2),(3),(4),(5)]",
                        "explanation": "All seats are consecutive and available."
                    },
                    {
                        "input": "cinema=[(1,0),(2,0),(3,0),(4,0),(5,0)]",
                        "output": "[]",
                        "explanation": "No seats are available."
                    },
                    {
                        "input": "cinema=[(1,1)]",
                        "output": "[]",
                        "explanation": "Only one seat is available; there are no consecutive seats."
                    },
                    {
                        "input": "cinema=[(1, 1), (2, 0), (3, 1), (4, 0), (5, 1), (6, 1), (7, 0), (8, 1)]",
                        "output": "[(5), (6)]",
                        "explanation": "Only seats 5 and 6 are consecutive and available."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}