{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9163,
            "title": "Consecutive chars ",
            "titleSlug": "consecutive-chars_977231",
            "content": "<h4 id=\"you-are-given-a-matrix-of-n-rows-and-m-columns-consisting-of-lowercase-characters-you-are-provided-with-a-string-str-and-your-task-is-to-find-the-length-of-the-longest-consecutive-character-path-for-each-character-in-the-string-str-all-characters-in-the-path-are-consecutive-i-e-every-character-in-the-path-is-next-to-the-previous-character-in-alphabetical-order-it-is-allowed-to-move-in-all-8-adjacent-directions-from-a-cell\">You are given a matrix of &#39;N&#39; rows and &#39;M&#39; columns consisting of lowercase characters. You are provided with a string \u2018STR,\u2019 and your task is to find the length of the longest consecutive character path for each character in the string \u2018STR\u2019. All characters in the path are consecutive, i.e., every character in the path is next to the previous character in alphabetical order. It is allowed to move in all 8 adjacent directions from a cell.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Suppose you are at position (x, y) then you can move to : [ (x + 1 , y ), ( x - 1 , y ), ( x , y + 1), (x , y - 1), (x + 1, y + 1), (x + 1, y - 1), (x - 1, y + 1), (x - 1, y - 1) ].\n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>If \u2018N\u2019 = 2, \u2018M\u2019 = 2, &#39;STR\u2019 = &quot;a&quot; and the input matrix is \n[ [ ab ]\n  [ ed ] ] \nWe need to find the maximum length of the path from starting character \u2019a\u2019. So the maximum length is 2, which is [a, b]. Hence, the answer is [2].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains two integers, \u2018N\u2019 and \u2018M\u2019, denoting the number of rows and columns of the character array \u2018matrix\u2019.\n\nThe next \u2018N\u2019 lines of each test case contain a string consisting of \u2018M\u2019 characters denoting the elements of the array &#39;matrix&#39;.\n\nThe last line of each test case contains the string \u2018STR\u2018, which contains starting characters(without space). \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the space-separated array of integers where each integer is the length of the longest path from the character at that index in the string \u2018STR\u2019.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= M &lt;= 300\n1 &lt;= N &lt;= 300\n\u2018a\u2019 &lt;= matrix[i][j], STR[i] &lt;= \u2018z\u2019    \n1 &lt;= |STR[i]| &lt;= 26     \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 3\naef\npbc\nba\n4 5\nabcde\nudjfi\nmtgna\nkunyq\nafm\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 3    \n7 2 1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>In test case 1:\nThere is a matrix of characters with \u2018N\u2019 = 2 and \u2018M\u2019 = 3. \nThe length of the path with \u2018b\u2019 as starting character is 2, which is [b, c]. \nThe length of the path with \u2018a\u2019 as the starting character is 3, which is [a, b, c] \nHence, the answer is [2, 3]. \n\nIn test case 2:\nThere is a matrix of characters with \u2018N\u2019 = 4 and \u2018M\u2019 = 5. \nThe length of the path with  \u2018a\u2019 as the starting character is 7, which is [a, b, c, d, e, f].\nThe length of the path with \u2018f\u2019 as the starting character is 2, which is [f, g].\nThe length of the path with \u2018m\u2019 as the starting character is 1, which is [m] \nHence, the answer is [7, 2, 1].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2 4\naefg\npbcd\nec\n3 2\nab\ncd\nef\na\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3 2\n6    \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix of lowercase characters with 'N' rows and 'M' columns, and a string 'STR', determine the length of the longest consecutive alphabetical path starting from each character in 'STR' within the matrix.  A consecutive alphabetical path consists of characters that are adjacent in the alphabet (e.g., 'a', 'b', 'c'). Movement is allowed in all eight adjacent directions (horizontally, vertically, and diagonally).",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= M <= 300",
                    "1 <= N <= 300",
                    "a <= matrix[i][j], STR[i] <= z",
                    "1 <= |STR| <= 26"
                ],
                "testcases": [
                    {
                        "input": "n = 2, m = 3, matrix = ['aef', 'pbc'], str = 'ba'",
                        "output": "[2, 3]",
                        "explanation": "For 'b', the longest path is [b, c] with length 2. For 'a', the longest path is [a, b, c] with length 3."
                    },
                    {
                        "input": "n = 4, m = 5, matrix = ['abcde', 'udjfi', 'mtgna', 'kunyq'], str = 'afm'",
                        "output": "[7, 2, 1]",
                        "explanation": "For 'a', the longest path is [a, b, c, d, e, f, g] with length 7. For 'f', the longest path is [f, g] with length 2. For 'm', the longest path is [m] with length 1."
                    },
                    {
                        "input": "n = 2, m = 4, matrix = ['aefg', 'pbcd'], str = 'ec'",
                        "output": "[3, 2]",
                        "explanation": "For 'e', the longest path is [e, f, g] with length 3. For 'c', the longest path is [c, d] with length 2."
                    },
                    {
                        "input": "n = 3, m = 2, matrix = ['ab', 'cd', 'ef'], str = 'a'",
                        "output": "[6]",
                        "explanation": "For 'a', the longest path is [a, b, c, d, e, f] with length 6."
                    },
                    {
                        "input": "n = 1, m = 5, matrix = ['abcde'], str = 'a'",
                        "output": "[5]",
                        "explanation": "For 'a', the longest path is [a, b, c, d, e] with length 5."
                    },
                    {
                        "input": "n = 3, m = 3, matrix = ['aaa', 'aaa', 'aaa'], str = 'a'",
                        "output": "[1]",
                        "explanation": "For 'a', the longest consecutive path length will be 1, as 'b' is not present in the adjacent cells."
                    },
                    {
                        "input": "n = 2, m = 2, matrix = ['ac', 'bd'], str = 'a'",
                        "output": "[2]",
                        "explanation": "For 'a', the longest consecutive path is [a, b] with length 2. The 'c' and 'd' are present but are not adjacent after a and b respectively."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of a recursive solution.</p>",
            "<p>Try to use dynamic programming.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}