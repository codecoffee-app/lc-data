{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8980,
            "title": "Consecutive numbers",
            "titleSlug": "consecutive-numbers_972996",
            "content": "<h4 id=\"you-are-given-a-positive-integer-n-find-the-smallest-positive-integer-k-such-that-k-xor-k-1-equals-n\">You are given a positive integer \u2018N\u2019. Find the smallest positive integer \u2018K\u2019 such that (\u2018K\u2019 XOR \u2018K-1\u2019) equals \u2018N\u2019.</h4>\n\n<h4 id=\"here-xor-denotes-the-bitwise-xor-operator-denoted-by\">Here \u2018XOR\u2019 denotes the bitwise XOR operator denoted by ^.</h4>\n\n<h4 id=\"if-no-such-k-exists-return-1\">If no such \u2018K\u2019 exists, return -1.</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases.Then test cases follows :\n\nThe first line of each test case contains an integer \u2018N\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the value of \u2018K\u2019 or -1 if no such \u2018K\u2019 exists.\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^9\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1\n2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n-1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For the first test case, we have, \u2018N\u2019 = 1.\nFirst we try \u2018K\u2019 = 1.\n\u2018K\u2019 XOR \u2018K-1\u2019 = \u20181\u2019 XOR \u20180\u2019 = 1.\nHence, the smallest positive integer is 1. \n\nFor the second test case, we have, \u2018N\u2019 = 2.\nFirst we try \u2018K\u2019 = 1.\n\u2018K\u2019 XOR \u2018K-1\u2019 = 1^0 = 1.\nNext we try \u2018K\u2019 = 2.\n\u2018K\u2019 XOR \u2018K-1\u2019 = 2^1 = 3.\nSimilarly, trying for all possible values , we see that no such number exists.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3\n7\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer N, find the smallest positive integer K such that (K XOR (K-1)) equals N. If no such K exists, return -1. XOR denotes the bitwise XOR operator.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^9",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n1",
                        "output": "1",
                        "explanation": "For N = 1, K = 1 satisfies the condition because 1 XOR 0 = 1."
                    },
                    {
                        "input": "1\n2",
                        "output": "-1",
                        "explanation": "For N = 2, no such K exists. Trying K=1 gives 1 XOR 0 = 1. Trying K=2 gives 2 XOR 1 = 3. No value of K satisfies the condition."
                    },
                    {
                        "input": "1\n3",
                        "output": "2",
                        "explanation": "For N = 3, K = 2 satisfies the condition because 2 XOR 1 = 3."
                    },
                    {
                        "input": "1\n7",
                        "output": "4",
                        "explanation": "For N = 7, K = 4 satisfies the condition because 4 XOR 3 = 7."
                    },
                    {
                        "input": "2\n1\n2",
                        "output": "1\n-1",
                        "explanation": "Test case 1: N = 1, K = 1. Test case 2: N = 2, no such K exists."
                    },
                    {
                        "input": "2\n3\n7",
                        "output": "2\n4",
                        "explanation": "Test case 1: N = 3, K = 2. Test case 2: N = 7, K = 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Do we need to check values for \u2018K\u2019 &gt; \u2019N\u2019 ?</p>",
            "<p>Check how parity of \u2018K\u2019 decides the value of ( K ) XOR ( K - 1 ).&nbsp;</p><p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}