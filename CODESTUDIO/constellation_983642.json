{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9377,
            "title": "Constellation",
            "titleSlug": "constellation_983642",
            "content": "<h4 id=\"given-a-matrix-universe-with-3-rows-and-n-columns-with-the-characters-and-these-characters-represent-a-cluster-of-stars-and-galaxies-in-space-stars-are-represented-by-symbol-the-symbol-represents-empty-space\">Given a matrix \u2018UNIVERSE\u2019 with 3 rows and \u2018N\u2019 columns, with the characters { # , * , . } and these characters represent a cluster of stars and galaxies in space. Stars are represented by \u2018*\u2019 symbol. The \u2018.\u2019 symbol represents empty space.</h4>\n\n<p><br/></p>\n\n<h4 id=\"we-define-a-constellation-as-a-3x3-matrix-which-contains-stars-in-the-shape-of-vowels-a-group-of-constellations-is-defined-as-a-galaxy-note-that-a-galaxy-may-contain-many-stars-but-they-will-never-be-overlapping-two-galaxies-are-separated-by-a-column-of\">We define a constellation as a 3x3 matrix which contains stars in the shape of vowels. A group of constellations is defined as a galaxy. Note that a galaxy may contain many stars but they will never be overlapping. Two galaxies are separated by a column of \u2018#\u2019.</h4>\n\n<p><br/></p>\n\n<h4 id=\"given-the-universe-matrix-print-a-string-which-denotes-all-the-vowels-formed-by-stars-and-present-in-the-matrix\">Given the \u2018UNIVERSE\u2019 matrix, print a string which denotes all the vowels formed by stars and \u2018#\u2019 present in the matrix.</h4>\n\n<p><br/></p>\n\n<h5 id=\"a-looks-like-this\">A looks like this :</h5>\n\n<pre><code>. * .\n* * *\n* . *\n</code></pre>\n\n<h5 id=\"e-looks-like-this\">E looks like this :</h5>\n\n<pre><code>* * *\n* * *\n* * *\n</code></pre>\n\n<h5 id=\"i-looks-like-this\">I looks like this :</h5>\n\n<pre><code>* * *\n. * .\n* * *\n</code></pre>\n\n<h5 id=\"o-looks-like-this\">O looks like this :</h5>\n\n<pre><code>* * *\n* . *\n* * *\n</code></pre>\n\n<h5 id=\"u-looks-like-this\">U looks like this :</h5>\n\n<pre><code>* . *\n* . *\n* * *\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>It is guaranteed that no two constellations are overlapping.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of columns in the matrix.\n\nThe next 3 lines of each test case denote the matrix of size 3 rows and \u2018N\u2019 columns which denotes the stars and the galaxies. Each line contains \u2018N\u2019 space separated characters from the set { \u2018#\u2019 , \u2019*\u2019 , \u2019.\u2019 }.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a string which contains the shape of vowels and the hashes.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n3 &lt;= N &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n12\n* . * # * * * # * * * # \n* . * # * . * # . * . # \n* * * # * * * # * * * # \n7\n* * * # * * *\n* * * # * . *\n* * * # * * *\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>U#O#I#\nE#O\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For the first test case,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/constellation-6829.jpg\" alt=\"\"></p>\n\n<pre><code>We can clearly make out the blue U O I and E the A is in red to differentiate from E.\n\nFor the second test case,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/constellation2-6794.png\" alt=\"\"></p>\n\n<pre><code>We can clearly see the E and O in blue\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n11\n* * * # * * * # * . *\n* * * # . * . # * . *\n* * * # * * * # * * * \n3\n* * *\n* . *\n* * *\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>E#I#U\nO\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 3xN matrix 'UNIVERSE' representing a space cluster with characters '#', '*', and '.', where '*' represents stars and '.' represents empty space, identify and extract constellations in the shape of vowels (A, E, I, O, U). A constellation is a 3x3 submatrix forming a vowel shape with stars. Galaxies are groups of constellations, separated by columns of '#'. The task is to traverse the 'UNIVERSE' matrix and output a string containing the vowels represented by each constellation, separated by '#'. Constellations do not overlap.",
                "constraints": [
                    "1 <= T <= 50",
                    "3 <= N <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n12\n* . * # * * * # * * * # \n* . * # * . * # . * . # \n* * * # * * * # * * * # \n7\n* * * # * * *\n* * * # * . *\n* * * # * * *",
                        "output": "U#O#I#\nE#O",
                        "explanation": "In the first test case, the input matrix contains 'U', 'O', and 'I' separated by '#'. The second input matrix contains 'E' and 'O' separated by '#'."
                    },
                    {
                        "input": "2\n11\n* * * # * * * # * . *\n* * * # . * . # * . *\n* * * # * * * # * * * \n3\n* * *\n* . *\n* * *",
                        "output": "E#I#U\nO",
                        "explanation": "In the first test case, the matrix contains 'E', 'I', and 'U' separated by '#'. In the second case, the matrix contains 'O'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check alphabet in every 3x3 grid recursively.</p>",
            "<p>Check alphabet in every 3x3 grid iteratively.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}