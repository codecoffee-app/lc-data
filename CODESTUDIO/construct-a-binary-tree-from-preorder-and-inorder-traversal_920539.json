{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8933,
            "title": "Construct a binary tree from preorder and inorder traversal",
            "titleSlug": "construct-a-binary-tree-from-preorder-and-inorder-traversal_920539",
            "content": "<h4 id=\"you-have-been-given-the-preorder-and-inorder-traversal-of-a-binary-tree-your-task-is-to-construct-a-binary-tree-using-the-given-inorder-and-preorder-traversals\">You have been given the preorder and inorder traversal of a binary tree. Your task is to construct a binary tree using the given inorder and preorder traversals.</h4>\n\n<p><br></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You may assume that duplicates do not exist in the given traversals.\n</code></pre>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>For the preorder sequence = [1, 2, 4, 7, 3] and the inorder sequence = [4, 2, 7, 1, 3], we get the following binary tree.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/testcase1-6263.png\" alt=\"Example\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018N\u2019 denoting the number of nodes in the binary tree.\n\nThe second line case contains \u2018N\u2019 integers denoting the preorder traversal of the binary tree.\n\nThe third line contains \u2018N\u2019 integers denoting the inorder traversal of the binary tree.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print the level order traversal of the constructed binary tree separated by a single-space.\n\nFor example, the output for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/maximum-sum-of-nodes-in-a-binary-tree-such-that-no-two-nodes-are-adjacent-7840.png\" alt=\"Example\"></p>\n\n<pre><code>Level Order Traversal:   \n1\n2 3\n4 5 6\n7\n\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null\nRight child of 4 = 7\nLeft child of 5 = null\nRight child of 5 = null\nLeft child of 6 = null\nRight child of 6 = null\n\nLevel 5 :\nLeft child of 7 = null\nRight child of 7 = null\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Here, if the node is null, print nothing. The above format was just to provide clarity on how the output is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the output will be:\n\n1 2 3 4 5 6 7\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. You just need to return the root node of the constructed binary tree.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>5\n1 2 4 7 3\n4 2 7 1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 3 4 7\n\n1 2 3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>The tree after the construction is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/testcase1-6263.png\" alt=\"Example\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 2\n2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 2\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 3000\n1 &lt;= data &lt;= 10^4\n\nWhere \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cdata\u201d is the value of the binary tree node.\n\n\nTime Limit: 1sec\n</code></pre>\n\n<h5 id=\"follow-up\">Follow-up:</h5>\n\n<pre><code>Can you solve this in O(N) time complexity?\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 64,
            "dislikes": "NA",
            "rephrased": {
                "body": "Construct a binary tree given its preorder and inorder traversals.  Assume no duplicate values exist in the traversals.",
                "constraints": [
                    "1 <= N <= 3000",
                    "1 <= data <= 10^4",
                    "Where \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cdata\u201d is the value of the binary tree node.",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "5\n1 2 4 7 3\n4 2 7 1 3",
                        "output": "1 2 3 4 7",
                        "explanation": "The preorder traversal is [1, 2, 4, 7, 3] and the inorder traversal is [4, 2, 7, 1, 3]. The resulting binary tree has root 1, left subtree with root 2 (with children 4 and 7), and right subtree with root 3.  The level order traversal is thus 1 2 3 4 7."
                    },
                    {
                        "input": "2\n1 2\n2 1",
                        "output": "1 2",
                        "explanation": "The preorder traversal is [1, 2] and the inorder traversal is [2, 1]. The resulting binary tree has root 1 and left child 2. The level order traversal is thus 1 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of constructing the tree recursively?</p>",
            "<p>Can you think of using a HashMap?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}