{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8605,
            "title": "Construct a strict binary tree",
            "titleSlug": "construct-a-strict-binary-tree_893101",
            "content": "<h4 id=\"you-have-been-given-an-array-list-of-integers-let-s-say-pre-which-represents-the-preorder-traversal-of-a-strict-binary-tree-and-an-array-list-typenl-which-has-only-two-possible-values-either-l-or-n-where-the-value-l-indicates-that-the-corresponding-node-in-binary-tree-is-a-leaf-node-and-value-n-indicates-that-the-corresponding-node-is-a-non-leaf-node\">You have been given an array/list of integers, let\u2019s say \u2018PRE\u2019, which represents the preorder traversal of a strict binary tree and an array/list \u2018TYPENL\u2019 which has only two possible values either \u2018L\u2019 or \u2018N\u2019 where the value \u2018L\u2019  indicates that the corresponding node in Binary Tree is a leaf node and value \u2018N\u2019 indicates that the corresponding node is a non-leaf node.</h4>\n\n<h4 id=\"you-are-supposed-to-construct-a-strict-binary-tree-from-the-given-two-arrays-lists-and-return-the-root-node-of-the-constructed-binary-tree\">You are supposed to construct a strict binary tree from the given two arrays/lists and return the root node of the constructed binary tree.</h4>\n\n<h5 id=\"note\">NOTE:</h5>\n\n<pre><code>A strict binary tree is a tree where each node has either 0 or 2 children.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases to be run. Then the test cases follow.\n\nThe first line of each test case contains an integer \u2018N\u2019 which denotes the number of nodes in the binary tree or the number of elements in the given arrays/lists.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers denoting the preorder traversal of the binary tree, i.e. (\u2018PRE\u2019).\n\nThe third line of each test case contains \u2018N\u2019 single space-separated characters with values either \u2018L\u2019 or \u2018N\u2019 denoting whether the corresponding node is a leaf or a non-leaf node (\u2018TYPENL\u2019).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line that contains space-separated characters for each node which can be either &#39;N&#39; or &#39;L&#39;.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything, it has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 100\n1 &lt;= &#39;N&#39; &lt;= 3000\n1 &lt;= &#39;VAL&#39; &lt;= 10 ^ 5 \n\nWhere \u2018T\u2019 is the number of test cases, and \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cVAL\u201d is the value of the binary tree node.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n1\n5 \nL \n3\n1 3 5\nN L L \n7\n2 4 8 5 1 9 3 \nN N L L N L L \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>5 \n3 1 5 \n8 4 5 2 9 1 3 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, we have 5 as the root node and inorder traversal of the strict binary tree is printed.\n\nFor the second test case, we have 1 as the root node and inorder traversal of the strict binary tree is printed.\n\nFor the third test case, we have 2 as the root node and inorder traversal of the strict binary tree is printed.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n7\n1 2 2 5 4 1 2 \nN N L L N L L \n7\n7 6 3 5 4 2 1 \nN N L L N L L \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2 2 5 1 1 4 2 \n3 6 5 7 2 4 1 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>For the first test case, we have 1 as the root node and inorder traversal of the strict binary tree is printed.\n\nFor the second test case, we have 7 as the root node and inorder traversal of the strict binary tree is printed.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the preorder traversal 'PRE' of a strict binary tree (where each node has either 0 or 2 children) and an array 'TYPENL' indicating whether each node is a leaf ('L') or non-leaf ('N'), construct the binary tree and return the inorder traversal of the constructed tree.",
                "constraints": [
                    "1 <= 'T' <= 100 (Number of test cases)",
                    "1 <= 'N' <= 3000 (Number of nodes in the binary tree)",
                    "1 <= 'VAL' <= 10 ^ 5 (Value of the binary tree node)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n5\nL\n",
                        "output": "5",
                        "explanation": "The tree contains only a root node with value 5, which is a leaf."
                    },
                    {
                        "input": "3\n1 3 5\nN L L\n",
                        "output": "3 1 5",
                        "explanation": "The root is 1 (N). Its left child is 3 (L) and its right child is 5 (L). The inorder traversal is 3 1 5."
                    },
                    {
                        "input": "7\n2 4 8 5 1 9 3\nN N L L N L L",
                        "output": "8 4 5 2 9 1 3",
                        "explanation": "The root is 2 (N). Its left child is 4 (N) and its right child is 1 (N). The left child of 4 is 8 (L) and its right child is 5 (L). The left child of 1 is 9 (L) and its right child is 3 (L). The inorder traversal is 8 4 5 2 9 1 3."
                    },
                    {
                        "input": "2\n7\n1 2 2 5 4 1 2\nN N L L N L L\n",
                        "output": "2 2 5 1 1 4 2",
                        "explanation": "The root is 1. The structure is: 1(N) , left: 2(N), right: 1(N). The left child of the first 2 is 2(L) and its right child is 5(L).  The left child of second 1 is 4(L) and its right child is 2(L). The inorder traversal is 2 2 5 1 1 4 2."
                    },
                    {
                        "input": "7\n7 6 3 5 4 2 1\nN N L L N L L",
                        "output": "3 6 5 7 2 4 1",
                        "explanation": "The root is 7. The structure is: 7(N) , left: 6(N), right: 2(N). The left child of  6 is 3(L) and its right child is 5(L).  The left child of 2 is 4(L) and its right child is 1(L). The inorder traversal is 3 6 5 7 2 4 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Create a node and start linking the left and right subtrees of each node.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}