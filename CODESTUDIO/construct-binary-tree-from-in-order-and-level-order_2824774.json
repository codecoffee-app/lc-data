{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15799,
            "title": "Construct Binary Tree From In-order and Level-order.",
            "titleSlug": "construct-binary-tree-from-in-order-and-level-order_2824774",
            "content": "<h4 id=\"you-are-given-two-arrays-inorder-and-levelorder-representing-the-in-order-and-level-order-traversal-of-a-binary-tree-respectively-your-task-is-to-construct-the-binary-tree-from-the-given-in-order-and-level-order-traversals\">You are given two arrays, \u2018inOrder\u2019 and \u2018levelOrder\u2019, representing the in-order and level-order traversal of a binary tree, respectively. Your task is to construct the binary tree from the given in-order and level-order traversals.</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<p>You are given \u2018inOrder\u2019 = {4, 2, 5, 1, 3, 6} and \u2018levelOrder\u2019 = {1, 2, 3, 4, 5, 6}.\nThe binary tree constructed from given traversals will look like this:</p>\n\n<p><img src=\"https://files.codingninjas.in/tree1-13560.png\" alt=\"tree1\"></p>\n\n<p>The inorder traversal of the above tree will be { 4, 2, 5, 1, 3, 6 }.</p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains a single integer &#39;T&#39;, representing the number of test cases.\n\nThe first line of each test case contains an integer &#39;N&#39;, which denotes the number of nodes in the tree.\n\nThe next line of each test case contains \u2018N\u2019 single space-separated integers, representing the in-order traversal of the Binary Tree.\n\nThe next line of each test case contains \u2018N\u2019 single space-separated integers, representing the level-order traversal of the Binary Tree.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the inorder traversal of the binary tree.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 2000\n0 &lt;= inOrder[i] &lt;= 10^5\n0 &lt;= levelOrder[i] &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n6\n4 2 5 1 3 6\n1 2 3 4 5 6\n5\n1 2 3 4 5\n4 2 5 1 3  \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4 2 5 1 3 6\n1 2 3 4 5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Test Case 1: The binary tree constructed from given traversals will look like this:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree1-13560.png\" alt=\"tree1\"></p>\n\n<pre><code>The inorder traversal of the above tree will be {4, 2, 5, 1, 3, 6}.\n\nTest Case 2: The binary tree constructed from given traversals will look like this:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-13561.png\" alt=\"tree2\"></p>\n\n<pre><code>The inorder traversal of the above tree will be {1, 2, 3, 4, 5}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2 \n3\n1 2 3\n2 1 3\n1\n2\n2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 2 3\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Construct a binary tree from its in-order and level-order traversals. You are given two integer arrays, `inOrder` and `levelOrder`, representing the in-order and level-order traversal of a binary tree, respectively. Your task is to reconstruct the binary tree from the given traversals and return the root node. You are provided with an initial function signature, please complete the function.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 2000",
                    "0 <= inOrder[i] <= 10^5",
                    "0 <= levelOrder[i] <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 6, inOrder = [4, 2, 5, 1, 3, 6], levelOrder = [1, 2, 3, 4, 5, 6]",
                        "output": "4 2 5 1 3 6",
                        "explanation": "The binary tree constructed from given traversals will look like this:\n\nThe inorder traversal of the above tree will be {4, 2, 5, 1, 3, 6}."
                    },
                    {
                        "input": "n = 5, inOrder = [1, 2, 3, 4, 5], levelOrder = [4, 2, 5, 1, 3]",
                        "output": "1 2 3 4 5",
                        "explanation": "The binary tree constructed from given traversals will look like this:\n\nThe inorder traversal of the above tree will be {1, 2, 3, 4, 5}."
                    },
                    {
                        "input": "n = 3, inOrder = [1, 2, 3], levelOrder = [2, 1, 3]",
                        "output": "1 2 3",
                        "explanation": "A simple tree with inorder [1, 2, 3] and levelorder [2, 1, 3]"
                    },
                    {
                        "input": "n = 1, inOrder = [2], levelOrder = [2]",
                        "output": "2",
                        "explanation": "A tree with only one node."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of finding the position for every element in the tree.</p>",
            "<p>Keep track of elements in the left and right subtree separately.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}