{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10850,
            "title": "Construct Binary Tree from Inorder and Postorder Traversal",
            "titleSlug": "construct-binary-tree-from-inorder-and-postorder-traversal_1266106",
            "content": "<h4 id=\"you-are-given-arrays-inorder-and-postorder-which-represent-inorder-traversal-and-postorder-traversal-of-a-binary-tree-respectively\">You are given arrays <em><strong>&#39;inOrder&#39;</strong></em> and <em><strong>&#39;postOrder&#39;</strong></em>, which represent &#39;inorder&#39; traversal and &#39;postorder&#39; traversal of a &#39;Binary Tree&#39; respectively.</h4>\n\n<p><br/></p>\n\n<h4 id=\"construct-a-binary-tree-represented-by-the-given-arrays-and-return-its-head\">Construct a &#39;Binary Tree&#39; represented by the given arrays and return it&#39;s head.</h4>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Assume that the Binary Tree contains only unique elements.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: &#39;inOrder&#39; = [9, 3, 15, 20, 7], &#39;postOrder&#39; = [9, 15, 7, 20, 3]\n\nOutput:\nWe get the following binary tree from Inorder and Postorder traversal:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-8456.png\" alt=\"\">\n<br/></p>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of each test case contains an integer &#39;n&#39; which represents the number of nodes in the Binary Tree.\n\nThe next line of each test case contains &#39;n&#39; single space-separated integers, representing the Postorder traversal of the Binary Tree.\n\nThe next line of each test case contains &#39;n&#39; single space-separated integers, representing the Inorder traversal of the Binary Tree.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Return the head of the binary tree constructed.\nThe level order traversal of the Binary Tree is printed. \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>7\n4 5 2 6 7 3 1\n4 2 5 1 6 3 7\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-on-console\">Output on console:</h5>\n\n<pre><code>1 2 3 4 5 6 7\n</code></pre>\n\n<p><br/></p>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>We get the following Binary Tree from the given Inorder and Postorder traversal:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/treeex1-8455.png\" alt=\"\">\n<br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>6\n2 9 3 6 10 5\n2 6 3 9 5 10\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5 6 10 2 3 9\n</code></pre>\n\n<p><br/></p>\n\n<h4 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h4>\n\n<pre><code>We get the following Binary Tree from the given Inorder and Postorder traversal:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/treeex2-8454.png\" alt=\"\">\n<br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to solve this in O(n).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10000\n1 &lt;=  &#39;inOrder[i]&#39; , \u2018postOrder[i]\u2019 &lt;= 100000  \n\nTime Limit: 1 second\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 34,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an inorder traversal ('inOrder') and a postorder traversal ('postOrder') of a binary tree, construct the binary tree and return its root node.  Assume all values in the tree are unique.",
                "constraints": [
                    "1 <= n <= 10000",
                    "1 <= inOrder[i], postOrder[i] <= 100000",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "7\n4 5 2 6 7 3 1\n4 2 5 1 6 3 7",
                        "output": "1 2 3 4 5 6 7",
                        "explanation": "The input inorder traversal is [4, 2, 5, 1, 6, 3, 7] and the postorder traversal is [4, 5, 2, 6, 7, 3, 1]. The reconstructed binary tree has the following level order traversal: [1, 2, 3, 4, 5, 6, 7]."
                    },
                    {
                        "input": "6\n2 9 3 6 10 5\n2 6 3 9 5 10",
                        "output": "5 6 10 2 3 9",
                        "explanation": "The input inorder traversal is [2, 6, 3, 9, 5, 10] and the postorder traversal is [2, 9, 3, 6, 10, 5]. The reconstructed binary tree has the following level order traversal: [5, 6, 10, 2, 3, 9]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of the Depth First Search approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}