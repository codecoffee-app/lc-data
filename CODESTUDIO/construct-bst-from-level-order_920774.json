{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8975,
            "title": "Construct BST from Level Order",
            "titleSlug": "construct-bst-from-level-order_920774",
            "content": "<h4 id=\"you-have-been-given-an-array-levelorder-consisting-of-n-elements-the-array-represents-the-level-order-traversal-of-a-binary-search-tree-bst-you-need-to-construct-the-bst-from-this-level-order-traversal\">You have been given an array \u2018levelOrder\u2019 consisting of \u2018N\u2019 elements. The array represents the level order traversal of a Binary Search Tree(BST). You need to construct the BST from this level order traversal.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-that-has-the-following-properties\">A Binary Search Tree (BST) is a binary tree data structure that has the following properties -</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>For the given level order traversal: 5 3 6 2 4 7 \n\nThe BST will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-4-9969.png\" alt=\"\"></p>\n\n<pre><code>The Inorder Traversal of this BST is 2 3 4 5 6 7. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019 denoting the number of test cases. Then each test case follows.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the length of the array.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers denoting the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the inorder traversal of the BST.\n\nThe inorder traversal of a binary tree is the traversal method in which for any node its left subtree is visited first, then the node itself, and then the right subtree. \n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n0 &lt;= levelOrder[i] &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n7\n15 10 20 8 12 16 25\n3\n2 1 3 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>8 10 12 15 16 20 25\n1 2 3 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Test Case 1: For the given level order traversal the BST can be represented as follows\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-14-5921.png\" alt=\"Example\"></p>\n\n<pre><code>The inorder traversal of this BST is 8 10 12 15 16 20 25.\n\nTest Case 2: For the given level order traversal the BST can be represented as follows\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-5-9970.png\" alt=\"\"></p>\n\n<pre><code>The inorder traversal of this BST is 1 2 3\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2 \n2\n10 5 \n1\n20 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5 10\n20\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 20,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'levelOrder' representing the level order traversal of a Binary Search Tree (BST), construct the BST and return its inorder traversal. A BST follows these properties:\n\n*   The left subtree of a node contains only nodes with data less than the node\u2019s data.\n*   The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n*   Both the left and right subtrees must also be binary search trees.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "0 <= levelOrder[i] <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "7\n15 10 20 8 12 16 25",
                        "output": "8 10 12 15 16 20 25",
                        "explanation": "The level order traversal [15, 10, 20, 8, 12, 16, 25] corresponds to a BST where 15 is the root, 10 is the left child, and 20 is the right child. Further expanding, 8 and 12 are children of 10, and 16 and 25 are children of 20. The inorder traversal of this BST is [8, 10, 12, 15, 16, 20, 25]."
                    },
                    {
                        "input": "3\n2 1 3",
                        "output": "1 2 3",
                        "explanation": "The level order traversal [2, 1, 3] represents a BST where 2 is the root, 1 is the left child, and 3 is the right child. The inorder traversal of this BST is [1, 2, 3]."
                    },
                    {
                        "input": "2\n10 5",
                        "output": "5 10",
                        "explanation": "The level order traversal [10, 5] represents a BST where 10 is the root and 5 is the left child. The inorder traversal of this BST is [5, 10]."
                    },
                    {
                        "input": "1\n20",
                        "output": "20",
                        "explanation": "The level order traversal [20] represents a BST with a single node, 20.  The inorder traversal of this BST is [20]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>Think of finding the position for every number by recursively traversing the tree.</strong></p>",
            "<p><strong>Think of storing the minimum and maximum child of ancestors for each node in the BST.</strong></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}