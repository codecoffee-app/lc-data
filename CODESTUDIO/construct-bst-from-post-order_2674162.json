{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15670,
            "title": "Construct BST from Post-order",
            "titleSlug": "construct-bst-from-post-order_2674162",
            "content": "<h4 id=\"you-have-been-given-an-array-postorder-consisting-of-n-elements-the-array-represents-the-post-order-traversal-of-a-binary-search-tree-bst-you-need-to-construct-the-bst-from-this-post-order-traversal\">You have been given an array \u2018postOrder\u2019 consisting of \u2018N\u2019 elements. The array represents the post order traversal of a Binary Search Tree(BST). You need to construct the BST from this post order traversal.</h4>\n\n<h4 id=\"note-a-binary-search-tree-bst-is-a-binary-tree-data-structure-that-has-the-following-properties\">Note: A Binary Search Tree (BST) is a binary tree data structure that has the following properties -</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>For the given post order traversal: 2 4 3 7 6 5\nThe BST will be: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/p1-13455.PNG\" alt=\"\"></p>\n\n<pre><code>The Inorder Traversal of this BST is 2 3 4 5 6 7. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains a single integer &#39;T&#39;, representing the number of test cases.\n\nThe first line of each test case contains an integer &#39;N&#39;, which denotes the number of nodes in the tree.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers denoting the post-order traversal of the tree.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the inorder traversal of the BST.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n0 &lt;= postOrder[i] &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n7\n8 12 10 16 25 20 15\n3\n1 3 2 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>8 10 12 15 16 20 25\n1 2 3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Test Case 1: For the given post-order traversal, the BST can be represented as follows\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/p2-13456.PNG\" alt=\"\"></p>\n\n<pre><code>The inorder traversal of this BST is 8 10 12 15 16 20 25.\n\nTest Case 2: For the given post-order traversal, the BST can be represented as follows\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/p3-13457.PNG\" alt=\"\"></p>\n\n<pre><code>The inorder traversal of this BST is 1 2 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2 \n2\n10 5 \n1\n20 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5 10\n20\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `postOrder` representing the post-order traversal of a Binary Search Tree (BST), construct the BST and return the root node.  Then perform an inorder traversal of the constructed BST and return the resulting array.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "0 <= postOrder[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 7, postOrder = [8, 12, 10, 16, 25, 20, 15]",
                        "output": "8 10 12 15 16 20 25",
                        "explanation": "The BST constructed from the post-order traversal [8, 12, 10, 16, 25, 20, 15] is shown in the problem description. The inorder traversal is 8 10 12 15 16 20 25."
                    },
                    {
                        "input": "n = 3, postOrder = [1, 3, 2]",
                        "output": "1 2 3",
                        "explanation": "The BST constructed from the post-order traversal [1, 3, 2] is shown in the problem description. The inorder traversal is 1 2 3."
                    },
                    {
                        "input": "n = 2, postOrder = [10, 5]",
                        "output": "5 10",
                        "explanation": "The BST constructed from the post-order traversal [10, 5] has 5 as the root and 10 as the right child.  The inorder traversal is 5 10."
                    },
                    {
                        "input": "n = 1, postOrder = [20]",
                        "output": "20",
                        "explanation": "The BST constructed from the post-order traversal [20] has 20 as the root. The inorder traversal is 20."
                    },
                    {
                        "input": "n = 5, postOrder = [1, 5, 4, 10, 8]",
                        "output": "1 4 5 8 10",
                        "explanation": "The inorder traversal of the tree constructed from postOrder traversal is: 1 4 5 8 10"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of finding the position for every number by recursively traversing the tree.</p>",
            "<p>Think of storing the minimum and maximum child of ancestors for each node in the BST.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}