{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8881,
            "title": "Construct BSTs",
            "titleSlug": "construct-bsts_920468",
            "content": "<h4 id=\"you-have-been-given-a-number-num-your-task-is-to-count-total-structurally-unique-binary-search-trees-from-keys-1-to-num-considering-we-should-use-each-key-from-1-to-num-only-once\">You have been given a number \u2018NUM\u2019. Your task is to count total structurally unique binary search trees from keys 1 to \u2018NUM\u2019 considering we should use each key from 1 to \u2018NUM\u2019 only once.</h4>\n\n<h4 id=\"two-binary-search-trees-are-different-if-there-is-at-least-one-node-during-traversal-which-is-different-in-values-or-present-in-one-tree-but-not-present-in-another-tree\">Two binary search trees are different if there is at least one node during traversal which is different in values or present in one tree but not present in another tree.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The answer can be large, hence the return answer % \u2018MOD\u2019, where \u2018MOD\u2019 is a large prime number (10^9 + 7).\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case will contain a single integer \u2018NUM\u2019 where \u2018NUM\u2019 represents the number of keys.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single line containing the count of total structurally unique binary search trees.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100   \n1 &lt;= NUM &lt;= 500\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\n1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>In the first test case, 2 unique BST are possible.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/download-9983.png\" alt=\"Example\"> </p>\n\n<pre><code>In the second test case, only 1 tree is possible.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/download-1-9982.png\" alt=\"Example\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3\n4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5\n14\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2:</h5>\n\n<pre><code>In the first test case, 5 unique BST are possible.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/uniquebst-10058.png\" alt=\"Example\"></p>\n\n<pre><code>In the second test case, similar to the above way, 14 unique BST are possible.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer 'num', determine the count of structurally unique Binary Search Trees (BSTs) that can be formed using the keys from 1 to 'num' (inclusive), ensuring each key is used exactly once. Two BSTs are considered different if their structures differ, meaning at least one node's value or presence distinguishes them during traversal.  Since the answer can be very large, return the result modulo (10^9 + 7).",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= NUM <= 500",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "num=2",
                        "output": "2",
                        "explanation": "For num = 2, the possible BSTs are:\n\n1 as root, 2 as right child\n2 as root, 1 as left child"
                    },
                    {
                        "input": "num=1",
                        "output": "1",
                        "explanation": "For num = 1, only one BST is possible: a single node with value 1."
                    },
                    {
                        "input": "num=3",
                        "output": "5",
                        "explanation": "For num = 3, there are 5 possible unique BSTs."
                    },
                    {
                        "input": "num=4",
                        "output": "14",
                        "explanation": "For num = 4, there are 14 possible unique BSTs."
                    },
                    {
                        "input": "num=5",
                        "output": "42",
                        "explanation": "For num = 5, there are 42 possible unique BSTs."
                    },
                    {
                        "input": "num=0",
                        "output": "1",
                        "explanation": "For num=0, there is only one empty BST."
                    },
                    {
                        "input": "num=6",
                        "output": "132",
                        "explanation": "For num = 6, there are 132 possible unique BSTs."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you solve the problem recursively?</p>",
            "<p>Try to store the values already calculated in the recursion.</p>",
            "<p>Can you solve by Memorising the return values for each depth and selected root?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}