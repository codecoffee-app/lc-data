{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10726,
            "title": "Construct 'p' palindromic strings",
            "titleSlug": "construct-p-palindromic-strings_1263692",
            "content": "<h4 id=\"given-a-string-s-and-an-integer-p-you-need-to-find-if-you-can-make-p-number-of-non-empty-palindromic-strings-by-using-all-the-characters-of-string-s-note-that-you-can-use-a-character-only-once-and-if-there-are-more-than-once-occurrence-of-that-character-you-can-use-it-that-many-times-only\">Given a string \u2018S\u2019 and an integer \u2018 p \u2019. You need to find if you can make \u2018 p \u2019 number of non-empty palindromic strings by using all the characters of string \u2018 S \u2019. Note that you can use a character only once and if there are more than once occurrence of that character you can use it that many times only.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If the given string is \u201cninjas\u201d and p = 4 then we can make 4 palindromic strings as \u201cnin\u201d + \u201cj\u201d + \u201ca\u201d + \u201cs\u201d.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains the string \u2018S\u2019.\n\nThe second line of each test case contains the integer \u2018 p \u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print \u201cTrue\u201d if it is possible to construct \u2018 p \u2019 palindromic strings from all letters of string \u2018S\u2019 and print \u201cFalse\u201d if it is not possible.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= |S| &lt;= 10^5\n1 &lt;= p &lt;= 10^5\n\nWhere |S| is the length of the string \u2018 S \u2019\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\nababc\n2\npqrst\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>Test Case 1: The given string is \u201cababc\u201d and p = 2. We can make 2 palindromic strings from the given string as \u201cabba\u201d + \u201cc\u201d.\n\nTest Case 2: We can not make 3 palindromic strings from the given string.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\nydredd\n5\nkkkk   \n5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S' and an integer 'p', determine if it's possible to construct 'p' non-empty palindromic strings using all characters from 'S'. Each character in 'S' can be used at most as many times as it appears in 'S'.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= |S| <= 10^5",
                    "1 <= p <= 10^5",
                    "Where |S| is the length of the string \u2018S\u2019",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "ababc\n2",
                        "output": "True",
                        "explanation": "The string 'ababc' can be used to form 2 palindromes. For example, 'abba' and 'c'."
                    },
                    {
                        "input": "pqrst\n3",
                        "output": "False",
                        "explanation": "It's not possible to create 3 palindromic strings from 'pqrst'."
                    },
                    {
                        "input": "ydredd\n5",
                        "output": "True",
                        "explanation": "The string 'ydredd' can be split as y, d, r, e, d, each of length 1 to create 5 palindromic strings"
                    },
                    {
                        "input": "kkkk\n5",
                        "output": "False",
                        "explanation": "It's not possible to create 5 palindromic strings from 'kkkk'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>A palindromic string can have at most one character having an odd count.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}