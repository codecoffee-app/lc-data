{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10951,
            "title": "Construct Quad Tree",
            "titleSlug": "construct-quad-tree_1281174",
            "content": "<h4 id=\"you-are-given-a-square-matrix-matrix-of-size-n-containing-0-s-and-1-s-only-you-have-to-represent-the-matrix-as-a-quad-tree\">You are given a square matrix \u2018matrix of size \u2018N\u2019 containing 0\u2019s and 1\u2019s only. You have to represent the matrix as a Quad-Tree.</h4>\n\n<h4 id=\"a-quad-tree-is-a-tree-data-structure-where-each-node-has-exactly-four-children-topleft-topright-bottomleft-bottomright-bottomleft-all-nodes-have-two-attributes-value-1-if-the-node-represents-a-grid-of-1s-or-0-if-the-node-represents-a-grid-of-0s-and-isleaf-true-if-the-node-is-leaf-node-on-the-tree-or-false-if-the-node-has-the-four-children\">A Quad-Tree is a tree data structure where each node has exactly four children &#39;topLeft&#39;, &#39;topRight&#39;, &#39;bottomLeft&#39;, &#39;bottomRight&#39;, &#39;bottomLeft&#39;. All nodes have two attributes, &#39;value&#39;: 1 if the node represents a grid of 1&#39;s or 0 if the node represents a grid of 0&#39;s and &#39;isLeaf&#39;: true if the node is leaf node on the tree or false if the node has the four children.</h4>\n\n<h4 id=\"we-can-construct-a-quad-tree-from-a-two-dimensional-area-using-the-following-steps\">We can construct a Quad-Tree from a two-dimensional area using the following steps:</h4>\n\n<pre><code>If the current grid has the same value (i.e., all 1&#39;s or all 0&#39;s) set isLeaf to true and set &#39;value&#39; to the value of the grid and set the four children to null and stop.\n\nIf the current grid has different values, set \u201cisLeaf\u201d to false and set value to  -1, and divide the current grid into four sub-grids as shown in the image.\n\nRepeat the above steps for each of the children with the proper sub-grid.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000310_1616658678_cn1.png\" alt=\"alt text\"></p>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe 1st line of each test case contains one integer &#39;N&#39;, representing the size of the square matrix.\n\nThe next &#39;N&#39; lines contain &#39;N&#39; integers separated by spaces describing rows of matrix &#39;matrix&#39; (each element of \u2018matrix\u2019 is either 0 or 1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>The output represents the Quad-Tree in a level order manner, with each node represented as a comma-separated value isLeaf, value.\n\nIf the value of \u201cisLeaf\u201d or \u201cvalue\u201d is 1 we represent it as 1, 1, and if the value of \u201cisLeaf\u201d or \u201cvalue\u201d is 0 we represent it as 0, 0, and if the \u201cvalue\u201d is -1 we represent it as -1.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\nN = 2^y where 0 &lt;= y &lt;= 10\nmatrix[i][j] = 0 or 1\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\n0 1\n1 0\n8\n1 1 1 1 0 0 1 1\n1 1 1 1 0 0 1 1\n1 1 1 1 1 1 0 0\n1 1 1 1 1 1 0 0\n1 1 1 1 0 0 0 0\n1 1 1 1 0 0 0 0\n1 1 1 1 0 0 0 0\n1 1 1 1 0 0 0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0, -1 1, 0 1, 1 1, 1 1, 0 \n0, -1 1, 1 0, -1 1, 1 1, 0 1, 0 1, 1 1, 1 1, 0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case:\nAt level 0: [0, -1].\nAt level 1: [1, 0], [1, 1], [1,1], [1, 0].\n\nFor the second test case:\n\nAll values in the grid are not the same. We divide the grid into four sub-grids. The topLeft, bottomLeft, and bottomRight each have the same value.\n\nThe topRight has different values so we divide it into 4 sub-grids where each has the same value.\n\nAt level 0 : [0, -1].\nAt level 1 : [1, 1], [0, -1], [0, 1], [1, 1], [1, 0].\nAt level 2 : [1, 0], [1, 1], [1, 1], [1, 0].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2\n1 1\n1 1\n1\n0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1, 1\n1, 0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -3,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a square matrix of size 'N' containing only 0s and 1s.  The task is to represent this matrix as a Quad-Tree. A Quad-Tree is a tree data structure where each node has four children: 'topLeft', 'topRight', 'bottomLeft', and 'bottomRight'. Each node has two attributes: 'value' (1 if the node represents a grid of 1s, 0 if it represents a grid of 0s, and -1 if the grid is mixed) and 'isLeaf' (true if the node is a leaf node representing a uniform grid, and false if the node has four children). The Quad-Tree is constructed as follows:\n\n1. If the current grid has the same value (all 1s or all 0s), set 'isLeaf' to true, 'value' to the grid's value (0 or 1), set the four children to null, and stop.\n2. If the current grid has different values, set 'isLeaf' to false, 'value' to -1, and divide the grid into four equal sub-grids.\n3. Repeat the process for each sub-grid to create the children nodes.\n\nYour task is to construct the Quad-Tree and represent it in level-order format, where each node is represented as a comma-separated value 'isLeaf, value'.  If 'isLeaf' or 'value' is 1, represent it as '1, 1'; if it is 0, represent it as '0, 0'; and if 'value' is -1, simply represent it as '-1'.",
                "constraints": [
                    "1 <= T <= 10",
                    "N = 2^y where 0 <= y <= 10",
                    "matrix[i][j] = 0 or 1",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "2\n2\n0 1\n1 0\n8\n1 1 1 1 0 0 1 1\n1 1 1 1 0 0 1 1\n1 1 1 1 1 1 0 0\n1 1 1 1 1 1 0 0\n1 1 1 1 0 0 0 0\n1 1 1 1 0 0 0 0\n1 1 1 1 0 0 0 0\n1 1 1 1 0 0 0 0",
                        "output": "0, -1 1, 0 1, 1 1, 1 1, 0 \n0, -1 1, 1 0, -1 1, 1 1, 0 1, 0 1, 1 1, 1 1, 0",
                        "explanation": "For the first test case:\nAt level 0: [0, -1].\nAt level 1: [1, 0], [1, 1], [1,1], [1, 0].\n\nFor the second test case:\nAll values in the grid are not the same. We divide the grid into four sub-grids. The topLeft, bottomLeft, and bottomRight each have the same value.\nThe topRight has different values so we divide it into 4 sub-grids where each has the same value.\nAt level 0 : [0, -1].\nAt level 1 : [1, 1], [0, -1], [0, 1], [1, 1], [1, 0].\nAt level 2 : [1, 0], [1, 1], [1, 1], [1, 0]."
                    },
                    {
                        "input": "2\n2\n1 1\n1 1\n1\n0",
                        "output": "1, 1\n1, 0",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of some recursive technique to divide the grid into equal parts?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}