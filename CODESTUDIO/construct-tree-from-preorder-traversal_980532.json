{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9194,
            "title": "Construct tree from Preorder Traversal",
            "titleSlug": "construct-tree-from-preorder-traversal_980532",
            "content": "<h4 id=\"given-an-array-pre-of-n-elements-that-represent-preorder-traversal-of-a-spacial-binary-tree-where-every-node-has-either-0-or-2-children-also-given-a-boolean-array-isleaf-such-that-isleaf-i-represents-if-the-i-th-node-in-the-pre-array-is-a-leaf-node-or-not-write-a-function-to-construct-the-tree-from-the-given-two-arrays-and-return-the-head-node-of-the-constructed-binary-tree\">Given an array \u2018pre[]\u2019 of \u2018n\u2019 elements that represent Preorder traversal of a spacial binary tree where every node has either 0 or 2 children. Also Given a boolean array \u2018isLeaf\u2019 such that isLeaf[i] represents if the \u2018i-th\u2019 node in the \u2018pre\u2019 array is a leaf node or not. Write a function to construct the tree from the given two arrays and return the head node of the constructed binary tree.</h4>\n\n<h4 id=\"for-example-let-pre-1-2-4-5-3-6-7\">For example let pre={1,2,4,5,3,6,7}</h4>\n\n<h4 id=\"isleaf-0-0-1-1-0-1-1\">isLeaf={0,0,1,1,0,1,1}</h4>\n\n<h4 id=\"here-0-means-that-the-node-is-not-a-leaf-node-and-1-means-that-the-node-is-a-leaf-node\">Here 0 means that the node is not a leaf node and 1 means that the node is a leaf node.</h4>\n\n<h4 id=\"then-we-will-have-the-following-tree\">Then we will have the following tree</h4>\n\n<p><img src=\"https://files.codingninjas.in/image1-6652.jpg\" alt=\"alt-1\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an Integer &#39;t&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe First line of each test case contains the integer \u2018n\u2019 denoting the number of elements in the binary tree.\n\nThe second of each test case line contains n space-separated integers denoting the value of the node of the binary tree.\n\nThe third line of each test case contains n space-separated integers each being 0 or 1. Here 0 means that the node is not a leaf node and 1 means that the node is a leaf node.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, return the root node of the constructed tree.\n\nOutput for each query must be printed in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^3\n-10^9 &lt;=pre[i] &lt;=10^9  \n\nWhere \u2018T\u2019 is the total number of test cases and N denotes the number of elements in the \u2018pre\u2019 and the \u2018isLeaf\u2019 array and \u2018pre[i]\u2019 denotes the range of values for any element inf the \u2018pre\u2019 array.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\n10 30 20 5 15\n0 0 1 1 1\n9\n2 3 5 15 11 6 4 7 9\n0 0 0 1 1 1 0 1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>20 30 5 10 15\n15 5 11 3 6 2 4 7 9\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>Test Case 1:\n\nWe can clearly see that 10 and 30 are not leaf nodes and rest of the nodes are leaf nodes. Therefore,\n\nThe Tree is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image3-6654.png\" alt=\"tree 10\"></p>\n\n<pre><code>We can verify that the pre order traversal of the tree is { 20 30 5 10 15} and all the nodes satisfy the condition of the \u2018isLeaf \u2018 array and therefore the constructed tree is correct.\n\nThe pre-order traversal of this tree is: { 10 30 20 5 15} which matches the given input.\n\nTest Case 2:\nWe can clearly see that 2. 3,5, 5, are not leaf nodes and rest are leaf nodes\nThe tree is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image2-6653.png\" alt=\"tree-big\"></p>\n\n<pre><code>We can verify that the pre order traversal of the tree is {2 3 5 15 11 6 4 7 9} and all the nodes satisfy the condition of the \u2018isLeaf \u2018 array and therefore the constructed tree is correct.\n\nThe in-order traversal of the above tree is: {15 5 11 3 6 2 7 4 9}\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n7\n1 2 3 4 5 6 7\n0 0 0 1 1 1 1\n5\n21 35 6 7 8\n0 1 0 1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4 3 5 2 6 1 7 \n35 21 7 6 8 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Construct a binary tree from its preorder traversal and a boolean array indicating leaf nodes. Given an array `pre[]` of `n` elements representing the preorder traversal of a special binary tree where each node has either 0 or 2 children, and a boolean array `isLeaf[]` where `isLeaf[i]` indicates if the i-th node in `pre[]` is a leaf. Write a function to build the tree and return the root node. Note that `isLeaf[i] = 0` means node is not a leaf and `isLeaf[i] = 1` means it is a leaf.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^3",
                    "-10^9 <= pre[i] <= 10^9",
                    "Where \u2018T\u2019 is the total number of test cases and N denotes the number of elements in the \u2018pre\u2019 and the \u2018isLeaf\u2019 array and \u2018pre[i]\u2019 denotes the range of values for any element inf the \u2018pre\u2019 array.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n10 30 20 5 15\n0 0 1 1 1",
                        "output": "20 30 5 10 15",
                        "explanation": "The input represents a binary tree with 5 nodes. The preorder traversal is {10, 30, 20, 5, 15}, and the isLeaf array {0, 0, 1, 1, 1} indicates that 10 and 30 are non-leaf nodes, while 20, 5, and 15 are leaf nodes. The output represents one possible in-order traversal of the constructed tree."
                    },
                    {
                        "input": "9\n2 3 5 15 11 6 4 7 9\n0 0 0 1 1 1 0 1 1",
                        "output": "15 5 11 3 6 2 4 7 9",
                        "explanation": "The input represents a binary tree with 9 nodes. The preorder traversal is {2, 3, 5, 15, 11, 6, 4, 7, 9}, and the isLeaf array {0, 0, 0, 1, 1, 1, 0, 1, 1} indicates that 2, 3, 5, and 6 are non-leaf nodes, while 15, 11, 4, 7, and 9 are leaf nodes. The output represents one possible in-order traversal of the constructed tree."
                    },
                    {
                        "input": "7\n1 2 3 4 5 6 7\n0 0 0 1 1 1 1",
                        "output": "4 3 5 2 6 1 7",
                        "explanation": null
                    },
                    {
                        "input": "5\n21 35 6 7 8\n0 1 0 1 1",
                        "output": "35 21 7 6 8",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>Construct the tree recursively</strong></p>",
            "<p><strong>Try constructing the tree using stack</strong></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}