{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9243,
            "title": "Convert a binary tree to a Circular Doubly LinkList",
            "titleSlug": "convert-a-binary-tree-to-a-circular-doubly-linklist_981274",
            "content": "<h4 id=\"given-a-binary-tree-convert-it-into-a-circular-doubly-linked-list\">Given a binary tree, convert it into a Circular Doubly Linked List.</h4>\n\n<h5 id=\"linked-list-must-follow-these-conditions\">Linked List must follow these conditions:</h5>\n\n<pre><code>Left and right pointers in nodes to be used for previous and next pointers in the Circular LinkedList.\n\nThe order of nodes must be the same as the in-order traversal of the binary tree.\n\nThe first node of the in-order traversal must be the head of the Circular Doubly Linked List.\n\nReturned Circular Doubly Linked List must be an in-placed changed Circular Doubly Linked List, you are not allowed to use any extra space to create a Circular Doubly Linked List.  \n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>In the below binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-115-6644.png\" alt=\"alt text\"></p>\n\n<pre><code>The inorder traversal of this binary tree \n4 =&gt; 2 =&gt; 5 =&gt; 1 =&gt; 3 =&gt; 6\n\nHence we return the head of this Circular Doubly Linked List.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-117-6645.png\" alt=\"alt text\"></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the output explicitly, it has already been taken care of. Just implement the function and return the head of the Circular Doubly Linked List.\n\nThe \u2018left\u2019 pointer must point to the previous node and the \u2018right\u2019 pointer must point to the next node.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe next \u2018T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of input contains the elements of the tree in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code> 1\n 2 3\n 4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, return the head of the Circular Doubly Linked List.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n-10^9 &lt;= data &lt;= 10^9\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 -1 -1 4 5 -1 -1 -1 -1\n1 2 3 -1 -1 -1 2 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 1 4 3 5 \n2 1 3 2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>Test case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/img2-6646.png\" alt=\"alt text\"></p>\n\n<pre><code>The inorder traversal of this binary tree \n2 =&gt; 1 =&gt; 4 =&gt; 3 =&gt; 5\n\nHence we return the head ( 2 ) of this type of Circular Doubly Linked List.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-119-6647.png\" alt=\"alt text\"></p>\n\n<p>Test case 2:</p>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-123-6648.png\" alt=\"alt text\"></p>\n\n<pre><code>The inorder traversal of this binary tree \n2 =&gt; 1 =&gt; 3 =&gt; 2\n\nHence we return the head ( 2 ) of this type of Circular Doubly Linked List.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-121-6649.png\" alt=\"alt text\"> </p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 2 -1 3 -1 4 -1 -1 -1\n1 2 3 4 -1 -1 5 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4 3 2 1\n4 2 1 3 5\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, convert it into a Circular Doubly Linked List in-place.  The conversion must adhere to the following:\n\n*   The `left` and `right` pointers of tree nodes should be repurposed as `previous` and `next` pointers in the Circular Doubly Linked List, respectively.\n*   The order of nodes in the linked list must match the in-order traversal of the binary tree.\n*   The first node encountered during the in-order traversal should become the head of the Circular Doubly Linked List.\n*   No extra space is allowed to create the linked list; the transformation must be done in-place.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3000",
                    "-10^9 <= data <= 10^9",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 -1 -1 4 5 -1 -1 -1 -1",
                        "output": "2 1 4 3 5",
                        "explanation": "The in-order traversal of the given binary tree is 2 -> 1 -> 4 -> 3 -> 5. The head of the resulting circular doubly linked list is 2, and the linked list elements are arranged as specified by the in-order traversal."
                    },
                    {
                        "input": "1 2 3 -1 -1 -1 2 -1 -1",
                        "output": "2 1 3 2",
                        "explanation": "The in-order traversal of the given binary tree is 2 -> 1 -> 3 -> 2. The head of the resulting circular doubly linked list is 2, and the linked list elements are arranged as specified by the in-order traversal."
                    },
                    {
                        "input": "1 2 -1 3 -1 4 -1 -1 -1",
                        "output": "4 3 2 1",
                        "explanation": "The in-order traversal of the given binary tree is 4 -> 3 -> 2 -> 1. The head of the resulting circular doubly linked list is 4, and the linked list elements are arranged as specified by the in-order traversal."
                    },
                    {
                        "input": "1 2 3 4 -1 -1 5 -1 -1 -1 -1",
                        "output": "4 2 1 3 5",
                        "explanation": "The in-order traversal of the given binary tree is 4 -> 2 -> 1 -> 3 -> 5. The head of the resulting circular doubly linked list is 4, and the linked list elements are arranged as specified by the in-order traversal."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we use the Divide and Conquer approach?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}