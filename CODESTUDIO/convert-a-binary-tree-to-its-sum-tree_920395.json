{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8844,
            "title": "Convert a binary tree to its sum tree",
            "titleSlug": "convert-a-binary-tree-to-its-sum-tree_920395",
            "content": "<h4 id=\"given-a-binary-tree-of-integers-you-are-supposed-to-modify-the-given-binary-tree-to-a-sum-tree-where-each-node-value-is-replaced-by-the-sum-of-the-values-of-both-left-and-right-subtrees-in-the-given-tree-the-value-of-leaf-nodes-is-changed-to-zero\">Given a binary tree of integers, you are supposed to modify the given binary tree to a sum tree where each node value is replaced by the sum of the values of both left and right subtrees in the given tree. The value of leaf nodes is changed to zero.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Below is the example showing the input tree and its sum tree.  \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sumtree3-10670.png\" alt=\"alt text\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases.\n\nThe first line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place. So -1 would not be a part of the tree nodes.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>The input for the tree depicted in the below image will be:\n\n 1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\n2. The input ends when all nodes at the last level are null(-1).\n\n3. The value of any node in the tree will not be -1.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the level order traversal of converted binary tree separated by single spaces, for NULL nodes print -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n-10^4 &lt;= val &lt;=10^4 and val != -1\n\nWhere \u2018N\u2019 is the total number of nodes in the binary tree, and &#39;val&#39; is the value of the binary tree node.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1 -2 1 3 1 -1 -1 -1 -1 -1 -1 \n5 -1 1 -8 4 6 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3 4 0 0 0 -1 -1 -1 -1 -1 -1 \n3 -1 2 6 0 0 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1 :</h5>\n\n<pre><code>In test case 1, \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sumtree1-10668.png\" alt=\"alt text\"></p>\n\n<pre><code>The level order traversal of the modified tree will be {3, 4, 0, 0, 0, -1, -1, -1, -1, -1, -1} where -1 denotes the null nodes.\n\nIn test case 2,  the level order traversal of the modified tree will be {3, -1, 2, 6, 0, 0, -1, -1, -1, -1, -1} where -1 denotes the null nodes.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 2 3 -1 4 5 -1 -1 -1 -1 -1\n2 1 3 4 -1 -1 5 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>14 4 5 -1 0 0 -1 -1 -1 -1 -1 \n13 4 5 0 -1 -1 0 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2 :</h5>\n\n<pre><code>In test case 1, the level order traversal of the modified tree will be {14, 4, 5, -1, 0, 0, -1, -1, -1, -1, -1} where -1 denotes the null nodes. \n\nIn test case 2,  the level order traversal of the modified tree will be {13, 4, 5, 0, -1, -1, 0, -1, -1, -1, -1} where -1 denotes the null nodes.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, transform it into a sum tree. In a sum tree, each node's value is replaced by the sum of its left and right subtrees' values. Leaf nodes' values are set to zero. Implement the `convertToSumTree` function to perform this transformation.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3000",
                    "-10^4 <= val <= 10^4 and val != -1"
                ],
                "testcases": [
                    {
                        "input": "root = TreeNode(1), root.left = TreeNode(-2), root.right = TreeNode(1), root.left.left = TreeNode(3), root.left.right = TreeNode(1)",
                        "output": "3, 4, 0, 0, 0, -1, -1, -1, -1, -1, -1",
                        "explanation": "The tree transforms as follows: The root (1) becomes (-2 + 1) = -1 but then it becomes(3+1=4 + (-2+1)= -1))= 3+1 + (sum of subtrees, which is 0 + 0) = 4 and then 3+(-2+1) =3+0. left child of root becomes 3+1 =4, root left.left becomes 0, left root right becomes 0"
                    },
                    {
                        "input": "root = TreeNode(5), root.right = TreeNode(1), root.right.left = TreeNode(-8), root.right.right = TreeNode(4), root.right.left.left = TreeNode(6)",
                        "output": "3, -1, 2, 6, 0, 0, -1, -1, -1, -1, -1",
                        "explanation": "The level order traversal of the modified tree will be {3, -1, 2, 6, 0, 0, -1, -1, -1, -1, -1} where -1 denotes the null nodes."
                    },
                    {
                        "input": "root = TreeNode(1), root.left = TreeNode(2), root.right = TreeNode(3), root.left.right = TreeNode(4), root.right.left = TreeNode(5)",
                        "output": "14, 4, 5, -1, 0, 0, -1, -1, -1, -1, -1",
                        "explanation": "The level order traversal of the modified tree will be {14, 4, 5, -1, 0, 0, -1, -1, -1, -1, -1} where -1 denotes the null nodes."
                    },
                    {
                        "input": "root = TreeNode(2), root.left = TreeNode(1), root.right = TreeNode(3), root.left.left = TreeNode(4), root.right.right = TreeNode(5)",
                        "output": "13, 4, 5, 0, -1, -1, 0, -1, -1, -1, -1",
                        "explanation": "The level order traversal of the modified tree will be {13, 4, 5, 0, -1, -1, 0, -1, -1, -1, -1} where -1 denotes the null nodes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Value of each node will become the sum of the values of both left and right subtrees.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}