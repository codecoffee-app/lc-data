{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8333,
            "title": "Convert binary tree to mirror tree",
            "titleSlug": "convert-binary-tree-to-mirror-tree_873140",
            "content": "<h4 id=\"given-a-binary-tree-convert-this-binary-tree-into-its-mirror-tree\">Given a binary tree, convert this binary tree into its mirror tree.</h4>\n\n<h4 id=\"a-binary-tree-is-a-tree-in-which-each-parent-node-has-at-most-two-children\">A binary tree is a tree in which each parent node has at most two children.</h4>\n\n<h4 id=\"mirror-of-a-tree-mirror-of-a-binary-tree-t-is-another-binary-tree-m-t-with-left-and-right-children-of-all-non-leaf-nodes-interchanged\">Mirror of a Tree: Mirror of a Binary Tree T is another Binary Tree M(T) with left and right children of all non-leaf nodes interchanged.</h4>\n\n<p><img src=\"https://files.codingninjas.in/download-5745.png\" alt=\"alt text\"></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. Make in-place changes, that is, modify the nodes given a binary tree to get the required mirror tree.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of input contains the elements of the tree in the level order form separated by a single space. If any node does not have a left or right child, take -1 in its place. Refer to the example below.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code> 1\n 2 3\n 4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, the inorder traversal of the mirror tree will be printed on a separate line with the elements of the mirror tree in the level order form separated by a single space and -1 in place of NULL left or right child.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n-10^9 &lt;= DATA &lt;= 10^9\n\nWhere \u2018N\u2019 is the number of nodes in the tree, and &#39;DATA&#39; denotes data contained in the node of a binary tree.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1 \n1 3 2 -1 -1 5 4 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>1 3 2 7 6 5 4 -1 -1 -1 -1 -1 -1 -1 -1 \n1 2 3 4 5 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">Explanation to sample input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/download-5746.png\" alt=\"alt text\"></p>\n\n<pre><code>In a mirror, objects on the left appear to be on the right, and objects on the right appear to be on the left.\n\nSimilarly, in the above figure, \n\nAt level 1: Since only the node with value 1 is present, it stays as at root in the mirror tree as well.\n\nAt level 2: Subtree with root 2 appears on the left and the subtree with root 3 appears on the right in the actual tree, their positions are swapped in the mirror tree. Now, subtree with root 3 comes on the left and subtree with root 2 on the right.\n\nAt level 3: Nodes 6 and 7 change positions and nodes 4 and 5 also change their positions.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n10 12 6 -1 -1 15 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>10 6 12 4 15 -1 -1 -1 -1 -1 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 23,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree represented by its root node, modify the tree in-place to create its mirror image. The mirror image of a binary tree is obtained by swapping the left and right children of each node.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3000",
                    "-10^9 <= DATA <= 10^9, where 'N' is the number of nodes in the tree, and 'DATA' denotes data contained in the node of a binary tree."
                ],
                "testcases": [
                    {
                        "input": "root = [1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "[1, 3, 2, 7, 6, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "explanation": "The mirror image is formed by swapping the left and right subtrees.  The original tree has 2 as the left child of 1 and 3 as the right. In the mirror, 3 becomes the left child and 2 the right. This continues down the tree."
                    },
                    {
                        "input": "root = [1, 3, 2, -1, -1, 5, 4, -1, -1]",
                        "output": "[1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1]",
                        "explanation": "Again, the left and right children are swapped at each level. 3 and 2 swap as children of 1.  5 and 4 swap as children of 2."
                    },
                    {
                        "input": "root = [10, 12, 6, -1, -1, 15, 4]",
                        "output": "[10, 6, 12, 4, 15, -1, -1, -1, -1, -1, -1]",
                        "explanation": "Swapping the children of 10 results in 6 on the left and 12 on the right. Consequently, 15 becomes the left child of 6, and 4 is on the right."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Recursively Swap left and right nodes of the current node.</p>",
            "<p>Use a queue to store the left and right subtrees of the current node.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}