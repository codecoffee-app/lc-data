{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8898,
            "title": "Convert BST to Min Heap",
            "titleSlug": "convert-bst-to-min-heap_920498",
            "content": "<h4 id=\"you-are-given-a-root-of-a-binary-search-tree-of-integers-the-given-bst-is-also-a-complete-binary-tree\">You are given a &#39;ROOT&#39; of a binary search tree of integers. The given BST is also a complete binary tree.</h4>\n\n<h4 id=\"your-task-is-to-convert-the-given-binary-search-tree-into-a-min-heap-and-print-the-preorder-traversal-of-the-updated-binary-search-tree\">Your task is to convert the given binary search tree into a Min Heap and print the preorder traversal of the updated binary search tree.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Binary Search Tree is a node-based binary tree data structure that has the following properties:\n\n1. The left subtree of a node contains only nodes with keys lesser than the node\u2019s key.\n2. The right subtree of a node contains only nodes with keys greater than the node\u2019s key.\n3. The left and right subtree each must also be a binary search tree.\n\nA Binary Heap is a Binary Tree with the following property:\n\n1. It\u2019s a complete tree (all levels are filled except possibly the last level and the last level has all keys as left as possible). This property of Binary Heap makes them suitable to be stored in an array.\n\nA Binary Heap is either Min Heap or Max Heap. In a Min Binary Heap, the key at the root must be minimum among all keys present in Binary Heap. The same property must be recursively true for all nodes in Binary Tree. Max Binary Heap is similar to Min Heap.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Given:- BST\u2019s \u2018ROOT\u2019 = 4 2 6 -1 -1 -1 -1 \nThen the min-heap in pre-order fashion would be 2 4 6.\n</code></pre>\n\n<h4 id=\"input-format\">Input format :</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe next \u2018T\u2019 lines contain a Binary Search Tree in a Level order fashion where -1 denotes NULL nodes.\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>The input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>For each test case, print a single line containing all the Min Heap nodes in a preorder fashion.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don\u2019t need to print anything, it has already been taken care of. You just need to implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 2 ^ 10\n\nWhere \u2018N\u2019 is the number of nodes in a binary search tree.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n10 7 11 1 8 -1 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 5 6 7 8 10\n1 7 8 10 11\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>Test-Case 1 : \nConverting the BST into min-heap and its pre-order printing would look like: 2 5 6 7 8 10.\n\nTest-Case 2 :\nConverting the BST into min-heap and its pre-order printing would look like: 2 5 6 7 8 10.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1\n2 1 3 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 2 3 4 5 6 7\n1 2 3    \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 53,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a complete binary search tree (BST) of integers, transform it into a min-heap. The transformation should maintain the complete tree structure while adhering to the min-heap property (the value of each node is less than or equal to the value of its children). Return the root of the modified min-heap. Print the preorder traversal of the resulting min-heap.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 2 ^ 10",
                    "Where \u2018N\u2019 is the number of nodes in a binary search tree."
                ],
                "testcases": [
                    {
                        "input": "root = [8, 5, 10, 2, 6, -1, -1, -1, -1, -1, 7, -1, -1]",
                        "output": "2 5 6 7 8 10",
                        "explanation": "The BST is converted into a min-heap. The preorder traversal of the resulting min-heap is 2 5 6 7 8 10."
                    },
                    {
                        "input": "root = [10, 7, 11, 1, 8, -1, -1, -1, -1, -1, -1]",
                        "output": "1 7 8 10 11",
                        "explanation": "The BST is converted into a min-heap. The preorder traversal of the resulting min-heap is 1 7 8 10 11."
                    },
                    {
                        "input": "root = [4, 2, 6, 1, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "1 2 3 4 5 6 7",
                        "explanation": "The BST is converted into a min-heap. The preorder traversal of the resulting min-heap is 1 2 3 4 5 6 7."
                    },
                    {
                        "input": "root = [2, 1, 3, -1, -1, -1, -1]",
                        "output": "1 2 3",
                        "explanation": "The BST is converted into a min-heap. The preorder traversal of the resulting min-heap is 1 2 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we use an array?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}