{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10084,
            "title": "Cooking Ninjas",
            "titleSlug": "cooking-ninjas_1164174",
            "content": "<h4 id=\"in-ninja-land-there-is-a-famous-restaurant-named-cookingninjas-there-are-n-cooks-in-cookingninjas-numbered-from-0-to-n-1-each-cook-has-rank-r-1-r-10\">In Ninja Land, there is a famous restaurant named \u2018CookingNinjas\u2019.  There are \u2018N\u2019 cooks in \u2018CookingNinjas\u2019 numbered from 0 to N-1.  Each cook has rank \u2018R\u2019 (1 &lt;= R &lt;= 10).</h4>\n\n<h4 id=\"a-cook-with-a-rank-r-can-prepare-1-dish-in-the-first-r-minutes-1-more-dish-in-the-next-2r-minutes-1-more-dish-in-next-3r-minutes-and-so-on-a-cook-can-only-make-complete-dishes-for-example-if-a-cook-is-ranked-2-he-will-prepare-one-dish-in-2-minutes-one-more-dish-in-the-next-4-mins-and-one-more-in-the-next-6-minutes-hence-in-a-total-of-12-minutes-he-can-make-3-dishes-note-in-13-minutes-also-he-can-make-only-3-dishes-as-he-does-not-have-enough-time-for-the-4th-dish\">A cook with a rank \u2018R\u2019 can prepare 1 dish in the first \u2018R\u2019 minutes, 1 more dish in the next \u20182R\u2019 minutes, 1 more dish in next \u20183R\u2019 minutes, and so on (A cook can only make complete dishes)  For example if a cook is ranked 2. He will prepare one dish in 2 minutes, one more dish in the next 4 mins and one more in the next 6 minutes hence in a total of 12 minutes he can make 3 dishes, Note, In 13 minutes also he can make only 3 dishes as he does not have enough time for the 4th dish).</h4>\n\n<h4 id=\"one-day-cookingninjas-receive-an-order-of-m-dishes-that-they-need-to-complete-as-early-as-possible-you-are-given-an-integer-array-rank-of-size-n-in-which-rank-i-gives-rank-of-ith-cook-and-an-integer-m-you-need-to-find-out-the-minimum-times-required-to-complete-this-order-of-m-dishes\">One day \u2018CookingNinjas\u2019 receive an order of \u2018M\u2019 dishes that they need to complete as early as possible. You are given an integer array \u2018rank\u2019 of size \u2018N\u2019 in which \u2018rank[i]\u2019 gives \u2018rank\u2019 of ith cook and an integer \u2018M\u2019, You need to find out the minimum times required to complete this order of \u2019M\u2019 dishes.</h4>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>One dish can be prepared by only one cook, however, two or more cooks can simultaneously prepare different dishes.\n</code></pre>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>Let \u2018N\u2019 = 4,  \u2018ranks\u2019 = [1, 2, 3, 4] and \u2018M\u2019 = 11.  Then the minimum time required to cook 11 dishes will be 12 minutes.  The cooks should prepare dishes in the following manner -:\nCook-0 prepare 4 dishes in 10 minutes i.e (1 dish in 1 minute, 1 more dish in next 2 minutes, 1 more dish in next 3 minutes, 1 more dish in next 4 minutes).\nCook-1 prepare 3 dishes in 12 minutes i.e (1 dish in 2 minutes, 1 more dish in 4 minutes, 1 more dish in 6 minutes).\nCook-2 prepare 2 dishes in 9 minutes i.e (1 dish in 3 minutes, 1 more dish in the next 6 minutes).\nCook-3 prepare 2 dishes in 12 minutes i.e (1 dish in 4 minutes, 1 more dish in the next 8 minutes).\nIf all four cooks work simultaneously then they can prepare(4 + 3 + 2 + 2 = 11) dishes in 12 minutes. And it is the minimum possible time.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe next 2*T lines represent the \u2018T\u2019 test cases.\n\nThe first line of each test case contains two space-separated integers  \u2018N\u2019 and \u2018M\u2019 representing the number of cooks and dishes respectively.\n\nThe second line of the test case contains \u2018N\u2019 space-separated integers representing \u2018ranks\u2019 of cooks\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, print a line consisting of a single integer that represents the minimum times required to complete the order of \u2019M\u2019 dishes. \n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 20\n1 &lt;= M &lt;= 10^4\n1 &lt;= rank[i] &lt;= 10\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1</h5>\n\n<pre><code>2\n1 1\n10\n4 11\n1 2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code>10\n12\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1</h5>\n\n<pre><code>Test case 1:\nThere is only one chef with rank 10, so he will cook one dish in 10 minutes.\n\nTest case 2\nSee the problem statement for an explanation.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2</h5>\n\n<pre><code>2\n4 10\n1 2 3 4\n8 8\n1 1 1 1 1 1 1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>12\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 161,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of cooks with varying ranks, and a target number of dishes 'M' to be prepared, determine the minimum time required to complete the order. Each cook can prepare dishes sequentially, with the time to prepare each subsequent dish increasing proportionally to their rank. The goal is to efficiently allocate the dishes among the cooks to minimize the overall completion time.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 20",
                    "1 <= M <= 10^4",
                    "1 <= rank[i] <= 10"
                ],
                "testcases": [
                    {
                        "input": "rank = [10], m = 1",
                        "output": "10",
                        "explanation": "There is only one chef with rank 10, so he will cook one dish in 10 minutes."
                    },
                    {
                        "input": "rank = [1, 2, 3, 4], m = 11",
                        "output": "12",
                        "explanation": "Cook-0 prepare 4 dishes in 10 minutes (1 + 2 + 3 + 4). Cook-1 prepare 3 dishes in 12 minutes (2 + 4 + 6). Cook-2 prepare 2 dishes in 9 minutes (3 + 6). Cook-3 prepare 2 dishes in 12 minutes (4 + 8). Total dishes = 4 + 3 + 2 + 2 = 11. Minimum time is 12."
                    },
                    {
                        "input": "rank = [1, 2, 3, 4], m = 10",
                        "output": "12",
                        "explanation": "With ranks [1,2,3,4] to produce 10 dishes will take at least 12 minutes."
                    },
                    {
                        "input": "rank = [1, 1, 1, 1, 1, 1, 1, 1], m = 8",
                        "output": "1",
                        "explanation": "Each cook has a rank of 1, so they can each prepare a dish in 1 minute. With 8 cooks, they can prepare 8 dishes in 1 minute."
                    },
                    {
                        "input": "rank = [2], m = 5",
                        "output": "20",
                        "explanation": "One cook of rank 2 has to make 5 dishes. Times are 2, 4, 6, 8, 10. Total time 2 + 4 + 6 + 8 + 10 = 30. The expected output provided in the samples seems incorrect. By calculation, time to make 5 dishes should be 30 minutes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check for each duration starting from one minute, whether it is possible to complete the order or not.</p>",
            "<p>How much time does a cook with rank \u2018R\u2019 take to prepare \u2018K\u2019 dishes?</p>",
            "<p>Observe if \u2018M\u2019 dishes cannot be prepared in \u2018T\u2019 units of times then it also cannot be prepared in any duration of time between 1 to \u2018T\u2019.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N*log^2(M))\r\n    Space Complexity : O(1)\r\n\r\n    Where 'N' is the number of cooks, \r\n    and 'M' is the number of dishes.\r\n*/\r\n\r\n#include <cmath>\r\n\r\nint minCookTime(vector<int> &rank, int m)\r\n{\r\n    int low = 1, high = 5 * m * (m + 1);\r\n\r\n    // Binary Search\r\n    while (high > low)\r\n    {\r\n        int mid = (high + low) / 2;\r\n        int dishCooked = 0;\r\n\r\n        // Calculate total number of dishes prepared in time = 'mid' by 'N' cooks.\r\n        for (int i = 0; i < rank.size(); i++)\r\n        {\r\n            dishCooked += (-1 + sqrt(1 + (8 * mid) / rank[i])) / 2;\r\n        }\r\n\r\n        if (dishCooked < m)\r\n        {\r\n            low = mid + 1;\r\n        }\r\n        else\r\n        {\r\n            high = mid;\r\n        }\r\n    }\r\n\r\n    return high;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N*log^2(M))\r\n    Space Complexity : O(1)\r\n\r\n    Where 'N' is the number of cooks, \r\n    and 'M' is the number of dishes.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution\r\n{\r\n    public static int minCookTime(ArrayList<Integer> rank, int m)\r\n    {\r\n        int low = 1, high = 5 * m * (m + 1);\r\n\r\n        // Binary Search\r\n        while (high > low)\r\n        {\r\n            int mid = (high + low) / 2;\r\n            int dishCooked = 0;\r\n\r\n            // Calculate total number of dishes prepared in time = 'mid' by 'N' cooks.\r\n            for (int i = 0; i < rank.size(); i++)\r\n            {\r\n                dishCooked += (-1 + Math.sqrt(1 + (8 * mid) / rank.get(i))) / 2;\r\n            }\r\n\r\n            if (dishCooked < m)\r\n            {\r\n                low = mid + 1;\r\n            }\r\n            else\r\n            {\r\n                high = mid;\r\n            }\r\n        }\r\n\r\n        return high;\r\n    }\r\n}\r\n\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity : O(N*log^2(M))\n    Space Complexity : O(1)\n\n    Where \u2018N\u2019 is the number of cooks, \n    and \u2018M\u2019 is the number of dishes.\n'''\n\nimport math\n\ndef minCookTime(rank, m):\n    low = 1\n    high = 5*m*(m+1)\n\n    # Binary Search\n    while(high > low):\n        mid = (high+low) // 2\n        dishCooked = 0\n\n        # Calculate total number of dishes prepared in time = 'mid' by 'N' cooks.\n        for i in range(len(rank)):\n            dishCooked += (-1 + math.sqrt(1 + (8*mid)/rank[i])) // 2\n\n        if (dishCooked < m):\n            low = mid+1\n        else:\n            high = mid\n\n    return high\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}