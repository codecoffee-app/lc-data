{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16557,
            "title": "Cost to Cut a Chocolate",
            "titleSlug": "cost-to-cut-a-chocolate_3208460",
            "content": "<h4 id=\"you-are-given-chocolate-of-n-length-the-chocolate-is-labeled-from-0-to-n-you-are-also-given-an-array-cuts-of-size-c-denoting-the-positions-at-which-you-can-do-a-cut-the-order-of-cuts-can-be-changed-the-cost-of-one-cut-is-the-length-of-the-chocolate-to-be-cut-therefore-the-total-cost-is-the-sum-of-all-the-cuts-print-the-minimum-cost-to-cut-the-chocolate\">You are given chocolate of \u2018N\u2019 length. The chocolate is labeled from 0 to \u2018N\u2019. You are also given an array \u2018CUTS\u2019 of size \u2018C\u2019, denoting the positions at which you can do a cut. The order of cuts can be changed. The cost of one cut is the length of the chocolate to be cut. Therefore, the total cost is the sum of all the cuts. Print the minimum cost to cut the chocolate.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>All the integers in the \u2018CUTS\u2019 array are distinct.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Let \u2018N\u2019 be: 4\nLet the \u2018CUTS\u2019 array be: [1, 3].\n\nLet the order of doing the cut be [1, 3].\nThe first cut of 1 on length 4 results in a cost of 4, and chocolate is split into two parts of the length of 1 and 3.\nThe second cut of 3 on length 3 results in a cost of 3, and chocolate is split into two parts again of the length of 2 and 1. So the total cost is 7.\n\nThe cost will remain the same if we change the order of cutting. So the result is 7.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019 and \u2018C\u2019, representing the length of chocolate and size of the \u2018CUTS\u2019 array.\n\nThe second line of each test case contains \u2018C\u2019 space-separated integers, representing the array \u2018CUTS\u2019 elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the minimum cost to cut the chocolate.\n\nPrint output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 10^5\n1 &lt;= C &lt;= 10^3\n1 &lt;= CUTS[i] &lt;= N - 1\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 2\n1 3\n5 3\n1 3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>7\n10\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<pre><code>For test case 1: \nLet the order of doing the cut be [1, 3].\nThe first cut of 1 on length 4 results in a cost of 4, and chocolate is split into two parts of the length of 1 and 3.\nThe second cut of 3 on length 3 results in a cost of 3, and chocolate is split into two parts again of the length of 2 and 1. So the total cost is 7.\n\nThe cost will remain the same if we change the order of cutting. So the result is 7.\n\nFor test case 2: \nLet the order of doing the cut be [1, 3, 4].\nThe first cut of 1 on length 5 results in a cost of 5, and chocolate is split into two parts of the length of 1 and 4.\nThe second cut of 3 on length 4 results in a cost of 4, and chocolate is split into two parts again of the length of 2 and 2. The total cost is 9.\nThe third cut of 4 on length 2 results in a cost of 2, and chocolate is split into two parts again of the length of 1 and 1. The total cost is 11.\n\nThe minimum cost will be 10 when the order of doing cuts will be: [3, 1, 4].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n10 4\n1 3 4 7\n10 2\n1 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>23\n13\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 87,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a chocolate bar of length 'N'. You need to make cuts at specific positions given in the 'CUTS' array (of size 'C'). The cost of each cut is equal to the length of the chocolate piece being cut. Your task is to find the minimum total cost to cut the chocolate bar into pieces using all the cuts specified in the 'CUTS' array, where you can choose the order of the cuts.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 10^5",
                    "1 <= C <= 10^3",
                    "1 <= CUTS[i] <= N - 1",
                    "All the integers in the \u2018CUTS\u2019 array are distinct."
                ],
                "testcases": [
                    {
                        "input": "4 2\n1 3",
                        "output": "7",
                        "explanation": "Given N = 4 and CUTS = [1, 3]. Whether you cut at position 1 first (cost 4, remaining length 3, then cut at 3, cost 3) or cut at position 3 first (cost 4, remaining length 1, then cut at 1, cost 1, +cost 3 which has been cut).  The total cost is always 4 + 3 = 7. Therefore minimum cost is 7."
                    },
                    {
                        "input": "5 3\n1 3 4",
                        "output": "10",
                        "explanation": "Given N = 5 and CUTS = [1, 3, 4].  One optimal order is to cut at 3 first (cost 5, remaining length 3), then cut at 1(cost 3, remaining length 1), finally cut at 4(cost 2, remaining length 1). Total cost is 5 + 3 + 2 = 10."
                    },
                    {
                        "input": "10 4\n1 3 4 7",
                        "output": "23",
                        "explanation": null
                    },
                    {
                        "input": "10 2\n1 3",
                        "output": "13",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to check all orders to do the cuts.</p>",
            "<p>Try to store the repeated recursive calls.</p>",
            "<p>Try to avoid recursive stack space by solving iteratively.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}