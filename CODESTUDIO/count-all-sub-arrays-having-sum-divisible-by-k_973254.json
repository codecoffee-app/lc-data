{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9071,
            "title": "Count all sub-arrays having sum divisible by k",
            "titleSlug": "count-all-sub-arrays-having-sum-divisible-by-k_973254",
            "content": "<h4 id=\"given-an-array-arr-and-an-integer-k-your-task-is-to-find-all-the-count-of-all-sub-arrays-whose-sum-is-divisible-by-the-given-integer-k\">Given an array \u2018ARR\u2019 and an integer \u2018K\u2019, your task is to find all the count of all sub-arrays whose sum is divisible by the given integer \u2018K\u2019.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>If there exists no subarray in the given sequence whose sum is divisible by \u2018K\u2019 then simply return \u20180\u2019.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Suppose the given array is \u2018ARR\u2019 = { 5, 0, 2, 3, 1} and \u2018K = 5\u2019.\nAs we can see in below image, there are a total of 6 subarrays that have the total sum divisible by \u2018K\u2019\nSo we return the integer 6.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-93-6465.png\" alt=\"subsequence\"></p>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u20182*T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of each test case contains two space-separated integers the first integer \u2018N\u2019 will denote the number of elements in the array and the second integer denotes integer \u2018K\u2019.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integer that is elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, print an integer that is the count of all subarray that sum is divisible by \u2018K\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the output explicitly, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= K,N &lt;= 10^4\n-10^9 &lt;= ARR[i] &lt;= 10^9\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 2\n2 3 1\n4 1\n1 2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n10\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>Test Case 1:\n\nGiven \u2018ARR\u2019 is { 2, 3,1 } and \u2018K\u2019 is \u20182\u2019.\nAll the sub-array with sum is divided by \u2018K\u2019 are -\n{ 2 }  because the sum is 2 and sum 2 is divisible by 2\n{ 3, 1 } because the sum is 3 + 1 = 4 and sum 4 is divisible by 2.\n{ 2, 3, 1 } because the sum is 2 + 3 + 1 = 6 and sum 6 is divisible by 2.\n\nHence there is a total of three subarrays that has sum divisible by 2.\n\n\nTest Case 2:\n\nGiven \u2018ARR\u2019 is { 1, 2, 3, 4 } and \u2018K\u2019 is \u20181\u2019.\nGiven \u2018K\u2019 is 1 that\u2019s why each and every sub-arrays sum will be divisible by \u20181\u2019 and with the size of \u20184\u2019 array total number of subarray possible is \u2018( 4*5 /2 ) = 20/2 = 10\u2019.\nAll possible subarray -\n{ 1 }, { 2 }, { 3 }, { 4 }, { 1, 2 }, { 2, 3 }, { 3, 4 }, { 1, 2, 3 }, { 2, 3, 4 }, { 1, 2, 3, 4 } and all subarray sum is divisible by \u20181\u2019.\nHence there are overall 10 subarrays that has sum divisible by \u20181\u2019.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4 3\n1 4 5 2\n3 2\n1 1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 158,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'ARR' of integers and an integer 'K', find the number of subarrays of 'ARR' whose sum is divisible by 'K'. If no such subarray exists, return 0.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= K, N <= 10^4",
                    "-10^9 <= ARR[i] <= 10^9",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "3 2\n2 3 1",
                        "output": "3",
                        "explanation": "The subarrays with sums divisible by 2 are: {2} (sum = 2), {3, 1} (sum = 4), and {2, 3, 1} (sum = 6)."
                    },
                    {
                        "input": "4 1\n1 2 3 4",
                        "output": "10",
                        "explanation": "Since K = 1, every subarray's sum is divisible by 1. The total number of subarrays in an array of size 4 is 4 + 3 + 2 + 1 = 10. They are: {1}, {2}, {3}, {4}, {1, 2}, {2, 3}, {3, 4}, {1, 2, 3}, {2, 3, 4}, {1, 2, 3, 4}."
                    },
                    {
                        "input": "4 3\n1 4 5 2",
                        "output": "2",
                        "explanation": "The subarrays with sums divisible by 3 are: {1,4} (sum = 5 which has remainder 2 when divided by 3) {4,5,2} (sum = 11 which has remainder 2 when divided by 3), {4,5} (sum = 9)  {1,4,5,2} (sum = 12)."
                    },
                    {
                        "input": "3 2\n1 1 2",
                        "output": "3",
                        "explanation": "The subarrays with sums divisible by 2 are: {2} (sum = 2), {1,1} (sum = 2), and {1,1,2} (sum = 4)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try calculating the sum of all the sub-arrays possible.</p>",
            "<p>Try to use a prefix sum.</p>",
            "<p>Check with remainder properties.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n   \n   \tTime complexity: O(N)\n    Space complexity: O(K)\n\n    Where 'N' is number elements in 'ARR' and 'K' is second given integer.\n*/\n\nint subArrayCount(vector<int> &arr, int k) {\n\t// HashMap to store frequency.\n    unordered_map<int, int> remMap; \n    // Add base case in hashmap. \n    remMap[0] = 1;                   \n    int count = 0;\n    long summ = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        summ += arr[i];\n\n        int rem = ((summ % k) + k) % k;\n        // If rem already in 'remMap'.\n        if (remMap.find(rem) != remMap.end()) {\n            count += remMap[rem];\n            remMap[rem] += 1;\n        } else {\n            remMap[rem] = 1;\n        }\n    }\n\n    return count;\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n\r\n    Time complexity: O(N)\r\n    Space complexity: O(K)\r\n\r\n    where 'N' is number elements in 'ARR' and 'K' is second given integer.\r\n\r\n'''\r\n\r\ndef subArrayCount(arr, k):\r\n\r\n    # HashMap to store frequency.\r\n    remMap = {}   \r\n    # Add base case in hashmap.\r\n    remMap[0] = 1  \r\n\r\n    count = 0\r\n    summ = 0\r\n    for i in range(len(arr)):\r\n        summ += arr[i]\r\n\r\n        rem = summ % k\r\n        # If rem already in 'remMap'.\r\n        if(rem in remMap):\r\n            count += remMap[rem]\r\n            remMap[rem] += 1\r\n        else:\r\n            remMap[rem] = 1\r\n\r\n    return count",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\n\t\n    Time complexity: O(N)\n    Space complexity: O(K)\n\n    where 'N' is number elements in 'ARR' and 'K' is second given integer.\n*/\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Solution {\n\n  public static int subArrayCount(ArrayList < Integer > arr, int k) {\n\n  \t// HashMap to store frequency.\n    HashMap < Integer, Integer > remMap = new HashMap < > (); \n    \n    // Add base case in hashmap.\n    remMap.put(0, 1); \n\n    int count = 0;\n    long summ = 0;\n    for (int i = 0; i < arr.size(); i++) {\n      summ += arr.get(i);\n      int rem = (int)(((summ % k) + k) % k);\n\n      // If rem already in 'remMap'.\n      if (remMap.containsKey(rem)) {\n        count += remMap.get(rem);\n        remMap.put(rem, remMap.get(rem) + 1);\n      } else {\n        remMap.put(rem, 1);\n      }\n    }\n\n    return count;\n  }\n\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}