{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16561,
            "title": "Count Couples",
            "titleSlug": "count-couples_3208653",
            "content": "<h4 id=\"there-are-two-groups-one-of-men-and-one-of-women-with-unique-ids-each-group-has-unique-ids-but-two-people-from-different-groups-can-have-the-same-id-these-two-groups-are-represented-in-the-form-of-a-binary-search-tree\">There are two groups, one of men, and one of women with unique IDs (Each group has unique IDs but two people from different groups can have the same ID). These two groups are represented in the form of a Binary Search Tree.</h4>\n\n<h4 id=\"now-the-ids-are-handed-out-in-such-a-way-that-a-man-and-woman-are-married-if-and-only-if-their-ids-sum-up-to-x-given-the-two-groups-find-the-number-of-married-couples-that-exist\">Now, the IDs are handed out in such a way that a man and woman are married if and only if their IDs sum up to \u2018X\u2019. Given the two groups, find the number of married couples that exist.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains &#39;T&#39;, denoting the number of test cases.\nFor each Test :\nThe first line contains three space separated integers =&gt; X, representing the sum, and T1 and T2 representing the number of integers in the next 2 lines.\nThe second line contains an array A of T1 space separated integers, with a positive integer representing a node and -1 representing  a NULL value.\nThe third line contains an array B of T2 space separated integers, with a positive integer representing a node and -1 representing  a NULL value.\n\nThe input is given is &#39;Level Order&#39;.\n(Note that T1 and T2 are not the number of nodes in the BSTs and N1 = number of positive integers in A and N2 = number of positive integers in B.)\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print one integer, that is, the number of married couples that exist in the groups.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints -</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= T1,T2 &lt;= 10^5\n1 &lt;= A[i] &lt;= 10^9 or A[i] = -1, i \u2208 (1,T1)\n1 &lt;= B[i] &lt;= 10^9 or B[i] = -1, i \u2208 (1,T2)\n1 &lt;= X &lt;= 10^9\n\nNote - The sum of &#39;T1&#39; and \u2018T2\u2019 over all test cases do not exceed 2 * 10^5.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n6 13 11\n7 2 9 1 5 -1 14 -1 -1 -1 -1 -1 -1\n4 2 5 1 3 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>The couples for these groups are (1,5), (2,4) and (5,1). Hence, the answer is 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n8 7 7\n5 4 7 -1 -1 -1 -1\n3 1 4 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two Binary Search Trees representing groups of men and women, where each person has a unique ID within their group, and a target sum 'X', determine the number of married couples. A married couple consists of one man and one woman whose IDs sum up to 'X'. The trees are provided in level order format. Return the total number of married couples.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= T1, T2 <= 10^5",
                    "1 <= A[i] <= 10^9 or A[i] = -1, i \u2208 (1,T1)",
                    "1 <= B[i] <= 10^9 or B[i] = -1, i \u2208 (1,T2)",
                    "1 <= X <= 10^9",
                    "The sum of 'T1' and \u2018T2\u2019 over all test cases do not exceed 2 * 10^5."
                ],
                "testcases": [
                    {
                        "input": "x = 6, tree1 = [7, 2, 9, 1, 5, -1, 14, -1, -1, -1, -1, -1, -1], tree2 = [4, 2, 5, 1, 3, -1, -1, -1, -1, -1, -1]",
                        "output": "3",
                        "explanation": "The couples for these groups are (1,5), (2,4) and (5,1). Hence, the answer is 3."
                    },
                    {
                        "input": "x = 8, tree1 = [5, 4, 7, -1, -1, -1, -1], tree2 = [3, 1, 4, -1, -1, -1, -1]",
                        "output": "3",
                        "explanation": "The couples are (4,4), (7,1), and (5,3). Hence the answer is 3."
                    },
                    {
                        "input": "x = 10, tree1 = [5, 3, 7, 2, 4, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1], tree2 = [5, 4, 6, 3, -1, 7, -1, -1, -1, -1, -1]",
                        "output": "4",
                        "explanation": "The couples are (5,5), (3,7), (7,3) and (4,6). Hence the answer is 4."
                    },
                    {
                        "input": "x = 5, tree1 = [1, -1, 2, -1, -1], tree2 = [4, 3, -1, -1, -1]",
                        "output": "2",
                        "explanation": "The couples are (1,4) and (2,3). Hence the answer is 2."
                    },
                    {
                        "input": "x = 100, tree1 = [50, 25, 75, 10, 30, 60, 80, 5, 15, -1, -1, 55, 65, -1, -1, -1, -1, -1, -1, -1, -1], tree2 = [50, 20, 80, 10, 30, 70, 90, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "1",
                        "explanation": "The couple is (50, 50). Hence the answer is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For each node is the first BST, is there a corresponding node in the second BST that it can be paired up with?</p>",
            "<p><strong>&nbsp;</strong>Can we store all nodes of the second BST instead of having to search it each time?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}