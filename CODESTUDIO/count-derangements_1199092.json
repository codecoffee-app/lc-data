{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10247,
            "title": "Count Derangements",
            "titleSlug": "count-derangements_1199092",
            "content": "<h4 id=\"given-a-number-n-the-task-is-to-find-the-total-number-of-derangements-of-a-set-of-n-elements\">Given a number \u2018N&#39;, the task is to find the total number of derangements of a set of \u2018N\u2019 elements.</h4>\n\n<h4 id=\"a-derangement-is-a-permutation-of-n-elements-such-that-no-element-appears-in-its-original-position-for-example-a-derangement-of-0-1-2-3-is-2-3-1-0\">A \u2018Derangement\u2019 is a permutation of &#39;N&#39; elements, such that no element appears in its original position. For example, a derangement of {0, 1, 2, 3} is {2, 3, 1, 0}.</h4>\n\n<h4 id=\"for-example-n-2-0-1-and-1-0-are-the-only-derangement-therefore-output-will-be-1\">For example, &#39;N&#39; = 2 , {0, 1} and {1, 0} are the only derangement therefore output will be 1.</h4>\n\n<h4 id=\"input-format\">Input format :</h4>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; denoting the number of test cases.\n\nThe first line of each test case contains an integer &#39;N&#39;, the size of the permutation.\n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>For each test case, print the total number of derangements of a set of n elements.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The \u2018answer\u2019 could be very large, thus output \u2018answer\u2019 % (10 ^ 9 + 7).\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 5*10^3\n\nTime Limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n2\n1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>1\n0\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h4>\n\n<pre><code>For the first test case, For two elements say {0, 1}, there is only one possible derangement {1, 0}.\n\nFor the second test case, For one element say {0}, it is not possible to any derangement because there is only one element and it is always placed in its original position.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n4\n3\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>9\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer 'N', determine the number of derangements of a set containing 'N' elements. A derangement is a permutation where no element appears in its original position. Since the result can be very large, return the answer modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 5*10^3",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n2\n1",
                        "output": "1\n0",
                        "explanation": "Case 1: For N=2, the set is {0, 1}. The only derangement is {1, 0}. So the answer is 1.\nCase 2: For N=1, the set is {0}.  There is no possible derangement as the element must be in its original position.  So the answer is 0."
                    },
                    {
                        "input": "2\n4\n3",
                        "output": "9\n2",
                        "explanation": "Case 1: For N=4, the number of derangements is 9.\nCase 2: For N=3, the number of derangements is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you form the recurrence relation?&nbsp;</p>",
            "<p>Can we optimize it by solving subproblems?&nbsp;</p>",
            "<p><strong>Think of storing the previous state into some variable.</strong></p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}