{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8432,
            "title": "Count derangements",
            "titleSlug": "count-derangements_873861",
            "content": "<h4 id=\"a-derangement-is-a-permutation-of-n-elements-such-that-no-element-appears-in-its-original-position-for-example-an-instance-of-derangement-of-0-1-2-3-is-2-3-1-0-because-2-present-at-index-0-is-not-at-its-initial-position-which-is-2-and-similarly-for-other-elements-of-the-sequence\">A Derangement is a permutation of \u2018N\u2019 elements, such that no element appears in its original position. For example, an instance  of derangement of {0, 1, 2, 3} is {2, 3, 1, 0}, because 2 present at index 0 is not at its initial position which is 2 and similarly for other elements of the sequence.</h4>\n\n<h4 id=\"given-a-number-n-find-the-total-number-of-derangements-possible-of-a-set-of-n-elements\">Given a number \u2018N\u2019, find the total number of derangements possible of a set of &#39;N\u2019 elements.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The answer could be very large, output answer %(10 ^ 9 + 7).\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line and the only line of each test case contains an integer \u2018N\u2019 denoting the number of elements whose derangements are to be counted.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the total number of derangements of a set of \u2018N\u2019 elements. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print anything, it has been already taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h5>\n\n<pre><code>In test case 1, For two elements say {0, 1}, there is only one possible derangement {1, 0}. 1 is present at index 0 and not at its actual position, that is, 1. Similarly, 0 is present at index 1 and not at its actual position, that is, 0.\n\nIn test case 2, For three elements say {0, 1, 2}, there are two possible derangements {2, 0, 1} and {1, 2, 0}. In both the derangements, no element is present at its actual position.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/a-1-5818.jpg\" alt=\"alt text\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1\n4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0\n9\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2:</h5>\n\n<pre><code>In test case 1, For the array = {0}, there is no possible derrangements. Hence the answer is 0 (zero).\n\nIn test case 2, For the array elements = {0, 1, 2, 3}, total 9 derrangements are possible. One of them is: { 3, 2, 1, 0}.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 99,
            "dislikes": "NA",
            "rephrased": {
                "body": "A derangement is a permutation of 'N' elements where no element appears in its original position. For example, a derangement of {0, 1, 2, 3} is {2, 3, 1, 0} because no element is at its original index.\n\nGiven a number 'N', find the total number of derangements possible for a set of 'N' elements.  The answer should be returned modulo (10^9 + 7).",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3000",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n2\n3",
                        "output": "1\n2",
                        "explanation": "Test Case 1: For two elements {0, 1}, the only derangement is {1, 0}.\nTest Case 2: For three elements {0, 1, 2}, the derangements are {2, 0, 1} and {1, 2, 0}."
                    },
                    {
                        "input": "2\n1\n4",
                        "output": "0\n9",
                        "explanation": "Test Case 1: For the array {0}, there are no derangements.\nTest Case 2: For the array {0, 1, 2, 3}, there are 9 derangements. One example is {3, 2, 1, 0}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about how the position for each element will be assigned.</p>",
            "<p>Store results of subproblems in an array.</p>",
            "<p>Optimise the approach without using extra space.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/* \n    Time complexity: O(N)\n    Space complexity: O(1)\n\n    Where 'N' is the number of elements.\n*/\n\n#define MOD 1000000007\n\nlong long int countDerangements(int n) {\n    // Base case.\n    if (n == 1 or n == 2) {\n        return n - 1;\n    }\n\n    // Variable for storing previous values.\n    long long int prevOne = 0;\n    long long int prevTwo = 1;\n\n    for (int i = 3; i <= n; ++i) {\n        long long int cur = ((i - 1)% MOD * (prevOne % MOD+ prevTwo% MOD) % MOD) % MOD;\n        prevOne = prevTwo;\n        prevTwo = cur;\n    }\n\n    // Return result for 'N'.\n    return prevTwo;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/* \n\tTime complexity: O(N)\n\tSpace complexity: O(1)\n\n\tWhere 'N' is the number of elements.\n*/\n\npublic class Solution {\n\tstatic long MOD = 1000000007;\n\n\tpublic static long countDerangements(int n) {\n\t\t// Base case.\n\t\tif (n == 1 || n == 2) {\n\t\t\treturn n - 1;\n\t\t}\n\n\t\t// Variable for storing previous values.\n\t\tlong prevOne = 0;\n\t\tlong prevTwo = 1;\n\n\t\tfor (int i = 3; i <= n; ++i) {\n\t\t\tlong cur = ((i - 1) % MOD * (prevOne % MOD + prevTwo % MOD) % MOD) % MOD;\n\t\t\tprevOne = prevTwo;\n\t\t\tprevTwo = cur;\n\t\t}\n\n\t\t// Return result for 'N'.\n\t\treturn prevTwo;\n\t}\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\" \n    Time complexity: O(N)\n    Space complexity: O(1)\n\n    Where 'N' is the number of elements.\n\"\"\"\n\nfrom sys import stdin, setrecursionlimit\nimport sys\nsetrecursionlimit(10**6)\n\nMOD = 1000000007\n\ndef countDerangements(n):\n    # Base case.\n    if n == 1 or n == 2:\n        return n - 1\n\n    # Variable for storing previous values.\n    prevOne = 0\n    prevTwo = 1\n\n    for i in range(3, n+1):\n        cur = ((i - 1) % MOD * (prevOne % MOD + prevTwo % MOD) % MOD) % MOD\n        prevOne = prevTwo\n        prevTwo = cur\n\n    # Return result for 'N'.\n    return prevTwo\n\n# Main.\nt = int(input())\nwhile t:\n    n = int(input())\n    print(countDerangements(n))\n    t = t-1",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}