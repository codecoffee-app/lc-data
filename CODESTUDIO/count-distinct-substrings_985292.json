{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9428,
            "title": "Count distinct substrings",
            "titleSlug": "count-distinct-substrings_985292",
            "content": "<h4 id=\"given-a-string-s-you-are-supposed-to-return-the-number-of-distinct-substrings-including-empty-substring-of-the-given-string-you-should-implement-the-program-using-a-trie\">Given a string &#39;S&#39;, you are supposed to return the number of distinct substrings(including empty substring) of the given string. You should implement the program using a trie.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>A string \u2018B\u2019 is a substring of a string \u2018A\u2019 if \u2018B\u2019 that can be obtained by deletion of, several characters(possibly none) from the start of \u2018A\u2019 and several characters(possibly none) from the end of \u2018A\u2019. \n\nTwo strings \u2018X\u2019 and \u2018Y\u2019 are considered different if there is at least one index \u2018i\u2019  such that the character of \u2018X\u2019 at index \u2018i\u2019 is different from the character of \u2018Y\u2019 at index \u2018i\u2019(X[i]!=Y[i]).\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases.\n\nThen, the \u2018T\u2019 test cases follow.\n\nThe first line of each test case contains a string.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print an integer denoting the number of distinct substrings in the given string.\n\nThe output for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything, It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= |S| &lt;= 10^3\n\n\u2018S\u2019 contains only lowercase English letters.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\nsds\nabc\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>6\n7\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>In the first test case, the 6 distinct substrings are { \u2018s\u2019,\u2019 d\u2019, \u201dsd\u201d, \u201dds\u201d, \u201dsds\u201d, \u201c\u201d }\n\nIn the second test case, the 7 distinct substrings are {\u2018a\u2019, \u2018b\u2019, \u2018c\u2019, \u201cab\u201d, \u201cbc\u201d, \u201cabc\u201d, \u201c\u201d }.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\naa\nabab\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>3\n8\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h5>\n\n<pre><code>In the first test case, the two distinct substrings are {\u2018a\u2019, \u201caa\u201d, \u201c\u201d }.\n\nIn the second test case, the seven distinct substrings are {\u2018a\u2019, \u2018b\u2019, \u201cab\u201d, \u201cba\u201d, \u201caba\u201d, \u201cbab\u201d, \u201cabab\u201d, \u201c\u201d }\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"hints\">Hints:</h5>\n\n<pre><code>1. Can you think about a data structure that can be used to store the distinct substrings?\n2. Can you think about using the fact that every substring of \u2018S\u2019 is a prefix of some suffix string of \u2018S\u2019?\n3. Try to insert every suffix of the string in Trie.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 185,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S', determine the number of distinct substrings of 'S', including the empty substring. Implement this using a Trie data structure.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= |S| <= 10^3",
                    "\u2018S\u2019 contains only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "s = \"sds\"",
                        "output": "6",
                        "explanation": "The 6 distinct substrings are { \u2018s\u2019,\u2019 d\u2019, \u201dsd\u201d, \u201dds\u201d, \u201dsds\u201d, \u201c\u201d }"
                    },
                    {
                        "input": "s = \"abc\"",
                        "output": "7",
                        "explanation": "The 7 distinct substrings are {\u2018a\u2019, \u2018b\u2019, \u2018c\u2019, \u201cab\u201d, \u201cbc\u201d, \u201cabc\u201d, \u201c\u201d }"
                    },
                    {
                        "input": "s = \"aa\"",
                        "output": "3",
                        "explanation": "The 3 distinct substrings are {\u2018a\u2019, \u201caa\u201d, \u201c\u201d }"
                    },
                    {
                        "input": "s = \"abab\"",
                        "output": "8",
                        "explanation": "The 8 distinct substrings are {\u2018a\u2019, \u2018b\u2019, \u201cab\u201d, \u201cba\u201d, \u201caba\u201d, \u201cbab\u201d, \u201cabab\u201d, \u201c\u201d }"
                    },
                    {
                        "input": "s = \"aaaa\"",
                        "output": "5",
                        "explanation": "The 5 distinct substrings are {\"\", \"a\", \"aa\", \"aaa\", \"aaaa\"}"
                    },
                    {
                        "input": "s = \"\"",
                        "output": "1",
                        "explanation": "The only distinct substring is the empty string."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Tries",
                "slug": "tries"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N^2)\r\n    Space Complexity: O(N^2)\r\n\r\n    Where 'N' is the length of the given string.\r\n*/\r\n\r\n//    Class for making trie\r\nclass TrieNode\r\n{\r\npublic:\r\n    TrieNode *children[26];\r\n\r\n    TrieNode()\r\n    {\r\n\r\n        for (int i = 0; i < 26; i++)\r\n        {\r\n            children[i] = NULL;\r\n        }\r\n    }\r\n\r\n    ~TrieNode()\r\n    {\r\n        for (int i = 0; i < 26; i++)\r\n        {\r\n            if (children[i] != NULL)\r\n            {\r\n                delete children[i];\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n//    Function to insert a string into the trie.\r\nvoid insert(string &s, int i, TrieNode *head)\r\n{\r\n    TrieNode *temp = head;\r\n\r\n    int n = s.length();\r\n\r\n    //    Iterate through the given string\r\n    while (i < n)\r\n    {\r\n        char ch = s[i];\r\n\r\n        //    If child node is not present.\r\n        if (temp->children[ch - 'a'] == NULL)\r\n        {\r\n            //    Create new child node.\r\n            temp->children[ch - 'a'] = new TrieNode();\r\n        }\r\n\r\n        //    Move to the child node.\r\n        temp = temp->children[ch - 'a'];\r\n        i++;\r\n    }\r\n}\r\n\r\n//    Function to count the number of nodes in the trie.\r\nint countNodes(TrieNode *root)\r\n{\r\n    if (root == NULL)\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    int subTreeNodes = 1;\r\n\r\n    //    Iterate through the children of the current node.\r\n    for (int i = 0; i < 26; i++)\r\n    {\r\n        subTreeNodes += countNodes(root->children[i]);\r\n    }\r\n\r\n    return subTreeNodes;\r\n}\r\n\r\nint countDistinctSubstrings(string &s)\r\n{\r\n    int n = s.length();\r\n\r\n    //    Intialize the root of  the trie.\r\n    TrieNode *head = new TrieNode();\r\n\r\n    //    Insert all suffixes into the trie.\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n\r\n        insert(s, i, head);\r\n    }\r\n\r\n    //    Count the total number of nodes in the trie.\r\n    int totalNodes = countNodes(head);\r\n\r\n    //    Free the memory.\r\n    delete head;\r\n\r\n    //    Return the number of distinct substrings.\r\n    return totalNodes;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N^2)\r\n    Space Complexity: O(N^2)\r\n\r\n    Where 'N' is the length of the given string.\r\n*/\r\n\r\n//    Class for making trie\r\nclass TrieNode \r\n{\r\n    public TrieNode []children = new TrieNode[26];\r\n    TrieNode() \r\n    {\r\n        for (int i = 0; i < 26; i++) \r\n        {\r\n            children[i] = null;\r\n        }\r\n    }\r\n}\r\n\r\npublic class Solution \r\n{\r\n    //    Function to insert a string into the trie.\r\n    private static void insert(String s, int i, TrieNode head) \r\n    {\r\n        TrieNode temp = head;\r\n        int n = s.length();\r\n\r\n        //    Iterate through the given string\r\n        while (i < n) \r\n        {\r\n            char ch = s.charAt(i);\r\n\r\n            //    If child node is not present.\r\n            if (temp.children[ch - 'a'] == null) \r\n            {\r\n                //    Create new child node.\r\n                temp.children[ch - 'a'] = new TrieNode();\r\n            }\r\n\r\n            //    Move to the child node.\r\n            temp = temp.children[ch - 'a'];\r\n            i++;\r\n        }\r\n    }\r\n\r\n    //    Function to count the number of nodes in the trie.\r\n    private static int countNodes(TrieNode root) \r\n    {\r\n        if (root == null) \r\n        {\r\n            return 0;\r\n        }\r\n\r\n        int subTreeNodes = 1;\r\n\r\n        //    Iterate through the children of the current node.\r\n        for (int i = 0; i < 26; i++) \r\n        {\r\n            subTreeNodes += countNodes(root.children[i]);\r\n        }\r\n\r\n        return subTreeNodes;\r\n    }\r\n\r\n    public static int countDistinctSubstrings(String s) \r\n    {\r\n        int n = s.length();\r\n\r\n        //    Intialize the root of  the trie.\r\n        TrieNode head = new TrieNode();\r\n\r\n        //    Insert all suffixes into the trie.\r\n        for (int i = 0; i < n; i++) \r\n        {\r\n            insert(s, i, head);\r\n        }\r\n\r\n        //    Count the total number of nodes in the trie.\r\n        int totalNodes = countNodes(head);\r\n\r\n        //    Return the number of distinct substrings.\r\n        return totalNodes;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N^2)\r\n    Space Complexity: O(N^2)\r\n\r\n    Where 'N' is the length of the given string.\r\n'''\r\n\r\n\r\nclass TrieNode:\r\n    \"\"\"A trie node\"\"\"\r\n\r\n    def __init__(self, pos):\r\n        # position stored in this node\r\n        self.position = pos\r\n\r\n        # A flag that marks if the word ends on this particular node.\r\n        self.end_of_word = False\r\n\r\n        # children is the array which serves as index for the characters. There are 26 different characters\r\n        # Therefore the size of the array is 26\r\n        self.children = [0] * 26\r\n\r\n\r\nclass Trie:\r\n    def __init__(self):\r\n        self.root = TrieNode(\"\")\r\n        self.nodeCnt = 1\r\n\r\n    # to insert a suffix into the trie\r\n    def insert(self, s):\r\n        node = self.root\r\n\r\n        for char in s:\r\n            pos = ord(char) - ord('a')\r\n            # If node for that character does not exist, create it\r\n            if node.children[pos] == 0:\r\n                new_node = TrieNode(pos)\r\n                node.children[pos] = new_node\r\n                node = new_node\r\n                self.nodeCnt += 1\r\n            else:\r\n                node = node.children[pos]\r\n\r\n\r\ndef countDistinctSubstrings(s):\r\n    n = len(s)\r\n    trie = Trie()\r\n    for i in range(n):\r\n        trie.insert(s[i:])\r\n\r\n    return trie.nodeCnt",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}