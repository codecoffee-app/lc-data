{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 594,
            "title": "Count Inversions",
            "titleSlug": "count-inversions_615",
            "content": "<h4 id=\"for-a-given-integer-array-list-arr-of-size-n-containing-all-distinct-values-find-the-total-number-of-inversions-that-may-exist\">For a given integer array/list &#39;ARR&#39; of size &#39;N&#39; containing all distinct values, find the total number of &#39;Inversions&#39; that may exist.</h4>\n\n<h4 id=\"an-inversion-is-defined-for-a-pair-of-integers-in-the-array-list-when-the-following-two-conditions-are-met\">An inversion is defined for a pair of integers in the array/list when the following two conditions are met.</h4>\n\n<pre><code>A pair (&#39;ARR[i]&#39;, &#39;ARR[j]&#39;) is said to be an inversion when:\n\n1. &#39;ARR[i] &gt; &#39;ARR[j]&#39; \n2. &#39;i&#39; &lt; &#39;j&#39;\n\nWhere &#39;i&#39; and &#39;j&#39; denote the indices ranging from [0, &#39;N&#39;).\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;N&#39;, denoting the size of the array.\n\nThe second line of input contains &#39;N&#39; integers separated by a single space, denoting the elements of the array &#39;ARR&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Print a single line containing a single integer that denotes the total count of inversions in the input array.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything, it has been already taken care of. Just implement the given function.  \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^5 \n1 &lt;= ARR[i] &lt;= 10^9\n\nWhere &#39;ARR[i]&#39; denotes the array element at &#39;ith&#39; index.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3\n3 2 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h5>\n\n<pre><code>We have a total of 3 pairs which satisfy the condition of inversion. (3, 2), (2, 1) and (3, 1).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>5\n2 5 1 3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h5>\n\n<pre><code>We have a total of 4 pairs which satisfy the condition of inversion. (2, 1), (5, 1), (5, 3) and (5, 4).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"hints\">Hints:</h5>\n\n<pre><code>1. Start with the brute force approach.\n2. Use a modified merge sort.\n3. Iterate through the elements in sorted order and use a Fenwick tree to track the inversions.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 710,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array 'ARR' of size 'N' containing distinct values, determine the total number of inversions present. An inversion occurs when two elements 'ARR[i]' and 'ARR[j]' satisfy the conditions: 'ARR[i] > ARR[j]' and 'i < j', where 'i' and 'j' are indices within the range [0, 'N').",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= ARR[i] <= 10^9",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\n3 2 1",
                        "output": "3",
                        "explanation": "The inversions are (3, 2), (3, 1), and (2, 1). There are a total of 3 inversions."
                    },
                    {
                        "input": "5\n2 5 1 3 4",
                        "output": "4",
                        "explanation": "The inversions are (2, 1), (5, 1), (5, 3), and (5, 4). There are a total of 4 inversions."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity : O(N*log(N))\n    Space Complexity : O(N)\n\n    Where, N is the size of the array.\n*/\n\n#include <vector>\n#include <algorithm>\nvoid fenwickUpdate(int index, int siz, vector<long long> &fenwick)\n{\n    while (index <= siz)\n    {\n        // Update the current element in the fenwick vector.\n        fenwick[index] += 1;\n\n        // Increase the index to the child index in the fenwick tree.\n        index = index + (index & (-index));\n    }\n}\nlong long fenwickSum(int index, vector<long long> &fenwick)\n{\n    long long sum = 0;\n    while (index > 0)\n    {\n\n        // Add the value of current node in sum.\n        sum += fenwick[index];\n\n        // Move to the parent node of the current node.\n        index = index - (index & (-index));\n    }\n    return sum;\n}\n\nlong long getInversions(long long *arr, int n) {\n\n    // Take a 2D vector to store the sorted array and their initial index.\n    vector<vector<int>> mapping(n, vector<int>(2));\n\n    vector<long long> fenwick(n + 1, 0), mask(n);\n\n    for (int i = 0; i < n; i++) {\n        mapping[i][0] = arr[i];\n        mapping[i][1] = i;\n    }\n\n    // Sort the mapping array and update all the permutations to mask vector.\n    sort(mapping.begin(), mapping.end());\n    for (int i = 0; i < n; i++) {\n        mask[mapping[i][1]] = i + 1;\n    }\n\n    long long answer = 0;\n    for (int i = n - 1; i >= 0; i--) {\n\n        // Calculate the number of elements greater than the current element.\n        answer += fenwickSum(mask[i] - 1, fenwick);\n\n        // Update the element that has been visited.\n        fenwickUpdate(mask[i], n, fenwick);\n    }\n    return answer;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "/*\n    Time Complexity : O(N*log(N))\n    Space Complexity : O(N)\n\n    Where, N is the size of the array.\n*/\n\n#include <vector>\n#include <algorithm>\nvoid fenwickUpdate(int index, int siz, vector<long long> &fenwick)\n{\n    while (index <= siz)\n    {\n        // Update the current element in the fenwick vector.\n        fenwick[index] += 1;\n\n        // Increase the index to the child index in the fenwick tree.\n        index = index + (index & (-index));\n    }\n}\nlong long fenwickSum(int index, vector<long long> &fenwick)\n{\n    long long sum = 0;\n    while (index > 0)\n    {\n\n        // Add the value of current node in sum.\n        sum += fenwick[index];\n\n        // Move to the parent node of the current node.\n        index = index - (index & (-index));\n    }\n    return sum;\n}\n\nlong long getInversions(long long *arr, int n) {\n\n    // Take a 2D vector to store the sorted array and their initial index.\n    vector<vector<int>> mapping(n, vector<int>(2));\n\n    vector<long long> fenwick(n + 1, 0), mask(n);\n\n    for (int i = 0; i < n; i++) {\n        mapping[i][0] = arr[i];\n        mapping[i][1] = i;\n    }\n\n    // Sort the mapping array and update all the permutations to mask vector.\n    sort(mapping.begin(), mapping.end());\n    for (int i = 0; i < n; i++) {\n        mask[mapping[i][1]] = i + 1;\n    }\n\n    long long answer = 0;\n    for (int i = n - 1; i >= 0; i--) {\n\n        // Calculate the number of elements greater than the current element.\n        answer += fenwickSum(mask[i] - 1, fenwick);\n\n        // Update the element that has been visited.\n        fenwickUpdate(mask[i], n, fenwick);\n    }\n    return answer;\n}",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time Complexity : O(N*log(N))\n    Space Complexity : O(N)\n\n    Where, N is the size of the array.\n*/\n\n#include <vector>\n#include <algorithm>\nvoid fenwickUpdate(int index, int siz, vector<long long> &fenwick)\n{\n    while (index <= siz)\n    {\n        // Update the current element in the fenwick vector.\n        fenwick[index] += 1;\n\n        // Increase the index to the child index in the fenwick tree.\n        index = index + (index & (-index));\n    }\n}\nlong long fenwickSum(int index, vector<long long> &fenwick)\n{\n    long long sum = 0;\n    while (index > 0)\n    {\n\n        // Add the value of current node in sum.\n        sum += fenwick[index];\n\n        // Move to the parent node of the current node.\n        index = index - (index & (-index));\n    }\n    return sum;\n}\n\nlong long getInversions(long long *arr, int n) {\n\n    // Take a 2D vector to store the sorted array and their initial index.\n    vector<vector<int>> mapping(n, vector<int>(2));\n\n    vector<long long> fenwick(n + 1, 0), mask(n);\n\n    for (int i = 0; i < n; i++) {\n        mapping[i][0] = arr[i];\n        mapping[i][1] = i;\n    }\n\n    // Sort the mapping array and update all the permutations to mask vector.\n    sort(mapping.begin(), mapping.end());\n    for (int i = 0; i < n; i++) {\n        mask[mapping[i][1]] = i + 1;\n    }\n\n    long long answer = 0;\n    for (int i = n - 1; i >= 0; i--) {\n\n        // Calculate the number of elements greater than the current element.\n        answer += fenwickSum(mask[i] - 1, fenwick);\n\n        // Update the element that has been visited.\n        fenwickUpdate(mask[i], n, fenwick);\n    }\n    return answer;\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}