{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22962,
            "title": "COUNT ISLANDS",
            "titleSlug": "count-islands_6224728",
            "content": "<h4 id=\"you-are-given-an-empty-2d-binary-grid-of-size-n-x-m-the-grid-represents-a-map-where-0s-represent-water-and-1s-represent-land-initially-all-the-cells-of-the-grid-are-water-cells-i-e-all-the-cells-are-0s\">You are given an empty 2D binary  &#39;GRID&#39; of size \u2018N\u2019 x &#39;M&#39;  The  &#39;GRID&#39; represents a map where 0&#39;s represent water and 1&#39;s represent land. Initially, all the cells of the  &#39;GRID&#39; are water cells (i.e., all the cells are 0&#39;s).</h4>\n\n<h4 id=\"we-may-perform-an-add-land-operation-which-turns-the-water-at-position-into-a-land-you-are-given-an-array-positions-of-size-k-where-positions-i-ri-ci-is-the-position-ri-ci-at-which-we-should-operate-the-ith-operation\">We may perform an add land operation which turns the water at position into a land. You are given an array &#39;POSITIONS&#39; of size \u2018K\u2019 where POSITIONS[i] = [Ri, Ci] is the position (Ri, Ci) at which we should operate the ith operation.</h4>\n\n<h4 id=\"return-an-array-of-integers-answer-where-answer-i-is-the-number-of-islands-after-turning-the-cell-ri-ci-into-a-land\">Return an array of integers answer where \u2018ANSWER[i]\u2019 is the number of islands after turning the cell (\u2018Ri\u2019, \u2018Ci\u2019) into a land.</h4>\n\n<h4 id=\"an-island-is-surrounded-by-water-and-is-formed-by-connecting-adjacent-lands-horizontally-or-vertically-you-may-assume-all-four-edges-of-the-grid-are-all-surrounded-by-water\">An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the  &#39;GRID&#39; are all surrounded by water.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018M\u2019 = 3, &#39;N&#39; = 3, &#39;POSITIONS&#39; = [ [ 0,0 ], [ 0,1 ], [ 1,2 ], [ 2,1 ] ]\n\nOutput: [1, 1, 2, 3]\n\nInitially, the 2d  &#39;GRID&#39; is filled with water.\n- Operation #1: addLand(0, 0) turns the water at  \u2018GRID[0][0]\u2019 into a land. We have 1 island.\n- Operation #2: addLand(0, 1) turns the water at  \u2018GRID[0][1]\u2019 into a land. We still have 1 island.\n- Operation #3: addLand(1, 2) turns the water at  &#39;GRID[1][2]\u2019 into a land. We have 2 islands.\n- Operation #4: addLand(2, 1) turns the water at  &#39;GRID[2][1]\u2019 into a land. We have 3 islands.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains \u2018T\u2019, denoting the number of test cases.    \n\nThe first line of each test case contains two integers, \u2018N\u2019 and \u2018M\u2019, denoting the number of rows and columns in the  &#39;GRID&#39;.\n\nThe second line of each test case contains an integer \u2018K\u2019 denoting the size of \u2018POSITION\u2019 array.\n\nEach of the next \u2018K\u2019 lines contains two space-separated integers denoting the (\u2018Ri\u2019, \u2018Ci\u2019) of \u2018POSITION[i]\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return the array of integers as described in the problem statement.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= M, N, K &lt;= 100\n0 &lt;= Ri&lt; m\n0 &lt;= Ci &lt; n\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1 3\n3\n0 0\n0 1\n0 2\n1 3\n3\n0 0\n0 2\n0 1\n</code></pre>\n\n<p>##### Sample Output 1 :</p>\n\n<pre><code> 1 1 1 \n 1 2 1 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first test case:-\n- Operation #1: addLand(0, 0) turns the water at  \u2018GRID\u2019[0][0] into a land. We have 1 island,  [( 0, 0)].\n- Operation #2: addLand(0, 1) turns the water at  \u2018GRID\u2019[0][1] into a land. We still have 1     island,  [ ( 0, 0) , ( 0, 1 ) ].\n- Operation #3: addLand(0, 2) turns the water at  &#39;GRID&#39;[1][2] into a land. We still have 1 island,  [ ( 0, 0) , ( 0, 1 ), ( 0, 2 ) ].\n\n\nFor the second test case:-\n   - Operation #1: addLand(0, 0) turns the water at  \u2018GRID\u2019[0][0] into a land. We have 1 island, [ ( 0, 0 ) ].\n- Operation #2: addLand(0, 2) turns the water at  \u2018GRID\u2019[0][1] into a land. We still have 2    islands, [ ( 0, 0 ) ] and [ ( 0, 2 ) ].\n- Operation #3: addLand(0, 2) turns the water at  &#39;GRID&#39;[1][2] into a land. We have 1 island,  [ ( 0, 0) , ( 0, 1 ), ( 0, 2 ) ].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 3\n4\n0 0\n0 1\n1 2\n2 1\n4 5\n4\n1 1\n0 1\n3 3\n3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code> 1 1 2 3 \n 1 1 2 2 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -9,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an empty 2D binary grid of size N x M. The grid represents a map where 0s represent water and 1s represent land. Initially, all cells are water (0s).\n\nYou can perform an 'add land' operation to convert water at a specific position into land. Given an array POSITIONS of size K, where POSITIONS[i] = [Ri, Ci] indicates the position to convert to land in the ith operation, return an array of integers ANSWER where ANSWER[i] is the number of islands after the ith operation.\n\nAn island is surrounded by water and formed by connecting adjacent lands horizontally or vertically. Assume all four edges of the grid are surrounded by water.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= M, N, K <= 100",
                    "0 <= Ri < M",
                    "0 <= Ci < N",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "M = 3, N = 3, POSITIONS = [ [ 0,0 ], [ 0,1 ], [ 1,2 ], [ 2,1 ] ]",
                        "output": "[1, 1, 2, 3]",
                        "explanation": "Initially, the grid is filled with water.\n- Operation #1: addLand(0, 0) -> 1 island.\n- Operation #2: addLand(0, 1) -> 1 island.\n- Operation #3: addLand(1, 2) -> 2 islands.\n- Operation #4: addLand(2, 1) -> 3 islands."
                    },
                    {
                        "input": "N = 1, M = 3, K = 3, POSITIONS = [[0, 0], [0, 1], [0, 2]]",
                        "output": "[1, 1, 1]",
                        "explanation": "Row size is 1 and column size is 3, therefore we have 3 positions to fill and each operation adds an adjacent land, there is only one island in each of the operations."
                    },
                    {
                        "input": "N = 1, M = 3, K = 3, POSITIONS = [[0, 0], [0, 2], [0, 1]]",
                        "output": "[1, 2, 1]",
                        "explanation": "Row size is 1 and column size is 3, adding the lands in [[0,0], [0,2], [0,1]] order, \n first operation has one island, \n second operation adds another island as [0,0] and [0,2] are not adjacent,\n third operation joins these two islands into 1 single island."
                    },
                    {
                        "input": "N = 3, M = 3, K = 4, POSITIONS = [[0, 0], [0, 1], [1, 2], [2, 1]]",
                        "output": "[1, 1, 2, 3]",
                        "explanation": "Adding the lands in [[0, 0], [0, 1], [1, 2], [2, 1]] order. Each operation updates the 2D matrix and island count based on number of connected components formed horizontally or vertically."
                    },
                    {
                        "input": "N = 4, M = 5, K = 4, POSITIONS = [[1, 1], [0, 1], [3, 3], [3, 4]]",
                        "output": "[1, 1, 2, 2]",
                        "explanation": "Adding the lands in [[1, 1], [0, 1], [3, 3], [3, 4]] order. Each operation updates the 2D matrix and island count based on number of connected components formed horizontally or vertically."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>you can apply for DFS in the&nbsp; 'GRID' for every element \u2018POSITION\u2019.</p>",
            "<p><strong>&nbsp;</strong>Can you think of a way to optimize the previous approach with the help of the union-find algorithm?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}