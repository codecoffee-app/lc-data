{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8563,
            "title": "Count Leaf Nodes",
            "titleSlug": "count-leaf-nodes_893055",
            "content": "<h4 id=\"you-are-given-a-binary-tree-you-have-to-count-and-return-the-number-of-leaf-nodes-present-in-it\">You are given a Binary tree. You have to count and return the number of leaf nodes present in it.</h4>\n\n<h4 id=\"a-binary-tree-is-a-tree-data-structure-in-which-each-node-has-at-most-two-children-which-are-referred-to-as-the-left-child-and-the-right-child\">A binary tree is a tree data structure in which each node has at most two children, which are referred to as the left child and the right child</h4>\n\n<h4 id=\"a-node-is-a-leaf-node-if-both-left-and-right-child-nodes-of-it-are-null\">A node is a leaf node if both left and right child nodes of it are NULL.</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of the test case. Then the test case follows.\n\nThe first line of each test case contains elements of the binary tree in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/first-5644.png\" alt=\"example\"></p>\n\n<pre><code>20\n10 35 \n5 15 30 42 \n-1 13 -1 -1 -1 -1 -1 \n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 20\n\nLevel 2 :\nLeft child of 20 = 10\nRight child of 20 = 35\n\nLevel 3 :\nLeft child of 10 = 5\nRight child of 10 = 15\nLeft child of 35 = 30\nRight child of 35 = 42\n\nLevel 4 :\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 15 = 13\nRight child of 15 = null (-1)\nLeft child of 30 = null (-1)\nRight child of 30 = null (-1)\nLeft child of 42 = null (-1)\nRight child of 42 = null (-1)\n\nLevel 5 :\nLeft child of 13 = null (-1)\nRight child of 13 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n\nNote: Here in this tree nodes 20, 10, 35, 15 are internal nodes as these Nodes have AT LEAST ONE CHILD NODE. While nodes 5, 30, 42, 13 are leaf nodes because they have NO CHILD NODES\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n20 10 35 5 15 30 42 -1 13 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nFor each test case, you will be given a reference to the root node.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, return the number of leaf nodes present in the binary tree.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;=10^3\n1 &lt;= data &lt;= 10^9\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n1 -1 -1\n1  2  3  -1 -1 -1 4 -1 -1\n1  2 -1 -1 3 -1 4 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n2\n1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>(i) 1 is the only node present in the tree, and hence it is the only leaf node.\n(ii) 2 and 4 are two leaf nodes present in the tree; all other nodes have at least one child (1 has 2 and 3 and 3 has 4).\n(iii) 4 is the only leaf node present in the tree as all other nodes have at least one child node (1 has 2, 2 has 3 and 3 has 4)\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n1 -1 2 -1 3 -1 -1\n1 2 -1 3 4 5 6 7 8 -1 - 1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4\n1\n4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>(i) 4, 5, 6 and 7 are 4 leaf nodes present in the tree, all other nodes have at least one child (1 has 2 and 3, 2 has 4 and 5 and 3 has 6 and 7).\n(ii) 3 is the only leaf node present in the tree as all other nodes have at least one child node (1 has 2 and 2 has 3)\n(iii) 5, 6, 7 and 8 are 4 leaf nodes present in the tree, all other nodes have at least one child (1 has 2, 2 has 3 and 4, 3 has 5 and 6 and 4 has 7 and 8).\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 83,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, determine and return the number of leaf nodes present within it. A binary tree is a hierarchical data structure where each node has at most two children: a left child and a right child. A node is considered a leaf node if both its left and right children are null (empty). The input is provided in level order format, where -1 represents a null node.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 1000",
                    "1 <= data <= 10^9",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 -1 -1",
                        "output": "1",
                        "explanation": "The tree consists of only the root node '1', which is a leaf node since it has no children."
                    },
                    {
                        "input": "1 2 3 -1 -1 -1 4 -1 -1",
                        "output": "2",
                        "explanation": "The leaf nodes are '2' and '4'. Node '1' has children '2' and '3', and '3' has child '4'."
                    },
                    {
                        "input": "1 2 -1 -1 3 -1 4 -1 -1",
                        "output": "1",
                        "explanation": "The leaf node is '4'. Node '1' has child '2', node '2' has child '3', and '3' has child '4'."
                    },
                    {
                        "input": "1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "4",
                        "explanation": "The leaf nodes are '4', '5', '6', and '7'."
                    },
                    {
                        "input": "1 -1 2 -1 3 -1 -1",
                        "output": "1",
                        "explanation": "The leaf node is '3'."
                    },
                    {
                        "input": "1 2 -1 3 4 5 6 7 8 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "4",
                        "explanation": "The leaf nodes are '5', '6', '7', and '8'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try thinking of how you can use recursion to traverse through the binary tree and find leaf nodes.</p>",
            "<p>Try to Iterate through all tree nodes and find which of them is a leaf node</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}