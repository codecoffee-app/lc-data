{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11194,
            "title": "count of range sum",
            "titleSlug": "count-of-range-sum_1380912",
            "content": "<h4 id=\"you-are-given-an-array-nums-of-size-n-and-two-numbers-l-r-your-task-is-to-return-the-number-of-range-sum-that-lies-between-l-and-r-both-inclusive-where-l-r\">You are given an array \u201cNums\u201d of size \u2018N\u2019 and two numbers \u2018L,\u2019 \u2018R.\u2019 Your task is to return the number of range sum that lies between L and R, both inclusive, where L&lt;=R.</h4>\n\n<h4 id=\"range-sum-r-i-j-represents-the-sum-of-numbers-between-the-index-i-to-j-in-nums-where-i-j\">Range sum R(i,j) represents the sum of numbers between the index i to j in Nums. where i &lt;= j.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Let nums = [1, 2, 3], L = 2, R = 7\n\nThen the possible ranges are [1,1],[2,2],[0,1],[1,2],[0,2], and their sum is 2,3,3,5,6 respectively. Hence the answer will be 5.\n</code></pre>\n\n<h4 id=\"note-assume-zero-based-indexing\">Note: Assume zero based indexing.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first line of each test case contains an integer N.\nThe second line of each test case contains N space-separated integers denoting the elements of the array.\nThe third line of each test case contains two space-separated integers L and R.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return an integer representing the number of range sum.\n\nOutput for each query is printed in a separate line.\n\nNote: You don\u2019t need to print anything or take input. This already has been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 \n1 &lt;= N &lt;= 10^4\n-2^31 &lt;= Nums[i] &lt;= 2^31-1\n-3*10^4 &lt;= L &lt;= R &lt;= 3*10^4\n\nwhere T is the number of test cases, &#39;N&#39; is the number of elements in the array, Num[i] is the elements of the array num, and &#39;L&#39; and &#39;R&#39; are the given range. \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3\n-2 5 -1\n-2 2\n1\n0\n0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>3\n1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Test case 1\nIn this case the possible range sum are [0, 0], [2, 2], [0, 2] and their sums are -2, -1, 2 respectively. So the answer would be 3.\n\nTest case 2\nIn this case, the possible range sum is [0, 0] whose sum is 0. Hence the answer would be 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4\n1 -2 4 6\n-3 2\n1\n3\n4 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>4\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `nums` of size `N`, and two integers `L` and `R`, determine the number of range sums that fall within the inclusive range `[L, R]`. A range sum R(i, j) is defined as the sum of elements in `nums` from index `i` to `j` (inclusive), where `0 <= i <= j < N`.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^4",
                    "-2^31 <= Nums[i] <= 2^31-1",
                    "-3*10^4 <= L <= R <= 3*10^4"
                ],
                "testcases": [
                    {
                        "input": "N = 3, nums = [-2, 5, -1], L = -2, R = 2",
                        "output": "3",
                        "explanation": "Possible range sums are [-2], [5], [-1], [-2 + 5 = 3], [5 + -1 = 4], [-2 + 5 + -1 = 2].  The range sums within [-2, 2] are -2, -1, 2. Hence the count is 3."
                    },
                    {
                        "input": "N = 1, nums = [0], L = 0, R = 0",
                        "output": "1",
                        "explanation": "The only range sum is [0], which is 0. It falls within [0, 0], so the count is 1."
                    },
                    {
                        "input": "N = 4, nums = [1, -2, 4, 6], L = -3, R = 2",
                        "output": "4",
                        "explanation": "Range sums are [1], [-2], [4], [6], [1 + -2 = -1], [-2 + 4 = 2], [4 + 6 = 10], [1 + -2 + 4 = 3], [-2 + 4 + 6 = 8], [1 + -2 + 4 + 6 = 9]. The range sums within [-3, 2] are 1, -2, -1, 2. Hence the count is 4."
                    },
                    {
                        "input": "N = 1, nums = [3], L = 4, R = 5",
                        "output": "0",
                        "explanation": "The only possible range sum is 3, which is not within the range [4, 5], so the count is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>check every possible range</p>",
            "<p>Think of doing this using merge sort.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}