{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9508,
            "title": "Count of smaller people on right side",
            "titleSlug": "count-of-smaller-people-on-right-side_1062586",
            "content": "<h4 id=\"you-are-given-the-height-of-n-people-standing-in-a-queue-in-an-array-height-for-each-person-you-need-to-calculate-the-number-of-people-on-the-right-side-of-the-given-person-who-is-smaller-in-height\">You are given the height of N people standing in a queue in an array &#39;HEIGHT&#39;. For each person, you need to calculate the number of people on the right side of the given person who is smaller in height.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>For N = 4 and height[] = [6, 3, 7, 2]\n\nFor the first person with a height of 6, the people on the right side with a height smaller than 6 are the 2nd and 4th person. So for the first person, the count is 2.\n\nFor the second person with height 3, the person on the right side with a height smaller than 3 is the 4th person. So for the second person, the count is 1.\n\nFor the third person with a height of 7, the person on the right side with a height smaller than 7 is the 4th person. So for the third person, the count is 1.\n\nFor the last person, the count is 0 as there are no people left on the right-hand side. So for the last person, the count is 0.\n\nSo the Count[] is [2, 1, 0, 0].\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; denoting the number of test cases or queries to be run. \n\nThe first line of each test case or query contains a single integers &#39;N&#39; denoting the number of people. \n\nThe second line of each test case contains N single space-separated integers denoting heights of N people respectively.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing N single space-separated integers denoting the count of people on the right-hand side with a height smaller than the given person.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10 ^ 5\n0 &lt;= HEIGHT[i] &lt;= 10 ^ 9\n\nWhere &#39;T&#39; is the number of test cases, &#39;N&#39; is the length of the array and &#39;HEIGHT[i]&#39; is the height of a person at index i.  \n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\n6 3 7 2\n3\n5 3 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 1 1 0\n2 0 0\n</code></pre>\n\n<h5 id=\"explanation-for-input-1\">Explanation for Input 1:</h5>\n\n<pre><code>For test case 1: Refer the above explanation\n\nFor test case 2: \nFor the first person with height 5, the people on the right side with a height smaller than 5 are 2nd and 3rd. So for the first person, the count is 2.\nFor the second person with height 3, there are no people with a height smaller than 3. So for the second person, the count is 0.\nFor the last person, the count is 0 as there are no people left on the right hand side. So for the last person, the count is 0.\nSo the Count[] is [2, 1, 0, 0].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n5 4 3 2 1\n3\n1 2 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4 3 2 1 0\n0 0 0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'height' representing the heights of N people standing in a queue, determine for each person, the number of people to their right who are shorter than them.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10 ^ 5",
                    "0 <= HEIGHT[i] <= 10 ^ 9"
                ],
                "testcases": [
                    {
                        "input": "height=[6, 3, 7, 2]",
                        "output": "2 1 1 0",
                        "explanation": "For height 6, 3 and 2 are smaller (count 2). For height 3, only 2 is smaller (count 1). For height 7, only 2 is smaller (count 1). For height 2, no one is smaller (count 0)."
                    },
                    {
                        "input": "height=[5, 3, 3]",
                        "output": "2 0 0",
                        "explanation": "For height 5, 3 and 3 are smaller (count 2). For height 3, no one is smaller (count 0). For height 3, no one is smaller (count 0)."
                    },
                    {
                        "input": "height=[5, 4, 3, 2, 1]",
                        "output": "4 3 2 1 0",
                        "explanation": "Each element has all subsequent elements smaller than it. Therefore the counts are 4, 3, 2, 1, and 0 respectively."
                    },
                    {
                        "input": "height=[1, 2, 3]",
                        "output": "0 0 0",
                        "explanation": "Each element is smaller than or equal to all subsequent elements.  Therefore the counts are all 0."
                    },
                    {
                        "input": "height=[10, 5, 20, 15, 1]",
                        "output": "3 1 1 0 0",
                        "explanation": "For 10, 5, 15, and 1 are smaller. Count =3. For 5, 1 is smaller. Count=1. For 20, 15 and 1 are smaller. count = 2. For 15, 1 is smaller. count =1. For 1, no element is smaller. Count = 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The very first approach is to count for each person independently using a for loop.</p>",
            "<p>An efficient way to solve the problem is to use merge sort.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}