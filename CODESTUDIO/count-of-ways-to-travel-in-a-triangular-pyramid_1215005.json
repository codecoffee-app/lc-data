{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10425,
            "title": "Count of ways to travel in a Triangular Pyramid",
            "titleSlug": "count-of-ways-to-travel-in-a-triangular-pyramid_1215005",
            "content": "<h4 id=\"bob-has-been-given-a-triangular-pyramid-with-its-vertices-marked-as-o-x-y-and-z-and-provided-with-another-integer-n-in-a-single-step-bob-can-go-to-any-adjacent-vertices-bob-will-always-start-from-o-and-has-to-return-to-o-after-making-exactly-n-steps\">Bob has been given a triangular pyramid with its vertices marked as \u2018O\u2019, \u2018X\u2019, \u2018Y\u2019 and \u2018Z\u2019 and provided with another integer \u2018N\u2019. In a single step, Bob can go to any adjacent vertices. Bob will always start from \u2018O\u2019 and has to return to \u2018O\u2019 after making exactly \u2018N\u2019 steps.</h4>\n\n<p><img src=\"https://files.codingninjas.in/traingular_pyramid-8207.png\" alt=\"Example\"></p>\n\n<h4 id=\"your-task-is-to-find-out-the-number-of-ways-he-can-take-to-complete-his-journey\">Your task is to find out the number of ways he can take to complete his journey.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>As the answer can be very large, return the answer by taking modulo with 1000000007.\n</code></pre>\n\n<h4 id=\"for-example\">For example :</h4>\n\n<pre><code>If \u2018N\u2019=1 \nSo in 1 step we can reach either to \u2018X\u2019 , \u2018Y\u2019 or \u2018Z\u2019 and can not travel back to \u2018O\u2019.\nThus there are 0 ways.\n\nIf \u2018N\u2019 =2\nSo there are total three ways :\n(i)  O-&gt;X-&gt;O\n(ii) O-&gt;Y-&gt;O\n(iii) O-&gt;Z-&gt;O\n\nIf \u2018N\u2019 = 3\nSo there are total 6 ways :\n(i) O-&gt;X-&gt;Y-&gt;O\n(ii) O-&gt;X-&gt;Z-&gt;O\n(iii) O-&gt;Y-&gt;X-&gt;O\n(iv) O-&gt;Y-&gt;Z-&gt;O\n(v) O-&gt;Z-&gt;X-&gt;O\n(vi) O-&gt;Z-&gt;Y-&gt;O\n</code></pre>\n\n<h4 id=\"input-format\">Input format :</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of steps.\n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>For each test case, print a single integer denoting the number of ways.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10000\n\nWhere \u2018T\u2019 is the total number of test cases, and &#39;N\u2019 is the number of steps you can make.\n\nTime Limit: 1 sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n1\n2\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>0\n3 \n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>For the first test case:\nThere is no way we can start from \u2018O\u2019 and end up at \u2018O\u2019 because we will be either on \u2018X\u2019, \u2019Y\u2019 or \u2018Z\u2019. Hence 0 ways.    \n\nFor the second test case:\nThe possible ways are from \u2018O\u2019 we go to \u2018X\u2019 then back to \u2018O\u2019. Similarly for \u2018Y\u2019 and \u2018Z\u2019. Hence 3 ways.   \n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n3\n4    \n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>6\n21\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a triangular pyramid with vertices labeled 'O', 'X', 'Y', and 'Z', and an integer 'n', determine the number of ways to start at vertex 'O', take exactly 'n' steps, and return to vertex 'O'. In each step, you can move to any adjacent vertex.  The edges of the pyramid connect 'O' to 'X', 'O' to 'Y', 'O' to 'Z', 'X' to 'Y', 'X' to 'Z', and 'Y' to 'Z'. Return the answer modulo 1000000007.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10000",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "n = 1",
                        "output": "0",
                        "explanation": "In 1 step, we can reach either 'X', 'Y', or 'Z', and cannot return to 'O'. Thus, there are 0 ways."
                    },
                    {
                        "input": "n = 2",
                        "output": "3",
                        "explanation": "There are three possible ways: O->X->O, O->Y->O, and O->Z->O."
                    },
                    {
                        "input": "n = 3",
                        "output": "6",
                        "explanation": "There are six possible ways: O->X->Y->O, O->X->Z->O, O->Y->X->O, O->Y->Z->O, O->Z->X->O, and O->Z->Y->O."
                    },
                    {
                        "input": "n = 4",
                        "output": "21",
                        "explanation": "For n=4, the possible paths are more numerous, leading to a total of 21 possible paths that start and end at 'O'."
                    },
                    {
                        "input": "n = 5",
                        "output": "60",
                        "explanation": "For n=5, there are 60 different paths from O to O."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>&nbsp;</strong>Can you think about a recursion solution?</p>",
            "<p>Can we avoid the overlapping subproblems?</p>",
            "<p>Can you do the same problem iteratively?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}