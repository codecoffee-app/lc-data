{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16323,
            "title": "Count Palindromic Subsequences - II ",
            "titleSlug": "count-palindromic-subsequences-ii_3125886",
            "content": "<h4 id=\"you-have-been-given-a-string-s-your-task-is-to-find-the-number-of-non-empty-distinct-palindromic-subsequences-in-string-s-and-return-that-number-modulo-10-9-7\">You have been given a string \u2018S\u2019. Your task is to find the number of non-empty distinct palindromic subsequences in string \u2018S\u2019 and return that number modulo 10^9 + 7.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. A string \u2018A\u2019 is a subsequence of a string \u2018B\u2019 if \u2018A\u2019 can be obtained from \u2018B\u2019 by deleting several (possibly, zero or all) characters. \n2. A sequence is palindromic if it is equal to the sequence reversed.\n3. Two sequences A1, A2,... and B1, B2,... are different if there is some \u2018i\u2019 for which \u2018Ai\u2019 != \u2018Bi\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T\u2019, denoting the number of test cases.\n\nThe first line of each test case contains a string \u2018S\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the number of non-empty distinct palindromic subsequences modulo 10^9 + 7.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= |S| &lt;= 3*10^3\n\nWhere |S| denotes the length of \u2018S\u2019.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\nabc\npppp\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>3\n4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<pre><code>For the first test case, distinct palindromic subsequences are \u201ca\u201d, \u201cb\u201d, and \u201cc\u201d.\n\nFor the second test case, distinct palindromic subsequences are \u201cp\u201d, \u201cpp\u201d, \u201cppp\u201d, \u201cpppp\u201d.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\naba\npqqr\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>4\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S', determine the number of distinct non-empty palindromic subsequences within 'S'. Return this count modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |S| <= 3*10^3",
                    "Where |S| denotes the length of \u2018S\u2019."
                ],
                "testcases": [
                    {
                        "input": "s = \"abc\"",
                        "output": "3",
                        "explanation": "The distinct palindromic subsequences are \"a\", \"b\", and \"c\"."
                    },
                    {
                        "input": "s = \"pppp\"",
                        "output": "4",
                        "explanation": "The distinct palindromic subsequences are \"p\", \"pp\", \"ppp\", \"pppp\"."
                    },
                    {
                        "input": "s = \"aba\"",
                        "output": "4",
                        "explanation": ""
                    },
                    {
                        "input": "s = \"pqqr\"",
                        "output": "4",
                        "explanation": ""
                    },
                    {
                        "input": "s = \"aab\"",
                        "output": "4",
                        "explanation": ""
                    },
                    {
                        "input": "s = \"bccb\"",
                        "output": "7",
                        "explanation": ""
                    },
                    {
                        "input": "s = \"abcdabcdabcd\"",
                        "output": "4",
                        "explanation": ""
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check for every possible subsequence present in the string.&nbsp;</p>",
            "<p>Can you optimize your recursive solution using some extra space?</p>",
            "<p>Can you think of doing it iteratively to avoid stack size problems?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}