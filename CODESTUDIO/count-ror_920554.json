{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8948,
            "title": "Count ROR",
            "titleSlug": "count-ror_920554",
            "content": "<h4 id=\"you-are-given-a-string-s-containing-all-capital-letters-from-a-z-your-task-is-to-count-the-number-of-times-the-ror-occurs-as-a-subsequence-in-the-string-s\">You are given a string \u2018S\u2019, containing all capital letters from \u2018A\u2019 - \u2018Z\u2019. Your task is to count the number of times the \u201cROR\u201d occurs as a subsequence in the string \u2018S\u2019.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Since the answer can be very large print the answer modulo 10 ^ 9 + 7.\n</code></pre>\n\n<h4 id=\"for-example\">For example</h4>\n\n<pre><code>Given:\n\u2018S\u2019 = OORROR.\nThe answer will be two since 2 \u201cROR\u201d can be formed from the index (2,4,5), and (3,4,5) (0-based indexing).\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe next \u2018T\u2019 line contains a string \u2018S,\u2019 containing capital letters.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, You are supposed to return an integer that denotes the total number of times \u201cROR\u201d occurs as a subsequence.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= \u2018N\u2019 &lt;= 10^4\n\nTime Limit: 1sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\nOORROR\nOOROR\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>2\n1  \n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>In the first test case, The answer will be 2, since 2 \u201cROR\u201d can be formed from the index (2,4,5), and (3,4,5) (0-based indexing).\n\nIn the second test case, The answer will be 1, since 1 \u201cROR\u201d can be formed from the index (2,3,4) (0-based indexing).\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\nROOROO\nRRROO\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>2\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string \u2018S\u2019 consisting of uppercase letters (A-Z), determine the number of times the subsequence \u201cROR\u201d appears in \u2018S\u2019. Since the answer can be very large, return the result modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^4, where N is the length of the string S",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "OORROR",
                        "output": "2",
                        "explanation": "The subsequence 'ROR' appears twice: at indices (2,4,5) and (3,4,5) (0-based indexing)."
                    },
                    {
                        "input": "OOROR",
                        "output": "1",
                        "explanation": "The subsequence 'ROR' appears once: at indices (2,3,4) (0-based indexing)."
                    },
                    {
                        "input": "ROOROO",
                        "output": "2",
                        "explanation": "The subsequence 'ROR' appears twice"
                    },
                    {
                        "input": "RRROO",
                        "output": "0",
                        "explanation": "The subsequence 'ROR' does not appear in the string."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we naively match the strings?</p><p>&nbsp;</p>",
            "<p>Can we speed up the string matching?</p>",
            "<p>Can we speed up the string matching in constant space?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}