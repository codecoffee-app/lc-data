{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7290,
            "title": "Count Special Nodes in Generic Tree",
            "titleSlug": "count-special-nodes-in-generic-tree_630522",
            "content": "<h4 id=\"you-have-been-given-a-generic-tree-of-integers-the-task-is-to-count-the-number-of-special-nodes\">You have been given a Generic Tree of Integers. The task is to count the number of &#39;Special Nodes&#39;.</h4>\n\n<h4 id=\"a-node-is-a-special-node-if-there-is-a-path-from-the-root-to-that-node-with-all-distinct-elements\">A Node is a Special Node if there is a path from the root to that Node with all distinct elements.</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first and only line of each test case or query contains Elements in level order form separated by space (as per done in class). Order is - \nRoot_data, n (No_Of_Child_Of_Root), n children, and so on for every element\n\nElements are in the level order form and on a level from left to right.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2\n2 3\n1\n4\n2\n5 6\n1\n7\n0\n0\n0\n\nExplanation :\n\nLevel 1 :\nThe root node of the tree has value 1 hence the first value. Now, on the second line, we have 2 which means root has 2 children. The values of the two children are 2 and 3 which is given on the third line.\n\nLevel 2 :\nNow, in the level order traversal, we visit the data node 2 and see the number of children it has, which is given on the fourth line followed by the value(s) of its child/children. Here, data node 2 has only 1 child and hence the value mentioned on the fifth line is 4.\n\nNext node in the level order traversal is the data node 3. It has 2 children as given on the 6th line. After that, on the 7th line, we have the values of its children which are 5 and 6.\n\nLevel 3 :\nThe first node on level three is 4 and it has 1 child as mentioned on the eighth line. On the ninth line, we have the value of the child as 7.\nThe second node is 5 which has 0 or no children and has been mentioned on the tenth line.\nThe third node is 6 which has 0 or no children and has been mentioned on the eleventh line.\n\nLevel 4 :\nThere is only 1 node at level 4 which is 7 and has 0 children or no children as mentioned on the twelfth line. \n\nAs every node has 0 children now the input ends.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 2 3 1 4 2 5 6 1 7 0 0 0\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case/query, print the number of Special Nodes present in the given Generic Tree.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the output explicitly, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n1 &lt;= N &lt;= 3000\n0 &lt;= Value of Tree Node &lt;= 10^9\n\nTime Limit: 1sec\n\nWhere &#39;T&#39; is the number of Test Cases and &#39;N&#39; is the number of nodes in Generic Tree.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n10 3 20 30 10 2 50 10 0 0 0 0\n5 3 5 5 4 0 0 2 1 5 0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>4\n3\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">\u00a0Explanation to Sample Input 1 :</h5>\n\n<pre><code>For Test Case 1:\nWe have 4 Special Nodes:\n10 Path: 10\n20 Path: 10 -&gt; 20\n30 Path: 10 -&gt; 30\n50 Path: 10 -&gt; 20 -&gt; 50\n\nFor Test Case 2:\nWe have 3 Special Nodes:\n5 Path: 5\n4 Path: 5 -&gt; 4\n1 Path: 5 -&gt; 4 -&gt; 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a generic tree of integers, count the number of 'Special Nodes'. A node is considered 'Special' if the path from the root to that node contains only distinct elements.",
                "constraints": [
                    "1 <= T <= 100 (Number of Test Cases)",
                    "1 <= N <= 3000 (Number of Nodes in the Tree)",
                    "0 <= Value of Tree Node <= 10^9",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "10 3 20 30 10 2 50 10 0 0 0 0",
                        "output": "4",
                        "explanation": "There are 4 special nodes: 10 (path: 10), 20 (path: 10 -> 20), 30 (path: 10 -> 30), and 50 (path: 10 -> 20 -> 50).  Each of these paths contains only distinct elements."
                    },
                    {
                        "input": "5 3 5 5 4 0 0 2 1 5 0 0",
                        "output": "3",
                        "explanation": "There are 3 special nodes: 5 (path: 5), 4 (path: 5 -> 4), and 1 (path: 5 -> 4 -> 1). Each of these paths contains only distinct elements."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to traverse each node from the root of the tree maintaining some data structure for checking distinct elements.</p>",
            "<p>Can you think of a better Data Structure for storing Distinct Elements to speed up the operation or insert and find?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}