{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10001,
            "title": "Count subarrays with Given XOR",
            "titleSlug": "count-subarrays-with-given-xor_1115652",
            "content": "<h4 id=\"given-an-array-of-integers-arr-and-an-integer-x-you-are-supposed-to-find-the-number-of-subarrays-of-arr-which-have-bitwise-xor-of-the-elements-equal-to-x\">Given an array of integers \u2018ARR\u2019 and an integer \u2018X\u2019, you are supposed to find the number of subarrays of &#39;ARR&#39; which have bitwise XOR of the elements equal to &#39;X&#39;.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>An array \u2018B\u2019 is a subarray of an array \u2018A\u2019 if \u2018B\u2019 that can be obtained by deletion of, several elements(possibly none) from the start of \u2018A\u2019 and several elements(possibly none) from the end of \u2018A\u2019. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. The test cases follow.\n\nThe first line of each test case contains two integers \u2018N\u2019 and \u2018X\u2019 separated by a single space, denoting the number of elements in the array and the required subarray XOR respectively.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers denoting the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print on a new line the number of subarrays of the given array that have bitwise XOR of the elements equal to \u2018X\u2019.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n3 &lt;= N &lt;= 5 * 10 ^ 4\n0 &lt;= X &lt;= 10 ^ 9\n0 &lt;= ARR[i] &lt;= 10 ^ 9\n\nWhere \u2018T\u2019 denotes the number of test cases, \u2018N\u2019 denotes the number of elements in the array, \u2018X\u2019 denotes the required subarray XOR and ARR[i] denotes the &#39;i-th&#39; element of the given array.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5 8\n5 3 8 3 10\n3 7\n5 2 9\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>In the first test case, the subarray from index 1 to index 3 i.e. {3,8,3} and the subarray from index 2 to index 2 i.e. {8} have bitwise XOR equal to 8.\n\nIn the second test case, the subarray from index 0 to index 1 i.e. {5,2} has bitwise XOR equal to 7.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n6 11\n10 1 0 3 4 7\n5 4\n4 3 1 2 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>3\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 105,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `ARR` and an integer `X`, determine the number of subarrays of `ARR` whose elements have a bitwise XOR equal to `X`.",
                "constraints": [
                    "1 <= T <= 10",
                    "3 <= N <= 5 * 10^4",
                    "0 <= X <= 10^9",
                    "0 <= ARR[i] <= 10^9",
                    "Where \u2018T\u2019 denotes the number of test cases, \u2018N\u2019 denotes the number of elements in the array, \u2018X\u2019 denotes the required subarray XOR and ARR[i] denotes the 'i-th' element of the given array.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 8\n5 3 8 3 10\n3 7\n5 2 9",
                        "output": "2\n1",
                        "explanation": "In the first test case, the subarray {3, 8, 3} (from index 1 to 3) and the subarray {8} (from index 2 to 2) have a bitwise XOR equal to 8.\nIn the second test case, the subarray {5, 2} (from index 0 to 1) has a bitwise XOR equal to 7."
                    },
                    {
                        "input": "6 11\n10 1 0 3 4 7\n5 4\n4 3 1 2 4",
                        "output": "3\n4",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to solve the problem by travering through each subarray.</p>",
            "<p>Can you think of using a HashMap for storing prefix XORs?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space Complexity : O(N)\r\n    \r\n    Where 'N' denotes the number of elements in the given array.\r\n*/\r\n\r\n#include <unordered_map>\r\n\r\nint subarraysXor(vector<int> &arr, int x)\r\n{\r\n    int n = arr.size();\r\n\r\n    //    To store the prefix XOR's.\r\n    unordered_map<int, int> prefXor;\r\n\r\n    int ans = 0;\r\n\r\n    //    To keep track of the current xor.\r\n    int currXor = 0;\r\n\r\n    //    Intialy Xor is 0.\r\n    prefXor[0]++;\r\n\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        //    Update the Xor of the current prefix.\r\n        currXor = currXor ^ arr[i];\r\n\r\n        //    Required value of the prefix Xor to make the xor of the subarray ending at the current index equal to X.\r\n        int req = x ^ currXor;\r\n\r\n        //    Add the count of prefix arrays with required xor.\r\n        ans += prefXor[req];\r\n\r\n        prefXor[currXor]++;\r\n    }\r\n\r\n    return ans;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity : O(N)\r\n    Space Complexity : O(N)\r\n    \r\n    Where 'N' denotes the number of elements in the given array.\r\n'''\r\n\r\ndef subarraysXor(arr, x):\r\n\r\n    n = len(arr)\r\n\r\n    # To store the prefix XOR's.\r\n    prefXor = {}\r\n\r\n    ans = 0\r\n\r\n    # To keep track of the current xor.\r\n    currXor = 0\r\n\r\n    # Intialy Xor is 0.\r\n    prefXor[0] = 1\r\n\r\n    for i in range(n):\r\n\r\n        # Update the Xor of the current prefix.\r\n        currXor = currXor ^ arr[i]\r\n\r\n        # Required value of the prefix Xor to make the xor of the subarray equal to X.\r\n        req = x ^ currXor\r\n\r\n        if( req in prefXor):\r\n\r\n            # Add the count of prefix arrays with required xor.\r\n            ans += prefXor[req]\r\n\r\n        if(currXor in prefXor):        \r\n            prefXor[currXor] = prefXor[currXor] + 1\r\n        \r\n        else: \r\n            prefXor[currXor] = 1\r\n\r\n    return ans",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(N)\n    \n    Where 'N' denotes the number of elements in the given array.\n*/\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\npublic class Solution {\n\tpublic static int subarraysXor(ArrayList<Integer> arr, int x) {\n\t\tint n = arr.size();\n\n\t\t// To store the prefix XOR's.\n\t\tHashMap<Integer, Integer> prefXor = new HashMap<Integer, Integer>();\n\n\t\tint ans = 0;\n\n\t\t// To keep track of the current xor.\n\t\tint currXor = 0;\n\n\t\t// Intialy Xor is 0.\n\t\tprefXor.put(0, 1);\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\t// Update the Xor of the current prefix.\n\t\t\tcurrXor = currXor ^ arr.get(i).intValue();\n\n\t\t\t// Required value of the prefix Xor to make the xor of the subarray ending at\n\t\t\t// the current index equal to X.\n\t\t\tint req = x ^ currXor;\n\n\t\t\t// Add the count of prefix arrays with required xor.\n\t\t\tif (prefXor.containsKey(req)) {\n\t\t\t\tans += prefXor.get(req);\n\t\t\t}\n\n\t\t\tif (prefXor.containsKey(currXor)) {\n\t\t\t\tprefXor.put(currXor, prefXor.get(currXor) + 1);\n\t\t\t} else {\n\t\t\t\tprefXor.put(currXor, 1);\n\t\t\t}\n\t\t}\n\n\t\treturn ans;\n\t}\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}