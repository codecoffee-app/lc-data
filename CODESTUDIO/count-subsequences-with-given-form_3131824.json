{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16399,
            "title": "Count Subsequences With Given Form",
            "titleSlug": "count-subsequences-with-given-form_3131824",
            "content": "<h4 id=\"you-are-given-a-string-s-your-task-is-to-find-the-number-of-subsequences-in-string-s-which-are-in-the-form-of-a-p-b-q-c-r-i-e-it-consists-of-p-a-characters-followed-by-q-b-characters-and-r-c-characters-where-p-q-and-r-are-greater-than-equal-to-1-as-the-result-can-be-large-return-that-number-modulo-10-9-7\">You are given a string \u2018S\u2019. Your task is to find the number of subsequences in string \u2018S\u2019 which are in the form of \u201ca^p + b^q + c^r\u201d, i.e., it consists of \u2018p\u2019 \u201ca\u201d characters, followed by \u2018q\u2019 \u201cb\u201d characters, and \u2018r\u2019 \u201cc\u201d characters, where \u2018p\u2019, \u2018q\u2019, and \u2018r\u2019 are greater than equal to 1. As the result can be large, return that number modulo 10^9 + 7.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1. A string \u2018A\u2019 is a subsequence of a string \u2018B\u2019 if \u2018A\u2019 can be obtained from \u2018B\u2019 by deleting several (possibly, zero or all) characters. \n2. Two subsequences are considered different if the set of array indexes picked for the 2 subsequences are different.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Let the string be: ababc\nThe subsequence which can be of form \u201ca^p * b^q * c^r\u201d are: \u201cabc\u201d (p = 1, q = 1, r = 1), \u201cabbc\u201d (p = 1, q = 2, r = 1), \u201caabc\u201d (p = 2, q = 1, r = 1)\nSo the count is 5 (\u201cabc\u201d can occur thrice).\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T\u2019, denoting the number of test cases.\n\nThe first line of each test case contains a string \u2018S\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the number of non-empty distinct palindromic subsequences modulo 10^9 + 7.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= |S| &lt;= 10^5\n\nS consists of \u2018a\u2019, \u2018b\u2019, and \u2018c\u2019 characters only.\nWhere |S| denotes the length of \u2018S\u2019.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\nabc\nababc\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>1\n5\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<pre><code>For the first test case:\nThe subsequence which can be of form \u201ca^p * b^q * c^r\u201d are: \u201cabc\u201d (p = 1, q = 1, r = 1).\nSo the count is 1.\n\n\nFor the second test case:\nThe subsequence which can be of form \u201ca^p * b^q * c^r\u201d are: \u201cabc\u201d (p = 1, q = 1, r = 1), \u201cabbc\u201d (p = 1, q = 2, r = 1), \u201caabc\u201d (p = 2, q = 1, r = 1)\nSo the count is 5 (\u201cabc\u201d can occur thrice).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\nabbabc\nacba\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>9\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S' consisting of characters 'a', 'b', and 'c', determine the number of subsequences that adhere to the pattern 'a^p b^q c^r', where 'p', 'q', and 'r' are all greater than or equal to 1. In other words, the subsequence must have at least one 'a', followed by at least one 'b', and then at least one 'c'. Return the count of such subsequences modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |S| <= 10^5",
                    "S consists of 'a', 'b', and 'c' characters only."
                ],
                "testcases": [
                    {
                        "input": "s = \"abc\"",
                        "output": "1",
                        "explanation": "The only subsequence of the form a^p b^q c^r is \"abc\" (p=1, q=1, r=1)."
                    },
                    {
                        "input": "s = \"ababc\"",
                        "output": "5",
                        "explanation": "The subsequences of the form a^p b^q c^r are: \"abc\", \"abbc\", \"aabc\", and \"abc\" occurring twice more for a total of 5."
                    },
                    {
                        "input": "s = \"abbabc\"",
                        "output": "9",
                        "explanation": "The subsequences are: abc, abbc, abbbc, aabc, ababc, abbc, ababc, abbabc, abc."
                    },
                    {
                        "input": "s = \"acba\"",
                        "output": "0",
                        "explanation": "No subsequence of the required form exists."
                    },
                    {
                        "input": "s = \"aaabbbccc\"",
                        "output": "36",
                        "explanation": "Many subsequences of the form a^p b^q c^r are possible in this string."
                    },
                    {
                        "input": "s = \"cba\"",
                        "output": "0",
                        "explanation": "The string does not have the required order of characters a, b, and c."
                    },
                    {
                        "input": "s = \"aabbcc\"",
                        "output": "4",
                        "explanation": "The possible sub sequences are abc, abbc, aabc, aabbc."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check for every possible subsequence present in the string.</p>",
            "<p>Try to find count by storing occurrences of different characters.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}