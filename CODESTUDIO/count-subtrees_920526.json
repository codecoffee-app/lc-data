{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8921,
            "title": "Count Subtrees",
            "titleSlug": "count-subtrees_920526",
            "content": "<h4 id=\"you-have-been-given-a-binary-search-tree-bst-of-integer-values-and-2-integers-low-and-high-denoting-range-low-high\">You have been given a Binary Search Tree (BST) of integer values and 2 integers &#39;LOW&#39; and &#39;HIGH&#39; denoting range [&#39;LOW&#39;, &#39;HIGH&#39;].</h4>\n\n<h4 id=\"your-task-is-to-return-the-count-of-nodes-where-all-the-nodes-under-that-node-or-subtree-rooted-with-that-node-lie-in-the-given-range\">Your task is to return the count of nodes where all the nodes under that node (or subtree rooted with that node) lie in the given range.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-with-the-following-properties\">A binary search tree (BST) is a binary tree data structure with the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Consider the following binary search tree. Suppose the given range is [ 15, 32 ] so we return \u20182\u2019 as an answer as there are two nodes whose subtree is in the given range, the nodes are 20 and 30.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture-9935.JPG\" alt=\"Example\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nThe second line of each test case contains two space-separated integers containing the range &#39;LOW&#39; and &#39;HIGH&#39;.\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 -1 5 6 7 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer denoting the count of subtrees.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 3*10^3\n1 &lt;= data &lt;= 10^9 (data != -1)\n\nWhere &#39;N&#39; denotes the number of nodes in the given BST and &#39;data&#39; denotes the value of those nodes.\n\nTime Limit: 1 sec  \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n10 5 50 1 -1 40 100 -1 -1 -1 -1 -1 -1\n5 45\n10 5 50 1 -1 40 100 -1 -1 -1 -1 -1 -1\n1 45\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input1\">Explanation For Sample Input1:</h5>\n\n<pre><code>For the first test case :\nAs there is only 1 node (40) whose subtree is in the given range. \n\nFor the second test case :\nAs there are three nodes (1, 5, and 40) whose subtree is in the given range. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n10 5 50 -1 -1 -1 -1\n20 25\n10 5 50 -1 -1 -1 -1\n1 25\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) of integer values and two integers, LOW and HIGH, representing a range [LOW, HIGH], determine the count of nodes where all nodes within the subtree rooted at that node fall within the specified range.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 3*10^3",
                    "1 <= data <= 10^9 (data != -1)",
                    "Where 'N' denotes the number of nodes in the given BST and 'data' denotes the value of those nodes.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "10 5 50 1 -1 40 100 -1 -1 -1 -1 -1 -1\n5 45",
                        "output": "1",
                        "explanation": "Only the subtree rooted at 40 is entirely within the range [5, 45]."
                    },
                    {
                        "input": "10 5 50 1 -1 40 100 -1 -1 -1 -1 -1 -1\n1 45",
                        "output": "3",
                        "explanation": "The subtrees rooted at 1, 5, and 40 are entirely within the range [1, 45]."
                    },
                    {
                        "input": "10 5 50 -1 -1 -1 -1\n20 25",
                        "output": "0",
                        "explanation": "No subtree is entirely within the range [20, 25]."
                    },
                    {
                        "input": "10 5 50 -1 -1 -1 -1\n1 25",
                        "output": "1",
                        "explanation": "The subtree rooted at 5 is entirely within the range [1, 25]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of traversing the tree and using a recursive approach?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}