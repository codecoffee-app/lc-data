{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9936,
            "title": "Count The Number of Ways To Divide N In K Groups Incrementally",
            "titleSlug": "count-the-number-of-ways-to-divide-n-in-k-groups-incrementally_1105569",
            "content": "<h4 id=\"you-are-given-two-integers-n-and-k-you-need-to-find-the-number-of-ways-to-divide-n-into-k-non-empty-groups-such-that-size-of-group-i-group-i-1-for-each-valid-i-print-it-modulo-1e9-7\">You are given two integers N and K, you need to find the number of ways to divide N into k non-empty groups such that size of group[i] &gt;= group[i - 1] for each valid i. Print it modulo 1e9 + 7.</h4>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then, the T test cases follow.\n\nThe first line of  every test case contains 2 space separated integers N and K.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the required number of ways modulo 1e9 + 7. \n\nThe output for each test case is printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. DON&#39;T forget to print modulo 1e9 + 7.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 \n1 &lt;= N &lt;= 1000\n1 &lt;= K &lt;= N\n\nWhere T is the number of test cases, N is the total number of items and K is the number of groups. \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n4 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>There are 2 groups such that their sum is 4.\nThese are : [1, 3], [2, 2]\nNote: You can\u2019t have [3, 1] because it will have size of group[0] &gt; group[1].\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n4 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>[1, 1, 1, 1] is the only way to divide 4 into 4 groups with the given condition.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, N and K, determine the number of ways to divide N into K non-empty groups such that the size of group[i] is greater than or equal to group[i-1] for each valid i. Return the result modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 1000",
                    "1 <= K <= N",
                    "Where T is the number of test cases, N is the total number of items, and K is the number of groups."
                ],
                "testcases": [
                    {
                        "input": "4 2",
                        "output": "2",
                        "explanation": "We need to divide 4 into 2 groups with non-decreasing sizes. The possible ways are: [1, 3] and [2, 2]. Therefore, there are 2 valid ways."
                    },
                    {
                        "input": "4 4",
                        "output": "1",
                        "explanation": "We need to divide 4 into 4 groups with non-decreasing sizes. The only possible way is [1, 1, 1, 1]. Therefore, there is 1 valid way."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>What is the recurrence relation ?</p>",
            "<p>Can you optimise the previous approach? Try to memoize the subproblems.&nbsp;</p>",
            "<p><strong>&nbsp;</strong>Initially, we were breaking the large problem into small problems but now, let us look at it in a different way. Can you solve the small problem first and then reach the final answer? Try to use the bottom-up approach now.&nbsp;</p>",
            "<p>Do we really need to maintain the last variable?&nbsp; Try to eliminate it.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}