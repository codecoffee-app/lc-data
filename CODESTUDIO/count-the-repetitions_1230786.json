{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10520,
            "title": "Count the repetitions",
            "titleSlug": "count-the-repetitions_1230786",
            "content": "<h4 id=\"a-string-s-is-defined-as-s-s-n-such-that-n-repetitions-of-s-make-s-for-example-if-s-ab-4-then-s-abababab-you-are-given-two-string-s1-s1-n1-and-s2-s2-n2-your-task-is-to-find-the-maximum-value-of-m-such-that-s2-m-can-be-obtained-from-s1\">A string &#39;S&#39; is defined as S[s,N] such that &#39;N&#39; repetitions of &#39;s&#39; make &#39;S&#39;. For example if S[\u201cab\u201d 4] then &#39;S&#39; = \u201dabababab\u201d. You are given two string S1[s1, N1] and S2[s2, N2]. Your task is to find the maximum value of &#39;M&#39; such that [S2, M] can be obtained from S1.</h4>\n\n<h4 id=\"it-is-defined-that-s1-can-be-obtained-from-s2-if-we-can-remove-some-character-from-s2-to-get-s1-for-example-string-s-ab-can-be-obtained-from-adeb-but-not-from-adef\">It is defined that &#39;S1&#39; can be obtained from &#39;S2&#39; if we can remove some character from &#39;S2&#39; to get &#39;S1&#39;. For example, string &#39;s&#39; = \u201dab\u201d can be obtained from \u201cadeb\u201d but not from \u201cadef\u201d.</h4>\n\n<h5 id=\"for-example\">For example,</h5>\n\n<pre><code>S1[\u201cabc\u201d 4] , S2 = [\u201cab\u201d 2]\n\nHere, &#39;S1&#39; = \u201dabcabcabcabc\u201d and  &#39;S2&#39; = \u201dabab\u201d,\nAfter deleting all \u2018c\u2019 from &#39;S1&#39; becomes  S&#39;1 = \u201cabababab\u201d, which can also be written as \nS&#39;1 =[\u201cabab&quot; 2] = [S2 2]. \nHence the &#39;M&#39; = 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows\n\nThe first line of each test case contains a string &#39;s1&#39; and an integer &#39;N1&#39;, where &#39;S1&#39; = [s1, n1].\n\nSecond line of each test case contains a string &#39;s2&#39; and an integer &#39;N2&#39;, where &#39;S2&#39; = [s2, n2].\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, you have to return an integer M such that [S2,M] can be obtained from S1.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything or take input. This already has been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:-</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= length of s1, length of s2 &lt;= 100\n1 &lt;= n1, n2 &lt;= 10^3\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1</h5>\n\n<pre><code>2\nabc 4\nab 2\nabcde 5\na 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code> 2\n 1\n</code></pre>\n\n<h5 id=\"sample-input-explanation\">Sample input explanation</h5>\n\n<pre><code>Test case 1: \nHere S1 = &quot;abcabcabcabc&quot; and S2 = &quot;abab&quot;\nWe can obtain &quot;abababab&quot; from S1, which is &quot;abab&quot; + &quot;abab&quot; so M = 2.\n\nTest case 2:\nHere S1 = &quot;abcdeabcdeabcdeabcdeabcde&quot; and S2 = &quot;aaa&quot;.\nWe can obtain &quot;aaaaa&quot; from S1. Here we can find S2 only one time, so M = 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample input 2</h5>\n\n<pre><code>2\nabcd 4\naba 2\nabde 2\nabde 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2</h5>\n\n<pre><code>1\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, S1 and S2, defined as repetitions of smaller strings, determine the maximum number of times S2 can be formed by removing characters from S1.  S1 is created by repeating a string 's1' N1 times, and S2 is created by repeating a string 's2' N2 times. The goal is to find the largest integer M such that [S2, M] (S2 repeated M times) can be obtained as a subsequence of S1.",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= length of s1, length of s2 <= 100",
                    "1 <= N1, N2 <= 1000",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "abc 4\nab 2",
                        "output": "2",
                        "explanation": "S1 is 'abcabcabcabc' and S2 is 'abab'. We can extract 'abababab' (which is 'abab' repeated twice) from S1 by removing the 'c' characters. Thus, M = 2."
                    },
                    {
                        "input": "abcde 5\na 3",
                        "output": "1",
                        "explanation": "S1 is 'abcdeabcdeabcdeabcdeabcde' and S2 is 'a'. We can extract 'aaaaa' from S1, so we can obtain S2 only one time fully. Thus M=1. We can get 5 'a's from s1, but question wants to know how many [s2, M] s2 repeated M times we can get and s2 = 'a' repeated 3 times. So we can only have one complete sequence of 3 'a's from s1"
                    },
                    {
                        "input": "abcd 4\naba 2",
                        "output": "1",
                        "explanation": "S1 is 'abcdabcdabcdabcd' and S2 is 'aba'. We are looking for M such that [S2, M] can be found in S1. S2 is aba aba. We have a b a once from s1. So we can return m = 1"
                    },
                    {
                        "input": "abde 2\nabde 4",
                        "output": "0",
                        "explanation": "S1 is 'abdeabde' and S2 is 'abde'. s2 is repeated 4 times. So S2 = 'abdeabdeabdeabde'. S1 = abdeabde can not generate the target. Thus we can return m=0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check the number of times s2 repeats in S1.</p>",
            "<p>Try to find a pattern of s2 in S1.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}