{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7978,
            "title": "Count ways to reach nth stairs",
            "titleSlug": "count-ways-to-reach-nth-stairs_798650",
            "content": "<h4 id=\"you-have-been-given-a-number-of-stairs-initially-you-are-at-the-0th-stair-and-you-need-to-reach-the-nth-stair\">You have been given a number of stairs. Initially, you are at the 0th stair, and you need to reach the Nth stair.</h4>\n\n<p><br/></p>\n\n<h4 id=\"each-time-you-can-climb-either-one-step-or-two-steps\">Each time, you can climb either one step or two steps.</h4>\n\n<p><br/></p>\n\n<h4 id=\"you-are-supposed-to-return-the-number-of-distinct-ways-you-can-climb-from-the-0th-step-to-the-nth-step\">You are supposed to return the number of distinct ways you can climb from the 0th step to the Nth step.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>N=3\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/stairs-5364.png\" alt=\"Example\"></p>\n\n<pre><code>We can climb one step at a time i.e. {(0, 1) ,(1, 2),(2,3)} or we can climb the first two-step and then one step i.e. {(0,2),(1, 3)} or we can climb first one step and then two step i.e. {(0,1), (1,3)}.\n</code></pre>\n\n<h4 id=\"input-format\">Input format :</h4>\n\n<pre><code>The first line contains an integer &#39;T&#39;, which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first and the only argument of each test case contains an integer &#39;N&#39;, representing the number of stairs.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case/query, print the number of distinct ways to reach the top of stairs. Since the number can be huge, so return output modulo 10^9+7.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 10\n0 &lt;= &#39;N&#39; &lt;= 10^5\n\nWhere &#39;T&#39; is the number of test cases, and &#39;N&#39; is the number of stairs.\n\nIt is guaranteed that sum of &#39;N&#39; over all test cases is &lt;= 10^5.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>In the first test case, there are only two ways to climb the stairs, i.e. {1,1} and {2}.\n\nIn the second test case, there are three ways to climb the stairs i.e. {1,1,1} , {1,2} and {2,1}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4\n5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5\n8\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2 :</h5>\n\n<pre><code>In the first test case, there are five ways to climb the stairs i.e. {1,1,1,1} , {1,1,2} , {2,1,1} , {1,2,1} , {2,2}.\n\nIn the second test case, there are eight ways to climb the stairs i.e. {1,1,1,1,1} , {1,1,1,2} , {1,1,2,1}, {1,2,1,1}, {1,2,2},{2,1,1,1},{2,1,2} and {2,2,1}.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 547,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are positioned at the bottom (0th stair) of a staircase with 'N' stairs. Your goal is to reach the top (Nth stair). You can climb either one step or two steps at a time. Determine the number of distinct ways you can reach the top of the staircase.",
                "constraints": [
                    "1 <= T <= 10 (where T is the number of test cases)",
                    "0 <= N <= 10^5 (where N is the number of stairs)",
                    "The sum of N over all test cases is <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "2\n2\n3",
                        "output": "2\n3",
                        "explanation": "Case 1: N = 2. Possible ways: {1, 1}, {2}.  Total: 2.\nCase 2: N = 3. Possible ways: {1, 1, 1}, {1, 2}, {2, 1}. Total: 3."
                    },
                    {
                        "input": "2\n4\n5",
                        "output": "5\n8",
                        "explanation": "Case 1: N = 4. Possible ways: {1, 1, 1, 1}, {1, 1, 2}, {1, 2, 1}, {2, 1, 1}, {2, 2}. Total: 5.\nCase 2: N = 5. Possible ways: {1, 1, 1, 1, 1}, {1, 1, 1, 2}, {1, 1, 2, 1}, {1, 2, 1, 1}, {1, 2, 2}, {2, 1, 1, 1}, {2, 1, 2}, {2, 2, 1}. Total: 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you try to explore all options at each step and count the total number of ways?</p>",
            "<p>Can you observe we have so many repetitive calls in our recursion tree? Can you optimise your recursive solution using some extra space?</p>",
            "<p>Try to generate all the possible distinct ways to climb stairs using iterative dynamic programming.</p>",
            "<p>Can you relate the recurrence relation of this problem to Fibonacci Numbers? Can you find the best complexity for finding \u2018Nth Fibonacci Number?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O( log(N) )\r\n    Space complexity: O( log(N) )\r\n\r\n    Where \u2018N\u2019 is the point to reach given in the input.\r\n*/\r\n\r\n// Logic for Multiplication of Matrix 'F' and Matrix 'M'.\r\nvoid multiply(int F[2][2], int M[2][2], const int &mod) {\r\n\r\n    int x = ((F[0][0] * 1LL * M[0][0]) % mod + (F[0][1] * 1LL * M[1][0]) % mod) % mod;\r\n    int y = ((F[0][0] * 1LL * M[0][1]) % mod + (F[0][1] * 1LL * M[1][1]) % mod) % mod;\r\n    int z = ((F[1][0] * 1LL * M[0][0]) % mod + (F[1][1] * 1LL * M[1][0]) % mod) % mod;\r\n    int w = ((F[1][0] * 1LL * M[0][1]) % mod + (F[1][1] * 1LL * M[1][1]) % mod) % mod;\r\n\r\n    F[0][0] = x;\r\n    F[0][1] = y;\r\n    F[1][0] = z;\r\n    F[1][1] = w;\r\n}\r\n\r\n// Binary Matrix Exponentiation.\r\nvoid power(int F[2][2], int nStairs, const int& mod) {\r\n\r\n    if (nStairs <= 1) {\r\n\r\n        return;\r\n    }\r\n\r\n    int M[2][2] = {{1, 1}, {1, 0}};\r\n\r\n    power(F, nStairs / 2, mod);\r\n\r\n    multiply(F, F, mod);\r\n\r\n    if (nStairs % 2 == 1) {\r\n\r\n        multiply(F, M, mod);\r\n    }\r\n}\r\n\r\nint fib(int nStairs, const int& mod) {\r\n\r\n    int F[2][2] = {{1, 1}, {1, 0}};\r\n\r\n    // Base case.\r\n    if (nStairs == 0) {\r\n\r\n        return 0;\r\n    }\r\n\r\n    power(F, nStairs - 1, mod);\r\n\r\n    return F[0][0];\r\n}\r\n\r\nint countDistinctWays(int nStairs) {\r\n\r\n    // Initialize the variable 'mod'.\r\n    const int mod = 1000000007;\r\n\r\n    // The no. of ways to climb the 'nStairs' is equal to '(nStairs + 1)th' Fibonacci Number.\r\n    return fib(nStairs + 1, mod);\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time Complexity: O( log(N) )\r\n    Space complexity: O( log(N) )\r\n\r\n    Where 'N' is the point to reach given in the input.\r\n\"\"\"\r\n\r\n# Logic for Multiplication of Matrix 'F' and Matrix 'M'.\r\ndef multiply(F: [[int]], M: [[int]], mod: int):\r\n\r\n    x = ((F[0][0] * M[0][0]) % mod + (F[0][1] * M[1][0]) % mod) % mod\r\n    y = ((F[0][0] * M[0][1]) % mod + (F[0][1] * M[1][1]) % mod) % mod\r\n    z = ((F[1][0] * M[0][0]) % mod + (F[1][1] * M[1][0]) % mod) % mod\r\n    w = ((F[1][0] * M[0][1]) % mod + (F[1][1] * M[1][1]) % mod) % mod\r\n\r\n    F[0][0] = x\r\n    F[0][1] = y\r\n    F[1][0] = z\r\n    F[1][1] = w\r\n\r\n\r\n# Binary Matrix Exponentiation.\r\ndef power(F: [[int]], nStairs: int, mod: int):\r\n\r\n    if nStairs <= 1:\r\n        return\r\n\r\n    M = [[1, 1], [1, 0]]\r\n\r\n    power(F, nStairs // 2, mod)\r\n\r\n    multiply(F, F, mod)\r\n\r\n    if nStairs % 2 == 1:\r\n        multiply(F, M, mod)\r\n\r\n\r\ndef fib(nStairs: int, mod: int) -> int:\r\n\r\n    F = [[1, 1], [1, 0]]\r\n\r\n    # Base case.\r\n    if nStairs == 0:\r\n\r\n        return 0\r\n\r\n    power(F, nStairs - 1, mod)\r\n\r\n    return F[0][0]\r\n\r\n\r\ndef countDistinctWays(nStairs: int) -> int:\r\n\r\n    # Initialize the variable 'mod'.\r\n    mod = 1000000007\r\n\r\n    # The no. of ways to climb the 'nStairs' is equal to '(nStairs + 1)th' Fibonacci Number.\r\n    ans = fib(nStairs + 1, mod)\r\n    return ans\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*  \r\n    Time Complexity : O(log(N))\r\n    Space Complexity : O(log(N))\r\n\r\n    Where 'N' is the number of stairs.\r\n */\r\n\r\npublic class Solution {\r\n\tpublic static final int MOD = 1000000007;\r\n\r\n\tpublic static void multiply(long F[][], long M[][]) {\r\n\t\t/*\r\n\t\t * Logic for Multiplication of Matrix 'F' and Matrix 'M'\r\n\t\t */\r\n\r\n\t\tlong x = (F[0][0] * M[0][0]) % MOD + (F[0][1] * M[1][0]) % MOD;\r\n\t\tlong y = (F[0][0] * M[0][1]) % MOD + (F[0][1] * M[1][1]) % MOD;\r\n\t\tlong z = (F[1][0] * M[0][0]) % MOD + (F[1][1] * M[1][0]) % MOD;\r\n\t\tlong w = (F[1][0] * M[0][1]) % MOD + (F[1][1] * M[1][1]) % MOD;\r\n\r\n\t\tF[0][0] = x % MOD;\r\n\t\tF[0][1] = y % MOD;\r\n\t\tF[1][0] = z % MOD;\r\n\t\tF[1][1] = w % MOD;\r\n\t}\r\n\r\n\tpublic static void power(long F[][], long nStairs) {\r\n\t\t/*\r\n\t\t * Binary Matrix Exponentiation\r\n\t\t */\r\n\r\n\t\tif (nStairs == 0 || nStairs == 1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlong M[][] = { { 1, 1 }, { 1, 0 } };\r\n\r\n\t\tpower(F, nStairs / 2);\r\n\r\n\t\tmultiply(F, F);\r\n\r\n\t\tif (nStairs % 2 == 1) {\r\n\t\t\tmultiply(F, M);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static long fib(long nStairs) {\r\n\t\tlong F[][] = { { 1, 1 }, { 1, 0 } };\r\n\r\n\t\tif (nStairs == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tpower(F, nStairs - 1);\r\n\r\n\t\treturn F[0][0];\r\n\t}\r\n\r\n\tpublic static long countDistinctWayToClimbStair(long nStairs) {\r\n\t\t// The no. of ways to climb the nStairs is (nStairs+1)th Fibonacci Number\r\n\t\treturn fib(nStairs + 1);\r\n\t}\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}