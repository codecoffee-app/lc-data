{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14786,
            "title": "Coupons",
            "titleSlug": "coupons_2262396",
            "content": "<h4 id=\"you-are-given-a-list-of-coupons-containing-n-coupon-numbers-your-task-is-to-pick-up-the-coupons-from-the-list-you-can-pick-up-coupons-consecutively-to-use-any-coupons-you-have-to-pick-the-same-number-at-least-two-times-your-task-is-to-find-the-minimum-number-of-coupons-you-have-to-pick-to-avail-yourself-any-coupon-return-1-if-it-s-not-possible-to-avail-any-coupons\">You are given a list of coupons containing &#39;N&#39; coupon numbers. Your task is to pick up the coupons from the list. You can pick up coupons consecutively. To use any coupons, you have to pick the same number at least two times. Your task is to find the minimum number of coupons you have to pick to avail yourself any coupon. Return -1 if it\u2019s not possible to avail any coupons.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>You are given,\u2019coupons\u2019 = [1, 2, 3, 4, 5, 3, 6], here you can pick up coupons that are [3, 4, 5, 3] and avail coupon number \u20183\u2019, The total number of coupons picked up are 4. Hence the answer is 4.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains the integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of coupons.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the elements of the array \u2018coupons\u2019.\n</code></pre>\n\n<h6 id=\"output-format\">Output Format:</h6>\n\n<pre><code>For each test case, print a single integer representing the minimum number of coupons you have picked up from the given array.\n\nPrint a separate line for each test case.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 10^6\n0 &lt;= coupons[i] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2 \n7\n1 2 3 4 5 3 6\n6\n2 2 0 1 4 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n2\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For the first test case, \u2019coupons\u2019 = [1, 2, 3, 4, 5, 3, 6], here you can pick up coupons that are [3, 4, 5, 3] and avail coupon number \u20183\u2019, The total number of coupons picked up are 4. Hence the answer is 4\n\nFor the second test case, \u2018coupons\u2019 = [2, 2, 0, 1, 4, 5], here you can pick up coupons that are [2, 2] and avail coupon number \u20182\u2019, The total number of coupons picked up are 2. Hence the answer is 2\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n3 4 6 8 9\n3\n1 2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of coupon numbers, find the minimum number of consecutive coupons you need to pick to have at least two coupons with the same number. If it's not possible to avail any coupons in this way, return -1.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 10^6",
                    "0 <= coupons[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 7, coupons=[1, 2, 3, 4, 5, 3, 6]",
                        "output": "4",
                        "explanation": "The subsequence [3, 4, 5, 3] allows you to avail coupon number '3', with a length of 4."
                    },
                    {
                        "input": "n = 6, coupons=[2, 2, 0, 1, 4, 5]",
                        "output": "2",
                        "explanation": "The subsequence [2, 2] allows you to avail coupon number '2', with a length of 2."
                    },
                    {
                        "input": "n = 5, coupons=[3, 4, 6, 8, 9]",
                        "output": "-1",
                        "explanation": "There is no subsequence in which a coupon number appears at least twice."
                    },
                    {
                        "input": "n = 3, coupons=[1, 2, 1]",
                        "output": "3",
                        "explanation": "The subsequence [1, 2, 1] allows you to avail coupon number '1', with a length of 3."
                    },
                    {
                        "input": "n = 4, coupons=[1, 1, 1, 1]",
                        "output": "2",
                        "explanation": "The subsequence [1, 1] allows you to avail coupon number '1', with a length of 2."
                    },
                    {
                        "input": "n = 5, coupons=[5, 4, 3, 2, 5]",
                        "output": "5",
                        "explanation": "The subsequence [5, 4, 3, 2, 5] allows you to avail coupon number '5', with a length of 5."
                    },
                    {
                        "input": "n = 6, coupons=[10, 20, 10, 40, 50, 20]",
                        "output": "3",
                        "explanation": "The subsequence [10, 20, 10] allows you to avail coupon number '10', with a length of 3. Picking [20,10,40,50,20] gives length 5 and picking [10,20,10,40,50,20] gives length 6.  The subequence [20, 10, 40, 50, 20] allows to avail coupon number 20 with length 5. Hence, minimum length is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of a brute force approach by traversing through the array.</p>",
            "<p>Try to store the last occurrence of each coupon number.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}