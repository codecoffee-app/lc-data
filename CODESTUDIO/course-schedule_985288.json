{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9424,
            "title": "Course Schedule",
            "titleSlug": "course-schedule_985288",
            "content": "<h4 id=\"you-are-a-student-of-netaji-subhas-institute-of-technology-you-have-to-take-n-number-of-courses-labelled-from-1-to-n-to-complete-your-b-tech-degree\">You are a student of Netaji Subhas Institute of Technology. You have to take \u2018N\u2019 number of courses labelled from 1 to N to complete your B.Tech Degree.</h4>\n\n<h4 id=\"some-courses-may-have-prerequisites-for-example-to-take-course-1-you-have-to-first-take-course-2-which-is-expressed-as-a-pair-1-2-now-your-task-is-to-find-is-it-possible-for-you-to-finish-all-courses\">Some courses may have prerequisites, for example, to take course 1 you have to first take course 2, which is expressed as a pair: [1, 2]. Now, your task is to find is it possible for you to finish all courses.</h4>\n\n<h4 id=\"note-there-are-no-duplicate-pairs-in-the-prerequisites-array\">Note: There are no duplicate pairs in the prerequisites array.</h4>\n\n<h5 id=\"for-example\">For example-</h5>\n\n<pre><code>If N = 2 and prerequisite = [[1, 2]]. Then, there are a total of 2 courses you need to take. To take course 1 you need to finish course 2. So, it is possible to complete all courses. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018M\u2019 representing the total number of courses and the total number of prerequisites, respectively.\n\nFrom the second line of each test case, the next M lines represent the prerequisites for courses. Every line contains two single space-separated integers representing a prerequisite pair.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the only line of output will print \u201cYes\u201d if you can complete the courses. Else print \u201cNo\u201d.\n\nPrint the output of each test case in a separate line.\n\nNote:\nYou are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 5000\n0 &lt;= M &lt;= min(5000, (N * (N - 1)) / 2)\n1 &lt;= prerequisites[i][0] &lt;= N \n1 &lt;= prerequisites[i][1] &lt;= N \n\nTime Limit: 1 sec \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n3 2\n1 2\n2 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>No\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample output 1:</h5>\n\n<pre><code>There are a total of 3 courses you need to take. To take course 1 you need to finish course 2. To take course 2 you need to finish course 1. So, it is impossible to complete all courses. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4 0 \n4 2\n1 2\n2 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>Yes\nYes\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 30,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a set of 'N' courses labeled from 1 to N, and a list of prerequisites where each element is a pair [course_i, course_j] indicating that course_i must be taken after course_j, determine if it is possible to finish all 'N' courses. Return \"Yes\" if it's possible, and \"No\" otherwise.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 5000",
                    "0 <= M <= min(5000, (N * (N - 1)) / 2)",
                    "1 <= prerequisites[i][0] <= N",
                    "1 <= prerequisites[i][1] <= N"
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 2, prerequisites = [[1, 2], [2, 1]]",
                        "output": "No",
                        "explanation": "There are a total of 3 courses you need to take. To take course 1 you need to finish course 2. To take course 2 you need to finish course 1. This creates a cycle, so it is impossible to complete all courses."
                    },
                    {
                        "input": "n = 4, m = 0, prerequisites = []",
                        "output": "Yes",
                        "explanation": "There are 4 courses and no prerequisites, so it is possible to complete all courses in any order."
                    },
                    {
                        "input": "n = 4, m = 2, prerequisites = [[1, 2], [2, 3]]",
                        "output": "Yes",
                        "explanation": "There are 4 courses and course 1 requires course 2, and course 2 requires course 3. A valid order would be 3, 2, 1, 4. Hence it is possible to finish all courses."
                    },
                    {
                        "input": "n = 2, m = 1, prerequisites = [[1, 2]]",
                        "output": "Yes",
                        "explanation": "To take course 1 you need to finish course 2. So, it is possible to complete all courses."
                    },
                    {
                        "input": "n = 5, m = 3, prerequisites = [[1, 2], [2, 3], [1, 4]]",
                        "output": "Yes",
                        "explanation": "A possible order to take the courses is 3, 2, 4, 1, 5."
                    },
                    {
                        "input": "n = 3, m = 3, prerequisites = [[0,1],[0,2],[1,2]]",
                        "output": "Yes",
                        "explanation": "There are 3 courses, where 0 is dependent on 1 and 2, and 1 is dependent on 2. Course completion is possible."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to consider the problem as a graph problem.</p>",
            "<p>Try to use Kahn\u2019s algorithm for topological sorting.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}