{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8406,
            "title": "Cousins Of Given Node In Binary Tree",
            "titleSlug": "cousins-of-given-node-in-binary-tree_873363",
            "content": "<h4 id=\"given-a-binary-tree-of-n-nodes-and-a-node-of-this-tree-you-need-to-return-a-list-containing-the-values-of-the-cousins-of-the-given-node-in-the-given-binary-tree-sorted-by-non-decreasing-order-of-their-values\">Given a binary tree of N nodes and a node of this tree, you need to return a list containing the values of the cousins of the given node in the given binary tree sorted by non-decreasing order of their values.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Two nodes of a binary tree are cousins if they have the same depth or level, but have different parents.\n\nNo two nodes in the given binary tree will have the same data values.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<p><img src=\"https://files.codingninjas.in/image-1-5748.png\" alt=\"Example Of Cousins \"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer T representing the number of test cases. \n\nThe first line of each test case will contain the values of the nodes of the tree in the level order form ( -1 for NULL node). Refer to the below example for further clarification.\n\nThe second and the last line of each test case will contain the value of the node for which the cousins are to be found.\n\nExample: \nConsider the binary tree:\n\nThe input of the tree depicted in the image above will be like: \n\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the value of the cousins of the given node in the binary tree, or -1 if the given node has no cousins in the binary tree.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n1 &lt;= nodeVal &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n4\n1 2 3 -1 -1 -1 -1\n2 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>5 6\n-1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>The tree representation for test case 2 is given below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image4-5749.png\" alt=\"Sample Test case 2\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 2 3 4 5 6 -1 7 8 -1 -1 9 10 -1 -1 -1 -1 -1 -1 -1 -1\n9   \n1 2 -1 3 4 -1 -1 -1 -1\n3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>7 8 10\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree and a specific node within it, identify and return a list of the node's cousins. Two nodes are considered cousins if they share the same depth in the tree but have different parents. The returned list should contain the values of the cousin nodes, sorted in non-decreasing order. If the given node has no cousins, return a list containing only -1.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3000",
                    "1 <= nodeVal <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "root = [1, 2, 3, 4, -1, 5, 6, -1, 7, -1, -1, -1, -1, -1, -1], node = 4",
                        "output": "5 6",
                        "explanation": "The cousins of node 4 are nodes 5 and 6, as they are at the same level (depth 2) but have different parents (2 and 3, respectively)."
                    },
                    {
                        "input": "root = [1, 2, 3, -1, -1, -1, -1], node = 2",
                        "output": "-1",
                        "explanation": "Node 2 has no cousins as it is a child of the root and there are no other nodes at the same level with different parents."
                    },
                    {
                        "input": "root = [1, 2, 3, 4, 5, 6, -1, 7, 8, -1, -1, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1], node = 9",
                        "output": "7 8 10",
                        "explanation": "The cousins of node 9 are nodes 7, 8, and 10. They are at the same depth and have different parents."
                    },
                    {
                        "input": "root = [1, 2, -1, 3, 4, -1, -1, -1, -1], node = 3",
                        "output": "-1",
                        "explanation": "Node 3 has no cousins."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try using DFS to find the nodes at the same depth of the given node.</p>",
            "<p>Single Traversal using Breadth-First Search.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}