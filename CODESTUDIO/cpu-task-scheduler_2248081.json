{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14781,
            "title": "CPU Task Scheduler ",
            "titleSlug": "cpu-task-scheduler_2248081",
            "content": "<h4 id=\"there-is-a-multi-core-cpu-a-single-core-in-this-cpu-can-execute-only-a-single-task-at-a-given-time-so-if-two-tasks-need-to-be-executed-simultaneously-we-will-need-at-least-two-different-cores-to-process-them\">There is a multi-core CPU. A single-core in this CPU can execute only a single task at a given time, so if two tasks need to be executed simultaneously, we will need at least two different cores to process them.</h4>\n\n<h4 id=\"you-have-been-given-a-list-of-n-tasks-that-need-to-be-executed-this-list-contains-starting-and-ending-times-of-each-task\">You have been given a list of \u2018N\u2019 tasks that need to be executed, this list contains starting and ending times of each task.</h4>\n\n<h4 id=\"find-out-the-minimum-number-of-cores-required-in-this-cpu-so-that-all-the-tasks-can-be-executed-at-their-scheduled-time\">Find out the minimum number of cores required in this CPU so that all the tasks can be executed at their scheduled time.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>If a core is busy executing task-1 then it won\u2019t be able to execute task-2 if the starting time of task-2 is less than the end time of task-1.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>If N = 4 and the timestamps of the tasks are: { {0,10}, {5,20}, {10,25}, {30,40} }\n\nThen the minimum number of cores required is equal to 2. \nTask-1 will arrive at 0 and core-1 will execute it till 10.\nTask-2 will arrive at 5 and as core-1 is busy executing task-1, so core-2 will be assigned and it will execute this task till 20\nTask-3 will arrive at 10, core-1 has just finished executing task-1 and is now free, so core-1 will execute this task till 25.\nTask-4 will arrive at 30, both core-1 and core-2 are free and any one of them will execute this task.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of tasks to be executed.\n\nThe following N line each contains two integers \u2018Start[i]\u2019 and \u2018End[i]\u2019 denoting the time-stamp of the ith task.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer denoting the minimum number of cores required.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10      \n1 &lt;= N &lt;= 1000\n0 &lt;= Start[i] &lt; End[i] &lt;= 1\u2019000\u2019000\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4\n0 10\n5 20\n10 25\n30 40\n3\n1 5\n2 4\n3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n3 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For test case 1 : \nWe will return 2, because:\nTask-1 will arrive at 0 and core-1 will execute it till 10.\nTask-2 will arrive at 5 and as core-1 is busy, so core-2 will be assigned and it will execute this task till 20\nTask-3 will arrive at 10, core-1 has just finished executing task-1 and is now free, so core-1 will execute this task by 25.\nTask-4 will arrive at 30, both core-1 and core-2 are free and any one of them will execute this task.\n\n\nFor test case 2 : \nWe will return 3, because:\nTask-1 will arrive at 1 and core-1 will execute it till 5.\nTask-2 will arrive at 2 and as core-1 is busy, so core-2 will execute this task till 4.\nTask-3 will arrive at 3, as both core-1 and core-2 are busy executing other tasks, so core-3 will be assigned to execute task-3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2\n5 10\n2 8\n1\n10 11\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of 'N' tasks, each with a start and end time, determine the minimum number of cores required in a multi-core CPU to execute all tasks without overlap on any single core. A core can only execute one task at a time. If a new task starts before the current task finishes on a core, a new core is required.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 1000 (Number of tasks)",
                    "0 <= Start[i] < End[i] <= 1,000,000 (Start and end times of tasks)",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "4\n0 10\n5 20\n10 25\n30 40",
                        "output": "2",
                        "explanation": "Task 1 (0-10) uses Core 1.\nTask 2 (5-20) overlaps with Task 1, so it uses Core 2.\nTask 3 (10-25) can use Core 1 (Core 1 is free after time 10).\nTask 4 (30-40) can use either Core 1 or Core 2."
                    },
                    {
                        "input": "3\n1 5\n2 4\n3 4",
                        "output": "3",
                        "explanation": "Task 1 (1-5) uses Core 1.\nTask 2 (2-4) overlaps with Task 1, so it uses Core 2.\nTask 3 (3-4) overlaps with both Task 1 and Task 2, so it uses Core 3."
                    },
                    {
                        "input": "2\n5 10\n2 8",
                        "output": "2",
                        "explanation": "Task 1 (5-10) uses Core 1.\nTask 2 (2-8) overlaps with Task 1, so it uses Core 2."
                    },
                    {
                        "input": "1\n10 11",
                        "output": "1",
                        "explanation": "Task 1 (10-11) uses Core 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Firstly sort all the tasks in increasing order of their start time.</p><p>Storing all the ending time-stamps of previous tasks is enough to know whether we need a new core for the current task or not.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}