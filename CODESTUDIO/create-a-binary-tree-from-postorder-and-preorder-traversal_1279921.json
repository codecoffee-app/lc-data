{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10909,
            "title": "Create a binary tree from postorder and preorder traversal",
            "titleSlug": "create-a-binary-tree-from-postorder-and-preorder-traversal_1279921",
            "content": "<h4 id=\"you-are-given-the-postorder-and-preorder-traversals-of-a-binary-tree-the-binary-tree-consists-of-n-nodes-where-each-node-represents-a-distinct-positive-integer-named-from-1-to-n-the-task-is-to-return-the-root-node-of-any-binary-tree-that-matches-the-given-postorder-and-preorder-traversals\">You are given the \u2018POSTORDER\u2019 and \u2018PREORDER\u2019 traversals of a binary tree. The binary tree consists of \u2018N\u2019 nodes where each node represents a distinct positive integer named from \u20181\u2019 to \u2018N\u2019. The task is to return the root node of any binary tree that matches the given \u2018POSTORDER\u2019 and \u2018PREORDER\u2019 traversals.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>\u2018POSTORDER\u2019 = [4, 5, 2, 6, 7, 3, 1]\n\u2018PREORDER\u2019 = [1, 2, 4, 5, 3, 6, 7]\nA binary tree that matches the given \u2018POSTORDER\u2019 and \u2018PREORDER\u2019 traversal is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/example-8506.png\" alt=\"NAME\"></p>\n\n<pre><code>So, create this binary tree and return the root node \u20181\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. You can return any binary tree that matches the given \u2018POSTORDER\u2019 and \u2018PREORDER\u2019 traversals.\n\n2. You can always construct a valid binary tree from the \u2018POSTORDER\u2019 and \u2018PREORDER\u2019 traversals.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases. Then, the \u2018T\u2019 test cases follow.\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the number of nodes in the binary tree.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the \u2018POSTORDER\u2019 traversal of the binary tree.\n\nThe third line of each test case contains \u2018N\u2019 space-separated integers denoting the \u2018PREORDER\u2019 traversal of the binary tree.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For every test case, return the root node of the newly created binary tree. The printed output will be the \u2018POSTORDER\u2019 and \u2018PREORDER\u2019 traversals of the returned tree, each printed on a new line.\n</code></pre>\n\n<h6 id=\"note\">Note:</h6>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^3\n\nTime limit: 1 second\n</code></pre>\n<h4 id=\"sample-input-1\">Sample input 1:</h4>\n\n<pre><code>2\n6\n6 2 4 5 3 1\n1 4 2 6 3 5\n5\n1 5 3 2 4\n4 1 2 3 5\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample output 1:</h4>\n\n<pre><code>6 2 4 5 3 1\n1 4 2 6 3 5\n1 5 3 2 4\n4 1 2 3 5\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h4>\n\n<pre><code>Test Case 1:\n\n\u2018POSTORDER\u2019 = [6, 2, 4, 5, 3, 1]\n\u2018PREORDER\u2019 = [1, 4, 2, 6, 3, 5]\nA binary tree that matches the given \u2018POSTORDER\u2019 and \u2018PREORDER\u2019 traversal is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample-input-1-8507.png\" alt=\"NAME\"></p>\n\n<pre><code>So, create this binary tree and return the root node \u20181\u2019.\n\nTest Case 2:\n\n\u2018POSTORDER\u2019 = [1, 5, 3, 2, 4]\n\u2018PREORDER\u2019 = [4, 1, 2, 3, 5]\nA binary tree that matches the given \u2018POSTORDER\u2019 and \u2018PREORDER\u2019 traversal is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample-input-2-8508.png\" alt=\"NAME\"></p>\n\n<pre><code>So, create this binary tree and return the root node \u20184\u2019.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample input 2:</h4>\n\n<pre><code>2\n4\n3 4 1 2\n2 1 3 4\n5\n5 4 3 2 1\n1 2 3 4 5\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample output 2:</h4>\n\n<pre><code>3 4 1 2\n2 1 3 4\n5 4 3 2 1\n1 2 3 4 5\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the postorder and preorder traversals of a binary tree where each node has a distinct positive integer value from 1 to N, construct any binary tree that matches these traversals and return the root node. The solution should work for trees with any number of nodes 'N' where 1 <= N <= 1000.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 10^3 (Number of nodes in the binary tree)",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "6\n6 2 4 5 3 1\n1 4 2 6 3 5",
                        "output": "6 2 4 5 3 1\n1 4 2 6 3 5",
                        "explanation": "The postorder traversal is [6, 2, 4, 5, 3, 1] and the preorder traversal is [1, 4, 2, 6, 3, 5].  A valid binary tree can be constructed and the requested traversals are returned to match the output format."
                    },
                    {
                        "input": "5\n1 5 3 2 4\n4 1 2 3 5",
                        "output": "1 5 3 2 4\n4 1 2 3 5",
                        "explanation": "The postorder traversal is [1, 5, 3, 2, 4] and the preorder traversal is [4, 1, 2, 3, 5].  A valid binary tree can be constructed, and the requested traversals are returned."
                    },
                    {
                        "input": "4\n3 4 1 2\n2 1 3 4",
                        "output": "3 4 1 2\n2 1 3 4",
                        "explanation": null
                    },
                    {
                        "input": "5\n5 4 3 2 1\n1 2 3 4 5",
                        "output": "5 4 3 2 1\n1 2 3 4 5",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For any node in \u2018PREORDER\u2019 traversal, try to find the number for nodes in its left subtree from the \u2018POSTORDER\u2019 traversal.</p>",
            "<p>For any node in \u2018PREORDER\u2019, use a data structure to efficiently find its left child\u2019s position in \u2018POSTORDER\u2019.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}