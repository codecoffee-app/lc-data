{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10320,
            "title": "Create A Graph And Print It",
            "titleSlug": "create-a-graph-and-print-it_1214551",
            "content": "<h4 id=\"you-are-given-an-undirected-graph-of-n-nodes-and-m-edges-your-task-is-to-create-the-graph-and-print-the-adjacency-list-of-the-graph-it-is-guaranteed-that-all-the-edges-are-unique-i-e-if-there-is-an-edge-from-x-to-y-then-there-is-no-edge-present-from-y-to-x-and-vice-versa-also-there-are-no-self-loops-present-in-the-graph\">You are given an undirected graph of &#39;N&#39; nodes and &#39;M&#39; edges. Your task is to create the graph and print the adjacency list of the graph. It is guaranteed that all the edges are unique, i.e., if there is an edge from &#39;X&#39; to &#39;Y&#39;, then there is no edge present from &#39;Y&#39; to &#39;X&#39; and vice versa. Also, there are no self-loops present in the graph.</h4>\n\n<p><br></p>\n\n<h4 id=\"in-graph-theory-an-adjacency-list-is-a-collection-of-unordered-lists-used-to-represent-a-finite-graph-each-list-describes-the-set-of-neighbors-of-a-vertex-in-the-graph\">In graph theory, an adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a vertex in the graph.</h4>\n\n<p><br></p>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>If &#39;N&#39; = 3 and edges = {{2,1}, {2,0}}.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/printgraphex-8100.png\" alt=\"graph\"></p>\n\n<pre><code>So, the adjacency list of the graph is stated below.\n0 \u2192 2\n1 \u2192 2\n2 \u2192 0 \u2192 1\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains two space-separated integers &#39;N&#39; and &#39;M&#39;, denoting the total number of nodes and the number of edges, respectively.\n\nThen &#39;M&#39; lines follow. Each line contains two space-separated integers denoting the nodes that are connected by the current edge.\n\nIt is guaranteed that all the edges are unique and there are no self-loops present in the graph.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>Print the adjacency list of the graph. Total &#39;N&#39; lines will be printed where &#39;N&#39; is the number of nodes. \n\nIn each line, the first integer denotes the number of the node, and then the neighbors to this node are printed separated by a single space in ascending order.\n\nYou can return any valid adjacency representation of the graph.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4 3\n1 2\n0 3\n2 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0 3\n1 2\n2 1 3\n3 0 2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>The graph is shown in the below figure.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/printgraphinput1ex1-8101.png\" alt=\"graph\"></p>\n\n<pre><code>So, the neighbour of node 0 is 3. So, in the first line, the first integer is 0 followed by its neighbour 3. Similarly in the second line, 1 is followed by its neighbour 2. \n\nIn the third line, 2 is followed by its neighbours 1 and 3. And in the fourth line, 3 is followed by its neighbours 0 and 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3 3\n0 1\n1 2\n2 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0 1 2\n1 0 2\n2 0 1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>The graph is shown in the below figure.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/printgraph_input1_ex2-8102.png\" alt=\"graph\"></p>\n\n<pre><code>So, the neighbour of node 0 is 1 and 2. So, in the first line, the first integer is 0 followed by its neighbour 1 and 2. Similarly in the second line, 1 is followed by its neighbour 2 and 0. \n\nIn the third line, 2 is followed by its neighbours 1 and 0. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 5000\n1 &lt;= M &lt;= min(5000, (N * (N - 1)) / 2)\n0 &lt;= edges[i][0], edges[i][1] &lt;= N-1\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 126,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph with 'N' nodes and 'M' edges, construct the adjacency list representation of the graph. The edges are guaranteed to be unique (no duplicate edges in either direction) and there are no self-loops.",
                "constraints": [
                    "1 <= N <= 5000",
                    "1 <= M <= min(5000, (N * (N - 1)) / 2)",
                    "0 <= edges[i][0], edges[i][1] <= N-1",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 3\n1 2\n0 3\n2 3",
                        "output": "0 3\n1 2\n2 1 3\n3 0 2",
                        "explanation": "The adjacency list represents the neighbors of each node in ascending order. Node 0 is connected to node 3. Node 1 is connected to node 2. Node 2 is connected to nodes 1 and 3. Node 3 is connected to nodes 0 and 2."
                    },
                    {
                        "input": "3 3\n0 1\n1 2\n2 0",
                        "output": "0 1 2\n1 0 2\n2 0 1",
                        "explanation": "The adjacency list represents the neighbors of each node in ascending order. Node 0 is connected to nodes 1 and 2. Node 1 is connected to nodes 0 and 2. Node 2 is connected to nodes 0 and 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to store the graph in an array of N nodes and print all its neighbours.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N + M)\r\n    Space Complexity : O(N + M)\r\n\r\n    Where 'N' and 'M' denote the number of nodes and the number of edges in the graph.\r\n*/\r\n\r\nvector<vector<int>> printAdjacency(int n, int m, vector<vector<int>> &edges) {\r\n\t\r\n\tvector<int> graph[n];\r\n\r\n\t// Creating the graph.\r\n\tfor(int i = 0; i < edges.size(); i++){\r\n\r\n\t\t// Adding adjecent nodes.\r\n\t\tgraph[edges[i][0]].push_back(edges[i][1]);\r\n\t\tgraph[edges[i][1]].push_back(edges[i][0]);\r\n\t}\r\n\r\n\t// Create an adjacency list of size 'N'.\r\n\tvector<vector<int>> adjacencyList(n);\r\n\r\n\tfor(int i = 0; i < n; i++) {\r\n\t\tadjacencyList[i].push_back(i);\r\n\r\n\t\tfor(int j = 0; j < graph[i].size(); j++) {\r\n\t\t\tadjacencyList[i].push_back(graph[i][j]);\r\n\t\t}\r\n\t}\r\n\r\n\treturn adjacencyList;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N + M)\r\n    Space Complexity : O(N + M)\r\n\r\n    Where 'N' and 'M' denote the number of nodes and the number of edges in the graph.\r\n*/\r\n\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n    public static int[][] printAdjacency(int n, int m, int[][] edges) {\r\n        List<Integer>[] graph = new ArrayList[n];\r\n        for(int i = 0; i < n; i++){\r\n            graph[i] = new ArrayList<Integer>();\r\n        }\r\n\r\n        // Creating the graph.\r\n        for(int i = 0; i < m; i++){\r\n\r\n            // Adding adjecent nodes.\r\n            graph[edges[i][0]].add(edges[i][1]);\r\n            graph[edges[i][1]].add(edges[i][0]);\r\n        }\r\n\r\n        // Create an adjacency list of size 'N'.\r\n        int[][] adjacencyList = new int[n][];\r\n\r\n        for(int i = 0; i < n; i++) {\r\n            int graphSize = graph[i].size();\r\n            int[] temp = new int[graphSize + 1];\r\n            temp[0] = i;\r\n\r\n            for(int j = 0; j < graph[i].size(); j++) {\r\n                temp[j + 1] = graph[i].get(j);\r\n            }\r\n\r\n            adjacencyList[i] = temp;\r\n        }\r\n\r\n        return adjacencyList;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity : O(N + M)\r\n    Space Complexity : O(N + M)\r\n\r\n    Where 'N' and 'M' denote the number of nodes and the number of edges in the graph.\r\n'''\r\n\r\nfrom typing import List, Tuple\r\n\r\ndef printAdjacency(n: int, m: int, edges: List[Tuple[int, int]]) -> List[List[int]]:\r\n    graph = [[] for _ in range(n)]\r\n    \r\n    # Creating the graph.\r\n    for edge in edges:\r\n        u, v = edge\r\n        graph[u].append(v)\r\n        graph[v].append(u)\r\n    \r\n    # Create an adjacency list of size 'N'.\r\n    adjacencyList = []\r\n    for i in range(n):\r\n        adj = [i] + graph[i]\r\n        adjacencyList.append(adj)\r\n    # adjacencyList = [[i] + neighbors for i, neighbors in enumerate(graph)]\r\n\r\n    \r\n    return adjacencyList\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}