{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12468,
            "title": "Create Target Array",
            "titleSlug": "create-target-array_1461496",
            "content": "<h4 id=\"you-are-given-an-array-of-integers-starting-with-an-array-of-n-elements-consisting-of-all-1-s-you-need-to-create-the-given-array-to-do-so-you-can-update-any-index-of-the-current-array-with-the-sum-of-all-elements-present-in-the-array\">You are given an array of integers. Starting with an array of &#39;N&#39; elements consisting of all 1\u2019s, you need to create the given array. To do so, you can update any index of the current array, with the sum of all elements present in the array.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Consider the starting array: [1, 1, 1, 1]. You can update any index of this array with 4 (the sum of all elements of the current array).\n</code></pre>\n\n<h4 id=\"you-can-perform-the-above-operations-any-number-of-times-your-task-is-to-check-if-it-is-possible-to-get-the-target-array-from-the-starting-array-of-all-1-s-or-not\">You can perform the above operations any number of times. Your task is to check if it is possible to get the target array from the starting array of all 1\u2019s or not.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019 which denotes the number of test cases or queries to be run. Then the test cases are as follows.\n\nThe first line of each test case contains a single integer \u2018N\u2019, denoting the size of the target array.\n\nThe next line contains \u2018N\u2019 space-separated integers denoting elements of the target array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print 1 if it is possible to create the target array, otherwise print 0.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^4\n1 &lt;= X &lt;= 10^9\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\n2 3\n3\n1 3 6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>In the first test case, \n\nStarting array: [1, 1], \nSum of elements of starting array = 2, putting sum on index = 0, array becomes: [2, 1],\n\nSum of elements of new array =  3, putting sum on index = 1. array becomes: [2, 3], which is equal to target array, hence the answer is 1.\n\nIn the second test case, \n\nIt is impossible to create the target array from [1, 1, 1], hence the answer is 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4\n4 1 1 7\n1\n2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, determine if it can be created from an initial array of 'N' ones by repeatedly updating any index of the current array with the sum of all its elements.  The task is to check if it's possible to reach the target array through this process.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^4",
                    "1 <= X <= 10^9",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n2\n2 3\n3\n1 3 6",
                        "output": "1\n0",
                        "explanation": "Test Case 1: The target array [2, 3] can be reached from [1, 1]. [1, 1] -> [2, 1] -> [2, 3].\nTest Case 2: The target array [1, 3, 6] cannot be reached from [1, 1, 1]."
                    },
                    {
                        "input": "2\n4\n4 1 1 7\n1\n2",
                        "output": "1\n0",
                        "explanation": "Test Case 1: The target array [4, 1, 1, 7] can be reached from [1,1,1,1].\nTest Case 2: The target array [2] cannot be reached from [1]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of creating all the possible arrays from an array with all 1\u2019s?</p>",
            "<p>Can you think of using a heap to solve the problem?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}