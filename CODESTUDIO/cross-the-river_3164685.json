{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16488,
            "title": "Cross the river",
            "titleSlug": "cross-the-river_3164685",
            "content": "<h4 id=\"you-have-to-cross-a-river-and-there-are-several-stones-across-the-length-of-the-river-you-are-given-an-array-of-stones-representing-the-distance-of-each-stone-from-your-side-of-the-river-your-task-is-to-reach-from-stone-at-position-0-to-the-last-stone-if-the-last-jump-was-x-units-the-next-jump-could-be-either-x-x-1-or-x-1-units-the-stones-array-will-be-in-ascending-order\">You have to cross a river, and there are several stones across the length of the river. You are given an array of \u2018stones\u2019 representing the distance of each stone from your side of the river. Your task is to reach from stone at position 0 to the last stone. If the last jump was \u2018x\u2019 units, the next jump could be either \u2018x\u2019, \u2018x + 1\u2019 or \u2018x - 1\u2019 units. The \u2018stones\u2019 array will be in ascending order.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Assume the first jump to be 1 unit.\n\nYou can jump only on a stone.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>You are given \u2018stones\u2019 = [0, 1, 3, 5], in this array you can go from 0 -&gt; 1 (1 unit), then from 1 -&gt; 3 (2 units), 3 -&gt; 5 (2 units). Hence the answer is True.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 representing the size of the array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers representing the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return True if you can reach the last stone, else return False.\n\nPrint a separate line for each test case.\n</code></pre>\n\n<h6 id=\"constraints\">Constraints:</h6>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 10^3\n1 &lt;= stones[i] &lt;= 10^9\nstones[0] = 0\n\nTime Limit: 1 sec.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function. \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\n0 1 3 5\n5\n0 1 3 6 7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For the first test case, \u2018stones\u2019 = [0, 1, 3, 5], in this array you can go from 0 -&gt; 1 (1 unit), then from 1 -&gt; 3 (2 units), 3 -&gt; 5 (2 units). Hence the answer is True.\n\nFor the second test, \u2018stones\u2019 = [0, 1, 3, 6, 7], in this array you can go from 0 -&gt; 1 (1 unit), then from 1 -&gt; 3 (2 units), 3 -&gt; 6 (3 units). Then possible moves are of length 3, 4 or 2, but none of the moves can reach 7 from 6. Hence the answer is False.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4\n1 3 5 6\n3\n1 2 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>False\nTrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "A frog is attempting to cross a river by hopping on stones. You are given a sorted array of integers `stones`, where each value represents the position of a stone. The frog starts at the first stone (position 0) and the first jump must be of length 1.  The frog can only jump to another stone. If the frog's last jump was of length `x`, the next jump can only be of length `x - 1`, `x`, or `x + 1`. Determine if the frog can reach the last stone.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 10^3",
                    "1 <= stones[i] <= 10^9",
                    "stones[0] = 0"
                ],
                "testcases": [
                    {
                        "input": "n = 4, stones = [0, 1, 3, 5]",
                        "output": "True",
                        "explanation": "The frog can jump from 0 -> 1 (jump length 1), 1 -> 3 (jump length 2), 3 -> 5 (jump length 2).  It can reach the last stone."
                    },
                    {
                        "input": "n = 5, stones = [0, 1, 3, 6, 7]",
                        "output": "False",
                        "explanation": "The frog can jump from 0 -> 1 (jump length 1), 1 -> 3 (jump length 2), 3 -> 6 (jump length 3). From 6, possible jump lengths are 2, 3, or 4. None of these allow the frog to reach 7."
                    },
                    {
                        "input": "n = 4, stones = [1, 3, 5, 6]",
                        "output": "False",
                        "explanation": "The frog starts at position 0 and the first value must be zero. So first value cant be 1."
                    },
                    {
                        "input": "n = 3, stones = [0, 1, 2]",
                        "output": "True",
                        "explanation": "The frog can jump from 0 -> 1 (jump length 1), and then 1 -> 2 (jump length 1). It can reach the last stone."
                    },
                    {
                        "input": "n = 5, stones = [0, 2, 4, 6, 8]",
                        "output": "False",
                        "explanation": "Starting from 0, first jump must be of length 1. Therefore can't reach to 2 directly."
                    },
                    {
                        "input": "n = 10, stones = [0,1,2,3,4,8,9,11,12,13]",
                        "output": "False",
                        "explanation": "Starting from 0 with jump 1 to 1, jump 1, jump 1 to 3, jump 1 to 4. now you need to jump 4 to 8. you cant reach 8 as the last jump was 1 then you can only have jumps of 0,1 or 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try every possible path recursively.</p>",
            "<p>Try to memoize, the previous approach.</p>",
            "<p>Try to do this problem iteratively.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}