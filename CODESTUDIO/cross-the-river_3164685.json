{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16488,
            "title": "Cross the river",
            "titleSlug": "cross-the-river_3164685",
            "content": "<h4 id=\"you-have-to-cross-a-river-and-there-are-several-stones-across-the-length-of-the-river-you-are-given-an-array-of-stones-representing-the-distance-of-each-stone-from-your-side-of-the-river-your-task-is-to-reach-from-stone-at-position-0-to-the-last-stone-if-the-last-jump-was-x-units-the-next-jump-could-be-either-x-x-1-or-x-1-units-the-stones-array-will-be-in-ascending-order\">You have to cross a river, and there are several stones across the length of the river. You are given an array of \u2018stones\u2019 representing the distance of each stone from your side of the river. Your task is to reach from stone at position 0 to the last stone. If the last jump was \u2018x\u2019 units, the next jump could be either \u2018x\u2019, \u2018x + 1\u2019 or \u2018x - 1\u2019 units. The \u2018stones\u2019 array will be in ascending order.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Assume the first jump to be 1 unit.\n\nYou can jump only on a stone.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>You are given \u2018stones\u2019 = [0, 1, 3, 5], in this array you can go from 0 -&gt; 1 (1 unit), then from 1 -&gt; 3 (2 units), 3 -&gt; 5 (2 units). Hence the answer is True.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 representing the size of the array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers representing the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return True if you can reach the last stone, else return False.\n\nPrint a separate line for each test case.\n</code></pre>\n\n<h6 id=\"constraints\">Constraints:</h6>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 10^3\n1 &lt;= stones[i] &lt;= 10^9\nstones[0] = 0\n\nTime Limit: 1 sec.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function. \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\n0 1 3 5\n5\n0 1 3 6 7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For the first test case, \u2018stones\u2019 = [0, 1, 3, 5], in this array you can go from 0 -&gt; 1 (1 unit), then from 1 -&gt; 3 (2 units), 3 -&gt; 5 (2 units). Hence the answer is True.\n\nFor the second test, \u2018stones\u2019 = [0, 1, 3, 6, 7], in this array you can go from 0 -&gt; 1 (1 unit), then from 1 -&gt; 3 (2 units), 3 -&gt; 6 (3 units). Then possible moves are of length 3, 4 or 2, but none of the moves can reach 7 from 6. Hence the answer is False.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4\n1 3 5 6\n3\n1 2 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>False\nTrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are tasked with helping a frog cross a river. The river has stones positioned at various distances from the starting bank. You are given an array 'stones' representing these distances in ascending order. The frog starts at the first stone (position 0) and aims to reach the last stone.  The frog can only jump onto a stone. The frog's first jump is assumed to be 1 unit. If the frog's last jump was 'x' units, the next jump can be either 'x', 'x + 1', or 'x - 1' units. Determine if the frog can successfully reach the last stone.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 10^3",
                    "1 <= stones[i] <= 10^9",
                    "stones[0] = 0",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "4\n0 1 3 5",
                        "output": "True",
                        "explanation": "The frog can jump from 0 to 1 (1 unit), then from 1 to 3 (2 units), and finally from 3 to 5 (2 units). Thus, the frog can reach the last stone."
                    },
                    {
                        "input": "5\n0 1 3 6 7",
                        "output": "False",
                        "explanation": "The frog can jump from 0 to 1 (1 unit), then from 1 to 3 (2 units), and then from 3 to 6 (3 units). However, from 6, the frog can only jump 2, 3 or 4 units. Jumping from 6 by 2, 3, or 4 won't land the frog on stone 7. Thus, the frog can't reach the last stone."
                    },
                    {
                        "input": "4\n1 3 5 6",
                        "output": "False",
                        "explanation": "The first stone must be at position 0, but here it's at 1. Therefore, it is impossible to start the journey and reach the last stone."
                    },
                    {
                        "input": "3\n1 2 3",
                        "output": "True",
                        "explanation": "First stone is not zero therefore return False."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try every possible path recursively.</p>",
            "<p>Try to memoize, the previous approach.</p>",
            "<p>Try to do this problem iteratively.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}