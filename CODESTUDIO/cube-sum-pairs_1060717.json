{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9492,
            "title": "Cube Sum Pairs",
            "titleSlug": "cube-sum-pairs_1060717",
            "content": "<h4 id=\"you-are-given-a-positive-integer-n-and-you-have-to-find-the-number-of-ways-to-represent-n-as-a-sum-of-cubes-of-two-integers-let-s-say-a-and-b-such-that\">You are given a positive integer N, and you have to find the number of ways to represent N as a sum of cubes of two integers(let\u2019s say A and B), such that:</h4>\n\n<pre><code>N = A^3 + B^3.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. A should be greater than or equal to one (A&gt;=1).\n2. B should be greater than or equal to zero (B&gt;=0).\n3. (A, B) and (B, A) should be considered different solutions, if A is not equal to B, i.e (A, B) and (B, A) will not be distinct if A=B.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer T denoting the number of test cases.\n\nThe first and only line of each test case consists of a single positive integer N.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an integer that denotes the count of the number of ways of representing N as a sum of cubes of 2 integers (A and B) in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t have to print anything, it has already been taken care of. Just Implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^3\n1 &lt;= N &lt;= 10^8\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n9\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>There are 2 ways to represent N in the (A^3 + B^3) form ie. {(1, 2), (2, 1)}.\nEg. 1^3 + 2^3 = 9 and 2^3 + 1^3 = 9. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n27\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>There is only 1 way to represent N in the (A^3 + B^3) form ie. {(3, 0)}.\nEg. 3^3 + 0^3 = 27.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 103,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer N, find the number of ways to represent N as the sum of cubes of two integers, A and B (N = A^3 + B^3), where A >= 1 and B >= 0. Note that (A, B) and (B, A) are considered different solutions if A != B.",
                "constraints": [
                    "1 <= T <= 10^3",
                    "1 <= N <= 10^8",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "9",
                        "output": "2",
                        "explanation": "The two possible combinations are (1, 2) and (2, 1), since 1^3 + 2^3 = 9 and 2^3 + 1^3 = 9."
                    },
                    {
                        "input": "27",
                        "output": "1",
                        "explanation": "The only possible combination is (3, 0), since 3^3 + 0^3 = 27."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Iterative over all possible values of (A, B).</p>",
            "<p>Iterate over all possible \u2018A\u2019 values and check if N - \u2018A\u2019^3 is a perfect cube or not.</p>",
            "<p>Iterate over only valid \u2018A\u2019 values and check if N - \u2018A\u2019^3 is a perfect cube or not.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            },
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n\t\tTime Complexity: O(N^(1/3))\n\t\tSpace Complexity: O(1)\n\t\t\n\t\twhere N is the given integer.\n*/\n\n// Function to find whether an integer is perfect cube or not.\nbool isCube(int c) {\n\n    // Finding the cubeRoot of c.\n    int cubeRoot = cbrtl(c);\n    /*\n    \tIf cube of cubeRoot is equals to c,\n    \tthen it is perfect cube.\n    */\n    if (cubeRoot * cubeRoot * cubeRoot == c) {\n        return true;\n    }\n    \n    return false;\n}\n\n\nint countCubeSumPairs(int n) {\n\n    // Counter counting the number of pairs of (a,b).\n    int count = 0;\n    // Finding the valid upper limit value of 'a'.\n    int cubeRoot = cbrtl(n) + 1;\n    // Iterating through all the possible values of 'a'.\n    for (int a = 1; a <= cubeRoot; a++) {\n        // Calculating value of 'a'^3.\n        int a3 = a * a * a;\n        // Calculating 'n' - 'a'^3 which is the possible value of 'b'^3.\n        int possibleB3 = n - a3;\n        /*\n        \tIf possibleB3 is a positive interger and a perfect cube as well,\n        \tin that case we can find the value of 'b' for given 'a'.\n        */\n        if (possibleB3 >= 0 && isCube(possibleB3)) {\n            count += 1;\n        }\n\n    }\n\n    // Returning the count of required (a,b) pairs for given 'n'.\n    return count;\n}\n\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n\t\tTime Complexity: O(N^(1/3))\n\t\tSpace Complexity: O(1),\n\t\t\n\t\twhere N is the given integer.\n'''\n\nfrom numpy import cbrt\nimport math \n\n# Function to find whether an integer is perfect cube or not.\ndef isCube(c):\n\n    # Finding the cubeRoot of c.\n    cubeRoot1 = math.ceil(cbrt(c))\n    cubeRoot2 = math.floor(cbrt(c))\n    ''' \n        If cube of cubeRoot is equals to c,\n        then it is perfect cube.\n    '''\n    if (cubeRoot1 ** 3 == c or cubeRoot2 ** 3 == c):\n        return True\n    return False\n\ndef countCubeSumPairs(n):\n\n    # Counter counting the number of pairs of (a,b).\n    count = 0\n    # Finding the valid upper limit value of 'a'.\n    cubeRoot = int(cbrt(n)) + 1\n    # Iterating through all the possible values of 'a'.\n    for a in range(1, cubeRoot):\n        # Calculating value of 'a'^3.\n        a3 = a * a * a\n        # Calculating 'n' - 'a'^3 which is the possible value of 'b'^3.\n        possibleB3 = n - a3\n        ''' \n            If possibleB3 is a positive interger and a perfect cube as well,\n            in that case we can find the value of 'b' for given 'a'.\n        '''\n        \n        if (possibleB3 >= 0) and (isCube(possibleB3)):\n            count += 1\n      \n    # Returning the count of required (a,b) pairs for given 'n'.\n    return count\n\n\n\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n\tTime Complexity: O(N^(1/3))\r\n\tSpace Complexity: O(1),\r\n\t\r\n\twhere N is the given integer.\r\n*/\r\n\r\npublic class Solution{\r\n\r\n\t// Function to find whether an integer is perfect cube or not.\r\n\tpublic static boolean isCube(int c) {\r\n\t\t// Finding the cubeRoot of c.\r\n\t\tint cubeRoot = (int)Math.cbrt(c);\r\n\t\t/* \r\n\t\t\tIf cube of cubeRoot is equals to c, \r\n\t\t\tthen it is a perfect cube. \r\n\t\t*/\r\n\t\tif(cubeRoot * cubeRoot * cubeRoot == c) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic static int countCubeSumPairs(int n) {\r\n\t\t// Counter counting the number of pairs of (a,b).\r\n\t\tint count = 0;\r\n\t\t// Finding the valid upper limit value of 'a'.\r\n\t\tint cubeRoot = (int)Math.cbrt(n);\r\n\t\t// Iterating through all the possible values of 'a'.\r\n\t\tfor (int a = 1; a <= cubeRoot; a++) {\r\n\t\t\t// Calculating value of 'a'^3.\r\n\t\t\tint a3 = a * a * a;\r\n\t\t\t// Calculating 'n' - 'a'^3 which is the possible value of 'b'^3.\r\n\t\t\tint possibleB3 = n - a3;\r\n\t\t\t/* \r\n\t\t\t\tIf possibleB3 is a positive interger and a perfect cube as well,\r\n        \t \tin that case we can find the value of 'b' for given 'a'.\r\n\t\t\t*/\r\n\t\t\tif(possibleB3 >= 0 && isCube(possibleB3) == true) {\r\n\t\t\t\tcount += 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\t// Returning the count of required (a,b) pairs for given 'n'.\r\n\t\treturn count;\r\n\t}\r\n\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}