{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11702,
            "title": "Curved Edge",
            "titleSlug": "curved-edge_1385184",
            "content": "<h4 id=\"you-are-given-a-list-of-edges-in-a-graph-containing-n-nodes-an-edge-is-made-up-of-two-parts-a-normal-link-and-a-special-link-both-links-have-their-respective-lengths-you-can-use-either-of-the-links-to-travel-between-two-edges-your-task-is-to-determine-the-shortest-distance-between-the-two-given-nodes-such-that-at-most-one-possibly-zero-special-link-is-included-in-this-path\">You are given a list of edges in a graph containing \u2018N\u2019 nodes. An edge is made up of two parts, a normal link, and a special link. Both links have their respective lengths. You can use either of the links to travel between two edges. Your task is to determine the shortest distance between the two given nodes such that at most one(possibly, zero) special link is included in this path.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. All the edges are directed.\n\n2. Multiple edges can be present between two nodes.\n\n3. The given graph is a single connected component.\n\n4. It does not have any self-loop.\n\n5. At least one path always exists between the two given nodes.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019, which denotes the number of test cases to be run. Then, the &#39;T&#39; test cases follow. \n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018M\u2019, denoting the number of nodes present in the graph and the number of edges present in the graph respectively. Then, \u2018M\u2019 lines follow.\n\nEach line contains four space-separated integers, \u2018A\u2019, \u2018B\u2019, \u2018W1\u2019, \u2018W2\u2019, denoting that there is a normal link between \u2018A\u2019 and \u2018B\u2019 having a length \u2018D1\u2019 and a special link having a length \u2018D2\u2019.\n\nThe last line of each test case contains two space-separated integers, \u2018X\u2019 and \u2018Y\u2019, denoting the nodes between which the shortest distance has to be calculated.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return an integer denoting the shortest between the two given nodes. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt; 10^3\nN-1 &lt;= M &lt;= 10^3\n1 &lt;= A,B,X,Y &lt;= N\n1 &lt;= D1,D2 &lt;= 10^6\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n3 2\n1 2 2 3\n2 3 4 2\n1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-3-1-8847.png\" alt=\"diagram\"></p>\n\n<pre><code>In the diagram, we can observe that there is no direct edge between node 1 and node 3. But we can go from node 1 to node 2 using the normal link of length 2 and then from node 2 to node 3 using the special link of length 2. So the total length will be 4 and we can clearly see that no other path can be smaller than this.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n3 3\n1 2 3 2\n2 3 4 2\n1 3 7 8\n1 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-3-2-8848.png\" alt=\"diagram\"></p>\n\n<pre><code>In the diagram, we can observe that there is a direct edge between node 1 and node 3. But we can observe that the path that directly connects node 1 to node 3 is longer than the path that goes from node 1 to node 2 and then from node 2 to node 3. Although lengths of both the special links are smaller than their corresponding normal links, we can choose at most 1 special link. So we go from node 1 to node 2 using a normal link having a length of 3 and then from node 2 to node 3 using a special link having length 2. So, the total length of this path becomes 5 which is the least among all other possible paths.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph with 'N' nodes, represented by a list of 'M' edges, find the shortest distance between two specified nodes, 'src' and 'dst'. Each edge has two associated weights: a normal link weight and a special link weight. You can traverse an edge using either the normal or special link, but you can use at most one special link in the entire path from 'src' to 'dst'.  The graph is a single connected component and contains no self-loops. Multiple edges between two nodes are allowed.  Return the shortest distance satisfying the single special link constraint.",
                "constraints": [
                    "1 <= N <= 10^3",
                    "N-1 <= M <= 10^3",
                    "1 <= A, B, src, dst <= N",
                    "1 <= D1, D2 <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "n = 3, edges = [[1, 2, 2, 3], [2, 3, 4, 2]], src = 1, dst = 3",
                        "output": "4",
                        "explanation": "The shortest path from node 1 to node 3 is 1 -> 2 (normal link, weight 2) and 2 -> 3 (special link, weight 2). Total weight: 2 + 2 = 4."
                    },
                    {
                        "input": "n = 3, edges = [[1, 2, 3, 2], [2, 3, 4, 2], [1, 3, 7, 8]], src = 1, dst = 3",
                        "output": "5",
                        "explanation": "The shortest path from node 1 to node 3 is 1 -> 2 (normal link, weight 3) and 2 -> 3 (special link, weight 2). Total weight: 3 + 2 = 5. Using the direct edge 1->3 with either normal or special link would result in a longer path (7 or 8)."
                    },
                    {
                        "input": "n = 4, edges = [[1, 2, 1, 5], [2, 3, 2, 6], [3, 4, 3, 7], [1, 4, 10, 11]], src = 1, dst = 4",
                        "output": "6",
                        "explanation": "The shortest path from node 1 to node 4 is 1 -> 2 (normal link, weight 1), 2 -> 3 (normal link, weight 2), and 3 -> 4 (normal link, weight 3). Total weight: 1 + 2 + 3 = 6.  Using the direct edge 1->4 would have a cost of 10 or 11. Using any special links would only increase the path cost."
                    },
                    {
                        "input": "n = 4, edges = [[1, 2, 5, 1], [2, 3, 3, 2], [3, 4, 4, 3], [1, 4, 12, 10]], src = 1, dst = 4",
                        "output": "10",
                        "explanation": "The shortest path from 1 to 4 uses the special link between 1 and 2 (weight 1), normal link from 2 to 3(weight 3), and normal link from 3 to 4 (weight 4), resulting in a total weight of 1+3+4 = 8.  Then use edge 1-4 with special link, resulting in 10. Path with shortest distance will be 10."
                    },
                    {
                        "input": "n = 2, edges = [[1, 2, 10, 1]], src = 1, dst = 2",
                        "output": "1",
                        "explanation": "The shortest path from node 1 to node 2 is using the special link, which has a weight of 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about the Djikstra's Algorithm</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}