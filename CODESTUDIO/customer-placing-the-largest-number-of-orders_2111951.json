{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14331,
            "title": "Customer Placing the Largest Number of Orders",
            "titleSlug": "customer-placing-the-largest-number-of-orders_2111951",
            "content": "<pre><code>Table: Orders\n\n+-----------------+----------+\n| Column Name     | Type     |\n+-----------------+----------+\n| order_number    | int      |\n| customer_number | int      |\n+-----------------+----------+\norder_number is the primary key for this table.\nThis table contains information about the order ID and the customer ID.\n\n\nWrite an SQL query to find the customer_number for the customer who has placed the largest number of orders.\n\nIt is guaranteed that exactly one customer will have placed more orders than any other customer.\n\nThe query result format is in the following example:\n\n Orders table:\n+--------------+-----------------+\n| order_number | customer_number |\n+--------------+-----------------+\n| 1            | 1               |\n| 2            | 2               |\n| 3            | 3               |\n| 4            | 3               |\n+--------------+-----------------+\n\nResult table:\n+-----------------+\n| customer_number |\n+-----------------+\n| 3               |\n+-----------------+\n\nThe customer with number 3 has two orders, which is greater than either customer 1 or 2 because each of them only has one order. \nSo the result is customer_number 3.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a table named 'Orders' with columns 'order_number' (primary key) and 'customer_number', determine the 'customer_number' of the customer who has placed the most orders. Assume that only one customer has placed more orders than any other customer.",
                "constraints": [
                    "order_number is the primary key for the Orders table.",
                    "There is exactly one customer with the maximum number of orders.",
                    "The 'Orders' table will always contain at least one row."
                ],
                "testcases": [
                    {
                        "input": "orders=[(1, 1), (2, 2), (3, 3), (4, 3)]",
                        "output": "3",
                        "explanation": "Customer 3 has placed two orders (order_number 3 and 4), while customers 1 and 2 have each placed only one order. Therefore, customer 3 is the customer with the most orders."
                    },
                    {
                        "input": "orders=[(1, 5), (2, 5), (3, 5), (4, 5), (5, 1)]",
                        "output": "5",
                        "explanation": "Customer 5 has placed four orders (order_number 1, 2, 3, and 4), while customer 1 has only placed one order. Therefore, customer 5 is the customer with the most orders."
                    },
                    {
                        "input": "orders=[(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1)]",
                        "output": "1",
                        "explanation": "Customer 1 placed all 7 orders, thus customer 1 is the customer with the most orders."
                    },
                    {
                        "input": "orders=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]",
                        "output": "1",
                        "explanation": "Each customer placed one order. It's guaranteed that only one customer has the most orders. Based on the problem's implicit ordering due to the way database queries are usually processed, we assume that in case of a tie (all customers have same number of orders), the smallest customer_number should be picked. While not explicitly stated, common database behaviours might lead to a consistent but arbitrary selection."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}