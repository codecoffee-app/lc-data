{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9303,
            "title": "Cut Logs",
            "titleSlug": "cut-logs_982770",
            "content": "<h4 id=\"ninja-is-a-log-cutter-he-has-a-k-number-of-axes-and-an-infinite-amount-of-logs-but-ninja-has-a-log-cutting-stand-that-has-a-capacity-of-n-which-means-he-can-only-try-to-cut-at-max-n-logs-in-one-go-all-the-axes-are-exactly-the-same-and-can-cut-up-to-some-logs-in-one-go-if-we-try-to-cut-more-logs-than-its-capacity-the-axe-will-break\">Ninja is a log cutter. He has a \u2018K\u2019 number of axes and an infinite amount of logs. But, Ninja has a log cutting stand that has a capacity of \u2018N\u2019, which means he can only try to cut at max \u2018N\u2019 logs in one go. All the axes are exactly the same and can cut up to some logs in one go. If we try to cut more logs than its capacity the axe will break.</h4>\n\n<h4 id=\"to-improve-efficiency-ninja-wants-to-know-how-many-logs-he-can-cut-with-an-axe-in-one-go-without-breaking-it-but-he-wants-to-know-this-is-the-minimum-number-of-moves-and-in-the-allotted-number-of-axes\">To improve efficiency, Ninja wants to know how many logs he can cut with an axe in one go without breaking it. But, he wants to know this is the minimum number of moves and in the allotted number of axes.</h4>\n\n<h4 id=\"can-you-calculate-the-minimum-number-of-moves-in-which-ninja-can-know-the-limit-of-axes\">Can you calculate the minimum number of moves in which Ninja can know the limit of axes?</h4>\n\n<h5 id=\"some-points-to-notice-about-axes-are\">Some points to notice about axes are:</h5>\n\n<pre><code>1. An axe that is used to cut a lesser or equal number of logs than its limit can be used again.\n\n2. An axe that is used to cut more logs than its limit will be broken. Thus, it cannot be used again.\n\n3. All the axes have the same limit of cutting logs until broken.\n\n4. An axe may also cut N logs or may not even cut a single log.\n</code></pre>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>Let the number of axes (K) be 2 &amp; the capacity of the log cutting stand (N) be 6.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot_2020-12-21-untitled-diagram-drawio-diagrams-net-1-6744.png\" alt=\"Example\"></p>\n\n<pre><code>From the above example, we can see that the maximum number of moves is 3 for 2 axes and a capacity of 6 logs.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of queries or test cases. \n\nThe first and only line of each input consists of 2 space-separated integers \u2018K\u2019 and \u2018N\u2019 denoting the number of axes and the capacity of log cutting stand simultaneously.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the minimum number of moves required to know the limit of the axe.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up</h5>\n\n<pre><code>Can you solve this in the worst-case time complexity of N ^ (1/3)\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= K &lt;= 100\n1 &lt;= N &lt;= 10000\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 6\n3 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n2\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For test case 1: Refer to the example explained above.\n\nFor test case 2:\nFirst, try to cut 2 logs:\nIf it cuts 2 logs, try to cut 3 logs.\nIf it couldn\u2019t cut 2 logs, try to cut 1 log.\n\nThus, the maximum number of moves required are 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4 11\n3 8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 43,
            "dislikes": "NA",
            "rephrased": {
                "body": "A log cutter, Ninja, has 'K' axes and a log cutting stand with a capacity of 'N' logs.  All axes are identical.  Ninja wants to determine the maximum number of logs an axe can cut in one go *without* breaking it, using the minimum number of attempts. If an axe cuts more logs than its limit, it breaks and cannot be reused.  An axe can also cut N logs or may not even cut a single log.\n\nYour task is to calculate the minimum number of attempts needed to find the maximum number of logs an axe can cut without breaking, given the number of axes 'K' and the log cutting stand capacity 'N'.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= K <= 100",
                    "1 <= N <= 10000"
                ],
                "testcases": [
                    {
                        "input": "2 6",
                        "output": "3",
                        "explanation": "With 2 axes and capacity 6, here's the optimal strategy:\n1. Cut 3 logs. If it breaks, the limit is less than 3. If it doesn't, the limit is at least 3.\n2. If it broke in the first attempt, use the second axe to test 1 log. If it breaks, the limit is 0; else try 2 logs to know if limit is 1 or 2. So, maximum number of moves are 3.\n3. If it didn't break in the first attempt, use the second axe to test 5 logs. If it breaks, the limit is 3 or 4. Else, the limit is 6.\n4. If it broke in the third step, try to cut 4 logs. So, maximum number of moves are 3."
                    },
                    {
                        "input": "3 3",
                        "output": "2",
                        "explanation": "With 3 axes and capacity 3, test with 2 logs. If it fails, test with 1 log with the second axe. If the first attempt succeeds, test with 3 logs using the second axe."
                    },
                    {
                        "input": "4 11",
                        "output": "4",
                        "explanation": null
                    },
                    {
                        "input": "3 8",
                        "output": "4",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The very first approach can be to try cutting logs and find the one with the minimum number of moves.</p>",
            "<p>We are solving this problem by solving its subproblems and then combining the solutions of those subproblems. If we analyze carefully, we will see that we are solving the same subproblems multiple times. Thus, this problem exhibits<strong> overlapping subproblems</strong>. This means, in this approach, we will eliminate the need for solving the same subproblems again and again.&nbsp;</p><p>To optimize the overlapping sub-problem calculation, we will use memoization by storing answers for each recursive state.</p>",
            "<p>Initially, we were breaking the large problem into small problems but now, let us look at it differently. Let us solve the small problem first and then reach the final answer. Thus we will be using a bottom-up approach now.&nbsp;</p>",
            "<p>It is similar to the previous approach but in the previous approach, we are finding the point with the minimum required moves in a loop. But in this approach, we will optimize that.</p>",
            "<p>Now let's just solve the problem in another way. Previously we were solving the problem for K axes and N log cutting capacity. Now let's just calculate what is the maximum number of log capacity we can check with K axes in each move.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}