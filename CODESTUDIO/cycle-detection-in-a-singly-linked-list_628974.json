{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 5672,
            "title": "Cycle Detection in a Singly Linked List",
            "titleSlug": "cycle-detection-in-a-singly-linked-list_628974",
            "content": "<h4 id=\"you-are-given-a-singly-linked-list-of-integers-return-true-if-it-has-a-cycle-else-return-false\">You are given a Singly Linked List of integers. Return true if it has a cycle, else return false.</h4>\n\n<p><br/></p>\n\n<h4 id=\"a-cycle-occurs-when-a-nodes-next-points-back-to-a-previous-node-in-the-list\">A cycle occurs when a node&#39;s next points back to a previous node in the list.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>In the given linked list, there is a cycle, hence we return true.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sa1-27740.png\" alt=\"Sample Example 1\"><br>\n<br/>    </p>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of each test case contains the elements of the singly linked list separated by a single space and terminated by -1. Hence -1 would never be a list element.\n</code></pre>\n\n<p><br/></p>\n\n<pre><code>The second line contains the integer position &#39;pos&#39;, representing the position (0-indexed) in the linked list where the tail connects. If &#39;pos&#39; is -1, there is no cycle in the linked list.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>The only output line contains &#39;true&#39; if the linked list has a cycle or &#39;false&#39; otherwise.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t have to print by yourself explicitly. It has been taken care of.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1 2 3 4 -1\n1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>true\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>The linked list given in the input is as follows:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/in1-27737.png\" alt=\"Sample Input 1\">\n<br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1 2 3 4 -1\n0\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>true\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>The linked list given in the input is as follows:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/in2-27738.png\" alt=\"Sample Input 2\">\n<br/></p>\n\n<h5 id=\"sample-input-3\">Sample Input 3 :</h5>\n\n<pre><code>5 -1\n-1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-3\">Sample Output 3 :</h5>\n\n<pre><code>false\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-3\">Explanation of Sample Input 3:</h5>\n\n<pre><code> The linked list given in the input is as follows:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/in3-27739.png\" alt=\"Sample Input 3\">\n<br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to solve this problem in O(n).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-space-complexity\">Expected Space Complexity:</h5>\n\n<pre><code>Try to solve this problem in O(1).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>0 &lt;= n &lt;= 10^6\n-1 &lt;= pos &lt; n\n-10^9 &lt;= data &lt;= 10^9 and data != -1\n\nWhere &#39;n&#39; is the size of the singly linked list, &#39;pos&#39; represents the position (0-indexed) in the linked list where the tail connects to, and &#39;data&#39; is the Integer data of the singly linked list.\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 181,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list of integers, determine if it contains a cycle. A cycle exists if any node's 'next' pointer points back to a previously visited node in the list.",
                "constraints": [
                    "0 <= n <= 10^6",
                    "-1 <= pos < n",
                    "-10^9 <= data <= 10^9 and data != -1",
                    "n is the size of the singly linked list.",
                    "pos represents the 0-indexed position where the tail connects (or -1 if no cycle).",
                    "data is the integer data of the singly linked list.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 -1\n1",
                        "output": "true",
                        "explanation": "The linked list 1 -> 2 -> 3 -> 4 has a cycle because the tail (4) points back to the node at index 1 (2)."
                    },
                    {
                        "input": "1 2 3 4 -1\n0",
                        "output": "true",
                        "explanation": "The linked list 1 -> 2 -> 3 -> 4 has a cycle because the tail (4) points back to the node at index 0 (1)."
                    },
                    {
                        "input": "5 -1\n-1",
                        "output": "false",
                        "explanation": "The linked list contains only one node (5) and there is no cycle because tail doesn't connect back to any previous node."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of checking each node as the starting point for the cycle.</p>",
            "<p>Think of visiting the nodes one by one and try to remember if you have already visited the node you are currently looking at?</p>",
            "<p>Think of 2 people starting from the initial node. One person takes a single jump and the other person takes twice the first person's jump each time. Extend this idea on every node and track the destination of both the persons. Draw it on a paper and find what happens!</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*  \n    Time Complexity : O(N)\n    Space Complexity : O(1)\n    \n    Where N is number of Nodes in Linked-List.\n*/\n\nbool detectCycle(Node *head)\n{\n    if (head == NULL || head->next == NULL)\n    {\n        return false;\n    }\n\n    //  Slow Pointer - This will be incremented by 1 Nodes.\n    Node *slow = head;\n    //  Fast Pointer  - This will be incremented by 2 Nodes.\n    Node *fast = head->next;\n    \n    while (slow != fast)\n    {\n        //  We reached the end of the List and haven't found any Cycle.\n        if (fast == NULL || fast->next == NULL)\n        {\n            return false;\n        }\n        slow = slow->next;\n        fast = fast->next->next;\n    }\n\n    //  We found a Cycle.\n    return true;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "''' \n    Time Complexity : O(N)\n    Space Complexity : O(1)\n    \n    Where N is number of Nodes in Linked-List.\n'''\n\ndef detectCycle(head) :\n\n    if (head == None or head.next == None) :\n        return False  \n\n    #  Slow Pointer - This will be incremented by 1 Nodes.\n    slow = head  \n    \n    #  Fast Pointer  - This will be incremented by 2 Nodes.\n    fast = head.next  \n    \n    while (slow != fast) :\n\n        #  We reached the end of the List and haven't found any Cycle.\n        if (fast == None or fast.next == None) :\n            return False  \n\n        slow = slow.next  \n        fast = fast.next.next  \n    \n\n    #  We found a Cycle.\n    return True  \n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space Complexity : O(1)\r\n\r\n    Where N is number of Nodes in Linked-List.\r\n*/\r\n\r\npublic class Solution {\r\n\r\n    public static boolean detectCycle(Node head) {\r\n\r\n        if (head == null || head.next == null) {\r\n            return false;\r\n        }\r\n\r\n        //  Slow Pointer - This will be incremented by 1 Nodes.\r\n        Node slow = head;\r\n        //  Fast Pointer  - This will be incremented by 2 Nodes.\r\n        Node fast = head.next;\r\n\r\n        while (slow != fast) {\r\n\r\n            //  We reached the end of the List and haven't found any Cycle.\r\n            if (fast == null || fast.next == null) {\r\n                return false;\r\n            }\r\n\r\n            slow = slow.next;\r\n            fast = fast.next.next;\r\n        }\r\n\r\n        //  We found a Cycle.\r\n        return true;\r\n\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}