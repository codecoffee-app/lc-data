{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9578,
            "title": "Cycle Detection In Undirected Graph",
            "titleSlug": "cycle-detection-in-undirected-graph_1062670",
            "content": "<h4 id=\"you-have-been-given-an-undirected-graph-with-n-vertices-and-m-edges-the-vertices-are-labelled-from-1-to-n\">You have been given an undirected graph with &#39;N&#39; vertices and &#39;M&#39; edges. The vertices are labelled from 1 to &#39;N&#39;.</h4>\n\n<h4 id=\"your-task-is-to-find-if-the-graph-contains-a-cycle-or-not\">Your task is to find if the graph contains a cycle or not.</h4>\n\n<h4 id=\"a-path-that-starts-from-a-given-vertex-and-ends-at-the-same-vertex-traversing-the-edges-only-once-is-called-a-cycle\">A path that starts from a given vertex and ends at the same vertex traversing the edges only once is called a cycle.</h4>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>In the below graph, there exists a cycle between vertex 1, 2 and 3. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-90-6892.png\" alt=\"Example\"></p>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. There are no parallel edges between two vertices.\n\n2. There are no self-loops(an edge connecting the vertex to itself) in the graph.\n\n3. The graph can be disconnected.\n</code></pre>\n\n<h4 id=\"for-example\">For Example :</h4>\n\n<pre><code>Input: N = 3 , Edges =  [[1, 2], [2, 3], [1, 3]].\nOutput: Yes\n\nExplanation : There are a total of 3 vertices in the graph. There is an edge between vertex 1 and 2, vertex 2 and 3 and vertex 1 and 3. So, there exists a cycle in the graph. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains two single space-separated integers \u2018N\u2019 and \u2018M\u2019 representing the total number of vertices and edges, respectively.\n\nThe next \u2018M\u2019 lines contain two single space-separated integers representing an edge of the graph.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the only line of output will return \u201cYes\u201d if there exists a cycle in the graph. Else print \u201cNo\u201d.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 5000\n0 &lt;= M &lt;= min(5000, (N * (N - 1)) / 2)\n1 &lt;= edges[i][0] &lt;= N \n1 &lt;= edges[i][1] &lt;= N \n\nTime Limit: 1 sec \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n3 2\n1 2\n2 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>No\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample output 1:</h5>\n\n<pre><code> The above graph can be represented as \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-92-6893.png\" alt=\"Example\"></p>\n\n<pre><code>There are a total of 3 vertices in the graph.There is an edge between vertex 1 and 2 and vertex 2 and 3. So, there is no cycle present in the graph. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4 0 \n4 3\n1 4\n4 3\n3 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>No\nYes\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 211,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph with 'N' vertices (labeled from 1 to 'N') and 'M' edges, determine if the graph contains a cycle. A cycle is a path that starts and ends at the same vertex, traversing each edge only once.  The graph may be disconnected, and there are no parallel edges or self-loops.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 5000",
                    "0 <= M <= min(5000, (N * (N - 1)) / 2)",
                    "1 <= edges[i][0] <= N",
                    "1 <= edges[i][1] <= N",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 2\n1 2\n2 3",
                        "output": "No",
                        "explanation": "The graph has 3 vertices and 2 edges: (1, 2) and (2, 3).  There is no cycle in this graph."
                    },
                    {
                        "input": "4 0",
                        "output": "No",
                        "explanation": "The graph has 4 vertices and 0 edges. Therefore, there cannot be a cycle."
                    },
                    {
                        "input": "4 3\n1 4\n4 3\n3 1",
                        "output": "Yes",
                        "explanation": "The graph has 4 vertices and 3 edges: (1, 4), (4, 3), and (3, 1). These edges form a cycle: 1 -> 4 -> 3 -> 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use DFS to solve the problem.</p>",
            "<p>Try to use BFS to solve the problem.</p>",
            "<p>Try to use the Union-find algorithm to solve the problem.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity : O(M * log(N))\n    Space Complexity : O(N)\n\n    where 'N' is the number of vertices and\n    'M' is the number of edges in the graph.\n*/\n\nint findparent (int i, vector<int>& parent)\n{\n    if (i == parent[i])\n    {\n        return i;\n    }\n    return parent[i] = findparent (parent[i], parent);\n}\n\nstring cycleDetection (vector<vector<int>>& edges, int n, int m)\n{\n    vector<int> parent(n + 1, 0);\n    vector<int> rank(n + 1, 0);\n\n    for (int i = 1; i <= n; i++)\n    {\n        rank[i] = 1;\n        parent[i] = i;\n    }\n\n    for (vector<int>& ar : edges)\n    {\n        int u = ar[0];\n        int v = ar[1];\n\n        int p1 = findparent (u, parent);\n        int p2 = findparent (v, parent);\n\n        if (p1 != p2)\n        {\n            if (rank[p1] < rank[p2])\n            {\n                parent[p1] = p2;\n            }\n            else if (rank[p1] > rank[p1])\n            {\n                parent[p2] = p1;\n            }\n            else\n            {\n                parent[p1] = p2;\n                rank[p2]++;\n            }\n        }\n        else\n        {\n            return \"Yes\";\n        }\n    }\n    \n    return \"No\";\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity : O(M * log(N))\r\n    Space Complexity : O(N)\r\n\r\n    where N is the number of vertices and\r\n    M is the number of edges in the graph.\r\n'''\r\n\r\n\r\ndef findparent(i, parent):\r\n\r\n    if(i == parent[i]):\r\n        return i\r\n    \r\n    parent[i] = findparent(parent[i], parent)\r\n\r\n    return parent[i]\r\n\r\n\r\ndef cycleDetection(edges, n, m):\r\n\r\n    parent = [0] * (n + 1)\r\n    rank = [0] * (n + 1)\r\n\r\n    for i in range(n + 1):\r\n\r\n        rank[i] = 1\r\n        parent[i] = i\r\n\r\n    for ar in edges:\r\n\r\n        u = ar[0]\r\n        v = ar[1]\r\n\r\n        p1 = findparent(u, parent)\r\n        p2 = findparent(v, parent)\r\n\r\n        if(p1 != p2):\r\n            if(rank[p1] < rank[p2]):\r\n                parent[p1] = p2\r\n            elif(rank[p1] > rank[p1]):\r\n                parent[p2] = p1\r\n            else:\r\n                parent[p1] = p2\r\n                rank[p2] += 1\r\n                \r\n        else:\r\n            return \"Yes\"\r\n\r\n    return \"No\"",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time Complexity : O(M * log(N))\n    Space Complexity : O(N)\n\n    where 'N' is the number of vertices and\n    'M' is the number of edges in the graph.\n*/\n\npublic class Solution {\n  public static int findparent(int i, int[] parent) {\n    if (i == parent[i]) {\n      return i;\n    }\n    return parent[i] = findparent(parent[i], parent);\n  }\n\n  public static String cycleDetection(int[][] edges, int n, int m) {\n\n    int[] parent = new int[n + 1];\n    int[] rank = new int[n + 1];\n\n    for (int i = 1; i <= n; i++) {\n      rank[i] = 1;\n      parent[i] = i;\n    }\n\n    for (int[] ar: edges) {\n      int u = ar[0];\n      int v = ar[1];\n\n      int p1 = findparent(u, parent);\n      int p2 = findparent(v, parent);\n\n      if (p1 != p2) {\n        if (rank[p1] < rank[p2]) {\n          parent[p1] = p2;\n        } else if (rank[p1] > rank[p1]) {\n          parent[p2] = p1;\n        } else {\n          parent[p1] = p2;\n          rank[p2]++;\n        }\n      } else {\n        return \"Yes\";\n      }\n    }\n\n    return \"No\";\n  }\n\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}