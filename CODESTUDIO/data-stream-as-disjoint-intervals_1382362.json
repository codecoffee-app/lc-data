{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11688,
            "title": "Data Stream As Disjoint Intervals",
            "titleSlug": "data-stream-as-disjoint-intervals_1382362",
            "content": "<h4 id=\"you-are-given-a-stream-of-n-non-negative-integers-as-the-input-and-you-have-to-group-the-stream-of-integers-in-the-form-of-disjoint-intervals\">You are given a stream of <em><strong>&#39;n&#39;</strong></em> non-negative integers as the input, and you have to group the stream of integers in the form of disjoint intervals.</h4>\n\n<p><br></p>\n\n<h4 id=\"your-task-is-to-implement-the-disjointintervals-class-having-the-two-functions\">Your task is to Implement the \u2018DisjointIntervals\u2019 class having the two functions:</h4>\n\n<p><br></p>\n\n<pre><code>1) The first function is \u2018addInteger(int val)\u2019, which takes an integer \u2018val\u2019 as an argument and adds it to the stream.\n\n2) The second function is \u2018getDisjointIntervals()\u2019, which returns a summary of the integers in the stream currently as a list of disjoint intervals.\n</code></pre>\n\n<p><br></p>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Input: &#39;n&#39; = 5 , stream =  [\n                  [1, 1],\n                  [1, 3],\n                  [2],\n                  [1, 2],\n                  [2],\n                ]\n\nOutput: [\n          [ [1, 1],  [3, 3] ],\n          [ [1,3] ] \n        ]\n\nExplanation: First of all, 1 is added to the stream, and the disjoint interval will be {1, 1}. When 3 will be added to the stream, then the disjoint intervals will be {1, 1}, {3, 3}. But when 2 is added to the stream then the disjoint interval will be {1, 3} as 2 lies between these two sets of disjoint intervals, and both the intervals {1, 1} and {3, 3} merge.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first input line contains an integer \u2018n\u2019, representing the total number of queries.\n\nThen the next \u2018n\u2019 lines contain \u2018n\u2019 queries. A query can be of two types:\n1 val \u2192 adds the integer \u2018val\u2019 to the stream.\n2 \u2192 returns a list of disjoint intervals.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print all the disjoint intervals for each query of type 2, and output the answer to the query in a single line.\n\nEach query must be answered in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given functions.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code> 6\n 1 3\n 2\n 1 6\n 2\n 1 5\n 2    \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code> 3 3\n 3 3 6 6\n 3 3 5 6\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample Input 1:</h5>\n\n<pre><code>First 3 is added to the stream, and the disjoint interval will be {3, 3}. When 6 will be added to the stream, then the disjoint intervals will be {3, 3},{6, 6}. But when 5 is added to the stream, then the disjoint interval will be {3, 3}, {5, 6} as 5 merges with the interval {6, 6} because the difference between interval {5, 5} and {6, 6} is less than 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>6\n1 1\n2\n1 4\n2\n1 3\n2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 1\n1 1 4 4\n1 1 3 4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample Input 1:</h5>\n\n<pre><code>First, 1 is added to the stream, and the disjoint interval will be {1, 1}. When 4 will be added to the stream, then the disjoint intervals will be {1, 1},{4, 4}. But when 3 is added to the stream, then the disjoint interval will be {1, 1}, {3, 4} as 3 merges with the interval {4, 4}.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;=  10 ^ 5\n0 &lt;= &#39;val&#39; &lt;= 10 ^ 4\n\nTime Limit: 1 sec.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 24,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a `DisjointIntervals` class to manage a stream of non-negative integers, grouping them into disjoint intervals. The class should have two methods:\n\n*   `addInteger(int val)`: Adds the integer `val` to the stream.\n*   `getDisjointIntervals()`: Returns a list of disjoint intervals representing the current state of the stream.",
                "constraints": [
                    "1 <= 'n' <= 10 ^ 5 (number of queries)",
                    "0 <= 'val' <= 10 ^ 4 (value of integer to add)",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "6\n1 3\n2\n1 6\n2\n1 5\n2",
                        "output": "3 3\n3 3 6 6\n3 3 5 6",
                        "explanation": "First, 3 is added, creating the interval {3, 3}. Then, 6 is added, resulting in {3, 3}, {6, 6}. Finally, adding 5 merges with the {6, 6} interval, creating {3, 3}, {5, 6}."
                    },
                    {
                        "input": "6\n1 1\n2\n1 4\n2\n1 3\n2",
                        "output": "1 1\n1 1 4 4\n1 1 3 4",
                        "explanation": "First, 1 is added, creating the interval {1, 1}. Then, 4 is added, resulting in {1, 1}, {4, 4}. Finally, adding 3 merges with the {4, 4} interval, creating {1, 1}, {3, 4}."
                    },
                    {
                        "input": "5\n1 1\n1 3\n2\n1 2\n2",
                        "output": null,
                        "explanation": "First 1 is added to the stream. Then 3 is added to the stream. Then the intervals [1,1],[3,3] will be printed. then 2 is added to the stream . Finally the interval [1,3] will be printed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you solve this problem by using linear search?</p>",
            "<p>Can you solve this problem by using a disjoint set union method?</p>"
        ],
        "relatedTopics": [],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}