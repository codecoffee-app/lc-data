{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9439,
            "title": "Data Structure Supporting Insert Delete And GetRandom",
            "titleSlug": "data-structure-supporting-insert-delete-and-getrandom_985309",
            "content": "<h4 id=\"design-and-implement-a-data-structure-which-supports-the-following-operations\">Design and implement a data structure which supports the following operations:</h4>\n\n<pre><code>insert(X): Inserts an element X in the data structure and returns true if the element was not present, and false otherwise.\n\nremove(X): Removes the element X from the data structure, if present. Returns true if the element was present and false otherwise.\n\nsearch(X): Search the element X in the data structure. Returns true if the element was present and false otherwise.\n\ngetRandom(): Return a random element present in the data structure.\n</code></pre>\n\n<h4 id=\"four-types-of-queries-denote-these-operations\">Four types of queries denote these operations:</h4>\n\n<pre><code>Type 1: for insert(X) operation.\nType 2: for remove(X) operation.\nType 3: for search(X) operation.\nType 4: for getRandom() operation.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>It is guaranteed that at least one element will be present in the data structure when getRandom() operation is performed.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you implement every operation such that it works in O(1) time?\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018Q\u2019 denoting the number of queries. \n\nThe next \u2018Q\u2019 lines specify the type of operation/query to be performed on the data structure. Each query contains an integer \u2018P\u2019 denoting the type of query.\n\nFor queries of type 1, 2 and 3 the integer \u2018P\u2019 is followed by another integer \u2018X\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each query, print the output returned after performing the corresponding operation on the data structure. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= Q &lt;= 10^5\n1 &lt;= P &lt;= 4\n-10^5 &lt;= X &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>5\n1 10\n1 20\n1 10\n4\n3 20\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True \nTrue\nFalse\n10\nTrue\n</code></pre>\n\n<h5 id=\"explanation-1\">Explanation 1:</h5>\n\n<pre><code>Initially, our DS is empty. The number of operations we need to perform are 5.\nThe first operation is of type 1 i.e. insert(10) into the DS. Since 10 is not present, so we can insert it. Hence, the new state of our structure is [10]. Return True.\n\nThe second operation is of type 2 i.e. insert(20) into the DS. Since 20 is not present, so we can insert it. Hence, the new state of our structure is [10, 20]. Return True.\n\nThe third operation is of type 1 i.e. insert(10) into the DS. Since 10 is already present, so we don\u2019t insert it. Hence, the state of our structure remains the same, i.e [10, 20]. Return False.\n\nThe fourth operation is of type 4 i.e. getRandom(). So, return a random element which is present in the data structure.\n\nThe fifth operation is of type 3 i.e. remove(10) from the DS. Since 10 is present, so we can remove it. Hence, the new state of our structure is [10]. Return True.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>6\n2 52\n1 66\n1 89\n1 78\n3 60\n2 89\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>False\nTrue\nTrue\nTrue\nFalse\nTrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a data structure that supports the following operations with O(1) time complexity:\n\n*   `insert(X)`: Inserts element `X` if not already present. Returns `true` if inserted, `false` otherwise.\n*   `remove(X)`: Removes element `X` if present. Returns `true` if removed, `false` otherwise.\n*   `search(X)`: Checks if element `X` is present. Returns `true` if present, `false` otherwise.\n*   `getRandom()`: Returns a random element from the data structure.  Guaranteed to have at least one element.",
                "constraints": [
                    "1 <= Q <= 10^5 (Number of queries)",
                    "1 <= P <= 4 (Query Type)",
                    "-10^5 <= X <= 10^5 (Element value)"
                ],
                "testcases": [
                    {
                        "input": "5\n1 10\n1 20\n1 10\n4\n3 20",
                        "output": "True\nTrue\nFalse\n10\nTrue",
                        "explanation": "Initial data structure is empty.\n\n1.  `insert(10)`: 10 is not present, so insert it. Data structure becomes [10]. Returns `True`.\n2.  `insert(20)`: 20 is not present, so insert it. Data structure becomes [10, 20]. Returns `True`.\n3.  `insert(10)`: 10 is already present. Data structure remains [10, 20]. Returns `False`.\n4.  `getRandom()`: Returns a random element from [10, 20] (in this case, it is specified to return 10 in the sample output).\n5.  `search(20)`: 20 is present in the data structure. Returns `True`."
                    },
                    {
                        "input": "6\n2 52\n1 66\n1 89\n1 78\n3 60\n2 89",
                        "output": "False\nTrue\nTrue\nTrue\nFalse\nTrue",
                        "explanation": "Initial data structure is empty.\n\n1.  `remove(52)`: 52 is not present. Returns `False`.\n2.  `insert(66)`: 66 is not present, so insert it. Data structure becomes [66]. Returns `True`.\n3.  `insert(89)`: 89 is not present, so insert it. Data structure becomes [66, 89]. Returns `True`.\n4.  `insert(78)`: 78 is not present, so insert it. Data structure becomes [66, 89, 78]. Returns `True`.\n5.  `search(60)`: 60 is not present. Returns `False`.\n6.  `remove(89)`: 89 is present, so remove it. Data structure becomes [66, 78]. Returns `True`."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>A simple and intuitive approach could be to use a resizable array as the required data structure.</p>",
            "<p>The previous implementations of the operations can be optimised by using hashing.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}