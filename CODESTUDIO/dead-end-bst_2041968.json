{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14174,
            "title": "Dead End BST",
            "titleSlug": "dead-end-bst_2041968",
            "content": "<h4 id=\"ninja-was-playing-with-the-nodes-of-the-bst-binary-search-tree-he-found-that-after-insertion-of-some-nodes-he-was-unable-to-insert-any-more-nodes-to-a-leaf-node-in-such-a-scenario-he-termed-the-bst-as-dead-end-he-has-many-sets-of-bst-it-is-very-difficult-for-him-to-individually-find-whether-a-bst-is-dead-end-or-not-he-asked-you-to-design-an-algorithm-to-find-whether-a-given-binary-search-tree-bst-containing-positive-integers-only-is-dead-end-or-not\">Ninja was playing with the nodes of the BST (Binary Search Tree). He found that after insertion of some nodes, he was unable to insert any more nodes to a leaf node. In such a scenario he termed the BST as Dead End. He has many sets of BST, it is very difficult for him to individually find whether a BST is Dead End or not. He asked you to design an algorithm to find whether a  given  Binary Search Tree (BST) containing positive integers only is  Dead End or not.</h4>\n\n<h4 id=\"note-a-bst-is-said-to-be-dead-end-if-there-exists-a-leaf-node-in-the-bst-for-which-it-is-impossible-to-insert-any-further-nodes-after-that-node-in-that-bst-if-such-nodes-do-not-exist-then-the-bst-is-not-said-to-be-dead-end\">Note: A BST is said to be Dead End if there exists a leaf node in the BST, for which it is impossible to insert any further nodes after that node in that BST. If such nodes do not exist, then the BST is not said to be Dead End.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-with-the-following-properties\">A binary search tree (BST) is a binary tree data structure with the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \n\nThen the T test cases follow. \n\nThe first and only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst_example-6878.png\" alt=\"bst_example\"> </p>\n\n<pre><code>4\n2 6\n1 3 5 7\n-1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 4\n\nLevel 2 :\nLeft child of 4 = 2\nRight child of 4 = 6\n\nLevel 3 :\nLeft child of 2 = 1\nRight child of 2 = 3\nLeft child of 6 = 5\nRight child of 6 = 7\n\nLevel 4 :\nLeft child of 1 = null (-1)\nRight child of 1 = null (-1)\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a single line containing &quot;True&quot; if BST is Dead End else &quot;False&quot; (without quotes).\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n1 &lt;= node data &lt;= 10^9, (where node data != -1)\n\nTime Limit: 1 second\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up :</h5>\n\n<pre><code>Can you solve this in O(N) time, and O(H)  space complexity?\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n10 5 12 -1 9 -1 15 -1 -1 -1 -1\n7 4 8 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for sample 1 :</h5>\n\n<pre><code>For the first test case, the given BST is depicted below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/wlaovpxxjdcuodym-11839.png\" alt=\"bst_input1\"></p>\n\n<pre><code>We can observe that we cannot insert any node after the node having the data 9. So this BST is Dead End.\n\nFor the second test case, the given BST is depicted below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst_input1_ex2_deadend-7937.png\" alt=\"bst_input1_ex2\"></p>\n\n<pre><code>New nodes can be inserted after all the leaf nodes like we can insert 5 after 4 and 9 after 8. So this BST is not Dead End.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5 3 7 -1 -1 6 8 -1 -1 -1 -1\n2 1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>True\nTrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) containing only positive integers, determine if it's a 'Dead End'. A BST is considered a 'Dead End' if there exists a leaf node where no further nodes can be inserted. This happens when, for a leaf node with value 'x', it's impossible to insert any node between 'x' and its potential parent/child nodes. Essentially, a leaf node 'x' is a dead end if the numbers x-1 and x+1 are either present in the BST or x = 1 and x + 1 is present in the BST.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 5000 (Number of nodes in BST)",
                    "1 <= node data <= 10^9 (where node data != -1)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "10 5 12 -1 9 -1 15 -1 -1 -1 -1",
                        "output": "True",
                        "explanation": "The BST contains the nodes 5, 9, 10, 12, and 15.  The node 9 is a leaf node.  8 is not present in the BST and neither is 10 except as the node itself, so 9 becomes a dead end."
                    },
                    {
                        "input": "7 4 8 -1 -1 -1 -1",
                        "output": "False",
                        "explanation": "The BST contains the nodes 4, 7, and 8. While 4 and 8 are leaves, adding 5 after 4 and 9 after 8 are both valid, therefore this is not a dead end."
                    },
                    {
                        "input": "5 3 7 -1 -1 6 8 -1 -1 -1 -1",
                        "output": "True",
                        "explanation": "The BST contains nodes 3, 5, 6, 7, 8. 3 is a leaf, the values of 2 and 4 would prevent its expansion. Thus the tree is a Dead End"
                    },
                    {
                        "input": "2 1 -1 -1 -1",
                        "output": "True",
                        "explanation": "The BST contains nodes 1 and 2. 1 is a leaf. Adding 0 or 2 to the leaf cannot be done. Thus it's a Dead End"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}