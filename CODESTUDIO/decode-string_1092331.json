{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9792,
            "title": "Decode String",
            "titleSlug": "decode-string_1092331",
            "content": "<h4 id=\"ninja-requests-a-ps5-from-santa-on-christmas-santa-decides-to-give-ninja-a-brand-new-ps5-but-he-locks-it-in-a-safe-and-gives-ninja-a-string-secretcode-the-password-to-open-the-safe-is-the-length-of-the-longest-palindromic-subsequence-present-in-secretcode\">Ninja requests a PS5 from Santa on Christmas. Santa decides to give Ninja a brand new PS5, but he locks it in a safe and gives Ninja a string SECRETCODE. The password to open the safe is the length of the longest palindromic subsequence present in SECRETCODE.</h4>\n\n<h4 id=\"a-palindromic-subsequence-is-a-subsequence-generated-by-deleting-some-character-of-a-given-string-without-changing-its-order-which-is-a-palindrome-for-example-abba-is-the-longest-palindromic-subsequence-for-cacbdba\">A palindromic subsequence is a subsequence (generated by deleting some character of a given string without changing its order) which is a palindrome. For example: \u2018ABBA\u2019 is the longest palindromic subsequence for \u2018CACBDBA\u2019.</h4>\n\n<h4 id=\"as-ninja-is-busy-sending-christmas-presents-to-his-friends-he-asks-you-for-help-can-you-help-ninja-open-the-safe-and-retrieve-his-ps5\">As Ninja is busy sending Christmas presents to his friends, he asks you for help. Can you help Ninja open the safe and retrieve his PS5?</h4>\n\n<p><br></p>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>\u2018SECRETCODE\u2019 consists of only English uppercases.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases or queries to be processed. Then the test case follows.\n\nThe first line of each test case contains a single integer  \u2018N\u2019 where \u2018N\u2019 denotes the length of &#39;SECRETCODE&#39;.\n\nThe second line of each test case contains the string &#39;SECRETCODE&#39;. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer denoting the length of longest palindromic subsequence present in the given string &#39;SECRETCODE&#39;.\n\nPrint the output of each test case in a separate line.\n\nNote :\nYou do not need to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^3\n\nWhere \u2018T\u2019 is the total number of test cases and  \u2018N\u2019 denotes the length of  &#39;SECRETCODE&#39;     \n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n7\nABCGDBA \n5\nDBADE\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>4\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of sample output 1:</h5>\n\n<pre><code>Test Case 1:\n\n&#39;SECRETCODE&#39; is &#39;ABCGDBA&#39;.\n18 palindromic subsequences exist, \u2018A\u2019, \u2018B\u2019, \u2018C\u2019, \u2018G\u2019, \u2018D\u2019, \u2018AA\u2019, \u2018BB\u2019, \u2018ABA\u2019, &#39;ACA&#39;, &#39;AGA&#39;, &#39;ADA&#39;, &#39;BCB&#39;, BGB&#39;, &#39;BDB&#39;, \u2018ABBA\u2019,  &#39;ABCBA&#39;, &#39;ABGBA&#39; and &#39;ABDBA&#39; among which the longest palindromic subsequences are &#39;ABCBA&#39;, &#39;ABGBA&#39; and &#39;ABDBA&#39; each of length 5.\n\n\n\nTest Case 2:\n\n&#39;SECRETCODE&#39; is &#39;DBADE&#39;.\n&#39;DBD&#39; and &#39;DAD&#39; are the longest palindromic subsequences each of length 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n8\nADEBCBDP  \n5\nCCCCC\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5\n5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of sample output 2:</h5>\n\n<pre><code>Test Case 1:\n\n&#39;SECRETCODE&#39; is &#39;ADEBCBDP&#39;.\n&#39;DBCBD&#39; is the longest palindromic subsequence of length 5.\n\n\nTest Case 2:\n\n&#39;SECRETCODE&#39; is &#39;CCCCC&#39;.\n\u2018CCCCC\u2019 is also a subsequence of \u2018CCCCC\u2019 which is a palindrome of length 5.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Santa has locked a PS5 in a safe for Ninja and given him a string, SECRETCODE. To unlock the safe, Ninja needs to find the length of the longest palindromic subsequence within SECRETCODE. A palindromic subsequence is formed by deleting characters from the original string without changing the order, resulting in a palindrome. Help Ninja retrieve his PS5 by calculating the length of the longest palindromic subsequence.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^3",
                    "\u2018SECRETCODE\u2019 consists of only English uppercases.",
                    "Where \u2018T\u2019 is the total number of test cases and \u2018N\u2019 denotes the length of 'SECRETCODE'",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "2\n7\nABCGDBA\n5\nDBADE",
                        "output": "4\n3",
                        "explanation": "Test Case 1: SECRETCODE is 'ABCGDBA'. The longest palindromic subsequences are 'ABBA', 'ABA', each of length 4.\n\nTest Case 2: SECRETCODE is 'DBADE'. The longest palindromic subsequences are 'DBD' and 'DAD', each of length 3."
                    },
                    {
                        "input": "2\n8\nADEBCBDP\n5\nCCCCC",
                        "output": "5\n5",
                        "explanation": "Test Case 1: SECRETCODE is 'ADEBCBDP'. The longest palindromic subsequence is 'DBCBD' of length 5.\n\nTest Case 2: SECRETCODE is 'CCCCC'. The longest palindromic subsequence is 'CCCCC' of length 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try checking for all the substrings but one at a time.</p><p>&nbsp;</p>",
            "<p>Can you optimise the previous approach? Try to memoize the subproblems.&nbsp;</p>",
            "<p>Initially, we were breaking the large problem into small problems but now, let us look at it in a different way. Can you solve the small problem first and then reach the final answer? Try to use the bottom-up approach now. &nbsp;</p><p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}