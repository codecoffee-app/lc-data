{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22941,
            "title": "DECODE STRING",
            "titleSlug": "decode-string_6212846",
            "content": "<h4 id=\"a-message-containing-letters-from-a-z-can-be-encoded-into-numbers-using-the-following-mapping\">A message containing letters from A-Z can be encoded into numbers using the following mapping:</h4>\n\n<pre><code>&#39;A&#39; -&gt; &quot;1&quot;\n&#39;B&#39; -&gt; &quot;2&quot;\n...\n&#39;Z&#39; -&gt; &quot;26&quot;\n</code></pre>\n\n<h4 id=\"to-decode-an-encoded-message-all-the-digits-must-be-grouped-then-mapped-back-into-letters-using-the-reverse-of-the-mapping-above-there-may-be-multiple-ways\">To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways).</h4>\n\n<h4 id=\"given-a-string-s-containing-only-digits-return-the-number-of-ways-to-decode-it\">Given a string \u2018S\u2019 containing only digits, return the number of ways to decode it.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018S\u2019 = &quot;11106&quot;\n\nOutput: 2\n\n\nThe possible ways are:-\n(1 1 10 6),\n(11 10 6)\n\nNote that the grouping (1 11 06) is invalid because &quot;06&quot; cannot be mapped into &#39;F&#39; since &quot;6&quot; is different from &quot;06&quot;.  \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains \u2018T\u2019, denoting the number of test cases.    \n\nEach test case&#39;s first and only line contains the string \u2018S\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Return the number of ways to decode the string \u2018S\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T  &lt;= 10\n1 &lt;= | S | &lt;= 100\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n12\n226     \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first test case:-\n&quot;12&quot; could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12).\n\nFor the second test case:-\n&quot;226&quot; could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or &quot;BBF&quot; (2 2 6).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1234\n333\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>3\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -9,
            "dislikes": "NA",
            "rephrased": {
                "body": "A message containing letters from A-Z can be encoded into numbers using the following mapping:\n\n'A' -> \"1\"\n'B' -> \"2\"\n...\n'Z' -> \"26\"\n\nTo decode an encoded message, all the digits must be grouped and mapped back into letters using the reverse mapping. There may be multiple valid groupings.\n\nGiven a string 'S' containing only digits, determine the number of possible ways to decode it.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |S| <= 100",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "12",
                        "output": "2",
                        "explanation": "The string \"12\" can be decoded in two ways: \"AB\" (1 2) or \"L\" (12)."
                    },
                    {
                        "input": "226",
                        "output": "3",
                        "explanation": "The string \"226\" can be decoded in three ways: \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6)."
                    },
                    {
                        "input": "1234",
                        "output": "3",
                        "explanation": null
                    },
                    {
                        "input": "333",
                        "output": "1",
                        "explanation": null
                    },
                    {
                        "input": "11106",
                        "output": "2",
                        "explanation": "The possible ways are: (1 1 10 6), (11 10 6). Note that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;Think of the possible choices you might make and try to solve them with the help of recursion.</p>",
            "<p><strong>&nbsp;</strong>Can you think of a way to optimize the recursive approach using memoization?</p>",
            "<p>Can you think of a way to optimize the recursive approach using iterative dynamic programming?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}