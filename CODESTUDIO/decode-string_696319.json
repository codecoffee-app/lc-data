{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7529,
            "title": "Decode String",
            "titleSlug": "decode-string_696319",
            "content": "<h4 id=\"you-have-been-given-an-encoded-string-your-task-is-to-decode-it-back-to-the-original-string\">You have been given an encoded string. Your task is to decode it back to the original string.</h4>\n\n<pre><code>- An encoded string will be of the form &lt;count&gt;[encoded_string], where the &#39;encoded_string&#39; inside the square brackets is being repeated exactly &#39;count&#39; times. Note that &#39;count&#39; is guaranteed to be a positive integer and can be greater than 9.\n- There are no extra white spaces and square brackets are well-formed.\n</code></pre>\n\n<h5 id=\"for-example\">For example -</h5>\n\n<pre><code>Input: 2[a]\n\u201ca\u201d is encoded 2 times, hence the decoded string will be &quot;aa&quot;.\n\nInput: 3[a2[b]]\n\u201cb\u201d is encoded 2 times, which decodes as 3[abb]. Now, &quot;abb&quot; is encoded 3 times, hence decoded string will be &quot;abbabbabb&quot;. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe only line of each test case contains a string &#39;S&#39; which represents the encoded string. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a string i.e. the decoded string.\n\nOutput for every test case will be printed in a separate line.\n\nNote: You are not required to print the expected output, it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code> 1 &lt;= T &lt;= 20\n 1 &lt;= |S| &lt;= 500\n\n where |S| is the length of the Decoded string.\n\n Time limit: 0.400 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3[a]2[bc]\na1[b]1[cc]\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>aaabcbc\nabcc\n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for sample 1:</h5>\n\n<pre><code>For the first test case, &quot;a&quot; is encoded 3 times and &quot;bc&quot; is encoded 2 times. After combining these two strings after decoding, we&#39;ll get &quot;aaa&quot; + &quot;bcbc&quot; = &quot;aaabcbc&quot;.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\nab2[c3[b]]\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>abcbbbcbbb\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 54,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an encoded string, decode it back to its original form. The encoding follows the pattern `<count>[encoded_string]`, where `encoded_string` within the square brackets is repeated `count` times. The count is a positive integer. There are no extra whitespaces, and square brackets are well-formed.",
                "constraints": [
                    "1 <= T <= 20",
                    "1 <= |S| <= 500, where |S| is the length of the encoded string.",
                    "Time limit: 0.400 sec"
                ],
                "testcases": [
                    {
                        "input": "s = \"3[a]2[bc]\"",
                        "output": "aaabcbc",
                        "explanation": "\"a\" is encoded 3 times and \"bc\" is encoded 2 times.  Combining the decoded strings gives \"aaa\" + \"bcbc\" = \"aaabcbc\"."
                    },
                    {
                        "input": "s = \"a1[b]1[cc]\"",
                        "output": "abcc",
                        "explanation": "\"b\" is encoded 1 time and \"cc\" is encoded 1 time.  Combining the decoded strings gives \"a\" + \"b\" + \"cc\" = \"abcc\"."
                    },
                    {
                        "input": "s = \"ab2[c3[b]]\"",
                        "output": "abcbbbcbbb",
                        "explanation": "\"b\" is encoded 3 times, which results in \"bbb\".  Then \"cbbb\" is encoded 2 times, which results in \"cbbbcbbb\". Finally, combining with the initial \"ab\" gives \"abcbbbcbbb\"."
                    },
                    {
                        "input": "s = \"2[a]\"",
                        "output": "aa",
                        "explanation": "\"a\" is encoded 2 times, hence the decoded string will be \"aa\"."
                    },
                    {
                        "input": "s = \"3[a2[b]]\"",
                        "output": "abbabbabb",
                        "explanation": "\"b\" is encoded 2 times, which decodes as 3[abb]. Now, \"abb\" is encoded 3 times, hence decoded string will be \"abbabbabb\"."
                    },
                    {
                        "input": "s = \"10[a]\"",
                        "output": "aaaaaaaaaa",
                        "explanation": "\"a\" is encoded 10 times."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to keep track of the current string and the number of times it needs to be repeated using stack.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}