{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7950,
            "title": "Deepest Leaves Sum",
            "titleSlug": "deepest-leaves-sum_797824",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-integers-your-task-is-to-calculate-the-sum-of-all-the-leaf-nodes-which-are-present-at-the-deepest-level-of-this-binary-tree-if-there-are-no-such-nodes-print-0\">You have been given a binary tree of integers. Your task is to calculate the sum of all the leaf nodes which are present at the deepest level of this binary tree. If there are no such nodes, print 0.</h4>\n\n<h4 id=\"note-the-deepest-level-of-a-binary-tree-is-the-level-which-is-present-at-the-maximum-depth-from-the-root-node\">NOTE: The deepest level of a binary tree is the level which is present at the maximum depth from the root node.</h4>\n\n<h4 id=\"follow-up\">Follow up:</h4>\n\n<pre><code>Can you solve this problem in a single traversal of the binary tree?\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the sum of all the leaf nodes present at the deepest level of the given binary tree.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n0 &lt;= N &lt;= 3000  \nWhere N is the number of nodes in the binary tree\n\nThe sum will always fit in a 32-bit integer.    \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n71 2 16 110 -1 -1 5 -1 -1 -1 -1\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n-1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>115 \n22\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, we have nodes 110 and 5 present at the deepest level of the binary tree. So the sum will be 110 + 5 = 115.\n\nFor the second test case, we have nodes 4, 5, 6 and 7 present at the deepest level of the binary tree.\n\nFor the third test case, we don&#39;t have any such nodes. So the sum will be 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 2 3 4 -1 5 -1 -1 -1 -1 -1\n1 2 -1 3 -1 4 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>9\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of integers, determine the sum of all leaf nodes located at the deepest level of the tree. If the tree is empty or contains no leaf nodes, return 0.",
                "constraints": [
                    "1 <= T <= 100",
                    "0 <= N <= 3000 (Where N is the number of nodes in the binary tree)",
                    "The sum will always fit in a 32-bit integer."
                ],
                "testcases": [
                    {
                        "input": "root= [71, 2, 16, 110, -1, -1, 5, -1, -1, -1, -1]",
                        "output": "115",
                        "explanation": "The deepest level has nodes 110 and 5.  Their sum is 110 + 5 = 115."
                    },
                    {
                        "input": "root = [1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "22",
                        "explanation": "The deepest level has nodes 4, 5, 6, and 7.  Their sum is 4 + 5 + 6 + 7 = 22."
                    },
                    {
                        "input": "root = [-1]",
                        "output": "0",
                        "explanation": "The tree is empty, so the sum is 0."
                    },
                    {
                        "input": "root = [1, 2, 3, 4, -1, 5, -1, -1, -1, -1, -1]",
                        "output": "9",
                        "explanation": "The deepest level has nodes 4 and 5. Their sum is 4 + 5 = 9."
                    },
                    {
                        "input": "root = [1, 2, -1, 3, -1, 4, -1, -1, -1]",
                        "output": "4",
                        "explanation": "The deepest level has the node 4. The sum is 4."
                    },
                    {
                        "input": "root = [0]",
                        "output": "0",
                        "explanation": "The tree contains a single node which is the root. Since the root has no children, the result is 0"
                    },
                    {
                        "input": "root=[1]",
                        "output": "0",
                        "explanation": "Single node tree, but that single node has no children, therefore it doesn't qualify as a leaf node at the deepest level, so the sum is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you find the deepest level first and then explore its nodes?</p>",
            "<p>You do not need two traversals of the tree, can you try doing both parts of Approach 1 in a single traversal.</p>",
            "<p>The deepest level nodes are processed last in a level order traversal. Can you use this fact to solve this problem iteratively?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}