{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8835,
            "title": "Deepest Left",
            "titleSlug": "deepest-left_920385",
            "content": "<h4 id=\"you-are-given-a-binary-tree-having-n-number-of-nodes-your-task-is-to-find-the-deepest-leaf-node-in-the-given-input-tree\">You are given a binary tree having \u2018N\u2019 number of nodes. Your task is to find the deepest leaf node in the given input tree.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The deepest leaf node is the leaf node which will be the left child of some node and will be at the maximum level in the tree.\nIf there are multiple deepest left leaf nodes, return the node with maximum value.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1. A binary tree is a tree in which each node can have at most two children. \n2. The given tree will be non-empty i.e. the number of non-NULL nodes will always be greater than or equal to 1.\n3. Multiple nodes in the tree can have the same values, all values in the tree will be positive.\n</code></pre>\n\n<h4 id=\"input-format\">Input format :</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, which denotes the number of test cases. Then each test case follows. \nThe first line of every test case contains elements of the Binary Tree in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<h4 id=\"for-example\">For Example :</h4>\n\n<pre><code>Consider the binary tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-image1-10953.png \"></br></p>\n\n<pre><code>The input for the tree depicted in the above image would be :\n\n3\n5 1\n6 2 0 8\n-1 -1 7 4 -1 -1 -1 -1\n-1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 3\n\nLevel 2 :\nLeft child of 3 = 5\nRight child of 3 = 1\n\nLevel 3 :\nLeft child of 5 = 6\nRight child of 5 = 2\nLeft child of 1 = 0\nRight child of 1 = 8\n\nLevel 4 :\nLeft child of 6 = null (-1)\nRight child of 6 = null(-1)\nLeft child of 2 = 7\nRight child of 2 = 4\nLeft child of 0 = null (-1)\nRight child of 0 = null (-1)\nLeft child of 8 = null (-1)\nRight child of 8 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\nLeft child of 4 = null (-1)\nRight child of 4 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>For each test case, print the deepest leaf node\u2019s data which is the left child of some node.\n\nThe output of each test case should be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 3 * (10 ^ 3)\n1 &lt;= nodeVal &lt;= 10 ^ 9\n\nTime Limit: 1 sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n3 5 1 6 2 0 8 -1 -1 7 4 -1 -1 -1 -1 -1 -1 -1 -1\n1 2 3 4 5 -1 -1 6 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>7\n6\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h4>\n\n<p><img src=\"https://files.codingninjas.in/tree-image1-10953.png \"></br></p>\n\n<pre><code>Test Case 1 :\nThe deepest left leaf node is 7 as the level at which node with value 7 is present is 4 and is a left child of the node with value 2.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-image2-10954.png\"></br></p>\n\n<pre><code>Test Case 2 :\nThe deepest left leaf node is 6 as the level at which node with value 6 is present is 4 and is a left child of the node with value 4.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n5 2 3 8 1 -1 -1 7 9 -1 -1 5 6 -1 -1 -1 -1 -1 -1\n1 5 7 -1 -1 6 3 9 8 -1 -1 -1 -1 13 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5\n13\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with \u2018N\u2019 nodes, find the deepest leaf node that is a left child. The deepest leaf node is the leaf node which is the left child of some node and is at the maximum level in the tree. If there are multiple deepest left leaf nodes, return the node with the maximum value.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 3 * (10 ^ 3)",
                    "1 <= nodeVal <= 10 ^ 9",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "3 5 1 6 2 0 8 -1 -1 7 4 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "7",
                        "explanation": "The deepest left leaf node is 7. It is at level 4 and is a left child of the node with value 2."
                    },
                    {
                        "input": "1 2 3 4 5 -1 -1 6 -1 -1 -1 -1 -1",
                        "output": "6",
                        "explanation": "The deepest left leaf node is 6. It is at level 4 and is a left child of the node with value 4."
                    },
                    {
                        "input": "5 2 3 8 1 -1 -1 7 9 -1 -1 5 6 -1 -1 -1 -1 -1 -1",
                        "output": "5",
                        "explanation": "The deepest left leaf node is 5."
                    },
                    {
                        "input": "1 5 7 -1 -1 6 3 9 8 -1 -1 -1 -1 13 -1 -1 -1",
                        "output": "13",
                        "explanation": "The deepest left leaf node is 13."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of using Breadth First Search.</p>",
            "<p>Think of a Recursive approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}