{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7796,
            "title": "Deepest Right Leaf",
            "titleSlug": "deepest-right-leaf_764143",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-n-nodes-your-task-is-to-find-and-return-the-deepest-right-leaf-node-in-case-of-multiple-answers-return-the-rightmost-node\">You have been given a Binary Tree of &#39;N&#39; nodes. Your task is to find and return the deepest right leaf node. In case of multiple answers, return the rightmost node.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>For the given binary tree: \n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/0000000000000615.PNG\" alt=\"alt-text\"></p>\n\n<pre><code>Output: 9\n\nExplanation: The deepest right nodes are 3 and 9 but 9 is the rightmost, thus 9 is the answer.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The only line of the input contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>The input for the tree depicted in the below image would be : \n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. The above format was just to provide clarity on how the input is formed for a given tree. \n\n2. The input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output will contain an integer representing the deepest right leaf node of the given binary tree.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print the output, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>0 &lt;= N &lt;= 10^5\n0 &lt;= data &lt;= 10^5\n\nWhere &#39;N&#39; denotes the number of nodes in the Binary Tree and &#39;data&#39; represents the node value of the nodes in the Binary Tree.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-to-sample-output-1\">Explanation to Sample Output 1:</h5>\n\n<pre><code>The input binary tree will be represented as:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/largestbt1-10343.png\" alt=\"alt-text\"></p>\n\n<pre><code>From the above representation, the leaves node are 2 and 3. But 3 is the right child of its parent but 2 is the left child of its parent. Thus, 3 should be the answer.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1 2 3 -1 4 4 -1 -1 5 6 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5\n</code></pre>\n\n<h5 id=\"explanation-to-sample-output-2\">Explanation to Sample Output 2:</h5>\n\n<pre><code>The input binary tree will be represented as: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/Tree%287403%29-4671.png\" alt=\"alt-text\"></p>\n\n<pre><code>From the above representation, the leaves node are 5 and 6. But 5 is the right child of its parent but 6 is the left child of its parent. Thus, 5 should be the answer.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of 'N' nodes, find and return the deepest right leaf node. If multiple such nodes exist, return the rightmost one. A right leaf node is a leaf node that is the right child of its parent.",
                "constraints": [
                    "0 <= N <= 10^5",
                    "0 <= data <= 10^5",
                    "Where 'N' denotes the number of nodes in the Binary Tree and 'data' represents the node value of the nodes in the Binary Tree.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 -1 -1 -1 -1",
                        "output": "3",
                        "explanation": "The binary tree is represented as follows: Root is 1, left child is 2 and right child is 3. Leaves are 2 and 3. Since 3 is the right child, it is the deepest right leaf."
                    },
                    {
                        "input": "1 2 3 -1 4 4 -1 -1 5 6 -1 -1 -1 -1 -1",
                        "output": "5",
                        "explanation": "The binary tree has leaves 5 and 6.  5 is the right child of its parent, while 6 is the left child.  Therefore, the deepest right leaf is 5."
                    },
                    {
                        "input": "1 2 -1 -1 3 -1 -1",
                        "output": "3",
                        "explanation": "The tree is: 1 is root, 2 is left child of 1, 3 is right child of 1, so the right most and deepest leaf is 3"
                    },
                    {
                        "input": "1 -1 2 -1 -1",
                        "output": "2",
                        "explanation": "The tree is: 1 is root, 2 is right child of 1, so the right most and deepest leaf is 2"
                    },
                    {
                        "input": "1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "7",
                        "explanation": "The tree is a complete binary tree of depth 2. 4, 5, 6, and 7 are the leaf nodes. Since 7 is the deepest and rightmost leaf, it is the answer."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of a recursive approach.</p>",
            "<p>Try to think of the level order traversal.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}