{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8041,
            "title": "Delete Kth node from end in Linked List",
            "titleSlug": "delete-kth-node-from-end-in-linked-list_799912",
            "content": "<h4 id=\"you-have-been-given-a-singly-linked-list-of-n-nodes-with-integer-data-and-an-integer-k\">You have been given a singly Linked List of <em><strong>&#39;N&#39;</strong></em> nodes with integer data and an integer <em><strong>&#39;K&#39;</strong></em>.</h4>\n\n<p><br></p>\n\n<h4 id=\"your-task-is-to-remove-the-kth-node-from-the-end-of-the-given-linked-list-and-return-the-head-of-the-modified-linked-list\">Your task is to remove the &#39;K&#39;th node from the end of the given Linked List and return the head of the modified linked list.</h4>\n\n<p><br></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input : 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; &#39;NULL&#39;  and  &#39;K&#39; = 2\nOutput: 1 -&gt; 2 -&gt; 4 -&gt; &#39;NULL&#39;\nExplanation:\nAfter removing the second node from the end, the linked list become 1 -&gt; 2 -&gt; 4 -&gt; &#39;NULL&#39;.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-7-27708.jpg\" alt=\"altImage\"></p>\n\n<p><br></p>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer &#39;N&#39;, the size of the linked list and an integer &#39;K&#39;. \nThe second line contains &#39;N&#39; space-separated integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>The output contains the linked list after deletion. If the list is empty, -1 is printed.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve this without finding the length of the linked list and using O(1) extra space?\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>6 3\n1 2 3 4 5 6 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 2 3 5 6\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>In the given linked list the node with data \u20184\u2019 will be removed as this is the 3rd node from the end of the Linked List.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3 3\n1 2 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2 3\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;N&#39; &lt;= 10^3\n1 &lt;= &#39;K&#39; &lt;= &#39;N&#39;\n1 &lt;= &#39;data&#39; &lt;= 10^3\n\nTime Limit: 1 sec.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 149,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list of N nodes with integer data and an integer K, remove the Kth node from the end of the linked list and return the head of the modified list.",
                "constraints": [
                    "1 <= N <= 10^3",
                    "1 <= K <= N",
                    "1 <= data <= 10^3",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "6 3\n1 2 3 4 5 6",
                        "output": "1 2 3 5 6",
                        "explanation": "In the given linked list, the node with data '4' is the 3rd node from the end. After removing it, the resulting list is 1 -> 2 -> 3 -> 5 -> 6."
                    },
                    {
                        "input": "3 3\n1 2 3",
                        "output": "2 3",
                        "explanation": "In the given linked list, the node with data '1' is the 3rd node from the end. After removing it, the resulting list is 2 -> 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of storing the linked list node in the data structure&nbsp;</p>",
            "<p>Think of a solution to remove the Xth node from the start instead of removing the Kth node from the end of the linked list.</p>",
            "<p>Try to solve the problem without finding the length of the linked list using two pointers.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity:O(N)\r\n    Space Compexity:O(1)\r\n\r\n    Where N is the total nodes in Linked List\r\n*/\r\nNode *removeKthNode(Node *head, int K) {\r\n    \r\n    if (head == NULL || K == 0) {\r\n        return head;\r\n    }\r\n\r\n    Node *slow = head;\r\n    Node *fast = head;\r\n\r\n    for (int i = 0; i < K; i++) {\r\n\r\n        // If head is the Kth node from end of Linked List.\r\n        if (fast->next == NULL) {\r\n            Node *next = head->next;\r\n            head->next = NULL;\r\n            head = next;\r\n\r\n            return head;\r\n        }\r\n\r\n        else {\r\n            fast = fast->next;\r\n        }\r\n\r\n    }\r\n\r\n    // Moving both slow and fast pointer with same speed.\r\n    while (fast->next != NULL) {\r\n        slow = slow->next;\r\n        fast = fast->next;\r\n    }\r\n\r\n    // Removing the Kth node from end of Linked List.\r\n    slow->next = slow->next->next;\r\n\r\n    return head;\r\n\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N)\r\n    Space Compexity: O(1)\r\n\r\n    Where 'N' is the total nodes in Linked List.\r\n'''\r\n\r\ndef removeKthNode(head, k):\r\n    if head is None or k == 0:\r\n        return head\r\n\r\n    slow = head\r\n    fast = head\r\n\r\n    for i in range(k):\r\n\r\n        # If head is the Kth node from end of Linked List.\r\n        if (fast.next == None):\r\n            next = head.next\r\n            head.next = None\r\n            head = next\r\n\r\n            return head\r\n        else:\r\n            fast = fast.next\r\n\r\n    # Moving both slow and fast pointer with same speed.\r\n    while (fast.next != None):\r\n        slow = slow.next\r\n        fast = fast.next\r\n\r\n    # Removing the Kth node from end of Linked List.\r\n    slow.next = slow.next.next\r\n\r\n    return head",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Compexity: O(1)\r\n\r\n    Where 'N' is the total nodes in Linked List.\r\n*/\r\n\r\npublic class Solution {\r\n    public static Node removeKthNode(Node head, int K) {\r\n\r\n        if (head == null || K == 0) {\r\n            return head;\r\n        }\r\n\r\n        Node slow = head;\r\n        Node fast = head;\r\n\r\n        for (int i = 0; i < K; i++) {\r\n\r\n            // If head is the Kth node from end of Linked List.\r\n            if (fast.next == null) {\r\n                Node next = head.next;\r\n                head.next = null;\r\n                head = next;\r\n\r\n                return head;\r\n            } else {\r\n                fast = fast.next;\r\n            }\r\n\r\n        }\r\n\r\n        // Moving both slow and fast pointer with same speed.\r\n        while (fast.next != null) {\r\n            slow = slow.next;\r\n            fast = fast.next;\r\n        }\r\n\r\n        // Removing the Kth node from end of Linked List.\r\n        slow.next = slow.next.next;\r\n\r\n        return head;\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}