{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7232,
            "title": "Delete Leaf Nodes with Value X",
            "titleSlug": "delete-leaf-nodes-with-value-x_630465",
            "content": "<h4 id=\"you-are-given-a-binary-tree-in-which-the-data-present-in-the-nodes-are-integers-you-are-also-given-an-integer-x\">You are given a binary tree, in which the data present in the nodes are integers. You are also given an integer X.</h4>\n\n<h4 id=\"your-task-is-to-delete-all-the-leaf-nodes-with-value-x-in-the-process-if-the-newly-formed-leaves-also-have-value-x-you-have-to-delete-them-too\">Your task is to delete all the leaf nodes with value X. In the process, if the newly formed leaves also have value X, you have to delete them too.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<p><be></p>\n\n<pre><code>For the given binary tree, and X = 3:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004264.png\" alt=\"tree\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer T, the number of test cases. Then T cases follow.\n\nFor each test case, the first line contains input in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nThe second input line contains integer X, the value to be deleted.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, in a new output line, print the inorder traversal of the tree.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print anything. Just make the changes in the given tree itself and return the root of the updated tree.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 3*10^3\n1 &lt;= A &lt;= 10^5\n1 &lt;= X &lt;= 10^5\n\nTime limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n1 3 3 2 3 -1 3 -1 -1 -1 -1 -1 -1\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 3 1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004264.png\" alt=\"tree\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n1 2 2 3 3 3 3 -1 -1 -1 -1 -1 -1 -1 -1\n3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2 1 2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 18,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree where each node contains an integer value, and an integer X, the task is to delete all leaf nodes with a value equal to X. After deleting these leaf nodes, if any new leaf nodes are formed that also have the value X, they should also be deleted. This process should continue until no more leaf nodes with the value X exist in the tree.",
                "constraints": [
                    "1 <= T <= 100",
                    "0 <= N <= 3*10^3",
                    "1 <= A <= 10^5",
                    "1 <= X <= 10^5",
                    "Time limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "1\n1 3 3 2 3 -1 3 -1 -1 -1 -1 -1 -1\n3",
                        "output": "2 3 1",
                        "explanation": "Initially, the tree is:\n\n      1\n     / \\\n    3   3\n   / \\   \\\n  2   3   -1\n     / \\\n    -1  -1\n\nAfter deleting leaf nodes with value 3 and the cascading effect of deletion:\n\n      1\n     / \\\n    3   3\n   / \n  2\n\nAfter deleting leaf nodes with value 3 and the cascading effect of deletion:\n\n      1\n     / \n    2\nInorder traversal is 2 1."
                    },
                    {
                        "input": "1\n1 2 2 3 3 3 3 -1 -1 -1 -1 -1 -1 -1 -1\n3",
                        "output": "2 1 2",
                        "explanation": "Initially, the tree is:\n\n         1\n       /   \\\n      2     2\n     / \\   / \\\n    3   3 3   3\n\nAfter deleting all leaf nodes with value 3:\n\n         1\n       /   \\\n      2     2\n\nInorder Traversal is: 2 1 2"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>If you want to check whether a node is a leaf after all deletions below it are performed, should you check for the left and right child before or after traversal?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}