{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9384,
            "title": "Delete middle element from stack",
            "titleSlug": "delete-middle-element-from-stack_985246",
            "content": "<h4 id=\"you-are-having-a-stack-arr-of-size-n-1-your-task-is-to-delete-the-middlemost-element-so-that-the-size-of-resulting-stack-is-n\">You are having a stack &quot;ARR&quot; of size &#39;N+1&#39;, your task is to delete the middlemost element so that the size of resulting stack is &#39;N&#39;.</h4>\n\n<h4 id=\"a-stack-is-a-linear-data-structure-where-both-insertion-and-deletion-of-elements-take-place-at-the-top-it-follows-filo-first-in-last-out-or-lifo-last-in-first-out-approaches-books-piled-on-top-of-each-other-is-an-example-of-a-stack-where-you-can-only-remove-a-single-book-at-a-time-which-is-at-the-top-of-the-stack-likewise-you-can-only-add-a-single-book-at-a-time-on-the-top-of-the-stack-only\">A stack is a linear data structure where both insertion and deletion of elements take place at the top. It follows FILO (First In Last Out) or LIFO (Last In First Out) approaches. Books piled on top of each other is an example of a stack, where you can only remove a single book at a time, which is at the top of the stack. Likewise, you can only add a single book at a time, on the top of the stack only.</h4>\n\n<h5 id=\"example\">Example :-</h5>\n\n<pre><code>INPUT : ARR [ ] = [ 1 , 2 , 3 , 4 , 5 ] , N = 4\nOUTPUT: ARR [ ] = [ 1 , 2 , 4,  5 ]\n\nThe above example contains an odd number of elements, hence the middle element is clearly the (N+1) / 2th element, which is removed from the stack in the output.\n\nINPUT : ARR [ ] = [ 5, 6, 7, 8 ] , N = 3\nOUTPUT: ARR [ ] = [ 5, 7, 8 ]\n\nThe above example contains an even number of elements, so out of the two middle elements, we consider the one which occurs first. Hence, the middle element would be ((N+1) / 2 - 1) element, which is 6 and is removed from the stack in the output.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format</h4>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of the test case. Then the test case follows.\n\nThe first line of each test case contains an integer &#39;N&#39;, where &#39;N+1&#39; denotes the number of elements in the stack initially.\n\nThe second line of each test case contains &#39;N+1&#39; space-separated integers, denoting the elements of the stack.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For every test case, print &#39;N&#39; space-separated integer, denoting the elements in the stack after removing the middle element from the input stack. \nThe output of every test case will be printed in a separate line. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100    \n1 &lt;= N+1 &lt;= 3000\n0 &lt;= data &lt;= 10^9\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N+1\u2019 is the number of elements in the input Stack. \u2018data\u2019 is the value of each element in the stack.\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\n1 2 3 4 5\n7\n83 74 67 49 94 8 11 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 4 5\n83 74 67 94 8 11 1\n</code></pre>\n\n<h4 id=\"explanation-for-sample-1\">Explanation for Sample 1:</h4>\n\n<pre><code>In the 1st testcase, there are an odd number of elements, hence the middle element is clearly the (N+1) / 2th element which is 3, and is removed from the stack in the output.\n\nIn the 2nd testcase, there are an odd number of elements, hence the middle element is clearly the (N+1) / 2th element which is 49, and is removed from the stack in the output.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n1\n5 10    \n4\n1 3 4 2 7\n5\n9 5 2 7 8 6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>10\n1 3 2 7\n9 5 7 8 6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 207,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a stack represented as an array of 'N+1' integers, remove the middle element from the stack, resulting in a stack of size 'N'. For stacks with an odd number of elements, the middle element is at index (N+1)/2 (0-based indexing). For stacks with an even number of elements, the middle element is at index (N+1)/2 - 1 (0-based indexing).",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N+1 <= 3000",
                    "0 <= data <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 4, inputStack = [1, 2, 3, 4, 5]",
                        "output": "1 2 4 5",
                        "explanation": "N+1 is 5, which is odd.  The middle element is at index (4+1)/2 = 2, so the element '3' is removed. The resulting stack is [1, 2, 4, 5]."
                    },
                    {
                        "input": "N = 3, inputStack = [5, 6, 7, 8]",
                        "output": "5 7 8",
                        "explanation": "N+1 is 4, which is even. The middle element is at index (3+1)/2 - 1 = 1, so the element '6' is removed. The resulting stack is [5, 7, 8]."
                    },
                    {
                        "input": "N = 1, inputStack = [5, 10]",
                        "output": "10",
                        "explanation": "N+1 is 2, which is even. The middle element is at index (1+1)/2 - 1 = 0, so the element '5' is removed. The resulting stack is [10]."
                    },
                    {
                        "input": "N = 4, inputStack = [1, 3, 4, 2, 7]",
                        "output": "1 3 2 7",
                        "explanation": "N+1 is 5, which is odd. The middle element is at index (4+1)/2 = 2, so the element '4' is removed. The resulting stack is [1, 3, 2, 7]."
                    },
                    {
                        "input": "N = 5, inputStack = [9, 5, 2, 7, 8, 6]",
                        "output": "9 5 7 8 6",
                        "explanation": "N+1 is 6, which is even. The middle element is at index (5+1)/2 - 1 = 2, so the element '2' is removed. The resulting stack is [9, 5, 7, 8, 6]."
                    },
                    {
                        "input": "N = 7, inputStack = [83, 74, 67, 49, 94, 8, 11, 1]",
                        "output": "83 74 67 94 8 11 1",
                        "explanation": "N+1 is 8, which is even. The middle element is at index (7+1)/2 - 1 = 3, so the element '49' is removed. The resulting stack is [83, 74, 67, 94, 8, 11, 1]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we do it recursively?</p>",
            "<p>Can you solve it using another stack?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n\tTime Complexity: O(N)\r\n\tSpace Complexity: O(N)\r\n\r\n\tWhere N is the number of integers in the stack\r\n*/\r\n\r\nvoid deleteMiddle(stack<int> &inputStack, int N)\r\n{\r\n    \r\n    // Initialising temporary stack\r\n\tstack<int> tempStack;                    \r\n\tint count = 0;\r\n\r\n    // Storing elements from input stack to temporary stack\r\n\twhile(count < N / 2)\r\n    {                     \r\n\t\ttempStack.push(inputStack.top());\r\n\t\tinputStack.pop();\r\n\t\tcount = count + 1;\r\n\t}\r\n\r\n    // Deleting the middle element\r\n\tinputStack.pop();                       \r\n\r\n    // Storing elements back to input stack\r\n\twhile( ! tempStack.empty())\r\n    {              \r\n\t\tinputStack.push(tempStack.top());\r\n\t\ttempStack.pop();\r\n\t}\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n\r\n    Where N is the number of integers in the stack\r\n*/\r\nimport java.util.Stack;\r\n\r\npublic class Solution {\r\n    public static void deleteMiddle(Stack<Integer> inputStack, int N) \r\n    {\r\n        \r\n        // Initializing temporary stack\r\n        Stack<Integer> tempStack = new Stack<>(); \r\n        int count = 0;\r\n        \r\n        // Reducing N by 1 to make sure that for even terms, first middle is removed\r\n        N = N - 1; \r\n        \r\n        // Storing elements from input stack to temporary stack\r\n        while (count < N / 2) \r\n        { \r\n            tempStack.push(inputStack.peek());\r\n            inputStack.pop();\r\n            count = count + 1;\r\n        }\r\n\r\n        // Deleting the middle element\r\n        inputStack.pop(); \r\n\r\n        // Storing elements back to input stack\r\n        while (!tempStack.empty()) \r\n        { \r\n            inputStack.push(tempStack.peek());\r\n            tempStack.pop();\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n\r\n    Where N is the number of integers in the stack\r\n'''\r\n\r\ndef deleteMiddle(inputStack, N):\r\n    \r\n    # Initialising temporary stack\r\n    tempStack = []                    \r\n    count = 0\r\n\r\n    # Storing elements from input stack to temporary stack\r\n    while(count < N // 2):\r\n        tempStack.append(inputStack[-1])\r\n        inputStack.pop()\r\n        count = count + 1\r\n\r\n    # Deleting the middle element\r\n    inputStack.pop()\r\n\r\n    # Storing elements back to input stack\r\n    while len(tempStack) != 0:\r\n        inputStack.append(tempStack[-1])\r\n        tempStack.pop()",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}