{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9939,
            "title": "Delete Node In A Linked List",
            "titleSlug": "delete-node-in-a-linked-list_1105578",
            "content": "<h4 id=\"you-are-given-a-singly-linked-list-of-integers-and-a-reference-to-the-node-to-be-deleted-every-node-of-the-linked-list-has-a-unique-value-written-on-it-your-task-is-to-delete-that-node-from-the-linked-list\">You are given a Singly Linked List of integers and a reference to the node to be deleted. Every node of the Linked List has a unique value written on it. Your task is to delete that node from the linked list.</h4>\n\n<h4 id=\"a-singly-linked-list-is-a-linear-data-structure-in-which-we-can-traverse-only-in-one-direction-i-e-from-head-to-tail-it-consists-of-several-nodes-where-each-node-contains-some-data-and-a-reference-to-the-next-node\">A singly linked list is a linear data structure in which we can traverse only in one direction i.e. from Head to Tail. It consists of several nodes where each node contains some data and a reference to the next node.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>\u2022 The reference to the head of the linked list is not given.\n\u2022 The node to be deleted is not a tail node.\n\u2022 The value of each node in the Linked List is unique.\n\u2022 It is guaranteed that the node to be deleted is present in the linked list.\n</code></pre>\n\n<h4 id=\"a-sample-linked-list\">A sample Linked List-</h4>\n\n<p><img src=\"https://files.codingninjas.in/samplelinkedlist-7675.png\" alt=\"singly_linkedlist\"></p>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then, the T test cases follow.\n\nThe first line of each test case contains space-separated integers denoting the values of nodes of the Linked List. The Linked List is terminated with -1. Hence, -1 is never a node value of the Linked List.\n\nThe second line of each test case contains a single integer K which denotes the node to be deleted from the Linked List.\n\nFor more clarity please refer to the sample inputs.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, delete the given node and then print a single line containing the elements of the Linked List separated by a single space, &#39;-1&#39; at the end denotes the end of the linked list.\n\nThe output for each test case will be printed in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n2 &lt;= N &lt;= 5000\n-10 ^ 9 &lt;= NODE.DATA &lt;= 10 ^ 9 and node.data != -1\n\nWhere &#39;N&#39; denotes the total number of nodes in the Linked List and &#39;NODE.DATA&#39; is the value of the node present.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 5 7 10 -1\n7\n-8 3 4 -2 1 -1\n4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 5 10 -1\n-8 3 -2 1 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>For the first test case, the given Linked List is\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/deletenodelinkedlist-1-7676.png\" alt=\"explanation\"></p>\n\n<pre><code>So, after deleting the node 7, the Linked List becomes 2 \u2192 5 \u2192 10 \u2192 NULL, which is shown in the below figure.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample1deletednode-7678.png\" alt=\"explanation\"></p>\n\n<pre><code>For the second test case, the given Linked List is\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/deletenodelinkedlist-2-7679.png\" alt=\"explanation\"></p>\n\n<pre><code>So, after deleting the node 4, the Linked List becomes  -8 \u2192 3 \u2192 -2 \u2192 1 \u2192 NULL.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4 9 10 -1\n4\n-7 7 -1\n-7\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>9 10 -1\n7 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>For the first test case, the given Linked List is\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/deletenodelinkedlist-3-7680.png\" alt=\"explanation\"></p>\n\n<pre><code>So, after deleting the node 4, the Linked List becomes 9 \u2192 10 \u2192 NULL.\n\n\nFor the second test case, the given Linked List is\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/deletenodelinkedlist-4-7681.png\" alt=\"explanation\"></p>\n\n<pre><code>So, after deleting the node -7, the Linked List becomes 7 \u2192 NULL.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 152,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a singly linked list of integers and a reference to the node to be deleted. Every node in the list has a unique value. Delete the given node from the linked list. Note that you are *not* given the head of the list, the node to be deleted is *not* the tail, and each node's value is unique. The target node *is* guaranteed to be present in the list.",
                "constraints": [
                    "1 <= T <= 100",
                    "2 <= N <= 5000",
                    "-10^9 <= NODE.DATA <= 10^9 and node.data != -1",
                    "Where 'N' denotes the total number of nodes in the Linked List and 'NODE.DATA' is the value of the node present."
                ],
                "testcases": [
                    {
                        "input": "2 5 7 10 -1\n7",
                        "output": "2 5 10 -1",
                        "explanation": "The linked list is 2 -> 5 -> 7 -> 10 -> NULL. Deleting node 7 results in 2 -> 5 -> 10 -> NULL."
                    },
                    {
                        "input": "-8 3 4 -2 1 -1\n4",
                        "output": "-8 3 -2 1 -1",
                        "explanation": "The linked list is -8 -> 3 -> 4 -> -2 -> 1 -> NULL. Deleting node 4 results in -8 -> 3 -> -2 -> 1 -> NULL."
                    },
                    {
                        "input": "4 9 10 -1\n4",
                        "output": "9 10 -1",
                        "explanation": "The linked list is 4 -> 9 -> 10 -> NULL. Deleting node 4 results in 9 -> 10 -> NULL."
                    },
                    {
                        "input": "-7 7 -1\n-7",
                        "output": "7 -1",
                        "explanation": "The linked list is -7 -> 7 -> NULL. Deleting node -7 results in 7 -> NULL."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a solution to store the data of the next node in the node that is to be deleted.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity - O(1)\n    Space Complexity - O(1)\n*/\n\nvoid deleteNode(LinkedListNode<int> * node) \n{\n\t// Create a temp pointer that initially points to node -> next.\n    LinkedListNode<int> * temp = node->next;\n\n    // Store the data of temp as node -> data and make node -> next = temp -> next.\n    node -> data = temp -> data;\n    node -> next = temp -> next;\n\n    // Finally delete the temp pointer.\n    delete temp;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(1)\n    Space complexity: O(1)\n'''\n\ndef deleteNode(node):\n\n\t# Create a temp node that initially points to node -> next.\n\ttemp = node.next\n\n\t# Store the data of temp as node -> data and make node -> next = temp->next.\n\tnode.data = temp.data\n\tnode.next = temp.next\n\n\t# Finally delete the temp node.\n\tdel temp",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity - O(1)\r\n    Space Complexity - O(1)\r\n*/\r\n\r\npublic class Solution {\r\n\tpublic static void deleteNode(LinkedListNode<Integer> node) {\r\n\t\t// Create a temp pointer that initially points to node -> next.\r\n\t\tLinkedListNode<Integer>  temp = (node == null) ? node : (node.next);\r\n\r\n\t\t// Store the data of temp as node -> data and make node -> next = temp -> next.\r\n\t\tnode . data = temp . data;\r\n\t\tnode . next = (temp == null) ? null : (temp . next);\r\n\r\n\t\t// Finally delete the temp pointer.\r\n\t\ttemp = null;\r\n\t}\r\n\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}