{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8831,
            "title": "Delete Node In BST",
            "titleSlug": "delete-node-in-bst_920381",
            "content": "<h4 id=\"you-have-been-given-a-binary-search-tree-of-integers-with-n-nodes-you-are-also-given-data-of-a-node-of-this-tree-your-task-is-to-delete-the-given-node-from-the-bst\">You have been given a Binary Search Tree of integers with <em><strong>\u2018N\u2019</strong></em> nodes. You are also given data of a node of this tree. Your task is to delete the given node from the BST.</h4>\n\n<p><br></p>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-that-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure that has the following properties:</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>For the given BST, if we want to delete the node with data 5 :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-28-6122.png\" alt=\"Input\"></p>\n\n<pre><code>The modified BST will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-30-6123.png\" alt=\"Ouput\"></p>\n\n<pre><code>Please notice that another valid answer is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-32-6124.png\" alt=\"Output\"></p>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1. The node which we want to delete will always be present in the given tree.\n\n2. If after deletion the tree becomes empty, print -1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains the elements of the tree in the level order form separated by a single space. If any node does not have a left or right child, -1 is used in its place. Refer to the example given below.\n\nThe second contains the data of the node which we want to delete.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be : \n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code> 1. The first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\n2. The input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print the inorder traversal of the modified Binary Search Tree.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The inorder traversal of a binary tree is the traversal method in which for any node its left subtree is visited first, then the node itself, and then the right subtree. \n\n2. You don&#39;t need to print the output, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;=5000\n0&lt;= data &lt;=10^5\nWhere \u2018N\u2019 is the number of nodes in the binary search tree and \u2018data&#39; denotes data contained in the node of the binary search tree.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>15 10 20 8 12 16 25 -1 -1 -1 -1 -1 -1 -1 -1\n10\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>8 12 15 16 20 25 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample output 1:</h5>\n\n<pre><code>The tree can be represented as follows:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-14-5921.png\" alt=\"Example\"></p>\n\n<pre><code>After the deletion of the node with data 10 the BST will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-34-6125.png\" alt=\"Output\"></p>\n\n<pre><code>The inorder traversal of this modified BST is 8 12 15 16 20 25.\n\nAnother valid modified BST can be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-36-6126.png\" alt=\"Output\"></p>\n\n<pre><code>The inorder traversal of this modified BST is also 8 12 15 16 20 25.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>6 4 -1 -1 5\n6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>4 5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2:</h5>\n\n<pre><code>The tree can be represented as follows:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/largestbt2-10344.png\" alt=\"Example\"></p>\n\n<pre><code>After the deletion of the node with data 6 the BST will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/deletenode-10541.png\" alt=\"Output\"></p>\n\n<pre><code>The inorder traversal of this modified BST is 4 5.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 56,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a Binary Search Tree (BST) of integers with 'N' nodes. Your task is to delete a node with a given 'data' value from the BST. The BST follows the properties:  The left subtree of a node contains only nodes with data less than the node's data.  The right subtree of a node contains only nodes with data greater than the node's data.  Both the left and right subtrees must also be binary search trees. Return the inorder traversal of the modified BST.",
                "constraints": [
                    "1 <= N <= 5000",
                    "0 <= data <= 10^5",
                    "Where \u2018N\u2019 is the number of nodes in the binary search tree and \u2018data' denotes data contained in the node of the binary search tree.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "15 10 20 8 12 16 25 -1 -1 -1 -1 -1 -1 -1 -1\n10",
                        "output": "8 12 15 16 20 25",
                        "explanation": "The node with data 10 is deleted. One possible valid BST after deletion has inorder traversal 8 12 15 16 20 25."
                    },
                    {
                        "input": "6 4 -1 -1 5\n6",
                        "output": "4 5",
                        "explanation": "The node with data 6 is deleted. The resulting BST has inorder traversal 4 5."
                    },
                    {
                        "input": "1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n5",
                        "output": "1 2 3 4 6 7",
                        "explanation": "A BST is constructed from the level order input and then 5 is deleted."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use BST properties to delete the node.</p>",
            "<p>Try to use inorder predecessor of the BST.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}