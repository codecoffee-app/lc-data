{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10914,
            "title": "Delete Nodes And Return Forest",
            "titleSlug": "delete-nodes-and-return-forest_1280135",
            "content": "<h4 id=\"you-are-given-a-binary-tree-that-contains-unique-elements-you-have-to-delete-all-nodes-with-value-in-array-delnodes-once-the-nodes-are-deleted-you-will-have-a-set-of-multiple-disjoint-trees-we-define-this-set-as-a-forest\">You are given a binary tree that contains unique elements. You have to delete all nodes with value in array &#39;delNodes[]&#39;.  Once the nodes are deleted, you will have a set of multiple disjoint trees. We define this set as a forest.</h4>\n\n<h4 id=\"your-task-is-to-return-a-list-of-pointers-to-the-root-node-of-the-disjoint-trees\">Your task is to return a list of  pointers to the root node of the disjoint trees,</h4>\n\n<h4 id=\"example\">Example :</h4>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000332_1617429622_1.png\" alt=\"\"></p>\n\n<h4 id=\"if-the-nodes-marked-in-red-are-deleted-we-will-have-the-following-disjoint-trees\">If the nodes marked in red are deleted we will have the following disjoint trees:</h4>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000333_1617429628_2.png\" alt=\"\"></p>\n\n<h4 id=\"therefore-the-result-will-be-1-10-6\">Therefore the result will be [ (1), (10), (6) ].</h4>\n\n<h4 id=\"here-1-means-a-pointer-to-the-node-with-the-value-1\">Here  (1) means a pointer to the node with the value 1.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The order of elements within the lists doesn\u2019t matter.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space.\n\nThe second contains each test case contains an integer \u2018K\u2019 denoting the number of elements in the \u2018delNodes\u2019 array.\n\nThe third line of each test case contains K space-separated integers which are the elements to deleted from the tree.\n\nIn the first line values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000334_1617429635_3.png\" alt=\"\">    </p>\n\n<pre><code>For example, the level order input for the tree depicted in the above image would be :\n15\n40 62\n-1 -1 10 20\n-1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 15.\n\nLevel 2 :\nLeft child of 15 = 40\nRight child of 15 = 62\n\nLevel 3 :\nLeft child of 40 = null (-1)\nRight child of 40 = null (-1)\nLeft child of 62 = 10\nRight child of 62 = 20\n\nLevel 4 :\nLeft child of 10 = null (-1)\nRight child of 10 = null (-1)\nLeft child of 20 = null (-1)\nRight child of 20 = null (-1)\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:    \n15 40 62 -1 -1 10 20 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each case just return the list of pointers to the root nodes of disjoint trees,\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 3000\n1 &lt;= K &lt;= N\n0 &lt;= Node Data &lt;= 5000\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n1 2 5 7 9 10 6 -1 -1 -1 -1 -1 -1 -1 -1\n2\n5 7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>[ (1) , (10), (6) ]\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>After deletion of nodes we will have 3 disjoint trees:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000335_1617429641_4.png\" alt=\"\"></p>\n\n<pre><code>The root node of the three trees is with values 1, 10, 6.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4 10 -1 -1 11 -1 15 14 -1 -1 -1 \n2\n15 4 \n11 16 17 6 15 -1 -1 -1 -1 -1 -1 \n0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>[ (10) (14) ]\n[ (11) ]\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree containing unique node values and an array `delNodes` of values to delete, remove all nodes with values present in `delNodes`. This deletion process will result in a forest of disjoint trees. Return a list of the root nodes of these resulting disjoint trees.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 3000 (where N is the number of nodes in the tree)",
                    "1 <= K <= N (where K is the number of nodes to delete)",
                    "0 <= Node Data <= 5000",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "1\n1 2 5 7 9 10 6 -1 -1 -1 -1 -1 -1 -1 -1\n2\n5 7",
                        "output": "[ (1) , (10), (6) ]",
                        "explanation": "After deleting nodes with values 5 and 7, three disjoint trees remain. The roots of these trees have values 1, 10, and 6."
                    },
                    {
                        "input": "2\n4 10 -1 -1 11 -1 15 14 -1 -1 -1\n2\n15 4\n11 16 17 6 15 -1 -1 -1 -1 -1 -1\n0",
                        "output": "[ (10) (14) ]\n[ (11) ]",
                        "explanation": "In the first test case, deleting nodes 15 and 4 results in a forest with roots 10 and 14.\nIn the second test case, no nodes are deleted, so the tree remains intact with root 11."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a DFS approach where we solve the problem recursively for the left and the right subtree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}