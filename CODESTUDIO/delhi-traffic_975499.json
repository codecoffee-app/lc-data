{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9144,
            "title": "Delhi traffic",
            "titleSlug": "delhi-traffic_975499",
            "content": "<h4 id=\"there-are-n-junctions-connected-by-m-bi-directional-roads-at-most-one-road-is-present-between-any-pair-of-junctions-there-is-no-road-connecting-a-junction-to-itself-the-travel-time-for-a-road-is-the-same-in-both-directions\">There are \u2018N\u2019 junctions connected by \u2018M\u2019 bi-directional roads. At most, one road is present between any pair of junctions. There is no road connecting a junction to itself. The travel time for a road is the same in both directions.</h4>\n\n<h4 id=\"a-vehicle-at-a-junction-can-start-moving-along-a-road-only-when-the-light-at-the-current-junction-flashes-green-if-a-vehicle-arrives-at-a-junction-between-green-flashes-it-must-wait-for-the-next-green-flash-before-continuing-in-any-direction-if-it-arrives-at-a-junction-exactly-when-the-light-flashes-green-it-can-immediately-proceed-along-any-road-originating-from-that-junction\">A vehicle at a junction can start moving along a road only when the light at the current junction flashes green. If a vehicle arrives at a junction between green flashes, it must wait for the next green flash before continuing in any direction. If it arrives at a junction exactly when the light flashes green, it can immediately proceed along any road originating from that junction.</h4>\n\n<h4 id=\"you-are-given-a-city-map-that-shows-travel-times-for-all-roads-for-each-junction-i-you-are-given-p-i-the-time-period-between-green-flashes-of-the-light-at-that-junction-the-light-at-junction-i-flashes-green-at-times-0-p-i-2p-i-3p-i-and-so-on\">You are given a city map that shows travel times for all roads. For each junction \u2018i\u2019, you are given \u2018P[i]\u2019, the time period between green flashes of the light at that junction. The light at junction \u2018i\u2019 flashes green at times 0, P[i], 2P[i], 3P[i] and so on.</h4>\n\n<h4 id=\"your-task-is-to-return-the-minimum-time-taken-from-a-given-source-junction-src-to-a-given-destination-junction-des-for-a-vehicle-when-the-traffic-starts-the-junctions-are-identified-by-integers-0-through-n-1-if-we-cannot-reach-the-destination-junction-then-return-1\">Your task is to return the minimum time taken from a given source junction \u2018src\u2019 to a given destination junction \u2019des\u2019 for a vehicle when the traffic starts. The junctions are identified by integers \u20180\u2019 through \u2018N - 1\u2019. If we cannot reach the destination junction, then return -1.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Consider if \u2018N\u2019 = 3 and edges are \n[[0, 1, 2],\n [1, 2, 4]]\n&#39;P&#39; = [2, 3, 4], and we have to reach from junction 0 to 2.\nThe time consumed from junction 0 to 1 is 2. We have to wait for 1 for the next green flash at junction 1. The time consumed from junction 1 to 2 is 4. The path 0 -&gt; 1 -&gt; 2 takes time 2 + 1 (wait till 3) + 4 = 7. Hence, the answer is 7.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019 and \u2018M\u2019, denoting the number of junctions and roads.\n\nThe next line contains \u2018N\u2019 space-separated integers denoting the elements of the array \u2018P\u2019 elements where \u2018P[i]\u2019 is the time needed at junction \u2018i\u2019 for light to turn green.\n\nThe next \u2018M\u2019 lines of each test case contain three space-separated integers denoting the road between \u2018Edges[i][0]\u2019 and \u2018Edges[i][1]\u2019 junctions with \u2018Edges[i][2]\u2019 denoting the time to travel the road.\n\nThe last line of each test case contains two space-separated integers, &#39;src&#39; and &#39;des&#39;, denoting the source and destination junctions. \n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, print a single integer that denotes the minimum time needed from the junction \u2018src\u2019 to \u2018des\u2019. Print \u2018-1\u2019 in case we cannot reach the \u2018des\u2019 junction.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n2 &lt;= N &lt;= 10^5\n1 &lt;= M &lt;= 10^5\n1 &lt;= P[i] &lt;= 10^7\n0 &lt;= Edges[i][0] , Edges[i][1] &lt; N\n1 &lt;= Edges[i][2] &lt;= 10^7\n0 &lt;= src, des &lt; \u2018N\u2019\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 5\n4 3 2 5\n0 1 4\n0 2 8\n1 2 6\n1 3 10\n2 3 7\n0 3\n3 3\n2 3 4\n0 1 5\n1 2 4\n0 2 2\n0 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>15\n2\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>In test case 1:\nThe path 0 -&gt; 1 -&gt; 3 takes time 4 + 2 (wait till 6) + 10 = 16.\nThe path 0 -&gt; 2 -&gt; 3 takes time 8 + 0 (no wait) + 7 = 15.\nThe path 0 -&gt; 1 -&gt; 2 -&gt; 3 takes time 4 + 2 (wait till 6) + 6 + 0 (no wait) + 7 = 19.\nThe path 0 -&gt; 2 -&gt; 1 -&gt; 3 takes time 8 + 0 (no wait) + 6 + 1 (wait till 15) + 10 = 25.\nHence the answer is 15.\n\nIn test case 2:\nThe path 0 -&gt; 2 takes time 2 as there is the direct edge of weight 2. Hence the answer is 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n3 1\n3 2 6\n0 1 9\n0 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a network of junctions connected by bi-directional roads, where each junction has a traffic light that flashes green at regular intervals. The task is to find the minimum time required to travel from a source junction to a destination junction, considering the waiting time at each junction for the green light. If the destination is unreachable, return -1.",
                "constraints": [
                    "1 <= T <= 5",
                    "2 <= N <= 10^5",
                    "1 <= M <= 10^5",
                    "1 <= P[i] <= 10^7",
                    "0 <= Edges[i][0], Edges[i][1] < N",
                    "1 <= Edges[i][2] <= 10^7",
                    "0 <= src, des < N",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 5\n4 3 2 5\n0 1 4\n0 2 8\n1 2 6\n1 3 10\n2 3 7\n0 3",
                        "output": "15",
                        "explanation": "The shortest path from junction 0 to junction 3 is 0 -> 2 -> 3, which takes a total time of 15. The cost from 0 to 2 is 8. Arriving at junction 2 at time 8. The green light at junction 2 flashes at intervals of 2. Since we arrive at a time when the light flashes green we do not wait. Cost from junction 2 to junction 3 is 7. Therefore total cost is 8 + 7 = 15."
                    },
                    {
                        "input": "3 3\n2 3 4\n0 1 5\n1 2 4\n0 2 2\n0 2",
                        "output": "2",
                        "explanation": "The shortest path from junction 0 to junction 2 is directly through the edge with weight 2."
                    },
                    {
                        "input": "3 1\n3 2 6\n0 1 9\n0 2",
                        "output": "-1",
                        "explanation": "There is no path from junction 0 to junction 2. The only available path goes from junction 0 to 1. Hence the answer is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of a Depth First Search approach.</p>",
            "<p>Try to use the Dijkstra algorithm.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}