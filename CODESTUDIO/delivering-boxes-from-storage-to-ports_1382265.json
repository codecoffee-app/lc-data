{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11625,
            "title": "Delivering Boxes from Storage to Ports",
            "titleSlug": "delivering-boxes-from-storage-to-ports_1382265",
            "content": "<h4 id=\"you-have-the-task-of-delivering-some-boxes-from-storage-to-their-ports-using-only-one-ship-however-this-ship-has-a-limit-on-the-number-of-boxes-and-the-total-weight-that-it-can-carry-you-are-given-an-array-boxes-where-boxes-i-ports-i-weighti-and-three-integers-portscount-maxboxes-and-maxweight\">You have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a limit on the number of boxes and the total weight that it can carry. You are given an array boxes, where boxes[i] = [ports\u200b\u200bi\u200b, weighti], and three integers portsCount, maxBoxes, and maxWeight.</h4>\n\n<pre><code>- ports\u200b\u200bi is the port where you need to deliver the ith box and weightsi is the weight of the ith box.\n- portsCount is the number of ports.\n- maxBoxes and maxWeight are the respective box and weight limits of the ship.\n</code></pre>\n\n<h4 id=\"the-boxes-need-to-be-delivered-in-the-order-they-are-given-the-ship-will-follow-these-steps\">The boxes need to be delivered in the order they are given. The ship will follow these steps:</h4>\n\n<pre><code>- The ship will take some number of boxes from the boxes queue, not violating the maxBoxes and maxWeight constraints.\n- For each loaded box in order, the ship will make a trip to the port the box needs to be delivered to and deliver it. If the ship is already at the correct port, no trip is needed, and the box can immediately be delivered.\n- The ship must end at storage after all the boxes have been delivered.\n</code></pre>\n\n<h4 id=\"return-the-minimum-number-of-trips-the-ship-needs-to-make-to-deliver-all-boxes-to-their-respective-ports\">Return the minimum number of trips the ship needs to make to deliver all boxes to their respective ports.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Remember that the given list of boxes is to be delivered in the given order in the original box list.\n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>Input: boxes = [[1, 1], [2, 1], [1, 1]], portsCount = 2, maxBoxes = 3, maxWeight = 3\nOutput: 4\n\nExplanation: The optimal strategy is as follows: \n\nThe ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips.\nSo the total number of trips is 4.\n\nNote that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i.e. the second box needs to be delivered at port 2 before the third box).\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input is the number of test cases \u2018T\u2019 which are going to be there.\n\nThe first line of each test case would be three space-separated integers representing the \u2018portsCount\u2019, \u2018maxBoxes\u2019, and \u2018maxWeight\u2019.\n\nThe second line of each test case would an integer \u2018N\u2019 denoting the total number of boxes given which are needed to be delivered.\n\nNow each \u2018N\u2019 line of the test case would comprise of two space-separated integers \u2018port[i]\u2019 and \u2018weight[i]\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the minimum number of trips the ship needs to make to deliver all boxes to their respective ports.\n\nThe output for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= boxes.length &lt;= 10 ^ 5\n1 &lt;= portsCount, maxBoxes, maxWeight &lt;= 10 ^ 5\n1 &lt;= ports\u200b\u200bi &lt;= portsCount\n1 &lt;= weightsi &lt;= maxWeight\n\nWhere \u2018boxes\u2019 is the 2-D array of [\u2018portsi\u2019,\u2019 weights\u2019], \u2018portsCount\u2019 is the number of ports, maxBoxes, and maxWeight is the respective box and weight limits of the ship.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 3 6\n5\n1 2\n3 3\n3 1\n3 1\n2 4\n5 5 7\n9\n2 4\n2 5\n3 1\n3 2\n3 7\n3 1\n4 4\n1 3\n5 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>6\n14\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>The optimal strategy is as follows: \n- The ship takes the first box, goes to port 1, then returns to storage. 2 trips.\n- The ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips.\n- The ship takes the fifth box, goes to port 3, then returns to storage. 2 trips.\nSo the total number of trips is 2 + 2 + 2 = 6.\n\nHence the Output: 6\n\n\nThe optimal strategy is as follows:\n- The ship takes the first box, goes to port 2, then storage. 2 trips.\n- The ship takes the second box, goes to port 2, then storage. 2 trips.\n- The ship takes the third and fourth boxes, goes to port 3, then storage. 2 trips.\n- The ship takes the fifth box, goes to port 3, then storage. 2 trips.\n- The ship takes the sixth and seventh boxes, goes to port 3, then port 4, then storage. 3 trips. \n- The ship takes the eighth and ninth boxes, goes to port 1, then port 5, then storage. 3 trips.\nSo the total number of trips is 2 + 2 + 2 + 2 + 3 + 3 = 14.\n\nHence the Output: 14\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3 6 7\n6\n1 4\n1 2\n2 1\n2 1\n3 2\n3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -10,
            "dislikes": "NA",
            "rephrased": {
                "body": "A ship needs to deliver boxes from storage to different ports. The ship has limits on the number of boxes and total weight it can carry. Given an array of boxes, where each box has a port and a weight, and the ship's box and weight limits, determine the minimum number of trips the ship needs to make to deliver all boxes in the given order.  The ship must return to storage after all deliveries are complete. A trip is counted each time the ship travels to a new port or returns to storage.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= boxes.length <= 10^5",
                    "1 <= portsCount, maxBoxes, maxWeight <= 10^5",
                    "1 <= ports_i <= portsCount",
                    "1 <= weight_i <= maxWeight"
                ],
                "testcases": [
                    {
                        "input": "3 3 6\n5\n1 2\n3 3\n3 1\n3 1\n2 4",
                        "output": "6",
                        "explanation": "The optimal strategy involves dividing the boxes into groups. The ship takes the first box to port 1 and returns (2 trips). Then, it takes the second, third, and fourth boxes to port 3 and returns (2 trips). Finally, it takes the fifth box to port 2 and returns (2 trips). The total number of trips is 2 + 2 + 2 = 6."
                    },
                    {
                        "input": "5 5 7\n9\n2 4\n2 5\n3 1\n3 2\n3 7\n3 1\n4 4\n1 3\n5 2",
                        "output": "14",
                        "explanation": "The optimal strategy involves delivering boxes in several trips.  Ship takes box 1 to port 2, then storage (2 trips). Ship takes box 2 to port 2, then storage (2 trips). Ship takes box 3 and 4 to port 3, then storage (2 trips). Ship takes box 5 to port 3, then storage (2 trips). Ship takes box 6 and 7 to ports 3 and 4, then storage (3 trips). Ship takes box 8 and 9 to ports 1 and 5, then storage (3 trips). The total number of trips is 2 + 2 + 2 + 2 + 3 + 3 = 14."
                    },
                    {
                        "input": "3 6 7\n6\n1 4\n1 2\n2 1\n2 1\n3 2\n3 4",
                        "output": "6",
                        "explanation": "The ship takes the first and second boxes to port 1, then port 1 (no trip needed, delivers immediately), then returns to storage (2 trips). The ship takes the third and fourth boxes to port 2, then port 2 (no trip needed), then returns to storage (2 trips). The ship takes the fifth and sixth boxes to port 3, then port 3 (no trip needed), then returns to storage (2 trips). The total number of trips is 2 + 2 + 2 = 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>You can use a naive dp approach and try to further optimize upon it.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}