{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16607,
            "title": "Design Search Autocomplete System",
            "titleSlug": "design-search-autocomplete-system_3583446",
            "content": "<h4 id=\"ninja-has-enrolled-in-a-system-design-course-at-coding-ninjas-and-his-first-assignment-is-to-create-a-search-autocomplete-system-for-a-search-engine\">Ninja has enrolled in a system design course at Coding Ninjas, and his first assignment is to create a search autocomplete system for a search engine.</h4>\n\n<h4 id=\"ninja-is-given-n-sentences-sentences-and-n-integers-times-where-times-i-is-the-number-of-times-the-sentences-i-was-typed-now-the-instructor-will-input-a-test-sentence-at-least-one-word-and-end-with-as-ninja-s-best-friend-can-you-help-him-with-the-assignment\">Ninja is given \u2018N\u2019 sentences \u2018SENTENCES\u2019 and \u2018N\u2019 integers \u2018TIMES\u2019, where \u2018TIMES\u2019[i] is the number of times the \u2018SENTENCES\u2019[i] was typed. Now, the instructor will input a test sentence(at least one word and end with \u2018#\u2019). As Ninja\u2019s best friend, can you help him with the assignment?</h4>\n\n<h4 id=\"your-task-is-to-implement-the-autocompletesystemclass\">Your task is to implement the AutocompleteSystemclass:</h4>\n\n<ul style= \"color: rgb(255, 255, 255); \n    mix-blend-mode: difference; \">\n<li> AutocompleteSystem(String[] sentences, int[] times)Initializes the object with the sentences and times arrays.</li>\n<li> List<String> input(char c)This indicates that the user typed the character c.\n<ul>\n   <li> Returns an empty array [], if c == '#' and stores the inputted sentence in the system.</li>\n  <li> Returns the top 3 historical hot sentences with the same prefix as the sentence already typed. If there are fewer than 3matches, return them all.</li>\n</ul>\n\n<p></li>\n</ul></p>\n\n<h4 id=\"here-are-the-specific-rules\">Here are the specific rules:</h4>\n\n<ul style= \"color: rgb(255, 255, 255); \n    mix-blend-mode: difference; \">\n<li> A sentence\u2019s hot degree is defined as the number of times a user typed the same sentence before.</li>\n<li> The returned top 3 hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same hot degree, use ASCII-code order (smaller one appears first).</li>\n<li> If less than three hot sentences exist, return as many as possible.</li>\n<li> When the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.</li>\n</ul>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>Input:\n[&quot;AutocompleteSystem&quot;,&quot;input&quot;,&quot;input&quot;,&quot;input&quot;]\n[[[&quot;i want to join faang&quot;,&quot;icecream&quot;,&quot;i love coding ninjas&quot;],[4,3,1],[&quot;i&quot;],[&quot;s&quot;],[&quot;#&quot;]]\n\nOutput:\n[null,[&quot;i want to join faang&quot;,&quot;icecream&quot;,&quot;i love coding ninjas&quot;],[],[]]\n\nExplanation:\n* AutocompleteSystem obj = new AutocompleteSystem([&quot;i want to join faang&quot;,&quot;icecream&quot;,&quot;i love coding ninjas&quot;],[4,3,1]); \n* obj.input(\u201ci\u201d); // return [&quot;i want to join faang&quot;,&quot;icecream&quot;,&quot;i love coding ninjas&quot;]. There are three sentences that have prefix &quot;I&quot;.\n* obj.input(\u201cs\u201d); // return []. There is no sentence with prefix \u201cis\u201d\n* obj.input(\u201c#\u201d); // return [].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains a single integer &#39;T&#39;, representing the number of test cases.\n\nThe first line contains an integer \u2018N\u2019, representing the number of sentences.\n\nThe next line of each test case contains \u2018N\u2019 + 1 string where the first string is always \u201cAutocompleteSystem\u201d and the following \u2018N\u2019 strings are \u201cinput\u201d.\n\nThe next \u2018N\u2019 lines contain a String, representing a sentence.\n\nThe next line contains \u2018N\u2019 space-separated integers representing the elements of the \u2018TIMES\u2019 array.\n\nThe next line contains a sentence inputted by the user for the testing purpose.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print all pairs of the distinct indices (i, j) in \u2018WORDS\u2019, such that the concatenation of WORDS[i] and WORDS[j] is a palindrome.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 100\n1 &lt;= SENTENCES[i].LENGTH &lt;= 100\n1 &lt;= TIMES[i] &lt;= 50\nSENTENCES[i] consists of lowercase English letters\n\u2018C\u2019 is a lowercase English letter, a hash &#39;#&#39;, or space &#39; &#39;.\nEach tested sentence will be a sequence of characters c that end with the character &#39;#&#39;.\nEach tested sentence will have a length in the range [1, 200].\nThe words in each input sentence are separated by single spaces.\nAt most 5000 calls will be made to input.\n\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\ni want to join faang\nicecream\ni love coding ninjas\n4 3 1\nis#\n3\nbatman\nsuperman\nspiderman\n4 3 2\nsp#\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>[i want to join faang, icecream, i love coding ninjas]\n[]\n[]\n[superman, spiderman]\n[spiderman]\n[]\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, \nAutocompleteSystem obj = new AutocompleteSystem([&quot;i want to join faang&quot;,&quot;icecream&quot;,&quot;i love coding ninjas&quot;],[4,3,1]); \nobj.input(\u201ci\u201d); // return [&quot;i want to join faang&quot;,&quot;icecream&quot;,&quot;i love coding ninjas&quot;]. There are three sentences that have prefix &quot;i&quot;.\nobj.input(\u201cs\u201d); // return []. There is no sentence with prefix \u201cis\u201d\nobj.input(\u201c#\u201d); // return [].\n\nFor the second test case, \nAutocompleteSystem obj = new AutocompleteSystem([[&quot;batman&quot;,&quot;superman&quot;,&quot;spiderman&quot;],[4,3,1]],[&quot;s&quot;],[&quot;p&quot;],[&quot;#&quot;]]); \nobj.input(\u201cs\u201d); // return [superman, spiderman]. There are two sentences that have prefix &quot;s&quot;.\nobj.input(\u201cp\u201d); // return [spiderman]. There is one sentence with prefix \u201csp\u201d\nobj.input(\u201c#\u201d); // return [].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2\nstack and queues\ntrees and grpahs\n3 1\nt#\n4\naaa\naab\nabb\naac\n3 2 2 1\nabc#\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>[trees and graphs]\n[]\n[aaa, aab, abb]\n[aab]\n[]\n[]\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a search autocomplete system. You are given an initial set of sentences and their corresponding frequencies. Implement the `AutocompleteSystem` class to handle user input and provide the top 3 most frequent sentences matching the current prefix.",
                "constraints": [
                    "1 <= N <= 100, where N is the number of sentences.",
                    "1 <= SENTENCES[i].LENGTH <= 100",
                    "1 <= TIMES[i] <= 50",
                    "SENTENCES[i] consists of lowercase English letters",
                    "\u2018C\u2019 is a lowercase English letter, a hash '#', or space ' '."
                ],
                "testcases": [
                    {
                        "input": "sentences=[\"i want to join faang\",\"icecream\",\"i love coding ninjas\"], times=[4,3,1], c='i', c='s', c='#'",
                        "output": "[\"i want to join faang\", \"icecream\", \"i love coding ninjas\"]\n[]\n[]",
                        "explanation": "AutocompleteSystem is initialized with the given sentences and times.\ninput('i') returns sentences starting with 'i', sorted by frequency and ASCII order.\ninput('s') returns an empty list as there are no sentences with prefix 'is'.\ninput('#') returns an empty list as it signifies the end of input."
                    },
                    {
                        "input": "sentences=[\"batman\",\"superman\",\"spiderman\"], times=[4,3,2], c='s', c='p', c='#'",
                        "output": "[\"superman\", \"spiderman\"]\n[\"spiderman\"]\n[]",
                        "explanation": "AutocompleteSystem is initialized with the given sentences and times.\ninput('s') returns sentences starting with 's', sorted by frequency and ASCII order.\ninput('p') returns sentences starting with 'sp', sorted by frequency and ASCII order.\ninput('#') returns an empty list as it signifies the end of input."
                    },
                    {
                        "input": "sentences=[\"stack and queues\",\"trees and grpahs\"], times=[3,1], c='t', c='#'",
                        "output": "[\"trees and grpahs\"]\n[]",
                        "explanation": "AutocompleteSystem is initialized.\nInput 't' will return 'trees and graphs'\nInput '#' will end the search"
                    },
                    {
                        "input": "sentences=[\"aaa\",\"aab\",\"abb\",\"aac\"], times=[3,2,2,1], c='a', c='b', c='c',c='#'",
                        "output": "[\"aaa\", \"aab\", \"abb\"]\n[\"aab\"]\n[]\n[]",
                        "explanation": "AutocompleteSystem is initialized.\nInput 'a' will return 'aaa', 'aab', 'abb' as top 3\nInput 'ab' will return 'aab' \ninput 'ac' will return [] as there are no sentences with ab\nInput '#' will end the search"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a data structure to store the sentences efficiently.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tries",
                "slug": "tries"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}