{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10811,
            "title": "Design Tic-Tac-Toe",
            "titleSlug": "design-tic-tac-toe_1265038",
            "content": "<h4 id=\"ninja-has-to-design-a-2-players-game-tic-tac-toe-played-on-an-n-n-grid\">Ninja has to design a 2 players game Tic-Tac-Toe played on an \u2018N\u2019 * \u2018N\u2019 grid.</h4>\n\n<h4 id=\"ninja-has-to-assume-the-following-rules-while-playing-the-game\">Ninja has to assume the following rules while playing the game:</h4>\n\n<pre><code>This game is played between two people (Player 1 and Player 2). Player 1 chooses \u2018X&#39; and Player 2 chooses \u2018O\u2019 to mark their cells. A move is guaranteed to be valid and is placed on an empty block.\n\nA player who successfully places &#39;N&#39; of their marks in a horizontal, vertical, or diagonal row wins the game. Once a winning condition is reached, no more moves are allowed.\n</code></pre>\n\n<h4 id=\"as-ninja-is-busy-planning-his-strategy-he-asks-you-for-help-your-task-is-to-complete-the-function-move-row-col-player-where-row-and-col-represent-the-current-row-and-column-of-the-grid-player-p-either-1-or-2-chooses-to-place-his-sign\">As Ninja is busy planning his strategy, he asks you for help. Your task is to complete the function \u2018move(row, col, player)\u2019 where \u2018row\u2019 and \u2018col\u2019 represent the current row and column of the grid \u2018player\u2019 P (either 1 or 2) chooses to place his sign.</h4>\n\n<h4 id=\"the-function-must-return-an-integer-which-is-either-0-1-and-2-representing\">The function must  return an integer which is either 0, 1, and 2 representing:</h4>\n\n<pre><code>0: No one wins.\n1: Player 1 wins.\n2: Player 2 wins.\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Let us assume if \u2018N\u2019 = 3 and player 1 places \u2018X\u2019 and player 2 places \u2018O\u2019 on the board.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tictactoe1-8436.png\" alt=\"\">\n<img src=\"https://files.codingninjas.in/tictactoe2-8435.png\" alt=\"\"></p>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 that represents the size of the \u2018N\u2019 * \u2018N\u2019 grid.\n\nThe next line of each test case contains an integer \u2018Q\u2019 that represents the number of queries.\n\nThe next \u2018Q\u2019 lines of each test case contain three single space-separated integers \u2018ROW\u2019, \u2018COL\u2019, and \u2018PLAYER\u2019 representing the current row and column of the grid and the current player (1 or 2).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, Ninja has to complete the function \u2018move\u2019 and return either 0, 1, and 2.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 100\n1 &lt;= \u2018N\u2019 &lt;= 100\n5 &lt;= \u2018Q\u2019 &lt;= \u2018N*N\u2019\n0 &lt;= \u2018ROW\u2019 , \u2018COL\u2019 &lt; \u2018N\u2019\n\u2018PLAYER\u2019 = {1, 2}\n\nWhere \u2018ROW\u2019 and \u2018COL\u2019 represent the current row and column of the grid and \u2018PLAYER\u2019 represents the current player.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n3\n5\n0 0 1\n1 0 2\n0 1 1\n1 1 2\n0 2 1 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>Player 1 wins\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>In test case 1, The tic-tac-toe  board is of size 3 x 3.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tictactoeex1-8434.png\" alt=\"\"></p>\n\n<pre><code>After the final query move function returns 1, it means Player 1 wins the game.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n3\n9\n0 0 1\n0 2 2\n2 0 1\n1 0 2\n2 1 1\n2 2 2\n1 2 1\n1 1 2\n0 1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>Draw\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h4>\n\n<pre><code>In test case 1, The tic-tac-toe board is of size 3x3.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tictaktoeex21-8433.png\" alt=\"\">\n<img src=\"https://files.codingninjas.in/tictactoeex22-8432.png\" alt=\"\"></p>\n\n<pre><code>After the final query move function returns 0, it means the game ends in a draw.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a Tic-Tac-Toe game for two players on an N x N grid. Player 1 uses 'X' and Player 2 uses 'O'. The game follows standard Tic-Tac-Toe rules: players take turns marking empty cells, and the first player to get N of their marks in a row (horizontally, vertically, or diagonally) wins. Implement the function `move(row, col, player)`, which simulates a move and returns an integer indicating the game's state: 0 for no winner, 1 for Player 1 wins, and 2 for Player 2 wins.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 100 (Grid size)",
                    "5 <= Q <= N*N (Number of queries per test case)",
                    "0 <= ROW, COL < N (Row and column indices)",
                    "PLAYER = {1, 2} (Player making the move)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "1\n3\n5\n0 0 1\n1 0 2\n0 1 1\n1 1 2\n0 2 1",
                        "output": "1",
                        "explanation": "In this test case, Player 1 wins by placing three 'X's in the first row."
                    },
                    {
                        "input": "1\n3\n9\n0 0 1\n0 2 2\n2 0 1\n1 0 2\n2 1 1\n2 2 2\n1 2 1\n1 1 2\n0 1 1",
                        "output": "0",
                        "explanation": "In this test case, the game ends in a draw because all the cells are filled, and neither player has N marks in a row."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of the Brute Force Approach by checking the row and column of the move added.</p>",
            "<p>Think of optimizing the above gievn approach by storing information of each row and column counts.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}