{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9546,
            "title": "Detect cycle in a directed graph",
            "titleSlug": "detect-cycle-in-a-directed-graph_1062626",
            "content": "<h4 id=\"you-are-given-a-directed-graph-having-n-nodes-a-matrix-edges-of-size-m-x-2-is-given-which-represents-the-m-edges-such-that-there-is-an-edge-directed-from-node-edges-i-0-to-node-edges-i-1\">You are given a directed graph having \u2018N\u2019 nodes. A matrix \u2018EDGES\u2019 of size M x 2 is given which represents the \u2018M\u2019 edges such that there is an edge directed from node EDGES[i][0] to node EDGES[i][1].</h4>\n\n<h4 id=\"find-whether-the-graph-contains-a-cycle-or-not-return-true-if-a-cycle-is-present-in-the-given-directed-graph-else-return-false\">Find whether the graph contains a cycle or not, return true if a cycle is present in the given directed graph else return false.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>In the following directed graph has a cycle i.e. B-&gt;C-&gt;E-&gt;D-&gt;B.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/dag-6867.png\" alt=\"alt text\"></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. The cycle must contain at least two nodes.\n2. It is guaranteed that the given graph has no self-loops in the graph.\n3. The graph may or may not be connected.\n4. Nodes are numbered from 1 to N.\n5. Your solution will run on multiple test cases. If you are using global variables make sure to clear them.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of the test case. Then the test cases are as follows.\n\nThe first line of each test case argument given is an integer \u2018N\u2019 representing the number of nodes in the graph.\n\nThe second line of each test case contains a given integer \u2018M\u2019 representing the number of edges. \n\nThe next \u2018M\u2019 lines in each test case contain a matrix \u2018EDGES\u2019 of size M x 2 which represents the \u2018M\u2019 edges such that there is an edge directed from node EDGES[i][0] to node EDGES[i][1].\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print true if a cycle is present in the given directed graph else print false.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; It has already been taken care of. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 T \u2264 5\n\n2 &lt;= N &lt;= 100\n1 &lt;= M &lt;= min(100,N(N-1)/2)\n1 &lt;= EDGES[i][0], EDGES[i][1] &lt;= N\n\nWhere \u2018T\u2019 is the number of test cases.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n5\n6\n1 2\n4 1\n2 4\n3 4\n5 2\n1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>true\n</code></pre>\n\n<h5 id=\"explanation-for-input-1\">Explanation For Input 1 :</h5>\n\n<pre><code>The given graph contains cycle 1 -&gt; 3 -&gt; 4 -&gt; 1 or the cycle 1 -&gt; 2 -&gt; 4 -&gt; 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5\n4\n1 2\n2 3\n3 4\n4 5\n2\n1\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>false\nfalse\n</code></pre>\n\n<h5 id=\"explanation-for-input-2\">Explanation For Input 2 :</h5>\n\n<pre><code>The given graphs don\u2019t contain any cycle.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 140,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph with 'N' nodes, represented by a list of edges 'EDGES', determine if the graph contains a cycle. Return true if a cycle exists, and false otherwise.",
                "constraints": [
                    "2 <= N <= 100",
                    "1 <= M <= min(100, N(N-1)/2)",
                    "1 <= EDGES[i][0], EDGES[i][1] <= N"
                ],
                "testcases": [
                    {
                        "input": "n = 5, edges = [[1, 2], [4, 1], [2, 4], [3, 4], [5, 2], [1, 3]]",
                        "output": "true",
                        "explanation": "The graph contains cycles such as 1 -> 2 -> 4 -> 1 or 1 -> 3 -> 4 -> 1."
                    },
                    {
                        "input": "n = 5, edges = [[1, 2], [2, 3], [3, 4], [4, 5]]",
                        "output": "false",
                        "explanation": "The graph does not contain any cycles."
                    },
                    {
                        "input": "n = 2, edges = [[1, 2]]",
                        "output": "false",
                        "explanation": "The graph does not contain any cycles."
                    },
                    {
                        "input": "n = 4, edges = [[1, 2], [2, 3], [3, 1]]",
                        "output": "true",
                        "explanation": "The graph contains the cycle 1 -> 2 -> 3 -> 1"
                    },
                    {
                        "input": "n = 3, edges = [[1, 2], [2, 1]]",
                        "output": "true",
                        "explanation": "The graph contains the cycle 1 -> 2 -> 1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>There is a cycle in a graph only if there is a back edge present in the graph.</p>",
            "<p>Can you think of using the BFS approach?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N+M)\n    Space Complexity: O(N)\n    \n    Where N is the number of nodes and M is the number of edges in the given graph.\n*/\n\n#include <list>\n\n#include <queue>\n\nclass Graph {\n    int noOfNodes;\n\n    // Pointer to an array containing adjacency lists.\n    list < int > * adj;\n\n    public:\n        // Act as Constructor.\n        Graph(int noOfNodes);\n\n    // To add an edge to between two nodes in a Graph.\n    void addEdge(int v, int w);\n\n    // Returns true if there exists a cycle in the given graph.\n    bool checkCyclic();\n};\n\nGraph::Graph(int noOfNodes) {\n    this -> noOfNodes = noOfNodes;\n    adj = new list < int > [noOfNodes];\n}\n\nvoid Graph::addEdge(int a, int b) {\n    adj[a].push_back(b);\n}\n\nbool Graph::checkCyclic() {\n    /* \n      Create a vector to store indegrees \n      (number of incoming edges)\n      of all vertices and initialize all indegrees as 0.\n    */\n    vector < int > inDegree(noOfNodes, 0);\n\n    // Traverse adjacency lists to fill indegrees of vertices.\n    for (int u = 0; u < noOfNodes; u++) {\n        for (auto v: adj[u]) {\n            inDegree[v]++;\n        }\n    }\n\n    // Create an queue and enqueue all vertices with indegree 0.\n    queue < int > zeroInDegreeQ;\n\n    for (int i = 0; i < noOfNodes; i++) {\n        if (inDegree[i] == 0) {\n            zeroInDegreeQ.push(i);\n        }\n    }\n\n    // Initialize count of visited nodes.\n    int cnt = 0;\n\n    // Create a vector to store result (Topological Ordering).\n    vector < int > topoOrdering;\n\n    /*\n      One by one dequeue vertices from queue and \n      enqueue adjacents if indegree of adjacent becomes 0.\n    */\n\n    while (zeroInDegreeQ.empty() == false) {\n        // Extract front of queue and add it to topological order.\n        int u = zeroInDegreeQ.front();\n        zeroInDegreeQ.pop();\n        topoOrdering.push_back(u);\n\n        /*\n          Iterate through all its neighbouring nodes of \n          dequeued node and decrease their number of \n          incoming edges by 1.\n        */\n\n        list < int > ::iterator itr;\n\n        for (itr = adj[u].begin(); itr != adj[u].end(); itr++) {\n            /* \n                If the number of incoming edges becomes zero \n                then add it to the queue.\n            */\n            if (--inDegree[ * itr] == 0) {\n                zeroInDegreeQ.push( * itr);\n            }\n        }\n\n        cnt++;\n    }\n\n    // Check if there exists a cycle.\n    if (cnt != noOfNodes) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nint detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {\n    Graph directedG(n);\n\n    int m = edges.size();\n\n    for (int i = 0; i < m; i++) {\n        directedG.addEdge(edges[i].first - 1, edges[i].second - 1);\n    }\n\n    return directedG.checkCyclic();\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N+M)\n    Space Complexity: O(N)\n\n    Where N is the number of nodes and M is the number of edges in the given graph.\n*/\n\nimport java.util.Queue;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\n\nclass Graph {\n    private static int noOfNodes;\n\n    // Pointer to an array containing adjacency lists.\n    private static ArrayList < Integer > adj[];\n\n    // Act as Constructor.\n    Graph(int noOfNodes) {\n        adj = new ArrayList[noOfNodes];\n\n        for (int i = 0; i < noOfNodes; i++) {\n            adj[i] = new ArrayList < Integer > ();\n        }\n\n        this.noOfNodes = noOfNodes;\n    }\n\n    // To add an edge to between two nodes in a Graph.\n    public void addEdge(int a, int b) {\n        // Add b to a's list.\n        adj[a].add(b);\n    }\n\n    // Returns true if there exists a cycle in the given graph.\n    public static boolean checkCyclic() {\n        /* \n            Create a ArrayList to store indegrees \n            (number of incoming edges) \n            of all vertices and initialize all indegrees as 0. \n        */\n        ArrayList < Integer > inDegree = new ArrayList < Integer > (noOfNodes);\n\n        for (int i = 0; i < noOfNodes; i++) {\n            inDegree.add(0);\n        }\n\n        // Traverse adjacency lists to fill indegrees of vertices.\n        for (int u = 0; u < noOfNodes; u++) {\n            for (int v: adj[u]) {\n                inDegree.set(v, inDegree.get(v) + 1);\n            }\n        }\n\n        // Create an queue and enqueue all vertices with indegree 0.\n        Queue < Integer > zeroInDegreeQ = new LinkedList < Integer > ();\n\n        for (int i = 0; i < noOfNodes; i++) {\n            if (inDegree.get(i) == 0) {\n                zeroInDegreeQ.add(i);\n            }\n        }\n\n        // Initialize count of visited nodes.\n        int cnt = 0;\n\n        /* \n            One by one dequeue vertices from queue and \n            enqueue adjacents if indegree of adjacent becomes 0.\n        */\n        while (zeroInDegreeQ.isEmpty() == false) {\n            // Extract front of queue and add it to topological order.\n            int u = zeroInDegreeQ.remove();\n\n            /*\n                Iterate through all its neighbouring nodes of \n                dequeued node and decrease their number \n                of incoming edges by 1.\n            */\n\n            for (int itr: adj[u]) {\n                inDegree.set(itr, inDegree.get(itr) - 1);\n\n                /* \n                    If the number of incoming edges becomes zero \n                    then add it to the queue.\n                */\n                if (inDegree.get(itr) == 0) {\n                    zeroInDegreeQ.add(itr);\n                }\n            }\n\n            cnt++;\n        }\n\n        // Check if there exists a cycle.\n        if (cnt != noOfNodes) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\npublic class Solution {\n    public static boolean detectCycleInDirectedGraph(int n, ArrayList < ArrayList < Integer >> edges) {\n        Graph directedG = new Graph(n);\n\n        int m = edges.size();\n\n        for (int i = 0; i < m; i++) {\n            directedG.addEdge(edges.get(i).get(0) - 1, edges.get(i).get(1) - 1);\n        }\n\n        return directedG.checkCyclic();\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(N+M)\n    Space Complexity: O(N)\n    \n    Where N is the number of nodes and M is the number of edges in the given graph.\n'''\n\nfrom collections import defaultdict\n \nclass Graph():\n\n    def __init__(self, nodes):\n\n        # Array containing adjacency lists.\n        self.adj = defaultdict(list)\n        # Number of Nodes\n        self.noOfNodes = nodes\n \n    # To add an edge to between two nodes in a Graph.\n    def addEdge(self, u, v):\n        self.adj[u].append(v)\n \n    # Returns true if there exists a cycle in the given graph.\n    def isCyclic(self):\n\n        '''    \n            Create a vector to store indegrees \n            (number of incoming edges) of all vertices \n            and initialize all indegrees as 0.\n        '''\n\n        inDegree = [0] * self.noOfNodes\n\n        # Traverse adjacency lists to fill indegrees of vertices.\n        for u in range(self.noOfNodes):\n        \n            for v in self.adj[u]:\n            \n                inDegree[v] += 1;\n\n        # Create an queue and enqueue all vertices with indegree 0.\n        zeroInDegreeQ = []\n\n        for i in range(self.noOfNodes):\n        \n            if inDegree[i] == 0:\n                zeroInDegreeQ.append(i);\n\n        # Initialize count of visited nodes.\n        cnt = 0;\n\n        # Create a vector to store result (Topological Ordering).\n        topoOrdering = []\n\n        '''\n            One by one dequeue vertices from queue and \n            enqueue adjacents if indegree of adjacent becomes 0.\n        '''\n\n        while (zeroInDegreeQ):\n        \n            # Extract front of queue and add it to topological order.\n            u = zeroInDegreeQ.pop(0);\n            # topoOrdering.push_back(u);\n\n            '''\n                Iterate through all its neighbouring nodes of \n                dequeued node and decrease \n                their number of incoming edges by 1.\n            '''\n\n            for v in self.adj[u]:\n                ''' \n                    If the number of incoming edges \n                    becomes zero then add it to the queue.\n                '''\n                inDegree[v] -= 1\n                \n                if inDegree[v]==0:\n                    zeroInDegreeQ.append(v)\n            cnt += 1\n        \n\n        # Check if there exists a cycle.\n        if cnt != self.noOfNodes:\n            return True\n        \n        return False\n        \n\n\ndef detectCycleInDirectedGraph(n, edges):\n\n    directedG = Graph(n)\n\n    m = len(edges)\n\n    for i in range(m):\n        directedG.addEdge(edges[i][0]- 1, edges[i][1] - 1)\n\n    return directedG.isCyclic()\n    ",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}