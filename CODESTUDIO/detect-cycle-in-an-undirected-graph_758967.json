{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7667,
            "title": "Detect Cycle in an Undirected Graph ",
            "titleSlug": "detect-cycle-in-an-undirected-graph_758967",
            "content": "<h4 id=\"given-an-undirected-graph-of-v-vertices-and-e-edges-return-true-if-the-graph-contains-a-cycle-or-not-else-return-false\">Given an undirected graph of <em><strong>&#39;V&#39;</strong></em> vertices and <em><strong>&#39;E&#39;</strong></em> edges. Return true if the graph contains a cycle or not, else return false.</h4>\n\n<p><br></p>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>There are no self-loops(an edge connecting the vertex to itself) in the given graph.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Given N=3, M =2, and edges are (1, 2) and (2, 3), with nodes 1, 2, and 3.\n\nWe return false because the given graph does not have any cycle.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/ex1-28434.png\" alt=\"Alt text\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first input line will contain two integers, &#39;V&#39;, and &#39;E&#39;, separated by a single space.\n\nFrom the second line onwards, the following &#39;E&#39; lines will denote the edges of the graphs.\n\nEvery edge is defined by two single space-separated integers &#39;a&#39; and &#39;b&#39;, which signifies an edge between vertice &#39;a&#39; and &#39;b&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The single line contains a string, &quot;True&quot; if a cycle exists, else &quot;False&quot;.\n</code></pre>\n\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4 4\n0 1\n1 2\n2 3\n3 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>From node 0, we can reach 0 again by following this sequence of nodes in the path: 0,1,2,3,0.\n\nSimilarly, from any of the nodes, we can reach again to that node by following a path. The graph in itself is a cycle.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5 3\n0 1\n1 2\n3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>False\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= V &lt;= 10^5\n0 &lt;= E &lt;= 2 * 10^5\n0 &lt;= u,v &lt; V\n\nTime Limit: 1sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 107,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph with 'V' vertices and 'E' edges, determine if the graph contains a cycle. Return True if a cycle exists, otherwise return False. The graph does not contain self-loops (edges connecting a vertex to itself).",
                "constraints": [
                    "1 <= V <= 10^5",
                    "0 <= E <= 2 * 10^5",
                    "0 <= u, v < V",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "4 4\n0 1\n1 2\n2 3\n3 0",
                        "output": "True",
                        "explanation": "The graph forms a cycle: 0-1-2-3-0.  Starting from any node, it's possible to return to that node by following a path."
                    },
                    {
                        "input": "5 3\n0 1\n1 2\n3 4",
                        "output": "False",
                        "explanation": "The graph does not contain any cycles. There are two disjoint connected components: 0-1-2 and 3-4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Does BFS help?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "class Graph {\r\nprivate:\r\n\r\n    // Function to check for a cycle starting from a given node.\r\n    bool checkForCycle(int s, int V, vector<int> adj[], vector<int>& visited) {\r\n\r\n        // Store parent nodes to identify back edges.\r\n        vector<int> parent(V, -1);\r\n\r\n        // Queue to perform BFS traversal.\r\n        queue<pair<int, int>> q;\r\n\r\n        // Mark the current node as visited.\r\n        visited[s] = true;\r\n\r\n        // Push the current node into the queue with no parent.\r\n        q.push({s, -1});\r\n\r\n        while (!q.empty()) {\r\n\r\n            // Get the current node.\r\n            int node = q.front().first;\r\n\r\n            // Get its parent.\r\n            int par = q.front().second;\r\n            q.pop();\r\n\r\n            // Traverse through the adjacent nodes of the current node.\r\n            for (auto it : adj[node]) {\r\n                if (!visited[it]) {\r\n\r\n                    // Mark the adjacent node as visited.\r\n                    visited[it] = true;\r\n\r\n                    // Push it into the queue with the current node as parent.\r\n                    q.push({it, node});\r\n                } else if (par != it) {\r\n\r\n                    // If the adjacent node is visited and not the parent, cycle is detected.\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        // If no cycle is detected.\r\n        return false;\r\n    }\r\n\r\npublic:\r\n\r\n    // Function to detect a cycle in the graph.\r\n    bool detectCycle(int V, vector<int> adj[]) {\r\n\r\n        // Create a vector to track visited nodes.\r\n        vector<int> vis(V, 0);\r\n        for (int i = 0; i < V; i++) {\r\n\r\n            // If the current node is not visited.\r\n            if (!vis[i]) {\r\n\r\n                // Check for cycle starting from this node.\r\n                if (checkForCycle(i, V, adj, vis)) return true;\r\n            }\r\n        }\r\n\r\n        // If no cycle is found in the entire graph.\r\n        return false;\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "class Graph {\r\nprivate:\r\n\r\n    // Function to check for a cycle starting from a given node.\r\n    bool checkForCycle(int s, int V, vector<int> adj[], vector<int>& visited) {\r\n\r\n        // Store parent nodes to identify back edges.\r\n        vector<int> parent(V, -1);\r\n\r\n        // Queue to perform BFS traversal.\r\n        queue<pair<int, int>> q;\r\n\r\n        // Mark the current node as visited.\r\n        visited[s] = true;\r\n\r\n        // Push the current node into the queue with no parent.\r\n        q.push({s, -1});\r\n\r\n        while (!q.empty()) {\r\n\r\n            // Get the current node.\r\n            int node = q.front().first;\r\n\r\n            // Get its parent.\r\n            int par = q.front().second;\r\n            q.pop();\r\n\r\n            // Traverse through the adjacent nodes of the current node.\r\n            for (auto it : adj[node]) {\r\n                if (!visited[it]) {\r\n\r\n                    // Mark the adjacent node as visited.\r\n                    visited[it] = true;\r\n\r\n                    // Push it into the queue with the current node as parent.\r\n                    q.push({it, node});\r\n                } else if (par != it) {\r\n\r\n                    // If the adjacent node is visited and not the parent, cycle is detected.\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        // If no cycle is detected.\r\n        return false;\r\n    }\r\n\r\npublic:\r\n\r\n    // Function to detect a cycle in the graph.\r\n    bool detectCycle(int V, vector<int> adj[]) {\r\n\r\n        // Create a vector to track visited nodes.\r\n        vector<int> vis(V, 0);\r\n        for (int i = 0; i < V; i++) {\r\n\r\n            // If the current node is not visited.\r\n            if (!vis[i]) {\r\n\r\n                // Check for cycle starting from this node.\r\n                if (checkForCycle(i, V, adj, vis)) return true;\r\n            }\r\n        }\r\n\r\n        // If no cycle is found in the entire graph.\r\n        return false;\r\n    }\r\n};\r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n\tTime Complexity: O(V + E)\r\n\tSpace Complexity: O(V)\r\n\r\n\twhere 'V' is the number of vertices in the input graph, and 'E' is the number of edges in the input graph.\r\n*/\r\n\r\nimport java.util.Arrays;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.Queue;\r\npublic class Solution {\r\n    static class Graph {\r\n        private boolean checkForCycle(int s, int V, List<List<Integer>> adj, boolean[] visited) {\r\n            int[] parent = new int[V];\r\n            Arrays.fill(parent, -1);\r\n            Queue<Integer> q = new LinkedList<>();\r\n\r\n            visited[s] = true;\r\n            q.offer(s);\r\n\r\n            while (!q.isEmpty()) {\r\n                int node = q.poll();\r\n\r\n                for (int neighbor : adj.get(node)) {\r\n                    if (!visited[neighbor]) {\r\n                        visited[neighbor] = true;\r\n                        q.offer(neighbor);\r\n                        parent[neighbor] = node;\r\n                    } else if (parent[node] != neighbor) {\r\n                        return true; // Cycle detected\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false; // No cycle detected\r\n        }\r\n\r\n        public boolean detectCycle(int V, List<List<Integer>> adj) {\r\n            boolean[] visited = new boolean[V];\r\n            Arrays.fill(visited, false);\r\n\r\n            for (int i = 0; i < V; i++) {\r\n                if (!visited[i]) {\r\n                    if (checkForCycle(i, V, adj, visited)) {\r\n                        return true; // Cycle detected\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false; // No cycle detected\r\n        }\r\n    };\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}