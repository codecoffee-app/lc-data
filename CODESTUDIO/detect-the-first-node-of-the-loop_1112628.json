{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9967,
            "title": "Detect the first node of the loop",
            "titleSlug": "detect-the-first-node-of-the-loop_1112628",
            "content": "<h4 id=\"you-are-given-a-singly-linked-list-that-may-or-may-not-contain-a-cycle-you-are-supposed-to-return-the-node-where-the-cycle-begins-if-a-cycle-exists-else-return-null\">You are given a singly linked list that may or may not contain a cycle. You are supposed to return the node where the cycle begins, if a cycle exists, else return &#39;NULL&#39;.</h4>\n\n<p><br></p>\n\n<h4 id=\"a-cycle-occurs-when-a-nodes-next-pointer-returns-to-a-previous-node-in-the-list\">A cycle occurs when a node&#39;s next pointer returns to a previous node in the list.</h4>\n\n<p><br></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>In the given linked list, there is a cycle starting at position 0, hence we return 0.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sa1-27740.png\" alt=\"Sample Example 1\"><br>\n<br/></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains the elements of the singly linked list separated by a single space and terminated by -1; hence, -1 would never be a list element.\n\nThe second line contains the integer position &#39;pos&#39;, which represents the position (0-indexed) in the linked list where the tail connects to. If &#39;pos&#39; is -1, then there is no cycle in the linked list.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the integer position &#39;pos&#39; which represents the position of (0-indexed) in the linked list which is the first node of the cycle. Print -1 if there is no cycle in the linked list.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been handled. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1 2 3 4 -1\n1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For the first test case,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/in1-27737.png\" alt=\"Sample Input 1\">\n<br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1 2 3 4 -1\n0\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h5>\n\n<pre><code>For the first test case,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/in2-27738.png\" alt=\"Sample Input 2\">\n<br/></p>\n\n<h5 id=\"follow-up\">Follow-Up:</h5>\n\n<pre><code>Can you do this in O(n) time and using constant space?\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>-10^4 &lt;= n &lt;= 10^4\n-1 &lt;= pos &lt; n\n-10^9 &lt;= data &lt;= 10^9 and data != -1\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 159,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the head of a singly linked list, determine if the list has a cycle. If a cycle exists, return the node where the cycle begins. If there is no cycle, return NULL.",
                "constraints": [
                    "-10^4 <= n <= 10^4",
                    "-1 <= pos < n",
                    "-10^9 <= data <= 10^9 and data != -1"
                ],
                "testcases": [
                    {
                        "input": "head = [1, 2, 3, 4], pos = 1",
                        "output": "2",
                        "explanation": "The linked list is 1 -> 2 -> 3 -> 4, with the tail connecting to node 2, creating a cycle starting at node 2."
                    },
                    {
                        "input": "head = [1, 2, 3, 4], pos = 0",
                        "output": "1",
                        "explanation": "The linked list is 1 -> 2 -> 3 -> 4, with the tail connecting to node 1, creating a cycle starting at node 1."
                    },
                    {
                        "input": "head = [1], pos = -1",
                        "output": "NULL",
                        "explanation": "The linked list is [1]. There is no cycle."
                    },
                    {
                        "input": "head = [1,2], pos = 0",
                        "output": "1",
                        "explanation": "The linked list is 1->2, and 2 points back to 1"
                    },
                    {
                        "input": "head = [3,2,0,-4], pos = 1",
                        "output": "2",
                        "explanation": "The linked list is 3->2->0->-4, and -4 points back to 2"
                    },
                    {
                        "input": "head = [1,2,3,4,5,6], pos = -1",
                        "output": "NULL",
                        "explanation": "The linked list is 1->2->3->4->5->6, there is no cycle"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of checking each node as the starting point for the cycle.</p>",
            "<p>Think of visiting the nodes one by one and try to remember if you have already visited the node you are currently looking at?</p>",
            "<p>Think of 2 people starting from the initial node. One person takes a single jump and the other person takes twice the first person's jump each time. Extend this idea on every node and track the destination of both the persons. Draw it on a paper and find what happens!</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    Where 'N' is the number of nodes in the linked list.\n\n*/\n\nNode *firstNode(Node *head)\n{\n\tif (head == NULL)\n\t{\n\t\t// Empty linked list.\n\t\treturn NULL;\n\t}\n\n\t// Slow Pointer - This will be incremented by 1 Nodes\n\tNode *slow = head;\n\n\t// Fast Pointer - This will be incremented by 2 Nodes\n\tNode *fast = head;\n\n\tdo\n\t{\n\t\tif (fast && fast->next)\n\t\t{\n\t\t\tfast = fast->next->next;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Fast pointer reached the end of the list.\n\t\t\treturn NULL;\n\t\t}\n\n\t\tslow = slow->next;\n\t} while (fast != slow);\n\n\tslow = head;\n\n\t// To track the position of node.\n\twhile (slow != fast)\n\t{\n\t\tslow = slow->next;\n\t\tfast = fast->next;\n\t}\n\treturn slow;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1)\r\n    Where 'N' is the number of nodes in the linked list.\r\n\r\n*/\r\n\r\npublic class Solution\r\n{\r\n    public static Node firstNode(Node head)\r\n    {\r\n\r\n        if (head == null)\r\n        {\r\n            // Empty linked list.\r\n            return null;\r\n        }\r\n\r\n        // Slow Pointer - This will be incremented by 1 Nodes\r\n        Node slow = new Node(head.data);\r\n        slow.next = head.next;\r\n\r\n        // Fast Pointer  - This will be incremented by 2 Nodes\r\n        Node fast = new Node(head.data);\r\n        fast.next = head.next;\r\n\r\n        do\r\n        {\r\n            if (fast != null && fast.next != null)\r\n            {\r\n                fast = fast.next.next;\r\n            } else\r\n            {\r\n                // Fast pointer reached the end of the list.\r\n                return null;\r\n            }\r\n\r\n            slow = slow.next;\r\n        } while (fast != slow);\r\n\r\n        slow = head;\r\n\r\n        // To track the position of node.\r\n        while (slow != fast)\r\n        {\r\n            slow = slow.next;\r\n            fast = fast.next;\r\n        }\r\n        return slow;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    Where 'N' is the number of nodes in the linked list.\n\n'''\n\ndef firstNode(head):\n\n    if (head == None):\n\n        # Empty linked list.\n        return None\n\n    # Slow Pointer - This will be incremented by 1 Nodes\n    slow = head\n\n    # Fast Pointer - This will be incremented by 2 Nodes\n    fast = head\n\n    while (True):\n\n        if (fast and fast.next):\n            fast = fast.next.next\n\n        else:\n\n            # Fast pointer reached the end of the list.\n            return None\n        slow = slow.next\n        if (fast == slow):\n            break\n\n    slow = head\n\n    # To track the position of node.\n    while (slow != fast):\n        slow = slow.next\n        fast = fast.next\n\n    return slow",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}