{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7229,
            "title": "DFS Traversal",
            "titleSlug": "dfs-traversal_630462",
            "content": "<h4 id=\"given-an-undirected-and-disconnected-graph-g-v-e-containing-v-vertices-and-e-edges-the-information-about-edges-is-given-using-graph-matrix-where-i-th-edge-is-between-graph-i-0-and-graph-i-1-print-its-dfs-traversal\">Given an undirected and disconnected graph G(V, E), containing &#39;V&#39; vertices and &#39;E&#39; edges, the information about edges is given using &#39;GRAPH&#39; matrix, where i-th edge is between GRAPH[i][0] and GRAPH[i][1]. print its DFS traversal.</h4>\n\n<pre><code>V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. \n\nE is the number of edges present in graph G.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The Graph may not be connected i.e there may exist multiple components in a graph.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input will contain two Integers V and E, separated by a single space.\n\nFrom the second line onwards, the next &#39;E&#39; lines will denote the undirected edge of the graphs. \n\nEvery edge is defined by two single space-separated integers &#39;a&#39; and &#39;b&#39;, which signifies an edge between the vertices &#39;a&#39; and &#39;b&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The first line of output will contain the size of the connected components.\n\nFor every connected component in the graph, print the vertices of the component in the sorted order of the vertex values separated with a single space.\n\nPrint each component in on a different line by making sure that the first vertex of each component is also sorted on the vertex values. \n\nA component having a smaller first vertex in sorted order will come first.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>2 &lt;= V &lt;= 10^3\n1 &lt;= E &lt;= (5 * (10^3))\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>5 4\n0 2\n0 1\n1 2\n3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n0 1 2\n3 4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>If we do a DFS traversal from vertex 0 we will get a component with vertices [0, 2, 1]. If we do a DFS traversal from 3 we will get another component with vertices [3, 4]\n\nHence,  we have two disconnected components so on the first line, print 2. Now, print each component in increasing order. On the first line print 0 1 2 and on the second line, print 3 4.\n\n[0 1 2] comes before [3 4] as the first vertex 0 from the first component is smaller than the first vertex 3 from the second component.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>9 7\n0 1\n0 2\n0 5\n3 6\n7 4\n4 8\n7 8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n0 1 2 5\n3 6\n4 7 8\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 196,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected and potentially disconnected graph with 'V' vertices and 'E' edges, represented by an adjacency list derived from the input 'edges', perform a Depth-First Search (DFS) traversal. The goal is to identify and print each connected component of the graph. Vertices are numbered from 0 to V-1. Print the number of connected components. For each component, print the vertices it contains in sorted order, separated by spaces. Components should be printed in ascending order based on the smallest vertex they contain.",
                "constraints": [
                    "2 <= V <= 10^3",
                    "1 <= E <= (5 * (10^3))",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "V = 5, E = 4, edges = [[0, 2], [0, 1], [1, 2], [3, 4]]",
                        "output": "2\n0 1 2\n3 4",
                        "explanation": "The graph has two connected components: {0, 1, 2} and {3, 4}. Sorting the vertices within each component and printing them in ascending order based on the smallest vertex yields the output."
                    },
                    {
                        "input": "V = 9, E = 7, edges = [[0, 1], [0, 2], [0, 5], [3, 6], [7, 4], [4, 8], [7, 8]]",
                        "output": "3\n0 1 2 5\n3 6\n4 7 8",
                        "explanation": "The graph has three connected components: {0, 1, 2, 5}, {3, 6}, and {4, 7, 8}.  Sorting each component internally, and then ordering components by the smallest vertex results in the printed output. Note that '4 7 8' comes before, for instance, '6 3' because 4 < 6."
                    },
                    {
                        "input": "V = 4, E = 0, edges = []",
                        "output": "4\n0\n1\n2\n3",
                        "explanation": "This is a disconnected graph where each vertex is its own component. The output consists of each vertex on a new line in sorted order."
                    },
                    {
                        "input": "V = 6, E = 6, edges = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 0]]",
                        "output": "1\n0 1 2 3 4 5",
                        "explanation": "This is a single connected component containing all vertices. The vertices are sorted and printed on a single line."
                    },
                    {
                        "input": "V = 3, E = 2, edges = [[0,1], [1,0]]",
                        "output": "1\n0 1",
                        "explanation": "Nodes 0 and 1 are connected. Node 2 is not connected to any other node. There are 2 components. First component will be 0 1 and second component is 2"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to extend the DFS algorithm for this problem. How would you handle the disconnected components? What about performing DFS for each component.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity     :   O((V * log(V)) + E)\r\n    Space Complexity    :   O(V + E)\r\n\r\n    Where 'V' is the number of vertex and 'E' is the number of edges in graph.\r\n*/\r\n\r\nvoid depthFirstSearchHelper(int vertex, vector<int> &visited, vector<int> &singleComponent, vector<vector<int>> &graph)\r\n{\r\n    visited[vertex] = 1;\r\n    singleComponent.push_back(vertex);\r\n\r\n    for (auto child : graph[vertex])\r\n    {\r\n        // Check if the node is visited before or not.\r\n        if (!visited[child])\r\n        {\r\n            depthFirstSearchHelper(child, visited, singleComponent, graph);\r\n        }\r\n    }\r\n}\r\n   \r\nvector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)\r\n{\r\n    // Creating Adjacency Matrix.\r\n    vector<vector<int>> graph(V);\r\n    for (int i = 0; i < E; i++)\r\n    {\r\n        int a, b;\r\n        a = edges[i][0];\r\n        b = edges[i][1];\r\n        graph[a].push_back(b);\r\n        graph[b].push_back(a);\r\n    }\r\n\r\n    vector<vector<int>> components;\r\n    vector<int> visited(V, 0);\r\n\r\n    for (int vertex = 0; vertex < V; vertex++)\r\n    {\r\n        if (!visited[vertex])\r\n        {\r\n            vector<int> singleComponent;\r\n            depthFirstSearchHelper(vertex, visited, singleComponent, graph);\r\n            components.push_back(singleComponent);\r\n        }\r\n    }\r\n    return components;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity     :   O((V * log(V)) + E)\r\n    Space Complexity    :   O(V + E)\r\n\r\n    Where 'V' is the number of vertex and 'E' is the number of edges in graph.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n    private static void depthFirstSearchHelper(ArrayList<ArrayList<Integer>> graph, int currVertex, ArrayList<Integer> singleComponent, boolean[] visited) {\r\n        visited[currVertex] = true;\r\n        singleComponent.add(currVertex);\r\n        \r\n        for (int childVertex : graph.get(currVertex)) {\r\n\r\n            // Check if the node is visited before or not.\r\n            if(!visited[childVertex]) {\r\n                depthFirstSearchHelper(graph, childVertex, singleComponent, visited);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public static ArrayList<ArrayList<Integer>> depthFirstSearch(int v, int e, ArrayList<ArrayList<Integer>> edges) {\r\n        ArrayList<ArrayList<Integer>> adjList = new ArrayList<>(v);\r\n        for (int i = 0; i < v; i++) {\r\n            adjList.add(new ArrayList<>());\r\n        }\r\n\r\n        for (int i = 0; i < e; i++) {\r\n            int firstVertex = edges.get(i).get(0);\r\n            int secondVertex = edges.get(i).get(1);\r\n            \r\n            ArrayList<Integer> list = adjList.get(firstVertex);\r\n            list.add(secondVertex);\r\n            \r\n            list = adjList.get(secondVertex);\r\n            list.add(firstVertex);\r\n        }\r\n\r\n        ArrayList<ArrayList<Integer>> components = new ArrayList<>();\r\n        boolean visited[] = new boolean[v + 1];\r\n        \r\n        for (int vertex = 0; vertex < v; vertex++) {\r\n            if (!visited[vertex]) {\r\n                ArrayList<Integer> singleComponent = new ArrayList<>();\r\n                depthFirstSearchHelper(adjList, vertex, singleComponent, visited);\r\n                components.add(singleComponent);\r\n            }\r\n        }\r\n        return components;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time complexity : O(Vlog(V) + E )\r\n    Space complexity : O(V+E)\r\n    where V is the number of vertex and E is the number of edges in graph\r\n\r\n\"\"\"\r\n\r\n\r\ndef depthFirstSearchHelper(vertex, visited, singleComponent, gra):\r\n    visited[vertex] = True\r\n    singleComponent.append(vertex)\r\n\r\n    for child in gra[vertex]:\r\n\r\n        # Check if the node is visited before or not.\r\n        if visited[child] == False:\r\n            depthFirstSearchHelper(child, visited, singleComponent, gra)\r\n\r\n\r\ndef depthFirstSearch(V, E, edges):\r\n\r\n    # Creating Adjacency Matrix.\r\n    gra = [[] for i in range(V + 1)]\r\n    for a, b in edges:\r\n        gra[a].append(b)\r\n        gra[b].append(a)\r\n\r\n    components = []\r\n    visited = [False for i in range(V + 1)]\r\n\r\n    for vertex in range(V):\r\n\r\n        if visited[vertex] == False:\r\n            singleComponent = []\r\n            depthFirstSearchHelper(vertex, visited, singleComponent, gra)\r\n            singleComponent.sort()\r\n            components.append(singleComponent)\r\n\r\n    return components\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}