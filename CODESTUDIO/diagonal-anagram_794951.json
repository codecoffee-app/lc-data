{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7853,
            "title": "Diagonal Anagram",
            "titleSlug": "diagonal-anagram_794951",
            "content": "<h4 id=\"you-are-given-two-binary-trees-you-need-to-return-true-if-the-diagonals-of-trees-are-anagram-to-each-other-otherwise-you-need-to-return-false\">You are given two Binary Trees. You need to return true if the diagonals of trees are anagram to each other, otherwise you need to return false.</h4>\n\n<h4 id=\"diagonals-of-the-binary-tree-are\">Diagonals of the binary tree are :</h4>\n\n<p><img src=\"https://files.codingninjas.in/diagonal-5080.png\" alt=\"example\"></p>\n\n<h4 id=\"there-are-three-diagonals\">There are three diagonals :</h4>\n\n<h4 id=\"diagonal-1-8-10-14\">Diagonal 1 : 8 10 14</h4>\n\n<h4 id=\"diagonal-2-3-6-7-13\">Diagonal 2 : 3 6 7 13</h4>\n\n<h4 id=\"diagonal-3-1-4\">Diagonal 3 : 1 4</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>For the given binary trees: \n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/0000000000000601.16\" alt=\"alt-text\">\n<img src=\"https://ninjasfiles.s3.amazonaws.com/0000000000000600.16\" alt=\"alt-text\"></p>\n\n<pre><code>Output: True\n\nExplanation: There are 3 diagonals in each tree.\nTree1:                                      \nDiagonal 1: 5 10 9             \nDiagonal 2: 6 3 5               \nDiagonal 3: 2   \n\nTree2:\nDiagonal 1: 5 9 10\nDiagonal 2: 3 6 5\nDiagonal 3: 2\n\nSince diagonal 1 of tree 1 is an anagram of diagonal 1 of tree 2, similarly diagonal 2 of tree 1 is an anagram of diagonal 2 of tree 2 and similarly with diagonal 3. \nThus, its output should be True.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the test case contains elements of the first binary tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nThe second line of the test case contains elements of the second binary tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output will contain \u201cTrue\u201d or \u201cFalse\u201d.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the output explicitly, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>0 &lt;= N, M &lt;= 10^5\n0 &lt;= node data &lt;= 10^9\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>5 6 10 2 3 5 9 -1 -1 -1 -1 -1 -1 -1 -1\n5 3 9 2 6 5 10 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">Explanation to Sample Input 1:</h5>\n\n<pre><code>There are 3 diagonals in each tree.\nTree1:                                      \nDiagonal 1: 5 10 9             \nDiagonal 2: 6 3 5               \nDiagonal 3: 2                     \n\nTree2:\nDiagonal 1: 5 9 10\nDiagonal 2: 3 6 5\nDiagonal 3: 2\nSince diagonal 1 of tree 1 is an anagram of diagonal 1 of tree 2, similarly diagonal 2 of tree 1 is an anagram of diagonal 2 of tree 2 and similarly with diagonal 3.\n\nThus, its output should be True.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1 2 3 -1 -1 -1 -1\n3 2 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>False\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 25,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two binary trees represented in level order format, determine if the diagonals of the trees are anagrams of each other. Return `true` if the diagonals are anagrams, and `false` otherwise.",
                "constraints": [
                    "0 <= N, M <= 10^5 (where N and M are the number of nodes in the two trees respectively)",
                    "0 <= node data <= 10^9",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "5 6 10 2 3 5 9 -1 -1 -1 -1 -1 -1 -1 -1\n5 3 9 2 6 5 10 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "True",
                        "explanation": "Tree 1 diagonals: [5, 10, 9], [6, 3, 5], [2]\nTree 2 diagonals: [5, 9, 10], [3, 6, 5], [2]\nSince the corresponding diagonals are anagrams of each other, the output is True."
                    },
                    {
                        "input": "1 2 3 -1 -1 -1 -1\n3 2 -1 -1",
                        "output": "False",
                        "explanation": "Tree 1 diagonals: [1, 3], [2]\nTree 2 diagonals: [3], [2]\nThe first diagonals [1,3] and [3] are not anagrams, therefore the output is False."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The idea is to add all the diagonals of both the trees on the map. To do so, keep track of vertical distance from top diagonal passing through the root. We increment the vertical distance we go down to the next diagonal. After adding the diagonals in the map, check whether they are anagram or not.</p>",
            "<p>Try to think of the level order traversal but in this case, we only need to push the left child of the tree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}