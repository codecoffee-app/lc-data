{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7843,
            "title": "Diagonal Sum",
            "titleSlug": "diagonal-sum_790722",
            "content": "<h4 id=\"given-a-binary-tree-of-n-nodes-find-and-print-a-list-containing-the-sums-of-all-the-diagonals-when-calculating-the-sum-of-each-diagonal-consider-the-diagonals-from-right-to-left\">Given a Binary Tree of &#39;N&#39; nodes, find and print a list containing the sums of all the diagonals. When calculating the sum of each diagonal, consider the diagonals from right to left.</h4>\n\n<h4 id=\"diagonals-of-the-binary-tree-are\">Diagonals of the binary tree are :</h4>\n\n<p><img src=\"https://files.codingninjas.in/diagonal-5080.png\" alt=\"alt-text\"></p>\n\n<h4 id=\"there-are-three-diagonals\">There are three diagonals :</h4>\n\n<h4 id=\"diagonal-1-8-10-14\">Diagonal 1 : 8 10 14</h4>\n\n<h4 id=\"diagonal-2-3-6-7-13\">Diagonal 2 : 3 6 7 13</h4>\n\n<h4 id=\"diagonal-3-1-4\">Diagonal 3 : 1 4</h4>\n\n<pre><code>Example :\n\nFor the given binary tree : \n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/0000000000000615.PNG\" alt=\"alt-text\"></p>\n\n<pre><code>Output : 24 14 2\n\nExplanation: Rightmost diagonal contains elements {5, 10 , 9} its sum is 24, middle diagonal contains elements {6, 3, 5} its sum is 14, leftmost diagonal contains elements {2}. Thus the answer should be \u201c24 14 2\u201d.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The only line of the test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print the only line of output will contain a list containing diagonal sums from right diagonal to left diagonal.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print the output explicitly, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>0 &lt;= N &lt;= 10^5\n0 &lt;= node.data &lt;= 10^9\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1 2 3 -1 4 4 -1 -1 5 6 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4 15 6\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>The input binary tree will be represented as \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/Tree%287403%29-4671.png\" alt=\"alt-text\"></p>\n\n<pre><code>From the above representation, the rightmost diagonal contains elements {1, 3}, the middle diagonal contains elements {2, 4, 4, 5} and leftmost diagonal elements are {6}. Thus the list should contain \u201c4 15 6\u201d.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4 2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 28,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a binary tree, calculate the sum of elements along each diagonal, traversing from right to left. Return a list containing these diagonal sums.",
                "constraints": [
                    "0 <= N <= 10^5, where N is the number of nodes in the tree",
                    "0 <= node.data <= 10^9",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "root = [1, 2, 3, null, 4, 4, null, null, 5, 6, null, null, null, null, null]",
                        "output": "4 15 6",
                        "explanation": "The rightmost diagonal contains elements {1, 3}, which sum to 4. The middle diagonal contains elements {2, 4, 4, 5}, which sum to 15. The leftmost diagonal contains the element {6}, which sums to 6."
                    },
                    {
                        "input": "root = [1, 2, 3, null, null, null, null]",
                        "output": "4 2",
                        "explanation": "The rightmost diagonal contains elements {1, 3}, which sum to 4. The middle diagonal contains the element {2}, which sums to 2."
                    },
                    {
                        "input": "root = [5, 2, 8, 1, 3, 6, 9, null, null, null, null, null, 7, null, null]",
                        "output": "22 9 6",
                        "explanation": "The rightmost diagonal is 5, 8, 9 which sums to 22. The middle diagonal is 2, 6, which sums to 8 and last diagonal is 1+3+7=11. Hence the output is 22 9 6."
                    },
                    {
                        "input": "root = [1]",
                        "output": "1",
                        "explanation": "The only diagonal contains the root node 1."
                    },
                    {
                        "input": "root = [1,2,3,4,5,6,7]",
                        "output": "8 14 10 4",
                        "explanation": "Rightmost diagonal contains 1,3,7, whose sum is 11. Next diagonal is 2, 6 which sums to 8 and next diagonal is 4, 5 which sums to 9 and last one is just 4. The output is 8 14 10 4"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The idea is to keep track of vertical distance from top diagonal passing through the root. We increment the vertical distance we go down to the next diagonal.&nbsp;</p>",
            "<p>Try to think of the level order traversal but in this case, we only need to push the left child of the tree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}