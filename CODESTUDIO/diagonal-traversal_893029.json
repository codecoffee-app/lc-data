{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8550,
            "title": "Diagonal Traversal",
            "titleSlug": "diagonal-traversal_893029",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-integers-you-have-to-return-all-the-diagonal-paths-of-the-binary-tree-a-diagonal-path-is-one-in-which-all-the-nodes-pass-through-1-slope-line\">You have been given a binary tree of integers. You have to return all the diagonal paths of the binary tree. A diagonal path is one in which all the nodes pass through -1 slope line.</h4>\n\n<h4 id=\"a-binary-tree-is-a-tree-in-which-each-parent-node-has-at-most-two-children\">A binary tree is a tree in which each parent node has at most two children.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Order of return of diagonal path\u2019s array/vector: The rightmost diagonal path must come first, and so on.\nEvery parent node comes first then the child node. In other words, return the diagonal element from top to bottom.\n</code></pre>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>Consider the given binary tree.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/example_binarytree-5909.png\" alt=\"subsequence\"></p>\n\n<pre><code>There are 4 diagonal paths:\n1 3 6\n2 5 9\n4 8\n7\nYou need to return \u20181 3 6 2 5 9 4 8 7\u2019.\n\nLet&#39;s consider this example\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/img1-5910.png\" alt=\"subsequence\"></p>\n\n<pre><code>Diagonal paths are:\n1 3 6\n2 5\n4\n\nYou need to return \u20181 3 6 2 5 4\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u2018T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of input contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code> 1\n 2 3\n 4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, the output prints in a single line the diagonal paths of the given binary tree.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just return an array/list of all diagonal paths in which the rightmost diagonal path comes first, the second rightmost diagonal path comes second, and so on.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n1 &lt;= N &lt;= 3*10^3\n-10^9 &lt;= DATA &lt;= 10^9\n\nWhere \u2018N\u2019 is the number of nodes in the tree, and &#39;DATA&#39; denotes data contained in the node of a binary tree.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n1 2 3 -1 -1 4 5 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code> 1 3 7 2 5 6 4\n 1 3 5 2 4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-test-1\">Explanation For Sample Test 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/img3-5912.png\" alt=\"alt text\"></p>\n\n<pre><code>It is clear that &#39;1 3 7&#39; is the first diagonal path &#39;2 5 6&#39; is the second and &#39;4&#39; is the third diagonal path. But 5 and 6 have the same level and same diagonal path, so we need to consider a node that comes first in the pre-order traversal.\nHence the diagonal path of the above binary tree is 1 3 7 2 5 6 4.\n\nTest case 2:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/img2-5911.png\" alt=\"alt text\"></p>\n\n<pre><code>It is clear that the first diagonal path is &#39;1 3 5&#39;, and the second is &#39;2 4&#39;.\nHence diagonal binary tree traversal when combined is &#39;1 3 5 2 4&#39;.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 -1 2 3 4 -1 -1 -1 -1\n1 2 3 -1 -1 4 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 2 4 3\n1 3 2 4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 24,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of integers, return a list representing the diagonal traversal of the tree. A diagonal path consists of all nodes lying on a line with a slope of -1. The traversal should return elements from top to bottom for each diagonal, and diagonals should be ordered from rightmost to leftmost.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 3000 (Number of nodes in the tree)",
                    "-10^9 <= DATA <= 10^9 (Value of each node)"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "1 3 7 2 5 6 4",
                        "explanation": "The diagonal paths are [1, 3, 7], [2, 5, 6], and [4]. Concatenating them results in the output: 1 3 7 2 5 6 4."
                    },
                    {
                        "input": "1 2 3 -1 -1 4 5 -1 -1 -1 -1",
                        "output": "1 3 5 2 4",
                        "explanation": "The diagonal paths are [1, 3, 5], and [2, 4]. Concatenating them results in the output: 1 3 5 2 4."
                    },
                    {
                        "input": "1 -1 2 3 4 -1 -1 -1 -1",
                        "output": "1 2 4 3",
                        "explanation": "The diagonal paths are [1, 2, 4], and [3]. Concatenating them results in the output: 1 2 4 3."
                    },
                    {
                        "input": "1 2 3 -1 -1 4 -1 -1 -1",
                        "output": "1 3 2 4",
                        "explanation": "The diagonal paths are [1, 3], and [2, 4]. Concatenating them results in the output: 1 3 2 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a recursive approach and simultaneously using a hash map.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}