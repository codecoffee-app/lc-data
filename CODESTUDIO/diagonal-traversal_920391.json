{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8840,
            "title": "Diagonal Traversal",
            "titleSlug": "diagonal-traversal_920391",
            "content": "<h4 id=\"you-are-given-a-binary-tree-having-n-nodes-your-task-is-to-return-its-diagonal-traversal\">You are given a binary tree having \u2018N\u2019 nodes. Your task is to return its diagonal traversal.</h4>\n\n<h4 id=\"a-binary-tree-is-a-hierarchical-data-structure-in-which-each-node-has-at-most-two-children\">A binary tree is a hierarchical data structure in which each node has at most two children.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<p><img src=\"https://files.codingninjas.in/diagonals_example1-11003.png\" alt=\"\"></p>\n\n<pre><code>For the above binary tree, the output will be:\n8 10 14\n3 6 7 13\n1 4\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an Integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-10999.png\" alt=\"\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n\nNote: The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print each diagonal traversal in a new line.\nThe output of each test case should be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You are not required to print anything, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3 * 10^3\n1 &lt;= nodeVal &lt;= 10^9\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 1 2 4 -1 -1 -1 -1 -1\n1 2 3 4 -1 5 -1 -1 -1 -1 6 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3 2 \n1 \n4\n1 3 \n2 5 6 \n4 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case, the tree will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/diagonals_example2-11004.png\" alt=\"\"></p>\n\n<pre><code>So, the output will be:\n3 2\n1\n4\n\nFor the second test case, the tree will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/diagonals_example3-11005.png\" alt=\"\"></p>\n\n<pre><code>So, the output will be:\n1 3\n2 5 6\n4\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 2 -1 -1 -1\n1 3 2 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 \n2 \n1 2 \n3 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 17,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with 'N' nodes, the task is to return its diagonal traversal. A binary tree is a hierarchical data structure where each node has at most two children.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3 * 10^3",
                    "1 <= nodeVal <= 10^9",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "3 1 2 4 -1 -1 -1 -1 -1",
                        "output": "3 2\n1\n4",
                        "explanation": "The tree for the input is constructed as follows:\n\n      3\n     / \\\n    1   2\n   / \n  4\n\nThe diagonal traversal is then performed.  First diagonal: 3, 2.  Second Diagonal: 1. Third Diagonal: 4."
                    },
                    {
                        "input": "1 2 3 4 -1 5 -1 -1 -1 -1 6 -1 -1",
                        "output": "1 3\n2 5 6\n4",
                        "explanation": "The tree for the input is constructed as follows:\n\n        1\n       / \\\n      2   3\n     /   / \\\n    4   5   6\n\nThe diagonal traversal is then performed. First diagonal: 1, 3. Second diagonal: 2, 5, 6. Third diagonal: 4."
                    },
                    {
                        "input": "1 2 -1 -1 -1",
                        "output": "1\n2",
                        "explanation": "The tree for the input is constructed as follows:\n\n    1\n   /\n  2\n\nThe diagonal traversal is then performed. First diagonal: 1. Second diagonal: 2."
                    },
                    {
                        "input": "1 3 2 -1 -1 -1 -1",
                        "output": "1 2\n3",
                        "explanation": "The tree for the input is constructed as follows:\n\n    1\n   / \\\n  3   2\n\nThe diagonal traversal is then performed. First diagonal: 1, 2. Second diagonal: 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find the relationship between the diagonal level of the current node with the left and right child.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}