{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8946,
            "title": "Diameter of the binary tree.",
            "titleSlug": "diameter-of-the-binary-tree_920552",
            "content": "<h4 id=\"you-are-given-a-binary-tree\">You are given a Binary Tree.</h4>\n\n<p><br/></p>\n\n<h4 id=\"return-the-length-of-the-diameter-of-the-tree\">Return the length of the diameter of the tree.</h4>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The diameter of a binary tree is the length of the longest path between any two end nodes in a tree.\n\nThe number of edges between two nodes represents the length of the path between them.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Input: Consider the given binary tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/diameterexplaination-6262.png\" alt=\"Example\"></p>\n\n<pre><code>Output: 6\n\nExplanation:\nNodes in the diameter are highlighted. The length of the diameter, i.e., the path length, is 6.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The only line contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null(-1).\n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return a single integer i.e. the diameter of the tree.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1 2 3 4 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>The binary tree in the given test case will look like\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-2-9971.png\" alt=\"\"></p>\n\n<pre><code>The length of the diameter of the above tree is the length of the path between nodes 4 and 3, i.e., 4-&gt;2-&gt;1-&gt;3. Hence the output will be 3.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h5>\n\n<pre><code>The binary tree in the given test case will look like\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-3-9972.png\" alt=\"\"></p>\n\n<pre><code>The length of the diameter of the above tree is the length of the path between nodes 2 and 3, i.e., 2.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to do this in O(n).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= n &lt;= 10000\n\nWhere &#39;n&#39; is the total number of nodes in the binary tree.\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 91,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find the length of its diameter. The diameter of a binary tree is defined as the longest path between any two nodes in the tree. The length of the path is represented by the number of edges between the nodes.",
                "constraints": [
                    "1 <= n <= 10000, where 'n' is the total number of nodes in the binary tree.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 7 -1 -1 -1 -1 -1 -1",
                        "output": "3",
                        "explanation": "The longest path is between nodes 4 and 3: 4 -> 2 -> 1 -> 3, which has a length of 3."
                    },
                    {
                        "input": "1 2 3 -1 -1 -1 -1",
                        "output": "2",
                        "explanation": "The longest path is between nodes 2 and 3: 2 -> 1 -> 3, which has a length of 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>Try to divide your problem into smaller sub-problems using recursion.</strong></p>",
            "<p>Can you think of doing it in a single traversal and optimising time?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(n)\r\n    Space Complexity : O(n)\r\n\t\r\n    Where 'n' is the number of nodes in the given binary tree.\r\n*/\r\n\r\nint getDiameter(TreeNode<int> *root, int &height)\r\n{\r\n    if (root == NULL)\r\n    {\r\n        // Height and diameter of an empty tree will be 0.\r\n        height = 0;\r\n        return 0;\r\n    }\r\n\r\n    // To store the height of left and right subtrees.\r\n    int leftHeight = 0;\r\n    int rightHeight = 0;\r\n\r\n    // Recur for left subtree and get the height as well as diameter.\r\n    int leftDiameter = getDiameter(root->left, leftHeight);\r\n\r\n    // Recur for right subtree and get the height as well as diameter.\r\n    int rightDiameter = getDiameter(root->right, rightHeight);\r\n\r\n    // Update the height of the given binary tree.\r\n    height = max(leftHeight, rightHeight) + 1;\r\n\r\n    // Diameter of given binary tree.\r\n    int diameter = max(leftDiameter, max(rightDiameter, leftHeight + rightHeight));\r\n\r\n    return diameter;\r\n}\r\n\r\nint diameterOfBinaryTree(TreeNode<int> *root)\r\n{\r\n    // Initialize a variable to store the height of the of binary tree.\r\n    int height = 0;\r\n\r\n    // Recursive function to find diameter.\r\n    return getDiameter(root, height);\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space Complexity : O(N)\r\n\r\n    Where 'N' is the number of nodes in the given binary tree.\r\n*/\r\n\r\npublic class Solution {\r\n\r\n    // Returns the diameter of the given subtree rooted at the 'root' node.\r\n    public static int getDiameter(TreeNode<Integer> root, int[] height) {\r\n        if (root == null) {\r\n            // Height and diameter of an empty tree will be 0.\r\n            height[0] = 0;\r\n            return 0;\r\n        }\r\n\r\n        // To store the height of left and right subtrees.\r\n        int[] leftHeight = { 0 };\r\n        int[] rightHeight = { 0 };\r\n\r\n        // Recur for left subtree and get the height as well as diameter.\r\n        int leftDiameter = getDiameter(root.left, leftHeight);\r\n\r\n        // Recur for right subtree and get the height as well as diameter.\r\n        int rightDiameter = getDiameter(root.right, rightHeight);\r\n\r\n        // Update the height of the given binary tree.\r\n        height[0] = Math.max(leftHeight[0], rightHeight[0]) + 1;\r\n\r\n        // Diameter of given binary tree.\r\n        int diameter = Math.max(leftDiameter, Math.max(rightDiameter, leftHeight[0] + rightHeight[0]));\r\n\r\n        return diameter;\r\n    }\r\n\r\n    public static int diameterOfBinaryTree(TreeNode<Integer> root) {\r\n        // To store the height of the of binary tree.\r\n        int[] height = { 0 };\r\n\r\n        return getDiameter(root, height);\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\n    Time Complexity : O(N)\n    Space Complexity : O(N)\n\t\n    Where 'N' is the number of nodes in the given binary tree.\n\"\"\"\nfrom typing import List\n\n# Following is the TreeNode class structure.\nclass TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef getDiameter(root: TreeNode, height: List[int]) -> int:\n\n    if (root == None):\n    \n        # Height and diameter of an empty tree will be 0.\n        height[0] = 0\n        return 0\n    \n\n    # To store the height of left and right subtrees.\n    leftHeight = [0]\n    rightHeight = [0]\n\n    # Recur for left subtree and get the height as well as diameter.\n    leftDiameter = getDiameter(root.left, leftHeight)\n\n    # Recur for right subtree and get the height as well as diameter.\n    rightDiameter = getDiameter(root.right, rightHeight)\n\n    # Update the height of the given binary tree.\n    height[0] = max(leftHeight[0], rightHeight[0]) + 1\n\n    # Diameter of given binary tree.\n    diameter = max(leftDiameter, max(rightDiameter, leftHeight[0] + rightHeight[0]))\n\n    return diameter\n\n\ndef diameterOfBinaryTree(root: TreeNode) -> int:\n\n    # Initialize a variable to store the height of the of binary tree.\n    height = [0]\n\n    # Recursive function to find diameter.\n    return getDiameter(root, height)\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}