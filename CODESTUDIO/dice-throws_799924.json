{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8048,
            "title": "Dice Throws",
            "titleSlug": "dice-throws_799924",
            "content": "<h4 id=\"you-are-given-d-dice-each-having-f-faces-numbered-1-to-f-both-inclusive-the-task-is-to-find-the-possible-number-of-ways-to-roll-the-dice-together-such-that-the-sum-of-face-up-numbers-equal-the-given-target-s\">You are given D dice, each having F faces numbered 1 to F, both inclusive. The task is to find the possible number of ways to roll the dice together such that the sum of face-up numbers equal the given target S.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>As the answer can be large, return your answer modulo 10^9  + 7.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up :</h5>\n\n<pre><code>Can you solve this using not more than O(S) extra space?\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer T denoting the number of test cases. \n\nThe first and the only line of every test case contains 3 integers D, F and S representing the number of dices, the number of faces on each die and the target sum respectively.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the number of ways to get the sum S in a separate line. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code> You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5    \n1 &lt;= D, F &lt;= 50\n1 &lt;= S &lt;= 10^3\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1 :</h5>\n\n<pre><code>3\n2 5 10\n1 6 9\n2 6 8 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>1\n0\n5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>For test case 1 :  \nWe are given 2 dice with 5 faces numbered 1, 2, 3, 4 and 5.\nThe only possible way of getting a sum of 10 is when both the die face 5. Hence, the answer is 1.  \n\nFor test case 2 :\nWe are given 1 dice with 6 faces numbered 1, 2, 3, 4, 5 and 6.\nThere is no possible way of getting a sum of 9 with a single die having all the faces less than 9. Hence, the answer is 0. \n\nFor test case 3 :\nWe are given 2 dice with 6 faces numbered 1, 2, 3, 4, 5 and 6.\nThe possible ways are [{2, 6}, {3, 5}, {4, 4}, {5, 3}, {6, 2}]. Hence, the answer is 5. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample input 2 :</h5>\n\n<pre><code>2\n6 3 8  \n2 2 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>21\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given `D` dice, each with `F` faces numbered from 1 to `F` (inclusive), determine the number of ways to roll the dice such that the sum of the face-up numbers equals the target sum `S`. Return the answer modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= D, F <= 50",
                    "1 <= S <= 10^3",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2 5 10",
                        "output": "1",
                        "explanation": "With 2 dice, each having 5 faces, the only way to achieve a sum of 10 is if both dice show 5. Therefore, the count is 1."
                    },
                    {
                        "input": "1 6 9",
                        "output": "0",
                        "explanation": "With 1 die having 6 faces, it's impossible to obtain a sum of 9 since the maximum value on a single die is 6. Therefore, the count is 0."
                    },
                    {
                        "input": "2 6 8",
                        "output": "5",
                        "explanation": "With 2 dice, each having 6 faces, the combinations that result in a sum of 8 are (2, 6), (3, 5), (4, 4), (5, 3), and (6, 2). Therefore, the count is 5."
                    },
                    {
                        "input": "6 3 8",
                        "output": "21",
                        "explanation": null
                    },
                    {
                        "input": "2 2 3",
                        "output": "0",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The very first approach can be to try all the combinations of all the faces for all the dice and maintain the count of those combinations that sum up to S.</p>",
            "<p>We are solving this problem by solving its subproblems and then combining the solutions of those subproblems. If we analyze carefully, we will see that we are solving the same subproblems multiple times. Thus, this problem exhibits overlapping subproblems. Thus, in this approach we will eliminate the need for solving the same subproblems again and again.</p>",
            "<p>Initially, we were breaking the large problem into small problems but now, let us look at it in a different way. Let us solve the small problem first and then reach the final answer. Thus we will be using a bottom up approach now.</p>",
            "<p>Initially, we were breaking the large problem into small problems but now, let us look at it in a different way. Let us solve the small problem first and then reach the final answer. Thus we will be using a bottom up approach now but this will be a space optimised version of the previous one.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}