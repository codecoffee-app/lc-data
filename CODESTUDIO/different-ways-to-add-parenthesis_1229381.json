{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10448,
            "title": "Different Ways To Add Parenthesis",
            "titleSlug": "different-ways-to-add-parenthesis_1229381",
            "content": "<h4 id=\"you-are-given-a-string-s-containing-an-arithmetic-expression-your-task-is-to-return-all-the-possible-results-obtained-after-putting-the-valid-parenthesis\">You are given a string &#39;S&#39; containing an arithmetic expression. Your task is to return all the possible results obtained after putting the valid parenthesis.</h4>\n\n<h4 id=\"it-is-guaranteed-that-the-given-string-only-contains-the-operator\">It is guaranteed that the given string only contains the \u2018+\u2019, \u2018-\u2019, \u2018*\u2019 operator.</h4>\n\n<h4 id=\"the-valid-expression-is-an-expression-where-a-number-of-closing-and-opening-parenthesis-is-the-same-and-the-result-is-computed-by-solving-inner-parentheses-first\">The valid expression is an expression where a number of closing and opening parenthesis is the same. And the result is computed by solving inner parentheses first.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>S = 2 * 3 - 2\n((2 * 3) - 2) = 4\n(2 * (3 - 2)) = 2 , [4, 2] or [2, 4] are the solution.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first and only line of each test case contains arithmetic expressions containing numbers and  \u2018+\u2019, \u2018-\u2019, \u2018*\u2019 as operators.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case print all the values that can be obtained from the expression after putting valid parenthesis.\n\nYou can print values in any order.\n\nThe output for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n3 &lt;= len(S) &lt;= 65\n\nlen(S) is the length of the string &#39;S&#39; it is guaranteed that input has at least one operator.  \n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1+2*3+1\n1+1*2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>9 8 12 8 10\n3 4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For first test case output is [9,8,12,8,10] as,\n((1 + 2) * (3 + 1)) = 9\n((1 + (2 * 3)) + 1) = 8\n((1 + 2) * (3 + 1)) = 12\n(1 + ((2 * 3) + 1)) = 8\n(((1 + 2) * 3) + 1) = 10\n\nFor the second test case output is [3, 4] or [4,3] as\n((1 + 1) * 2) = 4\n(1 + (1 * 2)) = 3\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1+1-1-1\n13*1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2 2 0 0 0\n13\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S' representing an arithmetic expression containing numbers and the operators '+', '-', and '*', your task is to find all possible results achievable by placing valid parentheses in different ways. A valid expression is one where the number of opening and closing parentheses match, and evaluation follows the standard order of operations (inner parentheses first).",
                "constraints": [
                    "1 <= T <= 10 (where T is the number of test cases)",
                    "3 <= len(S) <= 65 (where len(S) is the length of the string 'S')",
                    "The input string 'S' is guaranteed to contain at least one operator.",
                    "The string 'S' will only contain the operators '+', '-', and '*'."
                ],
                "testcases": [
                    {
                        "input": "1+2*3+1",
                        "output": "9 8 12 8 10",
                        "explanation": "Possible parenthesizations and their results:\n((1 + 2) * (3 + 1)) = 12\n((1 + (2 * 3)) + 1) = 8\n(1 + ((2 * 3) + 1)) = 8\n(((1 + 2) * 3) + 1) = 10\n(1+(2*(3+1))) = 9"
                    },
                    {
                        "input": "1+1*2",
                        "output": "3 4",
                        "explanation": "Possible parenthesizations and their results:\n((1 + 1) * 2) = 4\n(1 + (1 * 2)) = 3"
                    },
                    {
                        "input": "1+1-1-1",
                        "output": "2 2 0 0 0",
                        "explanation": "Due to operator precedence ambiguity without parentheses, multiple valid interpretations can lead to different, yet correct, answers. Therefore 2 2 0 0 0 are all valid answers. Example:\n((1+1)-1)-1 = 0\n(1+1)-(1-1) = 2\n1+(1-(1-1)) = 2\n(1+(1-1))-1 = 0"
                    },
                    {
                        "input": "13*1",
                        "output": "13",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Brute Force, Can we use recursion to try all the parentheses possible?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}