{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9105,
            "title": "Digits Decodig",
            "titleSlug": "digits-decodig_975376",
            "content": "<h4 id=\"a-few-days-back-ninja-encountered-a-string-containing-characters-from-a-to-z-which-indicated-a-secret-message-for-security-purposes-he-encoded-each-character-of-the-string-to-its-numeric-value-that-is-a-1-b-2-c-3-till-z-26-and-combined-them-as-a-single-sequence-seq-of-digits-of-length-n-lets-say-the-message-was-la-ninja-encoded-it-as-121-for-l-12-and-a-1\">A few days back, Ninja encountered a string containing characters from \u2018A\u2019 to \u2018Z\u2019 which indicated a secret message. For security purposes he encoded each character of the string to its numeric value, that is, A = 1, B = 2, C = 3, till Z = 26 and combined them as a single sequence (SEQ) of digits of length N. Let&#39;s say the message was &quot;LA&quot;, Ninja encoded it as 121 for L=12 and A=1.</h4>\n\n<h4 id=\"today-when-he-read-the-encoded-secret-message-he-realised-that-he-was-not-able-to-decode-the-original-string-so-the-ninja-is-wondering-in-how-many-ways-he-can-decode-the-numeric-sequence-to-some-valid-string\">Today, when he read the encoded secret message, he realised that he was not able to decode the original string. So, the Ninja is wondering in how many ways he can decode the numeric sequence to some valid string.</h4>\n\n<h4 id=\"a-valid-string-is-a-string-with-characters-from-a-to-z-and-no-other-characters\">A valid string is a string with characters from A to Z and no other characters.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Let the encoded sequence be 121,\n\nThe first way to decode 121 is:\n1 = A\n2 = B\n1 = A\nThus, the decoded string will be ABA.\n\nThe second way to decode 121 is:\n12 = L\n1 = A\nThus, the decoded string will be LA.\n\nThe third way to decode 121 is:\n1 = A\n21 = U\nThus, the decoded string will be AU.\n\nSo, there will be 3 ways to decode the sequence 121 i.e. [(ABA), (LA), (AU)].\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The input sequence will always have at least 1 possible way to decode.    \n\nAs the answer can be large, return your answer modulo 10^9  + 7.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve this using constant extra space?\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer T denoting the number of queries or test cases. \n\nThe first and only line of each test case contains a digit sequence.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the number of ways to decode the given digit sequence in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10   \n1 &lt;= N &lt;= 10^5\n0 &lt;= SEQ[i] &lt;= 9\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n121\n1234\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For test case 1: Refer to the example explained above.\n\nFor test case 2:\nThere will be 3 ways to decode it which are\n\nThe first way to decode this is:\n1 = A\n2 = B\n3 = C\n4 = D\nThus, the decoded string will be ABCD.\n\nThe second way to decode this is:\n12 = L\n3 = C\n4 = D\nThus, the decoded string will be LCD.\n\nThe third way to decode this is:\n1 = A\n23 = W\n4 = D\nThus, the decoded string will be AWD.\n\nAll the other ways to decode the sequence will lead to an invalid string.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1213\n21031\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an encoded numeric sequence, where each digit represents a letter (A=1, B=2, ..., Z=26), determine the number of ways to decode the sequence into a valid string. A valid string contains only characters from A to Z.  Return the number of decoding ways modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5 (where N is the length of the sequence)",
                    "0 <= SEQ[i] <= 9"
                ],
                "testcases": [
                    {
                        "input": "seq = \"121\"",
                        "output": "3",
                        "explanation": "The possible decodings are ABA (1-2-1), LA (12-1), and AU (1-21)."
                    },
                    {
                        "input": "seq = \"1234\"",
                        "output": "3",
                        "explanation": "The possible decodings are ABCD (1-2-3-4), LCD (12-3-4), and AWD (1-23-4)."
                    },
                    {
                        "input": "seq = \"1213\"",
                        "output": "5",
                        "explanation": "The possible decodings are ABA-C (1-2-1-3), LA-C (12-1-3), A-U-C (1-21-3), AB-M (1-2-13), L-M (12-13)."
                    },
                    {
                        "input": "seq = \"21031\"",
                        "output": "1",
                        "explanation": "The only possible decoding is U-0-C-A, but '0' cannot be decoded so it would be considered to be a invalid string except U-3-A where 21=U, 03 cant be decoded, 1=A, so it becomes U-3-1 = UC1 and only 21031 works since it is not considered as valid."
                    },
                    {
                        "input": "seq = \"11106\"",
                        "output": "2",
                        "explanation": "The possible decodings are KAF (11-1-6) and AJF(1-11-6)."
                    },
                    {
                        "input": "seq = \"226\"",
                        "output": "3",
                        "explanation": "The possible decodings are BZ (2-26), VF (22-6), and BBF (2-2-6)."
                    },
                    {
                        "input": "seq = \"06\"",
                        "output": "0",
                        "explanation": "The input has no valid decodings, because \"0\" is not a valid character mapping."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The very first approach can be to try all possible decodings of the sequence and count the valid ones among them.</p>",
            "<p>We are solving this problem by solving its subproblems and then combining the solutions of those subproblems. If we analyze carefully, we will see that we are solving the same subproblems multiple times.&nbsp;</p><p>&nbsp;</p><p>Thus, this problem exhibits overlapping subproblems.&nbsp;</p><p>&nbsp;</p><p>This means, in this approach, we will eliminate the need for solving the same subproblems again and again.&nbsp;</p>",
            "<p>Initially, we were breaking the large problem into small problems but now, let us look at it differently. Let us solve the small problem first and then reach the final answer. Thus we will be using a bottom-up approach now.&nbsp;</p>",
            "<p>As we are creating a DP array of size N but we only need the last 2 values of the DP array. Thus, a complete DP array is not required. We can compute the answer using 2 variables only.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}