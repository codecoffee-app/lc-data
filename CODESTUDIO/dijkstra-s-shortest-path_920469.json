{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8882,
            "title": "Dijkstra's shortest path",
            "titleSlug": "dijkstra-s-shortest-path_920469",
            "content": "<h4 id=\"you-have-been-given-an-undirected-graph-of-v-vertices-labeled-0-1-v-1-and-e-edges-each-edge-connecting-two-nodes-x-y-will-have-a-weight-denoting-the-distance-between-node-x-and-node-y\">You have been given an undirected graph of \u2018V\u2019 vertices (labeled 0,1,..., V-1) and \u2018E\u2019 edges. Each edge connecting two nodes (\u2018X\u2019,\u2019Y\u2019) will have a weight denoting the distance between node \u2018X\u2019 and node \u2018Y\u2019.</h4>\n\n<h4 id=\"your-task-is-to-find-the-shortest-path-distance-from-the-source-node-which-is-the-node-labeled-as-0-to-all-vertices-given-in-the-graph\">Your task is to find the shortest path distance from the source node, which is the node labeled as 0, to all vertices given in the graph.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Input:\n4 5\n0 1 5\n0 2 8\n1 2 9\n1 3 2\n2 3 6\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-17-6325.jpg\" alt=\"alt text\"></p>\n\n<pre><code>In the given input, the number of vertices is 4, and the number of edges is 5.\n\nIn the input, following the number of vertices and edges, three numbers are given. The first number denotes node \u2018X\u2019, the second number denotes node \u2018Y\u2019 and the third number denotes the distance between node \u2018X\u2019 and \u2018Y\u2019.\n\nAs per the input, there is an edge between node 0 and node 1 and the distance between them is 5.\n\nThe vertices 0 and 2 have an edge between them and the distance between them is 8.\nThe vertices 1 and 2 have an edge between them and the distance between them is 9.\nThe vertices 1 and 3 have an edge between them and the distance between them is 2.\nThe vertices 2 and 3 have an edge between them and the distance between them is 6.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. There are no self-loops(an edge connecting the vertex to itself) in the given graph.\n\n2. There can be parallel edges i.e. two vertices can be directly connected by more than 1 edge.\n</code></pre>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line contains an Integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains two integers \u2018V\u2019 and \u2018E&#39;, denoting the number of vertices in the undirected graph and the number of edges in the undirected graph respectively.\n\nThe next \u2018E\u2019 lines contain three space-separated integers \u2018X\u2019, \u2018Y\u2019, and \u2018DISTANCE\u2019, denoting a node \u2018X\u2019, a node \u2018Y\u2019, and the distance between nodes \u2018X\u2019 and \u2018Y\u2019 respectively.\n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>For each test case, print a single line containing \u2018V\u2019 space-separated integers that denote the shortest distance for each node from 0 to \u2018V\u2019-1, considering that we need the shortest distance from source node 0.\n\nPrint the maximum positive integer value, i.e 2147483647, for the disconnected graph.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You are not required to print the output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= V &lt;= 1000\n1 &lt;= E &lt;= 3000\n0 &lt;= X, Y &lt; V\n1 &lt;= DISTANCE[X][Y] &lt;= 10^5\n\n\nTime limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample input 1</h4>\n\n<pre><code>2\n5 7\n0 1 7\n0 2 1\n0 3 2\n1 2 3\n1 3 5 \n1 4 1\n3 4 7\n4 5\n0 1 5\n0 2 8\n1 2 9\n1 3 2\n2 3 6\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample output 1</h4>\n\n<pre><code>0 4 1 2 5\n0 5 8 7\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1</h4>\n\n<pre><code>Test case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-15-6327.jpg\" alt=\"alt text\"></p>\n\n<pre><code>The source node is node 0.\n\nThe shortest distance from node 0 to node 0 is 0.\n\nThe shortest distance from node 0 to node 1 is 4. In the above figure, the green path represents this distance. The path goes from node 0-&gt;2-&gt;1, giving distance = 1+3=4.\n\nThe shortest distance from node 0 to node 2 is 1. In the above figure, the red path represents this distance. The path goes from node 0-&gt;2, giving distance = 1\n\nThe shortest distance from node 0 to node 3 is 2. In the above figure, the pink path represents this distance. The path goes from node 0-&gt;3, giving distance = 2.\n\nThe shortest distance from node 0 to node 4 is 5. In the above figure, the yellow path represents this distance. The path goes from node 0-&gt;2-&gt;1-&gt;4, giving distance = 1+3+1=5.\n\nTest case 2:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-16-6326.jpg\" alt=\"alt text\"></p>\n\n<pre><code>The source node is node 0.\n\nThe shortest distance from node 0 to node 0 is 0.\n\nThe shortest distance from node 0 to node 1 is 5. In the above figure, the green path represents this distance. The path goes from node 0-&gt;1, giving distance = 5.\n\nThe shortest distance from node 0 to node 2 is 8. In the above figure, the pink path represents this distance. The path goes from node 0-&gt;2, giving distance = 8.\n\nThe shortest distance from node 0 to node 3 is 7. In the above figure, the yellow path represents this distance. The path goes from node 0-&gt;1-&gt;3, giving distance = 7.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample input 2:</h4>\n\n<pre><code>2\n9 14\n0 1 4\n0 7 8\n1 2 8\n1 7 11\n2 3 7\n2 5 4\n2 8 2 \n3 4 9\n3 5 14\n4 5 10\n5 6 2\n6 7 1\n6 8 6 \n7  8 7\n5 7\n0 1 7\n0 2 3\n1 2 1\n1 3 2\n1 4 6\n2 3 4\n3 4 4 \n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample output 2:</h4>\n\n<pre><code>0 4 12 19 21 11 9 8 14\n0 4 3 6 10\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 142,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph with 'V' vertices (labeled 0 to V-1) and 'E' edges, where each edge connecting nodes 'X' and 'Y' has a weight representing the distance between them, find the shortest path distance from the source node (node 0) to all other vertices in the graph. Return 2147483647 (Integer.MAX_VALUE) for disconnected components.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= V <= 1000",
                    "1 <= E <= 3000",
                    "0 <= X, Y < V",
                    "1 <= DISTANCE[X][Y] <= 10^5",
                    "Time limit: 1 sec",
                    "There are no self-loops in the graph.",
                    "There can be parallel edges (multiple edges between the same pair of vertices)."
                ],
                "testcases": [
                    {
                        "input": "5 7\n0 1 7\n0 2 1\n0 3 2\n1 2 3\n1 3 5 \n1 4 1\n3 4 7",
                        "output": "0 4 1 2 5",
                        "explanation": "The shortest distances from node 0 to nodes 0, 1, 2, 3, and 4 are 0, 4, 1, 2, and 5 respectively. The shortest path from 0 to 1 is 0 -> 2 -> 1 (1+3=4). The shortest path from 0 to 2 is 0 -> 2 (1). The shortest path from 0 to 3 is 0 -> 3 (2). The shortest path from 0 to 4 is 0 -> 2 -> 1 -> 4 (1+3+1=5)."
                    },
                    {
                        "input": "4 5\n0 1 5\n0 2 8\n1 2 9\n1 3 2\n2 3 6",
                        "output": "0 5 8 7",
                        "explanation": "The shortest distances from node 0 to nodes 0, 1, 2, and 3 are 0, 5, 8, and 7 respectively. The shortest path from 0 to 1 is 0 -> 1 (5). The shortest path from 0 to 2 is 0 -> 2 (8). The shortest path from 0 to 3 is 0 -> 1 -> 3 (5+2=7)."
                    },
                    {
                        "input": "9 14\n0 1 4\n0 7 8\n1 2 8\n1 7 11\n2 3 7\n2 5 4\n2 8 2 \n3 4 9\n3 5 14\n4 5 10\n5 6 2\n6 7 1\n6 8 6 \n7  8 7",
                        "output": "0 4 12 19 21 11 9 8 14",
                        "explanation": null
                    },
                    {
                        "input": "5 7\n0 1 7\n0 2 3\n1 2 1\n1 3 2\n1 4 6\n2 3 4\n3 4 4",
                        "output": "0 4 3 6 10",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a solution using the Dijkstra algorithm?</p>",
            "<p>Can you use Min-Heap and Adjacency List to reduce the time complexity?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity: O(E*log(V))\r\n    Space complexity: O(V^2)\r\n\r\n    Where 'E' is the number of edges and 'V' is\r\n    the number of vertices in a graph.\r\n*/\r\n\r\nvector<int> dijkstraHelper(vector<vector<pair<int, int>>> &adjacencyList, int vertices, int source) {\r\n\r\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\r\n    vector<int> distance(vertices, INT_MAX);\r\n\r\n    // Push the source vertex in the priority queue.\r\n    pq.push({0, source});\r\n\r\n    // Distance of a vertex to itself is 0.\r\n    distance[source] = 0;\r\n    vector<bool> visited(vertices, false);\r\n\r\n    // Loop till all vertices are visited.\r\n    while (!pq.empty()) {\r\n        int u = pq.top().second;\r\n        pq.pop();\r\n        visited[u] = true;\r\n\r\n        // Update the distances of the adjacent nodes.\r\n        for (auto it = adjacencyList[u].begin(); it != adjacencyList[u].end(); it++) {\r\n            int v = it -> first;\r\n            int dist = it -> second;\r\n\r\n            if (visited[v] == false && distance[v] > distance[u] + dist) {\r\n                distance[v] = distance[u] + dist;\r\n                pq.push({distance[v], v});\r\n            }\r\n        }\r\n    }\r\n    return distance;\r\n}\r\nvector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {\r\n    \r\n    vector<vector<pair<int, int>>> adjacencyList(vertices);\r\n\r\n    // Create an adjacency list.\r\n    for (int i = 0; i < (int)vec.size(); i++) {\r\n        \r\n        adjacencyList[vec[i][0]].push_back({vec[i][1], vec[i][2]});\r\n        adjacencyList[vec[i][1]].push_back({vec[i][0], vec[i][2]});\r\n    }\r\n    return dijkstraHelper(adjacencyList, vertices, 0);\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time complexity: O(E*log(V))\r\n    Space complexity: O(V^2)\r\n\r\n    Where 'E' is the number of edges and 'V' is \r\n    the number of vertices in a graph.\r\n'''\r\n\r\nimport sys\r\nimport heapq\r\n\r\n\r\ndef dijkstraHelper(adjacencyList, vertices, source):\r\n    pq = []\r\n    distance = [2147483647 for i in range(vertices)]\r\n\r\n    # Push the source vertex in the priority queue.\r\n    pq.append([0, source])\r\n\r\n    # Distance of a vertex to itself is 0.\r\n    distance[source] = 0\r\n    visited = [False for i in range(vertices)]\r\n\r\n    # Loop till all vertices are visited.\r\n    while (len(pq) > 0):\r\n        pair = heapq.heappop(pq)\r\n        u = pair[1]\r\n        visited[u] = True\r\n\r\n        # Update the distances of the adjacent nodes.\r\n        for it in adjacencyList[u]:\r\n            v = it[0]\r\n            dist = it[1]\r\n\r\n            if (visited[v] == False and distance[v] > distance[u] + dist):\r\n                distance[v] = distance[u] + dist\r\n                heapq.heappush(pq, (distance[v], v))\r\n\r\n    return distance\r\n\r\n\r\ndef dijkstra(vec, vertices, edges, source):\r\n    adjacencyList = [[] for j in range(vertices)]\r\n    \r\n    # Create an adjacency list.\r\n    for i in range(len(vec)):\r\n        adjacencyList[vec[i][0]].append([vec[i][1], vec[i][2]])\r\n        adjacencyList[vec[i][1]].append([vec[i][0], vec[i][2]])\r\n\r\n    return dijkstraHelper(adjacencyList, vertices, 0)",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity: O(E*log(V))\r\n    Space complexity: O(V^2)\r\n\r\n    Where 'E' is the number of edges and 'V' is\r\n    the number of vertices in a graph.\r\n*/\r\n\r\nimport java.util.*;\r\nimport javafx.util.Pair;\r\n\r\npublic class Solution {\r\n    public static ArrayList < Integer > dijkstraHelper(ArrayList < ArrayList < Pair < Integer, Integer >>> adjacencyList, int vertices, int source) {\r\n        \r\n        PriorityQueue < Pair < Integer, Integer > > pq = new PriorityQueue < Pair < Integer, Integer >> (vertices, Comparator.comparing(Pair::getKey));\r\n        ArrayList < Integer > distance = new ArrayList < Integer > (vertices);\r\n        \r\n        for (int i = 0; i < vertices; i++) {\r\n            distance.add(Integer.MAX_VALUE);\r\n        }\r\n\r\n        // Push the source vertex in the priority queue.\r\n        pq.add(new Pair < Integer, Integer > (0, source));\r\n\r\n        // Distance of a vertex to itself is 0.\r\n        distance.set(source, 0);\r\n        ArrayList < Boolean > visited = new ArrayList < Boolean > (vertices);\r\n\r\n        for (int i = 0; i < vertices; i++) {\r\n            visited.add(false);\r\n        }\r\n\r\n        // Loop till all vertices are visited.\r\n        while (!pq.isEmpty()) {\r\n            int u = pq.peek().getValue();\r\n            pq.remove();\r\n            visited.set(u, true);\r\n\r\n            // Update the distances of the adjacent nodes.\r\n            for (int it = 0; it < adjacencyList.get(u).size(); it++) {\r\n                int v = adjacencyList.get(u).get(it).getKey();\r\n                int dist = adjacencyList.get(u).get(it).getValue();\r\n\r\n                if (visited.get(v) == false && distance.get(v) > distance.get(u) + dist) {\r\n                    distance.set(v, distance.get(u) + dist);\r\n                    pq.add(new Pair < Integer, Integer > (distance.get(v), v));\r\n                }\r\n            }\r\n        }\r\n\r\n        return distance;\r\n    }\r\n\r\n    public static ArrayList < Integer > dijkstra(ArrayList < ArrayList < Integer > > vec, int vertices, int edges, int source) {\r\n\r\n      ArrayList < ArrayList < Pair < Integer, Integer > > > adjacencyList = new ArrayList < ArrayList < Pair < Integer, Integer >>> (vertices);\r\n      \r\n      for (int i = 0; i < vertices; i++) {\r\n          adjacencyList.add(new ArrayList < Pair < Integer, Integer >> ());\r\n      }\r\n\r\n      // Create an adjacency list.\r\n      for (int i = 0; i < (int) vec.size(); i++) {\r\n          adjacencyList.get(vec.get(i).get(0)).add(new Pair < Integer, Integer > (vec.get(i).get(1), vec.get(i).get(2)));\r\n          adjacencyList.get(vec.get(i).get(1)).add(new Pair < Integer, Integer > (vec.get(i).get(0), vec.get(i).get(2)));\r\n      }\r\n\r\n      return dijkstraHelper(adjacencyList, vertices, 0);\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}