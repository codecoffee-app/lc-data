{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10168,
            "title": "DistanceGreaterthanK",
            "titleSlug": "distancegreaterthank_1170756",
            "content": "<h4 id=\"you-are-given-an-undirected-graph-a-source-vertex-and-an-integer-k-check-if-there-is-any-simple-path-without-any-cycle-from-source-to-any-vertex-such-that-its-distance-is-greater-than-k\">You are given an undirected graph, a source vertex, and an integer k. Check if there is any simple path(without any cycle) from source to any vertex such that its distance is greater than &#39;k&#39;.</h4>\n\n<h4 id=\"path-in-a-graph-is-a-finite-or-infinite-sequence-of-edges-that-joins-a-sequence-of-vertices-that-are-all-distinct\">Path in a graph is a finite or infinite sequence of edges that joins a sequence of vertices that are all distinct.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains four integers &#39;n&#39;, &#39;m&#39;, &#39;s&#39;, and &#39;k&#39; where &#39;n&#39; is the number of vertices, &#39;m&#39; is the no of edges, and &#39;s&#39; is the source vertex.\n\nThe next &#39;m&#39; lines describe the edge. Each edge is characterized by three integers a, b, and c where a and b denote the endpoints of the edge and c the length of the edge.\n\n The edges[i][0] ,edges[i][1] contains the vertex that is connected to the edge. The edges[i][2] contains the length of edge for all 0&lt;i&lt;m.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Return true if there is any such path otherwise false.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Graph does not contain self-loops.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10\n1 &lt;= &#39;m&#39; &lt;= min(n*(n-1))/2,100)\n0 &lt;= &#39;a&#39;, &#39;b&#39;, &#39;s&#39; &lt;= n-1\n1 &lt;= ci, k &lt;= 1000000\nFor all 1 &lt;= i &lt;= m\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>6 6 0 23\n0 1 5\n1 2 4\n2 3 5\n3 4 5\n4 5 5\n0 5 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>true\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>The graph will be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image1-7988.png\" alt=\"\"></p>\n\n<pre><code>One of the longer paths from 0 to 5 will be from the vertex 0-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5.\n\nAdding the edge weights, we get 5+4+5+5+5=24 which is greater than 23. Hence we return true.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>4 3 1 25\n0 1 1\n0 2 2\n2 3 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>false\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph represented by a list of edges, a source vertex 's', and an integer 'k', determine if there exists a simple path (without cycles) starting from 's' to any other vertex in the graph such that the total distance (sum of edge weights) of that path is strictly greater than 'k'.",
                "constraints": [
                    "1 <= 'n' <= 10",
                    "1 <= 'm' <= min(n*(n-1))/2, 100)",
                    "0 <= 'a', 'b', 's' <= n-1",
                    "1 <= ci, k <= 1000000  For all 1 <= i <= m",
                    "Graph does not contain self-loops."
                ],
                "testcases": [
                    {
                        "input": "n = 6, m = 6, s = 0, k = 23, edges = [[0, 1, 5], [1, 2, 4], [2, 3, 5], [3, 4, 5], [4, 5, 5], [0, 5, 1]]",
                        "output": "true",
                        "explanation": "The graph contains a path 0 -> 1 -> 2 -> 3 -> 4 -> 5 with a total distance of 5 + 4 + 5 + 5 + 5 = 24, which is greater than 23."
                    },
                    {
                        "input": "n = 4, m = 3, s = 1, k = 25, edges = [[0, 1, 1], [0, 2, 2], [2, 3, 3]]",
                        "output": "false",
                        "explanation": "From vertex 1, we can only reach vertex 0 with a distance of 1.  From vertex 0, we can either go back to 1 (not a simple path) or go to 2 with distance 2.  From vertex 2, we can go to 3 with distance 3. The path 1 -> 0 -> 2 -> 3 has a total distance of 1 + 2 + 3 = 6 which is not greater than 25. There is no other path exceeding 25."
                    },
                    {
                        "input": "n = 3, m = 2, s = 0, k = 5, edges = [[0, 1, 2], [1, 2, 1]]",
                        "output": "false",
                        "explanation": "The possible paths from 0 are: 0 -> 1 (distance 2) and 0 -> 1 -> 2 (distance 2 + 1 = 3). Neither path's distance exceeds 5."
                    },
                    {
                        "input": "n = 2, m = 1, s = 0, k = 1, edges = [[0, 1, 1]]",
                        "output": "false",
                        "explanation": "The path 0 -> 1 has distance 1 which is not greater than k=1."
                    },
                    {
                        "input": "n = 7, m = 7, s = 0, k = 10, edges = [[0, 1, 1], [1, 2, 2], [2, 3, 3], [3, 4, 4], [0, 5, 1], [5, 6, 1], [6, 4, 1]]",
                        "output": "true",
                        "explanation": "The path 0->1->2->3->4 has distance 1+2+3+4 = 10. We need strictly greater than 10. We can get 0 -> 5 -> 6 -> 4 with distance 1+1+1 = 3. Thus 0->1->2->3->4 is no good. However the prompt says to search to *any* other vertex. Since there is a vertex (4) we can reach with distance exactly 10 from 0, consider going through the 5, 6 path: 0->5->6->4 has a length of 3. This gives us the path 0->1->2->3->4, which is a path of length 10. No other node can be reached by a longer path. Therefore, the output is false. Note: We have to check if the distance to any other vertex can exceed K"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use backtracking from the source vertex to find all the paths.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}