{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12995,
            "title": "Distinct Characters",
            "titleSlug": "distinct-characters_1536137",
            "content": "<h4 id=\"given-a-string-str-you-need-to-return-all-the-possible-non-empty-subsequences-with-distinct-characters-you-can-return-the-strings-in-any-order\">Given a string \u201cSTR\u201d, you need to return all the possible non-empty subsequences with distinct characters. You can return the strings in any order.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>If the same string can be generated multiple times, return them multiple times. \n</code></pre>\n\n<h4 id=\"a-subsequence-is-a-sequence-that-can-be-derived-from-another-sequence-by-deleting-some-or-no-elements-without-changing-the-order-of-the-remaining-elements\">A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.</h4>\n\n<h4 id=\"for-eg-let-the-input-string-be-cbc-then-all-the-subsequences-with-distinct-characters-will-be-c-bc-c-cb-b\">For eg. Let the input string be &#39;cbc&#39;. Then all the subsequences with distinct characters will be  - [&#39;c&#39;, &#39;bc&#39;, &#39;c&#39;, &#39;cb&#39;, &#39;b&#39;].</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first and the only line of each test case contains the string &#39;STR&#39;.   \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print all the substrings with distinct characters.\n\nOutput for each test case will be printed in a new line. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given functions.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= |STR| &lt;= 15\n\nWhere |STR| denotes the length of \u201cSTR\u201d\n\nString \u201cSTR\u201d will only consist of lowercase English Alphabets.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\naba\nxyz\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>a\na\nab\nb\nba\nx\nxy\nxyz\nxz\ny\nyz\nz\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h4>\n\n<pre><code>In the first case, \nThe only valid sequences of length one are \u201ca\u201d -&gt; 2 times, \u201cb\u201d -&gt; 1 time. For length two, \u201cab\u201d and \u201cba\u201d both occur only once. There is no valid sequence possible for length three as the only subsequence of length three is \u201caba\u201d which is not valid. Hence, the answer is the list of all 5 subsequences created.\n\nIn the second case, \nThe only valid sequences of length one are \u201cx\u201d, \u201cy\u201d and \u201cz\u201d. For length two, \u201cxy\u201d, \u201cxz\u201d and \u201cyz\u201d are valid. For length three \u201cxyz\u201d is valid. Note that repetition is not possible in this case as there are no characters that occur multiple times. Hence, the answer is the list of all 7 subsequences created.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nabca\nzzz\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>a\na\nab\nabc\nac\nb\nba\nbc\nbca\nc\nca\nz\nz\nz\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'STR', generate and return all non-empty subsequences that contain only distinct characters. The order of subsequences in the output doesn't matter.  Subsequences can be generated multiple times if possible.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= |STR| <= 15",
                    "String 'STR' will only consist of lowercase English Alphabets."
                ],
                "testcases": [
                    {
                        "input": "str = aba",
                        "output": "a\na\nab\nb\nba",
                        "explanation": "Valid subsequences are 'a' (appears twice), 'b', 'ab', and 'ba'. 'aba' is invalid because 'a' appears more than once."
                    },
                    {
                        "input": "str = xyz",
                        "output": "x\nxy\nxyz\nxz\ny\nyz\nz",
                        "explanation": "All possible subsequences are valid since the input string contains only distinct characters."
                    },
                    {
                        "input": "str = abca",
                        "output": "a\na\nab\nabc\nac\nb\nba\nbc\nbca\nc\nca",
                        "explanation": "Valid subsequences are 'a' (appears twice), 'b', 'c', 'ab', 'ac', 'bc', 'ba', 'ca', 'abc', 'bca'. 'abca' is invalid."
                    },
                    {
                        "input": "str = zzz",
                        "output": "z\nz\nz",
                        "explanation": "Only the subsequence 'z' is valid, and it can be generated 3 times."
                    },
                    {
                        "input": "str = abcd",
                        "output": "a\nab\nabc\nabcd\nabd\nac\nacd\nad\nb\nbc\nbcd\nbd\nc\ncd\nd",
                        "explanation": "All possible subsequences with any characters are valid."
                    },
                    {
                        "input": "str = aabbcc",
                        "output": "a\na\nab\nab\nabc\nabc\nac\nac\nb\nb\nbc\nbc\nc\nc",
                        "explanation": "All subsequences of length 1: 'a', 'b', 'c' with respective duplicate possibilities and all subsequences of length 2 with respect to duplicate and all subsequences of length 3 similarly"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Do the constraints allow us to generate all subsequences of the string?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}