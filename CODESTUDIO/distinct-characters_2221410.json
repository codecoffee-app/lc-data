{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14688,
            "title": "Distinct Characters",
            "titleSlug": "distinct-characters_2221410",
            "content": "<h4 id=\"you-are-given-a-string-str-and-an-integer-k-your-task-is-to-find-the-length-of-the-largest-substring-with-at-most-k-distinct-characters\">You are given a string &#39;str&#39; and an integer \u2018K\u2019. Your task is to find the length of the largest substring with at most \u2018K\u2019 distinct characters.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>You are given \u2018str\u2019 = \u2018abbbbbbc\u2019 and \u2018K\u2019 = 2, then the substrings that can be formed are [\u2018abbbbbb\u2019, \u2018bbbbbbc\u2019]. Hence the answer is 7.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains the integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains one integer, \u2018K\u2019, representing the maximum number of unique characters allowed in the string.\n\nThe second line of each test case contains a single string \u2018str\u2019 representing the given string.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer representing the length of largest substring that can be formed with at most \u2018K\u2019 unique characters.\n\nPrint a separate line for each test case.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= K &lt;= 26\n1 &lt;= |str| &lt;= 10^6\n\nThe string str will contain only lowercase alphabets.    \n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\nabbbbbbc\n3\nabcddefg\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>7\n4\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For the first test case, \u2018str\u2019 = \u2018abbbbbbc\u2019 and \u2018K\u2019 = 2, then the substrings that can be formed are [\u2018abbbbbb\u2019, \u2018bbbbbbc\u2019]. Hence the answer is 7.\n\nFor the second test case, \u2018str\u2019 = \u2018abcddefg\u2019 and \u2018K\u2019 = 3, then the substrings that can be formed is [\u2018cdde\u2019, \u2018ddef\u2019]. Hence the answer is 4.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3\naaaaaaaa\n1\nabcefg\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>8   \n1   \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"hints\">Hints:</h5>\n\n<pre><code>1. Try to think of a brute force approach.\n2. Try to think of a two-pointer solution.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 125,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'str' and an integer 'K', find the length of the longest substring in 'str' that contains at most 'K' distinct characters.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= K <= 26",
                    "1 <= |str| <= 10^6",
                    "The string 'str' will contain only lowercase alphabets.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n2\nabbbbbbc\n3\nabcddefg",
                        "output": "7\n4",
                        "explanation": "In the first test case, with str = 'abbbbbbc' and K = 2, the longest substrings with at most 2 distinct characters are 'abbbbbb' and 'bbbbbbc', both of length 7. In the second test case, with str = 'abcddefg' and K = 3, the longest substring with at most 3 distinct characters is 'cdd', 'dde' or 'def' which is of length 3. However, 'cdde' , 'ddef' is not the longest because, 'abcd' is 4. The longest substring with at most 3 unique characters can be of length 4, 'abcd'."
                    },
                    {
                        "input": "2\n3\naaaaaaaa\n1\nabcefg",
                        "output": "8\n1",
                        "explanation": "In the first test case, with str = 'aaaaaaaa' and K = 3, any substring will have at most 3 distinct characters as there is only 1 ('a'). the whole string itself is of length 8. In the second test case, with str = 'abcefg' and K = 1, each individual character is a substring of length 1. Hence, the maximum is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1)\r\n\r\n    Where N is the length of the string\r\n*/\r\n\r\n#include <unordered_map>\r\n\r\nint kDistinctChars(int k, string &str)\r\n{\r\n    // Initialise left and right pointers\r\n    int left = 0;\r\n    int right = 0;\r\n\r\n    int maxLength = 0;\r\n\r\n    // Initialise map of characters\r\n    unordered_map<char, int> uniqueChars;\r\n\r\n    // While the right pointers does not reach the end of the loop\r\n    while(right < str.length())\r\n    {\r\n        // Add the right most character of the string in the  map\r\n        char rightCh = str[right];\r\n\r\n        uniqueChars[rightCh] = uniqueChars[rightCh] + 1;  \r\n        \r\n        // If the set has move than k unique characters then start decreasing the window from left\r\n        while(uniqueChars.size() > k)\r\n        {\r\n            char leftCh = str[left];\r\n\r\n            // If leftCh is present in map decrease it\r\n            if(uniqueChars.count(leftCh) == 1)\r\n            {\r\n                uniqueChars[leftCh] -= 1;\r\n\r\n                // Remove the character from the map if it becomes 0\r\n                if(uniqueChars[leftCh] == 0)\r\n                {\r\n                    uniqueChars.erase(leftCh);\r\n                }\r\n            }\r\n\r\n            // Decrease the sliding window from left side\r\n            left += 1;\r\n        }\r\n\r\n        maxLength = max(maxLength, right - left + 1);\r\n\r\n        // Increase the sliding window from the right\r\n        right += 1;\r\n    }\r\n\r\n    return maxLength;\r\n}\r\n\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    Where N is the length of the string\n'''\n\ndef kDistinctChars(k, str):\n\n    # Initialise left and right pointers\n    left = 0\n    right = 0\n\n    maxLength = 0\n\n    # Initialise map of characters\n    uniqueChars = {}\n\n\n    # While the right pointers does not reach the end of the loop\n    while(right < len(str)):\n\n        # Add the right most character of the string in the  map\n        rightCh = str[right]\n        uniqueChars[rightCh] = uniqueChars[rightCh] + 1 if rightCh in uniqueChars else 1\n\n        # If the set has move than k unique characters then start decreasing the window from left\n        while(len(uniqueChars) > k):\n\n            leftCh = str[left]\n\n            # If leftCh is present in map decrease it\n            if(leftCh in uniqueChars):\n                uniqueChars[leftCh] -= 1\n\n                # Remove the character from the map if it becomes 0\n                if(uniqueChars[leftCh] == 0):\n                    uniqueChars.pop(leftCh)\n\n            # Decrease the sliding window from left side\n            left += 1\n\n        maxLength = max(maxLength, right - left + 1)\n\n        # Increase the sliding window from the right\n        right += 1\n\n    return maxLength\n\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "\n\n\n/*\n\tTime Complexity: O(N)\n\tSpace Complexity: O(1)\n\t\n\tWhere N is the length of the string\n*/\nimport java.util.HashMap;\n\npublic class Solution {\n\n\tpublic static int kDistinctChars(int k, String str) {\n\n\t\t// Initialise left and right pointers\n\t\tint left = 0;\n\t\tint right = 0;\n\n\t\tint maxLength = 0;\n\n\t\t// Initialise map of characters\n\t\tHashMap<Character, Integer> uniqueChars = new HashMap<>();\n\n\t\t// While the right pointers does not reach the end of the loop\n\t\twhile (right < str.length()) {\n\t\t\t\n\t\t\t// Add the right most character of the string in the map\n\t\t\tchar rightCh = str.charAt(right);\n\n\t\t\tif (uniqueChars.containsKey(rightCh)) {\n\t\t\t\tuniqueChars.put(rightCh, uniqueChars.get(rightCh) + 1);\n\t\t\t} else {\n\t\t\t\tuniqueChars.put(rightCh, 1);\n\t\t\t}\n\n\t\t\t// If the set has move than k unique characters then start decreasing the window\n\t\t\t// from left\n\t\t\twhile (uniqueChars.size() > k) {\n\t\t\t\tchar leftCh = str.charAt(left);\n\n\t\t\t\t// If leftCh is present in map decrease it\n\t\t\t\tif (uniqueChars.containsKey(leftCh)) {\n\t\t\t\t\tuniqueChars.put(leftCh, uniqueChars.get(leftCh) - 1);\n\n\t\t\t\t\t// Remove the character from the map if it becomes 0\n\t\t\t\t\tif (uniqueChars.get(leftCh) == 0) {\n\t\t\t\t\t\tuniqueChars.remove(leftCh);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Decrease the sliding window from left side\n\t\t\t\tleft += 1;\n\t\t\t}\n\n\t\t\tmaxLength = Math.max(maxLength, right - left + 1);\n\n\t\t\t// Increase the sliding window from the right\n\t\t\tright += 1;\n\t\t}\n\n\t\treturn maxLength;\n\t}\n\n}\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}