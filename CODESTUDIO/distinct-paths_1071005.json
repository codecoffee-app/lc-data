{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9644,
            "title": "Distinct Paths",
            "titleSlug": "distinct-paths_1071005",
            "content": "<h4 id=\"you-are-given-a-binary-matrix-a-of-dimensions-n-m-you-are-standing-at-the-top-left-corner-of-the-matrix-and-want-to-reach-the-bottom-right-corner-of-the-matrix-you-are-only-allowed-to-move-rightwards-or-downwards-if-the-value-of-any-cell-is-1-then-you-cannot-move-to-this-cell-or-in-other-words-the-move-to-this-cell-is-forbidden-whereas-if-the-cell-value-is-0-then-you-can-freely-move-to-this-cell-or-in-other-words-the-move-to-this-cell-is-permissible\">You are given a Binary Matrix A of dimensions N*M. You are standing at the top left corner of the matrix and want to reach the bottom right corner of the matrix. You are only allowed to move rightwards or downwards. If the value of any cell is \u20181\u2019, then you cannot move to this cell(or in other words the move to this cell is forbidden), whereas if the cell value is \u20180\u2019, then you can freely move to this cell(or in other words the move to this cell is permissible).</h4>\n\n<h4 id=\"you-have-to-count-the-number-of-ways-to-reach-the-bottom-right-corner-of-the-matrix-as-the-number-of-ways-can-be-large-in-some-cases-hence-find-it-modulo-10-9-7\">You have to count the number of ways to reach the bottom right corner of the matrix. As the number of ways can be large in some cases, hence find it modulo 10^9+7.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1. It is impossible to move outside the matrix.\n2. The starting point which is the top left corner of the matrix and the destination point which is the bottom right corner of the matrix is always empty, ie  A[1][1] = A[N][M] = 0 (taking 1 based indexing).\n3. By rightwards move it means you can go to A[x][y+1] from some cell A[x][y], if A[x][y+1] exists and moving to A[x][y+1] is not forbidden.\n4. By downwards move it means you can go to A[x+1][y] from some cell A[x][y], if A[x+1][y] exists and moving to A[x+1][y] is not forbidden.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer T, denoting the number of test cases.\n\nThe first line of each test case consists of two space-separated integers N and M denoting the number of rows and number of columns of the Binary Matrix A respectively.\n\nThe following N lines contain M space-separated booleans ( 0\u2019s or 1\u2019s) denoting the permissible and forbidden positions respectively, as described in the problem statement.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the number of ways to go from the top left corner to the bottom right corner of the given matrix.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t have to print anything, it has already been taken care of. Just Implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N, M &lt;= 1000\n0 &lt;= A[i][j] &lt;= 1, for each cell position (i, j)\n\nThe summation of N*M for all test cases won\u2019t exceed 10^6.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n2 2\n0 0\n0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>There are 2 possible paths to go from (1,1) to (N, M) which is (2,2).\nie. {(1, 1), (1, 2), (2, 2)} and {(1, 1), (2, 1), (2, 2)}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n2 3\n0 0 1\n0 0 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2 :</h5>\n\n<pre><code>There are 2 possible paths to go from (1, 1) to (N, M) which is (2, 3).\nie. {(1, 1), (1, 2), (2, 2), (2, 3)} and {(1, 1), (2, 1), (2, 2), (2, 3)}.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary matrix A of dimensions N x M, find the number of ways to reach the bottom-right corner (N, M) from the top-left corner (1, 1). You can only move rightwards or downwards. A cell with a value of '1' is forbidden, while a cell with a value of '0' is permissible. The starting and ending cells are always '0'. Calculate the number of paths modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N, M <= 1000",
                    "0 <= A[i][j] <= 1",
                    "The summation of N*M for all test cases won\u2019t exceed 10^6.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2 2\n0 0\n0 0",
                        "output": "2",
                        "explanation": "There are 2 possible paths to go from (1,1) to (2,2):\n1. (1, 1), (1, 2), (2, 2)\n2. (1, 1), (2, 1), (2, 2)"
                    },
                    {
                        "input": "2 3\n0 0 1\n0 0 0",
                        "output": "2",
                        "explanation": "There are 2 possible paths to go from (1, 1) to (2, 3):\n1. (1, 1), (1, 2), (2, 2), (2, 3)\n2. (1, 1), (2, 1), (2, 2), (2, 3)"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try all possible paths and increment the counter after reaching the bottom right corner of the matrix.</p>",
            "<p>Store the number of ways to reach the destination cell, from each cell (i, j).</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}