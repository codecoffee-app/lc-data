{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10838,
            "title": "Distributing Coins",
            "titleSlug": "distributing-coins_1266092",
            "content": "<h4 id=\"you-are-given-the-root-of-a-binary-tree-with-n-nodes-where-each-node-in-the-tree-has-some-coins-and-there-are-n-coins-total-in-one-move-we-may-choose-two-adjacent-nodes-and-move-one-coin-from-one-node-to-another\">You are given the \u2018ROOT\u2019 of a binary tree with \u2018N\u2019 nodes where each node in the tree has some coins, and there are \u2018N\u2019 coins total. In one move, we may choose two adjacent nodes and move one coin from one node to another.</h4>\n\n<h4 id=\"your-task-is-to-return-the-number-of-moves-required-to-make-every-node-have-exactly-one-coin\">Your task is to return the number of moves required to make every node have exactly one coin.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>A move may be from parent to child or from child to parent.\n</code></pre>\n\n<h4 id=\"for-example\">For example,</h4>\n\n<pre><code>Given \u2018ROOT\u2019 = [2,-1,0,-1,-1]\n\nThe tree would look like this : \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bt1-8628.png\" alt=\"\"></p>\n\n<pre><code>The answer would be 1, because the root node will transfer 1 coin to its right child. Thus both nodes have the same number of coins now.\n</code></pre>\n\n<h4 id=\"input-format\">Input format :</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nIn the next T lines, the first line contains each test case contains space-separated integers denoting the nodes of the first binary tree, where -1 indicates that the NULL pointer has been appointed to the previous node. \n\nThe input is given in a preorder way, that is, the node then left subtree, and then right subtree as shown in the example.\n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the number of coins moved.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T  &lt;= 100\n1 &lt;=  N &lt;= 10^5\n-10^6 &lt;= DATA &lt;= 10^6\n\nWhere \u2018T\u2019 is the number of test cases and  \u2018N\u2019 denotes the number of nodes in the binary tree, and \u2018DATA\u2019 represents the value of the node.   \n\nTime limit: 1 sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n2 -1 0 -1 -1 \n2 0 2 -1 -1 -1 0 -1 -1 \n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>1\n2 \n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>For the first test case:\nThe tree would look like this :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bt1-8628.png\" alt=\"\"></p>\n\n<pre><code>The answer would be 1 because the root node will transfer 1 coin to its right child. Thus both nodes have the same number of coins now.\n\n\nFor the second test case:\nThe tree would look like this :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bt2-8629.png\" alt=\"\"></p>\n\n<pre><code>Therefore the root node will transfer 1 coin to its right child and the leaf node will transfer 1 coin to its parent node, hence each node will have 1 coin, and the total moves made will be 2.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n3 0 -1 -1 0 -1 -1\n1 0 3 -1 -1 -1 0 -1 -1\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>2\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with 'N' nodes, where each node has some coins and the total number of coins is 'N'.  A move involves transferring one coin between two adjacent nodes (parent to child or child to parent). Determine the minimum number of moves required to ensure each node has exactly one coin.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^5",
                    "-10^6 <= DATA <= 10^6",
                    "T is the number of test cases.",
                    "N is the number of nodes in the binary tree.",
                    "DATA represents the value of the node."
                ],
                "testcases": [
                    {
                        "input": "2 -1 0 -1 -1",
                        "output": "1",
                        "explanation": "The root node transfers 1 coin to its right child to balance the coins."
                    },
                    {
                        "input": "2 0 2 -1 -1 -1 0 -1 -1",
                        "output": "2",
                        "explanation": "The root transfers a coin to its right child, and the right leaf transfers a coin to its parent to achieve equilibrium. This makes the total moves to 2."
                    },
                    {
                        "input": "3 0 -1 -1 0 -1 -1",
                        "output": "2",
                        "explanation": "null"
                    },
                    {
                        "input": "1 0 3 -1 -1 -1 0 -1 -1",
                        "output": "4",
                        "explanation": "null"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you find out the deficit or excess for each subtree?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}