{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12588,
            "title": "Divide Chocolates",
            "titleSlug": "divide-chocolates_1466966",
            "content": "<h4 id=\"ninja-bought-chocolate-consisting-of-some-chunks-the-sweetness-of-each-chunk-is-given-in-an-array-arr-ninja-has-k-friends-and-he-wishes-to-divide-the-chocolate-into-k-1-cut-with-some-consecutive-chunks-he-wants-to-divide-the-chocolate-into-chunks-under-the-condition-that-he-will-take-the-piece-that-has-the-minimum-total-sweetness\">Ninja bought chocolate consisting of some chunks. The sweetness of each chunk is given in an array \u2018ARR\u2019. Ninja has \u2018K\u2019 friends, and he wishes to divide the chocolate into &#39;K&#39; + 1 cut with some consecutive chunks. He wants to divide the chocolate into chunks under the condition that he will take the piece that has the minimum total sweetness.</h4>\n\n<h4 id=\"he-is-very-busy-doing-other-stuff-can-you-help-him-to-maximize-the-total-sweetness-of-the-part-that-you-will-get-under-the-given-condition\">He is very busy doing other stuff. Can you help him to maximize the total sweetness of the part that you will get under the given condition?</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019 and \u2018K\u2019, denoting the size of array \u2018ARR\u2019 and the number of friends Ninja has.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the elements of the array \u2018ARR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the maximum sweetness that Ninja can get under the given condition.\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1&lt;= T &lt;= 10\n1 &lt;= N &lt;= 50000\n0 &lt;= K &lt; N\n1 &lt;= ARR[i] &lt;= 10000\n\nWhere &#39;ARR[i]&#39; is the sweetness of the \u2018i_th&#39; chunk.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n9 3\n5 6 7 8 9 10 11 12 13\n3 2\n2 2 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>17\n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>In the first test case, the sweetness of the chunks are [5, 6, 7, 8, 9, 10, 11, 12, 13] and Ninja has 3 friends. So, it is to be divided among 4 people including Ninja himself. In order to maximize the total sweetness of Ninja, one possible division is [5, 6, 7], [8, 9], [10, 11], [12, 13]. The minimum sweetness of one part is 17. So, the answer is 17.\n\nIn the second test case, the sweetness of the chunks are [2, 2, 2] and Ninja has 2 friends. So, it is to be divided among 3 people, and there are only 3 chunks. So, all three friends will be getting one chunk each. So, the total sweetness that Ninja will get is 2. So, the answer is 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 2\n5 6 7\n10 4\n2 3 2 3 2 3 2 3 2 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5\n5\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 12,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'ARR' representing the sweetness of chocolate chunks, and an integer 'K' representing the number of Ninja's friends, divide the chocolate into 'K' + 1 consecutive parts. Ninja gets the piece with the minimum total sweetness.  Maximize the sweetness Ninja gets.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 50000",
                    "0 <= K < N",
                    "1 <= ARR[i] <= 10000"
                ],
                "testcases": [
                    {
                        "input": "arr=[5, 6, 7, 8, 9, 10, 11, 12, 13], k=3",
                        "output": "17",
                        "explanation": "The array is [5, 6, 7, 8, 9, 10, 11, 12, 13] and k = 3.  One possible division is [5, 6, 7], [8, 9], [10, 11], [12, 13]. The minimum sweetness among the divided parts is 17."
                    },
                    {
                        "input": "arr=[2, 2, 2], k=2",
                        "output": "2",
                        "explanation": "The array is [2, 2, 2] and k = 2.  The array is divided into [2], [2], [2].  The minimum sweetness among the divided parts is 2."
                    },
                    {
                        "input": "arr=[5, 6, 7], k=2",
                        "output": "5",
                        "explanation": "The array is [5, 6, 7] and k = 2. Possible divisions are [5], [6], [7] and the minimum sweetness is 5."
                    },
                    {
                        "input": "arr=[2, 3, 2, 3, 2, 3, 2, 3, 2, 3], k=4",
                        "output": "5",
                        "explanation": "The array is [2, 3, 2, 3, 2, 3, 2, 3, 2, 3] and k = 4. One optimal split is [2,3], [2,3], [2,3], [2,3,2,3] resulting in minimum 5."
                    },
                    {
                        "input": "arr=[1, 2, 3, 4, 5], k=0",
                        "output": "15",
                        "explanation": "The array is [1, 2, 3, 4, 5] and k = 0. There is only 1 person(Ninja) so the entire chocolate will given to him. So the ans will be sum of whole array 1 + 2 + 3 + 4 + 5 = 15."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Iterate through every possible value of sweetness that you can have? Try to ignore the subproblems using DP.</p>",
            "<p>Think about a range in which maximum sweetness can lie.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}