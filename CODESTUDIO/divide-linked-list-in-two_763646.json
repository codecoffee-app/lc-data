{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7777,
            "title": "Divide linked list in two",
            "titleSlug": "divide-linked-list-in-two_763646",
            "content": "<h4 id=\"you-have-been-given-a-singly-linked-list-of-integers-your-task-is-to-divide-this-list-into-two-smaller-singly-linked-lists-in-which-the-nodes-appear-in-alternating-fashion-from-the-original-list\">You have been given a singly Linked List of integers. Your task is to divide this list into two smaller singly-linked lists in which the nodes appear in alternating fashion from the original list.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>If the given linked list is 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL\n\nThe first sub-list is 1 -&gt; 3 -&gt; 5 -&gt; NULL.\nThe second sub-list is 2 -&gt; 4 -&gt; NULL.\n</code></pre>\n\n<h4 id=\"if-it-is-impossible-to-make-any-of-the-two-smaller-sub-lists-return-an-empty-list-i-e-null\">If it is impossible to make any of the two smaller sub-lists, return an empty list i.e. NULL.</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases or queries to be processed. Then the test case follows.\n\nThe only line of each test case contains the elements of the singly linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print two lines representing the first and second linked lists respectively. The elements of each linked list must be separated by a single space and terminated by -1.\n\nPrint output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of.  just implement the function and return the answer.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n0 &lt;= LEN &lt;= 5*10^3\n1 &lt;= data &lt;= 10^9\n\nWhere LEN is the number of nodes in the Linked List.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1 2 3 4 5 -1\n1 2 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 3 5 -1\n2 4 -1\n1 -1\n2 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For the first test case, we have 1, 3, 5 in the first and 2, 4 in the second linked list.\n\nFor the second test case, we have 1 in the first and 2 in the second linked list.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 2 3 -1\n1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 3 -1\n2 -1\n1 -1\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 12,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list of integers, divide it into two smaller singly-linked lists where nodes appear in alternating fashion from the original list. The first sub-list will contain nodes at odd positions in the original list, and the second sub-list will contain nodes at even positions. If it is impossible to create either of the sub-lists (e.g., the input list is empty), return an empty list (NULL).",
                "constraints": [
                    "1 <= T <= 10^2",
                    "0 <= LEN <= 5*10^3",
                    "1 <= data <= 10^9",
                    "Where LEN is the number of nodes in the Linked List.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 5 -1",
                        "output": "1 3 5 -1\n2 4 -1",
                        "explanation": "The first sub-list contains elements at odd indices: 1, 3, and 5. The second sub-list contains elements at even indices: 2 and 4."
                    },
                    {
                        "input": "1 2 -1",
                        "output": "1 -1\n2 -1",
                        "explanation": "The first sub-list contains the element at the odd index: 1. The second sub-list contains the element at the even index: 2."
                    },
                    {
                        "input": "1 2 3 -1",
                        "output": "1 3 -1\n2 -1",
                        "explanation": "The first sub-list contains elements at odd indices: 1 and 3. The second sub-list contains the element at the even index: 2."
                    },
                    {
                        "input": "1 -1",
                        "output": "1 -1\n-1",
                        "explanation": "The first sub-list contains the element at the odd index: 1. The second sub-list is empty as there are no even positions."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Append alternatively at the end of each linked list.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}