{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13607,
            "title": "Doctor Ninja's House",
            "titleSlug": "doctor-ninja-s-house_1755632",
            "content": "<h4 id=\"there-are-n-cities-and-m-paths-connecting-them-doctor-ninja-wants-to-purchase-a-house-in-a-city-x-such-that-she-can-reach-any-city-from-the-city-x\">There are \u2018N\u2019 cities and \u2018M\u2019 paths connecting them. Doctor Ninja wants to purchase a house in a city \u2018X\u2019 such that she can reach any city from the city \u2018X\u2019.</h4>\n\n<h4 id=\"your-task-is-to-help-ninja-to-find-her-a-house-x-if-you-are-given-with-n-cities-and-m-paths\">Your task is to help Ninja to find her a house \u2018X\u2019, if you are given with \u2018N\u2019 cities and \u2018M\u2019 paths.</h4>\n\n<h4 id=\"there-can-be-more-than-one-house-x-possible-you-need-to-output-the-house-x-with-minimum-value-if-you-are-unable-to-find-any-such-house-x-then-return-1\">There can be more than one house \u2018X\u2019 possible. You need to output the house \u2018X\u2019 with minimum value. If you are unable to find any such house \u2018X\u2019, then return -1.</h4>\n\n<h4 id=\"a-mother-vertex-in-a-graph-g-v-e-is-a-vertex-v-such-that-all-other-vertices-in-g-can-be-reached-by-a-path-from-v\">A mother vertex in a graph G = (V, E) is a vertex v such that all other vertices in G can be reached by a path from v.</h4>\n\n<pre><code>Example:\nConsider the following Graph: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-11083.png\" alt=\"\"></p>\n\n<pre><code>Vertices reachable from vertex 0:\n0 -&gt; 1 -&gt; 3 -&gt; 2 -&gt; 4 -&gt; 5 -&gt; 7 -&gt; 6\n\nVertices reachable from vertex 1:\n1 -&gt; 3 -&gt; 2 -&gt; 4 -&gt; 5 -&gt; 7 -&gt; 6\n\nVertices reachable from vertex 2:\n2 -&gt; 1 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 7 -&gt; 6\n\nVertices reachable from vertex 3:\n3 -&gt; 2 -&gt; 1 -&gt; 4 -&gt; 5 -&gt; 7 -&gt; 6\n\nVertices reachable from vertex 4:\n4 -&gt; 5 -&gt; 7 -&gt; 6\n\nVertices reachable from vertex 5:\n5 -&gt; 7 -&gt; 6 -&gt; 4\n\nVertices reachable from vertex 6:\n6 -&gt; 4 -&gt; 5 -&gt; 7\n\nVertices reachable from vertex 7:\n7 -&gt; 6 -&gt; 4 -&gt; 5\n\nClearly, there is only one vertex \u201c 0 \u201d in the graph, from which all other vertices are reachable. Hence, vertex \u201c 0 \u201d is the mother vertex of the above graph.\n\nThere can be more than one mother vertices in a graph.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph3-11084.png\" alt=\"\"></p>\n\n<h4 id=\"for-example-in-the-above-graph-vertices-0-1-and-2-are-mother-vertices\">For Example, in the above graph, vertices 0, 1 and 2 are mother vertices.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an Integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains two space separated integers \u2018N\u2019, denoting the number of cities (from 0 to \u2018N-1\u2019) and \u2018M\u2019, denoting the number of paths connecting cities.\n\nNext \u2018M\u2019 lines contain two space separated integers \u2018u\u2019 and \u2018v\u2019 denoting a path from a city \u2018u\u2019 to a city \u2018v\u2019, where { u, v } \u2208 N.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return an integer \u2018X\u2019, where \u2018X\u2019 is the minimum city which Doctor can buy. \nThere can be more than one house \u2018X\u2019 possible. You need to output the house \u2018X\u2019 with minimum value. If you are unable to find any such house \u2018X\u2019, then return -1.\nThe output of each test case should be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^4\n1 &lt;= M &lt;= 10^5\n0 &lt;= X &lt; N\n\nTime Limit : 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 5\n0 1\n2 3\n0 3\n2 0\n1 2\n5 5\n0 1\n3 4\n2 1\n3 0\n2 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0\n-1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<h4 id=\"test-case-1\">Test Case 1:</h4>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2021-06-13-20-39-57-11085.png\" alt=\"\"></p>\n\n<pre><code>In the above graph, vertices 0, 1 and 2 are mother vertices, since we can reach every possible vertex in the graph if we start from either 0, 1 or 2. We have to output the minimum of the three vertices, hence, output should be \u201c0\u201d. \n</code></pre>\n\n<h4 id=\"test-case-2\">Test Case 2:</h4>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2021-06-13-20-44-19-11086.png\" alt=\"\"></p>\n\n<pre><code>In the above graph, there is no mother vertex, since we cannot choose any such vertex from which we can reach all the vertices of the graph. Hence, output should be -1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 5\n1 0\n3 4\n0 2\n2 1\n0 3\n7 7\n1 3\n6 0\n5 6    \n5 2\n0 1\n4 1\n6 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0\n5\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph with 'N' cities (numbered 0 to N-1) and 'M' paths, find a city 'X' from which Doctor Ninja can reach any other city. Such a city 'X' is called a mother vertex. If multiple such cities exist, return the one with the minimum value. If no such city exists, return -1.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^4",
                    "1 <= M <= 10^5",
                    "0 <= X < N",
                    "Time Limit : 1 sec."
                ],
                "testcases": [
                    {
                        "input": "4 5\n0 1\n2 3\n0 3\n2 0\n1 2",
                        "output": "0",
                        "explanation": "Cities 0, 1, and 2 are all mother vertices. The minimum among them is 0."
                    },
                    {
                        "input": "5 5\n0 1\n3 4\n2 1\n3 0\n2 4",
                        "output": "-1",
                        "explanation": "There is no mother vertex in this graph."
                    },
                    {
                        "input": "5 5\n1 0\n3 4\n0 2\n2 1\n0 3",
                        "output": "0",
                        "explanation": "0 is a mother vertex because it can reach all other nodes."
                    },
                    {
                        "input": "7 7\n1 3\n6 0\n5 6\n5 2\n0 1\n4 1\n6 4",
                        "output": "5",
                        "explanation": "5 is the smallest node which can reach all other nodes in the graph"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of the DFS approach. Can you think of a solution now?</p>",
            "<p>Think of Kosaraju\u2019s Strongly Connected Component Algorithm. Can you think of a solution now?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}