{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15514,
            "title": "Dot Product of Two Sparse Vectors",
            "titleSlug": "dot-product-of-two-sparse-vectors_2546827",
            "content": "<h4 id=\"you-are-given-two-sparse-vectors-vec1-and-vec2-you-have-to-compute-the-dot-product-of-these-two-vectors-and-print-the-final-answer\">You are given two sparse vectors \u2018vec1\u2019 and \u2018vec2\u2019. You have to compute the dot product of these two vectors and print the final answer.</h4>\n\n<h4 id=\"implement-class\">Implement class :</h4>\n\n<pre><code>Sparse Vector: Initialize the vector.\n\ndotProduct(vec2): Implement the dot product between vector \u2018sparseVector\u2019 and \u2018vec2\u2019.\n</code></pre>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>\u2018N\u2019 = 6, \u2018vec1\u2019 = {2, 4, 0, 0, 1, 0}, \u2018vec2\u2019 = {0, 0, 3, 0, 5, 0}\n\nNow in this example, the dot product of these two vectors is (2 * 0) + (4 * 0) + (0 * 3) + (0 * 0) + (1 * 5) + (0 * 0) = 5. Hence the final answer is 5.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input format contains \u2018T\u2019, denoting the number of test cases. Then each test case follows.\n\nThe first line of each test case contains an integer \u2018N\u2019, Denoting the number of elements in the array \u2018vec1\u2019 and \u2018vec2\u2019.\n\nThe second line of the test case contains an array of \u2018N\u2019 integers denoting the elements of the array \u2018vec1\u2019.\n\nThe third line of the test case contains an array of \u2018N\u2019 integers denoting the elements of array \u2018vec2\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer \u201cans\u201d denoting the dot product of the two vectors.\n\nOutput for every query will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the two functions of class \u2018sparseVector\u2019.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n2 &lt;= N &lt;= 10^5\n0 &lt;= vec1[i], vec2[i] &lt;= 100\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3\n1 0 1\n0 1 0\n2\n6 0\n6 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>0\n36\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<pre><code>In the first test case, the dot product of these two vectors is (1 * 0) + (0 * 1) + (1 * 0) = 0. Hence the final answer is 0.\n\nIn the second test case, the dot product of these two vectors is (6 * 6) + (0 * 0) = 36. Hence the final answer is 36.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5\n0 1 0 0 1\n0 4 1 0 11\n5  \n1 2 0 0 0\n0 44 0 0 0  \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>15\n88\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a `SparseVector` class to compute the dot product of two sparse vectors. The `SparseVector` class should have the following methods:\n\n*   `SparseVector(vec1)`: Initializes the sparse vector with the given vector `vec1`.\n*   `dotProduct(vec2)`: Calculates and returns the dot product of the initialized `sparseVector` with the input vector `vec2`.\n\nSparse vectors are vectors where most elements are zero. The dot product of two vectors is the sum of the products of corresponding elements. For example, the dot product of `{2, 4, 0, 0, 1, 0}` and `{0, 0, 3, 0, 5, 0}` is `(2*0) + (4*0) + (0*3) + (0*0) + (1*5) + (0*0) = 5`.",
                "constraints": [
                    "1 <= T <= 100",
                    "2 <= N <= 10^5",
                    "0 <= vec1[i], vec2[i] <= 100",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\n1 0 1\n0 1 0",
                        "output": "0",
                        "explanation": "The dot product of {1, 0, 1} and {0, 1, 0} is (1 * 0) + (0 * 1) + (1 * 0) = 0."
                    },
                    {
                        "input": "2\n6 0\n6 0",
                        "output": "36",
                        "explanation": "The dot product of {6, 0} and {6, 0} is (6 * 6) + (0 * 0) = 36."
                    },
                    {
                        "input": "5\n0 1 0 0 1\n0 4 1 0 11",
                        "output": "15",
                        "explanation": "The dot product of {0, 1, 0, 0, 1} and {0, 4, 1, 0, 11} is (0 * 0) + (1 * 4) + (0 * 1) + (0 * 0) + (1 * 11) = 15."
                    },
                    {
                        "input": "5\n1 2 0 0 0\n0 44 0 0 0",
                        "output": "88",
                        "explanation": "The dot product of {1, 2, 0, 0, 0} and {0, 44, 0, 0, 0} is (1 * 0) + (2 * 44) + (0 * 0) + (0 * 0) + (0 * 0) = 88."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Map all the elements of both the vectors and compute the answer for each index</p>",
            "<p>Create the index-value pair of both the vectors and compute the answer for each index.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}