{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16321,
            "title": "Duplicate average",
            "titleSlug": "duplicate-average_3125884",
            "content": "<h4 id=\"you-are-given-a-binary-tree-you-have-to-find-all-the-duplicate-sub-trees-of-the-binary-tree-for-every-duplicate-subtree-you-just-have-to-return-the-root-of-the-sub-tree-two-sub-trees-are-duplicates-or-the-same-if-the-nodes-have-the-same-value-and-the-same-structure\">You are given a binary tree. You have to find all the duplicate sub-trees of the binary tree. For every duplicate subtree, you just have to return the root of the sub-tree. Two sub-trees are duplicates or the same if the nodes have the same value and the same structure.</h4>\n\n<h5 id=\"example\">Example:-</h5>\n\n<pre><code>For the given binary tree: [1, 2, 1, -1, -1, 2, 1, -1, -1, -1, -1]\nStart Node: 3\n\n    1\n   / \\\n 2   1\n      / \\\n     2  1\n\nThe answer should be [[2]] because the subtree [2] is present 2 times.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. Then each test case follows.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-13663.png\" alt=\"\"></p>\n\n<p>For example, the input for the tree depicted in the above image would be :</p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. \nHence, for the above-depicted tree, the input will be given as:\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the subtrees that are present more than once in the tree.\n\nThe output of each test case should be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything, it has already been taken care of. Just implement the function.    \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N (Number of Nodes) &lt;= 10^5\n1 &lt;= VALUE of the nodes &lt;= 10^9\n\nTime Limit = 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1 2 3 4 -1 -1 5 -1 -1 -1 -1\n1 1 1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1 :</h5>\n\n<pre><code>In the first test case, the tree looks like this:- \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree1-13664.png\" alt=\"\"></p>\n\n<pre><code>So, there is no duplicate subtree in the tree given above.\n\nIn the second test case, the tree looks like this:- \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-13665.png\" alt=\"\"></p>\n\n<pre><code>So, the duplicate subtree given is [1].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n2 2 2 3 -1 3 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>3\n2 3 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, identify and return the roots of all duplicate subtrees. A subtree is considered a duplicate if its nodes have the same values and structure as another subtree in the original tree.",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= N <= 10^5 (Number of Nodes in the tree)",
                    "1 <= VALUE of the nodes <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 -1 -1 5 -1 -1 -1 -1",
                        "output": "",
                        "explanation": "No duplicate subtrees are present in this tree."
                    },
                    {
                        "input": "1 1 1 -1 -1 -1 -1",
                        "output": "1",
                        "explanation": "The subtree rooted at the node with value 1 is duplicated."
                    },
                    {
                        "input": "2 2 2 3 -1 3 -1 -1 -1 -1 -1",
                        "output": "3\n2 3",
                        "explanation": "The subtrees rooted at the nodes with values 3 and the subtree [2,3] are duplicated."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use recursion to find whether the subtree is duplicate or not.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}