{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8776,
            "title": "Duplicate in array",
            "titleSlug": "duplicate-in-array_893397",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-size-n-containing-each-number-between-1-and-n-1-at-least-once-there-is-a-single-integer-value-that-is-present-in-the-array-twice-your-task-is-to-find-the-duplicate-integer-value-present-in-the-array\">You are given an array \u2018ARR\u2019 of size \u2018N\u2019 containing each number between 1 and \u2018N\u2019 - 1 at least once. There is a single integer value that is present in the array twice. Your task is to find the duplicate integer value present in the array.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Consider ARR = [1, 2, 3, 4, 4], the duplicate integer value present in the array is 4. Hence, the answer is 4 in this case.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>A duplicate number is always present in the given array.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\nThe first line of each test case contains a single integer, &#39;N&#39;, denoting the number of elements in the array.\nThe second line of each test case contains &#39;N&#39; space-separated integers denoting the elements of the array &#39;ARR&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer - the duplicate element in the array.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;=  T  &lt;= 10\n2 &lt;=  N &lt;= 10 ^ 5\n1 &lt;=  ARR[i]  &lt;= N - 1\n\nWhere &#39;T&#39; denotes the number of test cases, &#39;N&#39; denotes the number of elements in the array, and &#39;ARR[i]&#39; denotes the &#39;i-th&#39; element of the array &#39;ARR&#39;.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\n4 2 1 3 1\n7\n6 3 1 5 4 3 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case, \nThe duplicate integer value present in the array is 1. Hence, the answer is 1 in this case.\n\nFor the second test case,\nThe duplicate integer value present in the array is 3. Hence, the answer is 3 in this case.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n6 \n5 1 2 3 4 2  \n9\n8 7 2 5 4 7 1 3 6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2\n7\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"hints\">Hints:</h5>\n\n<pre><code>1. Simply calculate the frequency of each value.\n2. Try to optimise the above approach by using an array to store the frequencies.\n3. Think of a solution using Floyd\u2019s cycle finding algorithm.\n4. Try to think of a solution based on bitwise XOR.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 768,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers containing numbers from 1 to N-1, where N is the size of the array, and knowing that one number is duplicated, find the duplicate number.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 10 ^ 5",
                    "1 <= ARR[i] <= N - 1"
                ],
                "testcases": [
                    {
                        "input": "arr = [4, 2, 1, 3, 1], n = 5",
                        "output": "1",
                        "explanation": "The number 1 appears twice in the array. All other numbers from 1 to N-1 appear once."
                    },
                    {
                        "input": "arr = [6, 3, 1, 5, 4, 3, 2], n = 7",
                        "output": "3",
                        "explanation": "The number 3 appears twice in the array. All other numbers from 1 to N-1 appear once."
                    },
                    {
                        "input": "arr = [5, 1, 2, 3, 4, 2], n = 6",
                        "output": "2",
                        "explanation": "The number 2 appears twice in the array. All other numbers from 1 to N-1 appear once."
                    },
                    {
                        "input": "arr = [8, 7, 2, 5, 4, 7, 1, 3, 6], n = 9",
                        "output": "7",
                        "explanation": "The number 7 appears twice in the array. All other numbers from 1 to N-1 appear once."
                    },
                    {
                        "input": "arr = [1, 2, 3, 4, 4], n = 5",
                        "output": "4",
                        "explanation": "The number 4 appears twice in the array. All other numbers from 1 to N-1 appear once."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n   Time Complexity: O(N)\r\n   Space Complexity: O(1)\r\n\r\n   Where N is the number of elements in the array.\r\n*/\r\n\r\nint findDuplicate(vector<int> &arr) \r\n{\r\n    int n = arr.size();\r\n\r\n    // The variable duplicate stores the duplicate element in the array\r\n    int duplicate = 0;\r\n\r\n    // Iterate currentNumber from 1 to N - 1\r\n    for (int currentNumber = 1; currentNumber <= n - 1; currentNumber++) \r\n    {\r\n        // Update duplicate with XOR of duplicate and currentNumber\r\n        duplicate = duplicate ^ currentNumber;\r\n    }\r\n\r\n    // Traverse through the array ARR\r\n    for (int index = 0; index < n; index++) \r\n    {\r\n        // Update duplicate with XOR of duplicate and ARR[index]\r\n        duplicate = duplicate ^ arr[index];\r\n    }\r\n\r\n    // Return the variable duplicate\r\n    return duplicate;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity O(N)\r\n    Space Complexity: O(1)\r\n\r\n   Where N is the number of elements in the array.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n\r\n\tpublic static int findDuplicate(ArrayList<Integer> arr) {\r\n\r\n\t\tint n = arr.size();\r\n\r\n\t\t// The variable duplicate stores the duplicate element in the array\r\n\t\tint duplicate = 0;\r\n\r\n\t\t// Iterate currentNumber from 1 to N - 1\r\n\t\tfor (int currentNumber = 1; currentNumber <= n - 1; currentNumber++) {\r\n\r\n\t\t\t// Update duplicate with XOR of duplicate and currentNumber\r\n\t\t\tduplicate = duplicate ^ currentNumber;\r\n\t\t}\r\n\r\n\t\t// Traverse through the array ARR\r\n\t\tfor (int index = 0; index < n; index++) {\r\n\r\n\t\t\t// Update duplicate with XOR of duplicate and ARR[index]\r\n\t\t\tduplicate = duplicate ^ arr.get(index);\r\n\t\t}\r\n\r\n\t\t// Return the variable duplicate\r\n\t\treturn duplicate;\r\n\r\n\t}\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n   Time Complexity: O(N)\r\n   Space Complexity: O(1)\r\n\r\n   Where N is the number of elements in the array.\r\n'''\r\n\r\ndef findDuplicate(arr):\r\n\r\n    n = len(arr)\r\n\r\n    # The variable duplicate stores the duplicate element in the array\r\n    duplicate = 0\r\n\r\n    # Iterate currentNumber from 1 to N - 1\r\n    for currentNumber in range(n):\r\n\r\n        # Update duplicate with XOR of duplicate and currentNumber\r\n        duplicate = duplicate ^ currentNumber\r\n\r\n    # Traverse through the array ARR\r\n    for index in range(n):\r\n\r\n        # Update duplicate with XOR of duplicate and ARR[index]\r\n        duplicate = duplicate ^ arr[index]\r\n\r\n    # Return the variable duplicate\r\n    return duplicate\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}