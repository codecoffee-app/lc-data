{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16421,
            "title": "Each Path",
            "titleSlug": "each-path_3149723",
            "content": "<h4 id=\"in-the-ninja-world-n-cities-are-connected-via-m-one-way-roads-each-road-has-a-toll-checkpoint-but-the-tax-collection-rules-are-different-from-the-standard-toll-system-these-checkpoints-not-only-take-money-from-you-but-give-you-as-well\">In the Ninja world, &#39;N&#39; cities are connected via &#39;M&#39; one-way roads. Each road has a toll checkpoint, but the tax collection rules are different from the standard toll system. These checkpoints not only take money from you but give you as well.</h4>\n\n<h4 id=\"the-government-of-ninja-world-fixed-taxes-for-each-checkpoint-if-the-tax-value-is-positive-you-have-to-pay-that-amount-and-if-the-amount-is-negative-you-receive-that-amount-for-example-if-tax-is-3-dollars-at-a-checkpoint-you-have-to-pay-3-dollars-at-the-checkpoint-if-tax-is-5-dollars-you-receive-5-dollars-from-that-checkpoint\">The government of Ninja world fixed taxes for each checkpoint. If the tax value is positive, you have to pay that amount, and if the amount is negative, you receive that amount. For example, if tax is 3 dollars at a checkpoint, you have to pay 3 dollars at the checkpoint. If tax is -5 dollars, you receive 5 dollars from that checkpoint.</h4>\n\n<h4 id=\"one-of-your-friends-alice-is-planning-a-trip-in-the-ninja-world-but-wants-to-understand-taxation-very-well-your-task-is-to-provide-him-with-the-minimum-amount-he-needs-to-pay-for-each-pair-of-cities-i-e-print-a-matrix-of-size-n-n-where-matrix-i-j-denotes-minimum-tax-one-needs-to-pay-to-travel-from-city-i-to-city-j-via-some-connecting-roads\">One of your friends, Alice, is planning a trip in the Ninja world but wants to understand taxation very well. Your task is to provide him with the minimum amount he needs to pay for each pair of cities, i.e., print a matrix of size N*N where matrix[i][j] denotes minimum tax one needs to pay to travel from city &#39;i&#39; to city &#39;j&#39; via some connecting roads.</h4>\n\n<h4 id=\"note\">Note:-</h4>\n\n<pre><code>1. Cities are numbered from [0, 1, 2 \u2026.. N-1] in input data.\n2. To minimize the cost for a pair (i, j), any road can be travelled any number of times.\n3. For any pair (i, j), if city &#39;j&#39; is not reachable from city &#39;i&#39;, the value of matrix[i][j] should be &#39;-1&#39;.\n4. If matrix[i][j] is negative for any pair, you should minimize it too, i.e., find the most negative value.\n5. For any pair (i, j), if  &#39;j&#39; is reachable from city &#39;i&#39;, but it\u2019s impossible to minimize the cost, fill the entire answer matrix with integer &#39;-1&#39;.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains &#39;T&#39;, denoting the number of tests.\n For each Test :\n    The first line contains two space-separated integers, &#39;N&#39; and &#39;M&#39;, denoting the number of cities and roads, respectively.\n    Next &#39;M&#39; lines contain three integers &#39;x[i]&#39;, &#39;y[i]&#39;, &#39;w[i]&#39; denoting there is a directed road from city &#39;x[i]&#39; to city &#39;y[i]&#39;, and having tax &#39;w[i]&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each Test :\n    There should be &#39;N&#39; lines, each containing &#39;N&#39; space-separated integers. The j-th value in i-th row denotes the minimum tax to travel from city &#39;i&#39; to city &#39;j&#39;.\n    If a pair of cities is unreachable, print integer  -1.\n    If a pair is reachable but cannot minimize cost, all elements in the matrix must be  -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints -</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 10\n1 &lt;= &#39;N&#39; &lt;= 10^3\n0 &lt;= &#39;M&#39; &lt;= min(10^3 , N*(N-1)/2 )\n0 &lt;= x[i], y[i] &lt; &#39;N&#39;   i \u2208  (1,M)\n-10^4 &lt;= w[i] &lt;= 10^4   i \u2208  (1, M)\nNote - Sum of &#39;N&#39; and Sum of &#39;M&#39; over all test cases does not exceed 10^3.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n4 5\n0 3 3\n0 1 -5\n1 2 4\n2 3 1\n0 2 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code>0 -5 -1 0\n-1 0 4 5\n-1 -1 0 1\n-1 -1 -1 0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000546_1638026910_Each-path-problem.jpg\" alt=\"\"></p>\n\n<pre><code>For pairs (1,0), (2,0), (2,1), (3,0), (3,1), (3,2), city \u2018y\u2019 is unreachable from city \u2018x\u2019. Hence, the answer is \u2018-1\u2019.\nFor pairs (0,0), (1,1), (2,2), (3,3), the answer is 0 as no road needed to travel.\nFor pair (0,1), there is a directed road with minimum possible cost -5.\nFor pair (0,2), although there is a directed road with cost 2, but path (0 -&gt; 1 -&gt; 2) gives minimum, i.e., -5+4 = -1.\nFor pair (0,3), the minimum cost path is (0 -&gt; 1 -&gt; 2 -&gt; 3) with cost -5+4+1 = 0.\nFor pair (1,2), there is a direct road with minimum possible cost 4.\nFor pair (1,3), the minimum cost path is (1 -&gt; 2 -&gt; 3) with cost 4+1 = 5.\nFor pair (2,3), there is a direct road with minimum possible cost 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4 4\n1 2 3\n2 3 3\n3 1 3\n3 2 -3\n3 4\n1 2 -1\n2 3 -2\n2 1 -1\n3 1 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0 -1 -1 -1\n-1 0 3 6\n-1 6 0 3\n-1 3 -3 0\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph with 'N' cities and 'M' one-way roads, where each road has a toll (positive or negative).  Find the minimum cost to travel between each pair of cities (i, j). If a city 'j' is unreachable from city 'i', the cost is -1. If there is a negative cycle reachable from city 'i' that can reduce the cost to arbitrarily low values when travelling from city 'i' to city 'j', then the minimum cost is considered undefined, and the entire result matrix should be filled with -1.",
                "constraints": [
                    "1 <= 'T' <= 10",
                    "1 <= 'N' <= 10^3",
                    "0 <= 'M' <= min(10^3, N*(N-1)/2 )",
                    "0 <= x[i], y[i] < 'N'   i \u2208  (1,M)",
                    "-10^4 <= w[i] <= 10^4   i \u2208  (1, M)",
                    "Sum of 'N' and Sum of 'M' over all test cases does not exceed 10^3."
                ],
                "testcases": [
                    {
                        "input": "N = 4, M = 5, roads = [[0, 3, 3], [0, 1, -5], [1, 2, 4], [2, 3, 1], [0, 2, 2]]",
                        "output": "[[0, -5, -1, 0], [-1, 0, 4, 5], [-1, -1, 0, 1], [-1, -1, -1, 0]]",
                        "explanation": "The output matrix represents the minimum cost to travel from city i to city j. For example, the minimum cost from city 0 to city 1 is -5, and from city 0 to city 3 is 0.  Cities unreachable from a starting city are marked with -1."
                    },
                    {
                        "input": "N = 4, M = 4, roads = [[1, 2, 3], [2, 3, 3], [3, 1, 3], [3, 2, -3]]",
                        "output": "[[0, -1, -1, -1], [-1, 0, 3, 6], [-1, 6, 0, 3], [-1, 3, -3, 0]]",
                        "explanation": "The graph contains cycles. The negative weight from node 3 to 2 doesn't affect reachability from 0 to anything as it is not reachable.  "
                    },
                    {
                        "input": "N = 3, M = 4, roads = [[1, 2, -1], [2, 0, -2], [2, 1, -1], [0, 1, 5]]",
                        "output": "[[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]]",
                        "explanation": "The graph contains a negative cycle (1 -> 2 -> 1), making it possible to infinitely reduce the cost. Therefore, all paths have undefined minimum cost."
                    },
                    {
                        "input": "N = 3, M = 1, roads = [[0,1,5]]",
                        "output": "[[0, 5, -1], [-1, 0, -1], [-1, -1, 0]]",
                        "explanation": "Only a path exists from 0 to 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Make all the edge weights positive so that shortest path algorithms work on it.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}