{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9247,
            "title": "Elements In Two BSTs",
            "titleSlug": "elements-in-two-bsts_981278",
            "content": "<h4 id=\"you-have-been-given-two-binary-search-trees-root1-and-root2-of-integers-and-you-want-to-collect-all-the-elements-present-in-both-the-bsts\">You have been given two Binary Search Trees \u2018root1\u2019 and \u2018root2\u2019 of integers and you want to collect all the elements present in both the BSTs.</h4>\n\n<h4 id=\"your-task-is-to-print-all-the-integers-from-both-bsts-sorted-in-ascending-order\">Your task is to print all the integers from both BSTs sorted in ascending order.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-which-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure which has the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>For the given BSTs:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-28-6122.png\" alt=\"Input\">\n   <img src=\"https://files.codingninjas.in/screenshot-30-6123.png\" alt=\"Iuput\"></p>\n\n<pre><code>The output will be: [2, 2, 5, 7, 7, 10, 10, 16, 16, 20, 20]\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains the elements of the BST \u2018root1\u2019 in the level order form separated by a single space.\n\nThe second line of each test case contains the elements of the BST \u2018root2\u2019 in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example for further clarification.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n\nNote :\nThe above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the elements of both binary search trees in ascending order.\n\nPrint output of each test case in a separate line.\n\nNote: You are not required to print anything explicitly. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N1 + N2 &lt;= 5000\n0 &lt;= data &lt;= 10^5\n\nWhere \u2018N1\u2019 is the number of nodes in the binary search tree \u2018root1\u2019, \u2018N2\u2019 is the number of nodes in the binary search tree \u2018root2\u2019, \u2018T\u2019 represents the number of test cases and \u2018data&#39; denotes data contained in the nodes of the binary search trees.\n\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n15 10 20 8 12 16 25 -1 -1 -1 -1 -1 -1 -1 -1\n10 -1 90 -1 -1  \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>8 10 10 12 15 16 20 25 90 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample output 1:</h5>\n\n<pre><code>The trees can be represented as follows:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-14-5921.png\" alt=\"Example\">\n   <img src=\"https://files.codingninjas.in/screenshot-77-6596.png\" alt=\"Example\"></p>\n\n<pre><code>The nodes of both BST in increasing order are 8 10 10 12 15 16 20 25 90.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n10 5 -1 -1 -1\n20 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>5 10 20\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two Binary Search Trees ('root1' and 'root2') containing integers, the goal is to collect all the integer elements from both BSTs and return them in ascending order. A Binary Search Tree (BST) follows these properties: the left subtree of a node contains only nodes with data less than the node's data, the right subtree contains only nodes with data greater than the node's data, and both subtrees are also BSTs.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N1 + N2 <= 5000",
                    "0 <= data <= 10^5",
                    "Where \u2018N1\u2019 is the number of nodes in the binary search tree \u2018root1\u2019, \u2018N2\u2019 is the number of nodes in the binary search tree \u2018root2\u2019, \u2018T\u2019 represents the number of test cases and \u2018data' denotes data contained in the nodes of the binary search trees.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "15 10 20 8 12 16 25 -1 -1 -1 -1 -1 -1 -1 -1\n10 -1 90 -1 -1",
                        "output": "8 10 10 12 15 16 20 25 90",
                        "explanation": "The elements from both BSTs, when merged and sorted in ascending order, are: 8, 10, 10, 12, 15, 16, 20, 25, 90."
                    },
                    {
                        "input": "10 5 -1 -1 -1\n20 -1 -1",
                        "output": "5 10 20",
                        "explanation": "The elements from both BSTs, when merged and sorted in ascending order, are: 5, 10, 20."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Store the data of nodes of both BSTs.</p>",
            "<p>Use the BST properties.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}