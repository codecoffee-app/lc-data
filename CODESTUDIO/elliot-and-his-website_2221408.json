{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14686,
            "title": "Elliot and His Website",
            "titleSlug": "elliot-and-his-website_2221408",
            "content": "<h4 id=\"elliot-wants-to-build-a-website-that-will-offer-free-hacking-courses-to-anyone-who-registers-he-wants-to-make-sure-that-everyone-who-registers-on-his-site-must-have-a-unique-username-so-if-a-user-with-a-username-s-is-already-registered-with-the-system-his-username-will-be-concatenated-with-the-smallest-non-negative-integer-such-that-the-new-username-is-not-present-in-the-database\">Elliot wants to build a website that will offer free hacking courses to anyone who registers. He wants to make sure that everyone who registers on his site must have a unique username. So if a user with a username \u2018s\u2019 is already registered with the system, his username will be concatenated with the smallest non-negative integer such that the new username is not present in the database.</h4>\n\n<h4 id=\"every-time-a-string-with-the-same-username-registers-the-order-of-registration-will-be-s-s0-s1-s2-s9-s10-s11\">Every time a string with the same username registers, the order of registration will be s, s0, s1, s2\u2026.. s9, s10, s11.</h4>\n\n<h4 id=\"you-are-given-n-usernames-for-each-username-find-the-username-which-will-be-given-to-each-user\">You are given \u2018n\u2019 usernames, for each username find the username which will be given to each user.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Initially, there are no usernames in the database. \n</code></pre>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>Let s = {\u201cninjas\u201d, \u201cninja\u201d, \u201cninjas\u201d, \u201cninjas1\u201d}\n\nNow In this example, first and second users are not present in the database, so they will be given the same usernames i.e. \u201cninjas\u201d, \u201cninja\u201d, now for the third user, \u201cninjas\u201d is already present in the database, so he will be given the username \u201cninjas0\u201d and for the last username, \u201cninjas1\u201d is also not present in the database so he will be given the same username.\n\nHence the final usernames in the database will be {\u201cninjas\u201d, \u201cninja\u201d, \u201cninjas0\u201d, \u201cninjas1\u201d}.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases to be run. Then the test cases follow.\n\nThe first line of each test case will be an integer \u2018n\u2019 denoting the number of users who want to register.\n\nNext \u2018n\u2019 lines of the input will contain a string \u2018s\u2019 denoting the usernames.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print \u2018n\u2019 strings denoting the usernames given by the website.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function and return the answer.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= n &lt;= 5000\n1 &lt;= |S| &lt;= 1000, where |S| represents the length of the String S.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3\nab\nab\nab\n2\nxy\nxy1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>ab\nab0\nab1\nxy\nxy1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<pre><code>For the first test case, since \u201cab\u201d is not present in the database for the first time, it will be given the username \u201cab\u201d, for the second and the third time \u201cab\u201d is already present in the array, hence they will be given the username \u201cab0\u201d and \u201cab1\u201d, respectively.\n\nFor the second test case, both \u201cxy\u201d and \u201cxy1\u201d are not present in the database, hence they will be given the username \u201cxy\u201d and \u201cxy1\u201d.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3\nninjas\nninjas1\nninjas\n5\nmrrobot\nmrobot\nmobot\nmrrobo\nmrrob\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>ninjas\nninjas1\nninjas0\nmrrobot\nmrobot\nmobot\nmrrobo\nmrrob\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a function that processes a list of desired usernames for a new website registration system. The system must ensure that all usernames are unique. If a requested username already exists, the system should append the smallest non-negative integer to the username until a unique username is found. The order of registration should follow the pattern: 'username', 'username0', 'username1', 'username2', and so on.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= n <= 5000 (Number of usernames per test case)",
                    "1 <= |S| <= 1000, where |S| represents the length of the String S."
                ],
                "testcases": [
                    {
                        "input": "n = 3, usernames = ['ab', 'ab', 'ab']",
                        "output": "['ab', 'ab0', 'ab1']",
                        "explanation": "The first 'ab' is unique. The second 'ab' becomes 'ab0'. The third 'ab' becomes 'ab1'."
                    },
                    {
                        "input": "n = 2, usernames = ['xy', 'xy1']",
                        "output": "['xy', 'xy1']",
                        "explanation": "Both 'xy' and 'xy1' are initially unique."
                    },
                    {
                        "input": "n = 3, usernames = ['ninjas', 'ninjas1', 'ninjas']",
                        "output": "['ninjas', 'ninjas1', 'ninjas0']",
                        "explanation": "'ninjas' and 'ninjas1' are unique initially. The last 'ninjas' becomes 'ninjas0'."
                    },
                    {
                        "input": "n = 5, usernames = ['mrrobot', 'mrobot', 'mobot', 'mrrobo', 'mrrob']",
                        "output": "['mrrobot', 'mrobot', 'mobot', 'mrrobo', 'mrrob']",
                        "explanation": "All usernames are initially unique."
                    },
                    {
                        "input": "n = 4, usernames = ['ninjas', 'ninja', 'ninjas', 'ninjas1']",
                        "output": "['ninjas', 'ninja', 'ninjas0', 'ninjas1']",
                        "explanation": "'ninjas' and 'ninja' are unique. The second 'ninjas' becomes 'ninjas0'. 'ninjas1' is unique."
                    },
                    {
                        "input": "n = 5, usernames = ['code', 'code0', 'code', 'code1', 'code0']",
                        "output": "['code', 'code0', 'code1', 'code10', 'code00']",
                        "explanation": "Initial usernames are 'code' , 'code0' which are accepted as is. then 'code' exits and becames 'code1'. then 'code1' exists and becomes 'code10'. then 'code0' exits and becomes 'code00'"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Iterate through all the strings and check if the current string is present in the database or not.</p>",
            "<p>Store all the elements in a trie by which we can concatenate and check if the current string is unique or not</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tries",
                "slug": "tries"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}