{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10208,
            "title": "Employee Free Time",
            "titleSlug": "employee-free-time_1171181",
            "content": "<h4 id=\"there-are-n-problem-setters-in-coding-ninjas-each-of-them-has-a-unique-id-between-0-to-n-1-a-problem-setter-works-in-multiple-non-overlapping-time-intervals-during-a-day\">There are \u2018N\u2019 Problem Setters in Coding Ninjas, Each of them has a unique id between 0 to N-1.  A Problem Setter works in multiple non-overlapping time intervals during a day.</h4>\n\n<h4 id=\"formally-a-problem-setter-having-id-i-works-in-ki-non-overlapping-intervals-of-the-form-t1-t2-t3-t4-t-2ki-2-t-2ki-1-where-ti-is-in-between-0-10-8-and-ti-t-i-1-a-day-in-coding-ninjas-start-from-time-0-and-end-at-time-10-8-both-inclusive\">Formally,  A Problem Setter having id \u2018i\u2019 works in \u2018Ki\u2019 non-overlapping intervals of the form [T1, T2], [T3, T4] ...  [T(2<em>ki-2), T(2</em>ki-1)],  where Ti is in between [0, 10^8] and Ti &lt;= T(i+1).  A day in Coding ninjas start from time 0 and end at time 10^8 (both inclusive).</h4>\n\n<h4 id=\"you-are-given-n-sorted-lists-of-non-overlapping-intervals-where-the-ith-list-gives-a-schedule-list-of-intervals-in-which-the-problem-setter-works-of-a-problem-setter-having-id-i-your-task-is-to-find-a-sorted-list-of-non-overlapping-intervals-in-which-all-problem-setters-are-free-if-there-are-multiple-possible-such-lists-output-the-list-which-is-minimum-in-length\">You are given \u2018N\u2019 sorted lists of non-overlapping intervals, where the ith list gives a schedule (list of intervals in which the problem setter works) of a Problem Setter having id \u2018i\u2019.  Your task is to find a sorted list of non-overlapping intervals in which all problem setters are free. If there are multiple possible such lists, output the list which is minimum in length.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1. In sorted order interval [T1, T2] comes before [T3, T4] if either T1 &lt; T3, or (T1 == T3  and T2 &lt; T4).\n2. An interval [T1, T2] represents, time T1, T1+1, T1+2, ... T2, i.e all integers between T1, T2 both T1 and T2 inclusive.  \n3. For simplicity, we represent the list of intervals in a 1D array where every two numbers show an interval, i.e list [1, 3, 5, 7, 9, 11] represent intervals [1, 3], [5, 7] and [9, 11] \n4. It is guaranteed that there will be at least one interval where all problem setters are free.\n</code></pre>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>Let suppose there are 3 problem setters, their working intervals are represented by the following list of lists, \u2018Schedules\u2019: [[1, 2, 5, 6], [1,2], [5, 10]], where the ith interval of a setter is represented by 2*i and (2*i+1)th integer in their respective list,  I.e. Problem Setter with an id 0, works in the intervals [1, 2], [5, 6]. Problem Setter with an id 1, work in the interval  [1,2]. Problem Setter with id 2, works in the interval [5, 10], \nIn this example, the time intervals where setter 0 is free are [0, 0], [3, 4], [7, 10^8]\nAnd the time intervals where setter 1 is free are [0, 0], [3, 10^8].\nAnd the time intervals where setter 2 is free are [0, 4], [11, 10^8].\nWe can clearly observe that time intervals, where all 3 setters are free are, [0, 0], [3, 4], and [11, 10^8].  \nThus we should output a list [0, 0, 3, 4, 11, 10^8] that represents these lists in 1D array form as described in notes. It can be shown easily, that this is the minimum possible length list of intervals representing common free time.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases, then \u2018T\u2019 test cases follow.\n\nThe first line of each test case consists of a single integer \u2018N\u2019 representing the number of problem setters.\n\nThen 2*\u2018N\u2019 line follows, which gives the \u2018schedule\u2019 of each of the problem setters. The 2*i+1th line consist of single even integer \u2018Ki\u2019 representing the number of intervals of ith problem setter and (2*i+2)th line consist of 2*Ki space-separated integers representing the list of intervals in a 1-D array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, in a separate line print the smallest and sorted list of non-overlapping intervals that give the common free time of \u2018N\u2019 problem setters. I.e if there are \u2018K\u2019 such intervals, then you need to print 2*K space-separated integers representing this list in a 1-D array. \n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1  &lt;= N &lt;= 1000\n1 &lt;= K &lt;= 1000\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1\n1\n10 20\n3\n2\n1 2 5 6\n1\n1 2\n1\n5 10\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>0 9 21 100000000\n0 0 3 4 11 100000000\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>Test case 1:\nThere is only one problem setter, who is busy during an interval [10, 20].  A day in coding ninjas is given by interval [0, 10^8], thus he will be free between [0, 9] and [21, 10^8]\n\nTest case 2:\nSee the problem statement for an explanation.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1\n1\n1 100000000\n3\n2\n1 2 5 6\n3\n1 1 2 2 3 3\n1\n0 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0 0\n4 4 7 100000000\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "There are 'N' problem setters in Coding Ninjas, each with a unique ID from 0 to N-1. Each problem setter works in multiple non-overlapping time intervals during the day. Given 'N' sorted lists of non-overlapping intervals, where the i-th list represents the working schedule of the problem setter with ID 'i', find a sorted list of non-overlapping intervals representing the common free time for all problem setters. Output the shortest such list. A day starts at time 0 and ends at time 10^8 (inclusive).\n\nNote:\n\n1. Intervals are sorted: [T1, T2] comes before [T3, T4] if T1 < T3, or (T1 == T3 and T2 < T4).\n2. [T1, T2] represents times T1, T1+1, ..., T2 (inclusive).\n3. Lists are represented as 1D arrays: [1, 3, 5, 7] means intervals [1, 3] and [5, 7].\n4. At least one interval where all setters are free is guaranteed.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 1000 (Number of problem setters)",
                    "1 <= K <= 1000 (Number of intervals per setter)",
                    "0 <= Ti <= 10^8 (Time limits for intervals)",
                    "Ti <= T(i+1) (Intervals are sorted)"
                ],
                "testcases": [
                    {
                        "input": "1\n1\n1\n10 20",
                        "output": "0 9 21 100000000",
                        "explanation": "There is only one problem setter, who is busy during an interval [10, 20].  A day in coding ninjas is given by interval [0, 10^8], thus he will be free between [0, 9] and [21, 10^8]."
                    },
                    {
                        "input": "1\n3\n2\n1 2 5 6\n1\n1 2\n1\n5 10",
                        "output": "0 0 3 4 11 100000000",
                        "explanation": "There are 3 problem setters. Setter 0 works in [1, 2], [5, 6]. Setter 1 works in [1, 2]. Setter 2 works in [5, 10]. Common free time is [0, 0], [3, 4], and [11, 10^8]."
                    },
                    {
                        "input": "1\n1\n1\n1 100000000",
                        "output": "0 0",
                        "explanation": null
                    },
                    {
                        "input": "1\n3\n2\n1 2 5 6\n3\n1 1 2 2 3 3\n1\n0 2",
                        "output": "4 4 7 100000000",
                        "explanation": null
                    },
                    {
                        "input": "2\n1\n1\n10 20\n3\n2\n1 2 5 6\n1\n1 2\n1\n5 10",
                        "output": "0 9 21 100000000\n0 0 3 4 11 100000000",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>One by one for each time, check whether all problem setters are free or not.</p>",
            "<p>Can you use binary search to efficiently check whether that \u2018ith\u2019 setter is free at a particular time or not?</p>",
            "<p>Use a boolean array to mark whether the setter is free at that time or not.</p>",
            "<p>Can we map each of the integers in the list of intervals (schedule) of each of the \u2018N\u2019 problem setters to some unique smaller integers?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}