{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12593,
            "title": "Encode and Decode",
            "titleSlug": "encode-and-decode_1467061",
            "content": "<h4 id=\"tiny-url-is-an-online-url-shortening-service-where-you-get-a-short-version-of-a-given-url-as-a-substitute\">Tiny URL is an online URL shortening service, where you get a short version of a given URL as a substitute.</h4>\n\n<h4 id=\"your-task-is-to-design-encode-the-original-url-s-into-a-tiny-url-and-decode-the-previously-encoded-tiny-url-into-the-original-url\">Your task is to design encode the original URL \u201cS\u201d, into a tiny URL and decode the previously encoded tiny URL into the original URL.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>S= \u201chttps://youtu.be/dQw4w9WgXcQ\u201d, can be encoded to TinyUrl \u201chttp://tinyurl.com/abcdef\u201d, then in future queries \u201chttp://tinyurl.com/abcdef\u201d  can be decoded into \u201chttps://youtu.be/dQw4w9WgXcQ\u201d\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The URL given to you for decoding will always be one of the URLs you have already returned after encoding in the past.\n\nThe encoded URL should strictly be of the format \u201chttp://tinyurl.com/abcdef\u201d, where instead of \u201cabcdef\u201d you can have any alphanumeric code of length 6.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer, &#39;K\u2019 denoting the number of queries.\n\nThe second line contains a string \u2018S\u2019, denoting the URL.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the decoded URL.\n\nOutput for each test case should be in a new line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don&#39;t print anything, it has already been taken care of. Just implement the given functions.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= K &lt;= 1000\n1 &lt;= |S| &lt;= 50\n\nWhere |S| is the length of string S.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\nhttps://youtu.be/dQw4w9WgXcQ\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>http://tinyurl.com/abcdef\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>The decoded URL is of the form as described in the problem i.e. \u201chttp://tinyurl.com/\u201d followed by an alphanumeric string of length 6.\n\nMultiple answers are possible for encoding, eg: \u201chttp://tinyurl.com/sds5xw\u201d, \u201chttp://tinyurl.com/8x9qxt\u201d, \u201chttp://tinyurl.com/g4e6cd\u201d, etc.\n\nThe only constraint is that once you have encoded a URL \u2018S\u2019 into some TinyURL, then you should be able to decode that TinyURL in the future.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nhttp://codingninjas.com/code/y8fMRhONFF\nhttp://abc.com/code/DNC3bYvUx\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>http://tinyurl.com/sds5xw\nhttp://tinyurl.com/8x9qxt\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a URL shortening service similar to TinyURL. Implement two functions:\n\n1.  **encode(S):** Takes a long URL `S` as input and returns a shortened URL (TinyURL) of the format `http://tinyurl.com/abcdef`, where `abcdef` is a 6-character alphanumeric code.\n2.  **decode(TinyURL):** Takes a TinyURL generated by the `encode` function as input and returns the original long URL `S`.\n\n**Important Notes:**\n\n*   The encoded URL should always follow the format `http://tinyurl.com/abcdef`, with a 6-character alphanumeric code.\n*   The decode function should only work for TinyURLs that were previously generated by your encode function. You are guaranteed that the input to decode will be a TinyURL you've already encoded.\n*   Multiple possible TinyURL encodings may exist for the same long URL. The key is to be able to decode a previously encoded URL correctly.",
                "constraints": [
                    "1 <= K <= 1000, where K is the number of queries.",
                    "1 <= |S| <= 50, where |S| is the length of the input URL S."
                ],
                "testcases": [
                    {
                        "input": "1\nhttps://youtu.be/dQw4w9WgXcQ",
                        "output": "http://tinyurl.com/abcdef",
                        "explanation": "For the given input URL, a possible encoded (shortened) URL is 'http://tinyurl.com/abcdef'.  Any alphanumeric code of length 6 after 'http://tinyurl.com/' would also be valid."
                    },
                    {
                        "input": "2\nhttp://codingninjas.com/code/y8fMRhONFF\nhttp://abc.com/code/DNC3bYvUx",
                        "output": "http://tinyurl.com/sds5xw\nhttp://tinyurl.com/8x9qxt",
                        "explanation": "The first URL is encoded to 'http://tinyurl.com/sds5xw' and the second URL is encoded to 'http://tinyurl.com/8x9qxt'.  These are example encodings; different alphanumeric codes are permissible, as long as the same code is consistently used for the same original URL during encoding and decoding."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Hash the given URL.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}