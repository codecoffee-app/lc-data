{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12593,
            "title": "Encode and Decode",
            "titleSlug": "encode-and-decode_1467061",
            "content": "<h4 id=\"tiny-url-is-an-online-url-shortening-service-where-you-get-a-short-version-of-a-given-url-as-a-substitute\">Tiny URL is an online URL shortening service, where you get a short version of a given URL as a substitute.</h4>\n\n<h4 id=\"your-task-is-to-design-encode-the-original-url-s-into-a-tiny-url-and-decode-the-previously-encoded-tiny-url-into-the-original-url\">Your task is to design encode the original URL \u201cS\u201d, into a tiny URL and decode the previously encoded tiny URL into the original URL.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>S= \u201chttps://youtu.be/dQw4w9WgXcQ\u201d, can be encoded to TinyUrl \u201chttp://tinyurl.com/abcdef\u201d, then in future queries \u201chttp://tinyurl.com/abcdef\u201d  can be decoded into \u201chttps://youtu.be/dQw4w9WgXcQ\u201d\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The URL given to you for decoding will always be one of the URLs you have already returned after encoding in the past.\n\nThe encoded URL should strictly be of the format \u201chttp://tinyurl.com/abcdef\u201d, where instead of \u201cabcdef\u201d you can have any alphanumeric code of length 6.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer, &#39;K\u2019 denoting the number of queries.\n\nThe second line contains a string \u2018S\u2019, denoting the URL.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the decoded URL.\n\nOutput for each test case should be in a new line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don&#39;t print anything, it has already been taken care of. Just implement the given functions.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= K &lt;= 1000\n1 &lt;= |S| &lt;= 50\n\nWhere |S| is the length of string S.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\nhttps://youtu.be/dQw4w9WgXcQ\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>http://tinyurl.com/abcdef\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>The decoded URL is of the form as described in the problem i.e. \u201chttp://tinyurl.com/\u201d followed by an alphanumeric string of length 6.\n\nMultiple answers are possible for encoding, eg: \u201chttp://tinyurl.com/sds5xw\u201d, \u201chttp://tinyurl.com/8x9qxt\u201d, \u201chttp://tinyurl.com/g4e6cd\u201d, etc.\n\nThe only constraint is that once you have encoded a URL \u2018S\u2019 into some TinyURL, then you should be able to decode that TinyURL in the future.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nhttp://codingninjas.com/code/y8fMRhONFF\nhttp://abc.com/code/DNC3bYvUx\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>http://tinyurl.com/sds5xw\nhttp://tinyurl.com/8x9qxt\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a URL shortening service similar to TinyURL. Implement two functions: `encode` which converts a long URL into a short URL and `decode` which converts a short URL back into its original long URL. The encoded URL should follow the format `http://tinyurl.com/abcdef`, where `abcdef` is a 6-character alphanumeric string.  You are guaranteed that the decode function will only be called with short URLs that were previously generated by your encode function.  Multiple different encodings of the same long URL are permissible, but a given short URL must always decode to the original long URL that generated it.",
                "constraints": [
                    "1 <= K <= 1000 (number of queries)",
                    "1 <= |S| <= 50 (length of the input URL)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "K = 1, longUrl = https://youtu.be/dQw4w9WgXcQ",
                        "output": "http://tinyurl.com/abcdef",
                        "explanation": "The input URL is encoded to a valid TinyURL format.  Any 6-character alphanumeric code can be used."
                    },
                    {
                        "input": "K = 2, longUrl1 = http://codingninjas.com/code/y8fMRhONFF, longUrl2 = http://abc.com/code/DNC3bYvUx",
                        "output": "http://tinyurl.com/sds5xw\nhttp://tinyurl.com/8x9qxt",
                        "explanation": "Two different URLs are encoded.  The important aspect is that the encode function generates distinct short URLs for distinct long URLs."
                    },
                    {
                        "input": "K = 1, longUrl = http://www.example.com",
                        "output": "http://tinyurl.com/aaaaaa",
                        "explanation": "Basic encoding of a standard URL."
                    },
                    {
                        "input": "K = 1, longUrl = https://verylongurl.withmanyparameters.com?param1=value1&param2=value2&param3=value3",
                        "output": "http://tinyurl.com/zzzzzz",
                        "explanation": "Handles URLs with query parameters."
                    },
                    {
                        "input": "K = 2, longUrl1 = http://example.com, longUrl2 = http://example.com",
                        "output": "http://tinyurl.com/bbbbbb\nhttp://tinyurl.com/cccccc",
                        "explanation": "Handles the case where the same long URL is encoded multiple times.  The encoded short URLs must still be unique."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Hash the given URL.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}