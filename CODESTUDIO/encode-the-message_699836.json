{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7567,
            "title": "Encode the Message",
            "titleSlug": "encode-the-message_699836",
            "content": "<h4 id=\"you-have-been-given-a-text-message-you-have-to-return-the-run-length-encoding-of-the-given-message\">You have been given a text message. You have to return the Run-length Encoding of the given message.</h4>\n\n<h4 id=\"run-length-encoding-is-a-fast-and-simple-method-of-encoding-strings-the-basic-idea-is-to-represent-repeated-successive-characters-as-the-character-and-a-single-count-for-example-the-string-aaaabbbccdaa-would-be-encoded-as-a4b3c2d1a2\">Run-length encoding is a fast and simple method of encoding strings. The basic idea is to represent repeated successive characters as the character and a single count. For example, the string &quot;aaaabbbccdaa&quot; would be encoded as &quot;a4b3c2d1a2&quot;.</h4>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow:\n\nThe first and only line of each test case will contain a string denoting the message.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>It&#39;s guaranteed that the message string will have no digits and consists solely of lowercase alphabetic characters.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print a single line containing the encoded message string. \n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 100000\n\nWhere &#39;N&#39; is the length of the message string.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3\naabbc\nabcd\nabbdcaas\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>a2b2c1\na1b1c1d1\na1b2d1c1a2s1\n</code></pre>\n\n<h5 id=\"explaination-for-sample-input-1\">Explaination for Sample Input 1:</h5>\n\n<pre><code>Test Case 1: As 2 consecutive &#39;a&#39;, 2 consecutive &#39;b&#39;, and 1 &#39;c&#39; are present in the given string so output is &quot;a2b2c1&quot;.\n\nTest Case 2: As 1 consecutive &#39;a&#39;, 1 consecutive &#39;b&#39;, 1 consecutive &#39;c&#39; and 1 consecutive &#39;d&#39; are present in the given string so output is &quot;a1b1c1d1&quot;.\n\nTest Case 3: As 1 consecutive &#39;a&#39;, 2 consecutive &#39;b&#39;, 1 consecutive &#39;d&#39;, 1consecutive &#39;c&#39;, 2 consecutive &#39;a&#39; and 1 consecutive &#39;s&#39; are present in the given string so output is &quot;a1b2d1c1a2s1&quot;.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nsadasd\nadsad\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>s1a1d1a1s1d1\na1d1s1a1d1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 91,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a text message consisting of lowercase alphabetic characters, return its Run-length Encoding. Run-length encoding represents repeated successive characters as the character followed by its count. For example, 'aaaabbbccdaa' would be encoded as 'a4b3c2d1a2'.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 100000 (Length of the message string)",
                    "Message string contains only lowercase alphabetic characters and no digits.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "aabbc",
                        "output": "a2b2c1",
                        "explanation": "The string contains two 'a's, two 'b's, and one 'c', so the encoding is 'a2b2c1'."
                    },
                    {
                        "input": "abcd",
                        "output": "a1b1c1d1",
                        "explanation": "Each character appears once, resulting in 'a1b1c1d1'."
                    },
                    {
                        "input": "abbdcaas",
                        "output": "a1b2d1c1a2s1",
                        "explanation": "The string has the following consecutive characters: one 'a', two 'b's, one 'd', one 'c', two 'a's and one 's', leading to the encoding 'a1b2d1c1a2s1'."
                    },
                    {
                        "input": "sadasd",
                        "output": "s1a1d1a1s1d1",
                        "explanation": null
                    },
                    {
                        "input": "adsad",
                        "output": "a1d1s1a1d1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you build the encoded string by iterating left to right counting repeated successive characters in the message string?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*  \r\n    Time Complexity : O(N)\r\n    Space Complexity : O(N)\r\n\r\n    Where 'N' is the length of the message string.\r\n*/\r\n\r\nstring encode(string &message)\r\n{\r\n    int n = message.size(), i;\r\n\r\n    string encodedMessage = \"\";\r\n\r\n    for (i = 0; i < n; i++)\r\n    {\r\n        char curChar = message[i];\r\n        int charFreq = 1;\r\n        while (i + 1 < n && message[i + 1] == curChar)\r\n        {\r\n            i++;\r\n            charFreq++;\r\n        }\r\n\r\n        encodedMessage.push_back(curChar);\r\n        encodedMessage.append(to_string(charFreq));\r\n    }\r\n\r\n    return encodedMessage;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "''' \r\n    Time Complexity : O(N)\r\n    Space Complexity : O(N)\r\n\r\n    Where 'N' is the length of the message string.\r\n'''\r\n\r\nfrom sys import stdin, setrecursionlimit\r\nsetrecursionlimit(10**7)\r\n\r\ndef encode(message):\r\n\r\n    n = len(message)\r\n\r\n    encodedMessage = []\r\n\r\n    i = 0\r\n    while(i < n):\r\n        curChar = message[i]\r\n        charFreq = 1\r\n        while (i + 1 < n and message[i + 1] == curChar):\r\n            i += 1\r\n            charFreq += 1\r\n\r\n        encodedMessage.append(curChar)\r\n        encodedMessage.append(str(charFreq))\r\n        i += 1\r\n    encodedMessage = \"\".join(encodedMessage)\r\n    \r\n    return encodedMessage\r\n\r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*  \r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n\r\n    Where 'N' is the length of the message string.\r\n*/\r\n\r\npublic class Solution {\r\n    public static String encode(String message) {\r\n        int n = message.length();\r\n\r\n        StringBuilder encodedMessage = new StringBuilder();\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            char curChar = message.charAt(i);\r\n            int charFreq = 1;\r\n            while (i + 1 < n && message.charAt(i + 1) == curChar) {\r\n                i++;\r\n                charFreq++;\r\n            }\r\n\r\n            encodedMessage.append(curChar);\r\n            encodedMessage.append(\"\" + charFreq);\r\n        }\r\n\r\n        return encodedMessage.toString();\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}