{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10916,
            "title": "Equal Tree Partition",
            "titleSlug": "equal-tree-partition_1280137",
            "content": "<h4 id=\"ninja-has-been-given-a-binary-tree-binary_tree-of-type-integer-with-n-nodes-ninja-has-to-check-if-it-is-possible-to-partition-the-binary-tree-into-two-trees-with-equal-sum-values-after-removing-exactly-one-edge-from-the-given-binary-tree\">Ninja has been given a binary tree \u2018BINARY_TREE\u2019 of type integer with \u2018N\u2019 nodes. Ninja has to check if it is possible to partition the binary tree into two trees with equal sum values after removing exactly one edge from the given binary tree.</h4>\n\n<h4 id=\"as-ninja-is-busy-he-asks-you-for-help-can-you-help-him-determine-if-an-equal-sum-partition-of-the-given-binary_tree-is-possible-return-true-if-possible-else-return-false\">As Ninja is busy, he asks you for help. Can you help him determine if an equal sum partition of the given \u2018BINARY_TREE\u2019 is possible? Return \u2018True\u2019 if possible else return \u2018False\u2019.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<p><img src=\"https://files.codingninjas.in/eqmain-8524.png\" alt=\"\"></p>\n\n<pre><code>In this given \u2018BINARY_TREE\u2019, we can make two possible partitions:\n1. The first one is with sums 2 and 4.\n2. The second one is with sums 3 and 3.\n\nThe second partition divides the given tree into an equal sum partition tree, so we return \u201cTrue\u201d.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases. Then the test cases follow.\n\nThe next line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nThe next line of each test case contains one integer \u2018K\u2019 representing that the houses that are still not vaccinated are at a \u2018K\u2019 distance from the last houses in the city.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/eqtree-8523.png\" alt=\"\"></p>\n\n<pre><code>4\n2 6\n1 3 5 7\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 4\n\nLevel 2 :\nLeft child of 4 = 2\nRight child of 4 = 6\n\nLevel 3 :\nLeft child of 2 = 1\nRight child of 2 = 3\nLeft child of 6 = 5\nRight child of 6 = 7\n\nLevel 4 :\nLeft child of 1 = null (-1)\nRight child of 1 = null (-1)\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return \u201cTrue\u201d if we can partition the given \u2018BINARY_TREE\u2019 into two trees with equal sum values else return \u201cFalse\u201d.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h4 id=\"note-you-do-not-need-to-print-anything-it-has-already-been-taken-care-of-just-implement-the-given-function\">Note: You do not need to print anything; it has already been taken care of. Just implement the given function.</h4>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= \u2018DATA\u2019 &lt;= 10^5 \n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5 10 10 -1 -1 2 3 -1 -1 -1 -1\n1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>For sample test case 1: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/eqex1-8522.png\" alt=\"\"></p>\n\n<pre><code>If we remove the edge between the nodes having value 5 and the node having value 10, then the two newly formed trees have equal sum i.e 15\n\n\nFor sample test case 2:\n\n In the given \u2018BINARY_TREE\u2019 we have only one node so we can not make a partition. Hence we print \u2018False\u2019.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n1 2 3 -1 4 -1 5 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>False\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h4>\n\n<pre><code>For sample test case 1: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/eqex2-8521.png\" alt=\"\"></p>\n\n<pre><code>In this binary tree, we can not make a partition with equal sum values after removing exactly one edge between any two nodes of the given binary tree. \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of integer nodes, determine if it's possible to partition the tree into two subtrees with equal sums by removing a single edge. Return 'True' if such a partition exists, and 'False' otherwise.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= DATA <= 10^5",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "5 10 10 -1 -1 2 3 -1 -1 -1 -1\n1 -1 -1",
                        "output": "True\nFalse",
                        "explanation": "Test case 1:\n Removing the edge between node 5 and node 10 results in two subtrees with equal sums (15 each).\nTest case 2:\n The tree consists of only one node. It is impossible to make partition with equal sum."
                    },
                    {
                        "input": "1 2 3 -1 4 -1 5 -1 -1 -1 -1",
                        "output": "False",
                        "explanation": "It is not possible to remove a single edge and create two subtrees with equal sums."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a DFS approach.</p>",
            "<p>Think of optimizing the above solution.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}