{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10316,
            "title": "Euler Path",
            "titleSlug": "euler-path_1214547",
            "content": "<h4 id=\"you-are-given-an-undirected-graph-edge_list-of-n-nodes-and-m-edges-your-task-is-to-return-any-euler-path-of-the-graph-if-no-euler-path-exists-then-you-need-to-return-1\">You are given an undirected graph &#39;EDGE_LIST&#39; of \u2018N\u2019 nodes and \u2018M\u2019 edges. Your task is to return any Euler path of the graph. If no Euler path exists then you need to return -1.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>An Euler path is a path in a graph such that every edge must be visited exactly once. You can visit the same vertex multiple times. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018M\u2019 where \u2018N\u2019 denotes the total number of nodes and \u2018M\u2019 denotes the total number of edges in the graph.\n\nThe next \u2018M\u2019 lines contain two space-separated integers \u2018U\u2019 and \u2018V\u2019 where \u2018U\u2019 and \u2018V\u2019 represent the nodes that share an edge from \u2018U\u2019 to \u2018V\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the output will be 1 if you have returned the correct Euler path, else it will be 0.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 100\n1 &lt;= M &lt;= min(100, N*(N-1)/2)\n0 &lt;= U, V &lt;= N - 1\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 2\n0 1\n0 2\n4 5\n0 1\n0 2\n0 3\n1 2\n2 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Test Case 1 :  \nThe given graph is shown below. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-8096.jpg\" alt=\"1\"></p>\n\n<pre><code>Euler path = 1 -&gt; 0 -&gt; 2\nAlso, 2 -&gt; 0 -&gt; 1 is also a valid Euler path.\nIf we return any one of the above two paths then we will get output as 1.\n\nTest Case 2 : \nThe given graph is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/2-8097.jpg\" alt=\"2\"></p>\n\n<pre><code>Euler path = 2 -&gt; 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 0 \nIf we return the above path then we will get output as 1.\n\nNote : Here we have visited node 0 and 2 multiple times but we have visited each edge exactly once.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 4\n0 4\n0 1\n1 3\n1 2\n5 4\n0 1\n1 2\n2 3\n3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>Test Case 1 :  \nThe given graph is shown below. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/3-8098.jpg\" alt=\"3\"></p>\n\n<pre><code>There is no Euler path possible for the above graph. So, we need to return -1.\n\nTest Case 2 : \nThe given graph is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/4-8099.jpg\" alt=\"4\"></p>\n\n<pre><code>Euler path = 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph 'EDGE_LIST' with 'N' nodes and 'M' edges, find an Euler path. An Euler path visits each edge exactly once. You can visit the same vertex multiple times. If no Euler path exists, return -1.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 100",
                    "1 <= M <= min(100, N*(N-1)/2)",
                    "0 <= U, V <= N - 1",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 2\n0 1\n0 2",
                        "output": "1",
                        "explanation": "The graph has an Euler path. One possible path is 1 -> 0 -> 2, or 2 -> 0 -> 1. Returning either will yield a correct output."
                    },
                    {
                        "input": "4 5\n0 1\n0 2\n0 3\n1 2\n2 3",
                        "output": "1",
                        "explanation": "The graph has an Euler path. One possible path is 2 -> 0 -> 1 -> 2 -> 3 -> 0.  Node 0 and 2 are visited multiple times but each edge is visited exactly once."
                    },
                    {
                        "input": "5 4\n0 4\n0 1\n1 3\n1 2",
                        "output": "1",
                        "explanation": "There is no Euler path possible for the given graph. So, the output should be -1."
                    },
                    {
                        "input": "5 4\n0 1\n1 2\n2 3\n3 4",
                        "output": "1",
                        "explanation": "The graph has an Euler path. One possible path is 0 -> 1 -> 2 -> 3 -> 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find the Euler path starting at 'X' for each vertex 'X'.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}