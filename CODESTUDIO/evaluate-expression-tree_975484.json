{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9129,
            "title": "Evaluate expression tree",
            "titleSlug": "evaluate-expression-tree_975484",
            "content": "<h4 id=\"you-are-given-an-expression-tree-your-task-is-to-evaluate-the-expression\">You are given an expression tree, your task is to evaluate the expression.</h4>\n\n<h4 id=\"an-expression-tree-is-a-binary-tree-where-leaf-nodes-are-integer-values-and-internal-nodes-are-mathematical-operations\">An expression tree is a binary tree where leaf nodes are integer values and internal nodes are mathematical operations.</h4>\n\n<h4 id=\"a-binary-tree-is-a-tree-where-every-node-has-at-most-two-child-nodes\">A binary tree is a tree where every node has at most two child nodes.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>There can be 4 operators: +,-,*,/. For division, you need to return the floor(a/b).\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Consider the following expression tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/eval3-6588.png\" alt=\"example\"></p>\n\n<pre><code>While evaluating the expression tree we replace the value at a node with any operation OP by evaluating LEFTCHILD (OP) RIGHTCHILD\n\nHere, the expression will be evaluated as 20 - 10 = 10 (FOR \u2018-\u2019), then \u2018-\u2019 will be replaced by 10 (symbolic), then we evaluate for node\u2019+\u2019, 10 + 10 = 20.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases. Then the test cases follow.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/eval1-6590.png\" alt=\"example\"></p>\n\n<pre><code>+\n- -\n20 10 30 10\n-1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation:</h4>\n\n<pre><code>Level 1:\nThe root node of the tree is \u2018+\u2019.\n\nLevel 2:\nLeft child of \u2018+\u2019 = \u2018-\u2019\nRight child of \u2018+\u2019 = \u2018-\u2019\n\nLevel 3:\nLeft child of \u2018-\u2019 = 20\nRight child of \u2018-\u2019 = 10\nLeft child of \u2018-\u2019 = 30\nRight child of \u2018-\u2019 = 10\n\nLevel 4:\nLeft child of 20 = null (-1)\nRight child of 20 = null(-1)\nLeft child of 10 = null (-1)\nRight child of 10 = null (-1)\nLeft child of 30 = null (-1)\nRight child of 30 = null (-1)\nLeft child of 10 = null (-1)\nRight child of 10 = null (-1)\n\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1). \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree.\n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n+ - - 20 10 30 10 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the output will be the evaluated value for the expression tree.\n\nThe output for each test case will be in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 2047\n1 &lt;= data &lt;= 1000\n\nTime Limit: 1 second\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>3\n+ 10 - -1 -1 20 10 -1 -1 -1 -1\n+ - - 20 10 30 10 -1 -1 -1 -1 -1 -1 -1 -1\n/ * 1 20 10 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>20\n30\n200\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h4>\n\n<p><img src=\"https://files.codingninjas.in/eval3-6588.png\" alt=\"Sample Input 1\"></p>\n\n<pre><code>For the first test case, the equation is (10 + (20 - 10)) which will be evaluated to 20.\n\nFor the second test case, the equation is ((20 - 10) + (30 - 10)) which will be evaluated to 30.\n\nFor the third test case, the equation is ((20 * 10) / 1) which will be evaluated to 200.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4\n+ 5 2 -1 -1 -1 -1\n- 5 2 -1 -1 -1 -1\n* 5 2 -1 -1 -1 -1\n/ 5 2 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>7\n3\n10\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an expression tree, evaluate the expression it represents. An expression tree is a binary tree where leaf nodes hold integer values, and internal nodes represent mathematical operations (+, -, *, /). Your task is to traverse the tree and compute the final result, considering the floor of division (a/b).",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 2047",
                    "1 <= data <= 1000",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "+ 10 - -1 -1 20 10 -1 -1 -1 -1",
                        "output": "20",
                        "explanation": "The expression is (10 + (20 - 10)), which evaluates to 20."
                    },
                    {
                        "input": "+ - - 20 10 30 10 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "30",
                        "explanation": "The expression is ((20 - 10) + (30 - 10)), which evaluates to 30."
                    },
                    {
                        "input": "/ * 1 20 10 -1 -1 -1 -1 -1 -1",
                        "output": "200",
                        "explanation": "The expression is ((20 * 10) / 1), which evaluates to 200."
                    },
                    {
                        "input": "+ 5 2 -1 -1 -1 -1",
                        "output": "7",
                        "explanation": null
                    },
                    {
                        "input": "- 5 2 -1 -1 -1 -1",
                        "output": "3",
                        "explanation": null
                    },
                    {
                        "input": "* 5 2 -1 -1 -1 -1",
                        "output": "10",
                        "explanation": null
                    },
                    {
                        "input": "/ 5 2 -1 -1 -1 -1",
                        "output": "2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to reach out to each node and evaluate the expression at that node.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}