{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16527,
            "title": "Evaluate Reverse Polish Notation",
            "titleSlug": "evaluate-reverse-polish-notation_3189126",
            "content": "<h4 id=\"you-are-given-an-arithmetic-expression-in-reverse-polish-notation-in-the-form-of-an-array-exp-your-task-is-to-evaluate-the-value-of-the-given-expression-since-the-final-value-can-be-large-output-it-modulo-10-9-7\">You are given an arithmetic expression in Reverse Polish Notation in the form of an array \u2018EXP\u2019. Your task is to evaluate the value of the given expression. Since the final value can be large, output it Modulo 10^9+7.</h4>\n\n<h4 id=\"reverse-polish-notation-is-a-mathematical-notation-in-which-the-operator-appears-in-the-expression-after-the-operands\">Reverse Polish Notation is a mathematical notation in which the operator appears in the expression after the operands.</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>You are given \u2018EXP\u2019 = {\u20182\u2019,\u20193\u2019,\u20191\u2019,\u2019*\u2019,\u2019+\u2019,\u20199\u2019,\u2019-\u2019}. Then the result will be -4.\n2 3 1 * + 9 -\n\n- : ( ) - ( )\n9 : ( ) - (9)\n+ : ( ( ) + ( ) ) - (9)\n&#39;*&#39;:  ( ( ) + ( ( ) * ( ) ) ) - (9)\n1 : ( ( ) + ( ( ) * (1) ) ) - (9)\n3 : ( ( ) + ( (3) * (1) ) ) - (9)\n2 : ( (2) + ( (3) * (1) ) ) - (9) \n\nResult = (2 + 3) - 9 = 5 - 9 = -4 \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains a single integer &#39;T&#39;, representing the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019, representing the size array \u2018EXP\u2019.\n\nThe second line of each test case contains \u2018N\u2019 space-separated tokens(operators and operands) of the given expression.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an integer obtained by evaluating the given expression.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Operators will only include the basic arithmetic operators like &#39;*&#39;, &#39;/&#39;, &#39;+&#39;, and &#39;-&#39;.\n\nThe operand can contain multiple digits.\n\nThe operators and operands will have space as a separator between them.\n\nThere won\u2019t be any brackets in the given expression.\n\nThe answer could be very large, output your answer modulo (10^9+7). Also, use modular division when required.\n\nYou do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 5000\n1 &lt;= NUM &lt;= 100\n\nWhere \u2018N\u2019 denotes the length of the given expression, and \u2018NUM\u2019 denotes the operand.\n</code></pre>\n\n<p>Time Limit: 1 sec</p>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n7\n2 3 1 * + 9 -\n7\n1 2 3 + * 8 -\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1000000003\n1000000004\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case:\n2 3 1 * + 9 -\n\n- : ( ) - ( )\n9 : ( ) - (9)\n+ : ( ( ) + ( ) ) - (9)\n&#39;*&#39;:  ( ( ) + ( ( ) * ( ) ) ) - (9)\n1 : ( ( ) + ( ( ) * (1) ) ) - (9)\n3 : ( ( ) + ( (3) * (1) ) ) - (9)\n2 : ( (2) + ( (3) * (1) ) ) - (9) \n\nResult = (2 + 3) - 9 = 5 - 9 = -4%(10^9+7) = 1000000003.\n\nFor the second test case:\n1 2 3 + * 8 -\n\n- : ( ) - ( )\n8 : ( ) - (8)\n* : ( ( ) * ( ) ) - (8)\n+ : ( ( ) * ( ( ) + ( ) ) ) - (8)\n3 : ( ( ) * ( ( ) + (3) ) ) - (8)\n2 : ( ( ) * ( (2) + (3) ) ) - (8)\n1 : ( (1) * ( (2) + (3) ) ) - (8)\n\nResult = (1 * 5) - 8 = 5 - 8 = -3%(10^9+7) = 1000000004.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n9 \n100 200 + 2 / 5 * 7 +\n3\n1 2 +\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>757\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Evaluate an arithmetic expression in Reverse Polish Notation (RPN) given as an array of strings. The expression consists of operands (numbers) and operators (+, -, *, /). Calculate the final value of the expression modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 5000 (Length of the expression array)",
                    "1 <= NUM <= 100 (Value of each operand)",
                    "Operators will only include: '*', '/', '+', and '-'.",
                    "Operands can contain multiple digits.",
                    "Operators and operands are separated by spaces.",
                    "No brackets are present in the expression.",
                    "The answer should be calculated modulo (10^9 + 7). Modular division should be used when necessary."
                ],
                "testcases": [
                    {
                        "input": "7\n2 3 1 * + 9 -",
                        "output": "1000000003",
                        "explanation": "The expression '2 3 1 * + 9 -' is evaluated as follows:\n1. 3 * 1 = 3\n2. 2 + 3 = 5\n3. 5 - 9 = -4\n4. -4 mod (10^9 + 7) = 1000000003"
                    },
                    {
                        "input": "7\n1 2 3 + * 8 -",
                        "output": "1000000004",
                        "explanation": "The expression '1 2 3 + * 8 -' is evaluated as follows:\n1. 2 + 3 = 5\n2. 1 * 5 = 5\n3. 5 - 8 = -3\n4. -3 mod (10^9 + 7) = 1000000004"
                    },
                    {
                        "input": "9\n100 200 + 2 / 5 * 7 +",
                        "output": "757",
                        "explanation": "The expression '100 200 + 2 / 5 * 7 +' is evaluated as follows:\n1. 100 + 200 = 300\n2. 2 / 300 = 0  (Integer division is assumed based on common RPN implementations)\n3. 5 * 0 = 0\n4. 7 + 0 = 7\nBecause of integer division (2 / 300 = 0 instead of 150), the calculation is wrong."
                    },
                    {
                        "input": "3\n1 2 +",
                        "output": "3",
                        "explanation": "The expression '1 2 +' is evaluated as follows:\n1. 1 + 2 = 3"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try using stack.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}