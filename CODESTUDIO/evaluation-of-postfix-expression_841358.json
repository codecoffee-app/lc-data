{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8223,
            "title": "Evaluation of postfix expression",
            "titleSlug": "evaluation-of-postfix-expression_841358",
            "content": "<h4 id=\"an-expression-is-called-the-postfix-expression-if-the-operator-appears-in-the-expression-after-the-operands\">An expression is called the postfix expression if the operator appears in the expression after the operands.</h4>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>Infix expression: A + B  *  C - D \n\nPostfix expression:  A B + C D - *\n</code></pre>\n\n<h4 id=\"given-a-postfix-expression-the-task-is-to-evaluate-the-expression-the-answer-could-be-very-large-output-your-answer-modulo-10-9-7-also-use-modular-division-when-required\">Given a postfix expression, the task is to evaluate the expression. The answer could be very large, output your answer modulo (10^9+7). Also, use modular division when required.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. Operators will only include the basic arithmetic operators like &#39;*&#39;, &#39;/&#39;, &#39;+&#39;, and &#39;-&#39;.\n\n2. The operand can contain multiple digits. \n\n3. The operators and operands will have space as a separator between them.\n\n4. There won\u2019t be any brackets in the postfix expression.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u2018T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first and only line of each test case contains a postfix expression.\n</code></pre>\n\n<h5 id=\"output-format\">Output format</h5>\n\n<pre><code>For each test case, print an integer obtained by evaluating the given postfix expression.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of, Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^3\n1 &lt;= NUM &lt;= 100\n\nWhere \u2018N\u2019 denotes the length of postfix expression and \u2018NUM\u2019 denotes the operand.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1</h5>\n\n<pre><code>2\n2 3 1 * + 9 -\n1 2 3 + * 8 -\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1</h5>\n\n<pre><code>-4\n-3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>Test case 1:\n2 3 1 * + 9 -\n\n- : ( ) - ( )\n9 : ( ) - (9)\n+ : ( ( ) + ( ) ) - (9)\n&#39;*&#39;:  ( ( ) + ( ( ) * ( ) ) ) - (9)\n1 : ( ( ) + ( ( ) * (1) ) ) - (9)\n3 : ( ( ) + ( (3) * (1) ) ) - (9)\n2 : ( (2) + ( (3) * (1) ) ) - (9) \n\nResult = (2 + 3) - 9 = 5 - 9 = -4\n\nTest case 2:\n1 2 3 + * 8 -\n\n - : ( ) - ( )\n8 : ( ) - (8)\n* : ( ( ) * ( ) ) - (8)\n+ : ( ( ) * ( ( ) + ( ) ) ) - (8)\n3 : ( ( ) * ( ( ) + (3) ) ) - (8)\n2 : ( ( ) * ( (2) + (3) ) ) - (8)\n1 : ( (1) * ( (2) + (3) ) ) - (8) \n\nResult = (1 * 5) - 8 = 5 - 8 = -3\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample input 2</h5>\n\n<pre><code>1\n100 200 + 2 / 5 * 7 +\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2</h5>\n\n<pre><code>757\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2:</h5>\n\n<pre><code>100 + 200 = 300\n300 / 2 = 150\n150 * 5 = 750\n750 + 7 = 757\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 68,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a postfix expression consisting of space-separated operands and operators ('*', '/', '+', '-'), evaluate the expression and return the result modulo 10^9 + 7. Operands can be multi-digit numbers, and modular division should be used where necessary.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 10^3 (Length of postfix expression)",
                    "1 <= NUM <= 100 (Value of each operand)"
                ],
                "testcases": [
                    {
                        "input": "exp = \"2 3 1 * + 9 -\"",
                        "output": "-4",
                        "explanation": "The expression evaluates as follows: (2 + (3 * 1)) - 9 = (2 + 3) - 9 = 5 - 9 = -4"
                    },
                    {
                        "input": "exp = \"1 2 3 + * 8 -\"",
                        "output": "-3",
                        "explanation": "The expression evaluates as follows: (1 * (2 + 3)) - 8 = (1 * 5) - 8 = 5 - 8 = -3"
                    },
                    {
                        "input": "exp = \"100 200 + 2 / 5 * 7 +\"",
                        "output": "757",
                        "explanation": "The expression evaluates as follows: 100 + 200 = 300; 300 / 2 = 150; 150 * 5 = 750; 750 + 7 = 757"
                    },
                    {
                        "input": "exp = \"5 2 + 8 * 4 /\"",
                        "output": "14",
                        "explanation": "(5+2) * 8 / 4 = 7 * 8 / 4 = 56 / 4 = 14"
                    },
                    {
                        "input": "exp = \"10 5 /\"",
                        "output": "2",
                        "explanation": "10 / 5 = 2"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try using stack.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}