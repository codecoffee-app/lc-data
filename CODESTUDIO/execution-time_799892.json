{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8038,
            "title": "Execution Time ",
            "titleSlug": "execution-time_799892",
            "content": "<h4 id=\"this-time-we-are-executing-a-program-containing-n-functions-on-a-single-threaded-cpu-each-function-has-a-unique-id-between-0-and-n-1-and-each-time-it-starts-or-ends-we-write-a-log-with-the-id-whether-it-started-or-ended-and-the-timestamp\">This time we are executing a program containing \u2018N\u2019 functions on a single-threaded CPU. Each function has a unique \u2018ID\u2019 between 0 and (N-1) and each time it starts or ends, we write a log with the ID, whether it started or ended, and the TIMESTAMP.</h4>\n\n<h4 id=\"you-are-given-a-2d-array-of-integers-containing-information-about-l-logs-where-ith-column-represents-the-ith-log-message-each-column-contains-3-rows-to-describe-the-ith-log-where\">You are given a 2D array of integers containing information about \u2018L\u2019 logs where ith column represents the ith log message. Each column contains 3 rows to describe the ith log where,</h4>\n\n<pre><code>1st Row - represents the ID of the function.\n\n2nd Row - represents whether the function has started or ended where 1 denotes the start and -1 denotes the end.\n\n3rd Row - represents the TIMESTAMP of the log.\n</code></pre>\n\n<h4 id=\"you-are-required-to-return-an-array-where-the-value-at-the-ith-index-represents-the-exclusive-time-for-the-function-with-id-i\">You are required to return an array where the value at the ith index represents the exclusive time for the function with ID \u2018i\u2019.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. The exclusive time of a function is the sum of execution times for all calls of that function.\n\n2. A function can be called multiple times, possibly recursively.\n\n3. No two events will happen at the same time where an event denotes either a start or end of a function call. This basically means no two logs have the same timestamp. \n\n4. Each function has an end log for each start log. \n</code></pre>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>Consider the following input\n0 1 1 1 2 2 1 0\n1 1 1 -1 1 -1 -1 -1\n0 2 5 7 8 10 11 14\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/exclusive-5761.JPG\" alt=\"alt-text\"></p>\n\n<pre><code>Thus, we return [5, 7, 3] as a process with ID 0 has taken 5 units of time and process with ID 1 has taken 7 units of time and process ID 2 has taken 3 units of time. A process\u2019s exclusive time is the sum of exclusive times for all function calls in the program. As process Id 1 has called itself so exclusive time is the sum of exclusive times(5 + 2).\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer \u2018T\u2019, representing the number of test cases or queries to be run. \nThen the T test cases follow.\n\nThe first line of each test case contains two single space-separated integers \u2018N\u2019 and \u2018L\u2019, representing the number of unique functions and number of logs respectively.\n\nThe second line of each test case contains \u2018L\u2019 single space-separated integers representing the function ID for each log.\n\nThe third line of each test case contains \u2018L\u2019 single space-separated integers(1 or -1), where 1 represent a function that has started execution and -1 represent a function that has ended the execution\n\nThe fourth line of each test case contains L single space-separated integers, representing the \u2018TIMESTAMP.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print &#39;N&#39; single space-separated integers, representing the exclusive time of each function in a single line.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10 ^ 2\n2 &lt;= L &lt;= 5 * (10 ^ 2) and L is even.\n0 &lt;= TIMESTAMP &lt;= 10 ^ 9\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n2 4\n0 1 1 0\n1 1 -1 -1\n0 2 5 6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3 4\n</code></pre>\n\n<h5 id=\"explanation-for-input-1\">Explanation for Input 1:</h5>\n\n<pre><code>Function 0 starts at the beginning of timestamp 0, then it executes for 2 units of time and reaches the end of timestamp 1. \n\nFunction 1 starts at the beginning of timestamp 2, executes for 4 units of time, and ends at the end of timestamp 5. \n\nFunction 0 resumes execution at the beginning of timestamp 6 and executes for 1 unit of time.  \n\nSo function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n1 6\n0 0 0 0 0 0\n1 1 -1 1 -1 -1\n0 2 5 6 6 7\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>8\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 18,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given logs from a single-threaded CPU executing 'N' functions, where each function has a unique ID from 0 to N-1. Each log records the function ID, whether it started (1) or ended (-1), and the timestamp.\n\nGiven a 2D array representing 'L' logs, where the i-th column describes the i-th log:\n\n*   Row 1: Function ID\n*   Row 2: 1 for start, -1 for end\n*   Row 3: Timestamp\n\nReturn an array of length 'N', where the i-th element represents the exclusive execution time of the function with ID 'i'. The exclusive time of a function is the sum of the durations of all its executions.\n\nImportant notes:\n\n1.  Exclusive time is the total execution time of a function across all its calls.\n2.  Functions can be called multiple times, possibly recursively.\n3.  No two events happen simultaneously (no two logs have the same timestamp).\n4.  Each function start has a corresponding end log.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 100 (Number of unique functions)",
                    "2 <= L <= 500 and L is even (Number of logs)",
                    "0 <= TIMESTAMP <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "2 4\n0 1 1 0\n1 1 -1 -1\n0 2 5 6",
                        "output": "3 4",
                        "explanation": "Function 0 starts at timestamp 0 and executes for 2 time units until timestamp 1. Function 1 starts at timestamp 2 and executes for 4 time units until timestamp 5. Function 0 resumes at timestamp 6 and executes for 1 time unit. Total execution time for function 0 is 2 + 1 = 3, and for function 1 is 4."
                    },
                    {
                        "input": "1 6\n0 0 0 0 0 0\n1 1 -1 1 -1 -1\n0 2 5 6 6 7",
                        "output": "8",
                        "explanation": "Function 0 starts at timestamp 0 and executes until timestamp 2. Then it starts again at timestamp 5 and executes until timestamp 6. Finally, it restarts at timestamp 6 and executes until timestamp 7. The total exclusive time is (2-0) + (6-5) + (7-6) = 2 + 1 + 1 + (6-2)= 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Since, the function which is entered at the end finishes first and the one which is entered first ends at the last position. Can you think of any data structure which works like this?</p>",
            "<p>Instead of doing this increment step by step, we can directly use the difference between the next function's start/end time and the current function's start/end time.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}