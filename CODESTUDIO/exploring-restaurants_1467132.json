{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12621,
            "title": "Exploring Restaurants",
            "titleSlug": "exploring-restaurants_1467132",
            "content": "<h4 id=\"rohan-got-his-new-girlfriend-so-he-has-to-take-her-to-a-restaurant-for-a-date-rohan-is-confused-about-taking-her-to-a-safe-and-sound-restaurant-so-he-asked-her-girlfriend-for-suggestions\">Rohan got his new girlfriend. So he has to take her to a restaurant for a date. Rohan is\ufeff\ufeff confused about taking her to a safe and sound restaurant. So, he asked her girlfriend for suggestions.</h4>\n\n<h4 id=\"rohan-s-girlfriend-got-a-map-in-which-she-has-marked-n-safe-points-having-unique-id-i-ranging-from-0-to-n-1\">Rohan\u2019s girlfriend got a map in which she has marked \u2018N\u2019 safe points having unique id \u2018I\u2019 (ranging from 0 to N - 1).</h4>\n\n<h4 id=\"the-safe-points-are-placed-on-the-map-at-different-levels-each-level-can-have-one-or-more-safe-points-and-at-the-same-time-each-safe-point-can-have-one-or-more-restaurants\">The safe points are placed on the map at different levels. Each level can have one or more safe points and at the same time, each safe point can have one or more restaurants.</h4>\n\n<h4 id=\"safe-points-have-roads-connecting-them-rohan-s-girlfriend-points-to-the-safe-point-with-id-i-and-a-level-l\">Safe points have roads connecting them. Rohan\u2019s girlfriend points to the safe point with id = \u2018I\u2019 and a level \u2018L\u2019</h4>\n\n<h4 id=\"rohan-has-to-take-the-names-of-the-restaurants-which-were-present-in-the-lth-level-safe-point-from-the-marked-safe-point-having-id-i-but-having-roads-connecting-them-with-the-pointed-safe-point\">Rohan has to take the names of the restaurants which were present in the Lth level safe point from the marked safe point having id = \u2018I\u2019 (but having roads connecting them with the pointed safe point).</h4>\n\n<h4 id=\"your-task-is-to-help-rahul-in-making-the-list-of-restaurants\">Your task is to help Rahul in making the list of restaurants.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The list should be in the order of increasing frequency of restaurant name. If the frequency of restaurants is the same then order them in alphabetical order.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019, which denotes the number of test cases or queries to be run. Then the test cases are as follows.\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the number of safe points.\n\nThe next alternate \u2018N\u2019 lines contain integer \u2018X\u2019 denoting the number of strings in a single array followed by space-separated strings denoting the restaurant names.\n\nThe next alternate \u2018N\u2019 lines contain integer \u2018Y\u2019 denoting the number of integers in a single array followed by space-separated integers denoting the link between the safe points.\n\nLast line contains two space-separated integers \u201cId\u201d and \u201clevel\u201d (separated by space).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, print a single containing space-separated strings denoting the restaurant names.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything, It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 20\n1 &lt;= restaurants[i].length OR (\u2018X\u2019) &lt;= 10\n1 &lt;= restaurants[i][j].length &lt;= 8\n0 &lt;= safePoints[i].length OR (\u2018Y\u2019) &lt; N\n0 &lt;= safePoints[i][j] &lt; N\n0 &lt;= id &lt; N\n1 &lt;= level &lt; N\n\nWhere \u2018T\u2019 denotes the number of test cases, \u2018N\u2019 denotes the number of safe points, \u2018i\u2019 and \u2018j\u2019 denote the ith and jth index respectively.  \n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1</h5>\n\n<pre><code>2\n2\n5\nT M B W H\n3\nX E X\n1\n1 \n1\n0\n0 1\n4\n2\nJ D\n3\nV B T\n1\nC\n1\nA\n2\n3 2\n2\n3 2\n3\n0 1 3\n3\n0 1 2\n0 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>E X\nA C\n</code></pre>\n\n<h4 id=\"explanation-for-sample-1\">Explanation for Sample 1:</h4>\n\n<pre><code>For the 1st case:\n</code></pre>\n\n<p><img src= \"https://files.codingninjas.in/pic2-9338.png\">\n</br></p>\n\n<pre><code>You have id = 0 (blue colour in the figure) and level = 1(yellow colour in the figure) \nSafe point with id = 1 with restaurants \u2018E\u2019 \u2018X\u2019 \nSo output will be the array containing strings \u2018E\u2019 \u2018X\u2019.\n\u2018E\u2019 having frequency = 1\n\u2018X\u2019 having frequency = 2\n\n\nFor the 2nd case:\n</code></pre>\n\n<p><img src= \"https://files.codingninjas.in/pic1-9337.png\">\n</br></p>\n\n<pre><code>You have id = 0 (blue colour in the figure) and level = 1(yellow colour in the figure) \nSafe point with id = 3 with restaurants \u2018A\u2019 and with id = 2 with restaurants \u2018C\u2019\nSo output will be the array containing strings \u2018A\u2019 \u2018C\u2019.\nAll strings are having frequency = 1\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n1\nA\n2\nE S\n3\nV N Q\n2\nR F \n4\nB Y L I\n4\n3 2 1 4\n2\n0 4\n2\n4 0\n2\n0 4\n4\n2 3 1 0\n3 1 \n3\n3\nW M D\n4\nK J K Y\n3\nT F Q\n1\n1\n2\n0 2\n1\n1\n1 1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>A B I L Y\nD F M Q T W\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Rohan wants to take his new girlfriend to a restaurant for a date, but he's unsure which one is safe and sound. His girlfriend provides him with a map marking 'N' safe points (numbered 0 to N-1). These safe points are located at different levels, with each level possibly containing multiple safe points, and each safe point having multiple restaurants. The safe points are interconnected by roads.\n\nRohan's girlfriend identifies a specific safe point with id 'I' and a level 'L'. Rohan needs to find the names of the restaurants located at level 'L' in the safe points that are directly connected to the safe point with id 'I'.\n\nYour task is to help Rohan create a list of these restaurant names, sorted first by increasing frequency and then alphabetically in case of ties.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 20",
                    "1 <= restaurants[i].length (or \u2018X\u2019) <= 10",
                    "1 <= restaurants[i][j].length <= 8",
                    "0 <= safePoints[i].length (or \u2018Y\u2019) < N",
                    "0 <= safePoints[i][j] < N",
                    "0 <= id < N",
                    "1 <= level < N",
                    "Where \u2018T\u2019 denotes the number of test cases, \u2018N\u2019 denotes the number of safe points, \u2018i\u2019 and \u2018j\u2019 denote the ith and jth index respectively.",
                    "Time limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "2\n2\n5\nT M B W H\n3\nX E X\n1\n1 \n1\n0\n0 1\n4\n2\nJ D\n3\nV B T\n1\nC\n1\nA\n2\n3 2",
                        "output": "E X\nA C",
                        "explanation": "For the 1st case:\nYou have id = 0 and level = 1. Safe point with id = 1 with restaurants \u2018E\u2019 \u2018X\u2019. So output will be the array containing strings \u2018E\u2019 \u2018X\u2019. 'E' having frequency = 1 and 'X' having frequency = 2.\n\nFor the 2nd case:\nYou have id = 0 and level = 1. Safe point with id = 3 with restaurants \u2018A\u2019 and with id = 2 with restaurants \u2018C\u2019. So output will be the array containing strings \u2018A\u2019 \u2018C\u2019. All strings are having frequency = 1."
                    },
                    {
                        "input": "2\n5\n1\nA\n2\nE S\n3\nV N Q\n2\nR F \n4\nB Y L I\n4\n3 2 1 4\n2\n0 4\n2\n4 0\n2\n0 4\n4\n2 3 1 0\n3 1 \n3\n3\nW M D\n4\nK J K Y\n3\nT F Q\n1\n1\n2\n0 2\n1\n1\n1 1 ",
                        "output": "A B I L Y\nD F M Q T W",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of using Breadth First Search?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}