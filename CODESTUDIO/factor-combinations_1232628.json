{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10539,
            "title": "Factor Combinations",
            "titleSlug": "factor-combinations_1232628",
            "content": "<h4 id=\"you-are-given-a-positive-integer-n-find-all-the-unique-combinations-of-factors-of-the-given-number-n-the-product-of-the-factors-in-each-combination-should-be-n\">You are given a positive integer \u2018N\u2019. Find all the unique combinations of factors of the given number \u2018N\u2019. The product of the factors in each combination should be \u2018N\u2019.</h4>\n\n<h4 id=\"you-should-return-a-list-of-combinations-of-factors-in-each-combination-factors-must-be-sorted-in-non-decreasing-order-all-combinations-must-be-placed-in-lexicographical-order-in-the-list-see-the-example-for-more-clarity\">You should return a list of combinations of factors. In each combination, factors must be sorted in non-decreasing order. All combinations must be placed in lexicographical order in the list. See the example for more clarity.</h4>\n\n<h4 id=\"note\">Note</h4>\n\n<pre><code>1. Factors should be strictly greater than 1 and strictly less than \u2018N\u2019.\n\n2. If there is no such possible combination of factors, then return an empty list. \n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Consider the positive integer \u2018N\u2019 = 12.\nThen, we can observe that -:\n12 = 2 * 2 * 3\n12 = 2 * 6\n12 = 3 * 4\n\ni.e,  possible combinations of factors are [2, 2, 3], [2, 6], [3, 4].\nThus, we should return list [[2,2,3], [2,6], [3, 4]].  Note that in this list all combinations are sorted in non-decreasing order, and all the combinations in the list are placed in the lexicographical order.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. then \u2018T\u2019 test cases follow.\n\nThe first and the only line of each test case consist of a single integer \u2018N\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, if there are \u2018K\u2019 such possible combinations of factors, then in the first line of the output of the test case print a single integer \u2018K\u2019, and then print \u2018K\u2019 lines each of them represents a combination of factors of a given integer in non-decreasing order. \n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n2 &lt;= N &lt;= 1000\n\nWhere \u2018T\u2019 is the total number of test cases, and  \u2018N\u2019 is the given integer.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\n12\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0\n3\n2 2 3\n2 6\n3 4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nThe integer 5 is a prime number, and it has no factors. Note, we consider that factors should be strictly greater than 1 and strictly less than \u2018N\u2019.\n\nTest case 2:\nSee the problem statement for an explanation.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n16\n4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4\n2 2 2 2 \n2 2 4 \n2 8 \n4 4 \n1\n2 2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer 'N', find all unique combinations of its factors. The product of factors in each combination must equal 'N'. Factors should be strictly greater than 1 and strictly less than 'N'. The combinations should be sorted in non-decreasing order within each combination, and the combinations themselves should be in lexicographical order in the final list. Return an empty list if no such combinations exist.",
                "constraints": [
                    "1 <= T <= 50",
                    "2 <= N <= 1000",
                    "Factors should be strictly greater than 1 and strictly less than \u2018N\u2019."
                ],
                "testcases": [
                    {
                        "input": "n = 5",
                        "output": "0",
                        "explanation": "The integer 5 is a prime number, and it has no factors strictly between 1 and 5."
                    },
                    {
                        "input": "n = 12",
                        "output": "3\n2 2 3\n2 6\n3 4",
                        "explanation": "The factors of 12 (excluding 1 and 12) are 2, 3, 4, and 6. The combinations are [2, 2, 3], [2, 6], and [3, 4]."
                    },
                    {
                        "input": "n = 16",
                        "output": "4\n2 2 2 2\n2 2 4\n2 8\n4 4",
                        "explanation": "The factors of 16 (excluding 1 and 16) are 2, 4, and 8. The combinations are [2, 2, 2, 2], [2, 2, 4], [2, 8], and [4, 4]."
                    },
                    {
                        "input": "n = 4",
                        "output": "1\n2 2",
                        "explanation": "The factor of 4 is 2. the combinations are [2, 2]."
                    },
                    {
                        "input": "n = 2",
                        "output": "0",
                        "explanation": "There are no factors strictly between 1 and N."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Incrementally find each combination using backtracking.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}