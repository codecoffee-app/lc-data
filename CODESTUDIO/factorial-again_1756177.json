{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13640,
            "title": "Factorial Again",
            "titleSlug": "factorial-again_1756177",
            "content": "<h4 id=\"ninja-kate-has-finally-calmed-down-and-decides-to-forgive-little-ninja-deepu-but-she-will-not-forgive-him-just-like-that-finally-she-agrees-to-forgive-him-because-he-can-solve-a-mathematical-question-for-her\">Ninja Kate has finally calmed down and decides to forgive Little Ninja Deepu, but she will not forgive him just like that. Finally, she agrees to forgive him because he can solve a mathematical question for her.</h4>\n\n<h4 id=\"she-gives-ninja-deepu-a-large-number-n-and-a-prime-number-p-and-asks-him-to-calculate-3-n-3-n-p\">She gives Ninja Deepu a large number \u2018N\u2019 and a prime number \u2018P\u2019 and asks him to calculate ((3 * \u2018N\u2019 ) ! / ( 3! ^ \u2018N\u2019 ) )% \u2018P.\u2019</h4>\n\n<h4 id=\"your-task-is-to-help-little-ninja-deepu-get-back-together-with-ninja-kate\">Your task is to help Little Ninja Deepu get back together with Ninja Kate.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Given \u2018N\u2019 = 2, \u2018P\u2019 = 11. \nThen the answer will be 9. Because (6!) / (6 ^ 2) = 20, and 20 remainder 11 is 9. Therefore the answer is 9.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nNext, \u2018T\u2019 lines contain two space-separated integers \u2018N,\u2019 where \u2018N\u2019 is the number given and \u2018P,\u2019 denoting the prime-number given to us.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, You are supposed to return the answer.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= \u2018N\u2019 &lt;= 10 ^ 4\n1 &lt;= \u2018P\u2019 &lt;= 10 ^ 5\n\nTime Limit: 1sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n3 11 \n2 11\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>8\n9 \n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>In the first test case, the answer is 8 because (9! / 6 ^ 3) is equal to 362880 / 216, which is equal to 1680, and 1680 when divided by 11 leaves the remainder 8. Therefore 8 is the final answer.\n\nIn the second test case, the answer is 9 because (6! / 6 ^ 2) is equal to 720 / 36, which is equal to 20, and 20, when divided by 11, leaves the remainder 9. Therefore 9 is the final answer.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja Kate challenges Little Ninja Deepu to a mathematical problem to earn her forgiveness. Deepu is given a large number 'N' and a prime number 'P'. His task is to calculate ((3 * N)! / (6^N)) % P. Help Deepu solve the problem and reunite with Ninja Kate.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10 ^ 4",
                    "1 <= P <= 10 ^ 5",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "3 11",
                        "output": "8",
                        "explanation": "(9! / 6^3) = 362880 / 216 = 1680.  1680 % 11 = 8"
                    },
                    {
                        "input": "2 11",
                        "output": "9",
                        "explanation": "(6! / 6^2) = 720 / 36 = 20.  20 % 11 = 9"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we use modular arithmetic?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            },
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}