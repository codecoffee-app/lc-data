{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9215,
            "title": "Family Structure",
            "titleSlug": "family-structure_981243",
            "content": "<h4 id=\"aakash-is-a-member-of-ninja-club-he-has-a-weird-family-structure-every-male-member-m-gives-birth-to-a-male-child-first-and-then-a-female-child-whereas-every-female-f-member-gives-birth-to-a-female-child-first-and-then-to-a-male-child-aakash-analyses-this-pattern-and-wants-to-know-what-will-be-the-kth-child-in-his-nth-generation-can-you-help-him\">Aakash is a member of Ninja club. He has a weird family structure. Every male member (M) gives birth to a male child first and then a female child, whereas every female (F) member gives birth to a female child first and then to a male child. Aakash analyses this pattern and wants to know what will be the Kth child in his Nth generation. Can you help him?</h4>\n\n<pre><code>A sample generation tree is shown, where \u2018M\u2019 denotes the male member and \u2018F\u2019 denotes the female member. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/family-6613.png\" alt=\"\"></p>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>The generation tree starts with a male member i.e. Aakash. \nEvery member has exactly two children. \nThe given N and K will always be valid. \n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases. Then the test cases follow.\nThe first and the only line of each test case contains two space-separated integers \u2018N\u2019 and \u2018K\u2019 denoting the generation number and position of the child in Nth generation, respectively. \n</code></pre>\n\n<h4 id=\"output-format\">Output Format</h4>\n\n<pre><code>For each test case, print the gender of the Kth child in the Nth generation. If the gender is male, print \u201cMale\u201d else print \u201cFemale\u201d (without quotes). \nThe output of each test case is printed in a separate line. \n</code></pre>\n\n<h4 id=\"note\">Note</h4>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 50\n1 &lt;= K &lt;= 2^(N - 1)\nwhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is generation number and \u2018K\u2019 is the position of the child in the Nth generation. \n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n2 2 \n3 4  \n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>Female\nMale\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h4>\n\n<pre><code>Test Case 1:  2nd child of the 2nd generation is shown in green colour. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/family-6614.png\" alt=\"\"></p>\n\n<pre><code>Test Case 2:  4th child of the 3rd generation is shown in green colour. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/fa-6615.png\" alt=\"\"></p>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>3\n5 1 \n3 1\n4 4  \n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>Male\nMale\nMale \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 101,
            "dislikes": "NA",
            "rephrased": {
                "body": "Aakash belongs to a Ninja club with a unique family structure. Male members always have a male child first, followed by a female child. Female members have a female child first, followed by a male child. Given the generation number (N) and the position (K) of a child in that generation, determine the gender of that child, starting with Aakash (a male) in the first generation.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 50",
                    "1 <= K <= 2^(N - 1)",
                    "T is the number of test cases",
                    "N is the generation number",
                    "K is the position of the child in the Nth generation."
                ],
                "testcases": [
                    {
                        "input": "2 2",
                        "output": "Female",
                        "explanation": "The second child of the second generation is Female."
                    },
                    {
                        "input": "3 4",
                        "output": "Male",
                        "explanation": "The fourth child of the third generation is Male."
                    },
                    {
                        "input": "5 1",
                        "output": "Male",
                        "explanation": "The first child of the fifth generation is Male."
                    },
                    {
                        "input": "3 1",
                        "output": "Male",
                        "explanation": "The first child of the third generation is Male."
                    },
                    {
                        "input": "4 4",
                        "output": "Male",
                        "explanation": "The fourth child of the fourth generation is Male."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find a recursive based on the relation between generation number and position of the child in Nth generation.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(min(N, log(K)))\r\n    Space Complexity: O(N)\r\n    \r\n    Where N is the generation number and K is the position of the child in the Nth generation. \r\n*/\r\n\r\nstring kthChildNthGeneration(int n, long long int k)\r\n{\r\n\t// Base Condition\r\n\tif(n == 1 or k == 1)\r\n\t{\r\n\t\treturn \"Male\";\r\n\t}\r\n\t// Parent of the Kth child of Nth generation\r\n\tlong long int par = (k + 1)/2;\r\n\r\n\t// Recursively find the gender of the parent\r\n\tstring parGender = kthChildNthGeneration(n - 1, par);\r\n\r\n\t// If Kth child of Nth generation is the first child of its parent\r\n\tif(k == 2 * par - 1)\r\n\t{\r\n\t\treturn parGender;\r\n\t}\r\n\t// If Kth child of Nth generation is the second child of its parent\r\n\telse\r\n\t{\r\n\t\tif(parGender == \"Male\")\r\n\t\t{\r\n\t\t\treturn \"Female\";\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn \"Male\";\r\n\t\t}\r\n\t}\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n    \r\n    Where N is the generation number.\r\n'''\r\n\r\ndef kthChildNthGeneration(n, k):\r\n\r\n    # Base Condition\r\n    if(n == 1 or k == 1):\r\n        return \"Male\"\r\n\r\n    # Parent of the Kth child of Nth generation\r\n    par = (k + 1) // 2\r\n\r\n    # Recursively find the gender of the parent\r\n    parGender = kthChildNthGeneration(n - 1, par)\r\n\r\n    # If Kth child of Nth generation is the first child of its parent\r\n    if(k == 2 * par - 1):\r\n        return parGender\r\n\r\n    # If Kth child of Nth generation is the second child of its parent\r\n    else:\r\n        if(parGender == \"Male\"):\r\n            return \"Female\"\r\n\r\n        else:\r\n            return \"Male\"",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(min(N, log(K)))\r\n    Space Complexity: O(N)\r\n\r\n    Where N is the generation number and K is the position of the child in the Nth generation. \r\n*/\r\n\r\npublic class Solution {\r\n\r\n\tpublic static String kthChildNthGeneration(int n, long k) {\r\n\t\t\r\n\t\t// Base Condition\r\n\t\tif (n == 1 || k == 1) {\r\n\t\t\treturn \"Male\";\r\n\t\t}\r\n\t\t\r\n\t\t// Parent of the Kth child of Nth generation\r\n\t\tlong par = (k + 1) / 2;\r\n\r\n\t\t// Recursively find the gender of the parent\r\n\t\tString parGender = kthChildNthGeneration(n - 1, par);\r\n\r\n\t\t// If Kth child of Nth generation is the first child of its parent\r\n\t\tif (k == 2 * par - 1) {\r\n\t\t\treturn parGender;\r\n\t\t}\r\n\t\t\r\n\t\t// If Kth child of Nth generation is the second child of its parent\r\n\t\telse {\r\n\t\t\tif (parGender == \"Male\") {\r\n\t\t\t\treturn \"Female\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn \"Male\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}