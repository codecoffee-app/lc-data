{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10739,
            "title": "fasdf",
            "titleSlug": "fasdf_1263729",
            "content": "<h4 id=\"you-are-given-roots-of-two-binary-trees-root1-and-root2-you-need-to-merge-the-two-trees-into-a-new-binary-tree-the-merge-rule-is-that-if-the-two-nodes-overlap-then-the-sum-of-the-two-nodes-values-up-as-the-new-value-of-the-merged-node-otherwise-the-not-null-node-will-be-used-as-the-node-of-the-new-tree-your-task-is-to-return-the-merged-tree-i-e-head-of-the-new-tree\">You are given roots of two binary trees, \u2018ROOT1\u2019 and \u2018ROOT2\u2019. You need to merge the two trees into a new binary tree. The merge rule is that if the two nodes overlap, then the sum of the two nodes values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree. Your task is to return the merged tree i.e. head of the new tree.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The merging process must start from the root nodes of both trees.\n</code></pre>\n\n<h4 id=\"for-example\">For example,</h4>\n\n<pre><code>\u2018ROOT1\u2019 = [1, 2, -1, -1, 3, -1, -1]  \u2018ROOT2\u2019 = [3, -1, -1].\nThe final tree would look like : [3, 2, -1, -1, 3, -1, -1], and the output will be printed in a pre-order way: 4 2 3.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/final-tree-8397.png\" alt=\"\"></p>\n\n<h4 id=\"input-format\">Input format :</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nIn the next 2*T lines, the first line of each test case contains space-separated integers denoting the nodes of the first binary tree, where -1 indicates that the NULL pointer has been appointed to the previous node \n\nThe second line of each test case contains space-separated integers denoting the nodes of the second binary tree, where -1 indicates that the NULL pointer has been appointed to the previous node. \n\nThe input is given in a preorder way, that is, the node then left subtree, and then right subtree as shown in the example.\n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>For each test case, return the resultant binary tree in a pre-order way.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T  &lt;= 5\n1 &lt;= N &lt;= 10^3\n-10^3 &lt;= DATA &lt;= 10^3\n\nTime Limit: 1 second\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n1 2 3 -1 -1 -1 -1\n3 -1 -1\n1 2 -1 -1 -1\n1 -1 3 -1 -1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>4 2 3 \n2 2 3\n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>For the first test case:\nThe root node is 1 in \u2018root1\u2019 and  3 in \u2018root2\u2019, and the left child of \u2018root1\u2019 is 2, and the right child of \u2018root1\u2019 is 3. Therefore the resulting tree in preorder will be 4 2 3.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/final-tree-8397.png\" alt=\"\"></p>\n\n<pre><code>For the second test case:\nThe root node of root1 is 1 and for root2 is 1, the left child of root1 is 2, and right child is NULL, the left child of root2 is NULL, and the right child is 3; therefore, after merging trees, the preorder will be 2 2 3.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/final-tree-2-8398.png\" alt=\"\"></p>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n1 -1 -1\n68 -1 -1\n4 1 -1 -1 -1\n1 -1 2 -1 -1\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>69 \n5 1 2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the roots of two binary trees, `root1` and `root2`, merge them into a new binary tree. The merging process follows these rules:\n\n*   If nodes at the same position in both trees exist, their values are summed, and the resulting sum becomes the value of the corresponding node in the merged tree.\n*   If only one of the nodes exists, the existing node is used directly in the merged tree.\n\nReturn the root of the merged binary tree.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10^3",
                    "-10^3 <= DATA <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "root1=[1, 2, -1, -1, 3, -1, -1], root2=[3, -1, -1]",
                        "output": "4 2 3",
                        "explanation": "The root node is 1 in \u2018root1\u2019 and 3 in \u2018root2\u2019, so merged root becomes 4. The left child of \u2018root1\u2019 is 2, and \u2018root2\u2019 has no left child. So, 2 is taken as left node. The right child of \u2018root1\u2019 is 3 and \u2018root2\u2019 has no right node. Hence, resulting tree in preorder will be 4 2 3."
                    },
                    {
                        "input": "root1=[1, 2, -1, -1, -1], root2=[1, -1, 3, -1, -1]",
                        "output": "2 2 3",
                        "explanation": "The root node of root1 is 1 and for root2 is 1, so merged root becomes 2. The left child of root1 is 2, and root2 has no left child. So, 2 is taken as left node. The right child of root1 is NULL, and the right child of root2 is 3. Therefore, after merging trees, the preorder will be 2 2 3."
                    },
                    {
                        "input": "root1=[1, -1, -1], root2=[68, -1, -1]",
                        "output": "69",
                        "explanation": "The root node of root1 is 1 and for root2 is 68, so the merged root becomes 69. Both trees do not have left or right child. Hence, the preorder is 69."
                    },
                    {
                        "input": "root1=[4, 1, -1, -1, -1], root2=[1, -1, 2, -1, -1]",
                        "output": "5 1 2",
                        "explanation": "The root node of root1 is 4 and for root2 is 1, so the merged root becomes 5. The left child of root1 is 1, and root2 does not have a left child. The right child of root1 is null, and the right child of root2 is 2. So, after merging the trees, the preoder traversal is 5 1 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a recursive approach.</p>",
            "<p>Will using stack help?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}