{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12602,
            "title": "Fastest Horse",
            "titleSlug": "fastest-horse_1467107",
            "content": "<h4 id=\"there-are-n-horses-running-in-n-different-lanes-numbered-from-1-to-n-you-are-given-an-array-finishtime-containing-n-integers-where-finishtime-i-represents-the-time-taken-by-the-ith-horse-to-complete-the-race\">There are \u2018N\u2019 horses running in \u2018N\u2019 different lanes numbered from 1 to \u2018N\u2019. You are given an array \u201cFINISHTIME\u201d containing \u2018N\u2019 integers where \u201cFINISHTIME[i]\u201d represents the time taken by the ith horse to complete the race.</h4>\n\n<h4 id=\"you-are-now-given-q-queries-each-containing-two-integers-each-l-and-r-for-each-query-return-the-time-taken-by-the-fastest-horse-amongst-the-horses-with-numbers-l-l-1-l-2-r-1-r-to-complete-the-race\">You are now given \u2018Q\u2019 queries, each containing two integers each, \u2018L\u2019 and \u2018R\u2019. For each query, return the time taken by the fastest horse amongst the horses with numbers {L, L + 1, L + 2, \u2026., R - 1, R} to complete the race.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The fastest horse is the one that takes the minimum time to finish the race. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018Q\u2019 that denote the number of horses and number of queries respectively.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers, denoting the time taken by each horse to complete the race.\n\nThe next \u2018Q\u2019 lines contain two space-separated integers \u2018L\u2019 and \u2018R\u2019 denoting the range of the query.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the list of integers, where the ith of them denotes the answer of the ith query.\n\nOutput for each test case will be printed in a new line. \n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10000\n1 &lt;= Q &lt;= 10000     \n1 &lt;= FINISHTIME[i] &lt; 10 ^ 9\n0 &lt;= L &lt;= R &lt; N\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5 3\n5 3 8 1 9\n1 3\n5 5\n2 4\n4 2\n2 6 4 8\n1 3\n3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n9\n1\n2\n4\n</code></pre>\n\n<h4 id=\"explanation-for-sample-1\">Explanation for Sample 1:</h4>\n\n<pre><code>For the 1st test case:\nFirst Query =&gt; The minimum time taken is min(5, 3, 8) = 3.\nSecond Query =&gt; Since there is only one horse in the range [5, 5], we return the time taken by that horse i.e. 9.\nThird Query =&gt; The minimum time taken is min(3, 8, 1) = 1.\n\nFor the second test case:\nFirst Query =&gt; The minimum time taken is min(2, 6, 4) = 2.\nSecond Query =&gt; The minimum time taken is min(4, 8) = 4.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n10 5\n29 11 6 27 4 28 3 24 13 11 \n2 4\n2 7\n4 7\n1 3\n3 3\n6 1\n16 12 14 23 20 6 \n1 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>6\n3\n3\n6\n6\n12\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `finishTime` representing the time taken by N horses to complete a race, and a list of queries, where each query consists of a start index L and an end index R, determine the minimum time taken by any horse within the range [L, R] (inclusive) for each query. Return a list containing the minimum times for all queries.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10000",
                    "1 <= Q <= 10000",
                    "1 <= FINISHTIME[i] <= 10 ^ 9",
                    "0 <= L <= R < N"
                ],
                "testcases": [
                    {
                        "input": "finishTime = [5, 3, 8, 1, 9], queries = [[1, 3], [4, 4], [2, 4]]",
                        "output": "[3, 9, 1]",
                        "explanation": "Query 1 (1, 3): min(finishTime[1], finishTime[2], finishTime[3]) = min(3, 8, 1) = 1.\nQuery 2 (4, 4): min(finishTime[4]) = min(9) = 9.\nQuery 3 (2, 4): min(finishTime[2], finishTime[3], finishTime[4]) = min(8, 1, 9) = 1. Corrected query 1 to follow instructions."
                    },
                    {
                        "input": "finishTime = [2, 6, 4, 8], queries = [[0, 2], [2, 3]]",
                        "output": "[2, 4]",
                        "explanation": "Query 1 (0, 2): min(finishTime[0], finishTime[1], finishTime[2]) = min(2, 6, 4) = 2.\nQuery 2 (2, 3): min(finishTime[2], finishTime[3]) = min(4, 8) = 4."
                    },
                    {
                        "input": "finishTime = [29, 11, 6, 27, 4, 28, 3, 24, 13, 11], queries = [[2, 4], [2, 7], [4, 7], [1, 3], [3, 3]]",
                        "output": "[4, 3, 3, 6, 27]",
                        "explanation": "Query 1 (2, 4): min(finishTime[2], finishTime[3], finishTime[4]) = min(6, 27, 4) = 4.\nQuery 2 (2, 7): min(finishTime[2], finishTime[3], finishTime[4], finishTime[5], finishTime[6], finishTime[7]) = min(6, 27, 4, 28, 3, 24) = 3.\nQuery 3 (4, 7): min(finishTime[4], finishTime[5], finishTime[6], finishTime[7]) = min(4, 28, 3, 24) = 3.\nQuery 4 (1, 3): min(finishTime[1], finishTime[2], finishTime[3]) = min(11, 6, 27) = 6.\nQuery 5 (3, 3): min(finishTime[3]) = min(27) = 27."
                    },
                    {
                        "input": "finishTime = [16, 12, 14, 23, 20, 6], queries = [[0, 2]]",
                        "output": "[12]",
                        "explanation": "Query 1 (0, 2): min(finishTime[0], finishTime[1], finishTime[2]) = min(16, 12, 14) = 12."
                    },
                    {
                        "input": "finishTime = [7], queries = [[0, 0]]",
                        "output": "[7]",
                        "explanation": "Query 1 (0, 0): min(finishTime[0]) = min(7) = 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we check the time taken by each horse between \u2018L\u2019 and \u2018R\u2019 and return the minimum?</p>",
            "<p>Can you think of a data structure to calculate the range efficiently?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}