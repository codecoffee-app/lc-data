{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9666,
            "title": "Fenwick Tree",
            "titleSlug": "fenwick-tree_1071952",
            "content": "<h4 id=\"you-are-given-an-array-list-arr-of-n-integers-and-q-queries-each-query-can-be-of-two-types\">You are given an array/list &#39;ARR&#39; of \u2018N\u2019 integers, and \u2018Q\u2019 queries. Each query can be of two types:</h4>\n\n<h4 id=\"given-2-integers-l-r-l-0-and-rn-find-the-sum-of-all-the-elements-of-the-array-with-the-index-in-the-range-l-and-r-inclusive-this-is-a-query-of-type-range-sum\">Given 2 integers \u2018L\u2019,\u2019R\u2019 ( L&gt;=0 and R&lt;N )  find the sum of all the elements of the array with the index in the range &#39;L&#39; and &#39;R&#39; (inclusive). This is a query of type range sum.</h4>\n\n<h4 id=\"given-an-index-i-update-the-value-of-arr-i-to-a-given-integer-x-this-is-a-query-of-type-point-update\">Given an index \u2018i\u2019 update the value of ARR[i] to a given integer \u2018X\u2019. This is a query of type point update.</h4>\n\n<h4 id=\"your-task-is-to-perform-the-queries-on-the-given-array-and-return-the-desired-output-for-each-query\">Your task is to perform the queries on the given array and return the desired output for each query.</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of elements in the array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the array \u2018ARR\u2019.\n\nThe third line of each test case contains an integer \u2018Q\u2019 denoting the number of queries.\n\nThe next \u2018Q\u2019  lines of each test case contain 3 space-separated integers denoting the following:\n\n     1. The first integer denotes the type of query. It can be either a \u20181\u2019 or a \u20182\u2019. 1 denotes range sum type query and 2 denotes update type query.\n\n     2. If the query is of the first type, the second and third integers on the same line denote \u2018L\u2019 and \u2018R\u2019 respectively which are the range of which we need to calculate its sum.\n\n     3. If the query of the second type, the second integer denotes \u2018i\u2019 the index of which the value is to be updated and the third integer denotes \u2018X\u2019 the updated value of the \u2018i-th\u2019 index. \n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each query of the first type, print the sum of values with indices in the range of \u2018L\u2019 and \u2018R\u2019.\n\nFor queries of the second type, do not print anything just update the value in the given array.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n1 &lt;= Q &lt;= 10^5\n-10^9 &lt;= ARR[i] &lt;= 10^9\n\n\nWhere \u2018N\u2019 denotes the length of the array &#39;ARR&#39;, &#39;Q&#39; denotes the number of queries, and \u2018ARR[i]\u2019 is the value of the element at index \u2018i\u2019.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n5 \n5 4 2 3 5\n5\n1 0 2\n2 1 1\n1 0 2\n2 3 1\n1 0 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>11\n8\n14\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-1\">Explanation of The Sample Input 1:</h5>\n\n<pre><code>The first line has a single integer which means it&#39;s a single test case.\nThe next line has an integer 5 denoting that there are 5 integers in the array.\nThen the 5 space-separated integers in the third line represent the elements in the array.\nThen the fourth line has \u2018Q\u2019 which is the number of queries. In this case, we have 5 queries.\nThen the 5 queries follow:\n\nWe can see that the first query is of type 1 i.e a range sum query. From the second and third integer we get we need to find the sum of the elements at index 0 1 and 2 i.e the first 3 elements. We can see that the sum will be 5+4+2=11 and hence we print 11.\n\nThe next query is of type 2 so we need to update the element at index 1 to 1. So the array after updating will be {5 1 2 3 5}. Note that we do not print anything.\n\nThe next query is of type 1 from index 0 to 2. Now the sum will be 5+1+2=8 hence we print 8 in a new line.\n\nThe next query is of type 2 in which the element at index 3 is updated to 1. After updating, the array is: {5 1 2 1 5}.\n\nThe last query is of type 1 and we need to find the sum of all 5 elements which will be: 5+1+2+1+5=14. Hence we print 14 in a new line.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n9\n12 20 10 15 16 11 19 10 10 \n6\n1 3 5\n1 7 7\n1 4 5\n2 1 27\n2 7 23\n2 5 12\n9\n18 19 19 10 17 18 19 10 14 \n7\n2 4 25\n1 4 8\n1 7 7\n2 5 15\n2 8 14\n1 4 5\n2 0 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>42\n10\n27\n86\n10\n40\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an array 'ARR' of N integers and Q queries.  There are two types of queries:\n\n1. **Range Sum Query (Type 1):** Given two integers L and R (0 <= L <= R < N), calculate the sum of elements in ARR from index L to R (inclusive).\n2. **Point Update Query (Type 2):** Given an index i and an integer X, update the value of ARR[i] to X.\n\nYour task is to process these Q queries on the given array and return the result of each range sum query.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "1 <= Q <= 10^5",
                    "-10^9 <= ARR[i] <= 10^9",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n5\n5 4 2 3 5\n5\n1 0 2\n2 1 1\n1 0 2\n2 3 1\n1 0 4",
                        "output": "11\n8\n14",
                        "explanation": "The first test case involves an array [5, 4, 2, 3, 5]. The first query asks for the sum from index 0 to 2, which is 5 + 4 + 2 = 11. Then, the element at index 1 is updated to 1, resulting in the array [5, 1, 2, 3, 5]. The next query asks for the sum from index 0 to 2, which is now 5 + 1 + 2 = 8. The element at index 3 is then updated to 1, giving the array [5, 1, 2, 1, 5]. Finally, the sum from index 0 to 4 is calculated as 5 + 1 + 2 + 1 + 5 = 14."
                    },
                    {
                        "input": "2\n9\n12 20 10 15 16 11 19 10 10 \n6\n1 3 5\n1 7 7\n1 4 5\n2 1 27\n2 7 23\n2 5 12\n9\n18 19 19 10 17 18 19 10 14 \n7\n2 4 25\n1 4 8\n1 7 7\n2 5 15\n2 8 14\n1 4 5\n2 0 4",
                        "output": "42\n10\n27\n86\n10\n40",
                        "explanation": "The second test case contains two sub-cases. The first starts with the array [12, 20, 10, 15, 16, 11, 19, 10, 10]. The first query calculates the sum from index 3 to 5 (15 + 16 + 11 = 42). The second query calculates the sum from index 7 to 7 (10 = 10).  The third query calculates the sum from index 4 to 5 (16 + 11 = 27). The next three queries update the array to [12, 27, 10, 15, 16, 12, 19, 23, 10]. The second starts with the array [18, 19, 19, 10, 17, 18, 19, 10, 14].  The first query update index 4 to 25. Second query calculate sum from index 4 to 8,  Third query calculate the sum from index 7 to 7. After that two update query modify the original array and at last calculate the sum."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>Try to iterate the array and perform the operations directly.</strong></p>",
            "<p>Can we use a special data structure to optimize the queries to be processed?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}