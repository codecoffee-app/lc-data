{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10143,
            "title": "Find a value in BST",
            "titleSlug": "find-a-value-in-bst_1170063",
            "content": "<h4 id=\"you-have-been-given-a-binary-search-tree-and-a-key-value-x-find-if-a-node-with-value-x-is-present-in-the-bst-or-not\">You have been given a Binary Search Tree and a key value \u2018X\u2019, find if a node with value \u2018X\u2019 is present in the BST or not.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You may assume that duplicates do not exist in the tree.\n</code></pre>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>For the given tree shown below:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000229_1613304716_tree.jpg\" alt=\"Example\"></p>\n\n<pre><code>For the binary tree shown in the figure, if \u2018X\u2019 = 6, the output will be 1 as node value 6 is present in the BST.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nThe second line of each test case contains an integer \u2018X\u2019 which denotes the key value to be searched in the binary search tree.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return true if the given key value exists in the binary search tree else return false.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= DATA &lt;= 10^4\n0 &lt;= X &lt;= 10^4\n\nWhere &#39;DATA&#39; is the value of the binary tree node.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n8 5 10 3 6 -1 14 -1 -1 -1 -1 13 -1 -1 -1\n6\n5 -1 -1\n5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h5>\n\n<pre><code>In test case 1, the tree after the construction is shown below.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000229_1613304716_tree.jpg\" alt=\"Example\"></p>\n\n<pre><code>Thus we can see that 6 is present in the tree.\n\nIn test case 2, there is only one node and we need to find the node with value 5 and thus it is present.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code> 2\n79 42 80 36 49 -1 90 -1 -1 -1 -1 85 100 -1 -1 -1 -1\n49\n710 340 800 210 390 -1 810 -1 -1 350 -1 -1 900 -1 -1 -1 -1\n100\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 \n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>In test case 1, node value 49 is present in the tree hence output is 1.\n\nIn test case 2, node value 100 is not present in the tree so output is 0.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) represented by its root node and a key value 'X', determine if a node with the value 'X' exists within the BST. Assume that the tree contains no duplicate values.",
                "constraints": [
                    "1 <= T <= 100",
                    "0 <= DATA <= 10^4, where DATA is the value of the binary tree node.",
                    "0 <= X <= 10^4, where X is the key to search for."
                ],
                "testcases": [
                    {
                        "input": "root=[8, 5, 10, 3, 6, -1, 14, -1, -1, -1, -1, 13, -1, -1, -1], key=6",
                        "output": "true",
                        "explanation": "The BST contains the node with value 6."
                    },
                    {
                        "input": "root=[5, -1, -1], key=5",
                        "output": "true",
                        "explanation": "The BST contains only one node with value 5, which matches the key."
                    },
                    {
                        "input": "root=[79, 42, 80, 36, 49, -1, 90, -1, -1, -1, -1, 85, 100, -1, -1, -1, -1], key=49",
                        "output": "true",
                        "explanation": "The BST contains the node with value 49."
                    },
                    {
                        "input": "root=[710, 340, 800, 210, 390, -1, 810, -1, -1, 350, -1, -1, 900, -1, -1, -1, -1], key=100",
                        "output": "false",
                        "explanation": "The BST does not contain a node with value 100."
                    },
                    {
                        "input": "root=[1, -1, -1], key=2",
                        "output": "false",
                        "explanation": "The BST contains only a node with value 1, so 2 is not present."
                    },
                    {
                        "input": "root=[10, 5, 15, 2, 7, 12, 18, -1, -1, -1, -1, -1, -1, -1, -1], key=12",
                        "output": "true",
                        "explanation": "A node with value 12 exists in the BST."
                    },
                    {
                        "input": "root=[50, 30, 70, 20, 40, 60, 80, -1, -1, -1, -1, -1, -1, -1, -1], key=90",
                        "output": "false",
                        "explanation": "The BST does not contain a node with value 90."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Make use of the properties of a Binary Search Tree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}