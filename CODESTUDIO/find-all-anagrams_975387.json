{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9116,
            "title": "Find all anagrams",
            "titleSlug": "find-all-anagrams_975387",
            "content": "<h4 id=\"you-have-been-given-a-string-str-and-a-non-empty-string-ptr-your-task-is-to-find-all-the-starting-indices-of-ptr-s-anagram-in-str\">You have been given a string STR and a non-empty string PTR. Your task is to find all the starting indices of PTR\u2019s anagram in STR.</h4>\n\n<h4 id=\"an-anagram-of-a-string-is-another-string-which-contains-the-same-characters-and-is-obtained-by-rearranging-the-characters\">An anagram of a string is another string which contains the same characters and is obtained by rearranging the characters.</h4>\n\n<h4 id=\"for-example-silent-and-listen-are-anagrams-of-each-other-aba-and-abb-are-not-anagram-because-we-can-t-convert-aba-to-abb-by-rearranging-the-characters-of-particular-strings\">For example: \u2018SILENT\u2019 and \u2018LISTEN\u2019 are anagrams of each other. \u2018ABA\u2019 and \u2018ABB\u2019 are not anagram because we can\u2019t convert \u2018ABA\u2019 to \u2018ABB\u2019 by rearranging the characters of particular strings.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. Both STR and PTR consist of English uppercase letters.\n2. Length of string &#39;STR&#39; will always be greater than or equal to the length of string \u2018PTR\u2019.\n3. In case, there is no anagram substring, then return an empty sequence.\n4. In case of more than one anagrams, return the indices in increasing order.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases or queries to be processed. Then the test case follows.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018M\u2019 where \u2018N\u2019 denotes the number of characters in &#39;STR&#39;, and \u2018M\u2019 denotes the number of characters in \u2018PTR\u2019.\n\nThe second line of each test case contains the string &#39;STR&#39;. \n\nThe third line of each test case contains the string \u2018PTR\u2019. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a sequence of all the starting indices of the anagram substrings present in the given string &#39;STR&#39;.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^5\n1 &lt;= M &lt;= N\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n10 3\nCBAEBABACD\nABC\n5 2\nABADE\nBA\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>0 6\n0 1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>Test Case 1:\n\n&#39;STR&#39; is \u2018CBAEBABACD\u2019 and \u2018PTR\u2019 is \u2018ABC\u2019.\n\n0-2 in &#39;STR&#39; index 0,1,2 are \u2018CBA\u2019, and it is an anagram with \u2018ABC\u2019.\n1-3 in &#39;STR&#39; index 1,2,3 are \u2018BAE\u2019, and it is not anagram with \u2018ABC\u2019.\n2-4 in &#39;STR&#39; index 2,3,4 are \u2018AEB\u2019, and it is not anagram with \u2018ABC\u2019.\n3-5 in &#39;STR&#39; index 3,4,5 are \u2018EBA\u2019, and it is not anagram with \u2018ABC\u2019.\n4-6 in &#39;STR&#39; index 4,5,6 are \u2018BAB\u2019, and it is not anagram with \u2018ABC\u2019.\n5-7 in &#39;STR&#39; index 5,6,7 are \u2018ABA\u2019, and it is not anagram with \u2018ABC\u2019.\n6-8 in &#39;STR&#39; index 6,7,8 are \u2018BAC\u2019, and it is an anagram with \u2018ABC\u2019.\n7-9 in &#39;STR&#39; index 7,8,9 are \u2018ACD\u2019, and it is not anagram with \u2018ABC\u2019.\n\nHence, there are only two substrings in the given string &#39;STR&#39;  that are anagram with given string  \u2018PTR\u2019 which are \u2018CBA\u2019, and \u2018BAC\u2019 and starting indices of respective anagram substrings are 0 and 6.\n\n\nTest case 2:\n\n&#39;STR&#39; is \u2018ABADE\u2019 and \u2018PTR\u2019 is \u2018BA\u2019.\n\nIn the given string \u2018ABADE\u2019 the substring of length 2 starting with index 0 is \u2018AB\u2019 which is an anagram with the string \u2018BA\u2019 and a substring of length 2 starting with index 1 is \u2018BA\u2019 which is also an anagram with the string \u2018BA\u2019. Because 0 and 1 are starting indices of the substrings, we print 0 and 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n10 4\nBACDGABCDA\nABCD\n7 1\nABABABA\nA\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0 5 6\n0 2 4 6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 60,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string STR and a non-empty string PTR, find all the starting indices of PTR's anagrams in STR. An anagram of a string is another string that contains the same characters rearranged. The strings STR and PTR consist of uppercase English letters. The length of STR is always greater than or equal to the length of PTR. Return an empty sequence if there are no anagram substrings. Return the indices in increasing order if there is more than one anagram.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^5",
                    "1 <= M <= N"
                ],
                "testcases": [
                    {
                        "input": "n = 10, m = 3, str = CBAEBABACD, ptr = ABC",
                        "output": "0 6",
                        "explanation": "'STR' is \u2018CBAEBABACD\u2019 and \u2018PTR\u2019 is \u2018ABC\u2019. Substrings 'CBA' (index 0) and 'BAC' (index 6) are anagrams of 'ABC'."
                    },
                    {
                        "input": "n = 5, m = 2, str = ABADE, ptr = BA",
                        "output": "0 1",
                        "explanation": "'STR' is \u2018ABADE\u2019 and \u2018PTR\u2019 is \u2018BA\u2019. Substrings 'AB' (index 0) and 'BA' (index 1) are anagrams of 'BA'."
                    },
                    {
                        "input": "n = 10, m = 4, str = BACDGABCDA, ptr = ABCD",
                        "output": "0 5 6",
                        "explanation": "'STR' is \u2018BACDGABCDA\u2019 and \u2018PTR\u2019 is \u2018ABCD\u2019. Substrings 'BACD' (index 0), 'ABCD' (index 5), and 'BCDA' (index 6) are anagrams of 'ABCD'."
                    },
                    {
                        "input": "n = 7, m = 1, str = ABABABA, ptr = A",
                        "output": "0 2 4 6",
                        "explanation": "'STR' is \u2018ABABABA\u2019 and \u2018PTR\u2019 is \u2018A\u2019. Substrings 'A' (index 0), 'A' (index 2), 'A' (index 4) and 'A' (index 6) are anagrams of 'A'."
                    },
                    {
                        "input": "n = 5, m = 3, str = AAAAA, ptr = AAA",
                        "output": "0 1 2",
                        "explanation": "'STR' is 'AAAAA' and 'PTR' is 'AAA'. Substrings 'AAA' (index 0), 'AAA' (index 1) and 'AAA' (index 2) are anagrams of 'AAA'."
                    },
                    {
                        "input": "n = 4, m = 4, str = ABCD, ptr = DCBA",
                        "output": "0",
                        "explanation": "'STR' is 'ABCD' and 'PTR' is 'DCBA'. Substring 'ABCD' (index 0) is an anagram of 'DCBA'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try checking for one substring at a time.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}