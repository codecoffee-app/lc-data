{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8503,
            "title": "Find all occurrences",
            "titleSlug": "find-all-occurrences_875114",
            "content": "<h4 id=\"you-are-given-a-m-x-n-matrix-of-characters-character_matrix-and-a-string-word-your-task-is-to-find-and-print-all-occurrences-of-the-string-in-the-given-character-matrix-you-are-allowed-to-search-the-string-in-all-eight-possible-directions-i-e-north-south-east-west-north-east-north-west-south-east-south-west\">You are given a &#39;M&#39; x &#39;N&#39; matrix of characters, &#39;CHARACTER_MATRIX&#39; and a string &#39;WORD&#39;. Your task is to find and print all occurrences of the string in the given character matrix. You are allowed to search the string in all eight possible directions, i.e. North, South, East, West, North-East, North-West, South-East, South-West.</h4>\n\n<h4 id=\"note-there-should-not-be-any-cycle-in-the-output-path-the-entire-string-must-lie-inside-the-matrix-boundary-you-should-not-jump-across-boundaries-i-e-from-row-n-1-to-0-or-column-n-1-to-0-or-vice-versa\">Note: There should not be any cycle in the output path. The entire string must lie inside the matrix boundary. You should not jump across boundaries, i.e. from row &#39;N&#39; - 1 to 0 or column &#39;N&#39; - 1 to 0 or vice versa.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Consider below matrix of characters,\n[ &#39;D&#39;, &#39;E&#39;, &#39;X&#39;, &#39;X&#39;, &#39;X&#39; ]\n[ &#39;X&#39;, &#39;O&#39;, &#39;E&#39;, &#39;X&#39;, &#39;E&#39; ] \n[ &#39;D&#39;, &#39;D&#39;, &#39;C&#39;, &#39;O&#39;, &#39;D&#39; ]\n[ &#39;E&#39;, &#39;X&#39;, &#39;E&#39;, &#39;D&#39;, &#39;X&#39; ]\n[ &#39;C&#39;, &#39;X&#39;, &#39;X&#39;, &#39;E&#39;, &#39;X&#39; ]\n\nIf the given string is &quot;CODE&quot;, below are all its occurrences in the matrix:\n\n&#39;C&#39;(2, 2) &#39;O&#39;(1, 1) &#39;D&#39;(0, 0) &#39;E&#39;(0, 1)\n&#39;C&#39;(2, 2) &#39;O&#39;(1, 1) &#39;D&#39;(2, 0) &#39;E&#39;(3, 0)\n&#39;C&#39;(2, 2) &#39;O&#39;(1, 1) &#39;D&#39;(2, 1) &#39;E&#39;(1, 2)\n&#39;C&#39;(2, 2) &#39;O&#39;(1, 1) &#39;D&#39;(2, 1) &#39;E&#39;(3, 0)\n&#39;C&#39;(2, 2) &#39;O&#39;(1, 1) &#39;D&#39;(2, 1) &#39;E&#39;(3, 2)\n&#39;C&#39;(2, 2) &#39;O&#39;(2, 3) &#39;D&#39;(2, 4) &#39;E&#39;(1, 4)\n&#39;C&#39;(2, 2) &#39;O&#39;(2, 3) &#39;D&#39;(3, 3) &#39;E&#39;(3, 2)\n&#39;C&#39;(2, 2) &#39;O&#39;(2, 3) &#39;D&#39;(3, 3) &#39;E&#39;(4, 3)\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains two space-separated integers &#39;M&#39; and &#39;N representing the size of the 2D matrix &#39;CHARACTER_MATRIX&#39;.\n\nNext M lines contain N single space-separated characters representing the matrix elements.\n\nNext line contains a string WORD.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the coordinates of each character of the string.\n\nPrint the output of each occurrence in a separate line in the format:\n\u2018FIRST_CHARACTER\u2019(X1, Y1) \u2018SECOND_CHARACTER\u2019(X2, Y2) ...\n\nIf no occurrence is found print &#39;No match found&#39; (without quotes)\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= M, N &lt;= 100\n1 &lt;= WORD LENGTH &lt;= 5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>5 5\nD E X X X\nX O E X E\nD D C O D\nE X E D X \nC X X E X\nCODE\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>&#39;C&#39;(2, 2) &#39;O&#39;(1, 1) &#39;D&#39;(0, 0) &#39;E&#39;(0, 1)\n&#39;C&#39;(2, 2) &#39;O&#39;(1, 1) &#39;D&#39;(2, 0) &#39;E&#39;(3, 0)\n&#39;C&#39;(2, 2) &#39;O&#39;(1, 1) &#39;D&#39;(2, 1) &#39;E&#39;(1, 2)\n&#39;C&#39;(2, 2) &#39;O&#39;(1, 1) &#39;D&#39;(2, 1) &#39;E&#39;(3, 0)\n&#39;C&#39;(2, 2) &#39;O&#39;(1, 1) &#39;D&#39;(2, 1) &#39;E&#39;(3, 2)\n&#39;C&#39;(2, 2) &#39;O&#39;(2, 3) &#39;D&#39;(2, 4) &#39;E&#39;(1, 4)\n&#39;C&#39;(2, 2) &#39;O&#39;(2, 3) &#39;D&#39;(3, 3) &#39;E&#39;(3, 2)\n&#39;C&#39;(2, 2) &#39;O&#39;(2, 3) &#39;D&#39;(3, 3) &#39;E&#39;(4, 3)\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h5>\n\n<pre><code>Consider the first line of output:\n(I) The first character of string i.e. &#39;C&#39; is present in row 2 column 2. \n\n(II) Second character &#39;O&#39; is present in row 1 and column 1. \n\n(III) Third character &#39;D&#39; is present in row 0 and column 0. \n\n(IV) Last character &#39;E&#39; is present in row 0 column 1.\n\nSimilarly, other lines of output can be understood.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1 14\nX C O D I X G X I X J A S X\nCODE\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>No match found\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2:</h5>\n\n<pre><code>Since the string \u2018CODE\u2019 does not exist in &#39;ARR&#39;, it&#39;ll print &#39;No match found&#39;.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an M x N matrix of characters and a string, locate all occurrences of the string within the matrix. Search is permitted in all eight directions (North, South, East, West, North-East, North-West, South-East, South-West). Ensure that no cycles exist in the output path, the entire string lies within matrix boundaries, and boundary jumps are prohibited.",
                "constraints": [
                    "1 <= M, N <= 100",
                    "1 <= WORD LENGTH <= 5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "m = 5, n = 5, characterMatrix = [['D', 'E', 'X', 'X', 'X'], ['X', 'O', 'E', 'X', 'E'], ['D', 'D', 'C', 'O', 'D'], ['E', 'X', 'E', 'D', 'X'], ['C', 'X', 'X', 'E', 'X']], word = \"CODE\"",
                        "output": "'C'(2, 2) 'O'(1, 1) 'D'(0, 0) 'E'(0, 1)\n'C'(2, 2) 'O'(1, 1) 'D'(2, 0) 'E'(3, 0)\n'C'(2, 2) 'O'(1, 1) 'D'(2, 1) 'E'(1, 2)\n'C'(2, 2) 'O'(1, 1) 'D'(2, 1) 'E'(3, 0)\n'C'(2, 2) 'O'(1, 1) 'D'(2, 1) 'E'(3, 2)\n'C'(2, 2) 'O'(2, 3) 'D'(2, 4) 'E'(1, 4)\n'C'(2, 2) 'O'(2, 3) 'D'(3, 3) 'E'(3, 2)\n'C'(2, 2) 'O'(2, 3) 'D'(3, 3) 'E'(4, 3)",
                        "explanation": "The string 'CODE' is found in the matrix in eight different locations, as indicated by the coordinates of each character in the string for each occurrence."
                    },
                    {
                        "input": "m = 1, n = 14, characterMatrix = [['X', 'C', 'O', 'D', 'I', 'X', 'G', 'X', 'I', 'X', 'J', 'A', 'S', 'X']], word = \"CODE\"",
                        "output": "No match found",
                        "explanation": "The string 'CODE' is not present in the given 1x14 matrix."
                    },
                    {
                        "input": "m = 3, n = 3, characterMatrix = [['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], word = \"AEI\"",
                        "output": "'A'(0, 0) 'E'(1, 1) 'I'(2, 2)",
                        "explanation": "The string 'AEI' is found diagonally from top-left to bottom-right."
                    },
                    {
                        "input": "m = 2, n = 2, characterMatrix = [['A', 'B'], ['C', 'D']], word = \"AC\"",
                        "output": "'A'(0, 0) 'C'(1, 0)",
                        "explanation": "The string 'AC' is found vertically downward."
                    },
                    {
                        "input": "m = 4, n = 4, characterMatrix = [['A', 'B', 'C', 'D'], ['E', 'F', 'G', 'H'], ['I', 'J', 'K', 'L'], ['M', 'N', 'O', 'P']], word = \"PO\"",
                        "output": "'P'(3, 3) 'O'(3, 2)",
                        "explanation": "The string 'PO' is found horizontally from right to left in the last row."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try and think of how you can explore each element&nbsp; of the matrix and form a sequence from them, that is the same as the given string.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}