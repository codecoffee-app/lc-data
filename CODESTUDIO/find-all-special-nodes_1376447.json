{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11032,
            "title": "Find all Special Nodes. ",
            "titleSlug": "find-all-special-nodes_1376447",
            "content": "<h4 id=\"in-a-binary-tree-a-special-node-is-a-node-that-is-the-only-child-of-its-parent-the-root-of-the-tree-is-not-special-because-it-does-not-have-a-parent-node-node-1-is-always-the-root-of-the-binary-tree-return-an-array-list-containing-the-values-of-all-special-nodes-in-the-tree\">In a binary tree, a special node is a node that is the only child of its parent. The root of the tree is not special because it does not have a parent node. Node \u20181\u2019 is always the root of the binary tree. Return an array/list containing the values of all special nodes in the tree.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Let\u2019s say you have a binary tree as follows:-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-8583.png\" alt=\"subsequence\"></p>\n\n<pre><code>Node 4 is a special node as it is the only child of node 2. Node 1 cannot be a special child as it does not have a parent. All the other nodes have a sibling i.e there parent has more than one child. Therefore return [4] as the answer.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Return the array/list containing special nodes in any order. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u2018T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of input contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code> 1\n 2 3\n 4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case return the array/list containing all special nodes. \n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^3\n\nWhere \u2018T\u2019 is the number of test cases and \u2018N\u2019 is the number of nodes in the binary tree.  \n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 2 -1 3 -1 -1 -1\n1 2 3 4 -1 -1 5 6 -1 -1 7 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 3\n4 5 6 7\n</code></pre>\n\n<h4 id=\"sample-output-1-explanation\">Sample Output 1 Explanation:</h4>\n\n<pre><code>Test case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree1-8587.png\" alt=\"subsequence\"></p>\n\n<pre><code>2 is the only child of 1 and 3 is the only child of 2 i.e. they are special nodes.\n\nTherefore the answer is [2,3].\n\nTest case 2:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-8588.png\" alt=\"subsequence\"></p>\n\n<pre><code>All nodes except 2 and 3 are the only children of their parents i.e. they are special nodes.\n\nTherefore the answer is [4,5,6,7].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 2 3 4 -1 -1 -1 -1 -1\n1 2 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, identify and return a list of all 'special' nodes. A special node is defined as a node that is the only child of its parent. The root node is excluded from being considered a special node because it does not have a parent.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^3",
                    "Where \u2018T\u2019 is the number of test cases and \u2018N\u2019 is the number of nodes in the binary tree."
                ],
                "testcases": [
                    {
                        "input": "root = [1, 2, -1, 3, -1, -1, -1]",
                        "output": "[2, 3]",
                        "explanation": "Node 2 is the only child of node 1, and node 3 is the only child of node 2. Therefore, the special nodes are 2 and 3."
                    },
                    {
                        "input": "root = [1, 2, 3, 4, -1, -1, 5, 6, -1, -1, 7, -1, -1, -1, -1]",
                        "output": "[4, 5, 6, 7]",
                        "explanation": "Node 4 is the only child of node 2, node 5 is the only child of node 3, node 6 is the only child of node 3, and node 7 is the only child of node 5.  Therefore, the special nodes are 4, 5, 6, and 7."
                    },
                    {
                        "input": "root = [1, 2, 3, 4, -1, -1, -1, -1, -1]",
                        "output": "[4]",
                        "explanation": "Node 4 is the only child of Node 2. Thus, the special node is 4."
                    },
                    {
                        "input": "root = [1, 2, -1, -1, -1]",
                        "output": "[2]",
                        "explanation": "Node 2 is the only child of Node 1. Thus, the special node is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check if the node has only one child.</p>",
            "<p>Check if the node has only one child and recursively iterate over its right and left subtree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}