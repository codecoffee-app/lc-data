{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8336,
            "title": "Find all triplets with zero sum",
            "titleSlug": "find-all-triplets-with-zero-sum_873143",
            "content": "<h4 id=\"you-are-given-an-array-arr-consisting-of-n-integers-you-need-to-find-all-the-distinct-triplets-present-in-the-array-which-adds-up-to-zero\">You are given an array Arr consisting of n integers, you need to find all the distinct triplets present in the array which adds up to zero.</h4>\n\n<h4 id=\"an-array-is-said-to-have-a-triplet-arr-i-arr-j-arr-k-with-0-sum-if-there-exists-three-indices-i-j-and-k-such-that-i-j-j-k-and-i-k-and-arr-i-arr-j-arr-k-0\">An array is said to have a triplet {arr[i], arr[j], arr[k]} with 0 sum if there exists three indices i, j and k such that i!=j, j!=k and i!=k and arr[i] + arr[j] + arr[k] = 0.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. You can return the list of values in any order. For example, if a valid triplet is {1, 2, -3}, then (2, -3, 1), (-3, 2, 1) etc is also valid triplet. Also, the ordering of different triplets can be random i.e if there are more than one valid triplets, you can return them in any order.\n2. The elements in the array need not be distinct.\n3. If no such triplet is present in the array, then return an empty list, and the output printed for such a test case will be &quot;-1&quot;.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains an integer T, denoting the number of test cases.\nThe first line of each test case contains the integer N, denoting the size of the array.\nThe second line of each test case contains N space-separated integers denoting the array elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, every line of output contains three spaced integers that correspond to the elements which add to zero. Refer to sample input 2 for more clarification.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;=  50\n1 &lt;= N &lt;= 10^3  \n-10^5 &lt;= Arr[i] &lt;= 10^5\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code> 1\n 5\n-10 5 5 -5 2\n 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>-10 5 5\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>-10 5 5 is the only triplet that adds up to zero. Note that the order of output does not matter, so 5 -10 5 or 5 5 -10 are also acceptable.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3\n6\n1 2 3 -1 -2 -3\n0\n4\n1 2 3 4 \n1\n6\n-1 -1 2 2 -1 -1\n0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 2 -3\n-1 -2 3\n-1\n-1 -1 2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2 :</h5>\n\n<pre><code>For the first input (1, 2, -3) and (-1, -2, 3) are the only triplets that add to zero.\nIn the second input, since there are no such triplets, we print -1.\nFor the third input, the only distinct triplet is (-1, -1, 2), so just print -1 -1 2.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 130,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `Arr` of `n` integers, find all distinct triplets in the array that sum to zero. A triplet `{Arr[i], Arr[j], Arr[k]}` sums to zero if there exist indices `i`, `j`, and `k` such that `i != j`, `j != k`, and `i != k`, and `Arr[i] + Arr[j] + Arr[k] = 0`.  The order of triplets and elements within a triplet does not matter. If no such triplet exists, return an empty list.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^3",
                    "-10^5 <= Arr[i] <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n-10 5 5 -5 2",
                        "output": "-10 5 5",
                        "explanation": "The only triplet that sums to zero is -10, 5, and 5."
                    },
                    {
                        "input": "6\n1 2 3 -1 -2 -3\n0",
                        "output": "1 2 -3\n-1 -2 3",
                        "explanation": "The triplets (1, 2, -3) and (-1, -2, 3) sum to zero."
                    },
                    {
                        "input": "4\n1 2 3 4\n1",
                        "output": "-1",
                        "explanation": "No triplets sum to zero."
                    },
                    {
                        "input": "6\n-1 -1 2 2 -1 -1\n0",
                        "output": "-1 -1 2",
                        "explanation": "The triplet (-1, -1, 2) sums to zero and is the only distinct triplet."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try all possible combinations.</p>",
            "<p>Sorting and Two pointers.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n        Time Complexity : O(N^2)\r\n        Space Complexity : O(N),\r\n\r\n        where N is the number of elements in the array.\r\n\r\n */\r\n\r\n\r\nvector<vector<int>> findTriplets(vector<int>arr, int n) {\r\n\r\n    vector<vector<int>>ans;\r\n\r\n    // Sorting the vector.\r\n    sort(arr.begin(), arr.end());\r\n\r\n    for (int i = 0; i < n; i++) {\r\n\r\n        int target = -arr[i];\r\n        int front = i + 1;\r\n        int back = n - 1;\r\n\r\n        while (front < back) {\r\n\r\n            int sum = arr[front] + arr[back];\r\n\r\n            // Finding answer which starts from arr[i]\r\n            if (sum < target) {\r\n                front++;\r\n            }\r\n\r\n            else if (sum > target) {\r\n                back--;\r\n            }\r\n\r\n            else {\r\n\r\n                int x = arr[front];\r\n                int y = arr[back];\r\n                ans.push_back({arr[i], arr[front], arr[back]});\r\n\r\n                // Incrementing front pointer until we reach a different number\r\n                while (front < back && arr[front] == x) {\r\n                    front++;\r\n                }\r\n\r\n                // Decrementing last pointer until we reach a different number\r\n                while (front < back && arr[back] == y) {\r\n                    back--;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // Ensuring that we don't encounter duplicate values for arr[i]\r\n        while (i + 1 < n && arr[i] == arr[i + 1]) {\r\n            i++;\r\n        }\r\n    }\r\n    return ans;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n\t\tTime Complexity: O(N^2)\n\t\tSpace Complexity: O(N),\n\n\t\twhere N is the number of elements in the array.\n'''\n\nfrom sys import stdin, stdout, setrecursionlimit\n\nsetrecursionlimit(10 ** 7)\n\n\ndef findTriplets(arr, n):\n    ans = list()\n    arr = sorted(arr)\n\n    f = 0\n    i = 0\n    while i < n:\n        target = -arr[i]\n        front, back = i + 1, n - 1\n        while front < back:\n            sum = arr[front] + arr[back]\n            if sum < target:\n                front += 1\n\n            elif sum > target:\n                back -= 1\n\n            else:\n                f = 1\n                x, y = arr[front], arr[back]\n                ans.append([arr[i], x, y])\n                while front < back and arr[front] == x:\n                    front += 1\n\n                while front < back and arr[back] == y:\n                    back -= 1\n\n        while i + 1 < n and arr[i] == arr[i + 1]:\n            i += 1\n\n        i += 1\n    return ans\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Taking input using fast I/0\ndef takeInput():\n    N = int(stdin.readline())\n    arr = list(map(int, stdin.readline().strip().split(\" \")))\n    return N, arr\n\n\ntc = int(input())\nwhile tc > 0:\n    N, arr = takeInput()\n    ans = findTriplets(arr, N)\n    if len(ans) == 0:\n        stdout.write(\"-1\\n\")\n    else:\n        for i in ans:\n            i.sort()\n            stdout.write(str(i[0]) + \" \" + str(i[1]) + \" \" + str(i[2]) + \"\\n\")\n\n    tc -= 1\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n        Time Complexity : O(N^2)\r\n        Space Complexity : O(N),\r\n\r\n        where N is the number of elements in the array.\r\n\r\n */\r\n\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\n\r\n\r\n// Custome Pair\r\nclass Pair {\r\n\tint a;\r\n\tint b;\r\n\tint c;\r\n\r\n\tPair(int p, int q, int r) {\r\n\t\ta = p;\r\n\t\tb = q;\r\n\t\tc = r;\r\n\t}\r\n\r\n\tpublic boolean equals(Object o) {\r\n\t\tif (o instanceof Pair) {\r\n\t\t\tPair p = (Pair) o;\r\n\t\t\treturn p.a == a && p.b == b && p.c == c;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic int hashCode() {\r\n\t\treturn new Integer(a).hashCode() * 31 + new Integer(b).hashCode() * 32 + new Integer(c).hashCode();\r\n\t}\r\n}\r\n\r\n\r\npublic class Solution {\r\n\r\n\tprivate static HashSet<Pair> set = new HashSet<>();\r\n\r\n\tpublic static ArrayList<ArrayList<Integer>> findTriplets(ArrayList<Integer> arr, int n) {\r\n\r\n\t\tArrayList<ArrayList<Integer>> ans = new ArrayList<>();\r\n\t\tCollections.sort(arr);\r\n\t\tint f = 0;\r\n\r\n\t\tfor (int i = 0; i < n; i++) {\r\n\r\n\t\t\tint target = -arr.get(i);\r\n\t\t\tint front = i + 1;\r\n\t\t\tint back = n - 1;\r\n\r\n\t\t\twhile (front < back) {\r\n\r\n\t\t\t\tint sum = arr.get(front) + arr.get(back);\r\n\r\n\t\t\t\tif (sum < target) {\r\n\t\t\t\t\tfront++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\telse if (sum > target) {\r\n\t\t\t\t\tback--;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tf = 1;\r\n\r\n\t\t\t\t\tint x = arr.get(front);\r\n\t\t\t\t\tint y = arr.get(back);\r\n\r\n\t\t\t\t\tArrayList<Integer> list = new ArrayList<>();\r\n\r\n\t\t\t\t\tlist.add(arr.get(i));\r\n\t\t\t\t\tlist.add(arr.get(front));\r\n\t\t\t\t\tlist.add(arr.get(back));\r\n\r\n\t\t\t\t\tCollections.sort(list);\r\n\r\n\t\t\t\t\tif (!set.contains(new Pair(list.get(0), list.get(1), list.get(2)))) {\r\n\t\t\t\t\t\tset.add(new Pair(list.get(0), list.get(1), list.get(2)));\r\n\t\t\t\t\t\tans.add(list);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\twhile (front < back && arr.get(front).equals(x)) {\r\n\t\t\t\t\t\tfront++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\twhile (front < back && arr.get(back) == y) {\r\n\t\t\t\t\t\tback--;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\twhile (i + 1 < n && arr.get(i) == arr.get(i + 1)) {\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ans;\r\n\r\n\t}\r\n\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}