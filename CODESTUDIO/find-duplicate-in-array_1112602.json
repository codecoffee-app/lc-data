{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9953,
            "title": "Find Duplicate in Array",
            "titleSlug": "find-duplicate-in-array_1112602",
            "content": "<h4 id=\"you-are-given-an-array-of-integers-arr-containing-n-elements-each-integer-is-in-the-range-1-n-1-with-exactly-one-element-repeated-in-the-array\">You are given an array of integers &#39;ARR&#39; containing N elements. Each integer is in the range [1, N-1], with exactly one element repeated in the array.</h4>\n\n<h4 id=\"your-task-is-to-find-the-duplicate-element-the-duplicate-element-may-be-repeated-more-than-twice-in-the-error-but-there-will-be-exactly-one-element-that-is-repeated-in-the-array\">Your task is to find the duplicate element. The duplicate element may be repeated more than twice in the error, but there will be exactly one element that is repeated in the array.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>All the integers in the array appear only once except for precisely one integer which appears two or more times.\n</code></pre>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. Then the T test cases follow.\n\nThe first line of each test case contains an integer \u2018N\u2019, the number of elements in the array. \n\nThe second line of each test case contains \u2018N\u2019 space-separated integers representing the elements of the array. \n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>For each test case, the duplicate element of the given array is printed.\n\nThe output of each test case is printed in a separate line. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not supposed to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10^5\n1 &lt;= ARR[i] &lt;= N - 1\n\nTime Limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>1\n3\n1 1 2\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h4>\n\n<pre><code>1 is repeated in the array, hence function returns 1.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>3\n5\n1 3 4 2 2\n5\n3 1 3 4 2\n3\n1 1 1\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>2\n3\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 967,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers 'arr' of size N, where each element is within the range [1, N-1] and exactly one element is repeated, find the duplicate element.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10^5",
                    "1 <= ARR[i] <= N - 1"
                ],
                "testcases": [
                    {
                        "input": "n = 3, arr = [1, 1, 2]",
                        "output": "1",
                        "explanation": "The element '1' is repeated in the array."
                    },
                    {
                        "input": "n = 5, arr = [1, 3, 4, 2, 2]",
                        "output": "2",
                        "explanation": "The element '2' is repeated in the array."
                    },
                    {
                        "input": "n = 5, arr = [3, 1, 3, 4, 2]",
                        "output": "3",
                        "explanation": "The element '3' is repeated in the array."
                    },
                    {
                        "input": "n = 3, arr = [1, 1, 1]",
                        "output": "1",
                        "explanation": "The element '1' is repeated in the array."
                    },
                    {
                        "input": "n = 4, arr = [1, 2, 3, 2]",
                        "output": "2",
                        "explanation": "The element '2' is repeated in the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>If the array is sorted, then the repeated elements will be adjacent to each other in the sorted array.</p>",
            "<p>Think about using Pigeon-Hole concept, using binary search.</p>",
            "<p>Think about storing each element in a separate data structure.</p>",
            "<p>Try thinking about not storing the values in the above approach.</p>",
            "<p>Try thinking about the array as a linked list and now detect a loop in it and find the starting point of the loop.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n\r\n\tTime complexity: O(N) \r\n\tSpace complexity: O(1)\r\n\t\r\n\tWhere N is the length of the array.\r\n\r\n*/\r\n\r\nint findDuplicate(vector<int> &arr, int n)\r\n{\r\n    \r\n    // Initialise tortoise and hare pointers.\r\n    int tortoise = arr[0];\r\n    int hare = arr[0];\r\n\r\n    do \r\n    {\r\n\r\n        // Hare pointer moves twice as fast as tortoise.\r\n        tortoise = arr[tortoise];\r\n        hare = arr[arr[hare]];\r\n    } \r\n    \r\n    // Find the intersection point of the two runners.\r\n    while (tortoise != hare);\r\n\r\n    // To find the entrance to the cycle tortoise begins from start of array while hare begins from intersection point.\r\n    tortoise = arr[0];\r\n    while (tortoise != hare) \r\n    {\r\n      \r\n      // This time both runners move with same speed.\r\n      tortoise = arr[tortoise];\r\n      hare = arr[hare];\r\n    }\r\n\r\n    // Return the entrance to the cycle, which will be the repeated element.\r\n    return hare;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n\r\n\tTime complexity: O(N) \r\n\tSpace complexity: O(1)\r\n\t\r\n\tWhere N is the length of the array.\r\n\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution{\r\n\r\n    public static int findDuplicate(ArrayList<Integer> arr, int n){\r\n\r\n        // Initialise tortoise and hare pointers.\r\n        int tortoise = arr.get(0);\r\n        int hare = arr.get(0);\r\n\r\n        do{\r\n\r\n            // Hare pointer moves twice as fast as tortoise.\r\n            tortoise = arr.get(tortoise);\r\n            hare = arr.get(arr.get(hare));\r\n        } \r\n        \r\n        // Find the intersection point of the two runners.\r\n        while (tortoise != hare);\r\n\r\n        // To find the entrance to the cycle tortoise begins from start of array while hare begins from intersection point.\r\n        tortoise = arr.get(0);\r\n\r\n        while (tortoise != hare) {\r\n        \r\n        // This time both runners move with same speed.\r\n        tortoise = arr.get(tortoise);\r\n        hare = arr.get(hare);\r\n        }\r\n\r\n        // Return the entrance to the cycle, which will be the repeated element.\r\n        return hare;\r\n\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n\n\tTime complexity: O(N) \n\tSpace complexity: O(1)\n\t\n\tWhere N is the length of the array.\n\n'''\n\ndef findDuplicate(arr, n):\n    \n    # Initialise tortoise and hare pointers.\n    tortoise = arr[0]\n    hare = arr[0]\n    \n    tortoise = arr[tortoise]\n    hare = arr[arr[hare]]\n    \n    # Find the intersection point of the two runners.\n    while tortoise != hare:\n        # Hare pointer moves twice as fast as tortoise.\n        tortoise = arr[tortoise]\n        hare = arr[arr[hare]]\n    \n    # To find the entrance to the cycle tortoise begins from start of array while hare begins from intersection point.\n    tortoise = arr[0]\n    while tortoise != hare:\n        # This time both runners move with same speed.\n        tortoise = arr[tortoise]\n        hare = arr[hare]\n        \n    # Return the entrance to the cycle, which will be the repeated element.\n    return hare",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}