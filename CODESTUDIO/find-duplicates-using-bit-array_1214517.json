{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10289,
            "title": "Find Duplicates Using Bit Array",
            "titleSlug": "find-duplicates-using-bit-array_1214517",
            "content": "<h4 id=\"you-are-given-an-array-list-arr-of-n-elements-where-n-32000-arr-can-have-duplicate-entries-your-task-is-to-find-duplicate-elements-provided-you-can-use-a-maximum-of-4-kilobytes-of-extra-memory\">You are given an array/list \u2018ARR\u2019 of N elements where N &lt;= 32000. \u2018ARR\u2019 can have duplicate entries. Your task is to find duplicate elements, provided you can use a maximum of 4 KiloBytes of extra memory.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Any element can have a maximum of two entries, or we can say a duplicate element will have two entries.\n\nYou need to return an array/list of duplicate elements where the elements in the array/list will be in increasing order.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Given \u2018ARR\u2019  = [1, 3, 2, 7, 4, 2, 1] \n\nIn this \u2018ARR\u2019, 1 and 2 have duplicate entries.\n\nSo, the output array/list = [1, 2]\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases.\nThen the T test cases follow.\n\nThe first line of each test case contains a number N denoting the size of the array/list \u2018ARR\u2019.\n\nThe second line contains N space-separated distinct integers representing the \u2018ARR\u2019 elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case print the output array/list where elements are separated by a single space.\n\nThe output of every test case will be printed in a separate line. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1&lt;= T &lt;=100\n1 &lt;= N &lt;= 32000\n0 &lt;= \u2018ARR[i]\u2019 &lt;= 32000\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1:</h5>\n\n<pre><code>2\n5\n4 3 4 2 1\n6\n1 1 8 6 5 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>4 \n1 5\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample input 1:</h5>\n\n<pre><code>For the first test case :\nThere is only one element with duplicate entries, that is 4 on indexes 1 and 3. \n\nFor the second test case :\nThere are two elements with duplicate entries\nElement 1 exists on indexes 0 and 1.\nElement 5 exists on indexes 4 and 5.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample input 2:</h5>\n\n<pre><code>2\n5\n7 7 4 3 4\n6\n1 2 3 4 5 7\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>4 7\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'ARR' of N integers (N <= 32000) that may contain duplicate entries, identify the duplicate elements using a maximum of 4KB of extra memory.  Each element can appear at most twice. Return a sorted list of the duplicate elements.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 32000",
                    "0 <= ARR[i] <= 32000",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "5\n4 3 4 2 1",
                        "output": "4",
                        "explanation": "The input array [4, 3, 4, 2, 1] contains the number 4 twice. Therefore, the output is [4]."
                    },
                    {
                        "input": "6\n1 1 8 6 5 5",
                        "output": "1 5",
                        "explanation": "The input array [1, 1, 8, 6, 5, 5] contains the number 1 and the number 5 twice. Therefore, the output is [1, 5]."
                    },
                    {
                        "input": "5\n7 7 4 3 4",
                        "output": "4 7",
                        "explanation": "The input array [7, 7, 4, 3, 4] contains the number 7 and the number 4 twice. Therefore, the output is [4, 7]."
                    },
                    {
                        "input": "6\n1 2 3 4 5 7",
                        "output": "",
                        "explanation": "The input array [1, 2, 3, 4, 5, 7] contains no duplicate numbers. Therefore, the output is empty."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>&nbsp;</strong>Can you think of a brute force approach?</p>",
            "<p>Can we store all the previously encountered elements, maybe a bit array can help with given memory constraints.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}