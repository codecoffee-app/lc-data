{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9351,
            "title": "Find four elements that sums to a given value.  ",
            "titleSlug": "find-four-elements-that-sums-to-a-given-value_983605",
            "content": "<h4 id=\"you-are-given-an-array-list-arr-of-n-integers-and-an-integer-value-target-you-need-to-check-whether-there-exist-four-numbers-arr-i-arr-j-arr-k-arr-l-such-that-0-i-j-k-l-n-and-arr-i-arr-j-arr-k-arr-l-target\">You are given an array/list &#39;ARR&#39; of \u2018N\u2019 integers  and an integer value \u2018TARGET\u2019. You need to check whether there exist four numbers (ARR[i], ARR[j], ARR[k], ARR[l]) such that (0 &lt;= i &lt; j &lt; k &lt; l &lt; N) and ARR[i] + ARR[j] + ARR[k] + ARR[l] = &#39;TARGET&#39;.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. All four numbers should exist at different indices in the given array.\n2. The answer is case-sensitive.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018TARGET\u2019 denoting the number of the elements present in the sequence and the target sum respectively.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the elements of the array &#39;ARR&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output of each test case should contain  \u201cYes\u201d (without quotes) if there exist 4 numbers (having different indices) that give sum \u2018TARGET\u2019 else \u201cNo\u201d (without quotes).\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n4 &lt;= N &lt;= 2*10^2   \n-10^9 &lt;= ARR[i] &lt;= 10^9\n-10^9 &lt;= TARGET&lt;= 10^9 \n\nTime Limit: 1 sec\n</code></pre>\n\n<h4 id=\"follow-up\">Follow Up:</h4>\n\n<pre><code>Can you try solving the problem with less than O(N^2 * log(N)) time complexity?\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5 9\n1 3 3 10 2\n6 20\n2 4 6 3 1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>Yes\nNo\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nThe elements at indices (0, 1, 2, 4) gives sum 9 i.e, ARR[0] + ARR[1] + ARR[2] + ARR[4] = 9. Hence the answer is Yes.\n\nTest case 2:\nNone of the combinations of 4 numbers gives 20 as &#39;TARGET&#39;. Hence the answer is No.  \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 15\n0 10 1 2 2\n6 20\n-2 12 -1 1 20 1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>Yes\nYes\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 124,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'ARR' of 'N' integers and a target integer 'TARGET', determine if there exist four distinct elements in 'ARR' (ARR[i], ARR[j], ARR[k], ARR[l]) such that (0 <= i < j < k < l < N) and their sum is equal to 'TARGET'.",
                "constraints": [
                    "1 <= T <= 10^2 (Number of Test Cases)",
                    "4 <= N <= 2*10^2 (Size of the Array)",
                    "-10^9 <= ARR[i] <= 10^9 (Value of Array Elements)",
                    "-10^9 <= TARGET <= 10^9 (Target Sum)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 9\n1 3 3 10 2",
                        "output": "Yes",
                        "explanation": "The elements at indices (0, 1, 2, 4) have a sum of 9 (1 + 3 + 3 + 2 = 9), which equals the target. Thus, the answer is Yes."
                    },
                    {
                        "input": "6 20\n2 4 6 3 1 1",
                        "output": "No",
                        "explanation": "No combination of four distinct elements in the array sums up to 20. Therefore, the answer is No."
                    },
                    {
                        "input": "5 15\n0 10 1 2 2",
                        "output": "Yes",
                        "explanation": "The elements at indices (1,2,3,4) have a sum of 15 (10 + 1 + 2 + 2 = 15), which equals the target. Thus, the answer is Yes."
                    },
                    {
                        "input": "6 20\n-2 12 -1 1 20 1",
                        "output": "Yes",
                        "explanation": "The elements at indices (0, 1, 3, 4) have a sum of 20 (-2 + 12 + 1 +20= 20), which equals the target. Thus, the answer is Yes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try checking all the combinations of quadruples.</p>",
            "<p>Use sorting to eliminate the innermost loop.&nbsp;</p>",
            "<p>Use some auxiliary space to reduce the problem to find the pair sums.</p>",
            "<p>Think of storing the sum of all possible pairs with respect to their indices in a data structure.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N^2)\r\n    Space complexity: O(N^2)\r\n\r\n    Where 'N' is the number of element present in the given array.\r\n*/\r\n\r\n#include <unordered_map>\r\n#include <vector>\r\n\r\nbool commonIdx(pair < int, int > p1, pair < int, int > p2) {\r\n    return p1.first == p2.first || p1.first == p2.second || p1.second == p2.first || p1.second == p2.second;\r\n}\r\n\r\nstring fourSum(vector < int > arr, int target, int n) {\r\n    unordered_map < int, pair < int, int >> mp;\r\n    \r\n    /* \r\n        Preparing a HashMap which will store sum of \r\n        two elements of array arr[] as key and their \r\n        indexes as value.\r\n    */\r\n    for (int i = 0; i < n - 1; ++i) {\r\n        for (int j = i + 1; j < n; ++j) {\r\n            mp[arr[i] + arr[j]] = {\r\n                i,\r\n                j\r\n            };\r\n        }\r\n    }\r\n\r\n    // Check on all possible pair sum which can be found in HashMap.\r\n    for (int i = 0; i < n - 1; ++i) {\r\n        for (int j = i + 1; j < n; ++j) {\r\n            int requiredSum = target - (arr[i] + arr[j]);\r\n            /* \r\n                If HashMap contains required sum then we must \r\n                ensure that both pairs does not contain common indexes.\r\n            */\r\n            if (mp.find(requiredSum) != mp.end() && !commonIdx(mp[requiredSum], {\r\n                    i,\r\n                    j\r\n                })) {\r\n                return \"Yes\";\r\n            }\r\n        }\r\n    }\r\n    // If we can not found the target sum then we return No.\r\n    return \"No\";\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N^2)\r\n\tSpace complexity: O(N^2)\r\n\r\n\tWhere 'N' is the number of element present in the given array.\r\n'''\r\n\r\ndef commonIdx(p1, p2) :\r\n    return p1[0] == p2[0] or p1[0] == p2[1] or p1[1] == p2[0] or p1[1] == p2[1]\r\n\r\n\r\ndef fourSum(arr, target):\r\n\r\n    ''' \r\n    \tPreparing a HashMap which will store sum of \r\n        two elements of array arr[] as key and their \r\n        indexes as value.\r\n    '''\r\n    n = len(arr)\r\n\r\n    mp = {}\r\n    for i in range(n - 1):\r\n        for j in range(i + 1, n):\r\n            mp[arr[i] + arr[j]] = [i, j]\r\n \r\n    # Check on all possible pair sum which can be found in HashMap.\r\n    for i in range(n - 1):\r\n        for j in range(i + 1, n):\r\n\r\n            sum = arr[i] + arr[j]\r\n            # If target - sum is present in hash table.\r\n            if (target - sum) in mp and not commonIdx(mp[target - sum], [i, j]):\r\n                ''' \r\n            \t    If HashMap contains required sum then we must \r\n                    ensure that both pairs does not contain common \r\n                    indexes.\r\n                '''\r\n                return 'Yes'\r\n    \r\n    return 'No'\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N^2)\r\n    Space complexity: O(N^2)\r\n\r\n    Where 'N' is the number of element present in the given array.\r\n*/\r\n\r\nimport java.util.HashMap;\r\n\r\npublic class Solution {\r\n    public static String fourSum(int[] arr, int target, int n) {\r\n\r\n        HashMap < Integer, Pair > map = new HashMap < > ();\r\n        /* \r\n            Preparing a HashMap which will store sum of two \r\n            elements of array arr[] as key and their \r\n            indexes as value.\r\n        */\r\n        for (int i = 0; i < n - 1; ++i) {\r\n            for (int j = i + 1; j < n; ++j) {\r\n                map.put(arr[i] + arr[j], new Pair(i, j));\r\n            }\r\n        }\r\n        \r\n        for (int i = 0; i < n - 1; ++i) {\r\n            for (int j = i + 1; j < n; ++j) {\r\n                int requiredSum = target - (arr[i] + arr[j]);\r\n                /* \r\n                    If HashMap contains required sum then we must\r\n                    ensure that both pairs does not contain \r\n                    common indexes.\r\n                */\r\n                if (map.containsKey(requiredSum) && !commonIdx(map.get(requiredSum), new Pair(i, j))) {\r\n                    return \"Yes\";\r\n                }\r\n            }\r\n        }\r\n        // If we can not found the target sum then we return No.\r\n        return \"No\";\r\n\r\n    }\r\n\r\n    private static boolean commonIdx(Pair p1, Pair p2) {\r\n        return p1.idx1 == p2.idx1 || p1.idx1 == p2.idx2 || p1.idx2 == p2.idx1 || p1.idx2 == p2.idx2;\r\n    }\r\n\r\n    // Custom Pair class to store pair of indexes.\r\n    static class Pair {\r\n        int idx1;\r\n        int idx2;\r\n\r\n        Pair(int idx1, int idx2) {\r\n            this.idx1 = idx1;\r\n            this.idx2 = idx2;\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}