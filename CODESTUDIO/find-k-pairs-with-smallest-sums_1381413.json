{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11394,
            "title": "Find K Pairs with Smallest Sums",
            "titleSlug": "find-k-pairs-with-smallest-sums_1381413",
            "content": "<h4 id=\"you-are-given-two-arrays-of-positive-integers-say-arr1-and-arr2-and-a-positive-integer-k-also-arr1-and-arr2-are-already-sorted-in-ascending-order-consider-all-pairs-x-y-such-that-x-belongs-to-arr1-and-y-belongs-to-arr2-you-need-to-find-exactly-k-such-pairs-with-the-smallest-sum-of-x-and-y\">You are given two arrays of positive integers say \u2018arr1\u2019 and \u2018arr2\u2019 and a positive integer \u2018K\u2019. Also \u2018arr1\u2019 and \u2018arr2\u2019 are already sorted in ascending order. Consider all pairs (x, y) such that \u2018x\u2019 belongs to \u2018arr1\u2019 and \u2018y\u2019 belongs to \u2018arr2\u2019. You need to find exactly \u2018K\u2019 such pairs with the smallest sum of \u2018x\u2019 and \u2018y\u2019.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Let \u2018arr1\u2019 be [ \u20181\u2019, \u20182\u2019, \u20186\u2019 ] and \u2018arr2\u2019 be [ \u20183\u2019, \u20183\u2019, \u20185\u2019 ] and \u2018K\u2019 be 3.\n\nThere are 9 possible (x, y) pairs such that \u2018x\u2019 belongs to \u2018arr1\u2019 and \u2018y\u2019 belongs to \u2018arr2\u2019. Among all of them 3 pairs with smaller \u2018x\u2019 + \u2018y\u2019 are [ (1, 3), (1, 3), (2, 3) ].\n</code></pre>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. The description of \u2018T\u2019 test cases follows\n\nThe first line of each test case contains three space-separated integers \u2018N\u2019, \u2018M\u2019, and \u2018K\u2019 representing the size of \u2018arr1\u2019, \u2018arr2\u2019, and number of pairs with the smallest sum to be returned respectively.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers, representing the elements of the first array, \u2018arr1\u2019.\n\nThe last line of the test cases contains \u2018M\u2019 space-separated integers, representing the elements of the second array, \u2018arr2\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>For each test case, print \u2018K\u2019 lines sorted order containing two space-separated integers \u2018x\u2019 and \u2018y\u2019, where \u2018x\u2019 and \u2018y\u2019 denotes the value of pairs with the smallest sum. If two or more pairs have an equal sum then print pair with minimum \u2018x\u2019 value first. \n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. \n\nIn the given function, you need to return a 2D array \u2018arr[K][2]\u2019, where \u2018K\u2019 is the number of pairs required and \u2018arr[i][0]\u2019, \u2018arr[i][1]\u2019 are the first and second value of \u2018i-th\u2019 pair.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N, M &lt;= 3000\n1 &lt;= K &lt;= N * M &lt;= 5000\n1 &lt;= arr1[i], arr2[i] &lt;= 10 ^ 9\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 and \u2018M\u2019 are the size of the given first and second array, \u2018K\u2019 denotes the number of pairs required with the smallest sum, and \u2018arr1[i]\u2019, \u2018arr2[i]\u2019 represents the \u2018i-th\u2019 elements in the first and second array.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n3 3 3\n1 2 3\n4 5 6\n2 3 2\n4 5\n2 4 4\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>1 4\n1 5\n2 4\n4 2\n5 2\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h4>\n\n<pre><code>Test case 1:\n\nAmong all possible pairs (x, y) such that \u2018x\u2019 is from [ \u20181\u2019, \u20182\u2019, \u20183\u2019 ] and \u2018y\u2019 is from [ \u20184\u2019, \u20185\u2019, \u20186\u2019 ], 3 pairs with the smallest sum are (1, 4) with sum 5, (1, 5) with sum 6, and (2, 4) with sum 6.\n\nTest case 2:\n\nTwo pairs with the smallest sum are (4, 2) and (4, 4) with sum 6 and 8.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>1\n3 4 1\n5 6 9 \n1 2 2 4 \n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>5 1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h4>\n\n<pre><code>As the arrays are sorted, the pair with the smallest sum will be (5, 1).\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two sorted arrays of positive integers, `arr1` and `arr2`, and an integer `k`, find the `k` pairs (x, y) with the smallest sums, where x belongs to `arr1` and y belongs to `arr2`. Return these `k` pairs in sorted order based on their sums. If two pairs have the same sum, prioritize the pair with the smaller 'x' value.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N, M <= 3000",
                    "1 <= K <= N * M <= 5000",
                    "1 <= arr1[i], arr2[i] <= 10 ^ 9"
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 3, k = 3, arr1 = [1, 2, 6], arr2 = [3, 3, 5]",
                        "output": "1 3\n1 3\n2 3",
                        "explanation": "The 3 pairs with the smallest sum are (1, 3), (1, 3), and (2, 3)."
                    },
                    {
                        "input": "n = 2, m = 3, k = 2, arr1 = [4, 5], arr2 = [2, 4, 4]",
                        "output": "4 2\n5 2",
                        "explanation": "The 2 pairs with the smallest sum are (4, 2) and (5, 2)."
                    },
                    {
                        "input": "n = 3, m = 4, k = 1, arr1 = [5, 6, 9], arr2 = [1, 2, 2, 4]",
                        "output": "5 1",
                        "explanation": "The pair with the smallest sum is (5, 1)."
                    },
                    {
                        "input": "n = 4, m = 4, k = 4, arr1 = [1, 7, 11, 15], arr2 = [2, 4, 6, 8]",
                        "output": "1 2\n1 4\n1 6\n1 8",
                        "explanation": "The 4 pairs with the smallest sum are (1,2), (1,4), (1,6), (1,8)"
                    },
                    {
                        "input": "n = 2, m = 2, k = 4, arr1 = [1, 1], arr2 = [1, 1]",
                        "output": "1 1\n1 1\n1 1\n1 1",
                        "explanation": "All combinations are equal and must be printed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check all possible pairs.</p>",
            "<p>Think greedily to find the next possible pair with a minimum sum. Think of using a priority queue/ Heap.</p>",
            "<p>Think of a way in which we do not need to store already visited pairs.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}