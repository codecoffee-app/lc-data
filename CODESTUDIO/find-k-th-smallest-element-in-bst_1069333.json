{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9620,
            "title": "Find K-th smallest Element in BST",
            "titleSlug": "find-k-th-smallest-element-in-bst_1069333",
            "content": "<h4 id=\"given-a-binary-search-tree-and-an-integer-k-your-task-is-to-find-the-k-th-smallest-element-in-the-given-bst-binary-search-tree\">Given a binary search tree and an integer \u2018K\u2019. Your task is to find the \u2018K-th\u2019 smallest element in the given BST( binary search tree).</h4>\n\n<h4 id=\"bst-binary-search-tree\">BST ( binary search tree) -</h4>\n\n<h4 id=\"if-all-the-smallest-nodes-on-the-left-side-and-all-the-greater-nodes-on-the-right-side-of-the-node-current-node\">If all the smallest nodes on the left side and all the greater nodes on the right side of the node current node.</h4>\n\n<h4 id=\"example\">Example -</h4>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-141-6962.png\" alt=\"alt text\"></p>\n\n<h4 id=\"order-of-elements-in-increasing-order-in-the-given-bst-is-2-3-4-5-6-7-8-10\">Order of elements in increasing order in the given BST is - { 2, 3, 4, 5, 6, 7, 8, 10 }</h4>\n\n<h4 id=\"suppose-given-k-3-then-3rd-smallest-element-is-4\">Suppose given \u2018K = 3\u2019 then 3rd smallest element is \u20184\u2019.</h4>\n\n<h4 id=\"suppose-given-k-8-then-8th-smallest-element-is-10\">Suppose given \u2018K = 8\u2019 then 8th smallest element is \u201810\u2019.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. You are not required to print the output explicitly, it has already been taken care of. Just implement the function and return the \u2018K-th\u2019 smallest element of BST.\n2. You don\u2019t need to return \u2018K-th\u2019 smallest node, return just value of that node. \n3. If \u2018K-th\u2019 smallest element is not present in BST then return -1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u2018T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of input contains a single integer \u2018K\u2019.\nThe second line of input contains the elements of the tree in the level order form separated by a single space.   \nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, return the \u2018K-th\u2019 smallest element.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N, K &lt;= 3000\n-10^9 &lt;= data &lt;= 10^9\n\nWhere \u2018T\u2019 represents the number of test cases, \u2018N\u2019 is the number of nodes in the tree, \u2018K\u2019 denotes given integer and \u2018data\u2019 denotes data contained in the node of a binary tree.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\n3 1 4 -1 -1 -1 5 -1 -1\n4\n5 2 -1 -1 4 3 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>4   \n5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>Test case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-148-6963.png\" alt=\"alt text\"></p>\n\n<pre><code>Order of elements in the increasing order in the given BST is - { 1, 3, 4, 5 }.\n\u2018K = 3\u2019, so the 3\u2019rd smallest element is \u20184\u2019, return \u20184\u2019.\n\nTest case 2:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-146-6964.png\" alt=\"alt text\"></p>\n\n<pre><code>Order of elements in increasing order in the given BST is - { 2, 3, 4, 5 }.\n\u2018K=4\u2019, so the 4\u2019rd smallest element is \u20185\u2019, return \u20185\u2019.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1\n3 2 -1 1 -1 -1 -1\n4\n3 1 4 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>1\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 57,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a Binary Search Tree (BST) and an integer `k`, find the k-th smallest element in the BST. If the k-th smallest element does not exist, return -1.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N, K <= 3000",
                    "-10^9 <= data <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "root = [3,1,4,null,2], k = 1",
                        "output": "1",
                        "explanation": "The BST contains the elements {1, 2, 3, 4}. The 1st smallest element is 1."
                    },
                    {
                        "input": "root = [5,3,6,2,4,null,null,1], k = 3",
                        "output": "3",
                        "explanation": "The BST contains the elements {1, 2, 3, 4, 5, 6}. The 3rd smallest element is 3."
                    },
                    {
                        "input": "root = [3, 1, 4, null, null, 2, 5], k = 3",
                        "output": "3",
                        "explanation": "The in-order traversal of the tree gives [1, 2, 3, 4, 5]. The 3rd smallest is 3."
                    },
                    {
                        "input": "root = [5, 2, -1, -1, 4, 3, -1, -1, -1], k = 4",
                        "output": "5",
                        "explanation": "The BST contains the elements {2, 3, 4, 5}.  The 4th smallest element is 5."
                    },
                    {
                        "input": "root = [3, 2, -1, 1, -1, -1, -1], k = 1",
                        "output": "1",
                        "explanation": "The BST contains the elements {1, 2, 3}. The 1st smallest element is 1."
                    },
                    {
                        "input": "root = [3, 1, 4, -1, -1, -1, -1], k = 4",
                        "output": "-1",
                        "explanation": "The BST contains the elements {1, 3, 4}. The 4th smallest element does not exist, so return -1."
                    },
                    {
                        "input": "root = [10, 5, 15, 2, 7, -1, 20, -1, -1, -1, -1, -1, -1], k = 6",
                        "output": "20",
                        "explanation": "The BST contains the elements {2, 5, 7, 10, 15, 20}. The 6th smallest element is 20."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse in an inorder manner.</p>",
            "<p>Traverse the tree in an iterative manner.</p>",
            "<p>Inorder traversal without stack and recursion.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}