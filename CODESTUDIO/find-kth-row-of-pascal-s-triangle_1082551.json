{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9730,
            "title": "Find Kth row of Pascal's Triangle",
            "titleSlug": "find-kth-row-of-pascal-s-triangle_1082551",
            "content": "<h4 id=\"you-are-given-a-non-negative-integer-k-your-task-is-to-find-out-the-kth-row-of-pascal-s-triangle\">You are given a non-negative integer &#39;K&#39;. Your task is to find out the Kth row of Pascal\u2019s Triangle.</h4>\n\n<h4 id=\"in-mathematics-pascals-triangle-is-a-triangular-array-where-each-entry-of-a-line-is-a-value-of-a-binomial-coefficient-an-example-of-pascal-s-triangle-is-given-below\">In Mathematics, Pascal&#39;s triangle is a triangular array where each entry of a line is a value of a binomial coefficient. An example of Pascal\u2019s triangle is given below.</h4>\n\n<p><img src=\"https://files.codingninjas.in/1_lvwzr1wuuqjpmkjrq5hejq-7064.png\" alt=\"example\"></p>\n\n<h4 id=\"example\">Example :-</h4>\n\n<pre><code>INPUT : K = 2\nOUTPUT: 1 1\n\nIn the above example, K = 2, Hence the 2nd row from the top of pascal\u2019s triangle, as shown in the above example is 1 1.\n\nINPUT   : K = 4\nOUTPUT  : 1 4 6 4 1\n\nIn the above example, K = 4, Hence the 4th row from the top of pascal\u2019s triangle, as shown in the above example is 1 3 3 1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of the test case. Then the test case follows.\n\nThe first and the only line of each test case contains a single integer \u201cK\u201d.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, print a single line containing &#39;R&#39; space-separated integers showing the Kth row of pascal\u2019s triangle, where &#39;R&#39; is the number of elements in a particular row.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= K &lt;= 50\n\nWhere \u2018T\u2019 is the number of test cases, \u2018K\u2019 is the input row number.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4\n1\n2\n3\n4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n1 1\n1 2 1\n1 3 3 1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For K = 1, the elements of the first row of the pascal\u2019s triangle will be printed, Hence the output is 1.\n\nFor K = 2, the elements of the second row of the pascal\u2019s triangle will be printed, Hence the output is 1 1.\n\nFor K = 3, the elements of the third row of the pascal\u2019s triangle will be printed, Hence the output is 1 2 1.\n\nFor K = 4, the elements of the fourth row of the pascal\u2019s triangle will be printed, Hence the output is 1 3 3 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5\n6\n5 \n7\n2\n9\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 5 10 10 5 1 \n1 4 6 4 1 \n1 6 15 20 15 6 1 \n1 1\n1 8 28 56 70 56 28 8 1 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative integer K, determine the Kth row of Pascal's Triangle.  Pascal's Triangle is a triangular array where each entry is a binomial coefficient. The rows are numbered starting from 1.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= K <= 50",
                    "Where \u2018T\u2019 is the number of test cases, \u2018K\u2019 is the input row number.",
                    "Time limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": "For K = 1, the first row of Pascal's Triangle is [1]."
                    },
                    {
                        "input": "2",
                        "output": "1 1",
                        "explanation": "For K = 2, the second row of Pascal's Triangle is [1, 1]."
                    },
                    {
                        "input": "3",
                        "output": "1 2 1",
                        "explanation": "For K = 3, the third row of Pascal's Triangle is [1, 2, 1]."
                    },
                    {
                        "input": "4",
                        "output": "1 3 3 1",
                        "explanation": "For K = 4, the fourth row of Pascal's Triangle is [1, 3, 3, 1]."
                    },
                    {
                        "input": "6",
                        "output": "1 5 10 10 5 1",
                        "explanation": null
                    },
                    {
                        "input": "5",
                        "output": "1 4 6 4 1",
                        "explanation": null
                    },
                    {
                        "input": "7",
                        "output": "1 6 15 20 15 6 1",
                        "explanation": null
                    },
                    {
                        "input": "2",
                        "output": "1 1",
                        "explanation": null
                    },
                    {
                        "input": "9",
                        "output": "1 8 28 56 70 56 28 8 1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a recursive algorithm?</p>",
            "<p>Can we think of a Dynamic Programming approach?</p>",
            "<p>Can we optimize the space complexity of our DP approach?</p>",
            "<p>Instead of generating previous rows, can we find the pattern of elements in the current row?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}