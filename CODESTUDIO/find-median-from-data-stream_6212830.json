{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22937,
            "title": "Find Median from Data Stream",
            "titleSlug": "find-median-from-data-stream_6212830",
            "content": "<h4 id=\"the-median-is-the-middle-value-in-an-ordered-integer-list-if-the-size-of-the-list-is-even-there-is-no-middle-value-and-the-median-is-the-mean-of-the-two-middle-values\">The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Median for \u2018arr\u2019 = [1,2,3,4,5] is 3.\nMedian for \u2018arr\u2019 = [1,2,3,4] is (2+3)/2 = 2.5.\n</code></pre>\n\n<h4 id=\"implement-the-medianfinder-class\">Implement the MedianFinder class:</h4>\n\n<h4 id=\"medianfinder-initialises-the-medianfinder-object\">MedianFinder() initialises the MedianFinder object.</h4>\n\n<h4 id=\"1-void-addnum-int-num-adds-the-integer-num-from-the-datastream-to-the-data-structure\">1. Void addNum(int \u2018num\u2019) adds the integer \u2018num\u2019 from the datastream to the data structure.</h4>\n\n<h4 id=\"2-double-findmedian-returns-the-median-of-all-elements-so-far\">2. Double findMedian() returns the median of all elements so far.</h4>\n\n<h4 id=\"note-answers-within-10-5-of-actual-answer-will-be-accepted\">Note : Answers within 10^-5 of actual answer will be accepted.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \n5\n1 1\n1 2\n2\n1 5\n2\n\nOutput:     \n1.5\n2\n\nExplanation:\nMedianFinder() initialises the MedianFinder object.\nAdd 1 to the data structure \u2018arr\u2019, so arr = [1].\nAdd 2 to arr, so arr = [1,2]\nFind Median of current arr, that is (1+2)/2 = 1.5.\nAdd 5 to arr, so arr = [1,2,5]\nFind Median of current arr, that is 2.0.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains an integer, \u2018T\u2019, denoting the number of test cases.\n\nThe First line of each test case contains an integer, \u2018N\u2019 denoting the number of calls to addNum and findMedian.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Return an integer if the call is made to findMedian.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1  &lt;= T &lt;= 10\n-100000 &lt;= nums &lt;= 100000\n1 &lt;= N &lt;= 50000\nThere would be at least 1 element in the data structure before calling findMedian.\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5\n1 1\n1 2\n2\n1 5\n2 \n4\n1 1\n2\n1 5\n2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1.5\n2\n1\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>Test 1:\nMedianFinder() initialises the MedianFinder object.\nAdd 1 to the data structure \u2018arr\u2019, so arr = [1].\nAdd 2 to arr, so arr = [1,2]\nFind Median of the current arr, that is (1+2)/2 = 1.5.\nAdd 5 to arr, so arr = [1,2,5]\nFind Median of current arr, that is 2.0\n\nTest 2:\nMedianFinder() initialises the MedianFinder object.\nAdd 1 to the data structure \u2018arr\u2019, so arr = [1].\nFind Median of current arr, that is 1.0.\nAdd 5 to arr, so arr = [1,5]\nFind Median of current arr, that is (1+5)/2 = 3.0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4\n1 1\n1 5\n1 2\n2\n5\n1 1\n1 5\n2\n1 3\n2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2.0\n3\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a `MedianFinder` class that supports the following operations:\n\n*   `MedianFinder()`: Initializes the `MedianFinder` object.\n*   `void addNum(int num)`: Adds the integer `num` from the data stream to the data structure.\n*   `double findMedian()`: Returns the median of all elements so far. Answers within 10^-5 of the actual answer will be accepted.\n\nThe median of a sorted list of integers is the middle value. If the list has an even number of elements, the median is the average of the two middle values.",
                "constraints": [
                    "1 <= T <= 10",
                    "-100000 <= nums <= 100000",
                    "1 <= N <= 50000",
                    "There would be at least 1 element in the data structure before calling findMedian.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n1 1\n1 2\n2\n1 5\n2",
                        "output": "1.5\n2",
                        "explanation": "Test 1:\n- Add 1: arr = [1]\n- Add 2: arr = [1, 2]\n- findMedian(): (1 + 2) / 2 = 1.5\n- Add 5: arr = [1, 2, 5]\n- findMedian(): 2"
                    },
                    {
                        "input": "4\n1 1\n2\n1 5\n2",
                        "output": "1\n3",
                        "explanation": "Test 2:\n- Add 1: arr = [1]\n- findMedian(): 1\n- Add 5: arr = [1, 5]\n- findMedian(): (1 + 5) / 2 = 3"
                    },
                    {
                        "input": "4\n1 1\n1 5\n1 2\n2",
                        "output": "2.0",
                        "explanation": "Test case:\n- Add 1: arr = [1]\n- Add 5: arr = [1, 5]\n- Add 2: arr = [1, 2, 5]\n- findMedian(): 2"
                    },
                    {
                        "input": "5\n1 1\n1 5\n2\n1 3\n2",
                        "output": "3\n3",
                        "explanation": "Test case:\n- Add 1: arr = [1]\n- Add 5: arr = [1, 5]\n- findMedian(): (1 + 5) / 2 = 3\n- Add 3: arr = [1, 3, 5]\n- findMedian(): 3"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use 2 heap data structure - min and max heap to store data.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}