{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22937,
            "title": "Find Median from Data Stream",
            "titleSlug": "find-median-from-data-stream_6212830",
            "content": "<h4 id=\"the-median-is-the-middle-value-in-an-ordered-integer-list-if-the-size-of-the-list-is-even-there-is-no-middle-value-and-the-median-is-the-mean-of-the-two-middle-values\">The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Median for \u2018arr\u2019 = [1,2,3,4,5] is 3.\nMedian for \u2018arr\u2019 = [1,2,3,4] is (2+3)/2 = 2.5.\n</code></pre>\n\n<h4 id=\"implement-the-medianfinder-class\">Implement the MedianFinder class:</h4>\n\n<h4 id=\"medianfinder-initialises-the-medianfinder-object\">MedianFinder() initialises the MedianFinder object.</h4>\n\n<h4 id=\"1-void-addnum-int-num-adds-the-integer-num-from-the-datastream-to-the-data-structure\">1. Void addNum(int \u2018num\u2019) adds the integer \u2018num\u2019 from the datastream to the data structure.</h4>\n\n<h4 id=\"2-double-findmedian-returns-the-median-of-all-elements-so-far\">2. Double findMedian() returns the median of all elements so far.</h4>\n\n<h4 id=\"note-answers-within-10-5-of-actual-answer-will-be-accepted\">Note : Answers within 10^-5 of actual answer will be accepted.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \n5\n1 1\n1 2\n2\n1 5\n2\n\nOutput:     \n1.5\n2\n\nExplanation:\nMedianFinder() initialises the MedianFinder object.\nAdd 1 to the data structure \u2018arr\u2019, so arr = [1].\nAdd 2 to arr, so arr = [1,2]\nFind Median of current arr, that is (1+2)/2 = 1.5.\nAdd 5 to arr, so arr = [1,2,5]\nFind Median of current arr, that is 2.0.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains an integer, \u2018T\u2019, denoting the number of test cases.\n\nThe First line of each test case contains an integer, \u2018N\u2019 denoting the number of calls to addNum and findMedian.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Return an integer if the call is made to findMedian.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1  &lt;= T &lt;= 10\n-100000 &lt;= nums &lt;= 100000\n1 &lt;= N &lt;= 50000\nThere would be at least 1 element in the data structure before calling findMedian.\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5\n1 1\n1 2\n2\n1 5\n2 \n4\n1 1\n2\n1 5\n2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1.5\n2\n1\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>Test 1:\nMedianFinder() initialises the MedianFinder object.\nAdd 1 to the data structure \u2018arr\u2019, so arr = [1].\nAdd 2 to arr, so arr = [1,2]\nFind Median of the current arr, that is (1+2)/2 = 1.5.\nAdd 5 to arr, so arr = [1,2,5]\nFind Median of current arr, that is 2.0\n\nTest 2:\nMedianFinder() initialises the MedianFinder object.\nAdd 1 to the data structure \u2018arr\u2019, so arr = [1].\nFind Median of current arr, that is 1.0.\nAdd 5 to arr, so arr = [1,5]\nFind Median of current arr, that is (1+5)/2 = 3.0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4\n1 1\n1 5\n1 2\n2\n5\n1 1\n1 5\n2\n1 3\n2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2.0\n3\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a `MedianFinder` class that efficiently calculates the median of a stream of numbers. The class should support two operations:\n\n1.  `addNum(int num)`: Adds a new integer `num` to the data structure.\n2.  `findMedian()`: Returns the current median of all numbers added so far. If the number of elements is even, the median is the average of the two middle elements. Ensure the returned value is within 10^-5 of the actual median.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "-100000 <= num <= 100000 (Range of input numbers)",
                    "1 <= N <= 50000 (Number of addNum and findMedian calls)"
                ],
                "testcases": [
                    {
                        "input": "n = 5, operations = [[1,1],[1,2],[2],[1,5],[2]], nums = [1, 2, 5]",
                        "output": "1.5\n2.0",
                        "explanation": "MedianFinder() initialises the MedianFinder object.\nAdd 1 to the data structure \u2018arr\u2019, so arr = [1].\nAdd 2 to arr, so arr = [1,2]\nFind Median of current arr, that is (1+2)/2 = 1.5.\nAdd 5 to arr, so arr = [1,2,5]\nFind Median of current arr, that is 2.0."
                    },
                    {
                        "input": "n = 4, operations = [[1,1],[2],[1,5],[2]], nums = [1, 5]",
                        "output": "1.0\n3.0",
                        "explanation": "MedianFinder() initialises the MedianFinder object.\nAdd 1 to the data structure \u2018arr\u2019, so arr = [1].\nFind Median of current arr, that is 1.0.\nAdd 5 to arr, so arr = [1,5]\nFind Median of current arr, that is (1+5)/2 = 3.0."
                    },
                    {
                        "input": "n = 4, operations = [[1, 1], [1, 5], [1, 2], [2]], nums = [1, 5, 2]",
                        "output": "2.0",
                        "explanation": "MedianFinder() initialises the MedianFinder object.\nAdd 1 to the data structure \u2018arr\u2019, so arr = [1].\nAdd 5 to arr, so arr = [1,5]\nAdd 2 to arr, so arr = [1,2,5]\nFind Median of current arr, that is 2.0"
                    },
                    {
                        "input": "n = 5, operations = [[1, 1], [1, 5], [2], [1, 3], [2]], nums = [1, 5, 3]",
                        "output": "3.0\n3.0",
                        "explanation": "MedianFinder() initialises the MedianFinder object.\nAdd 1 to the data structure \u2018arr\u2019, so arr = [1].\nAdd 5 to arr, so arr = [1,5]\nFind Median of current arr, that is (1+5)/2 = 3.0.\nAdd 3 to arr, so arr = [1,3,5]\nFind Median of current arr, that is 3.0."
                    },
                    {
                        "input": "n = 6, operations = [[1,40],[1,12],[1,16],[2],[1,14],[2]], nums = [40, 12, 16, 14]",
                        "output": "16.0\n15.0",
                        "explanation": "Add 40 to the data structure.  arr = [40]\nAdd 12 to the data structure.  arr = [12, 40]\nAdd 16 to the data structure.  arr = [12, 16, 40]\nFind Median of current arr, that is 16.0.\nAdd 14 to the data structure.  arr = [12, 14, 16, 40]\nFind Median of current arr, that is (14 + 16) / 2 = 15.0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use 2 heap data structure - min and max heap to store data.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}