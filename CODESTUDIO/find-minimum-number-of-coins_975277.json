{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9083,
            "title": "Find minimum number of coins",
            "titleSlug": "find-minimum-number-of-coins_975277",
            "content": "<h4 id=\"given-an-infinite-supply-of-indian-currency-i-e-1-2-5-10-20-50-100-500-1000-valued-coins-and-an-amount-n\">Given an infinite supply of Indian currency i.e. [1, 2, 5, 10, 20, 50, 100, 500, 1000] valued coins and an amount <strong><em>&#39;N&#39;</em></strong>.</h4>\n\n<p><Br></p>\n\n<h4 id=\"find-the-minimum-coins-needed-to-make-the-sum-equal-to-n-you-have-to-return-the-list-containing-the-value-of-coins-required-in-decreasing-order\">Find the minimum coins needed to make the sum equal to &#39;N&#39;. You have to return the list containing the value of coins required in decreasing order.</h4>\n\n<p><Br></p>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>For Amount = 70, the minimum number of coins required is 2 i.e an Rs. 50 coin and a Rs. 20 coin.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>It is always possible to find the minimum number of coins for the given amount. So, the answer will always exist.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The only line contains a single integer \u2018N\u2019 representing the amount.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>The only line contains the list containing the value of coins required in decreasing order.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1</h5>\n\n<pre><code>13\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code>10 2 1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1</h5>\n\n<pre><code>The minimum number of coins to change is 3 {1, 2, 10}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2</h5>\n\n<pre><code>50\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>50\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1 &lt;= &#39;N&#39; &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 87,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an infinite supply of Indian currency denominations [1, 2, 5, 10, 20, 50, 100, 500, 1000], determine the minimum number of coins required to make change for a given amount 'N'. Return a list of the coin values used, sorted in descending order.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "13",
                        "output": "10 2 1",
                        "explanation": "The minimum number of coins to make 13 is 3. One 10 coin, one 2 coin, and one 1 coin."
                    },
                    {
                        "input": "50",
                        "output": "50",
                        "explanation": "The minimum number of coins to make 50 is 1. One 50 coin."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a recursive solution.</p>",
            "<p>Think of picking coins with large denominations.&nbsp;&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1)\r\n\r\n    where 'N' is the given amount to be changed.\r\n*/\r\n\r\nvector<int> MinimumCoins(int n)\r\n{\r\n    // Array to store denominations.\r\n    vector<int> denominations = {1, 2, 5, 10, 20, 50, 100, 500, 1000};\r\n    vector<int> ans;\r\n    int m = denominations.size();\r\n\r\n    // Pick coins in decreasing order of their values.\r\n    for (int i = m - 1; i >= 0; i--)\r\n    {\r\n        while (n >= denominations[i])\r\n        {\r\n            n = n - denominations[i];\r\n            ans.push_back(denominations[i]);\r\n        }\r\n    }\r\n\r\n    return ans;\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    where 'N' is the given amount to be changed.\n\"\"\"\nfrom typing import List\n\ndef MinimumCoins(n: int) -> List[int]:\n    # List to store denominations.\n    denominations = [1, 2, 5, 10, 20, 50, 100, 500, 1000]\n    ans = []\n    m = len(denominations)\n\n    # Pick coins in decreasing order of their values.\n    for i in range(m - 1, -1, -1):\n        while n >= denominations[i]:\n            n -= denominations[i]\n            ans.append(denominations[i])\n\n    return ans\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1)\r\n\r\n    where 'N' is the given amount to be changed.\r\n*/\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\npublic class Solution {\r\n    public static List<Integer> MinimumCoins(int n) {\r\n        // Array to store denominations.\r\n        int[] denominations = {1, 2, 5, 10, 20, 50, 100, 500, 1000};\r\n        List<Integer> ans = new ArrayList<>();\r\n        int m = denominations.length;\r\n\r\n        // Pick coins in decreasing order of their values.\r\n        for (int i = m - 1; i >= 0; i--) {\r\n            while (n >= denominations[i]) {\r\n                n = n - denominations[i];\r\n                ans.add(denominations[i]);\r\n            }\r\n        }\r\n\r\n        return ans;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}