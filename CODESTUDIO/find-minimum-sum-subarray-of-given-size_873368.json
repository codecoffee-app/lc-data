{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8411,
            "title": "Find minimum sum subarray of given size",
            "titleSlug": "find-minimum-sum-subarray-of-given-size_873368",
            "content": "<h4 id=\"you-have-been-given-an-array-arr-of-integers-consisting-of-n-integers-and-a-positive-integer-k-your-task-is-to-find-a-subarray-contiguous-of-size-k-such-that-the-sum-of-its-elements-is-minimum\">You have been given an array &#39;ARR&#39; of integers consisting of \u2018N\u2019 integers and a positive integer \u2018K\u2019. Your task is to find a subarray(contiguous) of size \u2018K\u2019 such that the sum of its elements is minimum.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You can assume that the value of \u2018K\u2019 will always be less than or equal to \u2018N\u2019. So, the answer will always exist.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains two single space-separated integers \u2018N\u2019 and \u2018K\u2019 representing the size of the array and the given integer, respectively.\n\nThe second line of input contains &#39;N&#39; single space-separated integers representing the array elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format  :</h5>\n\n<pre><code>Print the minimum possible subarray sum.\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;=  10^5\n1 &lt;= K &lt;= N \n-10^5 &lt;= ARR[i] &lt;= 10^5\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>8 3\n10 4 2 5 6 3 8 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>11\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input\">Explanation Of Sample Input</h5>\n\n<pre><code>All subarrays of size 3 and their respective sums are-\n{10, 4, 1} : sum \u2192 10+4+1 = 15\n{4, 2, 5} : sum \u2192 4+2+5 = 11\n{2, 5, 6} : sum \u2192 2+5+6 = 13\n{5, 6, 3} : sum \u2192 5+6+3 = 14\n{6, 3, 8} : sum \u2192 6+3+8 = 17\n{3, 8, 1} : sum \u2192 3+8+1 = 12\n\nThe subarray with a minimum sum of 11 is {4, 2, 5}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>8 4\n1 -4 2 10 -2 3 1 0 -20\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 320,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr` of size `n` and a positive integer `k`, find the contiguous subarray of size `k` with the minimum sum.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= k <= n",
                    "-10^5 <= ARR[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 8, arr = [10, 4, 2, 5, 6, 3, 8, 1], k = 3",
                        "output": "11",
                        "explanation": "All subarrays of size 3 and their respective sums are:\n{10, 4, 2} : sum -> 16\n{4, 2, 5} : sum -> 11\n{2, 5, 6} : sum -> 13\n{5, 6, 3} : sum -> 14\n{6, 3, 8} : sum -> 17\n{3, 8, 1} : sum -> 12\nThe subarray with a minimum sum of 11 is {4, 2, 5}."
                    },
                    {
                        "input": "n = 8, arr = [1, -4, 2, 10, -2, 3, 1, 0], k = 4",
                        "output": "-3",
                        "explanation": "The subarray {-4, 2, 10, -2} has the minimum sum of -4 + 2 + 10 - 2 = 6.  The subarray {2, 10, -2, 3} has a sum of 13, the subarray {10, -2, 3, 1} has a sum of 12, the subarray {-2, 3, 1, 0} has a sum of 2. the subarray {1, -4, 2, 10} has a sum of 9.\nThe subarray {1, -4, 2, 10} has a sum of 9\nThe test case provided in the prompt had the last element as -20 in the array and provided result as 2. The description and output do not match here and I am updating the array to match input file's array"
                    },
                    {
                        "input": "n = 5, arr = [1, 2, 3, 4, 5], k = 2",
                        "output": "3",
                        "explanation": "The subarray {1, 2} has a sum of 3, {2, 3} has a sum of 5, {3, 4} has a sum of 7, {4, 5} has a sum of 9. The minimum is 3."
                    },
                    {
                        "input": "n = 6, arr = [-1, -2, -3, -4, -5, -6], k = 3",
                        "output": "-15",
                        "explanation": "The subarray {-1, -2, -3} has a sum of -6, {-2, -3, -4} has a sum of -9, {-3, -4, -5} has a sum of -12, and {-4, -5, -6} has a sum of -15. The minimum is -15."
                    },
                    {
                        "input": "n = 7, arr = [0, 0, 0, 0, 0, 0, 0], k = 4",
                        "output": "0",
                        "explanation": "All subarrays of size 4 have a sum of 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Naively find sum of all subarrays of size \u2018K\u2019.</p>",
            "<p>Can you think of a way to use the sum of previous subarray of size \u2018K\u2019 to calculate the current subarray sum?&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1)\r\n\r\n    Where N is the size of array.\r\n*/\r\n\r\nint minSubarraySum(int arr[], int n, int k)\r\n{\r\n    int minimumSum = 0;\r\n\r\n    // Computing sum of first window/subarray of size k\r\n    for (int i = 0; i < k; i++)\r\n    {\r\n        minimumSum += arr[i];\r\n    }\r\n\r\n    int currWindowSum = minimumSum;\r\n\r\n    /*\r\n     Computing the sum of rest subarrays of size 'k' \r\n     by removing the first element of previous window/subarray \r\n     and adding the current element to the window.\r\n    */\r\n    for (int i = k; i < n; i++)\r\n    {\r\n        currWindowSum += arr[i] - arr[i - k];\r\n\r\n        minimumSum = min(minimumSum, currWindowSum);\r\n    }\r\n\r\n    return minimumSum;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1)\r\n\r\n    Where N is the size of array.\r\n*/\r\n\r\nimport java.util.*;\r\n\r\npublic class Solution\r\n{\r\npublic static int minSubarraySum(ArrayList<Integer> arr, int n, int k)\r\n    {\r\n        int minimumSum = 0;\r\n\r\n        // Computing sum of first window/subarray of size k\r\n        for (int i = 0; i < k; i++)\r\n        {\r\n            minimumSum += arr.get(i);\r\n        }\r\n\r\n        int currWindowSum = minimumSum;\r\n\r\n        /*\r\n        Computing the sum of rest subarrays of size 'k' \r\n        by removing the first element of previous window/subarray \r\n        and adding the current element to the window.\r\n        */\r\n        \r\n        for (int i = k; i < n; i++)\r\n        {\r\n            currWindowSum += arr.get(i) - arr.get(i - k);\r\n\r\n            minimumSum = Math.min(minimumSum, currWindowSum);\r\n        }\r\n\r\n        return minimumSum;\r\n    }\r\n}\r\n\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time complexity: O(N)\r\n    Space complexity: O(1)\r\n\r\n    where N is the size of array/list.\r\n'''\r\n\r\n\r\ndef minSubarraySum(arr, n, k):\r\n\r\n    minimumSum = 0\r\n\r\n    # Computing sum of first window/subarray of size k  \r\n    for i in range(k):\r\n        minimumSum += arr[i]\r\n\r\n    currWindowSum = minimumSum\r\n\r\n    '''\r\n     Computing the sum of rest subarrays of size \u2018K\u2019 \r\n     by removing the first element of previous window/subarray \r\n     and adding the current element to the window.\r\n    '''  \r\n    for i in range(k, n):\r\n        currWindowSum += arr[i] - arr[i-k]; \r\n\r\n        minimumSum = min(minimumSum, currWindowSum)\r\n\r\n    return minimumSum",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}