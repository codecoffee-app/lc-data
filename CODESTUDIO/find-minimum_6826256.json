{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 23487,
            "title": "Find minimum ",
            "titleSlug": "find-minimum_6826256",
            "content": "<h4 id=\"alice-is-given-the-number-m-she-is-also-given-an-array-a-of-n-integers-where-0-a-i-m-1-she-can-perform-any-number-of-operations-on-the-array-in-one-operation-alice-can-choose-any-set-of-indices-maybe-none-of-the-array-a-and-make-a-i-a-i-1-m-where-i-is-the-chosen-index-and-0-i-n-you-are-asked-to-find-the-minimum-number-of-such-operations-required-to-make-the-array-non-decreasing\">Alice is given the number &#39;M&#39;. She is also given an array &#39;A&#39; of &#39;N&#39; integers where 0 &lt;= A[i] &lt;= &#39;M&#39; - 1. She can perform any number of operations on the array. In one operation, Alice can choose any set of indices(maybe none) of the array &#39;A&#39; and make &#39;A[i]&#39; = (&#39;A[i]+1&#39;) % &#39;M&#39;, where &#39;i&#39; is the chosen index and 0 &lt;= &#39;i&#39; &lt; &#39;N&#39;. You are asked to find the minimum number of such operations required to make the array non-decreasing.</h4>\n\n<h4 id=\"return-a-number-c-denoting-the-minimum-number-of-such-operations-required-to-make-the-array-non-decreasing\">Return a number &#39;C&#39; denoting the minimum number of such operations required to make the array non-decreasing.</h4>\n\n<h4 id=\"note-assume-0-based-indexing\">Note: Assume 0-based indexing.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Let &#39;N&#39; = 5, &#39;M&#39; = 7, and &#39;A&#39; = [0, 6, 1, 3, 2]. In the first operation, Alice will choose elements at indices 1 and 4, &#39;A[1]&#39; = 6 and &#39;A[4]&#39; = 2. The array becomes [0, 0, 1, 3, 3]. As it is non-decreasing after a single operation. Hence, the answer is 1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:-</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39;, which denotes the number of test cases.\n\nFor every test case:-\n\nThe first line contains two integers, &#39;N&#39;, and &#39;M&#39; denoting the size of the array &#39;A&#39; and the above-mentioned variable respectively.\n\nThe next line contains &#39;N&#39; space-separated integers denoting the elements of the array &#39;A&#39;.                           \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:-</h5>\n\n<pre><code>For each test case, Return a number &#39;C&#39; denoting the minimum number of such operations required to make the array non-decreasing.\n</code></pre>\n\n<h5 id=\"note\">Note:-</h5>\n\n<pre><code>You don\u2019t need to print anything. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:-</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 10^5\n1 &lt;= &#39;N&#39;, &#39;M&#39; &lt;= 10^5\n0 &lt;= &#39;A[i]&#39; &lt; &#39;M&#39;\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:-</h5>\n\n<pre><code>2\n6 4\n1 3 3 1 3 2\n5 3\n0 0 0 1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:-</h5>\n\n<pre><code>2\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:-</h5>\n\n<pre><code>First test case:- \nIn the first operation, Alice will choose indices 0, 3, and 5. Then the array &#39;A&#39; will become [2, 3, 3, 2, 3, 3]. In the next operation, Alice will choose indices 0, 3 and the array becomes [3, 3, 3, 3, 3, 3]. Now, the array is non-decreasing. Hence, the answer is 2.\n\nSecond test case:-\nAs the array is already non-decreasing, the answer is 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:-</h5>\n\n<pre><code>2\n5 8\n0 7 1 3 2\n5 6\n3 2 4 2 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:-</h5>\n\n<pre><code>1\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Alice is given a number 'M' and an array 'A' of 'N' integers, where each element A[i] is between 0 and 'M' - 1. Alice can perform operations on the array. In each operation, she can select any set of indices (possibly none) and increment the values at those indices by 1 modulo 'M' (A[i] = (A[i] + 1) % M).  The goal is to determine the minimum number of operations required to make the array 'A' non-decreasing.",
                "constraints": [
                    "1 <= 'T' <= 10^5",
                    "1 <= 'N', 'M' <= 10^5",
                    "0 <= 'A[i]' < 'M'",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "6 4\n1 3 3 1 3 2",
                        "output": "2",
                        "explanation": "In the first operation, Alice can choose indices 0, 3, and 5. The array 'A' becomes [2, 3, 3, 2, 3, 3]. In the next operation, Alice chooses indices 0 and 3, making the array [3, 3, 3, 3, 3, 3]. Now the array is non-decreasing."
                    },
                    {
                        "input": "5 3\n0 0 0 1 2",
                        "output": "0",
                        "explanation": "The array is already non-decreasing, so no operations are needed."
                    },
                    {
                        "input": "5 8\n0 7 1 3 2",
                        "output": "1",
                        "explanation": "Alice chooses indices 1 and 4, 'A[1]' = 7 and 'A[4]' = 2. The array becomes [0, 0, 1, 3, 3]. As it is non-decreasing after a single operation. Hence, the answer is 1."
                    },
                    {
                        "input": "5 6\n3 2 4 2 5",
                        "output": "2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Look out for the range of values you can get for each element by performing any finite number of operations.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}