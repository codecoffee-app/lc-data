{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7280,
            "title": "Find Number of Islands",
            "titleSlug": "find-number-of-islands_630512",
            "content": "<h4 id=\"you-are-given-a-2-dimensional-array-list-having-n-rows-and-m-columns-which-is-filled-with-ones-1-and-zeroes-0-1-signifies-land-and-0-signifies-water\">You are given a 2-dimensional array/list having N rows and M columns, which is filled with ones(1) and zeroes(0). 1 signifies land, and 0 signifies water.</h4>\n\n<h4 id=\"a-cell-is-said-to-be-connected-to-another-cell-if-one-cell-lies-immediately-next-to-the-other-cell-in-any-of-the-eight-directions-two-vertical-two-horizontal-and-four-diagonals\">A cell is said to be connected to another cell, if one cell lies immediately next to the other cell, in any of the eight directions (two vertical, two horizontal, and four diagonals).</h4>\n\n<h4 id=\"a-group-of-connected-cells-having-value-1-is-called-an-island-your-task-is-to-find-the-number-of-such-islands-present-in-the-matrix\">A group of connected cells having value 1 is called an island. Your task is to find the number of such islands present in the matrix.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains two integer values, &#39;N&#39; and &#39;M&#39;, separated by a single space. They represent the &#39;rows&#39; and &#39;columns&#39; respectively, for the two-dimensional array/list.\n\nThe second line onwards, the next &#39;N&#39; lines or rows represent the ith row values.\n\nEach of the i-th row constitutes &#39;M&#39; column values separated by a single space.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The only line of output prints the number of islands present in the 2-dimensional array.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything explicitly, it has already been taken care of. Implement the function and return the desired output.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^3 \n1 &lt;= M &lt;= 10^3\n0 &lt;= ARR[i][j] &lt;= 1\n\nTime limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>4 5\n0 1 1 0 0\n1 0 0 1 0\n0 0 1 0 0\n1 0 0 0 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>The first island of connected 1s is signified by: {0, 1}, {0, 2}, {1, 0}, {1, 3}, {2, 2}.\n\nThe second island being: {3, 0}.\n\nThe third island being: {3, 4}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>4 4\n1 0 0 1\n0 1 1 0\n0 1 1 0\n1 0 0 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 117,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2-dimensional array/list of size N x M, where each cell contains either 1 (land) or 0 (water).  Cells are considered connected if they are adjacent in any of the eight directions (horizontally, vertically, or diagonally). An island is a group of connected land cells (cells with value 1).  Determine the number of islands present in the given array/list.",
                "constraints": [
                    "1 <= N <= 10^3",
                    "1 <= M <= 10^3",
                    "0 <= ARR[i][j] <= 1",
                    "Time limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "4 5\n0 1 1 0 0\n1 0 0 1 0\n0 0 1 0 0\n1 0 0 0 1",
                        "output": "3",
                        "explanation": "There are three distinct groups of connected '1's in the matrix. One island includes cells {0, 1}, {0, 2}, {1, 0}, {1, 3}, {2, 2}. The second is a single cell {3, 0}, and the third is another single cell {3, 4}."
                    },
                    {
                        "input": "4 4\n1 0 0 1\n0 1 1 0\n0 1 1 0\n1 0 0 1",
                        "output": "1",
                        "explanation": "All the '1's in the matrix are connected, thus forming a single island."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of how we can apply a BFS/DFS like approach to traverse the matrix. Also, think about an efficient way to check all the 8 directions.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N * M)\n    Space Complexity: O(N * M)\n\n    Where N and M are the number of rows and columns of the 2D array, respectively.\n*/\n\n#include <vector>\n\nint dx[] = {0, 1, 1, 1, 0, -1, -1, -1};\nint dy[] = {-1, -1, 0, 1, 1, 1, 0, -1};\n\n/*\n    dx[] and dy[] are the arrays that define each of the eight directions.\n\n    dx[0], dy[0] : West\n    dx[1], dy[1] : North-West\n    dx[2], dy[2] : North\n    dx[3], dy[3] : North-East\n    dx[4], dy[4] : East\n    dx[5], dy[5] : South-East\n    dx[6], dy[6] : South\n    dx[7], dy[7] : South-West\n\n*/\n\nvector<vector<bool>> vis;\n\nvoid getTotalIslandsHelper(int** mat, int n, int m, int x, int y)\n{\n    // Check if this cell is valid.\n    if(!(x >= 0 && x < n && y >= 0 && y < m && mat[x][y] == 1 && !vis[x][y]))\n    {\n        return;\n    }\n\n    vis[x][y] = true;\n\n    for(int i=0; i<8; i++)\n    {\n        int nextX = x + dx[i];\n        int nextY = y + dy[i];\n\n        getTotalIslandsHelper(mat, n, m, nextX, nextY);\n    }\n}\n\nint getTotalIslands(int** mat, int n, int m)\n{\n    vis = vector<vector<bool>>(n, vector<bool>(m, false));\n    int islands = 0;\n\n    for(int i=0; i<n; i++)\n    {\n        for(int j=0; j<m; j++)\n        {\n            if(mat[i][j] == 1 && !vis[i][j])\n            {\n                // We have found an undiscovered island.\n                islands++;\n                getTotalIslandsHelper(mat, n, m, i, j);\n            }\n        }\n    }\n\n    return islands;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(N * M)\n    Space Complexity: O(N * M)\n\n    Where N and M are the number of rows and columns of the 2D array, respectively.\n'''\nfrom sys import stdin,setrecursionlimit\nsetrecursionlimit(10**7)\n\n\ndx = [0, 1, 1, 1, 0, -1, -1, -1]\ndy = [-1, -1, 0, 1, 1, 1, 0, -1]\n\n'''\n    dx[] and dy[] are the arrays that define each of the eight directions.\n\n    dx[0], dy[0] : West\n    dx[1], dy[1] : North-West\n    dx[2], dy[2] : North\n    dx[3], dy[3] : North-East\n    dx[4], dy[4] : East\n    dx[5], dy[5] : South-East\n    dx[6], dy[6] : South\n    dx[7], dy[7] : South-West\n\n'''\n\ndef findIslandsHelper(mat, n, m, x, y, vis):\n\n\t# Check if this cell is valid.\n    vis[x][y] = True\n\n    for i in range(8):\n\n        nextX = x + dx[i]\n        nextY = y + dy[i]\n        if(nextX >=0 and nextX < n and nextY >= 0 and nextY < m and vis[nextX][nextY] == False and mat[nextX][nextY] == 1):\n        \tfindIslandsHelper(mat, n, m, nextX, nextY, vis)\n\n\ndef findIslands(mat, n, m):\n\n    vis = [[False for i in range(m)] for j in range(n)]\n    islands = 0\n\n    for i in range(n):\n        for j in range(m):\n            if(mat[i][j] == 1 and not(vis[i][j])):\n\n                # We have found an undiscovered island.\n                islands += 1\n                findIslandsHelper(mat, n, m, i, j, vis)\n\n    return islands\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N * M)\n    Space Complexity: O(N * M)\n\n    Where N and M are the number of rows and columns of the 2D array, respectively.\n*/\n\nimport java.util.ArrayList;\n\npublic class Solution \n{\n\n    private static int dx[] = {0, 1, 1, 1, 0, -1, -1, -1};\n    private static int dy[] = {-1, -1, 0, 1, 1, 1, 0, -1};\n\n    /*\n        dx[] and dy[] are the arrays that define each of the eight directions.\n\n        dx[0], dy[0] : West\n        dx[1], dy[1] : North-West\n        dx[2], dy[2] : North\n        dx[3], dy[3] : North-East\n        dx[4], dy[4] : East\n        dx[5], dy[5] : South-East\n        dx[6], dy[6] : South\n        dx[7], dy[7] : South-West\n\n    */\n\n    private static ArrayList<ArrayList<Boolean>> vis = new ArrayList<>();\n\n    private static void getTotalIslandsHelper(int[][] mat, int n, int m, int x, int y) \n\t{\n\n        // Check if this cell is valid.\n        if(!(x >= 0 && x < n && y >= 0 && y < m && mat[x][y] == 1 && !vis.get(x).get(y))) \n\t\t{\n            return; \n        }\n\n        vis.get(x).set(y, true);\n\n        for(int i = 0; i < 8; i++) \n\t\t{\n            int nextX = x + dx[i];\n            int nextY = y + dy[i];\n\n            getTotalIslandsHelper(mat, n, m, nextX, nextY);\n        }\n    }\n\n    public static int getTotalIslands(int[][] mat) \n\t{\n        int n = mat.length;\n        if (n == 0) \n\t\t{\n            return 0;\n        }\n        int m = mat[0].length;\n        for (int i = 0; i < n; i++) \n\t\t{    \n            vis.add(new ArrayList<>());\n            ArrayList<Boolean> list = vis.get(i);\n            for(int j = 0; j < m; j++) \n\t\t\t{\n                list.add(false);\n            }\n        }\n\n        int islands = 0;\n\n        for(int i = 0; i < n; i++) \n\t\t{\n            for(int j = 0; j < m; j++) \n\t\t\t{\n                if(mat[i][j] == 1 && !vis.get(i).get(j)) \n\t\t\t\t{\n                    // We have found an undiscovered island.\n                    islands++;\n                    getTotalIslandsHelper(mat, n, m, i, j);\n                }\n            }\n        }\n\n        return islands;\n    }\n\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}