{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8565,
            "title": "Find Path",
            "titleSlug": "find-path_893057",
            "content": "<h4 id=\"you-are-given-a-tree-with-n-nodes-with-n-1-distinct-edge-you-are-also-given-two-nodes-n1-and-n2-you-have-to-find-and-print-the-shortest-path-between-n1-and-n2\">You are given a tree with &#39;N&#39; nodes with &#39;N&#39; - 1 distinct edge. You are also given two nodes &#39;N1&#39; and &#39;N2&#39;. You have to find and print the shortest path between &#39;N1&#39; and &#39;N2&#39;.</h4>\n\n<h4 id=\"a-tree-data-structure-is-a-nonlinear-hierarchical-data-structure-that-consists-of-nodes-connected-by-edges\">A tree data structure is a nonlinear hierarchical data structure that consists of nodes connected by edges.</h4>\n\n<h4 id=\"note\">Note</h4>\n\n<pre><code>1. There is no cycle present in a tree.\n2. All values in the tree are unique.\n3. Both nodes will always exist in the tree.\n</code></pre>\n\n<h5 id=\"input-format\">Input format</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of the test case. Then the test case follows.\n\nThe first line of each test case contains elements of a tree in level order form separated by space. \n\nOrder is:\nROOT_DATA, &#39;N&#39; (Number of children of the root), &#39;N&#39; children, and so on for every element \n\nThe second line of each test case contains two space-separated integers &#39;N1&#39; and &#39;N2&#39;.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/first-5644.png\" alt=\"example\"></p>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 20\n\nLevel 2 :\n1st child of 20 = 10\n2nd child of 20 = 35\n\nLevel 3 :\n1st child of 10 = 5\n2nd  child of 10 = 15\n1st child of 35 = 30\n2nd child of 35 = 42\n\nLevel 4 :\nChildren of 5 = 0\nIst child of 15 = 13\nChildren of 30 = 0\nChildren of 42 = 0\n\nLevel 5 :\nChildren of 13 = 0\n\nThe input ends when all nodes at the last level have 0 children.\n\nNote:\nA tree node may have zero or more child nodes.\nThe above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n20 2 10 35 2 5 15 2 30 42 0 1 13 0 0 0\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, print the shortest path from &#39;N1&#39; to &#39;N2&#39; in a single line.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n1 &lt;= N &lt;= 25 * 10^2\n1 &lt;= NODE_DATA &lt;= 10^5\n1 &lt;= N1, N2&lt;= 10^5\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n1 0\n1 1\n1 2 2 3 0 1 4 0\n1 2\n1 1 2 1 3 1 4 0\n1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n1 2\n1 2 3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>(i) Since there is only one node from node- 1 to node 1 so, we print only 1 as the path.\n(ii) Since 1 and 2 are directly connected so, we print 1 2 as the path.\n(iii) Going from 1 to 3 we have 2 as the child of 1 and 3 as the child of 2. Hence the path is 1 2 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n1 2 2 3 2 4 5 2 6 7 0 0 0 0 \n1 5\n1 1 2 1 3 0\n2 3\n1 1 2 2 3 4 2 5 6  2 7 8 0 0 0 0 \n1 8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 2 5\n2 3\n1 2 4 8\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>(i) Going from 1 to 5 we have 2 as the child of 1 and 4 and 5 as the child of 2. Hence the path is 1 2 5.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000223_1606582820_upl1.png\" alt=\"example\"></p>\n\n<pre><code>(ii) Since 2 and 3 are directly connected so, we print 2 3 as the path.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000225_1606583055_UP1\" alt=\"example\"></p>\n\n<pre><code>(iii) Going from 1 to 8 we have 2 as the child of 1, 3 and 4 as the child of 2 and 7 and 8 as the child of 4. Hence the path is 1 2 4 8.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000224_1606583362_Tree3.png\" alt=\"example\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a tree with 'N' nodes and 'N' - 1 distinct edges, find the shortest path between two given nodes, 'N1' and 'N2'. The tree is a nonlinear hierarchical data structure where nodes are connected by edges. It contains no cycles and all node values are unique. Both 'N1' and 'N2' will always exist in the tree.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 2500 (Number of nodes)",
                    "1 <= NODE_DATA <= 100000",
                    "1 <= N1, N2 <= 100000",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "1 0\n1 1",
                        "output": "1",
                        "explanation": "Since there is only one node from node 1 to node 1, we print only 1 as the path."
                    },
                    {
                        "input": "1 1\n1 2 2 3 0 1 4 0\n1 2",
                        "output": "1 2",
                        "explanation": "Nodes 1 and 2 are directly connected, so the shortest path is 1 2."
                    },
                    {
                        "input": "1 1\n1 2 2 3 0 1 4 0\n1 3",
                        "output": "1 2 3",
                        "explanation": "The path from 1 to 3 involves going through node 2. Thus, the path is 1 -> 2 -> 3."
                    },
                    {
                        "input": "1 2 2 3 2 4 5 2 6 7 0 0 0 0 \n1 5",
                        "output": "1 2 5",
                        "explanation": "The path from 1 to 5 goes through node 2. The path is 1 -> 2 -> 5."
                    },
                    {
                        "input": "1 1\n1 2 2 3 0\n2 3",
                        "output": "2 3",
                        "explanation": "Nodes 2 and 3 are directly connected, so the shortest path is 2 3."
                    },
                    {
                        "input": "1 1\n1 2 2 3 4 2 5 6  2 7 8 0 0 0 0 \n1 8",
                        "output": "1 2 4 8",
                        "explanation": "The path from 1 to 8 goes through nodes 2 and 4. Thus, the path is 1 -> 2 -> 4 -> 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of how you can find a node that is ancestor to both nodes and use this node to get path.</p>",
            "<p>Can you use the lowest common ancestor of the node?&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}