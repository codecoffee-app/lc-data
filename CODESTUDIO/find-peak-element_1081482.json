{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9688,
            "title": "Find Peak Element",
            "titleSlug": "find-peak-element_1081482",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-length-n-find-the-index-0-based-of-a-peak-element-in-the-array-if-there-are-multiple-peak-numbers-return-the-index-of-any-peak-number\">You are given an array <em><strong>&#39;arr&#39;</strong></em> of length <em><strong>&#39;n&#39;</strong></em>. Find the index(0-based) of a peak element in the array. If there are multiple peak numbers, return the index of any peak number.</h4>\n\n<p><br></p>\n\n<h4 id=\"peak-element-is-defined-as-that-element-that-is-greater-than-both-of-its-neighbors-if-arr-i-is-the-peak-element-arr-i-1-arr-i-and-arr-i-1-arr-i\">Peak element is defined as that element that is greater than both of its neighbors.  If &#39;arr[i]&#39; is the peak element, &#39;arr[i - 1]&#39; &lt; &#39;arr[i]&#39; and &#39;arr[i + 1]&#39; &lt; &#39;arr[i]&#39;.</h4>\n\n<p><br></p>\n\n<h4 id=\"assume-arr-1-and-arr-n-as-negative-infinity\">Assume &#39;arr[-1]&#39; and &#39;arr[n]&#39; as negative infinity.</h4>\n\n<p><br></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1.  There are no 2 adjacent elements having same value (as mentioned in the constraints).\n2.  Do not print anything, just return the index of the peak element (0 - indexed).\n3. &#39;True&#39;/&#39;False&#39; will be printed depending on whether your answer is correct or not.\n</code></pre>\n\n<p><br/></p>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Input: &#39;arr&#39; = [1, 8, 1, 5, 3]\n\nOutput: 3\n\nExplanation: There are two possible answers. Both 8 and 5 are peak elements, so the correct answers are their positions, 1 and 3.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer \u2018n\u2019, the number of elements in &#39;arr&#39;.\nThe second line contains \u2018n\u2019 space-separated integers , the array &#39;arr&#39;.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>The output contains True/ False depending whether the found number is peak element or not.\n</code></pre>\n\n<p><br/></p>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>5\n1 8 1 5 3\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-answer\">Expected Answer:</h5>\n\n<pre><code>1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-on-console\">Output on Console:</h5>\n\n<pre><code>True\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>There are two possible answers. Both 8 and 5 are peak elements, so the correct answers are their positions, 1 and 3. Any of these 2 numbers will print &#39;True&#39;.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n1 2 1 \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-answer\">Expected Answer:</h5>\n\n<pre><code>1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-on-console\">Output on Console:</h5>\n\n<pre><code>True\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity:</h5>\n\n<pre><code>The expected time complexity is O(log &#39;n&#39;).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10^5\n1 &lt;= &#39;arr[i]&#39; &lt;= 10^5\n&#39;arr[i]&#39; != &#39;arr[i + 1]&#39; for all &#39;i&#39; in range 0 &lt;= &#39;i&#39; &lt; &#39;n&#39; - 1\n</code></pre>\n\n<p><br/></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 197,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of length `n`, find the index (0-based) of a peak element. A peak element is an element that is greater than both of its neighbors. Assume `arr[-1]` and `arr[n]` are negative infinity. If there are multiple peak elements, return the index of any one of them.\n\nNote: There are no two adjacent elements with the same value. Return the index of the peak element (0-indexed). The correctness of your answer will be determined by checking if the element at the returned index is indeed a peak.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= arr[i] <= 10^5",
                    "arr[i] != arr[i + 1] for all i in range 0 <= i < n - 1"
                ],
                "testcases": [
                    {
                        "input": "5\n1 8 1 5 3",
                        "output": "1",
                        "explanation": "Both 8 (at index 1) and 5 (at index 3) are peak elements. Either index would be a valid answer. Here, index 1 is chosen."
                    },
                    {
                        "input": "3\n1 2 1",
                        "output": "1",
                        "explanation": "The element 2 (at index 1) is the only peak element."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check for all elements if they are peak or not.</p>",
            "<p>Binary search the answer.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(log 'n')\r\n    Space Complexity: O(1)\r\n\r\n    Where 'n' is the number of elements\r\n*/\r\n\r\nint findPeakElement(vector<int> &arr) {\r\n    int n = arr.size();\r\n\r\n    // Single element\r\n    if (n == 1)\r\n        return 0;\r\n\r\n    // Handling edge cases\r\n    if (arr[0] >= arr[1])\r\n        return 0;\r\n    if (arr[n - 1] >= arr[n - 2])\r\n        return n - 1;\r\n\r\n    // Binary search\r\n    int l = 1, r = n - 2;\r\n    int ans = l;\r\n    while (l <= r) {\r\n        int middle = (l + r) / 2;\r\n\r\n        if (arr[middle] < arr[middle - 1]) {\r\n            // Search the left half\r\n            r = middle - 1;\r\n        } else if (arr[middle] < arr[middle + 1]) {\r\n            // Search the right half\r\n            l = middle + 1;\r\n        } else {\r\n            // Ans found\r\n            ans = middle;\r\n            break;\r\n        }\r\n    }\r\n    return ans;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(n)\r\n    Space Complexity: O(1)\r\n\r\n    Where 'n' is the number of elements\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n\r\n    public static int findPeakElement(ArrayList<Integer> arr) {\r\n        // Array size\r\n        int n = arr.size();\r\n\r\n        // Single element\r\n        if (n == 1) {\r\n            return 0;\r\n        }\r\n        // Strictly descreasing\r\n        if (arr.get(0) >= arr.get(1)) {\r\n            return 0;\r\n        }\r\n        // Strictly increasing\r\n        if (arr.get(n - 1) >= arr.get(n - 2)) {\r\n            return n - 1;\r\n        }\r\n        // Binary search\r\n        int l = 1, r = n - 2;\r\n        int ans = l;\r\n        while (l <= r) {\r\n            int middle = (l + r) / 2;\r\n\r\n            if (arr.get(middle) < arr.get(middle - 1)) {\r\n                // Search the left half\r\n                r = middle - 1;\r\n            } else if (arr.get(middle) < arr.get(middle + 1)) {\r\n                // Search the right half\r\n                l = middle + 1;\r\n            } else {\r\n                // Ans found\r\n                ans = middle;\r\n                break;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n\r\n};\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\r\n\r\n    Time Complexity: O(log(n))\r\n    Space Complexity: O(1)\r\n\r\n    Where 'n' is the number of elements\r\n\r\n\"\"\"\r\n\r\n\r\ndef findPeakElement(arr: [int]) -> int:\r\n    n = len(arr)\r\n    # Single element\r\n    if n == 1:\r\n        return 0\r\n\r\n    # Strictly decreasing.\r\n    if arr[0] >= arr[1]:\r\n        return 0\r\n\r\n    # Strictly increasing\r\n    if arr[n - 1] >= arr[n - 2]:\r\n        return n - 1\r\n\r\n    # Binary search\r\n    l = 1\r\n    r = n - 2\r\n    ans = l\r\n    while l <= r:\r\n        middle = int((l + r) / 2)\r\n\r\n        if arr[middle] < arr[middle - 1]:\r\n            # Search the left half\r\n            r = middle - 1\r\n        elif arr[middle] < arr[middle + 1]:\r\n            # Search the right half\r\n            l = middle + 1\r\n        else:\r\n            # Ans found\r\n            ans = middle\r\n            break\r\n\r\n    return ans\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}