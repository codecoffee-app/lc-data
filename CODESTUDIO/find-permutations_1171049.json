{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10185,
            "title": "Find Permutations",
            "titleSlug": "find-permutations_1171049",
            "content": "<h4 id=\"you-are-given-an-integer-n-you-need-to-find-an-array-of-size-2-n-that-satisfies-the-following-two-conditions\">You are given an integer \u2018N\u2019. You need to find an array of size 2*N  that satisfies the following two conditions.</h4>\n\n<h4 id=\"1-all-numbers-from-1-to-n-should-appear-exactly-twice-in-the-array\">1. All numbers from 1 to N should appear exactly twice in the array.</h4>\n\n<h4 id=\"2-the-distance-between-the-second-occurrence-and-the-first-occurrence-of-any-number-should-exactly-be-equal-to-the-value-of-that-number\">2. The distance between the second occurrence and the first occurrence of any number should exactly be equal to the value of that number.</h4>\n\n<h4 id=\"the-distance-between-two-numbers-at-indices-i-and-j-is-defined-as-j-i-1-where-i-j\">The distance between two numbers at indices \u2018i\u2019 and \u2018j\u2019 is defined as (j-i-1) where i &lt; j.</h4>\n\n<h4 id=\"if-no-such-array-exists-then-you-should-return-an-empty-array\">If no such array exists, then you should return an empty array.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>For N = 3 one valid array is [3,1,2,1,3,2].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. The test cases follow.\n\nThe first and the only line of each test case contains a single integer \u2018N\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The checker will print \u201cValid\u201d if the returned permutation is valid and follows all the conditions, otherwise, it will print \u201cInvalid\u201d. If an empty array is returned, the checker will print -1.\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1&lt;= T &lt;= 5\n1 &lt;= N &lt;= 8\n\nwhere \u2019T\u2019 is the number of test cases and \u2018N\u2019  is the given integer.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>-1\nValid\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>In the first test case, No permutation is possible satisfying the given conditions as only [1, 1] is possible, and there are exactly 0 numbers between them.\n\nIn the second test case, Output is Valid as [3,1,2,1,3,2] is one of the possible permutations.  Here, the indices of \u20181\u2019 are 1 and 3, and there is exactly 1 number between them, the indices of \u20182\u2019 are 2 and 5, and there are exactly 2 numbers between them, the indices of \u20183\u2019 are 0 and 4, and there are exactly 3 numbers between them.\nAnother possible array is [2, 3, 1, 2, 1, 3]. In this permutation, the indices of \u20181\u2019 are 2 and 4 and there is exactly one number between them, the indices of \u20182\u2019 are 0 and 3, and there are exactly two numbers between them, the indices of \u20183\u2019 are 1 and 5, and there are exactly three numbers between them. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1   \n4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>Valid\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, the task is to find an array of size 2*N that satisfies the following conditions:\n\n1.  Each number from 1 to N must appear exactly twice in the array.\n2.  For each number, the distance between its two occurrences should be exactly equal to the value of that number. The distance between elements at indices i and j is defined as abs(j - i) - 1 where i < j.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 8",
                    "T is the number of test cases and N is the given integer.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n1",
                        "output": "-1",
                        "explanation": "For N = 1, the only possible array is [1, 1]. The distance between the two occurrences of 1 is 0, which does not satisfy the condition that the distance must equal 1. Therefore, no such array exists, and the output is -1."
                    },
                    {
                        "input": "1\n3",
                        "output": "Valid",
                        "explanation": "For N = 3, one valid array is [3, 1, 2, 1, 3, 2].  The indices of '1' are 1 and 3, and the distance between them is 1. The indices of '2' are 2 and 5, and the distance between them is 2. The indices of '3' are 0 and 4, and the distance between them is 3. All conditions are satisfied. Another valid array is [2, 3, 1, 2, 1, 3]."
                    },
                    {
                        "input": "1\n4",
                        "output": "Valid",
                        "explanation": "For N = 4, there exists a valid array. The output will be valid as a valid array can be created."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Generate all the possible permutations and check if it is valid.</p>",
            "<p>Can you optimize the solution using backtracking?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}