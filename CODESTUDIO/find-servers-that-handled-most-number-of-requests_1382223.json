{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11623,
            "title": "Find Servers That Handled Most Number of Requests",
            "titleSlug": "find-servers-that-handled-most-number-of-requests_1382223",
            "content": "<h4 id=\"coding-ninja-has-n-dedicated-servers-numbered-from-0-to-n-1-to-handle-requests-parallely-a-server-can-only-handle-one-request-at-a-time-you-are-given-a-strictly-increasing-array-of-size-k-say-requesttime-that-represents-the-incoming-time-of-k-requests-and-an-array-processtime-of-size-k-that-represents-the-time-required-to-complete-each-request\">Coding ninja has \u2018N\u2019 dedicated servers numbered from 0 to \u2018N - 1\u2019, to handle requests parallely. A server can only handle one request at a time. You are given a strictly increasing array of size \u2018K\u2019 say \u2018requestTime\u2019 that represents the incoming time of \u2018K\u2019 requests, and an array \u2018processTime\u2019 of size \u2018K\u2019 that represents the time required to complete each request.</h4>\n\n<h4 id=\"to-work-efficiently-incoming-requests-are-handled-in-the-following-way\">To work efficiently, incoming requests are handled in the following way.</h4>\n\n<pre><code>1. The \u2018i - th\u2019 request comes at time \u2018request[i]\u2019.\n\n2. The \u2018i - th\u2019 request will initially go to \u2018(i % N) - th\u2019 server if it is busy, i.e. already processing any request. Then this request will move to the next server i.e \u2018( i  + 1) % N -th\u2019 server until it finds a free server. \n\n3. If all servers are busy at the time \u2018request[i]\u2019, then this request will be discarded. I.e. it will not be handled by any server.\n</code></pre>\n\n<h4 id=\"you-need-to-find-all-servers-that-accept-a-maximum-number-of-requests\">You need to find all servers that accept a maximum number of requests.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Let the number of servers be \u20183\u2019,  \u2018requestTime\u2019 be [ 1, 2, 3, 4, 5] and \u2018processTime\u2019 be [5, 7, 1, 4, 5]\n\nThe requests will be handled in the following order -\n1. Initially all servers are free, \u20180 - th\u2019 request will come at time \u2018t\u2019 = 1 and it will initially go to ( 0%3 ) server i.e server -0. It will accept the request and complete it in time \u2018t\u2019 = 1+ 5.\n\n2. Request - 1 will come at time \u2018t\u2019 = 2, initially it will go to (1 % 3) server i.e server - 1, as it is free, it will accept the request and complete it in time \u2018t\u2019 = 2 + 7.\n\n3. Request - 2 will come at time \u2018t\u2019 = 3 and initially it will go to (2 % 3) server i.e. server - 2, and server - 2 will accept the request and complete it in time \u2018t\u2019 = 3 + 1\n\n4. Request - 3 will come at time \u2018t\u2019 = 4 and initially it will go to ( 3 % 3) server i.e. server - 0. But this server is busy in Processing \u20180 - th\u2019 request, thus request[3] will move to server - 2, server -2 is also busy in processing request[1], then request[3] will move to server - 3, As this server is free. It will accept the request and complete it in time \u2018t\u2019 = 4 + 5.\n\n5. Request -4 will come at time \u2018t\u2019 = 5, but all servers are busy at this moment so this request will be discarded.\n\nAfter all requests are completed, we see that server - 0 and server - 1 have handled 1 request each, and server - 2 has handled 2 requests. So the answer will be \u2018server - 2\u2019.\n</code></pre>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. The description of \u2018T\u2019 test cases follows\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018K\u2019 representing the number of servers and number of incoming requests.\n\nThe second line of each test case contains \u2018K\u2019 space-separated integers, representing the incoming time of each request, \u2018requestTime\u2019.\n\nThe last line of the test cases contains \u2018K\u2019 space-separated integers, representing the processing time of each request, \u2018processTime\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>For each test case, print a single line containing \u2018X\u2019 space-separated integers representing the index of servers that handled a maximum number of requests, where \u2018X\u2019 is the total number of servers that handled a maximum number of requests.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N, K &lt;= 3000\n1 &lt;= requestTime[i], processTime[i] &lt;= 10 ^ 9\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 and \u2018K\u2019 are the number of servers and incoming requests respectively, requestTime[i] is the incoming time of \u2018i - th\u2019 request and processTime[i] is the time required to complete \u2018i - th\u2019 request.\n\nTime limit: 1 sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n3 4\n1 3 4 5\n3 2 1 1\n4 4\n1 2 3 4 \n5 5 5 5\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>0\n0 1 2 3 \n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h4>\n\n<pre><code>Test case 1:\n\nServer -0 will handle \u2018request[0]\u2019 and \u2018request[3]\u2019, server -1 will handle request[1] and server -2 will handle request[2]. So, server -0 is the busiest server.\n\nTest case 2:\n\nAll servers will handle 1 request each.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>1\n1 5\n1 2 4 5 7\n5 1 10 2 12\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>0\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h4>\n\n<pre><code>We have only one server, it will accept the first request. Request -1, request -2, request -3 will be discarded as server -0 is busy processing request -0, request -4 will be accepted as at time \u2018t\u2019 = 7, server -0 will available again. \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Coding Ninja has N dedicated servers, numbered from 0 to N-1, to handle requests in parallel. Each server can only process one request at a time. Given a strictly increasing array 'requestTime' of size K, representing the arrival times of K requests, and an array 'processTime' of size K, representing the time needed to complete each request, determine the servers that handle the maximum number of requests.\n\nRequests are handled as follows:\n\n1. The i-th request arrives at time requestTime[i].\n2. The i-th request initially attempts to be processed by server (i % N). If that server is busy, the request iterates to the next available server (i + 1) % N until a free server is found.\n3. If all servers are busy at the time requestTime[i], the request is discarded (not handled by any server).\n\nFind all servers that accept the maximum number of requests.  Return their indices in ascending order.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N, K <= 3000",
                    "1 <= requestTime[i], processTime[i] <= 10^9",
                    "T is the number of test cases.",
                    "N is the number of servers.",
                    "K is the number of requests.",
                    "requestTime[i] is the arrival time of the i-th request.",
                    "processTime[i] is the processing time for the i-th request."
                ],
                "testcases": [
                    {
                        "input": "3 4\n1 3 4 5\n3 2 1 1",
                        "output": "0",
                        "explanation": "Server 0 handles requests 0 and 3. Server 1 handles request 1. Server 2 handles request 2. Server 0 handles the most requests (2)."
                    },
                    {
                        "input": "4 4\n1 2 3 4\n5 5 5 5",
                        "output": "0 1 2 3",
                        "explanation": "Each server handles one request."
                    },
                    {
                        "input": "1 5\n1 2 4 5 7\n5 1 10 2 12",
                        "output": "0",
                        "explanation": "Only one server exists. It accepts the first request at t=1 and completes at t=6. Requests at t=2, t=4, t=5 are discarded since the server is busy. The server accepts the last request at t=7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Brute force will just the implementation of the question statement so do as the problem says.</p>",
            "<p>Think of a way so we don\u2019t need to search each server for every request.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}