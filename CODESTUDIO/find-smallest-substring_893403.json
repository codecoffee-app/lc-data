{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8782,
            "title": "Find Smallest Substring",
            "titleSlug": "find-smallest-substring_893403",
            "content": "<h4 id=\"you-are-given-two-strings-s1-and-s2-your-task-is-to-find-the-smallest-substring-of-s1-which-contains-all-the-characters-of-s2-the-characters-of-s2-need-not-be-present-in-the-same-order-in-s1-that-is-we-need-a-substring-that-contains-all-characters-of-s2-irrespective-of-the-order\">You are given two strings \u2018S1\u2019 and \u2018S2\u2019. Your task is to find the smallest substring of \u2018S1\u2019 which contains all the characters of \u2018S2\u2019. The characters of \u2018S2\u2019 need not be present in the same order in S1. That is, we need a substring that contains all characters of \u2018S2\u2019 irrespective of the order.</h4>\n\n<h4 id=\"a-substring-is-a-contiguous-sequence-of-characters-within-a-string\">A substring is a contiguous sequence of characters within a string.</h4>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>Let \u2018S1\u2019 be \u201cABBCD\u201d and \u2018S2\u2019 be \u201cABC\u201d, so the smallest substring of \u2018S1\u2019 which contains all the characters of S1 is \u201cABBA\u201d.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains a single integer T representing the number of test cases.\n\nThe first line of each test case contains the string \u2018S1\u2019.\n\nThe first line of each test case contains the string \u2018S2\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the smallest substring of S1 which contains all the characters of S2. Print an empty ( \u201c\u201d ) string if no substring of S1 contains all the characters of S2.\n\nThe output of each test case should be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You are not required to print anything, it has already been taken care of. Just implement the function.    \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= |S1| &lt;= 10^4\n1 &lt;= |S2| &lt;= 10^4\n\nThe strings S1 and S2 contain only uppercase Latin alphabets.\n\nWhere |S| represents the length of string S.\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1</h5>\n\n<pre><code>2\nABC\nABC\nACBBBCA\nABC\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code>ABC\nACB\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1</h5>\n\n<pre><code>In the first test case, the substring \u201cABC\u201d is the smallest substring of S1 which contains all the characters of S2.\n\nIn the second test case, the substring \u201cACB\u201d is the smallest substring of S1 which contains all the characters of S2. Note that the order of the alphabets does not matter in the substring.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2</h5>\n\n<pre><code>2\nABBBB\nABC\nEFGHIJKL\nEL\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>EFGHIJKL\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, 'S1' and 'S2', identify the shortest substring within 'S1' that encompasses all characters present in 'S2', irrespective of their order. If no such substring exists, return an empty string.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |S1| <= 10^4",
                    "1 <= |S2| <= 10^4",
                    "The strings S1 and S2 contain only uppercase Latin alphabets."
                ],
                "testcases": [
                    {
                        "input": "S1 = \"ABC\", S2 = \"ABC\"",
                        "output": "ABC",
                        "explanation": "The substring 'ABC' is the smallest substring of S1 containing all characters of S2."
                    },
                    {
                        "input": "S1 = \"ACBBBCA\", S2 = \"ABC\"",
                        "output": "ACB",
                        "explanation": "The substring 'ACB' is the smallest substring of S1 containing all characters of S2. The order of characters doesn't matter."
                    },
                    {
                        "input": "S1 = \"ABBBB\", S2 = \"ABC\"",
                        "output": "",
                        "explanation": "There is no substring of S1 that contains all the characters of S2."
                    },
                    {
                        "input": "S1 = \"EFGHIJKL\", S2 = \"EL\"",
                        "output": "EFGHIJKL",
                        "explanation": "The entire string S1 is the smallest substring containing all characters in S2."
                    },
                    {
                        "input": "S1 = \"ADOBECODEBANC\", S2 = \"ABC\"",
                        "output": "BANC",
                        "explanation": "The substring 'BANC' is the smallest substring of S1 containing all characters of S2."
                    },
                    {
                        "input": "S1 = \"XYZ\", S2 = \"AB\"",
                        "output": "",
                        "explanation": "No substring exists in S1 containing all characters of S2"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check all substrings of S1.</p>",
            "<p>Use two pointers to find the minimum length window or substring of \u2018S1\u2019.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}