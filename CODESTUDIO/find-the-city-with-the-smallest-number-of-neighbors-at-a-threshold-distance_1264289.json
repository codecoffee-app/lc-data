{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10757,
            "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
            "titleSlug": "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance_1264289",
            "content": "<h4 id=\"you-are-given-n-cities-numbered-from-0-to-n-1-and-m-edges-these-cities-are-connected-with-undirected-weighted-edges-you-are-also-given-a-positive-integer-distancethreshold\">You are given \u2018N\u2019 cities numbered from 0 to N-1 and \u2018M\u2019 edges. These cities are connected with undirected weighted edges. You are also given a positive integer, \u2018distanceThreshold\u2019.</h4>\n\n<h4 id=\"your-task-is-to-find-the-city-to-which-the-minimum-number-of-cities-are-reachable-through-some-path-whose-distance-is-no-more-than-the-given-distancethreshold\">Your task is to find the \u2018city\u2019 to which the minimum number of cities are reachable through some path whose distance is no more than the given \u2018distanceThreshold\u2019.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. If multiple such cities exist, you have to find the city with the greatest number.\n\n2. The distance of a path connecting two cities, \u2018U\u2019 and \u2018V\u2019, is the sum of the weight of the edges along that path.\n\n3. The distance between two cities is the minimum of all possible path distances.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019, which denotes the number of test cases to be run. Then, the T test cases follow. \n\nThe first line of each test case contains three positive integers, \u2018N\u2019,  \u2018M\u2019, and \u2018distanceThreshold\u2019, as described in the problem statement.\n\nThe next \u2018M\u2019 lines of each test case contain three integers, \u2018U\u2019, \u2018V\u2019, and \u2018W\u2019 each, representing each edge of the graph.\n\nThe edge U V W represents an edge between vertices \u2018U\u2019 and \u2018V\u2019, having weight \u2018W\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The \u2018edges\u2019 will be passed to the function as an array of arrays. Each array will contain three integers, \u2018U\u2019, \u2018V\u2019, and \u2018W\u2019 in that order.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the required \u2018city\u2019 number, as described in the problem statement.\n\nThe output for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 100\n1 &lt;= M &lt;= (N * (N - 1)) / 2\n0 &lt;= U, V &lt; N\n1 &lt;= W, distanceThreshold &lt;= 100 \n\nWhere \u2018T\u2019 denotes the number of test cases, \u2018N\u2019 represents the number of cities, and \u2018M\u2019 denotes the number of edges.\n\u2018U\u2019, \u2018V\u2019, and \u2018W\u2019 denote the edge between city \u2018U\u2019 and \u2018W\u2019 having weight \u2018W\u2019.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n5 5 3\n0 1 1\n1 2 1\n2 3 3\n3 4 1\n0 3 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/findthecity_tc1-8395.png\" alt=\"altImage\"></p>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>The cities reachable to each city at a \u2018distanceThreshold\u2019 = 3 are as follows:\nCity 0 -&gt; {City 1, City 2, City 3}\nCity 1 -&gt; {City 0, City 2}\nCity 2 -&gt; {City 0, City 1, CIty 3}\nCity 3 -&gt; {City 0, City 2, City 3}\nCity 4 -&gt; {City 3}\nThe city with the smallest number of neighbors at a \u2018distanceThreshold\u2019 = 3 is city 4 which has only 1 neighboring city.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n3 3 4\n0 1 2\n1 2 2\n2 0 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/find-the-city-graph-tc2-8396.png\" alt=\"altImage\"></p>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>The cities reachable to each city at a \u2018distanceThreshold\u2019 = 4 are as follows:\nCity 0 -&gt; {City 1, City 2}\nCity 1 -&gt; {City 0, City 2}\nCity 2 -&gt; {City 0, City 1}\nAll three cities have 3 neighboring cities, So the answer must be the city with the greatest number that is city 2.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 14,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given \u2018N\u2019 cities numbered from 0 to N-1 and \u2018M\u2019 edges. These cities are connected by undirected, weighted edges. Given a positive integer, \u2018distanceThreshold\u2019, find the city to which the fewest number of other cities are reachable within the \u2018distanceThreshold\u2019.  If multiple such cities exist, return the city with the greatest number.  The distance between two cities is the minimum sum of edge weights along any path connecting them.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 100",
                    "1 <= M <= (N * (N - 1)) / 2",
                    "0 <= U, V < N",
                    "1 <= W, distanceThreshold <= 100",
                    "Where \u2018T\u2019 denotes the number of test cases, \u2018N\u2019 represents the number of cities, and \u2018M\u2019 denotes the number of edges.",
                    "\u2018U\u2019, \u2018V\u2019, and \u2018W\u2019 denote the edge between city \u2018U\u2019 and \u2018W\u2019 having weight \u2018W\u2019.",
                    "Time limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "5 5 3\n0 1 1\n1 2 1\n2 3 3\n3 4 1\n0 3 3",
                        "output": "4",
                        "explanation": "With a distance threshold of 3:\n- City 0 can reach cities 1, 2, and 3.\n- City 1 can reach cities 0 and 2.\n- City 2 can reach cities 0, 1, and 3.\n- City 3 can reach cities 0, 2, and 4.\n- City 4 can reach city 3.\nCity 4 has the fewest reachable cities (1), so the answer is 4."
                    },
                    {
                        "input": "3 3 4\n0 1 2\n1 2 2\n2 0 1",
                        "output": "2",
                        "explanation": "With a distance threshold of 4:\n- City 0 can reach cities 1 and 2.\n- City 1 can reach cities 0 and 2.\n- City 2 can reach cities 0 and 1.\nAll cities can reach 2 other cities within the threshold. Therefore, we return the city with the highest number, which is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For each city calculate the number of reachable cities within the threshold, then search for the optimal city.</p>",
            "<p>Try to compute the distance between all pairs of cities.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}