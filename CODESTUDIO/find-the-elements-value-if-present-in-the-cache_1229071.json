{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10445,
            "title": "Find the elements value if present in the cache.",
            "titleSlug": "find-the-elements-value-if-present-in-the-cache_1229071",
            "content": "<h4 id=\"there-is-a-cache-that-can-hold-up-to-n-elements-initially-it-is-empty-there-are-two-types-of-operations\">There is a cache that can hold up to \u2018N\u2019 elements. Initially, it is empty. There are two types of operations:-</h4>\n\n<h4 id=\"operation-1-1-u_id-val-where-1-represents-an-insert-update-operation-is-being-performed-in-the-cache\">Operation 1: [ 1 \u2018U_ID\u2019 \u2018VAL\u2019 ] - where 1 represents an insert/update operation is being performed in the cache.</h4>\n\n<pre><code>If the element with a particular \u2018U_ID\u2019 already exists in cache:\n - Update its mapped value with \u2018VAL\u2019. \n\nIf it does not exist and the cache is not full then \n - Simply insert this element. \n\nIf it does not exist and the cache is already full then \n - We remove an element and insert this element into the cache. The element to be removed is selected as the least frequently used element.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>  1) The frequency of use of an element is calculated by a number of operations with its \u2018U_ID\u2019 performed after it is inserted in the cache.\n\n  2) If multiple elements have the least frequency then we remove the element which was least recently used. \n</code></pre>\n\n<h4 id=\"operation-2-2-uid-where-2-represents-mapped-value-of-this-uid\">Operation 2: [ 2 &#39;U<strong>ID&#39; ] - where 2 represents, mapped value of this &#39;U</strong>ID&#39;</h4>\n\n<pre><code>If present in cache otherwise return -1.\n</code></pre>\n\n<h4 id=\"you-have-been-given-m-operations-which-you-need-to-perform-in-the-cache-your-task-is-to-return-a-vector-list-that-contains-the-answer-of-all-the-operations-of-type-2-and-in-the-order-in-which-they-were-asked\">You have been given \u2018M\u2019 operations which you need to perform in the cache. Your task is to return a vector/list that contains the answer of all the operations of type 2 and in the order in which they were asked.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>We perform the following operations on an empty cache which has capacity 2:\n\nWhen operation 1 2 3 is performed, the element with &#39;U_ID&#39; 2 and value 3 is inserted in the cache.\n\nWhen operation 1 2 1 is performed, the element with &#39;U_ID&#39; 2\u2019s value is updated to 1.  \n\nWhen operation 2 2 is performed then value of &#39;U_ID&#39; 2 is returned i.e. 1.\n\nWhen operation 2 1 is performed then the value of &#39;U_ID&#39; 1 is to be returned but it is not present in cache therefore -1 is returned.\n\nWhen operation 1 1 5 is performed, the element with &#39;U_ID&#39; 1 and value 5 is inserted in the cache. \n\nWhen operation 1 6 4 is performed, the cache is full so we need to delete an element.First, we check the number of times each element is used. Element with &#39;U_ID&#39; 2 is used 3 times (2 times operation of type 1 and 1-time operation of type 1). Element with &#39;U_ID&#39; 1 is used 1 time (1-time operation of type 1). So element with &#39;U_ID&#39; 1 is deleted. The element with &#39;U_ID&#39; 6 and value 4 is inserted in the cache. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains two single space-se[arated integers \u2018N\u2019 and \u2018M\u2019 representing the size of cache and number of operations respectively.\n\nNext \u2018M\u2019 lines contain operations that have to be performed on the cache. Each operation is either of type 1 or 2.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return a vector/list that contains answers of all the operations of type 2 and in the order which they were asked.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. All the operations are valid. \n2. You do not need to print anything; it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 1000\n1 &lt;= M &lt;= 1000\n1 &lt;= U_ID &lt;= 10^3\n1 &lt;= VAL&lt;= 10^6\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 3\n1 4 1\n2 2\n2 4    \n3 6\n1 2 7\n1 1 8\n1 2 6\n2 1\n2 5\n2 2 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>-1 1\n8 -1 6\n</code></pre>\n\n<h4 id=\"sample-output-1-explanation\">Sample Output 1 Explanation:</h4>\n\n<pre><code>Test case1:\n\nLet\u2019s say i\u2019th operation takes place at t=i. Status after each operation is as follows.\n1 4 1 - Element with &#39;U_ID&#39; 4 and value 1 is inserted in the cache.\n2 2 - No element with &#39;U_ID&#39; 2 is present in the cache so -1 is returned.\n2 4 - Element with &#39;U_ID&#39; 4 is present in the cache so its value i.e 1 is returned.\n\nTherefore the answer is -1 1.\n\n\n\n\nTest case 2:\n\nLet\u2019s say i\u2019th operation takes place at t=i. Status after each operation is as follows.\n1 2 7 - Element with &#39;U_ID&#39; 2 and value 7 is inserted in the cache.\n1 1 8 - Element with &#39;U_ID&#39; 1 and value 8 is inserted in the cache.\n1 2 6 - Element with &#39;U_ID&#39; 2 is already present in the cache so value is updated to 6.\n2 1 - Element with &#39;U_ID&#39; 1 is present in the cache so its value i.e 8 is returned. \n2 5 - No element with &#39;U_ID&#39; 5 is present in cache so -1 is returned.\n2 2 - Element with &#39;U_ID&#39; 2 is present in cache so its value i.e 6 is returned.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 3 \n1 1 1\n1 3 91\n2 1\n4 6\n1 1 7\n1 3 1\n1 2 6\n2 2\n1 2 1\n2 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n6 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a cache system with a fixed capacity 'N'. The cache supports two operations:\n\n1. **Insert/Update (1 U_ID VAL):**\n   - If 'U_ID' exists in the cache, update its value to 'VAL'.\n   - If 'U_ID' doesn't exist and the cache is not full, insert 'U_ID' with value 'VAL'.\n   - If 'U_ID' doesn't exist and the cache is full, remove the least frequently used element (LFU) and insert 'U_ID' with value 'VAL'.  If multiple elements have the same lowest frequency, remove the least recently used element among them (LRU tie-breaker).\n\n2. **Get Value (2 U_ID):**\n   - If 'U_ID' exists in the cache, return its value.\n   - If 'U_ID' doesn't exist, return -1.\n\nYou are given a series of 'M' operations. Return a list of the results of all 'Get Value' operations (type 2) in the order they appear in the input.",
                "constraints": [
                    "1 <= N <= 1000",
                    "1 <= M <= 1000",
                    "1 <= U_ID <= 1000",
                    "1 <= VAL <= 1000000"
                ],
                "testcases": [
                    {
                        "input": "n = 2, arr = [[1, 2, 3], [1, 2, 1], [2, 2], [2, 1], [1, 1, 5], [1, 6, 4]], m = 6",
                        "output": "1, -1",
                        "explanation": "Initial cache size is 2.\n- Operation 1 2 3: Insert (2, 3).\n- Operation 1 2 1: Update (2, 1).\n- Operation 2 2: Returns 1.\n- Operation 2 1: Returns -1 (not in cache).\n- Operation 1 1 5: Insert (1, 5).\n- Operation 1 6 4: Cache is full. 2 is used twice, 1 is used once so 1 is removed and (6, 4) inserted.\nThe operations of type 2 return [1, -1]"
                    },
                    {
                        "input": "n = 3, arr = [[1, 4, 1], [2, 2], [2, 4]], m = 3",
                        "output": "-1, 1",
                        "explanation": "Initial cache size is 3.\n- Operation 1 4 1: Insert (4, 1).\n- Operation 2 2: Returns -1 (not in cache).\n- Operation 2 4: Returns 1.\nThe operations of type 2 return [-1, 1]"
                    },
                    {
                        "input": "n = 3, arr = [[1, 2, 7], [1, 1, 8], [1, 2, 6], [2, 1], [2, 5], [2, 2]], m = 6",
                        "output": "8, -1, 6",
                        "explanation": "Initial cache size is 3.\n- Operation 1 2 7: Insert (2, 7).\n- Operation 1 1 8: Insert (1, 8).\n- Operation 1 2 6: Update (2, 6).\n- Operation 2 1: Returns 8.\n- Operation 2 5: Returns -1 (not in cache).\n- Operation 2 2: Returns 6.\nThe operations of type 2 return [8, -1, 6]"
                    },
                    {
                        "input": "n = 1, arr = [[1, 1, 1], [1, 3, 91], [2, 1]], m = 3",
                        "output": "-1",
                        "explanation": "Cache size is 1.\n- Operation 1 1 1: Insert (1, 1).\n- Operation 1 3 91: 1 is removed and 3 is inserted.\n- Operation 2 1: Returns -1 (not in cache).\nThe operation of type 2 returns [-1]"
                    },
                    {
                        "input": "n = 4, arr = [[1, 1, 7], [1, 3, 1], [1, 2, 6], [2, 2], [1, 2, 1], [2, 2]], m = 6",
                        "output": "6, 1",
                        "explanation": "Cache size is 4.\n- Operation 1 1 7: Insert (1, 7).\n- Operation 1 3 1: Insert (3, 1).\n- Operation 1 2 6: Insert (2, 6).\n- Operation 2 2: Returns 6.\n- Operation 1 2 1: Update (2, 1).\n- Operation 2 2: Returns 1.\nThe operations of type 2 returns [6, 1]"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Maintain a cache of size N.</p>",
            "<p>Can you think of using a data structure to store frequency, last operation and its id in an efficient way?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}