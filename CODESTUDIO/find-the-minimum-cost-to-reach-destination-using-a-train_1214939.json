{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10393,
            "title": "Find the minimum cost to reach destination using a train",
            "titleSlug": "find-the-minimum-cost-to-reach-destination-using-a-train_1214939",
            "content": "<h4 id=\"there-are-n-stations-on-the-route-of-a-train-the-train-goes-from-station-0-to-n-1-the-ticket-cost-for-all-pairs-of-stations-i-j-is-given-where-j-is-greater-than-i-your-task-is-to-find-the-minimum-cost-to-reach-the-nth-station\">There are \u2018N\u2019 stations on the route of a train. The train goes from station 0 to \u2018N\u2019 - 1. The ticket cost for all pairs of stations (i, j) is given where \u2018j\u2019 is greater than \u2018i\u2019. Your task is to find the minimum cost to reach the Nth station.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Cost of entries where j &lt; i  will be represented as INT_MAX VALUE which is 10000 in the price matrix.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>If \u2018N\u2019 = 3\n\n&#39;PRICE[3][3]&#39; = {{0, 15, 80,},\n               {INF, 0, 40},\n               {INF, INF, 0}};\n\nFirst, go from 1st station to 2nd at 15 costs, then go from 2nd to 3rd at 40. 15 + 40 = 55 is the total cost.It is cheaper than going directly from station 1 to station 3 as it would have cost 80.\n\nThe output will be 55.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; denoting the number of test cases. \n\nThe first line of each test case contains a single integer &#39;N&#39;, Where \u2018N\u2019 is the number of rows and columns in the \u2018PRICE\u2019 matrix.\n\nThe next \u2018N\u2019 lines is as follows: Each line contains \u2018N\u2019 space-separated integers representing the cost of pairs (i,j) where \u2018i\u2019 and \u2018j\u2019 are indices of the matrix \u2018PRICE\u2019. \n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return the minimum price that will have to be paid such that the train reaches from 1st to &#39;N&#39;th station.\n\nPrint the output for each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 1000\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3\n0 15 80\n10000 0 40\n10000 10000 0\n2\n0 2\n10000 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>55\n2 \n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-output-1\">Explanation of the Sample Output 1:</h5>\n\n<pre><code>In test case 1, First, go from 1st station to 2nd at 15 costs then go from 2nd to 3rd at 40 cost. 15 + 40 = 55 is the total cost.\n\nIn test case 2, Go from 1st to 2nd station at total cost 2.    \n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n2\n0 5\n10000 0\n3\n0 15 8\n10000 0 40\n10000 10000 0\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>5\n8\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-output-2\">Explanation of the Sample Output 2:</h5>\n\n<pre><code>In test case 1, Go from 1st to 2nd station at total cost 2.   \n\nIn test case 2, Go directly from 1st to 3rd station at total cost 8.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix `PRICE` representing the cost to travel between stations on a train route, where `PRICE[i][j]` is the cost to travel from station `i` to station `j`, and `PRICE[i][j]` is 10000 if `j < i`, determine the minimum cost to travel from station 0 to station `N-1`.  You can travel between any two stations `i` and `j` where `j > i`.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 1000",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 3, graph=[[0, 15, 80],[10000, 0, 40],[10000, 10000, 0]]",
                        "output": "55",
                        "explanation": "The minimum cost is achieved by going from station 0 to station 1 (cost 15) and then from station 1 to station 2 (cost 40). Total cost: 15 + 40 = 55."
                    },
                    {
                        "input": "n = 2, graph=[[0, 2],[10000, 0]]",
                        "output": "2",
                        "explanation": "The minimum cost is achieved by going directly from station 0 to station 1 (cost 2)."
                    },
                    {
                        "input": "n = 3, graph=[[0, 15, 8],[10000, 0, 40],[10000, 10000, 0]]",
                        "output": "8",
                        "explanation": "The minimum cost is achieved by going directly from station 0 to station 2 (cost 8), which is cheaper than going from station 0 to 1 and then 1 to 2 (15+40=55)."
                    },
                    {
                        "input": "n = 4, graph=[[0, 1, 10, 100], [10000, 0, 2, 50], [10000, 10000, 0, 3], [10000, 10000, 10000, 0]]",
                        "output": "6",
                        "explanation": "The optimal path is 0 -> 1 -> 2 -> 3 which costs 1 + 2 + 3 = 6."
                    },
                    {
                        "input": "n = 1, graph=[[0]]",
                        "output": "0",
                        "explanation": "There is only one station so the cost is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we find the minimum cost of travel from one station to another?</p>",
            "<p>Do we need all minimum-cost-paths?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}