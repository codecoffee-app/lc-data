{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9726,
            "title": "Find the nearest supporter",
            "titleSlug": "find-the-nearest-supporter_1082335",
            "content": "<h4 id=\"there-are-contestants-standing-in-a-row-each-contestant-is-assigned-a-rating-which-is-an-integer-a-contestant-supports-all-those-whose-rating-is-greater-than-their-rating\">There are contestants standing in a row. Each contestant is assigned a rating, which is an integer. A contestant supports all those whose rating is greater than their rating.</h4>\n\n<h4 id=\"now-for-each-contestant-standing-in-the-row-you-need-to-tell-the-rating-of-its-closest-supporter-on-the-left\">Now for each contestant standing in the row, you need to tell the rating of its closest supporter on the left.</h4>\n\n<h4 id=\"if-no-supporter-is-there-store-1-in-that-place\">If no supporter is there, store -1 in that place.</h4>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>Consider the row : [ 3, 1, 5, 12, 10], with 1-based indexing -\nFor index 3, there would be 2 supporters, index 1 and index 2, but index 2 is closest, hence for index 3, we will store \u20181\u2019 (Rating of contestant). \nFor index 5, we will store \u20185\u2019(at index 3).\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019, which represents the size of the row.\n\nThe second line for each test case \u2018N\u2019 space-separated integers denoting the corresponding elements of the row.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, you need to print space-separated integers denoting the rating of the closest supporter on the left.\n\nPrint the output of each test case in a separated line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10000\n-10^9 &lt;= data &lt;= 10^9\n\nWhere \u2018data\u2019 represents the given row elements.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1</h5>\n\n<pre><code>2\n5\n3 1 5 12 10\n6\n9 8 1 2 5 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code>-1 -1 1 5 5\n-1 -1 -1 1 2 2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1-1-based-indexing\">Explanation of Sample Input 1(1-based indexing)</h5>\n\n<pre><code>Test Case 1:\n\nThere is no contestant on the left of 1st contestant\nNo contestant\u2019s rating is less than this player, hence -1.\nBoth ratings 3 and 1 are smaller than the current rating, but \u20181\u2019 is closest.\nAll ratings are small, but the nearest one is \u20185\u2019.\nFor \u201810\u2019, the nearest rating is \u20185\u2019, as contestant 4 is not a supporter.\n\nTest Case 2:\n\nFor the first &#39;3&#39; contestants, there is no supporter.\nFor contestant &#39;4&#39;, the only supporter is contestant &#39;3&#39;, with the rating &#39;1&#39;.\nBoth ratings &#39;1&#39; and &#39;2&#39; are smaller than the current rating, but \u20182\u2019 is closest.\nThe rating of contestant &#39;5&#39; is not less than the current contestant, hence the closest supporter is 4th, with a rating of &#39;2&#39;.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2</h5>\n\n<pre><code>2\n5\n3 2 1 4 5\n4\n1 2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>-1 -1 -1 1 4\n-1 1 2 3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 23,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a row of contestants, each with a rating, find the rating of the closest supporter to the left for each contestant. A supporter is a contestant with a higher rating. If a contestant has no supporters to their left, mark it as -1.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10000",
                    "-10^9 <= rating <= 10^9, where rating is the rating of a contestant",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n3 1 5 12 10",
                        "output": "-1 -1 1 5 5",
                        "explanation": "Contestant 1: No supporter on the left, output -1.\nContestant 2: No supporter on the left, output -1.\nContestant 3: Contestant 1 (rating 3) is the closest supporter, output 3 (rating of the closest supporter).\nContestant 4: Contestant 3 (rating 5) is the closest supporter, output 5.\nContestant 5: Contestant 3 (rating 5) is the closest supporter, output 5."
                    },
                    {
                        "input": "6\n9 8 1 2 5 5",
                        "output": "-1 -1 -1 1 2 2",
                        "explanation": "Contestants 1, 2, and 3: No supporters on the left, output -1 for each.\nContestant 4: Contestant 3 (rating 1) is the closest supporter, output 1.\nContestant 5: Contestant 4 (rating 2) is the closest supporter, output 2.\nContestant 6: Contestant 4 (rating 2) is the closest supporter, output 2."
                    },
                    {
                        "input": "5\n3 2 1 4 5",
                        "output": "-1 -1 -1 1 4",
                        "explanation": "Contestants 1, 2 and 3: No supporter on the left, hence -1.\nContestant 4: Closest supporter is contestant 1 with rating 3. output: 3\nContestant 5: Closest supporter is contestant 4 with rating 4. output: 4"
                    },
                    {
                        "input": "4\n1 2 3 4",
                        "output": "-1 1 2 3",
                        "explanation": "Contestant 1: No supporter on the left, hence -1.\nContestant 2: Closest supporter is contestant 1 with rating 1. output: 1\nContestant 3: Closest supporter is contestant 2 with rating 2. output: 2\nContestant 4: Closest supporter is contestant 3 with rating 3. output: 3"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try checking all the contestants for each Position.</p>",
            "<p>Try using Stacks, and consider the requirement to keep a required rating.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}