{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 23325,
            "title": "Find The Single Element",
            "titleSlug": "find-the-single-element_6680465",
            "content": "<h4 id=\"you-are-given-a-sorted-array-arr-of-positive-integers-of-size-n\">You are given a sorted array <em><strong>&#39;arr&#39;</strong></em> of positive integers of size <em><strong>&#39;n&#39;</strong></em>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"it-contains-each-number-exactly-twice-except-for-one-number-which-occurs-exactly-once\">It contains each number exactly twice except for one number, which occurs exactly once.</h4>\n\n<p><br/></p>\n\n<h4 id=\"find-the-number-that-occurs-exactly-once\">Find the number that occurs exactly once.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Input: \u2018arr\u2019 = {1, 1, 2, 3, 3, 4, 4}.\n\nOutput: 2\n\nExplanation: 1, 3, and 4 occur exactly twice. 2 occurs exactly once. Hence the answer is 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer \u2018n\u2019, representing the size of the array \u2018arr\u2019.\n\nThe second line contains \u2018n\u2019 integers, denoting the elements of the array \u2018arr\u2019.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The output contains the integer in the array that occurs exactly once.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>5\n1 1 2 2 3\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of sample output 1:</h5>\n\n<pre><code>{1, 2} each occurs twice, whereas 3 occurs only once.\nHence the answer is 3.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5\n8 8 9 9 10\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>10\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity :</h5>\n\n<pre><code>The expected time complexity is O(n), but try solving it in O(log n).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10^4\n1 &lt;= &#39;arr[i]&#39; &lt;= 10^9\n\n\u2018n\u2019 is always odd.\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 194,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array of positive integers `arr` of size `n`, where each number appears exactly twice except for one number which appears exactly once. Find the single number that occurs only once in the array.",
                "constraints": [
                    "1 <= n <= 10^4",
                    "1 <= arr[i] <= 10^9",
                    "n is always odd",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n1 1 2 2 3",
                        "output": "3",
                        "explanation": "The numbers 1 and 2 each appear twice. The number 3 appears only once, so the output is 3."
                    },
                    {
                        "input": "5\n8 8 9 9 10",
                        "output": "10",
                        "explanation": "The numbers 8 and 9 each appear twice. The number 10 appears only once, so the output is 10."
                    },
                    {
                        "input": "7\n1 1 2 3 3 4 4",
                        "output": "2",
                        "explanation": "The numbers 1, 3, and 4 each appear twice. The number 2 appears only once, so the output is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of the most simple way to find out if there is another number equal to the current number in an array.</p>",
            "<p>Try to think of an approach that uses the frequency of an element in the array.</p>",
            "<p>Think of a solution using stack.</p>",
            "<p>Do we really need an additional data structure like a stack to take advantage of the fact that the given array is sorted?</p>",
            "<p>Think of a solution using bit manipulation.</p>",
            "<p>Think of a solution using binary search.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\nTime Complexity: O(Log(N))\n\nSpace Complexity: O(1)\n\nWhere 'N' is the number of elements in the array 'Arr'.\n*/\n\nint getSingleElement(vector<int> &arr){\n\tint n = arr.size();\n\t\n\t// Monotonic(Boolean) function, that returns 1, for positions of elements before the single element, and 0 otherwise.\n\tauto check = [&](int pos) -> bool{\n\t\treturn (arr[pos] == arr[pos + 1]) == ((pos % 2) == 0);\n\t};\n\t\n\tint lo = 0, hi = n - 2;\n\t\n\t// Performing binary-search for the position of the single element.\n\twhile(lo <= hi){\n\t\tint mid = (lo + hi) / 2;\n\t\tif(check(mid))\n\t\t\tlo = mid + 1;\n\t\telse\n\t\t\thi = mid - 1;\n\t}\n\treturn arr[lo];\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\nTime Complexity: O(Log(N))\r\n\r\nSpace Complexity: O(1)\r\n\r\nWhere 'N' is the number of elements in the array 'Arr'.\r\n*/\r\npublic class Solution {\r\n    public static int getSingleElement(int []arr){\r\n        int n = arr.length;\r\n\r\n        int lo = 0, hi = n - 2;\r\n\r\n        // Performing binary-search for the position of the single element.\r\n        while(lo <= hi){\r\n            int mid = (lo + hi) / 2;\r\n            if(check(mid, arr))\r\n                lo = mid + 1;\r\n            else\r\n                hi = mid - 1;\r\n        }\r\n        return arr[lo];\r\n    }\r\n    // Monotonic(Boolean) function, that returns 1, for positions of elements before the single element, and 0 otherwise.\r\n    public static boolean check(int pos, int []arr){\r\n        return (arr[pos] == arr[pos + 1]) == ((pos % 2) == 0);\r\n    };\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\n    Time Complexity: O(Log(N))\n\n    Space Complexity: O(1)\n\n    Where 'N' is the number of elements in the array 'Arr'.\n\"\"\"\nfrom typing import *\n\n# Monotonic(Boolean) function, that returns 1, for positions of elements before the single element, and 0 otherwise.\ndef check(arr : List[int], pos : int) -> bool:\n    return (arr[pos] == arr[pos + 1]) == ((pos & 1) == 0)\n\n\ndef getSingleElement(arr : List[int]) -> int:\n\n    n = len(arr)\n    \n    lo, hi = 0, n - 2\n\n    # Performing binary-search for the position of the single element.\n    while lo <= hi:\n        mid = (lo + hi) // 2\n\n        if check(arr, mid):\n            lo = mid + 1\n        else:\n            hi = mid - 1\n\n    return arr[lo]\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}