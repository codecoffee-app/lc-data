{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9904,
            "title": "Find the Winner",
            "titleSlug": "find-the-winner_1095656",
            "content": "<h4 id=\"you-have-been-given-an-array-list-of-votes-which-contains-the-name-of-the-candidates-where-each-entry-represents-the-name-of-the-candidate-who-got-the-vote\">You have been given an array/list of \u201cVOTES\u201d which contains the name of the candidates where each entry represents the name of the candidate who got the vote.</h4>\n\n<h4 id=\"you-are-supposed-to-find-the-name-of-the-candidate-who-received-the-maximum-number-of-votes-if-there-is-a-tie-then-print-the-lexicographically-smaller-name\">You are supposed to find the name of the candidate who received the maximum number of votes. If there is a tie, then print the lexicographically smaller name.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019 denoting the number of test cases. Then each test case follows.\n\nThe first input line of each test case contains an integer \u2018N\u2019 denoting the total number of votes cast.\n\nEach of the next \u2018N\u2019 lines contains the name of the candidate who received the vote.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the name of the candidate who received the maximum number of votes.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= \u2018N\u2019 &lt;= 10^3\n1 &lt;= |NAME| &lt;= 20\n\nWhere \u2018N\u2019 is the number of votes cast and |NAME| denotes the length of the candidate\u2019s name. \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4\nJohn\nTim\nMarry\nJohn\n2\nRahul\nAnkur\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>John\nAnkur\n</code></pre>\n\n<h5 id=\"explanation-for-sample-intput-1\">Explanation For Sample intput 1 :</h5>\n\n<pre><code>For the first test case, \u201cJohn\u201d has received the maximum number of votes (2 votes).\n\nFor the second test case, both \u201cRahul\u201d and \u201cAnkur\u201d has received one vote each since \u201cAnkur\u201d is lexicographically smaller than \u201cRahul\u201d, print \u201cAnkur\u201d.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1\nArya\n2\nAtul\nAtul    \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>Arya\nAtul\n</code></pre>\n\n<h5 id=\"explanation-for-sample-intput-2\">Explanation For Sample intput 2 :</h5>\n\n<pre><code>For the first test case, \u201cArya\u201d is the only candidate in the election who has received the maximum number of votes.  \n\nFor the second test case, \u201cAtul\u201d has received all the votes.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 33,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of strings, where each string represents a vote for a candidate, determine the candidate who received the most votes. If multiple candidates have the same maximum number of votes, return the candidate with the lexicographically smallest name.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^3",
                    "1 <= |NAME| <= 20"
                ],
                "testcases": [
                    {
                        "input": "votes = [\"John\", \"Tim\", \"Marry\", \"John\"]",
                        "output": "John",
                        "explanation": "John received 2 votes, Tim and Marry each received 1. John has the most votes."
                    },
                    {
                        "input": "votes = [\"Rahul\", \"Ankur\"]",
                        "output": "Ankur",
                        "explanation": "Rahul and Ankur each received 1 vote. Ankur is lexicographically smaller than Rahul."
                    },
                    {
                        "input": "votes = [\"Arya\"]",
                        "output": "Arya",
                        "explanation": "Arya is the only candidate and therefore the winner."
                    },
                    {
                        "input": "votes = [\"Atul\", \"Atul\"]",
                        "output": "Atul",
                        "explanation": "Atul received 2 votes."
                    },
                    {
                        "input": "votes = [\"A\", \"B\", \"C\", \"D\", \"E\", \"A\", \"B\", \"C\", \"D\", \"A\", \"B\", \"C\", \"A\", \"B\", \"A\"]",
                        "output": "A",
                        "explanation": "A received 5 votes, B received 4, C received 3, D received 2, and E received 1.  A has the most votes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of counting the votes of each candidate?</p>",
            "<p>Can you think of using a HashMap?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}