{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 1287,
            "title": "Find Unique",
            "titleSlug": "find-unique_625159",
            "content": "<h4 id=\"you-have-been-given-an-integer-array-list-arr-of-size-n-where-n-is-equal-to-2m-1\">You have been given an integer array/list(ARR) of size N. Where N is equal to [2M + 1].</h4>\n\n<h4 id=\"now-in-the-given-array-list-m-numbers-are-present-twice-and-one-number-is-present-only-once\">Now, in the given array/list, &#39;M&#39; numbers are present twice and one number is present only once.</h4>\n\n<h4 id=\"you-need-to-find-and-return-that-number-which-is-unique-in-the-array-list\">You need to find and return that number which is unique in the array/list.</h4>\n\n<h5 id=\"note\">\u00a0Note:</h5>\n\n<pre><code>Unique element is always present in the array/list according to the given condition.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an Integer &#39;t&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nFirst line of each test case or query contains an integer &#39;N&#39; representing the size of the array/list.\n\nSecond line contains &#39;N&#39; single space separated integers representing the elements in the array/list.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the unique element present in the array.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= t &lt;= 10^2\n0 &lt;= N &lt;= 10^3\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n7\n2 3 1 6 3 6 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\nExplanation: The array is [2, 3, 1, 6, 3, 6, 2]. Here, the numbers 2, 3, and 6 are present twice, and the number 1 is present only once. So, the unique number in this array is 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n2 4 7 2 7\n9\n1 3 1 3 6 6 7 10 7\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4\nExplanation: In the first test case, the array is [2, 4, 7, 2, 7]. Here, the numbers 2 and 7 are present twice, and the number 4 is present only once. So, the unique number in this array is 4.\n\n10\nExplanation: In the second test case, the array is [1, 3, 1, 3, 6, 6, 7, 10, 7]. Here, the numbers 1, 3, 6, and 7 are present twice, and the number 10 is present only once. So, the unique number in this array is 10.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 821,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers where each number appears exactly twice except for one number which appears only once. Find and return the unique number.",
                "constraints": [
                    "1 <= t <= 100",
                    "0 <= N <= 1000",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "7\n2 3 1 6 3 6 2",
                        "output": "1",
                        "explanation": "The array is [2, 3, 1, 6, 3, 6, 2].  The numbers 2, 3, and 6 appear twice. The number 1 appears once. Therefore, the unique number is 1."
                    },
                    {
                        "input": "5\n2 4 7 2 7",
                        "output": "4",
                        "explanation": "The array is [2, 4, 7, 2, 7]. The numbers 2 and 7 appear twice. The number 4 appears once. Therefore, the unique number is 4."
                    },
                    {
                        "input": "9\n1 3 1 3 6 6 7 10 7",
                        "output": "10",
                        "explanation": "The array is [1, 3, 1, 3, 6, 6, 7, 10, 7]. The numbers 1, 3, 6, and 7 appear twice. The number 10 appears once. Therefore, the unique number is 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n\tThe given approach is not the best possible solution. \r\n\tA better solution will be discussed later once we learn about \r\n    Time & Space Complexity in the Data Structures and Algorithms \r\n    part of the course.\r\n*/\r\n\r\n#include <climits>  \r\n\r\nint findUnique(int *arr, int size)\r\n{\r\n\r\n    for (int i = 0; i < size; ++i)\r\n    {\r\n        int j = 0;\r\n\r\n        for (; j < size; j++)\r\n        {\r\n            if (i != j && arr[i] == arr[j])\r\n            {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (j == size)\r\n        {\r\n            return arr[i];\r\n        }\r\n    }\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    The given approach is not the best possible solution. \n    A better way will be taught later in the course once we\n    cover the Time/Space Complexity in the Data Structures and \n    Algorithms part\n'''\n\nimport sys\n\ndef findUnique(arr, n) :\n    for i in range(n) :\n        j = 0\n        while j < n :\n            if i != j :\n                if arr[i] == arr[j] :\n                    break\n            j += 1\n            \n        if j == n :\n            return arr[i]\n        \n    '''\n        The function would never return from this line \n        since the input array always contains a unique value. \n\n        To avoid the ambiguity at the compile time,\n        the function necessarily has to return a value in case\n        the line number 20 doesn't return the desired value during\n        the execution of the for loop.\n    '''\n    return sys.maxsize \n\n\ndef takeInput() :\n    n = int(sys.stdin.readline().rstrip())\n\n    if n == 0 :\n        return list(), 0\n\n    arr = list(map(int, sys.stdin.readline().rstrip().split(\" \")))\n    return arr, n\n\n#main\nt = int(sys.stdin.readline().rstrip())\n\nwhile t > 0 :\n\n    arr, n = takeInput()\n    print(findUnique(arr, n))\n\n    t -= 1",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "public class Solution{  \n    \n    /*  \n        The given approach is not the best possible solution. \n        A better way will be taught later in the course once we\n        cover the Time/Space Complexity in the Data Structures and \n        Algorithms part\n    */\n    \n    public static int findUnique(int[] arr){\n    \t\n        for(int i = 0; i < arr.length; i++) {\n            int j;\n            for(j = 0; j < arr.length; j++) {\n                if(i != j) {\n                    if(arr[i] == arr[j]) {\n                        break;\n                    }\n                }\n            }\n            if(j == arr.length) {\n                return arr[i];\n            }\n        }\n\n        /*\n\t    \tThe function would never return from this line \n    \t\tsince the input array always contains a unique value. \n\n    \t\tTo avoid the ambiguity at the compile time,\n    \t\tthe function necessarily has to return a value in case\n    \t\tthe line number 22 doesn't return the desired value during\n    \t\tthe execution of the for loop.\n        */\n        return Integer.MAX_VALUE;\n    }\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}