{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10976,
            "title": " Finding Paths",
            "titleSlug": "finding-paths_1281314",
            "content": "<h4 id=\"kevin-has-written-some-integers-on-a-paper-he-then-selects-some-integers-and-draws-a-line-between-them-fortunately-his-diagram-represents-a-binary-tree-today-his-friend-challenged-him-to-find-the-paths-that-start-from-root-and-end-at-the-leaf-in-his-diagram-whose-sum-is-exactly-equal-to-the-number-k-but-kevin-has-another-important-piece-of-work-and-so-he-appoints-you-to-do-his-task\">Kevin has written some integers on a paper. He then selects some integers and draws a line between them. Fortunately, his diagram represents a binary tree. Today, his friend challenged him to find the paths that start from root and end at the leaf in his diagram whose sum is exactly equal to the number \u2018K\u2019. But, Kevin has another important piece of work and so, he appoints you to do his task.</h4>\n\n<h4 id=\"all-you-have-to-do-is-to-find-the-paths-in-his-diagram-whose-sum-is-exactly-equal-to-the-number-k\">All you have to do is to find the paths in his diagram whose sum is exactly equal to the number \u2018K\u2019.</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<p><img src=\"https://files.codingninjas.in/finding-paths-8495.png\" alt=\"Example\"></p>\n\n<pre><code>Consider the above binary tree. If \u2018K\u2019 is 15 then the required paths are [5, 6, 4] and [5, 15, -5].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases are as follows.\n\nThe first line of each test case contains an integer \u2018K\u2019 which represents the number \u2018K\u2019.\n\nThe second line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return all the paths that start from the root and end at the leaf and whose sum is exactly equal to \u2018K\u2019. All the paths should be printed in a separate line and should be enclosed in a square bracket.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^3\n-10^5 &lt;= K &lt;= 10^5\n-10^5 &lt;= DATA &lt;= 10^4\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n15\n5 6 15 4 1 -5 2 -1 -1 -1 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>[ 5 6 4 ]\n[ 5 15 -5 ]\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case, the explanation is given in the description.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n10\n1 2 -1 3 -1 -1 -1\n2\n1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>[ ]\n[ ]\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>In the first test case, there is not a single path that starts from the root and ends at the leaf and whose sum is equal to 10.\n\nIn the second test case, there is not a single path that starts from the root and ends at the leaf and whose sum is equal to 2.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree where each node contains an integer, find all root-to-leaf paths whose sum is equal to a given target value 'K'. A path is defined as a sequence of nodes from the root to a leaf node. Your task is to identify and return these paths as lists of integers.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^3",
                    "-10^5 <= K <= 10^5",
                    "-10^5 <= DATA <= 10^4",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "15\n5 6 15 4 1 -5 2 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "[ 5 6 4 ]\n[ 5 15 -5 ]",
                        "explanation": "The binary tree represented by the input has two paths from root to leaf with a sum equal to 15.  These paths are [5, 6, 4] and [5, 15, -5]."
                    },
                    {
                        "input": "10\n1 2 -1 3 -1 -1 -1",
                        "output": "[]",
                        "explanation": "There is no path from root to leaf that sums to 10 in the provided tree."
                    },
                    {
                        "input": "2\n1 2 3 -1 -1 -1 -1",
                        "output": "[]",
                        "explanation": "There is no path from root to leaf that sums to 2 in the provided tree."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of going through each node by using DFS?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}