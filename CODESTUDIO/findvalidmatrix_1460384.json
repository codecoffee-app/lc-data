{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12419,
            "title": "FindValidMatrix",
            "titleSlug": "findvalidmatrix_1460384",
            "content": "<h4 id=\"ninja-has-two-arrays-rowsum-and-colsum-of-size-n-and-m-ninja-wants-to-find-a-matrix-of-size-n-m-such-that-rowsum-i-is-equal-to-the-sum-of-elements-of-ith-row-of-the-matrix-for-all-i-from-1-to-n-and-colsum-j-is-equal-to-the-sum-of-elements-of-jth-column-of-the-matrix-for-all-j-from-1-to-m\">Ninja has two arrays, \u2018rowSum\u2019 and \u2018colSum\u2019 of size \u2018n\u2019 and \u2018m\u2019. Ninja wants to find a matrix of size \u2018n\u2019 * \u2018m\u2019 such that rowSum[ i ] is equal to the sum of elements of ith row of the matrix for all i from 1 to n and colSum[ j ] is equal to the sum of elements of jth column of the matrix for all j from 1 to m.</h4>\n\n<h4 id=\"help-the-ninja-in-finding-out-the-matrix-it-is-guaranteed-that-solution-will-exist-for-the-given-input\">Help the Ninja in finding out the matrix. It is guaranteed that solution will exist for the given input.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. \n\nThe first line consists of two integer \u2018n\u2019 and \u2018m\u2019 denoting the size of rowSum array and colSum array.\n\nThe next line contains \u2018n\u2019 space-separated integers denoting the elements of \u2018rowSum\u2019.\n\nThe next line contains \u2018m\u2019 space-separated integers denoting the elements of \u2018colSum\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Return the valid matrix. There can be many possible solutions, return any of them.\n\nIf the returned matrix is valid matrix, the checker will return true else will return false\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= \u2019T\u2019 &lt;= 10\n1 &lt;= \u2018n\u2019&lt;= 5000\n1 &lt;= arr[i][0] ,arrr[i][1] &lt;= 10^6\n\nWhere \u2018i\u2019 varies from 1 to \u2018n\u2019 - 1 where \u2018n\u2019 is the length of the array \u2018nums\u2019.\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n3 3\n6 15 24\n12 15 18\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 2 3\n4 5 6\n7 8 9\n</code></pre>\n\n<h5 id=\"sample-explanation\">Sample Explanation  :</h5>\n\n<pre><code>For the matrix given for sample testcase 1:-\nThe sum of the 1st row = 1 + 2 + 3 = 6 which is equal to rowSum[ 1 ].\nThe sum of  the 2nd row = 4 + 5 + 6 = 15 which is equal to rowSum[ 2 ].\nThe sum of the 3rd row = 7 + 8 + 9 = 24 which is equal to rowSum[ 3 ].\nThe sum of 1st column = 1 + 4 + 7 = 12 which is equal to colSum[ 1 ].\nThe sum of the 2nd column = 2 + 5 + 8 = 15 which is equal to colSum[ 2 ].\nThe sum of the 3rd column = 3 + 6 + 9 = 18 which is equal to colSum[ 3 ].\n\nHence it satisfies the condition and it is a valid matrix.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n2 3\n18 28\n13 17 16\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5 6 7\n8 11 9\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, `rowSum` of size `n` and `colSum` of size `m`, construct an `n x m` matrix such that the sum of elements in the i-th row equals `rowSum[i]` for all `i` from 1 to `n`, and the sum of elements in the j-th column equals `colSum[j]` for all `j` from 1 to `m`.  A solution is guaranteed to exist.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= n <= 5000",
                    "1 <= arr[i][0], arrr[i][1] <= 10^6 (where i varies from 1 to n-1)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 3\n6 15 24\n12 15 18",
                        "output": "1 2 3\n4 5 6\n7 8 9",
                        "explanation": "The matrix satisfies the conditions: Row sums are 6, 15, and 24 respectively, matching the rowSum array. Column sums are 12, 15, and 18 respectively, matching the colSum array."
                    },
                    {
                        "input": "2 3\n18 28\n13 17 16",
                        "output": "5 6 7\n8 11 9",
                        "explanation": "The matrix satisfies the conditions: Row sums are 18 and 28 respectively, matching the rowSum array. Column sums are 13, 17, and 16 respectively, matching the colSum array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The cell in the \u2018i\u2019 th row and \u2018j' th column will have the value min(rowSum[i],colSum[j])</p>",
            "<p>Can we Optmise our previous approach to look for specific values?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}