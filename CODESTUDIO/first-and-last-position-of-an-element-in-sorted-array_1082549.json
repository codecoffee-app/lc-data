{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9728,
            "title": "First and Last Position of an Element In Sorted Array",
            "titleSlug": "first-and-last-position-of-an-element-in-sorted-array_1082549",
            "content": "<h4 id=\"you-have-been-given-a-sorted-array-list-arr-consisting-of-n-elements-you-are-also-given-an-integer-k\">You have been given a sorted array/list <em><strong>&#39;arr&#39;</strong></em> consisting of <em><strong>\u2018n\u2019</strong></em> elements. You are also given an integer <em><strong>\u2018k\u2019</strong></em>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"now-your-task-is-to-find-the-first-and-last-occurrence-of-k-in-arr\">Now, your task is to find the first and last occurrence of \u2018k\u2019 in &#39;arr&#39;.</h4>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. If \u2018k\u2019 is not present in the array, then the first and the last occurrence will be -1. \n2. &#39;arr&#39; may contain duplicate elements.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: &#39;arr&#39; = [0,1,1,5] , &#39;k&#39; = 1\n\nOutput: 1 2\n\nExplanation:\nIf &#39;arr&#39; = [0, 1, 1, 5] and &#39;k&#39; = 1, then the first and last occurrence of 1 will be 1(0 - indexed) and 2.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of each test case contains two single-space separated integers \u2018n\u2019 and \u2018k\u2019, respectively.\n\nThe second line of each test case contains \u2018n\u2019 single space-separated integers denoting the elements of the array/list &#39;arr&#39;.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Return two single-space separated integers denoting the first and the last occurrence of \u2018k\u2019 in &#39;arr&#39;, respectively.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>8 2\n0 0 1 1 2 2 2 2\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>4 7\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample output 1:</h5>\n\n<pre><code>For this testcase the first occurrence of 2 in at index 4 and last occurrence is at index 7.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4 2\n1 3 3 5\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>-1 -1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to do this in O(log(n)).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= n &lt;= 10^5\n0 &lt;= k &lt;= 10^9\n0 &lt;= arr[i] &lt;= 10^9\n\nTime Limit : 1 second\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 803,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr` of `n` elements and an integer `k`, find the first and last occurrence of `k` in `arr`. If `k` is not present, return -1 for both first and last occurrence.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "0 <= k <= 10^9",
                    "0 <= arr[i] <= 10^9",
                    "Time Limit : 1 second"
                ],
                "testcases": [
                    {
                        "input": "8 2\n0 0 1 1 2 2 2 2",
                        "output": "4 7",
                        "explanation": "The first occurrence of 2 is at index 4, and the last occurrence is at index 7."
                    },
                    {
                        "input": "4 2\n1 3 3 5",
                        "output": "-1 -1",
                        "explanation": "The number 2 is not present in the array; therefore, both the first and last occurrences are -1."
                    },
                    {
                        "input": "4 1\n0 1 1 5",
                        "output": "1 2",
                        "explanation": "The first occurance of 1 is at index 1 and the last occurance is at index 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>Brute force the problem by traversing the array.</strong></p>",
            "<p><strong>Optimise your solution using the fact that the array is sorted</strong></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity : O(log(N))\n    Space Complexity : O(1)\n\n    where N is the length of array.\n*/\n\n\npair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k)\n{\n    int first = -1;\n    int last = -1;\n\n    int si = 0;\n    int ei = n - 1;\n\n    // To find first position\n    while(si <= ei)\n    {\n        int mid = si + (ei - si) / 2;\n\n        if(arr[mid] == k)\n        {\n            first = mid;\n            ei = mid - 1;\n        }\n        else if(arr[mid] < k)\n        {\n            si = mid + 1;\n        }\n        else\n        {\n            ei = mid - 1;\n        }\n    }\n\n    si = 0;\n    ei = n - 1;\n\n    // To find last position\n    while(si <= ei)\n    {\n        int mid = si + (ei - si) / 2;\n\n        if(arr[mid] == k)\n        {\n            last = mid;\n            si = mid + 1;\n        }\n        else if(arr[mid] < k)\n        {\n            si = mid + 1;\n        }\n        else\n        {\n            ei = mid - 1;\n        }\n    }\n\n    return make_pair(first, last);\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(log(n))\r\n    Space Complexity : O(1)\r\n\r\n    where n is the length of array.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n\r\n    public static int[] firstAndLastPosition(ArrayList<Integer> arr, int n, int k) {\r\n        int first = -1;\r\n        int last = -1;\r\n\r\n        int si = 0;\r\n        int ei = n - 1;\r\n\r\n        // To find first position\r\n        while (si <= ei) {\r\n            int mid = si + (ei - si) / 2;\r\n\r\n            if (arr.get(mid) == k) {\r\n                first = mid;\r\n                ei = mid - 1;\r\n            } else if (arr.get(mid) < k) {\r\n                si = mid + 1;\r\n            } else {\r\n                ei = mid - 1;\r\n            }\r\n        }\r\n\r\n        si = 0;\r\n        ei = n - 1;\r\n\r\n        // To find last position\r\n        while (si <= ei) {\r\n            int mid = si + (ei - si) / 2;\r\n\r\n            if (arr.get(mid) == k) {\r\n                last = mid;\r\n                si = mid + 1;\r\n            } else if (arr.get(mid) < k) {\r\n                si = mid + 1;\r\n            } else {\r\n                ei = mid - 1;\r\n            }\r\n        }\r\n        return new int[]{first,last};\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity : O(log(N))\r\n    Space Complexity : O(1)\r\n\r\n    where N is the length of array.\r\n'''\r\n\r\n\r\ndef firstAndLastPosition(arr, n, k):\r\n\r\n    first = -1\r\n    last = -1\r\n\r\n    si = 0\r\n    ei = n - 1\r\n\r\n    # To find first position\r\n    while(si <= ei):\r\n    \r\n        mid = si + (ei - si) // 2\r\n\r\n        if(arr[mid] == k):\r\n            first = mid\r\n            ei = mid - 1\r\n        elif(arr[mid] < k):\r\n            si = mid + 1\r\n        else:\r\n            ei = mid - 1\r\n\r\n    si = 0\r\n    ei = n - 1\r\n\r\n    # To find last position\r\n    while(si <= ei):\r\n\r\n        mid = si + (ei - si) // 2\r\n\r\n        if(arr[mid] == k):\r\n            last = mid\r\n            si = mid + 1\r\n        elif(arr[mid] < k):\r\n            si = mid + 1\r\n        else:\r\n            ei = mid - 1\r\n        \r\n    return first, last\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}