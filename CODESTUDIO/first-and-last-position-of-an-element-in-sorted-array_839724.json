{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8183,
            "title": "First and Last Position of an element in Sorted Array",
            "titleSlug": "first-and-last-position-of-an-element-in-sorted-array_839724",
            "content": "<h4 id=\"you-are-given-a-non-decreasing-array-arr-consisting-of-n-integers-and-an-integer-x-you-need-to-find-the-first-and-last-position-of-x-in-the-array\">You are given a non-decreasing array <em><strong>&#39;arr&#39;</strong></em> consisting of <em><strong>&#39;n&#39;</strong></em> integers and an integer <em><strong>&#39;x&#39;</strong></em>. You need to find the first and last position of <em><strong>&#39;x&#39;</strong></em> in the array.</h4>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The array follows 0-based indexing, so you need to return 0-based indices.\n2. If &#39;x&#39; is not present in the array, return {-1 -1}.\n3. If &#39;x&#39; is only present once in the array, the first and last position of its occurrence will be the same.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input:  arr = [1, 2, 4, 4, 5],  x = 4\n\nOutput: 2 3\n\nExplanation: The given array\u2019s 0-based indexing is as follows:\n 1      2     4     4     5\n \u2193      \u2193     \u2193     \u2193     \u2193\n 0      1     2     3     4\n\nSo, the first occurrence of 4 is at index 2, and the last occurrence of 4 is at index 3.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains the integer &#39;n&#39;, denoting the size of the sorted array.\nThe second line contains &#39;n&#39; space-separated integers denoting the array elements.\nThe third line contains the value &#39;x&#39;, whose first and last position of occurrence you need to find.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output should contain two space-separated integers, where the first and second integer will be the first and the last position of occurrence of &#39;x&#39;, respectively, in the array.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code> 1 &lt;= n &lt;= 10^4\n-10^9 &lt;= arr[i] &lt;= 10^9\n-10^9 &lt;= x &lt;= 10^9\n Time Limit: 1sec\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to solve the problem in O(log(N)) time complexity.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>5\n-10 -5 -5 -5 2\n-5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>The given array\u2019s 0-based indexing is as follows:\n-10    -5    -5    -5     2\n \u2193      \u2193     \u2193     \u2193     \u2193\n 0      1     2     3     4\n\nSo, the first occurrence of -5 is at index 1, and the last occurrence of -5 is at index 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4\n1 2 3 4\n-1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2:</h5>\n\n<pre><code>The given array &#39;arr&#39; is:[1, 2, 3, 4] and &#39;x&#39; = -1.\nIn this case &#39;x&#39; is not present in the array.\nHence, we return {-1,-1}.     \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 139,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-decreasing array 'arr' of 'n' integers and an integer 'x', find the first and last position of 'x' in the array (0-based indexing). If 'x' is not present, return {-1, -1}. If 'x' appears only once, the first and last positions are the same.",
                "constraints": [
                    "1 <= n <= 10^4",
                    "-10^9 <= arr[i] <= 10^9",
                    "-10^9 <= x <= 10^9",
                    "Time Limit: 1sec",
                    "Expected Time Complexity: O(log(N))"
                ],
                "testcases": [
                    {
                        "input": "5\n-10 -5 -5 -5 2\n-5",
                        "output": "1 3",
                        "explanation": "The array is [-10, -5, -5, -5, 2]. The first occurrence of -5 is at index 1, and the last occurrence is at index 3."
                    },
                    {
                        "input": "4\n1 2 3 4\n-1",
                        "output": "-1 -1",
                        "explanation": "'x' (-1) is not present in the array [1, 2, 3, 4]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Naively find first and the last occurrence.</p>",
            "<p>Make use of the fact that the given array is sorted.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n\tTime Completargetity: O(log n)\n\tSpace Completargetity: O(1)\n\n\twhere n is the size of the sorted array.\n*/\n\nvector<int> searchRange(vector<int> &arr, int x)\n{\n\tint n = arr.size();\n\t// Initialise both first and last occurences to -1, incase x is not found in array.\n\tint idx1 = -1, idx2 = -1;\n\t// Binary search to find the first position of occurence of x.\n\tint lo = 0, hi = n - 1;\n\twhile (lo <= hi) {\n\t\tint mid = (lo + hi) / 2;\n\t\t// If arr[mid] == x and x > arr[mid-1], then mid is first occurrence of x, or arr[mid] == x and mid == 0, then mid is first occurrence of x.\n\t\tif ((mid == 0 or x > arr[mid - 1]) and arr[mid] == x) {\n\t\t\tidx1 = mid;\n\t\t\tbreak;\n\t\t}\n\n\t\t// If x is greater than arr[mid] in sorted array, then x may only occur in [mid+1, hi] range of index.\n\t\telse if (x > arr[mid]) {\n\t\t\tlo = mid + 1;\n\t\t}\n\n\t\t// Else x may only occur in [lo, mid-1] range of index.\n\t\telse {\n\t\t\thi = mid - 1;\n\t\t}\n\n\t}\n\n\t// Binary search to find the last position of occurence of x.\n\tlo = 0, hi = n - 1;\n\twhile (lo <= hi) {\n\t\tint mid = (lo + hi) / 2;\n\t\t// If arr[mid] == x and mid == n-1 then, mid is last occurrence of x, or arr[mid+1] > x and arr[mid] == x, then mid is last occurence of x.\n\t\tif ((mid == n - 1 or x < arr[mid + 1]) and arr[mid] == x) {\n\t\t\tidx2 = mid;\n\t\t\tbreak;\n\t\t}\n\n\t\t// If x < arr[mid], then x may only occur in [lo, mid-1] range of index.\n\t\telse if (x < arr[mid]) {\n\t\t\thi = mid - 1;\n\t\t}\n\n\t\t// Else x may only occur in [mid+1, hi] range of index.\n\t\telse {\n\t\t\tlo = mid + 1;\n\t\t}\n\n\t}\n\n\tvector<int> sol;\n\tsol.push_back(idx1);\n\tsol.push_back(idx2);\n\treturn sol;\n}\n\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n\t\tTime Completargetity: O(log N)\r\n\t\tSpace Completargetity: O(1)\r\n\r\n\t\twhere N is the size of the sorted array.\r\n*/\r\n\r\npublic class Solution {\r\n    public static int[] searchRange(int []arr, int x) {\r\n        int n = arr.length;\r\n        // Initialise both first and last occurences to -1, incase x is not found in array.\r\n        int idx1 = -1, idx2 = -1;\r\n        // Binary search to find the first position of occurence of x.\r\n        int lo = 0, hi = n - 1;\r\n        while (lo <= hi) {\r\n            int mid = (lo + hi) / 2;\r\n            // If arr[mid] == x and x > arr[mid-1], then mid is first occurrence of x, or arr[mid] == x and mid == 0, then mid is first occurrence of x.\r\n            if ((mid == 0 || x > arr[mid - 1]) && arr[mid] == x) {\r\n                idx1 = mid;\r\n                break;\r\n            }\r\n\r\n            // If x is greater than arr[mid] in sorted array, then x may only occur in [mid+1, hi] range of index.\r\n            else if (x > arr[mid]) {\r\n                lo = mid + 1;\r\n            }\r\n\r\n            // Else x may only occur in [lo, mid-1] range of index.\r\n            else {\r\n                hi = mid - 1;\r\n            }\r\n\r\n        }\r\n\r\n        // Binary search to find the last position of occurence of x.\r\n        lo = 0;\r\n        hi = n - 1;\r\n        while (lo <= hi) {\r\n            int mid = (lo + hi) / 2;\r\n            // If arr[mid] == x and mid == N-1 then, mid is last occurrence of x, or arr[mid+1] > x and arr[mid] == x, then mid is last occurence of x.\r\n            if ((mid == n - 1 || x < arr[mid + 1]) && arr[mid] == x) {\r\n                idx2 = mid;\r\n                break;\r\n            }\r\n\r\n            // If x < arr[mid], then x may only occur in [lo, mid-1] range of index.\r\n            else if (x < arr[mid]) {\r\n                hi = mid - 1;\r\n            }\r\n\r\n            // Else x may only occur in [mid+1, hi] range of index.\r\n            else {\r\n                lo = mid + 1;\r\n            }\r\n\r\n        }\r\n\r\n        int []sol = new int[2];\r\n        sol[0] = idx1;\r\n        sol[1] = idx2;\r\n        return sol;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\r\n\tTime Complexity: O(log(N))\r\n\tSpace Complexity: O(1)\r\n\r\n\tWhere N is the size of the sorted numsay.\r\n\"\"\"\r\n\r\n\r\ndef searchRange(arr: [int], x: int) -> [int]:\r\n    # Initialise both first and last occurrences to -1, in case x is not found in arr.\r\n    n = len(arr)\r\n    idx1, idx2 = -1, -1\r\n    lo, hi = 0, n - 1\r\n    # Binary search to find the first position of occurrence of x.\r\n    while lo <= hi:\r\n        mid = (lo + hi) // 2\r\n        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\r\n            idx1 = mid\r\n            break\r\n\r\n        elif x > arr[mid]:\r\n            lo = mid + 1\r\n\r\n        else:\r\n            hi = mid - 1\r\n\r\n    lo, hi = 0, n - 1\r\n    # Binary search to find the last position of occurrence of x.\r\n\r\n    while lo <= hi:\r\n        mid = (lo + hi) // 2\r\n        # If arr[mid] == x and mid == N-1 then, mid is last occurrence of x,\r\n        # or arr[mid+1] > x and arr[mid] == x, then mid is last occurrence of x.\r\n        if (mid == n - 1 or x < arr[mid + 1]) and arr[mid] == x:\r\n            idx2 = mid\r\n            break\r\n\r\n        elif x < arr[mid]:\r\n            hi = mid - 1\r\n\r\n        else:\r\n            lo = mid + 1\r\n    # Return a tuple of indices.\r\n    return (idx1, idx2)",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}