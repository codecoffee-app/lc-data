{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10083,
            "title": "First Bad Version",
            "titleSlug": "first-bad-version_1164173",
            "content": "<h4 id=\"you-are-a-product-manager-and-currently-leading-a-team-to-develop-a-new-version-of-a-product-unfortunately-the-latest-version-you-are-working-on-fails-the-quality-check-since-each-version-is-developed-based-on-the-previous-version-all-the-versions-after-a-bad-version-are-also-bad\">You are a product manager and currently leading a team to develop a new version of a product. Unfortunately, the latest version you are working on fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</h4>\n\n<h4 id=\"suppose-you-have-an-array-of-n-versions-1-2-n-and-you-want-to-find-out-the-first-bad-version-which-causes-all-the-succeeding-versions-to-be-bad\">Suppose you have an array of N versions [1, 2, ..., N] and you want to find out the first bad version, which causes all the succeeding versions to be bad.</h4>\n\n<h4 id=\"consider-we-have-a-function-isbadversion-version-this-will-return-whether-the-version-is-bad-or-not\">Consider we have a function isBadVersion(version), this will return whether the version is bad or not.</h4>\n\n<h4 id=\"for-an-example-suppose-n-5-and-version-4-is-the-first-bad-version-so-if-the-isbadversion-3-returns-false-isbadversion-5-returns-true-and-isbadversion-4-also-returns-true-then-the-first-bad-version-is-4\">For an example, suppose n = 5, and version = 4 is the first bad version. So if the isBadVersion(3) returns false, isBadVersion(5) returns true and isBadVersion(4) also returns true, then the first bad version is 4.</h4>\n\n<h4 id=\"you-should-minimize-the-number-of-calls-to-the-api\">You should minimize the number of calls to the API.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>bool isBadVersion(version) returns true for all versions \u2018V\u2019 such that V &gt; X, where X is the first bad version.\n</code></pre>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThen the T test cases follow.\n\nThe first and only input line will have two space-separated integers N(total number of versions) and V(the first bad version). \n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the first bad version.\n\nThe output of each test case will be printed in a separate line. \n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= V &lt;= N\n1 &lt;= N &lt;= 100000\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the total number of versions we have, and \u2018V\u2019 is the version.\n\nTime limit: 1 sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>1\n5 4\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>4\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h4>\n\n<pre><code>call isBadVersion(3) -&gt; false\ncall isBadVersion(5) -&gt; true\ncall isBadVersion(4) -&gt; true\nThen 4 is the first bad version.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>3\n1 1\n5 5\n3 1\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>1\n5\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are a product manager leading a team developing a new product version.  Unfortunately, the latest version failed the quality check. Since versions are built upon previous ones, all subsequent versions after a bad one are also bad. Given an array of N versions [1, 2, ..., N], find the first bad version that causes all following versions to be bad. You are provided with a function `isBadVersion(version)` that returns `true` if a version is bad and `false` otherwise. Minimize the number of calls to the `isBadVersion` API.",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= V <= N (V is the first bad version)",
                    "1 <= N <= 100000 (Total number of versions)",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "5 4",
                        "output": "4",
                        "explanation": "Given N=5 and the first bad version is V=4. Calling isBadVersion(3) returns false, isBadVersion(5) returns true, and isBadVersion(4) also returns true. Therefore, the first bad version is 4."
                    },
                    {
                        "input": "1 1",
                        "output": "1",
                        "explanation": null
                    },
                    {
                        "input": "5 5",
                        "output": "5",
                        "explanation": null
                    },
                    {
                        "input": "3 1",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of going through each element?</p>",
            "<p>Think about searching an element in an array of numbers in log(N) time.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}