{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8783,
            "title": "First Unique Character in a String",
            "titleSlug": "first-unique-character-in-a-string_893404",
            "content": "<h4 id=\"you-are-given-a-string-a-consisting-of-lower-case-english-letters-you-have-to-find-the-first-non-repeating-character-from-each-stream-of-characters\">You are given a string A consisting of lower case English letters. You have to find the first non-repeating character from each stream of characters.</h4>\n\n<h4 id=\"for-example-if-the-given-string-is-bbaca-then-the-operations-are-done-as\">For Example: If the given string is &#39;bbaca&#39;, then the operations are done as:</h4>\n\n<pre><code>The first stream is \u201cb\u201d and the first non-repeating character is \u2018b\u2019 itself, so print \u2018b\u2019. \nThe next stream is \u201cbb\u201d and there are no non-repeating characters, so print nothing.\nThe next stream is \u201cbba\u201d and the first non-repeating character is \u2018a\u2019, so print \u2018a\u2019. \nThe next stream is \u201cbbac\u201d and the first non-repeating character is \u2018a\u2019, so print \u2018a\u2019. \nThe next stream is \u201cbbaca\u201d and the first non-repeating character is \u2018c\u2019, so print \u2018c\u2019. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases. Then the test cases follow.\n\nThe only line of each test case contains a single string A consisting of only lowercase English letters.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single character representing the first non-repeating character for each stream of characters.\n\nThe output for each test case is in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10000\n\nWhere \u2018T\u2019 is the number of test cases, and \u2018N\u2019 is the length of the string.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\nbbabcbcab\nbab\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>b a a a a a\nb b a \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, the first stream is \u201cb\u201d and the first non-repeating character is \u2018b\u2019 itself, so add \u2018b\u2019 in the arraylist. For the second stream of characters, i.e., after reading character \u2018b\u2019 from the stream, the string becomes \u201cbb\u201d, for which all the characters are repeating, so no need to add in the arraylist. For the third stream of characters, \u201cbba\u201d, the first non-repeating character is \u2018a\u2019, so add \u2018a\u2019 in the arraylist. In this way, the first non-repeating character is added to the arraylist for each stream of characters.\n\nFor the second test case, \u2018b\u2019 is the first non-repeating character for the first stream, \u201cb\u201d. For the stream \u201cba\u201d, the first non-repeating character so far \u2018b\u2019. For the stream \u201cbab\u201d, the first non-repeating character so far is \u2018a\u2019. So, the final arraylist will be [b, a, a].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\ncbbd\nbebeeed\nabcd\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>c c c c\nb b e d\na a a a\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 19,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'stream' consisting of lowercase English letters, find the first non-repeating character for each prefix of the string. For each prefix, if a non-repeating character exists, add it to the result. If no non-repeating character exists in a prefix, do not add anything to the result for that prefix. Return the array of characters representing the first non-repeating characters for each corresponding prefix of the input string.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 10000 (Length of the string)",
                    "The string A consists of only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "stream = \"bbabcbcab\"",
                        "output": "b a a a a a",
                        "explanation": "For the string \"bbabcbcab\", the first non-repeating character for each prefix is determined as follows:\n- \"b\": 'b'\n- \"bb\": None (no non-repeating character)\n- \"bba\": 'a'\n- \"bbab\": 'a'\n- \"bbabc\": 'a'\n- \"bbabcb\": 'a'\n- \"bbabcbc\": 'a'\n- \"bbabcbca\": 'a'\n- \"bbabcbcab\": 'a'"
                    },
                    {
                        "input": "stream = \"bab\"",
                        "output": "b b a",
                        "explanation": "For the string \"bab\", the first non-repeating character for each prefix is determined as follows:\n- \"b\": 'b'\n- \"ba\": 'b'\n- \"bab\": 'a'"
                    },
                    {
                        "input": "stream = \"cbbd\"",
                        "output": "c c c d",
                        "explanation": "For the string \"cbbd\", the first non-repeating character for each prefix is determined as follows:\n- \"c\": 'c'\n- \"cb\": 'c'\n- \"cbb\": 'c'\n- \"cbbd\": 'd'"
                    },
                    {
                        "input": "stream = \"bebeeed\"",
                        "output": "b b e d",
                        "explanation": "For the string \"bebeeed\", the first non-repeating character for each prefix is determined as follows:\n- \"b\": 'b'\n- \"be\": 'b'\n- \"beb\": 'e'\n- \"bebe\": None\n- \"bebee\": 'e'\n- \"bebeee\": None\n- \"bebeeed\": 'd'"
                    },
                    {
                        "input": "stream = \"abcd\"",
                        "output": "a a a a",
                        "explanation": "For the string \"abcd\", the first non-repeating character for each prefix is determined as follows:\n- \"a\": 'a'\n- \"ab\": 'a'\n- \"abc\": 'a'\n- \"abcd\": 'a'"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find the frequency of all characters in the string and check which character has a unit frequency.</p>",
            "<p>Store the indexes of the characters only if it appears only once in the string.</p>",
            "<p>Use DLL (Doubly Linked List) to store all non-repeating characters in order. Adding a new character and finding the first non-repeating character takes O(1) time.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}