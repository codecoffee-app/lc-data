{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9335,
            "title": "First unique character in a string",
            "titleSlug": "first-unique-character-in-a-string_982933",
            "content": "<h4 id=\"you-are-given-a-string-s-of-length-n-your-task-is-to-find-the-index-considering-1-based-indexing-of-the-first-unique-character-present-in-the-string-if-there-are-no-unique-characters-return-1\">You are given a string S of length N. Your task is to find the index(considering 1-based indexing) of the first unique character present in the string. If there are no unique characters return -1.</h4>\n\n<h4 id=\"note\">Note</h4>\n\n<pre><code>A unique character in a string is the character that appears only once in the string. For example, \u2018h\u2019, \u2018e\u2019, and \u2018o\u2019 are the unique characters in the string \u201chello\u201d.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains a single integer T, denoting the number of test cases.\n\nThe first line of each test case contains a positive integer N, which represents the length of the string.\n\nThe next line of each test case contains a string S.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the index of the first unique character, and if there is no unique character return \u201c-1\u201d.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^4\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n16\ncodingninjascode\n24\npracticepracticepractice\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>6\n-1\n</code></pre>\n\n<h5 id=\"explanation-for-input-1\">Explanation for Input 1:</h5>\n\n<pre><code>For the first subtask the explanation is given in the problem statement. \n\nFor the second subtask there are no unique characters so ans is -1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3\n19\npalindromemordnilap\n9\nnotunique\n7\ncaaabbc\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>10\n2\n-1\n</code></pre>\n\n<h5 id=\"explanation-for-input-2\">Explanation for Input 2:</h5>\n\n<pre><code>For the first subtask, every character except \u2018e\u2019 occurs 2 times so we print the index of e that is 10. \n\nFor the second subtask, the characters \u2018o\u2019 , \u2018t\u2019 , \u2018e\u2019 , \u2018i\u2019 and \u2018q\u2019 are unique but \u2018o\u2019 occurs before all the other unique characters .\n\nFor the third subtask, all the characters are not unique so we return -1.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` of length `n`, find the 1-based index of the first unique character present in the string. A unique character is one that appears only once in the string. If no unique characters exist, return -1.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^4",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 16, s = \"codingninjascode\"",
                        "output": "6",
                        "explanation": "The first unique character is 'n' at index 6."
                    },
                    {
                        "input": "n = 24, s = \"practicepracticepractice\"",
                        "output": "-1",
                        "explanation": "There are no unique characters in the string."
                    },
                    {
                        "input": "n = 19, s = \"palindromemordnilap\"",
                        "output": "10",
                        "explanation": "The first unique character is 'e' at index 10."
                    },
                    {
                        "input": "n = 9, s = \"notunique\"",
                        "output": "2",
                        "explanation": "The first unique character is 'o' at index 2."
                    },
                    {
                        "input": "n = 7, s = \"caaabbc\"",
                        "output": "-1",
                        "explanation": "There are no unique characters in the string."
                    },
                    {
                        "input": "n = 5, s = \"abcde\"",
                        "output": "1",
                        "explanation": "The first unique character is 'a' at index 1."
                    },
                    {
                        "input": "n = 5, s = \"aabbc\"",
                        "output": "5",
                        "explanation": "The first unique character is 'c' at index 5."
                    },
                    {
                        "input": "n = 1, s = \"a\"",
                        "output": "1",
                        "explanation": "The first unique character is 'a' at index 1."
                    },
                    {
                        "input": "n = 10, s = \"aabbccddeff\"",
                        "output": "-1",
                        "explanation": "No unique characters exist."
                    },
                    {
                        "input": "n = 7, s = \"abbaccd\"",
                        "output": "-1",
                        "explanation": "No unique characters exist."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of brute force.</p><p>Think whether the character at each index is unique or not.</p>",
            "<p>Try to use a hashmap or frequency array.</p><p>Try to use only one string traversal.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}