{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9765,
            "title": "Fish Eater",
            "titleSlug": "fish-eater_1089581",
            "content": "<h4 id=\"there-is-a-river-which-flows-in-one-direction-one-day-the-river-has-n-number-of-fishes-you-are-given-an-array-fishes-of-integers-representing-the-size-of-n-fishes-the-fishes-are-present-in-the-river-from-left-to-right-0th-index-represents-the-size-of-the-leftmost-fish-as-the-river-flows-from-left-to-right-so-the-fishes-also-swim-from-left-to-right-the-fishes-are-of-different-sizes-and-have-different-speeds-the-larger-fishes-are-faster-than-the-smaller-fishes-also-larger-fishes-can-eat-smaller-fishes-but-can-t-eat-fishes-of-the-same-size\">There is a river which flows in one direction. One day, the river has &#39;N&#39; number of fishes. You are given an array &#39;FISHES&#39; of integers representing the size of &#39;N&#39; fishes. The fishes are present in the river from left to right(0th index represents the size of the leftmost fish). As the river flows from left to right so the fishes also swim from left to right. The fishes are of different sizes and have different speeds. The larger fishes are faster than the smaller fishes. Also, larger fishes can eat smaller fishes but can\u2019t eat fishes of the same size.</h4>\n\n<h4 id=\"can-you-find-the-number-of-fishes-that-survive-at-the-end-of-the-day\">Can you find the number of fishes that survive at the end of the day?</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Let the size of fishes present in the river from left to right be{ 4, 2, 3, 1, 5 }.\n\n1. As fish 4 is faster and bigger than fish 2, so fish 4 will eat fish 2.\n    Remaining fishes: { 4, 3, 1, 5 }\n\n2. As fish 3 is faster and bigger than fish 1, so fish 3 will eat fish 1.\n    Remaining fishes: { 4, 3, 5 }\n\n3. As fish 4 is faster and bigger than fish 3, so fish 4 will eat fish 3.\n    Remaining fishes: { 4, 5 }\n\nNow fish 5 cannot eat fish 4, as fish 5 is faster than fish 4 and they swim from left to right. Thus, fish 4 will never reach fish 5.\n\nFinally, we are left with only 2 fishes.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the number of fishes.\n\nThe second line of each test case contains &#39;N&#39; single space-separated integers representing the size of the fishes.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return the number of fishes that survives till last.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^4\n1 &lt;= FISHES[i] &lt;= 10^9\n\nWhere &#39;FISHS[i]&#39; denotes the size of the ith fish in the river.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\n4 2 3 1 5\n3\n8 1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h5>\n\n<pre><code>In test case 1, Refer to the example in problem description.\n\nIn test case 2,\n\nFishes: { 8, 1, 3 }\n\nAs fish 8 is faster and bigger than fish 1, so fish 8 will eat fish 1.\n        Remaining fishes: { 8, 3 }\n\nAs fish 8 is faster and bigger than fish 3, so fish 8 will eat fish 3.\n        Remaining fishes: { 8 }\n\nHere, only 1 fish is left at last.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4\n1 2 3 4\n4\n4 4 2 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2:</h5>\n\n<pre><code>In test case 1, As eachfish on the left side is smaller than fish on its right side and thus no fish can eat any other fish and the number of surviving fishes will be 4.\n\nIn test case 2,\n\nFishes: { 4, 4, 2, 4}\n\nAs fish with equal size cannot eat each other as having the same speed, All the Fishes with size 4 will survive.\n\nFish 2 with size 4 will eat the fish 3 with size 2.\n        Remaining fishes: { 4, 4, 4 }\n\nHere, 3 fishes is left at last.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 97,
            "dislikes": "NA",
            "rephrased": {
                "body": "A river flows in one direction with N fishes. You are given an array FISHES representing the sizes of the fishes from left to right. Larger fishes are faster and can eat smaller fishes (but not those of the same size).  Determine the number of fishes that survive at the end of the day.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^4",
                    "1 <= FISHES[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "5\n4 2 3 1 5",
                        "output": "2",
                        "explanation": "Initially: {4, 2, 3, 1, 5}\n1. 4 eats 2: {4, 3, 1, 5}\n2. 3 eats 1: {4, 3, 5}\n3. 4 eats 3: {4, 5}\nFinally, 2 fishes (4 and 5) survive."
                    },
                    {
                        "input": "3\n8 1 3",
                        "output": "1",
                        "explanation": "Initially: {8, 1, 3}\n1. 8 eats 1: {8, 3}\n2. 8 eats 3: {8}\nFinally, only 1 fish (8) survives."
                    },
                    {
                        "input": "4\n1 2 3 4",
                        "output": "4",
                        "explanation": "Since each fish is larger than all those to its left, no fish eats another, so all 4 survive."
                    },
                    {
                        "input": "4\n4 4 2 4",
                        "output": "3",
                        "explanation": "Initially: {4, 4, 2, 4}\nThe first two 4s don't eat each other because they are the same size.\nThe third 4 eats the 2: {4, 4, 4}\nFinally, 3 fishes (all 4s) survive."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you find if a fish will be eaten by other fish or not?</p>",
            "<p>Can you check if a fish will be eaten or not in constant time?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1)\r\n\r\n    Where 'N' is the number of fishes.\r\n*/\r\n\r\nint fishEater(vector<int> &fishes) {\r\n    // Variable to store the total number of surviving fishes.\r\n    int ans = 0;\r\n\r\n    // Variable to store the largest fish till the current fish.\r\n    int maxSize = 0;\r\n\r\n    // Iterating each fish.\r\n    for(int fish: fishes) {\r\n        // If the current fish is greater than or equal to largest, then it will survive.\r\n        if(fish >= maxSize) {\r\n            ans++;\r\n            maxSize = fish;\r\n        }\r\n    }\r\n    // Return the total number of surviving fishes.\r\n    return ans;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    Where 'N' is the number of fishes.\n\"\"\"\n\ndef fishEater(fishes):\n    # Variable to store the total number of surviving fishes.\n    ans = 0\n\n    # Variable to store the largest fish till the current fish.\n    maxSize = 0\n\n    # Iterating each fish.\n    for fish in fishes:\n        # If the current fish is greater than or equal to largest, then it will survive.\n        if (fish >= maxSize):\n            ans += 1\n            maxSize = fish\n\n    # Return the total number of surviving fishes.\n    return ans\n\n# Main.\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    fishes = list(map(int,input().split()))\n    print(fishEater(fishes))",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    Where 'N' is the number of fishes.\n*/\n\npublic class Solution {\n    public static int fishEater(int[] fishes) {\n        // Variable to store the total number of surviving fishes.\n        int ans = 0;\n\n        // Variable to store the largest fish till the current fish.\n        int maxSize = 0;\n\n        // Iterating each fish.\n        for(int fish: fishes) {\n            // If the current fish is greater than or equal to largest, then it will survive.\n            if(fish >= maxSize) {\n                ans++;\n                maxSize = fish;\n            }\n        }\n        // Return the total number of surviving fishes.\n        return ans;\n    }\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}