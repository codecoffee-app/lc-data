{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9146,
            "title": "Fishmonger",
            "titleSlug": "fishmonger_975501",
            "content": "<h4 id=\"a-fishmonger-wants-to-bring-his-goods-from-port-to-the-market-on-his-route-he-has-to-traverse-an-area-with-many-states-he-has-to-pay-a-toll-at-each-border\">A fishmonger wants to bring his goods from port to the market. On his route, he has to traverse an area with many states. He has to pay a toll at each border.</h4>\n\n<h4 id=\"he-is-a-good-businessman-he-wants-to-choose-the-route-in-such-a-way-that-he-has-to-pay-as-little-money-for-tolls-as-possible-on-the-other-hand-he-has-to-be-at-the-market-within-a-particular-time-otherwise-his-fish-will-start-to-smell\">He is a good businessman. He wants to choose the route in such a way that he has to pay as little money for tolls as possible. On the other hand, he has to be at the market within a particular time. Otherwise, his fish will start to smell.</h4>\n\n<h4 id=\"you-are-given-n-number-of-states-and-the-time-m-in-which-he-has-to-reach-the-market-you-need-to-return-the-minimum-toll-amount-that-he-has-to-pay-to-reach-the-market-in-the-given-time-the-0-th-index-is-the-port-and-the-n-1-index-is-the-market\">You are given \u2018N\u2019 number of states and the time \u2018M\u2019 in which he has to reach the market. You need to return the minimum toll amount that he has to pay to reach the market in the given time. The 0\u2019th index is the port, and the &#39;N&#39;-1 index is the market.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Consider If N = 2 , M = 4, Time = [[0,  2], [3,  0]] and Toll = [[0, 10], [ 5,  0]]]\nThe optimal path to reach node 1 from node 0 is 0 -&gt; 1. The time required in the path is 2, and the minimum toll needed within the given time constraints is 10. Hence the answer is 10.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019 and \u2018M\u2019, denoting the number of states and given time limit.\n\nThe next \u2018N\u2019 line contains \u2018N\u2019 space-separated integers denoting the elements of the array \u2018Time\u2019 where \u2018Time[i][j]\u2019 represents the time needed to traverse from state \u2018i\u2019 to state \u2018j\u2019.\n\nThe next \u2018N\u2019 line contains \u2018N\u2019 space-separated integers denoting the elements of the array \u2018Toll\u2019 where \u2018Toll[i][j]\u2019 represents the toll needed to traverse from state \u2018i\u2019 to state \u2018j\u2019.  \n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, print the minimum toll needed to reach the market from the port. If we cannot reach the market within the given time limit, then print -1. \n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 50\n1 &lt;= M &lt;= 1000\n0 &lt;= Toll[i] &lt;= 10^8\n0 &lt;= Time[i] &lt;= 1000\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2 6\n0 2\n3 0\n0 5\n1 0\n4 7\n0 5 2 3\n5 0 2 3\n3 1 0 2\n3 3 2 0\n0 2 2 7\n2 0 1 2\n2 2 0 5\n7 2 5 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>5\n6\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>In test case 1: \nThe optimal path to reach node 1 from node 0 is 0 -&gt; 1. The time required in the path is 2, and the minimum toll needed within the given time constraints is 5. Hence the answer is 5.\n\nIn test case 2:\nThe optimal path to reach node 3 from node 0 is 0 -&gt; 2 -&gt; 1 -&gt; 3. The time required in the path is 6, and the minimum toll needed within the given time constraints is 6. Hence the answer is 6.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2 6\n0 4\n5 0\n0 10\n8 0\n2 10\n0 4\n5 0\n0 7\n9 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>10    \n7\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "A fishmonger needs to transport fish from the port (state 0) to the market (state N-1) through N states. Traveling between states incurs both a time cost and a toll. Given the time limit M, determine the minimum total toll the fishmonger must pay to reach the market within the allowed time. If it's impossible to reach the market within the time limit, return -1.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 50",
                    "1 <= M <= 1000",
                    "0 <= Toll[i][j] <= 10^8",
                    "0 <= Time[i][j] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "n = 2, m = 6, time = [[0, 2], [3, 0]], toll = [[0, 5], [1, 0]]",
                        "output": "5",
                        "explanation": "The optimal path to reach node 1 from node 0 is 0 -> 1. The time required in the path is 2, which is within the limit of 6, and the minimum toll needed is 5. Hence the answer is 5."
                    },
                    {
                        "input": "n = 4, m = 7, time = [[0, 5, 2, 3], [5, 0, 2, 3], [3, 1, 0, 2], [3, 3, 2, 0]], toll = [[0, 2, 2, 7], [2, 0, 1, 2], [2, 2, 0, 5], [7, 2, 5, 0]]",
                        "output": "6",
                        "explanation": "The optimal path to reach node 3 from node 0 is 0 -> 2 -> 1 -> 3. The time required in the path is 2+1+3 = 6, which is within the limit of 7, and the minimum toll needed is 2 + 1 + 3 = 6. Hence the answer is 6."
                    },
                    {
                        "input": "n = 2, m = 6, time = [[0, 4], [5, 0]], toll = [[0, 10], [8, 0]]",
                        "output": "10",
                        "explanation": "The optimal path to reach node 1 from node 0 is 0 -> 1. The time required in the path is 4, which is within the limit of 6, and the minimum toll needed is 10. Hence the answer is 10."
                    },
                    {
                        "input": "n = 2, m = 10, time = [[0, 4], [5, 0]], toll = [[0, 7], [9, 0]]",
                        "output": "7",
                        "explanation": "The optimal path to reach node 1 from node 0 is 0 -> 1. The time required in the path is 4, which is within the limit of 10, and the minimum toll needed is 7. Hence the answer is 7."
                    },
                    {
                        "input": "n = 3, m = 5, time = [[0,1,2],[1,0,1],[2,1,0]], toll = [[0,1,2],[1,0,1],[2,1,0]]",
                        "output": "2",
                        "explanation": "Possible paths are 0->2 (cost 2, time 2) or 0->1->2 (cost 1+1=2, time 1+1=2). Both work and give a cost of 2."
                    },
                    {
                        "input": "n = 2, m = 1, time = [[0, 2], [3, 0]], toll = [[0, 10], [5, 0]]",
                        "output": "-1",
                        "explanation": "It is impossible to go from state 0 to 1 within time 1 since the direct path requires time 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of a recursive approach.</p>",
            "<p>Try to use the Breadth-First Search approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}