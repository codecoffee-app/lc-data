{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8330,
            "title": "Fix BST",
            "titleSlug": "fix-bst_873137",
            "content": "<h4 id=\"you-have-been-given-a-binary-search-tree-of-n-nodes-where-exactly-two-nodes-of-the-same-tree-were-swapped-by-mistake\">You have been given a Binary Search Tree of <em><strong>&#39;N&#39;</strong></em> nodes,  where exactly two nodes of the same tree were swapped by mistake.</h4>\n\n<p><br></p>\n\n<h4 id=\"your-task-is-to-restore-or-fix-the-bst-without-changing-its-structure-and-return-the-root-of-the-corrected-bst\">Your task is to restore or fix the BST, without changing its structure and return the root of the corrected BST.</h4>\n\n<p><br></p>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Given BST will not contain duplicates.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"example\">Example</h5>\n\n<pre><code>A Binary Search Tree (BST) whose 2 nodes have been swapped is shown below.  \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/first-5644.png\" alt=\"example\"></p>\n\n<pre><code>After swapping the incorrect nodes: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst-5651.png\" alt=\"example\"></p>\n\n<h5 id=\"follow-up\">Follow Up</h5>\n\n<pre><code>Can you do this without using any extra space? \n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line contains elements in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 on its place.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>The input for the tree is depicted in the below image: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tt2-6640.jpg\" alt=\"BT - 2\"></p>\n\n<pre><code>1 3 8 5 2 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 3\nRight child of 1 = 8\n\nLevel 3 :\nLeft child of 3 = 5\nRight child of 3 = 2\nLeft child of 8 =7\nRight child of 8 =  null (-1)\n\n\nLevel 4 :\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 2 = null (-1)\nRight child of 2 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\n1\n3 8\n5 2 7 -1\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. The first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\n2. The input ends when all nodes at the last level are null(-1).\n\n3. The above format was just to provide clarity on how the input is formed for a given tree. The sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 3 8 5 2 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The output contains the &#39;N&#39; single space-separated level order traversal of the restored tree.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the function. \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1 5 -1 -1 3 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>5 1 3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>5 cannot be the left child of 1 as 5 &gt; 1. Swapping 5 and 1 will result in a valid BST. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3 1 4 -1 -1 2 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2 1 4 3 \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;N&#39; &lt;= 10^3\n0 &lt;= &#39;data&#39; &lt;= 10^5     \n\nwhere &#39;N&#39; is the number of nodes and &#39;data&#39; denotes the node value of the binary tree nodes.\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 20,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) with 'N' nodes, two nodes have been accidentally swapped. Your task is to restore the BST to its correct order by swapping the two misplaced nodes back, without altering the tree's structure. Return the root of the corrected BST.",
                "constraints": [
                    "1 <= 'N' <= 10^3",
                    "0 <= 'data' <= 10^5",
                    "Given BST will not contain duplicates."
                ],
                "testcases": [
                    {
                        "input": "root=TreeNode(1,TreeNode(5),nullptr)",
                        "output": "5 1 -1 3 -1 -1",
                        "explanation": "The initial BST has 1 as the root and 5 as its right child, which violates the BST property.  Swapping 1 and 5 corrects the BST, resulting in 5 as the root and 1 as left child and 3 as right child."
                    },
                    {
                        "input": "root=TreeNode(3,TreeNode(1),TreeNode(4,TreeNode(-1),TreeNode(2))),",
                        "output": "2 1 4 3 -1 -1 -1",
                        "explanation": "The initial BST has 3 as root, 1 as left child and 4 as right child and 2 as the right child of 4 which is greater than root. so 2 and 3 gets swapped to fix it."
                    },
                    {
                        "input": "root=TreeNode(10,TreeNode(5,TreeNode(2),TreeNode(20)),TreeNode(8))",
                        "output": "8 5 10 2 20 -1 -1 -1 -1 -1",
                        "explanation": "Initially, the BST is 10-> 5->2,20 8. Here nodes 10 and 8 are swapped. So, after swapping the tree will be 8-> 5->2,20 10 which is a correct BST"
                    },
                    {
                        "input": "root=TreeNode(3,TreeNode(2,TreeNode(1),None),TreeNode(5,TreeNode(4),TreeNode(6)))",
                        "output": "3 2 5 1 4 6 -1 -1 -1 -1 -1 -1 -1",
                        "explanation": "No swapping is required. The BST is already valid."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you do this by storing the inorder traversal of the tree?</p>",
            "<p>Do we really need to sort the entire array?&nbsp;</p>",
            "<p>How can we keep track of the swapped nodes without storing the complete tree traversal?&nbsp;</p>",
            "<p>Try to optimize the space complexity of the previous algorithm.&nbsp;&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}