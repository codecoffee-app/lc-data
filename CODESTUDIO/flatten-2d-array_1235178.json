{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10582,
            "title": "Flatten 2D array",
            "titleSlug": "flatten-2d-array_1235178",
            "content": "<h4 id=\"you-have-to-implement-an-iterator-for-flatten_2d-to-flatten-a-two-dimensional-array-arr_2d-into-a-one-dimensional-array-arr_1d-the-iterator-should-support-the-following-two-operations-next-the-first-call-to-next-should-return-the-first-element-of-arr_2d-each-subsequent-call-should-return-the-next-element-in-the-row-wise-traversal-of-arr_2d-has_next-it-should-return-true-if-the-iteration-has-more-elements-to-traverse-otherwise-if-next-has-traversed-the-entire-arr_2d-return-false\">You have to implement an iterator for \u2018FLATTEN_2D\u2019 to flatten a two-dimensional array \u2018ARR_2D\u2019 into a one-dimensional array \u2018ARR_1D\u2019. The iterator should support the following two operations: </ol><li> \u2018NEXT\u2019: The first call to \u2018NEXT\u2019 should return the first element of \u2018ARR_2D\u2019. Each subsequent call should return the next element in the row-wise traversal of \u2018ARR_2D\u2019. </li><li> \u2018HAS_NEXT\u2019: It should return \u2018true\u2019 if the iteration has more elements to traverse; otherwise, if \u2018NEXT\u2019 has traversed the entire \u2018ARR_2D\u2019, return \u2018false\u2019. </li></ol></h4>\n\n<h4 id=\"try-to-code-this-using-only-iterators-in-c-or-iterators-in-java\">Try to code this using only <a href=\"https://www.cplusplus.com/reference/iterator/\">iterators in C++</a> or <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html\">iterators in Java</a>.</h4>\n\n<h4 id=\"the-flatten_2d-object-will-be-instantiated-and-called-as-follow-flatten_2d-it-new-flatten_2d-arr_2d-while-it-hasnext-arr1d-append-it-next\">The \u2018FLATTEN_2D\u2019 object will be instantiated and called as follow:<br>&emsp; FLATTEN_2D it = new FLATTEN_2D(ARR_2d);<br>&emsp; while (it.hasNext()) { <br>&emsp; &emsp; &emsp; arr1d.append(it.next()); <br>&emsp; }</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>ARR_2D = [ \n          [0, 1],\n          [2, 3, 4],\n          [],\n          [5] \n        ]\nThe computed \u2018ARR_1D\u2019 should be as follows:\nARR_1D = [0, 1, 2, 3, 4, 5]\nSo, the printed output will be: 0 1 2 3 4 5\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases. Then, the \u2018T\u2019 test cases follow.\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the number of rows in \u2018ARR_2D\u2019. Then, \u2018N\u2019 lines follow.\n\nEach line contains an integer \u2018M\u2019 denoting the number of columns in that row and \u2018M\u2019 space-separated integers denoting the row values.\n\nFor more clarity, please refer to the sample inputs. \n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For every test case, the values in \u2018ARR_1D\u2019 will be printed in a separate line. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. You do not need to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 100\n0 &lt;= M &lt;= 100\n-10^6 &lt;= Value in each element of \u2018ARR_2D\u2019 &lt;= 10^6\n\nTime limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample input 1:</h4>\n\n<pre><code>2\n3\n3 1 2 3\n1 -5\n0\n2\n2 5 6\n3 1 3 2\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample output 1:</h4>\n\n<pre><code>1 2 3 -5\n5 6 1 3 2\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h4>\n\n<pre><code>Test Case 1:\nInput: arr2d = [ \n                  [1, 2, 3],\n                  [-5],\n                  [] \n                ]\nThe computed \u2018arr1d\u2019 should be as follows:\narr1d = [1, 2, 3, -5]\nSo, the printed output will be: 1 2 3 -5 \n\nTest Case 2:\nInput: arr2d = [ \n                  [5, 6],\n                  [1, 3, 2]\n                ]\nThe computed \u2018arr1d\u2019 should be as follows:\narr1d = [5, 6, 1, 3, 2]\nSo, the printed output will be: 5 6 1 3 2\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample input 2:</h4>\n\n<pre><code>2\n4\n0\n3 1 2 2\n1 5\n2 6 7\n2\n3 1 2 3\n3 3 2 1\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample output 2:</h4>\n\n<pre><code>1 2 2 5 6 7\n1 2 3 3 2 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement an iterator class `FLATTEN_2D` to flatten a two-dimensional array `ARR_2D` into a one-dimensional array `ARR_1D`. The iterator must implement the `next()` and `hasNext()` methods.\n\n`next()`: Returns the next element of `ARR_2D` in row-wise traversal. The first call returns the first element. \n`hasNext()`: Returns `true` if there are more elements to traverse, and `false` otherwise.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 100",
                    "0 <= M <= 100",
                    "-10^6 <= Value in each element of \u2018ARR_2D\u2019 <= 10^6",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\n3\n3 1 2 3\n1 -5\n0\n2\n2 5 6\n3 1 3 2",
                        "output": "1 2 3 -5\n5 6 1 3 2",
                        "explanation": "Test Case 1:\narr2d = [[1, 2, 3], [-5], []]. Flattened array arr1d = [1, 2, 3, -5].\nTest Case 2:\narr2d = [[5, 6], [1, 3, 2]]. Flattened array arr1d = [5, 6, 1, 3, 2]."
                    },
                    {
                        "input": "2\n4\n0\n3 1 2 2\n1 5\n2 6 7\n2\n3 1 2 3\n3 3 2 1",
                        "output": "1 2 2 5 6 7\n1 2 3 3 2 1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Convert \u2018arr2d\u2019 into a 1-D array beforehand.</p>",
            "<p>Use two variables to keep track of the current position in \u2018arr2d\u2019.</p>",
            "<p>Use an inbuilt iterator of type 1-D array to traverse a row of \u2018arr2d\u2019.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}