{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9974,
            "title": "Flatten a linked List",
            "titleSlug": "flatten-a-linked-list_1112655",
            "content": "<h4 id=\"you-are-given-a-linked-list-containing-n-head-nodes-where-every-node-in-the-linked-list-contains-two-pointers\">You are given a linked list containing <strong><em>&#39;n&#39;</em></strong> <strong><em>&#39;head&#39;</em></strong> nodes, where every node in the linked list contains two pointers:</h4>\n\n<p><br/></p>\n\n<h4 id=\"1-next-which-points-to-the-next-node-in-the-list\">(1) <strong><em>\u2018next\u2019</em></strong> which points to the next node in the list</h4>\n\n<h4 id=\"2-child-pointer-to-a-linked-list-where-the-current-node-is-the-head\">(2) <strong><em>\u2018child\u2019</em></strong> pointer to a linked list where the current node is the head.</h4>\n\n<p><br/></p>\n\n<h4 id=\"each-of-these-child-linked-lists-is-in-sorted-order-and-connected-by-child-pointer\">Each of these child linked lists is in sorted order and connected by &#39;child&#39; pointer.</h4>\n\n<p><br/></p>\n\n<h4 id=\"your-task-is-to-flatten-this-linked-such-that-all-nodes-appear-in-a-single-layer-or-level-in-a-sorted-order\">Your task is to flatten this linked such that all nodes appear in a single layer or level in a  <strong><em>&#39;sorted order&#39;<em></strong>.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: Given linked list is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image1-7731.png\" alt=\"\"></p>\n\n<pre><code>Output:\n1 \u2192 2 \u2192 3 \u2192 4 \u2192 5 \u2192 6 \u2192 7 \u2192 8 \u2192 9 \u2192 12 \u2192 20 \u2192 null.\n\n\nExplanation:\nThe returned linked list should be in a sorted order. All the elements in this returned linked list are connected by &#39;child&#39; pointers and &#39;next&#39; pointers point to null.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of the input contains a single integer \u2018n\u2019 which represents the number of head nodes in the linked list.\n\nThe next &#39;2n&#39; lines represent &#39;n&#39; linked lists connected by next pointer at the head. Description of each of these linked lists is as follows:\n\nThe first line contains a single integer &#39;k&#39;, number of nodes in the current linked list.\n\nThe next line contains &#39;k&#39; spaced integers, representing elements of the linked list.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Return the head node of the final linked list.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the given function. The flattened list will be printed using the child pointer.\n</code></pre>\n\n<p><br/></p>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>4\n3\n1 2 3\n3\n8 10 15\n2\n18 22\n1\n29\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 2 3 8 10 15 18 22 29\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>The given linked list is \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image2-7732.png\" alt=\"\">    </p>\n\n<pre><code>Therefore after flattening the list will become-\n1 -&gt; 2 -&gt; 3 -&gt; 8 -&gt; 10 -&gt; 15 -&gt; 18 -&gt; 22 -&gt; 29 -&gt;null\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>5\n2\n4 6\n2\n5 71\n3\n7 8 9\n3 \n11 12 19\n3\n14 15 17\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4 5 6 7 8 9 11 12 14 15 17 19 71\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try solving this in O(n*n*k), where \u2018n\u2019 denotes the number of head nodes and \u2018k\u2019 is the average number of child nodes in all &#39;n&#39; sub-lists.     \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-space-complexity\">Expected Space Complexity:</h5>\n\n<pre><code>Try solving this without using any extra space.   \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= n &lt;= 100\n1 &lt;= k &lt;= 20\n1 &lt;= Node.data &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n\n<p><br/></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 294,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a multi-level linked list where each node has a 'next' pointer pointing to the next node at the same level and a 'child' pointer pointing to a sorted sub-linked list, flatten the linked list into a single-level sorted linked list. The resulting linked list should be sorted, and all nodes should be connected using the 'child' pointer, with 'next' pointers set to null.",
                "constraints": [
                    "1 <= n <= 100 (n is the number of head nodes)",
                    "1 <= k <= 20 (k is the average number of child nodes in all 'n' sub-lists)",
                    "1 <= Node.data <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 4, lists = [[1, 2, 3], [8, 10, 15], [18, 22], [29]]",
                        "output": "1 2 3 8 10 15 18 22 29",
                        "explanation": "The given multi-level linked list has head nodes with child lists [1, 2, 3], [8, 10, 15], [18, 22], and [29]. Flattening and sorting results in the linked list: 1 -> 2 -> 3 -> 8 -> 10 -> 15 -> 18 -> 22 -> 29 -> null."
                    },
                    {
                        "input": "n = 5, lists = [[4, 6], [5, 71], [7, 8, 9], [11, 12, 19], [14, 15, 17]]",
                        "output": "4 5 6 7 8 9 11 12 14 15 17 19 71",
                        "explanation": "The given multi-level linked list has head nodes with child lists [4, 6], [5, 71], [7, 8, 9], [11, 12, 19], and [14, 15, 17]. Flattening and sorting results in the linked list: 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> 11 -> 12 -> 14 -> 15 -> 17 -> 19 -> 71 -> null."
                    },
                    {
                        "input": "n = 1, lists = [[5]]",
                        "output": "5",
                        "explanation": "A single linked list with one node containing the value 5, the flattened list contains 5."
                    },
                    {
                        "input": "n = 2, lists = [[1], [2]]",
                        "output": "1 2",
                        "explanation": "Two single node linked lists with values 1 and 2, when flattened and sorted results in 1 -> 2 -> null."
                    },
                    {
                        "input": "n=3, lists=[[3,5,8],[2,6],[1,4,7]]",
                        "output": "1 2 3 4 5 6 7 8",
                        "explanation": "Three linked lists [3,5,8],[2,6],[1,4,7] flattened and sorted gives 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> null."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>How can you reprocess these nodes?</p>",
            "<p>Can you think of a way to store the elements in the priority queue and then extract.</p>",
            "<p>Can you solve it without using extra space? Use the fact that the child-lists are already sorted.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(n * n * k)\r\n    Space complexity: O(n * k)\r\n\r\n    Where 'n' denotes the size of the linked list and 'k' is the average number of child nodes for each of the n nodes.\r\n*/\r\n\r\n/*\r\n * Definition for linked list.\r\n * class Node {\r\n *  public:\r\n *\t\tint data;\r\n *\t\tNode *next;\r\n * \t\tNode *child;\r\n *\t\tNode() : data(0), next(nullptr), child(nullptr){};\r\n *\t\tNode(int x) : data(x), next(nullptr), child(nullptr) {}\r\n *\t\tNode(int x, Node *next, Node *child) : data(x), next(next), child(child) {}\r\n * };\r\n */\r\n\r\nNode *merge(Node *first, Node *second)\r\n{\r\n\r\n    // If the first is NULL return second\r\n    if (first == NULL)\r\n    {\r\n        second->next = nullptr;\r\n        return second;\r\n    }\r\n\r\n    // If the second is NULL return first\r\n    if (second == NULL)\r\n    {\r\n        first->next = nullptr;\r\n        return first;\r\n    }\r\n\r\n    Node *merged = NULL;\r\n\r\n    if (first->data < second->data)\r\n    {\r\n        merged = first;\r\n        merged->child = merge(first->child, second);\r\n    }\r\n    else\r\n    {\r\n        merged = second;\r\n        merged->child = merge(first, second->child);\r\n    }\r\n    merged->next = nullptr;\r\n    return merged;\r\n}\r\n\r\nNode *flattenLinkedList(Node *head)\r\n{\r\n    if (head == NULL || head->next == NULL)\r\n    {\r\n        return head;\r\n    }\r\n\r\n    // Recur on next node\r\n    head->next = flattenLinkedList(head->next);\r\n\r\n    // Merge with the current\r\n    head = merge(head, head->next);\r\n\r\n    return head;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N * K)\r\n    Space complexity: O(N)\r\n\r\n    Where 'N' denotes the size of the linked list and 'K' is the average number of child nodes for each of the N nodes. \r\n*/\r\npublic class Solution {\r\n\tpublic static Node merge(Node first, Node second) {\r\n\t\t// If the first is null return second\r\n\t\tif (first == null) {\r\n\t\t\treturn second;\r\n\t\t}\r\n\r\n\t\t// If the second is null return first\r\n\t\tif (second == null) {\r\n\t\t\treturn first;\r\n\t\t}\r\n\r\n\t\tNode merged;\r\n\r\n\t\tif (first.data < second.data) {\r\n\t\t\tmerged = first;\r\n\t\t\tmerged.child = merge(first.child, second);\r\n\t\t} else {\r\n\t\t\tmerged = second;\r\n\t\t\tmerged.child = merge(first, second.child);\r\n\t\t}\r\n\t\treturn merged;\r\n\t}\r\n\r\n\tpublic static Node flattenLinkedList(Node head) {\r\n\t\tif (head == null || head.next == null) {\r\n\t\t\treturn head;\r\n\t\t}\r\n\r\n\t\t// Recur on next node\r\n\t\thead.next = flattenLinkedList(head.next);\r\n\r\n\t\t// Merge with the current\r\n\t\thead = merge(head, head.next);\r\n\r\n\t\treturn head;\r\n\t}\r\n}\r\n\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time Complexity: O(n * n * k)\r\n    Space complexity: O(n * k)\r\n\r\n    Where 'n' denotes the size of the linked list and 'k' is the average number of child nodes for each of the n nodes.\r\n\"\"\"\r\n\r\n\r\nclass Node:\r\n    def __init__(self, val=0, next=None, child=None):\r\n        self.data = val\r\n        self.next = next\r\n        self.child = child\r\n\r\n\r\n# Do not change code above.\r\n\r\n\r\ndef merge(first: Node, second: Node) -> Node:\r\n\r\n    # If the first is None return second\r\n    if first == None:\r\n        second.next = None\r\n        return second\r\n\r\n    # If the second is None return first\r\n    if second == None:\r\n        first.next = None\r\n        return first\r\n\r\n    merged = None\r\n\r\n    if first.data < second.data:\r\n        merged = first\r\n        merged.child = merge(first.child, second)\r\n    else:\r\n        merged = second\r\n        merged.child = merge(first, second.child)\r\n    merged.next = None\r\n    return merged\r\n\r\n\r\ndef flattenLinkedList(head: Node) -> Node:\r\n    if head == None or head.next == None:\r\n        return head\r\n\r\n    # Recur on next node\r\n    head.next = flattenLinkedList(head.next)\r\n\r\n    # Merge with the current\r\n    head = merge(head, head.next)\r\n\r\n    return head\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}