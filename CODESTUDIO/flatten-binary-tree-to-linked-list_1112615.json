{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9954,
            "title": "Flatten Binary Tree to Linked List",
            "titleSlug": "flatten-binary-tree-to-linked-list_1112615",
            "content": "<h4 id=\"you-are-given-a-binary-tree-consisting-of-n-nodes\">You are given a binary tree consisting of <em><strong>&#39;n&#39;</strong></em> nodes.</h4>\n\n<p><br/></p>\n\n<h4 id=\"convert-the-given-binary-tree-into-a-linked-list-where-the-linked-list-nodes-follow-the-same-order-as-the-pre-order-traversal-of-the-given-binary-tree\">Convert the given binary tree into a linked list where the linked list nodes follow the same order as the pre-order traversal of the given binary tree.</h4>\n\n<p><br/></p>\n\n<h4 id=\"use-the-right-pointer-of-the-binary-tree-as-the-next-pointer-for-the-linked-list-and-set-the-left-pointer-to-null\">Use the right pointer of the binary tree as the \u201cnext\u201d pointer for the linked list and set the left pointer to NULL.</h4>\n\n<p><br/></p>\n\n<h4 id=\"use-these-nodes-only-do-not-create-extra-nodes\">Use these nodes only. Do not create extra nodes.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Input: Let the binary be as shown in the figure:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/9954-example-tree-7716.PNG\" alt=\"Example Tree\"></p>\n\n<pre><code>Output: Linked List: 15 -&gt; 40 -&gt; 62 -&gt; 10 -&gt; 20 -&gt; NULL\n\nExplanation: As shown in the figure, the right child of every node points to the next node, while the left node points to null.\n\nAlso, the nodes are in the same order as the pre-order traversal of the binary tree.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains elements in the level order form for the first binary tree. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format-explanation\">Input format explanation:</h5>\n\n<pre><code>The level order input for the tree depicted in the below image would be \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level, and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>The nodes of the linked list, each separated by a single space, are printed.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1:</h5>\n\n<pre><code>15 40 62 -1 -1 10 20 -1 -1 -1 -1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>15 40 62 10 20\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>The binary tree and the corresponding linked list are given in the following figure:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/9954-example-tree-7716.PNG\" alt=\"Example Tree\"></p>\n\n<pre><code>As shown in the figure, the right child of every node points to the next node, while the left node points to null.\nAlso, the nodes are in the same order as the pre-order traversal of the binary tree.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1 2 3 -1 -1 4 -1 5 -1 -1 -1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 2 3 4 5\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2 :</h5>\n\n<pre><code>The binary tree and the corresponding linked list are given in the following figure:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/9954-sample-1-testcase-2-7717.PNG\" alt=\"Testcase 2 Tree\"></p>\n\n<pre><code>As shown in the figure, the right child of every node points to the next node, while the left node points to null.\nAlso, the nodes are in the same order as the pre-order traversal of the binary tree, that is [1, 2, 3, 4, 5].\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity :</h5>\n\n<pre><code>The expected time complexity is O(n).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10 ^ 5\n1 &lt;= &#39;data&#39; in any node &lt;= 10^5\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 50,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of 'n' nodes, convert it into a linked list using the existing tree nodes. The linked list should follow the pre-order traversal of the tree. The right pointer of each node in the tree should act as the 'next' pointer in the linked list, and the left pointer should be set to NULL. Do not create any new nodes.",
                "constraints": [
                    "1 <= 'n' <= 10 ^ 5",
                    "1 <= 'data' in any node <= 10^5",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "15 40 62 -1 -1 10 20 -1 -1 -1 -1",
                        "output": "15 40 62 10 20",
                        "explanation": "The tree is transformed into a linked list where the right child becomes the next node and left child is NULL. The order follows pre-order traversal."
                    },
                    {
                        "input": "1 2 3 -1 -1 4 -1 5 -1 -1 -1",
                        "output": "1 2 3 4 5",
                        "explanation": "The tree is transformed into a linked list using pre-order traversal, with right child as the next node and left child set to NULL."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you solve this problem using stack?</p>",
            "<p>Can you solve this problem using recursion?</p>",
            "<p>Can you solve this problem using constant extra space i.e. O(1) space complexity?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}