{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10115,
            "title": "Flatten BST To A Sorted List",
            "titleSlug": "flatten-bst-to-a-sorted-list_1169459",
            "content": "<h4 id=\"you-have-been-given-a-binary-search-tree-bst-your-task-is-to-flatten-the-given-bst-to-a-sorted-list-more-formally-you-have-to-make-a-right-skewed-bst-from-the-given-bst-i-e-the-left-child-of-all-the-nodes-must-be-null-and-the-value-at-the-right-child-must-be-greater-than-the-current-node\">You have been given a Binary Search Tree (BST). Your task is to flatten the given BST to a sorted list. More formally, you have to make a right-skewed BST from the given BST, i.e., the left child of all the nodes must be NULL, and the value at the right child must be greater than the current node.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-also-called-an-ordered-or-sorted-binary-tree-is-a-rooted-binary-tree-whose-internal-nodes-each-store-a-value-greater-than-all-the-values-in-the-nodes-left-subtree-and-less-than-those-in-its-right-subtree\">A binary search tree (BST), also called an ordered or sorted binary tree, is a rooted binary tree whose internal nodes each store a value greater than all the values in the node&#39;s left subtree and less than those in its right subtree.</h4>\n\n<h5 id=\"follow-up\">Follow Up :</h5>\n\n<pre><code>Can you solve this in O(N) time and O(H)  space complexity?\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \n\nThen the T test cases follow. \n\nThe first line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst_example-6878.png\" alt=\"bst_example\"> </p>\n\n<pre><code>4\n2 6\n1 3 5 7\n-1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 4\n\nLevel 2 :\nLeft child of 4 = 2\nRight child of 4 = 6\n\nLevel 3 :\nLeft child of 2 = 1\nRight child of 2 = 3\nLeft child of 6 = 5\nRight child of 6 = 7\n\nLevel 4 :\nLeft child of 1 = null (-1)\nRight child of 1 = null (-1)\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, flatten the BST and print the values of the nodes in the level order form.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n0 &lt;= node.data &lt;= 10^9, (where node data != -1)\n\nWhere &#39;N&#39; denotes the number of nodes in the given tree.\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1</h5>\n\n<pre><code>2\n10 6 12 2 8 11 15 -1 -1 -1 -1 -1 -1 -1 -1\n5 -5 8 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code>2 -1 6 -1 8 -1 10 -1 11 -1 12 -1 15 -1 -1\n-5 -1 5 -1 8 -1 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1</h5>\n\n<pre><code>For the first test case, the given BST is depicted below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bstinput1-6879.png\" alt=\"bst_input1\"></p>\n\n<p>So, after flattening, the BST is transposed as the below figure.</p>\n\n<p><img src=\"https://files.codingninjas.in/flattenbst_input1_afterflatten-7941.png\" alt=\"Flattened_bst\"></p>\n\n<pre><code>For the second test case, the given BST is depicted below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/flattenbst_input1_ex2-7942.png\" alt=\"bst_input2\"></p>\n\n<p>So, after flattening, the BST is transposed as the below figure.</p>\n\n<p><img src=\"https://files.codingninjas.in/flattenbst_input1_ex2_after-7943.png\" alt=\"Flattened_bst\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2</h5>\n\n<pre><code>2\n5 3 7 -1 -1 6 8 -1 -1 -1 -1\n2 1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2</h5>\n\n<pre><code>3 -1 5 -1 6 -1 7 -1 8 -1 -1\n1 -1 2 -1 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 92,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST), flatten it into a sorted list represented as a right-skewed BST. In the resulting tree, the left child of every node must be NULL, and the value of the right child must be greater than its parent node.  A binary search tree (BST) is a binary tree where each node's value is greater than all values in its left subtree and less than all values in its right subtree.  Solve this problem with O(N) time and O(H) space complexity, where N is the number of nodes and H is the height of the tree.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 5000 (Number of nodes in the tree)",
                    "0 <= node.data <= 10^9, (where node data != -1)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "10 6 12 2 8 11 15 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "2 -1 6 -1 8 -1 10 -1 11 -1 12 -1 15 -1 -1",
                        "explanation": "The input BST is flattened into a right-skewed BST with nodes in ascending order.  The output represents the level order traversal of the flattened tree, where -1 signifies a NULL child."
                    },
                    {
                        "input": "5 -5 8 -1 -1 -1 -1",
                        "output": "-5 -1 5 -1 8 -1 -1",
                        "explanation": "The input BST is flattened into a right-skewed BST with nodes in ascending order.  The output represents the level order traversal of the flattened tree, where -1 signifies a NULL child."
                    },
                    {
                        "input": "5 3 7 -1 -1 6 8 -1 -1 -1 -1",
                        "output": "3 -1 5 -1 6 -1 7 -1 8 -1 -1",
                        "explanation": "The input BST is flattened into a right-skewed BST with nodes in ascending order.  The output represents the level order traversal of the flattened tree, where -1 signifies a NULL child."
                    },
                    {
                        "input": "2 1 -1 -1 -1",
                        "output": "1 -1 2 -1 -1",
                        "explanation": "The input BST is flattened into a right-skewed BST with nodes in ascending order.  The output represents the level order traversal of the flattened tree, where -1 signifies a NULL child."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a solution to use the property that the <a href=\"https://en.wikipedia.org/wiki/Tree_traversal#In-order,_LNR\">inorder traversa</a>l of a BST is always sorted.</p>",
            "<p>Think of a solution to optimize the above approach by creating the nodes in place.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity - O(N)\n    Space Complexity - O(N)\n\n    Where N is the total number of nodes in the givrn BST.\n*/\n\n#include<vector>\n\nvoid inorder(TreeNode<int>* root, vector<int> &inorderArray){\n\tif(root == NULL){\n\t\treturn;\n\t}\n\n\tinorder(root->left, inorderArray);\n\tinorderArray.push_back(root->data);\n\tinorder(root->right, inorderArray);\n}\n\nTreeNode<int> *flatten(TreeNode<int>* root) {\n\n\tif(root == NULL){\n\t\treturn root;\n\t}\n\n\tvector<int> inorderArray;\n\tinorder(root, inorderArray);\n\n\t// Create a pointer called newRoot, and store the first value of the array in it.\n\tTreeNode<int> *newRoot = new TreeNode<int>(inorderArray[0]);\n\n\t// Create a pointer called curr and store the newRoot in it.\n\tTreeNode<int> *curr = newRoot;\n\n\tfor(int i = 1; i < inorderArray.size(); i++){\n\n\t\t// Create a new node.\n\t\tTreeNode<int> *temp = new TreeNode<int>(inorderArray[i]);\n\n\t\t// Make the left child of curr as NULL and right child as the temp. And make curr = temp.\n\t\tcurr->left = NULL;\n\t\tcurr->right = temp;\n\t\tcurr = temp;\n\t}\n\n\t// Make both the left and the right child of the last node as NULL.\n\tcurr->left = NULL;\n\tcurr->right = NULL;\n\n\treturn newRoot;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity - O(N)\n    Space Complexity - O(H)\n\n    Where N is the total number of nodes in the tree and H is the height of the tree.\n'''\n\nclass  TreeNode :\n    def __init__(self, data) :\n        self.data = data\n        self.left = None\n        self.right = None\n\n    def __del__(self):\n        if self.left:\n            del self.left\n        if self.right:\n            del self.right\n\n# Function to copy a tree.\ndef copyTree(root):\n\n    if root == None:\n        return None\n\n    copyRoot = TreeNode(root.data)\n\n    copyRoot.left = copyTree(root.left)\n    copyRoot.right = copyTree(root.right)\n\n    return copyRoot\n\ndef inorder(root, previous):\n    if root == None:\n        return\n\n    inorder(root.left, previous)\n\n    previous[0].left = None\n    previous[0].right = root\n    previous[0] = root\n\n    inorder(root.right, previous)\n\ndef flatten(root):\n\n    if root == None:\n        return root\n\n    temp = TreeNode(-1)\n\n    # passing the variable by reference\n    previous = [temp]\n\n    inorder(root, previous)\n\n    previous[0].left = None\n    previous[0].right = None\n\n    # Copy the tree.\n    newRoot = copyTree(temp.right)\n\n    del temp\n\n    return newRoot",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space Complexity : O(H)\r\n\r\n    Where 'N' is the total number of nodes in the tree \r\n\tand 'H' is the height of the tree.\r\n*/\r\n\r\npublic class Solution\r\n{\r\n    public static class Prev\r\n    {\r\n        TreeNode<Integer> prev = null;\r\n    } \r\n    \r\n    public static void inorder(TreeNode<Integer> root, Prev p)\r\n    {\r\n        if (root == null)\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Recur for left sub-tree\r\n        inorder(root.left, p);\r\n        \r\n        // Add the data of the leftmost node to prev\r\n        if (p.prev.data == -1)\r\n        {\r\n            p.prev.data = root.data;\r\n        }\r\n\r\n        // Create a new node to the right of previous with current node value.\r\n        else\r\n        {\r\n            p.prev.right = new TreeNode(root.data);\r\n            p.prev = p.prev.right;\r\n            p.prev.left = null;\r\n        }\r\n        \r\n        // Recur for right sub-tree\r\n        inorder(root.right, p);\r\n    }\r\n\r\n    public static TreeNode<Integer> flatten(TreeNode<Integer> root)\r\n    {\r\n\r\n        if (root == null)\r\n        {\r\n            return root;\r\n        }\r\n\r\n        Prev p = new Prev();\r\n        p.prev = new TreeNode(-1);\r\n\r\n        TreeNode<Integer> newRoot = p.prev;\r\n        inorder(root, p);\r\n\r\n        return newRoot;\r\n    }\r\n}\r\n\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}