{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8619,
            "title": "Flatten Linked List",
            "titleSlug": "flatten-linked-list_893175",
            "content": "<h4 id=\"you-are-given-a-multilevel-linked-list-of-integers-where-in-addition-to-the-next-pointer-each-node-has-a-child-pointer-which-may-or-may-not-point-to-a-separate-list-these-child-lists-may-have-one-or-more-children-of-their-own-and-so-on-to-produce-a-multilevel-data-structure-as-shown-in-the-below-figure-you-are-given-the-head-of-the-first-level-of-the-list-flatten-the-list-so-that-all-the-nodes-appear-in-a-single-level-linked-list-you-need-to-flatten-the-list-in-a-way-that-all-nodes-at-first-level-should-come-first-then-nodes-of-the-second-level-and-so-on\">You are given a Multilevel Linked List of integers, where in addition to the next pointer each node has a child pointer, which may or may not point to a separate list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the below figure. You are given the head of the first level of the list. Flatten the list so that all the nodes appear in a single-level linked list. You need to flatten the list in a way that all nodes at first level should come first, then nodes of the second level, and so on.</h4>\n\n<p><img src=\"https://files.codingninjas.in/big-fll-6558.jpg\" alt=\"example\"></p>\n\n<pre><code>                FIGURE 1\n\nInput for the above list is:\n10 5 12 7 11 -1 4 20 13 -1 -1 -1 17 6 -1 -1 -1  2 -1 16 -1 9 8 -1 -1 -1 3 -1 19 15 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \n\nThen the T test cases follow.\n\nThe first line of each test case contains the elements of the multi-level linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>-1 in the input is representing NULL. \n\nIn the input we begin with all the nodes present at first level then -1 indicates the end of that particular level, next we take the child of first node of level 1 and if the child exists we traverse all of its next nodes and then we check if the second node of level 1 has child and repeat the same process, if the child of any node is NULL we put a -1. The input is taken repeating the same process mentioned above for all levels.\nIllustration of above method is shown below :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/small-ques-fll-6559.jpg\" alt=\"example\"><br>\nFirst Level - 1 2 3 4 \n    Then the first level ends as no further next node is present and the next node for 4 is NULL. So insert a -1 in the input. So the input upto now is\n    1 2 3 4 -1\n    Now, we check if the first node of first level has any child or its child is NULL, its NULL so insert -1 in the input and repeat the same process for all the nodes until you have traversed all the nodes of the linked list.</p>\n\n<p>The final input for the list will be: 1 2 3 4 -1 -1 6 -1 -1 5 -1 -1 -1</p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the sorted linked list. The elements of the sorted list should be single-space separated, terminated by -1.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 5 * 10^4\n-10^9 &lt;= data &lt;= 10^9 and data != -1\n\nwhere T is the number of test cases, L is the number of nodes in the linked list.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n1 2 3 4 -1 -1 6 -1 -1 5 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 3 4 6 5 -1 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>The given multi-level linked list\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/small-ques-fll-6559.jpg\" alt=\"example\"></p>\n\n<pre><code>Flattened linked list\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/small-ans-fll-6560.jpg\" alt=\"example\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n10 5 12 7 11 -1 4 20 13 -1 -1 -1 17 6 -1 -1 -1 2 -1 16 -1 9 8 -1 -1 -1 3 -1 19 15 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>10 5 12 7 11 4 20 13 17 6 2 16 9 8 3 19 15 -1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>Input tree is as shown in figure 1.\nOn arranging the input linked list level wise, we get the output as a single-level list.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a multilevel linked list where each node has a 'next' pointer and a 'child' pointer (which may be null), flatten the list into a single-level linked list. The flattening should preserve the level order: nodes at the first level come first, followed by nodes at the second level, and so on.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 5 * 10^4",
                    "-10^9 <= data <= 10^9 and data != -1",
                    "T is the number of test cases, and N is the number of nodes in the linked list."
                ],
                "testcases": [
                    {
                        "input": "1\n1 2 3 4 -1 -1 6 -1 -1 5 -1 -1 -1",
                        "output": "1 2 3 4 6 5 -1",
                        "explanation": "The provided multi-level linked list has the structure where 1, 2, 3, and 4 are at the first level. Node 2 has a child 6, and node 3 has a child 5. Flattening it results in the sequence 1, 2, 3, 4, then the child of 2 (6), and finally the child of 3 (5)."
                    },
                    {
                        "input": "1\n10 5 12 7 11 -1 4 20 13 -1 -1 -1 17 6 -1 -1 -1 2 -1 16 -1 9 8 -1 -1 -1 3 -1 19 15 -1 -1 -1 -1 -1",
                        "output": "10 5 12 7 11 4 20 13 17 6 2 16 9 8 3 19 15 -1",
                        "explanation": "The input represents a complex multilevel linked list.  The first level is 10, 5, 12, 7, 11. The child of 10 is 4, 20, 13. The child of 5 is 17, 6. The child of 12 is 2. The child of 7 is 16. The child of 4 is 9, 8. The child of 17 is 3. The child of 9 is 19, 15. Flattening it results in level-by-level concatenation."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can it be solved using recursion?</p>",
            "<p>Can it be solved by appending children at the end?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}