{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8205,
            "title": "Flatten The Multi-Level Linked List",
            "titleSlug": "flatten-the-multi-level-linked-list_839810",
            "content": "<h4 id=\"you-are-given-a-multi-level-linked-list-of-n-nodes-each-node-has-a-next-and-child-pointer-which-may-or-may-not-point-to-a-separate-node-flatten-the-multi-level-linked-list-into-a-singly-linked-list-you-need-to-return-the-head-of-the-updated-linked-list\">You are given a multi-level linked list of &#39;N&#39; nodes, each node has a next and child pointer which may or may not point to a separate node. Flatten the multi-level linked list into a singly linked list. You need to return the head of the updated linked list.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<p><img src=\"https://files.codingninjas.in/image1-5449.png\" alt=\"Sample Multi-Level\"></p>\n\n<h4 id=\"flatten\">Flatten :</h4>\n\n<pre><code>All the different rows are merged into a single row.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains the elements of the multi-level linked-list in the level order form. The line consists of values of nodes separated by a single space. In case a node(next or child pointer) is null, we take -1 in its place.\n\nFor example, the input for the multi-level linked-list depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image3-5517.png\" alt=\"Sample Multi-level List\"></p>\n\n<pre><code>10\n5 4\n12 -1 20 -1\n7 -1 13 2\n11 17 -1 16 -1 -1\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 0 :\nThe head node of the multi-level linked-list is 10\n\nLevel 1 :\nNext pointer of 10 = 5\nChild pointer of 10 = 4\n\nLevel 2 :\nNext pointer of 5 = 12\nChild pointer of 5 = null (-1)\nNext pointer of 4 = 20\nChild pointer of 4 = null(-1)\n\nLevel 3 :\nNext pointer of 12= 7\nChild pointer of 12 = null(-1)\nNext pointer of 20 = 13\nChild pointer of 20 = 2\n\nLevel 4 :\nNext pointer of 7 = 11\nChild pointer of 7 = 17\nNext pointer of 13 = null(-1)\nChild pointer of 13 = 16\nNext pointer of 2 = null(-1)\nChild pointer of 2 = null(-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level(next and child pointers). The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given multi-level linked list. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted multi-level linked list, the input will be given as:\n\n10 5 4 12 -1 20 -1 7 -1 13 2 11 17 -1 16 -1 -1 -1 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the flattened linked-list of the multi-level linked-list in a single line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n0 &lt;= N &lt;= 10^4\n1 &lt;= data &lt;= 10^9\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n1 -1 2 -1 3 -1 4 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 2 3 4\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-1\">Explanation Of the Sample Input 1 :</h5>\n\n<pre><code>The given multi-level linked-list will be represented as shown below\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image2-5425.png\" alt=\"Sample 2\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n10 5 4 12 -1 20 -1 7 -1 13 2 11 17 -1 16 -1 -1 -1 -1 6 9 -1 3 -1 -1 8 19 -1 -1 -1 -1 15 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>10 5 12 7 11 4 20 13 17 6 2 16 9 8 3 19 15\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 17,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a multi-level linked list of 'N' nodes. Each node has a 'next' and 'child' pointer, either of which may be null.  The task is to flatten this multi-level linked list into a singly linked list, maintaining the relative order of the nodes. Return the head of the flattened linked list.",
                "constraints": [
                    "1 <= T <= 10",
                    "0 <= N <= 10^4",
                    "1 <= data <= 10^9",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n1 -1 2 -1 3 -1 4 -1 -1",
                        "output": "1 2 3 4",
                        "explanation": "The multi-level linked list is structured such that 1 is the head, 2 is the child of 1, 3 is the child of 2 and 4 is the child of 3. Flattening results in the sequence 1 -> 2 -> 3 -> 4."
                    },
                    {
                        "input": "1\n10 5 4 12 -1 20 -1 7 -1 13 2 11 17 -1 16 -1 -1 -1 -1 6 9 -1 3 -1 -1 8 19 -1 -1 -1 -1 15 -1 -1 -1",
                        "output": "10 5 12 7 11 4 20 13 17 6 2 16 9 8 3 19 15",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse the list and make new connections(next) every time a new level(row) is reached.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}