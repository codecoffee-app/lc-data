{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9604,
            "title": "flip bits",
            "titleSlug": "flip-bits_1063248",
            "content": "<h4 id=\"you-are-given-an-array-of-integers-arr-of-size-n-consisting-of-zeros-and-ones-you-have-to-select-a-subset-and-flip-bits-of-that-subset-you-have-to-return-the-count-of-maximum-one-s-that-you-can-obtain-by-flipping-chosen-sub-array-at-most-once\">You are given an array of integers ARR[] of size N consisting of zeros and ones. You have to select a subset and flip bits of that subset. You have to return the count of maximum one\u2019s that you can obtain by flipping chosen sub-array at most once.</h4>\n\n<h4 id=\"a-flip-operation-is-one-in-which-you-turn-1-into-0-and-0-into-1\">A flip operation is one in which you turn 1 into 0 and 0 into 1.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>If you are given an array {1, 1, 0, 0, 1} then you will have to return the count of maximum one\u2019s you can obtain by flipping anyone chosen sub-array at most once, so here you will clearly choose sub-array from the index 2 to 3 and then flip it&#39;s bits. So, the final array comes out to be {1, 1, 1, 1, 1} which contains five ones and so you will return 5.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input consists of a single integer T denoting the total number of the test case.\n\nThe first line of each test case contains an integer N, which represents the array&#39;s size.\n\nThe second line of each test case contains N space-separated integers representing the array elements accordingly.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return a single integer representing the maximum number of 1&#39;s you can have in the array after at most one flip operation.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t have to print anything; it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T = 100\n1 &lt;= N &lt;= 10^4\n0 &lt;= ARR[i] &lt;= 1\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3\n5\n1 0 0 1 0\n4\n1 1 1 0\n5\n0 0 1 0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>4\n4\n4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case:\nWe can perform a flip operation in the range [1,2]. After the flip operation, the array is: 1 1 1 1 0\nand so the answer will be 4\n\nSimilarly, in the second test case :\nWe can perform a flip operation in the range [3,3]. After the flip operation, the array is: 1 1 1 1 \nand so the answer will be 4.\n\nFinally for the third test case :\nWe can perform a flip operation in the range [0,4] \nAfter the flip operation, the array is: 1 1 0 1 1 \nand so the answer will be 4\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3\n5\n0 0 0 0 0\n5\n1 1 1 1 1\n8\n1 0 1 0 1 0 1 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5\n5\n5\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 434,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers containing only zeros and ones, determine the maximum number of ones that can be achieved by flipping the bits of at most one contiguous sub-array.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^4",
                    "0 <= ARR[i] <= 1"
                ],
                "testcases": [
                    {
                        "input": "n = 5, arr = [1, 0, 0, 1, 0]",
                        "output": "4",
                        "explanation": "Flipping the sub-array from index 1 to 2 (inclusive) results in the array [1, 1, 1, 1, 0], which contains 4 ones."
                    },
                    {
                        "input": "n = 4, arr = [1, 1, 1, 0]",
                        "output": "4",
                        "explanation": "Flipping the sub-array from index 3 to 3 (inclusive) results in the array [1, 1, 1, 1], which contains 4 ones."
                    },
                    {
                        "input": "n = 5, arr = [0, 0, 1, 0, 0]",
                        "output": "4",
                        "explanation": "Flipping the sub-array from index 0 to 4 (inclusive) results in the array [1, 1, 0, 1, 1], which contains 4 ones."
                    },
                    {
                        "input": "n = 5, arr = [0, 0, 0, 0, 0]",
                        "output": "5",
                        "explanation": "Flipping the entire array results in [1, 1, 1, 1, 1], with 5 ones."
                    },
                    {
                        "input": "n = 5, arr = [1, 1, 1, 1, 1]",
                        "output": "5",
                        "explanation": "No flip is needed. The array already has 5 ones."
                    },
                    {
                        "input": "n = 8, arr = [1, 0, 1, 0, 1, 0, 1, 0]",
                        "output": "5",
                        "explanation": "Flipping the sub-array [1,0] results in [1,1], Flipping the sub-array with indices 1,3,5 and 7 results in [1,1,1,1,1]. which contains 5 ones."
                    },
                    {
                        "input": "n = 3, arr = [1, 0, 1]",
                        "output": "3",
                        "explanation": "Flipping index 1 results in [1,1,1] which contains 3 ones."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try and think about how you will know which bits need to be flipped.</p>",
            "<p>&nbsp;Try and think about how you will know which subarray needs to be flipped and in one pass.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space complexity: O(1)\r\n    \r\n    Where N is the length of the array.\r\n*/\r\n\r\nint flipBits(int* arr, int n) \r\n{\r\n    int totalOnes = 0;\r\n\r\n    // Initialize overall maximum difference for any subArray\r\n    int maxVal = 0;\r\n    \r\n    // Initialize current difference\r\n    int currMax = 0;\r\n    for (int i = 0; i < n; i++) \r\n    {\r\n        if (arr[i] == 1) \r\n        {\r\n            totalOnes++;\r\n        }\r\n    \r\n        // Value to be considered for finding maximum sum\r\n        int val = 0;\r\n        if (arr[i] == 1) \r\n        {\r\n            val = -1;\r\n        } \r\n        else \r\n        {\r\n            val = 1;\r\n        }\r\n        currMax = max(val, currMax + val);\r\n        maxVal = max(maxVal, currMax);\r\n    }\r\n    \r\n    maxVal = max(0, maxVal);\r\n    int result = totalOnes + maxVal;\r\n    return result;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n\tTime Complexity: O(N)\n\tSpace complexity: O(1)\n\t\n\tWhere N is the length of the array.\n*/\npublic class Solution {\n\n\tpublic static int flipBits(int[] arr,int n) {\n\t\tint totalOnes = 0;\n\n\t\t// Initialize overall maximum difference for any subArray\n\t\tint max = 0;\n\n\t\t// Initialize current difference\n\t\tint currMax = 0;\n\n\t\tfor (int i = 0; i < n; i++) {\n\n\t\t\tif (arr[i] == 1) {\n\t\t\t\ttotalOnes++;\n\t\t\t}\n\n\t\t\t// Value to be considered for finding maximum sum\n\t\t\tint val = 0;\n\t\t\tif (arr[i] == 1) {\n\t\t\t\tval = -1;\n\t\t\t} else {\n\t\t\t\tval = 1;\n\t\t\t}\n\n\t\t\tcurrMax = Math.max(val, currMax + val);\n\t\t\tmax = Math.max(max, currMax);\n\t\t}\n\t\tmax = Math.max(0, max);\n\t\tint result = totalOnes + max;\n\t\treturn result;\n\t}\n}\n\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N)\r\n    Space complexity: O(1)\r\n    \r\n    Where N is the length of the array.\r\n'''\r\n\r\ndef flipBits(arr, n):\r\n    totalOnes = 0\r\n\r\n    # Initialize overall maximum difference for any subArray\r\n    maxVal = 0\r\n    \r\n    # Initialize current difference\r\n    currMax = 0\r\n    for i in range(n):\r\n        if (arr[i] == 1): \r\n            totalOnes += 1\r\n            \r\n        # Value to be considered for finding maximum sum\r\n        val = 0\r\n        if (arr[i] == 1):\r\n            val = -1\r\n        else:\r\n            val = 1\r\n            \r\n        currMax = max(val, currMax + val)\r\n        maxVal = max(maxVal, currMax)\r\n    \r\n    maxVal = max(0, maxVal)\r\n    result = totalOnes + maxVal\r\n    return result\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}