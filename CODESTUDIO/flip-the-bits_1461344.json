{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12453,
            "title": "Flip the Bits",
            "titleSlug": "flip-the-bits_1461344",
            "content": "<h4 id=\"ninja-has-a-binary-string-s-of-length-n-initially-all-the-characters-in-a-string-are-1-i-e\">Ninja has a binary string \u2018S\u2019 of length \u2018N\u2019. Initially, all the characters in a string are \u20181\u2019, i.e.</h4>\n\n<pre><code>S[i] = \u20181\u2019 for each 1 &lt;= \u2018i\u2019 &lt;= \u2018N\u2019.\n</code></pre>\n\n<h4 id=\"an-operation-is-defined-as-choosing-a-number-between-1-to-4-and-doing-the-following-steps-accordingly\">An operation is defined as choosing a number between 1 to 4, and doing the following steps accordingly.</h4>\n\n<pre><code>1. If the chosen number is 1, then flip all the characters in string.\n\n2. If the chosen number is 2, then flip all the characters at odd indexes.\n\n3. If the chosen number is 3, then flip all the characters at even indexes.\n\n4. If the chosen number is 4, then flip all the characters at (3k + 1) indexes. \n</code></pre>\n\n<h4 id=\"you-need-to-find-out-that-after-performing-operations-exactly-m-number-of-times-how-many-distinct-final-strings-can-be-there\">You need to find out that after performing operations exactly \u2018M\u2019 number of times, how many distinct final strings can be there.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. A binary string is a string in which all characters are either \u20181\u2019 or \u20180\u2019.\n\n2. Flipping a character means that if the character is \u20181\u2019 then change it to 0, or if it is \u20180\u2019 then change it to \u20181\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018M\u2019 denoting the size of string and number of operations.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print one integer denoting the number of final strings possible after performing \u2018M\u2019 number of operations.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to input or print anything, and it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N, M &lt;= 5000\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 1\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>4\n2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>Test Case 1:\nWe can get these final strings [ \u2018000\u2019, \u2018010\u2019, \u2018101\u2019, \u2018011\u2019 ]  by doing four types of operations.\n\nTest Case 2:\nWe can get \u20181\u2019 by doing the 1st type of operation twice and \u20180\u2019 by doing the 1st type of operation followed by the 3rd type of operation.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2 10  \n4 3     \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4\n8\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 14,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja starts with a binary string 'S' of length 'N' consisting entirely of '1's.  You can perform 'M' operations. Each operation involves choosing a number from 1 to 4 and performing a corresponding flip:\n\n1. **Operation 1:** Flip all characters in the string.\n2. **Operation 2:** Flip all characters at odd indices (1-based).\n3. **Operation 3:** Flip all characters at even indices (1-based).\n4. **Operation 4:** Flip all characters at indices (3k + 1), where k >= 0 (1-based). For example, with index '1', '4', '7'...\n\nDetermine the number of distinct binary strings achievable after exactly 'M' operations.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N, M <= 5000",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 1",
                        "output": "4",
                        "explanation": "With N=3 and M=1, possible final strings are '000', '010', '101', and '110' (the initial string '111' can be flipped to '000' by performing the operation 1)."
                    },
                    {
                        "input": "1 2",
                        "output": "2",
                        "explanation": "With N=1 and M=2, the string can be either '1' or '0'.  '1' can be achieved by applying operation 1 twice. '0' can be achieved by operation 1 followed by operation 3."
                    },
                    {
                        "input": "2 10",
                        "output": "4",
                        "explanation": null
                    },
                    {
                        "input": "4 3",
                        "output": "8",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to generate all strings using BFS.</p>",
            "<p>Consider all cases, there are not many cases.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}