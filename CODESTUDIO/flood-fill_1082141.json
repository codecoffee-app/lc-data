{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9696,
            "title": "Flood fill",
            "titleSlug": "flood-fill_1082141",
            "content": "<h4 id=\"an-image-is-represented-by-the-2-d-array-of-positive-integers-where-each-element-of-2-d-represents-the-pixel-value-of-the-image\">An <em><strong>&#39;IMAGE&#39;</strong></em> is represented by the 2-D array of positive integers, where each element of 2-D represents the pixel value of the image.</h4>\n\n<p><br></p>\n\n<h4 id=\"the-given-image-has-n-rows-and-m-columns-you-are-given-the-location-of-the-pixel-in-the-image-as-x-y-0-based-indexing-and-a-pixel-value-as-p\">The given &#39;IMAGE&#39; has <em><strong>&#39;N&#39;</strong></em> rows and <em><strong>&#39;M&#39;</strong></em> columns. You are given the location of the pixel in the image as <em><strong>(&#39;X&#39;, &#39;Y&#39;)</strong></em>(0-based indexing) and a pixel value as <em><strong>&#39;P&#39;</strong></em>.</h4>\n\n<p><br></p>\n\n<h4 id=\"your-task-is-to-perform-a-flood-fill-operation-on-the-given-coordinate-x-y-with-pixel-value-p\">Your task is to perform a \u201cflood fill\u201d operation on the given coordinate (X, Y) with pixel value &#39;P&#39;.</h4>\n\n<p><br></p>\n\n<h4 id=\"let-the-current-pixel-value-of-x-y-be-equal-to-c-to-perform-the-flood-fill-operation-on-the-coordinate-x-y-with-pixel-value-p-you-need-to-do-the-following-operations-in-order\">Let the current pixel value of (&#39;X&#39;, &#39;Y&#39;) be equal to C. To perform the flood fill operation on the coordinate (X, Y) with pixel value &#39;P&#39; you need to do the following operations in order:</h4>\n\n<pre><code>1. Replace the pixel value of (&#39;X&#39;, &#39;Y&#39;) with &#39;P&#39;.\n\n2. Visit all non-diagonal neighbours of (&#39;X&#39;, &#39;Y&#39;) having pixel values equal to C and replace their pixel value with &#39;P&#39;.\n\n3. Non \u2013 diagonal neighbours are Up(&#39;X&#39; - 1, &#39;Y&#39;), Down(&#39;X&#39; + 1, &#39;Y&#39;), Left(&#39;X&#39;, &#39;Y&#39; - 1), right(&#39;X&#39;, &#39;Y&#39; + 1). Also, you cannot go out of bounds.\n\n4. Visit all non-diagonals neighbours of coordinates visited in step 2 having pixel value equal to C and replace their pixel value with &#39;P&#39;. \n\n5. Repeat step 2, until you have visited all your neighbours\n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>For  &#39;N&#39; = 5 , &#39;M&#39; = 4 , &#39;X&#39; = 2 , &#39;Y&#39; = 2 and &#39;P&#39; = 5\nGiven &#39;IMAGE&#39; is shown below:\n\n[7, 1, 1, 1]\n[1, 7, 7, 7]\n[7, 7, 7, 0]\n[7, 7, 7, 4]\n[4, 4, 4, 4]\n\nAfter the flood fill operation, we will replace all neighbour&#39;s 7s with 5.\n\nSo our &#39;IMAGE&#39; will become:\n\n[7, 1, 1, 1]\n[1, 5, 5, 5]\n[5, 5, 5, 0]\n[5, 5, 5, 4]\n[4, 4, 4, 4]\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains two space-separated integers &#39;N&#39; and &#39;M&#39;, denoting the number of rows and columns respectively.\n\nThe second line contains three space-separated integers, &#39;X&#39;, &#39;Y&#39; and &#39;P&#39;, denoting starting coordinates of the pixel and the new pixel value of the flood fill operation.\n\nThe next &#39;N&#39; lines will contain &#39;M&#39; space-separated integers denoting elements of the image array.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>Return a 2D matrix/array of size N * M representing the &#39;IMAGE&#39; after performing the flood fill operation.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3 2\n1 1 3\n0 0\n1 1\n1 0    \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>0 0\n3 3\n3 0\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>We will replace all 1\u2019s with 4 except the one which is at the bottom right corner i.e. 3,3. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>4 3\n1 1 4\n0 0 2\n1 1 2\n1 0 2\n2 2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0 0 2\n4 4 2\n4 0 2\n2 2 1\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N,M &lt;= 100 \n0 &lt;= X &lt;= N \u2013 1\n0 &lt;= Y &lt;= M - 1\n0 &lt;= IMAGE[i][j], P &lt;= 10^9\n\nWhere &#39;IMAGE[i][j]&#39; denotes the image matrix pixel elements.\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 15,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D array 'IMAGE' representing an image, where each element is a positive integer pixel value, and dimensions N rows and M columns. You are also given a starting pixel coordinate (X, Y) (0-based indexing) and a new pixel value 'P'. Perform a flood fill operation starting at (X, Y) with value 'P'.\n\nThe flood fill algorithm works as follows:\n\n1.  Replace the pixel value at (X, Y) with 'P'.\n2.  Recursively visit the non-diagonal neighbors (up, down, left, right) of (X, Y). If a neighbor has the original pixel value (C, the original value at X,Y) and is within the bounds of the image, replace its value with 'P' and continue the flood fill from that neighbor.\n3.  Continue until no more eligible neighbors are found.\n",
                "constraints": [
                    "1 <= N, M <= 100",
                    "0 <= X < N",
                    "0 <= Y < M",
                    "0 <= IMAGE[i][j], P <= 10^9",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 2\n1 1 3\n0 0\n1 1\n1 0",
                        "output": "0 0\n3 3\n3 0",
                        "explanation": "The flood fill starts at (1,1) which has value 1.  All connected neighbors with value 1, except the one at the bottom right (1,0), are replaced with 3."
                    },
                    {
                        "input": "4 3\n1 1 4\n0 0 2\n1 1 2\n1 0 2\n2 2 1",
                        "output": "0 0 2\n4 4 2\n4 0 2\n2 2 1",
                        "explanation": "The flood fill starts at (1,1) which has value 2.  The connected neighbors with value 2 at (1,0) and (0,0) are replaced with 4 along with (1,1)."
                    },
                    {
                        "input": "5 4\n2 2 5\n7 1 1 1\n1 7 7 7\n7 7 7 0\n7 7 7 4\n4 4 4 4",
                        "output": "7 1 1 1\n1 5 5 5\n5 5 5 0\n5 5 5 4\n4 4 4 4",
                        "explanation": "The flood fill starts at (2,2) which has value 7.  All connected neighbors with value 7 are replaced with 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a solution to using dfs.</p>",
            "<p>Think of a solution using bfs.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}