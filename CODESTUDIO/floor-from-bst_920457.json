{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8870,
            "title": "Floor from BST",
            "titleSlug": "floor-from-bst_920457",
            "content": "<h4 id=\"you-are-given-a-bst-binary-search-tree-with-n-number-of-nodes-and-a-value-x-your-task-is-to-find-the-greatest-value-node-of-the-bst-which-is-smaller-than-or-equal-to-x\">You are given a BST (Binary search tree) with\u2019 N\u2019 number of nodes and a value \u2018X\u2019. Your task is to find the greatest value node of the BST  which is smaller than or equal to  \u2018X\u2019.</h4>\n\n<h4 id=\"note-x-is-not-smaller-than-the-smallest-node-of-bst\">Note :\u2018X\u2019 is not smaller than the smallest node of BST .</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<p><img src=\"https://files.codingninjas.in/bst-11214.png\" alt=\"1\"></p>\n\n<pre><code>In the above example, For the given BST  and X = 7, the greatest value node of the BST  which is smaller than or equal to  7 is 6.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. Then each test case follows.\n\nThe first line of each test case contains nodes in level order form (separated by space). If any node does not have a left or right child, take -1 in its place.\n\nThe second and the last line of each test case contain integer \u2018X\u2019.\n\nFor example, the input for the tree depicted in the below image. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst-11214.png\" alt=\"1\"></p>\n\n<pre><code>10\n5 15\n2 6 -1 -1\n-1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 10\n\nLevel 2 :\nLeft child of 10 = 5\nRight child of 10 = 15\n\nLevel 3 :\nLeft child of 5 = 2\nRight child of 5 = 6\nLeft child of 15 = null(-1)\nRight child of 15 =  null (-1)\n\nLevel 4 :\nLeft child of 2 = null (-1)\nRight child of 2 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n10 5 15 2 6 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer \u2018M\u2019, denoting the greatest value node of the BST  which is smaller than or equal to  \u2018X\u2019.\n\nThe Output of each test case will be printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 5 * 10 ^ 3\n1 &lt;= nodeVal[i] &lt;= 10 ^ 9\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n10 5 15 2 6 -1 -1 -1 -1 -1 -1\n7\n2 1 3 -1 -1 -1 -1\n2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>6\n2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>In the first test case, the BST looks like as below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst-11214.png\" alt=\"1\"></p>\n\n<pre><code>The greatest value node of the BST which is smaller than or equal to  7 is 6.\n\nIn the second test case, the BST looks like as below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bstoutput2-1-11215.png\" alt=\"1\"></p>\n\n<pre><code>The greatest value node of the BST which is smaller than or equal to  2 is 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 3 10 2 4 6 15 -1 -1 -1 -1 -1 -1 -1 -1\n15\n5 3 10 2 4 6 15 -1 -1 -1 -1 -1 -1 -1 -1\n8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>15\n6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 66,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) represented by its root node and an integer X, find the largest value in the BST that is less than or equal to X. Assume that X is not smaller than the smallest node in the BST.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 5 * 10 ^ 3",
                    "1 <= nodeVal[i] <= 10 ^ 9"
                ],
                "testcases": [
                    {
                        "input": "root = [10, 5, 15, 2, 6, -1, -1, -1, -1, -1, -1], X = 7",
                        "output": "6",
                        "explanation": "The BST contains the values [2, 5, 6, 10, 15]. The largest value less than or equal to 7 is 6."
                    },
                    {
                        "input": "root = [2, 1, 3, -1, -1, -1, -1], X = 2",
                        "output": "2",
                        "explanation": "The BST contains the values [1, 2, 3]. The largest value less than or equal to 2 is 2."
                    },
                    {
                        "input": "root = [5, 3, 10, 2, 4, 6, 15, -1, -1, -1, -1, -1, -1, -1, -1], X = 15",
                        "output": "15",
                        "explanation": "The BST contains the values [2, 3, 4, 5, 6, 10, 15]. The largest value less than or equal to 15 is 15."
                    },
                    {
                        "input": "root = [5, 3, 10, 2, 4, 6, 15, -1, -1, -1, -1, -1, -1, -1, -1], X = 8",
                        "output": "6",
                        "explanation": "The BST contains the values [2, 3, 4, 5, 6, 10, 15]. The largest value less than or equal to 8 is 6."
                    },
                    {
                        "input": "root = [1, -1, 2, -1, -1, -1, -1], X = 2",
                        "output": "2",
                        "explanation": "The BST contains the values [1, 2]. The largest value less than or equal to 2 is 2."
                    },
                    {
                        "input": "root = [5, -1, 6, -1, -1, -1, -1], X= 4",
                        "output": "5",
                        "explanation": "In this particular example, x is not actually greater than the smallest element in bst (5), but following question constraint, it must return the greatest value less than or equal to X. The bst contains elements [5,6], so the value closest to 4, while lesser than is actually 5. Although the value '4' is contradictory to prompt, this still should pass due to constraints.",
                        "comment": "Edge case handling. Given problem description, x >= minimum element."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Compare each node and keep track of the greatest node smaller than \u2018X\u2019 .</p>",
            "<p>&nbsp;Can you take advantage of the BST property i.e left node is smaller than root and right node?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}