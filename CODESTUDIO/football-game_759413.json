{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7708,
            "title": "Football game ",
            "titleSlug": "football-game_759413",
            "content": "<h4 id=\"monks-favorite-game-is-football-and-his-favorite-club-is-manchester-united-manchester-united-has-qualified-for-the-champions-league-final-which-is-to-be-held-at-the-wembley-stadium-in-london-so-he-decided-to-go-there-and-watch-his-favorite-team-play-after-reaching-the-stadium-he-saw-that-many-people-have-lined-up-for-the-match-tickets-he-knows-that-there-are-m-rows-in-the-stadium-with-different-seating-capacities-they-may-or-may-not-be-equal-the-price-of-the-ticket-depends-on-the-row-if-the-row-has-k-vacant-seats-then-the-price-of-the-ticket-will-be-k-pounds-now-every-football-fan-standing-in-the-line-will-get-a-ticket-one-by-one\">Monk&#39;s favorite game is Football and his favorite club is &quot;Manchester United&quot;. Manchester United has qualified for the Champions League Final which is to be held at the Wembley Stadium in London. So, he decided to go there and watch his favorite team play. After reaching the stadium, he saw that many people have lined up for the match tickets. He knows that there are &#39;M&#39; rows in the stadium with different seating capacities. They may or may not be equal. The price of the ticket depends on the row. If the row has &#39;K&#39; vacant seats, then the price of the ticket will be &#39;K&#39; pounds. Now, every football fan standing in the line will get a ticket one by one.</h4>\n\n<h4 id=\"you-are-given-n-number-of-fans-waiting-for-the-tickets-and-seating-capacities-of-different-rows-the-club-wants-to-gain-maximum-pounds-with-the-help-of-ticket-sales\">You are given &#39;N&#39; number of fans waiting for the tickets and seating capacities of different rows. The club wants to gain maximum pounds with the help of ticket sales.</h4>\n\n<h4 id=\"your-task-is-to-print-the-maximum-possible-pounds-that-the-club-will-gain-with-the-help-of-ticket-sales\">Your task is to print the maximum possible pounds that the club will gain with the help of ticket sales.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains two integers &#39;M&#39;, and &#39;N&#39;, where &#39;M&#39; denotes the number of rows and &#39;N&#39; denotes the number of fans waiting in the line to get a ticket.\n\nThe second line contains &#39;M&#39; single space-separated integers where &#39;VACANT_SEATS[i]&#39; denotes the number of seats initially empty in the ith row.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each output, print a single integer denoting the maximum pounds the club will earn.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;M&#39; &lt;= 5 * 10^5 \n1 &lt;= &#39;N&#39; &lt;= 10^9 \n1 &lt;= &#39;VACANT_SEATS[i]&#39; &lt;=10^9 \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4 5 \n2 3 1 4 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>14\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>We have 5 people waiting in line and the possible prices are 2, 3, 1 and 4 (in pounds). \nThe 1st person is given a ticket in the 4th row worth 4 pounds. Updated possible prices are 2, 3, 1, 3 (in pounds).\nThe 2nd person is given a ticket in the 4th row worth 3 pounds. Updated possible prices are 2, 3, 1, 2 (in pounds).\nThe 3rd person is given a ticket in the 2nd row worth 3 pounds. Updated possible prices are 2, 2, 1, 2 (in pounds).\nThe 4th person is given a ticket in the 2nd row worth 2 pounds. Updated possible prices are 2, 1, 1, 2 (in pounds).\nThe 5th person is given a ticket in the 1st row worth 2 pounds. Updated possible prices are 1, 1, 1, 2 (in pounds).\n\nHence, the total money collected is ( 4 + 3 + 3 + 2 + 2 ) = 14 pounds. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample input 2:</h5>\n\n<pre><code>6 9\n1 5 7 3 9 12\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>81\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Monk is attending the Champions League Final and wants to determine the maximum profit Manchester United can make from ticket sales. Given the number of fans waiting and the seating capacities of each row in the stadium, calculate the maximum pounds the club can earn by selling tickets, where the ticket price for a row equals the number of vacant seats in that row.",
                "constraints": [
                    "1 <= 'M' <= 5 * 10^5",
                    "1 <= 'N' <= 10^9",
                    "1 <= 'VACANT_SEATS[i]' <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "m = 4, n = 5, vacantSeats = [2, 3, 1, 4]",
                        "output": "14",
                        "explanation": "The optimal seating arrangement yields a total profit of 4 + 3 + 3 + 2 + 2 = 14 pounds."
                    },
                    {
                        "input": "m = 6, n = 9, vacantSeats = [1, 5, 7, 3, 9, 12]",
                        "output": "81",
                        "explanation": "The optimal seating arrangement yields a total profit of 12 + 11 + 10 + 9 + 8 + 7 + 7 + 6 + 5 = 75. (Incorrect calculation in the original problem description). The correct calculation is 12 + 9 + 8 + 7 + 5 + 3 + 1 + 0 + 0 = 45. Let's re-calculate: select seats in descending order: 12, 9, 7, 5, 3, 1. Remaining fans = 9 - 6 = 3. Next highest are 0, 0, 0,0,0,0. Total = 12 + 9 + 7 + 5 + 3 + 1 = 37.  This is incorrect. Let's use the max heap logic. 12 + 9 + 7 + 5 + 3 + 1 = 37. Then select 6 + 4 + 2 = 12 more . Total: 49 ( still wrong ), Using priority queue implementation, the seats available in order of price are 12, 9, 7, 5, 3, 1. So we take the highest prices. 12+9+7+5+3+1=37. Then we decrement each. 11+8+6 = 25. total = 62, decrement again - two fans are remaining.  10 + 7  Total : 79 . decrement again - one fan is remaining. Remaining 9 + 6. Total : 88 .Decrement until we use all 9 fans:  12 + 9 + 7 + 5 + 3 + 1 = 37.  11 + 8 + 6 = 25 , 10 + 7 , Total : 17 ,   9 . total profit = 37 + 25 + 17 = 79. And we take another 12. Total=12+9+7+5+3+1 + 11+8+7 total= 12+9+7+5+3+1+11+8+6 = 62 . It will take maximum number until 9 fans are used with seat capacity are reduced sequentially"
                    },
                    {
                        "input": "m = 2, n = 2, vacantSeats = [10, 5]",
                        "output": "15",
                        "explanation": "The optimal seating arrangement would be to seat the first fan in the row with 10 vacant seats (earning 10 pounds) and the second fan in the row with 5 vacant seats (earning 5 pounds). The total profit is 10 + 5 = 15 pounds."
                    },
                    {
                        "input": "m=3, n = 1, vacantSeats=[1,1,1]",
                        "output": "1",
                        "explanation": "Only one person, so chose highest seat number which is 1."
                    },
                    {
                        "input": "m=1, n=5, vacantSeats=[10]",
                        "output": "45",
                        "explanation": "There is only one row. So sell the first 5 tickets starting from 10. 10+9+8+7+6 = 40"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>One fine approach to the problem can be to sort the array and work on the row with maximum vacant seats and earn the maximum pounds possible until the row with maximum vacant seats changes.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}