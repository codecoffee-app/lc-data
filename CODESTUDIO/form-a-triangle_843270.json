{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8319,
            "title": "Form a Triangle",
            "titleSlug": "form-a-triangle_843270",
            "content": "<h4 id=\"you-are-given-an-integer-of-array-list-arr-of-length-n-you-are-supposed-to-return-true-if-it-is-possible-to-construct-at-least-one-non-degenerate-triangle-using-values-of-array-list-as-sides-of-the-triangle-otherwise-return-false\">You are given an integer of array/list &#39;ARR&#39; of length \u2018N. You are supposed to return true if it is possible to construct at least one non-degenerate triangle using values of array/list as sides of the triangle, otherwise, return false.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. The test cases follow.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of elements in the array.\n\nThe second line contains \u2018N\u2019 single space-separated integers denoting the elements of the array/list.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing either \u201cYES\u201d(without quotes) if it is possible to form a non-degenerate triangle, otherwise \u201cNO\u201d(without quotes).\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n3 &lt;= N &lt;= 10 ^ 3\n0 &lt;= ARR[i] &lt;= 10 ^ 9\n\nWhere \u2018T\u2019 denotes the number of test cases, \u2018N\u2019 denotes the number of elements in the array, and &#39;ARR[i] denotes the elements of the array.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5\n4 2 1 3 2\n5\n5 2 7 3 15\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>YES\nYES\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>In the first test case, if we choose the sides as { 2,3,4} or {2,2,1} or {2,2,3} then it is possible to form a non-degenerate triangle.\n\nIn the second test case, if we choose sides as {5,3,7}, then it is possible to form a non-degenerate triangle.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n12 3 7 4 28\n4\n7 12 9 20\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>NO\nYES\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>In the first test case, there is no possible way to choose three elements such that they will form the sides of a triangle.\n\nIn the second test case, if we choose the sides as {7,12,9} or {12,9,20}, then it is possible to form a non-degenerate triangle\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 126,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, determine if it's possible to form a non-degenerate triangle using three values from the array as its sides. A non-degenerate triangle has a positive area, meaning the sum of any two sides must be greater than the third side. Return true if such a triangle can be formed, and false otherwise.",
                "constraints": [
                    "1 <= T <= 100",
                    "3 <= N <= 10 ^ 3",
                    "0 <= ARR[i] <= 10 ^ 9"
                ],
                "testcases": [
                    {
                        "input": "n = 5, nums = [4, 2, 1, 3, 2]",
                        "output": "YES",
                        "explanation": "The sides {2, 3, 4} or {2, 2, 3} satisfy the triangle inequality (sum of any two sides greater than the third)."
                    },
                    {
                        "input": "n = 5, nums = [5, 2, 7, 3, 15]",
                        "output": "YES",
                        "explanation": "The sides {5, 3, 7} satisfy the triangle inequality: 5+3>7, 5+7>3, 3+7>5."
                    },
                    {
                        "input": "n = 5, nums = [12, 3, 7, 4, 28]",
                        "output": "NO",
                        "explanation": "No combination of three elements satisfies the triangle inequality. For example, the largest three are 28, 12, 7 and 12+7 is not greater than 28."
                    },
                    {
                        "input": "n = 4, nums = [7, 12, 9, 20]",
                        "output": "YES",
                        "explanation": "The sides {7, 12, 9} satisfy the triangle inequality: 7+12>9, 7+9>12, 12+9>7."
                    },
                    {
                        "input": "n = 3, nums = [1, 2, 5]",
                        "output": "NO",
                        "explanation": "1 + 2 is not greater than 5, thus a triangle cannot be formed."
                    },
                    {
                        "input": "n = 3, nums = [5, 5, 5]",
                        "output": "YES",
                        "explanation": "5 + 5 > 5, thus a triangle can be formed."
                    },
                    {
                        "input": "n = 4, nums = [1,1,1,100]",
                        "output": "NO",
                        "explanation": "No combination of three sides will work 1 + 1 is not greater than 100."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>When can we make a non-degenerate triangle from any combination of 3 elements?&nbsp;&nbsp;</p>",
            "<p>Can you think about some greedy approach?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/* \r\n    Time Complexity: O(N * log(N))\r\n    Space Complexity: O(log N)\r\n\r\n    Where 'N' is the number of elements in the given array/list.\r\n*/\r\n\r\n#include <algorithm>\r\n\r\nbool possibleToMakeTriangle(vector<int> &arr)\r\n{\r\n\r\n    // Sort the array in non-decreasing order.\r\n    sort(arr.begin(), arr.end());\r\n\r\n    int n = arr.size();\r\n\r\n    // Iterate the array/list.\r\n    for (int i = 0; i < n - 2; i++)\r\n    {\r\n\r\n        // Return true if sum of first 2 elements is greater than the 3rd element.\r\n        if (arr[i] + arr[i + 1] > arr[i + 2])\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // If no non-degenerate triangle can be formed return false.\r\n    return false;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/* \r\n    Time Complexity: O(N * log(N))\r\n    Space Complexity: O(log N)\r\n\r\n    Where 'N' is the number of elements in the given array/list.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\n\r\npublic class Solution{\r\n\tpublic static boolean possibleToMakeTriangle(ArrayList<Integer> arr){\r\n\t\t// Sort the array in non-decreasing order.\r\n\t\tCollections.sort(arr);\r\n\r\n\t\tint n = arr.size();\r\n\r\n\t\t// Iterate the array/list.\r\n\t\tfor (int i = 0; i < n - 2; i++){\r\n\r\n\t\t\t// Return true if sum of first 2 elements is greater than the 3rd element.\r\n\t\t\tif (arr.get(i) + arr.get(i + 1) > arr.get(i + 2)){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If no non-degenerate triangle can be formed return false.\r\n\t\treturn false;\r\n\t}\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N * log(N))\r\n    Space Complexity: O(log N)\r\n\r\n    Where 'N' is the number of elements in the given array/list.\r\n'''\r\n\r\nfrom sys import stdin\r\n\r\ndef possibleToMakeTriangle(arr):\r\n\r\n    # Sort the array in non-decreasing order.\r\n    arr.sort()\r\n    \r\n    n = len(arr)\r\n\r\n    # Iterate the array/list.\r\n    for i in range(n-2):\r\n\r\n        # Return true if sum of first 2 elements is greater than the 3rd element.\r\n        if (arr[i] + arr[i + 1] > arr[i + 2]):\r\n            return True\r\n\r\n    # If no non-degenerate triangle can be formed return false.\r\n    return False\r\n\r\n\r\n# Main code\r\nt = int(input().strip())\r\n\r\nfor i in range(t):\r\n    n = list(map(int, stdin.readline().strip().split(\" \")))\r\n\r\n    if len(n) > 1:\r\n        arr = n\r\n    else:\r\n        arr = list(map(int, stdin.readline().strip().split(\" \")))\r\n\r\n    if (possibleToMakeTriangle(arr)):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}