{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10328,
            "title": "Friends Pairing Problem",
            "titleSlug": "friends-pairing-problem_1214625",
            "content": "<h4 id=\"you-are-given-an-integer-n-which-denotes-there-are-n-friends-you-are-supposed-to-form-some-pairs-them-satisfying-the-following-conditions\">You are given an integer \u2018N\u2019, which denotes there are \u2018N\u2019 friends. You are supposed to form some pairs them satisfying the following conditions:</h4>\n\n<h4 id=\"1-each-friend-can-be-paired-with-some-other-friend-or-remain-single\">1. Each friend can be paired with some other friend or remain single.</h4>\n\n<h4 id=\"2-each-friend-can-be-a-part-of-at-most-one-pair\">2. Each friend can be a part of at most one pair.</h4>\n\n<h4 id=\"you-are-supposed-to-find-the-total-number-of-ways-in-which-the-pairing-can-be-done-satisfying-both-conditions-since-the-number-of-ways-can-be-quite-large-you-should-find-the-answer-modulo-1000000007-10-9-7\">You are supposed to find the total number of ways in which the pairing can be done satisfying both conditions. Since the number of ways can be quite large, you should find the answer modulo 1000000007(10^9+7).</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. Return the final answer by doing a mod with 10^9 + 7.\n2. Pairs {A, B} and {B, A} are considered the same.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. The test cases follow.\n\nThe first line of each test case contains one integer, \u2018N\u2019, denoting the number of friends.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the total number of ways in which the pairing can be done.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1&lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^4\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\n1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>In the first test case, there are three friends, and the following pairings can be done:\nAll single Combination: {1}, {2}, {3}\nOne pair Combination: {1}, {2, 3} ; {1, 2}, {3} ; {1, 3}, {2}\nIn the case of zero pairings, nobody is paired with each other. This is one of the possible answers.\nIn the case of one pair combination, Three answers are possible: the Second is paired with the Third, the First is paired with the Second, and the First is paired with the third.\nHere, Two pairs can\u2019t be made as there are only four friends.\nSo, the answer is 1 + 3 = 4\n\nIn the second test case, there is only one friend and can\u2019t be paired with any other. So, the answer is 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2   \n10\n2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>9496\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 15,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer 'N' representing the number of friends, determine the total number of ways to form pairs such that:\n\n1.  Each friend can either be paired with another friend or remain single.\n2.  Each friend can be part of at most one pair.\n\nCalculate the number of possible pairings modulo 1000000007 (10^9 + 7).\n\nNote:\n\n*   Return the final answer modulo 10^9 + 7.\n*   Pairs {A, B} and {B, A} are considered identical.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^4",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3",
                        "output": "4",
                        "explanation": "With three friends:\n\n*   All single: {1}, {2}, {3} - 1 way.\n*   One pair: {1}, {2, 3}; {1, 2}, {3}; {1, 3}, {2} - 3 ways.\n\nTotal: 1 + 3 = 4"
                    },
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": "With only one friend, the only possibility is for them to remain single."
                    },
                    {
                        "input": "10",
                        "output": "9496",
                        "explanation": null
                    },
                    {
                        "input": "2",
                        "output": "2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Recursively check how many options the nth person has?</p>",
            "<p>Do you think that there are overlapping subproblems? Can Dynamic Programming make it better?</p>",
            "<p>Can you solve the problem iteratively?</p>",
            "<p>Can we save the extra O(N) space? Can you observe in the current recursive call how many previous values are used?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}