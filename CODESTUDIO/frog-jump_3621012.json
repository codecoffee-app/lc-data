{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16679,
            "title": "Frog Jump",
            "titleSlug": "frog-jump_3621012",
            "content": "<h4 id=\"there-is-a-frog-on-the-1st-step-of-an-n-stairs-long-staircase-the-frog-wants-to-reach-the-nth-stair-height-i-is-the-height-of-the-i-1-th-stair-if-frog-jumps-from-ith-to-jth-stair-the-energy-lost-in-the-jump-is-given-by-absolute-value-of-height-i-1-height-j-1-if-the-frog-is-on-ith-staircase-he-can-jump-either-to-i-1-th-stair-or-to-i-2-th-stair-your-task-is-to-find-the-minimum-total-energy-used-by-the-frog-to-reach-from-1st-stair-to-nth-stair\">There is a frog on the &#39;1st&#39; step of an &#39;N&#39; stairs long staircase. The frog wants to reach the &#39;Nth&#39; stair. &#39;HEIGHT[i]&#39; is the height of the &#39;(i+1)th&#39; stair.If Frog jumps from &#39;ith&#39; to &#39;jth&#39; stair, the energy lost in the jump is given by absolute value of ( HEIGHT[i-1] - HEIGHT[j-1] ). If the Frog is on &#39;ith&#39; staircase, he can jump either to &#39;(i+1)th&#39; stair or to &#39;(i+2)th&#39; stair. Your task is to find the minimum total energy used by the frog to reach from &#39;1st&#39; stair to &#39;Nth&#39; stair.</h4>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>If the given \u2018HEIGHT\u2019 array is [10,20,30,10], the answer 20 as the frog can jump from 1st stair to 2nd stair (|20-10| = 10 energy lost) and then a jump from 2nd stair to last stair (|10-20| = 10 energy lost). So, the total energy lost is 20.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer,&#39; N\u2019, denoting the number of stairs in the staircase,\n\nThe next line contains \u2018HEIGHT\u2019 array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return an integer corresponding to the minimum energy lost to reach the last stair.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 100000.\n1 &lt;= HEIGHTS[i] &lt;= 1000 .\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\n10 20 30 10\n3\n10 50 10\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>20\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case,\nThe frog can jump from 1st stair to 2nd stair (|20-10| = 10 energy lost).\nThen a jump from the 2nd stair to the last stair (|10-20| = 10 energy lost).\nSo, the total energy lost is 20 which is the minimum. \nHence, the answer is 20.\n\nFor the second test case:\nThe frog can jump from 1st stair to 3rd stair (|10-10| = 0 energy lost).\nSo, the total energy lost is 0 which is the minimum. \nHence, the answer is 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n8\n7 4 4 2 6 6 3 4 \n6\n4 8 3 10 4 4 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>7\n2\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"hints\">Hints:</h5>\n\n<pre><code>1. Think about all the possibilities at each stair.\n2. Using recursion, try to divide the problem into subproblems and calculate the answer for each subproblem only once - store it for reusing in the future.\n3. The above can also be done iteratively.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 761,
            "dislikes": "NA",
            "rephrased": {
                "body": "A frog is positioned on the first step of an N-step staircase. The frog aims to reach the Nth step. Given an array 'heights' where heights[i] represents the height of the (i+1)th stair, determine the minimum total energy the frog expends to reach the Nth stair.  The frog can jump either one or two steps forward from its current position. The energy lost during a jump from stair 'i' to stair 'j' is the absolute difference in their heights, i.e., abs(heights[i-1] - heights[j-1]).  Find the minimum total energy required for the frog to reach the top (Nth stair).",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 100000",
                    "1 <= HEIGHTS[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "n = 4, heights = [10, 20, 30, 10]",
                        "output": "20",
                        "explanation": "The frog jumps from the 1st to the 2nd stair (energy loss |20-10| = 10), and then from the 2nd to the 4th stair (energy loss |10-20| = 10). Total energy loss is 20, which is the minimum."
                    },
                    {
                        "input": "n = 3, heights = [10, 50, 10]",
                        "output": "0",
                        "explanation": "The frog jumps from the 1st to the 3rd stair (energy loss |10-10| = 0). Total energy loss is 0, which is the minimum."
                    },
                    {
                        "input": "n = 8, heights = [7, 4, 4, 2, 6, 6, 3, 4]",
                        "output": "7",
                        "explanation": "One optimal path: 1 -> 2 -> 4 -> 7 -> 8 with energy cost |7-4| + |4-2| + |2-3| + |3-4| = 3 + 2 + 1 + 1 = 7"
                    },
                    {
                        "input": "n = 6, heights = [4, 8, 3, 10, 4, 4]",
                        "output": "2",
                        "explanation": "One optimal path: 1 -> 3 -> 5 -> 6 with energy cost |4-3| + |3-4| + |4-4| = 1 + 1 + 0 = 2"
                    },
                    {
                        "input": "n = 2, heights = [10, 20]",
                        "output": "10",
                        "explanation": "The frog can only jump from stair 1 to stair 2 with energy cost |10-20| = 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n\n    where 'N' is the number of staris in the staircase.\n*/\n\nint frogJump(int n, vector<int> &heights)\n{\n    vector<int> dp(n+1, -1);\n\n    // Already at last stair.\n    dp[n] = 0;\n\n    // Only choice to take a single gap jump.\n    dp[n - 1] = abs(heights[n - 2] - heights[n - 1]);\n\n    for(int i = n-2; i > -1; i--){\n\n        int oneJump = dp[i + 1] + abs(heights[i - 1] - heights[i]);\n        int twoJump = dp[i + 2] + abs(heights[i - 1] - heights[i + 1]);\n\n        dp[i] = min(oneJump, twoJump);\n    }\n\n    int ans = dp[1];\n    return ans;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n\n    where 'N' is the number of staris in the staircase.\n*/\n\npublic class Solution {\n\n\tpublic static int frogJump(int n, int heights[]) {\n\t\tint dp[] = new int[n + 1];\n\t\tfor (int i = 0; i <= n; i++) {\n\t\t\tdp[i] = -1;\n\t\t}\n\t\t// Already at last stair.\n\t\tdp[n] = 0;\n\t\t// Only choice to take a single gap jump.\n\t\tdp[n - 1] = Math.abs(heights[n - 2] - heights[n - 1]);\n\n\t\tfor (int i = n - 2; i > 0; i--) {\n\n\t\t\tint oneJump = dp[i + 1] + Math.abs(heights[i - 1] - heights[i]);\n\t\t\tint twoJump = dp[i + 2] + Math.abs(heights[i - 1] - heights[i + 1]);\n\n\t\t\tdp[i] = Math.min(oneJump, twoJump);\n\t\t}\n\n\t\tint ans = dp[1];\n\t\treturn ans;\n\t}\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n\r\n    where 'N' is the number of staris in the staircase.\r\n\"\"\"\r\n\r\nfrom typing import *\r\n\r\ninf = 10 ** 9\r\n\r\n#sradak\r\ndef frogJump(n: int, heights: List[int]) -> int:\r\n\r\n    # DP table to memoize the solution.\r\n    dp = [-1 for __ in range(n + 1)]\r\n\r\n    # Already at last stair.\r\n    dp[n] = 0\r\n\r\n    # Only choice to take a single gap jump.\r\n    dp[n - 1] = abs(heights[n - 2] - heights[n - 1])\r\n\r\n    for i in range(n - 2, 0, -1):\r\n\r\n        oneJump = dp[i + 1] + abs(heights[i - 1] - heights[i])\r\n        twoJump = dp[i + 2] + abs(heights[i - 1] - heights[i + 1])\r\n\r\n        dp[i] = min(oneJump, twoJump)\r\n\r\n    ans = dp[1]\r\n    return ans",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}