{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12704,
            "title": "Game of Dominoes",
            "titleSlug": "game-of-dominoes_1473823",
            "content": "<h4 id=\"rafiq-loves-to-play-with-dominoes-on-his-birthday-his-father-gifted-him-n-piles-of-dominoes-where-each-pile-contains-a-positive-number-of-dominoes-stacked-above\">Rafiq loves to play with dominoes. On his birthday his father gifted him \u2018N\u2019 piles of dominoes, where each pile contains a positive number of dominoes stacked above.</h4>\n\n<h4 id=\"rafiq-loves-to-play-with-piles-if-they-are-of-equal-heights-so-his-father-decides-to-make-changes-to-the-piles-his-father-wonders-for-each-consecutive-window-of-length-k-what-is-the-minimum-cost-to-make-them-all-of-the-equal-height-hence-his-father-wants-to-calculate-the-cost-for-each-window\">Rafiq loves to play with piles if they are of equal heights, so his father decides to make changes to the piles. His father wonders for each consecutive window of length \u2018K\u2019 what is the minimum cost to make them all of the equal height. Hence his father wants to calculate the cost for each window.</h4>\n\n<h4 id=\"the-cost-for-removing-and-adding-one-domino-on-any-pile-is-one-unit\">The cost for removing and adding one domino on any pile is one unit.</h4>\n\n<h4 id=\"determine-what-is-the-cost-to-make-all-elements-equal-in-a-window-of-size-k-for-all-windows-of-size-k-in-an-n-sized-array-list-heights\">Determine what is the cost to make all elements equal in a window of size &#39;K&#39;, for all windows of size &#39;K&#39; in an &#39;N&#39;-sized array/list &#39;heights&#39;.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain a single integer \u2018N\u2019 i.e., length of the pile and \u2018K\u2019 size of the window.\n\nThe next line of each test case contains &#39;N&#39; numbers a1, a2, a3... aN denoting the initial height of each pile.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, output the minimum cost for each window.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10000 \n1 &lt;= K &lt;= N \n1 &lt;= height[i] &lt;= 10^5 \n\nwhere &#39;T&#39; is the number of test cases, &#39;N&#39; is the number of piles, &#39;K&#39; is the size of the window as discussed above and &#39;height[i]&#39; represents the height of each pile.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n6 2\n2 4 1 1 2 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 3 0 1 1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>All the windows or subarray of size 2 are [2,4] , [4,1] , [1,1] , [1,2] , [2,3]. The cost of each subarray is 2,3,0,1,1. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n6 3\n3 1 1 1 4 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2 0 3 3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2:</h5>\n\n<pre><code>All the windows or subarray of size 3 are [3,1,1] , [1,1,1] , [1,1,4] , [1,4,4] , [2,3]. The cost of each subarray is 2,0,3,3.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Rafiq receives N piles of dominoes for his birthday. Each pile has a certain number of dominoes. He wants to make all piles within consecutive windows of size K have equal heights. The cost to add or remove one domino from a pile is one unit. Determine the minimum cost to equalize the piles for each window of size K within the N-sized array 'heights'.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10000",
                    "1 <= K <= N",
                    "1 <= height[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "6 2\n2 4 1 1 2 3",
                        "output": "2 3 0 1 1",
                        "explanation": "Given an array of size 6 and window size 2.\nWindow 1: [2, 4] - Equalizing to 2 costs 2, to 4 costs 2. Minimum cost is 2 (equalizing to 2).\nWindow 2: [4, 1] - Equalizing to 1 costs 3, to 4 costs 3. Minimum cost is 3 (equalizing to 1).\nWindow 3: [1, 1] - Already equal, cost is 0.\nWindow 4: [1, 2] - Equalizing to 1 costs 1, to 2 costs 1. Minimum cost is 1 (either).\nWindow 5: [2, 3] - Equalizing to 2 costs 1, to 3 costs 1. Minimum cost is 1 (either)."
                    },
                    {
                        "input": "6 3\n3 1 1 1 4 4",
                        "output": "2 0 3 3",
                        "explanation": "Given an array of size 6 and window size 3.\nWindow 1: [3, 1, 1] - To equalize to 1 costs 2+0+0=2, To equalize to 3 costs 0+2+2=4.  Minimum Cost is 2(to 1).\nWindow 2: [1, 1, 1] - Already equal, cost is 0.\nWindow 3: [1, 1, 4] - To equalize to 1 costs 0+0+3=3, To equalize to 4 costs 3+3+0=6. Minimum Cost is 3 (to 1).\nWindow 4: [1, 4, 4] - To equalize to 1 costs 0+3+3=6, To equalize to 4 costs 3+0+0=3. Minimum Cost is 3 (to 4)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to notice that the optimal cost to make all elements equal is at the median of that window.</p>",
            "<p>Try to think about how we could calculate the cost of one window from its previous adjacent window.</p>",
            "<p>Notice from the previous approach that we are working separately on half elements and separately on other half elements, we will try to utilize this.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}