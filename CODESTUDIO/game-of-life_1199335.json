{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10280,
            "title": "Game of Life",
            "titleSlug": "game-of-life_1199335",
            "content": "<h4 id=\"you-re-given-a-board-of-n-m-size-each-element-of-this-board-is-represented-by-either-0-or-1-where-0-means-dead-and-1-means-live-each-element-can-interact-with-all-of-its-eight-neighbors-using-the-following-four-rules\">You\u2019re given a board of N * M size. Each element of this board is represented by either 0 or 1, where 0 means \u2018dead\u2019 and 1 means \u2018live\u2019. Each element can interact with all of its eight neighbors using the following four rules.</h4>\n\n<pre><code>If any live cell has less than two live neighbors, then it dies.\n\nIf any live cell has two or three live neighbors, then it lives onto the next generation.\n\nIf any live cell has more than three live neighbors, then it dies.\n\nA dead element with exactly three live neighbors becomes a live element.\n\nYour task is to print the next state of this board using these four rules.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains an integer T denoting the number of test cases.\n\nThe first line of every test case contains two space-separated integers N and M, denoting the number of rows and columns, respectively.\n\nThe next N lines of each test case contain M space-separated integers denoting the elements of the board.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For every test case, print the next state of the board using the four rules described in the problem statement. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= M, N &lt;= 1000    \n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n2 2\n1 0\n0 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code> 0 0\n 0 0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000259_1614223646_tc1%20(1).png\" alt=\"alt text\"></p>\n\n<pre><code>The first element(0,0) and the fourth element(1,1) are \u2018live\u2019 and have one live and two dead neighbors. Hence they both will die and become 0 in the next state. The second element(0,1) and the third element(1,0) are \u2018dead\u2019 and have one dead and two live neighbors. Hence they will also die and become 0 in the next state.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n3 3\n0 0 1\n0 0 0\n1 0 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0 0 0\n0 1 0\n0 0 0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D board of size N x M, where each cell represents either a live (1) or dead (0) cell, determine the next state of the board based on the following rules:\n\n1.  Any live cell with fewer than two live neighbors dies (underpopulation).\n2.  Any live cell with two or three live neighbors lives on to the next generation.\n3.  Any live cell with more than three live neighbors dies (overpopulation).\n4.  Any dead cell with exactly three live neighbors becomes a live cell (reproduction).\n\nImplement a function that takes the board and its dimensions as input and returns the next state of the board after applying these rules.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= M, N <= 1000",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 2, m = 2, board = [[1, 0], [0, 1]]",
                        "output": "[[0, 0], [0, 0]]",
                        "explanation": "The first element(0,0) and the fourth element(1,1) are \u2018live\u2019 and have one live and two dead neighbors. Hence they both will die and become 0 in the next state. The second element(0,1) and the third element(1,0) are \u2018dead\u2019 and have one dead and two live neighbors. Hence they will also die and become 0 in the next state."
                    },
                    {
                        "input": "n = 3, m = 3, board = [[0, 0, 1], [0, 0, 0], [1, 0, 1]]",
                        "output": "[[0, 0, 0], [0, 1, 0], [0, 0, 0]]",
                        "explanation": "Applying the rules to the initial board results in the given next state.  The cell at (1,1) which was initially dead gets 3 live neighbours and hence becomes alive"
                    },
                    {
                        "input": "n = 4, m = 4, board = [[0,1,0,0],[0,0,1,0],[1,0,1,0],[0,0,0,0]]",
                        "output": "[[0, 0, 0, 0], [1, 0, 1, 0], [0, 1, 1, 0], [0, 0, 0, 0]]",
                        "explanation": "Applying the game of life rules will cause the board to evolve to the specified output"
                    },
                    {
                        "input": "n = 1, m = 1, board = [[1]]",
                        "output": "[[0]]",
                        "explanation": "A single live cell with no neighbors dies due to underpopulation."
                    },
                    {
                        "input": "n = 1, m = 1, board = [[0]]",
                        "output": "[[0]]",
                        "explanation": "A single dead cell cannot become alive as it needs exactly 3 live neighbours."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Keep a count of the live elements.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}