{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22776,
            "title": "Game of XOR",
            "titleSlug": "game-of-xor_6048775",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-integers-of-size-n-and-an-integer-x-you-have-to-perform-the-following-operation-exactly-k-times\">You are given an array \u2018ARR\u2019 of integers of size \u2018N\u2019 and an integer \u2018X\u2019. You have to perform the following operation exactly \u2018K\u2019 times.</h4>\n\n<pre><code>First sort the array then replace every odd indexed element \u2018ARR[i]\u2019 with \u2018ARR[i]\u2019 \u2295 \u2018X\u2019 \nWhere 1 &lt;= \u2018i\u2019 &lt;= \u2018N\u2019 and \u2295 is bitwise xor.\n</code></pre>\n\n<h4 id=\"after-completion-of-the-operations-tell-the-minimum-and-maximum-number-in-the-array-arr-respectively\">After completion of the operations tell the minimum and maximum number in the array \u2018ARR\u2019 respectively.</h4>\n\n<h4 id=\"note-in-the-problem-statement-1-based-indexing-is-used-and-in-the-code-0-based-indexing-is-used\">Note: In the Problem Statement 1-based indexing is used and in the code, 0-based indexing is used.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018N\u2019 = 4  \u2018K\u2019 = 1  \u2018X\u2019 = 2 \u2018ARR\u2019 = [2, 3, 1 , 4]\n\nOutput: 1 \nThe execution of the operation is as follows :\n[2, 3, 1, 4] =&gt;Sort =&gt; [1, 2, 3, 4] =&gt; [1\u22952, 2, 3\u22952, 4] =&gt; [3, 2, 1, 4]\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains \u2018T\u2019, denoting the number of test cases.    \n\nThe First line of each test case contains three integers \u2018N\u2019, \u2018K\u2019, \u2018X\u2019.\n\nThe Second line contains \u2018N\u2019 numbers representing elements of the \u2018ARR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Return Minimum and Maximum in order of the array \u2018ARR\u2019 after performing \u2018K\u2019 operations.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100   \n1 &lt;= N &lt;= 10^5\n1 &lt;= K &lt;= 10^4\n0 &lt;= X, ARR[i] &lt;= 1000\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 1 2\n2 3 1 4\n4 2 4  \n5 3 2 8 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 2\n2 8\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first test case:-\nThe execution of the operation is as follows :\n[2, 3, 1, 4] =&gt;Sort =&gt; [1, 2, 3, 4] =&gt; [1\u22952, 2, 3\u22952, 4] =&gt; [3, 2, 1, 4]\n\nFor the second test case:-\nThe execution of the operations is as follows :\n[5, 3, 2, 8] =&gt;Sort =&gt; [2, 3, 5, 8] =&gt; [2\u22954, 3, 5\u22954, 8] =&gt; [6, 3, 1, 8]\n[6, 3,1, 8] =&gt;Sort =&gt; [1, 3, 6, 8] =&gt; [1\u22954, 3, 6\u22954, 8] =&gt; [5, 3, 2, 8]\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5 3 3\n32 31 50 5 1 \n8 4 7\n28 43 43 18 39 33 16 30     \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2 49\n21 44    \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an array 'ARR' of integers of size 'N' and an integer 'X'. You must perform a specific operation exactly 'K' times.\n\nThe operation is as follows:\n\n1.  Sort the array 'ARR' in ascending order.\n2.  Replace every odd-indexed element 'ARR[i]' with 'ARR[i] \u2295 X', where 1 <= i <= N and \u2295 represents the bitwise XOR operation. Note that indexing is 1-based.\n\nAfter performing the operation 'K' times, determine the minimum and maximum values in the resulting array 'ARR'. Note that the code uses 0-based indexing.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^5",
                    "1 <= K <= 10^4",
                    "0 <= X, ARR[i] <= 1000",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 1 2\n2 3 1 4",
                        "output": "1 4",
                        "explanation": "Initially, ARR = [2, 3, 1, 4], K = 1, X = 2.\n\n1. Sort ARR: [1, 2, 3, 4]\n2. XOR odd-indexed elements: [1\u22952, 2, 3\u22952, 4] => [3, 2, 1, 4]\n\nMinimum value: 1\nMaximum value: 4"
                    },
                    {
                        "input": "4 2 4\n5 3 2 8",
                        "output": "2 8",
                        "explanation": "Initially, ARR = [5, 3, 2, 8], K = 2, X = 4\n\n1st Iteration:\n1. Sort ARR: [2, 3, 5, 8]\n2. XOR odd-indexed elements: [2\u22954, 3, 5\u22954, 8] => [6, 3, 1, 8]\n\n2nd Iteration:\n1. Sort ARR: [1, 3, 6, 8]\n2. XOR odd-indexed elements: [1\u22954, 3, 6\u22954, 8] => [5, 3, 2, 8]\n\nMinimum value: 2\nMaximum value: 8"
                    },
                    {
                        "input": "5 3 3\n32 31 50 5 1",
                        "output": "2 49",
                        "explanation": null
                    },
                    {
                        "input": "8 4 7\n28 43 43 18 39 33 16 30",
                        "output": "21 44",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Perform All the operations as given.</p>",
            "<p>Look at the max value of X * K.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}