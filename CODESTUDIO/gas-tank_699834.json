{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7565,
            "title": "Gas Tank",
            "titleSlug": "gas-tank_699834",
            "content": "<h4 id=\"you-have-a-car-with-a-gas-tank-of-infinite-capacity-there-are-n-gas-stations-along-a-circular-route-gas-stations-are-numbered-from-0-to-n-1-you-begin-the-journey-with-an-empty-tank-at-one-of-the-gas-stations-you-want-to-travel-around-the-circular-route-once-in-the-clockwise-direction-i-e-if-you-start-to-travel-from-station-i-then-you-will-go-to-i-1-i-2-n-1-0-1-2-i-1-and-then-return-back-to-i\">You have a car with a gas tank of infinite capacity.  There are \u2018N\u2019 gas stations along a circular route. Gas stations are numbered from 0 to N - 1. You begin the journey with an empty tank at one of the gas stations. You want to travel around the circular route once in the clockwise direction. I.e if you start to travel from station \u2018i\u2019, then you will go to i + 1, i + 2, \u2026, n - 1, 0, 1, 2, i - 1  and then return back to \u2018i\u2019.</h4>\n\n<h4 id=\"you-are-given-two-integer-arrays-gas-and-cost-gas-i-gives-the-amount-of-gas-available-at-station-i-and-cost-i-gives-the-amount-of-gas-required-to-travel-from-station-i-to-next-station-i-e-station-i-1-or-0-if-the-station-is-n-1\">You are given two integer arrays \u2018gas\u2019 and \u2018cost\u2019. \u2018gas[i]\u2019 gives the amount of gas available at station \u2018i\u2019 and cost[i] gives the amount of gas required to travel from station \u2018i\u2019 to next station i.e station \u2018i\u2019+1 (or 0 if the station is N - 1).</h4>\n\n<h4 id=\"return-the-starting-gas-stations-index-if-it-is-possible-to-complete-cycle-of-given-circular-route-once-in-the-clockwise-direction-if-there-are-multiple-possible-starting-gas-station-s-indexes-then-return-the-minimum-of-those-gas-station-indexes-if-there-is-no-such-gas-station-then-return-1\">Return the starting gas station&#39;s index if it is possible to complete cycle of given circular route once in the clockwise direction. If there are multiple possible starting gas station\u2019s indexes, then return the minimum of those gas station indexes. If there is no such gas station then return -1.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run, then the T test cases follow.\n\nThe first line of each test case contains a positive integer &#39;N&#39; which represents the number of gas stations.\n\nThe second line of each test case contains &#39;N&#39; space-separated integers representing the integer array &#39;gas&#39;.\n\nThe third line of each test case contains &#39;N&#39; space-separated integers representing the integer array &#39;cost&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer denoting the minimum index of the starting gas station if you are able to travel around the cycle once, otherwise print -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;=50\n1 &lt;= N &lt;= 10 ^ 4\n0 &lt;= GAS[i] &lt;= 10 ^ 5\n0 &lt;= COST[i] &lt;= 10 ^ 5\n\nWhere GAS[i] represents the ith element of &#39;GAS&#39; array,\nCOST[i] represents the ith element of &#39;COST&#39; array.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n2\n1 2\n2 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>Test Case 1:\nIf you start from index 0, you can fill in 1 unit of gas. Now your tank has 1 unit of gas. But you need 2 units of gas to travel to station 1. Thus you can not start at station 0.\nIf you start from index 1, you can fill in 2 units of gas. Now your tank has 2 units of gas. You need 1 unit of gas to get to station 0. So, you travel to station 0 and still have 1 unit of gas left. You fill in 1 unit of additional gas, making your current gas = 2 unit. It costs you 2 amounts of gas to get to station 1, which you do and complete the cycle. Thus you can start at index 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n5\n1 2 3 4 5\n3 4 5 1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h5>\n\n<pre><code>Test Case 1:\nIf you start from index 3 and fill all available gas at each station, then you can reach station 4 with 3 units of gas, station 0 with 6 units of gas, station 1 with 4 units of gas, station 2 with 2 units of gas, and back to station 3 after consuming all the gas. \nWe can show that index 3 is the minimum index of the gas station from where the complete circular trip is possible \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 14,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a circular route with 'N' gas stations, where 'gas[i]' represents the amount of gas available at station 'i' and 'cost[i]' represents the cost to travel from station 'i' to the next.  You start with an empty tank and want to complete one full cycle. Determine the minimum starting gas station index that allows you to complete the cycle. If multiple starting points exist, return the smallest index. If no such starting point exists, return -1.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10 ^ 4",
                    "0 <= GAS[i] <= 10 ^ 5",
                    "0 <= COST[i] <= 10 ^ 5"
                ],
                "testcases": [
                    {
                        "input": "n = 2, gas = [1, 2], cost = [2, 1]",
                        "output": "1",
                        "explanation": "Starting at index 0 fails because you have 1 unit of gas but need 2 to reach index 1. Starting at index 1 succeeds. You have 2 units of gas, need 1 to reach index 0 (leaving you with 1), fill 1 at index 0 (total 2), and need 2 to return to index 1, completing the cycle."
                    },
                    {
                        "input": "n = 5, gas = [1, 2, 3, 4, 5], cost = [3, 4, 5, 1, 2]",
                        "output": "3",
                        "explanation": "Starting at index 3 allows you to complete the circuit.  The gas available exceeds the cost when starting at this station. Starting from any index < 3 it is not possible to complete the cycle. Hence 3 is the minimum index."
                    },
                    {
                        "input": "n = 3, gas = [1, 2, 3], cost = [4, 5, 6]",
                        "output": "-1",
                        "explanation": "It's not possible to complete the cycle starting from any station because the total cost exceeds the total gas available."
                    },
                    {
                        "input": "n = 4, gas = [2, 3, 4, 5], cost = [3, 4, 5, 2]",
                        "output": "3",
                        "explanation": "Starting at index 3 will succeed. Starts at other stations will fail."
                    },
                    {
                        "input": "n = 1, gas = [5], cost = [2]",
                        "output": "0",
                        "explanation": "A single station example, the gas at that station has to be greater than or equal to cost from that station in order to be a viable starting position."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For every index, check whether we can complete the cycle or not.</p>",
            "<p>Eliminate those stations from which it is not possible to complete the cycle.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}