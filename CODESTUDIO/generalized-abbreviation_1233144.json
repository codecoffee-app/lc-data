{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10560,
            "title": " Generalized Abbreviation",
            "titleSlug": "generalized-abbreviation_1233144",
            "content": "<h4 id=\"you-are-given-a-string-str-consisting-of-english-lowercase-letters\">You are given a string \u2018STR\u2019 consisting of English lowercase letters.</h4>\n\n<h4 id=\"your-task-is-to-find-out-all-the-generalised-abbreviations-of-str-and-print-an-array-list-of-these-abbreviations-sorted-in-increasing-order\">Your task is to find out all the generalised abbreviations of \u2018STR\u2019 and print an array/list of these abbreviations sorted in increasing order.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>A string is said to be a generalised abbreviations string of \u2018STR\u2019 if we remove a substring of length \u2018X\u2019 from \u2018STR\u2019 and put the number \u2018X\u2019 at the place of the removed substring.\n\nWe can not remove two consecutive substrings or we can say generalised abbreviations will never have two consecutive numbers.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>If \u2018STR\u2019 = \u201cabc\u201d,\nSorted generalized abbreviations of \u2018STR\u2019 are: [\u201c1b1\u201d, \u201c1bc\u201d, \u201c2c\u201d, \u201c3\u201d, \u201ca1c\u201d, \u201ca2\u201d, \u201cab1\u201d, \u201cabc\u201d].\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases.\nThen the T test cases follow.\n\nThe first and the only line of each test case contains a string \u2018STR\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>For every test case, print all the generalised abbreviations of \u2018STR\u2019 separated by a single space.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You don\u2019t have to print anything. It has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1&lt;= T &lt;=10\n1&lt;= |STR| &lt;= 20\n\nWhere |STR| is length of String &#39;STR&#39;.\n\nTime limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\nab\nxyz\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>1b  2  a1  ab\n1y1  1yz  2z  3  x1z   x2   xy1   xyz\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h4>\n\n<pre><code>For test case 1:\n&quot;ab&quot; can be written as {1b,  2,  a1,  ab}.\n\nFor test case 2:\n&quot;xyz&quot; can be written as {1y1, 1yz,  2z,  3,  x1z,   x2,   xy1,   xyz}.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\nn\ncode\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>1 n\n1o1e  1o2  1od1  1ode  2d1  2de  3e  4  c1d1  c1de  c2e  c3  co1e  co2  cod1  code \n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2:</h4>\n\n<pre><code>For test case 1:\n&quot;n&quot; can be written as {1, n}.\n\nFor test case 2:\n&quot;code&quot; can be written as {1o1e,  1o2,  1od1,  1ode, 2d1,  2de,  3e,  4,  c1d1,  c1de,  c2e,  c3,  co1e,  co2,  cod1,  code}.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 11,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'STR' consisting of lowercase English letters, generate all possible generalized abbreviations of 'STR'. A generalized abbreviation replaces substrings of 'STR' with their lengths as numbers.  The abbreviations should not have consecutive numbers. Return the list of abbreviations sorted lexicographically.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |STR| <= 20",
                    "|STR| is the length of the string 'STR'."
                ],
                "testcases": [
                    {
                        "input": "str = \"ab\"",
                        "output": "1b  2  a1  ab",
                        "explanation": "\"ab\" can be written as {1b,  2,  a1,  ab}."
                    },
                    {
                        "input": "str = \"xyz\"",
                        "output": "1y1  1yz  2z  3  x1z   x2   xy1   xyz",
                        "explanation": "\"xyz\" can be written as {1y1, 1yz,  2z,  3,  x1z,   x2,   xy1,   xyz}."
                    },
                    {
                        "input": "str = \"n\"",
                        "output": "1 n",
                        "explanation": "\"n\" can be written as {1, n}."
                    },
                    {
                        "input": "str = \"code\"",
                        "output": "1o1e  1o2  1od1  1ode  2d1  2de  3e  4  c1d1  c1de  c2e  c3  co1e  co2  cod1  code",
                        "explanation": "\"code\" can be written as {1o1e,  1o2,  1od1,  1ode, 2d1,  2de,  3e,  4,  c1d1,  c1de,  c2e,  c3,  co1e,  co2,  cod1,  code}."
                    },
                    {
                        "input": "str = \"a\"",
                        "output": "1 a",
                        "explanation": "\"a\" can be written as {\"1\", \"a\"}."
                    },
                    {
                        "input": "str = \"abcde\"",
                        "output": "1b1d1  1b1de  1b2e  1b3  1bc1e  1bc2  1bcd1  1bcde  2c1d1  2c1de  2c2e  2c3  3d1  3de  4e  5  a1c1d1  a1c1de  a1c2e  a1c3  a2d1  a2de  a3e  a4  ab1d1  ab1de  ab2e  ab3  abc1e  abc2  abcd1  abcde",
                        "explanation": "All possible valid abbreviations of the string \"abcde\" in lexicographical order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Recursively trying to get all the string by noting count of current string length.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}