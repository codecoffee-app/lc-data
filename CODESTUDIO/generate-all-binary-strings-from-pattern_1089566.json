{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9750,
            "title": "Generate all binary strings from pattern",
            "titleSlug": "generate-all-binary-strings-from-pattern_1089566",
            "content": "<h4 id=\"youre-given-a-string-str-containing-0-1-and-special-characters-your-task-is-to-generate-all-the-strings-that-are-possible-by-replacing-the-special-character-with-either-of-the-characters-0-or-1\">You&#39;re given a string &#39;STR&#39; containing \u20180\u2019, \u20181\u2019 and \u2018?\u2019 special characters. Your task is to generate all the strings that are possible by replacing the special character \u2018?\u2019, with either of the characters \u20180\u2019 or \u20181\u2019.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; denoting the number of test cases.\n\nThe first line and the only line of each test case contains a string &#39;STR&#39; containing \u20181\u2019, \u20180\u2019, and \u2018?\u2019 only. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return all the possible strings in a sorted order(from lexicographically smallest to largest) that can be generated in the manner as described in the problem statement.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. You don\u2019t need to print anything, It has already been taken care of. Just implement the given function.\n\n2. It is guaranteed that the number of special characters will not be more than 14.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= |STR| &lt;= 30\n\nWhere &#39;|STR|&#39; denotes the length of the string &#39;STR&#39;.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1?0\n?\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>110\n100\n0\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h5>\n\n<pre><code>In test case 1, There is only 1 \u2018?\u2019 at the second position, hence we can either replace it with either with 0 or 1, Hence 110 and 101 are the only two possible outputs.\n\nIn test case 2, There is only one special character which can be replaced by either 0 or 1, Hence 0 and 1 are the possible outputs.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1??0\n1??0?101\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1000\n1010\n1100\n1110\n10000101\n10001101\n10100101\n10101101\n11000101\n11001101\n11100101\n11101101\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2:</h5>\n\n<pre><code>In test case 1, &#39;?&#39; is present at 2,3 positions of the string, Hence there are 4 possible strings that can be formed by replacing &#39;?&#39; with 0 or 1 and they are 1000, 1010, 1100, 1110.\n\nIn test case 2, \u2018?\u2019 is present at 2,3 and 5 positions of the string. Hence there are 8 possible strings that can be formed by replacing &#39;?&#39; with 0 or 1 and they are 10000101, 10001101, 10100101, 10101101, 11000101, 11001101, 11100101, 11101101.\n\nIn test case 2, \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'STR' containing '0', '1', and '?' characters, generate all possible strings by replacing each '?' with either '0' or '1'. The generated strings should be in lexicographically sorted order.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= |STR| <= 30",
                    "Where '|STR|' denotes the length of the string 'STR'.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1?0",
                        "output": "100\n110",
                        "explanation": "The '?' at the second position can be replaced with '0' or '1', resulting in the strings '100' and '110'. The output is lexicographically sorted."
                    },
                    {
                        "input": "?",
                        "output": "0\n1",
                        "explanation": "The '?' can be replaced with '0' or '1', resulting in the strings '0' and '1'. The output is lexicographically sorted."
                    },
                    {
                        "input": "1??0",
                        "output": "1000\n1010\n1100\n1110",
                        "explanation": "The two '?' characters can be replaced in four different ways: '00', '01', '10', and '11'. This results in the strings '1000', '1010', '1100', and '1110'. The output is lexicographically sorted."
                    },
                    {
                        "input": "1??0?101",
                        "output": "10000101\n10001101\n10100101\n10101101\n11000101\n11001101\n11100101\n11101101",
                        "explanation": "The three '?' characters can be replaced in eight different ways, resulting in the strings '10000101', '10001101', '10100101', '10101101', '11000101', '11001101', '11100101', and '11101101'. The output is lexicographically sorted."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to build all possible binary strings after replacing all \u2018?\u2019.</p>",
            "<p>Think how you will replace all the \u2018?\u2019 iteratively?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}