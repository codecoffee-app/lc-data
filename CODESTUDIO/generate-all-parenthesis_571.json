{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 366,
            "title": "Generate all parenthesis",
            "titleSlug": "generate-all-parenthesis_571",
            "content": "<h4 id=\"given-n-pairs-of-parentheses-write-a-function-to-generate-and-print-all-combinations-of-well-formed-parentheses-that-is-you-need-to-generate-all-possible-valid-set-of-parenthesis-that-can-be-formed-with-given-number-of-pairs\">Given n pairs of parentheses, write a function to generate and print all combinations of well-formed parentheses. That is, you need to generate all possible valid set of parenthesis that can be formed with given number of pairs.</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>Integer n\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Print all possible valid parenthesis in different lines\n</code></pre>\n\n<h4 id=\"note-order-in-which-different-combinations-of-well-formed-parentheses-are-printed-in-different-lines-doesnt-matter\">Note: Order in which different combinations of well-formed parentheses are printed in different lines doesn&#39;t matter.</h4>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<h4 id=\"1-n-10\"><strong><em>1 &lt;= n &lt;= 10</em></strong></h4>\n<h5 id=\"sample-input\">Sample Input :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"sample-output\">Sample Output :</h5>\n\n<pre><code>((()))\n(()())\n(())()\n()(())\n()()()\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer 'n' representing the number of pairs of parentheses, implement the function `printWellFormedParanthesis(int n)` to generate and print all possible combinations of well-formed (valid) parentheses. Each valid combination should be printed on a new line. The order in which the combinations are printed does not matter.",
                "constraints": [
                    "1 <= n <= 10"
                ],
                "testcases": [
                    {
                        "input": "n = 3",
                        "output": "((()))\n(()())\n(())()\n()(())\n()()()",
                        "explanation": "For n=3, these are all the possible valid combinations of parentheses."
                    },
                    {
                        "input": "n = 1",
                        "output": "()",
                        "explanation": "For n=1, the only valid combination is '()'."
                    },
                    {
                        "input": "n = 2",
                        "output": "(())\n()()",
                        "explanation": "For n=2, these are all possible valid combinations of parentheses."
                    },
                    {
                        "input": "n = 4",
                        "output": "(((())))\n((()()))\n((())())\n((()))()\n(()(()))\n(()()())\n(()())()\n(())(())\n(())()()\n()((()))\n()(()())\n()(())()\n()()(())\n()()()()",
                        "explanation": "All the valid combinations for n=4."
                    },
                    {
                        "input": "n = 5",
                        "output": "((((()))))\n(((()())))\n(((()())()\n(((()))())\n((()(())))\n((()()()))\n((()())()\n((())(()))\n((())()())\n((()))(())\n((()))()()\n(()((())))\n(()(()()))\n(()(()())()\n(()(()))()\n(()()(()))\n(()()()())\n(()()())()\n(()())((()))\n(()())()()\n(())((()))\n(())(()())\n(())(())()\n(())()(())\n(())()()()\n()(((())))\n()((()()))\n()((()())()\n()(((()))()\n()((()(())))\n()((()()()))\n()((()())()\n()((())(()))\n()((())()())\n()((()))(())\n()((()))()()\n()(()((())))\n()(()(()()))\n()(()(()())()\n()(()(()))()\n()(()()(()))\n()(()()()())\n()(()()())()\n()(()())((()))\n()(()())()()\n()(())((()))\n()(())(()())\n()(())(())()\n()(())()(())\n()(())()()()\n()()((()))\n()()(()())\n()()(())()\n()()()(())\n()()()()()",
                        "explanation": "All valid combinations for n=5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}