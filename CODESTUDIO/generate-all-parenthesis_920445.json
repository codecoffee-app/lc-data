{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8858,
            "title": "Generate all parenthesis",
            "titleSlug": "generate-all-parenthesis_920445",
            "content": "<h4 id=\"you-are-given-an-integer-n-your-task-is-to-generate-all-combinations-of-well-formed-parenthesis-having-n-pairs\">You are given an integer <strong><em>&#39;N&#39;</strong></em>, your task is to generate all combinations of well-formed parenthesis having \u2018N\u2019 pairs.</h4>\n\n<p><br></p>\n\n<h4 id=\"a-parenthesis-is-called-well-formed-if-it-is-balanced-i-e-each-left-parenthesis-has-a-matching-right-parenthesis-and-the-matched-pairs-are-well-nested\">A parenthesis is called well-formed if it is balanced i.e. each left parenthesis has a matching right parenthesis and the matched pairs are well nested.</h4>\n\n<p><br></p>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>For \u2018N\u2019 = 3,\nAll possible combinations are: \n((()))\n(()())\n(())()\n()(())\n()()()\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>Input consists of a single line containing a single integer \u2018N\u2019, representing the number of pairs in the parentheses.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print list of strings denoting all possible combinations for the given integer in a lexicographically ascending order. \n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You are not required to print anything, it has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>()()\n(())\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>There are two possible combinations of parentheses:\n()()\n(())\nHere both the parenthesis are balanced so the possible outputs can be [ [ ()() ],[ (()) ] ].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>()()()()\n()()(())\n()(())()\n()(()())\n()((()))\n(())()()\n(())(())\n(()())()\n(()()())\n(()(()))\n((()))()\n((())())\n((()()))\n(((())))\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;N&#39; &lt;= 11\n\nTime Limit: 1 sec.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 68,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer 'N', generate all possible combinations of well-formed parentheses, where 'N' represents the number of pairs of parentheses. A parenthesis string is considered well-formed if each opening parenthesis has a corresponding closing parenthesis, and the pairs are correctly nested.",
                "constraints": [
                    "1 <= N <= 11",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "()()\n(())",
                        "explanation": "For N = 2, the two possible well-formed combinations are '()()' and '(())'.  Both strings have an equal number of opening and closing parentheses, and all pairs are correctly nested."
                    },
                    {
                        "input": "4",
                        "output": "()()()()\n()()(())\n()(())()\n()(()())\n()((()))\n(())()()\n(())(())\n(()())()\n(()()())\n(()(()))\n((()))()\n((())())\n((()()))\n(((())))",
                        "explanation": "For N = 4, all of the listed combinations are possible arrangements of 4 pairs of parentheses, where each is balanced and well-nested."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to fix both the opening and closing bracket at each index if possible.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}