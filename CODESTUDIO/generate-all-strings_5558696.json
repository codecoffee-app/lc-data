{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22185,
            "title": "Generate All Strings",
            "titleSlug": "generate-all-strings_5558696",
            "content": "<h4 id=\"you-are-given-a-string-s-of-length-n-which-consists-of-digits-from-0-to-9-only-if-the-mapping-of-characters-from-a-to-z-is-like-a-1-b-2-c-3-z-26-you-need-to-convert-the-given-string-of-digits-into-the-string-of-characters-using-the-mapping\">You are given a string \u2018S\u2019 of length \u2018N\u2019 which consists of digits from 0 to 9 only. If the mapping of characters from a to z is like a = 1, b = 2, c = 3\u2026. Z = 26. You need to convert the given string of digits into the string of characters using the mapping.</h4>\n\n<h4 id=\"print-all-the-possible-strings-that-can-be-generated-from-the-given-string-s-print-the-strings-in-non-decreasing-sorted-lexicographical-order\">Print all the possible strings that can be generated from the given string \u2018S\u2019. Print the strings in non-decreasing sorted lexicographical order.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>\u2018S\u2019 = \u201c112\u201d. \n\nOutput: [aab, al, kb]\n\nThe possible ways to convert the given strings is: \naab =&gt; a = 1, a = 1, b = 2,\nal =&gt; a = 1, l = 12\nkb =&gt; k = 11, b = 2\nHence, the final array is: [aab, al, kb].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain the integer &#39;T&#39;, denoting the number of test cases.\n\nThe first line of each test case contains a string \u2018S\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, you don\u2019t need to print anything just return an array of all possible strings sorted in non-decreasing lexicographical order.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= S.length &lt;= 20\nSum of length of strings over all test cases &lt;= 20\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1123\n125\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>aabc aaw alc kbc kw\nabe ay le\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first case:\naabc =&gt; a=1, a=1, b=2, c=3\naaw =&gt; a=1, a=1, w=23\nalc =&gt; a=1, l=12, c=3\nkbc =&gt; k=11, b=2, c=3\nkw =&gt; k=11, w=23\nSorting the strings in lexicographical order, so the final output is [aabc, aaw, alc, kbc, kw].\n\nFor the second case:\nabe =&gt; a=1, b=2, e=5\nle =&gt; l=12, e=5\nSorting the strings in lexicographical order, the final output is [abe le].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n721023\n871121\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>gbjbc gbjw \nhgaaba hgaau hgala hgkba hgku\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S' of length 'N' consisting of digits from 0 to 9, convert it into all possible strings of characters based on the mapping a=1, b=2, c=3, ..., z=26.  Return an array of all possible strings in non-decreasing lexicographical order.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= S.length <= 20",
                    "Sum of length of strings over all test cases <= 20",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1123",
                        "output": "aabc aaw alc kbc kw",
                        "explanation": "The possible decodings are:\n- aabc (1, 1, 2, 3)\n- aaw (1, 1, 23)\n- alc (1, 12, 3)\n- kbc (11, 2, 3)\n- kw (11, 23)\nThe sorted order is [aabc, aaw, alc, kbc, kw]."
                    },
                    {
                        "input": "125",
                        "output": "abe ay le",
                        "explanation": "The possible decodings are:\n- abe (1, 2, 5)\n- ay (1, 25)\n- le (12, 5)\nThe sorted order is [abe, ay, le]."
                    },
                    {
                        "input": "721023",
                        "output": "gbjbc gbjw",
                        "explanation": "The possible decodings are:\n- gbjbc (7, 2, 10, 2, 3)\n- gbjw (7, 2, 10, 23)\nThe sorted order is [gbjbc, gbjw]."
                    },
                    {
                        "input": "871121",
                        "output": "hgaaba hgaau hgala hgkba hgku",
                        "explanation": "The possible decodings are:\n- hgaaba (8, 7, 1, 1, 2, 1)\n- hgaau (8, 7, 1, 1, 21)\n- hgala (8, 7, 1, 12, 1)\n- hgkba (8, 7, 11, 2, 1)\n- hgku (8, 7, 11, 21)\nThe sorted order is [hgaaba, hgaau, hgala, hgkba, hgku]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of any way solution using backtracking?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}