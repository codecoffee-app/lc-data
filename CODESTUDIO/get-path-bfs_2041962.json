{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14168,
            "title": "Get Path - BFS",
            "titleSlug": "get-path-bfs_2041962",
            "content": "<h4 id=\"you-are-given-an-undirected-graph-g-v-e-where-v-is-the-number-of-vertices-and-e-is-the-number-of-edges-present-in-the-graph-and-two-integers-v1-and-v2-denoting-vertices-of-the-graph-find-and-print-the-path-from-v1-to-v2-if-exists-in-reverse-order-print-an-empty-list-if-there-is-no-path-between-v1-and-v2\">You are given an undirected graph G(V, E), where \u2018V\u2019 is the number of vertices and \u2018E\u2019 is the number of edges present in the graph and two integers \u2018v1\u2019 and \u2018v2\u2019 denoting vertices of the graph, find and print the path from \u2018v1\u2019 to \u2018v2\u2019 (if exists) in reverse order. Print an empty list if there is no path between \u2018v1\u2019 and \u2018v2\u2019.</h4>\n\n<h4 id=\"find-the-path-using-bfs-and-print-the-first-path-that-you-encountered\">Find the path using BFS and print the first path that you encountered.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Vertices are numbered through 0 to V - 1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. Then each testcase follow.\n\nThe first line of each test case contains two integers \u2018V\u2019 and \u2018E\u2019 denoting the number of vertices and edges in the graph.\n\nThe next \u2018E\u2019 lines of the test case contain two space-separated integers \u2018a\u2019 and \u2018b\u2019 denoting that there exists an edge between \u2018a\u2019 and \u2018b\u2019.\n\nThe last line of the test case contains two space-separated integers \u2018v1\u2019 and \u2018v2\u2019 denoting the starting vertex and ending vertex.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the path from \u2018v1\u2019 to \u2018v2\u2019 in reverse order.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function and return a list of paths.\n\nIf there is no path between the vertices return an empty list.If the path is valid then it will print true else it will print false.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= V &lt;= 1000\n1 &lt;= E &lt;= (V * (V - 1)) / 2\n0 &lt;= v1, v2 &lt;= V-1\n\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 4\n0 1\n0 3\n1 2\n2 3\n1 3\n6 3\n5 3\n0 1\n3 4\n0 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/getpath_dfs_st1-11767.png\"/> </p>\n\n<pre><code>In the first test case, there are two paths from 1 to 3. I.e. 1 -&gt; 2 -&gt; 3 or 1 -&gt; 0 -&gt; 3. So you can print any one of them.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/getpath_dfs_st2-11768.png\"/>  </p>\n\n<pre><code>In the second test case, there is no path from 0 to 3. Hence return an empty string.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2 1\n0 1\n1 0\n5 4\n0 1\n1 2\n2 3\n3 4\n0 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>true \ntrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph G(V, E), where V is the number of vertices (numbered from 0 to V-1) and E is the number of edges, and two vertices v1 and v2, find a path from v1 to v2 using Breadth-First Search (BFS). Return the path in reverse order (from v2 to v1). If no path exists, return an empty list.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= V <= 1000",
                    "1 <= E <= (V * (V - 1)) / 2",
                    "0 <= v1, v2 <= V-1",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "4 4\n0 1\n0 3\n1 2\n2 3\n1 3",
                        "output": "true",
                        "explanation": "In the first test case, there are two paths from 1 to 3. E.g., 1 -> 2 -> 3 or 1 -> 0 -> 3.  The output should be true as a valid path exists between the given vertices."
                    },
                    {
                        "input": "6 3\n5 3\n0 1\n3 4\n0 3",
                        "output": "false",
                        "explanation": "In the second test case, there is no path from 0 to 3. Hence the output should be false."
                    },
                    {
                        "input": "2 1\n0 1\n1 0",
                        "output": "true",
                        "explanation": "A path exists from 1 to 0 (or 0 to 1) in this graph."
                    },
                    {
                        "input": "5 4\n0 1\n1 2\n2 3\n3 4\n0 4",
                        "output": "true",
                        "explanation": "A path exists from 0 to 4 in this graph."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Iterate through the graph using BFS and store the parents of every node.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}