{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 20984,
            "title": "Good Bad Tree",
            "titleSlug": "good-bad-tree_5038362",
            "content": "<h4 id=\"there-are-n-cities-in-ninja-kingdom-and-mayer-of-the-city-wants-to-connect-all-the-cities-using-roads-by-performing-the-following-operations-n-1-times-initially-there-are-no-edges-between-any-cities\">There are \u2018N\u2019 cities in ninja Kingdom and Mayer of the city wants to connect all the cities using roads by performing the following operations \u2018N - 1\u2019 times. Initially, there are no edges between any cities.</h4>\n\n<h4 id=\"at-every-operation-you-are-given-two-cities-a-and-b-and-you-have-to-connect-the-city-if-they-are-not-already-connected\">At every operation, you are given two cities, \u2018A\u2019 and \u2018B\u2019, and you have to connect the city if they are not already connected.</h4>\n\n<h4 id=\"connected-component-is-that-part-of-the-graph-in-which-we-have-at-least-two-city-and-we-can-reach-one-city-to-other-cities-and-no-two-connected-components-share-a-common-city\">Connected component is that part of the graph in which we have at least two city and we can reach one city to other cities and no two connected components share a common city.</h4>\n\n<h4 id=\"after-every-input-edge-there-can-be-multiple-connected-components\">After every input edge, there can be multiple connected components.</h4>\n\n<h4 id=\"component-is-good-if-the-number-of-cities-of-that-component-is-even-otherwise-it-is-a-bad-component\">Component is good if the number of cities of that component is even; otherwise, it is a bad component.</h4>\n\n<h4 id=\"you-need-to-find-the-absolute-difference-between-total-good-and-bad-components-after-adding-each-edge\">You need to find the absolute difference between total good and bad components after adding each edge.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. The test cases are as follows.\n\nThe first line of each test case contains the value \u2018N\u2019, denoting the number of cities.\n\nFollowing \u2018N - 1\u2019 lines contain two space-separated integers, \u2018u\u2019 and \u2018v\u2019, which we have to connect the city \u2018u\u2019 and \u2018v\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return an array of size \u2018N - 1\u2019, where the \u2018i\u2019th ( 0 &lt;= i &lt; N - 1 )  value represents the absolute difference between total good and bad components after adding the \u2018ith\u2019 edge.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n\n2 &lt;= N &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5 \n1 2\n3 4\n2 5\n2 3\n3\n1 2\n2 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 2 0 1\n1 1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For test case 1, \n       After adding the first edge:\n                    we have only one connected component, i.e. (1, 2).\n                    Total good component = 1 ( 1, 2 ).\n                    Total bad component = 0.\n          After adding the second edge:\n                    we have two connected components, i.e., (1, 2) and (3, 4).\n                    Total good component = 2 ( ( 1, 2 ) , ( 3, 4 ) ).\n                    Total bad component = 0. \n          After adding the third edge:\n                    we have two connected components, i.e., (1, 2, 5) and (3, 4).\n                    Total good component = 1 ( 3, 4 ).\n                    Total bad component = 1 ( 1, 2, 5 ). \n          After adding forth edge:\n                    we have only one connected component, i.e., (1, 2, 3, 4, 5).\n                    Total good component = 0.\n                    Total bad component = 1 ( 1, 2, 3, 4, 5 ). \n\n\nFor test case 2,\n       After adding the first edge:\n                    we have only one connected component, i.e. (1, 2).\n                    Total good component = 1 ( 1, 2 ).\n                    Total bad component = 0.\n          After adding the second edge:\n                    we have only one connected component, i.e. (1, 2, 3).\n                    Total good component = 0.\n                    Total bad component = 1 ( 1, 2, 3 ). \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5\n1 2\n1 3\n1 4\n1 5\n2\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 1 1 1\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'N' cities in a kingdom, connect them using 'N-1' roads. Initially, no roads exist. In each of the 'N-1' operations, you are provided with two cities, 'A' and 'B', and you must connect them if they aren't already connected. A connected component is a group of cities where any city can reach any other city within the group, and no two connected components share a city. A component is considered 'good' if it contains an even number of cities; otherwise, it's 'bad'. After adding each road, determine the absolute difference between the number of 'good' and 'bad' connected components. Return an array where the i-th element represents this difference after adding the i-th road.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 5, edge = [[1, 2], [3, 4], [2, 5], [2, 3]]",
                        "output": "[1, 2, 0, 1]",
                        "explanation": "After edge [1,2]: good components = 1 ({1,2}), bad components = 0, difference = |1-0| = 1.\nAfter edge [3,4]: good components = 2 ({1,2}, {3,4}), bad components = 0, difference = |2-0| = 2.\nAfter edge [2,5]: good components = 1 ({3,4}), bad components = 1 ({1,2,5}), difference = |1-1| = 0.\nAfter edge [2,3]: good components = 0, bad components = 1 ({1,2,3,4,5}), difference = |0-1| = 1."
                    },
                    {
                        "input": "n = 3, edge = [[1, 2], [2, 3]]",
                        "output": "[1, 1]",
                        "explanation": "After edge [1,2]: good components = 1 ({1,2}), bad components = 0, difference = |1-0| = 1.\nAfter edge [2,3]: good components = 0, bad components = 1 ({1,2,3}), difference = |0-1| = 1."
                    },
                    {
                        "input": "n = 5, edge = [[1, 2], [1, 3], [1, 4], [1, 5]]",
                        "output": "[1, 1, 1, 1]",
                        "explanation": "After edge [1,2]: good components = 1 ({1,2}), bad components = 0, difference = |1-0| = 1.\nAfter edge [1,3]: good components = 1 ({1,2}), bad components = 0 ({3}), difference = |1-0| = 1. The components are {1,2,3} and the difference is 1.\nAfter edge [1,4]: good components = 1 ({1,2}), bad components = 0. The components are {1,2,3,4}. Because the problem definition specifies at least 2 city for one component. Only {1,2,3,4} is the component and it contains 4 vertices which is even. So the number of good component is still 0 and bad is 0. The only component is {1,2,3,4}, so the component number is 0+0 = 0, but is it considered bad? So good and bad components = 1. good components = 0, bad components = 0, difference = |1-0| = 1. The actual connected component are {1,2,3,4} contains 4 cities which is even, so it's good components! So good=1 and bad=0.\nAfter edge [1,5]: good components = 1, bad components = 0. the only componet is {1,2,3,4,5} contains 5, so the good = 0 bad=1."
                    },
                    {
                        "input": "n = 2, edge = [[1, 2]]",
                        "output": "[1]",
                        "explanation": "After edge [1,2]: good components = 1 ({1,2}), bad components = 0, difference = |1-0| = 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;Try to check for all operations independently</p>",
            "<p>Try to find how the graph changes after each operation?</p>"
        ],
        "relatedTopics": [],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}