{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 20984,
            "title": "Good Bad Tree",
            "titleSlug": "good-bad-tree_5038362",
            "content": "<h4 id=\"there-are-n-cities-in-ninja-kingdom-and-mayer-of-the-city-wants-to-connect-all-the-cities-using-roads-by-performing-the-following-operations-n-1-times-initially-there-are-no-edges-between-any-cities\">There are \u2018N\u2019 cities in ninja Kingdom and Mayer of the city wants to connect all the cities using roads by performing the following operations \u2018N - 1\u2019 times. Initially, there are no edges between any cities.</h4>\n\n<h4 id=\"at-every-operation-you-are-given-two-cities-a-and-b-and-you-have-to-connect-the-city-if-they-are-not-already-connected\">At every operation, you are given two cities, \u2018A\u2019 and \u2018B\u2019, and you have to connect the city if they are not already connected.</h4>\n\n<h4 id=\"connected-component-is-that-part-of-the-graph-in-which-we-have-at-least-two-city-and-we-can-reach-one-city-to-other-cities-and-no-two-connected-components-share-a-common-city\">Connected component is that part of the graph in which we have at least two city and we can reach one city to other cities and no two connected components share a common city.</h4>\n\n<h4 id=\"after-every-input-edge-there-can-be-multiple-connected-components\">After every input edge, there can be multiple connected components.</h4>\n\n<h4 id=\"component-is-good-if-the-number-of-cities-of-that-component-is-even-otherwise-it-is-a-bad-component\">Component is good if the number of cities of that component is even; otherwise, it is a bad component.</h4>\n\n<h4 id=\"you-need-to-find-the-absolute-difference-between-total-good-and-bad-components-after-adding-each-edge\">You need to find the absolute difference between total good and bad components after adding each edge.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. The test cases are as follows.\n\nThe first line of each test case contains the value \u2018N\u2019, denoting the number of cities.\n\nFollowing \u2018N - 1\u2019 lines contain two space-separated integers, \u2018u\u2019 and \u2018v\u2019, which we have to connect the city \u2018u\u2019 and \u2018v\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return an array of size \u2018N - 1\u2019, where the \u2018i\u2019th ( 0 &lt;= i &lt; N - 1 )  value represents the absolute difference between total good and bad components after adding the \u2018ith\u2019 edge.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n\n2 &lt;= N &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5 \n1 2\n3 4\n2 5\n2 3\n3\n1 2\n2 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 2 0 1\n1 1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For test case 1, \n       After adding the first edge:\n                    we have only one connected component, i.e. (1, 2).\n                    Total good component = 1 ( 1, 2 ).\n                    Total bad component = 0.\n          After adding the second edge:\n                    we have two connected components, i.e., (1, 2) and (3, 4).\n                    Total good component = 2 ( ( 1, 2 ) , ( 3, 4 ) ).\n                    Total bad component = 0. \n          After adding the third edge:\n                    we have two connected components, i.e., (1, 2, 5) and (3, 4).\n                    Total good component = 1 ( 3, 4 ).\n                    Total bad component = 1 ( 1, 2, 5 ). \n          After adding forth edge:\n                    we have only one connected component, i.e., (1, 2, 3, 4, 5).\n                    Total good component = 0.\n                    Total bad component = 1 ( 1, 2, 3, 4, 5 ). \n\n\nFor test case 2,\n       After adding the first edge:\n                    we have only one connected component, i.e. (1, 2).\n                    Total good component = 1 ( 1, 2 ).\n                    Total bad component = 0.\n          After adding the second edge:\n                    we have only one connected component, i.e. (1, 2, 3).\n                    Total good component = 0.\n                    Total bad component = 1 ( 1, 2, 3 ). \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5\n1 2\n1 3\n1 4\n1 5\n2\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 1 1 1\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'N' cities in Ninja Kingdom, connect them using 'N - 1' roads. Initially, there are no roads. In each operation, connect two cities 'A' and 'B' if they are not already connected. A connected component is a group of cities where any city can reach any other city within the group, and no two connected components share a common city. A component is 'good' if it has an even number of cities, otherwise, it's 'bad'. After adding each edge, calculate the absolute difference between the total number of good and bad components.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n1 2\n3 4\n2 5\n2 3\n3\n1 2\n2 3",
                        "output": "1 2 0 1\n1 1",
                        "explanation": "Test Case 1:\n- After edge (1,2): Good = 1 ({1,2}), Bad = 0. Difference = |1-0| = 1\n- After edge (3,4): Good = 2 ({1,2}, {3,4}), Bad = 0. Difference = |2-0| = 2\n- After edge (2,5): Good = 1 ({3,4}), Bad = 1 ({1,2,5}). Difference = |1-1| = 0\n- After edge (2,3): Good = 0, Bad = 1 ({1,2,3,4,5}). Difference = |0-1| = 1\nTest Case 2:\n- After edge (1,2): Good = 1 ({1,2}), Bad = 0. Difference = |1-0| = 1\n- After edge (2,3): Good = 0, Bad = 1 ({1,2,3}). Difference = |0-1| = 1"
                    },
                    {
                        "input": "5\n1 2\n1 3\n1 4\n1 5\n2\n1 2",
                        "output": "1 1 1 1\n1",
                        "explanation": "Test Case 1:\n- After edge (1,2): Good = 1 ({1,2}), Bad = 0. Difference = |1-0| = 1\n- After edge (1,3): Good = 0, Bad = 1 ({1,2,3}). Difference = |0-1| = 1\n- After edge (1,4): Good = 0, Bad = 1 ({1,2,3,4}). Difference = |0-1| = 1\n- After edge (1,5): Good = 0, Bad = 1 ({1,2,3,4,5}). Difference = |0-1| = 1\nTest Case 2:\n- After edge (1,2): Good = 1 ({1,2}), Bad = 0. Difference = |1-0| = 1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;Try to check for all operations independently</p>",
            "<p>Try to find how the graph changes after each operation?</p>"
        ],
        "relatedTopics": [],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}