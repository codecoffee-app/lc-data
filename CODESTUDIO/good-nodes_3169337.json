{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16511,
            "title": "Good Nodes",
            "titleSlug": "good-nodes_3169337",
            "content": "<h4 id=\"you-are-given-the-root-node-of-a-binary-tree-consisting-of-n-nodes-your-task-is-to-find-the-number-of-good-nodes-in-the-given-binary-tree\">You are given the root node of a binary tree consisting of \u2018N\u2019 nodes. Your task is to find the number of good nodes in the given binary tree.</h4>\n\n<h4 id=\"a-good-node-is-defined-as-good-if-there-are-no-nodes-with-a-value-greater-than-x-s-value-in-the-path-from-the-root-to-x\">A good node is defined as good if there are no nodes with a value greater than X\u2019s value in the path from the root to X.</h4>\n\n<h4 id=\"you-are-given-a-root-node-root-your-task-is-to-return-the-number-of-good-nodes\">You are given a root node \u2018ROOT\u2019.Your task is to return the number of good nodes.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. \n\nThe second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space. If any node does not have a left or right child, take -1 in its place. Refer to the example for further clarification.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an integer representing the total number of good nodes.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^6\n1 &lt;= nodeVal &lt;=10^5\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 1 9 -1 -1 8 10 -1 -1 -1 -1\n2 1 4 -1 -1 3 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case,\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000523_1635450208_tree2.png\" alt=\"Example\"></p>\n\n<pre><code>Here, Node with value 3 , node with value 9, and node with value 10 are good nodes as there is no nodes with value greater than Node\u2019s value in the path from the root to the node.\nHence, the answer is 3.\n\nFor the second test case, \n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000498_1630239691_texNPdmavmHBmwUX.png\" alt=\"Example\"></p>\n\n<pre><code>Here, Node with value 2 and node with value 4 are good nodes as there is no nodes with value greater than Node\u2019s value in the path from the root to the node.\nHence, the answer is 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 -1 4 -1 1 -1 -1 \n4 -1 5 5 -1 2 -1 3 -1 -1 5 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4 \n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root node of a binary tree consisting of \u2018N\u2019 nodes, determine the number of \"good\" nodes in the tree. A node is considered \"good\" if no node on the path from the root to that node has a value greater than the node's own value.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^6",
                    "1 <= nodeVal <= 10^5",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 1 9 -1 -1 8 10 -1 -1 -1 -1",
                        "output": "3",
                        "explanation": "The good nodes are 3, 9, and 10.  The path to 3 is just 3. The path to 9 is 3 -> 9. The path to 10 is 3 -> 9 -> 10. No nodes on these paths have a value greater than the node itself."
                    },
                    {
                        "input": "2 1 4 -1 -1 3 -1 -1 -1",
                        "output": "2",
                        "explanation": "The good nodes are 2 and 4.  The path to 2 is just 2. The path to 4 is 2 -> 4. No nodes on these paths have a value greater than the node itself."
                    },
                    {
                        "input": "3 -1 4 -1 1 -1 -1",
                        "output": "4",
                        "explanation": "The good nodes are 3, 4, and both 1s. The path to 3 is just 3. The path to 4 is 3 -> 4. The path to 1 (left) is 3 -> 1. The path to 1 (right) is 3 -> 1. No nodes on these paths have a value greater than the node itself."
                    },
                    {
                        "input": "4 -1 5 5 -1 2 -1 3 -1 -1 5 -1 -1",
                        "output": "2",
                        "explanation": "The good nodes are 4 and 5 (the root's right child).  The path to 4 is just 4. The path to 5 is 4 -> 5. The path to 5 (left) is 4 -> 5 -> 2. The path to 3 is 4 -> 5 -> 3. No nodes on these paths have a value greater than the node itself."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Keep the track of maximum number.</p>",
            "<p>Can you use any iterative method?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}