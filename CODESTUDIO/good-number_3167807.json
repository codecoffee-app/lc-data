{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16500,
            "title": "Good Number",
            "titleSlug": "good-number_3167807",
            "content": "<h4 id=\"you-are-given-an-integer-n-you-need-to-find-whether-it-s-a-good-number-or-not\">You are given an integer \u2018N\u2019, you need to find whether it\u2019s a good number or not.</h4>\n\n<h4 id=\"we-start-from-the-integer-n-and-keep-replacing-the-current-number-with-the-sum-of-squares-of-its-digits-we-keep-repeating-this-process-until-we-will-the-number-1-a-number-that-generates-the-1-after-finite-repetition-of-the-above-process-is-called-a-good-number\">We start from the integer \u2018N\u2019 and keep replacing the current number with the sum of squares of its digits, we keep repeating this process until we will the number <strong>1</strong>. A number that generates the 1 after finite repetition of the above process is called a good number.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>If \u2018N\u2019 = 7,\n\nThen we start with the integer 7 and replace it with (7 * 7) = 49.\nThe new number is 49, we replace it with (4 * 4) + (9 * 9) = 97.\nWe replace this new number 97 with (9 * 9) + (7 * 7) = 130.\nWe replace this new number 130 with (1 * 1) + (3 * 3) + (0 * 0) = 10.\nWe replace this new number 10 with (1 * 1) + (0 * 0) = 1.\n\nTherefore, the original number 7 is a good number. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains a single integer \u2018N\u2019, denoting the input number.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print \u201ctrue\u201d if the number is a good number, else print \u201cfalse\u201d.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 \u2018T\u2019 \u2264 10      \n1 \u2264 N \u2264 10000    \n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n7\n2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For test case 1 :\nWe will print \u201ctrue\u201d because:\nWe start with the input integer 7 and replace it with (7 * 7) = 49.\nThe new number is 49, we replace it with (4 * 4) + (9 * 9) = 97.\nWe replace this new number 97 with (9 * 9) + (7 * 7) = 130.\nWe replace this new number 130 with (1 * 1) + (3 * 3) + (0 * 0) = 10.\nWe replace this new number 10 with (1 * 1) + (0 * 0) = 1.\nTherefore, the original number 7 is a good number.\n\nFor test case 2 : \nWe will print \u201cfalse\u201d because:\nIf we start replacing the number 2 with the sum of the square of its digits then we will not be able to reach the number 1 even after infinite steps.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1\n1045\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Determine if a given integer is a 'good number'. A 'good number' is defined as a number that, when repeatedly replaced by the sum of the squares of its digits, eventually reaches the value 1. If the process does not lead to 1, the number is not considered 'good'.",
                "constraints": [
                    "1 \u2264 \u2018T\u2019 \u2264 10",
                    "1 \u2264 N \u2264 10000",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 7",
                        "output": "true",
                        "explanation": "Starting with 7: 7*7 = 49 -> 4*4 + 9*9 = 97 -> 9*9 + 7*7 = 130 -> 1*1 + 3*3 + 0*0 = 10 -> 1*1 + 0*0 = 1.  The process reaches 1, therefore 7 is a good number."
                    },
                    {
                        "input": "n = 2",
                        "output": "false",
                        "explanation": "Starting with 2: 2*2 = 4 -> 4*4 = 16 -> 1*1 + 6*6 = 37 -> 3*3 + 7*7 = 58 -> 5*5 + 8*8 = 89 -> 8*8 + 9*9 = 145 -> 1*1 + 4*4 + 5*5 = 42 -> 4*4 + 2*2 = 20 -> 2*2 + 0*0 = 4. The process enters a loop and does not reach 1, therefore 2 is not a good number."
                    },
                    {
                        "input": "n = 1",
                        "output": "true",
                        "explanation": "Starting with 1, we immediately reach 1, thus it's a good number."
                    },
                    {
                        "input": "n = 1045",
                        "output": "false",
                        "explanation": "Starting with 1045: 1*1 + 0*0 + 4*4 + 5*5 = 42. As seen in the previous test case with n = 2, 42 eventually leads to 4 and loops, it will not reach 1. Therefore, 1045 is not a good number."
                    },
                    {
                        "input": "n = 19",
                        "output": "true",
                        "explanation": "Starting with 19: 1*1 + 9*9 = 82 -> 8*8 + 2*2 = 68 -> 6*6 + 8*8 = 100 -> 1*1 + 0*0 + 0*0 = 1. The process reaches 1, therefore 19 is a good number."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>A loop always exists if the given number is not a good number.</p>",
            "<p>Use a cycle detection algorithm to prevent the use of extra space.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}