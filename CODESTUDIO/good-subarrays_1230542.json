{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10502,
            "title": "Good Subarrays     ",
            "titleSlug": "good-subarrays_1230542",
            "content": "<h4 id=\"you-have-been-given-an-array-list-arr-consists-of-positive-integers-we-call-a-contiguous-subarray-of-arr-good-if-the-number-of-different-integers-in-that-subarray-is-exactly-k-your-task-is-to-find-out-the-number-of-good-subarrays-of-arr\">You have been given an array/list \u2018ARR\u2019 consists of positive integers. We call a contiguous subarray of \u2018ARR\u2019 good if the number of different integers in that subarray is exactly \u2018K\u2019. Your task is to find out the number of good subarrays of \u2018ARR\u2019.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>\u2018ARR[]\u2019 = [1, 3, 1, 1, 2] has 3 different integers: 1, 2, and 3. And for \u2018K\u2019 = 2, following are the good subarrays.\n1. [1, 3]\n2. [1, 3, 1]\n3. [1, 3, 1, 1]\n4. [3, 1]\n5. [3, 1, 1]\n6. [1, 1, 2]\n7. [1, 2]\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then each test case follows.\n\nThe first line of each test case contains a single integer \u2018N\u2019 and \u2018K\u2019 denoting the number of elements in the \u2018ARR\u2019 and \u2018K\u2019 respectively.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers, denoting the elements in the \u2018ARR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the number of good subarrays in \u2018ARR\u2019\n\nThe output for each test case will be printed in a new line. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 1000\n1 &lt;= K &lt;= 1000\n1 &lt;= ARR[i] &lt;= 10 ^ 5\n\n\u2018T\u2019 is the number of Test Cases\n\u2018N\u2019 is the number of elements in the \u2018ARR\u2019\n\u2018ARR[i]\u2019 is the element at the \u2018i\u2019th\u2019 index in the \u2018ARR\u2019\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 2\n1 1 2 4 \n1 2\n1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n0\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>For the first test case :\nFollowing are the good subarrays for the \u2018ARR\u2019 = [1,1,2,4] and \u2018K\u2019 = 2:\n1. [1, 1, 2]\n2. [1, 2]\n3. [2, 4]\nThese are the 3 good subarrays so we return 3.\n\nFor the second test case :\nThere is only one element in \u2018ARR\u2019 and \u2018K\u2019 = 2 so we can\u2019t not have 2 distinct elements. So we return 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n6 1\n1 2 3 4 5 6\n3 3\n3 2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>6\n1\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-2\">Explanation for Sample output 2:</h4>\n\n<pre><code>For the first test case :\nFollowing are the Good SubArrays for the \u2018ARR[]\u2019 = [1,2,3,4,5,6] and \u2018K\u2019 = 1:\n1. [1]\n2. [2]\n3. [3]\n4. [4]\n5. [5]\n6. [6]\nThese are the 6 good subarrays so we return 6.\n\nFor the second test case :\nThere is only one subarray [3, 2, 1] for \u2018K\u2019 = 3 so we return 1.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers, find the number of contiguous subarrays that contain exactly 'K' distinct integers. A subarray is considered 'good' if it meets this condition.",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= N <= 1000 (Number of elements in the array)",
                    "1 <= K <= 1000",
                    "1 <= ARR[i] <= 10^5 (Value of each element in the array)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "4 2\n1 1 2 4",
                        "output": "3",
                        "explanation": "The array is [1, 1, 2, 4] and K = 2. The good subarrays are [1, 1, 2], [1, 2], and [2, 4]. Thus, the count is 3."
                    },
                    {
                        "input": "1 2\n1",
                        "output": "0",
                        "explanation": "The array is [1] and K = 2.  Since there are not 2 distinct numbers present in the array, the count of good subarrays is 0."
                    },
                    {
                        "input": "6 1\n1 2 3 4 5 6",
                        "output": "6",
                        "explanation": "The array is [1, 2, 3, 4, 5, 6] and K = 1. The good subarrays are [1], [2], [3], [4], [5], and [6]. Thus, the count is 6."
                    },
                    {
                        "input": "3 3\n3 2 1",
                        "output": "1",
                        "explanation": "The array is [3, 2, 1] and K = 3. The good subarray is [3, 2, 1]. Thus, the count is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we solve this problem using the brute force approach?&nbsp;</p>",
            "<p>Can you optimize the previous approach? Can you think of a approach using 2 pointers?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}