{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10812,
            "title": "Grid Value",
            "titleSlug": "grid-value_1265992",
            "content": "<h4 id=\"you-are-given-a-grid-of-size-n-m-there-are-two-types-of-people-type-a-and-type-b-you-are-also-given-the-number-of-people-of-each-type-say-counta-is-the-number-of-a-type-persons-and-countb-is-the-number-of-b-type-of-persons-the-satisfaction-of-a-particular-type-of-person-can-increase-or-decrease-as-follows\">You are given a grid of size N*M. There are two types of people, type \u2018A\u2019 and type \u2018B\u2019 . You are also given the number of people of each type say \u2018countA\u2019 is the number of \u2018A\u2019 type persons and \u2018countB\u2019 is the number of \u2018B\u2019 type of persons. The satisfaction of a particular type of person can increase or decrease as follows :</h4>\n\n<pre><code>The initial satisfaction of a person of type A is 80. It decreases by 20 for each neighbor.\n\nThe initial satisfaction of a person of type B is 50. It increases by 10 for each neighbor.\n</code></pre>\n\n<h4 id=\"your-task-is-to-determine-the-maximum-possible-grid-satisfaction\">Your task is to determine the maximum possible grid satisfaction.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You may choose exactly how many people you want to be present in the grid.\n\nThe total number of people of type \u2018A\u2019 living in the grid can be less than \u2018countA\u2019 but cannot exceed \u2018countA\u2019. Similarly, total number of people of type \u2018B\u2019 living in the grid can be less than \u2018countB\u2019 but cannot exceed \u2018countB\u2019\n\nA person can live in only one cell.\n\nNot more than one person can live in a cell.\n\nTwo cells are said to be neighbors if the cells are adjacent and share a boundary.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019, which denotes the number of test cases to be run.  Then, the \u2018T\u2019 test cases follow. \n\nThe first and the only line of each test case contains four space-separated integers \u2018N\u2019, \u2018M\u2019, \u2018countA\u2019, and \u2018countB\u2019, denoting the grid\u2019s dimensions and the number of each type of people present.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print in a new line an integer denoting the maximum possible grid satisfaction. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 2\n1 &lt;= N,M &lt;= 6\n0 &lt;= countA, countB &lt;= min(N*M, 6)\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n3 1 0 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>50\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-8582.png\" alt=\"\"></p>\n\n<pre><code>In this test case, we can have only one person of type B. Since, this person will have no neighbors, the satisfaction of this person will not change and we will get the maximum grid value of 50.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n2 2 1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>190\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a grid of size N*M. The grid can be populated with two types of people: 'A' and 'B'. You are given 'countA', the maximum number of 'A' type people, and 'countB', the maximum number of 'B' type people that can be placed in the grid. The goal is to maximize the total satisfaction of all people in the grid.\n\nThe initial satisfaction of a person of type A is 80. It decreases by 20 for each neighbor.\nThe initial satisfaction of a person of type B is 50. It increases by 10 for each neighbor.\n\nDetermine the maximum possible grid satisfaction, considering the constraints on the number of people of each type, the cell occupancy limits (one person per cell), and the neighbor definition (adjacent cells sharing a boundary). You can choose the number of type A and type B people to place in the grid, but it cannot exceed countA or countB respectively.",
                "constraints": [
                    "1 <= T <= 2",
                    "1 <= N, M <= 6",
                    "0 <= countA, countB <= min(N*M, 6)",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "3 1 0 1",
                        "output": "50",
                        "explanation": "In this test case, we can have only one person of type B. Since, this person will have no neighbors, the satisfaction of this person will not change, resulting in a maximum grid value of 50."
                    },
                    {
                        "input": "2 2 1 2",
                        "output": "190",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a recursive solution</p>",
            "<p>Think of a Dynamic Programming Approach along with Bitmasking as we can use bit masks to track \u2018A\u2019 and \u2018B\u2019 type persons in the last \u2018M\u2019 cells, and shift them as we go.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}