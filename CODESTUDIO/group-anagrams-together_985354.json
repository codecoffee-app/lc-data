{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9450,
            "title": "Group Anagrams Together",
            "titleSlug": "group-anagrams-together_985354",
            "content": "<h4 id=\"you-have-been-given-an-array-list-of-strings-str_list-you-are-supposed-to-return-the-strings-as-groups-of-anagrams-such-that-strings-belonging-to-a-particular-group-are-anagrams-of-one-another\">You have been given an array/list of strings &#39;STR_LIST&#39;. You are supposed to return the strings as groups of anagrams such that strings belonging to a particular group are anagrams of one another.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase. We can generalize this in string processing by saying that an anagram of a string is another string with the same quantity of each character in it, in any order.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>{ \u201cabc\u201d, \u201cged\u201d, \u201cdge\u201d, \u201cbac\u201d } \nIn the above example the array should be divided into 2 groups. The first group consists of { \u201cabc\u201d, \u201cbac\u201d } and the second group consists of { \u201cged\u201d, \u201cdge\u201d }.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. The test cases are as follows.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of strings.\n\nThe next line contains &#39;N&#39; single space-separated strings.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case/query, print the anagrams belonging to the same group in a single line, where all the anagrams are separated by a single space, and each group will be printed in a separate line.\n\nThe output for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 1000\n1 &lt;= |STR_LIST[i]| &lt;= 100\n\u201cSTR_LIST[i]\u201d contains only lowercase english letters.\n\nWhere \u2018T\u2019 denotes the number of test cases, \u2018N\u2019 denotes the number of strings, and |STR_LIST[i]| denotes the length of the i\u2019th string.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\nabab baba aabb abbc\n5\naecd bcda acbd abdc acda\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>aabb abab baba\nabbc\nabdc acbd bcda\nacda\naecd\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1 :</h5>\n\n<pre><code>In the first test case, in the first group [&quot;aabb&quot;, &quot;abab&quot;, &quot;baba&quot;], all the strings are anagrams of one another and in the second group [&quot;abbc&quot;] has no anagram, so it&#39;s the only member in its group.\n\nIn the second test case, in the first group [&quot;abdc&quot;, &quot;acbd&quot;, &quot;bcda&quot;] all the strings are anagrams of one another, and in second and third group, both [&quot;acda&quot;] and [&quot;aecd&quot;] have no anagram, so they are the only member in their group\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1\namazing\n3\ngoal laog oalg\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>amazing\ngoal laog oalg\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h5>\n\n<pre><code>In the first test case, there is only one string and hence there is only once group.\n\nIn the second test case, all three strings are anagrams and hence belong to the same group.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array/list of strings `STR_LIST`, group the strings such that strings within each group are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase.  In string processing, an anagram of a string is another string with the same quantity of each character, in any order.",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= N <= 1000 (Number of strings in each test case)",
                    "1 <= |STR_LIST[i]| <= 100 (Length of each string)",
                    "STR_LIST[i] contains only lowercase English letters.",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "4\nabab baba aabb abbc",
                        "output": "aabb abab baba\nabbc",
                        "explanation": "The strings 'aabb', 'abab', and 'baba' are anagrams of each other, forming one group. The string 'abbc' has no anagrams in the input list, so it forms its own group."
                    },
                    {
                        "input": "5\naecd bcda acbd abdc acda",
                        "output": "abdc acbd bcda\nacda\naecd",
                        "explanation": "The strings 'abdc', 'acbd', and 'bcda' are anagrams, forming a group. 'acda' and 'aecd' do not have anagrams and form their own groups."
                    },
                    {
                        "input": "1\namazing",
                        "output": "amazing",
                        "explanation": "There is only one string, so it forms a group by itself."
                    },
                    {
                        "input": "3\ngoal laog oalg",
                        "output": "goal laog oalg",
                        "explanation": "The strings 'goal', 'laog', and 'oalg' are anagrams of each other, all belonging to the same group."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>When do two or more than two strings become anagrams?</p>",
            "<p>Can you think about using the frequency of the characters as the key of the HashMap?</p>",
            "<p>&nbsp;Can you think about using a trie to store the strings instead of a HashMap?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Tries",
                "slug": "tries"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}