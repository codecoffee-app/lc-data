{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8058,
            "title": "Group Anagrams",
            "titleSlug": "group-anagrams_800285",
            "content": "<h4 id=\"you-have-been-given-an-array-list-of-strings-inputstr-you-are-supposed-to-return-the-strings-as-groups-of-anagrams-such-that-strings-belonging-to-a-particular-group-are-anagrams-of-one-another\">You have been given an array/list of strings &#39;inputStr&#39;. You are supposed to return the strings as groups of anagrams such that strings belonging to a particular group are anagrams of one another.</h4>\n\n<h4 id=\"an-anagram-is-a-word-or-phrase-formed-by-rearranging-the-letters-of-a-different-word-or-phrase-we-can-generalize-this-in-string-processing-by-saying-that-an-anagram-of-a-string-is-another-string-with-the-same-quantity-of-each-character-in-it-in-any-order\">An anagram is a word or phrase formed by rearranging the letters of a different word or phrase. We can generalize this in string processing by saying that an anagram of a string is another string with the same quantity of each character in it, in any order.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The order in which the groups and members of the groups are printed does not matter.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>inputStr = {&quot;eat&quot;,&quot;tea&quot;,&quot;tan&quot;,&quot;ate&quot;,&quot;nat&quot;,&quot;bat&quot;}\nHere {\u201ctea\u201d, \u201cate\u201d,\u201d eat\u201d} and {\u201cnat\u201d, \u201ctan\u201d} are grouped as anagrams. Since there is no such string in \u201cinputStr\u201d which can be an anagram of \u201cbat\u201d, thus, \u201cbat\u201d will be the only member in its group.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39;, which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains an integer &#39;N&#39; which denotes the number of strings.\n\nThe next line contains &#39;N&#39; single space-separated strings. The strings consist of lower case English alphabets only.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case/query, print the anagrams belonging to the same group in a single line, where all the anagrams are separated by a single space, and each group will be printed in a separate line.\n\nThe output for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You don&#39;t have to print anything. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1&lt;= T &lt;= 50\n1&lt;= N &lt;= 100\n1&lt;= K &lt;= 10\n\nWhere &#39;T&#39; is the number of test cases, &#39;N&#39; is the length of the given array/list of strings and \u2018K\u2019 is the maximum length of a string in the given array/list.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\nabab baba aabb abbc\n5\naecd bcda acbd abdc acda\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>aabb abab baba\nabbc\nabdc acbd bcda\nacda\naecd\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1 :</h5>\n\n<pre><code>In the first test case, in the first group [&quot;aabb&quot;, &quot;abab&quot;, &quot;baba&quot;], all the strings are anagrams of one another and in the second group [&quot;abbc&quot;] has no anagram, so it&#39;s the only member in its group.\n\nIn the second test case, in the first group [&quot;abdc&quot;, &quot;acbd&quot;, &quot;bcda&quot;] all the strings are anagrams of one another, and in second and third group, both [&quot;acda&quot;] and [&quot;aecd&quot;] have no anagram, so they are the only member in their group \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n6\neat tea tan ate nat bat\n5\ncat dog tac god act\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>ate eat tea \nbat\nnat tan\nact cat tac\ndog god\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-2\">Explanation of the Sample Input 2 :</h5>\n\n<pre><code>In the first test case, in the first group [&quot;ate&quot;, &quot;eat&quot;, &quot;tea&quot;] and the third group [\u201cnat\u201d, \u201ctan\u201d], all the strings are anagrams of one another and in the second group [&quot;bat&quot;] has no anagram, so it&#39;s the only member in its group and, \n\nIn the second test case, in the first group [&quot;act&quot;, &quot;cat&quot;, &quot;tac&quot;] and in the second group [&quot;dog&quot;, &quot;god&quot;], all the strings are anagrams of one another.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 26,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of strings, group the anagrams together. Anagrams are strings that contain the same characters, but in a different order. The order of the groups and the strings within each group does not matter.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 100",
                    "1 <= K <= 10 (where K is the maximum length of a string)"
                ],
                "testcases": [
                    {
                        "input": "n = 6, inputStr = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
                        "output": "ate eat tea \nbat\nnat tan",
                        "explanation": "The strings \"eat\", \"tea\", and \"ate\" are anagrams. The strings \"tan\" and \"nat\" are anagrams. The string \"bat\" has no anagrams in the input list."
                    },
                    {
                        "input": "n = 5, inputStr = [\"cat\", \"dog\", \"tac\", \"god\", \"act\"]",
                        "output": "act cat tac\ndog god",
                        "explanation": "The strings \"cat\", \"tac\", and \"act\" are anagrams. The strings \"dog\" and \"god\" are anagrams."
                    },
                    {
                        "input": "n = 4, inputStr = [\"abab\", \"baba\", \"aabb\", \"abbc\"]",
                        "output": "aabb abab baba\nabbc",
                        "explanation": "The strings \"abab\", \"baba\", and \"aabb\" are anagrams. The string \"abbc\" has no anagrams."
                    },
                    {
                        "input": "n = 5, inputStr = [\"aecd\", \"bcda\", \"acbd\", \"abdc\", \"acda\"]",
                        "output": "abdc acbd bcda\nacda\naecd",
                        "explanation": "The strings \"abdc\", \"acbd\", and \"bcda\" are anagrams. The strings \"acda\" and \"aecd\" each have no anagrams."
                    },
                    {
                        "input": "n = 3, inputStr = [\"abc\", \"cba\", \"abd\"]",
                        "output": "abc cba\nabd",
                        "explanation": "The strings \"abc\" and \"cba\" are anagrams, \"abd\" has no anagrams."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you use frequencies of characters in a string to find its anagrams?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}