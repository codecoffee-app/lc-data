{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16603,
            "title": "Guess Price",
            "titleSlug": "guess-price_3211264",
            "content": "<h4 id=\"your-friends-gifted-you-a-lot-of-things-on-your-birthday-and-now-its-your-turn-to-give-some-return-gifts-to-them-you-went-to-a-gift-store-and-decided-to-buy-some-binary-search-trees-bst\">Your friends gifted you a lot of things on your birthday, and now it&#39;s your turn to give some return gifts to them. You went to a gift store and decided to buy some Binary Search Trees (BST).</h4>\n\n<h4 id=\"there-is-no-salesperson-in-the-store-so-you-are-supposed-to-guess-the-price-of-a-given-bst-which-is-the-minimum-value-in-its-nodes\">There is no salesperson in the store. So you are supposed to guess the price of a given BST, which is the minimum value in its nodes.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains &#39;T&#39;, denoting the number of test cases.\nFor each Test :\n    The first line contains an integer, &#39;N&#39;.\n    The second line contains an array &#39;A&#39; of &#39;N&#39; space-separated integers, with a positive integer representing a node and -1 representing a NULL value.\n\nThe input array &#39;A&#39; denotes Level Order traversal of the BST.\n(Note that &#39;N&#39; is not the number of nodes in the BST,  only positive integers in &#39;A&#39; denote nodes of BST).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print one integer, denoting the price of a given BST, i.e., minimum node value in it.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints -</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 10\n1 &lt;= &#39;N&#39; &lt;= 10^5\n1 &lt;= A[i] &lt;= 10^6 or A[i] = -1,  i \u2208 (1, N)\nNote - The sum of &#39;N&#39; over all test cases does not exceed 2 * 10^5.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n13\n5 4 6 3 -1 -1 7 1 -1 -1 -1 -1 -1\n7\n9 -1 10 -1 11 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code>1\n9\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>For Case 1:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000565_1639399653_guess_price.png\" alt=\"\"></p>\n\n<pre><code>Given input looks like the tree drawn above. It can be seen that the minimum value in the tree is 1.\n\nFor Case 2:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000566_1639399666_guess_price_2.png\" alt=\"\"></p>\n\n<pre><code>    Given input looks like the tree drawn above. It can be seen that the minimum value in the tree is 9.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n7\n20 8 22 -1 -1 -1 -1\n15\n40 9 50 4 12 -1 -1 -1 -1 10 14 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>8\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 33,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) represented by its level order traversal, determine the minimum value among all nodes in the BST. You are given the root node of the BST. Your task is to implement the `findPrice` function to find this minimum value.",
                "constraints": [
                    "1 <= 'T' <= 10",
                    "1 <= 'N' <= 10^5",
                    "1 <= A[i] <= 10^6 or A[i] = -1,  i \u2208 (1, N)",
                    "The sum of 'N' over all test cases does not exceed 2 * 10^5.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "root = [5, 4, 6, 3, -1, -1, 7, 1, -1, -1, -1, -1, -1]",
                        "output": "1",
                        "explanation": "The BST constructed from the level order traversal [5, 4, 6, 3, -1, -1, 7, 1, -1, -1, -1, -1, -1] has the minimum value of 1."
                    },
                    {
                        "input": "root = [9, -1, 10, -1, 11, -1, -1]",
                        "output": "9",
                        "explanation": "The BST constructed from the level order traversal [9, -1, 10, -1, 11, -1, -1] has the minimum value of 9."
                    },
                    {
                        "input": "root = [20, 8, 22, -1, -1, -1, -1]",
                        "output": "8",
                        "explanation": "The BST constructed from the level order traversal [20, 8, 22, -1, -1, -1, -1] has the minimum value of 8."
                    },
                    {
                        "input": "root = [40, 9, 50, 4, 12, -1, -1, -1, -1, 10, 14, -1, -1, -1, -1]",
                        "output": "4",
                        "explanation": "The BST constructed from the level order traversal [40, 9, 50, 4, 12, -1, -1, -1, -1, 10, 14, -1, -1, -1, -1] has the minimum value of 4."
                    },
                    {
                        "input": "root = [1, -1, 2, -1, 3, -1, 4, -1, 5, -1, -1]",
                        "output": "1",
                        "explanation": "The BST constructed from the level order traversal [1, -1, 2, -1, 3, -1, 4, -1, 5, -1, -1] has the minimum value of 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we recursively traverse to visit all the nodes of the given BST?</p>",
            "<p>Is it possible for the right child to have a smaller value than the parent in BST?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}