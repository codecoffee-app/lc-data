{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8876,
            "title": "h",
            "titleSlug": "h_920463",
            "content": "<h4 id=\"you-are-given-an-array-list-arr-representing-pre-order-traversal-of-a-binary-search-tree-bst-if-each-non-leaf-node-of-the-tree-has-only-one-child-then-return-true-otherwise-return-false\">You are given an array/list \u2018ARR\u2019 representing pre-order traversal of a Binary Search Tree (BST). If each non-leaf node of the tree has only one child, then return true otherwise, return false.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-with-the-following-properties\">A binary search tree (BST) is a binary tree data structure with the following properties:</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<p><br></p>\n\n<h4 id=\"assume-that-the-bst-contains-unique-entries\">Assume that the BST contains unique entries.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an Integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of the input contains an integer \u2018N\u2019 representing the size of the array.\n\nThe second line of the input contains \u2018N\u2019 space-separated integers representing elements of the array \u2018ARR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a string \u2018S\u2019 denoting if each non-leaf node of the tree has only one child or not. If each non-leaf has only one child then \u2018S\u2019 will be \u201ctrue\u201d, otherwise \u201cfalse\u201d.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You are not required to print the output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 20\n1 &lt;= N &lt;= 10^4\n1 &lt;= ARR[i] &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1\n10\n5\n20 10 11 13 12\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>true\ntrue\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>In the first test case, there is only one node. So the output will be true.\n\nIn the second test case, all the elements right to 20 are less than 20, so all of them must be in the left tree.\n\nSimilarly, all the elements next to 10 are greater than 10, so all of them must be in the right subtree, and so on.\n\nHence the output will be true. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3\n10 11 12\n4\n25 29 24 26\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'ARR' representing the pre-order traversal of a Binary Search Tree (BST), determine if each non-leaf node in the tree has only one child. A BST has the property that for each node, all values in its left subtree are less than its value, and all values in its right subtree are greater. Return 'true' if all non-leaf nodes have only one child; otherwise, return 'false'.",
                "constraints": [
                    "1 <= T <= 20",
                    "1 <= N <= 10^4",
                    "1 <= ARR[i] <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n1\n10",
                        "output": "true",
                        "explanation": "The tree contains only one node, so the condition is trivially satisfied."
                    },
                    {
                        "input": "1\n5\n20 10 11 13 12",
                        "output": "true",
                        "explanation": "The root is 20. 10, 11, 13, and 12 are all less than 20, implying they're in the left subtree. 10 is the next node. 11, 13, and 12 are greater than 10 meaning they are in the right subtree of 10 and so on. Each node has only one child."
                    },
                    {
                        "input": "1\n3\n10 11 12",
                        "output": "true",
                        "explanation": "The root is 10. 11 and 12 are greater than 10 so are in the right subtree. The next node is 11 and 12 is in the right subtree of 11. Each node has one child."
                    },
                    {
                        "input": "1\n4\n25 29 24 26",
                        "output": "false",
                        "explanation": "The root is 25. 29 is in the right subtree. 24 should be in the left subtree of 25 but it is placed after 29, and 26 should be in the right subtree of 25. Therefore, the BST rules cannot be formed and a node must have more than one child, violating the condition."
                    },
                    {
                        "input": "2\n1\n10\n5\n20 10 11 13 12",
                        "output": "true\ntrue",
                        "explanation": null
                    },
                    {
                        "input": "2\n3\n10 11 12\n4\n25 29 24 26",
                        "output": "true\nfalse",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Observe a pattern in pre-order traversal of a BST in which non-leaf nodes have only one child. Can you think of a solution by this observation?</p>",
            "<p>Can you think of a solution by maintaining a pointer to maximum and minimum element?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}