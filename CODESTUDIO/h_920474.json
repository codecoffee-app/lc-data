{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8885,
            "title": "h",
            "titleSlug": "h_920474",
            "content": "<h4 id=\"you-are-given-two-binary-search-trees-of-integers-having-n-and-m-nodes-return-an-array-that-contains-elements-of-both-bst-in-sorted-order\">You are given two binary search trees of integers having <strong><em>\u2018N\u2019</em></strong> and <strong><em>\u2018M\u2019</em></strong> nodes. Return an array that contains elements of both BST in sorted order.</h4>\n\n<p><Br></p>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-with-the-following-properties\">A binary search tree (BST) is a binary tree data structure with the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains the elements of the first BST in the level order form separated by a single space.\n\nThe second line contains the elements of the second BST in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n</code></pre>\n\n<p><Br></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nThe input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/review1-2-9959.png\" alt=\"\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\n\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1     \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The only line contains an array that contains elements of both BST in sorted order.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the output, it has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2 1 3 -1 -1 -1 -1\n4 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 3 4 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code> The given BST are:-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-18-9962.png\" alt=\"\"></p>\n\n<p><img src=\"https://files.codingninjas.in/graph-17-9961.png\" alt=\"\"></p>\n\n<pre><code>The output will be 1 2 3 4\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4 2 7 -1 3 -1 -1 -1 -1  \n5 1 7 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 2 3 4 5 7 7 \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;N&#39;, &#39;M&#39; &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 164,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two binary search trees (BSTs) of integers, with 'N' and 'M' nodes respectively, return a sorted array containing all the elements from both BSTs. A binary search tree is a binary tree where for each node, all values in its left subtree are less than the node's value, and all values in its right subtree are greater than the node's value.",
                "constraints": [
                    "1 <= 'N', 'M' <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2 1 3 -1 -1 -1 -1\n4 -1 -1",
                        "output": "1 2 3 4",
                        "explanation": "The first BST contains 2 as the root, 1 as the left child, and 3 as the right child. The second BST contains 4 as the root.  Merging and sorting the elements results in [1, 2, 3, 4]."
                    },
                    {
                        "input": "4 2 7 -1 3 -1 -1 -1 -1\n5 1 7 -1 -1 -1 -1",
                        "output": "1 2 3 4 5 7 7",
                        "explanation": "The first BST contains 4 as the root, 2 as the left child, 7 as the right child and 3 as the right child of 2. The second BST contains 5 as root , 1 as the left child and 7 as the right child. Merging and sorting the elements results in [1, 2, 3, 4, 5, 7, 7]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find inorder of the BST.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N + M)\r\n    Space Complexity : O(N + M)\r\n\r\n    Where, 'N' and 'M' are the number of nodes in the first BST and the second BST respectively.\r\n\r\n*/\r\n\r\n// Function to store the inorder traversal of tree in a list.\r\nvoid storeInOrder(TreeNode *root, vector<int> &arr)\r\n{\r\n    if (root != NULL)\r\n    {\r\n        storeInOrder(root->left, arr);\r\n        arr.push_back(root->data);\r\n        storeInOrder(root->right, arr);\r\n    }\r\n}\r\n\r\n// Function to merge two sorted array/lists.\r\nvector<int> mergeSortedArrays(vector<int> &arr1, vector<int> &arr2)\r\n{\r\n    int i = 0, j = 0;\r\n    vector<int> arr;\r\n\r\n    // Traversing in both arrays.\r\n    while (i < arr1.size() && j < arr2.size())\r\n    {\r\n        // Comparing array elements.\r\n        if (arr1[i] < arr2[j])\r\n        {\r\n            arr.push_back(arr1[i]);\r\n            i++;\r\n        }\r\n        else\r\n        {\r\n            arr.push_back(arr2[j]);\r\n            j++;\r\n        }\r\n    }\r\n\r\n    // Pushing rest elements.\r\n    while (i < arr1.size())\r\n    {\r\n        arr.push_back(arr1[i]);\r\n        i++;\r\n    }\r\n\r\n    // Pushing rest elements.\r\n    while (j < arr2.size())\r\n    {\r\n        arr.push_back(arr2[j]);\r\n        j++;\r\n    }\r\n\r\n    return arr;\r\n}\r\n\r\nvector<int> mergeBST(TreeNode *root1, TreeNode *root2)\r\n{\r\n    // Store the in-order traversal of tree1 in an array.\r\n    vector<int> temp1;\r\n    storeInOrder(root1, temp1);\r\n\r\n    // Store the in-order traversal of tree2 in an array.\r\n    vector<int> temp2;\r\n    storeInOrder(root2, temp2);\r\n\r\n    // Merge the two sorted arrays.\r\n    vector<int> answer = mergeSortedArrays(temp1, temp2);\r\n\r\n    // Construct the balanced BST from this sorted array.\r\n    return answer;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\r\n\r\n    Time Complexity : O(N + M)\r\n    Space Complexity : O(N + M)\r\n\r\n    Where,\u00e2\u20ac\u02dcN\u00e2\u20ac\u2122 and \u00e2\u20ac\u02dcM\u00e2\u20ac\u2122 are the number of nodes in the\r\n    first BST and the second BST respectively.\r\n\r\n\"\"\"\r\n\r\nclass TreeNode:\r\n    def __init__(self, data) :\r\n        self.data = data\r\n        self.left = None\r\n        self.right = None\r\n\r\n    def __del__(self):\r\n        if self.left:\r\n            del self.left\r\n        if self.right:\r\n            del self.right\r\n\r\n# Function to store the inorder traversal of tree in a list.\r\ndef storeInOrder(root, arr):\r\n    if (root != None):\r\n        storeInOrder(root.left, arr)\r\n        arr.append(root.data)\r\n        storeInOrder(root.right, arr)\r\n\r\n# Function to merge two sorted array/lists.\r\ndef mergeSortedArrays(arr1, arr2):\r\n    i = 0\r\n    j = 0\r\n    arr = []\r\n    \r\n    while (i < len(arr1) and j < len(arr2)):\r\n        if (arr1[i] < arr2[j]):\r\n            arr.append(arr1[i])\r\n            i += 1\r\n        else:\r\n            arr.append(arr2[j])\r\n            j += 1\r\n          \r\n    while (i < len(arr1)):\r\n        arr.append(arr1[i])\r\n        i += 1\r\n    \r\n    while (j < len(arr2)):\r\n        arr.append(arr2[j])\r\n        j += 1\r\n    \r\n    return arr\r\n\r\n\r\n# Function to convert sorted array-list to balanced BST.\r\ndef constructBSTFromSortedArray(arr, start, end):\r\n    # Base case.\r\n    if (start > end):\r\n        return None\r\n    \r\n    mid = (start + end) // 2\r\n    \r\n    root = TreeNode(arr[mid])\r\n    root.left = constructBSTFromSortedArray(arr, start, mid - 1)\r\n    root.right = constructBSTFromSortedArray(arr, mid + 1, end)\r\n    return root\r\n\r\n\r\ndef mergeBST(root1, root2):\r\n    # Store the in-order traversal of tree1 in an array.\r\n    temp1 = []\r\n    storeInOrder(root1, temp1)\r\n    \r\n    # Store the in-order traversal of tree2 in an array.\r\n    temp2 = []\r\n    storeInOrder(root2, temp2)\r\n    \r\n    # Merge the two sorted arrays.\r\n    final = mergeSortedArrays(temp1, temp2)\r\n    \r\n    # Construct the balanced BST from this sorted array.\r\n    return constructBSTFromSortedArray(final, 0, len(final) - 1)",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N + M)\r\n    Space Complexity : O(N + M)\r\n\r\n    Where, 'N' and 'M' are the number of nodes in the first BST and the second BST respectively.\r\n\r\n*/\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\npublic class Solution {\r\n    public static List<Integer> mergeBST(TreeNode root1, TreeNode root2) {\r\n        // Store the in-order traversal of tree1 in an array.\r\n        List<Integer> temp1 = new ArrayList<>();\r\n        storeInOrder(root1, temp1);\r\n\r\n        // Store the in-order traversal of tree2 in an array.\r\n        List<Integer> temp2 = new ArrayList<>();\r\n        storeInOrder(root2, temp2);\r\n\r\n        // Merge the two sorted arrays.\r\n        List<Integer> answer = mergeSortedArrays(temp1, temp2);\r\n\r\n        // Construct the balanced BST from this sorted array.\r\n        return answer;\r\n    }\r\n\r\n    // Function to merge two sorted array/lists.\r\n    public static List<Integer> mergeSortedArrays(List<Integer> arr1, List<Integer> arr2)\r\n    {\r\n        int i = 0, j = 0;\r\n        List<Integer> arr = new ArrayList<>();\r\n\r\n        // Traversing in both arrays.\r\n        while (i < arr1.size() && j < arr2.size())\r\n        {\r\n            // Comparing array elements.\r\n            if (arr1.get(i) < arr2.get(j))\r\n            {\r\n                arr.add(arr1.get(i));\r\n                i++;\r\n            }\r\n            else\r\n            {\r\n                arr.add(arr2.get(j));\r\n                j++;\r\n            }\r\n        }\r\n\r\n        // Pushing rest elements.\r\n        while (i < arr1.size())\r\n        {\r\n            arr.add(arr1.get(i));\r\n            i++;\r\n        }\r\n\r\n        // Pushing rest elements.\r\n        while (j < arr2.size())\r\n        {\r\n            arr.add(arr2.get(j));\r\n            j++;\r\n        }\r\n\r\n        return arr;\r\n    }\r\n\r\n    // Function to store the inorder traversal of tree in a list.\r\n    public static void storeInOrder(TreeNode root, List<Integer> arr)\r\n    {\r\n        if (root != null)\r\n        {\r\n            storeInOrder(root.left, arr);\r\n            arr.add(root.data);\r\n            storeInOrder(root.right, arr);\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}