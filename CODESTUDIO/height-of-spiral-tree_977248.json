{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9172,
            "title": "Height of Spiral Tree",
            "titleSlug": "height-of-spiral-tree_977248",
            "content": "<h4 id=\"you-are-given-a-special-kind-of-binary-tree-where-the-leaf-nodes-are-connected-to-each-other-in-such-a-fashion-that-they-form-a-circular-doubly-linked-list-you-need-to-find-the-height-of-the-binary-tree\">You are given a special kind of binary tree where the leaf nodes are connected to each other in such a fashion that they form a circular doubly linked list. You need to find the height of the Binary Tree.</h4>\n\n<h4 id=\"the-left-pointer-of-leaf-node-will-act-as-a-previous-pointer-of-circular-doubly-linked-list-and-its-right-pointer-will-act-as-next-pointer-of-circular-doubly-linked-list\">The left pointer of leaf node will act as a previous pointer of circular doubly linked list and its right pointer will act as next pointer of circular doubly linked list.</h4>\n\n<h4 id=\"a-binary-tree-bt-is-a-data-structure-in-which-each-node-has-at-most-two-children\">A binary tree (BT) is a data structure in which each node has at most two children.</h4>\n\n<h4 id=\"for-the-given-binary-tree\">For the given binary tree:</h4>\n\n<p><img src=\"https://files.codingninjas.in/graph-6519.png\" alt=\"alt txt\"></p>\n\n<h4 id=\"in-the-above-binary-tree-4-6-and-7-are-leaf-nodes-and-they-form-a-circular-doubly-linked-list\">In the above binary tree, 4, 6 and 7 are leaf nodes and they form a circular doubly linked list.</h4>\n\n<pre><code>Here, the height of the Binary Tree is 4.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases. Then the test cases follow.\n\nThe first and the only line of each test case contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-1-6520.png\" alt=\"alt txt\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, you need to return the height of the given binary tree.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 1000\n-10^6 &lt;= data &lt;= 10^6 and data != -1\nwhere N is the number of nodes in the tree, T represents the number of test cases and data denotes data contained in the node of the binary tree.\n\nDuplicate elements can be in the right subtree or left subtree.\n\nTime Limit : 1 sec \n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 -1 4 -1 -1 -1 -1\n1 2 3 4 8 5 6 -1 -1 -1 -1 -1 -1 7 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n4\n</code></pre>\n\n<h5 id=\"explanation-of-input-1\">Explanation of Input 1:</h5>\n\n<pre><code>Here we have 2 test cases, hence there are 2 binary trees\n\nTest Case 1: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-3-6522.png\" alt=\"alt txt\"></p>\n\n<pre><code>We can see that the height of the given tree is 3.\n\nTest Case 2: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-2-6521.png\" alt=\"alt txt\"></p>\n\n<pre><code>We can see that the height of the given tree is 4.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 3 2 4 5 -1 7 -1 -1 -1 6 -1 -1 -1 -1\n1 2 -1 3 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>4\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree where leaf nodes are connected in a circular doubly linked list (left pointer acts as 'previous' and right pointer acts as 'next'), determine the height of the tree.",
                "constraints": [
                    "1 <= T <= 100",
                    "0 <= N <= 1000",
                    "-10^6 <= data <= 10^6 and data != -1"
                ],
                "testcases": [
                    {
                        "input": "root=[1, 2, 3, -1, 4, -1, -1, -1, -1]",
                        "output": "3",
                        "explanation": "The provided binary tree has a height of 3.  The tree structure is: \n\n      1\n     / \\\n    2   3\n   / \n  4"
                    },
                    {
                        "input": "root=[1, 2, 3, 4, 8, 5, 6, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1]",
                        "output": "4",
                        "explanation": "The binary tree has a height of 4. The tree structure is:\n\n         1\n       /   \\\n      2     3\n     / \\   / \\\n    4   8 5   6\n   /        \n  7"
                    },
                    {
                        "input": "root=[1, 3, 2, 4, 5, -1, 7, -1, -1, -1, 6, -1, -1, -1, -1]",
                        "output": "4",
                        "explanation": "The binary tree has a height of 4. The tree structure is:\n\n        1\n      /   \\\n     3     2\n    / \\     \\\n   4   5     7\n          /  \n         6"
                    },
                    {
                        "input": "root=[1, 2, -1, 3, -1, -1, -1]",
                        "output": "3",
                        "explanation": "The binary tree has a height of 3. The tree structure is:\n\n      1\n     /\n    2\n   /\n  3"
                    },
                    {
                        "input": "root=[1]",
                        "output": "1",
                        "explanation": "A single node tree has a height of 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>How to check if the node is a leaf node?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}