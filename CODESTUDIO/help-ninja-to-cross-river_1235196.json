{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10599,
            "title": "Help Ninja to Cross River",
            "titleSlug": "help-ninja-to-cross-river_1235196",
            "content": "<h4 id=\"ninja-is-standing-on-the-edge-of-a-river-and-wants-to-cross-the-river-there-is-a-wooden-bridge-over-the-river-but-some-units-of-the-bridge-are-damaged-ninja-can-not-step-over-a-damaged-unit-of-the-bridge-all-the-safe-units-of-the-bridge-are-in-an-array-list-safe-which-is-sorted-in-increasing-order\">Ninja is standing on the edge of a river and wants to cross the river. There is a wooden bridge over the river but some units of the bridge are damaged. Ninja can not step over a damaged unit of the bridge. All the safe units of the bridge are in an array/list \u2018SAFE\u2019 which is sorted in increasing order.</h4>\n\n<h4 id=\"ninja-is-currently-standing-on-the-first-safe-unit-of-the-bridge-and-has-to-reach-the-last-safe-unit-of-the-bridge-by-jumping\">Ninja is currently standing on the first safe unit of the bridge and has to reach the last safe unit of the bridge by jumping.</h4>\n\n<h4 id=\"there-are-some-restrictions-on-the-size-of-jump-ninja-can-make\">There are some restrictions on the size of jump Ninja can make:</h4>\n\n<pre><code>1. The first jump will always be of 1 unit.\n2. If Ninja&#39;s previous jump was \u2018X\u2019 units, his current jump must be either \u2018X\u2019 - 1, \u2018X\u2019, or \u2018X\u2019 + 1 units. \n</code></pre>\n\n<h4 id=\"as-ninja-is-warming-up-before-crossing-the-bridge-he-asks-you-for-help-you-need-to-find-out-whether-ninja-can-cross-the-river-or-not-and-return-true-if-ninja-can-cross-the-river-else-return-false\">As Ninja is warming up before crossing the bridge, he asks you for help. You need to find out whether Ninja can cross the river or not and return TRUE if Ninja can cross the river else return FALSE.</h4>\n\n<h4 id=\"for-example\">For example :</h4>\n\n<pre><code>If \u2018SAFE\u2019 = [1, 2, 4, 7] then it can shown in below image where :\nRed cell means that the unit is damaged.\nGreen cell means that the unit is safe.\nWe can see Ninja can reach the last unit by making jumps of size 1 , 2 and 3.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000291_1615691700_cross_river.png\" alt=\"Example\"></p>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. Then each test case follows.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the size of \u2018SAFE\u2019 or we can say the number of safe units.\n\nThe second line contains \u2018N\u2019 space-separated distinct integers denoting the elements of \u2018SAFE\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>For each test case return, true if Ninja can cross the river else return false.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints</h4>\n\n<pre><code>1 &lt;= T &lt;=10\n2 &lt;= N &lt;= 10^3\n0 &lt;= SAFE[i] &lt;= 10^5\n\nTime limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample input 1:</h4>\n\n<pre><code>2\n5\n0 1 3 5 7\n2\n1 3\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample output 1:</h4>\n\n<pre><code>YES\nNO\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h4>\n\n<pre><code>For test case 1:\n1. The first jump will be of 1 unit and Ninja will reach the 2nd unit.\n2. The second jump will be of 2 (\u2018X\u2019+1) units and Ninja will reach the 3rd unit.\n3. The third jump will be of 2 (\u2018X\u2019) units and Ninja will reach the 4th unit.\n4. The fourth jump will be of 2 (\u2018X\u2019) units and Ninja will reach the last unit.\n\nFor test case 2:\nThere are only two safe units and Ninja can make a jump of only 1 unit in the first turn so Ninja can not reach the last unit.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample input 2:</h4>\n\n<pre><code>2\n2\n2 3\n6\n2 3 4 6 7 10\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample output 2:</h4>\n\n<pre><code>YES\nNO\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h4>\n\n<pre><code>For test case 1:\nThere are only two safe units and Ninja can make a jump of only 1 unit in the first turn so Ninja will reach the last unit.\n\nFor test case 2:\nThere is no possible sequence of jumps that can lead the Ninja to the last safe unit.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -2,
            "dislikes": "NA",
            "rephrased": {
                "body": "A ninja needs to cross a river using a wooden bridge. Some parts of the bridge are damaged and cannot be stepped on.  The safe units are represented by a sorted array/list 'SAFE'. The ninja starts at the first safe unit and must reach the last safe unit by jumping. The first jump is always 1 unit. Subsequent jumps must be either 'X-1', 'X', or 'X+1' units, where 'X' is the length of the previous jump. Determine if the ninja can successfully cross the river.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 10^3",
                    "0 <= SAFE[i] <= 10^5",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n0 1 3 5 7",
                        "output": "YES",
                        "explanation": "The ninja can reach the last unit with jumps of size 1, 2, 2, and 2."
                    },
                    {
                        "input": "2\n1 3",
                        "output": "NO",
                        "explanation": "The ninja can only jump 1 unit initially and thus can't reach the last unit."
                    },
                    {
                        "input": "2\n2 3",
                        "output": "YES",
                        "explanation": "The ninja can reach the last unit with jump of size 1."
                    },
                    {
                        "input": "6\n2 3 4 6 7 10",
                        "output": "NO",
                        "explanation": "There is no possible sequence of jumps that can lead the Ninja to the last safe unit."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>&nbsp;</strong>Can you think about a recursive solution.?</p>",
            "<p>Can we avoid the overlapping subproblems?</p>",
            "<p>Can you think about the bottom-up DP approach?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}