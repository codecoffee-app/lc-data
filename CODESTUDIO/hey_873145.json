{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8338,
            "title": "hey",
            "titleSlug": "hey_873145",
            "content": "<h4 id=\"given-a-binary-tree-with-integer-nodes-your-task-is-to-find-the-maximum-level-sum-among-all-the-levels-in-the-binary-tree-the-sum-of-any-level-in-a-tree-is-the-sum-of-all-the-nodes-present-at-that-level\">Given a Binary Tree with integer nodes, your task is to find the maximum level sum among all the levels in the Binary Tree. The sum of any level in a tree is the sum of all the nodes present at that level.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line will contain &#39;T&#39;, the number of test cases.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/img11-removebg-preview-11859.jpg\" alt=\"example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the     above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return a single integer denoting the maximum level sum.\n\nThe output for each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 1000\n-10^5  &lt;= DATA &lt;= 10^5 and DATA != -1    \n\nWhere \u2018N\u2019 is the number of nodes, &#39;DATA&#39; is the value of nodes in the given tree.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1                \n4 2 -5 1 3 -2 6 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>8\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/img22-11860.jpg\" alt=\"input2\"></p>\n\n<pre><code>The Sum of all nodes of the 0th level is 4.\n\nThe Sum of all nodes of  the1st level is  2 + (-5) = -3.\n\nThe Sum of all nodes of the 2nd level is 1 + 3 +(-2) + 6 = 8.\n\nHence, the maximum level sum is 8.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1         \n1 2 3 4 5 -1 8 -1 -1 -1 -1 6 7 -1 -1 -1 -1  \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>17\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2:</h5>\n\n<p><img src=\"https://files.codingninjas.in/img33-11861.jpg\" alt=\"input2\"></p>\n\n<pre><code>Maximum sum is at level 2 i.e. 4 + 5 + 8 = 17.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with integer nodes, find the maximum level sum among all the levels in the tree. The level sum is the sum of all node values at that level. The input is provided in level order format, where -1 represents a null node.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 1000 (Number of nodes in the tree)",
                    "-10^5 <= DATA <= 10^5 and DATA != -1 (Value of nodes)",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 2 -5 1 3 -2 6 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "8",
                        "explanation": "Level sums: Level 0: 4, Level 1: 2 + (-5) = -3, Level 2: 1 + 3 + (-2) + 6 = 8. The maximum level sum is 8."
                    },
                    {
                        "input": "1 2 3 4 5 -1 8 -1 -1 -1 -1 6 7 -1 -1 -1 -1",
                        "output": "17",
                        "explanation": "Level sums: Level 0: 1, Level 1: 2 + 3 = 5, Level 2: 4 + 5 + 8 = 17, Level 3: 6 + 7 = 13. The maximum level sum is 17."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you solve this problem using recursively traversing the tree?</p>",
            "<p>Can you solve this problem using level order traversal and storing sum of each level?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}