{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10237,
            "title": "Hide and Seek",
            "titleSlug": "hide-and-seek_1172173",
            "content": "<h4 id=\"alice-and-bob-are-best-friends-they-have-spent-their-childhood-in-the-beautiful-city-of-ninjaland\">Alice and Bob are best friends. They have spent their childhood in the beautiful city of Ninjaland.</h4>\n\n<h4 id=\"the-city-has-a-total-of-n-houses-including-the-king-s-castle-king-s-castle-has-address-1-and-all-other-houses-also-have-a-unique-address-say-k-where-2-k-n\">The city has a total of N houses, including the King\u2019s Castle. King\u2019s Castle has address 1, and all other houses also have a unique address, say K(where 2&lt;=K&lt;=N).</h4>\n\n<h4 id=\"there-is-always-a-unique-path-between-any-two-houses-including-the-king-s-castle\">There is always a unique path between any two houses, including the King\u2019s Castle.</h4>\n\n<h4 id=\"alice-and-bob-love-to-play-the-hide-and-seek-game-in-the-game-a-person-can-hide-in-any-house-including-king-s-castle-and-the-second-person-has-to-find-the-first-person-it-s-bobs-turn-to-hide-and-alice-is-supposed-to-find-him\">Alice and Bob love to play the Hide and Seek game. In the game, a person can hide in any house, including King\u2019s Castle, and the second person has to find the first person. It\u2019s Bob&#39;s turn to hide and Alice is supposed to find him.</h4>\n\n<h4 id=\"alice-has-a-strategy-she-will-either-go-towards-the-king-s-castle-and-stop-on-reaching-there-or-go-away-from-king-s-castle-taking-any-possible-path-and-stopping-on-reaching-the-last-house-however-this-strategy-does-not-confirm-that-she-will-find-bob\">Alice has a strategy, she will either go towards the King\u2019s Castle and stop on reaching there or go away from King\u2019s Castle, taking any possible path and stopping on reaching the last house. However, this strategy does not confirm that she will find Bob.</h4>\n\n<h4 id=\"alice-is-starting-the-game-at-some-house-say-x-and-bob-has-hidden-in-some-house-say-y\">Alice is starting the game at some house say \u2018X\u2019 and Bob has hidden in some house say\u2019 Y\u2019.</h4>\n\n<h4 id=\"you-will-be-given-queries-of-the-following-type-and-you-have-to-determine-whether-alice-can-find-bob-or-not\">You will be given queries of the following type and you have to determine whether Alice can find Bob or not.</h4>\n\n<h4 id=\"0-x-y-alice-moves-0-towards-the-king-s-castle\">0 X Y: Alice moves (0) towards the King\u2019s Castle.</h4>\n\n<h4 id=\"1-x-y-alice-movers-1-away-from-king-s-castle\">1 X Y: Alice movers (1) away from King\u2019s Castle.</h4>\n\n<h4 id=\"return-true-if-alice-can-find-bob-else-return-false\">Return TRUE if Alice can find Bob else return FALSE.</h4>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of vertices. \n\nThe next \u2018N-1\u2019 lines contain two single space-separated integers \u2018U\u2019 and \u2018V\u2019, denoting an edge from vertex \u2018U\u2019 to vertex \u2018V\u2019.\n\nThe next line will contain a single integer \u2018Q\u2019 representing the number of queries.\n\nThe next \u2018Q\u2019 lines will contain queries in the form as shown.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, print \u201cYES\u201d if Alice can find Bob, print \u201cNO\u201d if Alice can not find Bob.\n\nThe output of each test case will be printed in a new line. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n1 &lt;= X and Y &lt;= N\n1 &lt;= Q &lt;= 10^5\n1 &lt;= U,V &lt;= N\n\nTime Limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>1\n8\n1 3\n1 2\n4 1 \n6 4\n4 5\n7 4\n8 7\n3\n0 7 3\n1 4 8\n0 6 1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>NO\nYES\nYES\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h4>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000257_1614025758_kingdom.png\" alt=\"Example\"></p>\n\n<pre><code>For the first query :\nAlice\u2019s initial position: 7 and Bob\u2019s initial position : 3 and &#39;0&#39; represent that Alice will go towards the Castle.\nAs we also know for any two given houses there is always a unique path so the path from 7 to 3 will be: 7 -&gt; 4 -&gt; 1 -&gt; 3.\nWhile following this path Alice will stop on reaching 1 (King\u2019s Castle) and will not find Bob. So we will return FALSE.\n\nFor the second query :\nAlice\u2019s initial position: 4 and Bob\u2019s initial position: 8 and &#39;1&#39; represent that Alice will go away from the Castle.\nNow we can see there are three path which leads away from the Castle:\n(i) 4 -&gt; 6\n(ii) 4 -&gt; 5\n(iii) 4 -&gt; 7 -&gt; 8\nSo Alice can find Bob if she follows the third path, we will return TRUE.\n\nFor the third query :\nAlice\u2019s initial position: 6 and Bob\u2019s initial position: 1 and &#39;0&#39; represent that Alice will go towards the Castle.\nAs we also know for any two given houses there is always a unique path so the path from 6 to 1 will be: 6 -&gt; 4 -&gt; 1 and we can also see this from the graph.\nWhile following this path Alice will stop on reaching 1 (King\u2019s Castle) and will find Bob. So, we will return TRUE.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>1\n5\n1 3\n3 2\n4 1 \n5 3\n2\n0 5 2\n1 2 3\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>NO\nYES\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Alice and Bob are best friends living in Ninjaland, a city with N houses, including the King's Castle (address 1). All other houses have unique addresses from 2 to N. There is a unique path between any two houses. Alice and Bob play Hide and Seek. Bob hides, and Alice tries to find him using a specific strategy.\n\nAlice starts at house X and Bob hides at house Y. She either moves towards the King's Castle or away from it.\n\n*   **Move 0 (towards the King's Castle):** Alice travels towards the King's Castle from her starting house X.  If she encounters Bob's hiding place Y along the way, she finds him.  Otherwise, she stops at the King's Castle and does not find Bob if Y != 1.\n*   **Move 1 (away from the King's Castle):** Alice moves away from the King's Castle from her starting house X. If any of these paths lead her to Bob's hiding place Y, she finds him. Otherwise, she does not find Bob.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "1 <= X, Y <= N",
                    "1 <= Q <= 10^5",
                    "1 <= U, V <= N",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n8\n1 3\n1 2\n4 1 \n6 4\n4 5\n7 4\n8 7\n3\n0 7 3\n1 4 8\n0 6 1",
                        "output": "NO\nYES\nYES",
                        "explanation": "Testcase 1:\nQuery 1 (0 7 3): Alice starts at 7, Bob is at 3, Alice moves towards the castle (1). Path: 7 -> 4 -> 1 -> 3. Alice stops at 1 (King's Castle). Bob is at 3, so Alice does not find Bob. (NO)\nQuery 2 (1 4 8): Alice starts at 4, Bob is at 8, Alice moves away from the castle. Possible paths away from the castle: 4 -> 6, 4 -> 5, 4 -> 7 -> 8. Alice can reach Bob at 8. (YES)\nQuery 3 (0 6 1): Alice starts at 6, Bob is at 1, Alice moves towards the castle. Path: 6 -> 4 -> 1. Alice stops at 1 (King's Castle). Bob is at 1, so Alice finds Bob. (YES)"
                    },
                    {
                        "input": "1\n5\n1 3\n3 2\n4 1 \n5 3\n2\n0 5 2\n1 2 3",
                        "output": "NO\nYES",
                        "explanation": "Testcase 2:\nQuery 1 (0 5 2): Alice starts at 5, Bob is at 2, Alice moves towards the castle (1). Path: 5 -> 3 -> 1. Since Alice does not encounter Bob, and stops at 1(King's Castle), so she does not find Bob (NO)\nQuery 2 (1 2 3): Alice starts at 2, Bob is at 3, Alice moves away from the castle. There are paths from 2 that will lead to 3 (2 -> 3). Hence Alice finds Bob (YES)"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We just need to check subtrees and this further depends on the type of query.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}