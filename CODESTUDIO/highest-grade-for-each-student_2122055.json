{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14406,
            "title": " Highest Grade For Each Student",
            "titleSlug": "highest-grade-for-each-student_2122055",
            "content": "<pre><code>Table: Enrollments\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| student_id    | int     |\n| course_id     | int     |\n| grade         | int     |\n+---------------+---------+\n(student_id, course_id) is the primary key of this table.\n\nWrite a SQL query to find the highest grade with its corresponding course for each student. In case of a tie, you should find the course with the smallest course_id. The output must be sorted by increasing student_id.\n\nThe query result format is in the following example:\n\nEnrollments table:\n+------------+-------------------+\n| student_id | course_id | grade |\n+------------+-----------+-------+\n| 2          | 2         | 95    |\n| 2          | 3         | 95    |\n| 1          | 1         | 90    |\n| 1          | 2         | 99    |\n| 3          | 1         | 80    |\n| 3          | 2         | 75    |\n| 3          | 3         | 82    |\n+------------+-----------+-------+\n\nResult table:\n+------------+-------------------+\n| student_id | course_id | grade |\n+------------+-----------+-------+\n| 1          | 2         | 99    |\n| 2          | 2         | 95    |\n| 3          | 3         | 82    |\n+------------+-----------+-------+\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Ninja",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "For each student, identify the course in which they achieved their highest grade. If a student has multiple courses with the same highest grade, select the course with the smallest course ID.  Return the student ID, course ID, and grade for each such course, sorted by ascending student ID.",
                "constraints": [
                    "The `Enrollments` table contains `student_id`, `course_id`, and `grade` columns.",
                    "`(student_id, course_id)` is the primary key of the table.",
                    "The output must be sorted by `student_id` in ascending order."
                ],
                "testcases": [
                    {
                        "input": "student_id=[2,2,1,1,3,3,3], course_id=[2,3,1,2,1,2,3], grade=[95,95,90,99,80,75,82]",
                        "output": "student_id=[1,2,3], course_id=[2,2,3], grade=[99,95,82]",
                        "explanation": "Student 1 has a highest grade of 99 in course 2.\nStudent 2 has a highest grade of 95 in courses 2 and 3. Course 2 is chosen because it has the smaller course ID.\nStudent 3 has a highest grade of 82 in course 3."
                    },
                    {
                        "input": "student_id=[1,1,1], course_id=[1,2,3], grade=[100,100,100]",
                        "output": "student_id=[1], course_id=[1], grade=[100]",
                        "explanation": "Student 1 has the same grade in courses 1, 2 and 3. Course 1 is chosen as it has the lowest id among the courses with the same grade."
                    },
                    {
                        "input": "student_id=[4,4,5,5,6], course_id=[7,8,9,10,11], grade=[50,60,70,70,70]",
                        "output": "student_id=[4,5,6], course_id=[8,9,11], grade=[60,70,70]",
                        "explanation": "Student 4 highest grade is 60 on course 8.\nStudent 5 highest grade is 70, and among courses with that grade is 9 and 10, so 9 is chosen.\nStudent 6 highest grade is 70 in course 11."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}