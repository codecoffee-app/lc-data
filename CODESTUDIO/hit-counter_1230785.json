{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10519,
            "title": "Hit Counter ",
            "titleSlug": "hit-counter_1230785",
            "content": "<h4 id=\"you-have-to-design-a-hit-counter-which-supports-the-functionality-of-accepting-a-hit-and-returning-the-number-of-hits-done-in-the-last-5-minutes-each-call-is-made-with-a-timestamp-which-is-given-in-seconds\">You have to design a hit counter which supports the functionality of accepting a hit and returning the number of hits done in the last 5 minutes. Each call is made with a timestamp which is given in seconds.</h4>\n\n<h4 id=\"it-is-possible-to-receive-several-hit-arriving-at-the-same-time-all-the-calls-are-done-in-chronological-order-the-timestamp-for-a-call-is-equal-to-or-greater-than-the-timestamp-for-the-call-just-before-it-timestamp-at-the-start-can-be-considered-as-0\">It is possible to receive several hit arriving at the same time. All the calls are done in chronological order. The timestamp for a call is equal to or greater than the Timestamp for the call just before it. Timestamp at the start can be considered as 0.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>The counter is hit at &#39;T&#39;  = 1\nThe counter is hit at &#39;T&#39; = 50\nThe getHit function at &#39;T&#39; = 100 returns 2\nThe counter is hit at &#39;T&#39; = 250\nThe getHit function at &#39;T&#39; = 100 returns 2\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first line of each test case contains a single integer \u2018N\u2019, denoting the number of calls.\n\nThe next \u2018N\u2019 lines contain two space-separated integers \u2018TYPE\u2019, \u2018STAMP\u2019 denoting the type of the call and timestamp when this call was made.  \nIf TYPE = 1 it is a hit call, TYPE = 2 it is a getHit call . \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, for all the calls of the second type RETURN the number of hits in the last 5 minutes.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5 * 10^3\n1 &lt;= STAMP &lt;= 10 ^ 9\n\nIt is guaranteed that all calls are done in chronological order. \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 \n2 10\n1 10\n2 11\n3\n1 1\n1 1\n2 301\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0\n1\n2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case first call is done before any hit and the number of hits for the second call is 1.\nFor the second test case, 2 calls are done at a timestamp 1. At time stamps 301 all calls done at or after 1 are counted. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n1 10 \n1 11\n2 288 \n1  458\n2 600\n2\n1 12\n2 20\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2\n1\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a hit counter that tracks the number of hits within the last 5 minutes (300 seconds). The counter should support two operations:\n\n*   **Hit(timestamp):** Records a hit at the given timestamp (in seconds).\n*   **GetHits(timestamp):** Returns the number of hits recorded within the last 5 minutes (300 seconds) from the given timestamp.\n\nAll calls will be made in chronological order, meaning each timestamp will be greater than or equal to the previous one. Multiple hits can occur at the same timestamp.  The starting timestamp can be considered as 0.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 5 * 10^3 (Number of calls per test case)",
                    "1 <= STAMP <= 10^9 (Timestamp in seconds)",
                    "All calls are done in chronological order.",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "3\n2 10\n1 10\n2 11",
                        "output": "0\n1",
                        "explanation": "First call (2 10) is `getHits` at timestamp 10. No hits have been recorded yet, so the output is 0. Second call (1 10) records a hit at timestamp 10. Third call (2 11) is `getHits` at timestamp 11. Since the hit recorded at time 10 is within the last 5 minutes, the output is 1."
                    },
                    {
                        "input": "3\n1 1\n1 1\n2 301",
                        "output": "2",
                        "explanation": "Two hits are recorded at time 1. When `getHits` is called at time 301, both hits at time 1 are within the 5-minute window, therefore output is 2"
                    },
                    {
                        "input": "5\n1 10\n1 11\n2 288\n1 458\n2 600",
                        "output": "2\n1",
                        "explanation": "At timestamp 288, both hits at 10 and 11 are within last 300 secs, so getHit will return 2.\nAt timestamp 600, only hit at 458 is within the last 300 secs, so getHit will return 1"
                    },
                    {
                        "input": "2\n1 12\n2 20",
                        "output": "1",
                        "explanation": "One hit at time 12. getHits at time 20 will return 1 as the hit is within the 5 minute window."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we store all the hits in a double-ended queue?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}