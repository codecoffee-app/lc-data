{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8185,
            "title": "House Robber",
            "titleSlug": "house-robber_839733",
            "content": "<h4 id=\"mr-x-is-a-professional-robber-planning-to-rob-houses-along-a-street-each-house-has-a-certain-amount-of-money-hidden\">Mr. X is a professional robber planning to rob houses along a street. Each house has a certain amount of money hidden.</h4>\n\n<p><br/></p>\n\n<h4 id=\"all-houses-along-this-street-are-arranged-in-a-circle-that-means-the-first-house-is-the-neighbour-of-the-last-one-meanwhile-adjacent-houses-have-a-security-system-connected-and-it-will-automatically-contact-the-police-if-two-adjacent-houses-are-broken-into-on-the-same-night\">All houses along this street are arranged in a circle. That means the first house is the neighbour of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses are broken into on the same night.</h4>\n\n<p><br/></p>\n\n<h4 id=\"you-are-given-an-array-list-of-non-negative-integers-arr-representing-the-amount-of-money-of-each-house-your-task-is-to-return-the-maximum-amount-of-money-mr-x-can-rob-tonight-without-alerting-the-police\">You are given an array/list of non-negative integers &#39;ARR&#39; representing the amount of money of each house. Your task is to return the maximum amount of money Mr. X can rob tonight without alerting the police.</h4>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>It is possible for Mr. X to rob the same amount of money by looting two different sets of houses. Just print the maximum possible robbed amount, irrespective of sets of houses robbed.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>(i) Given the input array arr[] = {2, 3, 2} the output will be 3 because Mr X cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses. So, he\u2019ll rob only house 2 (money = 3)\n\n(ii) Given the input array arr[] = {1, 2, 3, 1} the output will be 4 because Mr X rob house 1 (money = 1) and then rob house 3 (money = 3).\n\n(iii) Given the input array arr[] = {0} the output will be 0 because Mr. X has got nothing to rob.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of the test case. Then the test case follows.\n\nThe first line of each test case contains an integer, \u2018N\u2019 representing the size of the first array/list.\n\nThe second line of each test case contains &#39;N&#39; single space-separated integers representing the array/list elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the maximum money that can be robbed in a separate line.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 5 x 10 ^ 3\n1 &lt;= ARR[i] &lt;= 10 ^ 9\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n1\n0\n3\n2 3 2\n4\n1 3 2 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0\n3\n4\n</code></pre>\n\n<h5 id=\"explanation-of-input-1\">Explanation of Input 1:</h5>\n\n<pre><code>(i) Mr. X has only one house to rob, but with no money.\n\n(ii) Mr. X cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses (remember, it\u2019s a circular street). So, he\u2019ll rob only house 2 (money = 3) with a maximum value\n\n(iii) Mr. X will get maximum value when he robs house 2 (money = 3) and then robs house 4 (money = 1) i.e. 4 units of money.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n5\n1 5 1 2 6\n3\n2 3 5\n4\n1 3 2 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>11\n5\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 307,
            "dislikes": "NA",
            "rephrased": {
                "body": "Mr. X is a professional robber planning to rob houses along a circular street. Each house has a certain amount of money. Adjacent houses are connected to a security system, and robbing two adjacent houses triggers the alarm. Given an array 'ARR' of non-negative integers representing the money in each house, find the maximum amount of money Mr. X can rob without alerting the police.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 5 x 10 ^ 3",
                    "1 <= ARR[i] <= 10 ^ 9",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n1\n0",
                        "output": "0",
                        "explanation": "Mr. X has only one house to rob, but it contains no money."
                    },
                    {
                        "input": "1\n3\n2 3 2",
                        "output": "3",
                        "explanation": "Mr. X cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses in a circle. So, he'll rob only house 2 (money = 3) which yields the maximum value."
                    },
                    {
                        "input": "1\n4\n1 3 2 1",
                        "output": "4",
                        "explanation": "Mr. X will get the maximum value when he robs house 2 (money = 3) and then robs house 4 (money = 1) i.e., 4 units of money."
                    },
                    {
                        "input": "1\n5\n1 5 1 2 6",
                        "output": "11",
                        "explanation": null
                    },
                    {
                        "input": "1\n3\n2 3 5",
                        "output": "5",
                        "explanation": null
                    },
                    {
                        "input": "1\n4\n1 3 2 0",
                        "output": "3",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about how you can use the solution to smaller subproblems to solve larger problems.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space complexity: O(N)\r\n    \r\n    where 'N' is the length of array.\r\n*/\r\n\r\nlong long int houseRobberUtil(vector<int> valueInHouse, int start, int end)\r\n{\r\n\r\n    long long int valueAtIthHouse[valueInHouse.size()];\r\n\r\n\t// Check if the thief may steal the first house or not.\r\n    if (start == 0)\r\n    {\r\n        valueAtIthHouse[0] = valueInHouse[0];\r\n        valueAtIthHouse[1] = max(valueInHouse[0], valueInHouse[1]);\r\n    }\r\n\r\n    else\r\n    {\r\n        valueAtIthHouse[0] = 0;\r\n        valueAtIthHouse[1] = valueInHouse[1];\r\n    }\r\n\r\n    for (int i = 2; i < end; i++)\r\n    {\r\n        valueAtIthHouse[i] = max(valueAtIthHouse[i - 2] + valueInHouse[i], valueAtIthHouse[i - 1]);\r\n    }\r\n\r\n    return valueAtIthHouse[end - 1];\r\n}\r\n\r\nlong long int houseRobber(vector<int>& valueInHouse)\r\n{\r\n\r\n    if (valueInHouse.size() == 0)\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    if (valueInHouse.size() == 1)\r\n    {\r\n        return valueInHouse[0];\r\n    }\r\n\r\n    return max(houseRobberUtil(valueInHouse, 0, valueInHouse.size() - 1), houseRobberUtil(valueInHouse, 1, valueInHouse.size()));\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n\tTime Complexity: O(N)\r\n\tSpace complexity: O(N)\r\n\r\n\twhere 'N' is the length of array.\r\n'''\r\n\r\ndef houseRobberUtil(valueInHouse, start, end):\r\n    \r\n    valueAtIthHouse = [-1 for i in range(len(valueInHouse))]\r\n\r\n    # Check if thief may steal first huse or not.\r\n    if (start == 0):\r\n        valueAtIthHouse[0] = valueInHouse[0]\r\n        valueAtIthHouse[1] = max(valueInHouse[0], valueInHouse[1])\r\n\r\n    else:\r\n        valueAtIthHouse[0] = 0\r\n        valueAtIthHouse[1] = valueInHouse[1]\r\n\r\n    for i in range(2, end):\r\n        valueAtIthHouse[i] = max(valueAtIthHouse[i - 2] + valueInHouse[i], valueAtIthHouse[i - 1])\r\n\r\n    return valueAtIthHouse[end - 1]\r\n\r\ndef houseRobber(valueInHouse):\r\n\r\n    if (len(valueInHouse) == 0):\r\n        return 0\r\n\r\n    if len(valueInHouse) == 1:\r\n        return valueInHouse[0]\r\n\r\n    return max(houseRobberUtil(valueInHouse, 0, len(valueInHouse) - 1), houseRobberUtil(valueInHouse, 1, len(valueInHouse)))\r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n\tTime Complexity: O(N)\r\n\tSpace complexity: O(N)\r\n\t\r\n\twhere 'N' is the length of array.\r\n*/\r\n\r\npublic class Solution {\r\n    public static long houseRobber(int[] valueInHouse) {\r\n           \r\n        if (valueInHouse.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        if (valueInHouse.length == 1) {\r\n            return valueInHouse[0];\r\n        }\r\n\r\n        return Math.max(houseRobberUtil(valueInHouse, 0, valueInHouse.length - 1),\r\n                   houseRobberUtil(valueInHouse, 1, valueInHouse.length));\r\n       }\r\n\r\n    public static long houseRobberUtil(int[] valueInHouse, int start, int end) {\r\n           \r\n        long[] valueAtIthHouse = new long[valueInHouse.length];\r\n\r\n        // Check if the thief may steal the first house or not.\r\n        if (start == 0) {\r\n            valueAtIthHouse[0] = valueInHouse[0];\r\n            valueAtIthHouse[1] = Math.max(valueInHouse[0], valueInHouse[1]);\r\n        } \r\n       \r\n        else {\r\n            valueAtIthHouse[0] = 0;\r\n            valueAtIthHouse[1] = valueInHouse[1];\r\n        }\r\n\r\n        for (int i = 2; i < end; i++) {\r\n            valueAtIthHouse[i] = Math.max(valueAtIthHouse[i - 2] + valueInHouse[i], valueAtIthHouse[i - 1]);\r\n        }\r\n           \r\n        return valueAtIthHouse[end - 1];\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}