{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10119,
            "title": "Huffman Coding",
            "titleSlug": "huffman-coding_1169467",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-integers-having-n-elements-the-array-contains-an-encoded-message-for-each-index-i-arr-i-denotes-the-frequency-of-the-ith-character-in-the-message-the-characters-are-of-an-alien-language-having-n-alphabets-given-the-frequency-of-each-of-the-n-alphabets-in-the-message-your-task-is-to-find-out-the-huffman-codes-for-each-of-the-n-alphabets-in-the-message\">You are given an array &#39;ARR&#39; of Integers having &#39;N&#39; elements. The array contains an encoded message. For each index &#39;i&#39;, &#39;ARR[i]&#39; denotes the frequency of the &#39;i&#39;th&#39; character in the message. The characters are of an alien language having &#39;N&#39; alphabets. Given the frequency of each of the &#39;N&#39; alphabets in the message, your task is to find out the Huffman codes for each of the &#39;N&#39; alphabets in the message.</h4>\n\n<h4 id=\"the-huffman-code-for-a-message-is-the-set-of-codes-such-that\">The Huffman Code for a message is the set of codes such that :</h4>\n\n<pre><code>1) All codes are binary strings.\n2) Each code should be able to determine its corresponding character uniquely.\n3) The total numbers of bits used to represent the message are minimized.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>If there are multiple sets of valid Huffman codes for a message. You can print any of them.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Consider the array ARR = [ 1, 4, 2 ] having 3 elements. \nThe array containing Huffman Codes for the above array will be [ &#39;10&#39;, &#39;0&#39;, &#39;11&#39; ]. Other Valid Huffman Codes are [ &#39;01&#39;, &#39;1&#39;, &#39;00&#39; ], [ &#39;00&#39;, &#39;1&#39;, &#39;01&#39; ] etc. Codes like [ &#39;1&#39;, &#39;0&#39;, &#39;01&#39; ], [ &#39;1&#39;, &#39;10&#39; , &#39;0&#39; ] are some of the invalid Huffman Codes.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains an integer &#39;N&#39;, denoting the number of elements in the array &#39;ARR&#39;.\n\nThe second line of each test case contains &#39;N&#39; space-separated integers denoting the array elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The checker will print 1 if the returned Huffman codes are correct and follow all the rules, otherwise, it will print 0.\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^4\n1 &lt;= ARR[i]  &lt;= 10^4\n\nWhere &#39;T&#39; denotes the number of test cases, &#39;N&#39; denotes the elements in the array &#39;ARR&#39;, and &#39;ARR[i]&#39; denotes the &#39;i&#39;th&#39; element of the array &#39;ARR&#39;.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\n5 7 6\n2\n4 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>For the first test case : \nThe array representing the Huffman codes will be [ &#39;11&#39;, &#39;0&#39;, &#39;10&#39; ] . Note that there are multiple other possible answers like [ &#39;00&#39;, &#39;1&#39; ,&#39;01&#39; ], [ &#39;01&#39;, &#39;1&#39;, &#39;00&#39; ] etc. All of them are valid, so we can return any of them.\n\nFor the second test case : \nThe array representing the Huffman codes will be [ &#39;0&#39;, &#39;1&#39; ]. The array [ &#39;1&#39;, &#39;0&#39; ] also represents a valid set of Huffman Code.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3\n1 2 5\n4\n5 6 3 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2:</h5>\n\n<pre><code>For the first test case : \nThe array representing the Huffman codes will be [ &#39;11&#39;, &#39;10&#39;, &#39;0&#39; ] . \n\nFor the second test case : \nThe array representing the Huffman codes will be [ &#39;10&#39;, &#39;0&#39;, &#39;110&#39;, &#39;111&#39; ]. \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'ARR' of 'N' integers, where ARR[i] represents the frequency of the i-th character in a message (an alien language with 'N' alphabets), determine the Huffman codes for each alphabet.  The Huffman code must adhere to these principles: it comprises binary strings, each code uniquely identifies its corresponding character, and the overall bit representation of the message is minimized. Multiple valid Huffman code sets might exist; any one of them is acceptable.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 10^4 (Number of alphabets)",
                    "1 <= ARR[i] <= 10^4 (Frequency of each alphabet)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\n5 7 6",
                        "output": "1",
                        "explanation": "A valid Huffman code for frequencies [5, 7, 6] could be ['11', '0', '10']. Other valid options exist, such as ['00', '1', '01'] or ['01', '1', '00'].  The key is that no code is a prefix of another and the codes are derived from building a Huffman Tree based on the frequencies."
                    },
                    {
                        "input": "2\n4 3",
                        "output": "1",
                        "explanation": "A valid Huffman code for frequencies [4, 3] could be ['0', '1'].  The reverse, ['1', '0'], is also a valid solution."
                    },
                    {
                        "input": "3\n1 2 5",
                        "output": "1",
                        "explanation": "A valid Huffman code for frequencies [1, 2, 5] could be ['11', '10', '0'].  This minimizes the total weighted path length during Huffman tree construction."
                    },
                    {
                        "input": "4\n5 6 3 1",
                        "output": "1",
                        "explanation": "A valid Huffman code for frequencies [5, 6, 3, 1] could be ['10', '0', '110', '111'].  The more frequent characters get shorter codes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of using a data structure that can efficiently extract the minimum value in an array so that we can build the Huffman Tree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}