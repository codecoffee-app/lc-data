{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14512,
            "title": "Human Traffic of Stadium",
            "titleSlug": "human-traffic-of-stadium_2181183",
            "content": "<pre><code>Table: Stadium\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| id            | int     |\n| visit_date    | date    |\n| people        | int     |\n+---------------+---------+\nvisit_date is the primary key for this table.\nEach row of this table contains the visit date and visit id to the stadium with the number of people during the visit.\nNo two rows will have the same visit_date, and as the id increases, the dates increase as well.\n\n\nWrite an SQL query to display the records with three or more rows with consecutive id&#39;s, and the number of people is greater than or equal to 100 for each.\n\nReturn the result table ordered by visit_date in ascending order.\n\nThe query result format is in the following example.\n\n\n\nStadium table:\n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 1    | 2017-01-01 | 10        |\n| 2    | 2017-01-02 | 109       |\n| 3    | 2017-01-03 | 150       |\n| 4    | 2017-01-04 | 99        |\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+\n\nResult table:\n+------+------------+-----------+\n| id   | visit_date | people    |\n+------+------------+-----------+\n| 5    | 2017-01-05 | 145       |\n| 6    | 2017-01-06 | 1455      |\n| 7    | 2017-01-07 | 199       |\n| 8    | 2017-01-09 | 188       |\n+------+------------+-----------+\nThe four rows with ids 5, 6, 7, and 8 have consecutive ids and each of them has &gt;= 100 people attended. Note that row 8 was included even though the visit_date was not the next day after row 7.\nThe rows with ids 2 and 3 are not included because we need at least three consecutive ids.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Ninja",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a table `Stadium` containing `id`, `visit_date`, and `people` columns, find all records where at least three consecutive entries have `people` greater than or equal to 100. The result should be ordered by `visit_date` in ascending order.",
                "constraints": [
                    "`visit_date` is the primary key.",
                    "Rows are ordered by `id` and consequently `visit_date`.",
                    "Need at least three consecutive entries with `people >= 100`."
                ],
                "testcases": [
                    {
                        "input": "stadium=[(1, '2017-01-01', 10), (2, '2017-01-02', 109), (3, '2017-01-03', 150), (4, '2017-01-04', 99), (5, '2017-01-05', 145), (6, '2017-01-06', 1455), (7, '2017-01-07', 199), (8, '2017-01-09', 188)]",
                        "output": "[(5, '2017-01-05', 145), (6, '2017-01-06', 1455), (7, '2017-01-07', 199), (8, '2017-01-09', 188)]",
                        "explanation": "The records with ids 5, 6, 7, and 8 meet the criteria.  2 and 3 do not because there are not three consecutive values above or equal to 100."
                    },
                    {
                        "input": "stadium=[(1, '2023-01-01', 100), (2, '2023-01-02', 101), (3, '2023-01-03', 102), (4, '2023-01-04', 99), (5, '2023-01-05', 100), (6, '2023-01-06', 101)]",
                        "output": "[(1, '2023-01-01', 100), (2, '2023-01-02', 101), (3, '2023-01-03', 102)]",
                        "explanation": "Only the first three records satisfy the condition of having three consecutive ids with people >= 100. The last two records are consecutive and above 100, but do not form a group of three or more since they are separated by the fourth entry."
                    },
                    {
                        "input": "stadium=[(1, '2023-01-01', 50), (2, '2023-01-02', 60), (3, '2023-01-03', 70), (4, '2023-01-04', 100), (5, '2023-01-05', 110), (6, '2023-01-06', 120), (7, '2023-01-07', 50)]",
                        "output": "[(4, '2023-01-04', 100), (5, '2023-01-05', 110), (6, '2023-01-06', 120)]",
                        "explanation": "Records 4, 5, and 6 satisfy the consecutive and people count requirement."
                    },
                    {
                        "input": "stadium=[(1, '2023-01-01', 100), (2, '2023-01-02', 101), (3, '2023-01-03', 102), (5, '2023-01-05', 100), (6, '2023-01-06', 101), (7, '2023-01-07', 102)]",
                        "output": "[(1, '2023-01-01', 100), (2, '2023-01-02', 101), (3, '2023-01-03', 102), (5, '2023-01-05', 100), (6, '2023-01-06', 101), (7, '2023-01-07', 102)]",
                        "explanation": "Two sets of consecutive ids satisfy the condition. Note that IDs 1-3 and 5-7 are consecutive but they are separate blocks."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}