{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16970,
            "title": "Hungry Ninja",
            "titleSlug": "hungry-ninja_3743262",
            "content": "<h4 id=\"ninja-decided-to-visit-the-new-buffet-restaurant-in-the-neighbourhood-there-are-a-total-of-n-different-dishes-numbered-0-to-n-1-but-there-is-a-restriction-the-ninja-cannot-make-orders-on-his-own-will-there-are-m-types-of-orders-that-he-can-make-each-order-i-consists-of-three-values-represented-by-array-c-l-and-r-which-means-ninja-can-order-all-dishes-numbered-l-to-r-with-the-cost-of-c-ninja-currency\">Ninja decided to visit the new Buffet Restaurant in the neighbourhood. There are a total of \u2018N\u2019 different dishes, numbered \u20180 to N-1\u2019. But there is a restriction. The ninja cannot make orders on his own will. There are \u2018M\u2019 types of orders that he can make. Each Order \u2018i\u2019 consists of three values represented by array \u2018C\u2019, \u2018L\u2019 and \u2018R\u2019, which means Ninja can order all dishes numbered \u2018L\u2019 to \u2018R\u2019 with the cost of \u2018C\u2019 Ninja currency.</h4>\n\n<h4 id=\"ninja-wants-to-taste-all-n-dishes-but-he-wants-to-spend-the-minimum-amount-of-ninja-currency\">Ninja wants to taste all \u2018N\u2019 dishes, but he wants to spend the minimum amount of Ninja Currency.</h4>\n\n<h4 id=\"can-you-help-ninja-figure-out-the-minimum-amount-of-ninja-currency-he-needs-to-spend-to-taste-all-dishes\">Can you help Ninja figure out the minimum amount of Ninja Currency he needs to spend to taste all dishes.</h4>\n\n<h4 id=\"you-can-assume-that-for-given-constraints-answers-always-exist\">You can assume that for given constraints, answers always exist.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>N = 4\nM = 3\nA = [ [ 0, 2, 1 ] , [ 1, 2, 4 ] , [ 2, 3, 3 ] ]\n\nIf Ninja chooses [ 0, 2, 1 ] and [ 2, 3, 3 ], he can taste each dish for 4 Ninja Currency.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39;, denoting the number of test cases.\nThen the test cases follow:\n\nThe first line of each test case contains two space-separated integers, &#39;N&#39; and &#39;M&#39;, denoting the total number of dishes and the total number of different orders.\n\nThe following \u2018M\u2019 line contains three integers \u2018Li\u2019, \u2018Ri\u2019 and \u2018Ci\u2019, denoting Starting point of food, End Point of food and Cost of ordering from \u2018Li\u2019 to \u2018Ri\u2019. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print an integer denoting the minimum Ninja Currency required to taste all dishes for each test case.\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print the expected output. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 10\n1 &lt;= &#39;N&#39; &lt;= 10^5\n1 &lt;= &#39;M&#39; &lt;= 10^5\n0 &lt;= &#39;L[i]&#39; &lt;= \u2018R[i]\u2019 &lt;= \u2018N-1\u2019\n1 &lt;= \u2018C[i]\u2019 &lt;= 10^4\nSum of &#39;N&#39; overall test cases doesn\u2019t exceed 10^5.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5 3\n0 3 1\n0 4 3\n4 4 1\n5 2\n0 2 4\n1 4 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n8\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>For test case 1:\nIf Ninja choose [ 0, 3, 1 ] and [ 4, 4, 1 ], the total cost equals 2. No other choice can offer less price to  Ninja.\n\nFor test case 2:\nNinja only has one choice to select both orders to feed him all dishes, so the total Ninja Currency used is 8.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n5 3\n0 4 5\n0 4 4\n0 4 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja wants to try all 'N' dishes at a buffet restaurant. He can't order dishes individually, but must choose from 'M' pre-defined orders. Each order 'i' allows him to order dishes from 'L' to 'R' at a cost of 'C'.  Determine the minimum total cost for Ninja to taste all 'N' dishes.",
                "constraints": [
                    "1 <= 'T' <= 10 (Number of test cases)",
                    "1 <= 'N' <= 10^5 (Number of dishes)",
                    "1 <= 'M' <= 10^5 (Number of orders)",
                    "0 <= 'L[i]' <= \u2018R[i]\u2019 <= \u2018N-1\u2019 (Range of dishes in order 'i')",
                    "1 <= \u2018C[i]\u2019 <= 10^4 (Cost of order 'i')",
                    "Sum of 'N' overall test cases doesn\u2019t exceed 10^5.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 3\n0 3 1\n0 4 3\n4 4 1",
                        "output": "2",
                        "explanation": "The ninja can choose the order [0, 3] with cost 1 and the order [4, 4] with cost 1.  This covers all dishes (0-4) at a total cost of 2.  No other combination results in a lower cost."
                    },
                    {
                        "input": "5 2\n0 2 4\n1 4 4",
                        "output": "8",
                        "explanation": "The ninja must choose both order [0,2] with cost 4 and order [1,4] with cost 4. Total cost is 8 to get dishes 0 to 4."
                    },
                    {
                        "input": "5 3\n0 4 5\n0 4 4\n0 4 2",
                        "output": "2",
                        "explanation": "The ninja only need to choose the order [0,4] with cost 2 to get dishes 0 to 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you find the minimum cost required to cover all previous dishes before \u2018i-th\u2019 dish.</p>",
            "<p>Can you use a data structure to optimise the previous approach?&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}