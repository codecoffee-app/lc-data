{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8922,
            "title": "Identical BSTs",
            "titleSlug": "identical-bsts_920527",
            "content": "<h4 id=\"given-two-arrays-arr1-and-arr2-each-of-size-n-representing-a-sequence-of-keys-find-out-whether-the-two-binary-search-trees-generated-from-the-arrays-will-be-identical-or-not-without-actually-constructing-the-tree-return-true-if-the-bsts-are-identical-otherwise-return-false\">Given two arrays, \u2018ARR1\u2019 and \u2018ARR2\u2019 each of size \u2018N\u2019, representing a sequence of keys. Find out whether the two Binary Search Trees (generated from the arrays) will be identical or not without actually constructing the tree. Return \u2018True\u2019 if the BSTs are identical. Otherwise, return \u2018False\u2019.</h4>\n\n<h4 id=\"binary-search-tree-bst-properties-the-left-subtree-of-a-node-contains-values-strictly-lesser-than-the-node-s-value-the-right-subtree-of-a-node-contains-values-strictly-greater-than-the-node-s-value-the-left-and-right-subtree-of-each-node-must-be-a-bst-there-should-not-be-any-duplicate-nodes\">Binary Search Tree (BST) properties:<ul><li>The left subtree of a node contains values strictly lesser than the node\u2019s value.</li><li>The right subtree of a node contains values strictly greater than the node\u2019s value.</li><li>The left and right subtree of each node must be a BST.</li><li>There should not be any duplicate nodes.</li></ul></h4>\n\n<h4 id=\"constructing-bst-from-the-given-array-the-0-th-element-is-always-the-root-node-of-the-bst-after-that-traverse-the-array-elements-in-the-given-sequence-and-insert-add-them-to-the-bst-the-new-nodes-must-be-inserted-at-one-of-the-leaf-nodes-as-its-child-while-maintaining-the-bst-property\">Constructing BST from the given array: <ul><li>The \u20180-th\u2019 element is always the root node of the BST.</li><li>After that, traverse the array elements in the given sequence and insert/add them to the BST. The new nodes must be inserted at one of the leaf nodes (as its child), while maintaining the BST property.</li></ul></h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>\u2018N\u2019 = 4, \u2018ARR1\u2019 = [2, 4, 1, 3] and \u2018ARR2\u2019 = [2, 4, 3, 1]\n\nThe following diagram shows how to construct a BST from the input array (you have to solve this problem without actually constructing the tree)\n\nBST for \u2018ARR1\u2019 = [2, 4, 1, 3]:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/input1-9948.png\" alt=\"input1\"></p>\n\n<pre><code>BST for \u2018ARR2\u2019 = [2, 4, 3, 1]:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/input2-9949.png\" alt=\"input2\"></p>\n\n<pre><code>As the BSTs constructed from \u2018ARR1\u2019 and \u2018ARR2\u2019 are identical, you should return \u2018True\u2019 as the answer.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. Then each test case follows.\n\nThe first line of input contains a single integer \u2018N\u2019 denoting the size of the arrays \u2018ARR1\u2019 and \u2018ARR2\u2019.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers representing the array \u2018ARR1\u2019.\n\nThe third line of each test case contains \u2018N\u2019 space-separated integers representing the array \u2018ARR2\u2019.   \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print \u2018True\u2019 if the BSTs constructed from \u2018ARR1\u2019 and \u2018ARR2\u2019 are identical. Otherwise, return \u2018False\u2019.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 3*10^3\n\nThe values in the arrays \u2018ARR1\u2019 and \u2018ARR2\u2019 range from \u2018[1, 10^9]\u2019.\n\nTime Limit: 1 sec  \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\n4 3 5 6 2\n4 5 6 3 2\n4\n5 7 6 4\n5 4 6 7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case :\n\nBST for \u2018ARR1\u2019 = [4, 3, 5, 6, 2]:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample11-9950.png\" alt=\"sample11\"></p>\n\n<pre><code>BST for \u2018ARR2\u2019 = [4, 5, 6, 3, 2]\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample12-9951.png\" alt=\"sample12\"></p>\n\n<pre><code>As the BSTs constructed from \u2018ARR1\u2019 and \u2018ARR2\u2019 are identical, you should return \u2018True\u2019 as the answer.\n\nFor the second test case :\n\nBST for \u2018ARR1\u2019 = [5, 7, 6, 4]:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample21-9952.png\" alt=\"sample21\"></p>\n\n<pre><code>BST for \u2018ARR2\u2019 = [5, 4, 6, 7]:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample22-9953.png\" alt=\"sampe22\"></p>\n\n<pre><code>As the BSTs constructed from \u2018ARR1\u2019 and \u2018ARR2\u2019 are different, you should return \u2018False\u2019 as the answer.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3\n1 2 3\n1 2 3\n4\n1 2 3 4 \n5 6 7 8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, `ARR1` and `ARR2`, each of size `N`, representing a sequence of keys, determine if the Binary Search Trees (BSTs) generated from these arrays are identical without explicitly constructing the trees. Return `True` if the BSTs are identical, and `False` otherwise.  The 0th element of each array represents the root node of the BST. Subsequent elements are inserted into the BST in the order they appear in the array, maintaining BST properties.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 3 * 10^3",
                    "Values in `ARR1` and `ARR2` range from [1, 10^9]",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n4 3 5 6 2\n4 5 6 3 2",
                        "output": "True",
                        "explanation": "The BSTs constructed from `ARR1` = [4, 3, 5, 6, 2] and `ARR2` = [4, 5, 6, 3, 2] are identical. Therefore, the output is `True`."
                    },
                    {
                        "input": "4\n5 7 6 4\n5 4 6 7",
                        "output": "False",
                        "explanation": "The BSTs constructed from `ARR1` = [5, 7, 6, 4] and `ARR2` = [5, 4, 6, 7] are different. Therefore, the output is `False`."
                    },
                    {
                        "input": "3\n1 2 3\n1 2 3",
                        "output": "True",
                        "explanation": "The BSTs constructed from `ARR1` = [1, 2, 3] and `ARR2` = [1, 2, 3] are identical. Therefore, the output is `True`."
                    },
                    {
                        "input": "4\n1 2 3 4\n5 6 7 8",
                        "output": "False",
                        "explanation": "The BSTs constructed from `ARR1` = [1, 2, 3, 4] and `ARR2` = [5, 6, 7, 8] are different. Therefore, the output is `False`."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try using recursion to check if the root node\u2019s left and right child nodes are the same for both the arrays (or BSTs).</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}