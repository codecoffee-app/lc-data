{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7995,
            "title": "Identical Trees",
            "titleSlug": "identical-trees_799364",
            "content": "<h4 id=\"you-are-given-two-binary-trees-with-n-and-m-nodes-respectively\">You are given two binary trees with <em><strong>&#39;n&#39;</strong></em> and <em><strong>&#39;m&#39;</strong></em> nodes respectively.</h4>\n\n<p><br></p>\n\n<h4 id=\"you-need-to-return-true-if-the-two-trees-are-identical-otherwise-return-false\">You need to return true if the two trees are identical. Otherwise, return false.</h4>\n\n<p><br></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>For the trees given below:- \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/example-5496.png\" alt=\"example\"></p>\n\n<pre><code>The given trees are identical as:-\n1. The number of nodes in both trees is the same. \n2. The number of edges in both trees is the same. \n3. The data for root for both the trees is the same i.e 5. \n4. The data of root -&gt; left (root\u2019s left child) for both the trees is the same i.e 2.\n5. The data of root -&gt; right (root\u2019s right child) for both the trees is the same i.e 3.\n6. The data of root -&gt; right -&gt; left ( left child of root\u2019s right child) for both the trees is the same i.e 6.\n7. Nodes with data 2 and 6 are the leaf nodes for both the binary trees. \n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains elements in the level order form for the first binary tree. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nThe second line of input contains elements in the level order form for the second tree. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<h5 id=\"input-format-explanation\">Input format explanation:</h5>\n\n<pre><code>The level order input for the tree depicted in the below image would be \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level, and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Print in a single line either \u201cTrue\u201d (if the two trees are identical) or \u201cFalse\u201d otherwise. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1 :</h5>\n\n<pre><code>5 2 3 -1 6 -1 -1 -1 -1\n5 2 3 -1 6 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>True\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>Refer to the example given above in the problem description.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample input 2 :</h5>\n\n<pre><code>1 -1 2 -1 -1\n1 2 -1 -1 -1  \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>False\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/example2-5498.png\" alt=\"example\"></p>\n\n<pre><code>Although the following conditions satisfy:\n\nThe number of nodes in both trees is the same.\nThe number of edges in both trees is the same. \nThe data for root for both the trees is the same i.e 1.\n\nIt\u2019s visible from the pictorial representation that the trees are not identical. Reason being:\nIn Binary tree 1, root\u2019s right is NULL but it\u2019s not true for Binary tree 2. \nIn Binary tree 1, root\u2019s left is not NULL but it\u2019s not true for Binary tree 2. \n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity:</h5>\n\n<pre><code>The expected time complexity is O(min(n,m)).\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>0 &lt;= &#39;n&#39; &lt;= 10^6\n0 &lt;= &#39;m&#39; &lt;= 10^6\n1 &lt;= Node Data &lt;= 10^9 \n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 53,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the roots of two binary trees, determine if the two trees are structurally identical and have the same values at corresponding nodes. Return `true` if they are identical, and `false` otherwise.",
                "constraints": [
                    "0 <= Number of nodes in the first tree (n) <= 10^6",
                    "0 <= Number of nodes in the second tree (m) <= 10^6",
                    "1 <= Node Data <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "root1 = [5, 2, 3, -1, 6, -1, -1, -1, -1], root2 = [5, 2, 3, -1, 6, -1, -1, -1, -1]",
                        "output": "True",
                        "explanation": "Both trees have the same structure and node values. Tree1's structure is: 5 (root), 2 (left), 3 (right), null(2's left), 6(2's right), null(3's left), null(3's right), null(6's left), null(6's right). Tree 2 is exactly the same.  Therefore, the trees are identical."
                    },
                    {
                        "input": "root1 = [1, -1, 2, -1, -1], root2 = [1, 2, -1, -1, -1]",
                        "output": "False",
                        "explanation": "The trees have different structures. Tree 1: 1(root), null(left), 2(right), null(2's left), null(2's right). Tree 2: 1(root), 2(left), null(right), null(2's left), null(2's right).  The left and right children are swapped, making the trees non-identical."
                    },
                    {
                        "input": "root1 = [1, 2, 3, 4, 5, 6, 7], root2 = [1, 2, 3, 4, 5, 6, 7]",
                        "output": "True",
                        "explanation": "Both trees have the same structure and node values at every level and position. The tree is a complete binary tree with values 1 to 7 at respective nodes."
                    },
                    {
                        "input": "root1 = [1, 2, 3, 4, 5, -1, -1], root2 = [1, 2, 3, 4, -1, -1, 5]",
                        "output": "False",
                        "explanation": "The trees have different structures. In tree1 the node with value 5 is left child of 2, and node with value 4 is left child of 2. In tree2 the node with value 4 is left child of 2, and node with value 5 is right child of 3. Therefore, the trees are not identical."
                    },
                    {
                        "input": "root1 = [1], root2 = [1]",
                        "output": "True",
                        "explanation": "Both trees consist of a single node with the same value."
                    },
                    {
                        "input": "root1 = [], root2 = []",
                        "output": "True",
                        "explanation": "Both trees are empty."
                    },
                    {
                        "input": "root1 = [1], root2 = []",
                        "output": "False",
                        "explanation": "One tree has a node and the other is empty."
                    },
                    {
                        "input": "root1 = [1,2,-1,-1,-1], root2=[1,2,-1,-1,-1]",
                        "output": "True",
                        "explanation": "Both trees consist of a single root node with the same value and same childs."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We can observe that the level order traversal for both the given trees will be the same if they are identical. We can thus store the level order traversal for both the trees and check if it is the same or not.&nbsp;</p>",
            "<p>We can observe that the two trees will be identical if:-</p><ol><li>The root\u2019s data for both trees is the same.</li><li>The left subtree of both trees is identical.</li><li>The right subtree of both trees is identical.</li></ol>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}