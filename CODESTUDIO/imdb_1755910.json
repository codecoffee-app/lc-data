{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13630,
            "title": "IMDb",
            "titleSlug": "imdb_1755910",
            "content": "<h4 id=\"print-the-title-and-ratings-of-the-movies-released-in-2012-whose-metacritic-rating-is-more-than-60-and-domestic-collections-exceed-10-crores-download-the-dataset-from-console\">Print the title and ratings of the movies released in 2012 whose metacritic rating is more than 60 and Domestic collections exceed 10 Crores. (Download the dataset from console)</h4>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 604,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a dataset of movies, identify and output the title and ratings (Metacritic and IMDB) of all movies released in the year 2012 that meet the following criteria:\n\n1.  Metacritic rating is strictly greater than 60.\n2.  Domestic collections exceed 10 Crores.",
                "constraints": [
                    "The movie dataset must be in a suitable format (e.g., CSV, JSON) that can be easily parsed.",
                    "The dataset must contain columns for movie title, release year, Metacritic rating, IMDB rating, and domestic collections.",
                    "Domestic collections must be represented in Crores."
                ],
                "testcases": [
                    {
                        "input": "movies=[{'title': 'Movie A', 'year': 2012, 'metascore': 70, 'imdb': 7.5, 'domestic_collections': 15}, {'title': 'Movie B', 'year': 2011, 'metascore': 80, 'imdb': 8.0, 'domestic_collections': 20}, {'title': 'Movie C', 'year': 2012, 'metascore': 50, 'imdb': 6.5, 'domestic_collections': 12}, {'title': 'Movie D', 'year': 2012, 'metascore': 65, 'imdb': 7.0, 'domestic_collections': 8}, {'title': 'Movie E', 'year': 2012, 'metascore': 75, 'imdb': 8.2, 'domestic_collections': 11}]",
                        "output": "[{'title': 'Movie A', 'metascore': 70, 'imdb': 7.5}, {'title': 'Movie E', 'metascore': 75, 'imdb': 8.2}]",
                        "explanation": "Movie A and Movie E are the only movies released in 2012 with Metacritic scores greater than 60 and domestic collections exceeding 10 Crores."
                    },
                    {
                        "input": "movies=[{'title': 'Movie F', 'year': 2012, 'metascore': 61, 'imdb': 7.1, 'domestic_collections': 10.1}, {'title': 'Movie G', 'year': 2012, 'metascore': 60, 'imdb': 6.9, 'domestic_collections': 10.0}, {'title': 'Movie H', 'year': 2013, 'metascore': 85, 'imdb': 8.5, 'domestic_collections': 25.0}]",
                        "output": "[{'title': 'Movie F', 'metascore': 61, 'imdb': 7.1}]",
                        "explanation": "Only Movie F meets both conditions: released in 2012, metascore > 60, and domestic collections > 10 Crores.  Movie G fails because metascore is not strictly greater than 60. Movie H fails because it was not released in 2012."
                    },
                    {
                        "input": "movies=[{'title': 'Movie I', 'year': 2012, 'metascore': 90, 'imdb': 9.0, 'domestic_collections': 100}, {'title': 'Movie J', 'year': 2012, 'metascore': 70, 'imdb': 7.0, 'domestic_collections': 20}, {'title': 'Movie K', 'year': 2012, 'metascore': 80, 'imdb': 8.0, 'domestic_collections': 15}]",
                        "output": "[{'title': 'Movie I', 'metascore': 90, 'imdb': 9.0}, {'title': 'Movie J', 'metascore': 70, 'imdb': 7.0}, {'title': 'Movie K', 'metascore': 80, 'imdb': 8.0}]",
                        "explanation": "All three movies satisfy the given conditions: year is 2012, metascore is greater than 60, and domestic_collections is greater than 10."
                    },
                    {
                        "input": "movies=[]",
                        "output": "[]",
                        "explanation": "If the movie list is empty, the output should be an empty list."
                    },
                    {
                        "input": "movies=[{'title': 'Movie L', 'year': 2010, 'metascore': 65, 'imdb': 6.5, 'domestic_collections': 11}]",
                        "output": "[]",
                        "explanation": "The only available movie was released in 2010, not in 2012. Therefore, the output list should be empty."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n   Time Complexity: O(N*S)\n   Space Complexity: O(N*S)\n\n   Where \u2018N\u2019 is the number of persons on the island and \u2018S\u2019 is the total seating capacity of the plane.\n*/\n\n\nbool escape(int n, int s, int w, vector<int> arrs, vector<int> arrw)\n{\n    vector<vector<int>> dp(n + 1, vector<int>(s + 1, 0));\n    int total = 0;\n    for (int i = 1; i < n + 1; i++)\n    {\n        total += arrw[i - 1];\n        for (int j = 1; j < s + 1; j++)\n        {\n            // Calculating the dp transition states, where dp[i][j] represents \n            // the maximum weight that can be carried using i persons and j seating space\n            dp[i][j] = dp[i - 1][j];\n            if (j >= arrs[i - 1])\n            {\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - arrs[i - 1]] + arrw[i - 1]);\n            }\n        }\n    }\n\n    for (int i = 0; i < s + 1; i++)\n    {\n        // If the weight left is less than eqaul to w,\n        // Return True\n        if (total - dp[n][i] <= w)\n        {\n            return true;\n        }\n    }\n    \n    return false;\n}\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n   Time Complexity: O(N*S)\r\n   Space Complexity: O(N*S)\r\n\r\n   Where N is the number of persons on the island and S is the total seating capacity of the plane.\r\n*/\r\n\r\npublic class Solution {\r\n    static boolean escape(int n, int s, int w, int[] arrs, int[] arrw) {\r\n\r\n        int[][] dp = new int[n + 1][s + 1];\r\n        int total = 0;\r\n        for (int i = 1; i < n + 1; i++) {\r\n            total += arrw[i - 1];\r\n            for (int j = 1; j < s + 1; j++) {\r\n                // Calculating the dp transition states, where dp[i][j] represents\r\n                // the maximum weight that can be carried using i persons and j seating space\r\n                dp[i][j] = dp[i - 1][j];\r\n                if (j >= arrs[i - 1]) {\r\n                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - arrs[i - 1]] + arrw[i - 1]);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < s + 1; i++) {\r\n            // If the weight left is less than eqaul to w,\r\n            // Return True\r\n            if (total - dp[n][i] <= w) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n   Time Complexity: O(N*S)\r\n   Space Complexity: O(N*S)\r\n\r\n   Where N is the number of persons on the island and S is the total seating capacity of the plane.\r\n'''\r\nfrom typing import *\r\n\r\ndef escape(n: int, s: int, w: int, arrs: List[int], arrw: List[int])-> bool:\r\n    \r\n    dp = [[0 for i in range(s + 1)] for i in range(n + 1)]\r\n    total = 0\r\n\r\n    for i in range(1, n + 1):\r\n\r\n        total += arrw[i - 1]\r\n        for j in range(1, s + 1):\r\n\r\n            # Calculating the dp transition states, where dp[i][j] represents \r\n            # the maximum weight that can be carried using i persons and j seating space\r\n            dp[i][j] = dp[i - 1][j]\r\n\r\n            if j >= arrs[i - 1]:\r\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - arrs[i - 1]] +arrw[i - 1])\r\n    \r\n    for i in range(s + 1):\r\n        # If the weight left is less than eqaul to w,\r\n        # Return True\r\n        if total - dp[n][i] <= w:\r\n            return True\r\n    \r\n    return False",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}