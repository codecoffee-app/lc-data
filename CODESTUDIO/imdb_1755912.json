{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13632,
            "title": "IMDb",
            "titleSlug": "imdb_1755912",
            "content": "<h4 id=\"print-the-genre-and-the-maximum-net-profit-among-all-the-movies-of-that-genre-released-in-2012-per-genre-download-the-dataset-from-console\">Print the genre and the maximum net profit among all the movies of that genre released in 2012 per genre. (Download the dataset from console)</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. Do not print any row where either genre or the net profit is empty/null.\n2. net_profit = Domestic + Worldwide - Budget\n3. Keep the name of the columns as &#39;genre&#39; and &#39;net_profit&#39;\n4. The genres should be printed in alphabetical order.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 104,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a dataset of movies, find the maximum net profit for each genre among movies released in the year 2012. Calculate net profit as the sum of Domestic and Worldwide gross revenues minus the Budget.  Output the genre and the corresponding maximum net profit, ensuring the results are ordered alphabetically by genre. Exclude any movies where the genre or net profit information is missing or null.",
                "constraints": [
                    "Exclude rows with missing or null genre or net profit.",
                    "Calculate net profit as Domestic + Worldwide - Budget.",
                    "Order the output alphabetically by genre."
                ],
                "testcases": [
                    {
                        "input": "movies=[{'Genre': 'Action', 'Gross': {'Domestic': 100, 'Worldwide': 200}, 'Budget': 50, 'Release Date': '2012-01-01'}, {'Genre': 'Action', 'Gross': {'Domestic': 150, 'Worldwide': 250}, 'Budget': 75, 'Release Date': '2012-02-01'}, {'Genre': 'Comedy', 'Gross': {'Domestic': 80, 'Worldwide': 120}, 'Budget': 40, 'Release Date': '2012-03-01'}, {'Genre': 'Comedy', 'Gross': {'Domestic': 90, 'Worldwide': 130}, 'Budget': 50, 'Release Date': '2012-04-01'}, {'Genre': 'Drama', 'Gross': {'Domestic': 60, 'Worldwide': 100}, 'Budget': 30, 'Release Date': '2012-05-01'}]",
                        "output": "[{'genre': 'Action', 'net_profit': 325}, {'genre': 'Comedy', 'net_profit': 170}, {'genre': 'Drama', 'net_profit': 130}]",
                        "explanation": "Action: (100+200-50) = 250, (150+250-75) = 325. Max is 325.  Comedy: (80+120-40) = 160, (90+130-50) = 170. Max is 170.  Drama: (60+100-30) = 130. Max is 130. Sorted alphabetically by genre."
                    },
                    {
                        "input": "movies=[{'Genre': 'Action', 'Gross': {'Domestic': 100, 'Worldwide': 200}, 'Budget': 50, 'Release Date': '2013-01-01'}, {'Genre': 'Action', 'Gross': {'Domestic': 150, 'Worldwide': 250}, 'Budget': 75, 'Release Date': '2012-02-01'}, {'Genre': 'Comedy', 'Gross': {'Domestic': 80, 'Worldwide': 120}, 'Budget': 40, 'Release Date': '2012-03-01'}, {'Genre': 'Comedy', 'Gross': {'Domestic': 90, 'Worldwide': 130}, 'Budget': 50, 'Release Date': '2013-04-01'}]",
                        "output": "[{'genre': 'Action', 'net_profit': 325}, {'genre': 'Comedy', 'net_profit': 160}]",
                        "explanation": "Action: only the second movie is from 2012, so (150+250-75) = 325. Comedy: only the third movie is from 2012, so (80+120-40) = 160. Sorted alphabetically by genre."
                    },
                    {
                        "input": "movies=[{'Genre': 'Action', 'Gross': {'Domestic': 100, 'Worldwide': 200}, 'Budget': 50, 'Release Date': '2012-01-01'}, {'Genre': 'Action', 'Gross': {'Domestic': 150, 'Worldwide': 250}, 'Budget': None, 'Release Date': '2012-02-01'}, {'Genre': 'Comedy', 'Gross': {'Domestic': 80, 'Worldwide': 120}, 'Budget': 40, 'Release Date': '2012-03-01'}, {'Genre': None, 'Gross': {'Domestic': 90, 'Worldwide': 130}, 'Budget': 50, 'Release Date': '2012-04-01'}]",
                        "output": "[{'genre': 'Action', 'net_profit': 250}, {'genre': 'Comedy', 'net_profit': 160}]",
                        "explanation": "The second Action movie has None budget, so it's excluded. The fourth movie has None genre, so it's excluded. Action: (100+200-50) = 250. Comedy: (80+120-40) = 160. Sorted alphabetically by genre."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n   Time Complexity: O(N*S)\n   Space Complexity: O(N*S)\n\n   Where \u2018N\u2019 is the number of persons on the island and \u2018S\u2019 is the total seating capacity of the plane.\n*/\n\n\nbool escape(int n, int s, int w, vector<int> arrs, vector<int> arrw)\n{\n    vector<vector<int>> dp(n + 1, vector<int>(s + 1, 0));\n    int total = 0;\n    for (int i = 1; i < n + 1; i++)\n    {\n        total += arrw[i - 1];\n        for (int j = 1; j < s + 1; j++)\n        {\n            // Calculating the dp transition states, where dp[i][j] represents \n            // the maximum weight that can be carried using i persons and j seating space\n            dp[i][j] = dp[i - 1][j];\n            if (j >= arrs[i - 1])\n            {\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - arrs[i - 1]] + arrw[i - 1]);\n            }\n        }\n    }\n\n    for (int i = 0; i < s + 1; i++)\n    {\n        // If the weight left is less than eqaul to w,\n        // Return True\n        if (total - dp[n][i] <= w)\n        {\n            return true;\n        }\n    }\n    \n    return false;\n}\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n   Time Complexity: O(N*S)\r\n   Space Complexity: O(N*S)\r\n\r\n   Where N is the number of persons on the island and S is the total seating capacity of the plane.\r\n*/\r\n\r\npublic class Solution {\r\n    static boolean escape(int n, int s, int w, int[] arrs, int[] arrw) {\r\n\r\n        int[][] dp = new int[n + 1][s + 1];\r\n        int total = 0;\r\n        for (int i = 1; i < n + 1; i++) {\r\n            total += arrw[i - 1];\r\n            for (int j = 1; j < s + 1; j++) {\r\n                // Calculating the dp transition states, where dp[i][j] represents\r\n                // the maximum weight that can be carried using i persons and j seating space\r\n                dp[i][j] = dp[i - 1][j];\r\n                if (j >= arrs[i - 1]) {\r\n                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - arrs[i - 1]] + arrw[i - 1]);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < s + 1; i++) {\r\n            // If the weight left is less than eqaul to w,\r\n            // Return True\r\n            if (total - dp[n][i] <= w) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n   Time Complexity: O(N*S)\r\n   Space Complexity: O(N*S)\r\n\r\n   Where N is the number of persons on the island and S is the total seating capacity of the plane.\r\n'''\r\nfrom typing import *\r\n\r\ndef escape(n: int, s: int, w: int, arrs: List[int], arrw: List[int])-> bool:\r\n    \r\n    dp = [[0 for i in range(s + 1)] for i in range(n + 1)]\r\n    total = 0\r\n\r\n    for i in range(1, n + 1):\r\n\r\n        total += arrw[i - 1]\r\n        for j in range(1, s + 1):\r\n\r\n            # Calculating the dp transition states, where dp[i][j] represents \r\n            # the maximum weight that can be carried using i persons and j seating space\r\n            dp[i][j] = dp[i - 1][j]\r\n\r\n            if j >= arrs[i - 1]:\r\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - arrs[i - 1]] +arrw[i - 1])\r\n    \r\n    for i in range(s + 1):\r\n        # If the weight left is less than eqaul to w,\r\n        # Return True\r\n        if total - dp[n][i] <= w:\r\n            return True\r\n    \r\n    return False",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}