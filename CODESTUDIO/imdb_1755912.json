{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13632,
            "title": "IMDb",
            "titleSlug": "imdb_1755912",
            "content": "<h4 id=\"print-the-genre-and-the-maximum-net-profit-among-all-the-movies-of-that-genre-released-in-2012-per-genre-download-the-dataset-from-console\">Print the genre and the maximum net profit among all the movies of that genre released in 2012 per genre. (Download the dataset from console)</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. Do not print any row where either genre or the net profit is empty/null.\n2. net_profit = Domestic + Worldwide - Budget\n3. Keep the name of the columns as &#39;genre&#39; and &#39;net_profit&#39;\n4. The genres should be printed in alphabetical order.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 104,
            "dislikes": "NA",
            "rephrased": {
                "body": "Find the maximum net profit for each movie genre released in 2012. Calculate net profit as the sum of domestic and worldwide gross revenue minus the budget. Display the genre and its corresponding maximum net profit.",
                "constraints": [
                    "Exclude rows where the genre or net profit is missing or null.",
                    "Calculate net_profit as: Domestic + Worldwide - Budget",
                    "Output columns must be named 'genre' and 'net_profit'.",
                    "Sort the output genres alphabetically."
                ],
                "testcases": [
                    {
                        "input": "Sample movie dataset with movies from various genres and release years, including movies from 2012.",
                        "output": "A table with two columns: 'genre' and 'net_profit'. Each row represents a genre and its maximum net profit among movies released in 2012. The genres are sorted alphabetically.",
                        "explanation": "Consider a dataset containing movies from 2012 such as Action, Comedy, and Drama. For each genre, calculate the net profit for each movie (Domestic + Worldwide - Budget). Determine the maximum net profit for each genre. The output will list each genre and the corresponding maximum net profit found in the dataset."
                    },
                    {
                        "input": "A movie dataset where no movies were released in 2012, or all movies in 2012 have null genre or net profit.",
                        "output": "Empty dataset",
                        "explanation": "If there are no movies released in 2012 or all 2012 movies have missing genre or net profit values after filtering, the resulting output will be empty."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n   Time Complexity: O(N*S)\n   Space Complexity: O(N*S)\n\n   Where \u2018N\u2019 is the number of persons on the island and \u2018S\u2019 is the total seating capacity of the plane.\n*/\n\n\nbool escape(int n, int s, int w, vector<int> arrs, vector<int> arrw)\n{\n    vector<vector<int>> dp(n + 1, vector<int>(s + 1, 0));\n    int total = 0;\n    for (int i = 1; i < n + 1; i++)\n    {\n        total += arrw[i - 1];\n        for (int j = 1; j < s + 1; j++)\n        {\n            // Calculating the dp transition states, where dp[i][j] represents \n            // the maximum weight that can be carried using i persons and j seating space\n            dp[i][j] = dp[i - 1][j];\n            if (j >= arrs[i - 1])\n            {\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - arrs[i - 1]] + arrw[i - 1]);\n            }\n        }\n    }\n\n    for (int i = 0; i < s + 1; i++)\n    {\n        // If the weight left is less than eqaul to w,\n        // Return True\n        if (total - dp[n][i] <= w)\n        {\n            return true;\n        }\n    }\n    \n    return false;\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n   Time Complexity: O(N*S)\r\n   Space Complexity: O(N*S)\r\n\r\n   Where N is the number of persons on the island and S is the total seating capacity of the plane.\r\n'''\r\nfrom typing import *\r\n\r\ndef escape(n: int, s: int, w: int, arrs: List[int], arrw: List[int])-> bool:\r\n    \r\n    dp = [[0 for i in range(s + 1)] for i in range(n + 1)]\r\n    total = 0\r\n\r\n    for i in range(1, n + 1):\r\n\r\n        total += arrw[i - 1]\r\n        for j in range(1, s + 1):\r\n\r\n            # Calculating the dp transition states, where dp[i][j] represents \r\n            # the maximum weight that can be carried using i persons and j seating space\r\n            dp[i][j] = dp[i - 1][j]\r\n\r\n            if j >= arrs[i - 1]:\r\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - arrs[i - 1]] +arrw[i - 1])\r\n    \r\n    for i in range(s + 1):\r\n        # If the weight left is less than eqaul to w,\r\n        # Return True\r\n        if total - dp[n][i] <= w:\r\n            return True\r\n    \r\n    return False",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n   Time Complexity: O(N*S)\r\n   Space Complexity: O(N*S)\r\n\r\n   Where N is the number of persons on the island and S is the total seating capacity of the plane.\r\n*/\r\n\r\npublic class Solution {\r\n    static boolean escape(int n, int s, int w, int[] arrs, int[] arrw) {\r\n\r\n        int[][] dp = new int[n + 1][s + 1];\r\n        int total = 0;\r\n        for (int i = 1; i < n + 1; i++) {\r\n            total += arrw[i - 1];\r\n            for (int j = 1; j < s + 1; j++) {\r\n                // Calculating the dp transition states, where dp[i][j] represents\r\n                // the maximum weight that can be carried using i persons and j seating space\r\n                dp[i][j] = dp[i - 1][j];\r\n                if (j >= arrs[i - 1]) {\r\n                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - arrs[i - 1]] + arrw[i - 1]);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < s + 1; i++) {\r\n            // If the weight left is less than eqaul to w,\r\n            // Return True\r\n            if (total - dp[n][i] <= w) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}