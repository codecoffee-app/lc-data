{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10245,
            "title": "Implement a PlatesStack",
            "titleSlug": "implement-a-platesstack_1198969",
            "content": "<h4 id=\"you-are-given-an-infinite-number-of-stacks-which-are-arranged-in-a-row-all-the-stacks-have-the-same-maximum-capacity\">You are given an infinite number of stacks which are arranged in a row. All the stacks have the same maximum capacity.</h4>\n\n<h4 id=\"you-are-supposed-to-implement-the-platesstack-class-that-can-perform-the-following-operations-efficiently\">You are supposed to implement the PlatesStack class that can perform the following operations efficiently:</h4>\n\n<pre><code>PlatesStack(int N) - Constructor to initialize the object where N denotes the maximum capacity of each stack.\n\npush(int value) - This function inserts the integer &quot;value&quot; in the leftmost stack which is not filled up to the maximum capacity.  \n\npop() - This function returns the value at the top of the rightmost stack which is not empty and removes it from that stack or returns -1 if all the stacks are empty.\n\npopAtStack(int index) - This function returns the value at the top of the stack with the given index and removes it from that stack and returns -1 if that stack is empty.\n</code></pre>\n\n<h4 id=\"you-have-to-answer-multiple-queries-each-query-will-correspond-to-one-of-the-above-mentioned-operations\">You have to answer multiple queries, each query will correspond to one of the above-mentioned operations.</h4>\n\n<pre><code>TYPE 1 corresponds to the push operation.\nTYPE 2 corresponds to the pop operation.\nTYPE 3 corresponds to the popAtStack operation.  \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer T denoting the number of test cases. The test cases follow.\n\nThe first line of each test case contains an integer N denoting the maximum capacity of the stacks.\n\nThe second line of each test case contains an integer Q denoting the number of queries to be answered.\n\nThe next Q lines contain two integers TYPE and X separated by a single space. The integer TYPE denotes the type of the query and X denotes the value or the index of the stack on which the operation is to be performed.\nFor TYPE-2 query, value of X is always -1. You can ignore this integer. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each query of type 2 print the value at the top of the rightmost stack or print -1 if all the stacks are empty.\nFor each query of type 3 print the value at the top of the stack with the given index or print -1 if the stack at the given index is empty. \n\nPrint the answer for query in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given class.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10\n1 &lt;= Q &lt;= 1000\n1 &lt;= TYPE &lt;= 3\n1 &lt;= value &lt;= 10^9\n\nWhere &quot;value&quot; is the integer to be inserted into the stack or the index of the stack depending on the type of the query.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2\n11\n1 5\n1 4\n2 -1\n1 3\n3 1\n1 2\n3 2\n3 3\n2 -1\n2 -1\n2 -1\n1\n3\n1 1\n3 2\n2 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>4\n3\n-1\n-1\n2\n5\n-1\n1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For the first test case,\nQuery 1: 5 is inserted in stack-1\nQuery 2: 4 is inserted in stack-1\nQuery 3: 4 get popped out of stack-1\nQuery 4: 3 is inserted in stack-1\nQuery 5: 3 get popped out of stack-1\nQuery 6: 2 is inserted in stack-1\nQuery 7: Stack - 2 is empty so, -1\nQuery 8: Stack - 3 is empty so, -1\nQuery 9: 2 get popped out of stack-1\nQuery 10: 5 get popped out of stack-1\nQuery 11: All stacks are empty, so -1.\n\nFor the second test case,\nQuery 1: 1 is inserted in stack - 1\nQuery 2: Stack - 2 is empty so, -1\nQuery 3: 1 get popped out of stack - 1\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2\n8\n1 1\n2 -1\n1 1\n1 2\n1 3\n2 -1\n2 -1\n3 1\n1\n1\n3 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n3\n2\n1\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a `PlatesStack` class that simulates an infinite number of stacks arranged in a row, each with a maximum capacity `N`. The class should support the following operations:\n\n*   **`PlatesStack(int N)`**: Initializes the object with a stack capacity of `N`.\n*   **`push(int value)`**: Pushes `value` onto the leftmost stack that is not full.\n*   **`pop()`**: Pops and returns the top element of the rightmost non-empty stack. Returns -1 if all stacks are empty.\n*   **`popAtStack(int index)`**: Pops and returns the top element of the stack at the given `index`. Returns -1 if the stack at the given index is empty.\n\nYou will receive queries to perform these operations. Query types are:\n\n*   `TYPE 1`: `push(X)`\n*   `TYPE 2`: `pop()` (X is -1 and should be ignored)\n*   `TYPE 3`: `popAtStack(X)`",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10",
                    "1 <= Q <= 1000",
                    "1 <= TYPE <= 3",
                    "1 <= value <= 10^9",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n2\n11\n1 5\n1 4\n2 -1\n1 3\n3 1\n1 2\n3 2\n3 3\n2 -1\n2 -1\n2 -1\n1\n3\n1 1\n3 2\n2 -1",
                        "output": "4\n3\n-1\n-1\n2\n5\n-1\n1",
                        "explanation": "Test Case 1:\nInitial capacity: 2\nQueries:\n1. push(5): Stack 1: [5]\n2. push(4): Stack 1: [5, 4]\n3. pop(): Returns 4, Stack 1: [5]\n4. push(3): Stack 1: [5, 3]\n5. popAtStack(1): Returns 3, Stack 1: [5]\n6. push(2): Stack 1: [5, 2]\n7. popAtStack(2): Returns -1 (Stack 2 is empty)\n8. popAtStack(3): Returns -1 (Stack 3 is empty)\n9. pop(): Returns 2, Stack 1: [5]\n10. pop(): Returns 5, Stack 1: []\n11. pop(): Returns -1 (All stacks are empty)\n\nTest Case 2:\nInitial capacity: 1\nQueries:\n1. push(1): Stack 1: [1]\n2. popAtStack(2): Returns -1 (Stack 2 is empty)\n3. pop(): Returns 1, Stack 1: []"
                    },
                    {
                        "input": "2\n2\n8\n1 1\n2 -1\n1 1\n1 2\n1 3\n2 -1\n2 -1\n3 1\n1\n1\n3 5",
                        "output": "1\n3\n2\n1\n-1",
                        "explanation": "Test Case 1:\nInitial capacity: 2\nQueries:\n1. push(1): Stack 1: [1]\n2. pop(): Returns 1, Stack 1: []\n3. push(1): Stack 1: [1]\n4. push(2): Stack 1: [1, 2]\n5. push(3): Stack 1: [1, 2], Stack 2: [3]\n6. pop(): Returns 3, Stack 1: [1, 2]\n7. pop(): Returns 2, Stack 1: [1]\n8. popAtStack(1): Returns 1, Stack 1: []\nTest Case 2:\nInitial capacity: 1\nQueries:\n1. popAtStack(5): Returns -1 (Stack 5 is empty)\n"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of some data structure to keep track of different stacks?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}