{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13537,
            "title": "Implement a priority queue using heap and also implement getMaxElement in the queue.",
            "titleSlug": "implement-a-priority-queue-using-heap-and-also-implement-getmaxelement-in-the-queue_1743878",
            "content": "<h4 id=\"you-have-to-implement-the-pop-function-of-max-priority-queue-and-implement-using-a-heap\">You have to implement the pop function of Max Priority Queue and implement using a heap.</h4>\n\n<p><br></p>\n\n<h5 id=\"functions\">Functions :</h5>\n\n<pre><code>a) push(int x) : &#39;x&#39; has to be inserted in the priority queue. This has been implemented already\n\nb) pop() : return the maximum element in the priority queue, if priority queue is empty then return &#39;-1&#39;.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>We perform the following operations on an empty priority queue:\n\nWhen operation push(5) is performed, we insert 1 in the priority queue.\n\nWhen operation push(2) is performed, we insert 2 in the priority queue. \n\nWhen operation pop() is performed, we remove the maximum element from the priority queue and print which is 5.\n\nWhen operation push(3) is performed, we insert 1 in the priority queue.\n\nWhen operation pop() is performed, we remove the maximum element from the priority queue and print which is 3.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of contains a single integer, \u2018n\u2019 , representing the  number of operations.\n\nThe next \u2018n\u2019 lines of each test case contain operations that have to be performed on the stack. \n\nOperations of the format\n1 x : denotes to perform the operation push(x).\n2 : denotes to perform the operation pop(). \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print output of each query in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function. \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>8\n1 4\n1 9\n2 \n1 5\n2 \n1 10\n1 1\n2 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>9\n5\n10\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<pre><code>After processing 1 4\nThe elements in the priority queue are 4\n\nAfter processing 1 9\nThe elements in the priority queue are 4,9\n\nAfter processing 2\nThe largest element which is 9 is printed and removed from the queue\nThe elements in the priority queue are 4\n\nAfter processing 1 5\nThe elements in the priority queue are 4,5\n\nAfter processing 2\nThe largest element which is 5 is printed and removed from the queue\n\nAfter processing 1 10\nThe elements in the priority queue are 4,10\n\nAfter processing 1 1\nThe elements in the priority queue are 1,4,10\n\nAfter processing 2\nThe largest element which is 10 is printed and removed from the queue\nThe elements in the priority queue are 1,4\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>8\n2 \n1 6\n2 \n2 \n2 \n1 2\n1 9\n1 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>-1\n6\n-1\n-1\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= n &lt;= 10^6\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 32,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement the `pop` function for a Max Priority Queue, using a heap data structure. The `push` function is already implemented.\n\n**Functions:**\n\n*   `push(int x)`: Inserts 'x' into the priority queue.\n*   `pop()`: Returns the maximum element in the priority queue. If the priority queue is empty, return '-1'.",
                "constraints": [
                    "1 <= n <= 10^6",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "8\n1 4\n1 9\n2\n1 5\n2\n1 10\n1 1\n2",
                        "output": "9\n5\n10",
                        "explanation": "The operations are performed as follows:\n\n1.  `push(4)`: Priority queue contains {4}\n2.  `push(9)`: Priority queue contains {4, 9}\n3.  `pop()`: Returns 9, Priority queue contains {4}\n4.  `push(5)`: Priority queue contains {4, 5}\n5.  `pop()`: Returns 5, Priority queue contains {4}\n6.  `push(10)`: Priority queue contains {4, 10}\n7.  `push(1)`: Priority queue contains {1, 4, 10}\n8.  `pop()`: Returns 10, Priority queue contains {1, 4}"
                    },
                    {
                        "input": "8\n2\n1 6\n2\n2\n2\n1 2\n1 9\n1 5",
                        "output": "-1\n6\n-1\n-1",
                        "explanation": "The operations are performed as follows:\n\n1.  `pop()`: Priority queue is empty, returns -1\n2.  `push(6)`: Priority queue contains {6}\n3.  `pop()`: Returns 6, Priority queue contains {}\n4.  `pop()`: Priority queue is empty, returns -1\n5.  `pop()`: Priority queue is empty, returns -1\n6.  `push(2)`: Priority queue contains {2}\n7.  `push(9)`: Priority queue contains {2, 9}\n8.  `push(5)`: Priority queue contains {2, 5, 9}"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the concept of max heap.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}