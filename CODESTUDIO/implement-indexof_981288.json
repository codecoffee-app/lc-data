{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9257,
            "title": "Implement indexOf()",
            "titleSlug": "implement-indexof_981288",
            "content": "<h4 id=\"you-are-given-two-strings-a-and-b-find-the-index-of-the-first-occurrence-of-a-in-b-if-a-is-not-present-in-b-then-return-1\">You are given two strings A and B. Find the index of the first occurrence of A in B. If A is not present in B, then return -1.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>A = \u201cbc\u201d, B = \u201cabcddbc\u201d.\nString \u201cA\u201d is present at index 1, and 5(0-based index), but we will return 1 as it is the first occurrence of \u201cA\u201d in string \u201cB\u201d.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve this in linear time and space complexity?\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then, the T test cases follow.\n\nThe first and only line of each test case contains two strings A and B, separated by a single space.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the index of the first occurrence of A in B, if string A is not present in string B then print -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= |A|, |B| &lt;= 5 * 10^4 \n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\nninjas codingninjas\ncode codingninjas\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>6\n-1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case, \u201cninjas\u201d is present at the 6th index of \u201ccodingninjas\u201d.\n\nFor the second test case, \u201ccode\u201d is not present in \u201ccodingninjas\u201d.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\ne add\nen engagement\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>-1\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `a` and `b`, your task is to find the starting index of the first occurrence of string `a` within string `b`. If string `a` is not found in string `b`, return -1.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= |a|, |b| <= 5 * 10^4",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "a = \"ninjas\", b = \"codingninjas\"",
                        "output": "6",
                        "explanation": "The string \"ninjas\" first appears at index 6 in the string \"codingninjas\"."
                    },
                    {
                        "input": "a = \"code\", b = \"codingninjas\"",
                        "output": "-1",
                        "explanation": "The string \"code\" is not found in the string \"codingninjas\"."
                    },
                    {
                        "input": "a = \"e\", b = \"add\"",
                        "output": "-1",
                        "explanation": "The string \"e\" is not found in the string \"add\"."
                    },
                    {
                        "input": "a = \"en\", b = \"engagement\"",
                        "output": "0",
                        "explanation": "The string \"en\" first appears at index 0 in the string \"engagement\"."
                    },
                    {
                        "input": "a = \"bc\", b = \"abcddbc\"",
                        "output": "1",
                        "explanation": "The first occurance of \"bc\" in \"abcddbc\" is at index 1."
                    },
                    {
                        "input": "a = \"hello\", b = \"world\"",
                        "output": "-1",
                        "explanation": "The substring \"hello\" is not found in \"world\"."
                    },
                    {
                        "input": "a = \"a\", b = \"aaaaaa\"",
                        "output": "0",
                        "explanation": "The substring \"a\" is found in \"aaaaaa\" at index 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of brute force solution by traversing the string B and checking for the occurrence of A.</p>",
            "<p>Use the KMP Algorithm.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}