{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12287,
            "title": "Implement Map Sum Pair",
            "titleSlug": "implement-map-sum-pair_1459119",
            "content": "<h4 id=\"ninja-has-to-implement-a-data-structure-called-mapsum-ninja-has-to-implement-two-functions-and-one-constructor\">Ninja has to implement a data structure called \u2018MapSum\u2019. Ninja has to implement two functions and one constructor.</h4>\n\n<pre><code>1) MapSum(): Ninja has to initialize the \u2018MapSum\u2019.\n2) insert(\u2018KEY\u2019, \u2018VAL\u2019): Ninja has to insert this key-value pair in this \u2018MapSum\u2019.\n3) sum(\u2018PREFIX\u2019): Ninja has to find the sum of all values whose prefix of the keys is equal to \u2018PREFIX\u2019\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>During insertion, In the \u2018MapSum\u2019 if a \u2018KEY\u2019 is already present in the \u2018MapSum\u2019 then replace it with the new one.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain a single integer \u2018N\u2019 which denotes how many times the functions(as discussed above) we call.\n\nThe next \u201cN\u201d lines contain the string and key-value pair or a string, the first one is the name of the function and the second one is a \u2018key-value\u2019 or \u2018PREFIX\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, complete all the functions as we discussed above.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 50\n2 &lt;= \u2018N\u2019 &lt;= 10000\n1 &lt;= |\u2018KEY\u2019|, |\u2018PREFIX\u2019| &lt;= 50\n1 &lt;= \u2018VAL\u2019 &lt;= 1000\n\nWhere |\u2018KEY\u2019| and |\u2019PREFIX\u2019| denotes the length of the string \u2018KEY\u2019 and \u2018PREFIX\u2019. \u2018VAL\u2019 denotes the value of the key-value pair.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n3\ninsert coding 4\ninsert ninja 5\nsum ni\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>First, we insert a key-value pair into the \u2018MapSum\u2019 having \u2018KEY\u2019 as \u201ccoding&#39;&#39; and \u2018VAL\u2019 as 4.\n\nThen again we are inserting a key-value pair into the \u2018MapSum\u2019 having \u2018KEY\u2019 as \u201cninja\u201d and \u2018VAL\u2019 as 5.\n\nOnly one key has the prefix \u201cni\u201d is \u201cninjas\u201d and the \u2018VAL\u2019 is 5.  \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n4\ninsert a 4\ninsert aa 5\nInsert aaa 6\nsum a\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>15\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2 :</h5>\n\n<pre><code>First, we insert three key-value pair in \u2018MapSum\u2019:\n(\u201ca\u201d, 4), (\u201caa\u201d, 5) and (\u201caaa\u201d, 6)\nThen the sum of all values whose prefix of the keys is equal to \u2018a\u2019 is 4 + 5 + 6 = 15.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a data structure called `MapSum` with the following functionalities:\n\n1.  **`MapSum()`**: Initializes an empty `MapSum` object.\n2.  **`insert(key, val)`**: Inserts the given `key` and `val` into the `MapSum`. If the `key` already exists, update its value with the new `val`.\n3.  **`sum(prefix)`**: Returns the sum of all values in the `MapSum` where the corresponding key has the given `prefix`.",
                "constraints": [
                    "1 <= T <= 50",
                    "2 <= N <= 10000",
                    "1 <= |KEY|, |PREFIX| <= 50",
                    "1 <= VAL <= 1000",
                    "T is the number of test cases.",
                    "N is the number of function calls in each test case.",
                    "|KEY| and |PREFIX| represent the length of the strings KEY and PREFIX, respectively.",
                    "VAL represents the value associated with a key.",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "3\ninsert coding 4\ninsert ninja 5\nsum ni",
                        "output": "5",
                        "explanation": "First, we insert ('coding', 4) and ('ninja', 5) into the MapSum. Then, we calculate the sum of values for keys with the prefix 'ni'. Only 'ninja' matches the prefix, so the sum is 5."
                    },
                    {
                        "input": "4\ninsert a 4\ninsert aa 5\nInsert aaa 6\nsum a",
                        "output": "15",
                        "explanation": "First, we insert ('a', 4), ('aa', 5), and ('aaa', 6) into the MapSum. Then, we calculate the sum of values for keys with the prefix 'a'. The keys 'a', 'aa', and 'aaa' all match the prefix, so the sum is 4 + 5 + 6 = 15."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of using a HashMap?</p><p><br>&nbsp;</p>",
            "<p>Can you think of storing all the prefixes in a HashMap?</p><p><br>&nbsp;</p>",
            "<p>Can you think by storing all the prefixes in a Trie?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tries",
                "slug": "tries"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}