{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7243,
            "title": "Implement Stack with Linked List",
            "titleSlug": "implement-stack-with-linked-list_630475",
            "content": "<h4 id=\"you-must-implement-the-stack-data-structure-using-a-singly-linked-list\">You must implement the Stack data structure using a Singly Linked List.</h4>\n\n<p><br></p>\n\n<h4 id=\"create-a-class-named-stack-which-supports-the-following-operations-all-in-o-1-time\">Create a class named <em><strong>&#39;Stack&#39;</strong></em> which supports the following operations(all in O(1) time):</h4>\n\n<p><br></p>\n\n<pre><code>getSize: Returns an integer. Gets the current size of the stack\n\nisEmpty: Returns a boolean. Gets whether the stack is empty\n\npush: Returns nothing. Accepts an integer. Puts that integer at the top of the stack\n\npop: Returns nothing. Removes the top element of the stack. It does nothing if the stack is empty.\n\ngetTop: Returns an integer. Gets the top element of the stack. Returns -1 if the stack is empty\n</code></pre>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line of the input will contain the number of queries, &#39;q&#39;.\n\nThe next &#39;q&#39; lines will contain the queries. They can be of the following five types:\n\n&#39;1&#39;: Print the current size of the stack\n\n&#39;2&#39;: Find whether the stack is empty. Print &quot;true&quot; if yes, and &quot;false&quot; otherwise.\n\n&#39;3&#39;: This query will be like &quot;3 val,&quot; where &#39;val&#39; can be any non-negative integer. Put &#39;val&#39; on the top of the stack. Print nothing\n\n&#39;4&#39;: Remove the top element of the stack. Print nothing\n\n&#39;5&#39;: Print the top element of the stack. If the stack is empty, print -1\n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>Print the result of each query on a separate line. If the query is &#39;3&#39; or &#39;4&#39;, print nothing (not even an empty line)\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4\n3 5\n3 4\n1\n2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\nfalse    \n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h5>\n\n<pre><code>The first two queries (&#39;3&#39;) push 5 and 4 on the stack. So the size of the stack becomes 2. \n\nTherefore the third query (&#39;1&#39;) prints the size, and since the stack is not empty, the fourth and final query (&#39;2&#39;) outputs &quot;false&quot;\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4\n3 5\n3 4\n4\n5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5   \n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h5>\n\n<pre><code>The first two queries (&#39;3&#39;) push 5 and 4 on the stack.\n\nThe third query (&#39;4&#39;) removes the top element of the stack, which is 4.\n\nThe fourth and final query (&#39;5&#39;) prints the top element of the stack, 5\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= q &lt;= 10^6\n1 &lt;= type &lt;= 5\n1 &lt;= Data &lt;= 2^31 - 1\n\nWhere &#39;type&#39; is the type of query and &#39;Data&#39; is the values getting pushed and popped from the stack. \n\nTime Limit: 1sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 100,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a Stack data structure using a Singly Linked List.  Create a class named `Stack` which supports the following operations in O(1) time:\n\n*   `getSize`: Returns the current size of the stack as an integer.\n*   `isEmpty`: Returns `true` if the stack is empty, `false` otherwise.\n*   `push(val)`: Puts the integer `val` at the top of the stack.  Returns nothing.\n*   `pop()`: Removes the top element of the stack.  Does nothing if the stack is empty.  Returns nothing.\n*   `getTop()`: Returns the top element of the stack as an integer. Returns -1 if the stack is empty.",
                "constraints": [
                    "1 <= q <= 10^6 (Number of queries)",
                    "1 <= type <= 5 (Type of query)",
                    "1 <= Data <= 2^31 - 1 (Data values pushed/popped)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "4\n3 5\n3 4\n1\n2",
                        "output": "2\nfalse",
                        "explanation": "First, 5 and 4 are pushed onto the stack.  The size of the stack becomes 2. The size query outputs 2. The isEmpty query returns false because the stack is not empty."
                    },
                    {
                        "input": "4\n3 5\n3 4\n4\n5",
                        "output": "5",
                        "explanation": "First, 5 and 4 are pushed onto the stack. Then, the top element (4) is removed. Finally, the top element (5) is printed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Usually, insertion/deletion from a linked list takes O(n) time. But that happens because we insert/elements anywhere from the head to the tail. What if we only do those operations at the head?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "class Stack\r\n{\r\n    Node* head; // Pointer to the top node of the stack\r\n    int size;   // Variable to keep track of the number of elements in the stack\r\n\r\npublic:\r\n    // Constructor to initialize an empty stack\r\n    Stack()\r\n    {\r\n        head = NULL; // Initialize the head to NULL (empty stack)\r\n        size = 0;    // Initialize the size to 0 (no elements in the stack)\r\n    }\r\n\r\n    // Function to get the current size of the stack\r\n    int getSize()\r\n    {\r\n        return size;\r\n    }\r\n\r\n    // Function to check if the stack is empty\r\n    bool isEmpty()\r\n    {\r\n        return (size == 0); // Returns true if size is 0, indicating an empty stack\r\n    }\r\n\r\n    // Function to push an element onto the top of the stack\r\n    void push(int data)\r\n    {\r\n        Node* currentNode = new Node(data); // Create a new node with the given data\r\n        ++size;                             // Increase the size of the stack\r\n\r\n        if (head == NULL)\r\n        {\r\n            // If the stack is empty, set the head to the new node\r\n            head = currentNode;\r\n        }\r\n        else\r\n        {\r\n            // If the stack is not empty, make the new node point to the current head\r\n            // and then update the head to the new node, effectively pushing the new node onto the stack\r\n            currentNode->next = head;\r\n            head = currentNode;\r\n        }\r\n    }\r\n\r\n    // Function to remove the top element from the stack (pop operation)\r\n    void pop()\r\n    {\r\n        if (head == NULL)\r\n        {\r\n            // If the stack is empty, return (nothing to pop)\r\n            return;\r\n        }\r\n\r\n        --size; // Decrease the size of the stack\r\n\r\n        Node* temp = head; // Create a temporary pointer to the current head\r\n\r\n        head = head->next; // Update the head to point to the next node in the stack\r\n\r\n        temp->next = NULL; // Set the next pointer of the temporary node to NULL\r\n\r\n        free(temp); // Free the memory occupied by the temporary node (the previous top of the stack)\r\n    }\r\n\r\n    // Function to get the value of the top element of the stack\r\n    int getTop()\r\n    {\r\n        if (head == NULL)\r\n        {\r\n            // If the stack is empty, return -1 (indicating an error or empty stack)\r\n            return -1;\r\n        }\r\n\r\n        // Otherwise, return the data stored in the head node, which is the top of the stack\r\n        return head->data;\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "class Node:\r\n    def __init__(self, data, next_node=None):\r\n\r\n        #  Pointer to the top node of the stack\r\n        self.data = data\r\n\r\n        #  Variable to keep track of the number of elements in the stack\r\n        self.next = next_node\r\n\r\nclass Stack:\r\n    def __init__(self):\r\n\r\n        #Initialize the head to NULL (empty stack)\r\n        self.head = None\r\n\r\n        # Initialize the size to 0 (no elements in the stack)\r\n        self.size = 0\r\n\r\n    # Function to get the current size of the stack\r\n    def getSize(self):\r\n        return self.size\r\n\r\n    def isEmpty(self):\r\n\r\n        # Returns true if size is 0, indicating an empty stack\r\n        return self.size == 0\r\n\r\n    # Function to push an element onto the top of the stack\r\n    def push(self, data):\r\n\r\n        # Create a new node with the given data\r\n        new_node = Node(data, self.head)\r\n        self.head = new_node\r\n\r\n        # Increase the size of the stack\r\n        self.size += 1\r\n\r\n    # Function to remove the top element from the stack (pop operation)\r\n    def pop(self):\r\n        if self.head is None:\r\n\r\n        #If the stack is empty, return (nothing to pop)\r\n            return\r\n        \r\n        # Decrease the size of the stack\r\n        self.size -= 1\r\n\r\n        # Create a temporary pointer to the current head\r\n        temp = self.head\r\n\r\n        # Update the head to point to the next node in the stack\r\n        self.head = self.head.next\r\n\r\n        # Set the next pointer of the temporary node to NULL\r\n        temp.next = None\r\n\r\n        # Free the memory occupied by the temporary node (the previous top of the stack)\r\n        del temp\r\n\r\n# Function to get the value of the top element of the stack\r\n    def getTop(self):\r\n        if self.head is None:\r\n\r\n            #  If the stack is empty, return -1 (indicating an error or empty stack)\r\n            return -1\r\n        \r\n        # Otherwise, return the data stored in the head node, which is the top of the stack\r\n        return self.head.data\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "public class Solution {\r\n    static class Stack {\r\n\r\n        Node head; // Pointer to the top node of the stack\r\n        int size;   // Variable to keep track of the number of elements in the stack\r\n\r\n        // Constructor to initialize an empty stack\r\n        Stack()\r\n        {\r\n            head = null; // Initialize the head to NULL (empty stack)\r\n            size = 0;    // Initialize the size to 0 (no elements in the stack)\r\n        }\r\n\r\n        // Function to get the current size of the stack\r\n        int getSize()\r\n        {\r\n            return size;\r\n        }\r\n\r\n        // Function to check if the stack is empty\r\n        boolean isEmpty()\r\n        {\r\n            return (size==0);// Returns true if size is 0, indicating an empty stack\r\n        }\r\n\r\n        // Function to push an element onto the top of the stack\r\n        void push(int data)\r\n        {\r\n            Node currentNode = new Node(data); // Create a new node with the given data\r\n            ++size;                            // Increase the size of the stack\r\n\r\n            if (head == null)\r\n            {\r\n                // If the stack is empty, set the head to the new node\r\n                head = currentNode;\r\n            }\r\n            else\r\n            {\r\n                // If the stack is not empty, make the new node point to the current head\r\n                // and then update the head to the new node, effectively pushing the new node onto the stack\r\n                currentNode.next = head;\r\n                head = currentNode;\r\n            }\r\n        }\r\n\r\n        // Function to remove the top element from the stack (pop operation)\r\n        void pop()\r\n        {\r\n            if (head == null)\r\n            {\r\n                // If the stack is empty, return (nothing to pop)\r\n                return;\r\n            }\r\n\r\n            --size; // Decrease the size of the stack\r\n\r\n            Node temp = head; // Create a temporary pointer to the current head\r\n\r\n            head = head.next; // Update the head to point to the next node in the stack\r\n\r\n            temp.next = null; // Set the next pointer of the temporary node to NULL\r\n        }\r\n\r\n        // Function to get the value of the top element of the stack\r\n        int getTop()\r\n        {\r\n            if (head == null)\r\n            {\r\n                // If the stack is empty, return -1 (indicating an error or empty stack)\r\n                return -1;\r\n            }\r\n\r\n            // Otherwise, return the data stored in the head node, which is the top of the stack\r\n            return head.data;\r\n        }\r\n    }\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}