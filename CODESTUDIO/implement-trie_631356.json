{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7305,
            "title": "Implement Trie",
            "titleSlug": "implement-trie_631356",
            "content": "<h4 id=\"implement-trie-data-structure-to-support-these-operations\">Implement Trie Data Structure to support these operations:</h4>\n\n<pre><code>insert(word) - To insert a string &quot;word&quot; in Trie\nsearch(word) - To check if string &quot;word&quot; is present in Trie or not.\nstartsWith(word) - To check if there is any string in the Trie that starts with the given prefix string &quot;word&quot;.\n</code></pre>\n\n<p><br></p>\n\n<h4 id=\"three-type-of-queries-denote-these-operations\">Three type of queries denote these operations:</h4>\n\n<pre><code>Type 1: To insert a string &quot;word&quot; in Trie.\n1 word\n\nType 2: To check if the string &quot;word&quot; is present in Trie or not.\n2 word\n\nType 3: To check if there is any string in the Trie that starts with the given prefix string &quot;word&quot;.\n3 word\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an Integer &#39;Q&#39; which denotes the number of queries to be run. Then next &#39;Q&#39; lines denote each query:\n\nThe first and only line of each query contains the type of query and a string &quot;word&quot; separated by a single space.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each query of Type 2 print the string &quot;true&quot; if string &quot;word&quot; is present in Trie or &quot;false&quot; otherwise.\nFor each query of Type 3 print the string &quot;true&quot; if there is any string in the Trie that starts with the given prefix string &quot;word&quot; or &quot;false&quot; otherwise.\n\nOutput for every query will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the output explicitly, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= Q &lt;= 5*10^4\n1 &lt;= W &lt;= 10\n\nWhere &#39;Q&#39; is the number of queries, and &#39;W&#39; is the length of the &quot;word&quot;.\nAll input of &quot;word&quot; will consist of only lowercase letters a-z.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>5\n1 hello\n1 help\n2 help\n3 hel\n2 hel \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>true\ntrue\nfalse\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">\u00a0Explanation to Sample Input 1 :</h5>\n\n<pre><code>Query 1: &quot;hello&quot; is inserted\nQuery 2: &quot;help&quot; is inserted\nQuery 3: &quot;true&quot; is printed as &quot;help&quot; is present\nQuery 4: &quot;true&quot; is printed as &quot;hello&quot; and &quot;help&quot; is present having the prefix &quot;hel&quot;\nQuery 5: &quot;false&quot; is printed as &quot;hel&quot; is not present\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>10\n1 aaaa\n1 aaaaaa\n1 bcd\n2 aaaaa\n3 aaaaa\n3 bc\n2 bc\n1 bc\n3 bcda\n2 bc\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>false\ntrue\ntrue\nfalse\nfalse\ntrue\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-2\">\u00a0Explanation to Sample Input 2 :</h5>\n\n<pre><code>Query 1: &quot;aaaa&quot; is inserted\nQuery 2: &quot;aaaaaa&quot; is inserted\nQuery 3: &quot;bcd&quot; is inserted\nQuery 4: &quot;false&quot; is printed as &quot;aaaaa&quot; is not present\nQuery 5: &quot;true&quot; is printed as &quot;aaaaaa&quot; is present having the prefix &quot;aaaaa&quot;\nQuery 6: &quot;true&quot; is printed as &quot;bcd&quot; is present having the prefix &quot;bc&quot;\nQuery 7: &quot;false&quot; is printed as &quot;bc&quot; is not present\nQuery 8: &quot;bc&quot; is inserted\nQuery 9: &quot;false&quot; is printed as no word is present having the prefix &quot;bcda&quot;\nQuery 10: &quot;true&quot; is printed as &quot;bc&quot; is present\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 219,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a Trie data structure that supports the following operations:\n\n*   `insert(word)`: Inserts the string `word` into the Trie.\n*   `search(word)`: Returns `true` if the string `word` is in the Trie (i.e., was inserted before), and `false` otherwise.\n*   `startsWith(prefix)`: Returns `true` if there is any word in the Trie that starts with the given string `prefix`, and `false` otherwise.\n\nYou will be given a series of queries to perform on your Trie object.  Each query will be of one of the following forms:\n\n*   `1 word`: Insert the string `word`.\n*   `2 word`: Search for the string `word` and print `true` if found, `false` otherwise.\n*   `3 word`: Check if there is any string with the prefix `word` and print `true` if found, `false` otherwise.",
                "constraints": [
                    "1 <= Q <= 5 * 10^4 (where Q is the number of queries)",
                    "1 <= W <= 10 (where W is the length of the word)",
                    "All input words will consist of only lowercase letters a-z."
                ],
                "testcases": [
                    {
                        "input": "queries=5, operations=[['1', 'hello'], ['1', 'help'], ['2', 'help'], ['3', 'hel'], ['2', 'hel']]",
                        "output": "true\ntrue\nfalse",
                        "explanation": "Query 1: \"hello\" is inserted\nQuery 2: \"help\" is inserted\nQuery 3: \"true\" is printed as \"help\" is present\nQuery 4: \"true\" is printed as \"hello\" and \"help\" is present having the prefix \"hel\"\nQuery 5: \"false\" is printed as \"hel\" is not present"
                    },
                    {
                        "input": "queries=10, operations=[['1', 'aaaa'], ['1', 'aaaaaa'], ['1', 'bcd'], ['2', 'aaaaa'], ['3', 'aaaaa'], ['3', 'bc'], ['2', 'bc'], ['1', 'bc'], ['3', 'bcda'], ['2', 'bc']]",
                        "output": "false\ntrue\ntrue\nfalse\nfalse\ntrue",
                        "explanation": "Query 1: \"aaaa\" is inserted\nQuery 2: \"aaaaaa\" is inserted\nQuery 3: \"bcd\" is inserted\nQuery 4: \"false\" is printed as \"aaaaa\" is not present\nQuery 5: \"true\" is printed as \"aaaaaa\" is present having the prefix \"aaaaa\"\nQuery 6: \"true\" is printed as \"bcd\" is present having the prefix \"bc\"\nQuery 7: \"false\" is printed as \"bc\" is not present\nQuery 8: \"bc\" is inserted\nQuery 9: \"false\" is printed as no word is present having the prefix \"bcda\"\nQuery 10: \"true\" is printed as \"bc\" is present"
                    },
                    {
                        "input": "queries=3, operations=[['1', 'apple'], ['2', 'apple'], ['2', 'app']]",
                        "output": "true\nfalse",
                        "explanation": "Inserts \"apple\", searches for \"apple\" (found), searches for \"app\" (not found)."
                    },
                    {
                        "input": "queries=4, operations=[['1', 'leetcode'], ['3', 'leet'], ['2', 'leetc'], ['3', 'lee']]",
                        "output": "true\nfalse\ntrue",
                        "explanation": "Inserts \"leetcode\", checks for prefix \"leet\" (found), searches for \"leetc\" (not found), checks for prefix \"lee\" (found)."
                    },
                    {
                        "input": "queries=2, operations=[['1', 'the'], ['3', 'th']]",
                        "output": "true",
                        "explanation": "Inserts \"the\", checks for prefix \"th\" (found)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to make a data structure similar to a tree which can support required operations.<br><br>&nbsp;</p>",
            "<p>Can we use array to implement it?<br><br>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tries",
                "slug": "tries"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N*W) (insert - O(W), search - O(W), startsWith - O(W))\r\n    Where N is the number of queries and W is the average length of words.\r\n\r\n    Space Complexity : O(N*W)\r\n    Where N is the number of words inserted and W is the average length of words.\r\n*/\r\n\r\n\r\nclass TrieNode {\r\npublic:\r\n    TrieNode * child[26];\r\n    bool isEnd;\r\n    TrieNode()\r\n    {\r\n        isEnd=false;\r\n        for(int i=0;i<26;i++)\r\n            child[i]=NULL;\r\n    }\r\n    \r\n};\r\n\r\nclass Trie {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    TrieNode *root;   \r\n    Trie() {\r\n        root= new TrieNode();\r\n    }\r\n    \r\n    /** Inserts a word into the trie. */\r\n    void insert(string word) {\r\n        TrieNode *tem=root;\r\n        for(auto x:word)\r\n        {\r\n            if(!tem->child[x-'a'])\r\n                tem->child[x-'a']= new TrieNode();\r\n            tem=tem->child[x-'a'];\r\n        }\r\n        tem->isEnd=true;\r\n    }\r\n    \r\n    /** Returns if the word is in the trie. */\r\n    bool search(string word) {\r\n        TrieNode *tem=root;\r\n        for(auto x:word)\r\n        {\r\n            if(!tem->child[x-'a'])\r\n                return false;\r\n            tem=tem->child[x-'a'];\r\n        }\r\n        return  tem->isEnd;\r\n    }\r\n    \r\n    /** Returns if there is any word in the trie that starts with the given prefix. */\r\n    bool startsWith(string prefix) {\r\n        TrieNode *tem=root;\r\n        for(auto x:prefix)\r\n        {\r\n            if(!tem->child[x-'a'])\r\n                return false;\r\n            tem=tem->child[x-'a'];\r\n        }\r\n        return  true;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N * W) [insert : O(W), search : O(W), startsWith : O(W)]\r\n    Where N is the number of queries and W is the average length of words\r\n\r\n    Space Complexity : O(N * W)\r\n    Where N is the number of words inserted and W is the average length of words.\r\n*/\r\n\r\n\r\nimport java.util.ArrayList;\r\n\r\nclass TrieNode {\r\n    ArrayList<TrieNode> child;\r\n    boolean isEnd;\r\n\r\n    TrieNode() {\r\n        child = new ArrayList<TrieNode>(26);\r\n\r\n        for (int i = 0; i < 26; ++i) {\r\n            child.add(null);\r\n        }\r\n\r\n        isEnd = false;\r\n    }\r\n}\r\n\r\npublic class Trie {\r\n\r\n    public static TrieNode root;\r\n\r\n    //Initialize your data structure here\r\n\r\n    Trie() {\r\n        root = new TrieNode();\r\n    }\r\n\r\n\r\n    //Inserts a word into the trie\r\n\r\n    public void insert(String word) {\r\n        TrieNode current = root;\r\n\r\n        for (int i = 0; i < word.length(); ++i) {\r\n            int index = word.charAt(i) - 'a';\r\n\r\n            if (current.child.get(index) == null) {\r\n                current.child.set(index, new TrieNode());\r\n            }\r\n\r\n            current = current.child.get(index);\r\n        }\r\n\r\n        current.isEnd = true;\r\n    }\r\n\r\n\r\n    //Returns if the word is in the trie\r\n\r\n    public boolean search(String word) {\r\n        TrieNode current = root;\r\n\r\n        for (int i = 0; i < word.length(); ++i) {\r\n            int index = word.charAt(i) - 'a';\r\n\r\n            if (current.child.get(index) == null) {\r\n                return false;\r\n            }\r\n\r\n            current = current.child.get(index);\r\n        }\r\n\r\n        return current.isEnd;\r\n    }\r\n\r\n\r\n    //Returns if there is any word in the trie that starts with the given prefix\r\n\r\n    public boolean startsWith(String prefix) {\r\n        TrieNode current = root;\r\n\r\n        for (int i = 0; i < prefix.length(); ++i) {\r\n            int index = prefix.charAt(i) - 'a';\r\n\r\n            if (current.child.get(index) == null) {\r\n                return false;\r\n            }\r\n\r\n            current = current.child.get(index);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity : O(N*W) (insert - O(W), search - O(W), startsWith - O(W))\n    Space Complexity : O(N*W)\n\n    Where N is the number of queries and W is the average length of words.\n'''\nfrom sys import stdin,setrecursionlimit\nsetrecursionlimit(10**7)\n\nclass TrieNode :\n    \n    def __init__(self) :\n\n        self.child = [None for i in range(26)]\n        self.isEnd = False\n\nclass Trie :\n\n    def __init__(self) :\n\n        self.node = TrieNode()\n    \n    def insert(self, string) :\n\n        n = len(string)\n        if(n == 0) :\n            self.node.isEnd = True\n            return \n        else :\n            if self.node.child[ord(string[0]) - ord('a')] != None :\n                self.node.child[ord(string[0]) - ord('a')].insert(string[1:])\n            \n            else :\n                self.node.child[ord(string[0]) - ord('a')] = Trie()\n                self.node.child[ord(string[0]) - ord('a')].insert(string[1:])\n        return \n\n    \n    def search(self, word) :\n        temp = self.node\n        for i in range(len(word)) :\n            if temp.child[ord(word[i]) - ord('a')] == None:\n                return False\n            \n            else :\n                temp = temp.child[ord(word[i]) - ord('a')].node\n\n        if(temp.isEnd == True) :\n            return True\n        else :\n            return False\n\n        \n    def startWith(self, prefix) :\n        temp = self.node\n        for i in range(len(prefix)) :\n            if temp.child[ord(prefix[i]) - ord('a')] == None :\n                return False\n\n            temp = temp.child[ord(prefix[i]) - ord('a')].node\n        \n        return True\n\n\n\n# main\nt = int(input().strip())\nroot = Trie()\nfor i in range(t) :\n\n    q_str = stdin.readline().strip().split(\" \")\n    q = int(q_str[0].strip())\n    str1 = q_str[1].strip()\n\n    if(q == 1) :\n        root.insert(str1)\n    \n    elif (q == 2) :\n        if(root.search(str1)) :\n            print(\"true\") \n\n        else :\n            print(\"false\")\n        \n    else :\n        if(root.startWith(str1)) :\n            print(\"true\")\n\n        else :\n            print(\"false\")\n\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}