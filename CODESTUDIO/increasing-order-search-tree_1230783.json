{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10517,
            "title": "Increasing Order Search Tree",
            "titleSlug": "increasing-order-search-tree_1230783",
            "content": "<h4 id=\"ninja-has-been-given-a-binary-search-tree-ninja-has-to-rearrange-the-tree-such-that\">Ninja has been given a binary search tree. Ninja has to rearrange the tree such that:</h4>\n\n<pre><code>1. The leftmost node of the binary search tree becomes the root of the tree.\n2. Every node has no left child.\n3. Every node has only one right child.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<p><img src=\"https://files.codingninjas.in/oder1-8253.png\" alt=\"\">   </p>\n\n<h4 id=\"as-ninja-is-busy-he-asks-you-for-help-can-you-help-ninja-to-rearrange-the-binary-search-tree\">As Ninja is busy, he asks you for help. Can you help Ninja to rearrange the binary search tree?</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases. Then the test cases follow.\n\nThe next line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-8254.jpg\" alt=\"\"></p>\n\n<pre><code> 4 \n 2 6\n 1 3 5 7\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 4\n\nLevel 2 :\nLeft child of 4 = 2\nRight child of 4 = 6\n\nLevel 3 :\nLeft child of 2 = 1\nRight child of 2 = 3\nLeft child of 6 = 5\nRight child of 6 = 7\n\nLevel 4 :\nLeft child of 1 = null (-1)\nRight child of 1 = null (-1)\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the tree after the rearrangement in level order. \n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10000\n-100000 &lt;= data &lt;= 100000  \n\nWhere \u2018T\u2019 denotes the number of test cases, \u2018N\u2019 denotes the number of nodes in the binary tree and \u2018data\u2019 represents the value of each node of the binary search tree.\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n2 1 3 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 -1 2 -1 3 -1 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h5>\n\n<pre><code>For sample test case 1: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/order1a-8252.png\" alt=\"\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1 \n10 7 12 4 9 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4 -1 7 -1 9 -1 10 -1 12 -1 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h5>\n\n<pre><code>For sample test case 1: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/order2a-8251.png\" alt=\"\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST), rearrange it into a right-skewed BST where:\n\n1.  The node with the smallest value in the original BST becomes the root.\n2.  Every node has no left child.\n3.  Every node has only one right child.\n\nEssentially, you need to transform the BST into a sorted linked list-like structure, oriented to the right.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 10000 (Number of nodes in the binary tree)",
                    "-100000 <= data <= 100000 (Value of each node of the binary search tree)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "2 1 3 -1 -1 -1 -1",
                        "output": "1 -1 2 -1 3 -1 -1",
                        "explanation": "The input BST is transformed into a right-skewed tree. The smallest element, 1, becomes the root.  Each node has only a right child (or null), forming a sorted linked list from smallest to largest element."
                    },
                    {
                        "input": "10 7 12 4 9 -1 -1 -1 -1 -1 -1",
                        "output": "4 -1 7 -1 9 -1 10 -1 12 -1 -1",
                        "explanation": "The input BST is transformed into a right-skewed tree. The smallest element, 4, becomes the root. Each node has only a right child (or null), forming a sorted linked list from smallest to largest element."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a DFS approach.</p>",
            "<p>Think of Improving the above approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}