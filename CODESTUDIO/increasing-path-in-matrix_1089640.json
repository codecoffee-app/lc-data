{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9773,
            "title": "Increasing Path In Matrix",
            "titleSlug": "increasing-path-in-matrix_1089640",
            "content": "<h4 id=\"you-are-given-a-2-d-matrix-mat-consisting-of-n-rows-and-m-columns-the-element-at-the-i-th-row-and-j-th-column-is-mat-i-j\">You are given a 2-D matrix \u2018mat\u2019, consisting of \u2019N\u2019 rows and \u2018M\u2019 columns. The element at the i-th row and j-th column is \u2018mat[i][j]\u2019.</h4>\n\n<h4 id=\"from-mat-i-j-you-can-move-to-mat-i-1-j-if-mat-i-1-j-mat-i-j-or-to-mat-i-j-1-if-mat-i-j-1-mat-i-j\">From mat[i][j], you can move to mat[i+1][j] if mat[i+1][j] &gt; mat[i][j], or to mat[i][j+1] if mat[i][j+1] &gt; mat[i][j].</h4>\n\n<h4 id=\"your-task-is-to-find-and-output-the-longest-path-length-if-you-start-from-0-0-i-e-from-mat-0-0-and-end-at-any-possible-cell-i-j-i-e-at-mat-i-j\">Your task is to find and output the longest path length if you start from (0,0) i.e from mat[0][0] and end at any possible cell (i, j) i.e at mat[i][j].</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Consider 0 based indexing.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. The description of \u2018T\u2019 test cases are as follows -: \n\nThe first line contains two space-separated positive integers \u2018N\u2019, \u2018M\u2019 representing the number of rows and columns respectively.\n\nEach of the next \u2018N\u2019 lines contains \u2018M\u2019 space-separated integers that give the description of the matrix \u2018mat\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the length of the longest path in the matrix.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 100\n1 &lt;= M &lt;= 100\n-10^9 &lt;= mat[i][j] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2 2 \n1 2\n3 4\n1 1\n1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n1\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input1\">Explanation Of the Sample Input1 :</h5>\n\n<pre><code>Test Case 1 :\nThe longest path is either 1,2,4 i.e (mat[0][0] -&gt;mat[0][1] -&gt; mat[1][2]), or it can be 1, 3, 4  i.e (mat[0][0] -&gt; mat[1][0] -&gt; mat[2][2]).  Length of the longest paths are 3.\n\nTest Case 2 :\nThere is only one element in this matrix, so the length of the longest path will be 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2 2\n1 1 \n1 1\n1 2\n3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n2\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-2\">Explanation Of The Sample Input 2 :</h5>\n\n<pre><code>Test Case 1 :\nYou cannot move from (0, 0) because both \u2018mat[0][1]\u2019 and \u2018mat[1][0]\u2019is not greater than \u2018mat[0][0]\u2019. Thus the length of the longest path will be 1. \n\nTest Case 2 :\nThe longest path is 3,4 i.e (mat[0][0] -&gt;mat[0][1]).Length of the longest path is 2.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D matrix 'mat' of 'N' rows and 'M' columns, find the length of the longest path starting from mat[0][0]. You can move from mat[i][j] to mat[i+1][j] only if mat[i+1][j] > mat[i][j], or to mat[i][j+1] only if mat[i][j+1] > mat[i][j]. Return the length of the longest path.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 100",
                    "1 <= M <= 100",
                    "-10^9 <= mat[i][j] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 2, m = 2, mat = [[1, 2], [3, 4]]",
                        "output": "3",
                        "explanation": "The longest path is either 1 -> 2 -> 4 or 1 -> 3 -> 4. The length of these paths is 3."
                    },
                    {
                        "input": "n = 1, m = 1, mat = [[1]]",
                        "output": "1",
                        "explanation": "There is only one element, so the longest path has length 1."
                    },
                    {
                        "input": "n = 2, m = 2, mat = [[1, 1], [1, 1]]",
                        "output": "1",
                        "explanation": "You cannot move from (0, 0) because neither 'mat[0][1]' nor 'mat[1][0]' is greater than 'mat[0][0]'. Thus, the longest path has length 1."
                    },
                    {
                        "input": "n = 1, m = 2, mat = [[3, 4]]",
                        "output": "2",
                        "explanation": "The longest path is 3 -> 4, so the length is 2."
                    },
                    {
                        "input": "n = 2, m = 2, mat = [[1, 5], [2, 3]]",
                        "output": "3",
                        "explanation": "The longest path is 1 -> 2 -> 3, so the length is 3."
                    },
                    {
                        "input": "n = 3, m = 3, mat = [[1, 2, 3],[4, 5, 6],[7, 8, 9]]",
                        "output": "5",
                        "explanation": "The longest path is 1 -> 2 -> 3 -> 6 -> 9 with length 5. Or 1 -> 4 -> 7 -> 8 -> 9. Other path with same length are also possible."
                    },
                    {
                        "input": "n = 3, m = 3, mat = [[9,8,7],[6,5,4],[3,2,1]]",
                        "output": "1",
                        "explanation": "No moves possible from the starting point, so the longest length is 1."
                    },
                    {
                        "input": "n = 2, m = 3, mat = [[1, 2, 1], [3, 4, 5]]",
                        "output": "4",
                        "explanation": "The longest path is 1 -> 2 -> 3 -> 4 -> 5 of length 4"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find a recurrence relation</p>",
            "<p>Optimize the recursive solution by using extra space.</p>",
            "<p>Try to think of storing the results of subproblem in the 2-D matrix.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}