{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11605,
            "title": " Infix to Postfix ",
            "titleSlug": "infix-to-postfix_1382146",
            "content": "<h4 id=\"you-are-given-a-string-exp-which-is-a-valid-infix-expression\">You are given a string <em><strong>&#39;exp&#39;</strong></em> which is a valid infix expression.</h4>\n\n<p><br/></p>\n\n<h4 id=\"convert-the-given-infix-expression-to-postfix-expression\">Convert the given infix expression to postfix expression.</h4>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Infix notation is a method of writing mathematical expressions in which operators are placed between operands. \n\nFor example, &quot;3 + 4&quot; represents the addition of 3 and 4.\n\nPostfix notation is a method of writing mathematical expressions in which operators are placed after the operands. \n\nFor example, &quot;3 4 +&quot; represents the addition of 3 and 4.\n\nExpression contains digits, lower case English letters, \u2018(\u2019, \u2018)\u2019, \u2018+\u2019, \u2018-\u2019, \u2018*\u2019, \u2018/\u2019, \u2018^\u2019. \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: exp = \u20183+4*8\u2019\n\nOutput: 348*+\n\nExplanation:\nHere multiplication is performed first and then the addition operation. Hence postfix expression is  3 4 8 * +.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a string \u2018exp\u2019, a valid infix expression. \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return the valid postfix expression of the given infix expression.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3^(1+1)\n</code></pre>\n\n<p><br/>    </p>\n\n<h5 id=\"expected-answer\">Expected Answer:</h5>\n\n<pre><code>311+^\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-printed-on-console\">Output printed on console:</h5>\n\n<pre><code>311+^\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For this testcase, we will evaluate &#39;b&#39; = (1+1) first. \n\nHence it&#39;s equivalent postfix expression will be &quot;11+&quot;. \n\nNext we will evaluate 3^b. It&#39;s equivalent postfix expression will be &quot;3b^&quot;. \n\nReplacing &#39;b&#39; with it&#39;s equivalent postfix we get &quot;311+^&quot;.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>a+b+c+d-e\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-answer\">Expected Answer:</h5>\n\n<pre><code>ab+c+d+e-\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-printed-on-console\">Output printed on console:</h5>\n\n<pre><code>ab+c+d+e-\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to do this in O(n).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 5000 \n\n\u2018n\u2019, is the length of EXP\nThe expression contains digits, lower case English letters, \u2018(\u2019, \u2018)\u2019, \u2018+\u2019, \u2018-\u2019, \u2018*\u2019, \u2018/\u2019, \u2018^\u2019. \n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 87,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a valid infix expression string 'exp', convert it to its equivalent postfix expression.",
                "constraints": [
                    "1 <= length of 'exp' <= 5000",
                    "The expression contains digits, lowercase English letters, '(', ')', '+', '-', '*', '/', and '^'."
                ],
                "testcases": [
                    {
                        "input": "3^(1+1)",
                        "output": "311+^",
                        "explanation": "Evaluate (1+1) first, which converts to \"11+\". Then evaluate 3^(1+1) which converts to 3(1+1)^. Replacing (1+1) with \"11+\" gives \"311+^\"."
                    },
                    {
                        "input": "a+b+c+d-e",
                        "output": "ab+c+d+e-",
                        "explanation": null
                    },
                    {
                        "input": "3+4*8",
                        "output": "348*+",
                        "explanation": "Multiplication has higher precedence than addition. Thus, 4*8 is evaluated first, then 3 is added to the result. The equivalent postfix expression is 3 4 8 * +"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We will use the stack to store the encountered operators and consider them based on their order of precedence.&nbsp;</p><p>Order of precedence = [ \u2018^\u2019, \u2018*\u2019 and \u2018/\u2019, \u2018+\u2019 and \u2018-\u2019, \u2018(\u2019, \u2018)\u2019]</p><p>Order of precedence</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}