{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 17216,
            "title": "Inorder Traversal",
            "titleSlug": "inorder-traversal_3839605",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-n-nodes-where-the-nodes-have-integer-values-your-task-is-to-return-the-in-order-traversal-of-the-given-binary-tree\">You have been given a Binary Tree of <em><strong>&#39;n&#39;</strong></em> nodes, where the nodes have integer values. Your task is to return the In-Order traversal of the given binary tree.</h4>\n\n<p><br></p>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>For the given binary tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-14509.jpg\" alt=\"\"></p>\n\n<pre><code>The Inorder traversal will be [5, 3, 2, 1, 7, 4, 6].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains elements of the tree in the level order form.\n\nThe line consists of values of nodes separated by a single space. \n\nIn case a node is null, we take -1 in its place.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<p><img src=\"https://files.codingninjas.in/2-14510.jpg\" alt=\"\"></p>\n\n<pre><code>The input for the above tree is:\n\n1 3 8 5 2 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 3\nRight child of 1 = 8\n\nLevel 3 :\nLeft child of 3 = 5\nRight child of 3 = 2\nLeft child of 8 = 7\nRight child of 8 = null (-1)\n\nLevel 4 :\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 2 = null (-1)\nRight child of 2 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\n1\n3 8\n5 2 7 -1\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The output contains &#39;n&#39; single space-separated integers denoting the node&#39;s values in In-Order traversal.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1 2 3 -1 -1 -1  6 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2 1 3 6\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1 :</h5>\n\n<pre><code>The given binary tree is shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/3-14511.jpg\" alt=\"\">    </p>\n\n<pre><code>Inorder traversal of given tree = [2, 1, 3, 6]\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1 2 4 5 3 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5 2 3 1 4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2 :</h5>\n\n<pre><code>The given binary tree is shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/5-14513.jpg\" alt=\"\"></p>\n\n<pre><code>Inorder traversal of given tree = [5, 2, 3, 1, 4]\n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity:</h5>\n\n<pre><code>The expected time complexity is O(n).\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10^5\n0 &lt;= &#39;data&#39; &lt;= 10^5     \n\nwhere &#39;n&#39; is the number of nodes and &#39;data&#39; denotes the node value of the binary tree nodes.\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 73,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree represented by its root node, your task is to implement a function that performs an in-order traversal of the tree. The function should return a vector containing the node values in the order they are visited during the in-order traversal.",
                "constraints": [
                    "1 <= 'n' <= 10^5, where 'n' is the number of nodes in the tree.",
                    "0 <= 'data' <= 10^5, where 'data' is the value of a node in the tree.",
                    "The input binary tree will be a valid binary tree structure."
                ],
                "testcases": [
                    {
                        "input": "root = [1, 2, 3, -1, -1, -1, 6, -1, -1]",
                        "output": "[2, 1, 3, 6]",
                        "explanation": "The binary tree can be represented as:\n      1\n     / \\\n    2   3\n       /  \n      6\nThe in-order traversal is [2, 1, 3, 6]."
                    },
                    {
                        "input": "root = [1, 2, 4, 5, 3, -1, -1, -1, -1, -1, -1]",
                        "output": "[5, 2, 3, 1, 4]",
                        "explanation": "The binary tree can be represented as:\n      1\n     / \\\n    2   4\n   / \n  5  \n / \\\n-1 -1  \n \\   \n  3\nThe in-order traversal is [5, 2, 3, 1, 4]."
                    },
                    {
                        "input": "root = [5, 3, 2, 1, 7, 4, 6]",
                        "output": "[1, 3, 7, 2, 4, 5, 6]",
                        "explanation": "Although the problem description had the wrong output of [5, 3, 2, 1, 7, 4, 6] for the given tree, inorder traversal for this case is actually [1, 3, 7, 2, 4, 5, 6]"
                    },
                    {
                        "input": "root = [1]",
                        "output": "[1]",
                        "explanation": "A single node tree has a simple inorder traversal of just the root."
                    },
                    {
                        "input": "root = [-1]",
                        "output": "[]",
                        "explanation": "An empty tree has no traversal."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a recursive solution.</p>",
            "<p>Think of an iterative solution</p>",
            "<p>Think of an iterative solution using constant space.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}