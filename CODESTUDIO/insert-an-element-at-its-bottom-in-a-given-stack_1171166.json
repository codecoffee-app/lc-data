{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10198,
            "title": " Insert an element at its bottom in a given stack",
            "titleSlug": "insert-an-element-at-its-bottom-in-a-given-stack_1171166",
            "content": "<h4 id=\"you-are-given-a-stack-deque-of-integers-my-stack-and-an-integer-x-your-task-is-to-insert-x-to-the-bottom-of-my-stack-and-return-the-updated-stack-deque\">You are given a stack/deque of integers &#39;MY-STACK&#39; and an integer \u2018X\u2019. Your task is to insert \u2018X\u2019 to the bottom of  \u2018MY-STACK\u2019 and return the updated stack/deque.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>If \u2018MY_STACK\u2019 = [7, 1, 4, 5], then the first element represents the element at the bottom of the stack and the last element represents the element at the top of the stack.\n</code></pre>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>Let \u2018MY_STACK\u2019 = [7, 1, 4, 5] and \u2018X\u2019 = 9. So, \u2018MY_STACK\u2019 after insertion becomes [9, 7, 1, 4, 5].\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000245_1613806948_example_stack(1).png\" alt=\"Example\"></p>\n\n<h5 id=\"follow-up\">Follow Up :</h5>\n\n<pre><code>Try to do this without using any other data structure.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a single integer T\u2019, representing the number of test cases.\n\nThe first line of each test case contains two single space-separated numbers, \u2018N\u2019 and \u2018X\u2019, denoting the size of \u2018MY_STACK\u2019 and the integer to be inserted at the bottom, respectively.\n\nThe second line contains \u2018N\u2019 space-separated distinct integers denoting the stack/deque elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the elements of the updated \u2018MY_STACK\u2019 separated by a single space.\n\nThe output of every test case will be printed in a separate line. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;=100\n1 &lt;= N &lt;= 10^4\n0 &lt;= &#39;X\u2019 and &#39;MY_STACK[i]\u2019 &lt;= 10^5\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1 :</h5>\n\n<pre><code>2\n3 8\n4 3 2\n4 5\n6 2 4 9\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>8 4 3 2\n5 6 2 4 9\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>Test Case 1:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000244_1613806927_example_stack_smaple(1).png\" alt=\"Example\"></p>\n\n<pre><code>We are  given &#39;MY_STACK = [4,3,2] and &#39;X\u2019 = 8.\nWe insert \u2018X\u2019 at the bottom of \u2018MY_STACK\u2019. \nSo finally, we have &#39;MY_STACK&#39; = [8, 4, 3, 2]. \n\nTest Case 2:\nAfter inserting an element at its bottom, the stack will be 5 6 2 4 9\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 0\n4 \n2 5\n1 9\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0 4\n5 1 9\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h5>\n\n<pre><code>Test Case 1:\nWe are given &#39;MY_STACK = [4]\u2019 and &#39;X\u2019 = 0\u2019.\nWe insert \u2018X\u2019 at the bottom of \u2018MY_STACK\u2019. \nSo finally, &#39;MY_STACK&#39; will become [0, 4]. \n\nTest Case 2:\nWe are given &#39;MY_STACK = [1,9]\u2019 and &#39;X\u2019 = 5.\nSo finally, &#39;MY_STACK&#39; will become [5, 1, 9]. \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 153,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a stack of integers `myStack` and an integer `x`, insert `x` at the bottom of the stack. Return the updated stack. Implement this using the provided function signature.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^4",
                    "0 <= 'X' and 'MY_STACK[i]' <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 3, nums = [4, 3, 2], x = 8",
                        "output": "8 4 3 2",
                        "explanation": "We insert 8 at the bottom of the stack [4, 3, 2] resulting in [8, 4, 3, 2]."
                    },
                    {
                        "input": "n = 4, nums = [6, 2, 4, 9], x = 5",
                        "output": "5 6 2 4 9",
                        "explanation": "We insert 5 at the bottom of the stack [6, 2, 4, 9] resulting in [5, 6, 2, 4, 9]."
                    },
                    {
                        "input": "n = 1, nums = [4], x = 0",
                        "output": "0 4",
                        "explanation": "We insert 0 at the bottom of the stack [4] resulting in [0, 4]."
                    },
                    {
                        "input": "n = 2, nums = [1, 9], x = 5",
                        "output": "5 1 9",
                        "explanation": "We insert 5 at the bottom of the stack [1, 9] resulting in [5, 1, 9]."
                    },
                    {
                        "input": "n = 5, nums = [1, 2, 3, 4, 5], x = 10",
                        "output": "10 1 2 3 4 5",
                        "explanation": "We insert 10 at the bottom of the stack [1, 2, 3, 4, 5] resulting in [10, 1, 2, 3, 4, 5]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about recursion.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space Complexity: O(N)\r\n\r\n    Where 'N' is the size of the given stack MY_STACK.      \r\n*/\r\n\r\nstack<int> pushAtBottom(stack<int> &myStack, int x)\r\n{\r\n\t// Base Case\r\n\tif (myStack.empty())\r\n\t{\r\n\t\tmyStack.push(x);\r\n\t\treturn myStack;\r\n\t}\r\n\r\n\t// Store top element in 'num'\r\n\tint num = myStack.top();\r\n\r\n\t// Pop the top element\r\n\tmyStack.pop();\r\n\r\n\t// Recursive call\r\n\tpushAtBottom(myStack, x);\r\n\r\n\t// Add 'num' to stack\r\n\tmyStack.push(num);\r\n\r\n\treturn myStack;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space Complexity: O(N)\r\n\r\n    Where 'N' is the size of the given stack MY_STACK.      \r\n*/\r\n\r\nimport java.util.Stack;\r\n\r\npublic class Solution\r\n{\r\n\tpublic static Stack<Integer> pushAtBottom(Stack<Integer> myStack, int x)\r\n\t{\r\n\t\t// Base Case\r\n\t\tif (myStack.empty())\r\n\t\t{\r\n\t\t\tmyStack.push(x);\r\n\t\t\treturn myStack;\r\n\t\t}\r\n\r\n\t\t// Store top element in 'num'\r\n\t\tint num = myStack.peek();\r\n\r\n\t\t// Pop the top element\r\n\t\tmyStack.pop();\r\n\r\n\t\t// Recursive call\r\n\t\tpushAtBottom(myStack, x);\r\n\r\n\t\t// Add 'num' to stack\r\n\t\tmyStack.push(num);\r\n\r\n\t\treturn myStack;\r\n\t}\r\n}\r\n\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N),\r\n\r\n    Where N is the size of the given stack MY_STACK.    \r\n\r\n'''\r\n\r\nfrom collections import deque\r\n\r\ndef pushAtBottom(myStack: deque, x: int):\r\n    # Base Case\r\n    if (len(myStack) == 0):\r\n        myStack.append(x)\r\n        return myStack\r\n\r\n    # Recursive calls \r\n    num = myStack[len(myStack) - 1]\r\n    myStack.pop()\r\n    pushAtBottom(myStack, x)\r\n    myStack.append(num)\r\n\r\n    return myStack",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}