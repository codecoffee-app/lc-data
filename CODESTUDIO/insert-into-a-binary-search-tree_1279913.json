{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10905,
            "title": "Insert into a Binary Search Tree",
            "titleSlug": "insert-into-a-binary-search-tree_1279913",
            "content": "<h4 id=\"you-have-been-given-a-root-node-of-the-binary-search-tree-and-a-positive-integer-value-you-need-to-perform-an-insertion-operation-i-e-inserting-a-new-node-with-the-given-value-in-the-given-binary-search-tree-such-that-the-resultant-tree-is-also-a-binary-search-tree\">You have been given a root node of the binary search tree and a positive integer value. You need to perform an insertion operation i.e. inserting a new node with the given value in the given binary search tree such that the resultant tree is also a binary search tree.</h4>\n\n<p><br></p>\n\n<h4 id=\"if-there-can-be-more-than-one-possible-tree-then-you-can-return-any\">If there can be more than one possible tree, then you can return any.</h4>\n\n<p><br></p>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>A binary search tree is a binary tree data structure, with the following properties :\n\n    a. The left subtree of any node contains nodes with a value less than the node\u2019s value.\n\n    b. The right subtree of any node contains nodes with a value equal to or greater than the node\u2019s value.\n\n    c. Right, and left subtrees are also binary search trees.\nIt is guaranteed that,\n\n    d. All nodes in the given tree are distinct positive integers.\n\n    e. The given BST does not contain any node with a given integer value.\n</code></pre>\n\n<h4 id=\"example-below-the-tree-is-a-binary-search-tree\">Example, below the tree, is a binary search tree.</h4>\n\n<p><img src=\"https://files.codingninjas.in/1-8496.png\" alt=\"1\"></p>\n\n<h4 id=\"below-the-tree-is-not-a-bst-as-node-2-is-less-than-node-3-but-2-is-the-right-child-of-3-and-node-6-is-greater-than-node-5-but-it-is-in-the-left-subtree-of-node-5\">Below the tree is not a BST as node \u20182\u2019 is less than node \u20183\u2019 but \u20182\u2019 is the right child of \u20183\u2019, and node \u20186\u2019 is greater than node \u20185\u2019 but it is in the left subtree of node \u20185\u2019.</h4>\n\n<p><img src=\"https://files.codingninjas.in/2-8497.png\" alt=\"1\"></p>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nThe second line contains a positive integer value \u2018val\u2019, denoting the value of the node that is to be inserted in the given BST.\n\nFor example, the level order input for the tree is depicted in the below image.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/3-8498.png\" alt=\"1\"></p>\n\n<h4 id=\"part-b87bf01\"><b></h4>\n\n<pre><code>50  \n13 72  \n3 25 66 -1  \n-1 -1 -1 -1 -1 -1  \n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 50\n\nLevel 2 :\nLeft child of 50 = 13\nRight child of 50 = 72\n\nLevel 3 :\nLeft child of 13 = 3\nRight child of 13 = 25\nLeft child of 72 = 66\nRight child of 72 =  \u2018Null\u2019\n\n\nLevel 4 :\nAll children are \u2018Null\u2019\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. \n\nHence, for the above-depicted tree, the input will be given as:\n50 13 72 3 25 66 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>The output will be \u201c1\u201d if you have returned the correct answer, else it will be \u201c0\u201d.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to input or print anything, and it has already been taken care of. Just implement the given function.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>1 -1 3 -1 -1 \n4\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h4>\n\n<pre><code>For the first test case, the given tree is.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/4-8499.png\" alt=\"1\"></p>\n\n<pre><code>One possible output tree is\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/5-8500.png\" alt=\"1\"></p>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>10 2 12 1 3 -1 13 -1 -1 -1 -1 -1 -1\n11\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2 :</h4>\n\n<pre><code>For the first test case, the given tree is\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/7-8502.png\" alt=\"1\"></p>\n\n<pre><code>The output tree can be.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/8-8503.png\" alt=\"1\"></p>\n\n<pre><code>Another Possible answer can be.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/9-8504.png\" alt=\"1\"></p>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>0 &lt;= N &lt;= 3000\n1 &lt;= data &lt;= 10 ^ 9\n1 &lt;= val &lt;= 10 ^ 9\n\nWhere \u2018N\u2019 is the total number of nodes in the given binary tree, \u2018data\u2019 is the value of the nodes of the given binary tree, and \u2018val\u2019 represents the value of node that is to be inserted in the given tree.\n\nFor a single test case, all given \u2018data\u2019 and \u2018val\u2019 are distinct from each other.\n\nTime Limit: 1sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 26,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given the root of a Binary Search Tree (BST) and a positive integer value `val`. Your task is to insert a new node with the value `val` into the BST, ensuring that the resulting tree remains a valid BST.  Return the root of the modified BST. If there are multiple valid BSTs after insertion, return any one of them.\n\nA Binary Search Tree (BST) follows these properties:\n\n*   The left subtree of a node contains nodes with values less than the node's value.\n*   The right subtree of a node contains nodes with values greater than or equal to the node's value.\n*   Both the left and right subtrees are also BSTs.\n\nIt is guaranteed that all node values in the given tree are distinct positive integers, and the BST does not contain any node with the value `val`.",
                "constraints": [
                    "0 <= N <= 3000, where \u2018N\u2019 is the total number of nodes in the given binary tree",
                    "1 <= data <= 10^9, where \u2018data\u2019 is the value of the nodes of the given binary tree",
                    "1 <= val <= 10^9, where \u2018val\u2019 represents the value of the node that is to be inserted in the given tree",
                    "All given \u2018data\u2019 and \u2018val\u2019 are distinct from each other in a single test case.",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "1 -1 3 -1 -1\n4",
                        "output": "1",
                        "explanation": "The initial tree consists of nodes 1 and 3. Inserting 4 results in a valid BST where 4 is the right child of 3."
                    },
                    {
                        "input": "10 2 12 1 3 -1 13 -1 -1 -1 -1 -1 -1\n11",
                        "output": "1",
                        "explanation": "The initial tree has root 10, left child 2, right child 12, etc. Inserting 11 can result in 11 being the left child of 12, maintaining the BST property."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think recursively to find a position for the insertion.</p>",
            "<p>Iteratively find a path to position for insertion of the new node</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}