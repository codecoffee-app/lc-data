{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10724,
            "title": "Insertion in AVL Tree",
            "titleSlug": "insertion-in-avl-tree_1263690",
            "content": "<h4 id=\"ninja-has-to-implement-an-avl_tree-from-scratch\">Ninja has to implement an \u2018AVL_TREE\u2019 from scratch.</h4>\n\n<h4 id=\"he-is-given-n-values-representing-the-values-of-nodes-to-be-inserted-ninja-has-to-insert-these-values-into-the-avl_tree-and-return-its-root-after-inserting-all-the-nodes\">He is given \u2018N\u2019 values, representing the values of nodes to be inserted. Ninja has to insert these values into the \u2018AVL_TREE\u2019 and return its root after inserting all the nodes.</h4>\n\n<h4 id=\"note-an-avl_tree-is-a-self-balancing-binary-search-tree-bst-where-the-difference-between-heights-of-left-and-right-subtrees-cannot-be-more-than-one-for-all-nodes\">Note: An \u2018AVL_TREE\u2019 is a self-balancing Binary Search Tree (BST) where the difference between heights of left and right subtrees cannot be more than one for all nodes.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<p><img src=\"https://files.codingninjas.in/avl_tree-8359.png\" alt=\"\"></p>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains an integer \u2018N\u2019 which represents the number of nodes in the tree.\n\nThe next line of each test case contains \u2018N\u2019 single space-separated integers, representing the value of each node.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the \u2018AVL_TREE\u2019 after inserting all the nodes in level order. \n\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= \u2018N\u2019 &lt;= 10^4\n1 &lt;= \u2018DATA\u2019 &lt;= 10^5\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n6\n10 20 30 40 50 25\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>30 20 40 10 25 50\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>For sample test case 1: \n\nAfter inserting all the node:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/avl_ex1-8358.png\" alt=\"\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n7\n33 9 53 8 21 61 11\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>33 9 53 8 21 61 11\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h4>\n\n<pre><code>For sample test case 1: \n\nAfter inserting all the node:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/avl_ex2-8357.png\" alt=\"\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement an AVL Tree data structure. You are given an array of integer values representing the nodes to be inserted into the AVL tree. Your task is to insert these values into the AVL tree one by one, maintaining the AVL tree properties (self-balancing). Return the root of the AVL tree after inserting all the nodes. Print the AVL tree in level order.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 10",
                    "1 <= \u2018N\u2019 <= 10^4",
                    "1 <= \u2018DATA\u2019 <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 6, allNodeValues = [10, 20, 30, 40, 50, 25]",
                        "output": "30 20 40 10 25 50",
                        "explanation": "After inserting all the nodes, the AVL tree is balanced, and the level order traversal is 30 20 40 10 25 50. The tree looks like this:\n\n        30\n       /  \\\n      20  40\n     /  \\   \\\n    10  25  50"
                    },
                    {
                        "input": "n = 7, allNodeValues = [33, 9, 53, 8, 21, 61, 11]",
                        "output": "33 9 53 8 21 61 11",
                        "explanation": "After inserting all the nodes, the AVL tree is balanced, and the level order traversal is 33 9 53 8 21 61 11. The tree looks like this:\n\n           33\n         /    \\\n       9       53\n      / \\        \\\n     8  21        61\n       /        \n      11"
                    },
                    {
                        "input": "n = 5, allNodeValues = [1, 2, 3, 4, 5]",
                        "output": "3 2 4 1 5",
                        "explanation": "After inserting all the nodes, the AVL tree is balanced, and the level order traversal is 3 2 4 1 5. The tree looks like this:\n\n        3\n       /  \\\n      2  4\n     /   \\\n    1    5"
                    },
                    {
                        "input": "n = 4, allNodeValues = [5, 4, 3, 2]",
                        "output": "4 3 5 2",
                        "explanation": "After inserting all the nodes, the AVL tree is balanced, and the level order traversal is 4 3 5 2. The tree looks like this:\n\n        4\n       /  \\\n      3  5\n     /    \n    2"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of the brute force approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}