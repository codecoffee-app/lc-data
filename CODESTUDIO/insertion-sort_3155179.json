{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16454,
            "title": "Insertion Sort",
            "titleSlug": "insertion-sort_3155179",
            "content": "<h4 id=\"you-are-given-n-integers-in-the-form-of-an-array-arr-print-the-sorted-array-using-the-insertion-sort\">You are given \u2018N\u2019 integers in the form of an array \u2018ARR\u2019. Print the sorted array using the insertion sort.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>No need to return anything. You should sort the array in-place.\n</code></pre>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>Let \u2018ARR\u2019 be: [1, 4, 2]\nThe sorted array will be: [1, 2, 4].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases.\n\nThe first line of each test case contains an integer, \u2018N\u2019, representing the size of the array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers, representing the array \u2018ARR\u2019 elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the sorted array.\n\nPrint output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 5*10^3\n1 &lt;= ARR[i] &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4\n3 1 2 2\n3\n1 4 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 2 2 3\n1 2 4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<pre><code>For test case 1: \nThe sorted array will be: [1, 2, 2, 3].\n\nFor test case 2: \nThe sorted array will be: [1, 2, 4].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4\n4 12 11 20\n6\n6 5 4 3 2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4 11 12 20\n1 2 3 4 5 6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 188,
            "dislikes": "NA",
            "rephrased": {
                "body": "Sort an array of integers in non-decreasing order using the insertion sort algorithm. The sorting must be done in-place.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 5*10^3",
                    "1 <= ARR[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 4, arr = [3, 1, 2, 2]",
                        "output": "1 2 2 3",
                        "explanation": "The sorted array will be: [1, 2, 2, 3]."
                    },
                    {
                        "input": "n = 3, arr = [1, 4, 2]",
                        "output": "1 2 4",
                        "explanation": "The sorted array will be: [1, 2, 4]."
                    },
                    {
                        "input": "n = 4, arr = [4, 12, 11, 20]",
                        "output": "4 11 12 20",
                        "explanation": "The sorted array will be: [4, 11, 12, 20]."
                    },
                    {
                        "input": "n = 6, arr = [6, 5, 4, 3, 2, 1]",
                        "output": "1 2 3 4 5 6",
                        "explanation": "The sorted array will be: [1, 2, 3, 4, 5, 6]."
                    },
                    {
                        "input": "n = 5, arr = [5, 4, 3, 2, 1]",
                        "output": "1 2 3 4 5",
                        "explanation": "The sorted array will be: [1, 2, 3, 4, 5]."
                    },
                    {
                        "input": "n = 1, arr = [10]",
                        "output": "10",
                        "explanation": "The sorted array will be: [10]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to place the elements at their positions one at a time.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity: O(N^2)\r\n    Space complexity: O(1)\r\n    \r\n    Where 'N' is the size of the array.\r\n*/\r\n\r\nvoid insertionSort(int n, vector<int> &arr){\r\n    \r\n    // To traverse all the elements.\r\n    for(int i = 1; i < n; ++i) {\r\n        \r\n        // To store the current element.\r\n        int curr = arr[i];\r\n        \r\n        // To traverse previous elements.    \r\n        int idx = i - 1;\r\n        \r\n        while(idx >= 0 && arr[idx] > curr) {\r\n            \r\n            // Change elements position.\r\n            arr[idx + 1] = arr[idx];\r\n            \r\n            --idx;\r\n        }\r\n        \r\n        // Change current element.\r\n        arr[idx + 1] = curr;\r\n    }\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "\n/*\n\tTime complexity: O(N^2)\n\tSpace complexity: O(1)\n\t\n\tWhere 'N' is the size of the array.\n*/\n\npublic class Solution {\n\n\tpublic static void insertionSort(int n , int[] arr) {\n\n\t\t// To traverse all the elements.\n\t\tfor (int i = 1; i < n; ++i) {\n\n\t\t\t// To store the current element.\n\t\t\tint curr = arr[i];\n\n\t\t\t// To traverse previous elements.\n\t\t\tint idx = i - 1;\n\n\t\t\twhile (idx >= 0 && arr[idx] > curr) {\n\n\t\t\t\t// Change elements position.\n\t\t\t\tarr[idx + 1] = arr[idx];\n\n\t\t\t\t--idx;\n\t\t\t}\n\n\t\t\t// Change current element.\n\t\t\tarr[idx + 1] = curr;\n\t\t}\n\n\t}\n\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time complexity: O(N^2)\n    Space complexity: O(1)\n    \n    Where 'N' is the size of the array.\n'''\n\nfrom typing import List\n\ndef insertionSort(n: int, arr: List[int]) -> None:\n    \n    # To traverse all the elements.\n    for i in range(1, n):\n        \n        # To store the current element.\n        curr = arr[i]\n        \n        # To traverse previous elements.    \n        idx = i - 1\n        \n        while idx >= 0 and arr[idx] > curr:\n            \n            # Change elements position.\n            arr[idx + 1] = arr[idx]\n            \n            idx -= 1\n        \n        # Change current element.\n        arr[idx + 1] = curr\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}