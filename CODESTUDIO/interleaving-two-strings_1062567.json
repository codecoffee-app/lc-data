{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9493,
            "title": "Interleaving Two Strings",
            "titleSlug": "interleaving-two-strings_1062567",
            "content": "<h4 id=\"you-are-given-three-strings-a-b-and-c-check-whether-c-is-formed-by-an-interleaving-of-a-and-b\">You are given three strings &#39;A&#39;, &#39;B&#39; and &#39;C&#39;. Check whether &#39;C&#39; is formed by an interleaving of &#39;A&#39; and &#39;B&#39;.</h4>\n\n<h4 id=\"c-is-said-to-be-interleaving-a-and-b-if-the-length-of-c-is-equal-to-the-sum-of-the-length-of-a-and-length-of-b-all-the-characters-of-a-and-b-are-present-in-c-and-the-order-of-all-these-characters-remains-the-same-in-all-three-strings\">&#39;C&#39; is said to be interleaving &#39;A&#39; and &#39;B&#39;, if the length of &#39;C&#39; is equal to the sum of the length of &#39;A&#39; and length of &#39;B&#39;, all the characters of &#39;A&#39; and &#39;B&#39; are present in &#39;C&#39; and the order of all these characters remains the same in all three strings.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>If A = \u201caab\u201d, &#39;B&#39; = \u201cabc\u201d, &#39;C&#39; = \u201caaabbc\u201d\nHere &#39;C&#39; is an interleaving string of &#39;A&#39; and &#39;B&#39;. because &#39;C&#39; contains all the characters of &#39;A&#39; and &#39;B&#39; and the order of all these characters is also the same in all three strings.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/interleave-img-6874.png\" alt=\"interleaving\"></p>\n\n<pre><code>If &#39;A&#39; = \u201cabc\u201d, &#39;B&#39; = \u201cdef\u201d, &#39;C&#39; = \u201cabcdefg\u201d\nHere &#39;C&#39; is not an interleaving string of &#39;A&#39; and &#39;B&#39;. &#39;B&#39;ecause neither A nor &#39;B&#39; contains the character \u2018g\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then, the T test cases follow.\n\nThe first and only line of each test case contains three strings &#39;A&#39;, &#39;B&#39; and &#39;C&#39; each separated by a single space.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test, print True, if &#39;C&#39; is an interleaving string of &#39;A&#39; and &#39;B, otherwise print False in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">&#39;C&#39;onstraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= |&#39;A&#39;|, |&#39;B&#39;| &lt;= 150\n1 &lt;= |&#39;C&#39;| &lt;= 300\n\nwhere |A|, |&#39;B&#39;|, |&#39;C&#39;| denotes the length of string &#39;A&#39;, &#39;B&#39; and &#39;C&#39; respectively.   \nAll the characters of the strings &#39;A&#39;, &#39;B&#39; and &#39;C&#39; contain lowercase English letters only.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\nabdd fef abfddef\naab abc aabbc\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for sample 1:</h5>\n\n<pre><code>For the first test case, all the characters of A and B are present in C, in the same order.\nFor the second case,&#39;C&#39; &lt; (&#39;A&#39; + &#39;B&#39;).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nzxry qwr qwzxxryr\na a aa\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>False\nTrue\n</code></pre>\n\n<h5 id=\"explanation-for-sample-2\">Explanation for sample 2:</h5>\n\n<pre><code>For the first test case, &#39;C&#39; &gt; (&#39;A&#39; + &#39;B&#39;).\nFor the second test case, all the characters of A and B are present in C in the same order.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given three strings, 'A', 'B', and 'C', determine if 'C' is formed by interleaving 'A' and 'B'. String 'C' is an interleaving of 'A' and 'B' if its length equals the sum of the lengths of 'A' and 'B', it contains all characters of 'A' and 'B', and the order of characters from 'A' and 'B' is preserved in 'C'. Implement the function `bool isInterleave(string a, string b, string c)`.",
                "constraints": [
                    "1 <= |'A'|, |'B'| <= 150",
                    "1 <= |'C'| <= 300",
                    "All characters in 'A', 'B', and 'C' are lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "a = \"abdd\", b = \"fef\", c = \"abfddef\"",
                        "output": "True",
                        "explanation": "All characters of 'A' and 'B' are present in 'C' in the correct order."
                    },
                    {
                        "input": "a = \"aab\", b = \"abc\", c = \"aabbc\"",
                        "output": "False",
                        "explanation": "While all characters of 'A' and 'B' are present in 'C', the total length constraint does not hold, as length(C) > length(A) + length(B)"
                    },
                    {
                        "input": "a = \"abc\", b = \"def\", c = \"abcdefg\"",
                        "output": "False",
                        "explanation": "The string 'C' contains a character 'g' that is not present in either 'A' or 'B'."
                    },
                    {
                        "input": "a = \"zxry\", b = \"qwr\", c = \"qwzxxryr\"",
                        "output": "False",
                        "explanation": "The length of C is greater than the combined lengths of A and B."
                    },
                    {
                        "input": "a = \"a\", b = \"a\", c = \"aa\"",
                        "output": "True",
                        "explanation": "All characters of A and B are present in C in the same order."
                    },
                    {
                        "input": "a = \"\", b = \"\", c = \"\"",
                        "output": "True",
                        "explanation": "Empty strings interleave to form an empty string."
                    },
                    {
                        "input": "a = \"a\", b = \"\", c = \"a\"",
                        "output": "True",
                        "explanation": "String A interleaves with empty string to form string A."
                    },
                    {
                        "input": "a = \"\", b = \"b\", c = \"b\"",
                        "output": "True",
                        "explanation": "Empty string interleaves with string B to form string B."
                    },
                    {
                        "input": "a = \"ab\", b = \"cd\", c = \"acbd\"",
                        "output": "True",
                        "explanation": "Example of interleaving."
                    },
                    {
                        "input": "a = \"abc\", b = \"bca\", c = \"bbacac\"",
                        "output": "True",
                        "explanation": "All the characters of A and B are present in C, in the same order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a brute force solution using recursion.</p>",
            "<p>Think of a solution to optimize the previous approach by using memoization.</p>",
            "<p>Think of a solution to use bottom-up dynamic programming.</p>",
            "<p>Think of reducing the space complexity by using 1D Dynamic Programming Approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}