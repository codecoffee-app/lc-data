{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15742,
            "title": "Internships",
            "titleSlug": "internships_2701068",
            "content": "<h4 id=\"ninja-and-his-friends-are-ready-to-grab-internships-at-different-startups-there-are-n-applicants-and-m-internships-available-each-internship-has-a-requirement-of-one-person-and-each-person-can-be-appointed-for-a-single-internship\">Ninja and his friends are ready to grab internships at different startups. There are \u2018N\u2019 applicants and \u2018M\u2019 internships available. Each internship has a requirement of one person and each person can be appointed for a single internship.</h4>\n\n<h4 id=\"given-n-m-and-a-matrix-g-of-size-n-x-m-where-g-i-j-denotes-whether-ith-applicant-is-interested-in-jth-internship-find-an-assignment-of-internships-such-that-as-many-applicants-as-possible-get-internships\">Given \u2018N\u2019, \u2018M\u2019 and a matrix \u2018G\u2019 of size \u2018N x M\u2019 where \u2018G(i,j)\u2019 denotes whether \u2018ith\u2019 applicant is interested in \u2018jth\u2019 internship. Find an assignment of internships such that as many applicants as possible get internships.</h4>\n\n<h4 id=\"output-the-maximum-number-of-applicants-that-can-get-an-internship\">Output the maximum number of applicants that can get an internship.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code> N = 2\n M = 3\n G = [{ 1, 0, 1 }, { 0, 1, 1} ]\n\nExplanation : \n\nOne of the possible ways is first applicant gets internship 1 and second applicant gets internship 3.\n\nAnother possible way can be that the first applicant gets internship 3 and second applicant gets internship 2.\n\nHence, both of them can get internships.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases to be run. Then the test cases follow.\n\nThe first line of each test case contains two integers \u2018N\u2019 and \u2018M\u2019 denoting the dimensions of the given grid.\n\nThe next \u2018N\u2019 lines contain \u2018M\u2019 integers each. Each integer is guaranteed to be \u20180\u2019 or \u20181\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a single integer denoting the maximum number of applicants that can be assigned an internship.\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1\u2009&lt;= N &lt;= 100\n1 &lt;= M &lt;= 100   \nG[i][j] = \u20180\u2019 or G[i][j] = \u20181\u2019 \n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 5\n1 1 0 1 1\n0 1 0 0 1\n1 1 0 1 1\n4 2\n0 1\n0 1\n0 1\n0 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For test case 1 we have, \n\nApplicant 1 can get internship 1, Applicant 2 can get internship 2 and applicant 3 can get internship 5.\n\nHence, we output 3.\n\nFor test case 2 we have,\n\nAll applicants are interested in only internship 2. So, only one of them can get an internship.\n\nSo, we output 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2 5\n1 0 1 0 0 \n0 0 1 0 0 \n2 4\n0 1 1 1 \n1 0 0 0 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'N' applicants and 'M' internships. A matrix 'G' of size 'N x M' represents applicant preferences, where G(i,j) = 1 if the i-th applicant is interested in the j-th internship, and 0 otherwise. Each internship can only be assigned to one applicant, and each applicant can only be assigned to one internship. The task is to find the maximum number of applicants that can be assigned to internships.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 100",
                    "1 <= M <= 100",
                    "G[i][j] = '0' or G[i][j] = '1'",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 5\n1 1 0 1 1\n0 1 0 0 1\n1 1 0 1 1",
                        "output": "3",
                        "explanation": "Applicant 1 can get internship 1, Applicant 2 can get internship 2, and Applicant 3 can get internship 5.  Therefore, 3 applicants can get an internship."
                    },
                    {
                        "input": "4 2\n0 1\n0 1\n0 1\n0 1",
                        "output": "1",
                        "explanation": "All applicants are only interested in internship 2. Thus, only one applicant can get an internship."
                    },
                    {
                        "input": "2 5\n1 0 1 0 0\n0 0 1 0 0",
                        "output": "2",
                        "explanation": "Applicant 1 can get internship 1 and applicant 2 can get internship 3."
                    },
                    {
                        "input": "2 4\n0 1 1 1\n1 0 0 0",
                        "output": "2",
                        "explanation": "Applicant 1 can get internship 2, and applicant 2 can get internship 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to recursively assign internships to all students.</p><p>&nbsp;</p>",
            "<p>Notice that the graph constructed from applicants to internships is a Bipartite graph.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}