{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9704,
            "title": "Intersection of 2 arrays",
            "titleSlug": "intersection-of-2-arrays_1082149",
            "content": "<h4 id=\"you-are-given-two-arrays-a-and-b-of-size-n-and-m-respectively-both-these-arrays-are-sorted-in-non-decreasing-order-you-have-to-find-the-intersection-of-these-two-arrays\">You are given two arrays &#39;A&#39; and &#39;B&#39; of size &#39;N&#39; and &#39;M&#39; respectively. Both these arrays are sorted in non-decreasing order. You have to find the intersection of these two arrays.</h4>\n\n<h4 id=\"intersection-of-two-arrays-is-an-array-that-consists-of-all-the-common-elements-occurring-in-both-arrays\">Intersection of two arrays is an array that consists of all the common elements occurring in both arrays.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. The length of each array is greater than zero.\n2. Both the arrays are sorted in non-decreasing order.\n3. The output should be in the order of elements that occur in the original arrays.\n4. If there is no intersection present then return an empty array.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains an integer &#39;T&#39;, denoting the number of test cases.\n\nThe first line of each test case contains two integers &#39;N&#39; &#39;M&#39;, denoting the size of the two arrays.\n\nThe second line of each test case contains &#39;N&#39; space-separated integers denoting the elements of the first array.\n\nThe third line of each test case contains &#39;M&#39; space-separated integers denoting the elements of the second array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The only line of output of each test case contains &#39;K&#39; space-separated integers which correspond to the intersection of the two arrays A and B.\n\nThe output of each test case will be printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N, M &lt;= 10^4\n0 &lt;= A[i] &lt;= 10^5\n0 &lt;= B[i] &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can we solve this problem using the time complexity of O(max(N, M)).\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n6 4\n1 2 2 2 3 4\n2 2 3 3\n3 2\n1 2 3\n3 4  \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2 2 3\n3   \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>For the first test case, the common elements are 2 2 3 in both the arrays, so we print it.\n\nFor the second test case, only 3 is common so we print 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 3 \n1 4 5\n3 4 5\n1 1\n3\n6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4 5\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 641,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two sorted arrays, A and B, of sizes N and M respectively, find their intersection. The intersection consists of elements common to both arrays, maintaining their original order of appearance. If no common elements exist, return an empty array. The arrays are sorted in non-decreasing order.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N, M <= 10^4",
                    "0 <= A[i] <= 10^5",
                    "0 <= B[i] <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "6 4\n1 2 2 2 3 4\n2 2 3 3",
                        "output": "2 2 3",
                        "explanation": "The common elements between the two arrays are 2, 2, and 3."
                    },
                    {
                        "input": "3 2\n1 2 3\n3 4",
                        "output": "3",
                        "explanation": "The only common element between the two arrays is 3."
                    },
                    {
                        "input": "3 3\n1 4 5\n3 4 5",
                        "output": "4 5",
                        "explanation": "The common elements between the two arrays are 4 and 5."
                    },
                    {
                        "input": "1 1\n3\n6",
                        "output": "-1",
                        "explanation": "There is no intersection present."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try the simplest possible way.</p>",
            "<p>Try to optimise on space and time.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(max(N,M))\r\n    Space Complexity: O(1)\r\n\r\n    Where 'N' is the size of the first array and \r\n    'M' is the size of the second array.\r\n*/\r\n\r\nvector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m)\r\n{\r\n    // Declare an array to store answer.\r\n    vector<int> ans;\r\n\r\n    int i = 0;\r\n    int j = 0;\r\n\r\n    while (i < n && j < m)\r\n    {\r\n        // If both the elements are equal then we increase both the pointers.\r\n        if (arr1[i] == arr2[j])\r\n        {\r\n            ans.push_back(arr1[i]);\r\n            i++;\r\n            j++;\r\n        }\r\n        \r\n        // If element of first array is greater, increment 'j'\r\n        else if (arr1[i] > arr2[j])\r\n        {\r\n            j++;\r\n        }\r\n        \r\n        // Otherwise increment 'i'\r\n        else\r\n        {\r\n            i++;\r\n        }\r\n    }\r\n\r\n    // Return 'ans'\r\n    return ans;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(max(N,M))\r\n    Space Complexity: O(1)\r\n\r\n    Where 'N' is the size of the first array and \r\n    'M' is the size of the second array.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution\r\n{\r\n    public static ArrayList<Integer> findArrayIntersection(ArrayList<Integer> arr1, int n, ArrayList<Integer> arr2, int m)\r\n    {\r\n        // Declare an array to store answer.\r\n        ArrayList<Integer> ans = new ArrayList<Integer>();\r\n\r\n        int i = 0;\r\n        int j = 0;\r\n\r\n        while (i < n && j < m)\r\n        {\r\n            // If both the elements are equal then we increase both the pointers.\r\n            if (arr1.get(i).equals(arr2.get(j)))\r\n            {\r\n                ans.add(arr1.get(i));\r\n                i++;\r\n                j++;\r\n            }\r\n\r\n            // If element of first array is greater, increment 'j'\r\n            else if (arr1.get(i) > arr2.get(j))\r\n            {\r\n                j++;\r\n            }\r\n\r\n            // Otherwise increment 'i'\r\n            else\r\n            {\r\n                i++;\r\n            }\r\n        }\r\n\r\n        // Return 'ans'\r\n        return ans;\r\n    }\r\n}\r\n\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n        Time Complexity: O(max(N,M))\n        Space Complexity: O(1)\n\n        Where N is the size of the first array and M is the size of the second array.\n'''\n\ndef findArrayIntersection(arr,n,brr,m):\n\tans = list()\n\ti,j = 0,0\n\twhile i<n and j<m:\n\t\tif arr[i] == brr[j]:\n\t\t\tans.append(arr[i])\n\t\t\ti+=1\n\t\t\tj+=1\n\n\t\telif arr[i] > brr[j]:\n\t\t\tj+=1\n\n\t\telse:\n\t\t\ti+=1\n\n\treturn ans",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}