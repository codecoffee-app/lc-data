{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7223,
            "title": "Intersection of Linked List",
            "titleSlug": "intersection-of-linked-list_630457",
            "content": "<h4 id=\"you-are-given-two-singly-linked-lists-of-integers-which-may-have-an-intersection-point\">You are given two Singly Linked Lists of integers, which may have an intersection point.</h4>\n\n<h4 id=\"your-task-is-to-return-the-first-intersection-node-if-there-is-no-intersection-return-null\">Your task is to return the first intersection node. If there is no intersection, return NULL.</h4>\n\n<p><br></p>\n\n<h5 id=\"example\">Example:-</h5>\n\n<pre><code>The Linked Lists, where a1, a2, c1, c2, c3 is the first linked list and b1, b2, b3, c1, c2, c3 is the second linked list, merging at node c1.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/ex1-27806.png\" alt=\"alt.txt\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The input format contains three lines consisting of the front part of the first list, front part of the second list and the intersection part of the lists, respectively.\n\nAll lines contain the elements of the singly linked list separated by a single space and terminated by -1.  \n\nSo the first line would contain\n       a1, a2, ...an, -1. \n\nSimilarly, the second line would contain\n       b1, b2, ...bm, -1. \n\nSimilarly, the third line would contain\n       c1, c2, ...ck -1. \n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>The only output line contains data from the first merged node if the correct node is returned. If there is no merging or incorrect answer, the output contains -1.\n\nYou don&#39;t have to print by yourself explicitly. It has been taken care of. You need to return the first merged node.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>4 1 -1\n5 6 -1\n8 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>8\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>As shown in the diagram, the node with data is 8, at which merging starts\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-27805.png\" alt=\"Sample Input 1\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1 9 1 -1\n3 -1\n2 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>-10^9 &lt;= data &lt;= 10^9 and data != -1\n The length of both the linked list is positive.\n Time Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 305,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two singly linked lists of integers, determine if they intersect. Your task is to find and return the first node at which they intersect. If the lists do not intersect, return null.",
                "constraints": [
                    "-10^9 <= data <= 10^9 and data != -1",
                    "The length of both the linked list is positive.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 1 -1\n5 6 -1\n8 -1",
                        "output": "8",
                        "explanation": "The two linked lists intersect at node 8."
                    },
                    {
                        "input": "1 9 1 -1\n3 -1\n2 -1",
                        "output": "2",
                        "explanation": "The two linked lists intersect at node 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Two nested loops?</p>",
            "<p>Can we use hashing?</p>",
            "<p>Think of using the length of lists.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space Complexity : O(1)\r\n\r\n    where 'N' is the maximum length of linked list.\r\n*/\r\n\r\n\r\nint length(Node *head)\r\n{\r\n    int length = 0;\r\n    Node *tmp = head;\r\n\r\n    while (tmp != NULL)\r\n    {\r\n        tmp = tmp->next;\r\n        length++;\r\n    }\r\n\r\n    return length;\r\n}\r\n\r\nNode* findIntersection(Node *firstHead, Node *secondHead)\r\n{\r\n\r\n    // Get the length of both list.\r\n    int firstListLength = length(firstHead), secondListLength = length(secondHead);\r\n\r\n    // Move headA and headB to the same start point.\r\n    while (firstListLength > secondListLength)\r\n    {\r\n        firstHead = firstHead->next;\r\n        firstListLength--;\r\n    }\r\n\r\n    while (firstListLength < secondListLength)\r\n    {\r\n        secondHead = secondHead->next;\r\n        secondListLength--;\r\n    }\r\n\r\n    // Find the intersection until end.\r\n    while (firstHead != secondHead)\r\n    {\r\n        firstHead = firstHead->next;\r\n        secondHead = secondHead->next;\r\n    }\r\n\r\n    return firstHead;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity :- O(N)\r\n    Space Complexity :- O(1)\r\n    \r\n    Where 'N' is the maximum length of linked list.\r\n'''\r\n\r\ndef length(head) :\r\n    length = 0  \r\n\r\n    while (head != None) :\r\n            head = head.next  \r\n            length+=1\r\n    \r\n    return length\r\n\r\ndef findIntersection( firstHead, secondHead) :\r\n\t\t\r\n    # Get the length of both list.\r\n    firstListLength = length(firstHead)\r\n    secondListLength = length(secondHead)  \r\n        \r\n    # Move headA and headB to the same start point.\r\n    while (firstListLength > secondListLength) :\r\n        firstHead = firstHead.next  \r\n        firstListLength-=1  \r\n    \r\n    \r\n    while (firstListLength < secondListLength) :\r\n        secondHead = secondHead.next  \r\n        secondListLength-=1\r\n    \r\n    \r\n    # Find the intersection until end.\r\n    while (firstHead != secondHead) :\r\n        firstHead = firstHead.next  \r\n        secondHead = secondHead.next  \r\n\r\n    return firstHead\r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity :- O(N)\r\n    Space Complexity :- O(1)\r\n\r\n    Where N is the maximum length of linked list.\r\n*/\r\n\r\npublic class Solution {\r\n\r\n    private static int length(Node head) {\r\n        int length = 0;\r\n        while (head != null) {\r\n            head = head.next;\r\n            length++;\r\n        }\r\n        return length;\r\n    }\r\n\r\n    public static int findIntersection(Node firstHead, Node secondHead) {\r\n\r\n        // get the length of both list\r\n        int firstListLength = length(firstHead), secondListLength = length(secondHead);\r\n\r\n        // move headA and headB to the same start point\r\n        while (firstListLength > secondListLength) {\r\n            firstHead = firstHead.next;\r\n            firstListLength--;\r\n        }\r\n\r\n        while (firstListLength < secondListLength) {\r\n            secondHead = secondHead.next;\r\n            secondListLength--;\r\n        }\r\n\r\n        // find the intersection until end\r\n        while (firstHead != secondHead) {\r\n            firstHead = firstHead.next;\r\n            secondHead = secondHead.next;\r\n        }\r\n\r\n        if(firstHead == null)\r\n            return -1;\r\n\r\n        return firstHead.data;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}