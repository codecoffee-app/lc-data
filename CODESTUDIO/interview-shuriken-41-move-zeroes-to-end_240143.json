{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 5577,
            "title": "Interview Shuriken 41: Move Zeroes to End",
            "titleSlug": "interview-shuriken-41-move-zeroes-to-end_240143",
            "content": "<h4 id=\"given-an-unsorted-array-of-integers-you-have-to-move-the-array-elements-in-a-way-such-that-all-the-zeroes-are-transferred-to-the-end-and-all-the-non-zero-elements-are-moved-to-the-front-the-non-zero-elements-must-be-ordered-in-their-order-of-appearance\">Given an unsorted array of integers, you have to move the array elements in a way such that all the zeroes are transferred to the end, and all the non-zero elements are moved to the front. The non-zero elements must be ordered in their order of appearance.</h4>\n\n<h4 id=\"for-example-if-the-input-array-is-0-1-2-3-4-0-5-27-9-0-then-the-output-array-must-be\">For example, if the input array is: [0, 1, -2, 3, 4, 0, 5, -27, 9, 0], then the output array must be:</h4>\n\n<h4 id=\"1-2-3-4-5-27-9-0-0-0\">[1, -2, 3, 4, 5, -27, 9, 0, 0, 0].</h4>\n\n<h4 id=\"expected-complexity-try-doing-it-in-o-n-time-complexity-and-o-1-space-complexity-here-n-is-the-size-of-the-array\">Expected Complexity: Try doing it in O(n) time complexity and O(1) space complexity. Here, \u2018n\u2019 is the size of the array.</h4>\n\n<h4 id=\"input-format\">Input format :</h4>\n\n<pre><code>The first line of input contains a single integer \u2018T\u2019 representing the number of test cases.      \n\nThe first line of each test case contains a single integer \u2018N\u2019 representing the size of the array. The second line of each test case contains \u2018N\u2019 integers representing the elements of the array.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, modify the input array and print the output in a new line\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 50 \n1 &lt;= N &lt;= 10^6\n-10000 &lt;= A[i] &lt;= 10000\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the size of the array, A[i] is the value of the element present at the ith index.\nTime Limit:1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n7\n2 0 4 1 3 0 28\n5\n0 0 0 0 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 4 1 3 28 0 0\n1 0 0 0 0\n</code></pre>\n\n<h5 id=\"the-explanation-for-sample-output-1\">The explanation for Sample Output 1 :</h5>\n\n<pre><code>In the first testcase, All the zeros are moved towards the end of the array, and the non-zero elements are pushed towards the left, maintaining their order with respect to the original array.\n\nIn the second testcase, All zero are moved towards the end, hence the only non-zero element i.e 1 is in the starting of the array \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n0 3 0 2 0\n4\n0 0 0 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3 2 0 0 0\n0 0 0 0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 174,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an unsorted array of integers, rearrange the elements such that all zeroes are moved to the end of the array, and all non-zero elements are moved to the beginning. The order of non-zero elements must be preserved.",
                "constraints": [
                    "1 <= T <= 50 (Number of test cases)",
                    "1 <= N <= 10^6 (Size of the array)",
                    "-10000 <= A[i] <= 10000 (Value of elements in the array)",
                    "Time Limit: 1 second",
                    "O(n) time complexity",
                    "O(1) space complexity"
                ],
                "testcases": [
                    {
                        "input": "7\n2 0 4 1 3 0 28\n5\n0 0 0 0 1",
                        "output": "2 4 1 3 28 0 0\n1 0 0 0 0",
                        "explanation": "In the first test case, the zeros are moved to the end while the non-zero elements maintain their original order at the beginning. In the second test case, 1 is the only non-zero element and is moved to the front, with all zeroes at the end."
                    },
                    {
                        "input": "5\n0 3 0 2 0\n4\n0 0 0 0",
                        "output": "3 2 0 0 0\n0 0 0 0",
                        "explanation": "In the first test case, 3 and 2 are moved to the front in their original order, followed by zeros. In the second test case, all elements are zero, so the output remains all zeros."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>can you think of separating zero elements and non-zero elements in different containers?</p>",
            "<p>can you maintain two different pointers for zero and non-zero elements and swap them within the same array?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n\tTime Complexity: O(N)\n\tSpace Complexity: O(N)\n\n\twhere 'N' is size of the given array.\n*/\n\nvoid pushZerosAtEnd(std::vector<int> &arr) {\n    int zptr = -1;\n    int nzptr = -1;\n    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        if (arr[i] == 0) {\n            zptr = i;\n            break;\n        }\n    }\n\n    if (zptr == -1) {\n        return;\n    }\n\n    for (int i = zptr + 1; i < n; i++) {\n        if (arr[i] != 0) {\n            nzptr = i;\n            break;\n        }\n    }\n\n    if (nzptr == -1) {\n        return;\n    }\n\n    while (nzptr < n) {\n        // Swapping.\n        int tmp = arr[zptr];\n        arr[zptr] = arr[nzptr];\n        arr[nzptr] = tmp;\n\n        zptr++;\n        while (nzptr < n && arr[nzptr] == 0) {\n            nzptr++;\n        }\n    }\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n\tTime Complexity: O(N)\n\tSpace Complexity: O(N)\n\n\twhere 'N' is size of the given array.\n'''\n\nfrom typing import List\n\ndef pushZerosAtEnd(arr: List[int]):\n    \n    zptr = -1\n    nzptr = -1\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == 0:\n            zptr = i\n            break\n\n    if zptr == -1:\n        return\n\n    for i in range(zptr + 1, n):\n        if arr[i] != 0:\n            nzptr = i\n            break\n\n    if nzptr == -1:\n        return\n\n    while nzptr < n:\n        # Swapping.\n        tmp = arr[zptr]\n        arr[zptr] = arr[nzptr]\n        arr[nzptr] = tmp\n\n        zptr += 1\n        while nzptr < n and arr[nzptr] == 0:\n            nzptr += 1\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\n\tTime Complexity: O(N)\n\tSpace Complexity: O(N)\n\n\twhere 'N' is size of the given array.\n*/\n\nimport java.util.*;\n\npublic class Solution {\n    public static void pushZerosAtEnd(ArrayList < Integer > arr) {\n        int zptr = -1;\n        int nzptr = -1;\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) == 0) {\n                zptr = i;\n                break;\n            }\n        }\n\n        if (zptr == -1) {\n            return;\n        }\n\n        for (int i = zptr + 1; i < n; i++) {\n            if (arr.get(i) != 0) {\n                nzptr = i;\n                break;\n            }\n        }\n\n        if (nzptr == -1) {\n            return;\n        }\n\n        while (nzptr < n) {\n            Collections.swap(arr, zptr, nzptr);\n            zptr++;\n            while (nzptr < n && arr.get(nzptr) == 0) {\n                nzptr++;\n            }\n        }\n    }\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}