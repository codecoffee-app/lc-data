{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 5676,
            "title": "Interview Shuriken 42: Detect and Remove loop",
            "titleSlug": "interview-shuriken-42-detect-and-remove-loop_241049",
            "content": "<h4 id=\"given-a-singly-linked-list-you-have-to-detect-the-loop-and-remove-the-loop-from-the-linked-list-if-present-you-have-to-make-changes-in-the-given-linked-list-itself-and-return-the-updated-linked-list\">Given a singly linked list, you have to detect the loop and remove the loop from the linked list, if present. You have to make changes in the given linked list itself and return the updated linked list.</h4>\n\n<h4 id=\"expected-complexity-try-doing-it-in-o-n-time-complexity-and-o-1-space-complexity-here-n-is-the-number-of-nodes-in-the-linked-list\">Expected Complexity: Try doing it in O(n) time complexity and O(1) space complexity. Here, n is the number of nodes in the linked list.</h4>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line of input contains two values: the number of nodes in the linked list and the value of the kth node from which the last node connects to form the loop while the second line of input contains the given linked list.\nThe value of k should be greater than or equal to 0 and less than equal to n. For, k equal to 0, there is no loop present in the linked list and for k equal to n, the last node is connected to itself to form the cycle.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>The only output line contains the linked list after removing the loop if present.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 100000.\n1 &lt;= \u2018VAL\u2019 &lt;= 1000 .  \n\nTime limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input\">Sample Input:</h4>\n\n<pre><code>6 2\n1 2 3 4 5 6 \n</code></pre>\n\n<h4 id=\"sample-output\">Sample Output:</h4>\n\n<pre><code>1 2 3 4 5 6\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For the given input linked list, the last node is connected to the second node as:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/0000000000003103.21\" alt=\"Alt Text\"></p>\n\n<pre><code>Now, after detecting and removing this loop the linked list will be:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/0000000000003104.22\" alt=\"Alt Text\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 206,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list, detect and remove any loop present. Modify the linked list in place to eliminate the loop while maintaining the original order of the remaining nodes. Return the updated linked list.",
                "constraints": [
                    "1 <= N <= 100000 (N is the number of nodes in the linked list)",
                    "1 <= VAL <= 1000 (VAL is the value of a node)",
                    "Time limit: 1 sec",
                    "O(n) time complexity and O(1) space complexity"
                ],
                "testcases": [
                    {
                        "input": "6 2\n1 2 3 4 5 6",
                        "output": "1 2 3 4 5 6",
                        "explanation": "The linked list contains a loop where the last node (6) connects to the second node (2). Removing this loop results in a standard linked list: 1 -> 2 -> 3 -> 4 -> 5 -> 6."
                    },
                    {
                        "input": "5 0\n10 20 30 40 50",
                        "output": "10 20 30 40 50",
                        "explanation": "The linked list does not contain any loop because k=0. Hence, the linked list is not modified and returned as is: 10 -> 20 -> 30 -> 40 -> 50."
                    },
                    {
                        "input": "4 4\n1 2 3 4",
                        "output": "1 2 3 4",
                        "explanation": "The linked list contains a loop where the last node (4) points back to itself. Removing the loop results in the following list: 1 -> 2 -> 3 -> 4."
                    },
                    {
                        "input": "3 1\n5 10 15",
                        "output": "5 10 15",
                        "explanation": "The last element in the linkedlist 15 points to the first element 5 to create a loop and it is removed to make 5->10->15"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of checking each node as the starting point for the cycle.</p>",
            "<p>Think of visiting the nodes one by one and try to remember if you have already visited the node you are currently looking at?</p>",
            "<p>Think of 2 people starting from the initial node. One person takes a single jump and the other person takes twice the first person's jump each time. Extend this idea on every node and track the destination of both the persons. Draw it on a paper and find what happens!</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n     Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    where \u2018N\u2019 is the number of nodes in the list.\n*/\n\nNode *removeLoop(Node *head)\n{\n    if (head == nullptr || head->next == nullptr){\n        return head;\n    }\n\n    // Slow Pointer - This will be incremented by 1 Nodes.\n    Node *slow = head;\n\n    // Fast Pointer  - This will be incremented by 2 Nodes\n    Node *fast = head;\n\n    while (true){\n\n        // We reached the end of the List and haven't found any Cycle\n        if (fast == nullptr || fast->next == nullptr){\n            return head;\n        }\n\n        slow = slow->next;\n        fast = fast->next->next;\n\n        if (slow == fast){\n            break;\n        }\n    }\n\n    // Cycle Found.\n    fast = head;\n\n    // start will point the starting node of cycle.\n    Node *start = nullptr;\n\n    while (fast != slow){\n\n        fast = fast->next;\n        slow = slow->next;\n    }\n\n    start = slow;\n\n    // Finding the previous node of 'start'.\n    Node *cur = start;\n\n    while (true){\n\n        if (cur->next == start){\n\n            cur->next = nullptr;\n            return head;\n        }\n\n        cur = cur->next;\n    }\n\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1)\r\n\r\n    where \u2018N\u2019 is the number of nodes in the list.   \r\n\"\"\"\r\n\r\nfrom typing import *\r\n\r\n\r\nclass Node:\r\n    def __init__(self, val):\r\n        self.val = val\r\n        self.next = None\r\n\r\n\r\ndef removeLoop(head: Node) -> Node:\r\n\r\n    if head == None or head.next == None:\r\n        return head\r\n\r\n    #  Slow Pointer - This will be incremented by 1 Nodes\r\n    slow = head\r\n\r\n    #  Fast Pointer  - This will be incremented by 2 Nodes\r\n    fast = head\r\n\r\n    while True:\r\n\r\n        #  We reached the end of the List and haven't found any Cycle\r\n        if fast == None or fast.next == None:\r\n            return head\r\n\r\n        slow = slow.next\r\n        fast = fast.next.next\r\n\r\n        if slow == fast:\r\n            break\r\n\r\n    # Cycle Found.\r\n    fast = head\r\n\r\n    # start will point the starting node of cycle.\r\n    start = None\r\n\r\n    while fast != slow:\r\n\r\n        fast = fast.next\r\n        slow = slow.next\r\n\r\n    start = slow\r\n\r\n    # Finding the previous node of 'start'.\r\n    cur = head\r\n\r\n    while True:\r\n\r\n        if cur.next == start:\r\n\r\n            cur.next = None\r\n            return head\r\n\r\n        cur = cur.next\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\n     Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    where 'N' is the number of nodes in the list.\n*/\n\nimport java.util.ArrayList;\n\npublic class Solution {\n  public static Node removeLoop(Node head) {\n    if (head == null || head.next == null){\n        return head;\n    }\n\n    // Slow Pointer - This will be incremented by 1 Nodes.\n    Node slow = head;\n\n    // Fast Pointer  - This will be incremented by 2 Nodes\n    Node fast = head;\n\n    while (true){\n\n        // We reached the end of the List and haven't found any Cycle\n        if (fast == null || fast.next == null){\n            return head;\n        }\n\n        slow = slow.next;\n        fast = fast.next.next;\n\n        if (slow == fast){\n            break;\n        }\n    }\n\n    // Cycle Found.\n    fast = head;\n\n    // start will point the starting node of cycle.\n    Node start = null;\n\n    while (fast != slow){\n\n        fast = fast.next;\n        slow = slow.next;\n    }\n\n    start = slow;\n\n    // Finding the previous node of 'start'.\n    Node cur = start;\n\n    while (true){\n\n        if (cur.next == start){\n\n            cur.next = null;\n            return head;\n        }\n\n        cur = cur.next;\n    }\n  }\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}