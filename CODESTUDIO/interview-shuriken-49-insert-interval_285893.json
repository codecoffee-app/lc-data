{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 6132,
            "title": "Interview Shuriken 49: Insert Interval",
            "titleSlug": "interview-shuriken-49-insert-interval_285893",
            "content": "<h4 id=\"you-are-given-a-2-dimensional-array-intervals-containing-a-list-of-non-overlapping-intervals-sorted-by-their-start-time-you-are-given-an-interval-newinterval-your-task-is-to-insert-the-given-interval-at-the-correct-position-and-merge-all-necessary-intervals-to-produce-a-list-with-only-mutually-exclusive-intervals\">You are given a  2-dimensional array \u2018Intervals\u2019 containing a list of non-overlapping intervals sorted by their start time. You are given an interval \u2018newInterval\u2019. Your task is to insert the given interval at the correct position and merge all necessary intervals to produce a list with only mutually exclusive intervals.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>Consider &#39;Intervals&#39; = [[1, 3], [5, 7], [8, 12]], and &#39;newInterval&#39; = [4, 6] \nThe interval [4, 6] overlaps with [5, 7]. Therefore we can merge the intervals and produce an interval [4, 7]. Hence the answer [[1,3], [4,7], [8,12]]\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains a single integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer, \u2018N\u2019, denoting the number of intervals.\n\nThe following \u2018N\u2019 lines of the test case contain two space-separated integers, \u2018Intervals[i][0]\u2019 and \u2018Intervals[i][1]\u2019, denoting the start and the end of the \u2018i-th\u2019 interval.\n\nThe last line of the test case contains two space-separated integers, \u2018newInterval[0]\u2019 and \u2018newInterval[1]\u2019, denoting the interval to be inserted into the list of intervals.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the intervals sorted by their start time. Each interval is to be printed in a separate line in a space-separated manner.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n0 &lt;= N &lt;= 10^5\n0 &lt;= Intervals[i][0], Intervals[i][1] &lt;= 10^10\n0 &lt;= newInterval[0], newInterval[1] &lt;= 10^10\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\n1 3\n5 7\n8 12\n4 6\n3\n1 3\n5 7\n8 12\n4 10\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 3\n4 7\n8 12\n1 3\n4 12\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For the first test case,\nThe interval [4, 6] overlaps with [5, 7]. Therefore we can merge the intervals and produce an interval [4, 7]. Hence the answer [[1,3], [4,7], [8,12]].\n\nFor the second test case, \nThe interval [4, 10] overlaps with [5, 7] and [8, 12]. Therefore we can merge the intervals and produce an interval [4, 12]. Hence the answer is [[1, 3], [4, 12]].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2\n2 3\n5 7\n1 4\n2\n1 2\n6 9\n3 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 4\n5 7\n1 2\n3 5\n6 9\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 12,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of non-overlapping intervals, 'Intervals', sorted by their start time, and a 'newInterval', insert the 'newInterval' into the 'Intervals' list at the correct position. Merge any overlapping intervals to produce a new list of mutually exclusive intervals, sorted by their start time.",
                "constraints": [
                    "1 <= T <= 5",
                    "0 <= N <= 10^5",
                    "0 <= Intervals[i][0], Intervals[i][1] <= 10^10",
                    "0 <= newInterval[0], newInterval[1] <= 10^10",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\n1 3\n5 7\n8 12\n4 6",
                        "output": "1 3\n4 7\n8 12",
                        "explanation": "The interval [4, 6] overlaps with [5, 7]. Therefore, these intervals are merged to produce [4, 7]. The final result is [[1, 3], [4, 7], [8, 12]]."
                    },
                    {
                        "input": "3\n1 3\n5 7\n8 12\n4 10",
                        "output": "1 3\n4 12",
                        "explanation": "The interval [4, 10] overlaps with [5, 7] and [8, 12]. Therefore, these intervals are merged to produce [4, 12]. The final result is [[1, 3], [4, 12]]."
                    },
                    {
                        "input": "2\n2 3\n5 7\n1 4",
                        "output": "1 4\n5 7",
                        "explanation": "The interval [1,4] overlaps with [2,3]. Therefore, these intervals are merged to produce [1, 4]. The final result is [[1, 4], [5, 7]]."
                    },
                    {
                        "input": "1 2\n6 9\n3 5",
                        "output": "1 2\n3 5\n6 9",
                        "explanation": "The interval [3, 5] does not overlap with any other intervals, therefore it is inserted in sorted order. The final result is [[1, 2], [3, 5], [6, 9]]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of all the conditions to insert an interval.</p>",
            "<p>Try to use stack to insert the new interval.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}