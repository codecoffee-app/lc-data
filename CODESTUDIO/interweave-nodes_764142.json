{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7795,
            "title": "Interweave Nodes",
            "titleSlug": "interweave-nodes_764142",
            "content": "<h4 id=\"you-have-been-given-two-singly-linked-lists-of-length-n1-and-n2-respectively-your-task-is-to-modify-them-by-interweaving-alternate-nodes-of-the-two-linked-lists-if-one-list-is-smaller-than-the-other-complete-the-process-using-another-linked-list\">You have been given two singly linked lists of length &#39;N1&#39; and &#39;N2&#39; respectively. Your task is to modify them by interweaving alternate nodes of the two linked lists. If one list is smaller than the other, complete the process using another linked list.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of Test cases.\nThe next &#39;2*T&#39; lines denote the &#39;T&#39; test cases. Each test case consists of two lines.\n\nThe first line of each test case contains the first linked list separated by space and terminated by -1.\n\nThe second line of each test case contains a second linked list separated by space and terminated by -1.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print two lines denoting a single space-separated modified linked list by interweaving alternate nodes of the two linked lists.\n\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n\nThe return type is a vector/list of Node*, hence you need to push the head of the first and then second modified linked lists and return the vector/list.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10        \n0 &lt;= N1 &lt;= 10^4\n0 &lt;= N2 &lt;= 10^4\n-10^9 &lt;= data &lt;= 10^9 and data != -1\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3\n1 2 3 4 5 -1\n6 7 8 9 10 -1\n-1\n3 4 5 7 -1\n5 4 3 7 9 -1\n4 3 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 7 3 9 5 \n6 2 8 4 10\n4 7 \n3 5\n5 3 3 9 \n4 4 7\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input1\">Explanation For Sample Input1 :</h5>\n\n<pre><code>Here we have 3 test cases, hence there are 3 pairs of linked lists.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/t1-5088.png\" alt=\"Test case 1\"></p>\n\n<pre><code>Test Case 1: Here we connect alternate nodes of linked list 1 and linked list 2. The yellow link in the above diagram shows the modified linking of linked list 1, similarly, the green link shows the modified linking of linked list 2.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/t2-5089.png\" alt=\"Test case 2\"></p>\n\n<pre><code>Test Case 2: As the first linked list is of length zero, we need to use the second linked list for the process. Hence first two alternate nodes of linked list 2 would be modified linked list 2 and the remaining alternate nodes would become modified linked list 1. The yellow link in the above diagram shows the modified linking of linked list 1, similarly, the green link shows the modified linking of linked list 2.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/t3-5090.png\" alt=\"Test case 3\"></p>\n\n<pre><code>Test Case 3: Here the linked list 2 is shorter than linked list 1, hence once we encounter NULL in linked list 2, we would use alternate nodes of linked list 1. The yellow link in the above diagram shows the modified linking of linked list 1, similarly, the green link shows the modified linking of linked list 2.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two singly linked lists, `head1` of length N1 and `head2` of length N2, interweave the nodes of the two lists alternately. If one list is shorter than the other, append the remaining nodes of the longer list (alternately) to the end of the resulting lists. Return a vector containing the head nodes of the two modified linked lists.",
                "constraints": [
                    "1 <= T <= 10",
                    "0 <= N1 <= 10^4",
                    "0 <= N2 <= 10^4",
                    "-10^9 <= data <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "head1 = 1 2 3 4 5 -1, head2 = 6 7 8 9 10 -1",
                        "output": "1 7 3 9 5 \n6 2 8 4 10",
                        "explanation": "Interweave alternate nodes of linked list 1 and linked list 2. The first modified list starts with 1, then 7, then 3, then 9, then 5. The second modified list starts with 6, then 2, then 8, then 4, then 10."
                    },
                    {
                        "input": "head1 = -1, head2 = 3 4 5 7 -1",
                        "output": "4 7 \n3 5",
                        "explanation": "The first linked list is empty. Therefore, we take alternate nodes of the second linked list to form the first modified list which will contain  4 then 7. The second list will contain 3 and then 5."
                    },
                    {
                        "input": "head1 = 5 4 3 7 9 -1, head2 = 4 3 -1",
                        "output": "5 3 3 9 \n4 4 7",
                        "explanation": "The second linked list is shorter than the first. After interweaving the available nodes from the second list, we append the remaining alternate nodes from the first list. The first modified list contains 5, 3, 3 and then 9. The second list contains 4, 4 and then 7."
                    },
                    {
                        "input": "head1 = 1 -1, head2 = 2 3 4 -1",
                        "output": "1 3\n2 4",
                        "explanation": "First List contains only 1 element so it takes alternate elements from second linked list"
                    },
                    {
                        "input": "head1 = 1 2 3 -1, head2 = 4 -1",
                        "output": "1\n4 2 3",
                        "explanation": "Second List contains only 1 element so it takes alternate elements from first linked list starting from second element which is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse iteratively through both the linked list and merge alternate nodes between them.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}