{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10982,
            "title": "Invert a Binary Tree",
            "titleSlug": "invert-a-binary-tree_1281382",
            "content": "<h4 id=\"you-are-provided-with-a-binary-tree-and-one-of-its-leaf-nodes-you-have-to-invert-this-binary-tree-inversion-must-be-done-by-following-all-the-below-guidelines\">You are provided with a Binary Tree and one of its leaf nodes. You have to invert this binary tree. Inversion must be done by following all the below guidelines:</h4>\n\n<pre><code>\u2022 The given leaf node becomes the root after the inversion.\n\n\u2022 For a node (say, \u2018x\u2019) \n    \u25cb If there exists the left child that is not yet taken then this child must become the right child of \u2018x\u2019.\n    \u25cb If the left child is already taken then the right child is still on the right side of \u2018x\u2019.\n\n\u2022 The parent of \u2018x\u2019 must be the left child of \u2018x\u2019.\n</code></pre>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<p><img src=\"https://files.codingninjas.in/invert-a-binary-tree-01-8578.png\" alt=\"Example-img01\">\n<br>\n<img src=\"https://files.codingninjas.in/invert-a-binary-tree-02-8579.png\" alt=\"Example-img02\"></p>\n\n<pre><code>Consider the above binary tree (image- before inversion), if the given leaf node is \u20181\u2019 then the binary tree after inversion becomes exactly the same as given in the image representing after inversion.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The given binary tree will only have distinct values of nodes.\n</code></pre>\n\n<p><be></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain a single TreeNode \u201cleaf\u201d which denotes one of the leaf nodes of the given binary tree.\n\nThe second line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the whole binary tree (according to the format as it has been given in the input) after considering the given leaf node as the new root node.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10000\n-10^5 &lt;= DATA &lt;= 10^5\nLeaf is one of the leaf nodes of the given binary tree.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n1\n5 6 15 4 1 -5 2 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 6 -1 5 4 -1 15 -1 -1 -5 2 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case, the explanation is provided in the description.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2\n1 2 3 -1 -1 -1 -1\n3\n1 2 -1 3 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2 1 -1 -1 3 -1 -1\n3 2 -1 1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>In the first test case, the inverted tree will look like this:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/invert-a-binary-tree-03-8580.png\" alt=\"Explanation\"></p>\n\n<pre><code>In the second test case, the inverted tree will look like this:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/invert-a-binary-tree-04-8581.png\" alt=\"Explanation\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 37,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Tree and one of its leaf nodes, invert the tree such that:\n\n*   The given leaf node becomes the new root.\n*   For any node 'x':\n    *   If 'x' has a left child that hasn't been processed, make it the right child.\n    *   If 'x' has a left child that has been processed, keep the right child as is.\n*   The parent of 'x' becomes the left child of 'x'.\n\nThe Binary Tree will have distinct node values.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10000",
                    "-10^5 <= DATA <= 10^5",
                    "Leaf is one of the leaf nodes of the given binary tree.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n1\n5 6 15 4 1 -5 2 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "1 6 -1 5 4 -1 15 -1 -1 -5 2 -1 -1 -1 -1",
                        "explanation": "The leaf node '1' becomes the root. The tree is restructured according to the inversion rules."
                    },
                    {
                        "input": "2\n2\n1 2 3 -1 -1 -1 -1\n3\n1 2 -1 3 -1 -1 -1",
                        "output": "2 1 -1 -1 3 -1 -1\n3 2 -1 1 -1 -1 -1",
                        "explanation": "In the first test case, the leaf node '2' becomes the root. In the second test case, the leaf node '3' becomes the root, and the tree is inverted accordingly."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a solution after finding the path that includes the given leaf node?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}