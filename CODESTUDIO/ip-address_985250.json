{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9388,
            "title": "IP address",
            "titleSlug": "ip-address_985250",
            "content": "<h4 id=\"you-are-given-a-string-s-containing-only-digits-from-0-to-9-your-task-is-to-find-all-possible-ip-addresses-that-can-be-obtained-from-s-in-lexicographical-order-if-no-valid-ip-address-can-be-generated-from-s-return-an-empty-string\">You are given a string \u201cS\u201d containing only digits from 0 to 9. Your task is to find all possible IP addresses that can be obtained from S in lexicographical order. If no valid IP address can be generated from S, return an empty string.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>A valid IP address consists of exactly four integers, each integer is between 0 and 255 separated by single dots, and cannot have leading zeros (except if they are zero).\n\nFor example-\nFollowing are valid IP addresses. \n0.1.24.255 \n18.5.244.1\n\nFollowing are invalid IP addresses. \n2.01.24.255 \n18.312.244.1\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains a single integer \u2018T\u2019, representing the number of test cases or queries to be run. Then the test cases follow.\n\nThe only line of each test case contains a string \u2018S\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a single line containing all possible valid IP addresses that can be obtained from S separated by a single space. \n\nNote:\nYou do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 1000  \n0 &lt;= |S| &lt;= 15 \n\nwhere |S| denotes the length of string, S.\nS contains only digits from 0 to 9.\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n00000\n23579\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2.3.5.79 2.3.57.9 2.35.7.9 23.5.7.9\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>For the first test case, no valid IP address can be found.\n\nFor the second test case, all possible IP addresses are shown below: [2.3.5.79, 2.3.57.9,  2.35.7.9, 23.5.7.9]\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5555\n02300\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5.5.5.5\n0.2.30.0 0.23.0.0\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For the first test case, there is only one possible IP address that is 5.5.5.5.\n\nFor the second test case, all possible IP addresses are shown below:\n[0.2.30.0, 0.23.0.0]\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 's' containing only digits (0-9), generate all possible valid IPv4 addresses that can be formed from 's'. A valid IPv4 address consists of four integers, each between 0 and 255 inclusive, separated by dots. Leading zeros are not allowed in any integer segment, except when the segment is '0' itself. Return a lexicographically sorted list of all valid IP addresses. If no valid IP address can be generated, return an empty list.",
                "constraints": [
                    "1 <= T <= 1000",
                    "0 <= |s| <= 15",
                    "s contains only digits from 0 to 9"
                ],
                "testcases": [
                    {
                        "input": "s = \"0000\"",
                        "output": "0.0.0.0",
                        "explanation": "The only valid IP address that can be generated from \"0000\" is \"0.0.0.0\"."
                    },
                    {
                        "input": "s = \"25525511135\"",
                        "output": "255.255.11.135 255.255.111.35",
                        "explanation": "The valid IP addresses are \"255.255.11.135\" and \"255.255.111.35\"."
                    },
                    {
                        "input": "s = \"00000\"",
                        "output": "",
                        "explanation": "No valid IP address can be formed that doesn't have leading zeros."
                    },
                    {
                        "input": "s = \"23579\"",
                        "output": "2.3.5.79 2.3.57.9 2.35.7.9 23.5.7.9",
                        "explanation": "The valid IP addresses are \"2.3.5.79\", \"2.3.57.9\", \"2.35.7.9\", and \"23.5.7.9\"."
                    },
                    {
                        "input": "s = \"5555\"",
                        "output": "5.5.5.5",
                        "explanation": "The only valid IP address is \"5.5.5.5\"."
                    },
                    {
                        "input": "s = \"02300\"",
                        "output": "0.2.30.0 0.23.0.0",
                        "explanation": "The valid IP addresses are \"0.2.30.0\" and \"0.23.0.0\"."
                    },
                    {
                        "input": "s = \"101023\"",
                        "output": "1.0.10.23 1.0.102.3 1.01.0.23 1.01.02.3 10.1.0.23 10.1.02.3 10.10.2.3 101.0.2.3",
                        "explanation": "All possible combinations of splitting the string into four parts, each representing a valid number between 0 and 255 without leading zeros (except for 0 itself)."
                    },
                    {
                        "input": "s = \"1111111\"",
                        "output": "1.1.1.111 1.1.11.11 1.1.111.1 1.11.1.11 1.11.11.1 1.111.1.1 11.1.1.11 11.1.11.1 11.11.1.1 111.1.1.1",
                        "explanation": "All possible combinations are considered and lexicographically sorted."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a solution using nested for loops.</p>",
            "<p>Think of a solution using backtracking.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}