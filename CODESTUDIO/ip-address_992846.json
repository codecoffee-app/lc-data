{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9467,
            "title": "IP Address",
            "titleSlug": "ip-address_992846",
            "content": "<h4 id=\"you-are-given-a-string-s-containing-only-digits-your-task-is-to-find-all-possible-ip-addresses-that-can-be-obtained-from-string-s-in-lexicographical-order\">You are given a string &#39;S&#39; containing only digits. Your task is to find all possible IP addresses that can be obtained from string &#39;S&#39; in lexicographical order.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>A valid IP address consists of exactly four integers, each integer is between 0 and 255 separated by single dots, and cannot have leading zeros except in the case of zero itself.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>The following are valid IP addresses:\n0.1.24.255\n18.5.244.1\n\nFollowing are invalid IP addresses:\n0.01.24.255  (as  01  contains one leading zero).\n18.312.244.1 (as 312 not lies between 0 and 255).\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains a single integer &#39;T&#39;, representing the number of test cases or queries to be run. \n\nThen the &#39;T&#39; test cases follow.\n\nThe first line of each test case contains a string &#39;S&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a single line containing all possible valid IP addresses that can be obtained from &#39;S&#39; in lexicographical order in a separate line.\n\nEach IP address of a string &#39;S&#39; is written within quotes(&quot;&quot;) and separated by comma(,) and space, and all IP addresses of the given string &#39;S&#39; is written inside square brackets[].\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 1000\n1 &lt;= |S| &lt;= 15\n\nWhere |&#39;S&#39;| denotes the length of string &#39;S&#39; and &#39;S&#39; contains only digits from 0 to 9.\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2 \n2122\n23579\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>[\u201c2.1.2.2\u201d]\n[\u201c2.3.5.79\u201d, \u201c2.3.57.9\u201d, \u201c2.35.7.9\u201d, \u201c23.5.7.9\u201d]\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample Input 1:</h5>\n\n<pre><code>For the first test case, there is only one possible IP address that is [2.1.2.2]\n\nFor the second test case, all possible IP addresses are shown below.\n[2.3.5.79], [2.3.57.9], [2.35.7.9], [23.5.7.9]\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n123\n02300\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>[]\n[\u201c0.2.30.0\u201d, \u201c0.23.0.0\u201d]\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample Input 2:</h5>\n\n<pre><code>For the first test case, there is no possible IP address. Therefore then answer is []\n\nFor the second test case, there are only 2 possible IP addresses are shown below.\n[0.2.30.0], [0.23.0.0]\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 23,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S' containing only digits, find all possible valid IP addresses that can be formed from 'S'. A valid IP address consists of exactly four integers, each between 0 and 255, separated by single dots. Leading zeros are not allowed, except for the integer zero itself. Return the IP addresses in lexicographical order, enclosed in quotes and separated by commas within square brackets.",
                "constraints": [
                    "1 <= T <= 1000",
                    "1 <= |S| <= 15",
                    "'S' contains only digits from 0 to 9"
                ],
                "testcases": [
                    {
                        "input": "2122",
                        "output": "[\"2.1.2.2\"]",
                        "explanation": "Only one valid IP address can be formed: 2.1.2.2."
                    },
                    {
                        "input": "23579",
                        "output": "[\"2.3.5.79\", \"2.3.57.9\", \"2.35.7.9\", \"23.5.7.9\"]",
                        "explanation": "Several valid IP addresses can be formed. They are listed in lexicographical order."
                    },
                    {
                        "input": "123",
                        "output": "[]",
                        "explanation": "No valid IP address can be generated from the input string."
                    },
                    {
                        "input": "02300",
                        "output": "[\"0.2.30.0\", \"0.23.0.0\"]",
                        "explanation": "Two valid IP addresses can be generated from the input. Note the handling of the '0' to fulfill leading zeros except for zero itself condition."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a solution using nested for loops.</p>",
            "<p>Think of a solution using backtracking</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}