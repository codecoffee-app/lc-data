{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8615,
            "title": "Is Binary Heap Tree",
            "titleSlug": "is-binary-heap-tree_893136",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-integers\">You have been given a binary tree of integers.</h4>\n\n<h4 id=\"your-task-is-to-check-if-it-is-a-binary-heap-tree-or-not\">Your task is to check if it is a binary heap tree or not.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>A binary tree is a tree in which each parent node has at most two children. \n\nA binary heap tree has the following properties. \n1. It must be a complete binary tree. In the complete binary tree every level, except the last level, is completely filled and the last level is as far left as possible.\n\n2. Every parent must be greater than its all children nodes.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Consider this binary tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-50-6009.png\" alt=\"binary_heap\"></p>\n\n<pre><code>Figure 1 is a complete binary tree because every level, except the last level, is completely filled and the last nodes are as far left as possible, and the level has 2 nodes both on the left side.\n\nFigure 2 is not a complete binary tree because level 2 (level is 0 based) is not completely filled means the right child of the node (36) is missing.\nThere is another reason, in the last level, there can be one another node in between node (1) and node (14) to make the binary tree as far left as possible.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. In the world of programming two types of binary heap tree possible:\n   a. Min-heap - if all parents nodes are lesser than its children nodes.\n   b. Max-heap - if all parents nodes greater than its children nodes, explained in the above figure-1.\n\n2. In this problem binary heap tree is a binary max-heap tree.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u2018T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe only line of input contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code> 1\n 2 3\n 4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\n\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, print a single containing either &quot;True&quot; if the binary tree is a heap else print &quot;False&quot;.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 100\n1 &lt;= &#39;N&#39; &lt;= 3000\n0 &lt;= &#39;DATA&#39; &lt;= 10 ^ 9\n\nWhere \u2018N\u2019 is the number of nodes in the tree, and \u2018DATA\u2019 denotes data contained in the node of a binary tree.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n10 8 9 5 5 4 5 1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n15 14 10 4 5 11 5 1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>Test case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-52-6028.png\" alt=\"alt text\"></p>\n\n<pre><code>It is clearly a complete binary tree because every level, except the last level, is completely filled, and every node of the last level is as far left as possible.\nGiven binary tree is a binary heap tree because every parent node is greater than all the children nodes.\nNode (10) is greater than :  8, 9, 5, 5, 4, 5, 1,2\nNode (8) is greater than : 5, 5, 1, 2\nNode (9) is greater than : 4, 5\nNode (5) is greater than : 1, 2 (the node (5) at level 2 and the left most)\nAll the other nodes have no children.\nHence all the parent nodes are greater than all the children nodes of a particular node.\n\nTest case 2:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-55-6029.png\" alt=\"alt text\"></p>\n\n<pre><code>It is clearly a complete binary tree because every level, except the last level, is completely filled, and every node of the last level is as far left as possible.\nGiven a binary tree is not a binary heap tree, because node (10) has a child node (11) which is greater than the parent node (10)  so it is not a binary heap tree.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n10 1 2 -1 -1 3 -1 -1 -1\n3 1 2 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>False\nTrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 11,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree represented by its root node, determine if it is a valid Max Binary Heap. A Max Binary Heap is a complete binary tree where the value of each node is greater than or equal to the value of its children.",
                "constraints": [
                    "1 <= 'T' <= 100",
                    "1 <= 'N' <= 3000",
                    "0 <= 'DATA' <= 10 ^ 9"
                ],
                "testcases": [
                    {
                        "input": "root=BinaryTreeNode(10), root.left=BinaryTreeNode(8), root.right=BinaryTreeNode(9), root.left.left=BinaryTreeNode(5), root.left.right=BinaryTreeNode(5), root.right.left=BinaryTreeNode(4), root.right.right=BinaryTreeNode(5), root.left.left.left=BinaryTreeNode(1), root.left.left.right=BinaryTreeNode(2)",
                        "output": "True",
                        "explanation": "The given tree satisfies both the complete binary tree and max-heap properties. Every level is filled from left to right, and each parent node's value is greater than its children's values."
                    },
                    {
                        "input": "root=BinaryTreeNode(15), root.left=BinaryTreeNode(14), root.right=BinaryTreeNode(10), root.left.left=BinaryTreeNode(4), root.left.right=BinaryTreeNode(5), root.right.left=BinaryTreeNode(11), root.right.right=BinaryTreeNode(5), root.left.left.left=BinaryTreeNode(1), root.left.left.right=BinaryTreeNode(2)",
                        "output": "False",
                        "explanation": "The given tree is a complete binary tree, but it's not a max heap. The node with value 10 has a left child with value 11, which violates the max-heap property (parent must be >= children)."
                    },
                    {
                        "input": "root=BinaryTreeNode(10), root.left=BinaryTreeNode(1), root.right=BinaryTreeNode(2), root.right.left=BinaryTreeNode(3)",
                        "output": "False",
                        "explanation": "The tree violates max heap property. root.left(1) < root(10) but root.right(2) < root(10), root.right(2) < root.right.left(3)"
                    },
                    {
                        "input": "root=BinaryTreeNode(3), root.left=BinaryTreeNode(1), root.right=BinaryTreeNode(2)",
                        "output": "True",
                        "explanation": "The given tree is a complete binary tree, and is max-heap because 3 is greater than 1 and 2."
                    },
                    {
                        "input": "root=BinaryTreeNode(5), root.left=BinaryTreeNode(4), root.right=BinaryTreeNode(3), root.left.left=BinaryTreeNode(2), root.left.right=BinaryTreeNode(1)",
                        "output": "True",
                        "explanation": "The tree is a complete binary tree with the max-heap property. 5>4, 5>3, 4>2, 4>1."
                    },
                    {
                        "input": "root=BinaryTreeNode(1)",
                        "output": "True",
                        "explanation": "A single node is always a heap."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use recursion.</p>",
            "<p>Try to use breadth first search(BFS)</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}