{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9142,
            "title": "Is Height Balanced Binary Tree",
            "titleSlug": "is-height-balanced-binary-tree_975497",
            "content": "<h4 id=\"you-are-given-the-root-node-of-a-binary-tree\">You are given the root node of a binary tree.</h4>\n\n<p><br/></p>\n\n<h4 id=\"return-true-if-it-is-a-height-balanced-binary-tree\">Return &#39;true&#39; if it is a height balanced binary tree.</h4>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Height of a tree is the maximum number of nodes in a path from the node to the leaf node.\n\nAn empty tree is a height-balanced tree. A non-empty binary tree is a height-balanced binary tree if\n1. The left subtree of a binary tree is already the height-balanced tree.\n2. The right subtree of a binary tree is also the height-balanced tree.\n3. The difference between heights of left subtree and right subtree must not more than \u20181\u2019.\n</code></pre>\n\n<p><br/></p>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Input: Consider the binary tree given below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/example-29812.png\" alt=\"alt text\"></p>\n\n<pre><code>Output: &#39;true&#39;\n\nExplanation:\nConsider subtree at Node ( 7 ) \nLeft subtree height is \u20180\u2019 and right subtree height is \u20180\u2019, the absolute height difference is \u20180-0 = 0\u2019 and \u20180\u2019 is not more than \u20181\u2019 so subtree at Node ( 7 ) is a height-balanced binary tree. \nSame for subtrees at Nodes ( 5, 6 ). \n\nConsider subtree at Node ( 4 ) \nLeft subtree height is \u20181\u2019 and right subtree height is \u20180\u2019, the absolute height difference is \u20181-0 = 1\u2019 and \u20181\u2019 is not more than \u20181\u2019 so subtree at Node ( 4 ) is a height-balanced binary tree.\nSame for subtree at Node ( 3)\n\nConsider subtree at Node ( 2 ) \nLeft subtree height is \u20182\u2019 and right subtree height is \u20181\u2019, the absolute height difference is \u20182-1 = 1\u2019 and \u20181\u2019 is not more than \u20181\u2019 so subtree at Node ( 2 ) is a height-balanced binary tree.\n\nConsider subtree at Node ( 1 ) \nLeft subtree height is \u20183\u2019 and right subtree height is \u20182\u2019, the absolute height difference is \u20183-2 = 1\u2019 and \u20181\u2019 is not more than \u20181\u2019 so subtree at Node ( 1 ) is a height-balanced binary tree.\n\nBecause the root node ( 1 ) is a height-balanced binary tree, so the complete tree is height-balanced.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The only line contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null(-1).\n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return &#39;true&#39; or &#39;false&#39; as stated in the problem statement.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1 2 3 4 -1 -1 -1 -1 5 -1 -1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-answer\">Expected Answer:</h5>\n\n<pre><code>false\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-on-console\">Output on console:</h5>\n\n<pre><code>false\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-107-6523.png\" alt=\"alt text\"></p>\n\n<pre><code>Consider the root  Node ( 1 ) \nLeft subtree height is \u20183\u2019 ( 1-&gt;2-&gt;4-&gt;5) and right subtree height is \u20181\u2019 ( 1-&gt;3), the absolute height difference is \u20182-1 = 2\u2019 and \u20182\u2019 is more than \u20181\u2019 so subtree at Node ( 1 ) is not a height-balanced binary tree.\nHence we return \u2018false\u2019.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1 2 3 4 -1 -1 5 -1 -1 -1 -1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-answer\">Expected Answer:</h5>\n\n<pre><code>true\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-on-console\">Output on console:</h5>\n\n<pre><code>true\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2:</h5>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-106-6524.png\" alt=\"alt text\"></p>\n\n<pre><code>Consider the subtree at Node ( 4 ) \nLeft subtree height is \u20180\u2019 and right subtree height is \u20180\u2019, the absolute height difference is \u20180-0 = 0\u2019 and \u20180\u2019 is not more than \u20181\u2019 so subtree at Node ( 4 ) is a height-balanced binary tree.\nSame for subtree at Node ( 5 ).\n\nConsider the subtree at Node ( 2 ) \nLeft subtree height is \u20181\u2019 and right subtree height is \u20180\u2019, the absolute height difference is \u20181-0 = 1\u2019 and \u20181\u2019 is not more than \u20181\u2019 so subtree at Node ( 2 ) is a height-balanced binary tree.\nSame for subtree at Node ( 3 ).\n\nConsider the subtree at Node ( 1 ) \nLeft subtree height is \u20182\u2019 (1-&gt;2-&gt;4) and right subtree height is \u20182\u2019 (1-&gt;3-&gt;5), the absolute height difference is \u20182-2 = 0\u2019 and \u20180\u2019 is not more than \u20181\u2019 so subtree at Node ( 1 ) is a height-balanced binary tree.\n\nHence root node (1) is a height-balanced binary tree that\u2019s why the complete tree is a height-balanced binary tree. \nHence we return \u2018true\u2019.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to do this in O(n).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>0 &lt;= n &lt;= 10000\n\nWhere &#39;n&#39; is the total number of nodes in the binary tree.\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 76,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root node of a binary tree, determine if it is a height-balanced binary tree.\n\nA height-balanced binary tree is defined as a binary tree where for every node, the absolute difference in height between its left and right subtrees is no more than 1, and both its left and right subtrees are also height-balanced.\n\nNote: The height of a tree is the maximum number of nodes in a path from the root to a leaf node. An empty tree is considered height-balanced.",
                "constraints": [
                    "0 <= n <= 10000",
                    "Where 'n' is the total number of nodes in the binary tree.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 -1 -1 -1 -1 5 -1 -1",
                        "output": "false",
                        "explanation": "The tree can be visualized as follows:\n\n    1\n   / \\\n  2   3\n /     \n4      \n/      \n5\n\nThe left subtree of the root has a height of 3 (1->2->4->5) and the right subtree has a height of 1 (1->3). The absolute difference is 2, which is greater than 1. Therefore, the tree is not height-balanced."
                    },
                    {
                        "input": "1 2 3 4 -1 -1 5 -1 -1 -1 -1",
                        "output": "true",
                        "explanation": "The tree can be visualized as follows:\n\n    1\n   / \\\n  2   3\n /     \\\n4       5\n\nThe height of left subtree of 1 is 2 and right subtree of 1 is 2. So the absolute difference is 0 <= 1, same is the case for other subtrees too.Therefore, the tree is height-balanced."
                    },
                    {
                        "input": "1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1",
                        "output": "true",
                        "explanation": "In the given binary tree, for every node, the absolute difference in height between its left and right subtrees is no more than 1. For example, at the root (1), the left subtree's height is 3, and the right subtree's height is 2. The absolute difference is |3 - 2| = 1, which satisfies the condition. Similarly, this holds true for all other nodes in the tree, making it a height-balanced binary tree."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use recursion</p>",
            "<p>Try to compute height without any other function.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}