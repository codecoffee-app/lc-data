{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8518,
            "title": "Is SubSequence",
            "titleSlug": "is-subsequence_892991",
            "content": "<h4 id=\"you-have-been-given-two-strings-str1-and-str2\">You have been given two strings \u2018STR1\u2019 and \u2018STR2\u2019.</h4>\n\n<h4 id=\"your-task-is-to-find-if-str1-is-a-subsequence-of-str2\">Your task is to find if \u2018STR1\u2019 is a subsequence of \u2018STR2\u2019.</h4>\n\n<h4 id=\"a-subsequence-of-a-string-is-a-new-string-that-can-be-derived-from-the-original-string-by-deleting-some-characters-can-be-none-without-changing-the-relative-ordering-of-other-characters\">A subsequence of a string is a new string that can be derived from the original string by deleting some characters (can be none) without changing the relative ordering of other characters.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>\u2018ACE\u2019 is a subsequence of \u2018ABCDE\u2019 because \u2018ACE\u2019 can be formed by deleting \u2018B\u2019 and \u2018D\u2019 without changing the relative order of characters. \u2018ADB\u2019 is not a subsequence of \u2018ABCDE\u2019 because we can get \u2018ABD\u2019 from \u2018ABCDE\u2019 but not \u2018ADB\u2019 and in \u2018ADB\u2019 relative order of \u2018B\u2019 and \u2018D\u2019 are different from original strings.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1.Strings \u2018STR1\u2019 and \u2018STR2\u2019 consists only of English uppercases.\n\n2.Length of string \u2018STR2\u2019 will always be greater than or equal to the length of string \u2018STR1\u2019.\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>For example, the given \u2018STR1\u2019 is \u2018BAE\u2019 and \u2018STR2\u2019 is \u2018ABADE\u2019. \nString \u2018STR1\u2019 is a subsequence of string \u2018STR2\u2019 because \u2018BAE\u2019 can be formed by deleting \u2018A\u2019 and \u2018D\u2019 from \u2018ABADE\u2019 and the relative ordering of the characters of the string \u2018ABADE\u2019 persists.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-37-5844.png\" alt=\"subsequence\"></p>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u20182*T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of each test case contains the string \u2018STR1\u2019 on a separate line denoting the subsequence that we need to find in &#39;STR2&#39; and &#39;N&#39; is the length of &#39;STR1&#39;.\n\nThe second line of each test case contains the string \u2018STR2\u2019 on a separate line denoting the string in which we need to find the subsequence and &#39;M&#39; is the length of &#39;STR2&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, print a string \u2018True\u2019 if \u2018STR1\u2019 is a subsequence of \u2018STR2\u2019 otherwise print \u2018False\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the output explicitly, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N, M &lt;= 10^4\n\nWhere N and M denote the lengths of STR1 and STR2respectively. \n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\nAE\nBADE\nAB\nAC\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>Test Case 1:\n\nString \u2018STR1\u2019 is \u2018AE\u2019 and \u2018STR2\u2019 is \u2018BADE\u2019. All possible subsequences of \u2018BADE\u2019 are-\n\n\u2018B\u2019, \u2018A\u2019, \u2018D\u2019, \u2018E\u2019, \u2018BA\u2019, \u2018BD\u2019, \u2018BE\u2019, \u2018AD\u2019, \u2018AE\u2019, \u2018DE\u2019, \u2018BAD\u2019, \u2018BAE\u2019, \u2018BDE\u2019, \u2018ADE\u2019, \u2018BADE\u2019.\nHence \u2018AE\u2019 one of the subsequences of \u2018BADE\u2019\n\n\nTest case 2:\n\nString  \u2018STR1\u2019 is \u2018AB\u2019 and \u2018STR2\u2019 is \u2018AC\u2019.\nThere is no way to get string \u2018AB\u2019 from string \u2018AC\u2019 as character \u2018B\u2019 doesn\u2019t exist in string \u2018AC\u2019.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nCB\nBCDE\nABC\nAHBDGC\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>False\nTrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 21,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, STR1 and STR2, determine if STR1 is a subsequence of STR2. A subsequence is formed by deleting characters from the original string without changing the order of the remaining characters. STR1 consists only of English uppercase letters and the length of STR2 will always be greater than or equal to the length of STR1.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N, M <= 10^4",
                    "N and M denote the lengths of STR1 and STR2 respectively."
                ],
                "testcases": [
                    {
                        "input": "AE\nBADE",
                        "output": "True",
                        "explanation": "The string 'AE' is a subsequence of 'BADE' because 'AE' can be formed by deleting 'B' and 'D' from 'BADE', preserving the order of 'A' and 'E'."
                    },
                    {
                        "input": "AB\nAC",
                        "output": "False",
                        "explanation": "The string 'AB' is not a subsequence of 'AC' because 'AC' does not contain the character 'B'."
                    },
                    {
                        "input": "CB\nBCDE",
                        "output": "False",
                        "explanation": "The string 'CB' is not a subsequence of 'BCDE' because the order of 'C' and 'B' is not preserved in 'BCDE'."
                    },
                    {
                        "input": "ABC\nAHBDGC",
                        "output": "True",
                        "explanation": "The string 'ABC' is a subsequence of 'AHBDGC'. By deleting 'H', 'D', and 'G' we can obtain 'ABC' while perserving order of the characters."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try checking for one character at a time</p>",
            "<p>Try with the help of queue</p>",
            "<p>Try in linear time, using a two-pointer approach.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}