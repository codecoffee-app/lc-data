{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7850,
            "title": "Isomorphic Trees",
            "titleSlug": "isomorphic-trees_794946",
            "content": "<h4 id=\"you-are-given-two-arbitrary-binary-trees-you-need-to-find-if-both-trees-are-isomorphic-or-not\">You are given two arbitrary binary trees. You need to find if both trees are isomorphic or not.</h4>\n\n<h4 id=\"two-binary-trees-are-said-to-be-isomorphic-with-each-other-if-one-of-the-trees-can-be-obtained-from-the-other-by-performing-the-following-operation-any-number-of-times\">Two binary trees are said to be isomorphic with each other, if one of the trees can be obtained from the other, by performing the following operation any number of times:</h4>\n\n<pre><code>Choose a node of the tree, swap its left and right subtree i.e the left subtree will become the right one, and vice versa.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. A binary tree is a tree in which each node has at most two children.   \n\n2. The left subtree of a node, is the tree in which the left child of the node is the root of that tree, and the same holds for the right subtree.\n\n3. The given operation can be performed on any node at any level of the given trees.  \n\n4. Two empty trees are also said to be isomorphic.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer t representing the number of test cases. \n\nThe first line of each test case will contain the values of the nodes of the first tree in the level order form ( -1 for NULL node).\n\nThe second line of each test case will contain the values of the nodes of the second tree in the level order form ( -1 for NULL node). Refer to the example for further clarification.\n\nExample: \nConsider the binary tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/unnamed-4-6332.png\" alt=\"abcd\"></p>\n\n<pre><code>The input of the tree depicted in the image above will be like: \n\n20 10 35 5 15 30 42 -1 -1 -1 13 -1 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 20\n\nLevel 2 :\nLeft child of 20 = 10\nRight child of 20 = 35\n\nLevel 3 :\nLeft child of 10 = 5\nRight child of 10 = 15\nLeft child of 35 = 30\nRight child of 35 = 42\n\nLevel 4 :\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 15 = null (-1)\nRight child of 15 = 13\nLeft child of 30 = null (-1)\nRight child of 30 = null (-1)\nLeft child of 42 = null (-1)\nRight child of 42 = null (-1)\n\nLevel 5 :\nLeft child of 13 = null (-1)\nRight child of 13 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return \u201cyes\u201d if both trees are isomorphic, \u201cno\u201d otherwise.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 10^3\n1 &lt;= nodeValue &lt;= 10^6\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n2 35 10 2 -1 -1 3 -1 -1 -1 -1\n2 10 35 3 -1 -1 2 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>yes \n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input1\">Explanation of the Sample Input1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-10-10-19-08-12-5152.png\" alt=\"altImage\"></p>\n\n<pre><code>The first tree can be converted into the second one using the swap operation three times as follows:\nSwap the left and right subtree of the node with the value = 2.\nSwap the left and right subtree of the node with the value = 35.\nSwap the left and right subtree of the node with the value = 10.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n2 35 10 2 3 -1 -1 -1 -1 -1 -1\n9 10 35 -1 -1 3 2 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>no\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two binary trees represented in level order, determine if they are isomorphic. Two trees are isomorphic if one can be transformed into the other by swapping the left and right subtrees of any number of nodes.",
                "constraints": [
                    "1 <= T <= 100",
                    "0 <= N <= 10^3",
                    "1 <= nodeValue <= 10^6",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "2 35 10 2 -1 -1 3 -1 -1 -1 -1\n2 10 35 3 -1 -1 2 -1 -1 -1 -1",
                        "output": "yes",
                        "explanation": "The first tree can be converted into the second one using swap operations. Swap the left and right subtrees of node 2, node 35 and node 10 in the first tree to match the second tree's structure."
                    },
                    {
                        "input": "2 35 10 2 3 -1 -1 -1 -1 -1 -1\n9 10 35 -1 -1 3 2 -1 -1 -1 -1",
                        "output": "no",
                        "explanation": "The two trees are not isomorphic. No combination of subtree swaps can transform the first tree into the second tree."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try the depth-first search on both the trees</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}