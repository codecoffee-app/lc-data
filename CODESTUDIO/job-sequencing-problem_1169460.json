{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10116,
            "title": "Job Sequencing Problem",
            "titleSlug": "job-sequencing-problem_1169460",
            "content": "<h4 id=\"you-are-given-a-nx3-2-d-array-jobs-describing-n-jobs-where-jobs-i-0-denotes-the-id-of-i-th-job-jobs-i-1-denotes-the-deadline-of-i-th-job-and-jobs-i-2-denotes-the-profit-associated-with-i-th-job\">You are given a <strong><em>&#39;Nx3&#39;</strong></em> 2-D array <strong><em>&#39;Jobs&#39;</strong></em> describing &#39;N&#39; jobs where &#39;Jobs[i][0]&#39; denotes the id of &#39;i-th&#39; job, &#39;Jobs[i][1]&#39; denotes the deadline of &#39;i-th&#39; job, and &#39;Jobs[i][2]&#39; denotes the profit associated with &#39;i-th job&#39;.</h4>\n\n<p><Br></p>\n\n<h4 id=\"you-will-make-a-particular-profit-if-you-complete-the-job-within-the-deadline-associated-with-it-each-job-takes-1-unit-of-time-to-be-completed-and-you-can-schedule-only-one-job-at-a-particular-time\">You will make a particular profit if you complete the job within the deadline associated with it. Each job takes 1 unit of time to be completed, and you can schedule only one job at a particular time.</h4>\n\n<p><Br></p>\n\n<h4 id=\"return-the-number-of-jobs-to-be-done-to-get-maximum-profit\">Return the number of jobs to be done to get maximum profit.</h4>\n\n<p><Br></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>If a particular job has a deadline &#39;x&#39;, it means that it needs to be completed at any time before &#39;x&#39;.\n\nAssume that the start time is 0.\n</code></pre>\n\n<p><Br></p>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>&#39;N&#39; = 3, Jobs = [[1, 1, 30], [2, 3, 40], [3, 2, 10]].\n\nAll the jobs have different deadlines. So we can complete all the jobs.\n\nAt time 0-1, Job 1 will complete.\nAt time 1-2, Job 3 will complete.\nAt time 2-3, Job 2 will complete.\n\nSo our answer is [3 80].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer &#39;N&#39;, denoting the number of elements of the array &#39;Jobs&#39;.\n\nNext &#39;N&#39; lines contain three integers, id, deadline, and profit of the &#39;ith&#39; job.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The only line contains the number of jobs to be done to get maximum profit and maximum profit.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>4\n1 2 30\n2 2 40\n3 1 10\n4 1 10\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2 70\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>At time 0-1, Job 1 will complete.\n\nAt time 1-2, Job 2 will complete.\n\nThe first and second jobs can be completed within the deadlines, and we earn a profit of 70 by doing so.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3\n1 1 40\n2 1 50\n3 1 60\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 60\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;N&#39; &lt;= 10^5\n1 &lt;= jobs[i][0] &lt;= &#39;N&#39;\n1 &lt;= jobs[i][1] &lt;= &#39;N&#39;\n1 &lt;= jobs[i][2] &lt;= 10^3\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 114,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of jobs, each with an ID, deadline, and profit, determine the maximum number of jobs that can be completed and the corresponding maximum profit.  Each job takes one unit of time, and only one job can be scheduled at any given time. A job must be completed before or on its deadline to earn the profit. Return a vector containing the number of jobs done and the maximum profit.",
                "constraints": [
                    "1 <= 'N' <= 10^5",
                    "1 <= jobs[i][0] <= 'N'",
                    "1 <= jobs[i][1] <= 'N'",
                    "1 <= jobs[i][2] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "N = 4, jobs = [[1, 2, 30], [2, 2, 40], [3, 1, 10], [4, 1, 10]]",
                        "output": "[2, 70]",
                        "explanation": "Job 1 (ID 1, Deadline 2, Profit 30) and Job 2 (ID 2, Deadline 2, Profit 40) can be completed.  Schedule Job 1 at time 0-1 and Job 2 at time 1-2.  Total jobs = 2, Total profit = 30 + 40 = 70."
                    },
                    {
                        "input": "N = 3, jobs = [[1, 1, 40], [2, 1, 50], [3, 1, 60]]",
                        "output": "[1, 60]",
                        "explanation": "Only one job can be completed because all have deadline 1. Choosing job 3 maximizes the profit. Total jobs = 1, Total profit = 60."
                    },
                    {
                        "input": "N = 3, jobs = [[1, 1, 30], [2, 3, 40], [3, 2, 10]]",
                        "output": "[3, 80]",
                        "explanation": "All jobs can be completed within their deadlines. Completing Job 1 at time 0-1, Job 3 at time 1-2 and Job 2 at time 2-3 maximizes profit. Total jobs = 3, Total profit = 30 + 10 + 40 = 80."
                    },
                    {
                        "input": "N = 2, jobs = [[1, 4, 70], [2, 2, 30]]",
                        "output": "[2, 100]",
                        "explanation": "Both jobs can be completed. Job 2 can be scheduled at 0-1 or 1-2. Job 1 can be scheduled at 0-1, 1-2, 2-3, or 3-4. Thus completing both will give total profit of 100 and total number of jobs is 2."
                    },
                    {
                        "input": "N = 5, jobs = [[1, 3, 20], [2, 1, 10], [3, 3, 40], [4, 2, 30], [5, 4, 10]]",
                        "output": "[4, 100]",
                        "explanation": "We can complete job 2 (profit 10) in slot 0-1, job 4 (profit 30) in slot 1-2, job 1 (profit 20) in slot 2-3, and job 3 (profit 40) in slot 3-4. This yields a total of 4 jobs and a profit of 10 + 30 + 20 + 40 = 100."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a greedy approach to complete the jobs with the maximum profit first.</p>",
            "<p>Think of a solution to optimize the time taken by the above approach by using a Set.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity : O(N *log max(N, maxDeadline))\n    Space Complexity : O(maxDeadline)\n\n    Where 'N' is size of the array \"jobs\" and\n    'maxDeadline' is the maximum among all the deadlines.\n*/\n\n#include <algorithm>\n#include <set>\n\n// Custom Comparator function to sort the jobs in the decreasing order of their profit.\nbool compare(vector<int> &job1, vector<int> &job2)\n{\n    return job1[2] > job2[2];\n}\n\nvector<int> jobScheduling(vector<vector<int>> &jobs)\n{\n\n    sort(jobs.begin(), jobs.end(), compare);\n\n    int maxProfit = 0;\n    int numberOfJobs = 0;\n    int maxDeadline = 0;\n\n    // Find the maximum deadline among all the jobs.\n    for (int i = 0; i < jobs.size(); i++)\n    {\n        maxDeadline = max(maxDeadline, jobs[i][1]);\n    }\n\n    // Create a set \"slots\".\n    set<int, greater<int>> slots;\n\n    // Insert all the elements from maxDeadline to 1 into the set.\n    for (int i = maxDeadline; i > 0; i--)\n    {\n        slots.insert(i);\n    }\n    vector<int> ans;\n\n    for (int i = 0; i < jobs.size(); i++)\n    {\n\n        // If the set is empty or the deadline is less than the last element of the set, then ignore this job.\n        if (slots.size() == 0 || jobs[i][1] < *slots.rbegin())\n        {\n            continue;\n        }\n\n        int availableSlot = *slots.lower_bound(jobs[i][1]);\n        maxProfit = maxProfit + jobs[i][2];\n        numberOfJobs += 1;\n        slots.erase(availableSlot);\n    }\n\n    ans.push_back(numberOfJobs);\n    ans.push_back(maxProfit);\n    return ans;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity : O(N *log max(N, maxDeadline))\n    Space Complexity : O(maxDeadline)\n\n    Where 'N' is size of the array \"jobs\" and\n    'maxDeadline' is the maximum among all the deadlines.\n*/\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.TreeSet;\n\npublic class Solution {\n    static class JobComparator implements Comparator<int[]> {\n        @Override\n        public int compare(int[] job1, int[] job2) {\n            if (job1[2] == job2[2]) {\n                return job2[1] - job1[1]; // Sort in non-increasing order of deadlines if profits are equal\n            }\n            return job2[2] - job1[2]; // Sort in non-increasing order of profit\n        }\n    }\n    public static int[] jobScheduling(int [][]jobs) {\n        Arrays.sort(jobs, new JobComparator());\n\n        int maxProfit = 0;\n        int numberOfJobs = 0;\n        int maxDeadline = 0;\n\n        // Find the maximum deadline among all the jobs.\n        for (int i = 0; i < jobs.length; i++) {\n            maxDeadline = Math.max(maxDeadline, jobs[i][1]);\n        }\n\n        // Create a TreeSet \"slots\" in descending order.\n        TreeSet<Integer> slots = new TreeSet<>(Collections.reverseOrder());\n\n        // Insert all the elements from maxDeadline to 1 into the set.\n        for (int i = maxDeadline; i > 0; i--) {\n            slots.add(i);\n        }\n\n        for (int i = 0; i < jobs.length; i++) {\n            // If the set is empty or the deadline is less than the last element of the set, then ignore this job.\n            if (slots.isEmpty() || jobs[i][1] < slots.last()) {\n                continue;\n            }\n\n            Integer availableSlot = slots.ceiling(jobs[i][1]);\n            if (availableSlot != null) {\n                maxProfit += jobs[i][2];\n                numberOfJobs += 1;\n                slots.remove(availableSlot);\n            }\n        }\n\n        int[] ans = {numberOfJobs, maxProfit};\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity - O(N * log max(N, maxDeadline))\n    Space Complexity - O(maxDeadline)\n\n    Where N is size of the array \"jobs\" and maxDeadline is the maximum among all the deadlines.\n'''\n\nimport bisect\n\ndef jobScheduling(jobs):\n\n    jobs.sort(key = lambda x: -x[2])\n    maxProfit = 0\n    maxDeadline = 0\n\n    # Find the maximum deadline among all the jobs.\n    for i in range(0, len(jobs)):\n        maxDeadline = max(maxDeadline, jobs[i][1])\n\n    slots = list()\n\n    # Insert all the elements from maxDeadline to 1 into the list.\n    for i in range(1, maxDeadline + 1):    \n        slots.append(i)\n\n    numberOfJobs = 0\n    maxProfit = 0\n    for i in range(len(jobs)):\n\n        # If the set is empty or the deadline is less than the last element of the set, then ignore this job.\n        if len(slots) == 0 or jobs[i][1] < slots[0]:\n            continue\n\n        availableSlot = slots[bisect.bisect(slots, jobs[i][1]) - 1]\n        maxProfit += jobs[i][2]\n        numberOfJobs += 1\n        slots.remove(availableSlot)\n\n    return [numberOfJobs, maxProfit]",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}