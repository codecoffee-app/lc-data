{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22901,
            "title": "JUMP GAME",
            "titleSlug": "jump-game_6212556",
            "content": "<h4 id=\"given-an-array-of-non-negative-integers-arr-of-length-n-you-are-initially-positioned-at-the-arrays-first-index\">Given an array of non-negative integers \u2018ARR\u2019 of length \u2018N\u2019, you are initially positioned at the array&#39;s first index.</h4>\n\n<h4 id=\"each-element-in-the-array-represents-your-maximum-jump-length-at-that-position\">Each element in the array represents your maximum jump length at that position.</h4>\n\n<h4 id=\"return-the-minimum-number-of-jumps-required-to-reach-the-last-index\">Return the minimum number of jumps required to reach the last index.</h4>\n\n<h4 id=\"if-it-is-not-possible-to-reach-the-last-index-return-1\">If it is not possible to reach the last index, return -1.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input:\n\n\u2018N\u2019 = 3\n\u2018ARR\u2019 = [ 2, 1, 1 ]\n\nThe shortest way to reach index 2 is\nIndex 0 =&gt; Index 2\nthat requires only 1 jump.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains \u2018T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains \u2018N\u2019 denoting the size of the \u2018ARR\u2019.\n\nThe second line of each test case contains &#39;N&#39; space-separated Integers denoting the \u2018ARR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, Return the answer as described in the problem statement.\n\nOutput for each test case is printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10    \n1 &lt;= N &lt;= 10000\n0 &lt;= ARR [ i ] &lt;= N\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\n2 3 1 1 4\n4\n1 1 1 1\n</code></pre>\n\n<p>Sample Output 1:</p>\n\n<pre><code>2\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>For the first test case:-\nThe optimal path is:\n0 =&gt; 1 =&gt; 4\n\nFor the second test case:-\n0 =&gt; 1 =&gt; 2 =&gt; 3\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n2 3 0 1 4\n3\n1 0 2    \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of non-negative integers 'ARR' of length 'N', where each element represents the maximum jump length from that position, find the minimum number of jumps required to reach the last index of the array. If it's impossible to reach the last index, return -1.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10000",
                    "0 <= ARR[i] <= N",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n2 3 1 1 4",
                        "output": "2",
                        "explanation": "The optimal path is: 0 -> 1 -> 4"
                    },
                    {
                        "input": "4\n1 1 1 1",
                        "output": "3",
                        "explanation": "The optimal path is: 0 -> 1 -> 2 -> 3"
                    },
                    {
                        "input": "5\n2 3 0 1 4",
                        "output": "-1",
                        "explanation": null
                    },
                    {
                        "input": "3\n1 0 2",
                        "output": "-1",
                        "explanation": null
                    },
                    {
                        "input": "3\n2 1 1",
                        "output": "1",
                        "explanation": "The shortest way to reach index 2 is Index 0 => Index 2, requiring only 1 jump."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we use dynamic programming here?</p>",
            "<p>We can use the greedy approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}