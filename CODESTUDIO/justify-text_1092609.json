{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9814,
            "title": "Justify Text",
            "titleSlug": "justify-text_1092609",
            "content": "<h4 id=\"given-a-sentence-in-the-form-of-an-array-of-words-and-an-integer-l-return-an-array-of-strings-i-e-a-paragraph-such-that-each-line-has-exactly-l-characters-and-is-left-and-right-justified\">Given a sentence(in the form of an array of words), and an integer \u2018L\u2019, return an array of strings i.e a paragraph such that each line has exactly \u2018L\u2019 characters, and is left and right justified.</h4>\n\n<h4 id=\"justification-of-text-means-that-space-is-added-between-words-so-that-both-edges-of-each-line-are-aligned-with-both-margins-the-last-line-in-the-paragraph-is-aligned-left\">Justification of text means that space is added between words so that both edges of each line are aligned with both margins. The last line in the paragraph is aligned left.</h4>\n\n<h4 id=\"one-needs-to-add-the-maximum-number-of-words-in-a-line-such-that-the-number-of-lines-is-minimised\">One needs to add the maximum number of words in a line such that the number of lines is minimised.</h4>\n\n<h4 id=\"we-can-add-whitespaces-in-a-line-so-that-each-line-has-exactly-the-same-number-of-characters-i-e-l\">We can add whitespaces in a line so that each line has exactly the same number of characters i.e L.</h4>\n\n<h4 id=\"if-the-number-of-spaces-on-a-line-does-not-divide-evenly-between-words-the-empty-slots-on-the-left-will-be-assigned-more-spaces-than-the-slots-on-the-right\">If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.</h4>\n\n<h4 id=\"for-the-last-line-of-text-it-should-be-left-justified-and-no-extra-space-is-inserted-between-words\">For the last line of text, it should be left justified and no extra space is inserted between words.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Let the given sentence be: [ \u201cwhat\u201d, \u201cmust\u201d, \u201cbe\u201d, \u201cshall\u201d, \u201cbe.\u201d]\nAnd L=12.\n\nThe justified output will be :\n\n[ \u201cwhat must be\u201d\n\u201cShall be.\u201d       ]\n\nNote that the last line is only left justified.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases. Then the test cases follow.\nThe first line of each test case contains a single integer \u2018n\u2019 denoting the number of words in the sentence.\nThe second line of each test case contains space separated strings denoting the word in the sentence. Note that no word has space in between it.\nThe third line of each test case contains the integer \u2018L\u2019 denoting the number of characters in each line in the justified output\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return an array of strings denoting the justified output of the given sentence.\nThe output for each test case is in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. You do not need to print anything; it has already been taken care of.\n2. The words do not contain whitespaces.\n3. It is guaranteed that L is always greater than the number of characters in any of the given words in the given array \u2018words\u2019\n</code></pre>\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= words.length &lt;= 300\n1 &lt;= words[i].length &lt;= 20\nwords[i] consists of only English letters and symbols.\n1 &lt;=L &lt;= 100\nwords[i].length &lt;= L\n\n\nWhere \u2018T\u2019 is the number of test cases, words.length denotes the number of words in the array and words[i].length denotes the number of alphabets in each word\nL denotes the number of character in each line of the result.\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n7\nThis is an example of text justification.\n16\n3\nI like apple\n6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>This    is    an\nexample  of text\njustification. \nI like\napple \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, \nWe have 7 words in the sentence and we can have 16 characters in each line. So we will have the output as given above.\nIn each line we need 16 characters, we see that the first 3 words have 4+2+2 =8 characters and add 2 gaps. I.e 10 characters. now if we take one more word i.e example, we exceed the total number of characters in the line so we can take only 3 characters. We have 8 characters and 8 spaces. Which need to be distributed between 2 gaps. So each gap will have 4 spaces.\n\nFor the second test case, \nWe have 3 words in the sentence and 6 characters in each line. So we will have output as given above\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n9\nWhen there is a will there is a way\n10\n4\nCoding ninjas is great\n10\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code> When there\n is  a will\n there is a\n way\n Coding    \n ninjas  is\n great    \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 13,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of words `words` and a maximum width `maxWidth`, format the text such that each line has exactly `maxWidth` characters and is fully (left and right) justified. Pack as many words as possible in each line. Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right. The last line of text should be left-justified, and no extra space is inserted between words in the last line.",
                "constraints": [
                    "1 <= words.length <= 300",
                    "1 <= words[i].length <= 20",
                    "words[i] consists of only English letters and symbols.",
                    "1 <= maxWidth <= 100",
                    "words[i].length <= maxWidth"
                ],
                "testcases": [
                    {
                        "input": "words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16",
                        "output": "[\"This    is    an\", \"example  of text\", \"justification. \"]",
                        "explanation": "The first line contains \"This\", \"is\", and \"an\".  The total length is 4 + 2 + 2 = 8.  There are 16 - 8 = 8 spaces to distribute among 2 gaps.  So each gap has 4 spaces.\nThe second line contains \"example\", \"of\", and \"text\". The total length is 7 + 2 + 4 = 13.  There are 16 - 13 = 3 spaces to distribute among 2 gaps.  The left gap has 2 spaces and the right gap has 1 space.\nThe last line is \"justification.\" which is left-justified."
                    },
                    {
                        "input": "words = [\"What\", \"must\", \"be\", \"shall\", \"be.\"], maxWidth = 12",
                        "output": "[\"What must be\", \"Shall be.   \"]",
                        "explanation": "The first line includes 'What', 'must' and 'be' which takes 4 + 4 + 2 = 10 characters + 2 spaces = 12 characters.\nThe second line is 'Shall be.' which is left justified."
                    },
                    {
                        "input": "words = [\"I\",\"like\",\"apple\"], maxWidth = 6",
                        "output": "[\"I like\", \"apple \"]",
                        "explanation": "The first line is 'I like' and includes 1 space to fill the required 6 characters.\nThe second line is 'apple' which is left justified with one trailing space to reach 6 characters."
                    },
                    {
                        "input": "words = [\"When\", \"there\", \"is\", \"a\", \"will\", \"there\", \"is\", \"a\", \"way\"], maxWidth = 10",
                        "output": "[\"When there\", \"is  a will\", \"there is a\", \"way      \"]",
                        "explanation": "Demonstrates the distribution of spaces and the left justification of the last line."
                    },
                    {
                        "input": "words = [\"Coding\", \"ninjas\", \"is\", \"great\"], maxWidth = 10",
                        "output": "[\"Coding    \", \"ninjas  is\", \"great     \"]",
                        "explanation": "Demonstrates scenario of having fewer words than can fit on a line, and justifying across the entire line."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to put as many words as possible in a line and then insert spaces at appropriate places.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}