{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9814,
            "title": "Justify Text",
            "titleSlug": "justify-text_1092609",
            "content": "<h4 id=\"given-a-sentence-in-the-form-of-an-array-of-words-and-an-integer-l-return-an-array-of-strings-i-e-a-paragraph-such-that-each-line-has-exactly-l-characters-and-is-left-and-right-justified\">Given a sentence(in the form of an array of words), and an integer \u2018L\u2019, return an array of strings i.e a paragraph such that each line has exactly \u2018L\u2019 characters, and is left and right justified.</h4>\n\n<h4 id=\"justification-of-text-means-that-space-is-added-between-words-so-that-both-edges-of-each-line-are-aligned-with-both-margins-the-last-line-in-the-paragraph-is-aligned-left\">Justification of text means that space is added between words so that both edges of each line are aligned with both margins. The last line in the paragraph is aligned left.</h4>\n\n<h4 id=\"one-needs-to-add-the-maximum-number-of-words-in-a-line-such-that-the-number-of-lines-is-minimised\">One needs to add the maximum number of words in a line such that the number of lines is minimised.</h4>\n\n<h4 id=\"we-can-add-whitespaces-in-a-line-so-that-each-line-has-exactly-the-same-number-of-characters-i-e-l\">We can add whitespaces in a line so that each line has exactly the same number of characters i.e L.</h4>\n\n<h4 id=\"if-the-number-of-spaces-on-a-line-does-not-divide-evenly-between-words-the-empty-slots-on-the-left-will-be-assigned-more-spaces-than-the-slots-on-the-right\">If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.</h4>\n\n<h4 id=\"for-the-last-line-of-text-it-should-be-left-justified-and-no-extra-space-is-inserted-between-words\">For the last line of text, it should be left justified and no extra space is inserted between words.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Let the given sentence be: [ \u201cwhat\u201d, \u201cmust\u201d, \u201cbe\u201d, \u201cshall\u201d, \u201cbe.\u201d]\nAnd L=12.\n\nThe justified output will be :\n\n[ \u201cwhat must be\u201d\n\u201cShall be.\u201d       ]\n\nNote that the last line is only left justified.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases. Then the test cases follow.\nThe first line of each test case contains a single integer \u2018n\u2019 denoting the number of words in the sentence.\nThe second line of each test case contains space separated strings denoting the word in the sentence. Note that no word has space in between it.\nThe third line of each test case contains the integer \u2018L\u2019 denoting the number of characters in each line in the justified output\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return an array of strings denoting the justified output of the given sentence.\nThe output for each test case is in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. You do not need to print anything; it has already been taken care of.\n2. The words do not contain whitespaces.\n3. It is guaranteed that L is always greater than the number of characters in any of the given words in the given array \u2018words\u2019\n</code></pre>\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= words.length &lt;= 300\n1 &lt;= words[i].length &lt;= 20\nwords[i] consists of only English letters and symbols.\n1 &lt;=L &lt;= 100\nwords[i].length &lt;= L\n\n\nWhere \u2018T\u2019 is the number of test cases, words.length denotes the number of words in the array and words[i].length denotes the number of alphabets in each word\nL denotes the number of character in each line of the result.\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n7\nThis is an example of text justification.\n16\n3\nI like apple\n6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>This    is    an\nexample  of text\njustification. \nI like\napple \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, \nWe have 7 words in the sentence and we can have 16 characters in each line. So we will have the output as given above.\nIn each line we need 16 characters, we see that the first 3 words have 4+2+2 =8 characters and add 2 gaps. I.e 10 characters. now if we take one more word i.e example, we exceed the total number of characters in the line so we can take only 3 characters. We have 8 characters and 8 spaces. Which need to be distributed between 2 gaps. So each gap will have 4 spaces.\n\nFor the second test case, \nWe have 3 words in the sentence and 6 characters in each line. So we will have output as given above\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n9\nWhen there is a will there is a way\n10\n4\nCoding ninjas is great\n10\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code> When there\n is  a will\n there is a\n way\n Coding    \n ninjas  is\n great    \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 13,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sentence represented as an array of words and an integer 'L', construct a paragraph where each line has exactly 'L' characters and is left and right justified, except for the last line which is left-justified.\n\nJustification involves adding spaces between words to align both edges of each line. The goal is to minimize the number of lines by fitting as many words as possible on each line.\n\nIf the spaces on a line can't be divided evenly between words, the left slots should receive more spaces than the right. For the last line, no extra space is inserted between words, and it should be left-justified.",
                "constraints": [
                    "1 <= T <= 100 (T is the number of test cases)",
                    "1 <= words.length <= 300",
                    "1 <= words[i].length <= 20",
                    "words[i] consists of only English letters and symbols.",
                    "1 <= L <= 100",
                    "words[i].length <= L",
                    "Words do not contain whitespaces.",
                    "It is guaranteed that L is always greater than the number of characters in any of the given words in the given array \u2018words\u2019"
                ],
                "testcases": [
                    {
                        "input": "7\nThis is an example of text justification.\n16",
                        "output": "This    is    an\nexample  of text\njustification.",
                        "explanation": "The first line can accommodate 'This', 'is', and 'an' with spaces. The length of these words including a single space between each will be 4 + 1 + 2 + 1 + 2 = 10. We need 6 more spaces to make the line 16 characters long. These spaces are distributed as evenly as possible.  The next line can fit 'example', 'of', and 'text'.  The final line is 'justification.', which is left-justified since it's the last line."
                    },
                    {
                        "input": "3\nI like apple\n6",
                        "output": "I like\napple",
                        "explanation": null
                    },
                    {
                        "input": "9\nWhen there is a will there is a way\n10",
                        "output": "When there\nis  a will\nthere is a\nway",
                        "explanation": null
                    },
                    {
                        "input": "4\nCoding ninjas is great\n10",
                        "output": "Coding    \nninjas  is\ngreat",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to put as many words as possible in a line and then insert spaces at appropriate places.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}