{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10996,
            "title": "K Closest Values",
            "titleSlug": "k-closest-values_1281852",
            "content": "<h4 id=\"you-have-been-given-a-binary-search-tree-of-n-nodes-a-real-number-target-and-an-integer-k-your-task-is-to-find-exactly-k-values-from-the-given-binary-search-tree-that-are-closest-having-the-least-absolute-difference-to-target\">You have been given a Binary Search Tree of \u2018N\u2019 nodes, a real number \u2018target\u2019, and an integer \u2018K\u2019. Your task is to find exactly \u2018K\u2019 values from the given binary search tree that are closest(having the least absolute difference) to \u2018target\u2019.</h4>\n\n<h4 id=\"a-sample-binary-search-tree\">A sample binary search tree</h4>\n\n<p><img src=\"https://files.codingninjas.in/image1-8621.png\" alt=\"1\"></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>A Binary Search Tree is a binary tree data structure with the following properties:\n\nThe left subtree of any node contains nodes with a value less than the node\u2019s value.\n\nThe right subtree of any node contains nodes with a value equal to or greater than the node\u2019s value.\n\nRight, and left subtrees are also binary search trees.\n\nIt is guaranteed that,\nValues of all nodes in the given binary search tree are distinct positive integers.\n\nThere will be only one unique set of \u2018K\u2019 values in the binary search tree that is closest to the \u2018target\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains a single real number, \u2018target\u2019 denoting the target value given in the problem.\n\nThe second line of each test case contains a single integer \u2018K\u2019, denoting the number of values that are to be selected from the binary search tree.\n\nThe third line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree is depicted in the below image. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image1-8621.png\" alt=\"1\"></p>\n\n<pre><code>25\n20 30\n15 23 28 35\n-1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 25\n\nLevel 2 :\nLeft child of 25 = 20\nRight child of 25 = 30\n\nLevel 3 :\nLeft child of 20 = 15\nRight child of 20 = 23\nLeft child of 30 = 28\nRight child of 30 = 35\n\n\nLevel 4 :\nLeft child of 15 = null (-1)\nRight child of 15 = null (-1)\nLeft child of 23 = null (-1)\nRight child of 23 = null (-1)\nLeft child of 28 = null (-1)\nRight child of 28 = null (-1)\nLeft child of 35 = null (-1)\nRight child of 35 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n25 20 30 15 23 28 35 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print \u2018K\u2019 space-separated integer values from the given binary search tree that is closest to the \u2018target\u2019 in sorted order.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 100\n1 &lt;= data &lt;= 10 ^ 9\n0 &lt;= K &lt;= N\n-10 ^ 9 &lt;= target &lt;= 10 ^ 9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3.1\n2\n3 2 4 1 -1 -1 5 -1 -1 -1 -1\n5.55\n3\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3 4\n5 6 7\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case, the given binary search tree is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image2-8620.png\" alt=\"1\">    </p>\n\n<pre><code>Values of Nodes in the binary search tree = [ 1, 2, 3, 4, 5 ]\n\nThe absolute difference of each value with 3.1 is [ 2.1, 1.1, 0.1, 0.9, 1.9 ] respectively.\n\nTherefore two nodes that are closest (having least absolute difference) to 3.1 are [3, 4]\n\nFor the second test case, the given binary search tree is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image3-8619.png\" alt=\"1\"></p>\n\n<pre><code>Values of Nodes in the binary search tree = [ 1, 2, 3, 4, 5, 6, 7 ]\n\nThe absolute difference of each value with 5.55 is [ 4.55, 3.55, 2.55, 1.55, 0.55, 0.45, 1.45 ] respectively.\n\nTherefore three nodes that are closest (having least absolute difference) to 5.55 are [ 5, 6,  7 ]\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n100\n5\n30 19 40 -1 25 35 55 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>25 30 35 40 55\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) of 'N' nodes, a real number 'target', and an integer 'K', the task is to find exactly 'K' values from the BST that are closest to the 'target' value, having the least absolute difference.",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= N <= 100 (Number of nodes in the BST)",
                    "1 <= data <= 10^9 (Value of each node)",
                    "0 <= K <= N (Number of values to find)",
                    "-10^9 <= target <= 10^9 (The target value)",
                    "Values of all nodes in the given BST are distinct positive integers.",
                    "It is guaranteed that there will be only one unique set of 'K' values in the BST that is closest to the 'target'.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3.1\n2\n3 2 4 1 -1 -1 5 -1 -1 -1 -1",
                        "output": "3 4",
                        "explanation": "The BST contains values [1, 2, 3, 4, 5]. The absolute differences between these values and the target 3.1 are [2.1, 1.1, 0.1, 0.9, 1.9]. The two smallest differences correspond to the values 3 and 4."
                    },
                    {
                        "input": "5.55\n3\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "5 6 7",
                        "explanation": "The BST contains values [1, 2, 3, 4, 5, 6, 7]. The absolute differences between these values and the target 5.55 are [4.55, 3.55, 2.55, 1.55, 0.55, 0.45, 1.45]. The three smallest differences correspond to the values 5, 6, and 7."
                    },
                    {
                        "input": "100\n5\n30 19 40 -1 25 35 55 -1 -1 -1 -1 -1 -1",
                        "output": "25 30 35 40 55",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For every \u2018i\u2019 from 1 to \u2018K\u2019 inclusive, traverse the given binary search tree and find the i-th closest value from \u2018target\u2019.</p>",
            "<p>Insert all the values present in the given binary search tree into an array of integers. Can you find \u2018K\u2019 closest values from \u2018target\u2019 in this array?</p>",
            "<p>Try to use a max - heap data structure to keep track of the \u2018K\u2019 closest values from \u2018target\u2019.</p>",
            "<p>Do an inorder traversal of the binary search tree and use a Double-ended queue to keep track of the \u2018K\u2019 closest values from \u2018target\u2019.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}