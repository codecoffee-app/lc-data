{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9544,
            "title": "K largest element ",
            "titleSlug": "k-largest-element_1062624",
            "content": "<h4 id=\"you-are-given-an-unsorted-array-containing-n-integers-you-need-to-find-k-largest-elements-from-the-given-array-also-you-need-to-return-the-elements-in-non-decreasing-order\">You are given an unsorted array containing \u2018N\u2019 integers. You need to find \u2018K\u2019 largest elements from the given array. Also, you need to return the elements in non-decreasing order.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains two space-separated positive integers \u2018N\u2019 and \u2018K\u2019 denoting the number of the elements present in the array and count of the largest elements you need to return as the answer respectively.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output of each test case should contain  \u2018K\u2019 largest elements in the array in non-decreasing order.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve this in less than O(N*log(N)) time complexity?\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^4  \n1&lt;= K &lt;= N  \n-10^9 &lt;= ARR[i] &lt;= 10^9\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the size of the array, \u2018K\u2019 is the number of elements you need to return as an answer and ARR[i] is the size of the array of elements.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 2\n3 4 2 1\n5 1\n2 2 3 3 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3 4\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>Test case 1:\nIf we sort the array then it will look like: [1, 2, 3, 4]. The 2 largest elements will be [3, 4].\n\nTest case 2:\nIf we sort the array then it will look like: [1, 2, 2, 3, 3]. Then the largest element will be [3].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 5\n0 10 1 2 2\n6 2\n-2 12 -1 1 20 1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0 1 2 2 10\n12 20\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 320,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an unsorted array containing \u2018N\u2019 integers.  Your task is to find the \u2018K\u2019 largest elements from the array and return them in non-decreasing order.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^4",
                    "1 <= K <= N",
                    "-10^9 <= ARR[i] <= 10^9",
                    "Where \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the size of the array, \u2018K\u2019 is the number of elements you need to return as an answer and ARR[i] is the size of the array of elements.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 2\n3 4 2 1",
                        "output": "3 4",
                        "explanation": "The two largest elements in the array [3, 4, 2, 1] are 3 and 4.  Arranging them in non-decreasing order gives [3, 4]."
                    },
                    {
                        "input": "5 1\n2 2 3 3 1",
                        "output": "3",
                        "explanation": "The largest element in the array [2, 2, 3, 3, 1] is 3."
                    },
                    {
                        "input": "5 5\n0 10 1 2 2",
                        "output": "0 1 2 2 10",
                        "explanation": "The 5 largest elements in the array [0, 10, 1, 2, 2] are 0, 10, 1, 2 and 2. Arranging them in non-decreasing order gives [0, 1, 2, 2, 10]."
                    },
                    {
                        "input": "6 2\n-2 12 -1 1 20 1",
                        "output": "12 20",
                        "explanation": "The two largest elements in the array [-2, 12, -1, 1, 20, 1] are 12 and 20. Arranging them in non-decreasing order gives [12, 20]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use some modified sorting algorithm.</p>",
            "<p>Sort the whole array using some efficient algorithm.</p>",
            "<p>Can you think of some data structure that can reduce the time complexity?</p>",
            "<p>Modify the quicksort algorithm to further reduce the time complexity.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n\tTime Complexity: O(N + K*log(K))\r\n\tSpace complexity: O(N)\r\n\r\n\tWhere N is the number of elements present in the array and K is the count of the largest elements.\r\n\r\n*/\r\n\r\n#include <algorithm>\r\n#include <queue>\r\n\r\n// Function to swap integers present at ith and jth index\r\nvoid swap(vector<int> &arr, int i, int j) \r\n{\r\n    int tmp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = tmp;\r\n}\r\n\r\n// This function will put Kth largest element at its correct position similar to quicksort partition algorithm\r\nint quickSelect(vector<int> &arr, int low, int high, int k) \r\n{\r\n    int pivot = low;\r\n\r\n    /*\r\n           Use quick sort's idea\r\n           Put the numbers that are less than equal to the pivot to the left\r\n           And put the numbers that are greater than pivot to the right\r\n    */\r\n\r\n    for (int j = low; j < high; j++) \r\n    {\r\n        if (arr[j] <= arr[high]) \r\n        {\r\n            swap(arr, pivot++, j);\r\n        }\r\n    }\r\n    \r\n    swap(arr, pivot, high);\r\n\r\n    // Count the numbers that are greater then pivot from high\r\n    int count = high - pivot + 1;\r\n    \r\n    // If pivot is the Kth largest then return it\r\n    if (count == k) \r\n    {\r\n        return arr[pivot];\r\n    }\r\n    \r\n    // If pivot is too small, so Kth largest must be on the right\r\n    if (count > k) \r\n    {\r\n        return quickSelect(arr, pivot + 1, high, k);\r\n    } \r\n    else\r\n    {\r\n        // If pivot is too big, so Kth larges must be on the left\r\n        return quickSelect(arr, low, pivot - 1, k - count);\r\n    }\r\n}\r\n\r\nvector<int> Klargest(vector<int> &arr, int k, int n)\r\n{\r\n    // It will store K largest element\r\n    vector<int> answer(k);\r\n\r\n    // Put the Kth largest at its correct position and partition the array around it\r\n    quickSelect(arr, 0, n - 1, k);\r\n\r\n    // Putting K largest element in answer\r\n    for (int i = n - k, j = 0; j < k; ++i, ++j)\r\n    {\r\n        answer[j] = arr[i];\r\n    }\r\n    \r\n    // But these integers are present in random order so we need to sort them\r\n    sort(answer.begin(), answer.end());\r\n\r\n    return answer;\r\n}\r\n\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n\tTime Complexity: O(N + K*log(K))\r\n\tSpace complexity: O(N)\r\n\r\n\tWhere N is the number of elements present in the array and K is the count of the largest elements.\r\n\r\n*/\r\n\r\nimport java.util.PriorityQueue;\r\n\r\npublic class Solution \r\n{\r\n    public static int[] Klargest(int[] arr, int k, int n) \r\n    {\r\n        // It will store K largest element\r\n        int[] answer = new int[k];\r\n\r\n        // Put the Kth largest at its correct position and partition the array around it\r\n        quickSelect(arr, 0, n - 1, k);\r\n\r\n        // Putting K largest element in answer\r\n        for (int i = n - k, j = 0; j < k; ++i, ++j) \r\n        {\r\n            answer[j] = arr[i];\r\n        }\r\n        \r\n        // But these integers are present in random order so we need to sort them\r\n        sort(answer);\r\n\r\n        return answer;\r\n    }\r\n\r\n    // This function will sort the array using Heap sort\r\n    public static void sort(int[] arr) \r\n    {\r\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\r\n        \r\n        for (int i = 0; i < arr.length; i++)\r\n        {\r\n            pq.add(arr[i]);\r\n        }\r\n        \r\n        for (int i = 0; i < arr.length; i++) \r\n        {\r\n            arr[i] = pq.poll();\r\n        }\r\n    }\r\n\r\n    // This function will put Kth largest element at its correct position similar to quicksort partition algorithm\r\n    static int quickSelect(int[] arr, int low, int high, int k) \r\n    {\r\n        int pivot = low;\r\n\r\n        /*\r\n           Use quick sort's idea\r\n           Put the numbers that are less than equal to the pivot to the left\r\n           And put the numbers that are greater than pivot to the right\r\n         */\r\n\r\n        for (int j = low; j < high; j++) \r\n        {\r\n            if (arr[j] <= arr[high]) \r\n            {\r\n                swap(arr, pivot++, j);\r\n            }\r\n        }\r\n        \r\n        swap(arr, pivot, high);\r\n\r\n        // Count the numbers that are greater then pivot from high\r\n        int count = high - pivot + 1;\r\n        \r\n        // If pivot is the Kth largest then return it\r\n        if (count == k) \r\n        {\r\n            return arr[pivot];\r\n        }\r\n        \r\n        // If pivot is too small, so Kth largest must be on the right\r\n        if (count > k) \r\n        {\r\n            return quickSelect(arr, pivot + 1, high, k);\r\n        } \r\n        else \r\n        {\r\n            // If pivot is too big, so Kth larges must be on the left\r\n            return quickSelect(arr, low, pivot - 1, k - count);\r\n        }\r\n    }\r\n\r\n    // Function to swap integers present at ith and jth index\r\n    public static void swap(int[] arr, int i, int j) \r\n    {\r\n        int tmp = arr[i];\r\n        arr[i] = arr[j];\r\n        arr[j] = tmp;\r\n    }\r\n}\r\n\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n\tTime Complexity: O(N + K*log(K))\r\n\tSpace complexity: O(N)\r\n\r\n\tWhere N is the number of elements present in the array and K is the count of the largest elements.\r\n\r\n'''\r\n\r\n# Function to swap integers present at ith and jth index\r\ndef swap(arr, i, j):\r\n\r\n    tmp = arr[i]\r\n    arr[i] = arr[j]\r\n    arr[j] = tmp\r\n\r\n\r\n# This function will put Kth largest element at its correct position similar to quicksort partition algorithm\r\ndef quickSelect(arr, low, high, k):\r\n\r\n    pivot = low\r\n\r\n    '''\r\n           Use quick sort's idea\r\n           Put the numbers that are less than equal to the pivot to the left\r\n           And put the numbers that are greater than pivot to the right\r\n    '''\r\n\r\n    for j in range(low, high):\r\n\r\n        if (arr[j] <= arr[high]):\r\n            swap(arr, pivot, j)\r\n            pivot += 1\r\n\r\n    swap(arr, pivot, high)\r\n\r\n    # Count the numbers that are greater then pivot from high\r\n    count = high - pivot + 1\r\n\r\n    # If pivot is the Kth largest then return it\r\n    if (count == k):\r\n        return arr[pivot]\r\n\r\n    # If pivot is too small, so Kth largest must be on the right\r\n    if (count > k):\r\n        return quickSelect(arr, pivot + 1, high, k)\r\n    \r\n    else:\r\n        \r\n        # If pivot is too big, so Kth larges must be on the left\r\n        return quickSelect(arr, low, pivot - 1, k - count)\r\n\r\n\r\ndef Klargest(arr, k, n):\r\n    \r\n    # It will store K largest element\r\n    answer=[0 for i in range(k)]\r\n\r\n    # Put the Kth largest at its correct position and partition the array around it\r\n    quickSelect(arr, 0, n - 1, k)\r\n\r\n    # Putting K largest element in answer\r\n    j=0\r\n    \r\n    for i in range(n - k, n):\r\n    \r\n        answer[j] = arr[i]\r\n        j += 1\r\n    \r\n    # But these integers are present in random order so we need to sort them\r\n    answer.sort()\r\n\r\n    return answer\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}