{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15294,
            "title": "K-Palindrome",
            "titleSlug": "k-palindrome_2434296",
            "content": "<h4 id=\"you-are-given-a-string-str-you-need-to-find-out-whether-the-string-is-a-k-palindrome-or-not\">You are given a string \u2018str\u2019. You need to find out whether the string is a K-Palindrome or not.</h4>\n\n<h4 id=\"a-string-is-called-a-k-palindrome-if-after-removing-at-most-k-characters-from-the-string-it-can-be-transformed-into-a-palindrome\">A string is called a K-Palindrome if, after removing at most \u2018k\u2019 characters from the string, it can be Transformed into a Palindrome.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>str = \u201cababba\u201d, k = 3.\n\nIn this example, If we remove one \u2018b\u2019 from the 3rd position, then the final string will be \u201cababa\u201d which is a palindrome.\n\nHence the answer will be True. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains a single integer \u2018k\u2019, denoting the maximum number of characters you can remove from the string.\n\nThe second line of the test case contains the string \u201cstr\u201d.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print whether the following string is a K-Palindrome or not.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10    \n1 &lt;= |S| &lt;= 1000\n1 &lt;= k &lt;= 30\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1\nabba\n2\nabcca\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>True\nTrue\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>In the first test case, We can make the string \u201cabba\u201d a palindrome by removing \u2018b\u2019 at position 2 or 3. \nHence the answer is True.\n\nIn the second test case, We can make the string palindrome by removing either 1 \u2018b\u2019 or two \u2018c\u2019.\nHence the answer is True.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1\nabc\n1\nabb\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>False\nTrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'str' and an integer 'k', determine if 'str' can be transformed into a palindrome by removing at most 'k' characters. A K-Palindrome is a string that becomes a palindrome after removing no more than 'k' characters.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |S| <= 1000",
                    "1 <= k <= 30",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\nabba",
                        "output": "True",
                        "explanation": "The string 'abba' is already a palindrome, so no characters need to be removed. Therefore, it's a K-Palindrome for k=1."
                    },
                    {
                        "input": "2\nabcca",
                        "output": "True",
                        "explanation": "By removing the character 'b' from 'abcca', we obtain 'acca', which is a palindrome. This requires removing 1 character, which is less than or equal to k=2."
                    },
                    {
                        "input": "1\nabc",
                        "output": "False",
                        "explanation": "The string 'abc' requires removing at least 2 characters to become a palindrome (e.g., removing 'b' and 'c' to get 'a', or 'a' and 'c' to get 'b').  Since k=1, it is not a K-Palindrome."
                    },
                    {
                        "input": "1\nabb",
                        "output": "True",
                        "explanation": "The string 'abb' can be transformed into a palindrome ('b') by removing 'a'. This requires removing 1 character, which is less than or equal to k=1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Make a copy of string \u201cstr\u201d, reverse it, and check how many characters do not match the original string.</p>",
            "<p>There can be many repetitive calculations in the recursive solution, which can be skipped by storing them while computing for the first time</p>",
            "<p>Try to think of optimising the solution in terms of K.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}