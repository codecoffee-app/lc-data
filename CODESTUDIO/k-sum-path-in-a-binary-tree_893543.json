{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8787,
            "title": "k-sum path in a binary tree",
            "titleSlug": "k-sum-path-in-a-binary-tree_893543",
            "content": "<h4 id=\"you-are-given-a-binary-tree-in-which-each-node-contains-an-integer-value-and-a-number-k-your-task-is-to-print-every-path-of-the-binary-tree-with-the-sum-of-nodes-in-the-path-as-k\">You are given a binary tree in which each node contains an integer value and a number \u2018K\u2019. Your task is to print every path of the binary tree with the sum of nodes in the path as \u2018K\u2019.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).\n\n2. Output the paths in the order in which they exist in the tree from left to right. Example: In the below example, path {1,3} is followed by {3,1} and so on.\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>For K = 4 and tree given below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-10-6111.jpg\" alt=\"alt text\"></p>\n\n<pre><code>The possible paths are:\n1 3\n3 1\n-1 4 1\n4 \n-1 5\n\nThe sum of values of nodes of each of the above-mentioned paths gives a sum of 4.\n</code></pre>\n\n<h5 id=\"input-format\">Input format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u2018T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of input contains the elements of the tree in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nThe second line of each test case contains an integer \u2018K\u2019 denoting the sum.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code> 1\n 2 3\n 4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<p>Explanation :\n    Level 1 :\n    The root node of the tree is 1</p>\n\n<pre><code>Level 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>The output of each test case prints all the paths of the binary tree with the sum of nodes in the path as \u2018K&#39; in the order in which they exist in the tree from left to right.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function and return the answer.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^2\n-10^9 &lt;= K &lt;= 10^9\n-10^7 &lt;= DATA &lt;= 10^7\n\nWhere \u2018N\u2019 is the number of nodes in the tree, \u2018K\u2019 denotes the sum, and &#39;DATA&#39; denotes data contained in the node of a binary tree.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n10 5 -3 3 2 -1 11 3 -2 -1 1 -1 -1 -1 -1 -1 -1 -1 -1\n8\n1 3 -2 2 1 4 5 -1 -1 1 -1 1 2 -1 6 -1 -1 -1 -1 -1 -1 -1 -1 \n5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>5 3    5 2 1    -3 11\n3 2    3 1 1    1 3 1   4 1   1 -2 4 2     5   \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>Test case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-11-6112.jpg\" alt=\"alt text\"></p>\n\n<pre><code>Clearly, the output contains the values of the nodes which sum up to 8 in the order in which they exist in the tree from left to right are:\n\nPath 1: 5 3\nStarting from node 5, we traverse to its left child. The sum of nodes is equal to 5 + 3 = 8, which is equal to &#39;K&#39;.\n\nPath 2: 5 2 1\nStarting from node 5, we traverse to its right child which is 2, and then further to its right child which is 1. The sum of nodes is equal to 5 + 2 + 1= 8, which is equal to k.\n\nPath 3: -3 11\nStarting from node -3, we traverse to its right child. The sum of nodes is equal to -3 + 11= 8, which is equal to &#39;K&#39;.\n\n\nTest case 2:\nThe sum of values of the nodes which sum to 5 are:\n3 2\n3 1 1 \n1 3 1 \n4 1\n1 -1 4 1\n5\n1 -1 5\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 3 4 1 2 -1 6 -1 -1 -1 -1 -1 -1 \n5\n1 -2 2 5 3 -1 1 -1 -1 3 -1 -1 -1 -1 -1\n4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 3 1   3 2   1 4\n1 -2 5  -2 3 3    1 2 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree where each node contains an integer value, find and print all paths in the tree whose sum equals a given target value 'K'. The path must travel downwards from parent to child nodes and does not need to start at the root or end at a leaf node.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 100",
                    "-10^9 <= K <= 10^9",
                    "-10^7 <= DATA <= 10^7",
                    "Where \u2018N\u2019 is the number of nodes in the tree, \u2018K\u2019 denotes the sum, and 'DATA' denotes data contained in the node of a binary tree.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "10 5 -3 3 2 -1 11 3 -2 -1 1 -1 -1 -1 -1 -1 -1 -1 -1\n8",
                        "output": "5 3    5 2 1    -3 11",
                        "explanation": "Path 1: 5 3 (5 + 3 = 8)\nPath 2: 5 2 1 (5 + 2 + 1 = 8)\nPath 3: -3 11 (-3 + 11 = 8)"
                    },
                    {
                        "input": "1 3 -2 2 1 4 5 -1 -1 1 -1 1 2 -1 6 -1 -1 -1 -1 -1 -1 -1 -1\n5",
                        "output": "3 2    3 1 1    1 3 1   4 1   1 -2 4 2     5   ",
                        "explanation": "The paths that sum to 5 are: 3 2, 3 1 1, 1 3 1, 4 1, 1 -2 4 2, and 5."
                    },
                    {
                        "input": "1 3 4 1 2 -1 6 -1 -1 -1 -1 -1 -1 \n5",
                        "output": "1 3 1   3 2   1 4",
                        "explanation": null
                    },
                    {
                        "input": "1 -2 2 5 3 -1 1 -1 -1 3 -1 -1 -1 -1 -1\n4",
                        "output": "1 -2 5  -2 3 3    1 2 1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>&nbsp;</strong>Traverse the tree and store the required paths simultaneously.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}