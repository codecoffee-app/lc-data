{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10080,
            "title": "K-th element of 2 sorted array",
            "titleSlug": "k-th-element-of-2-sorted-array_1164159",
            "content": "<h4 id=\"youre-given-two-sorted-arrays-arr1-and-arr2-of-size-n-and-m-respectively-and-an-element-k\">You&#39;re given two sorted arrays <strong><em>&#39;arr1&#39;</strong></em> and <strong><em>&#39;arr2&#39;</strong></em> of size <strong><em>&#39;n&#39;</strong></em> and <strong><em>&#39;m&#39;</strong></em> respectively and an element <strong><em>&#39;k&#39;</strong></em>.</h4>\n\n<p><br></p>\n\n<h4 id=\"find-the-element-that-would-be-at-the-kth-position-of-the-combined-sorted-array\">Find the element that would be at the &#39;kth&#39; position of the combined sorted array.</h4>\n\n<p><br></p>\n\n<h4 id=\"position-k-is-given-according-to-1-based-indexing-but-arrays-arr1-and-arr2-are-using-0-based-indexing\">Position &#39;k&#39; is given according to 1 - based indexing, but arrays &#39;arr1&#39; and &#39;arr2&#39; are using 0 - based indexing.</h4>\n\n<p><br></p>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>Input: &#39;arr1&#39; = [2, 3, 45], &#39;arr2&#39; = [4, 6, 7, 8] and &#39;k&#39; = 4\nOutput: 6\nExplanation: The merged array will be [2, 3, 4, 6, 7, 8, 45]. The element at position &#39;4&#39; of this array is 6. Hence we return 6.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains \u2018n\u2019 denoting the number of elements in \u2018arr1\u2019.\n\nThe second line contains \u2018n\u2019 space-separated integers denoting the elements of \u2018arr1\u2019.\n\nThe third line contains \u2018m\u2019 denoting the number of elements in \u2018arr2\u2019.\n\nThe fourth line contains \u2018m\u2019 space-separated integers denoting the elements of \u2018arr2\u2019.\n\nThe fifth line contains an integer \u2018k\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Return the &#39;kth&#39; element of the combined sorted array.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>5\n2 3 6 7 9\n4\n1 4 8 10\n4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>The merged array will be: [1, 2, 3, 4, 6, 7, 8, 9, 10]\n\nThe element at position &#39;4&#39; is 4 so we return 4.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5\n1 2 3 5 6\n5\n4 7 8 9 100  \n6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>6\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2 :</h5>\n\n<pre><code>The merged array will be: [1, 2, 3, 4, 5, 6, 7, 8, 9, 100]\n\nThe element at position &#39;6&#39;  is 6, so we return 6.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 5000\n1 &lt;= &#39;m&#39; &lt;= 5000\n0 &lt;= &#39;arr1[i]&#39;, &#39;arr2[i]&#39; &lt;= 10^9\n1 &lt;= &#39;k&#39; &lt;= &#39;n&#39; + &#39;m&#39;\n\n&#39;n&#39; and &#39;m&#39; denote the size of &#39;arr1&#39; and &#39;arr2&#39;.\n\nTime limit: 1 second\n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity :</h5>\n\n<pre><code>The expected time complexity is O(log(&#39;n&#39;) + log(&#39;m&#39;)). \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 120,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two sorted arrays, `arr1` of size `n` and `arr2` of size `m`, and an integer `k`, find the element that would be at the `kth` position in the combined sorted array.  Note that `k` is 1-based indexed, while `arr1` and `arr2` are 0-based indexed.",
                "constraints": [
                    "1 <= n <= 5000",
                    "1 <= m <= 5000",
                    "0 <= arr1[i], arr2[i] <= 10^9",
                    "1 <= k <= n + m"
                ],
                "testcases": [
                    {
                        "input": "5\n2 3 6 7 9\n4\n1 4 8 10\n4",
                        "output": "4",
                        "explanation": "The merged sorted array is [1, 2, 3, 4, 6, 7, 8, 9, 10]. The element at the 4th position (1-based index) is 4."
                    },
                    {
                        "input": "5\n1 2 3 5 6\n5\n4 7 8 9 100\n6",
                        "output": "6",
                        "explanation": "The merged sorted array is [1, 2, 3, 4, 5, 6, 7, 8, 9, 100]. The element at the 6th position (1-based index) is 6."
                    },
                    {
                        "input": "3\n2 3 45\n4\n4 6 7 8\n4",
                        "output": "6",
                        "explanation": "The merged sorted array is [2, 3, 4, 6, 7, 8, 45]. The element at the 4th position (1-based index) is 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(log(k))\n    Space Complexity: O(1)\n\n    Where 'k' is the given integer\n*/\n\nint kthElementHelper(vector<int> &arr1, vector<int> &arr2, int m, int n, int k, int st1 = 0, int st2 = 0)\n{\n    // In case we have reached end of array 1\n    if (st1 == m)\n    {\n        return arr2[st2 + k - 1];\n    }\n\n    // In case we have reached end of array 2\n    if (st2 == n)\n    {\n        return arr1[st1 + k - 1];\n    }\n\n    // Compare first elements of arrays and return\n    if (k == 1)\n    {\n        return (arr1[st1] < arr2[st2]) ? arr1[st1] : arr2[st2];\n    }\n\n    int curr = k / 2;\n\n    // Size of array 1 is less than k / 2\n    if (curr - 1 >= m - st1)\n    {\n        // Last element of array 1 is not the kth element\n        // We can directly return the (k - m)th\n        // element in array 2\n        if (arr1[m - 1] < arr2[st2 + curr - 1])\n        {\n            return arr2[st2 + (k - (m - st1) - 1)];\n        }\n        else\n        {\n            return kthElementHelper(arr1, arr2, m, n, k - curr, st1, st2 + curr);\n        }\n    }\n\n    // Size of array 2 is less than k / 2\n    if (curr - 1 >= n - st2)\n    {\n        if (arr2[n - 1] < arr1[st1 + curr - 1])\n        {\n            return arr1[st1 + (k - (n - st2) - 1)];\n        }\n        else\n        {\n            return kthElementHelper(arr1, arr2, m, n, k - curr, st1 + curr, st2);\n        }\n    }\n    else\n    {\n        // Normal comparison, move starting index\n        // of one array k / 2 to the right\n        if (arr1[curr + st1 - 1] < arr2[curr + st2 - 1])\n        {\n            return kthElementHelper(arr1, arr2, m, n, k - curr, st1 + curr, st2);\n        }\n        else\n        {\n            return kthElementHelper(arr1, arr2, m, n, k - curr, st1, st2 + curr);\n        }\n    }\n}\n\nint kthElement(vector<int> &arr1, vector<int> &arr2, int n, int m, int k)\n{\n    return kthElementHelper(arr1, arr2, n, m, k);\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(log(k))\n    Space Complexity: O(1)\n\n    Where 'k' is the given integer\n'''\n\ndef kthElementHelper(arr1, arr2, m, n, k, st1, st2):\n\n    # In case we have reached end of array 1\n    if st1 == m:\n        return arr2[st2 + k - 1]\n \n    # In case we have reached end of array 2\n    if st2 == n:\n        return arr1[st1 + k - 1]\n \n    # Compare first elements of arrays and return\n    if k == 1:\n        if arr1[st1] < arr2[st2]:\n            return arr1[st1]\n        else:\n            return arr2[st2]\n    \n    curr = k // 2;\n \n    # Size of array 1 is less than k / 2\n    if curr - 1 >= m - st1:\n\n        # Last element of array 1 is not the kth element\n        # We can directly return the (k - m)th\n        # element in array 2\n        if arr1[m - 1] < arr2[st2 + curr - 1]:\n            return arr2[st2 + (k - (m - st1) - 1)];\n        else:\n            return kthElementHelper(arr1, arr2, m, n, k - curr, st1, st2 + curr)\n \n    # Size of array 2 is less than k / 2\n    if curr-1 >= n - st2:\n        if arr2[n - 1] < arr1[st1 + curr - 1]:\n            return arr1[st1 + (k - (n - st2) - 1)]\n        else:\n            return kthElementHelper(arr1, arr2, m, n, k - curr,st1 + curr, st2)\n    else:\n        # Normal comparison, move starting index\n        # of one array k / 2 to the right\n        if arr1[curr + st1 - 1] < arr2[curr + st2 - 1]:\n            return kthElementHelper(arr1, arr2, m, n, k - curr,st1 + curr, st2)\n        else:\n            return kthElementHelper(arr1, arr2, m, n, k - curr, st1, st2 + curr)\n\ndef kthElement(arr1, m, arr2, n, k):\n\n    return kthElementHelper(arr1, arr2, m, n, k, 0, 0);",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n   Time Complexity: O(log(k))\r\n   Space Complexity: O(1)\r\n\r\n   Where 'k' is the given integer\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n\r\n    public static int kthElementHelper(ArrayList<Integer> arr1, ArrayList<Integer> arr2, int m, int n, int k, int st1,\r\n                                       int st2) {\r\n        // In case we have reached end of array 1\r\n        if (st1 == m) {\r\n\r\n            return arr2.get(st2 + k - 1);\r\n        }\r\n\r\n        // In case we have reached end of array 2\r\n        if (st2 == n) {\r\n\r\n            return arr1.get(st1 + k - 1);\r\n\r\n        }\r\n\r\n        // Compare first elements of arrays and return\r\n        if (k == 1) {\r\n\r\n            return (arr1.get(st1) < arr2.get(st2)) ? arr1.get(st1) : arr2.get(st2);\r\n        }\r\n\r\n        int curr = k / 2;\r\n\r\n        // Size of array 1 is less than k / 2\r\n        if (curr - 1 >= m - st1) {\r\n            // Last element of array 1 is not the kth element\r\n            // We can directly return the (k - m)th\r\n            // element in array 2\r\n            if (arr1.get(m - 1) < arr2.get(st2 + curr - 1)) {\r\n                return arr2.get(st2 + (k - (m - st1) - 1));\r\n            } else {\r\n                return kthElementHelper(arr1, arr2, m, n, k - curr, st1, st2 + curr);\r\n            }\r\n        }\r\n\r\n        // Size of array 2 is less than k / 2\r\n        if (curr - 1 >= n - st2) {\r\n            if (arr2.get(n - 1) < arr1.get(st1 + curr - 1)) {\r\n                return arr1.get(st1 + (k - (n - st2) - 1));\r\n            } else {\r\n                return kthElementHelper(arr1, arr2, m, n, k - curr, st1 + curr, st2);\r\n            }\r\n        } else {\r\n            // Normal comparison, move starting index\r\n            // of one array k / 2 to the right\r\n            if (arr1.get(curr + st1 - 1) < arr2.get(curr + st2 - 1)) {\r\n                return kthElementHelper(arr1, arr2, m, n, k - curr, st1 + curr, st2);\r\n            } else {\r\n                return kthElementHelper(arr1, arr2, m, n, k - curr, st1, st2 + curr);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public static int kthElement(ArrayList<Integer> arr1, ArrayList<Integer> arr2, int n, int m, int k) {\r\n\r\n        return kthElementHelper(arr1, arr2, n, m, k, 0, 0);\r\n\r\n    }\r\n\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}