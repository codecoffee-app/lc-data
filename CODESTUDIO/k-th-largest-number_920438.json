{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8851,
            "title": "K-th largest Number",
            "titleSlug": "k-th-largest-number_920438",
            "content": "<h4 id=\"you-are-given-a-binary-search-tree-of-integers-with-n-nodes-your-task-is-to-return-the-k-th-largest-element-of-this-bst\">You are given a binary search tree of integers with &#39;N&#39; nodes. Your task is to return the K-th largest element of this BST.</h4>\n\n<h4 id=\"if-there-is-no-k-th-largest-element-in-the-bst-return-1\">If there is no K-th largest element in the BST, return -1.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-which-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure which has the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains the integer \u2018K\u2019.\n\nThe second line of each test case contains the elements of the BST in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. It is not a BST. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print an integer denoting the K-th largest element of the BST.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n1 &lt;= K &lt;= 5000\n0 &lt;= Data &lt;= 10^6 and Data != -1\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3\n3 1 5 -1 2 -1 6 -1 -1 -1 -1 \n2\n2 1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n1\n</code></pre>\n\n<h4 id=\"explanation-for-sample-1\">Explanation for Sample 1:</h4>\n\n<pre><code>Test Case 1:\nThe sorted array corresponding to the first test case will be [1, 2, 3, 5, 6]. The 3rd largest element will be 3.\n\nTest Case 2:\nThe sorted array corresponding to the second test case will be [1, 2]. The 2nd largest element will be 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n5\n10 -1 20 -1 30 -1 40 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 23,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary search tree (BST) of integers, find the K-th largest element in the BST. If the BST contains fewer than K elements, return -1.",
                "constraints": [
                    "1 <= N <= 5000 (Number of nodes in the BST)",
                    "1 <= K <= 5000",
                    "0 <= Data <= 10^6 and Data != -1 (Node data)"
                ],
                "testcases": [
                    {
                        "input": "root=TreeNode{data=3, left=TreeNode{data=1, left=NULL, right=TreeNode{data=2, left=NULL, right=NULL}}, right=TreeNode{data=5, left=NULL, right=TreeNode{data=6, left=NULL, right=NULL}}}, k=3",
                        "output": "3",
                        "explanation": "The sorted order of the BST is [1, 2, 3, 5, 6]. The 3rd largest element is 3."
                    },
                    {
                        "input": "root=TreeNode{data=2, left=TreeNode{data=1, left=NULL, right=NULL}, right=NULL}, k=2",
                        "output": "1",
                        "explanation": "The sorted order of the BST is [1, 2]. The 2nd largest element is 1."
                    },
                    {
                        "input": "root=TreeNode{data=10, left=NULL, right=TreeNode{data=20, left=NULL, right=TreeNode{data=30, left=NULL, right=TreeNode{data=40, left=NULL, right=NULL}}}}, k=5",
                        "output": "-1",
                        "explanation": "The sorted order of the BST is [10, 20, 30, 40].  Since K=5 and there are only 4 nodes, the function returns -1."
                    },
                    {
                        "input": "root=TreeNode{data=5, left=TreeNode{data=3, left=TreeNode{data=2, left=NULL, right=NULL}, right=TreeNode{data=4, left=NULL, right=NULL}}, right=TreeNode{data=7, left=TreeNode{data=6, left=NULL, right=NULL}, right=TreeNode{data=8, left=NULL, right=NULL}}}, k=1",
                        "output": "8",
                        "explanation": "The sorted order of the BST is [2, 3, 4, 5, 6, 7, 8]. The 1st largest element is 8."
                    },
                    {
                        "input": "root=TreeNode{data=1, left=NULL, right=NULL}, k=1",
                        "output": "1",
                        "explanation": "The sorted order is [1]. The 1st largest is 1."
                    },
                    {
                        "input": "root=TreeNode{data=5, left=NULL, right=NULL}, k=2",
                        "output": "-1",
                        "explanation": "The sorted order is [5]. Since K=2 and there is only 1 node, return -1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to make use of the inorder traversal of the BST.</p>",
            "<p>Try to find K-th largest element without storing the actual node values in an array/list.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}