{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8847,
            "title": "K-th Largest Sum Contiguous Subarray",
            "titleSlug": "k-th-largest-sum-contiguous-subarray_920398",
            "content": "<h4 id=\"given-an-array-of-integers-find-the-kth-largest-sum-subarray-for-example-given-the-array-1-2-3-4-5-and-k-2-the-2nd-largest-sum-subarray-would-be-3-4-5-which-has-a-sum-of-4\">Given an array of integers, find the Kth largest sum subarray For example, given the array [1, -2, 3, -4, 5] and K = 2, the 2nd largest sum subarray would be [3, -4, 5], which has a sum of 4.</h4>\n\n<h4 id=\"please-note-that-a-subarray-is-the-sequence-of-consecutive-elements-of-the-array\">Please note that a subarray is the sequence of consecutive elements of the array.</h4>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line contains an integer \u2018T\u2019 denoting the number of test cases. Then each test case follows.\nThe first input line of each test case contains two space-separated integers \u2018N\u2019 and \u2018K\u2019.\nThe second input line of each test case contains \u2018N\u2019 space-separated integers denoting the elements of the given array.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, print the K-th largest sum subarray.\n\nThe output of each test case will be printed in a separate line.\n\nNote: You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 100\n1 &lt;= K &lt;= (N * (N + 1)) / 2\n-1000 &lt;= ARR[i] &lt;= 1000\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the length of the given array/list, \u2018K\u2019 is the given integer and ARR[i] denotes the i-th element of the given array/list.\n\nTime limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n3 3\n3 -2 5\n2 2\n4 1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample output 1 :</h4>\n\n<pre><code>3\n4\n</code></pre>\n\n<h4 id=\"explanation-of-sample-output-1\">Explanation of Sample output 1  :</h4>\n\n<pre><code>For the first test case, \nSum of [0, 0] = 3\nSum of [0, 1] = 1\nSum of [0, 2] = 6\nSum of [1, 1] = -2\nSum of [1, 2] = 3\nSum of [2, 2] = 5\nAll sum of subarrays are {6, 5, 3, 3, 1, -2} where the third largest element is 3.\n\nFor the second test case, \nSum of [0, 0] = 4\nSum of [0, 1] = 5\nSum of [1, 1] = 1\nAll sum of subarrays are {5, 4, 1} where the second largest element is 4.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n4 10\n5 4 -8 6\n3 1\n1 2 3\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample output 2 :</h4>\n\n<pre><code>-8\n6\n</code></pre>\n\n<h4 id=\"explanation-of-sample-output-2\">Explanation of Sample output 2  :</h4>\n\n<pre><code>For the first test case, among the sum of all the subarray, the tenth-largest sum will be -8.\n\nFor the second test case, among the sum of all the subarray, the largest sum will be 6.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 100,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the Kth largest sum of all possible subarrays. A subarray is defined as a contiguous sequence of elements within the array.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 100",
                    "1 <= K <= (N * (N + 1)) / 2",
                    "-1000 <= ARR[i] <= 1000",
                    "Where \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the length of the given array/list, \u2018K\u2019 is the given integer and ARR[i] denotes the i-th element of the given array/list.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 3\n3 -2 5",
                        "output": "3",
                        "explanation": "Subarray sums: [3, 1, 6, -2, 3, 5]. Sorted in descending order: [6, 5, 3, 3, 1, -2]. The 3rd largest sum is 3."
                    },
                    {
                        "input": "2 2\n4 1",
                        "output": "4",
                        "explanation": "Subarray sums: [4, 5, 1]. Sorted in descending order: [5, 4, 1]. The 2nd largest sum is 4."
                    },
                    {
                        "input": "4 10\n5 4 -8 6",
                        "output": "-8",
                        "explanation": "Among all possible subarray sums, the 10th largest sum is -8."
                    },
                    {
                        "input": "3 1\n1 2 3",
                        "output": "6",
                        "explanation": "Subarray sums: [1, 3, 6, 2, 5, 3]. Sorted in descending order: [6, 5, 3, 3, 2, 1]. The 1st largest sum is 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of considering all subarrays?</p>",
            "<p>Can you think of using a min-heap?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N ^ 2 * log(K)\n    Space Complexity: O(K)\n\n    where \u2018N\u2019 is the length of the given array/list.\n\tAnd 'K' is the given number.\n*/\n\n#include <queue>\n\nint getKthLargest(vector<int> &arr, int k)\n{\n\tint n = arr.size();\n\n\t//\tTo store the subarray sums.\n\tpriority_queue<int, vector<int>, greater<int>> minHeap;\n\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\t//\tTo store the current subarray sum.\n\t\tint sum = 0;\n\t\tfor (int j = i; j < n; j++)\n\t\t{\n\t\t\tsum = sum + arr[j];\n\n\t\t\tif (minHeap.size() < k)\n\t\t\t{\n\t\t\t\tminHeap.push(sum);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (minHeap.top() < sum)\n\t\t\t\t{\n\t\t\t\t\t//\tPop the minimum element.\n\t\t\t\t\tminHeap.pop();\n\t\t\t\t\tminHeap.push(sum);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t//\tTop-most element is the k-th largest subarray sum.\n\treturn minHeap.top();\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N ^ 2 * log(K)\r\n    Space Complexity: O(K)\r\n\r\n    where \u2018N\u2019 is the length of the given array/list.\r\n    And 'K' is the given number.\r\n'''\r\n\r\nfrom heapq import heappush, heappop\r\n\r\ndef getKthLargest(arr, k):\r\n    n = len(arr)\r\n\r\n    #  To store the subarray sums.\r\n    minHeap = []\r\n\r\n    for i in range(n):\r\n\r\n        #  To store the current subarray sum.\r\n        sum = 0\r\n        \r\n        for j in range(i, n):\r\n            sum = sum + arr[j]\r\n\r\n            if (len(minHeap) < k):\r\n                heappush(minHeap, sum)\r\n            else:\r\n                if (minHeap[0] < sum):\r\n                    \r\n                    #  Pop the minimum element.\r\n                    heappop(minHeap)\r\n                    heappush(minHeap, sum)\r\n                \r\n    #  Top-most element is the k-th largest subarray sum.\r\n    return minHeap[0]\r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N ^ 2 * log(K)\r\n    Space Complexity: O(K)\r\n\r\n    where 'N' is the length of the given array and 'K' is the given number.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.PriorityQueue;\r\n\r\npublic class Solution {\r\n\r\n\tpublic static int getKthLargest(ArrayList<Integer> arr, int k) {\r\n\r\n\t\tint n = arr.size();\r\n\r\n\t\t//\tTo store the subarray sums.\r\n\t\tPriorityQueue<Integer> minHeap = new PriorityQueue<Integer>();\r\n\r\n\t\tfor (int i = 0; i < n; i++) {\r\n\r\n\t\t\t//\tTo store the current subarray sum.\r\n\t\t\tint sum = 0;\r\n\r\n\t\t\tfor (int j = i; j < n; j++) {\r\n\t\t\t\tsum = sum + arr.get(j);\r\n\r\n\t\t\t\tif (minHeap.size() < k) {\r\n\r\n\t\t\t\t\tminHeap.add(sum);\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif (minHeap.peek() < sum) {\r\n\r\n\t\t\t\t\t\t//\tPop the minimum element.\r\n\t\t\t\t\t\tminHeap.poll();\r\n\t\t\t\t\t\tminHeap.add(sum);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//\tTop-most element is the k-th largest subarray sum.\r\n\t\treturn minHeap.peek();\r\n\r\n\t}\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}