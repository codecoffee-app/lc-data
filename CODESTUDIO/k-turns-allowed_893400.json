{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8779,
            "title": "K Turns Allowed",
            "titleSlug": "k-turns-allowed_893400",
            "content": "<h4 id=\"ninja-has-been-given-the-dimensions-of-a-matrix-count-the-number-of-paths-to-reach-the-bottom-right-from-top-left-with-maximum-k-turns-allowed\">Ninja has been given the dimensions of a matrix, count the number of paths to reach the bottom right from top left with maximum k turns allowed.</h4>\n\n<h4 id=\"a-valid-turn\">A valid turn :</h4>\n\n<pre><code>There are two possible scenarios when a turn can occur at point (i, j):\n\nTurns Right: (i - 1, j)  -&gt;  (i, j)  -&gt;  (i, j + 1)\n\nTurns Down:  (i, j-1)  -&gt;  (i, j)  -&gt;  (i+1, j)\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run.\n\nThe first line of each test case contains three space-separated integers \u2018N\u2019, \u2019M\u2019, and \u2018K\u2019 denoting the number of rows, columns, and maximum turn around respectively.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each case, we need to print the total number of possible paths % (10 ^ 9 + 7).\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The answer should be in the mod(10 ^ 9 + 7)\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to input or print anything, and it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 50\n1 &lt;= M &lt;= 50\n1 &lt;= K &lt;= 100\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1 \n3 3 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nFor the first test case of sample output 1, we can reach the right bottom point through the following ways:\n0 turns -&gt; 0 ways\n1 turn -&gt; 2 ways\n2 turns -&gt; 2 ways\nHence our answer shall be 4\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2 \n4 5 3\n2 3 4    \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>19\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>Test case 1:\nFor the first test case of sample output 2, we can reach the right bottom point through the following ways:\n0 turns -&gt; 0 ways\n1 turn -&gt; 2 ways\n2 turns -&gt; 5 ways\n3 turns -&gt; 12 ways\nHence our answer shall be 19\n\nTest case 2:\nFor the second test case of sample output 2, we can reach the right bottom point through the following ways:\n0 turns -&gt; 0 ways\n1 turn -&gt; 2 ways\n2 turns -&gt; 1 ways\nHence our answer shall be 3.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix of dimensions N x M, determine the number of distinct paths from the top-left cell (0, 0) to the bottom-right cell (N-1, M-1). You are only allowed to move right or down. However, the number of turns (changes in direction) you make along any path cannot exceed K.  A turn is defined as changing direction from moving down to moving right, or from moving right to moving down. Return the total number of valid paths modulo (10^9 + 7).",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 50",
                    "1 <= M <= 50",
                    "1 <= K <= 100"
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 3, k = 2",
                        "output": "4",
                        "explanation": "Possible paths with at most 2 turns:\n- 0 turns -> Not possible\n- 1 turn -> 2 ways\n- 2 turns -> 2 ways\nTotal = 4"
                    },
                    {
                        "input": "n = 4, m = 5, k = 3",
                        "output": "19",
                        "explanation": "Possible paths with at most 3 turns:\n- 0 turns -> 0 ways\n- 1 turn -> 2 ways\n- 2 turns -> 5 ways\n- 3 turns -> 12 ways\nTotal = 19"
                    },
                    {
                        "input": "n = 2, m = 3, k = 4",
                        "output": "3",
                        "explanation": "Possible paths with at most 4 turns:\n- 0 turns -> 0 ways\n- 1 turn -> 2 ways\n- 2 turns -> 1 way\nTotal = 3"
                    },
                    {
                        "input": "n = 1, m = 1, k = 5",
                        "output": "1",
                        "explanation": "Only one way to reach the destination with no turns required"
                    },
                    {
                        "input": "n = 5, m = 5, k = 0",
                        "output": "0",
                        "explanation": "With k=0, only paths with no turns are valid. Here only paths are moving right all the way or moving down all the way. Neither can reach the end (bottom right) without turns."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Recursively design a function that returns the number of paths from that location.</p>",
            "<p>Find overlapping substructure</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}