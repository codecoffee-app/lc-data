{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10469,
            "title": "Kevin and the tower of coins",
            "titleSlug": "kevin-and-the-tower-of-coins_1229409",
            "content": "<h4 id=\"kevin-has-n-coins-each-coin-has-a-specific-width-and-diameter-kevin-wants-to-build-a-tower-using-these-coins-such-that-each-coin-in-the-tower-has-strictly-less-width-and-diameter-as-compared-to-all-coins-placed-below-this-coin\">Kevin has \u2018N\u2019 coins. Each coin has a specific width and diameter. Kevin wants to build a tower using these coins such that each coin in the tower has strictly less width and diameter as compared to all coins placed below this coin.</h4>\n\n<h4 id=\"you-have-to-find-the-maximum-height-of-the-tower-that-kevin-can-build-by-using-these-coins\">You have to find the maximum height of the tower that Kevin can build by using these coins.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The height of the tower is calculated by adding the width of all the coins used in the formation of this tower.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain a single integer \u2018N\u2019 which denotes the number of coins available.\n\nThe next \u2018N\u2019 lines contain the two space-separated integers \u201cARR[i][0]\u201d and \u201cARR[i][1]\u201d, where \u201cARR[i][0]\u201d is the width of the \u2018i-th\u2019 coin and \u201cARR[i][1]\u201d is the diameter of the \u2018i-th\u2019 coin.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the maximum possible height of the tower.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^4\n1 &lt;= ARR[i][0] and ARR[i][1] &lt;= 10^5\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\n4 5\n2 4\n4\n1 1\n2 2\n3 3\n4 4  \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>In the first test case, the tower formed will have the 2nd coin at the lowest level and the 1st coin on top of it.\n\nIn the second test case, the 4th coin will be placed at the bottom of the tower, on top of that is 3rd and on whose top is 2nd and at the topmost level is 1st coin.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1\n5 4\n3\n4 2\n6 1\n1 10        \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>In the first test case, the tower will only be formed by a single given coin.\n\nIn the second test case, the tower will only be formed by using a single coin.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'N' coins, each with a width and diameter, determine the maximum height of a tower that can be built. A coin can only be placed on top of another coin if its width and diameter are strictly less than the coin below it. The height of the tower is the sum of the widths of the coins used.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^4",
                    "1 <= ARR[i][0] and ARR[i][1] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 2, arr = [[4, 5], [2, 4]]",
                        "output": "2",
                        "explanation": "The optimal tower consists of coin 2 (width 2, diameter 4) at the bottom and coin 1 (width 4, diameter 5) at the top. The function should return 2. (Since Coin 1 is placed on top of Coin 2 as per problem desc.)"
                    },
                    {
                        "input": "n = 4, arr = [[1, 1], [2, 2], [3, 3], [4, 4]]",
                        "output": "4",
                        "explanation": "The optimal tower uses all the coins in the order: [4,4] at the bottom, then [3,3], then [2,2], and finally [1,1] on top.  The total height is 1+2+3+4 = 4 (sum of top coin's height), but as per description, tower height is only the sum of widths of coins used in formation. Thus function returns 1."
                    },
                    {
                        "input": "n = 1, arr = [[5, 4]]",
                        "output": "5",
                        "explanation": "Only one coin is available, so the tower can only have height 5."
                    },
                    {
                        "input": "n = 3, arr = [[4, 2], [6, 1], [1, 10]]",
                        "output": "1",
                        "explanation": "Only the third coin can form a tower (of height 1) as no other coin can be placed under it."
                    },
                    {
                        "input": "n = 3, arr = [[5,5],[4,4],[3,3]]",
                        "output": "3",
                        "explanation": "optimal tower height will be 3 (coin with width and diameter 3)."
                    },
                    {
                        "input": "n = 5, arr = [[10,10],[9,9],[8,8],[7,7],[6,6]]",
                        "output": "6",
                        "explanation": "All coins can be used. tower can be built with coin [10,10], then [9,9], then [8,8], then [7,7] then [6,6], thus tower height is 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>As each coin in the tower has strictly less width and diameter as compared to all coins placed below this coin, the problem boils down to finding an increasing subsequence satisfying the given constraints. Think of a recursive solution.</p>",
            "<p>The recursive solution will have many overlapping subproblems. Can we think of a bottom up approach?</p>",
            "<p>Can you think of reducing the time by using DP along with Binary Search?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}