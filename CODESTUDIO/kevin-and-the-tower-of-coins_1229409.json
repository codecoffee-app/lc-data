{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10469,
            "title": "Kevin and the tower of coins",
            "titleSlug": "kevin-and-the-tower-of-coins_1229409",
            "content": "<h4 id=\"kevin-has-n-coins-each-coin-has-a-specific-width-and-diameter-kevin-wants-to-build-a-tower-using-these-coins-such-that-each-coin-in-the-tower-has-strictly-less-width-and-diameter-as-compared-to-all-coins-placed-below-this-coin\">Kevin has \u2018N\u2019 coins. Each coin has a specific width and diameter. Kevin wants to build a tower using these coins such that each coin in the tower has strictly less width and diameter as compared to all coins placed below this coin.</h4>\n\n<h4 id=\"you-have-to-find-the-maximum-height-of-the-tower-that-kevin-can-build-by-using-these-coins\">You have to find the maximum height of the tower that Kevin can build by using these coins.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The height of the tower is calculated by adding the width of all the coins used in the formation of this tower.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain a single integer \u2018N\u2019 which denotes the number of coins available.\n\nThe next \u2018N\u2019 lines contain the two space-separated integers \u201cARR[i][0]\u201d and \u201cARR[i][1]\u201d, where \u201cARR[i][0]\u201d is the width of the \u2018i-th\u2019 coin and \u201cARR[i][1]\u201d is the diameter of the \u2018i-th\u2019 coin.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the maximum possible height of the tower.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^4\n1 &lt;= ARR[i][0] and ARR[i][1] &lt;= 10^5\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\n4 5\n2 4\n4\n1 1\n2 2\n3 3\n4 4  \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>In the first test case, the tower formed will have the 2nd coin at the lowest level and the 1st coin on top of it.\n\nIn the second test case, the 4th coin will be placed at the bottom of the tower, on top of that is 3rd and on whose top is 2nd and at the topmost level is 1st coin.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1\n5 4\n3\n4 2\n6 1\n1 10        \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>In the first test case, the tower will only be formed by a single given coin.\n\nIn the second test case, the tower will only be formed by using a single coin.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Kevin has N coins, each with a specific width and diameter. He wants to build the tallest possible tower by stacking these coins. A coin can only be placed on top of another coin if it has a strictly smaller width and diameter than the coin below it.  The height of the tower is the sum of the widths of the coins used in the tower. Find the maximum height of the tower Kevin can build.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^4",
                    "1 <= ARR[i][0] and ARR[i][1] <= 10^5",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n2\n4 5\n2 4\n4\n1 1\n2 2\n3 3\n4 4",
                        "output": "2\n4",
                        "explanation": "In the first test case, the optimal tower is formed by placing the coin with width 2 and diameter 4 at the bottom, and the coin with width 4 and diameter 5 on top (since this isn't possible due to the coin at the bottom having to be smaller than the coin on top, the tower is only of height 2. A tower formed will have the 2nd coin at the lowest level and the 1st coin on top of it giving height 2.)\n\nIn the second test case, the optimal tower is formed by placing the coin (4, 4) at the bottom, then (3, 3), then (2, 2), and finally (1, 1) on top. The total width is 1+2+3+4 = 4."
                    },
                    {
                        "input": "2\n1\n5 4\n3\n4 2\n6 1\n1 10",
                        "output": "1\n1",
                        "explanation": "In the first test case, only one coin is available, so the maximum tower height is its width, which is 5. (This isn't correct, as only a single coin can be used in the tower in this case making the width 1).\n\nIn the second test case, the coins (4,2), (6,1) and (1,10) are given. The tallest possible towers consist of only one of the coins so the tallest possible tower is 4 or 6 or 1. Thus the tower with the largest width of 4 is the tallest one. In reality, the code should calculate 1 as the answer."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>As each coin in the tower has strictly less width and diameter as compared to all coins placed below this coin, the problem boils down to finding an increasing subsequence satisfying the given constraints. Think of a recursive solution.</p>",
            "<p>The recursive solution will have many overlapping subproblems. Can we think of a bottom up approach?</p>",
            "<p>Can you think of reducing the time by using DP along with Binary Search?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}