{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 17789,
            "title": "Knapsack 2",
            "titleSlug": "knapsack-2_3955673",
            "content": "<h4 id=\"there-are-n-items-numbered-from-1-2-3-n-each-i-th-item-has-a-weight-weight-i-and-a-value-value-i\">There are \u2018N\u2019 items numbered from 1, 2, 3, .. N. Each i-th item has a weight, \u2018WEIGHT[i]\u2019 and a value, \u2018VALUE[i]\u2019.</h4>\n\n<h4 id=\"ninja-has-decided-to-choose-some-of-n-items-and-carry-them-home-in-a-knapsack-the-capacity-of-the-knapsack-is-w-which-means-the-maximum-total-weight-of-items-he-can-carry-home-is-w\">Ninja has decided to choose some of \u2018N\u2019 items and carry them home in a knapsack. The capacity of the knapsack is \u2018W\u2019, which means the maximum total weight of items he can carry home is \u2018W\u2019.</h4>\n\n<h4 id=\"find-the-maximum-possible-sum-of-values-of-items-that-ninja-takes-home\">Find the maximum possible sum of values of items that Ninja takes home.</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>Let \u2018WEIGHT\u2019 = [1, 2, 3], \u2018VALUE\u2019 = [10, 20, 30] and \u2018W\u2019 = 4.\nIn this case, Ninja can take item 1 and item 3. Then the sum of weights will be 1 + 3 = 4, and the sum of values will be 10 + 30 = 40, which is the maximum possible sum of values Ninja can take home.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39;, which denotes the number of test cases.\n\nThe next line contains two integers \u2018N\u2019 and \u2018W\u2019 denoting the number of items and the maximum total weight of items Ninja can take home respectively.\n\nThe next line contains \u2018N\u2019 space-separated positive integers denoting the elements of array \u2018WEIGHT\u2019.\n\nThe next line contains \u2018N\u2019 space-separated positive integers denoting the elements of array \u2018VALUE\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the maximum possible sum of values of items that Ninja takes home.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 T \u2264 10\n1 \u2264 N \u2264 50\n1 \u2264 W \u2264 10^7\n1 \u2264 WEIGHT[i] \u2264 W\n1 \u2264 VALUE[i] \u2264 100\nWEIGHT.length = VALUE.length = N\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 4\n1 2 3\n10 20 30\n4 5\n2 3 5 7\n10 30 50 70\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>40\n50\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1 :</h5>\n\n<pre><code>Test Case 1:\nIn this case, Ninja can take item 1 and item 3. Then the sum of weights will be 1 + 3 = 4, and the sum of values will be 10 + 30 = 40, which is the maximum possible sum of values Ninja can take home.\n\nTest Case 2:\nIn this case, Ninja can take either item 1 and item 2, whose sum of weights is 2 + 3 = 5 or item 3 only whose sum of weight is 5. He will choose item 3 only because it will give him the sum of values maximum i.e. 50.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2 4\n1 3\n10 20\n1 2\n3\n10\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>30\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2 :</h5>\n\n<pre><code>Test Case 1:\nIn this case, Ninja can take both items home, because their sum of weights is less than the capacity of the knapsack. Hence he will get sum of values as 10 + 20 = 30.\n\nTest Case 2:\nIn this case, Ninja can\u2019t take any item home, because the only item available has a weight more than the the capacity of his knapsack. Hence he will get sum of values as 0.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'N' items, each with a weight and a value, and a knapsack with a maximum weight capacity 'W', determine the maximum total value of items that can be placed in the knapsack without exceeding its weight capacity.  You cannot take fractions of items; you must take the whole item or leave it.",
                "constraints": [
                    "1 \u2264 T \u2264 10",
                    "1 \u2264 N \u2264 50",
                    "1 \u2264 W \u2264 10^7",
                    "1 \u2264 WEIGHT[i] \u2264 W",
                    "1 \u2264 VALUE[i] \u2264 100",
                    "WEIGHT.length = VALUE.length = N"
                ],
                "testcases": [
                    {
                        "input": "n = 3, w = 4, weight = [1, 2, 3], value = [10, 20, 30]",
                        "output": "40",
                        "explanation": "The optimal solution is to take item 1 (weight 1, value 10) and item 3 (weight 3, value 30). The total weight is 1 + 3 = 4, which is within the capacity W = 4. The total value is 10 + 30 = 40."
                    },
                    {
                        "input": "n = 4, w = 5, weight = [2, 3, 5, 7], value = [10, 30, 50, 70]",
                        "output": "50",
                        "explanation": "The optimal solution is to take item 3 (weight 5, value 50), which fits perfectly in the knapsack.  Taking items 1 and 2 (weight 2+3=5 and value 10+30=40) is possible, but yields a lower total value than taking item 3."
                    },
                    {
                        "input": "n = 2, w = 4, weight = [1, 3], value = [10, 20]",
                        "output": "30",
                        "explanation": "The optimal solution is to take both items. The total weight is 1 + 3 = 4, which is within the capacity W = 4. The total value is 10 + 20 = 30."
                    },
                    {
                        "input": "n = 1, w = 2, weight = [3], value = [10]",
                        "output": "0",
                        "explanation": "The item's weight (3) exceeds the knapsack's capacity (2), so no item can be taken. The total value is 0."
                    },
                    {
                        "input": "n = 5, w = 10, weight = [2, 2, 3, 4, 5], value = [30, 40, 50, 60, 70]",
                        "output": "140",
                        "explanation": "The optimal solution is to take item 1 (weight 2, value 30), item 2 (weight 2, value 40), and item 5 (weight 5, value 70). Total weight: 2 + 2 + 5 = 9 <= 10. Total value: 30 + 40 + 70 = 140. Other combinations yield less value."
                    },
                    {
                        "input": "n = 3, w = 7, weight = [1, 4, 5], value = [2, 5, 8]",
                        "output": "10",
                        "explanation": "The optimal solution is to take item 1 (weight 1, value 2) and item 3 (weight 5, value 8). Total weight: 1+5=6 <= 7. Total value: 2+8=10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Generate all possible weights for all possible values of items.</p>",
            "<p>Generate all possible weights for all possible values of items. Use memoization to avoid recomputation.</p>",
            "<p>Generate all possible weights for all possible values of items. Try thinking of an iterative solution to avoid the need for recursion.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}