{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9463,
            "title": "Knapsack",
            "titleSlug": "knapsack_992771",
            "content": "<h4 id=\"there-is-a-potter-who-makes-pottery-wares-with-his-saving-he-can-purchase-some-pottery-clay-say-k-units-to-make-pottery-wares-he-can-transform-this-clay-into-n-different-items-each-item-requires-a-certain-amount-of-day-for-production-from-past-experiences-he-knows-the-profit-he-will-make-on-each-item-he-wishes-to-maximize-the-profit\">There is a potter who makes pottery wares. With his saving, he can purchase some pottery clay, say \u2018K\u2019 units to make pottery wares. He can transform this clay into \u2018N\u2019 different items. Each item requires a certain amount of day for production. From past experiences, he knows the profit he will make on each item. he wishes to maximize the profit.</h4>\n\n<h4 id=\"given-the-amount-of-clay-he-has-the-number-of-things-that-can-be-made-the-days-required-and-the-profit-associated-with-items-help-him-find-the-maximum-profit-that-he-can-earn\">Given the amount of clay he has, the number of things that can be made, the days required, and the profit associated with items. Help him find the maximum profit that he can earn.</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The very first line contains an integer \u2018T\u2019 which denotes the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019 and \u2018K\u2019, where \u2018N\u2019 is the number of things that can be made and \u2018K\u2019 is the number of units of clay he has.\n\nThe second line of each test case contains \u2018N\u2019 integers, where each integer denotes the number of units of clay required for that item.\n\nThe third line of each test case contains \u2018N\u2019 integers, where each integer denotes the amount of profit the potter can get if that item gets sold out.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For every test case,\nReturn the maximum profit the potter can make in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100  \n1 &lt;= N &lt;= 100 \n1 &lt;= K &lt;= 100 \n1 &lt;= profit[i] &lt;= 10000 \n1 &lt;= Clay[i] &lt;= 2000\nWhere \u2018T\u2019 is the number of test cases , \u2018N\u2019 is the number of integers , \u2018K\u2019 is the number of units of clay ,Clay[i] is the amount of clay used to build that ith item.\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1 :</h5>\n\n<pre><code>2\n4 7\n1 3 4 5\n1 4 5 7\n5 5\n3 1 2 4\n2 4 1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>9\n7\n\nThe explanation for Sample Output 1 :\n\n\nIn the first test case, our profit will get maximized if we choose the 2nd item, where units of clay used are 3, and the 3rd item where units of clay are 4. So the total profit is 4 + 5 = 9\n\n\nIn the second test case , our profit will be maximized if we choose 2nd item, where units of clay used are 1, and 4th item where units of clay used are 4. So the total profit is 4 + 3 = 7\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4 10\n3 6 1 4\n5 8 4 6\n5 31\n6 7 6 3 6 \n3 6 7 3 3 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>17\n22\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "A potter has 'K' units of clay and can make 'N' different pottery items. Each item requires a specific amount of clay to produce, and each yields a certain profit upon sale. Given the clay requirements and profit values for each item, determine the maximum profit the potter can achieve without exceeding their available clay.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 100",
                    "1 <= K <= 100",
                    "1 <= profit[i] <= 10000",
                    "1 <= Clay[i] <= 2000"
                ],
                "testcases": [
                    {
                        "input": "n = 4, k = 7, time = [1, 3, 4, 5], profit = [1, 4, 5, 7]",
                        "output": "9",
                        "explanation": "The maximum profit is achieved by selecting the items with clay requirements 3 and 4, yielding profits 4 and 5 respectively (4 + 5 = 9).  This utilizes 3 + 4 = 7 units of clay, which is within the limit."
                    },
                    {
                        "input": "n = 5, k = 5, time = [3, 1, 2, 4], profit = [2, 4, 1, 3]",
                        "output": "7",
                        "explanation": "The optimal selection is the items with clay requirements 1 and 4, yielding profits 4 and 3, respectively (4+3=7). This uses 1 + 4 = 5 units of clay."
                    },
                    {
                        "input": "n = 4, k = 10, time = [3, 6, 1, 4], profit = [5, 8, 4, 6]",
                        "output": "17",
                        "explanation": "Choosing items with clay usages [6,1,3] gives profits [8,4,5] for a total profit of 17 with a total clay usage of 10."
                    },
                    {
                        "input": "n = 5, k = 31, time = [6, 7, 6, 3, 6], profit = [3, 6, 7, 3, 3]",
                        "output": "22",
                        "explanation": "Selecting items with clay usage [6,7,6,6,3] and corresponding profits [3,6,7,3,3] yields the maximum profit of 22."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Hint: can you break the problem by just making a decision on the current item (Whether to take it or not), and the call recursion for the rest?</p><p><br>&nbsp;</p>",
            "<p>There is some redundant work in the brute force approach. Can you try to reduce it, by maybe using some extra space?</p><p><br>&nbsp;</p>",
            "<p>There is some redundant work in the brute force approach. Can you try to reduce it, by maybe using some extra space?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}