{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8283,
            "title": " Kth ancestor of a node in binary tree",
            "titleSlug": "kth-ancestor-of-a-node-in-binary-tree_842561",
            "content": "<h4 id=\"you-are-given-an-arbitrary-binary-tree-consisting-of-n-nodes-numbered-from-1-to-n-an-integer-k-and-a-node-target_node_val-from-the-tree-you-need-to-find-the-kth-ancestor-of-the-node-target_node_val-if-there-is-no-such-ancestor-then-print-1\">You are given an arbitrary binary tree consisting of N nodes numbered from 1 to N,  an integer &#39;K&#39;, and a node &#39;TARGET_NODE_VAL&#39; from the tree. You need to find the Kth ancestor of the node &#39;TARGET_NODE_VAL&#39;. If there is no such ancestor, then print -1.</h4>\n\n<h4 id=\"the-kth-ancestor-of-a-node-in-a-binary-tree-is-the-kth-node-in-the-path-going-up-from-the-given-node-to-the-root-of-the-tree-refer-to-sample-test-cases-for-further-explanation\">The Kth ancestor of a node in a binary tree is the Kth node in the path going up from the given node to the root of the tree. Refer to sample test cases for further explanation.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The given node &#39;TARGET_NODE_VAL&#39; is always present in the tree.\n2. The value of each node in the tree is unique.\n3. Notice that the Kth ancestor node if present will always be unique.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer T representing the number of test cases. \n\nThe first line of each test case will contain the values of the nodes of the tree in the level order form ( -1 for NULL node) Refer to the example for further clarification.\n\nThe second line of each test case will contain two space-separated integers K and TARGET_NODE_VAL which are the value of the Kth ancestor to be found of the node and the value of the node given for which the Kth ancestor is to be computed respectively.\n\nExample: \nConsider the binary tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-10-09-12-55-45-5134.png\" alt=\"altImage\"></p>\n\n<pre><code>The input of the tree depicted in the image above will be like: \n 1\n 2 3\n 4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the value of the Kth ancestor of the node in a separate line. If it doesn\u2019t exist, then print -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n1 &lt;= K &lt;= 10^9\n1 &lt;= NODE_VAL &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n1 2 3 4 5 -1 -1 -1 -1 -1 -1\n5 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-11-06-15-04-33-5639.png\" alt=\"alt txt\"></p>\n\n<pre><code>The path from the given node 5 to root 1 is 5 -&gt; 2 -&gt; 1\nSo the 2nd ancestor of 5 is 1\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n1 2 3 4 5 -1 -1 -1 -1 -1 -1\n4 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-11-06-15-04-33-5639.png\" alt=\"alt txt\"></p>\n\n<pre><code>The path from the given node 4 to root 1 is 4 -&gt; 2 -&gt; 1\nSo  the 1st ancestor of 4 is 2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 32,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find the Kth ancestor of a node with value TARGET_NODE_VAL. The tree consists of N nodes numbered from 1 to N. If the Kth ancestor does not exist, return -1.",
                "constraints": [
                    "1 <= N <= 3000",
                    "1 <= K <= 10^9",
                    "1 <= NODE_VAL <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "nums=[1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1], k=5, targetNodeVal=2",
                        "output": "1",
                        "explanation": "The path from the given node 5 to root 1 is 5 -> 2 -> 1. So the 2nd ancestor of 5 is 1, and the path from node 2 to root 1 is 2->1. Hence the 5th ancestor does not exists, following the path 2->1 we can get only 1st and 2nd ancesstor of node 2, when k=1 output will be 1 and when k=2 the output will be -1"
                    },
                    {
                        "input": "nums=[1, 2, 3, 4, 5, -1, -1, -1, -1, -1, -1], k=1, targetNodeVal=4",
                        "output": "2",
                        "explanation": "The path from the given node 4 to root 1 is 4 -> 2 -> 1. So the 1st ancestor of 4 is 2."
                    },
                    {
                        "input": "nums=[1, 2, 3, -1, -1, -1, -1], k=2, targetNodeVal=2",
                        "output": "1",
                        "explanation": "The path from node 2 to root 1 is 2->1. Thus, 2nd ancestor of node 2 is 1."
                    },
                    {
                        "input": "nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], k=3, targetNodeVal=8",
                        "output": "2",
                        "explanation": "The path from node 8 to root 1 is 8 -> 4 -> 2 -> 1. Thus, 3rd ancestor of node 8 is 2."
                    },
                    {
                        "input": "nums=[1, 2, 3, -1, 4, -1, 5, -1, -1, -1, -1], k=1, targetNodeVal=4",
                        "output": "3",
                        "explanation": "Path: 4 -> 3 -> 1. 1st ancestor of 4 is 3."
                    },
                    {
                        "input": "nums=[1, 2, 3, -1, 4, -1, 5, -1, -1, -1, -1], k=3, targetNodeVal=4",
                        "output": "-1",
                        "explanation": "Path: 4 -> 3 -> 1. There is no 3rd ancestor for 4."
                    },
                    {
                        "input": "nums=[1, 2, 3, -1, 4, -1, 5, -1, -1, -1, -1], k=1, targetNodeVal=5",
                        "output": "3",
                        "explanation": "Path: 5 -> 3 -> 1. 1st ancestor of 5 is 3."
                    },
                    {
                        "input": "nums=[1, 2, 3, -1, 4, -1, 5, -1, -1, -1, -1], k=2, targetNodeVal=5",
                        "output": "1",
                        "explanation": "Path: 5 -> 3 -> 1. 2nd ancestor of 5 is 1."
                    },
                    {
                        "input": "nums=[1], k=1, targetNodeVal=1",
                        "output": "-1",
                        "explanation": "The tree contains only the root node, so there are no ancestors."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Using Breadth-First Search we store the parents of all the nodes till we get our target node traversing the tree level order wise using a queue.</p>",
            "<p>Use Recursion and a Depth First Search approach instead of keeping track and find the given node and then backtrack exactly K times to reach the Kth ancestor.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}