{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 18968,
            "title": "Kth Largest element in BST",
            "titleSlug": "kth-largest-element-in-bst_4414080",
            "content": "<h4 id=\"given-the-root-node-of-a-binary-search-tree-bst-you-have-to-return-the-kth-largest-element-in-the-bst\">Given the root node of a Binary Search Tree (BST), you have to return the Kth largest element in the BST.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>If K is 4 and the tree is depicted by the following image then,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/9_1_example1-15825.png\" alt=\"Example1\"></p>\n\n<pre><code>The 4th largest element in the given BST is 1. So the output will be 1.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow-up :</h5>\n\n<pre><code> Try to do it in O(1) space without using recursion.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an Integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nThe second line of each test case contains a single integer \u2018K\u2019, denoting \u2018K\u2019 as explained in the problem statement.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-10999.png\" alt=\"\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n\nNote: The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer value representing the Kth largest value of the given BST.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5 * 10^3\n1 &lt;= K &lt;= N\n0 &lt;= X &lt;= 10^9\n\nWhere \u2018X\u2019 is the value at the node and \u2018N\u2019 is the no. of nodes in given BST.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2 1 4 -1 -1 3 -1 -1 -1\n4\n2 1 7 -1 -1 3 -1 -1 4 -1 -1\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For First Case - Same as explained in above example.\n\nFor the second case - \nK is 3 and the tree is depicted by the following image then,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/9_1_example2-15824.png\" alt=\"Example2\"></p>\n\n<pre><code>The 3rd largest element in the given BST is 3. So the output will be 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4 3 -1 2 -1 1 -1 -1 -1\n1\n3 1 8 -1 2 -1 -1 -1 -1\n3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a Binary Search Tree (BST), find and return the Kth largest element in the BST. You need to implement a function that takes the root of the BST and an integer K as input and returns the Kth largest element.  Aim for an efficient solution, ideally with O(1) space complexity without using recursion.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 5 * 10^3 (N is the number of nodes in BST)",
                    "1 <= K <= N",
                    "0 <= X <= 10^9 (X is the value at the node)"
                ],
                "testcases": [
                    {
                        "input": "root=[2,1,4,-1,-1,3,-1,-1,-1], k=4",
                        "output": "1",
                        "explanation": "The BST is formed from the input [2,1,4,-1,-1,3,-1,-1,-1]. The nodes in descending order are 4, 3, 2, 1. The 4th largest is 1."
                    },
                    {
                        "input": "root=[2,1,7,-1,-1,3,-1,-1,4,-1,-1], k=3",
                        "output": "3",
                        "explanation": "The BST is formed from the input [2,1,7,-1,-1,3,-1,-1,4,-1,-1]. The nodes in descending order are 7, 4, 3, 2, 1. The 3rd largest is 3."
                    },
                    {
                        "input": "root=[4,3,-1,2,-1,1,-1,-1,-1], k=1",
                        "output": "4",
                        "explanation": "The BST is formed from the input [4,3,-1,2,-1,1,-1,-1,-1]. The nodes in descending order are 4, 3, 2, 1. The 1st largest is 4."
                    },
                    {
                        "input": "root=[3,1,8,-1,2,-1,-1,-1,-1], k=3",
                        "output": "2",
                        "explanation": "The BST is formed from the input [3,1,8,-1,2,-1,-1,-1,-1]. The nodes in descending order are 8, 3, 2, 1. The 3rd largest is 2."
                    },
                    {
                        "input": "root=[5,3,6,2,4,-1,-1,1,-1,-1,-1,-1,-1], k=2",
                        "output": "5",
                        "explanation": "The BST is formed from the input [5,3,6,2,4,-1,-1,1,-1,-1,-1,-1,-1]. The nodes in descending order are 6, 5, 4, 3, 2, 1. The 2nd largest is 5."
                    },
                    {
                        "input": "root=[10,5,15,2,7,12,20,1,-1,-1,-1,-1,-1,17,-1,-1,-1], k=5",
                        "output": "10",
                        "explanation": "The BST is formed from the input [10,5,15,2,7,12,20,1,-1,-1,-1,-1,-1,17,-1,-1,-1]. The nodes in descending order are 20, 17, 15, 12, 10, 7, 5, 2, 1. The 5th largest is 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we get elements in sorted order by traversing efficiently?</p>",
            "<p>Can we reuse the space consumed by NULL values?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}