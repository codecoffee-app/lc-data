{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8825,
            "title": "kth level ",
            "titleSlug": "kth-level_920333",
            "content": "<h4 id=\"you-are-given-a-root-of-the-binary-tree-and-you-have-to-return-the-sum-of-all-nodes-present-at-the-kth-level-from-the-top-the-root-node-is-considered-as-level-1-and-below-it-is-level-2-and-so-on\">You are given a \u2018root\u2019 of the binary tree, and you have to return the sum of all nodes present at the Kth level from the top. The root node is considered as level 1, and below it is level 2, and so on.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>A binary tree is a tree in which each node has at most 2 children.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>For Example, the root node is given as follows :\n\u2018ROOT\u2019 = 1 2 3 4 -1 -1 5 -1 -1 -1 -1 and \u2018K\u2019 = 2, Then the sum of all nodes at K-level will be 5. This is because 2 and 3 are present at level 2 and 2 + 3 = 5. Therefore 5 is the answer.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer \u2018T\u2019, representing the number of test cases or queries to be run. \n\nThe first line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nThe second line of each test case contains a single integer \u2018K\u2019, which denotes the level.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= \u2018N\u2019 &lt;= 1000\n0 &lt;= data &lt;= 10^3\n0 &lt;= \u2018K\u2019 &lt;= \u2018N\u2019\n\nTime Limit: 1 sec.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For every test case, print a single line that contains a single integer which denotes the sum of all nodes at the Kth level.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the function. \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 4 -1 -1 5 -1 -1 -1 -1\n2\n1 2 3 4 -1 -1 5 -1 -1 -1 -1\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>5\n9\n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>For the first test case, the nodes at level 2 are 2 and 3; therefore, their sum will be our answer. 2 + 3 = 5. Therefore the final answer is 5.\n\nFor the second test case, the nodes at level 3 are 4 and 5; therefore, their sum will be our answer. 4 + 5 = 9. Therefore the final answer is 9.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n9 10 11 -1 -1 -1 -1 \n1\n9 10 11 -1 -1 -1 -1\n2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>9\n21\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a binary tree and an integer K, calculate the sum of all node values present at the Kth level of the tree. The root node is considered to be at level 1.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 10",
                    "1 <= \u2018N\u2019 <= 1000",
                    "0 <= data <= 10^3",
                    "0 <= \u2018K\u2019 <= \u2018N\u2019",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "root=[1, 2, 3, 4, -1, -1, 5, -1, -1, -1, -1], k=2",
                        "output": "5",
                        "explanation": "The nodes at level 2 are 2 and 3.  2 + 3 = 5."
                    },
                    {
                        "input": "root=[1, 2, 3, 4, -1, -1, 5, -1, -1, -1, -1], k=3",
                        "output": "9",
                        "explanation": "The nodes at level 3 are 4 and 5. 4 + 5 = 9."
                    },
                    {
                        "input": "root=[9, 10, 11, -1, -1, -1, -1], k=1",
                        "output": "9",
                        "explanation": "The node at level 1 is 9. The sum is therefore 9."
                    },
                    {
                        "input": "root=[9, 10, 11, -1, -1, -1, -1], k=2",
                        "output": "21",
                        "explanation": "The nodes at level 2 are 10 and 11. 10 + 11 = 21."
                    },
                    {
                        "input": "root=[1, 2, -1, 3, -1, -1, -1], k=3",
                        "output": "3",
                        "explanation": "The node at level 3 is 3. Therefore the sum is 3."
                    },
                    {
                        "input": "root=[1], k=1",
                        "output": "1",
                        "explanation": "The node at level 1 is 1. Therefore the sum is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Will inorder traversal help?</p>",
            "<p>Can you try level order?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}