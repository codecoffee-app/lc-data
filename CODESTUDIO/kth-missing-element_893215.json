{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8649,
            "title": "kth missing element ",
            "titleSlug": "kth-missing-element_893215",
            "content": "<h4 id=\"you-are-given-a-strictly-increasing-array-vec-and-a-positive-integer-k\">You are given a strictly increasing array <em><strong>&#39;vec&#39;</strong></em> and a positive integer <strong><em>&#39;k&#39;</em></strong>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"find-the-kth-positive-integer-missing-from-vec\">Find the <strong><em>&#39;kth&#39;</em></strong> positive integer missing from <strong><em>&#39;vec&#39;</em></strong>.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Input: vec = [2,4,5,7] , k = 3\n\nOutput: 6\n\nExplanation : \nIn the given example, first missing positive integer is 1 second missing positive integer is 3, and the third missing positive integer is 6.\nHence the answer is 6. \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer \u2018n\u2019 denoting the number of elements in &#39;vec&#39;.\n\nThe second line contains \u2018n\u2019 space-separated integers denoting the elements of &#39;vec&#39;.\n\nThe third line contains an integer \u2018k\u2019 denoting the &#39;kth&#39; missing element.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print the &#39;kth&#39; positive integer missing from &#39;vec&#39;.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>4\n4 7 9 10\n1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>The missing numbers are 1, 2, 3, 5, 6, 8, 11, 12, \u2026\u2026, and so on.\nSince &#39;k&#39; is 1, the first missing element is 1.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>4\n4 7 9 10\n4\n</code></pre>\n\n<p><br/>    </p>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity :</h5>\n\n<pre><code>Try to solve it in O(log(n)).\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10 ^ 4\n1 &lt;= &#39;k&#39; &lt;= 10 ^ 9\n-10 ^ 9 &lt;= &#39;vec[i]&#39; &lt;= 10 ^ 9\n\nTime Limit : 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 162,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a strictly increasing array `vec` of positive integers and a positive integer `k`, find the k-th positive integer that is missing from the array. You must implement the function `missingK` to achieve this.",
                "constraints": [
                    "1 <= 'n' <= 10 ^ 4",
                    "1 <= 'k' <= 10 ^ 9",
                    "-10 ^ 9 <= 'vec[i]' <= 10 ^ 9"
                ],
                "testcases": [
                    {
                        "input": "n = 4, vec = [4, 7, 9, 10], k = 1",
                        "output": "1",
                        "explanation": "The missing numbers are 1, 2, 3, 5, 6, 8, 11, 12, ... Since k is 1, the first missing element is 1."
                    },
                    {
                        "input": "n = 4, vec = [4, 7, 9, 10], k = 4",
                        "output": "5",
                        "explanation": "The missing numbers are 1, 2, 3, 5, 6, 8, 11, 12, ... Since k is 4, the fourth missing element is 5."
                    },
                    {
                        "input": "n = 4, vec = [2, 4, 5, 7], k = 3",
                        "output": "6",
                        "explanation": "The missing numbers are 1, 3, 6, 8, ... Since k is 3, the third missing element is 6."
                    },
                    {
                        "input": "n = 5, vec = [1, 2, 3, 4, 5], k = 2",
                        "output": "7",
                        "explanation": "All numbers from 1 to 5 are present. So the missing numbers start from 6, 7, 8 ... Since k is 2, the second missing number is 7."
                    },
                    {
                        "input": "n = 3, vec = [10, 11, 12], k = 5",
                        "output": "5",
                        "explanation": "The missing numbers are 1, 2, 3, 4, 5, 6, 7, 8, 9, .... Since k is 5, the fifth missing number is 5."
                    },
                    {
                        "input": "n = 1, vec = [2], k = 1",
                        "output": "1",
                        "explanation": "The missing number is 1. Since k is 1, the first missing number is 1."
                    },
                    {
                        "input": "n = 6, vec = [1, 2, 3, 5, 6, 7], k = 5",
                        "output": "11",
                        "explanation": "Missing numbers are 4, 8, 9, 10, 11,... The fifth missing number is 11."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;Use the difference between the consecutive elements.</p>",
            "<p>Use binary search to find the \u2018k-th\u2019 missing element.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity : O(log(N))\r\n    Space complexity : O(1)\r\n\r\n    Where 'N' is the number of elements in the array.\r\n*/\r\n\r\nint missingK(vector<int> vec, int n, int k)\r\n{\r\n    int low = 0, high = n - 1; \r\n\r\n    // Perform binary search.\r\n    while(low <= high) \r\n    {\r\n        int mid = (low + high) / 2; \r\n        int missing = vec[mid] - (mid + 1); \r\n        \r\n        // If missing element exists between vec[low] and vec[high].\r\n        if(missing < k) \r\n        {\r\n            low = mid + 1; \r\n        }\r\n\r\n        // If missing element exists after the sequence.\r\n        else \r\n        {\r\n            high = mid - 1; \r\n        }\r\n    }\r\n    return low + k;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity : O(log(N))\r\n    Space complexity : O(1)\r\n\r\n    Where 'N' is the number of elements in the array.\r\n*/\r\n\r\npublic class Solution {\r\n\r\n    public static int missingK(int[] vec, int n, int k) {\r\n        int low = 0, high = n - 1;\r\n\r\n        // Perform binary search.\r\n        while(low <= high)\r\n        {\r\n            int mid = (low + high) / 2;\r\n            int missing = vec[mid] - (mid + 1);\r\n\r\n            // If missing element exists between vec[low] and vec[high].\r\n            if(missing < k)\r\n            {\r\n                low = mid + 1;\r\n            }\r\n\r\n            // If missing element exists after the sequence.\r\n            else\r\n            {\r\n                high = mid - 1;\r\n            }\r\n        }\r\n        return low + k;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time complexity : O(log(N))\r\n    Space complexity : O(1)\r\n\r\n    Where 'N' is the number of elements in the array.\r\n\"\"\"\r\n\r\nfrom typing import *\r\n\r\ndef missingK(vec : List[int], n : int, k : int) -> int:\r\n\r\n    low, high = 0, n - 1\r\n\r\n    # Perform binary search.\r\n    while low <= high:\r\n        \r\n        mid = (low + high) // 2\r\n\r\n        missing = vec[mid] - (mid + 1)\r\n\r\n        # If missing element exists between vec[low] and vec[high].\r\n        if missing < k:\r\n            low = mid + 1\r\n        else:\r\n            # If missing element exists after the sequence.\r\n            high = mid - 1\r\n\r\n    return low + k\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}