{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9994,
            "title": "Kth Smallest and Largest Element of Array",
            "titleSlug": "kth-smallest-and-largest-element-of-array_1115488",
            "content": "<h4 id=\"you-are-given-an-array-arr-consisting-of-n-distinct-integers-and-a-positive-integer-k-find-out-kth-smallest-and-kth-largest-element-of-the-array-it-is-guaranteed-that-k-is-not-greater-than-the-size-of-the-array\">You are given an array \u2018Arr\u2019 consisting of \u2018N\u2019 distinct integers and a positive integer \u2018K\u2019. Find out Kth smallest and Kth largest element of the array. It is guaranteed that K is not greater than the size of the array.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Let \u2018N\u2019 = 4,  \u2018Arr\u2019 be [1, 2, 5, 4] and \u2018K\u2019 = 3.  \nthen the elements of this array in ascending order is [1, 2, 4, 5].  Clearly, the 3rd smallest and largest element of this array is 4 and 2 respectively.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next 2*T lines represent the \u2018T\u2019 test cases.\n\nThe first line of each test case contains two space-separated integers  \u2018N\u2019 and \u2018K\u2019 respectively.\n\nThe second line of the test case contains \u2018N\u2019 space-separated integers representing elements of the array \u2018Arr\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a line consisting of two space-separated integers that represent the Kth smallest and Kth largest elements of the array.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. In the given function, you need to return an array consisting of 2 integers, where the first integer gives Kth smallest element and the second integer gives the Kth largest element.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^4\n1 &lt;= K &lt;= N\n-10^9 &lt;= Arr[i] &lt;= 10^9\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 is the size of array \u2018Arr\u2019 and Arr[i] is the element of the given array.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 4\n5 6 7 2\n4 3\n1 2 5 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>7 2 \n4 2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nHere, \u2018N\u2019 = 4, \u2018Arr\u2019 = [5, 6, 7, 2] and \u2018K\u2019 = 3.\nElements of the array in ascending order are [2, 5, 6, 7]\nThus the 4rd smallest and 4rd largest elements of this array are 7 and 2 respectively.\n\nTest case 2:\nSee problem statement for an explanation.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code> 2\n 1 1\n 2\n 5 1\n 5 4 3 2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code> 2 2\n 1 5\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 267,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'Arr' of 'N' distinct integers and a positive integer 'K', find the Kth smallest and Kth largest elements in the array. It is guaranteed that K is not greater than N.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^4",
                    "1 <= K <= N",
                    "-10^9 <= Arr[i] <= 10^9",
                    "Where \u2018T\u2019 is the total number of test cases, \u2018N\u2019 is the size of array \u2018Arr\u2019 and Arr[i] is the element of the given array.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 4\n5 6 7 2",
                        "output": "7 2",
                        "explanation": "In the array [5, 6, 7, 2], when sorted ascendingly, it becomes [2, 5, 6, 7]. The 4th smallest element is 7, and the 4th largest element is 2."
                    },
                    {
                        "input": "4 3\n1 2 5 4",
                        "output": "4 2",
                        "explanation": "In the array [1, 2, 5, 4], when sorted ascendingly, it becomes [1, 2, 4, 5]. The 3rd smallest element is 4, and the 3rd largest element is 2."
                    },
                    {
                        "input": "1 1\n2",
                        "output": "2 2",
                        "explanation": "The array contains only one element which is 2, so the smallest and largest are both 2"
                    },
                    {
                        "input": "5 1\n5 4 3 2 1",
                        "output": "1 5",
                        "explanation": "In the array [5, 4, 3, 2, 1], when sorted ascendingly, it becomes [1, 2, 3, 4, 5]. The 1st smallest element is 1, and the 1st largest element is 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Repeatedly find the smallest element of the array and replace it with an infinite value.</p>",
            "<p>Will Sorting help?</p>",
            "<p>Create MinHeap and MaxHeap from the given array.</p>",
            "<p>Check out QuickSelect algorithm</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time complexity: O(N)\n    Space complexity: O(1)\n\n    Where \u2018N\u2019 is the size of the given array.\n*/\n\nint partition(vector<int> &arr, int left, int right, int pivotIndex) \n{\n    int pivotValue = arr[pivotIndex];\n    \n    // Bring pivot element at the end of range.\n    swap(arr[pivotIndex], arr[right]); \n\n    int current = left;\n    \n    for(int i = left; i < right; i++) \n    {\n        if(arr[i] < pivotValue) \n        {\n            swap(arr[current], arr[i]);\n            current++;\n        }\n    }\n    swap(arr[right], arr[current]);\n    \n    return current;\n}\n\nint quickSelect(vector<int> &arr, int left, int right, int k) \n{\n    if(left == right)\n    {\n        // Size of array is 1.\n        return arr[left];\n    }\n    \n    // Note we can select Median as pivot to guaranteed O(N) complexity always.\n    int pivotIndex = left + rand() % (right-left+1);\n    \n    int partitionIndex = partition(arr, left, right, pivotIndex);\n\n    if(partitionIndex >= k)\n    {\n        // Recur for right subarray\n        return quickSelect(arr, left, partitionIndex-1, k);\n    }\n    \n    if(partitionIndex < k-1)\n    {\n        // Recur for left subarray.\n        return quickSelect(arr, partitionIndex+1, right, k);\n    }\n\n    return arr[partitionIndex];\n}\n\nvector<int> kthSmallLarge(vector<int> &arr, int n, int k)\n{\n    vector<int> result(2);\n    \n    // Kth smallest element\n    result[0] = quickSelect(arr, 0, n-1, k);\n    \n    // Kth largest element\n    result[1] = quickSelect(arr, 0, n-1, n-k+1);\n\n    return result;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time complexity: O(N)\n    Space complexity: O(1)\n\n    Where \u2018N\u2019 is the size of the given array and K is given integer.\n'''\n\nimport random\n\ndef partition(arr, left, right, pivotIndex):\n    pivotValue = arr[pivotIndex]\n\n    # Bring pivot element at the end of range.\n    get = arr[pivotIndex], arr[right]\n    arr[right], arr[pivotIndex] = get\n\n    current = left\n\n    for i in range(left, right):\n        if (arr[i] < pivotValue):\n            get = arr[current], arr[i]\n            arr[i], arr[current] = get\n            current += 1\n\n    get = arr[right], arr[current]\n    arr[current], arr[right] = get\n\n    return current\n\n\ndef quickSelect(arr, left, right, k):\n    if (left == right):\n        # Size of array is 1.\n        return arr[left]\n\n    # Note we can select Median as pivot to guaranteed O(N) complexity always.\n    pivotIndex = left + int(random.random()) % (right-left+1)\n\n    partitionIndex = partition(arr, left, right, pivotIndex)\n\n    if (partitionIndex >= k):\n        # Recur for right subarray\n        return quickSelect(arr, left, partitionIndex-1, k)\n\n    if (partitionIndex < (k-1)):\n        # Recur for left subarray.\n        return quickSelect(arr, partitionIndex+1, right, k)\n\n    return arr[partitionIndex]\n\n\ndef kthSmallLarge(arr, n, k):\n    result = [0, 0]\n    # Kth smallest element\n    result[0] = quickSelect(arr, 0, n-1, k)\n\n    # Kth largest element\n    result[1] = quickSelect(arr, 0, n-1, n-k+1)\n\n    return result\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time complexity: O(N)\n    Space complexity: O(1)\n\n    Where 'N' is the size of the given array.\n*/\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Solution {\n\tprivate static int partition(ArrayList<Integer> arr, int left, int right, int pivotIndex) {\n\t\tint pivotValue = arr.get(pivotIndex);\n\n\t\t// Bring pivot element at the end of range.\n\t\tCollections.swap(arr, pivotIndex, right);\n\n\t\tint current = left;\n\n\t\tfor (int i = left; i < right; i++) {\n\t\t\tif (arr.get(i).intValue() < pivotValue) {\n\n\t\t\t\tCollections.swap(arr, current, i);\n\t\t\t\tcurrent++;\n\t\t\t}\n\t\t}\n\n\t\tCollections.swap(arr, right, current);\n\n\t\treturn current;\n\t}\n\n\tprivate static int quickSelect(ArrayList<Integer> arr, int left, int right, int k) {\n\t\tif (left == right) {\n\t\t\t// Size of array is 1.\n\t\t\treturn arr.get(left);\n\t\t}\n\n\t\t// Note we can select Median as pivot to guaranteed O(N) complexity always.\n\t\tint pivotIndex = left + (int)Math.random() % (right - left + 1);\n\n\t\tint partitionIndex = partition(arr, left, right, pivotIndex);\n\n\t\tif (partitionIndex >= k) {\n\t\t\t// Recur for right subarray\n\t\t\treturn quickSelect(arr, left, partitionIndex - 1, k);\n\t\t}\n\n\t\tif (partitionIndex < k - 1) {\n\t\t\t// Recur for left subarray.\n\t\t\treturn quickSelect(arr, partitionIndex + 1, right, k);\n\t\t}\n\n\t\treturn arr.get(partitionIndex);\n\t}\n\n\tpublic static ArrayList<Integer> kthSmallLarge(ArrayList<Integer> arr, int n, int k) {\n\t\tArrayList<Integer> result = new ArrayList<Integer>();\n\n\t\t// Kth smallest element\n\t\tresult.add(quickSelect(arr, 0, n - 1, k));\n\n\t\t// Kth largest element\n\t\tresult.add(quickSelect(arr, 0, n - 1, n - k + 1));\n\n\t\treturn result;\n\t}\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}