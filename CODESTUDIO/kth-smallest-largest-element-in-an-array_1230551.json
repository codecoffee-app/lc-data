{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10510,
            "title": "kth smallest/largest element in an array",
            "titleSlug": "kth-smallest-largest-element-in-an-array_1230551",
            "content": "<h4 id=\"given-an-array-and-a-number-k-where-k-is-smaller-than-size-of-array-we-need-to-find-the-kth-smallest-element-and-kth-largest-element-in-the-given-array-it-is-given-that-all-array-elements-are-not-distinct\">Given an array and a number K where K is smaller than size of array, we need to find the K&#39;th smallest element and K&#39;th largest element in the given array. It is given that all array elements are not distinct.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>If element is not present, then return -1.\n</code></pre>\n\n<pre><code>K&#39;th largest and smallest element in the sorted array. You are given an array consisting of N non distinct positive integers and a number K, your task is to find the K&#39;th largest and K&#39;th smallest element in the array.\n</code></pre>\n\n<pre><code>1) Kth largest and smallest element in an array is the K&#39;th element of the array when sorted in increasing order. For example consider the array {2, 1, 5, 6, 3, 3, 8} and K=4, the sorted array will be {1, 2, 3, 3, 5, 6, 8}. But we will check the array {1, 2, 3, 5, 6, 8} as 3 is repeated twice and the 4th largest element will be 3 and 4th smallest will be 5.\n\n2) All the elements of the array are not distinct.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer T denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers N and K, as described in the problem statement.\n\nThe second line of each test case contains N space-separated integers, representing the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output prints the K&#39;th largest and K&#39;th smallest element separated by space.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^3\n1 &lt;= arr[i] &lt;= 10^9\n1 &lt;= K &lt; N\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n3 2\n1 2 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>2 is the second largest and second smallest element in an array {1,2,3}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n3 2\n5 5 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>Since there is only 1 unique element therefore second largest and second smallest element does not exist hence -1.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 123,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers and a number K (where K is smaller than the size of the array), find the Kth smallest and Kth largest elements in the array. The array may contain duplicate elements.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 1000",
                    "1 <= arr[i] <= 10^9",
                    "1 <= K < N"
                ],
                "testcases": [
                    {
                        "input": "3 2\n1 2 3",
                        "output": "2 2",
                        "explanation": "The second largest and second smallest element in the array {1, 2, 3} is 2."
                    },
                    {
                        "input": "3 2\n5 5 5",
                        "output": "-1 -1",
                        "explanation": "Since there is only one unique element in the array {5, 5, 5}, the second largest and second smallest elements do not exist, so the output is -1 for both."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "#include <bits/stdc++.h>\n\n#include <iostream>\n\n#include<algorithm>\n\nusing namespace std;\n\nvoid kthSmallestLargest(int arr[], int n, int k) {\n    sort(arr, arr + n);\n    //kthlargest\n    int z = n - 1;\n    int mn = INT_MAX;\n    int count = 0;\n    int flag = 0;\n\n    while (z >= 0) {\n\n        if (arr[z] < mn) {\n            mn = arr[z];\n            count++;\n        }\n        if (count == k) {\n            flag = 1;\n            cout << arr[z] << \" \";\n            break;\n        }\n\n        z--;\n    }\n    if (flag == 0)\n        cout << -1 << \" \";\n\n    // kthSmallest\n    count = 0;\n    mn = INT_MIN;\n    flag = 0;\n\n    for (int i = 0; i < n; i++) {\n\n        if (arr[i] > mn) {\n            mn = arr[i];\n            count++;\n        }\n        if (count == k) {\n            flag = 1;\n            cout << arr[i] << endl;\n            break;\n        }\n    }\n    if (flag == 0)\n        cout << -1 << endl;\n}\n\nint main() {\n    int t;\n    cin >> t;\n\n    while (t > 0) {\n        int n, k;\n        cin >> n >> k;\n        int arr[n];\n        for (int i = 0; i < n; i++) {\n            cin >> arr[i];\n        }\n        kthSmallestLargest(arr, n, k);\n        cout << endl;\n        t--;\n    }\n    return 0;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "import java.util.Arrays;\nimport java.util.Scanner;\n\nclass Solution {\n\n\tstatic void kthSmallestLargest(int arr[], int n, int k) {\n\t\tArrays.sort(arr);\n\t\t// kthlargest\n\t\tint z = n - 1;\n\t\tint mn = Integer.MAX_VALUE;\n\t\tint count = 0;\n\t\tint flag = 0;\n\n\t\twhile (z >= 0) {\n\n\t\t\tif (arr[z] < mn) {\n\t\t\t\tmn = arr[z];\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (count == k) {\n\t\t\t\tflag = 1;\n\t\t\t\tSystem.out.print(arr[z] + \" \");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tz--;\n\t\t}\n\t\tif (flag == 0) {\n\t\t\tSystem.out.print(\"-1 \");\n\t\t}\n\n\t\t// kthSmallest\n\t\tcount = 0;\n\t\tmn = Integer.MIN_VALUE;\n\t\tflag = 0;\n\n\t\tfor (int i = 0; i < n; i++) {\n\n\t\t\tif (arr[i] > mn) {\n\t\t\t\tmn = arr[i];\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (count == k) {\n\t\t\t\tflag = 1;\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag == 0) {\n\t\t\tSystem.out.println(-1);\n\t\t}\n\t}\n\n\tpublic static void main(String args[]) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint t = sc.nextInt();\n\t\twhile (t > 0) {\n\t\t\tint n = sc.nextInt();\n\t\t\tint k = sc.nextInt();\n\n\t\t\tint arr[] = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tarr[i] = sc.nextInt();\n\t\t\t}\n\t\t\tkthSmallestLargest(arr, n, k);\n\t\t\tt--;\n\t\t}\n\t}\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "import sys\n\ndef kthLargest(arr,k):\n    \n    arr.sort()\n    z = len(arr) - 1\n    mn = sys.maxsize\n    count = 0\n    \n    while z >= 0:\n        \n        if(arr[z] < mn):\n            mn = arr[z]\n            count += 1\n            \n        if count == k:\n            return arr[z]\n        \n        z -= 1\n        \n    return -1\n        \n        \n        \ndef kthSmallest(arr,k):\n    \n    arr.sort()\n    count = 0\n    mn = -1\n    \n    for i in range(len(arr)):\n        \n        if arr[i] > mn:\n            mn = arr[i]\n            count += 1\n            \n        if count == k:\n            return arr[i]\n        \n    return -1\n\n\n\ndef kthSmallestLargest(arr,k):\n    \n    large = kthLargest(arr,k)\n    small = kthSmallest(arr,k)\n    \n    \n    return small,large\n    \n    \n\n\n\n\n\n#Driver's code\nt = int(input())\n\nwhile t > 0:\n    \n    n,k = map(int,input().split())\n    arr = [int(i) for i in input().split()]\n    small,large = kthSmallestLargest(arr,k)\n    print(large,small)\n    \n    t -= 1\n\n\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}