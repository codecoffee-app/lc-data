{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8854,
            "title": "Kth smallest node in BST",
            "titleSlug": "kth-smallest-node-in-bst_920441",
            "content": "<h4 id=\"you-have-been-given-a-binary-search-tree-of-integers-you-are-supposed-to-return-the-k-th-1-indexed-smallest-element-in-the-tree\">You have been given a Binary Search Tree of integers. You are supposed to return the <em><strong>k-th</strong></em> (1-indexed) smallest element in the tree.</h4>\n\n<p><br></p>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>For the given binary search tree and k = 3\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/test-explaination-9984.png\" alt=\"Example\"></p>\n\n<pre><code>The 3rd smallest node is highlighted in yellow colour.   \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer that denotes the \u2018k\u2019 as described in the problem statement.\nThe second line contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/test-explaination-9984.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print an integer which denotes the K-th smallest node in the given binary search tree.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n10 5 15 4 7 14 16 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>7\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/binarytree-6171.png\" alt=\"Example\"></p>\n\n<pre><code>The third-smallest node is 7.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n-2 -4 1 -5 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>The second-smallest node is -4.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 10000\n1 &lt;= K &lt;= N\n-10^8 &lt;= data &lt;= 10^8 and data != -1\n\nWhere \u2018N\u2019 is the total number of nodes in the binary search tree, \u2018K\u2019 is the given integer and \u201cdata\u201d is the value of the binary search tree node.\n\nTime Limit: 1sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 49,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) of integers, find and return the *k-th* smallest element in the tree, where *k* is 1-indexed.",
                "constraints": [
                    "1 <= N <= 10000, where \u2018N\u2019 is the total number of nodes in the BST.",
                    "1 <= K <= N",
                    "-10^8 <= data <= 10^8 and data != -1, where \u201cdata\u201d is the value of the BST node."
                ],
                "testcases": [
                    {
                        "input": "3\n10 5 15 4 7 14 16 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "7",
                        "explanation": "The third smallest element in the given BST is 7."
                    },
                    {
                        "input": "2\n-2 -4 1 -5 -1 -1 -1 -1 -1",
                        "output": "-4",
                        "explanation": "The second smallest element in the given BST is -4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of doing inorder traversal?</p>",
            "<p>Can you think of doing inorder traversal iteratively?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}