{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8070,
            "title": "KthLargestNumber",
            "titleSlug": "kthlargestnumber_800301",
            "content": "<h4 id=\"you-will-be-given-a-stream-of-numbers-and-you-need-to-find-the-kth-largest-number-in-the-stream-at-any-given-time\">You will be given a stream of numbers, and you need to find the <em><strong>&#39;kth&#39;</strong></em> largest number in the stream at any given time.</h4>\n\n<p><br></p>\n\n<h4 id=\"as-the-stream-of-numbers-can-not-be-given-during-compile-time-so-you-need-to-design-a-data-structure-which-can-accept-infinite-numbers-and-can-return-the-kth-largest-number-at-any-given-time\">As the stream of numbers can not be given during compile time, so you need to design a data structure which can accept infinite numbers and can return the &#39;kth&#39; largest number at any given time.</h4>\n\n<p><br></p>\n\n<h4 id=\"the-stream-of-numbers-is-nothing-but-a-large-collection-of-numbers-from-which-integers-are-read-at-runtime-such-as-the-user-will-never-know-the-upper-limit-on-the-number-of-integers-that-will-be-read\">The stream of numbers is nothing but a large collection of numbers from which integers are read at runtime, such as the user will never know the upper limit on the number of integers that will be read.</h4>\n\n<p><br></p>\n\n<h4 id=\"the-implemented-data-structure-must-support-the-following-operations\">The implemented data structure must support the following operations:</h4>\n\n<pre><code>1. add(DATA) :\n   This function should take one argument of type and store it in its pool and returns the &#39;kth&#39; largest number from the current pool of integers.\n</code></pre>\n\n<h4 id=\"you-will-be-given-q-queries\">You will be given &#39;q&#39; queries:</h4>\n\n<pre><code>val - For this query, insert the integer into your current pool of integers and return the &#39;kth&#39; largest integer from the existing pool of integers.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code> 1. The maximum number of integers that will be given will always be under memory limits.\n\n 2. You will also be given an initial pool of integers whose size equals k.\n\n 3. The maximum number of queries will be less than 10^5.\n\n 4. The &#39;kth&#39; largest element is not the &#39;kth&#39; distinct element but the &#39;kth&#39; largest element in the sorted order.\n\n 5. There will be at least one query of type 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains two space-separated integers, &#39;Q\u2019 and \u2018K\u2019,  where &#39;Q&#39; denotes the number of queries running against the implemented data structure.\n\nThe second line will contain \u2018K\u2019 space-separated integers, which will be the initial pool of integers.\n\nThen &#39;Q&#39; lines follow. The &#39;i-th&#39; line contains the &#39;i-th&#39; query in the format as in the problem statement.\n\nFor the query of the first type, the input line will contain an integer \u2018DATA\u2019, representing the type of the operation in integer and the integer data to be included in the pool, respectively.\n\nFor the rest of the queries, the input line will contain only one integer value, representing the query being performed.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each query, prints the &#39;kth&#39; largest integer from the current pool.\n\nThe output of each query has to be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given functions. \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2 3\n2 1 3\n3 \n5 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n3\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input1\">Explanation of the Sample Input1:</h5>\n\n<pre><code>The initial pool is - 2 1 3. \n\nWhen 3 is added, the pool is now  - 3 2 1 3. The 3rd largest element is 2(when we sort the pool, it becomes 3 3 2 1).\n\nWhen 5 is added, the pool is now - 5 3 2 1 3. Even now, the 3rd largest element is 3(when we sort the pool, it becomes 5 3 3 2 1).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1 5\n4 4 4 4 2\n3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= Q &lt;= 10 ^ 4\n1 &lt;= K &lt;= 10 ^ 5\n1 &lt;= DATA &lt;= 10 ^ 9 \n\nTime Limit: 1 sec.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 21,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a data structure to find the kth largest number in a continuously growing stream of numbers. The data structure should efficiently support adding new numbers and retrieving the kth largest element at any given time. You are given an initial pool of 'k' integers. The stream of numbers will be provided through a series of queries.",
                "constraints": [
                    "1 <= Q <= 10^4 (Number of queries)",
                    "1 <= K <= 10^5 (Value of k)",
                    "1 <= DATA <= 10^9 (Integer values in the stream)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "2 3\n2 1 3\n3\n5",
                        "output": "2\n3",
                        "explanation": "Initially, the pool is {2, 1, 3}.  Adding 3 to the pool results in {2, 1, 3, 3}. The 3rd largest element is 2. Adding 5 to the pool results in {2, 1, 3, 3, 5}. The 3rd largest element is 3."
                    },
                    {
                        "input": "1 5\n4 4 4 4 2\n3",
                        "output": "4",
                        "explanation": "Initially, the pool is {4, 4, 4, 4, 2}. Adding 3 to the pool results in {4, 4, 4, 4, 2, 3}. The 5th largest element is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try maintaining the sorted order of the current pool.</p>",
            "<p>Think of using priority queues.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}