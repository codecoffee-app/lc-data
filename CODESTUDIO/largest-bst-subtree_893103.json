{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8607,
            "title": "Largest BST subtree",
            "titleSlug": "largest-bst-subtree_893103",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-n-nodes-where-the-nodes-have-integer-values-your-task-is-to-return-the-size-of-the-largest-subtree-of-the-binary-tree-which-is-also-a-bst\">You have been given a Binary Tree of <em><strong>&#39;N&#39;</strong></em> nodes, where the nodes have integer values. Your task is to return the size of the largest subtree of the binary tree which is also a BST.</h4>\n\n<p><br></p>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-which-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure which has the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Given binary tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image2-5995.png\" alt=\"Explanation\"></p>\n\n<pre><code>In the given binary tree, subtree rooted at 2 is a BST and its size is 3.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line contains elements in the level order form. The input consists of values of nodes separated by a single space in a single line.\n\nIn case a node is null, we take -1 on its place.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>The input for the tree is depicted in the below image: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tt2-6640.jpg\" alt=\"BT - 2\"></p>\n\n<pre><code>1 3 8 5 2 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 3\nRight child of 1 = 8\n\nLevel 3 :\nLeft child of 3 = 5\nRight child of 3 = 2\nLeft child of 8 =7\nRight child of 8 =  null (-1)\n\n\nLevel 4 :\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 2 = null (-1)\nRight child of 2 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\n1\n3 8\n5 2 7 -1\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. The first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\n2. The input ends when all nodes at the last level are null(-1).\n\n3. The above format was just to provide clarity on how the input is formed for a given tree. The sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 3 8 5 2 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The output contains an integer denoting the largest size of the subtree of the binary tree which is also a BST.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2 1 3 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n</code></pre>\n\n<h4 id=\"explanation-for-sample-1\">Explanation for Sample 1:</h4>\n\n<pre><code>In the given binary tree, subtree rooted at 2 is a BST and its size is 3.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image1-5996.png\" alt=\"Explanation\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>50 -1 20 -1 30 -1 40 -1 50 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;N&#39; &lt;= 10^5\n0 &lt;= &#39;data&#39; &lt;= 10^5     \n\nwhere &#39;N&#39; is the number of nodes and &#39;data&#39; denotes the node value of the binary tree nodes.\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 155,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree rooted at 'root', find the size of the largest subtree that is also a Binary Search Tree (BST). A BST is a binary tree where for each node, all values in its left subtree are less than the node's value, and all values in its right subtree are greater than the node's value.  Both the left and right subtrees must also be BSTs.",
                "constraints": [
                    "1 <= N <= 10^5, where N is the number of nodes in the tree.",
                    "0 <= data <= 10^5, where data is the value of a node in the tree.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "root = [2, 1, 3]",
                        "output": "3",
                        "explanation": "The entire tree rooted at 2 is a BST with size 3."
                    },
                    {
                        "input": "root = [50, null, 20, null, 30, null, 40, null, 50, null, null]",
                        "output": "4",
                        "explanation": "The subtree rooted at 20 consisting of nodes [20, 30, 40, 50] with -1 indicating null nodes and level-order traversal [20, 30, 40, 50, -1, -1, -1, -1, -1, -1, -1] as children is a BST and has a size of 4."
                    },
                    {
                        "input": "root = [1, 4, 3, 2, 4, 2, 5, null, null, null, null, null, null, null, null]",
                        "output": "1",
                        "explanation": "The largest BST subtrees are the individual leaf nodes with values 2, 5 since they each constitutes a BST of size 1."
                    },
                    {
                        "input": "root = [10, 5, 15, 1, 8, null, 7]",
                        "output": "1",
                        "explanation": "The nodes 1, 7, and 8 and the node 7 can not be BSTs and so the largest BST has a size of 1 since node 7 violates BST properties."
                    },
                    {
                        "input": "root = [4,2,7,2,3,5,null,2,null,null,null,null,null,1,null]",
                        "output": "1",
                        "explanation": "Each of the individual leaves, except 1, forms a BST."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check for every subtree of the binary tree.</p>",
            "<p>Try to find the answer to the current subtree with the help of left and right subtrees.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n    \r\n    where 'N' is the total number of nodes in the binary tree.\r\n*/\r\n\r\nstruct info \r\n{\r\n\tbool isValid;\r\n\tint size, min, max;\r\n};\r\n\r\ninfo maxSize(TreeNode* currNode, int &maxBST)\r\n{\r\n\tif (currNode == NULL)\r\n\t{\r\n\t\t// isValid, size, min, max.\r\n\t\treturn {true, 0, INT_MAX, INT_MIN};\r\n\t}\r\n\r\n\r\n\t// Information of left and right subtrees.\r\n\tinfo left = maxSize(currNode -> left, maxBST);\r\n\tinfo right = maxSize(currNode -> right, maxBST);\r\n\r\n\r\n\tinfo currInfo;\r\n\r\n\t// Size of current subtree.\r\n\tcurrInfo.size = left.size + right.size + 1;\r\n\t\r\n\t// Left and Right subtrees must be BST.\r\n\tcurrInfo.isValid = left.isValid & right.isValid;\r\n\t\r\n\t// Current subtree must form a BST.\r\n\tcurrInfo.isValid &= (currNode -> data > left.max);\r\n\tcurrInfo.isValid &= (currNode -> data < right.min);\r\n\t\r\n\t// Updating min and max for current subtree.\r\n\tcurrInfo.min = min(min(left.min, right.min), currNode -> data);\r\n\tcurrInfo.max = max(max(left.max, right.max), currNode -> data);\r\n\r\n\r\n\tif (currInfo.isValid == true)\r\n\t{\r\n\t\tmaxBST = max(maxBST, currInfo.size);\r\n\t}\r\n\r\n\treturn currInfo;\r\n}\r\n\r\n\r\nint largestBST(TreeNode* root)\r\n{\r\n\tint maxBST = 0;\r\n\r\n\tmaxSize(root, maxBST);\r\n\r\n\treturn maxBST;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n\r\n    where 'N' is the total number of nodes in the binary tree.\r\n*/\r\nclass Info {\r\n    boolean isValid;\r\n    int size, min, max;\r\n\r\n    public Info(boolean isValid, int size, int min, int max) {\r\n        this.isValid = isValid;\r\n        this.size = size;\r\n        this.min = min;\r\n        this.max = max;\r\n    }\r\n}\r\n\r\npublic class Solution {\r\n    public static Info maxSize(TreeNode currNode, int[] maxBST) {\r\n        if (currNode == null) {\r\n            // isValid, size, min, max.\r\n            return new Info(true, 0, Integer.MAX_VALUE, Integer.MIN_VALUE);\r\n        }\r\n\r\n        // Information of left and right subtrees.\r\n        Info left = maxSize(currNode.left, maxBST);\r\n        Info right = maxSize(currNode.right, maxBST);\r\n\r\n        Info currInfo = new Info(false, 0, 0, 0);\r\n\r\n        // Size of current subtree.\r\n        currInfo.size = left.size + right.size + 1;\r\n\r\n        // Left and Right subtrees must be BST.\r\n        currInfo.isValid = left.isValid && right.isValid;\r\n\r\n        // Current subtree must form a BST.\r\n        currInfo.isValid &= (currNode.data > left.max) && (currNode.data < right.min);\r\n\r\n        // Updating min and max for current subtree.\r\n        currInfo.min = Math.min(Math.min(left.min, right.min), currNode.data);\r\n        currInfo.max = Math.max(Math.max(left.max, right.max), currNode.data);\r\n\r\n        if (currInfo.isValid) {\r\n            maxBST[0] = Math.max(maxBST[0], currInfo.size);\r\n        }\r\n\r\n        return currInfo;\r\n    }\r\n\r\n    public static int largestBST(TreeNode root) {\r\n        int[] maxBST = {0};\r\n        maxSize(root, maxBST);\r\n        return maxBST[0];\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n    \r\n    where N is the total number of nodes in the binary tree.\r\n'''\r\n\r\nclass info:\r\n    def __init__(self):\r\n        self.isValid = True\r\n        self.size = 0\r\n        self.min = 1e9\r\n        self.max = -1e9\r\n\r\n\r\ndef maxSize(currNode, maxBST):\r\n\r\n    if currNode == None:\r\n        newInfo = info()\r\n        return newInfo\r\n\r\n\r\n    # Information of left and right subtrees\r\n    left = maxSize(currNode.left, maxBST)\r\n    right = maxSize(currNode.right, maxBST)\r\n\r\n\r\n    currInfo = info()\r\n\r\n    # Size of current subtree\r\n    currInfo.size = left.size + right.size + 1\r\n    \r\n    # Left and Right subtrees must be BST\r\n    currInfo.isValid = left.isValid & right.isValid\r\n    \r\n    # Current subtree must form a BST\r\n    currInfo.isValid &= (currNode.data > left.max)\r\n    currInfo.isValid &= (currNode.data < right.min)\r\n    \r\n    # Updating min and max for current subtree\r\n    currInfo.min = min(min(left.min, right.min), currNode.data)\r\n    currInfo.max = max(max(left.max, right.max), currNode.data)\r\n\r\n\r\n    if currInfo.isValid == True:\r\n        maxBST[0] = max(maxBST[0], currInfo.size)\r\n\r\n    return currInfo\r\n\r\n\r\ndef largestBST(root):\r\n    \r\n    # Passing 'maxBST' by reference\r\n    maxBST = [0]\r\n    maxSize(root, maxBST)\r\n\r\n    return maxBST[0]",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}