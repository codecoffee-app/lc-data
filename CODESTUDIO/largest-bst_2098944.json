{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14249,
            "title": "Largest BST",
            "titleSlug": "largest-bst_2098944",
            "content": "<h4 id=\"ninja-is-very-fond-of-playing-with-binary-trees-he-is-randomly-searching-some-binary-trees-structures-from-the-internet-he-has-learnt-a-new-concept-of-binary-search-trees\">Ninja is very fond of playing with Binary Trees. He is randomly searching some binary trees structures from the internet. He has learnt a new concept of Binary Search Trees.</h4>\n\n<h4 id=\"now-a-random-thought-comes-in-his-mind-to-find-the-largest-subtree-in-the-binary-tree-which-is-also-a-binary-search-tree\">Now a random thought comes in his mind to find the largest subtree in the binary tree which is also a binary search tree.</h4>\n\n<h4 id=\"as-ninja-is-very-new-to-the-concepts-of-bst-he-couldnt-make-it-to-the-solution-so-he-asks-for-your-help-help-ninja\">As Ninja is very new to the concepts of BST. He couldn&#39;t make it to the solution. So, he asks for your help. Help Ninja!.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-which-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure which has the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an Integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of input contains the elements of the tree in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print an integer denoting the largest size of the subtree of the binary tree which is also a BST.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n1 &lt;= data &lt;= 10^5 and data!=-1\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n13 -1 18 -1 27 -1 29 -1 40 -1 -1 \n3 1 5 8 0 2 6 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>5\n3\n</code></pre>\n\n<h4 id=\"explanation-for-sample-1\">Explanation for Sample 1:</h4>\n\n<pre><code>The BST corresponding to the first test case is-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/largestbst-11864.png\"></p>\n\n<pre><code>The subtree rooted at 13 is a BST and its size is 5.\nAs it is a skewed tree and all the right nodes are greater than each node.\n\nThe BST corresponding to the second test case is -\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-20-11865.png\"></p>\n\n<pre><code>The subtree rooted at 5 is a BST and its size is 3.\nAs all the nodes in the left of 5 is smaller than 5 and the nodes in right of 5 are greater than 5.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n50 -1 20 -1 30 -1 40 -1 50 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find the largest subtree within it that is also a Binary Search Tree (BST). A BST is a binary tree where for each node, all nodes in its left subtree have values less than the node's value, and all nodes in its right subtree have values greater than the node's value. Both the left and right subtrees must also be BSTs. Your task is to determine the size (number of nodes) of the largest such BST subtree.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 5000",
                    "1 <= data <= 10^5 and data != -1",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "13 -1 18 -1 27 -1 29 -1 40 -1 -1",
                        "output": "5",
                        "explanation": "The entire tree is a skewed BST rooted at 13 with a size of 5. All right nodes are greater than their parent nodes."
                    },
                    {
                        "input": "3 1 5 8 0 2 6 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "3",
                        "explanation": "The subtree rooted at 5 forms a BST of size 3, with 1 and 6 as its children."
                    },
                    {
                        "input": "50 -1 20 -1 30 -1 40 -1 50 -1 -1",
                        "output": "4",
                        "explanation": "The subtree rooted at 20 is a skewed BST of size 4. The nodes are 20, 30, 40, 50."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}