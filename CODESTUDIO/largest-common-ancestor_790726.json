{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7847,
            "title": "Largest common ancestor",
            "titleSlug": "largest-common-ancestor_790726",
            "content": "<h4 id=\"given-a-binary-search-tree-and-two-nodes-find-their-largest-common-ancestor\">Given a binary search tree and two nodes, find their largest common ancestor.</h4>\n\n<h4 id=\"largest-common-ancestor-is-the-one-having-the-highest-node-value-among-all-the-common-ancestors-of-given-nodes-assume-both-nodes-are-present-in-the-binary-tree\">Largest Common Ancestor is the one having the highest node value among all the common ancestors of given nodes. Assume both nodes are present in the binary tree.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer T, the number of test cases.\n\nThe first line of every next T lines contain elements in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 on its place.\n\nThe second line of every next T lines contains Node 1\u2019s data. \n\nThe third line of every next T lines contains Node 2\u2019s data. \n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>For example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/first-5644.png\" alt=\"example\"></p>\n\n<pre><code>20\n10 35 \n5 15 30 42 \n-1 13 -1 -1 -1 -1 -1 \n-1 -1\n\nExplanation:\n\nLevel 1 :\nThe root node of the tree is 20\nLevel 2 :\nLeft child of 20 = 10\nRight child of 20 = 35\nLevel 3 :\nLeft child of 10 = 5\nRight child of 10 = 15\nLeft child of 35 = 30\nRight child of 35 = 42\nLevel 4 :\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 15 = 13\nRight child of 15 = null (-1)\nLeft child of 30 = null (-1)\nRight child of 30 = null (-1)\nLeft child of 42 = null (-1)\nRight child of 42 = null (-1)\nLevel 5 :\nLeft child of 13 = null (-1)\nRight child of 13 = null (-1)\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n\nNote:\nThe above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n20 10 35 5 15 30 42 -1 13 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case print single line containing an integer i.e the largest common ancestor.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.    \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5    \n1 &lt;= N &lt;= 10^5 \n0 &lt;= data &lt;= 10^9\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n2 7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>8\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-2\">Explanation to Sample Input 2 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/lca-5303.jpg\" alt=\"BST Image\"></p>\n\n<pre><code>The Nodes marked with yellow color are the possible ancestors for Node 1 and Node 2. \n\nOut of all the ancestors i.e. 5 and 8, 8 is the largest, thus, the answer is 8. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1 \n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n2 10\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>8\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary search tree (BST) and two nodes within the tree, find their Lowest Common Ancestor (LCA). The LCA is defined as the deepest node that is an ancestor of both the given nodes. It is assumed that both nodes exist within the BST.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10^5",
                    "0 <= data <= 10^9",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n2\n7",
                        "output": "8",
                        "explanation": "The possible ancestors for nodes 2 and 7 are 5 and 8. The largest among these is 8, making it the LCA."
                    },
                    {
                        "input": "8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n2\n10",
                        "output": "8",
                        "explanation": "The common ancestors of nodes 2 and 10 are the nodes on the path from each of these nodes to the root.  These would be 5, 8 and 10, 8.  The lowest common ancestor is therefore 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The first thought in mind can be to keep a record of the path traversed for the following 2 nodes and getting to the largest common ancestor.&nbsp;</p>",
            "<p>When it comes to binary search trees, we know that the left child of the root will be less than the root\u2019s data and the right child will be greater than the root\u2019s data. We can save the traversing time as well as extra space by using recursive calls.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}