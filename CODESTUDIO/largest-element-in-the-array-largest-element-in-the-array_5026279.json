{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 20887,
            "title": "Largest Element in the Array Largest Element in the Array",
            "titleSlug": "largest-element-in-the-array-largest-element-in-the-array_5026279",
            "content": "<h4 id=\"given-an-array-arr-of-size-n-find-the-largest-element-in-the-array\">Given an array <em><strong>\u2018arr\u2019</strong></em> of size <em><strong>\u2018n\u2019</strong></em> find the largest element in the array.</h4>\n\n<p><br></p>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Input: &#39;n&#39; = 5, &#39;arr&#39; = [1, 2, 3, 4, 5]\n\nOutput: 5\n\nExplanation: From the array {1, 2, 3, 4, 5}, the largest element is 5.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line will contain a single integer &#39;n&#39;, the size of the array \u2018arr\u2019 \n\nThe second line will contain \u2018n\u2019 integers representing the array elements.\n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>Print the maximum of elements.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1:</h5>\n\n<pre><code>6\n4 7 8 6 7 6 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>8\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>The answer is 8.\nFrom {4 7 8 6 7 6}, 8 is the largest element.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample input 2:</h5>\n\n<pre><code>8\n5 9 3 4 8 4 3 10 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>10\n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>O(n), Where \u2018n\u2019 is the size of an input array \u2018arr\u2019.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10^5\n1 &lt;= &#39;arr[i]&#39; &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 358,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of size `n`, find the largest element in the array.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= arr[i] <= 10^9",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "6\n4 7 8 6 7 6",
                        "output": "8",
                        "explanation": "The largest element in the array [4, 7, 8, 6, 7, 6] is 8."
                    },
                    {
                        "input": "8\n5 9 3 4 8 4 3 10",
                        "output": "10",
                        "explanation": "The largest element in the array [5, 9, 3, 4, 8, 4, 3, 10] is 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about how to iterate through the array and keep track of the largest element encountered so far.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity: O( N )\r\n    Space complexity: O( 1 )\r\n\r\n    Where 'N' is the size of array.\r\n*/\r\n\r\nint largestElement(vector<int> &arr, int n) {\r\n\r\n    // Create a temporary variable 'temp' and initialize it with 0.\r\n    int maxElement = 0;\r\n\r\n    // Traverse the array.\r\n    for (int i: arr){\r\n        // Update temp with the max of the current element of arr or temp.\r\n        maxElement = max(maxElement, i);\r\n    }\r\n    \r\n    // Return 'temp'.\r\n    return maxElement;\r\n\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity: O( N )\r\n    Space complexity: O( 1 )\r\n\r\n    Where 'N' is the size of array.\r\n*/\r\n\r\npublic class Solution {\r\n\r\n    static int largestElement(int[] arr, int n) {\r\n\r\n        // Create a temporary variable 'temp' and initialize it with 0.\r\n        int maxElement = 0;\r\n\r\n        // Traverse the array.\r\n        for (int i: arr){\r\n            // Update temp with the max of the current element of arr or temp.\r\n            maxElement = Math.max(maxElement, i);\r\n        }\r\n\r\n        // Return 'temp'.\r\n        return maxElement;\r\n\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time complexity: O( N )\r\n    Space complexity: O( 1 )\r\n\r\n    Where 'N' is the size of array.\r\n\"\"\"\r\n\r\n\r\ndef largestElement(arr: [], n: int) -> int:\r\n\r\n    # Create a temporary variable 'maxElement' and initialize it with 0.\r\n    maxElement = 0\r\n\r\n    # Traverse the array.\r\n    for i in arr:\r\n\r\n        # Update maxElement with the max of the current element of arr or maxElement.\r\n        maxElement = max(maxElement, i)\r\n\r\n    # Return 'maxElement'.\r\n    return maxElement\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}