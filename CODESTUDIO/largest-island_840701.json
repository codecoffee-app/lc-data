{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8217,
            "title": "Largest Island",
            "titleSlug": "largest-island_840701",
            "content": "<h4 id=\"you-are-given-two-integers-n-and-m-the-dimensions-of-a-grid-the-coordinates-are-from-0-0-to-n-1-m-1\">You are given two integers <em><strong>&#39;n&#39;</strong></em> and <em><strong>&#39;m&#39;</strong></em>, the dimensions of a grid. The coordinates are from (0, 0) to (n - 1, m - 1).</h4>\n\n<p><br/></p>\n\n<h4 id=\"the-grid-can-only-have-values-0-and-1\">The grid can only have values 0 and 1.</h4>\n\n<p><br/></p>\n\n<h4 id=\"the-value-is-0-if-there-is-water-and-1-if-there-is-land\">The value is 0 if there is water and 1 if there is land.</h4>\n\n<p><br/></p>\n\n<h4 id=\"an-island-is-a-group-of-1-s-such-that-every-1-has-at-least-another-1-sharing-a-common-edge\">An island is a group of \u20181\u2019s such that every \u20181\u2019 has at least another \u20181\u2019 sharing a common edge.</h4>\n\n<p><br/></p>\n\n<h4 id=\"you-are-given-an-array-queries-of-size-q\">You are given an array <em><strong>&#39;queries&#39;</strong></em> of size <em><strong>&#39;q&#39;</strong></em>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"each-element-in-queries-contains-two-integers-x-and-y-referring-to-the-coordinates-in-the-grid\">Each element in &#39;queries&#39; contains two integers &#39;x&#39; and &#39;y&#39;, referring to the coordinates in the grid.</h4>\n\n<p><br/></p>\n\n<h4 id=\"initially-the-grid-is-filled-with-0-which-means-only-water-and-no-land\">Initially, the grid is filled with 0, which means only water and no land.</h4>\n\n<p><br/></p>\n\n<h4 id=\"at-each-query-the-value-of-grid-at-x-y-becomes-1-which-means-it-becomes-land\">At each query, the value of &#39;grid&#39; at (x, y) becomes 1, which means it becomes land.</h4>\n\n<p><br/></p>\n\n<h4 id=\"find-out-after-each-query-the-number-of-islands-in-the-grid\">Find out, after each query, the number of islands in the grid.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Input: &#39;n&#39; = 3, &#39;m&#39; = 4\n&#39;queries&#39; = [[1, 1], [1, 2], [2, 3]]\n\nOutput: [1, 1, 2]\n\nExplanation:\n\nInitially, the grid was:\n0 0 0 0\n0 0 0 0\n0 0 0 0\n\nAfter query (1, 1):\n0 0 0 0\n0 1 0 0\n0 0 0 0\nThere is one island having land (1, 1).\n\nAfter query (1, 2):\n0 0 0 0\n0 1 1 0\n0 0 0 0\nSince (1, 1) and (1, 2) share a common edge, they form one island. So there is one island having lands (1, 1) and (1, 2).\n\nAfter query (2, 3):\n0 0 0 0\n0 1 1 0\n0 0 0 1\nNow there are two islands, one having lands (1, 1) and (1, 2), and another having land (2, 3).\n\nSo the number of islands after each query is [1, 1, 2].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains two integers, &#39;n&#39; and &#39;m&#39; denoting the number of rows and columns in the grid, respectively.\n\nThe second line contains an integer &#39;q&#39; denoting the number of queries.\n\nThe next &#39;q&#39; lines contain two integers each, the coordinates which are becoming land.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print an array of size &#39;q&#39;, denoting the answer of each query.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3 4\n3\n1 1\n1 2\n2 3\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 1 2\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>Initially, the grid was:\n0 0 0 0\n0 0 0 0\n0 0 0 0\n\nAfter query (1, 1):\n0 0 0 0\n0 1 0 0\n0 0 0 0\nThere is one island having land (1, 1).\n\nAfter query (1, 2):\n0 0 0 0\n0 1 1 0\n0 0 0 0\nSince (1, 1) and (1, 2) share a common edge, they form one island. So there is one island having lands (1, 1) and (1, 2).\n\nAfter query (2, 3):\n0 0 0 0\n0 1 1 0\n0 0 0 1\nNow there are two islands, one having lands (1, 1) and (1, 2), and another having land (2, 3).\n\nSo the number of islands after each query is [1, 1, 2].\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3 5\n3\n1 1\n1 3\n1 2\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 2 1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity :</h5>\n\n<pre><code>The expected time complexity is O(n * m + q).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;n&#39;, &#39;m&#39; &lt;= 1000\n1 &lt;= &#39;q&#39; &lt;= 10 ^ 4\n0 &lt;= &#39;x&#39; &lt; &#39;n&#39;\n0 &lt;= &#39;y&#39; &lt; &#39;m&#39;\n\nAll the (x, y) pairs are unique.\n\nTime limit: 1 second\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 49,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a grid of size n x m, initially filled with water (0). You are given a series of queries. Each query represents a coordinate (x, y) where the water is converted to land (1). An island is defined as a group of connected land cells (1s), where connectivity is defined by sharing a common edge (horizontally or vertically). The task is to determine the number of islands present in the grid after each query is applied.\n\nSpecifically:\n\n1.  Start with an empty grid (all 0s).\n2.  Process each query (x, y) by setting grid[x][y] = 1.\n3.  After each query, count the number of islands in the grid.\n4.  Return a list containing the island counts after each query.",
                "constraints": [
                    "1 <= n, m <= 1000",
                    "1 <= q <= 10^4",
                    "0 <= x < n",
                    "0 <= y < m",
                    "All the (x, y) pairs are unique."
                ],
                "testcases": [
                    {
                        "input": "3 4\n3\n1 1\n1 2\n2 3",
                        "output": "1 1 2",
                        "explanation": "Initially, the grid is filled with 0s.\n\nQuery (1, 1): Grid becomes:\n0 0 0 0\n0 1 0 0\n0 0 0 0\nOne island.\n\nQuery (1, 2): Grid becomes:\n0 0 0 0\n0 1 1 0\n0 0 0 0\nOne island (cells (1,1) and (1,2) are connected).\n\nQuery (2, 3): Grid becomes:\n0 0 0 0\n0 1 1 0\n0 0 0 1\nTwo islands ((1,1)-(1,2) and (2,3))."
                    },
                    {
                        "input": "3 5\n3\n1 1\n1 3\n1 2",
                        "output": "1 2 1",
                        "explanation": "Initially, the grid is filled with 0s.\n\nQuery (1, 1): Grid becomes:\n0 0 0 0 0\n0 1 0 0 0\n0 0 0 0 0\nOne island.\n\nQuery (1, 3): Grid becomes:\n0 0 0 0 0\n0 1 0 1 0\n0 0 0 0 0\nTwo islands.\n\nQuery (1, 2): Grid becomes:\n0 0 0 0 0\n0 1 1 1 0\n0 0 0 0 0\nOne island."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We can use the Disjoint Set Union data structure to track connected lands efficiently.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}