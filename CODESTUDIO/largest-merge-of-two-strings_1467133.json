{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12622,
            "title": "Largest Merge of Two Strings",
            "titleSlug": "largest-merge-of-two-strings_1467133",
            "content": "<h4 id=\"you-are-given-two-strings-str1-and-str2-your-task-is-to-construct-the-lexicographically-largest-string-by-merging-str1-and-str2-while-merging-the-strings-you-need-to-keep-the-same-order-of-characters-in-the-merged-string-as-present-in-str1-and-str2\">You are given two strings, \u2018STR1\u2019 and \u2018STR2\u2019. Your task is to construct the lexicographically largest string by merging \u2018STR1\u2019 and \u2018STR2\u2019. While merging the strings, you need to keep the same order of characters in the merged string as present in \u2018STR1\u2019 and \u2018STR2\u2019.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Consider STR1 = \u201dca\u201d and STR2 = \u201ddb\u201d. All the possible strings that can be constructed by merging \u201cca\u201d and \u201cdb\u201d are \u201ccadb\u201d, \u201ccdab\u201d, \u201ccdba\u201d, \u201cdcab\u201d, \u201cdcba\u201d and \u201cdbca\u201d, among them the lexicographically largest string is \u201cdcba\u201d. Hence, the answer is \u201cdcba\u201d in this case.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains the string \u2018STR1\u2019.\n\nThe second line of each test case contains the string \u2018STR2\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing a single string denoting the lexicographically largest string constructed by merging \u2018STR1\u2019 and \u2018STR2\u2019.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;=  T  &lt;= 10\n1 &lt;=  |STR1| &lt;= 3000\n1 &lt;=  |STR2| &lt;= 3000\n\nStrings &#39;STR1&#39; and &#39;STR2&#39; contain lowercase English letters only.\n\nWhere &#39;T&#39; denotes the number of test cases, \u2018STR1\u2019 and \u2018STR2\u2019 represent the two given strings. \n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\nac \nb\nca \nab\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>bac\ncaba\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case, \nAll possible strings constructed by merging \u201cac\u201d and \u201cb\u201d while maintaining the order of characters are \u201cabc\u201d, \u201cacb\u201d and \u201cbac\u201d, among them the lexicographically largest string is \u201cbac\u201d. Hence, the answer is \u201cbac\u201d in this case.\n\nFor the second test case,\nAll possible strings constructed by merging \u201cca\u201d and \u201cab\u201d while maintaining the order of characters are \u201ccaab\u201d, \u201ccaba\u201d, \u201cacab\u201d, \u201cacba\u201d and \u201cabca\u201d, among them the lexicographically largest string is \u201ccaba\u201d. Hence, the answer is \u201ccaba\u201d in this case.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nbad \ncab\ndba \neca\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>cbadab\nedcbaa\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `str1` and `str2`, construct the lexicographically largest string by merging them.  The order of characters within each original string must be preserved in the merged string. Determine the lexicographically largest merged string.",
                "constraints": [
                    "1 <= |str1| <= 3000",
                    "1 <= |str2| <= 3000",
                    "Strings `str1` and `str2` contain lowercase English letters only."
                ],
                "testcases": [
                    {
                        "input": "str1 = \"ac\", str2 = \"b\"",
                        "output": "bac",
                        "explanation": "Possible merged strings are \"abc\", \"acb\", and \"bac\".  \"bac\" is the lexicographically largest."
                    },
                    {
                        "input": "str1 = \"ca\", str2 = \"ab\"",
                        "output": "caba",
                        "explanation": "Possible merged strings are \"caab\", \"caba\", \"acab\", \"acba\", and \"abca\". \"caba\" is the lexicographically largest."
                    },
                    {
                        "input": "str1 = \"bad\", str2 = \"cab\"",
                        "output": "cbadab",
                        "explanation": "One possible optimal merging."
                    },
                    {
                        "input": "str1 = \"dba\", str2 = \"eca\"",
                        "output": "edcbaa",
                        "explanation": "One possible optimal merging."
                    },
                    {
                        "input": "str1 = \"\", str2 = \"abc\"",
                        "output": "abc",
                        "explanation": "If one string is empty, the other string is the lexicographically largest merge."
                    },
                    {
                        "input": "str1 = \"abc\", str2 = \"\"",
                        "output": "abc",
                        "explanation": "If one string is empty, the other string is the lexicographically largest merge."
                    },
                    {
                        "input": "str1 = \"aaaa\", str2 = \"bbbb\"",
                        "output": "bbaaabbaabba",
                        "explanation": "Test case with similar characters in both strings."
                    },
                    {
                        "input": "str1 = \"z\", str2 = \"a\"",
                        "output": "za",
                        "explanation": "Simple test case with strings of length 1."
                    },
                    {
                        "input": "str1 = \"abc\", str2 = \"xyz\"",
                        "output": "xyzabc",
                        "explanation": "Test with distinct characters"
                    },
                    {
                        "input": "str1 = \"leetcode\", str2 = \"coding\"",
                        "output": "leetcodecoding",
                        "explanation": "A more complex test case"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a recursive approach to find the lexicographically largest string constructed by merging both strings?</p>",
            "<p>Build the result character by character.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}