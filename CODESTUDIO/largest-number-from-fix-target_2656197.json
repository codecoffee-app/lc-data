{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15620,
            "title": "Largest Number From Fix Target",
            "titleSlug": "largest-number-from-fix-target_2656197",
            "content": "<h4 id=\"one-day-mikasa-went-to-the-number-shop-where-she-wanted-to-buy-some-numbers-she-has-n-coins-and-for-each-number-from-1-to-9-the-cost-is-x1-x2-x9-respectively-she-wants-to-buy-some-numbers-using-exactly-n-coins-such-that-on-concatenating-these-numbers-she-get-the-largest-possible-number-help-mikasa-to-find-the-largest-possible-number\">One day Mikasa went to \u201cThe Number Shop\u201d where she wanted to buy some numbers. She has \u2018N\u2019 coins and for each number from 1 to 9, the cost is x1, x2,... x9, respectively. She wants to buy some numbers using exactly \u2018N\u2019 coins such that on concatenating these numbers she get the largest possible number. Help Mikasa to find the largest possible number.</h4>\n\n<h4 id=\"if-there-is-no-way-possible-print-1\">If there is no way possible, print -1.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>\u2018N\u2019 = 5, cost: {2, 3, 1, 2, 4, 1, 5, 77, 4}\n\nFor the given example, the largest possible value that can be formed is 66666. As the cost of each 5 is 1 and we have a total of 5 coins. Hence the answer is 66666.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the total number of coins Mikasa has.\n\nThe second line of the test case contains 9 integers denoting the cost of every number from 1 to 9.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer denoting the largest possible number.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10    \n1 &lt;= N &lt;= 1000\n1 &lt;= coins[i] &lt;= 1000\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n17\n7 2 5 3 5 4 6 4 8\n15\n9 11 10 12 8 13 19 21 14\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>42222222\n-1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>In the first test case, We can take seven 2\u2019s and one 4 to make the total cost equal to 3 + 2 + 2 + 2 + 2 + 2 + 2 + 2 = 17. Hence the answer is 42222222. \n\nIn the second test case, None of the combinations of coins can lead to the cost of 15. So Mikasa will not buy any number. Hence the answer is -1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4\n1 2 4 7 8 1 1 4 7 \n3\n7 4 8 1 9 6 2 1 7\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>7777\n888\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Mikasa visits a number shop with 'N' coins. Each digit from 1 to 9 has a cost (x1, x2, ..., x9). The goal is to find the largest possible number Mikasa can form by concatenating digits, using exactly 'N' coins. If no combination is possible, return -1.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 1000",
                    "1 <= coins[i] <= 1000",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "17\n7 2 5 3 5 4 6 4 8",
                        "output": "42222222",
                        "explanation": "The optimal solution is to buy seven '2's (cost 2 each) and one '4' (cost 3), totaling 17 coins. Concatenating them results in 42222222."
                    },
                    {
                        "input": "15\n9 11 10 12 8 13 19 21 14",
                        "output": "-1",
                        "explanation": "No combination of digits can sum up to exactly 15 using the given costs."
                    },
                    {
                        "input": "4\n1 2 4 7 8 1 1 4 7",
                        "output": "7777",
                        "explanation": "Four '1's can be purchased at a total cost of 4, resulting in '7777'."
                    },
                    {
                        "input": "3\n7 4 8 1 9 6 2 1 7",
                        "output": "888",
                        "explanation": "Three '1's can be purchased at a total cost of 3, resulting in '888'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The approach is similar to the coin change problem, the only difference is the number could be very large, so we have to compare the strings.</p>",
            "<p>There can be many repetitive calculations in the recursive solution, which can be skipped by storing them while computing for the first time</p>",
            "<p>Iterate through all the coins in a bottom-up fashion and store the answer in \u2018dp\u2019 array</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}