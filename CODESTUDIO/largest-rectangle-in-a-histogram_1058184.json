{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9476,
            "title": "Largest rectangle in a histogram",
            "titleSlug": "largest-rectangle-in-a-histogram_1058184",
            "content": "<h4 id=\"you-have-been-given-an-array-list-heights-of-length-n-heights-represents-the-histogram-and-each-element-of-heights-represents-the-height-of-the-histogram-bar-consider-that-the-width-of-each-histogram-is-1\">You have been given an array/list &#39;HEIGHTS&#39; of length \u2018N. &#39;HEIGHTS&#39; represents the histogram and each element of &#39;HEIGHTS&#39; represents the height of the histogram bar. Consider that the width of each histogram is 1.</h4>\n\n<h4 id=\"you-are-supposed-to-return-the-area-of-the-largest-rectangle-possible-in-the-given-histogram\">You are supposed to return the area of the largest rectangle possible in the given histogram.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>In the below histogram where array/list elements are {2, 1, 5, 6, 2, 3}.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/histogram-6831.PNG\" alt=\"alt text\"></p>\n\n<pre><code>The area of largest rectangle possible in the given histogram is 10.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of elements in the array/list.\n\nThe second line contains \u2018N\u2019 single space-separated integers denoting the elements of the array/list.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print an integer denoting the area of the largest rectangle possible in the given histogram.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^6\n0 &lt;= HEIGHTS[i] &lt;= 10^9\n\nWhere \u2018T\u2019 is the number of test cases.\n&#39;N&#39; is the length of the given array/list.\nAnd, HEIGHTS[i] denotes the height of the &#39;ith&#39; histogram bar.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n10\n1 0 1 2 2 2 2 1 0 2 \n10\n1 2 1 0 1 1 0 0 2 2 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>8\n4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>In the first test case, the area of the largest rectangle of the given histogram is 8 in the rectangle starting from index 4 to index 7 in the given array/list.\n\nIn the second test case, the area of the largest rectangle of the given histogram is 4 in the rectangle starting from index 9 to index 10 in the given array/list.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n10\n8 6 3 5 0 0 4 10 2 5 \n10\n6 1 8 10 5 7 0 4 5 8 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>12\n20\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h5>\n\n<pre><code>In the first test case, the area of the largest rectangle of the given histogram is 12.\n\nIn the second test case, the area of the largest rectangle of the given histogram is 20.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 157,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `HEIGHTS` representing the heights of bars in a histogram, where each bar has a width of 1, find the area of the largest rectangle that can be formed within the histogram.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^6",
                    "0 <= HEIGHTS[i] <= 10^9",
                    "Where \u2018T\u2019 is the number of test cases.",
                    "\u2018N\u2019 is the length of the given array/list.",
                    "And, HEIGHTS[i] denotes the height of the 'ith' histogram bar.",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "10\n1 0 1 2 2 2 2 1 0 2",
                        "output": "8",
                        "explanation": "The largest rectangle has an area of 8, spanning from index 4 to 7."
                    },
                    {
                        "input": "10\n1 2 1 0 1 1 0 0 2 2",
                        "output": "4",
                        "explanation": "The largest rectangle has an area of 4, spanning from index 9 to 10."
                    },
                    {
                        "input": "10\n8 6 3 5 0 0 4 10 2 5",
                        "output": "12",
                        "explanation": "The largest rectangle has an area of 12."
                    },
                    {
                        "input": "10\n6 1 8 10 5 7 0 4 5 8",
                        "output": "20",
                        "explanation": "The largest rectangle has an area of 20."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Consider all bars as starting points and calculate areas of all the corresponding rectangles.</p>",
            "<p>Can you think of reducing the number of iterations?</p>",
            "<p>Try to think of an approach using a segment tree.</p>",
            "<p>Can you think of using a stack?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity = O(N)\r\n    Space Complexity = O(N)\r\n    \r\n    Where N is the number of elements in the given array/list.\r\n*/\r\n\r\n#include <stack>\r\n\r\nint largestRectangle(vector < int > & heights) {\r\n\r\n    int n = heights.size();\r\n\r\n    /* \r\n      The stack holds indexes of heights[] array.\r\n      The bars stored in stack are always in \r\n      increasing order of their heights.\r\n    */\r\n    stack < int > s;\r\n\r\n    // Initialize max area.\r\n    int maxArea = 0;\r\n\r\n    // To store top of stack.\r\n    int topOfStack;\r\n\r\n    // To store area with top bar as the smallest bar.\r\n    int areaWithTop;\r\n\r\n    // Run through all bars of given histogram.\r\n    int i = 0;\r\n    while (i < n) {\r\n        /* \r\n            If this bar is higher than the bar on top stack, \r\n            push it to stack\r\n        */\r\n        if (s.empty() || heights[s.top()] <= heights[i]) {\r\n            s.push(i++);\r\n        }\r\n        /* \r\n            If this bar is lower than top of stack, \r\n            then calculate area of rectangle with stack top.\r\n        */\r\n        else {\r\n            topOfStack = s.top();\r\n            s.pop();\r\n\r\n            /*\r\n                Calculate the area with heights[topOfStack] \r\n                stack as smallest bar.\r\n            */\r\n            if (s.empty()) {\r\n                areaWithTop = heights[topOfStack] * i;\r\n            } else {\r\n                areaWithTop = heights[topOfStack] * (i - s.top() - 1);\r\n            }\r\n\r\n            // Update max area, if needed.\r\n            if (maxArea < areaWithTop) {\r\n                maxArea = areaWithTop;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* \r\n      Now pop the remaining bars from stack and calculate\r\n      area with every popped bar as the smallest bar.\r\n    */\r\n    while (s.empty() == false) {\r\n        topOfStack = s.top();\r\n        s.pop();\r\n\r\n        if (s.empty()) {\r\n            areaWithTop = heights[topOfStack] * i;\r\n        } else {\r\n            areaWithTop = heights[topOfStack] * (i - s.top() - 1);\r\n        }\r\n\r\n        if (maxArea < areaWithTop) {\r\n            maxArea = areaWithTop;\r\n        }\r\n    }\r\n\r\n    return maxArea;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity = O(N)\r\n    Space Complexity = O(N)\r\n    \r\n    Where N is the number of elements in the given array/list.\r\n'''\r\n\r\ndef largestRectangle(heights):\r\n\r\n    n = len(heights)\r\n\r\n    ''' \r\n        The stack holds indexes of heights[] array. \r\n        The bars stored in stack are always in increasing \r\n        order of their heights.\r\n    '''\r\n    stack = list()\r\n\r\n    # Initialize max area.\r\n    maxArea = 0\r\n\r\n    # To store top of stack.\r\n    topOfStack = 0\r\n\r\n    # To store area with top bar as the smallest bar.\r\n    areaWithTop = 0\r\n\r\n    # Run through all bars of given histogram.\r\n    i = 0\r\n    while i < n:\r\n        ''' \r\n            If this bar is higher than the bar on top stack, \r\n            push it to stack.\r\n        '''\r\n        if len(stack) == 0 or (heights[stack[-1]] <= heights[i]):\r\n            stack.append(i)\r\n            i += 1\r\n    \r\n        else:\r\n            topOfStack = stack.pop()\r\n\r\n            ''' \r\n                Calculate the area with heights[topOfStack] \r\n                stack as smallest bar.\r\n            '''\r\n            if len(stack) == 0:\r\n                areaWithTop = heights[topOfStack] * i\r\n        \r\n            else:\r\n                areaWithTop = heights[topOfStack] * (i - stack[-1] - 1)\r\n        \r\n\r\n            # Update max area, if needed.\r\n            if maxArea < areaWithTop:\r\n                maxArea = areaWithTop\r\n    \r\n    ''' \r\n        Now pop the remaining bars from stack and \r\n        calculate area with every popped \r\n        bar as the smallest bar.\r\n    '''\r\n    while len(stack) != 0:\r\n        topOfStack = stack.pop()\r\n\r\n        if len(stack) == 0:\r\n            areaWithTop = heights[topOfStack] * i\r\n    \r\n        else:\r\n            areaWithTop = heights[topOfStack] * (i - stack[-1] - 1)\r\n\r\n        if maxArea < areaWithTop:\r\n            maxArea = areaWithTop\r\n    \r\n\r\n    return maxArea",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity = O(N)\r\n    Space Complexity = O(N)\r\n\r\n    Where N is the number of elements in the given array/list.\r\n*/\r\n\r\nimport java.util.Stack;\r\nimport java.util.ArrayList;\r\nimport java.util.LinkedList;\r\n\r\npublic class Solution {\r\n    public static int largestRectangle(ArrayList < Integer > heights) {\r\n\r\n        int n = heights.size();\r\n\r\n        /*\r\n            The stack holds indexes of heights[] array. \r\n            The bars stored in stack are always in \r\n            increasing order of their heights.\r\n        */\r\n        Stack < Integer > s = new Stack < Integer > ();\r\n\r\n        // Initialize max area.\r\n        int maxArea = 0;\r\n\r\n        // To store top of stack.\r\n        int topOfStack;\r\n\r\n        // To store area with top bar as the smallest bar.\r\n        int areaWithTop;\r\n\r\n        // Run through all bars of given histogram.\r\n        int i = 0;\r\n\r\n        while (i < n) {\r\n            /* \r\n              If this bar is higher than \r\n              the bar on top stack, push it to stack.\r\n            */\r\n            if (s.isEmpty() || heights.get(s.peek()) <= heights.get(i)) {\r\n                s.push(i++);\r\n            }\r\n            /* \r\n              If this bar is lower than top of stack, \r\n              then calculate area of rectangle with stack top.\r\n            */\r\n            else {\r\n                topOfStack = s.peek();\r\n                s.pop();\r\n\r\n                /* \r\n                  Calculate the area with heights[topOfStack] \r\n                  stack as smallest bar.\r\n                */\r\n                if (s.isEmpty()) {\r\n                    areaWithTop = heights.get(topOfStack) * i;\r\n                } else {\r\n                    areaWithTop = heights.get(topOfStack) * (i - s.peek() - 1);\r\n                }\r\n\r\n                // Update max area, if needed.\r\n                if (maxArea < areaWithTop) {\r\n                    maxArea = areaWithTop;\r\n                }\r\n            }\r\n        }\r\n\r\n        /*\r\n            Now pop the remaining bars from stack and calculate \r\n            area with every popped bar as the smallest bar.\r\n        */\r\n        while (s.isEmpty() == false) {\r\n            topOfStack = s.peek();\r\n            s.pop();\r\n\r\n            if (s.isEmpty()) {\r\n                areaWithTop = heights.get(topOfStack) * i;\r\n            } else {\r\n                areaWithTop = heights.get(topOfStack) * (i - s.peek() - 1);\r\n            }\r\n\r\n            if (maxArea < areaWithTop) {\r\n                maxArea = areaWithTop;\r\n            }\r\n        }\r\n\r\n        return maxArea;\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}