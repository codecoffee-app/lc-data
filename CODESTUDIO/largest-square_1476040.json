{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12818,
            "title": "Largest Square",
            "titleSlug": "largest-square_1476040",
            "content": "<h4 id=\"you-are-given-a-binary-grid-containing-only-0s-and-1s-you-are-also-given-an-integer-k-and-you-are-asked-q-queries-in-each-query-you-are-given-the-location-of-a-cell-for-each-query-you-need-to-find-the-largest-square-containing-at-most-k-1s-and-having-its-center-as-the-cell-given-in-the-query\">You are given a binary grid containing only 0s and 1s. You are also given an integer, \u2018K\u2019 and you are asked \u2018Q\u2019 queries. In each query, you are given the location of a cell. For each query, you need to find the largest square containing at most \u2018K\u2019 1s and having its center as the cell given in the query.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019, which denotes the number of test cases to be run. Then, the T test cases follow. \n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019 and \u2018M\u2019, where \u2018N\u2019 and \u2018M\u2019 denote the dimensions of the binary grid. Then \u2018N\u2019 lines follow.\n\nEach of these \u2018N\u2019 lines contains \u2018M\u2019 space-separated integers denoting the elements of the \u2018i-th\u2019 row. Each of these integers is either a 0 or a 1.\n\nThe next line contains two space-separated integers, \u2018K\u2019 and \u2018Q\u2019, where \u2018K\u2019 denotes the maximum number of 1s that a square can have and \u2018Q\u2019 denotes the number of queries to be run. Now, \u2018Q\u2019 lines follow.\n\nEach of these \u2018Q\u2019 lines contains two space-separated integers, \u2018A\u2019 and \u2018B\u2019, denoting that in this query, the required square must have the cell located at \u2018A-th\u2019 row and \u2018B-th\u2019 column as its center.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print \u2018Q\u2019 space-separated integers, denoting the length of the largest required square in each query.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N,M &lt;= 500\n1 &lt;= Q &lt;= 1000\n1 &lt;= K &lt;= N*M\n\nWhere \u2018T\u2019 denotes the number of test cases and \u2018N\u2019 and \u2018M\u2019 denote the dimensions of the binary grid. \u2018Q\u2019 denotes the number of queries and \u2018K\u2019 is the maximum number of 1s that the required square can have.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n4 4\n1 0 0 0 \n0 1 0 0 \n1 0 1 0 \n0 1 1 0\n2 2\n1 1\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>In the given test case, the value of \u2018K\u2019 is 2. \n\nFor the first query, the center given is (1, 1). The (1, 1) cell has 1 so the total count of 1s in this square remains 1 which is less than \u2018K\u2019. The next bigger square is of length 3 whose top-left cell is (0, 0) and the bottom-right cell is (2, 2). The total number of 1s in this square is 4 which is more than \u2018K\u2019 so we can\u2019t consider this square and hence, the result for this query will be 1.  \n\nIn the second query, the center given is (1, 2). If we consider the square whose top-left cell is (0, 1) and bottom-right cell is (2, 3), then the number of 1s in this square will be 2 which is equal to \u2018K\u2019. We can not choose a bigger square because there is no bigger square possible, having its center at (1, 2). So, the answer to this query will be 3.\n</code></pre>\n\n<p>. </p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n5 5\n1 0 0 0 0\n0 0 0 0 0\n1 0 0 0 0\n0 0 0 0 1\n1 0 0 0 0\n4 1\n2 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>In the given test case, the value of \u2018K\u2019 is 4. \n\nFor the first query, we take (2, 2) as the center. If we consider the square whose top-left cell is (0, 0) and bottom-right cell is (4, 4), then the number of 1s in this square will be 4 which is equal to \u2018K\u2019. We can not choose a bigger square because there is no bigger square possible, having its center at (2, 2). So, the answer to this query will be 5 as this is the length of the required square.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary grid of 0s and 1s, and an integer 'K', process 'Q' queries. For each query, determine the side length of the largest square subgrid, centered at a given cell, that contains at most 'K' ones.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N, M <= 500",
                    "1 <= Q <= 1000",
                    "1 <= K <= N*M"
                ],
                "testcases": [
                    {
                        "input": "grid = [[1, 0, 0, 0], [0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 1, 0]], queries = [[1, 1], [1, 2]], k = 2, n = 4, m = 4, q = 2",
                        "output": "1 3",
                        "explanation": "For the first query, center is (1, 1). The largest square is of size 1. For the second query, center is (1, 2). The largest square is of size 3."
                    },
                    {
                        "input": "grid = [[1, 0, 0, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 0, 1], [1, 0, 0, 0, 0]], queries = [[2, 2]], k = 4, n = 5, m = 5, q = 1",
                        "output": "5",
                        "explanation": "For the first query, center is (2, 2). The largest possible square (5x5) contains 4 ones, which is less than or equal to k = 4."
                    },
                    {
                        "input": "grid = [[1, 1, 1], [1, 1, 1], [1, 1, 1]], queries = [[1, 1]], k = 2, n = 3, m = 3, q = 1",
                        "output": "1",
                        "explanation": "For the query with center (1,1) with k=2, the largest square will be of size 1 since any square of size 3 will have more than two 1s."
                    },
                    {
                        "input": "grid = [[0,0,0],[0,0,0],[0,0,0]], queries = [[1,1]], k=1, n=3, m=3, q=1",
                        "output": "3",
                        "explanation": "Grid contains all 0s. The query centered at (1,1) can have a square of size 3x3 as it contains 0 ones (<= k)"
                    },
                    {
                        "input": "grid = [[1]], queries = [[0,0]], k = 1, n = 1, m = 1, q = 1",
                        "output": "1",
                        "explanation": "Single cell grid, center at (0,0), square of size 1 contains 1 one (<=k)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><i>Solve each query independently.&nbsp;</i></p>",
            "<p><i>Use some precalculations to find out the number of 1s in any square efficiently</i></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}