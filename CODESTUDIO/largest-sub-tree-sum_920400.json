{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8849,
            "title": "Largest sub-tree sum",
            "titleSlug": "largest-sub-tree-sum_920400",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-integers-you-are-supposed-to-return-the-largest-subtree-sum-in-the-given-binary-tree\">You have been given a Binary Tree of integers. You are supposed to return the largest subtree sum in the given Binary Tree.</h4>\n\n<h4 id=\"the-subtree-sum-of-a-node-is-defined-as-the-sum-of-all-the-node-values-formed-by-the-subtree-rooted-at-that-node-including-the-node-itself\">The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>For the given binary tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binarytree-6171.png\" alt=\"Example\"></p>\n\n<pre><code>Subtree with the largest sum is highlighted in the above image. The sum is (-2 + 4 + 7) = 9\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases. \n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>The input for the tree depicted in the below image would be :\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<h4 id=\"explanation\">Explanation:</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\n2. The input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return an integer which denotes the largest subtree sum in the given binary tree.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n0 &lt;= N &lt;= 10000\n-10^3 &lt;= data &lt;= 10^3 and data != -1\n\nWhere \u2018N\u2019 is the total number of nodes in the binary tree, and &#39;data&#39; is the value of the binary tree node.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1 -2 3 4 7 -9 2 -1 -1 -1 -1 -1 -1 -1 -1\n1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>9\n6\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code> In test case 1,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binarytree-6171.png\" alt=\"Example\"></p>\n\n<pre><code>Subtree with the largest sum is highlighted in the above image. The sum is (-2 + 4 + 7) = 9\n\nIn test case 2, the subtree with the largest sum is the tree itself. The sum is (1 + 2 + 3) = 6.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n-2 -4 1 -5 -1 -1 -1 -1 -1\n-10 8 11 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n11\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2:</h5>\n\n<pre><code>In test case 1, the largest subtree sum will be formed by just selecting the node with value 1 and thus the largst subtree sum is 1.\n\nIn test case 2, the largest subtree sum will be formed by just selecting the node with value 11 and thus the largst subtree sum is 11.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of integers, find the largest subtree sum. The subtree sum of a node is the sum of all node values in the subtree rooted at that node, including the node itself.",
                "constraints": [
                    "1 <= T <= 50",
                    "0 <= N <= 10000",
                    "-10^3 <= data <= 10^3 and data != -1",
                    "Where \u2018N\u2019 is the total number of nodes in the binary tree, and 'data' is the value of the binary tree node.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 -2 3 4 7 -9 2 -1 -1 -1 -1 -1 -1 -1 -1\n1 2 3 -1 -1 -1 -1",
                        "output": "9\n6",
                        "explanation": "Test case 1: The largest subtree sum is (-2 + 4 + 7) = 9.\nTest case 2: The largest subtree sum is (1 + 2 + 3) = 6."
                    },
                    {
                        "input": "-2 -4 1 -5 -1 -1 -1 -1 -1\n-10 8 11 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "1\n11",
                        "explanation": "Test case 1: The largest subtree sum is 1 (the node itself).\nTest case 2: The largest subtree sum is 11 (the node itself)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of considering all the subtree sum?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}