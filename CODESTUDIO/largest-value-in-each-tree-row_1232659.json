{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10557,
            "title": "Largest Value In Each Tree Row",
            "titleSlug": "largest-value-in-each-tree-row_1232659",
            "content": "<h4 id=\"you-have-been-given-the-root-of-a-binary-tree-having-n-nodes-you-need-to-find-the-largest-value-in-each-row-or-level-of-the-binary-tree\">You have been given the \u2018ROOT\u2019 of a binary tree having \u2018N\u2019 nodes, you need to find the largest value in each row or level of the binary tree.</h4>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<p><img src=\"https://files.codingninjas.in/graph-2-8280.png\" alt=\"Tree\"></p>\n\n<pre><code>For the above binary tree, \nMax value at level 0 = 6.\nMax value at level 1 = max(9 , 3) = 9\nMax value at level 2 = max (4, 8, 2) = 8\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases.     \n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-input-format-2-8282.png\" alt=\"Tree\"></p>\n\n<pre><code>For example, the input for the tree depicted in the above  image would be :\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test, Print the maximum value at each row of the binary tree.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n0 &lt;= N &lt;= 10^3\n1 &lt;= DATA &lt;= 10^4\n\n&#39;DATA&#39; is the value of the binary tree node.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n13 10 7 4 9 -1 -1 -1 -1 -1 -1\n6 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>13 10 9\n6\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>Test Case 1: The tree given in this case looks like this:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample-input1-2-8281.png\" alt=\"Tree\"></p>\n\n<pre><code>We can see clearly that the maximum value in the First row = 13, Second row = 10, and in the third row = 9.  \n\nTest Case 2: There is only one node in the tree. Therefore the only 0-th level has a maximum value = 6. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n11 17 21 -1 -1 -1 -1\n2 8 14 -1 7 -1 -1 5 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>11 21\n2 14 7 5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2:</h5>\n\n<pre><code>Test Case 1: We can see clearly that the maximum value in the First row = 11 and Second row = 21.  \n\nTest Case 2: We can see clearly that the maximum value in the First row = 2, Second row = 14, Third Row = 7 and Last Row = 5.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a binary tree, find the largest value present in each level (row) of the tree. Return a vector containing these maximum values, where each element represents the maximum value of the corresponding level.",
                "constraints": [
                    "1 <= T <= 50",
                    "0 <= N <= 10^3",
                    "1 <= DATA <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "root = [13, 10, 7, 4, 9, -1, -1, -1, -1, -1, -1]",
                        "output": "13 10 9",
                        "explanation": "The tree has the following structure:\n\n      13\n     /  \\\n    10   7\n   /  \\\n  4   9\n\nLevel 0: Max value = 13\nLevel 1: Max value = max(10, 7) = 10\nLevel 2: Max value = max(4, 9) = 9"
                    },
                    {
                        "input": "root = [6, -1, -1]",
                        "output": "6",
                        "explanation": "The tree has only the root node with value 6. Thus, only Level 0 exists, and its maximum value is 6."
                    },
                    {
                        "input": "root = [11, 17, 21, -1, -1, -1, -1]",
                        "output": "11 21",
                        "explanation": "The tree has the following structure:\n\n      11\n     /  \\\n   17   21\n\nLevel 0: Max value = 11\nLevel 1: Max value = max(17, 21) = 21"
                    },
                    {
                        "input": "root = [2, 8, 14, -1, 7, -1, -1, 5, -1, -1, -1]",
                        "output": "2 14 7 5",
                        "explanation": "The tree has the following structure:\n\n      2\n    /  \\\n   8   14\n  /  \\\n 5   7 \n\nLevel 0: Max value = 2\nLevel 1: Max value = 14\nLevel 2: Max value = 7\nLevel 3: Max value = 5"
                    },
                    {
                        "input": "root = [1, 2, 3, 4, -1, 5, 6, -1, 7, -1, -1, -1, -1, -1, -1]",
                        "output": "1 3 8",
                        "explanation": "The tree has the following structure:\n\n      1\n     /  \\\n    2   3\n   /  \\ /  \\\n 4  -1 5   6\n/ \\ \n-1 7\n\nLevel 0: Max value = 1\nLevel 1: Max value = 3\nLevel 2: Max value = 6\n"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to iterate over all the max possible node in one go.</p>",
            "<p>Try to think of traversing a tree with nearby neighbours.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}