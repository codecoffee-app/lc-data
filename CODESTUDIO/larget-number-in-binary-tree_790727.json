{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7848,
            "title": "Larget Number in Binary Tree",
            "titleSlug": "larget-number-in-binary-tree_790727",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-n-nodes-where-the-nodes-have-integer-values\">You have been given a Binary Tree of &#39;N&#39; nodes where the nodes have integer values.</h4>\n\n<h4 id=\"your-task-is-to-find-the-largest-number-that-could-be-formed-by-concatenating-all-its-nodes-values\">Your task is to find the largest number that could be formed by concatenating all its nodes values.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>For the given binary tree:   \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-5261.jpg\" alt=\"tree example\"></p>\n\n<pre><code>Output: 96553210    \n\nExplanation: After concatenating all the numbers in the above binary tree this is the largest number that can be formed. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer &#39;T&#39;, representing the number of test cases. \n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nExample: \nThe input for the tree depicted in the below image would be:\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The first node that is not null (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on. The input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the integer that represents the largest number that could be formed by concatenating all its nodes given in a Binary Tree.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n0 &lt;= N &lt;= 10^4\n0 &lt;= data &lt;= 10^3    \n\nWhere &#39;N&#39; denotes the total number of nodes and &#39;data&#39; denotes the node value of the Binary Tree.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 -1 -1 -1 -1\n6 4 -1 -1 5 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>321\n654\n</code></pre>\n\n<h5 id=\"explanation-to-sample-output-1\">Explanation to Sample Output 1:</h5>\n\n<pre><code>In test case 1, the input Binary Tree will be represented as:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/largestbt1-10343.png\" alt=\"example\"></p>\n\n<pre><code>From all possible permutations of concatenated integers in the above Binary Tree, the largest number possible is 321.  \n\nIn test case 2, the input Binary Tree will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/largestbt2-10344.png\" alt=\"Example\"></p>\n\n<pre><code>From all possible permutations of concatenated integers in the above Binary Tree, the largest number possible is 654.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 2 3 -1 4 4 -1 -1 5 6 -1 -1 -1 -1 -1\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>6544321\n7654321\n</code></pre>\n\n<h5 id=\"explanation-to-sample-output-2\">Explanation to Sample Output 2:</h5>\n\n<pre><code>In test case 1, the input Binary Tree will be represented as:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/Tree%287403%29-4671.png\" alt=\"alt-text\"></p>\n\n<pre><code>From all possible permutations of concatenated integers in the above Binary Tree, the largest number possible is 6544321.  \n\nIn test case 2, the input Binary Tree will be represented as shown in the Input Format section above. From all possible permutations of concatenated integers in the above Binary Tree, the largest number possible is 7654321.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 29,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of 'N' nodes with integer values, your task is to determine the largest possible number that can be formed by concatenating the values of all nodes in the tree. Implement a function that takes the root of the binary tree as input and returns the largest concatenated number as a string.",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "0 <= N <= 10^4 (Total number of nodes in the binary tree)",
                    "0 <= data <= 10^3 (Value of each node in the binary tree)"
                ],
                "testcases": [
                    {
                        "input": "root = [1, 2, 3, -1, -1, -1, -1]",
                        "output": "321",
                        "explanation": "The input binary tree can be visualized as:\n     1\n   /   \\\n  2     3\n From all possible permutations of concatenated integers in the above Binary Tree, the largest number possible is 321."
                    },
                    {
                        "input": "root = [6, 4, -1, -1, 5, -1, -1]",
                        "output": "654",
                        "explanation": "The input binary tree can be visualized as:\n     6\n   /   \\\n  4     5\n From all possible permutations of concatenated integers in the above Binary Tree, the largest number possible is 654."
                    },
                    {
                        "input": "root = [1, 2, 3, -1, 4, 4, -1, -1, 5, 6, -1, -1, -1, -1, -1]",
                        "output": "6544321",
                        "explanation": "The input binary tree can be visualized as:\n        1\n      /   \\\n     2     3\n      \\   /\n       4 4\n      /   \\\n     5     6\nFrom all possible permutations of concatenated integers in the above Binary Tree, the largest number possible is 6544321."
                    },
                    {
                        "input": "root = [1, 2, 3, 4, -1, 5, 6, -1, 7, -1, -1, -1, -1, -1, -1]",
                        "output": "7654321",
                        "explanation": "The input binary tree can be visualized as:\n         1\n       /   \\\n      2     3\n    /   \\  /  \\\n   4   -1 5   6\n /   \\\n-1    7\nFrom all possible permutations of concatenated integers in the above Binary Tree, the largest number possible is 7654321."
                    },
                    {
                        "input": "root = [9,6,5,5,3,2,1,0]",
                        "output": "96553210",
                        "explanation": "Concatenating the nodes leads to the largest possible number: 96553210"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of storing node value in the data structure and sorting it.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}