{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12803,
            "title": "Last K Sized Group",
            "titleSlug": "last-k-sized-group_1475048",
            "content": "<h4 id=\"you-are-given-an-array-list-arr-containing-permutation-from-1-to-n-and-an-integer-k-you-have-a-binary-string-s-of-size-n-initialised-to-all-zeroes-you-perform-n-operations-on-s-as-follows\">You are given an array/list \u2018ARR\u2019 containing permutation from 1 to &#39;N&#39; and an integer \u2018K\u2019. You have a binary string \u2018S\u2019 of size \u2018N\u2019 initialised to all zeroes. You perform \u2018N\u2019 operations on &#39;S&#39; as follows:</h4>\n\n<pre><code>In the \u2018i-th\u2019 operation, you set the \u2018ARR[i]-th\u2019 bit of \u2018S\u2019 to \u20181\u2019. \n</code></pre>\n\n<h4 id=\"after-performing-each-operation-you-get-a-group-a-group-of-1s-is-a-substring-of-all-1s-in-s-which-can-not-be-extended-to-its-left-or-right-by-adding-1s\">After performing each operation, you get a &quot;group&quot;. A &quot;group&quot; of &#39;1s&#39;, is a substring of all &#39;1s&#39; in &#39;S&#39; which can not be extended to its left or right by adding &#39;1s&#39;.</h4>\n\n<h4 id=\"you-have-to-find-the-last-operation-when-there-was-a-group-of-size-exactly-k-if-the-group-of-size-k-was-never-present-then-return-1\">You have to find the last operation when there was a group of size exactly &#39;K&#39;. If the group of size &#39;K&#39; was never present, then return -1.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>Both &#39;ARR&#39; and &#39;S&#39; are 1 indexed. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain two space-separated integers, \u2018N\u2019 and &#39;K&#39;, which denotes the length of the permutation &#39;ARR&#39;, and the required size of the group, respectively. \n\nThe second line of each test case will contain &#39;N&#39; single space-separated integers, representing the permutation &#39;ARR&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the last operation when there was a group of size &#39;K&#39;, else print -1. \n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 100000\n1&lt;= K &lt;=N\n1&lt;= ARR[i] &lt;= N\n\n\nWhere \u2018T\u2019 is the number of test cases, &#39;N&#39; is the size of the permutation, &#39;K&#39; is the size of the required group, and &#39;ARR[i]&#39; is an element of the permutation.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 1\n1 3 2\n4 3\n2 1 4 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n-1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>In the first test case :\nAfter 1st operation, &#39;S&#39; = &quot;100&quot;. There is 1 group of size 1 from [1,1].\nAfter 2nd operation, &#39;S&#39; = &#39;&#39;101&quot;. There are 2 groups of size 1 from [1,1] and [3,3].\nAfter 3rd operation, &#39;S&#39; = &quot;111&quot;. There is one group of size 3 from [1,3].\nA group of size 1 was last present after the second move. \n\nIn the second test case :\nAfter 1st operation, &#39;S&#39; = &quot;0100&quot;. There is 1 group of size 1 from [2,2].\nAfter 2nd operation, &#39;S&#39; = &quot;1100&quot;. There is 1 groups of size 2 from [1,2]. \nAfter 3rd operation, &#39;S&#39; = &quot;1101&quot;. There is 1 group of size 2 from [1,2] and 1 of size 1 from [4,4].\nAfter 4th operation, &#39;S&#39; = &quot;1111&quot;. There is one group of size 4 from [1,4].\nGroup of size 3 was never present. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 1\n1\n7 7\n1 2 3 4 5 6 7      \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n7\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'ARR' of size 'N' representing a permutation of numbers from 1 to N, and an integer 'K', we have a binary string 'S' of length 'N' initialized with all zeros. In each of the 'N' operations, the 'ARR[i]-th' bit of 'S' is set to '1'. A 'group' is defined as a maximal substring of consecutive '1's in 'S'. The task is to find the last operation (index 'i') where a group of size exactly 'K' exists in 'S'. If a group of size 'K' never appears, return -1.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 100000",
                    "1 <= K <= N",
                    "1 <= ARR[i] <= N"
                ],
                "testcases": [
                    {
                        "input": "3 1\n1 3 2",
                        "output": "2",
                        "explanation": "Initially S = '000'.\nOperation 1: ARR[1] = 1, S = '100'. Group of size 1 at index 1.\nOperation 2: ARR[3] = 2, S = '101'. Groups of size 1 at indices 1 and 3.\nOperation 3: ARR[2] = 3, S = '111'. Group of size 3 at indices 1-3.\nThe last operation when a group of size 1 existed was operation 2."
                    },
                    {
                        "input": "4 3\n2 1 4 3",
                        "output": "-1",
                        "explanation": "Initially S = '0000'.\nOperation 1: ARR[1] = 2, S = '0100'. Group of size 1 at index 2.\nOperation 2: ARR[2] = 1, S = '1100'. Group of size 2 at indices 1-2.\nOperation 3: ARR[3] = 4, S = '1101'. Groups of size 2 at indices 1-2, and 1 at index 4.\nOperation 4: ARR[4] = 3, S = '1111'. Group of size 4 at indices 1-4.\nA group of size 3 was never present."
                    },
                    {
                        "input": "1 1\n1",
                        "output": "1",
                        "explanation": "Initially S = '0'.\nOperation 1: ARR[1] = 1, S = '1'. Group of size 1 at index 1.\nThe last operation when a group of size 1 existed was operation 1."
                    },
                    {
                        "input": "7 7\n1 2 3 4 5 6 7",
                        "output": "7",
                        "explanation": "Initially S = '0000000'.\nOperation 1: ARR[1] = 1, S = '1000000'.\nOperation 2: ARR[2] = 2, S = '1100000'.\nOperation 3: ARR[3] = 3, S = '1110000'.\nOperation 4: ARR[4] = 4, S = '1111000'.\nOperation 5: ARR[5] = 5, S = '1111100'.\nOperation 6: ARR[6] = 6, S = '1111110'.\nOperation 7: ARR[7] = 7, S = '1111111'. Group of size 7.\nThe last operation when a group of size 7 existed was operation 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we perform all the operations and merge two adjacent groups and create a bigger group?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}