{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14409,
            "title": " Last Person to Fit in the Bus",
            "titleSlug": "last-person-to-fit-in-the-bus_2122058",
            "content": "<h4 id=\"table-queue\">Table: <b>Queue</b></h4>\n\n<pre><code>+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| person_id          | int     |\n| person_name    | varchar |\n| weight                | int     |\n| turn                    | int     |\n+-------------+---------+\n</code></pre>\n\n<ul>\n<li>person_id is the primary key column for this table.</li>\n<li>This table has the information about all people waiting for a bus.</li>\n<li>The person_id and turn columns will contain all numbers from 1 to n, where n is the number of rows in the table.</li>\n<li>Turn determines the order of which the people will board the bus, where turn=1 denotes the first person to board and turn=n denotes the last person to board.</li>\n<li>weight is the weight of the person in kilograms.</li>\n</ul>\n\n<p><br></p>\n\n<h4 id=\"there-is-a-queue-of-people-waiting-to-board-a-bus-however-the-bus-has-a-weight-limit-of-1000-kilograms-so-there-may-be-some-people-who-cannot-board\">There is a queue of people waiting to board a bus. However, the bus has a weight limit of 1000 kilograms, so there may be some people who cannot board.</h4>\n\n<p><br></p>\n\n<h4 id=\"write-an-sql-query-to-find-the-person_name-of-the-last-person-that-can-fit-on-the-bus-without-exceeding-the-weight-limit-the-testcases-are-generated-such-that-the-first-person-does-not-exceed-the-weight-limit\">Write an SQL query to find the person_name of the last person that can fit on the bus without exceeding the weight limit. The testcases are generated such that the first person does not exceed the weight limit.</h4>\n\n<p><br></p>\n\n<h4 id=\"the-query-result-format-is-in-the-following-example-queue-table\">The query result format is in the following example: <b> Queue table:</b></h4>\n\n<pre><code>+-----------+-------------+--------+------+\n| person_id | person_name | weight | turn |\n+-----------+-------------+--------+------+\n| 5         | Alice       | 250    | 1    |\n| 4         | Bob         | 175    | 5    |\n| 3         | Alex        | 350    | 2    |\n| 6         | John Cena   | 400    | 3    |\n| 1         | Winston     | 500    | 6    |\n| 2         | Marie       | 200    | 4    |\n+-----------+-------------+--------+------+\n</code></pre>\n\n<h5 id=\"result-table\">Result table:</h5>\n\n<pre><code>+-------------+\n| person_name |\n+-------------+\n| John Cena   |\n+-------------+\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a queue of people with their names, weights, and boarding order (turn), determine the name of the last person who can board a bus without exceeding its 1000 kg weight limit. People board in ascending order of their 'turn' values. You are guaranteed that the first person in the queue can always board the bus.",
                "constraints": [
                    "1 <= Number of people in the queue (n) <= 100",
                    "1 <= Weight of each person <= 500",
                    "The first person's weight does not exceed 1000."
                ],
                "testcases": [
                    {
                        "input": "person_id=[5,4,3,6,1,2], person_name=['Alice','Bob','Alex','John Cena','Winston','Marie'], weight=[250,175,350,400,500,200], turn=[1,5,2,3,6,4]",
                        "output": "John Cena",
                        "explanation": "The first three people (Alice - 250, Alex - 350, John Cena - 400) can board. The total weight becomes 250 + 350 + 400 = 1000.  Marie (200) cannot board because that would exceed the weight limit. Bob and Winston also do not fit. Thus, the last person to board is John Cena."
                    },
                    {
                        "input": "person_id=[1,2,3,4,5], person_name=['A','B','C','D','E'], weight=[100,200,300,400,500], turn=[1,2,3,4,5]",
                        "output": "D",
                        "explanation": "A (100) boards. Total: 100.\nB (200) boards. Total: 300.\nC (300) boards. Total: 600.\nD (400) boards. Total: 1000.\nE (500) cannot board as it exceeds the limit."
                    },
                    {
                        "input": "person_id=[1,2,3], person_name=['A','B','C'], weight=[500,300,201], turn=[3,1,2]",
                        "output": "C",
                        "explanation": "B (300) boards first. Total: 300.\nC (201) boards second. Total: 501\nA (500) cannot board because it exceeds the limit. The last person to board is C."
                    },
                    {
                        "input": "person_id=[1,2,3], person_name=['A','B','C'], weight=[900,50,51], turn=[1,2,3]",
                        "output": "B",
                        "explanation": "A boards. Total: 900. B boards. Total: 950. C cannot board."
                    },
                    {
                        "input": "person_id=[1,2], person_name=['A','B'], weight=[1000,1], turn=[1,2]",
                        "output": "A",
                        "explanation": "A boards. total: 1000. B cannot board"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}