{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9249,
            "title": "LCA in a BST",
            "titleSlug": "lca-in-a-bst_981280",
            "content": "<h4 id=\"you-are-given-a-binary-search-tree-of-integers-with-n-nodes-you-are-also-given-references-to-two-nodes-p-and-q-from-this-bst\">You are given a binary search tree of integers with N nodes. You are also given references to two nodes <strong><em>&#39;P&#39;</em></strong> and <strong><em>&#39;Q&#39;</em></strong> from this BST.</h4>\n\n<p><Br></p>\n\n<h4 id=\"your-task-is-to-find-the-lowest-common-ancestor-lca-of-these-two-given-nodes\">Your task is to find the lowest common ancestor(LCA) of these two given nodes.</h4>\n\n<p><Br></p>\n\n<h4 id=\"the-lowest-common-ancestor-for-two-nodes-p-and-q-is-defined-as-the-lowest-node-that-has-both-p-and-q-as-descendants-where-we-allow-a-node-to-be-a-descendant-of-itself\">The lowest common ancestor for two nodes P and Q is defined as the lowest node that has both P and Q as descendants (where we allow a node to be a descendant of itself)</h4>\n\n<p><Br></p>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-which-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure which has the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<p><Br></p>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>&#39;P&#39; = 1, &#39;Q&#39; = 3\ntree = 2 1 4 -1 -1 3 -1 -1 -1,\n\nThe BST corresponding will be- \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image13-6336.png\" alt=\"\"></p>\n\n<pre><code>Here, we can clearly see that LCA of node 1 and node 3 is 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains two space-separated integers, &#39;P&#39; and &#39;Q&#39;, the nodes whose LCA we have to find.\n\nThe second line contains the elements of the BST in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The only line contains the LCA of &#39;P&#39; and &#39;Q&#39;.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3 5\n2 1 3 -1 -1 -1 5 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n</code></pre>\n\n<h4 id=\"explanation-for-sample-1\">Explanation for Sample 1:</h4>\n\n<pre><code>The BST corresponding will be-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/merge-11-6334.png\" alt=\"\"></p>\n\n<pre><code>Here, we can clearly see that LCA of node 3 and node 5 is 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1 2\n3 2 -1 1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;N&#39; &lt;= 10^5\n1 &lt;= Data &lt;= 10^6\n\nTime Limit: 1sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 68,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary search tree (BST) of integers with N nodes, and references to two nodes 'P' and 'Q' within the BST, find the lowest common ancestor (LCA) of 'P' and 'Q'. The LCA is defined as the lowest node in the tree that has both 'P' and 'Q' as descendants (including the possibility of a node being a descendant of itself).\n\nA binary search tree (BST) follows these properties:\n\n*   The left subtree of a node contains only nodes with data less than the node's data.\n*   The right subtree of a node contains only nodes with data greater than the node's data.\n*   Both the left and right subtrees must also be binary search trees.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= Data <= 10^6",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "3 5\n2 1 3 -1 -1 -1 5 -1 -1",
                        "output": "3",
                        "explanation": "The BST is structured as follows:\n\n      2\n     / \\\n    1   3\n         \\\n          5\n\nThe lowest common ancestor of nodes 3 and 5 is 3 because 3 is an ancestor of itself and 5."
                    },
                    {
                        "input": "1 2\n3 2 -1 1 -1 -1 -1",
                        "output": "2",
                        "explanation": "The BST is structured as follows:\n\n    3\n   / \n  2\n / \n1\n\nThe lowest common ancestor of nodes 1 and 2 is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to make use of the properties of the BST.</p>",
            "<p>Try to make use of the properties of the BST.</p>",
            "<p>Try to make use of the properties of the BST.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}