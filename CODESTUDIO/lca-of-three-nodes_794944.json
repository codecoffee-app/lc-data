{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7849,
            "title": "LCA of three Nodes",
            "titleSlug": "lca-of-three-nodes_794944",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-n-nodes-where-the-nodes-have-integer-values-and-three-integers-n1-n2-and-n3-find-the-lca-lowest-common-ancestor-of-the-three-nodes-represented-by-the-given-three-n1-n2-n3-integer-values-in-the-binary-tree\">You have been given a Binary Tree of &#39;N&#39; nodes where the nodes have integer values and three integers &#39;N1&#39;, &#39;N2&#39;, and &#39;N3&#39;. Find the LCA(Lowest Common Ancestor) of the three nodes represented by the given three(&#39;N1&#39;, &#39;N2&#39;, &#39;N3&#39;) integer values in the Binary Tree.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<p><img src=\"https://files.codingninjas.in/1-5311.png\" alt=\"\"></p>\n\n<pre><code>For the given binary tree: the LCA of (7,8,10) is 1\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>All of the node values of the binary tree will be unique.\n\nN1, N2, and N3  will always exist in the binary tree.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \n\nThen the T test cases follow. \n\nThe first line of each test case contains three single space-separated integers N1, N2, and N3, denoting the nodes of which LCA is to be calculated.\n\nThe second line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case,  return the node representing LCA.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n0 &lt;= node data &lt;= 10^9\n0 &lt;= N1 &lt;= 10^9\n0 &lt;= N2 &lt;= 10^9\n0 &lt;= N3 &lt;= 10^9\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n8 9 11\n1 2 3 4 5 6 7 8 9 -1 -1 -1 -1 -1 -1 10 -1 11 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n7 8 2\n1 2 3 4 5 6 7 8 9 -1 -1 -1 -1 -1 -1 10 -1 11 -1 -1 -1 -1 -1\n5 6 7\n1 2 3 4 5 6 7 8 9 -1 -1 -1 -1 -1 -1 10 -1 11 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-2\">Explanation to Sample Input 2:</h5>\n\n<pre><code>For both inputs, the binary tree will be represented as\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-5311.png\" alt=\"\"></p>\n\n<pre><code>For the first test case, the LCA of 7,8,2 in the given tree is 2 \n\nFor the second test case. the LCA of 5,6,7 in the given tree is 1,   \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"hints\">Hints:</h5>\n\n<pre><code>1. Think of finding LCA from the paths to all three nodes.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 5533,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with 'N' nodes, where each node has an integer value, and three integers 'N1', 'N2', and 'N3', find the Lowest Common Ancestor (LCA) of the three nodes with values 'N1', 'N2', and 'N3' in the tree. Assume all node values are unique, and 'N1', 'N2', and 'N3' will always exist in the binary tree.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "0 <= node data <= 10^9",
                    "0 <= N1 <= 10^9",
                    "0 <= N2 <= 10^9",
                    "0 <= N3 <= 10^9",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "8 9 11\n1 2 3 4 5 6 7 8 9 -1 -1 -1 -1 -1 -1 10 -1 11 -1 -1 -1 -1 -1",
                        "output": "4",
                        "explanation": null
                    },
                    {
                        "input": "7 8 2\n1 2 3 4 5 6 7 8 9 -1 -1 -1 -1 -1 -1 10 -1 11 -1 -1 -1 -1 -1",
                        "output": "1",
                        "explanation": "The binary tree is 1->(2,3), 2->(4,5), 3->(6,7), 4->(8,9), 6->(10), 7->(11). The LCA of 7, 8, and 2 is 1."
                    },
                    {
                        "input": "5 6 7\n1 2 3 4 5 6 7 8 9 -1 -1 -1 -1 -1 -1 10 -1 11 -1 -1 -1 -1 -1",
                        "output": "1",
                        "explanation": "The binary tree is 1->(2,3), 2->(4,5), 3->(6,7), 4->(8,9), 6->(10), 7->(11). The LCA of 5, 6, and 7 is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a recursive solution.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n    \r\n    Where N is the total nodes in binary tree.\r\n\r\n*/\r\n\r\nBinaryTreeNode<int>* lcaOfThreeNodes(BinaryTreeNode<int>* root, int node1, int node2, int node3) {\r\n    if (root == NULL) {\r\n        return NULL;\r\n    }\r\n\r\n    // Check if root is any of the three nodes.\r\n    if (root->data == node1 || root->data == node2 || root->data == node3) {\r\n        return root;\r\n    }\r\n\r\n    BinaryTreeNode<int>* left = lcaOfThreeNodes(root->left, node1, node2, node3);\r\n    BinaryTreeNode<int>* right = lcaOfThreeNodes(root->right, node1, node2, node3);\r\n\r\n    // If both subtree return not-Null value it means current node could be LCA.\r\n    if (left != NULL && right != NULL) {\r\n        return root;\r\n    }\r\n    // If left subbtree return not-null value then for now return node is LCA.\r\n    else if (left != NULL) {\r\n\r\n        return left;\r\n    }\r\n    // If right subbtree return not-null value then for now return node is LCA.\r\n    else {\r\n        return right;\r\n    }\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n\r\n\tTime Complexity: O(N)\r\n\tSpace Complexity: O(N)\r\n\t\r\n\tWhere N is the total nodes in binary tree.\r\n\r\n'''\r\n\r\nimport queue\r\nimport sys\r\nsys.setrecursionlimit(10**6)\r\n\r\nclass BinaryTreeNode:\r\n    \r\n    def __init__(self, data):\r\n        \r\n        self.data = data\r\n        self.left = None\r\n        self.right = None\r\n\r\ndef lcaOfThreeNodes(root, node1, node2, node3):\r\n    \r\n    if root == None:\r\n        \r\n        return None\r\n    \r\n    # Check if root is any of the three nodes.\r\n    \r\n    if (root.data == node1 or root.data == node2 or root.data == node3):\r\n        \r\n        return root\r\n    \r\n    left = lcaOfThreeNodes(root.left, node1, node2, node3)\r\n    right = lcaOfThreeNodes(root.right, node1, node2, node3)\r\n    \r\n    if(left != None and right != None):\r\n        return root\r\n    \r\n    elif(left != None):\r\n        return left\r\n    \r\n    else:\r\n        return right\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# Building the tree.\r\ndef buildLevelTree(levelorder):\r\n    \r\n    index = 0\r\n    length = len(levelorder)\r\n    \r\n    if length<=0 or levelorder[0]==-1:\r\n        return None\r\n    \r\n    \r\n    root = BinaryTreeNode(levelorder[index])\r\n    index += 1\r\n    \r\n    q = queue.Queue()\r\n    q.put(root)\r\n    \r\n    while not q.empty():\r\n        \r\n        currentNode = q.get()\r\n        leftChild = levelorder[index]\r\n        index += 1\r\n        \r\n        if leftChild != -1:\r\n            \r\n            leftNode = BinaryTreeNode(leftChild)\r\n            currentNode.left =leftNode\r\n            q.put(leftNode)\r\n            \r\n        rightChild = levelorder[index]\r\n        index += 1\r\n        \r\n        \r\n        if rightChild != -1:\r\n            \r\n            rightNode = BinaryTreeNode(rightChild)\r\n            currentNode.right =rightNode\r\n            q.put(rightNode)\r\n            \r\n            \r\n    return root\r\n    \r\nt = int(input())\r\nwhile t > 0:\r\n    arr = [int(i) for i in input().split()][:3]\r\n    li = [int(i) for i in input().split()]\r\n    root = buildLevelTree(li)\r\n    print(lcaOfThreeNodes(root, arr[0], arr[1], arr[2]).data)\r\n    t = t - 1\r\n        \r\n\r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n    \r\n    Where N is the total nodes in binary tree.\r\n\r\n*/\r\n\r\npublic class Solution {\r\n    public static BinaryTreeNode<Integer> lcaOfThreeNodes(BinaryTreeNode<Integer> root, int node1, int node2,\r\n            int node3) {\r\n\r\n        if (root == null) {\r\n            return null;\r\n        }\r\n\r\n        // Check if root is any of the three nodes.\r\n        if (root.data == node1 || root.data == node2 || root.data == node3) {\r\n            return root;\r\n        }\r\n        // Check for left subtree.\r\n        BinaryTreeNode left = lcaOfThreeNodes(root.left, node1, node2, node3);\r\n\r\n        // Check for right subtree.\r\n        BinaryTreeNode right = lcaOfThreeNodes(root.right, node1, node2, node3);\r\n\r\n        // If both subtree return not-Null value it means current node could be LCA.\r\n        if (left != null && right != null) {\r\n            return root;\r\n        }\r\n\r\n        // If left subbtree return not-null value then for now return node is LCA.\r\n        else if (left != null) {\r\n\r\n            return left;\r\n        }\r\n\r\n        // If right subbtree return not-null value then for now return node is LCA.\r\n        else {\r\n            return right;\r\n        }\r\n    }\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}