{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8534,
            "title": "LCS of 3 Strings",
            "titleSlug": "lcs-of-3-strings_893011",
            "content": "<h4 id=\"given-three-strings-a-b-and-c-the-task-is-to-find-the-length-of-the-longest-common-subsequence-in-all-the-three-strings-a-b-and-c\">Given three strings A, B and C, the task is to find the length of the longest common subsequence in all the three strings A, B and C.</h4>\n\n<pre><code>A subsequence of a string is a new string generated from the original string with some characters(possibly 0) deleted without changing the relative order of the remaining characters. (For eg, &quot;cde&quot; is a subsequence of &quot;code&quot; while &quot;cdo&quot; is not). A common subsequence of two or more strings is a subsequence that is common to all the strings.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just complete the function. \nThe strings will contain the lowercase alphabets only. \nIf there is no common subsequence, return 0.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe first and the only line of each test case contains three space-separated strings A, B and C. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, the length of the longest common subsequence in all the three strings A, B, and C are printed.\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;=  | A |, | B |, | C | &lt;= 60\nWhere \u2018T\u2019 is the total number of test cases and | S | represents the length of the string S. \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1 \nrohit virat rahul\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>In \u2018rohit\u2019, \u2018virat\u2019 and \u2018rahul\u2019, \u2018r\u2019 is the only common subsequence. Hence, the answer is 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nasfdsa fsdgsfa dsfsdsfh\ncode coder codingninjas\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2:</h5>\n\n<pre><code>Test Case 1: \nThe longest common subsequence in strings \u2018asfdsa\u2019,  \u2018fsdgsfa\u2019, \u2018dsfsdsfh\u2019 is \u2018fds\u2019 whose length is 3.    \nTest Case 2: \nThe longest common subsequence in these strings is \u2018cod\u2019 and its length is 3. \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given three strings, A, B, and C, find the length of their longest common subsequence. A subsequence is derived from a string by deleting some (possibly zero) characters without changing the order of the remaining characters. A common subsequence is a subsequence shared by all input strings. If no common subsequence exists, return 0. The strings will contain lowercase alphabets only.",
                "constraints": [
                    "1 <= T <= 5 (T is the number of test cases)",
                    "1 <= |A|, |B|, |C| <= 60 (|S| represents the length of string S)"
                ],
                "testcases": [
                    {
                        "input": "rohit virat rahul",
                        "output": "1",
                        "explanation": "The only common character among 'rohit', 'virat', and 'rahul' is 'r'. Therefore, the length of the longest common subsequence is 1."
                    },
                    {
                        "input": "asfdsa fsdgsfa dsfsdsfh",
                        "output": "3",
                        "explanation": "The longest common subsequence of 'asfdsa', 'fsdgsfa', and 'dsfsdsfh' is 'fds', which has a length of 3."
                    },
                    {
                        "input": "code coder codingninjas",
                        "output": "3",
                        "explanation": "The longest common subsequence of 'code', 'coder', and 'codingninjas' is 'cod', which has a length of 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you do this recursively? Try to solve the problem by solving its subproblems first.</p>",
            "<p>Can you optimise the previous approach? Try to memoize the subproblems.&nbsp;</p>",
            "<p>Initially, we were breaking the large problem into small problems but now, let us look at it in a different way. Can you solve the small problem first and then reach the final answer? Try to use the bottom-up approach now.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}