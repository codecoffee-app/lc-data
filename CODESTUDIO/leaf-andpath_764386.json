{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7834,
            "title": "Leaf andPath",
            "titleSlug": "leaf-andpath_764386",
            "content": "<h4 id=\"you-are-given-a-binary-tree-of-n-nodes-your-task-is-to-check-if-there-exists-any-root-to-leaf-path-with-the-same-representation-as-the-leaf-traversal-of-the-tree\">You are given a binary tree of &#39;N&#39; nodes. Your task is to check if there exists any root to leaf path with the same representation as the leaf traversal of the tree.</h4>\n\n<h4 id=\"both-the-root-to-leaf-path-and-the-leaf-traversal-are-obtained-by-concatenating-the-data-of-the-nodes-in-the-path\">Both, the root to leaf path and the leaf traversal, are obtained by concatenating the data of the nodes in the path.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>If the path is 1 -&gt; 20 -&gt; 8 -&gt; 721, then the sequence obtained is \u201c1208721\u201d.\n</code></pre>\n\n<h4 id=\"leaf-traversal-is-the-sequence-of-leaves-of-the-tree-traversed-from-left-to-right\">Leaf traversal is the sequence of leaves of the tree traversed from left to right.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases. Then the test cases follow :\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binarytree3-5126.png\" alt=\"Example Input\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print \u201cTrue\u201d if a path with the same representation as the leaf traversal exists, else \u201cFalse\u201d.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of, just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 2*10^2\n0 &lt;= N &lt;= 3*10^3\n0 &lt;= NODE.DATA &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n2 35 10 2 3 5 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>True\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/binarytree-5127.png\" alt=\"Sample Input 1\"></p>\n\n<pre><code>The leaf traversal for the above binary tree is \u201c2352\u201d. The path 2-&gt;35-&gt;2 has the same representation as the leaf traversal i.e. \u201c2352\u201d. Thus, the answer is true.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 2 3 4 5 -1 7 -1 -1 -1 -1 -1 -1\n5 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>False\nTrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of N nodes, determine if there exists a path from the root to a leaf node whose concatenated node values form the same string as the sequence of leaf node values obtained from a left-to-right traversal of the leaves.",
                "constraints": [
                    "1 <= T <= 2*10^2",
                    "0 <= N <= 3*10^3",
                    "0 <= NODE.DATA <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2 35 10 2 3 5 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "True",
                        "explanation": "The leaf traversal is \"2352\". The path 2 -> 35 -> 2 yields the string \"2352\", which matches the leaf traversal. Thus, the answer is True."
                    },
                    {
                        "input": "1 2 3 4 5 -1 7 -1 -1 -1 -1 -1 -1",
                        "output": "False",
                        "explanation": null
                    },
                    {
                        "input": "5 -1 -1",
                        "output": "True",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to solve the problem by first finding the leaf traversal and then checking if there exists a path with the same representation.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}