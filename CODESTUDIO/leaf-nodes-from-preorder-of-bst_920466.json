{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8879,
            "title": "Leaf Nodes from Preorder of BST",
            "titleSlug": "leaf-nodes-from-preorder-of-bst_920466",
            "content": "<h4 id=\"you-are-given-a-root-of-a-binary-search-tree-in-preorder-fashion-and-your-task-is-to-print-all-the-leaf-nodes-in-the-tree-a-leaf-node-is-a-node-whose-left-and-right-pointer-point-to-null\">You are given a \u2018root\u2019 of a Binary Search Tree in preorder fashion, and your task is to print all the leaf nodes in the tree. A leaf node is a node whose left and right pointer point to NULL.</h4>\n\n<h4 id=\"more-formally-you-have-to-print-all-the-leaf-nodes-from-left-to-right-i-e-they-should-be-sorted\">More formally, you have to print all the leaf nodes from left to right, i.e., they should be sorted.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>A binary search tree, also called an ordered or sorted binary tree, is a rooted binary tree whose internal nodes each store a key greater than all the keys in the node&#39;s left subtree and less than those in its right subtree.\n</code></pre>\n\n<h5 id=\"example\">Example</h5>\n\n<pre><code>For Example, the root node is given as follows :\n\u2018ROOT\u2019 = 6 4 3 -1 -1 5 -1 -1 8 7 -1 -1 9 -1 -1\n\nLevel 1 :\nThe root node of the tree is 6\n\nLevel 2 :\nLeft child of 6 = 4\nRight child of 6 = 8\n\nLevel 3 :\nLeft child of 4 = 3\nRight child of 4 = 5\nLeft child of 8 = 7\nRight child of 8 = 9\n\nTherefore all the leaf nodes are 3, 5, 7 and 9.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer \u2018T,\u2019 representing the number of test cases or queries to be run. \n\nThe line of each test case contains elements in the pre-order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nPre-order input refers to giving input in Node, left child, and then the right child and the recur for the same.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For every test case, print a single line that contains all the leaf nodes of the given Binary Search Tree.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t have to print anything. It has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= \u2018N\u2019 &lt;= 1000\n0 &lt;= data &lt;= 10^3\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n6 4 3 -1 -1 5 -1 -1 8 7 -1 -1 9 -1 -1 \n3 1 0 -1 -1 2 -1 -1 5 4 -1 -1 6 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3 5 7 9\n0 2 4 6\n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>For the first test case, \nLevel 1 :\nThe root node of the tree is 6\n\nLevel 2 :\nLeft child of 6 = 4\nRight child of 6 = 8\n\nLevel 3 :\nLeft child of 4 = 3\nRight child of 4 = 5\nLeft child of 8 = 7\nRight child of 8 = 9\nThe leaf nodes of the given binary tree from left to right are 3, 5, 7, and 9.\n\nFor the second test case,\nLevel 1 :\nThe root node of the tree is 3\n\nLevel 2 :\nLeft child of 3 = 1\nRight child of 3 = 5\n\nLevel 3 :\nLeft child of 1 = 0\nRight child of 1 = 2\nLeft child of 5 = 4\nRight child of 5 = 6\nThe leaf nodes of the given binary tree from left to right are 0, 2, 4, and 6.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n10 9 -1 -1 11 -1 -1 \n9 -1 10 -1 11 -1 12 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>9 11\n12 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a Binary Search Tree represented in preorder traversal, identify and return a list of all leaf nodes in the tree, sorted in ascending order. A leaf node is defined as a node with both left and right children being NULL.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 10",
                    "1 <= \u2018N\u2019 <= 1000",
                    "0 <= data <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "root = [6, 4, 3, -1, -1, 5, -1, -1, 8, 7, -1, -1, 9, -1, -1]",
                        "output": "3 5 7 9",
                        "explanation": "The binary search tree can be constructed as follows: 6 is the root, 4 is its left child, 8 is its right child. 3 and 5 are the left and right children of 4 respectively, and 7 and 9 are the left and right children of 8.  The leaf nodes are 3, 5, 7, and 9."
                    },
                    {
                        "input": "root = [3, 1, 0, -1, -1, 2, -1, -1, 5, 4, -1, -1, 6, -1, -1]",
                        "output": "0 2 4 6",
                        "explanation": "The binary search tree can be constructed as follows: 3 is the root, 1 is its left child, 5 is its right child. 0 and 2 are the left and right children of 1 respectively, and 4 and 6 are the left and right children of 5. The leaf nodes are 0, 2, 4, and 6."
                    },
                    {
                        "input": "root = [10, 9, -1, -1, 11, -1, -1]",
                        "output": "9 11",
                        "explanation": "The binary search tree has 10 as the root. The left child is 9, and the right child is 11. Both 9 and 11 are leaf nodes."
                    },
                    {
                        "input": "root = [9, -1, 10, -1, 11, -1, 12, -1, -1]",
                        "output": "12",
                        "explanation": "The BST has the following structure. 9 is root's left child is null. Root's right child is 10. 10's left child is null, and right is 11. 11's left is Null and right is 12. 12 has no children, thus, 12 is leaf node."
                    },
                    {
                        "input": "root = [1, -1, -1]",
                        "output": "1",
                        "explanation": "The tree only contains a root which is also a leaf"
                    },
                    {
                        "input": "root = [20, 10, 5, -1, -1, 15, -1, -1, 30, 25, -1, -1, 35, -1, -1]",
                        "output": "5 15 25 35",
                        "explanation": "20 is the root, left is 10 and right is 30. The left of 10 is 5 and right is 15. Left of 30 is 25 and right is 35. The leaf nodes are 5, 15, 25 and 35."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Will Preorder traversal help?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}