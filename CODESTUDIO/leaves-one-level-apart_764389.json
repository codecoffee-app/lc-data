{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7835,
            "title": "Leaves One Level Apart",
            "titleSlug": "leaves-one-level-apart_764389",
            "content": "<h4 id=\"you-are-given-a-binary-tree-of-n-nodes-your-task-is-to-print-true-if-the-leaves-of-the-tree-are-at-most-one-level-apart-else-print-false\">You are given a binary tree of &#39;N&#39; nodes. Your task is to print &#39;True&#39; if the leaves of the tree are at most one level apart else print &#39;False&#39;.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases. Then the test cases follow.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binarytree3-5126.png\" alt=\"Example Input\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print &quot;True&quot; if the leaves of the tree are at most one level apart else print &quot;False&quot;.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been take care of, just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 2*10^2\n0 &lt;= N &lt;= 3*10^3\n0 &lt;= NODE.DATA &lt;= 10^5\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n5 6 2 4 3 -1 -1 9 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>False\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/binarytree2-5129.png\" alt=\"Sample Input 1\"></p>\n\n<pre><code>The leaves (2, 7) and (2, 9) are two levels apart, thus the answer is False.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2 3 4 -1 -1 -1 -1\n8 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>True\nTrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of 'N' nodes, determine if the leaves of the tree are at most one level apart. Return 'True' if they are, otherwise return 'False'.",
                "constraints": [
                    "1 <= T <= 2*10^2",
                    "0 <= N <= 3*10^3",
                    "0 <= NODE.DATA <= 10^5",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 6 2 4 3 -1 -1 9 7 -1 -1 -1 -1 -1 -1",
                        "output": "False",
                        "explanation": "The tree represented by the input has leaves at different levels.  Specifically, some leaves are two levels apart, resulting in 'False'."
                    },
                    {
                        "input": "2 3 4 -1 -1 -1 -1",
                        "output": "True",
                        "explanation": "The tree formed by the input '2 3 4 -1 -1 -1 -1' consists of root 2, left child 3, and right child 4. The leaves 3 and 4 are at the same level. Thus, the output is 'True'."
                    },
                    {
                        "input": "8 -1 -1",
                        "output": "True",
                        "explanation": "The tree has only one node which is also a leaf so its level is same for all the leaves. Hence, the answer is true."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to save the level of one leaf and compare the level of all the other leaves with this level.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}