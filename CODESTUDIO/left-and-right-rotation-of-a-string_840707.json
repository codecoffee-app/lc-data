{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8220,
            "title": "Left And Right Rotation Of A String",
            "titleSlug": "left-and-right-rotation-of-a-string_840707",
            "content": "<h4 id=\"you-are-given-a-string-str-and-an-integer-d-your-task-is-to-rotate-the-given-string-left-anticlockwise-and-right-clockwise-by-d-units-from-the-starting-index-you-are-required-to-return-the-rotated-string\">You are given a string &#39;str&#39; and an integer &#39;D&#39;. Your task is to rotate the given string left (anticlockwise) and right (clockwise) by &#39;D&#39; units from the starting index. You are required to return the rotated string.</h4>\n\n<h4 id=\"example\">Example :</h4>\n\n<p><img src=\"https://files.codingninjas.in/image1-5441.png\" alt=\"Left-Right Rotation\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run.\n\nThen the test cases follow:\n\nThe first line of each test case contains the string &#39;str&#39;.\n\nThe second and last line of each test case contains an integer &#39;D&#39;, representing the number of units by which the string is to be rotated left or right. \n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the left and right rotations of the string separated by a single space.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n\n1. leftRotate(): This function should return the string after left rotation.\n\n2. rightRotate(): This function should return the string after right rotation.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= |str| &lt;= 10^5\n1 &lt;= D &lt;= 10^5\nWhere |str| denotes the length of the string str.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\ncodingninjas\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>ingninjascod jascodingnin\n</code></pre>\n\n<h5 id=\"explanation-for-the-sample-output-1\">Explanation For The Sample Output 1 :</h5>\n\n<pre><code>In string \u201ccodingninjas\u201d the substring of length &#39;D&#39; = 3, starting from the beginning is \u201ccod\u201d, in the left rotation this substring is removed from the beginning and attached to the end of the string (i.e. anti-clockwise).\n\nSimilarly, in the right rotation, the substring of length &#39;D&#39;  = 3 from the end is \u201cjas\u201d, this substring is removed from the end and attached to the beginning of the string(i.e. clockwise).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\nabcd\n4\nabc\n4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>abcd abcd\nbca cab\n</code></pre>\n\n<h5 id=\"explanation-for-the-sample-output-2\">Explanation For The Sample Output 2 :</h5>\n\n<pre><code>In the first test case, as &#39;D&#39; is equal to the length of the string so the substring same as the given string needs to be removed from the beginning and from the end and attached to the end and beginning of the empty string in the left and the right rotation respectively.\n\nIn the second test case, as &#39;D&#39; is greater than the length of the string, so rotate it multiple times. After rotating the given string by &#39;3&#39; units, we get the same string as given, So now rotate the given string by 1 i.e(&#39;D&#39; % &#39;N&#39;) units.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 34,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `str` and an integer `D`, implement two functions: `leftRotate` and `rightRotate`. `leftRotate` should rotate the string `str` to the left (anti-clockwise) by `D` units and return the rotated string. `rightRotate` should rotate the string `str` to the right (clockwise) by `D` units and return the rotated string.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |str| <= 10^5",
                    "1 <= D <= 10^5, where |str| denotes the length of the string str."
                ],
                "testcases": [
                    {
                        "input": "str = \"codingninjas\", D = 3",
                        "output": "ingninjascod jascodingnin",
                        "explanation": "Left rotation: The first 3 characters \"cod\" are moved to the end: \"ingninjascod\". Right rotation: The last 3 characters \"jas\" are moved to the beginning: \"jascodingnin\"."
                    },
                    {
                        "input": "str = \"abcd\", D = 4",
                        "output": "abcd abcd",
                        "explanation": "Left rotation: Rotating \"abcd\" by 4 (the string length) results in the same string \"abcd\". Right rotation: Rotating \"abcd\" by 4 (the string length) results in the same string \"abcd\"."
                    },
                    {
                        "input": "str = \"abc\", D = 4",
                        "output": "bca cab",
                        "explanation": "Left rotation: Rotating \"abc\" by 4 is equivalent to rotating by 1 (4 % 3 = 1). So, 'a' moves to the end: \"bca\". Right rotation: Rotating \"abc\" by 4 is equivalent to rotating by 1 (4 % 3 = 1) to the right. So, 'c' moves to the beginning: \"cab\"."
                    },
                    {
                        "input": "str = \"abcdef\", D = 1",
                        "output": "bcdefa fabcde",
                        "explanation": "Left rotation: 'a' moves to the end: \"bcdefa\". Right rotation: 'f' moves to the beginning: \"fabcde\"."
                    },
                    {
                        "input": "str = \"abcdef\", D = 6",
                        "output": "abcdef abcdef",
                        "explanation": "Left rotation: Rotating by the length of string results in the same string \"abcdef\". Right rotation: Rotating by the length of string results in the same string \"abcdef\"."
                    },
                    {
                        "input": "str = \"abcde\", D = 7",
                        "output": "cdeab deabc",
                        "explanation": "Left rotation: Rotating \"abcde\" by 7 is equivalent to rotating by 2 (7 % 5 = 2). So, \"ab\" moves to the end: \"cdeab\". Right rotation: Rotating \"abcde\" by 7 is equivalent to rotating by 2 (7 % 5 = 2) to the right. So, \"de\" moves to the beginning: \"deabc\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think in terms of copying substrings into a new string.</p>",
            "<p>Try using a reversal algorithm for rotation.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}