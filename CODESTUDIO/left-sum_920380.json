{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8830,
            "title": "Left Sum",
            "titleSlug": "left-sum_920380",
            "content": "<h4 id=\"given-a-binary-tree-having-n-number-of-nodes-your-task-is-to-find-the-sum-of-all-left-nodes-present-in-the-input-binary-tree-that-is-you-need-to-take-the-sum-of-all-nodes-which-are-the-left-child-of-some-node\">Given a binary tree having \u2018N\u2019 number of nodes. Your task is to find the sum of all left nodes present in the input binary tree. That is, you need to take the sum of all nodes which are the left child of some node.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1. A binary tree is a tree in which each node can have at most two children. \n2. The given tree will be non-empty i.e the number of non-NULL nodes will always be greater than or equal to 1.\n3. Multiple nodes in the tree can have the same values, all values in the tree will be positive.\n</code></pre>\n\n<h4 id=\"input-format\">Input format :</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, which denotes the number of test cases. Then each test case follows. \nThe first line of every test case contains elements of the Binary Tree in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<h4 id=\"for-example\">For Example :</h4>\n\n<pre><code>Consider the binary tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-image1-10953.png\"></br></p>\n\n<pre><code>The input for the tree depicted in the above image would be :\n\n3\n5 1\n6 2 0 8\n-1 -1 7 4 -1 -1 -1 -1\n-1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 3\n\nLevel 2 :\nLeft child of 3 = 5\nRight child of 3 = 1\n\nLevel 3 :\nLeft child of 5 = 6\nRight child of 5 = 2\nLeft child of 1 = 0\nRight child of 1 = 8\n\nLevel 4 :\nLeft child of 6 = null (-1)\nRight child of 6 = null(-1)\nLeft child of 2 = 7\nRight child of 2 = 4\nLeft child of 0 = null (-1)\nRight child of 0 = null (-1)\nLeft child of 8 = null (-1)\nRight child of 8 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\nLeft child of 4 = null (-1)\nRight child of 4 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the sum of all left nodes present  in the binary tree\nThe output of each test case should be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 5\n1 &lt;= \u2018N\u2019 &lt;= 3 * (10 ^ 3)\n1 &lt;= \u2018nodeVal\u2019 &lt;= 10 ^ 9\nWhere \u2018N\u2019 represents the number of nodes in a binary tree,\n\u2018nodeVal\u2019 represents the value of a node.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 5 1 6 2 0 8 -1 -1 7 4 -1 -1 -1 -1 -1 -1 -1 -1\n1 2 3 4 5 -1 -1 6 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>18\n12\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/tree-image1-10953.png\"> </br></p>\n\n<pre><code>Test Case 1 :\nThe nodes 5, 6, 7, and 0 are the only nodes that were the left child of any other node. S, they sum up to make the sum 18.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-image2-10954.png\"></br></p>\n\n<pre><code>Test Case 2 :\nThe nodes 2, 4, and 6 are the only nodes that were the left child of any other node. S, they sum up to make the sum 12.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5 2 3 8 1 -1 -1 7 9 -1 -1 5 6 -1 -1 -1 -1 -1 -1\n1 5 7 -1 -1 6 3 9 8 -1 -1 -1 -1 13 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>22\n33\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 39,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with 'N' nodes, find the sum of all nodes that are the left child of another node in the tree.\n\n**Note:**\n\n1.  A binary tree is a tree where each node has at most two children.\n2.  The tree is guaranteed to be non-empty (at least one node).\n3.  Node values are positive integers, and multiple nodes can have the same value.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 5",
                    "1 <= \u2018N\u2019 <= 3 * (10 ^ 3)",
                    "1 <= \u2018nodeVal\u2019 <= 10 ^ 9",
                    "Where \u2018N\u2019 represents the number of nodes in a binary tree,",
                    "\u2018nodeVal\u2019 represents the value of a node.",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "3 5 1 6 2 0 8 -1 -1 7 4 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "18",
                        "explanation": "The left children are 5, 6, 7, and 0. Their sum is 18."
                    },
                    {
                        "input": "1 2 3 4 5 -1 -1 6 -1 -1 -1 -1 -1",
                        "output": "12",
                        "explanation": "The left children are 2, 4, and 6. Their sum is 12."
                    },
                    {
                        "input": "5 2 3 8 1 -1 -1 7 9 -1 -1 5 6 -1 -1 -1 -1 -1 -1",
                        "output": "22",
                        "explanation": "The left children are 2, 8, 7 and 5. Their sum is 22."
                    },
                    {
                        "input": "1 5 7 -1 -1 6 3 9 8 -1 -1 -1 -1 13 -1 -1 -1",
                        "output": "33",
                        "explanation": "The left children are 5, 6, 9 and 13. Their sum is 33."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a recursive Approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}