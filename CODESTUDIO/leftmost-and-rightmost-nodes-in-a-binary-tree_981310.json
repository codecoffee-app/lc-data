{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9276,
            "title": "Leftmost and rightmost nodes in a binary tree",
            "titleSlug": "leftmost-and-rightmost-nodes-in-a-binary-tree_981310",
            "content": "<h4 id=\"you-are-given-an-arbitrary-binary-tree-with-n-nodes-whose-nodes-have-their-values-in-the-range-of-integers-you-have-to-print-the-values-of-leftmost-and-rightmost-nodes-at-each-level-of-the-given-tree-in-other-words-for-every-level-in-the-given-tree-print-the-values-of-corner-nodes\">You are given an arbitrary binary tree with N nodes,  whose nodes have their values in the range of integers. You have to print the values of leftmost and rightmost nodes at each level of the given tree. In other words, for every level in the given tree, print the values of corner nodes.</h4>\n\n<h4 id=\"two-nodes-are-said-to-be-at-the-same-level-if-they-are-at-the-same-distance-from-the-root-node\">Two nodes are said to be at the same level if they are at the same distance from the root node.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. For all such levels where there is only one corner node the leftmost and the rightmost nodes are the same.\n2. In the output, you have to print the leftmost and rightmost values in level order fashion i.e, the leftmost node of level1 followed by the rightmost node of level1 followed by the leftmost node of level2 followed by the rightmost node of level2 and so on.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains a single integer T, representing the number of test cases.\n\nThe first and only line of each test case contains the values of the nodes of the tree in the level order form ( -1 for NULL node) \n\nRefer to the example for further clarification.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Consider the binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-6715.png\" alt=\"alt text\"></p>\n\n<pre><code>The input of the tree shown in the above image will look like: \n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on. The input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the values of leftmost and rightmost nodes at each level, separated by a single space in a separate line. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^4\n-10^9 &lt;= nodeVal &lt;= 10^9\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 1\n2 3 \n4 7\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/1-6717.png\" alt=\"alt text\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 1\n2 3\n4 6\n7 7\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with N nodes, where each node has an integer value, print the leftmost and rightmost node values at each level of the tree. For levels with only one node, the leftmost and rightmost values are the same.  The tree is provided in level order format, with -1 representing a NULL node.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^4",
                    "-10^9 <= nodeVal <= 10^9",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "1\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "1 1\n2 3\n4 7",
                        "explanation": "The tree can be visualized as:\n      1\n    /   \\\n   2     3\n  / \\   / \\\n 4   5 6   7\n\nLevel 1: Leftmost = 1, Rightmost = 1\nLevel 2: Leftmost = 2, Rightmost = 3\nLevel 3: Leftmost = 4, Rightmost = 7"
                    },
                    {
                        "input": "1\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1",
                        "output": "1 1\n2 3\n4 6\n7 7",
                        "explanation": "The tree can be visualized as:\n      1\n    /   \\\n   2     3\n  / \\   / \\\n 4   -1 5   6\n/ \\     / \\\n-1  7   -1 -1\n\nLevel 1: Leftmost = 1, Rightmost = 1\nLevel 2: Leftmost = 2, Rightmost = 3\nLevel 3: Leftmost = 4, Rightmost = 6\nLevel 4: Leftmost = 7, Rightmost = 7"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<pre><code class=\"language-plaintext\">Use Hashing to store the nodes at a particular level.</code></pre>",
            "<p>BFS</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}