{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10253,
            "title": "Leftmost Column With At Least A One",
            "titleSlug": "leftmost-column-with-at-least-a-one_1199183",
            "content": "<h4 id=\"you-are-given-a-row-sorted-binary-matrix-i-e-all-the-matrix-rows-are-sorted-in-non-decreasing-order-and-the-matrix-contains-only-0-or-1-your-task-is-to-return-the-leftmost-index-of-the-column-such-that-it-contains-at-least-one-1-if-such-a-column-doesn-t-exist-in-the-matrix-then-return-1\">You are given a row-sorted binary matrix, i.e., all the matrix rows are sorted in non-decreasing order, and the matrix contains only 0 or 1. Your task is to return the leftmost index of the column such that it contains at least one 1. If such a column doesn\u2019t exist in the matrix, then return -1.</h4>\n\n<h4 id=\"however-you-can-not-access-the-binary-matrix-directly-the-function-dimensions-return-an-array-of-two-elements-m-n-which-denote-the-number-of-rows-and-the-number-of-columns-in-the-matrix-respectively-the-function-get-x-y-returns-the-element-of-the-matrix-at-the-index-x-y\">However, you can not access the binary matrix directly. The function dimensions() return an array of two elements [m, n] which denote the number of rows and the number of columns in the matrix respectively. The function get(x, y) returns the element of the matrix at the index (x, y).</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>We are following 0-based indexing for this problem. The get method should be called for a max of 2000 times, and the dimensions method should be called only once. Submissions making more than 2000 calls to the get method and more than one call to the dimensions will be judged as the wrong answers.\n</code></pre>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If the BinaryMatrix has 2 rows and 3 columns and the matrix is {{0, 0, 0}, {0, 1, 1}}. Then, both the second and the third columns contain a 1, but the second column is the leftmost column. Hence, the answer is 1 (0-based indexing). \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binarymatrix-8056-10880.jpeg\" alt=\"binary_matrix\"> </p>\n\n<pre><code>Note that, here, the BinaryMatrix is given as an example. In the actual problem, you have to access the elements of the matrix by using the BinaryMatrix.get() method.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39;, which denotes the number of test cases or queries to be run. Then, the T test cases follow.\n\nThe first line of each test case contains two space-separated integers M and N, denoting the number of rows and the number of columns in the matrix, respectively.\n\nThen M lines follow. Each line contains N space-separated integers denoting elements of the matrix.\n\nNote that the input is given for reference. You can\u2019t access the elements of the matrix directly. You have to use the get method to do so.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the leftmost index (0-based indexing) of the column such that it contains at least one 1. If such a column doesn\u2019t exist in the matrix, then return -1.\n\nOutput for each test case will be printed in a separate line. \n\nIf the program calls the get method more than 2000 times or the dimensions function more than once, then it will be judged as a wrong answer, and the program stops instantly.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= M &lt;= 1000\n1 &lt;= N &lt;= 1000\n0 &lt;= BinaryMatrix[i][j] &lt;= 1\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2 2\n0 0\n1 1\n3 2\n0 0\n0 0\n0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>0\n-1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for sample 1 :</h5>\n\n<pre><code>For the first test case, the first and second columns both have element one present. So, the leftmost column is the first column. Hence, the answer is 0 (0-based indexing).\n\nFor the second test case, there is no one present in the matrix. Hence, we print -1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 1\n1\n3 3\n0 0 0\n0 0 0\n0 0 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 14,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a row-sorted binary matrix where each row is sorted in non-decreasing order and contains only 0s and 1s, find the index of the leftmost column that contains at least one 1. You are provided with functions `dimensions()` to get the dimensions of the matrix (rows and columns) and `get(x, y)` to access the element at row `x` and column `y`.  You cannot directly access the matrix elements. Return -1 if no such column exists. Minimize calls to `get()` and `dimensions()`. You must not call the get method more than 2000 times, and the dimensions function more than once.",
                "constraints": [
                    "1 <= number of rows (M) <= 1000",
                    "1 <= number of columns (N) <= 1000",
                    "0 <= BinaryMatrix[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "rows = 2, cols = 2, matrix = [[0, 0], [1, 1]]",
                        "output": "0",
                        "explanation": "The leftmost column with a 1 is the first column (index 0)."
                    },
                    {
                        "input": "rows = 3, cols = 2, matrix = [[0, 0], [0, 0], [0, 0]]",
                        "output": "-1",
                        "explanation": "There are no 1s in the matrix, so the answer is -1."
                    },
                    {
                        "input": "rows = 1, cols = 1, matrix = [[1]]",
                        "output": "0",
                        "explanation": "The only column contains a 1, so the answer is 0."
                    },
                    {
                        "input": "rows = 3, cols = 3, matrix = [[0, 0, 0], [0, 0, 0], [0, 0, 1]]",
                        "output": "2",
                        "explanation": "The leftmost column with a 1 is the third column (index 2)."
                    },
                    {
                        "input": "rows = 2, cols = 3, matrix = [[0, 0, 0], [0, 1, 1]]",
                        "output": "1",
                        "explanation": "The leftmost column with a 1 is the second column (index 1)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a Brute-force approach to access all the elements of the matrix.</p>",
            "<p>Think of an approach based on <a href=\"https://en.wikipedia.org/wiki/Binary_search_algorithm\">Binary Search</a>.</p>",
            "<p>Think of a two-pointer approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}