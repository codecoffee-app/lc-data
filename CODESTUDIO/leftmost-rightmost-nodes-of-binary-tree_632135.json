{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7403,
            "title": "Leftmost & Rightmost Nodes of Binary Tree",
            "titleSlug": "leftmost-rightmost-nodes-of-binary-tree_632135",
            "content": "<h4 id=\"given-a-binary-tree-of-n-number-of-total-nodes-return-the-sequence-of-values-of-the-leftmost-and-rightmost-node-at-each-level\">Given a Binary Tree of &#39;N&#39; number of total nodes, return the sequence of values of the leftmost and rightmost node at each level.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>For the given binary tree: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/Tree1%287403%29-4670.png\" alt=\"alt-text\"></p>\n\n<pre><code>Output: 1 2 3 4 6 7 10\n\nExplanation: The leftmost and rightmost node respectively of each level are\nLevel 0: 1(only one node is present at 0th level)\nLevel 1: 2 3\nLevel 2: 4 6\nLevel 3: 7 10\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The only line of input contains tree elements in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing space-separated integers denoting a sequence of integers written progressively from top to bottom of the tree such that for each level, left most data is followed by the rightmost one.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>0 &lt;= N &lt;= 10 ^ 5\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 3\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1 2 3 -1 4 4 -1 -1 5 6 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 2 3 4 4 5 6\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-2\">Explanation to Sample Input 2:</h5>\n\n<pre><code>The input binary tree will be represented as \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/Tree%287403%29-4671.png\" alt=\"alt-text\"></p>\n\n<pre><code>From the above representation, the leftmost and rightmost node respectively of each level are:\nLevel 0: 1 (only one node is present at 0th level)\nLevel 1: 2 3\nLevel 2: 4 4\nLevel 3: 5 6\n\nNote: Do not consider the vertical distance of nodes from the root node to find the leftmost and rightmost nodes. As in this example, at level 3(0 based indexing) the node with value 5 will have a vertical distance of +1 from the root node and the node with value 6 will have a vertical distance of -1 from the root node.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of 'N' nodes, return the sequence of values representing the leftmost and rightmost node at each level of the tree. The input is provided in level order with '-1' representing null nodes.",
                "constraints": [
                    "0 <= N <= 10 ^ 5",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "1 2 3 -1 -1 -1 -1",
                        "output": "1 2 3",
                        "explanation": "The tree has root 1, left child 2, and right child 3.  All subsequent nodes are null. The leftmost and rightmost nodes at each level are: Level 0: 1, Level 1: 2 3."
                    },
                    {
                        "input": "1 2 3 -1 4 4 -1 -1 5 6 -1 -1 -1 -1 -1",
                        "output": "1 2 3 4 4 5 6",
                        "explanation": "The tree structure can be visualized with root 1, children 2 and 3, followed by 4 and 4 as children, and finally 5 and 6. Leftmost and rightmost: Level 0: 1, Level 1: 2 3, Level 2: 4 4, Level 3: 5 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use level-wise order traversal.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}