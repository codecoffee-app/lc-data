{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9361,
            "title": "Letter Combinations of a Phone Number",
            "titleSlug": "letter-combinations-of-a-phone-number_983623",
            "content": "<h4 id=\"given-a-string-s-containing-digits-from-2-to-9-inclusive-your-task-is-to-find-all-possible-letter-combinations-that-the-number-could-represent\">Given a string S containing digits from 2 to 9 inclusive. Your task is to find all possible letter combinations that the number could represent.</h4>\n\n<pre><code>A mapping from Digits to Letters (just like in Nokia 1100) is shown below. Note that 1 does not map to any letter.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-6768.png\" alt=\"example\"></p>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThen the &#39;T&#39; test cases follow.\n\nThe first and only line of each test case contains string S.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, the list containing all the combinations of letters will be printed.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note</h4>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the function.  \n\nThe output strings can be returned in any order.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 \n1 &lt;= |S| &lt;= 10 \n2 &lt;= S[i] &lt;=9  \n\nWhere |S| is the length of string &#39;S&quot; and &#39;S[i]&#39; represents the element of the string S. \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1 \n23\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>ad ae af bd be bf cd ce cf\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>The letters corresponding to 2 are \u2018a\u2019, \u2018b\u2019, \u2018c\u2019 and corresponding to 3 are \u2018d\u2019, \u2018e\u2019, \u2018f\u2019. All the possible letter combinations for \u201c23\u201d will be &quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>a b c\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2:</h5>\n\n<pre><code>The letters corresponding to 2 are \u2018a\u2019, \u2018b\u2019, \u2018c\u2019.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 33,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` containing digits from 2 to 9 inclusive, generate all possible letter combinations that the number could represent, according to the mapping on a phone keypad (e.g., '2' maps to 'abc', '3' maps to 'def', and so on).  Return these combinations as a vector of strings.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |S| <= 10",
                    "2 <= S[i] <= 9"
                ],
                "testcases": [
                    {
                        "input": "s = \"23\"",
                        "output": "ad ae af bd be bf cd ce cf",
                        "explanation": "The letters corresponding to 2 are \u2018a\u2019, \u2018b\u2019, \u2018c\u2019 and corresponding to 3 are \u2018d\u2019, \u2018e\u2019, \u2018f\u2019. All the possible letter combinations for \u201c23\u201d will be \"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"."
                    },
                    {
                        "input": "s = \"2\"",
                        "output": "a b c",
                        "explanation": "The letters corresponding to 2 are \u2018a\u2019, \u2018b\u2019, \u2018c\u2019."
                    },
                    {
                        "input": "s = \"79\"",
                        "output": "pw px py pz qw qx qy qz rw rx ry rz sw sx sy sz",
                        "explanation": "7 maps to 'pqrs' and 9 maps to 'wxyz'. Combining these creates all the given combinations."
                    },
                    {
                        "input": "s = \"22\"",
                        "output": "aa ab ac ba bb bc ca cb cc",
                        "explanation": "2 maps to 'abc'. Combining 'abc' with itself generates all of the possible 2 character combinations."
                    },
                    {
                        "input": "s = \"\"",
                        "output": "",
                        "explanation": "An empty string input should produce an empty output list."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find all possible combinations using backtracking.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}