{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7921,
            "title": "Level Order Traversal",
            "titleSlug": "level-order-traversal_796002",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-integers-you-are-supposed-to-return-the-level-order-traversal-of-the-given-tree\">You have been given a Binary Tree of integers. You are supposed to return the level order traversal of the given tree.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>For the given binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<pre><code>The level order traversal will be {1,2,3,4,5,6,7}.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print all the nodes in level order traversal separated by a single space.\nFor each test case, print the output in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 1000\n0 &lt;= data &lt;= 10^6 and data != -1\nWhere \u2018T\u2019 is the number of test cases, and \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cdata\u201d is the value of the binary tree node.\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n1 2 3 -1 -1 -1 -1\n1 3 -1 2 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 3 4 5 6 7\n1 2 3\n1 3 2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code> For the first test case, {1} is at level 1 and {2,3} are at level 2 and {4,5,6} are at level 3 and {7} is at level 4. So combinations of all levels are {1, 2, 3 ,4, 5, 6, 7}.\n\nFor the second test case, {1} is at level 1 and {2,3} are at level 2. So combinations of level are {1, 2, 3}.\n\nFor the third test case, {1} is at level 1 and {3} is at level 2 and {2} is at level 3. So combinations of all levels are {1,3,2}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2 7 5 2 6 -1 9 -1 -1 5 11 4 -1 -1 -1 -1 -1 -1 -1\n1 2 3 4 -1 5 6 -1 -1 -1 -1 -1 -1  \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2 7 5 2 6 9 5 11 4\n1 2 3 4 5 6\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>For the first test case, {2} is at level 1 and {7,5} are at level 2 and {2,6,9} are at level 3 and {5,11,4} are at level 4. So combinations of all levels are {2, 7, 5, 2, 6, 9, 5, 11, 4}.\n\nFor the second test case, {1} is at level 1 and {2,3} are at level 2 and {4,5,6} are at level 3. So combinations of all levels are {1, 2, 3, 4, 5, 6}.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 77,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of integers, return its level order traversal. The level order traversal visits nodes level by level, from left to right.",
                "constraints": [
                    "1 <= T <= 100",
                    "0 <= N <= 1000",
                    "0 <= data <= 10^6 and data != -1",
                    "Where \u2018T\u2019 is the number of test cases, and \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cdata\u201d is the value of the binary tree node.",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1",
                        "output": "1 2 3 4 5 6 7",
                        "explanation": "The tree's level order traversal is {1, 2, 3 ,4, 5, 6, 7}."
                    },
                    {
                        "input": "1 2 3 -1 -1 -1 -1",
                        "output": "1 2 3",
                        "explanation": "The tree's level order traversal is {1, 2, 3}."
                    },
                    {
                        "input": "1 3 -1 2 -1 -1 -1",
                        "output": "1 3 2",
                        "explanation": "The tree's level order traversal is {1, 3, 2}."
                    },
                    {
                        "input": "2 7 5 2 6 -1 9 -1 -1 5 11 4 -1 -1 -1 -1 -1 -1 -1",
                        "output": "2 7 5 2 6 9 5 11 4",
                        "explanation": "The tree's level order traversal is {2, 7, 5, 2, 6, 9, 5, 11, 4}."
                    },
                    {
                        "input": "1 2 3 4 -1 5 6 -1 -1 -1 -1 -1 -1",
                        "output": "1 2 3 4 5 6",
                        "explanation": "The tree's level order traversal is {1, 2, 3, 4, 5, 6}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Which data structure can be used to traverse level by level in the given tree?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}