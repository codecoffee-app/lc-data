{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16244,
            "title": "LFUCache",
            "titleSlug": "lfucache_3114758",
            "content": "<h4 id=\"design-and-implement-a-least-frequently-used-lfu-cache-to-implement-the-following-functions\">Design and implement a Least Frequently Used(LFU) Cache, to implement the following functions:</h4>\n\n<pre><code>1. put(U__ID, value): Insert the value in the cache if the key(\u2018U__ID\u2019) is not already present or update the value of the given key if the key is already present. When the cache reaches its capacity, it should invalidate the least frequently used item before inserting the new item.\n\n2. get(U__ID): Return the value of the key(\u2018U__ID\u2019),  present in the cache, if it\u2019s present otherwise return -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>  1) The frequency of use of an element is calculated by a number of operations with its \u2018U_ID\u2019 performed after it is inserted in the cache.\n\n  2) If multiple elements have the least frequency then we remove the element which was least recently used. \n</code></pre>\n\n<h4 id=\"you-have-been-given-m-operations-which-you-need-to-perform-in-the-cache-your-task-is-to-implement-all-the-functions-of-the-lfu-cache\">You have been given \u2018M\u2019 operations which you need to perform in the cache. Your task is to implement all the functions of the LFU cache.</h4>\n\n<pre><code>Type 1: for put(key, value) operation.\nType 2: for get(key) operation.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>We perform the following operations on an empty cache which has capacity 2:\n\nWhen operation 1 2 3 is performed, the element with &#39;U_ID&#39; 2 and value 3 is inserted in the cache.\n\nWhen operation 1 2 1 is performed, the element with &#39;U_ID&#39; 2\u2019s value is updated to 1.  \n\nWhen operation 2 2 is performed then the value of &#39;U_ID&#39; 2 is returned i.e. 1.\n\nWhen operation 2 1 is performed then the value of &#39;U_ID&#39; 1 is to be returned but it is not present in cache therefore -1 is returned.\n\nWhen operation 1 1 5 is performed, the element with &#39;U_ID&#39; 1 and value 5 is inserted in the cache. \n\nWhen operation 1 6 4 is performed, the cache is full so we need to delete an element. First, we check the number of times each element is used. Element with &#39;U_ID&#39; 2 is used 3 times (2 times operation of type 1 and 1-time operation of type 1). Element with &#39;U_ID&#39; 1 is used 1 time (1-time operation of type 1). So element with &#39;U_ID&#39; 1 is deleted. The element with &#39;U_ID&#39; 6 and value 4 is inserted in the cache. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains two single space-se[arated integers \u2018N\u2019 and \u2018M\u2019 representing the size of cache and number of operations respectively.\n\nNext \u2018M\u2019 lines contain operations that have to be performed on the cache.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a vector/list that contains answers of all the operations of type 2 and in the order in which they were asked.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. All the operations are valid. \n2. You do not need to print anything; it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 1000\n1 &lt;= M &lt;= 1000\n1 &lt;= U_ID &lt;= 10^3\n1 &lt;= VAL&lt;= 10^6\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 3\n1 4 1\n2 2\n2 4    \n3 6\n1 2 7\n1 1 8\n1 2 6\n2 1\n2 5\n2 2 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>-1 1\n8 -1 6\n</code></pre>\n\n<h4 id=\"sample-output-1-explanation\">Sample Output 1 Explanation:</h4>\n\n<pre><code>Test case1:\n\nLet\u2019s say i\u2019th operation takes place at t=i. The status after each operation is as follows.\n1 4 1 - Element with &#39;U_ID&#39; 4 and value 1 is inserted in the cache.\n2 2 - No element with &#39;U_ID&#39; 2 is present in the cache so -1 is returned.\n2 4 - Element with &#39;U_ID&#39; 4 is present in the cache so its value i.e 1 is returned.\n\nTherefore the answer is -1 1.\n\n\nTest case 2:\n\nLet\u2019s say i\u2019th operation takes place at t=i. Status after each operation is as follows.\n1 2 7 - Element with &#39;U_ID&#39; 2 and value 7 is inserted in the cache.\n1 1 8 - Element with &#39;U_ID&#39; 1 and value 8 is inserted in the cache.\n1 2 6 - Element with &#39;U_ID&#39; 2 is already present in the cache so value is updated to 6.\n2 1 - Element with &#39;U_ID&#39; 1 is present in the cache so its value i.e 8 is returned. \n2 5 - No element with &#39;U_ID&#39; 5 is present in cache so -1 is returned.\n2 2 - Element with &#39;U_ID&#39; 2 is present in cache so its value i.e 6 is returned.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 3 \n1 1 1\n1 3 91\n2 1\n4 6\n1 1 7\n1 3 1\n1 2 6\n2 2\n1 2 1\n2 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n6 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 21,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a Least Frequently Used (LFU) cache with a fixed capacity. The cache should support the following operations:\n\n*   `put(key, value)`: Inserts a key-value pair into the cache. If the key already exists, update its value. If the cache is full, evict the least frequently used item before inserting the new item. If there is a tie in frequency, evict the least recently used item.\n*   `get(key)`: Returns the value associated with the given key if it exists in the cache; otherwise, return -1.\n\nThe frequency of an item is incremented each time it is accessed (either through `put` or `get`).",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 1000 (Cache Capacity)",
                    "1 <= M <= 1000 (Number of Operations)",
                    "1 <= U_ID <= 1000 (Key)",
                    "1 <= VAL <= 10^6 (Value)"
                ],
                "testcases": [
                    {
                        "input": "capacity = 2, operations = [[1, 2, 3], [1, 2, 1], [2, 2], [2, 1], [1, 1, 5], [1, 6, 4]]",
                        "output": "-1, 1",
                        "explanation": "Initially, the cache is empty with capacity 2.\n[1, 2, 3]: put(2, 3) - Cache: {2: 3}\n[1, 2, 1]: put(2, 1) - Cache: {2: 1}\n[2, 2]: get(2) - Returns 1. Cache: {2: 1}\n[2, 1]: get(1) - Returns -1. Cache: {2: 1}\n[1, 1, 5]: put(1, 5) - Cache: {2: 1, 1: 5}\n[1, 6, 4]: put(6, 4) - Since the cache is full, we need to evict. 1 is least frequently used. Cache: {2: 1, 6: 4}"
                    },
                    {
                        "input": "capacity = 3, operations = [[1, 4, 1], [2, 2], [2, 4]]",
                        "output": "-1, 1",
                        "explanation": "Initially, the cache is empty with capacity 3.\n[1, 4, 1]: put(4, 1) - Cache: {4: 1}\n[2, 2]: get(2) - Returns -1. Cache: {4: 1}\n[2, 4]: get(4) - Returns 1. Cache: {4: 1}"
                    },
                    {
                        "input": "capacity = 6, operations = [[1, 2, 7], [1, 1, 8], [1, 2, 6], [2, 1], [2, 5], [2, 2]]",
                        "output": "8, -1, 6",
                        "explanation": "Initially, the cache is empty with capacity 6.\n[1, 2, 7]: put(2, 7) - Cache: {2: 7}\n[1, 1, 8]: put(1, 8) - Cache: {2: 7, 1: 8}\n[1, 2, 6]: put(2, 6) - Cache: {2: 6, 1: 8}\n[2, 1]: get(1) - Returns 8. Cache: {2: 6, 1: 8}\n[2, 5]: get(5) - Returns -1. Cache: {2: 6, 1: 8}\n[2, 2]: get(2) - Returns 6. Cache: {2: 6, 1: 8}"
                    },
                    {
                        "input": "capacity = 1, operations = [[1, 1, 1], [1, 3, 91], [2, 1]]",
                        "output": "-1",
                        "explanation": "Capacity is 1.\n[1, 1, 1]: Put 1 with value 1. Cache: {1: 1}\n[1, 3, 91]: Put 3 with value 91. Evict 1. Cache: {3: 91}\n[2, 1]: Get 1, returns -1. Cache: {3: 91}"
                    },
                    {
                        "input": "capacity = 4, operations = [[1, 1, 7], [1, 3, 1], [1, 2, 6], [2, 2], [1, 2, 1], [2, 2]]",
                        "output": "6, 1",
                        "explanation": "Capacity is 4. \n[1, 1, 7]: put(1, 7). Cache: {1: 7}\n[1, 3, 1]: put(3, 1). Cache: {1: 7, 3: 1}\n[1, 2, 6]: put(2, 6). Cache: {1: 7, 3: 1, 2: 6}\n[2, 2]: get(2). Returns 6. Cache: {1: 7, 3: 1, 2: 6}\n[1, 2, 1]: put(2, 1). Cache: {1: 7, 3: 1, 2: 1}\n[2, 2]: get(2). Returns 1. Cache: {1: 7, 3: 1, 2: 1}"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try using the brute force approach.</p>",
            "<p>Can you think of using a data structure to store frequency, last operation, and its id in an efficient way?</p>",
            "<p>Try to find an efficient way to get the LRU Nodes of each frequency.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}