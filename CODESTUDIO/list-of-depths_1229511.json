{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10494,
            "title": "List of Depths",
            "titleSlug": "list-of-depths_1229511",
            "content": "<h4 id=\"you-are-given-a-binary-tree-your-task-is-to-convert-this-binary-tree-into-a-linked-list-such-that-the-value-at-nodes-is-in-the-level-order-form\">You are given a binary tree. Your task is to convert this binary tree into a linked list, such that the value at nodes is in the level order form.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000280_1615316728_tree.png\" alt=\"tree2\"></p>\n\n<pre><code>For example, the level order input for the tree depicted in the above image would be :\n\n15\n40 62\n-1 -1 10 20\n-1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 15.\n\nLevel 2 :\nLeft child of 15 = 40\nRight child of 15 = 62\n\nLevel 3 :\nLeft child of 40 = null (-1)\nRight child of 40 = null (-1)\nLeft child of 62 = 10\nRight child of 62 = 20\n\nLevel 4 :\nLeft child of 10 = null (-1)\nRight child of 10 = null (-1)\nLeft child of 20 = null (-1)\nRight child of 20 = null (-1)\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n15 40 62 -1 -1 10 20 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Just return the pointer to the head node of the linked list, no need to print anything,\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 5 * 10^3\n-1 &lt;= A[i] &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 5 1 -1 -1 -1 -1\n15 40 62 -1 -1 10 20 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>For test case 1:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000277_1615032637_tree2.png\" alt=\"tree1\"></p>\n\n<pre><code>The linked list will be: 3 -&gt; 5 -&gt; 1\n\nFor test case 2:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000280_1615316728_tree.png\" alt=\"tree2\"></p>\n\n<pre><code>The linked list will be : 15 -&gt; 40 -&gt; 62 -&gt; 10 -&gt; 20\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n9 1 17 -1 14 9 -1 -1 -1 -1 -1 \n3 14 -1 4 -1 14 -1 12 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>9 1 17 14 9 \n3 14 4 14 12 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree represented by its root node, convert it into a singly linked list where the nodes in the linked list are arranged in level-order traversal of the tree. Return the head of the constructed linked list.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 5 * 10^3 (where N is the number of nodes in the tree)",
                    "-1 <= A[i] <= 10^5 (where A[i] represents the value of a node; -1 indicates a null node)"
                ],
                "testcases": [
                    {
                        "input": "root = [3,5,1,-1,-1,-1,-1]",
                        "output": "3 -> 5 -> 1",
                        "explanation": "The level order traversal of the given tree is [3, 5, 1]. Thus, the linked list should be 3 -> 5 -> 1."
                    },
                    {
                        "input": "root = [15,40,62,-1,-1,10,20,-1,-1,-1,-1]",
                        "output": "15 -> 40 -> 62 -> 10 -> 20",
                        "explanation": "The level order traversal of the given tree is [15, 40, 62, 10, 20]. Thus, the linked list should be 15 -> 40 -> 62 -> 10 -> 20."
                    },
                    {
                        "input": "root = [9,1,17,-1,14,9,-1,-1,-1,-1,-1]",
                        "output": "9 -> 1 -> 17 -> 14 -> 9",
                        "explanation": "The level order traversal of the given tree is [9, 1, 17, 14, 9]. Thus, the linked list should be 9 -> 1 -> 17 -> 14 -> 9."
                    },
                    {
                        "input": "root = [3,14,-1,4,-1,14,-1,12,-1,-1,-1]",
                        "output": "3 -> 14 -> 4 -> 14 -> 12",
                        "explanation": "The level order traversal of the given tree is [3, 14, 4, 14, 12]. Thus, the linked list should be 3 -> 14 -> 4 -> 14 -> 12."
                    },
                    {
                        "input": "root = [1]",
                        "output": "1",
                        "explanation": "The level order traversal of the given tree is [1]. Thus, the linked list should be 1."
                    },
                    {
                        "input": "root = []",
                        "output": "",
                        "explanation": "The tree is empty, so the linked list is also empty."
                    },
                    {
                        "input": "root = [1,2,2,3,4,4,3]",
                        "output": "1 -> 2 -> 2 -> 3 -> 4 -> 4 -> 3",
                        "explanation": "The level order traversal of the given tree is [1, 2, 2, 3, 4, 4, 3]. Thus, the linked list should be 1 -> 2 -> 2 -> 3 -> 4 -> 4 -> 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use queue Data structure as we need to insert nearest node first.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}