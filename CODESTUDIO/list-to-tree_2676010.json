{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15719,
            "title": "List to Tree",
            "titleSlug": "list-to-tree_2676010",
            "content": "<h4 id=\"ninja-is-learning-data-structures-and-algorithms-to-excel-in-technical-interviews-while-practicing-the-questions-of-linked-list-he-found-a-very-interesting-question-in-which-a-sorted-doubly-linked-list-is-given-and-the-task-is-to-construct-a-balanced-binary-search-tree-having-the-same-elements-as-of-the-given-linked-list-can-you-help-ninja-to-solve-this-problem\">Ninja is learning data structures and algorithms to excel in technical interviews. While practicing the questions of Linked List, he found a very interesting question in which a sorted doubly linked list is given,, and the task is to construct a balanced Binary search tree having the same elements as of the given Linked List. Can you help Ninja to solve this problem?</h4>\n\n<h4 id=\"a-balanced-bst-is-defined-as-a-binary-search-tree-that-follows-a-special-property-that-the-left-and-right-subtrees-of-every-node-differ-in-height-by-no-more-than-1\">A balanced BST is defined as a binary search tree that follows a special property that the left and right subtrees of every node differ in height by no more than 1.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>If the given linked list is [1,4,5,8,9], then the balanced BST will :\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000522_1635450074_tree1.png\" alt=\"Example\"></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>We will be using a single structure, \u2018NODE\u2019, to define both the List Node and Tree Node.\nIt will have the following members:\n     1.  &#39;VAL&#39; to store the integer data value.\n     2. &#39;PREV&#39; pointer to store the address of the previous node and also used to store the address of the left child.\n    3. &#39;NEXT&#39; pointer to store the address of the next node and also used to store the address of the right child.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains the \u2018N\u2019 denoting the number of elements in the linked list.\nThe second line contains \u2018N\u2019 integers denoting the given linked list.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the inorder traversal of the constructed balanced BST.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^6\n1 &lt;= nodeVal &lt;=10^9\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\n1 4 5 8 9\n6  \n1 3 6 9 10 15 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 4 5 8 9\n1 3 6 9 10 15\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case,\n\nOne of the valid BST will be:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000522_1635450074_tree1.png\" alt=\"altimage\"></p>\n\n<pre><code>Inorder traversal will be : [1, 4, 5, 8, 9]. Hence, the answer is  [1, 4, 5, 8, 9].\n\nFor the second test case, \n\nOne of the valid BST will be:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000523_1635450208_tree2.png\" alt=\"altimage\"></p>\n\n<p>Inorder traversal will be: [1,3,6,9,10]. Hence, the answer is [1,3,6,9,10].</p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n1 2 3 4 11\n3\n10 20 21\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 2 3 4 11\n10 20 21\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted doubly linked list, construct a balanced Binary Search Tree (BST) having the same elements as the linked list. A balanced BST is a binary search tree where the left and right subtrees of every node differ in height by no more than 1.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^6",
                    "1 <= nodeVal <= 10^9",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n1 4 5 8 9",
                        "output": "1 4 5 8 9",
                        "explanation": "The provided linked list is [1, 4, 5, 8, 9]. A balanced BST can be constructed using these elements, and its inorder traversal will be [1, 4, 5, 8, 9]."
                    },
                    {
                        "input": "6\n1 3 6 9 10 15",
                        "output": "1 3 6 9 10 15",
                        "explanation": "The provided linked list is [1, 3, 6, 9, 10, 15]. A balanced BST can be constructed using these elements, and its inorder traversal will be [1, 3, 6, 9, 10, 15]."
                    },
                    {
                        "input": "5\n1 2 3 4 11",
                        "output": "1 2 3 4 11",
                        "explanation": "The provided linked list is [1, 2, 3, 4, 11]. The inorder traversal will be [1, 2, 3, 4, 11]."
                    },
                    {
                        "input": "3\n10 20 21",
                        "output": "10 20 21",
                        "explanation": "The provided linked list is [10, 20, 21]. The inorder traversal will be [10, 20, 21]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to build the tree from the leaf node to the root node.</p>",
            "<p>Try to divide the list and efficiently find the answers for both parts.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}