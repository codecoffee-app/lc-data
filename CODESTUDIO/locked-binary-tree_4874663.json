{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 20810,
            "title": "Locked Binary Tree",
            "titleSlug": "locked-binary-tree_4874663",
            "content": "<h4 id=\"given-array-par-of-size-n-representing-a-binary-tree-where-par-i-denotes-the-parent-of-node-i-and-a-binary-array-lock-of-n-integers-lock-i-1-means-the-ith-node-is-locked-find-out-whether-a-target-node-k-can-be-locked-or-not\">Given array \u2018PAR\u2019 of size \u2018N\u2019, representing a binary tree, where \u2018PAR[i]\u2019 denotes the parent of node \u2018i\u2019. And a binary array \u2018LOCK\u2019 of \u2018N\u2019 integers, \u2018LOCK[i] = 1\u2019 means the \u2018ith\u2019 node is locked. Find out whether a target node \u2018K\u2019 can be locked or not.</h4>\n\n<h4 id=\"a-node-will-be-locked-only-when-some-or-all-of-the-ancestors-or-the-node-itself-is-locked\">A node will be locked only when some or all of the ancestors or the node itself is locked.</h4>\n\n<h5 id=\"example\">EXAMPLE:</h5>\n\n<pre><code>Input: \n&#39;N&#39; = 5, \u2018K\u2019 = 3\n\u2018ARR\u2019 = [-1, 0, 0, 1, 2]\n\u2018LOCK\u2019 = [0, 0, 1, 0, 0]\n\nOutput: \u20181\u2019\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0-16851.jpg\" alt=\"\"></p>\n\n<pre><code>In the above tree in the simple path from node \u20184\u2019 to root \u20181,\u2019 the nodes encountered are [0, 1, 3], and no node from the set is locked. Hence node \u20183\u2019 can be locked.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain the integer &#39;T&#39;, the number of test cases. For each test case\n\nThe first line of each test case contains two integers \u2018N\u2019, and \u2018K\u2019.\nThe second line of each test case contains \u2018N\u2019 integers denoting the parent of node \u2018i\u2019.\nThe third line of each test case contains \u2018N\u2019 integers denoting elements of array \u2018LOCK\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print \u20181\u2019 or \u20190\u2019, denoting whether the node can be locked.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 10\n1 &lt;= &#39;N&#39; &lt;= 10^5\n0 &lt;= \u2018K\u2019 &lt;= \u2018N-1\u2019\n0 &lt;= \u2018PAR[i]\u2019 &lt;= \u2018N-1\u2019\n0 &lt;= \u2018LOCK[i]\u2019 &lt;= 1    \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5 0\n-1 0 3 0 3\n1 1 1 0 0\n4 1\n3 2 -1 1\n1 0 0 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>0\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>In the first test case,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-16852.jpg\" alt=\"\"></p>\n\n<pre><code>In the above tree the target node \u20180\u2019 is itself locked, so it cannot be locked.\nHence the answer is \u2018false\u2019.\n\nIn the second test case,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/2-16853.jpg\" alt=\"\"></p>\n\n<pre><code>In the above tree in the simple path from node \u20181\u2019 to root \u20182\u2019 the nodes encountered are [1, 2], and no node from the set is locked.\nHence the answer is \u2018true\u2019.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4 2\n-1 0 1 1\n0 1 0 0\n4 3\n-1 0 1 2\n1 0 0 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree represented by a parent array `par` of size `n`, and a binary array `lock` of size `n` indicating whether each node is locked (1) or not (0), determine if a target node `k` can be locked. A node can be locked only if it, or any of its ancestors, is locked.",
                "constraints": [
                    "1 <= 'T' <= 10",
                    "1 <= 'N' <= 10^5",
                    "0 <= \u2018K\u2019 <= \u2018N-1\u2019",
                    "0 <= \u2018PAR[i]\u2019 <= \u2018N-1\u2019",
                    "0 <= \u2018LOCK[i]\u2019 <= 1"
                ],
                "testcases": [
                    {
                        "input": "n = 5, k = 3, par = [-1, 0, 0, 1, 2], lock = [0, 0, 1, 0, 0]",
                        "output": "1",
                        "explanation": "In the tree, the path from node 3 to the root is [3, 1, 0, -1]. The nodes are 3, 1, and 0.  Node 0 is locked (lock[0] = 1). Since an ancestor is locked, node 3 can be locked, though the final answer should be whether node K can be locked *or not*, not whether it *is* locked."
                    },
                    {
                        "input": "n = 5, k = 0, par = [-1, 0, 3, 0, 3], lock = [1, 1, 1, 0, 0]",
                        "output": "0",
                        "explanation": "Node 0 is already locked (lock[0] = 1), thus it cannot be locked *because it already is*. Therefore the answer is 0."
                    },
                    {
                        "input": "n = 4, k = 1, par = [3, 2, -1, 1], lock = [1, 0, 0, 1]",
                        "output": "1",
                        "explanation": "The path from node 1 to the root is [1, 2, -1]. The nodes are 1 and 2. There are no locked nodes in the path. Thus node 1 can be locked."
                    },
                    {
                        "input": "n = 4, k = 3, par = [-1, 0, 1, 2], lock = [1, 0, 0, 0]",
                        "output": "0",
                        "explanation": "The path from node 3 to the root is [3, 2, 1, 0, -1]. The nodes are 3, 2, 1, 0. Node 0 is locked, therefore node 3 cannot be locked."
                    },
                    {
                        "input": "n = 4, k = 2, par = [-1, 0, 1, 1], lock = [0, 1, 0, 0]",
                        "output": "0",
                        "explanation": "The path from node 2 to root is [2, 1, 0, -1]. Nodes are 2, 1, 0. Node 1 is locked, so K cannot be locked"
                    },
                    {
                        "input": "n = 4, k = 3, par = [-1, 0, 1, 2], lock = [1, 0, 0, 0]",
                        "output": "0",
                        "explanation": "Path is [3, 2, 1, 0, -1], Nodes are 3, 2, 1, 0. Node 0 is locked, therefore node 3 cannot be locked."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>There is only one path in between the root and the target node.</strong></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}