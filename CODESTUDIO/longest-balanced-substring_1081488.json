{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9691,
            "title": "Longest Balanced Substring",
            "titleSlug": "longest-balanced-substring_1081488",
            "content": "<h4 id=\"you-are-given-a-string-str-containing-just-two-characters-and-you-have-to-find-the-length-of-the-longest-balanced-substring-in-the-given-string-string-b-is-a-substring-of-string-a-if-it-can-be-obtained-from-a-by-deletion-of-several-possibly-zero-or-all-characters-from-the-beginning-and-several-possibly-zero-or-all-characters-from-the-end\">You are given a string STR containing just two characters \u2018(\u2018 and \u2018)\u2019. You have to find the length of the longest balanced substring in the given string. String \u2018B\u2019 is a substring of string \u2018A\u2019 if it can be obtained from \u2018A\u2019 by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.</h4>\n\n<h4 id=\"a-sequence-of-brackets-is-called-balanced-if-one-can-turn-it-into-a-valid-math-expression-by-adding-characters-and-1-for-example-sequences-and-are-balanced-while-and-are-not\">A sequence of brackets is called balanced if one can turn it into a valid math expression by adding characters \u2018+\u2019 and \u20181\u2019. For example, sequences \u2018(())()\u2019, \u2018()\u2019 and \u2018(()(()))\u2019 are balanced, while \u2018)(\u2018, \u2018(()\u2019 and \u2018(()))(\u2018 are not.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. Then the T test cases follow.\n\nThe first line and only line of each test case contain a string STR containing just two characters \u2018(\u2018 and \u2018)\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For every test case, print an integer denoting the length of the longest balanced substring.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= |STR| &lt;= 5 * 10^4\n\nWhere |STR| is the length of the string.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n))(())\n()()()\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n6\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>In the 1st test case, \u201c(())\u201d is the longest substring that is balanced.\n\nIn the 2nd test case, the whole string is balanced.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n()(())\n()\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>6\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string STR containing only '(' and ')', find the length of the longest balanced substring. A balanced substring can be transformed into a valid mathematical expression using '+' and '1'. For example, '(())()' and '()' are balanced, while ')(', '(()', and '(()))((' are not.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |STR| <= 5 * 10^4",
                    "Where |STR| is the length of the string.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "))(())",
                        "output": "4",
                        "explanation": "The longest balanced substring is \"(())\", which has a length of 4."
                    },
                    {
                        "input": "()()()",
                        "output": "6",
                        "explanation": "The entire string \"()()()\" is a balanced substring of length 6."
                    },
                    {
                        "input": "()(())",
                        "output": "6",
                        "explanation": "The longest balanced substring is \"()(())\", which has length of 6."
                    },
                    {
                        "input": "()",
                        "output": "2",
                        "explanation": "The entire string \"()\" is a balanced substring of length 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For each substring, check if it can be the longest balanced substring.</p>",
            "<p>For each index, find the longest balanced substring starting at this index.</p>",
            "<p>For each index, find the longest balanced substring ending at this index.</p>",
            "<p>Can we solve this problem without using the stack?</p>",
            "<p>Can we solve this problem in linear time and constant extra space?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}