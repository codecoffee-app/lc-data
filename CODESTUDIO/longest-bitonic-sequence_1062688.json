{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9586,
            "title": "Longest Bitonic Sequence",
            "titleSlug": "longest-bitonic-sequence_1062688",
            "content": "<h4 id=\"a-bitonic-sequence-is-a-sequence-of-numbers-that-is-first-strictly-increasing-and-then-strictly-decreasing\">A Bitonic Sequence is a sequence of numbers that is first strictly increasing and then strictly decreasing.</h4>\n\n<p><br/> </p>\n\n<h4 id=\"a-strictly-ascending-order-sequence-is-also-considered-bitonic-with-the-decreasing-part-as-empty-and-same-for-a-strictly-descending-order-sequence\">A strictly ascending order sequence is also considered bitonic, with the decreasing part as empty, and same for a strictly descending order sequence.</h4>\n\n<p><br/></p>\n\n<h4 id=\"for-example-the-sequences-1-3-5-3-2-1-2-3-4-are-bitonic-whereas-the-sequences-5-4-1-4-5-and-1-2-2-3-are-not\">For example, the sequences [1, 3, 5, 3, 2], [1, 2, 3, 4] are bitonic, whereas the sequences [5, 4, 1, 4, 5] and [1, 2, 2, 3] are not.</h4>\n\n<p><br/></p>\n\n<h4 id=\"you-are-given-an-array-arr-consisting-of-n-positive-integers\">You are given an array <em><strong>&#39;arr&#39;</strong></em> consisting of <em><strong>&#39;n&#39;</strong></em> positive integers.</h4>\n\n<p><br/></p>\n\n<h4 id=\"find-the-length-of-the-longest-bitonic-subsequence-of-arr\">Find the length of the longest bitonic subsequence of &#39;arr&#39;.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Input: &#39;arr&#39; = [1, 2, 1, 2, 1]\n\nOutput: 3\n\nExplanation: The longest bitonic subsequence for this array will be [1, 2, 1]. Please note that [1, 2, 2, 1] is not a valid bitonic subsequence, because the consecutive 2&#39;s are neither strictly increasing, nor strictly decreasing.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer &#39;n&#39; denoting the number of integers in the array.\n\nThe second line contains &#39;n&#39; space-separated integers, denoting the elements of the array.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The output contains an integer, denoting the length of the longest bitonic subsequence.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>5 \n1 2 1 2 1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n</code></pre>\n\n<p><br/></p>\n\n<h4 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h4>\n\n<pre><code>The longest bitonic subsequence for this array will be [1, 2, 1]. Please note that [1, 2, 2, 1] is not a valid bitonic subsequence, because the consecutive 2&#39;s are neither strictly increasing, nor strictly decreasing.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>5\n1 2 1 3 4\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4\n</code></pre>\n\n<p><br/></p>\n\n<h4 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h4>\n\n<pre><code>The longest bitonic sequence for this array will be [1, 2, 3, 4].\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity :</h5>\n\n<pre><code>The expected time complexity is O(n ^ 2).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10^3\n1 &lt;= &#39;arr[i]&#39; &lt;= 10^5\n\nTime Limit: 1sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 87,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers, find the length of the longest bitonic subsequence. A bitonic sequence is a sequence that is first strictly increasing and then strictly decreasing. A strictly ascending or descending sequence is also considered bitonic.",
                "constraints": [
                    "1 <= n <= 10^3",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "5\n1 2 1 2 1",
                        "output": "3",
                        "explanation": "The longest bitonic subsequence is [1, 2, 1]. Note that consecutive equal elements are not allowed in a strictly increasing or decreasing sequence."
                    },
                    {
                        "input": "5\n1 2 1 3 4",
                        "output": "4",
                        "explanation": "The longest bitonic sequence is [1, 2, 3, 4]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we solve this problem with the help of recursion?</p>",
            "<p>Can the recursive approach be simplified using memoization?</p>",
            "<p>Can we use Dynamic Programming to solve this problem?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time complexity: O(n ^ 2)\n    Space complexity: O(n)\n\n    Where 'n' is the number of elements in 'arr'.\n*/\n\nint longestBitonicSubsequence(vector<int> &arr, int n)\n{\n    /*\n        The lis[i] stores the length of longest increasing\n        subsequence ending at index i.\n    */\n    vector<int> lis(n, 1);\n\n    /*\n        The lds[i] stores the length of the longest decreasing\n        subsequence starting at index i.\n    */\n    vector<int> lds(n, 1);\n\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < i; j++)\n        {\n            if (arr[i] > arr[j])\n            {\n                lis[i] = max(lis[i], lis[j] + 1);\n            }\n        }\n    }\n\n    for (int i = n - 1; i >= 0; i--)\n    {\n        for (int j = i + 1; j < n; j++)\n        {\n            if (arr[i] > arr[j])\n            {\n                lds[i] = max(lds[i], lds[j] + 1);\n            }\n        }\n    }\n\n    int maxLength = 0;\n\n    for (int i = 0; i < n; i++)\n    {\n        maxLength = max(maxLength, lds[i] + lis[i] - 1);\n    }\n\n    return maxLength;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(N^2)\n    Space Complexity: O(N)\n    \n    where N is the length of the array arr.\n'''\nfrom typing import List\n\ndef longestBitonicSubsequence(arr: List[int], n: int) -> int:\n\n\n    # The lis[i] stores the length of longest increasing sequence  \n    # ending at index i.\n\n    lis = [None] * n\n    \n\n    # The lds[i] stores the length of the longest decreasing sequence  \n    # starting at index i.\n\n    lds = [None] * n\n\n    for i in range(n):\n        lis[i] = 1\n\n        for j in range(i):\n            if(arr[i] > arr[j]):\n                lis[i] = max(lis[i], lis[j] + 1)\n\n    for i in range(n - 1, -1, -1):\n        lds[i] = 1;\n\n        for j in range(i + 1, n, 1):\n            if(arr[i] > arr[j]):\n                lds[i] = max(lds[i], lds[j] + 1)\n\n    maxLength = 0\n\n    for i in range(n):\n        maxLength = max(maxLength, lds[i] + lis[i] - 1)\n\n    return maxLength",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity: O(N^2)\r\n    Space complexity: O(N)\r\n\r\n    Where N is total number of elemnents of 'arr'.\r\n*/\r\n\r\nimport java.util.Arrays;\r\n\r\npublic class Solution {\r\n\r\n    public static int longestBitonicSequence(int[] arr, int n) {\r\n\r\n        /*\r\n            The lis[i] stores the length of longest increasing sequence\r\n            ending at index i.\r\n        */\r\n\r\n        int []lis = new int[n];\r\n\r\n        /*\r\n            The lds[i] stores the length of the longest decreasing sequence\r\n            starting at index i.\r\n        */\r\n\r\n        int []lds = new int[n];\r\n\r\n        for(int i = 0; i < n; i++){\r\n            lis[i] = 1;\r\n\r\n            for(int j = 0; j < i; j++){\r\n                if(arr[i] > arr[j]){\r\n                    lis[i] = Math.max(lis[i], lis[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        for(int i = n - 1; i >= 0; i--){\r\n            lds[i] = 1;\r\n\r\n            for(int j = i + 1; j < n; j++){\r\n                if(arr[i] > arr[j]){\r\n                    lds[i] = Math.max(lds[i], lds[j] + 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        int maxLength = 0;\r\n\r\n        for(int i = 0; i < n; i++){\r\n            maxLength = Math.max(maxLength, lds[i] + lis[i] - 1);\r\n        }\r\n\r\n        return maxLength;\r\n\r\n    }\r\n\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}