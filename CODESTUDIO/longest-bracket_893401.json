{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8780,
            "title": "Longest Bracket",
            "titleSlug": "longest-bracket_893401",
            "content": "<h4 id=\"you-are-given-a-string-s-consisting-of-only-and-characters-you-need-to-find-the-length-of-the-longest-substring-which-is-a-regular-bracket-sequence-and-also-find-the-count-of-such-substrings-with-the-same-length\">You are given a string S, consisting of only &#39;(&#39; and &#39;)&#39; characters. You need to find the length of the longest substring which is a regular bracket sequence and also find the count of such substrings with the same length.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>A bracket sequence is called regular, if parenthesis in the given expression is balanced.  For example &#39;()()&#39;, &#39;(())&#39; are the regular string but &#39;((()&#39; is not a regular parenthesis string.\n\nIf no such substring exists, print &quot;0 1&quot; (without quotes).\n</code></pre>\n\n<h4 id=\"input-format\">Input format :</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, which denotes the number of test cases. Then each test case follows. \n\nEach line of the test case contains a string having characters \u2018(\u2018 or \u2018)\u2019 in it.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case print, 2 space-separated integers representing the length of the longest substring with regular bracket sequence and the number of such substrings present in the input string.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Update the length of the longest regular bracket substring in the variable \u2018length\u2019 and store the count of such substring in variable \u2018count\u2019 passed as parameters in the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10 ^ 4\n\n\nTime Limit : 1 sec.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You don\u2019t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<p>##### Sample Input 1:</p>\n\n<pre><code>2\n)((())))(()())\n))(\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>6 2\n0 1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>Test Case 1:\nThe longest balanced parentheses substring starts from index 1 and ends at index 6 making the count of longest substring 6 and there is another balanced substring of length = 6 starting from index 8 and ending at index 13.\n\nTherefore, the total count of balanced parentheses substring is 2. Hence the output is \u201c6 2\u201d.\n\nTest Case 2: \n There is no such balanced parentheses substring exists in the input string so the length of the longest balanced parentheses substring is 0 and 1 will be the count of such substring.\n</code></pre>\n\n<p>##### Sample Input 2 :</p>\n\n<pre><code>2\n)()()()()()()\n(())(\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>12 1\n4 1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>Test Case 1:\nThe longest balanced parentheses substring starts from index 2 and ends at index 13 with length  = 12 and total count 1.\n\nTest Case 2: \nThe longest balanced parentheses substring starts from index 1 and ends at index 4 with length  = 4 and total count 1.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `inputString` consisting only of '(' and ')' characters, determine the length of the longest substring that forms a regular bracket sequence and the number of such substrings with that maximum length. A regular bracket sequence is one where all parentheses are balanced (e.g., '()()', '(())' are regular, while '((()' is not). If no such substring exists, set `length` to 0 and `count` to 1.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10 ^ 4 (where N is the length of the input string)",
                    "The input string contains only '(' and ')' characters."
                ],
                "testcases": [
                    {
                        "input": "inputString = \"((())))(()()\"",
                        "output": "length = 6, count = 2",
                        "explanation": "The longest balanced parentheses substring is of length 6.  One starts at index 1 and ends at index 6. Another starts at index 8 and ends at index 13. Therefore, the length is 6, and the count is 2."
                    },
                    {
                        "input": "inputString = \"))(\"",
                        "output": "length = 0, count = 1",
                        "explanation": "There is no balanced parentheses substring in the input string, so the length is 0, and the count is 1."
                    },
                    {
                        "input": "inputString = \")()()()()()()\"",
                        "output": "length = 12, count = 1",
                        "explanation": "The longest balanced parentheses substring starts from index 2 and ends at index 13 with length = 12 and total count 1."
                    },
                    {
                        "input": "inputString = \"(())((\"",
                        "output": "length = 4, count = 1",
                        "explanation": "The longest balanced parentheses substring starts from index 1 and ends at index 4 with length = 4 and total count 1."
                    },
                    {
                        "input": "inputString = \"\"",
                        "output": "length = 0, count = 1",
                        "explanation": "Empty String contains no balanced substring of parenthesis."
                    },
                    {
                        "input": "inputString = \"(((((\"",
                        "output": "length = 0, count = 1",
                        "explanation": "No balanced parenthesis is present."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of using some extra data structure .</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}