{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9680,
            "title": "Longest Common Prefix After Rotation",
            "titleSlug": "longest-common-prefix-after-rotation_1081472",
            "content": "<h4 id=\"you-are-given-two-strings-a-and-b-where-string-a-is-fixed-but-you-can-perform-left-shift-operations-on-string-b-any-number-of-times\">You are given two strings &#39;A&#39; and &#39;B&#39; where string &#39;A&#39; is fixed. But you can perform left shift operations on string B any number of times.</h4>\n\n<h4 id=\"your-task-is-to-find-out-the-minimum-number-of-left-shift-operations-required-in-order-to-obtain-the-longest-common-prefix-of-string-a-and-b\">Your task is to find out the minimum number of left-shift operations required in order to obtain the longest common prefix of string &#39;A&#39; and &#39;B&#39;.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Left shift is defined as a single circular rotation on the string after which the first character becomes the last character and all other characters are shifted one index to the left.\n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>If A = \u201can\u201d, B = \u201ccan\u201d.\nAfter performing one left shift operation, string B becomes \u201canc\u201d.\nAfter performing two left shift operations, string B becomes \u201cnca\u201d.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve this in linear time and space complexity?\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. \nThen, the T test cases follow.\n\nThe first line of each test case contains the string A.\n\nThe second line of each test case contains the string B.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the minimum number of left shift operations required in order to obtain the longest common prefix of string A and B.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= |A|, |B| &lt;= 5 * 10^4\nWhere |A| and |B| denote the length of string, A and B respectively.   \n\nAll the characters of the string A and B contain lowercase English letters only.\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\non\nsoon\nan\nan\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for sample 1:</h5>\n\n<pre><code>For the first test case, the common prefix of A and B is .\u201d\u201d\nAfter one left shift, the string B becomes \u201coons\u201d, now the common prefix is \u201co\u201d.\nAfter two left shifts, the string B becomes \u201conso\u201d, now the common prefix is \u201con\u201d.\nAfter three left shifts, the string B becomes \u201cnsoo\u201d, now the common prefix is \u201c\u201d.\n(We do not need to perform one more left shift, because if the number of left-shift operations is equal to the length of the string, then we get the original string. For example, here if we perform one more shift, then we get the string \u201csoon\u201d which was the original string.)\nSo after two left shifts, we get the longest common prefix i.e. \u201con\u201d. Hence, the answer is 2.\n\nFor the second test case, the common prefix of A and B is \u201can\u201d.\nAfter one left shift, the string B becomes \u201cna\u201d, now the common prefix is \u201c\u201d.\nSo we get the longest common prefix without performing any shifts. Hence, the answer is 0. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nabc \ndef\nsorry\npersonal\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>0\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-2\">Explanation for sample 2:</h5>\n\n<pre><code>For the first test case, the common prefix of A and B is \u201c\u201d.\nAfter one left shift, the string B becomes \u201cefd\u201d, now the common prefix is again \u201c\u201d.\nAfter two left shifts, the string B becomes \u201cfde\u201d, now the common prefix is again \u201c\u201d.\nHere the length of the longest common prefix is 0, as there is no common prefix in all the cases. So we get the longest common prefix without performing any shifts. Hence, the answer is 0.\nFor the second test case, the common prefix of A and B is \u201c\u201d.\nAfter one left shift, the string B becomes \u201cersonalp\u201d, now the common prefix is \u201c\u201d.\nAfter two left shifts, the string B becomes \u201crsonalpe\u201d, now the common prefix is \u201c\u201d.\nAfter three left shifts, the string B becomes \u201csonalper\u201d, now the common prefix is \u201cso\u201d.\nAfter four left shifts, the string B becomes \u201conalpers\u201d, now the common prefix is \u201c\u201d.\nAfter five left shifts, the string B becomes \u201cnalperso\u201d, now the common prefix is \u201c\u201d.\nAfter six left shifts, the string B becomes \u201calperson\u201d, now the common prefix is \u201c\u201d.\nAfter seven left shifts, the string B becomes \u201clpersona\u201d, now the common prefix is \u201c\u201d.\n\nSo after three left shifts, we get the longest common prefix i.e. \u201cso\u201d. Hence, the answer is 3.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, 'A' and 'B', where 'A' is fixed. Determine the minimum number of left shift operations required on string 'B' to achieve the longest possible common prefix with string 'A'. A left shift operation rotates 'B' such that the first character becomes the last, and all other characters shift one position to the left.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= |A|, |B| <= 5 * 10^4 (Length of strings A and B)",
                    "Strings A and B contain only lowercase English letters.",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "on\nsoon",
                        "output": "2",
                        "explanation": "The initial common prefix between 'on' and 'soon' is empty. After one left shift, 'soon' becomes 'oons', with a common prefix of 'o'. After two left shifts, 'soon' becomes 'onso', resulting in a common prefix of 'on'. Further shifts yield shorter or empty common prefixes, making 2 the minimum shifts for the longest common prefix 'on'."
                    },
                    {
                        "input": "an\nan",
                        "output": "0",
                        "explanation": "The strings 'an' and 'an' already have the longest possible common prefix 'an' without requiring any shifts. Therefore, the answer is 0."
                    },
                    {
                        "input": "abc\ndef",
                        "output": "0",
                        "explanation": "The strings 'abc' and 'def' have no common prefix initially. Shifting 'def' does not result in any common prefixes with 'abc'. Thus, the minimum shifts required is 0."
                    },
                    {
                        "input": "sorry\npersonal",
                        "output": "3",
                        "explanation": "The strings 'sorry' and 'personal' have no common prefix initially. Shifting 'personal' once results in 'ersonalp', with no common prefix. Shifting again gives 'rsonalpe', also with no common prefix. A third shift gives 'sonalper', resulting in the common prefix 'so'. Further shifts result in shorter or empty common prefixes, therefore 3 is the answer."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of brute force solution by shifting the string B one by one and keep track of the longest common prefix after each shift.</p>",
            "<p>Use the KMP Algorithm.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}