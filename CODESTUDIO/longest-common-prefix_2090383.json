{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14214,
            "title": "Longest Common Prefix",
            "titleSlug": "longest-common-prefix_2090383",
            "content": "<h4 id=\"you-are-given-an-array-arr-consisting-of-n-strings-your-task-is-to-find-the-longest-common-prefix-among-all-these-strings-if-there-is-no-common-prefix-you-have-to-return-an-empty-string\">You are given an array \u2018ARR\u2019 consisting of \u2018N\u2019 strings. Your task is to find the longest common prefix among all these strings. If there is no common prefix, you have to return an empty string.</h4>\n\n<h4 id=\"a-prefix-of-a-string-can-be-defined-as-a-substring-obtained-after-removing-some-or-all-characters-from-the-end-of-the-string\">A prefix of a string can be defined as a substring obtained after removing some or all characters from the end of the string.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>Consider ARR = [\u201ccoding\u201d, \u201dcodezen\u201d, \u201dcodingninja\u201d, \u201dcoders\u201d]\nThe longest common prefix among all the given strings is \u201ccod\u201d as it is present as a prefix in all strings. Hence, the answer is \u201ccod\u201d.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains a single integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of strings in the array.\n\nThe next line contains \u2018N\u2019 space-separated strings denoting the elements of the array \u2018ARR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single string corresponding to the longest common prefix.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 3000\n1 &lt;= |ARR[i]| &lt;=1000\n\nEach string consists of only lowercase letters.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\ncoding codezen codingninja coder\n3\nnight ninja nil \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>cod\nni\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case, \nThe longest common prefix among all the given strings is \u201ccod\u201d as it is present as a prefix in all strings. Hence, the answer is \u201ccod\u201d.\n\nFor the second test case,\nThe longest common prefix among all the given strings is \u201cni\u201d as it is present as a prefix in all strings. Hence, the answer is \u201cni\u201d.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3\napplejuice applepie apple\n4\ncar cus cart carat\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>apple\nc\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 114,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an array of strings. Find the longest common prefix string amongst all strings in the array. If no common prefix exists, return an empty string.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 3000",
                    "1 <= |ARR[i]| <= 1000",
                    "Each string consists of only lowercase letters.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4\ncoding codezen codingninja coder",
                        "output": "cod",
                        "explanation": "The longest common prefix of 'coding', 'codezen', 'codingninja', and 'coder' is 'cod'."
                    },
                    {
                        "input": "3\nnight ninja nil",
                        "output": "ni",
                        "explanation": "The longest common prefix of 'night', 'ninja', and 'nil' is 'ni'."
                    },
                    {
                        "input": "3\napplejuice applepie apple",
                        "output": "apple",
                        "explanation": "The longest common prefix of 'applejuice', 'applepie', and 'apple' is 'apple'."
                    },
                    {
                        "input": "4\ncar cus cart carat",
                        "output": "c",
                        "explanation": "The longest common prefix of 'car', 'cus', 'cart', and 'carat' is 'c'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find the optimal condition to include the character in the longest common prefix.</p>",
            "<p>Can you use any divide and conquer method?</p>",
            "<p>Can we use binary search to find the longest common prefix.?</p>",
            "<p>Try to use a trivial tree to store the strings.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tries",
                "slug": "tries"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N*M)\r\n    Space Complexity: O(N*M)\r\n\r\n    where N is the number of strings in the array and M is the maximum length of the string present in the array.\r\n*/\r\n\r\nclass TrieNode\r\n{\t\r\n    public:\r\n    char val;\r\n    vector<TrieNode*> child;\r\n    int childCount;\r\n    bool endOfWord;\r\n\r\n    TrieNode(char val)\r\n    {\r\n        this->val = val;\r\n        child.resize(26, NULL);\r\n        childCount = 0;\r\n        endOfWord = false;\r\n    }\r\n\r\n    ~TrieNode()\r\n    {\r\n        for(int i = 0; i < 26; i++)\r\n        {\r\n            if(child[i] != NULL)\r\n            {\r\n                delete child[i];\r\n            }\r\n        }\r\n    }\r\n};\r\n    \r\nvoid insert(TrieNode* root, string &word)\r\n{\r\n    TrieNode* cur = root;\r\n\r\n    for(int idx = 0; idx < word.size(); ++idx)\r\n    {   \r\n        int diff = word[idx] - 'a';\r\n        \r\n        // If the child[diff] of cur is an empty node\r\n        if (cur->child[diff] == NULL)\r\n        {\r\n            cur->child[diff] = new TrieNode(word[idx]);\r\n            cur->childCount += 1;\r\n        }\r\n\r\n        cur = cur->child[diff];\r\n    }\r\n\r\n    // Marking the endOfWord of last character as true.\r\n    cur->endOfWord = true;    \r\n}\r\n\r\nstring longestCommonPrefix(vector<string> &arr, int n)\r\n{\r\n    // Declaring the Trie's root node\r\n    TrieNode* root = new TrieNode(' ');\r\n\r\n    // Inserting each word into Trie\r\n    for(int i = 0; i < arr.size(); i++)\r\n    {\r\n        string word = arr[i];\r\n        insert(root, word);\r\n    }\r\n\r\n    // A string to store the longest common prefix\r\n    string answer = \"\";\r\n\r\n    // We will check if string prefix is common in all strings or not\r\n    string prefix = arr[0];\r\n\r\n    for(int idx = 0; idx < prefix.size(); idx++)\r\n    {\r\n        // Check if root has only one child.\r\n        if (root->childCount == 1)\r\n        {\r\n            answer += prefix[idx];\r\n            int diff = prefix[idx] - 'a';\r\n            root = root->child[diff];\r\n        }\r\n        else\r\n        {\r\n            break;\r\n        }\r\n        \r\n        //  Check if endOfWord of root is true.  \r\n        if (root->endOfWord)\r\n        {\r\n            break;\r\n        }\r\n    }\r\n    \r\n    delete root;\r\n    \r\n    return answer;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time Complexity: O(N*M)\r\n    Space Complexity: O(N*M)\r\n\r\n    where N is the number of strings in the array and M is the maximum length of the string present in the array.\r\n\"\"\"\r\n\r\nclass TrieNode:\r\n    \r\n    def __init__(self,val):\r\n        self.val = val\r\n        self.child = [None for i in range(26)]\r\n        self.childCount = 0\r\n        self.endOfWord = False\r\n\r\n\r\ndef insert(root, word):\r\n\r\n    cur = root\r\n\r\n    for idx in range(len(word)):\r\n        \r\n        diff = ord(word[idx]) - ord('a')\r\n        \r\n        # If the child[diff] of cur is an empty node\r\n        if (cur.child[diff] == None):\r\n            cur.child[diff] = TrieNode(word[idx])\r\n            cur.childCount += 1\r\n\r\n        cur = cur.child[diff]\r\n\r\n    # Marking the endOfWord of last character as true.\r\n    cur.endOfWord = True    \r\n\r\n\r\ndef longestCommonPrefix(arr, n):\r\n\r\n    # Declaring the Trie's root node\r\n    root =TrieNode('')\r\n\r\n    # Inserting each word into Trie\r\n    for word in arr:\r\n        insert(root, word)\r\n\r\n    # A string to store the longest common prefix\r\n    answer = \"\"\r\n\r\n    # We will check if string prefix is common in all strings or not\r\n    prefix = arr[0]\r\n\r\n    for idx in range(len(prefix)):\r\n\r\n        # Check if root has only one child.\r\n        if (root.childCount == 1):\r\n            answer += prefix[idx]\r\n            diff = ord(prefix[idx]) - ord('a')\r\n            root = root.child[diff]\r\n\r\n        else:\r\n            break\r\n        \r\n        #  Check if endOfWord of root is true.  \r\n        if (root.endOfWord):\r\n            break\r\n\r\n    return answer",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N*M)\n    Space Complexity: O(N*M)\n\n    where N is the number of strings in the array and M is the maximum length of the string present in the array.\n*/\n\nclass TrieNode {\n\n\tchar data;\n\tboolean isTerminating;\n\tTrieNode children[];\n\tint childCount;\n\n\tpublic TrieNode(char data) {\n\t\tthis.data = data;\n\t\tisTerminating = false;\n\t\tchildren = new TrieNode[26];\n\t\tchildCount = 0;\n\t}\n}\n\npublic class Solution {\n\tpublic static void add(TrieNode root, String word) {\n\t\tif (word.length() == 0) {\n\t\t\troot.isTerminating = true;\n\t\t\treturn;\n\t\t}\n\t\tint childIndex = word.charAt(0) - 'a';\n\t\tTrieNode child = root.children[childIndex];\n\t\tif (child == null) {\n\t\t\tchild = new TrieNode(word.charAt(0));\n\t\t\troot.children[childIndex] = child;\n\t\t\troot.childCount++;\n\t\t}\n\t\tadd(child, word.substring(1));\n\n\t}\n\n\tpublic static String longestCommonPrefix(String[] arr, int n) {\n\n\t\t// Declaring the Trie's root node\n\t\tTrieNode root = new TrieNode(' ');\n\n\t\t// Inserting each word into Trie\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tString word = arr[i];\n\t\t\tadd(root, word);\n\t\t}\n\n\t\t// A string to store the longest common prefix\n\t\tString answer = \"\";\n\n\t\t// We will check if string prefix is common in all strings or not\n\t\tString prefix = arr[0];\n\n\t\tfor (int idx = 0; idx < prefix.length(); idx++) {\n\t\t\t\n\t\t\t// Check if root has only one child.\n\t\t\tif (root.childCount == 1) {\n\t\t\t\tanswer += prefix.charAt(idx);\n\t\t\t\tint diff = prefix.charAt(idx) - 'a';\n\t\t\t\troot = root.children[diff];\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Check if endOfWord of root is true.\n\t\t\tif (root.isTerminating) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn answer;\n\n\t}\n\n}\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}