{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 859,
            "title": "Longest Common Subsequence",
            "titleSlug": "longest-common-subsequence_624879",
            "content": "<h4 id=\"given-two-strings-s-and-t-with-lengths-m-and-n-find-the-length-of-the-longest-common-subsequence\">Given two strings, &#39;S&#39; and &#39;T&#39; with lengths &#39;M&#39; and &#39;N&#39;, find the length of the &#39;Longest Common Subsequence&#39;.</h4>\n\n<h4 id=\"for-a-string-str-per-se-of-length-k-the-subsequences-are-the-strings-containing-characters-in-the-same-relative-order-as-they-are-present-in-str-but-not-necessarily-contiguous-subsequences-contain-all-the-strings-of-length-varying-from-0-to-k\">For a string &#39;str&#39;(per se) of length K, the subsequences are the strings containing characters in the same relative order as they are present in &#39;str,&#39; but not necessarily contiguous. Subsequences contain all the strings of length varying from 0 to K.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Subsequences of string &quot;abc&quot; are:  &quot;&quot;(empty string), a, b, c, ab, bc, ac, abc.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains the string &#39;S&#39; of length &#39;M&#39;.\n\nThe second line of the input contains the string &#39;T&#39; of length &#39;N&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Return the length of the Longest Common Subsequence.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>0 &lt;= M &lt;= 10 ^ 3\n0 &lt;= N &lt;= 10 ^ 3\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>adebc\ndcadb\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-output-1\">Explanation of the Sample Output 1 :</h5>\n\n<pre><code>Both the strings contain a common subsequence &#39;adb&#39;, which is the longest common subsequence with length 3. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>ab\ndefg\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-output-2\">Explanation of the Sample Output 2 :</h5>\n\n<pre><code>The only subsequence that is common to both the given strings is an empty string(&quot;&quot;) of length 0.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 239,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings 'S' and 'T', determine the length of their longest common subsequence (LCS). A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",
                "constraints": [
                    "0 <= length of S <= 10 ^ 3",
                    "0 <= length of T <= 10 ^ 3",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "s = adebc, t = dcadb",
                        "output": "3",
                        "explanation": "The longest common subsequence is 'adb', with length 3."
                    },
                    {
                        "input": "s = ab, t = defg",
                        "output": "0",
                        "explanation": "There are no common characters between the strings, resulting in an LCS length of 0."
                    },
                    {
                        "input": "s = abcdef, t = acef",
                        "output": "4",
                        "explanation": "The longest common subsequence is 'acef', with length 4."
                    },
                    {
                        "input": "s = abcdgh, t = aedfhr",
                        "output": "3",
                        "explanation": "The longest common subsequence is 'adh', with length 3."
                    },
                    {
                        "input": "s = AGGTAB, t = GXTXAYB",
                        "output": "4",
                        "explanation": "The longest common subsequence is 'GTAB', with length 4."
                    },
                    {
                        "input": "s = , t =",
                        "output": "0",
                        "explanation": "Both strings are empty, resulting in an LCS length of 0."
                    },
                    {
                        "input": "s = abc, t =",
                        "output": "0",
                        "explanation": "One string is empty, resulting in an LCS length of 0."
                    },
                    {
                        "input": "s = , t = def",
                        "output": "0",
                        "explanation": "One string is empty, resulting in an LCS length of 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>This problem has a lot of overlapping subproblems. Is there a way to compute the results of these subproblems at most once?</p>",
            "<p>Is there a way to do this problem without using recursion? Can we do iteratively using the recurrence relation?</p>",
            "<p>Do you need all the rows in the table stored? Or only some of them are required?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N * M)\r\n    Space Complexity : O(N)\r\n\r\n    where N and M are the lengths of strings str1 and str2 respectively\r\n*/\r\n\r\nint LCSHelper(string str1, int n, string str2, int m)\r\n{\r\n    int **dp = new int *[2];\r\n\r\n    dp[0] = new int[m + 1];\r\n    dp[1] = new int[m + 1];\r\n\r\n    int currRowParity = 0;\r\n\r\n    for (int i = 0; i <= n; i++)\r\n    {\r\n        currRowParity = i % 2;\r\n\r\n        for (int j = 0; j <= m; j++)\r\n        {\r\n            if (i == 0 || j == 0)\r\n            {\r\n                dp[currRowParity][j] = 0;\r\n            }\r\n            else if (str1[i - 1] != str2[j - 1])\r\n            {\r\n                /*\r\n                    If the ith character of str1 is not equal to the jth character of str2,\r\n                    we return the maximum of answers obtained by\r\n                    1. Ignoring the ith character in the first string\r\n                    2. Ignoring the jth character in the second string\r\n                */\r\n\r\n                dp[currRowParity][j] =\r\n                    max(dp[1 - currRowParity][j],\r\n                        dp[currRowParity][j - 1]);\r\n            }\r\n            else\r\n            {\r\n                /*\r\n                    If the ith character of str1 is equal to the nth character of str2,\r\n                    this character will be included in the subsequence.\r\n                    Hence, we will add 1 to the length of lcs obtained\r\n                    removing the mth character from the first string and the\r\n                    nth character from the second string.\r\n                */\r\n                dp[currRowParity][j] = dp[1 - currRowParity][j - 1] + 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    int ans = dp[currRowParity][m];\r\n\r\n    delete[] dp[0];\r\n    delete[] dp[1];\r\n    delete[] dp;\r\n\r\n    return ans;\r\n}\r\n\r\nint lcs(string str1, string str2)\r\n{\r\n    return LCSHelper(str1, str1.length(), str2, str2.length());\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity - O(N * M)\r\n    Space Complexity - O(N)\r\n    where N and M are the lengths of strings str1 and str2.\r\n*/\r\n\r\npublic class Solution {\r\n    public static int lcs(String str1, String str2) {\r\n        return LCSHelper(str1, str1.length(), str2, str2.length());\r\n    }\r\n\r\n    private static int LCSHelper(String str1, int n, String str2, int m) {\r\n        int[][] dp = new int[2][m + 1];\r\n\r\n        int currRowParity = 0;\r\n        for (int i = 0; i <= n; i++) {\r\n            currRowParity = i % 2;\r\n\r\n            for (int j = 0; j <= m; j++) {\r\n                if (i == 0 || j == 0) {\r\n                    dp[currRowParity][j] = 0;\r\n                } else if (str1.charAt(i - 1) != str2.charAt(j - 1)) {\r\n                    /*\r\n                         If the ith character of str1 is not equal to the jth character of str2,\r\n                         we return the maximum of answers obtained by\r\n                         1. Ignoring the ith character in the first string\r\n                         2. Ignoring the jth character in the second string\r\n                     */\r\n\r\n                    dp[currRowParity][j] = Math.max(\r\n                            dp[1 - currRowParity][j],\r\n                            dp[currRowParity][j - 1]);\r\n                } else {\r\n                    /*\r\n                         If the ith character of str1 is equal to the nth character of str2,\r\n                         this character will be included in the subsequence.\r\n                         Hence, we will add 1 to the length of lcs obtained\r\n                         removing the mth character from the first string and the\r\n                         nth character from the second string.\r\n                     */\r\n                    dp[currRowParity][j] = dp[1 - currRowParity][j - 1] + 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        return dp[currRowParity][m];\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity : O(N * M)\n    Space Complexity : O(N)\n    \n    Where N and M are the lengths of strings str1 and str2.\n'''\n\nfrom sys import stdin\n\ndef lengthOflcs(str1, str2) :\n    n = len(str1)\n    m = len(str2)\n    \n    return lcsHelper(str1, n, str2, m)\n\ndef lcsHelper(str1, n, str2, m) :\n    dp = [[-1] * (m + 1) for row in range(2)]\n    \n    currRowParity = 0\n    for i in range((n + 1)) : \n        currRowParity = i % 2\n        \n        for j in range((m + 1)) :\n            if (i == 0 ) or (j == 0) :\n                dp[currRowParity][j] = 0\n\n            elif str1[i - 1] != str2[j - 1] :\n                '''\n                    If the ith character of str1 is not equal to the jth character of str2,\n                    we return the maximum of answers obtained by\n                    \n                    1. Ignoring the ith character in the first string\n                    2. Ignoring the jth character in the second string\n                '''\n                dp[currRowParity][j] = max(dp[1 - currRowParity][j], dp[currRowParity][j - 1])\n            else :\n                '''\n                    If the ith character of str1 is equal to the nth character of str2,\n                    this character will be included in the subsequence.\n                    Hence, we will add 1 to the length of lcs obtained\n                    removing the mth character from the first string and the\n                    n-th character from the second string.\n                '''\n                dp[currRowParity][j] = dp[1 - currRowParity][j - 1] + 1\n\n\n    return dp[currRowParity][m]\n\n\n\n#taking input\ndef takeInput() :\n    \n    str1 = input().strip()\n    str2 = input().strip()\n    \n    return str1, str2\n\n\n#main\n\nstr1, str2 = takeInput()\nprint(lengthOflcs(str1, str2))\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}