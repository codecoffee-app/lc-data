{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10605,
            "title": "Longest Common Substring",
            "titleSlug": "longest-common-substring_1235207",
            "content": "<h4 id=\"you-are-given-two-strings-str1-and-str2-you-have-to-find-the-length-of-the-longest-common-substring\">You are given two strings, <em><strong>&#39;str1&#39;</strong></em> and <em><strong>&#39;str2&#39;</strong></em>. You have to find the length of the longest common substring.</h4>\n\n<p><br></p>\n\n<h4 id=\"a-substring-is-a-continuous-segment-of-a-string-for-example-bcd-is-a-substring-of-abcd-while-acd-or-cda-are-not\">A substring is a continuous segment of a string. For example, &quot;bcd&quot; is a substring of &quot;abcd&quot;, while &quot;acd&quot; or &quot;cda&quot; are not.</h4>\n\n<p><br></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018str1\u2019 = \u201cabcjklp\u201d , \u2018str2\u2019 = \u201cacjkp\u201d.\n\nOutput: 3\n\nExplanation:  The longest common substring between \u2018str1\u2019 and \u2018str2\u2019 is \u201ccjk\u201d, of length 3.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The First line of the test case contains the string \u2018str1\u2019.\n\nThe Second line contains the string \u2018str2\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>Return an integer representing the length of the longest common substring.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>wasdijkl\nwsdjkl\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code> 3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code> The longest common substring is \u201cjkl\u201d, of length 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>tyfg\ncvbnuty\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2 :</h5>\n\n<pre><code>The longest common substring is \u201cty\u201d, of length 2.\n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity:</h5>\n\n<pre><code>The expected time complexity is O(n*m),\nWhere \u2018n\u2019 and \u2018m\u2019 are the lengths of \u2018st1\u2019 and \u2018str2\u2019 respectively.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= str1.length &lt;= 1000\n1 &lt;= str2.length &lt;= 1000\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 197,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `str1` and `str2`, find the length of the longest common substring. A substring is a continuous sequence of characters within a string. For example, \"bcd\" is a substring of \"abcd\", but \"acd\" or \"cda\" are not.",
                "constraints": [
                    "1 <= str1.length <= 1000",
                    "1 <= str2.length <= 1000"
                ],
                "testcases": [
                    {
                        "input": "wasdijkl\nwsdjkl",
                        "output": "3",
                        "explanation": "The longest common substring is \"jkl\", which has a length of 3."
                    },
                    {
                        "input": "tyfg\ncvbnuty",
                        "output": "2",
                        "explanation": "The longest common substring is \"ty\", which has a length of 2."
                    },
                    {
                        "input": "abcjklp\nacjkp",
                        "output": "3",
                        "explanation": "The longest common substring is \"cjk\", which has a length of 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of using recursion for this problem of comparing the strings?</p>",
            "<p>Can you think of checking if the substrings of the first string also exist in the second string?</p>",
            "<p>Can you use the concept of dynamic programming by storing the already calculated subproblems?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time complexity: O(N * M)\n    Space complexity: O(N * M)\n    \n    Where 'N' and 'M' are the lengths of the two strings.\n*/\n\nint lcs(string &str1, string &str2){\n    // Creating 'DP' table.\n    vector<vector<int>> dp(str1.size() + 1, vector<int>(str2.size() + 1));\n\n    // Variable to store the answer.\n    int ans = 0;\n\n    // Iterate through first string.\n    for (int i = 0; i <= str1.size(); i++){\n        // Iterate through second string.\n        for (int j = 0; j <= str2.size(); j++){\n            // Make for first row and column of dp table make the value 0.\n            if (i == 0 || j == 0){\n                dp[i][j] = 0;\n            }\n\n            // If characters are same at 'i' and 'j' then add 1 to the answer obtained from rest of the string.\n            else if (str1[i - 1] == str2[j - 1]){\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n                ans = max(ans, dp[i][j]);\n            }\n            else{\n                dp[i][j] = 0;\n            }\n        }\n    }\n    // Return the answer.\n    return ans;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\n    Time complexity: O(N * M)\n    Space complexity: O(N * M)\n    \n    Where 'N' and 'M' are the lengths of the two strings.\n\"\"\"\n\ndef lcs(str1: str, str2: str) -> int:\n    # Creating 'DP' table.\n    dp = [[0 for i in range(len(str2) + 1)] for j in range(len(str1) + 1)]\n\n    # Variable to store the answer.\n    ans = 0\n\n    # Iterate through first string.\n    for i in range(len(str1) + 1):\n        # Iterate through second string.\n        for j in range(len(str2) + 1):\n            # Make for first row and column of dp table make the value 0.\n            if (i == 0 or j == 0):\n                dp[i][j] = 0\n            \n            # If characters are same at 'i' and 'j' then add 1 to the answer obtained from rest of the string.\n            elif (str1[i - 1] == str2[j - 1]):\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                ans = max(ans, dp[i][j])\n            \n            else:\n                dp[i][j] = 0\n        \n    # Return the answer.\n    return ans",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\n\tTime complexity: O(N * M)\n\tSpace complexity: O(N * M)\n\t\n\tWhere 'N' and 'M' are the lengths of the two strings.\n*/\n\nimport java.util.ArrayList;\n\npublic class Solution {\n\tpublic static int lcs(String str1, String str2) {\n\t\t// Creating 'DP' table\n\t\tArrayList<ArrayList<Integer>> dp = new ArrayList<ArrayList<Integer>>();\n\n\t\tfor (int i = 0; i <= str1.length(); i++) {\n\t\t\tArrayList<Integer> temp = new ArrayList<Integer>(str2.length() + 1);\n\t\t\tfor (int j = 0; j <= str2.length(); j++) {\n\t\t\t\ttemp.add(0);\n\t\t\t}\n\t\t\tdp.add(temp);\n\t\t}\n\n\t\t// Variable to store the answer.\n\t\tint ans = 0;\n\n\t\t// Iterate through first string.\n\t\tfor (int i = 0; i <= str1.length(); i++) {\n\t\t\t// Iterate through second string.\n\t\t\tfor (int j = 0; j <= str2.length(); j++) {\n\t\t\t\t// Make for first row and column of 'DP' table make the value 0.\n\t\t\t\tif (i == 0 || j == 0) {\n\t\t\t\t\tdp.get(i).set(j, 0);\n\t\t\t\t}\n\t\t\t\t/*\n\t\t\t\t   If characters are same at 'i' and 'j' then add 1 to the answer obtained from\n\t\t\t\t   rest of the string.\n\t\t\t\t*/\n\t\t\t\telse if (str1.charAt(i - 1) == str2.charAt(j - 1)) {\n\t\t\t\t\tdp.get(i).set(j, dp.get(i - 1).get(j - 1) + 1);\n\t\t\t\t\tans = Math.max(ans, dp.get(i).get(j));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdp.get(i).set(j, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Return the answer.\n\t\treturn ans;\n\t}\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}