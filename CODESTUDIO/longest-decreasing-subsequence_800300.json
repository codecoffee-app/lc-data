{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8069,
            "title": "Longest Decreasing Subsequence",
            "titleSlug": "longest-decreasing-subsequence_800300",
            "content": "<h4 id=\"you-are-given-an-array-list-arr-consisting-of-n-integers-your-task-is-to-find-the-length-of-the-longest-decreasing-subsequence\">You are given an array/list ARR consisting of N integers. Your task is to find the length of the longest decreasing subsequence.</h4>\n\n<h4 id=\"a-subsequence-is-a-sequence-of-numbers-obtained-by-deleting-zero-or-more-elements-from-the-array-list-keeping-the-relative-positions-of-elements-same-as-it-was-in-the-initial-sequence-a-decreasing-subsequence-is-a-subsequence-in-which-every-element-is-strictly-less-than-the-previous-number\">A subsequence is a sequence of numbers obtained by deleting zero or more elements from the array/list, keeping the relative positions of elements same as it was in the initial sequence. A decreasing subsequence is a subsequence in which every element is strictly less than the previous number.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>There can be more than one subsequences with the longest length.\n</code></pre>\n\n<h5 id=\"for-example\">For example:-</h5>\n\n<pre><code>For the given array [5, 0, 3, 2, 9], the longest decreasing subsequence is of length 3, i.e. [5, 3, 2]\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Try to solve the problem in O(N log N) time complexity.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of the test case. Then the test case follows.\n\nThe first line of each test case contains an integer \u2018N\u2019 representing the size of the array/list.\n\nThe second line of each test case contains N single space-separated integers representing the array/list elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the integer denoting the length of the longest decreasing subsequence.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50 \n1 &lt;= N &lt;= 5000\n1 &lt;= ARR[i] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code> 3\n 5 \n 5 1 3 2 4\n 5 \n 6 8 9 2 1\n 5 \n 1 2 3 4 5 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code> 3\n 3\n 1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>For the first test case, the longest decreasing subsequence is [5, 3, 2] of length 3.\n\nFor the second test case, the longest decreasing subsequence is [9, 2, 1] of length. Note [8,2,1] and [6,2,1] are of length 3 too.\n\nFor the third test case, the longest decreasing subsequence is [1] of length 1. Note [2], [3], [4] and [5] are of length 1 too.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code> 2\n 4 \n 63 22 56 94 \n 2 \n 83 80\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code> 2\n 2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array/list of N integers, find the length of the longest decreasing subsequence. A subsequence is formed by deleting zero or more elements from the original array, maintaining the relative order of the remaining elements. A decreasing subsequence is one where each element is strictly less than the preceding element.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 5000",
                    "1 <= ARR[i] <= 10^9",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n5 1 3 2 4",
                        "output": "3",
                        "explanation": "The longest decreasing subsequence is [5, 3, 2], with a length of 3."
                    },
                    {
                        "input": "5\n6 8 9 2 1",
                        "output": "3",
                        "explanation": "The longest decreasing subsequence is [9, 2, 1], with a length of 3. Note that [8, 2, 1] and [6, 2, 1] are also valid decreasing subsequences of length 3."
                    },
                    {
                        "input": "5\n1 2 3 4 5",
                        "output": "1",
                        "explanation": "The longest decreasing subsequence is [1], with a length of 1. Note that [2], [3], [4] and [5] are also valid decreasing subsequences of length 1."
                    },
                    {
                        "input": "4\n63 22 56 94",
                        "output": "2",
                        "explanation": "The longest decreasing subsequence is of length 2. For example [63, 22] and [63, 56] are valid solutions."
                    },
                    {
                        "input": "2\n83 80",
                        "output": "2",
                        "explanation": "The longest decreasing subsequence is [83, 80] with a length of 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to check for each element, whether including it in subsequence will result in a longer decreasing subsequence or not.</p>",
            "<p>Try to reduce the computations involved in solving same sub-problems.&nbsp;</p>",
            "<p>Think about how you can use the smaller subproblems to build larger problems.</p>",
            "<p>Try and think of storing all possible candidates for longest decreasing subsequence, and adding the number encountered to one of those subsequences.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}