{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10500,
            "title": "Longest Duplicate SubString",
            "titleSlug": "longest-duplicate-substring_1229794",
            "content": "<h4 id=\"you-are-given-a-string-s-and-you-need-to-return-the-length-of-the-longest-duplicate-substring-in-the-given-string-the-occurrence-of-duplicate-sub-strings-can-overlap-also\">You are given a string &#39;S&#39; and you need to return the length of the longest duplicate substring in the given string. The occurrence of duplicate sub-strings can overlap also.</h4>\n\n<h4 id=\"if-there-are-many-longest-duplicate-sub-string-return-any-of-them\">If there are many longest duplicate sub-string return any of them.</h4>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe next \u2018T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first and only line of the test case contains a single string &#39;S&#39;.\n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the length of the longest possible duplicate substrings.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= length of string &lt;= 200\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1</h5>\n\n<pre><code>2\naaaab\nabcde\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n0\n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>In the first case, &#39;aaa&#39; is the longest substring which has two occurrences, the first one starting at index &#39;1&#39; and the second one starting at index &#39;2&#39;(0 - based indexing).\n\nIn the second case, there is no substring that appears more than once. Thus answer is 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2</h5>\n\n<pre><code>2\nabcdea\naabbccaa\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>1\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S', find the length of the longest substring that appears at least twice. The occurrences of the duplicate substrings can overlap.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= length of string <= 200",
                    "Time limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "aaaab",
                        "output": "3",
                        "explanation": "The longest duplicate substring is 'aaa', which appears twice. Therefore, the length is 3."
                    },
                    {
                        "input": "abcde",
                        "output": "0",
                        "explanation": "There are no duplicate substrings. Therefore, the length is 0."
                    },
                    {
                        "input": "abcdea",
                        "output": "1",
                        "explanation": "The longest duplicate substring is 'a', which appears twice. Therefore, the length is 1."
                    },
                    {
                        "input": "aabbccaa",
                        "output": "2",
                        "explanation": "The longest duplicate substring is 'aa', which appears twice. Therefore, the length is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find all the possiible substrings.</p>",
            "<p>The key idea is to find the longest common substring using dynamic programming between the same string such that their ending index are not same.</p>",
            "<p>Use binary search + Rabin_karp.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}