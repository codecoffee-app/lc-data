{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14946,
            "title": "Longest Increasing Subsequence in Circular Manner",
            "titleSlug": "longest-increasing-subsequence-in-circular-manner_2319034",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-length-n-you-have-to-find-the-length-of-the-longest-increasing-subsequence-of-this-array-in-a-circular-manner-i-e-if-you-start-from-the-ith-position-in-the-array-then-your-array-will-be-i-to-n-1-then-0-to-i-1\">You are given an array \u201carr\u201d of length \u2018n\u2019. You have to find the length of the longest increasing subsequence of this array in a circular manner, i.e., if you start from the ith position in the array, then your array will be \u2018i\u2019 to n - 1 then 0 to i - 1.</h4>\n\n<h4 id=\"an-array-a-is-a-subsequence-of-an-array-b-if-a-can-be-obtained-from-b-by-deleting-several-possibly-zero-or-all-elements-from-the-array\">An array \u2018a\u2019 is a subsequence of an array \u2018b\u2019, if \u2018a\u2019 can be obtained from \u2018b\u2019 by deleting several (possibly, zero or all) elements from the array.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>arr = {10, 7, 3}\nIn this example, the longest increasing subsequence can be {3, 10}, {7, 10} or {3, 7}. Hence the answer is 2. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the total number of elements in the array.\n\nThe next line contains \u2018n\u2019 integers denoting the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer \u201cans\u201d denoting the length of the longest increasing subsequence.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10    \n1 &lt;= N &lt;= 300\n0 &lt;= arr[i] &lt;= 1000\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4\n11 9 5 3\n3\n5 7 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>In the first test case, there are 3 LIS(Longest Increasing Subsequence) of length 2.\n{3, 11}, {5, 11}, {9, 11}.\nHence, the answer is 2.\n\nIn the second test case, the longest increasing subsequence is 3, 5, 7.\nHence the answer is 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5 \n13 57 23 27 43\n4\n1 2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'arr' of length 'n', determine the length of the longest increasing subsequence (LIS) considering the array in a circular manner.  A circular array implies that you can start from any index 'i' (0 <= i < n), traverse to the end of the array, and then continue from the beginning until you reach index 'i-1'.  Find the maximum length of any increasing subsequence that can be formed this way.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 300",
                    "0 <= arr[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "n = 4, arr = [11, 9, 5, 3]",
                        "output": "2",
                        "explanation": "Possible circular arrays are:\n- [11, 9, 5, 3] (LIS: {11}, {9}, {5}, {3}, {5, 11}, {3,11}, {3,9}, {5,9})\n- [9, 5, 3, 11] (LIS: {9}, {5}, {3}, {11}, {3, 11}, {5,11}, {9,11})\n- [5, 3, 11, 9] (LIS: {5}, {3}, {11}, {9}, {3, 11}, {5,9}, {5,11})\n- [3, 11, 9, 5] (LIS: {3}, {11}, {9}, {5}, {3, 5}, {3, 9}, {3, 11})\nThe longest increasing subsequences are of length 2."
                    },
                    {
                        "input": "n = 3, arr = [5, 7, 3]",
                        "output": "3",
                        "explanation": "Consider the sequence [5, 7, 3]. If we start at index 2, we get [3, 5, 7]. The LIS is [3, 5, 7], of length 3."
                    },
                    {
                        "input": "n = 5, arr = [13, 57, 23, 27, 43]",
                        "output": "4",
                        "explanation": "Starting at index 0: [13, 57, 23, 27, 43]. LIS is [13, 23, 27, 43] or [13, 23, 43] or [13, 27, 43] or [57] etc.\nStarting at index 2: [23, 27, 43, 13, 57]. LIS is [23, 27, 43, 57]. Length 4."
                    },
                    {
                        "input": "n = 4, arr = [1, 2, 3, 4]",
                        "output": "4",
                        "explanation": "The array is already in increasing order.  The longest increasing subsequence is the entire array, with length 4."
                    },
                    {
                        "input": "n = 5, arr = [5, 4, 3, 2, 1]",
                        "output": "1",
                        "explanation": "The array is in strictly decreasing order.  The longest increasing subsequence can only be of length 1 (any single element)."
                    },
                    {
                        "input": "n = 1, arr = [10]",
                        "output": "1",
                        "explanation": "When array size is 1, LIS is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Calculate longest increasing subsequence for every element of the array using recursion.</p>",
            "<p>Try to compute the LIS starting from one element and going to the last element for every element in the array</p>",
            "<p>Take an array to store the Longest increasing subsequence and update the array using binary search if any smaller element is found</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}