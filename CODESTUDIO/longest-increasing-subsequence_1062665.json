{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9573,
            "title": "Longest Increasing Subsequence",
            "titleSlug": "longest-increasing-subsequence_1062665",
            "content": "<h4 id=\"n-students-are-standing-in-a-row-you-are-given-the-height-of-every-student-standing-in-the-row-your-task-is-to-find-the-longest-strictly-increasing-subsequence-of-heights-from-the-row-such-that-the-relative-order-of-the-students-does-not-change\">&#39;N&#39; students are standing in a row. You are given the height of every student standing in the row. Your task is to find the longest strictly increasing subsequence of heights from the row such that the relative order of the students does not change.</h4>\n\n<pre><code>A subsequence is a sequence that can be derived from another sequence by deleting zero or more elements without changing the order of the remaining elements.\n</code></pre>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 , the number of students in the row. \n\nThe second line of each test case contains \u2018N\u2019 space separated integers representing the height of every student in the row. \n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>For each test case, return the length of longest strictly increasing subsequence of heights.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 200\n1 &lt;= heights[i] &lt;=10^9\n\nTime Limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>1\n6\n5 8 3 7 9 1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>3\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h4>\n\n<pre><code>The longest increasing subsequence is 5 7 9, with length 3.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>1\n16\n1 8 4 12 2 10 6 14 1 9 5 13 3 11 7 15\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>6\n</code></pre>\n\n<h4 id=\"explanation-of-sample-output-2\">Explanation of sample output 2:</h4>\n\n<pre><code>The longest increasing subsequences are {1 2 6 9 13 15}, {1 4 6 9 13 15},  with length 6.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of student heights, find the length of the longest strictly increasing subsequence. The relative order of students must be maintained.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 200",
                    "1 <= heights[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 6, heights=[5, 8, 3, 7, 9, 1]",
                        "output": "3",
                        "explanation": "The longest increasing subsequence is 5 7 9, with length 3."
                    },
                    {
                        "input": "n = 16, heights=[1, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]",
                        "output": "6",
                        "explanation": "The longest increasing subsequences are {1 2 6 9 13 15}, {1 4 6 9 13 15},  with length 6."
                    },
                    {
                        "input": "n = 5, heights=[1, 2, 3, 4, 5]",
                        "output": "5",
                        "explanation": "The sequence is already strictly increasing, so the longest increasing subsequence is the entire sequence itself."
                    },
                    {
                        "input": "n = 5, heights=[5, 4, 3, 2, 1]",
                        "output": "1",
                        "explanation": "The sequence is strictly decreasing, so the longest increasing subsequence is of length 1 (any single element)."
                    },
                    {
                        "input": "n = 1, heights=[10]",
                        "output": "1",
                        "explanation": "A single element is always an increasing subsequence of length 1."
                    },
                    {
                        "input": "n = 4, heights=[2, 2, 2, 2]",
                        "output": "1",
                        "explanation": "Since the sequence contains duplicate values, the longest strictly increasing subsequence will have length 1."
                    },
                    {
                        "input": "n = 7, heights=[10, 22, 9, 33, 21, 50, 41]",
                        "output": "5",
                        "explanation": "One of the possible LIS is {10, 22, 33, 50, 41} or {10, 22, 33, 50}"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find all possible strictly increasing subsequences and return the length of the longest.&nbsp;</p>",
            "<p>Try to think about the optimation of repetitive recursion calls.</p>",
            "<p>For every index of \u2018heights\u2019 array store the length of LIS found up to now.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}