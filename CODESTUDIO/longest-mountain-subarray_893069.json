{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8577,
            "title": "Longest Mountain Subarray",
            "titleSlug": "longest-mountain-subarray_893069",
            "content": "<h4 id=\"you-are-given-an-array-of-n-integers-denoting-the-heights-of-the-mountains-you-need-to-find-the-length-of-the-longest-subarray-which-has-the-shape-of-a-mountain\">You are given an array of &#39;N&#39; integers denoting the heights of the mountains. You need to find the length of the longest subarray which has the shape of a mountain.</h4>\n\n<h4 id=\"a-mountain-subarray-is-defined-as-a-subarray-which-consists-of-elements-that-are-initially-in-ascending-order-until-a-peak-element-is-reached-and-beyond-the-peak-element-all-other-elements-of-the-subarray-are-in-decreasing-order\">A mountain subarray is defined as a subarray which consists of elements that are initially in ascending order until a peak element is reached and beyond the peak element all other elements of the subarray are in decreasing order.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>If the given array is: [1 3 1 4]. The longest mountain subarray would be 3. This is because the longest mountain is  [1 3 1] having length 3.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer &#39;T&#39;, representing the number of test cases or queries to be run. \n\nThen the &#39;T&#39; test cases follow.\n\nThe first line of each test case contains a single integer &#39;N&#39; representing the length of the array.\n\nThe second line of each test case contains &#39;N&#39; space-separated integers denoting the elements of the given array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the length of the longest subarray which has the shape of a mountain in a seperate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 \u2264 T \u2264 10\n1 \u2264 N \u2264 10^5\n1 \u2264 Ai \u2264 10^9\n\nTime Limit : 1 sec \n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n4\n1 3 1 4\n6\n1 3 1 4 3 1\n3\n3 1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n4\n0\n</code></pre>\n\n<h5 id=\"explanation-of-input-1\">Explanation of Input 1:</h5>\n\n<pre><code>The first test case is already explained in the problem statement.\nThe second test case, the given array is: [1 3 1 4 3 1] and the longest mountain would be of length: 4 i.e. 1 4 3 1.\nThe third test case, the given array is: [3 1 3] and the longest mountain would be of length: 0 since there is no increasing, peak and decreasing subarray.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n4\n4 5 1 3\n5\n4 5 6 7 8\n4\n9 3 5 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>3\n0\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 103,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers representing mountain heights, find the length of the longest mountain subarray. A mountain subarray is defined as a subarray that first increases to a peak element, and then decreases from the peak.",
                "constraints": [
                    "1 \u2264 T \u2264 10",
                    "1 \u2264 N \u2264 10^5",
                    "1 \u2264 Ai \u2264 10^9",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4\n1 3 1 4",
                        "output": "3",
                        "explanation": "The longest mountain subarray is [1 3 1], with length 3."
                    },
                    {
                        "input": "6\n1 3 1 4 3 1",
                        "output": "4",
                        "explanation": "The longest mountain subarray is [1 3 1 4 3 1], with length 4 (e.g., 1 3 1, 1 4 3 1 are valid, but 1 3 1 4 is not)."
                    },
                    {
                        "input": "3\n3 1 3",
                        "output": "0",
                        "explanation": "There is no valid mountain subarray."
                    },
                    {
                        "input": "4\n4 5 1 3",
                        "output": "3",
                        "explanation": "The longest mountain subarray is [4 5 1], with length 3."
                    },
                    {
                        "input": "5\n4 5 6 7 8",
                        "output": "0",
                        "explanation": "There is no valid mountain subarray."
                    },
                    {
                        "input": "4\n9 3 5 4",
                        "output": "3",
                        "explanation": "The longest mountain subarray is [3 5 4], with length 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Generate all possible subarrays</p>",
            "<p>Use two pointers</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    where 'N' is the size of the given array.\n*/\n\nint longestMountain(int *arr, int n)\n{\n    if(n < 3)\n    {\n    \treturn 0;\n    }\n\n    int start = -1, end = -1;\n    int ans = 0;\n\n    for (int i = 0; i < n - 1; ++i)\n    {\n    \tif(arr[i+1] > arr[i])\n    \t{\n    \t\tif(end != -1) {\n    \t\t\tend = -1;\n    \t\t\tstart = -1;\n    \t\t}\n\n    \t\tif(start == -1) {\n\t    \t\tstart = i;\n\t    \t}\n    \t}\n    \telse\n    \t{\n    \t\tif(arr[i+1] < arr[i])\n    \t\t{\n    \t\t\tif(start != -1) {\n    \t\t\t\tend = i + 1;\n    \t\t\t}\n\n    \t\t\tif(end != -1 && start != -1) {\n    \t\t\t\tans = max(ans, end - start + 1);\n    \t\t\t}\n    \t\t}\n    \t\telse\n    \t\t{\n    \t\t\tstart = -1;\n    \t\t\tend = -1;\n    \t\t}\n    \t}\n    }\n\n    if(end != -1 && start != -1)\n    {\n    \tans = max(ans, end - start + 1);\n    }\n\n    return ans;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n        Time Complexity: O(N)\r\n        Space Complexity: O(1)\r\n\r\n        where 'N' is the size of the given array.\r\n'''\r\n\r\ndef longestMountain(arr, n):\r\n\r\n    if (n < 3):\r\n        return 0\r\n\r\n    start = -1\r\n    end = -1\r\n    ans = 0\r\n\r\n    for i in range(n - 1):\r\n\r\n        if (arr[i + 1] > arr[i]):\r\n\r\n            if (end != -1):\r\n                end = -1\r\n                start = -1\r\n\r\n            if (start == -1):\r\n                start = i\r\n\r\n        else:\r\n\r\n            if (arr[i + 1] < arr[i]):\r\n\r\n                if (start != -1):\r\n                    end = i + 1\r\n\r\n                if (end != -1 and start != -1):\r\n                    ans = max(ans, end - start + 1)\r\n\r\n            else:\r\n                start = -1\r\n                end = -1\r\n\r\n    if (end != -1 and start != -1):\r\n        ans = max(ans, end - start + 1)\r\n\r\n    return ans",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    where 'N' is the size of the given array.\n*/\n\nimport java.util.*; \n\npublic class Solution {\n    \n    public static int longestMountain(int arr[], int n)\n    {\n            if(n < 3)\n        {\n            return 0;\n        }\n\n        int start = -1, end = -1;\n        int ans = 0;\n\n        for (int i = 0; i < n - 1; ++i)\n        {\n            if(arr[i+1] > arr[i])\n            {\n                if(end != -1) {\n                    end = -1;\n                    start = -1;\n                }\n\n                if(start == -1) {\n                    start = i;\n                }\n            }\n            else\n            {\n                if(arr[i+1] < arr[i])\n                {\n                    if(start != -1) {\n                        end = i + 1;\n                    }\n\n                    if(end != -1 && start != -1) {\n                        ans = Math.max(ans, end - start + 1);\n                    }\n                }\n                else\n                {\n                    start = -1;\n                    end = -1;\n                }\n            }\n        }\n\n        if(end != -1 && start != -1)\n        {\n            ans = Math.max(ans, end - start + 1);\n        }\n\n        return ans;\n    }\n\n}\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}