{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8310,
            "title": "Longest Palindromic Subsequence",
            "titleSlug": "longest-palindromic-subsequence_842787",
            "content": "<h4 id=\"you-have-been-given-a-string-a-consisting-of-lower-case-english-letters-your-task-is-to-find-the-length-of-the-longest-palindromic-subsequence-in-a\">You have been given a string \u2018A\u2019 consisting of lower case English letters. Your task is to find the length of the longest palindromic subsequence in \u2018A\u2019.</h4>\n\n<h4 id=\"a-subsequence-is-a-sequence-generated-from-a-string-after-deleting-some-or-no-characters-of-the-string-without-changing-the-order-of-the-remaining-string-characters-i-e-ace-is-a-subsequence-of-abcde-while-aec-is-not\">A subsequence is a sequence generated from a string after deleting some or no characters of the string without changing the order of the remaining string characters. (i.e. \u201cace\u201d is a subsequence of \u201cabcde\u201d while \u201caec\u201d is not).</h4>\n\n<h4 id=\"a-string-is-said-to-be-palindrome-if-the-reverse-of-the-string-is-the-same-as-the-actual-string-for-example-abba-is-a-palindrome-but-abbc-is-not-a-palindrome\">A string is said to be palindrome if the reverse of the string is the same as the actual string. For example, \u201cabba\u201d is a palindrome, but \u201cabbc\u201d is not a palindrome.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases. Then the test cases follow.\n\nThe only line of each test case contains a single string \u2018A\u2019 consisting of only lowercase English letters.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer denoting the length of the longest palindromic subsequence in string \u2018A\u2019.\n\nThe output for each test case is in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10 ^ 2\n\nWhere \u2018T\u2019 is the number of test cases, and \u2018N\u2019 is the length of the string.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\nbbabcbcab\nbbbab\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>7\n4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, the longest palindromic subsequence is \u201cbabcbab\u201d, which has a length of 7. \u201cbbbbb\u201d and \u201cbbcbb\u201d are also palindromic subsequences of the given string, but not the longest one.\n\nFor the second test case, the longest palindromic subsequence is \u201cbbbb\u201d, which has a length of 4.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\ncbbd\nbebeeed\nabcd\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2\n4\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 86,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string \u2018A\u2019 consisting of lowercase English letters, determine the length of the longest palindromic subsequence in \u2018A\u2019. A subsequence is formed by deleting zero or more characters from the string without changing the order of the remaining characters (e.g., \"ace\" is a subsequence of \"abcde\"). A palindrome is a string that reads the same forwards and backward (e.g., \"abba\").",
                "constraints": [
                    "1 <= T <= 10, where \u2018T\u2019 is the number of test cases.",
                    "1 <= N <= 100, where \u2018N\u2019 is the length of the string \u2018A\u2019.",
                    "The string \u2018A\u2019 consists of lowercase English letters.",
                    "Time limit: 1 second."
                ],
                "testcases": [
                    {
                        "input": "bbabcbcab",
                        "output": "7",
                        "explanation": "The longest palindromic subsequence is \u201cbabcbab\u201d, which has a length of 7.  Other palindromic subsequences exist (e.g., \"bbbbb\", \"bbcbb\"), but they are not the longest."
                    },
                    {
                        "input": "bbbab",
                        "output": "4",
                        "explanation": "The longest palindromic subsequence is \u201cbbbb\u201d, which has a length of 4."
                    },
                    {
                        "input": "cbbd",
                        "output": "2",
                        "explanation": null
                    },
                    {
                        "input": "bebeeed",
                        "output": "4",
                        "explanation": null
                    },
                    {
                        "input": "abcd",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a recursive approach to check if the first and last characters are same or not?</p>",
            "<p>Can you think of storing the subproblem solutions rather than computing them again and again?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}