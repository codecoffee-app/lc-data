{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7624,
            "title": "Longest Palindromic Substring",
            "titleSlug": "longest-palindromic-substring_758900",
            "content": "<h4 id=\"you-are-given-a-string-str-of-length-n\">You are given a string <em><strong>&#39;str&#39;</strong></em> of length <em><strong>&#39;N&#39;</strong></em>.</h4>\n\n<p><br></p>\n\n<h4 id=\"your-task-is-to-return-the-longest-palindromic-substring-if-there-are-multiple-strings-return-any\">Your task is to return the longest palindromic substring. If there are multiple strings, return any.</h4>\n\n<p><br></p>\n\n<h4 id=\"a-substring-is-a-contiguous-segment-of-a-string\">A substring is a contiguous segment of a string.</h4>\n\n<p><br></p>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>str = &quot;ababc&quot;\n\nThe longest palindromic substring of &quot;ababc&quot; is &quot;aba&quot;, since &quot;aba&quot; is a palindrome and it is the longest substring of length 3 which is a palindrome. \n\nThere is another palindromic substring of length 3 is &quot;bab&quot;. Since starting index of &quot;aba&quot; is less than &quot;bab&quot;, so &quot;aba&quot; is the answer.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a string &#39;str&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The output contains the size of the longest palindromic substring if that substring is the answer, else -1.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"follow-up\">Follow up:</h4>\n\n<pre><code>Try to solve it using O(1) space complexity.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>abccbc\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>bccb\n</code></pre>\n\n<h5 id=\"explanation-for-input-1\">Explanation for input 1:</h5>\n\n<pre><code>For string &quot;abccbc&quot;,  there are several palindromic substrings such as &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;cc&quot;, &quot;bccb&quot;, and &quot;cbc&quot;. However, the longest palindromic substring is &quot;bccb&quot;.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>aeiou\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>a\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= |str| &lt;= 10^3\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 130,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'str' of length 'N', find the longest palindromic substring. If multiple such substrings exist, return any one of them.\n\nA substring is a contiguous sequence of characters within a string.\n\nFor example, if str = \"ababc\", the longest palindromic substrings are \"aba\" and \"bab\". Either can be returned.",
                "constraints": [
                    "1 <= |str| <= 10^3",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "abccbc",
                        "output": "bccb",
                        "explanation": "The string \"abccbc\" contains palindromic substrings like \"a\", \"b\", \"c\", \"cc\", \"bccb\", and \"cbc\".  \"bccb\" is the longest palindrome."
                    },
                    {
                        "input": "aeiou",
                        "output": "a",
                        "explanation": "Since all characters are distinct, each single character is a palindrome of length 1. 'a' is the first one encountered and therefore a valid answer."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of brute force and try to generate all substring.</p>",
            "<p>Think of dynamic programming and use the fact that STR[i, j] is palindrome only when STR[i + 1][j - 1] is palindrome and character at ith is equal to the character at jth.</p>",
            "<p>Think of expanding the string around all the possible centres of a potential palindrome.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N ^ 2)\r\n    Space Complexity: O(1)\r\n    \r\n    Where N is the length of the string.\r\n*/\r\n\r\n#include <algorithm>\r\n\r\nint expandAroundCenter(string str, int left, int right) \r\n{\r\n    int start = left, end = right;\r\n    int n = str.length();\r\n\r\n    // Expand the center.\r\n    while (start >= 0 && end < n && str[start] == str[end]) \r\n    {\r\n        start--;\r\n        end++;\r\n    }\r\n\r\n    return end - start - 1;\r\n}\r\n\r\nstring longestPalinSubstring(string str)\r\n{\r\n    int n = str.length();\r\n\r\n    if (n < 1) \r\n    {\r\n        return \"\";\r\n    }\r\n\r\n    int start = 0, end = 0;\r\n\r\n    for (int i = 0; i < n; i++) \r\n    {\r\n        // Longest odd length palindrome with center points as i.\r\n        int len1 = expandAroundCenter(str, i, i);\r\n\r\n        // Longest even length palindrome with center points as i and i + 1.\r\n        int len2 = expandAroundCenter(str, i, i + 1);\r\n\r\n        int len = max(len1, len2);\r\n\r\n        // Update the start and end.\r\n        if (len > end - start + 1) \r\n        {\r\n            start = i - (len - 1) / 2;\r\n            end = i + (len) / 2;\r\n        }\r\n\r\n    }\r\n\r\n    return str.substr(start, end - start + 1);\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity : O(N ^ 2)\n    Space Complexity: O(1)\n    \n    Where N is the length of the string.\n'''\n\ndef expandAroundCenter(str: str, left: int, right: int) -> int:\n\n    start = left\n    end = right\n    n = len(str)\n\n    # Expand the center.\n    while (start >= 0 and end < n and str[start] == str[end]):\n        start -= 1\n        end += 1\n\n    return end - start - 1\n\n\ndef longestPalinSubstring(str: str) -> str:\n    n= len(str)\n\n    if n < 1:\n        return \"\"\n\n    start = 0\n    end = 0\n    for i in range(n):\n        # Longest odd length palindrome with center points as i.\n        len1 = expandAroundCenter(str, i, i)\n\n        # Longest even length palindrome with center points as i and i + 1.\n        len2 = expandAroundCenter(str, i, i+1)\n\n        length = max(len1, len2)\n\n        if (length > end - start + 1):\n            start = i - (length - 1) // 2\n            end = i + (length) // 2\n\n    return str[start : end + 1]",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N ^ 2)\r\n    Space Complexity: O(1)\r\n\r\n    Where N is the length of the string.\r\n*/\r\npublic class Solution {\r\n    private static int expandAroundCenter(String str, int left, int right) {\r\n        int start = left, end = right;\r\n        int n = str.length();\r\n\r\n        // Expand the center\r\n        while (start >= 0 && end < n && str.charAt(start) == str.charAt(end)) {\r\n            start--;\r\n            end++;\r\n        }\r\n\r\n        return end - start - 1;\r\n    }\r\n\r\n    public static String longestPalinSubstring(String str) {\r\n        int n = str.length();\r\n\r\n        if (n < 1) {\r\n            return \"\";\r\n        }\r\n\r\n        int start = 0, end = 0;\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            // Longest odd length palindrome with center points as i.\r\n            int len1 = expandAroundCenter(str, i, i);\r\n\r\n            // Longest even length palindrome with center points as i and i + 1.\r\n            int len2 = expandAroundCenter(str, i, i + 1);\r\n\r\n            int len = Math.max(len1, len2);\r\n\r\n            // Update the start and end.\r\n            if (len > end - start + 1) {\r\n                start = i - (len - 1) / 2;\r\n                end = i + len / 2;\r\n            }\r\n        }\r\n\r\n        return str.substring(start, end + 1);\r\n    }\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}