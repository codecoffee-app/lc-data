{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10224,
            "title": "Longest Path In Directed Graph",
            "titleSlug": "longest-path-in-directed-graph_1172157",
            "content": "<h4 id=\"you-are-given-a-weighted-directed-acyclic-graph-dag-consisting-of-n-nodes-and-e-directed-edges-nodes-are-numbered-from-0-to-n-1-you-are-also-given-a-source-node-src-in-it-your-task-is-to-find-the-longest-distances-from-src-to-all-the-nodes-in-the-given-graph\">You are given a Weighted Directed Acyclic Graph (DAG) consisting of \u2018N\u2019 nodes and \u2018E\u2019 directed edges. Nodes are numbered from 0 to \u2019N\u2019-1. You are also given a source node \u2018Src\u2019 in it. Your task is to find the longest distances from \u2018Src\u2019 to all the nodes in the given graph.</h4>\n\n<h4 id=\"return-an-array-of-n-integers-where-ith-integer-gives-the-maximum-distance-of-the-node-i-from-the-source-node-src\">Return an array of \u2018N\u2019 integers where \u2018ith\u2019 integer gives the maximum distance of the node \u2018i\u2019 from the source node \u2018Src\u2019.</h4>\n\n<h4 id=\"a-directed-acyclic-graph-dag-is-a-directed-graph-that-contains-no-cycles\">A Directed Acyclic Graph (DAG) is a directed graph that contains no cycles.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<p>Print -1 if a node is not reachable from the given source node.</p>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Consider the following DAG consists of 5 nodes and 7 edges,  Let the source node \u2018Src\u2019 be 0.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/dirgraph-8042.jpg\" alt=\"alt text\"></p>\n\n<pre><code>Then the maximum distance of node 0 from the source node 0 is 0. (the distance of a node from itself is always 0).\nThe maximum distance of node 1 from the source node 0 is 3. The path that gives this maximum distance is 0 -&gt; 1.\nThe maximum distance of node 2 from the source node 0 is 10. The path that gives this maximum distance is 0 -&gt; 2.\nThe maximum distance of node 3 from the source node 0 is 15. The path that gives this maximum distance is 0 -&gt; 2 -&gt; 3.\nThe maximum distance of node 4 from the source node 0 is 54. The path that gives this maximum distance is 0 -&gt; 1 -&gt; 4.\n\nThus we should print 0 3 10 15 54\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. then \u2018T\u2019 test cases follow.\n\nThe first line of each test case consists of three space-separated integers \u2018N\u2019, \u2018E\u2019, and \u2018Src\u2019 representing the number of nodes, number of edges, and the given source node in the given DAG respectively.\n\nThe next \u2018E\u2019 lines consist of three space-separated integers \u2018U\u2019, \u2018V\u2019, \u2018W\u2019 representing that there is a directed edge from node U to V having weight \u2018W\u2019. \n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print \u2018N\u2019 space-separated integers where \u2019ith\u2019 integer gives the maximum distance of node \u2018i\u2019 from the source node \u2018Src\u2019.\n\nThe output of each test case will be printed in a new line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^4\n0 &lt;= E &lt;= 10^4\n0 &lt;= Src &lt;= N-1\n0 &lt;= U, V &lt;= N-1\n1 &lt;= W &lt;= 10^5\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019, \u2018E\u2019, and \u2018Src\u2019 representing the number of nodes, number of edges, and the given source node in the given DAG respectively.  \u2018U\u2019, \u2018V\u2019, \u2018W\u2019 represents that there is a directed edge from node U to V having weight \u2018W\u2019. \n\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 0 0\n5 7 0\n0 1 3\n0 2 10\n0 3 14\n1 3 7\n1 4 51\n2 3 5\n3 4 11\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0\n0 3 10 15 54\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nThere is only one node, which is also the source node since the distance from the source node to itself is 0, so we will print only a single integer 0.\n\nTest case 2:\nSee the problem statement for an explanation.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 4 2\n0 1 1\n0 2 1\n1 2 1\n3 4 1\n5 4 0\n0 1 1\n0 2 1\n1 2 1\n3 4 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1 -1 0 -1 -1\n 0  1  2 -1 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a weighted directed acyclic graph (DAG) with 'N' nodes (numbered 0 to N-1) and 'E' directed edges, find the longest distances from a source node 'Src' to all other nodes in the graph. Return an array of 'N' integers where the 'i-th' integer represents the maximum distance from 'Src' to node 'i'. If a node is not reachable from 'Src', return -1 for that node.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^4",
                    "0 <= E <= 10^4",
                    "0 <= Src <= N-1",
                    "0 <= U, V <= N-1",
                    "1 <= W <= 10^5",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 0 0",
                        "output": "0",
                        "explanation": "There is only one node, which is also the source node. The distance from the source node to itself is 0."
                    },
                    {
                        "input": "5 7 0\n0 1 3\n0 2 10\n0 3 14\n1 3 7\n1 4 51\n2 3 5\n3 4 11",
                        "output": "0 3 10 15 54",
                        "explanation": "Node 0: Distance from source 0 to itself is 0.\nNode 1: The longest path from 0 to 1 is 0 -> 1 (distance 3).\nNode 2: The longest path from 0 to 2 is 0 -> 2 (distance 10).\nNode 3: The longest path from 0 to 3 is 0 -> 2 -> 3 (distance 10 + 5 = 15).\nNode 4: The longest path from 0 to 4 is 0 -> 1 -> 4 (distance 3 + 51 = 54)."
                    },
                    {
                        "input": "5 4 2\n0 1 1\n0 2 1\n1 2 1\n3 4 1",
                        "output": "-1 -1 0 -1 -1",
                        "explanation": "From source node 2, nodes 0, 1, 3, and 4 are not reachable. Only node 2 itself is reachable, with a distance of 0."
                    },
                    {
                        "input": "5 4 0\n0 1 1\n0 2 1\n1 2 1\n3 4 1",
                        "output": "0 1 2 -1 -1",
                        "explanation": "From source node 0, nodes 1 and 2 are reachable with longest distances 1 and 2 respectively, while nodes 3 and 4 are unreachable. The longest paths are 0->1 (distance 1) and 0->1->2 (distance 2)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try out all possible paths starting from the source node.</p>",
            "<p>Process nodes in topological order</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}