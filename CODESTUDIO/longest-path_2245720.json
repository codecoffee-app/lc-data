{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14755,
            "title": "Longest Path",
            "titleSlug": "longest-path_2245720",
            "content": "<h4 id=\"you-have-been-practicing-on-the-topic-binary-tree-for-a-few-days-your-friend-challenges-you-by-giving-you-a-binary-tree-with-n-nodes-in-which-each-node-has-a-weight-associated-with-it-and-asks-you-to-find-the-largest-number-of-edges-such-that-the-nodes-connecting-those-edges-have-the-same-weight\">You have been practicing on the topic binary tree for a few days. Your friend challenges you by giving you a binary tree with \u2018N\u2019 nodes in which each node has a weight associated with it and asks you to find the largest number of edges such that the nodes connecting those edges have the same weight.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1. Two nodes may have the same value associated with it.\n2. The root node will be fixed and will be provided in the function.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains a single integer &#39;T&#39;, representing the number of test cases.\n\nThe first line of each test case contains an integer &#39;N&#39;, representing the number of nodes in the tree.\n\nThe second line of each test contains the \u2018N\u2019 single space-separated integers representing weight of each node in level order form.\n\nThe third line of each test case will contain the values of the nodes of the tree in the level order form ( -1 for &#39;NULL&#39; node) Refer to the example for further clarification.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Consider the binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-12546.PNG\" alt=\"\"></p>\n\n<pre><code>The input of the tree depicted in the image above will be like : \n1 2 2 3 4 5 3\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\nThe weight of the root node is 1.\n\nLevel 2 :\nLeft child of 1 = 2\nWeight of left child of 1 = 2\nRight child of 1 = 3\nWeight of right child of 1 = 2\n\nLevel 3 :\nLeft child of 2 = 4\nWeight of left child of 2 = 3\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nWeight of left child of 3 = 4\nRight child of 3 = 6\nWeight of right child of 3 = 5\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nWeight of right child of 4 = 3\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer representing the number of edges in the longest path.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^3\n1 &lt;= NODE[i] &lt;= 10^4\n1 &lt;= WEIGHT[i] &lt;= N\n\nWhere NODE[i] is the data of \u2018ith\u2019 node and WEIGHT[i] is weight of \u2018ith\u2019 node. \n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5\n1 1 1 2 2\n1 2 3 4 5 -1 -1 -1 -1 -1 -1\n3\n1 1 1\n2 3 1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For first test case the tree will be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-12482.PNG\" alt=\"\"></p>\n\n<pre><code>The longest path with nodes having the same weight is : (2 1 3).\nLength of longest path is  : 2.\n\nFor second test case tree will be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree1-12483.PNG\" alt=\"\"></p>\n\n<pre><code>The longest path with nodes having the same weight is : (3  2 1).\nLength of longest path is : 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n3\n1 2 3\n2 3 1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with 'N' nodes, where each node has an associated weight, find the largest number of edges such that the nodes connecting those edges have the same weight. Note that two nodes may have the same weight. The root node will be provided.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^3",
                    "1 <= NODE[i] <= 10^4",
                    "1 <= WEIGHT[i] <= N",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n1 1 1 2 2\n1 2 3 4 5 -1 -1 -1 -1 -1 -1",
                        "output": "2",
                        "explanation": "In the first test case, the longest path with nodes having the same weight is (2, 1, 3). The length of the longest path is 2."
                    },
                    {
                        "input": "3\n1 1 1\n2 3 1 -1 -1 -1 -1",
                        "output": "2",
                        "explanation": "In the second test case, the longest path with nodes having the same weight is (3, 2, 1). The length of the longest path is 2."
                    },
                    {
                        "input": "3\n1 2 3\n2 3 1 -1 -1 -1 -1",
                        "output": "0",
                        "explanation": "There are no adjacent nodes with the same weight in this testcase"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of traversing each node</p>",
            "<p>Think of traversing the binary tree while checking the weight of the nodes.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}