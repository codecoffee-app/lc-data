{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8992,
            "title": "Longest Path",
            "titleSlug": "longest-path_973008",
            "content": "<h4 id=\"you-are-given-a-directed-acyclic-graph-dag-with-e-edges-and-v-vertices-a-dag-is-a-type-of-graph-with-no-directed-cycles\">You are given a Directed Acyclic Graph (DAG) with \u2018E\u2019 edges and \u2018V\u2019 vertices. A DAG is a type of graph with no directed cycles.</h4>\n\n<h4 id=\"you-have-been-given-a-source-vertex-s-your-task-is-to-find-the-distance-between-s-and-the-farthest-vertex-reachable-from-s\">You have been given a source vertex \u2018S\u2019. Your task is to find the distance between \u2018S\u2019 and the farthest vertex reachable from \u2018S\u2019?</h4>\n\n<h4 id=\"example-given-a-dag-graph\">Example: Given a DAG graph :</h4>\n\n<p><img src=\"https://files.codingninjas.in/lp1-11493.PNG\" alt=\"\"></p>\n\n<pre><code>Source node: 1\nThe farthest vertex in the above graph from vertex 1 is 2 via the route of vertex 3. So, the distance is 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, the number of test cases.\n\nThe first line of each test case contains two single space-separated integers \u2018V\u2019 and \u2018E\u2019 representing the number of vertices and edges of the graph respectively.\n\nThe next \u2018E\u2019 lines will denote the edges of the graph where every edge is defined by two single space-separated integers \u2018X&#39; and &#39;Y&#39;, which signifies an edge from vertex &#39;X\u2019 to vertex &#39;Y&#39;.\n\nThe last line of each test case contains the single integer \u2018S\u2019, representing the Source vertex.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the distance between \u2018S\u2019 and the farthest vertex reachable from \u2018S\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= V &lt;= 10^3\n1 &lt;= E &lt;= 3*10^3\n1 &lt;= X, Y &lt;= V - 1\n0 &lt;= S &lt;= V - 1\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 3\n0 1\n1 2\n2 3\n1\n1 0\n0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For first test case, the graph will be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/lp2-11494.PNG\" alt=\"\"></p>\n\n<pre><code>The farthest vertex in the above graph from vertex 1 is 3 whose distance from vertex 1 is 2.\n\nFor second test case, the graph will be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/lps3-11497.PNG\" alt=\"\"></p>\n\n<pre><code>There are no vertices present other than 0, therefore distance will be 0.   \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n4 3\n0 1\n1 3\n3 2\n1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h5>\n\n<pre><code>For the test case, the graph will be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/lp4-11495.PNG\" alt=\"\"></p>\n\n<pre><code>The farthest vertex in the above graph from vertex 1 is 2 whose distance from vertex 1 is 2.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed acyclic graph (DAG) represented by its vertices and edges, and a source vertex 'S', determine the longest distance from 'S' to any reachable vertex in the graph. The distance is defined as the number of edges in the longest path from 'S'.",
                "constraints": [
                    "1 <= V <= 10^3",
                    "1 <= E <= 3*10^3",
                    "0 <= S <= V - 1"
                ],
                "testcases": [
                    {
                        "input": "edges=[[0,1],[1,2],[2,3]], v=4, e=3, source=1",
                        "output": "2",
                        "explanation": "The graph has vertices 0, 1, 2, and 3. The edges are (0, 1), (1, 2), and (2, 3). Starting from vertex 1, the farthest vertex is 3, which can be reached via the path 1 -> 2 -> 3. The distance is 2."
                    },
                    {
                        "input": "edges=[], v=1, e=0, source=0",
                        "output": "0",
                        "explanation": "The graph has only one vertex, 0, and no edges. The distance from 0 to itself is 0."
                    },
                    {
                        "input": "edges=[[0, 1],[1, 3],[3, 2]], v=4, e=3, source=1",
                        "output": "2",
                        "explanation": "The graph has vertices 0, 1, 2, and 3. The edges are (0, 1), (1, 3), and (3, 2). Starting from vertex 1, the farthest vertex is 2, which can be reached via the path 1 -> 3 -> 2. The distance is 2."
                    },
                    {
                        "input": "edges=[[0,0]], v=1, e=1, source=0",
                        "output": "0",
                        "explanation": "The graph has one vertex and one self-loop. Therefore the distance is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find the maximum number of vertices reachable from source by traversing.</p>",
            "<p>Maximum distance of some vertices is being calculated repetitively. Can you think of some approach to avoid that ?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}