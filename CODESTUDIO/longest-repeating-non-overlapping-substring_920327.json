{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8819,
            "title": "Longest Repeating Non-Overlapping Substring.",
            "titleSlug": "longest-repeating-non-overlapping-substring_920327",
            "content": "<h4 id=\"you-are-given-a-string-str-you-need-to-find-the-longest-repeating-and-non-overlapping-substring-in-the-given-string\">You are given a string \u2018str\u2019, you need to find the longest repeating and non-overlapping substring in the given string.</h4>\n\n<h4 id=\"a-substring-of-a-string-can-be-defined-as-a-contiguous-subsequence-of-that-string-in-other-words-a-string-x-is-said-to-be-a-substring-of-the-string-s-if-x-s-a-b-s-a-s-a-1-s-b-and-0-a-b-len-s-0-based-indexing\">A substring of a string can be defined as a contiguous subsequence of that string. In other words, a string X is said to be a substring of the string S if X = S[a...b] = S[a]S[a+1]\u2026..S[b] and 0 &lt;= a &lt;= b &lt;= len(S) (0-based indexing).</h4>\n\n<h4 id=\"you-can-return-any-such-substring-if-more-than-one-such-substring-exists-in-the-string-if-there-is-no-such-substring-return-1\">You can return any such substring if more than one such substring exists in the string. If there is no such substring, return -1.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. Repeating substrings in a string means those substrings which occur more than once in a string. For example, in the string \u201cabaaba\u201d, substrings \u201ca\u201d, \u201cb\u201d, \u201cab\u201d, \u201cba\u201d, \u201caba\u201d are repeating.\n\n2. Two substrings are called Non-overlapping substrings, if the intersection of all the indices of first substring i.e. [L1, R1] where L1 and R1 are the starting and ending index of the first substring respectively, and indices of the second substring i.e. [L2, R2] where L2 and R2 are the starting and ending indices respectively of the second substring, is NULL.\n\n3. For example, in the string \u201cabaaba\u201d, two non-overlapping strings are \u201cab\u201d lying in the interval [0, 1] (0-based indexing) and \u201caba\u201d lying in the interval [3, 5] (0-based indexing). \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer T denoting the number of test cases.\n\nThe first and the only line of each test case contains the string str, whose longest repeating non-overlapping substring is to be found.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output of each test case should contain a string representing the longest repeating non-overlapping substring of the input string or -1 if no such substring exists.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= len(S) &lt;= 100    \nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\nabaaba\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>aba\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-11-23-11-26-29-6148.png\" alt=\"sample_input_1_explanation\"></p>\n\n<pre><code>The substring \u201caba\u201d of length 3, is present twice in the given string and also both the occurrences are non-overlapping to each other.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\ncodingninjassajningnidoc\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>ingni\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2:</h5>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-11-23-11-15-35-6147.png\" alt=\"sample_input_2_explanation\"></p>\n\n<pre><code>The substring \u201cingni\u201d of length 5, is maximum repeating non-overlapping substring in the given word and occurs twice.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'str', find the longest repeating and non-overlapping substring within it. A repeating substring is one that occurs more than once in the string. Non-overlapping substrings are those where the indices of their occurrences do not intersect.  Return any such substring if multiple exist. If no such substring exists, return -1.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= len(S) <= 100",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "abaaba",
                        "output": "aba",
                        "explanation": "The substring \"aba\" appears twice in the string \"abaaba\" and the occurrences are non-overlapping. It's the longest such substring."
                    },
                    {
                        "input": "codingninjassajningnidoc",
                        "output": "ingni",
                        "explanation": "The substring \"ingni\" appears twice in the string \"codingninjassajningnidoc\" and the occurrences are non-overlapping.  It's the longest such substring."
                    },
                    {
                        "input": "abcdefg",
                        "output": "-1",
                        "explanation": "There are no repeating non-overlapping substrings in the input string."
                    },
                    {
                        "input": "ababab",
                        "output": "abab",
                        "explanation": "The substring \"abab\" appears twice in the string \"ababab\" and the occurrences are non-overlapping. It's the longest such substring."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}