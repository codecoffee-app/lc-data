{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9595,
            "title": "Longest Repeating Subsequence",
            "titleSlug": "longest-repeating-subsequence_1062697",
            "content": "<h4 id=\"given-a-string-str-you-are-supposed-to-return-the-length-of-the-longest-repeating-subsequence-such-that-the-two-subsequences-don-t-have-the-same-string-character-at-the-same-position-which-means-that-any-ith-character-in-the-two-subsequences-shouldn-t-have-the-same-index-in-the-original-string\">Given a string &#39;STR&#39;, you are supposed to return the length of the longest repeating subsequence such that the two subsequences don\u2019t have the same string character at the same position which means that any ith character in the two subsequences shouldn\u2019t have the same index in the original string.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>In a string \u201cabaacbc\u201d, the length of the longest repeating subsequence is 3 considering the subsequence \u201cabc\u201d. The subsequence \u201cabc\u201d which is present at positions [1,2,5] and [4,6,7] are the longest repeating subsequence in the given string.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases.\n\nEach test case contains a single string \u201cSTR\u201d denoting the given string.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the length of the longest repeating subsequence.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just complete the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 100\n\nWhere \u2018T\u2019 is the number of test cases.\n&#39;N&#39; is the length of the given string.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\naabb\nab   \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>In the first test case, the length of the longest repeating subsequence is 2 considering the subsequence \u201cab\u201d.\nIn the second test case, cannot find any longest repeating subsequence in the given string so the result is 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\nabacb\nabscabdcabd \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n6\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h5>\n\n<pre><code>In the first test case, the length of the longest repeating subsequence is 2 considering the subsequence \u201cab\u201d.\n\nIn the second test case, the length of the longest repeating subsequence is 6 considering the subsequence \u201cabcabd\u201d.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'STR', find the length of the longest repeating subsequence. The two subsequences must not have the same character at the same position (i.e., the ith character in the two subsequences shouldn't have the same index in the original string).",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 100",
                    "Where \u2018T\u2019 is the number of test cases.",
                    "\u2018N\u2019 is the length of the given string.",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "aabb",
                        "output": "2",
                        "explanation": "The longest repeating subsequence is \"ab\" with length 2."
                    },
                    {
                        "input": "ab",
                        "output": "0",
                        "explanation": "There is no repeating subsequence in the given string."
                    },
                    {
                        "input": "abacb",
                        "output": "2",
                        "explanation": "The longest repeating subsequence is \"ab\"."
                    },
                    {
                        "input": "abscabdcabd",
                        "output": "6",
                        "explanation": "The longest repeating subsequence is \"abcabd\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find out all the subsequences which have the same characters.</p>",
            "<p>Can you think of using memoization?</p>",
            "<p>Try to find the subsequences which have common characters.</p>",
            "<p>Do you really need a DP matrix of size N x N? Think of optimizing the memory.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}