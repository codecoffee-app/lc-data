{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9186,
            "title": "Longest Repeating Substring",
            "titleSlug": "longest-repeating-substring_980523",
            "content": "<h4 id=\"you-are-given-a-string-str-of-length-n-you-can-perform-at-most-k-operations-on-this-string-in-one-operation-you-can-choose-any-character-of-the-string-and-change-it-to-any-other-uppercase-english-alphabet-character\">You are given a string <em><strong>&#39;str&#39;</strong></em> of length <em><strong>&#39;N&#39;</strong></em>. You can perform at most <em><strong>&#39;k&#39;</strong></em> operations on this string. In one operation, you can choose any character of the string and change it to any other uppercase English alphabet character.</h4>\n\n<p><br></p>\n\n<h4 id=\"return-the-length-of-the-longest-substring-containing-same-characters-after-performing-the-above-operations\">Return the length of the longest substring containing same characters after performing the above operations.</h4>\n\n<p><br></p>\n\n<h4 id=\"for-example\">For example :</h4>\n\n<pre><code>Input:\nstr=&quot;AABC&quot;  k=1\n\nOutput:3\n\nExplanation: Replace &#39;B&#39; with &#39;A&#39;, we will get &quot;AAAC&quot; and the longest substring with same character is &quot;AAA&quot; of length 3.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line contains a string &#39;str&#39; consisting of uppercase English alphabet letters.\n\nThe second line contains a positive integer &#39;k&#39;, which represents the maximum number of operations you can perform.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>The output contains the length of the longest repeating substring with the same characters that we can obtain after performing &#39;k&#39; operations.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>ABCCAA\n2\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>4\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h4>\n\n<pre><code>\u201cAAAA\u201d and \u201cCCCC\u201d are the longest repeating substring we can get after performing 2 operations.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>ABA\n3\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>3\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= |s| &lt;= 10^5\n0 &lt;= k &lt;= |s|\n&#39;s&#39; consists of only uppercase English letters.\n\n\nwhere |s| is the length of the given string.\n\nTime Limit: 1sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 57,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `str` of length `N` consisting of uppercase English alphabet letters, and an integer `k` representing the maximum number of operations allowed. In each operation, you can change any character of the string to any other uppercase English alphabet character. Determine the length of the longest substring containing the same characters that can be obtained after performing at most `k` operations.",
                "constraints": [
                    "1 <= |str| <= 10^5",
                    "0 <= k <= |str|",
                    "`str` consists of only uppercase English letters."
                ],
                "testcases": [
                    {
                        "input": "str = \"AABC\", k = 1",
                        "output": "3",
                        "explanation": "Replacing 'B' with 'A', we get \"AAAC\". The longest substring with the same character is \"AAA\" of length 3."
                    },
                    {
                        "input": "str = \"ABCCAA\", k = 2",
                        "output": "4",
                        "explanation": "\"AAAA\" and \"CCCC\" are the longest repeating substrings we can get after performing 2 operations."
                    },
                    {
                        "input": "str = \"ABA\", k = 3",
                        "output": "3",
                        "explanation": "We can change both 'B' to 'A' or both 'A's to 'B', resulting in \"AAA\" or \"BBB\" respectively, both of length 3. Since we have enough operations, the entire string can be converted to the same character."
                    },
                    {
                        "input": "str = \"ABCDE\", k = 0",
                        "output": "1",
                        "explanation": "No operations are allowed, so the longest substring with the same character is of length 1 for any character."
                    },
                    {
                        "input": "str = \"AAAA\", k = 2",
                        "output": "4",
                        "explanation": "No operations are required, and the longest repeating substring is already \"AAAA\"."
                    },
                    {
                        "input": "str = \"ABAB\", k = 2",
                        "output": "4",
                        "explanation": "We can change both 'B's to 'A's to get \"AAAA\", or both 'A's to 'B's to get \"BBBB\", both with length 4."
                    },
                    {
                        "input": "str = \"KKKKKKKKK\", k = 0",
                        "output": "9",
                        "explanation": "The given string already contains the same character repeated 9 times and no operations are allowed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For each substring, check if it can be the longest repeating substring after performing at most K operations.</p>",
            "<p>Think of using two pointers such that we can make the string between the two pointers into a repeating string.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}