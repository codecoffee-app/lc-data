{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10162,
            "title": "Longest Route",
            "titleSlug": "longest-route_1170525",
            "content": "<h4 id=\"you-are-given-a-2-d-binary-matrix-mat-of-dimensions-n-x-m-consisting-only-of-0s-and-1s-the-cell-consisting-of-0-means-that-the-cell-is-blocked-and-it-cannot-be-visited-whereas-a-cell-with-1-as-a-value-means-it-can-be-visited\">You are given a 2-D binary matrix &quot;Mat&quot; of dimensions N x M consisting only of 0s and 1s. The cell consisting of 0 means that the cell is blocked and it cannot be visited whereas a cell with 1 as a value means it can be visited.</h4>\n\n<h4 id=\"you-are-given-a-source-cell-and-a-destination-cell-you-need-to-find-the-length-of-the-longest-possible-path-from-source-to-destination-given-you-can-only-move-in-4-possible-directions-north-i-e-from-i-j-to-i-1-j-south-i-e-from-i-j-to-i-1-j-east-i-e-from-i-j-to-i-j-1-and-west-i-e-from-i-j-to-i-j-1-and-without-visiting-a-cell-twice\">You are given a source cell and a destination cell. You need to find the length of the longest possible path from source to destination, given you can only move in 4 possible directions north(i.e from (i,j) to (i-1,j)), south(i.e from (i,j) to (i+1,j)), east(i.e from (i,j) to (i,j-1)), and west(i.e from (i,j) to (i,j+1)), and without visiting a cell twice.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. If the move isn\u2019t possible you remain in that cell only.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains two space-separated integers &#39;N&#39; and \u2018M\u2019, denoting the number of rows and columns of the matrix respectively.\n\nNext, there will be N lines each containing M space-separated integers denoting the description of the matrix.\n\nThe next line contains two space-separated integers \u2018Sx\u2019, \u2018Sy\u2019 denoting the indexes of the source cell\n\nThe next line contains two space-separated integers \u2018Dx\u2019, \u2018Dy\u2019 denoting the indexes of the destination cell\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>If a path exists then print the length of the longest possible path from source to destination. \nOtherwise, print -1.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N, M &lt;= 12 , such that N+M &lt;=12\n0 &lt;= Mat[i][j]  &lt;= 1 , \n0 &lt;= Sx, Dx &lt;= N-1\n0 &lt;= Sy, Dy &lt;= M-1\nWhere Mat[i][j] is the value at position i,j in the matrix.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3 3\n1 1 0\n0 1 1\n1 0 1\n0 0\n2 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>The only and longest path is  :  (0,0) -&gt; (0,1) -&gt; (1,1) -&gt; (1,2) -&gt; (2,2) \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/mat-8048.png\" alt=\"sample 1\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3 3\n0 1 0\n0 1 1\n1 0 1\n0 0\n2 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D binary matrix `mat` of dimensions N x M consisting only of 0s and 1s, where 0 represents a blocked cell and 1 represents a traversable cell.  You are also given a source cell (sx, sy) and a destination cell (dx, dy). Find the length of the longest possible path from the source to the destination, moving only in four directions (north, south, east, and west) without revisiting any cell. If no path exists, return -1.",
                "constraints": [
                    "1 <= N, M <= 12, such that N+M <=12",
                    "0 <= Mat[i][j]  <= 1",
                    "0 <= Sx, Dx <= N-1",
                    "0 <= Sy, Dy <= M-1"
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 3, mat = [[1, 1, 0], [0, 1, 1], [1, 0, 1]], sx = 0, sy = 0, dx = 2, dy = 2",
                        "output": "4",
                        "explanation": "The only and longest path is: (0,0) -> (0,1) -> (1,1) -> (1,2) -> (2,2). The length of this path is 4."
                    },
                    {
                        "input": "n = 3, m = 3, mat = [[0, 1, 0], [0, 1, 1], [1, 0, 1]], sx = 0, sy = 0, dx = 2, dy = 2",
                        "output": "-1",
                        "explanation": "There is no path from (0,0) to (2,2) since (0,0) is blocked."
                    },
                    {
                        "input": "n = 2, m = 2, mat = [[1, 1], [1, 1]], sx = 0, sy = 0, dx = 1, dy = 1",
                        "output": "3",
                        "explanation": "The longest path is (0,0) -> (0,1) -> (1,1) or (0,0) -> (1,0) -> (1,1), with length 3."
                    },
                    {
                        "input": "n = 3, m = 4, mat = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], sx = 0, sy = 0, dx = 2, dy = 3",
                        "output": "11",
                        "explanation": "All cells are 1's, so the longest path traverses all cells exactly once. Total cells = 3 * 4 = 12. Path length = 12 - 1 = 11."
                    },
                    {
                        "input": "n = 1, m = 1, mat = [[1]], sx = 0, sy = 0, dx = 0, dy = 0",
                        "output": "0",
                        "explanation": "Source and destination are the same and the only cell. Path Length = 0"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a backtracking solution while keeping track of visited cells</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}