{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22466,
            "title": "Longest Subarray With Sum K.",
            "titleSlug": "longest-subarray-with-sum-k_5713505",
            "content": "<h4 id=\"ninja-and-his-friend-are-playing-a-game-of-subarrays-they-have-an-array-nums-of-length-n-ninja-s-friend-gives-him-an-arbitrary-integer-k-and-asks-him-to-find-the-length-of-the-longest-subarray-in-which-the-sum-of-elements-is-equal-to-k\">Ninja and his friend are playing a game of subarrays. They have an array \u2018NUMS\u2019 of length \u2018N\u2019. Ninja\u2019s friend gives him an arbitrary integer \u2018K\u2019 and asks him to find the length of the longest subarray in which the sum of elements is equal to \u2018K\u2019.</h4>\n\n<h4 id=\"ninjas-asks-for-your-help-to-win-this-game-find-the-length-of-the-longest-subarray-in-which-the-sum-of-elements-is-equal-to-k\">Ninjas asks for your help to win this game. Find the length of the longest subarray in which the sum of elements is equal to \u2018K\u2019.</h4>\n\n<h4 id=\"if-there-is-no-subarray-whose-sum-is-k-then-you-should-return-0\">If there is no subarray whose sum is \u2018K\u2019 then you should return 0.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018N\u2019 = 5,  \u2018K\u2019 = 4, \u2018NUMS\u2019 = [ 1, 2, 1, 0, 1 ]\n\nOutput: 4\n\nThere are two subarrays with sum = 4, [1, 2, 1] and [2, 1, 0, 1]. Hence the length of the longest subarray with sum = 4 is 4.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain the integer &#39;T&#39;, denoting the number of test cases.\n\nThe first line of each test case contains two integers \u2018N\u2019 and \u2018K\u2019 denoting the length of the array \u2018NUMS\u2019 and an arbitrary integer.\n\nThe second line of each test case contains \u2018N\u2019 space separated integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, you don\u2019t need to print anything just return the length of the longest subarray with the sum \u2018K\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n-10^6 &lt;= NUMS[ i ] &lt;= 10^6\n-10^6 &lt;= K &lt;= 10^6\n\nSum of N Over all the Test cases &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 5\n2 3 5\n3 1\n-1 1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first case:\nThere are two subarrays with sum = 5, [2, 3] and [5]. Hence the length of the longest subarray is 2.\n\nFor the second case:\nLongest subarray with sum = 1 is [1, -1, 1].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 4\n1 1 1\n3 2\n-50 0 52\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0 \n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 448,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the length of the longest subarray whose elements sum up to a given target value 'K'. If no such subarray exists, return 0.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "-10^6 <= NUMS[ i ] <= 10^6",
                    "-10^6 <= K <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "nums=[1, 2, 1, 0, 1], k=4",
                        "output": "4",
                        "explanation": "The longest subarray with a sum of 4 is [2, 1, 0, 1], which has a length of 4."
                    },
                    {
                        "input": "nums=[2, 3, 5], k=5",
                        "output": "1",
                        "explanation": "There are two subarrays with sum = 5, [2, 3] and [5]. [5] is the longest subarray with sum of 5. So the output is 1."
                    },
                    {
                        "input": "nums=[-1, 1, 1], k=1",
                        "output": "3",
                        "explanation": "The longest subarray with a sum of 1 is [-1, 1, 1], which has a length of 3."
                    },
                    {
                        "input": "nums=[1, 1, 1], k=4",
                        "output": "0",
                        "explanation": "There are no subarrays with a sum of 4."
                    },
                    {
                        "input": "nums=[-50, 0, 52], k=2",
                        "output": "3",
                        "explanation": "The longest subarray is [-50, 0, 52] is 3."
                    },
                    {
                        "input": "nums=[1,2,3,4,5], k=15",
                        "output": "5",
                        "explanation": "The subarray [1,2,3,4,5] sums to 15 and is of length 5"
                    },
                    {
                        "input": "nums=[1,2,3,4,5], k=1",
                        "output": "1",
                        "explanation": "The subarray [1] sums to 1 and is of length 1"
                    },
                    {
                        "input": "nums=[0,0,0], k=0",
                        "output": "3",
                        "explanation": "The subarray [0,0,0] sums to 0 and is of length 3."
                    },
                    {
                        "input": "nums=[-1,-2,-3], k=-3",
                        "output": "2",
                        "explanation": "The subarray [-1,-2] sums to -3 and has length 2."
                    },
                    {
                        "input": "nums=[1, -1, 5, -2, 3], k=3",
                        "output": "4",
                        "explanation": "The subarray [-1, 5, -2, 3] sums to 3 with length 4, and [3] sums to 3 with length 1, so 4 is the correct output."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a way to iterate over all the subarrays and then find the longest subarray?</p>",
            "<p>Can you solve this problem with a hashtable?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O( N  ),\r\n    Space complexity: O( N )\r\n\r\n    Where 'N' is the length of the array.\r\n*/\r\n\r\n#include <unordered_map>\r\n\r\nint getLongestSubarray(vector<int>& nums, int k) {\r\n    int n = nums.size();\r\n\r\n    // Declare a hashtable 'prefixSumMap'.\r\n    unordered_map<int, int> prefixSumMap;\r\n\r\n    // Initialize a variable 'ANS' with 0.\r\n    int ans = 0;\r\n\r\n    // Initialize a variable 'SUM' with 0.\r\n    int sum = 0;\r\n\r\n    // Assign -1 to 'prefixSumMap[ 0 ]'.\r\n    prefixSumMap[0] = -1;\r\n\r\n    // Run a loop from 'i' = 0....'N' - 1:\r\n    for (int i = 0; i < n; i++) {\r\n        // Add the value of 'NUMS[ i ]' in variable 'SUM'.\r\n        sum += nums[i];\r\n\r\n        // If the value 'SUM' - 'K' is already present in the hashtable\r\n        // then update the value of 'ANS' with maximum of 'ANS' and\r\n        // 'i' - 'prefixSumMap[ SUM - K ]' + 1.\r\n        if (prefixSumMap.find(sum - k) != prefixSumMap.end()) {\r\n            ans = max(ans, i - prefixSumMap[sum - k]);\r\n        }\r\n\r\n        // If the value of 'SUM' is not present in the hashtable then\r\n        // do 'prefixSumMap[ SUM ]' = 'i'\r\n        if (prefixSumMap.find(sum) == prefixSumMap.end()) {\r\n            prefixSumMap[sum] = i;\r\n        }\r\n    }\r\n\r\n    // Return the value of variable 'ANS'.\r\n    return ans;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O( N  ),\r\n    Space complexity: O( N )\r\n\r\n    Where 'N' is the length of the array.\r\n*/\r\nimport java.util.*;\r\npublic class Solution {\r\n\r\n    public static int getLongestSubarray(int []nums, int k) {\r\n        int n = nums.length;\r\n\r\n        // Declare a hashtable 'prefixSumMap'.\r\n        HashMap<Integer, Integer> prefixSumMap = new HashMap<>();\r\n\r\n        // Initialize a variable 'ANS' with 0.\r\n        int ans = 0;\r\n\r\n        // Initialize a variable 'SUM' with 0.\r\n        int sum = 0;\r\n\r\n        // Assign -1 to 'prefixSumMap[ 0 ]'.\r\n        prefixSumMap.put(0,-1);\r\n\r\n        // Run a loop from 'i' = 0....'N' - 1:\r\n        for (int i = 0; i < n; i++) {\r\n            // Add the value of 'NUMS[ i ]' in variable 'SUM'.\r\n            sum += nums[i];\r\n\r\n            // If the value 'SUM' - 'K' is already present in the hashtable\r\n            // then update the value of 'ANS' with maximum of 'ANS' and\r\n            // 'i' - 'prefixSumMap[ SUM - K ]' + 1.\r\n            if (prefixSumMap.containsKey(sum-k)) {\r\n                ans = Math.max(ans, i - prefixSumMap.get(sum - k));\r\n            }\r\n\r\n            // If the value of 'SUM' is not present in the hashtable then\r\n            // do 'prefixSumMap[ SUM ]' = 'i'\r\n            if (!prefixSumMap.containsKey(sum)) {\r\n                prefixSumMap.put(sum,i);\r\n            }\r\n        }\r\n\r\n        // Return the value of variable 'ANS'.\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time Complexity : O( N  ),\r\n    Space complexity: O( N )\r\n\r\n    Where 'N' is the length of the array.\r\n\"\"\"\r\n\r\ndef getLongestSubarray(nums: [int], k: int) -> int:\r\n    n = len(nums)\r\n\r\n    # Declare a hashtable 'prefixSumMap'.\r\n    prefixSumMap = {}\r\n\r\n    # Initialize a variable 'ANS' with 0.\r\n    ans = 0\r\n\r\n    # Initialize a variable 'SUM' with 0.\r\n    sum = 0\r\n\r\n    # Assign -1 to 'prefixSumMap[ 0 ]'.\r\n    prefixSumMap[0] = -1\r\n\r\n    # Run a loop from 'i' = 0....'N' - 1:\r\n    for i in range(n):\r\n        # Add the value of 'NUMS[ i ]' in variable 'SUM'.\r\n        sum += nums[i]\r\n\r\n        # If the value 'SUM' - 'K' is already present in the hashtable\r\n        # then update the value of 'ANS' with maximum of 'ANS' and\r\n        # 'i' - 'prefixSumMap[ SUM - K ]' + 1.\r\n        if prefixSumMap.get(sum - k) != None:\r\n            ans = max(ans, i - prefixSumMap[sum - k])\r\n\r\n        # If the value of 'SUM' is not present in the hashtable then\r\n        # do 'prefixSumMap[ SUM ]' = 'i'\r\n        if prefixSumMap.get(sum) == None:\r\n            prefixSumMap[sum] = i\r\n\r\n    # Return the value of variable 'ANS'.\r\n    return ans\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}