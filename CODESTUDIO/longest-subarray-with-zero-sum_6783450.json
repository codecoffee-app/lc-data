{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 23470,
            "title": "Longest Subarray With Zero Sum",
            "titleSlug": "longest-subarray-with-zero-sum_6783450",
            "content": "<h4 id=\"ninja-is-given-an-array-arr-of-size-n-you-have-to-help-him-find-the-longest-subarray-of-arr-whose-sum-is-0-you-must-return-the-length-of-the-longest-subarray-whose-sum-is-0\">Ninja is given an array <em><strong>\u2018Arr\u2019</strong></em> of size <em><strong>\u2018N\u2019</strong></em>. You have to help him find the longest subarray of \u2018Arr\u2019, whose sum is 0. You must return the length of the longest subarray whose sum is 0.</h4>\n\n<p><Br></p>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>For N = 5, and Arr = {1, -1, 0, 0, 1}, \nWe have the following subarrays with zero sums: \n{{1, -1}, {1, -1, 0}, {1, -1, 0, 0}, {-1, 0, 0, 1}, {0}, {0, 0}, {0}}\nAmong these subarrays, {1, -1, 0, 0} and {-1, 0, 0, 1} are the longest subarrays with their sum equal to zero. Hence the answer is 4.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018N\u2019, denoting the size of the array \u2018Arr\u2019.\nThe second line contains \u2018N\u2019 space-separated integers denoting the elements of \u2018Arr\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>You must return an integer representing the length of the longest subarray with a sum equal to zero.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4\n1 0 -1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>The subarrays with sums equal to zero are: {{1, 0, -1}, {0}, {0, -1, 1}, {-1, 1}}.\nAmong these, {1, 0, -1} and {0, -1, 1} are the longest with length equal to 3.\nHence the answer is 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^5\n-10^9 &lt;= Arr[i] &lt;= 10^9\n\nThe sum of \u2018N\u2019 over all test cases is less than or equal to 10^5.\nTime Limit: 1 sec.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 105,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the length of the longest subarray whose sum is equal to zero.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "-10^9 <= Arr[i] <= 10^9",
                    "The sum of \u2018N\u2019 over all test cases is less than or equal to 10^5."
                ],
                "testcases": [
                    {
                        "input": "n = 4, arr = [1, 0, -1, 1]",
                        "output": "3",
                        "explanation": "The subarrays with sums equal to zero are: {{1, 0, -1}, {0}, {0, -1, 1}, {-1, 1}}. Among these, {1, 0, -1} and {0, -1, 1} are the longest with length equal to 3. Hence the answer is 3."
                    },
                    {
                        "input": "n = 2, arr = [1, 1]",
                        "output": "0",
                        "explanation": "There are no subarrays with a sum equal to zero."
                    },
                    {
                        "input": "n = 5, arr = [1, -1, 0, 0, 1]",
                        "output": "4",
                        "explanation": "The longest subarrays with a sum of zero are {1, -1, 0, 0} and {-1, 0, 0, 1}, both of length 4."
                    },
                    {
                        "input": "n = 3, arr = [0, 0, 0]",
                        "output": "3",
                        "explanation": "The entire array [0, 0, 0] sums to zero and is the longest possible subarray."
                    },
                    {
                        "input": "n = 6, arr = [9, -3, -5, -1, 4, 8]",
                        "output": "0",
                        "explanation": "There is no subarray with sum zero."
                    },
                    {
                        "input": "n = 5, arr = [-1, 1, -1, 1, -1]",
                        "output": "2",
                        "explanation": "The longest subarrays with zero sum are [-1, 1] and [1, -1]. Their length is 2."
                    },
                    {
                        "input": "n = 1, arr = [0]",
                        "output": "1",
                        "explanation": "The subarray [0] has a sum of zero and a length of 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Do we really need to iterate through a subarray each time, to find its sum?</p>",
            "<p>Do we really need to iterate over all subarrays?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\nTime Complexity: O(N), where 'N' is the length of 'Arr'.\n\nSpace Complexity: O(N), where 'N' is the length of 'Arr'.\n*/\n\n#include<vector>\n#include<unordered_map>\n\nint getLongestZeroSumSubarrayLength(vector<int> &arr){\n\tint n = arr.size();\n\tlong long prefix_sum = 0;\n\tint ans = 0;\n\t\n\t// The hashmap to store the first index at which a prefix sum occurs.\n\tunordered_map<long long, int> first_index;\n\tfirst_index[0] = -1;\n\t\n\t// Traversing through the array.\n\tfor(int i = 0; i < n; ++i){\n\t\tprefix_sum += arr[i];\n\t\t\n\t\t// Finding the longest length subarray ending at 'i' and having zero-sum.\n\t\tif(first_index.find(prefix_sum) != first_index.end())\n\t\t\tans = max(ans, i - first_index[prefix_sum]);\n\t\telse\n\t\t\tfirst_index[prefix_sum] = i;\n\t} \n\treturn ans;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\nTime Complexity: O(N), where 'N' is the length of 'Arr'.\r\n\r\nSpace Complexity: O(N), where 'N' is the length of 'Arr'.\r\n*/\r\nimport java.util.*;\r\npublic class Solution {\r\n    public static int getLongestZeroSumSubarrayLength(int []arr){\r\n        int n = arr.length;\r\n        long prefix_sum = 0l;\r\n        int ans = 0;\r\n\r\n        // The hashmap to store the first index at which a prefix sum occurs.\r\n        Map<Long, Integer> first_index = new HashMap<>();\r\n        first_index.put(0l, -1);\r\n\r\n        // Traversing through the array.\r\n        for(int i = 0; i < n; ++i){\r\n            prefix_sum += arr[i];\r\n\r\n            // Finding the longest length subarray ending at 'i' and having zero-sum.\r\n            if(first_index.containsKey(prefix_sum))\r\n                ans = Math.max(ans, i - first_index.get(prefix_sum));\r\n            else\r\n                first_index.put(prefix_sum, i);\r\n        }\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(N), where 'N' is the length of 'Arr'.\n\n    Space Complexity: O(N), where 'N' is the length of 'Arr'.\n'''\nfrom typing import *\n\ndef getLongestZeroSumSubarrayLength(arr : List[int]) -> int:\n\n    n = len(arr)\n    prefix_sum, ans = 0, 0\n\n    # The hashmap to store the first index at which a prefix sum occurs.\n    first_index = {}\n\n    first_index[0] = -1\n\n    # Traversing through the array.\n    for i in range(n):\n        prefix_sum += arr[i]\n\n        # Finding the longest length subarray ending at 'i' and having zero-sum.\n        if prefix_sum in first_index:\n            ans = max(ans, i - first_index[prefix_sum])\n        else:\n            first_index[prefix_sum] = i\n\n    return ans",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}