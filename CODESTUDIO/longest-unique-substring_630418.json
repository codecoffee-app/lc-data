{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7184,
            "title": "Longest Unique Substring",
            "titleSlug": "longest-unique-substring_630418",
            "content": "<h4 id=\"given-a-string-input-of-length-n-find-the-length-of-the-longest-substring-without-repeating-characters-i-e-return-a-substring-that-does-not-have-any-repeating-characters\">Given a string input of length n, find the length of the longest substring without repeating characters i.e return a substring that does not have any repeating characters.</h4>\n\n<h4 id=\"substring-is-the-continuous-sub-part-of-the-string-formed-by-removing-zero-or-more-characters-from-both-ends\">Substring is the continuous sub-part of the string formed by removing zero or more characters from both ends.</h4>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code> The first and the only line consists of a string of length n containing lowercase alphabets.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code> You need to print the length of the longest unique characters substring.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code> 1&lt;= n &lt;=10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code> abcabcbb \n</code></pre>\n\n<h5 id=\"sample-output1\">Sample Output1:</h5>\n\n<pre><code> 3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>Substring &quot;abc&quot; has no repeating character with the length of 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code> aaaa\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 131,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string of lowercase alphabets, find the length of the longest substring without repeating characters. A substring is a continuous sequence of characters within the original string.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "abcabcbb",
                        "output": "3",
                        "explanation": "The longest substring without repeating characters is \"abc\", which has a length of 3."
                    },
                    {
                        "input": "aaaa",
                        "output": "1",
                        "explanation": "The longest substring without repeating characters is \"a\", which has a length of 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of creating all of the substrings.</p>",
            "<p>Can you consider sliding window approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(K)\n\n    where N is the length of input string and\n    K is the number of unique characters in the string\n*/\n\n#include <unordered_map>\n\nint uniqueSubstrings(string input) \n{\n    int n = input.length();\n\n    unordered_map<char, int> set;\n\n    int ans = 0, i = 0, j = 0;\n\n    while (i < n && j < n) \n    {\n        // Try to extend the range [i,j]\n        if (set.find(input[j]) == set.end()) \n        {\n            set[input[j]] = 1;\n            ans = max(ans, j - i + 1);\n            j++;\n        } else \n        {\n            set.erase(input[i]);\n            i++;\n        }\n    }\n\n    return ans;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "''''\n    Time Complexity - O(N)\n    Space Complexity - O(K)\n\n    where N is the length of the string.\n    and K in number of different character in the string \n'''\n\n\ndef uniqueSubstrings(input) :\n\n    n = len(input)\n    Set = set()\n\n    ans = 0\n    i = 0\n    j = 0\n\n    while(i < n and j < n) :\n        \n        # try to extend the range [i,j]\n        if input[j] not in Set :\n\n            Set.add(input[j])\n            ans = max(ans, j - i + 1)\n            j+=1\n        \n        else :\n            Set.remove(input[i])\n            i+=1\n\n    return ans\n\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time Complexity - O(N)\n    Space Complexity - O(N)\n    \n    Where N is the length of input string.\n    Where K is the number of different characters in the string.\n*/\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Solution \n{\n\n    public static int uniqueSubstrings(String input) \n    {\n        int n = input.length();\n        \n        Set<Character> set = new HashSet<>();\n        \n        int ans = 0, i = 0, j = 0;\n        while (i < n && j < n) \n        {\n          \n            // try to extend the range [i, j]\n            if (!set.contains(input.charAt(j)))\n            {\n                set.add(input.charAt(j));\n                ans = Math.max(ans, j - i+1);\n                j++;\n            }\n            else \n            {\n                set.remove(input.charAt(i));\n                i++;\n            }\n        }\n        \n        return ans;\n    }\n\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}