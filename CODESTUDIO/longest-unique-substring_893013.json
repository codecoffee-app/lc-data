{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8536,
            "title": "Longest Unique Substring",
            "titleSlug": "longest-unique-substring_893013",
            "content": "<h4 id=\"you-are-given-a-string-str-consisting-of-n-lowercase-latin-letters-you-have-to-find-the-longest-substring-of-the-given-string-without-repeating-characters\">You are given a string &#39;Str&#39; consisting of &#39;N&#39; lowercase Latin letters. You have to find the longest substring of the given string without repeating characters.</h4>\n\n<h4 id=\"string-b-is-a-substring-of-string-a-if-it-can-be-obtained-from-a-by-deletion-of-several-possibly-zero-or-all-characters-from-the-beginning-and-several-possibly-zero-or-all-characters-from-the-end\">String \u2018B\u2019 is a substring of string \u2018A\u2019 if it can be obtained from \u2018A\u2019 by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If the given input string is &quot;aabc&quot;, then you should return &quot;abc&quot; as the longest substring without repeating characters.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>If there are multiple substrings with the same length, then you should print the substring which comes earlier in the given string. \n</code></pre>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If the given input string is &quot;abcda&quot;, here \u201cabcd\u201d and \u201cbcda\u201d can be the longest unique substring but \u201cabcd\u201d comes earlier in the given string. So we will print \u201cabcd\u201d as the longest unique substring.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \n\nThe first line of each test case contains a positive integer N, which represents the length of the string.\n\nThe next line contains a string consisting of lowercase Latin letters.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For every test case, print the longest unique substring.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Do not print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3\n6\nabccaa\n2\ncdedc\n5\naaaaa\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>abc\ncde\na\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>In the 1st test case, \u201cabc\u201d is the longest unique substring.\n\nIn the 2nd test case, \u201ccde\u201d and \u201cedc\u201d are the longest substrings but \u201ccde\u201d comes earlier in the given string.\n\nIn the 3rd test case, \u201ca\u201d is the longest unique substring.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4\nabcd\n3\naba\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>abcd\nab\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'str' of length 'n' consisting of lowercase Latin letters, determine the longest substring of 'str' that contains no repeating characters. If multiple such substrings have the same length, return the substring that appears earliest in the original string.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 6, str = abccaa",
                        "output": "abc",
                        "explanation": "The longest substring without repeating characters is 'abc'."
                    },
                    {
                        "input": "n = 2, str = cdedc",
                        "output": "cde",
                        "explanation": "Both 'cde' and 'edc' are longest substrings but 'cde' comes first."
                    },
                    {
                        "input": "n = 5, str = aaaaa",
                        "output": "a",
                        "explanation": "The longest substring without repeating characters is 'a'."
                    },
                    {
                        "input": "n = 4, str = abcd",
                        "output": "abcd",
                        "explanation": "The longest substring without repeating characters is 'abcd'."
                    },
                    {
                        "input": "n = 3, str = aba",
                        "output": "ab",
                        "explanation": "The longest substring without repeating characters is 'ab'."
                    },
                    {
                        "input": "n = 7, str = dvdf",
                        "output": "vdf",
                        "explanation": "The longest substring without repeating characters is 'vdf'."
                    },
                    {
                        "input": "n = 8, str = tmmzuxt",
                        "output": "mzuxt",
                        "explanation": "The longest substring without repeating characters is 'mzuxt'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For each substring, check if it can be the longest unique substring.</p>",
            "<p>For each index in the string, find the longest unique string starting from this index.</p>",
            "<p>Think of using two pointers such that the string between these pointers is always unique.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}