{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9427,
            "title": "Longest Univalue path",
            "titleSlug": "longest-univalue-path_985291",
            "content": "<h4 id=\"you-are-given-a-binary-tree-the-task-is-to-find-out-the-length-of-the-longest-path-which-contains-nodes-with-the-exact-same-value-it-is-not-necessary-for-the-path-to-pass-through-the-root-of-the-binary-tree\">You are given a binary tree, the task is to find out the length of the longest path which contains nodes with the exact same value. It is not necessary for the path to pass through the root of the binary tree.</h4>\n\n<h4 id=\"between-two-nodes-the-length-of-the-path-can-be-defined-as-the-number-of-edges-contained-between-them\">Between two nodes, the length of the path can be defined as the number of edges contained between them.</h4>\n\n<h4 id=\"for-example-consider-the-following-binary-tree\">For example, consider the following binary tree:</h4>\n\n<pre><code>            7\n           / \\\n          7   7\n         / \\   \\\n        8  3    7\n</code></pre>\n\n<h4 id=\"for-the-above-tree-the-length-of-the-longest-path-where-each-node-in-the-path-has-the-same-value-is-3-and-path-is-7-7-7-7\">For the above tree, the length of the longest path where each node in the path has the same value is 3 and path is 7 -&gt; 7 -&gt; 7 -&gt; 7.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases. Then the test cases follow.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image would be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binary-tree-2-5399.png\" alt=\"example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation:</h4>\n\n<pre><code>Level 1:\nThe root node of the tree is 1\n\nLevel 2:\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3:\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4:\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5:\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree.\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, a single integer denoting the length of the longest path where each node in the path has the same value is printed.\n\nThe output for each test case is to be printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n-10^9 &lt;= data &lt;= 10^9 and data != -1\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cdata\u201d is the value of the binary tree node.\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n7 7 7 1 1 -1 7 -1 -1 -1 -1 -1 -1\n10 3 4 3 3 -1 5 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>            7\n           / \\\n          7   7\n         / \\   \\\n        1  1    7\n\nFor the first test case, the length of the longest path where each node in the path has the same value is 3 and path is 7 -&gt; 7 -&gt; 7 -&gt; 7.\n\n            10\n           / \\\n          3   4\n         / \\   \\\n        3  3    5\n\nFor the second test case, the length of the longest path where each node in the path has the same value is 2 and path is 3 -&gt; 3 -&gt; 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 4 5 4 4 -1 5 -1 -1 -1 -1 -1 -1\n5 4 5 1 1 -1 5 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 317,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find the length of the longest path where each node in the path has the same value. The path does not have to pass through the root.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3000",
                    "-10^9 <= data <= 10^9 and data != -1",
                    "Where \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cdata\u201d is the value of the binary tree node.",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "7 7 7 1 1 -1 7 -1 -1 -1 -1 -1 -1",
                        "output": "3",
                        "explanation": "The longest path with the same value is 7 -> 7 -> 7 -> 7, which has a length of 3 (number of edges)."
                    },
                    {
                        "input": "10 3 4 3 3 -1 5 -1 -1 -1 -1 -1 -1",
                        "output": "2",
                        "explanation": "The longest path with the same value is 3 -> 3 -> 3, which has a length of 2 (number of edges)."
                    },
                    {
                        "input": "1 4 5 4 4 -1 5 -1 -1 -1 -1 -1 -1",
                        "output": "2",
                        "explanation": "The longest path with the same value is 4 -> 4 -> 4, which has a length of 2 (number of edges)."
                    },
                    {
                        "input": "5 4 5 1 1 -1 5 -1 -1 -1 -1 -1 -1",
                        "output": "2",
                        "explanation": "The longest path with the same value is 5 -> 5 -> 5, which has a length of 2 (number of edges)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Recursively traverse the binary tree and get the maximum path extending from this current node.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n\tTime complexity: O(N)\n\tSpace complexity: O(N)\n\n\tWhere N is the number of nodes in the given binary tree.\n*/\n\nint longestUnivaluePathHelper(BinaryTreeNode<int> *root, int *maxPath) {\n    if (root == NULL) {\n        return 0;\n    }\n\n    // Recursive calls to check for subtrees.\n    int leftPath = longestUnivaluePathHelper(root->left, maxPath);\n    int rightPath = longestUnivaluePathHelper(root->right, maxPath);\n\n    // Variables to store maximum lengths in two directions.\n    int leftMaxPath = 0, rightMaxPath = 0;\n\n    // If curr node and it's left child has same value.\n    if (root->left != NULL && root->left->data == root->data) {\n        leftMaxPath += leftPath + 1;\n    }\n\n    // If curr node and it's right child has same value.\n    if (root->right != NULL && root->right->data == root->data) {\n        rightMaxPath += rightPath + 1;\n    }\n\n    *maxPath = max(*maxPath, leftMaxPath + rightMaxPath);\n\n    return max(leftMaxPath, rightMaxPath);\n}\n\nint longestUnivaluePath(BinaryTreeNode<int> *root) {\n    int maxPath = 0;\n    // Function to get the maximum width of a binary tree.\n    longestUnivaluePathHelper(root, &maxPath);\n    return maxPath;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time complexity: O(N)\n    Space complexity: O(N)\n\n    Where N is the number of nodes in the given binary tree.\n'''\n\n# Function to get the maximum width of a binary tree.\ndef longestUnivaluePathHelper(root, maxPath):\n    \n    if root == None:\n        return 0\n    \n    # Recursive calls to check for subtrees.\n    leftPath = longestUnivaluePathHelper(root.left, maxPath)\n    rightPath = longestUnivaluePathHelper(root.right, maxPath)\n      \n    # Variables to store maximum lengths in two directions.\n    leftMaxPath = 0\n    rightMaxPath = 0\n    \n    # If curr node and it's left child has same value.\n    if (root.left != None and root.left.data == root.data):\n        \n        leftMaxPath += leftPath + 1\n        \n    # If curr node and it's right child has same value.\n    if (root.right != None and root.right.data == root.data):\n        \n        rightMaxPath += rightPath + 1\n        \n    maxPath[0] = max(maxPath[0], leftMaxPath + rightMaxPath) \n    \n    return max(leftMaxPath, rightMaxPath)\n\n\ndef longestUnivaluePath(root):\n    \n    maxPath = [0]\n    longestUnivaluePathHelper(root, maxPath)\n    \n    return maxPath[0]\n        \n        \n        \n        \n        \n\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\n\tTime complexity: O(N)\n\tSpace complexity: O(N)\n\n\tWhere N is the number of nodes in the given binary tree.\n*/\n\npublic class Solution {\n\n\tstatic int maxPath = 0;\n\n\t// Function to get the maximum width of a binary tree.\n\tprivate static int longestUnivaluePathHelper(BinaryTreeNode root) {\n\t\tif (root == null) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Recursive calls to check for subtrees.\n\t\tint leftPath = longestUnivaluePathHelper(root.left);\n\t\tint rightPath = longestUnivaluePathHelper(root.right);\n\n\t\t// Variables to store maximum lengths in two directions.\n\t\tint leftMaxPath = 0, rightMaxPath = 0;\n\n\t\t// If curr node and it's left child has same value.\n\t\tif (root.left != null && root.left.data == root.data) {\n\t\t\tleftMaxPath += leftPath + 1;\n\t\t}\n\n\t\t// If curr node and it's right child has same value.\n\t\tif (root.right != null && root.right.data == root.data) {\n\t\t\trightMaxPath += rightPath + 1;\n\t\t}\n\n\t\tmaxPath = Math.max(maxPath, leftMaxPath + rightMaxPath);\n\n\t\treturn Math.max(leftMaxPath, rightMaxPath);\n\t}\n\n\tpublic static int longestUnivaluePath(BinaryTreeNode root) {\n\t\tmaxPath = 0;\n\t\tlongestUnivaluePathHelper(root);\n\t\treturn maxPath;\n\t}\n}\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}