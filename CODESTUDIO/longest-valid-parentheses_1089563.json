{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9747,
            "title": "Longest Valid Parentheses",
            "titleSlug": "longest-valid-parentheses_1089563",
            "content": "<h4 id=\"you-are-given-a-string-s-containing-only-the-characters-and-you-need-to-find-the-length-of-the-longest-valid-i-e-well-formed-parentheses-substring\">You are given a string \u2018S\u2019 containing only the characters \u2018)\u2019 and \u2018(\u2018. You need to find the length of the longest valid i.e. well-formed parentheses substring.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Let the given string be \u201c(()())((\u201d.\n\nHere the valid parentheses substrings are: \u201c()\u201d, \u201c()\u201d and \u201c(()())\u201d. Out of these the longest valid string is \u201c(()())\u201d which has a length 6.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases.\n\nThe first and the only line of every test case contains the string S.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the length of the longest valid (well-formed) parentheses substring is printed.\n\nThe output for each test case is printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100   \n1 &lt;= Length(S) &lt;= 10^4\n\nWhere \u2018T\u2019 is the number of test cases and \u2018S\u2019 is the given string.\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n)()()))\n)))(((\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case, the longest valid (well-formed) parentheses substring is \u201c()()\u201d with length 4.\n\nFor the second test case, there is no valid parentheses substring. Hence, the output is 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n()((())()\n()()()()()()()\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>6\n14\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string \u2018s\u2019 containing only the characters \u2018)\u2019 and \u2018(\u2018, determine the length of the longest valid (well-formed) parentheses substring.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= Length(S) <= 10^4",
                    "Where \u2018T\u2019 is the number of test cases and \u2018S\u2019 is the given string."
                ],
                "testcases": [
                    {
                        "input": "s = \")()())\"",
                        "output": "4",
                        "explanation": "The longest valid (well-formed) parentheses substring is \u201c()()\u201d with length 4."
                    },
                    {
                        "input": "s = \")))((\"",
                        "output": "0",
                        "explanation": "There is no valid parentheses substring. Hence, the output is 0."
                    },
                    {
                        "input": "s = \"()((())()\"",
                        "output": "6",
                        "explanation": "The longest valid substring is \"(()())\" which has length 6."
                    },
                    {
                        "input": "s = \"()()()()()()()\"",
                        "output": "14",
                        "explanation": "The entire string is a valid parentheses substring with length 14."
                    },
                    {
                        "input": "s = \"(()())((",
                        "output": "6",
                        "explanation": "The longest valid substring is \"(()())\" which has length 6."
                    },
                    {
                        "input": "s = \"\"",
                        "output": "0",
                        "explanation": "Empty string, so the longest valid substring has length 0."
                    },
                    {
                        "input": "s = \"(\"",
                        "output": "0",
                        "explanation": "Single opening parenthesis, not valid."
                    },
                    {
                        "input": "s = \")\"",
                        "output": "0",
                        "explanation": "Single closing parenthesis, not valid."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you solve it by generating all the possible substrings?</p>",
            "<p>Try using the concept of Dynamic Programming.</p>",
            "<p>Can you solve this problem just by using a stack?</p>",
            "<p>Can you solve this problem without extra space?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}