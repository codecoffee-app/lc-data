{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10461,
            "title": "Longest Word Made From Other Words",
            "titleSlug": "longest-word-made-from-other-words_1229401",
            "content": "<h4 id=\"you-are-given-an-array-list-of-words-arr-your-task-is-to-find-all-the-words-having-the-longest-length-which-can-be-made-from-some-other-words-on-the-list\">You are given an array/list of words \u2018ARR\u2019. Your task is to find all the words having the longest length which can be made from some other words on the list.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>Return the list of all those words sorted in alphabetical. Return an empty list in case there are no such words\n</code></pre>\n\n<h4 id=\"for-example\">For Example :</h4>\n\n<pre><code>Input: cat, banana, dog, nana, my, walk, walker, baby, dogwalkers, s, babymybaby\n\nOutput: babymybaby dogwalkers\n\nHere in the given list of words, you can see that the words babymybaby, dogwalkers contain the words present in the list i.e. \u2018s\u2019, &#39;dog\u2019, \u2018walker\u2019,\u2018baby\u2019 and \u2018my\u2019 and both are of the same length.\n</code></pre>\n\n<h4 id=\"input-format\">Input format :</h4>\n\n<pre><code>The first line contains the integer &#39;N&#39;, denoting the number of words that you will be given. Then N lines follow.\n\nEach of the next &#39;N&#39; lines contains a word denoting the elements of the word ARR.\n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>For the given list of \u2018N\u2019 words, print all such words in lexicographical order.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= N &lt;= 1000\n1 &lt;= length of longest word &lt;= 100\n\nWhere \u2018N\u2019 is the given list of words.\n\nTime limit: 1 second\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>5\ntest\ntester\ntestertest\ntesting\ntestingtester\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>testingtester\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h4>\n\n<pre><code>Here in the given list of words, you can see that the word \u2018testingtester\u2019 contains both the words present in the list i.e. testing and tester.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>11\ncat\nbanana\ndog\nnana\nmy\nwalk\nwalker\nbaby\ndogwalkers\ns\nbabymybaby\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>babymybaby dogwalkers \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of words, find all the words with the maximum length that can be formed by concatenating other words from the same list. Return these longest words in lexicographical order. If no such words exist, return an empty list.",
                "constraints": [
                    "1 <= N <= 1000 (where N is the number of words)",
                    "1 <= length of longest word <= 100",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "n = 5, wordList = [\"test\", \"tester\", \"testertest\", \"testing\", \"testingtester\"]",
                        "output": "testingtester",
                        "explanation": "The word 'testingtester' can be formed by concatenating 'testing' and 'tester'."
                    },
                    {
                        "input": "n = 11, wordList = [\"cat\", \"banana\", \"dog\", \"nana\", \"my\", \"walk\", \"walker\", \"baby\", \"dogwalkers\", \"s\", \"babymybaby\"]",
                        "output": "babymybaby dogwalkers",
                        "explanation": "The words 'babymybaby' and 'dogwalkers' are the longest and can be formed using other words from the list. 'babymybaby' is formed from 'baby' and 'my' and 'baby' and 'dogwalkers' from 'dog' and 'walkers'."
                    },
                    {
                        "input": "n = 3, wordList = [\"a\", \"b\", \"ab\"]",
                        "output": "ab",
                        "explanation": "The word 'ab' can be formed by concatenating 'a' and 'b'."
                    },
                    {
                        "input": "n = 4, wordList = [\"cat\", \"dog\", \"mouse\", \"elephant\"]",
                        "output": "",
                        "explanation": "No word in the list can be formed by combining other words from the list."
                    },
                    {
                        "input": "n = 6, wordList = [\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\"]",
                        "output": "aaaaaa",
                        "explanation": "The word 'aaaaaa' can be created by concatenating smaller words, and it's the longest such word."
                    },
                    {
                        "input": "n = 2, wordList = [\"coding\", \"ninja\"]",
                        "output": "",
                        "explanation": "No word can be created from the other"
                    },
                    {
                        "input": "n = 3, wordList = [\"ab\", \"a\", \"b\"]",
                        "output": "ab",
                        "explanation": "The word 'ab' can be created from 'a' and 'b'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we recursively search for finding the longest word which would be comprised of words from the list to solve this problem?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}