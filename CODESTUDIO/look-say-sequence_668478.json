{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7474,
            "title": "Look & Say Sequence",
            "titleSlug": "look-say-sequence_668478",
            "content": "<h4 id=\"the-look-and-say-sequence-is-a-sequence-of-positive-integers-the-sequence-is-as-follows\">The Look-And-Say sequence is a sequence of positive integers. The sequence is as follows:</h4>\n\n<h4 id=\"1-11-21-1211-111221-312211-13112221\">1, 11, 21, 1211, 111221, 312211, 13112221,...</h4>\n\n<h4 id=\"this-sequence-is-constructed-in-the-following-way\">This sequence is constructed in the following way:</h4>\n\n<pre><code>The first number is 1.\n\nThis is read as \u201cOne 1\u201d. \nHence, the second number will be 11.\n\nThe second number is read as \u201cTwo 1s\u201d. \nHence, the third number will be 21.\n\nThe third number is read as \u201cOne 2, One 1\u201d. \nHence, the fourth number will be 1211. And so on.\n\nThe fourth term is read as \u201cOne 1, One 2, Two 1s\u201d.\n\nHence, the fifth term will be 111221. And so on.\n</code></pre>\n\n<h4 id=\"given-an-integer-n-find-the-nth-term-of-the-sequence\">Given an integer N, find the Nth term of the sequence.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer &#39;T&#39;, representing the number of test cases or queries to be run. \nThen the test cases follow.\n\nFor each test case, the only line contains a single integer &#39;N&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case/query, print a single containing a single string denoting the Nth term of the sequence.\n\nThe output for every test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, the output has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 30\n1 &lt;= N &lt;= 40\n\nWhere &#39;T&#39; is the number of test cases and &#39;N&#39; is the given sequence index.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n1\n2\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n11\n21\n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for Sample 1:</h5>\n\n<pre><code>The first term is 1.\n\nThe second term is 11.\n\nThe third term is 21.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>312211\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 91,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, generate the Nth term of the Look-And-Say sequence. The sequence starts with '1', and each subsequent term is generated by describing the previous term. For instance:\n\n- 1 is read as \"one 1\" which is 11\n- 11 is read as \"two 1s\" which is 21\n- 21 is read as \"one 2, one 1\" which is 1211\n- and so on.",
                "constraints": [
                    "1 <= T <= 30",
                    "1 <= N <= 40",
                    "Where 'T' is the number of test cases and 'N' is the given sequence index."
                ],
                "testcases": [
                    {
                        "input": "n = 1",
                        "output": "1",
                        "explanation": "The first term of the Look-And-Say sequence is '1'."
                    },
                    {
                        "input": "n = 2",
                        "output": "11",
                        "explanation": "The second term of the Look-And-Say sequence is '11' (One 1)."
                    },
                    {
                        "input": "n = 3",
                        "output": "21",
                        "explanation": "The third term of the Look-And-Say sequence is '21' (Two 1s)."
                    },
                    {
                        "input": "n = 4",
                        "output": "1211",
                        "explanation": "The fourth term of the Look-And-Say sequence is '1211' (One 2, One 1)."
                    },
                    {
                        "input": "n = 5",
                        "output": "111221",
                        "explanation": "The fifth term of the Look-And-Say sequence is '111221' (One 1, One 2, Two 1s)."
                    },
                    {
                        "input": "n = 6",
                        "output": "312211",
                        "explanation": "The sixth term of the Look-And-Say sequence is '312211' (One 3, One 1, Two 2, Two 1s)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Notice that to find the i-th sequence term, you only need the (i-1)-th sequence term. Now, try dividing the (i-1)-th term into blocks of same digits, obtain the length of each block, and construct the i-th term using this information. <strong>Apply this iteratively.</strong></p>"
        ],
        "relatedTopics": [],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity : O(2 ^ (N / 2))\r\n\tSpace complexity : O(2 ^ (N / 2))\r\n    \r\n\twhere 'N' is the given sequence index.\r\n*/\r\n\r\n#include <string>\r\n\r\nstring lookAndSaySequence(int n) \r\n{\r\n    // Previous string.\r\n    string prev = \"1\";\r\n    // Current string.\r\n    string cur = prev;\r\n\r\n    for (int i = 2; i <= n; i++) \r\n    {\r\n        cur.clear();\r\n\r\n        int count = 1;\r\n\r\n        for (int j = 1; j < prev.length(); j++) \r\n        {\r\n            if (prev[j] != prev[j - 1]) \r\n            {\r\n                cur.push_back(count + '0');\r\n                cur.push_back(prev[j - 1]);\r\n\r\n                count = 1;\r\n            } \r\n            else \r\n            {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        cur.push_back(count + '0');\r\n        cur.push_back(prev[prev.length() - 1]);\r\n\r\n        prev = cur;\r\n    }\r\n\r\n    return cur;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n\tTime complexity : O(2 ^ (N / 2))\r\n\tSpace complexity : O(2 ^ (N / 2))\r\n    \r\n\twhere 'N' is the given sequence index.\r\n*/\r\n\r\npublic class Solution {\r\n\r\n\tpublic static String lookAndSaySequence(int n) {\r\n\r\n\t\t// Previous string.\r\n\t\tString prev = \"1\";\r\n\r\n\t\t// Current string.\r\n\t\tString cur = prev;\r\n\r\n\t\tfor (int i = 2; i <= n; i++) {\r\n\r\n\t\t\tcur = \"\";\r\n\t\t\tint count = 1;\r\n\r\n\t\t\tfor (int j = 1; j < prev.length(); j++) {\r\n\t\t\r\n\t\t\t\tif(prev.charAt(j) != prev.charAt(j - 1)) {\r\n\t\t\t\t\tcur += Integer.toString(count);\r\n\t\t\t\t\tcur += prev.charAt(j - 1);\r\n\t\t\t\t\tcount = 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcount += 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcur += Integer.toString(count);\r\n\t\t\tcur += prev.charAt(prev.length() - 1);\r\n\t\t\tprev = cur;\r\n\r\n\t\t}\r\n\r\n\t\treturn cur;\r\n\t}\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n\tTime complexity : O(2 ^ (N / 2))\r\n\tSpace complexity : O(2 ^ (N / 2))\r\n    \r\n\twhere 'N' is the given sequence index.\r\n'''\r\n\r\nfrom sys import stdin\r\n\r\ndef lookAndSequence(n) :\r\n\r\n\t# Previous string.\r\n\tprev = \"1\"\r\n\r\n\t# Current string.\r\n\tcur = prev\r\n\tfor i in range(2, n + 1) :\r\n\r\n\t\tcur = \"\"\r\n\t\tcount = 1\r\n\t\tfor j in range(1, len(prev)) :\r\n\r\n\t\t\tif(prev[j] != prev[j - 1]) :\r\n\r\n\t\t\t\tcur += str(count)\r\n\t\t\t\tcur += prev[j - 1]\r\n\t\t\t\tcount = 1\r\n\t\t\t\r\n\t\t\telse :\r\n\r\n\t\t\t\tcount += 1\r\n\t\t\t\r\n\t\tcur += str(count)\r\n\t\tcur += prev[len(prev) - 1]\r\n\t\tprev = cur\r\n\t\r\n\treturn cur\r\n\r\ndef takeInput() :\r\n\r\n\tn = int(input().strip())\r\n\treturn n\r\n\r\nt = int(input().strip())\r\nfor i in range(t) :\r\n\r\n\tn = takeInput()\r\n\tprint(lookAndSequence(n))",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}