{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7278,
            "title": "Loot Houses",
            "titleSlug": "loot-houses_630510",
            "content": "<h4 id=\"a-thief-wants-to-loot-houses-he-knows-the-amount-of-money-in-each-house-he-cannot-loot-two-consecutive-houses-find-the-maximum-amount-of-money-he-can-loot\">A thief wants to loot houses. He knows the amount of money in each house. He cannot loot two consecutive houses. Find the maximum amount of money he can loot.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a single integer &#39;N&#39; denoting the total number of houses.\n\nThe second line of input contains &#39;N&#39; single space-separated integers, denoting the amount of money in every &#39;i-th&#39; house.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The only line of output will print the maximum amount of loot that is possible.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>0 &lt;= &#39;N&#39; &lt;= 10^5\n0 &lt;= &#39;A[i]&#39; &lt;= 10^4\n\nWhere &#39;A[i]&#39; represents the money present in the &#39;i-th&#39; house.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4\n10 2 3 11\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>21\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Since the thief cant loot two consecutive houses, the ways in which he may loot are:\n\n1. [10, 3]: a total loot of 13\n2. [10, 11]: a total loot of 21\n3. [2, 11]: a total loot of 13\n4. [10]: a total loot of 10\n5. [2]: a total loot of 2\n6. [3]: a total loot of 3\n7. [11]: a total loot of 11\n\nWe can&#39;t neglect the option to loot just either of the houses if it yields the maximum loot.\n\nFrom all the possible seven ways, the second option yields the maximum loot amount and hence the answer.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>6\n5 5 10 100 10 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>110\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 64,
            "dislikes": "NA",
            "rephrased": {
                "body": "A thief is planning to rob houses along a street. Each house contains a certain amount of money. The thief cannot rob adjacent houses due to security systems. Given the amount of money in each house, determine the maximum amount of money the thief can steal without triggering any alarms.",
                "constraints": [
                    "0 <= N <= 10^5 (where N is the number of houses)",
                    "0 <= A[i] <= 10^4 (where A[i] is the amount of money in the i-th house)",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4\n10 2 3 11",
                        "output": "21",
                        "explanation": "The thief can rob houses with amounts [10, 11] for a total loot of 21. Other possible combinations include [10,3] (13), [2, 11] (13).  Individual houses can also be considered: [10] (10), [2] (2), [3] (3), [11] (11). The maximum loot is achieved by selecting houses with values 10 and 11 which aren't adjacent."
                    },
                    {
                        "input": "6\n5 5 10 100 10 5",
                        "output": "110",
                        "explanation": "The optimal strategy is to rob the houses with values 5, 100, and 5.  This yields a total loot of 110."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a brute force approach?</p>",
            "<p>In the previous approach, observe that some results are being calculated multiple times. Is there a way to avoid that?</p>",
            "<p>Can we optimize our dynamic programming approach further, in terms of memory?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}