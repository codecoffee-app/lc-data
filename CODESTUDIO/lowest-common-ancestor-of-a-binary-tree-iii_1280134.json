{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10913,
            "title": "Lowest Common Ancestor of a Binary Tree III",
            "titleSlug": "lowest-common-ancestor-of-a-binary-tree-iii_1280134",
            "content": "<h4 id=\"the-node-structure-of-a-binary-tree-is-modified-such-that-each-node-has-the-reference-to-its-parent-node\">The node structure of a binary tree is modified such that each node has the reference to its parent node.</h4>\n\n<h4 id=\"you-are-given-two-nodes-n1-and-n2-of-the-above-binary-tree-your-task-is-to-return-the-lowest-common-ancestor-lca-of-the-given-nodes\">You are given two nodes: \u2018N1\u2019 and \u2018N2\u2019, of the above binary tree. Your task is to return the lowest common ancestor (LCA) of the given nodes.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Let \u2018TREE\u2019 be a binary tree. The lowest common ancestor of two nodes, \u2018N1\u2019 and \u2018N2\u2019, is defined as the lowest node in \u2018TREE\u2019 with \u2018N1\u2019 and \u2018N2\u2019 as descendants (where we allow a node to be a descendant of itself).\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains two single space-separated integers, \u2018N1\u2019 and \u2018N2\u2019, representing the nodes for which LCA has to be found.\n\nThe second line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is \u2018NULL\u2019, we take -1 in its place.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>The input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/example_tree-8665.png\" alt=\"\"></p>\n\n<pre><code>7\n1 4\n3 2 8 5\n-1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 7\n\nLevel 2 :\nLeft child of 7 = 1\nRight child of 7 = 4\n\nLevel 3 :\nLeft child of 1 = 3\nRight child of 1 = 2\nLeft child of 4 = 8\nRight child of 4 = 5\n\nLevel 4 :\nLeft child of 3 = NULL(-1)\nRight child of 3 = NULL(-1)\nLeft child of 2 = NULL(-1)\nRight child of 2 = NULL(-1)\nLeft child of 8 = NULL(-1)\nRight child of 8 = NULL(-1)\nLeft child of 5 = NULL(-1)\nRight child of 5 = NULL(-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are \u2018NULL\u2019(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n7 1 4 3 2 8 5 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the LCA of given nodes N1 and N2.\n\nThe output for each test case is printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10 ^ 4\n1 &lt;= DATA &lt;= 10 ^ 4 \nN1 != N2\nN1 and N2 exist in the \u2018TREE\u2019.\nThe \u2018TREE\u2019 contains unique nodes.\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the number of nodes in the \u2018TREE\u2019, \u2018DATA\u2019 represents the value of the node, \u2018N1\u2019 and \u2018N2\u2019 represent the nodes of which LCA has to be found.\n\nTime limit: 1 sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n3 1\n4 5 2 3 7 -1 -1 -1 -1 6 5 -1 1 -1 -1 -1 -1\n2 10\n3 7 4 -1 -1 8 9 2 6 -1 5 -1 -1 -1 10 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>5\n8\n</code></pre>\n\n<h4 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h4>\n\n<pre><code>Test Case 1 :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample_output_1_tree-8666.png\" alt=\"\"></p>\n\n<pre><code>For nodes 3 and 1, common ancestors are 5 and 4. Out of which, 5 is the nearest ancestor to both nodes. So, LCA(3, 1) = 5.\n\nTest Case 2 : \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample_output_2_tree-8667.png\" alt=\"\"></p>\n\n<pre><code>For nodes 2 and 10, common ancestors are 8, 4 and 3. Out of which, 8 is the nearest ancestor to both nodes. So, LCA(2, 10) = 8.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n6 4\n2 1 6 -1 -1 4 -1 -1 -1\n3 5\n3 -1 4 -1 5 -1 -1\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>6\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree where each node has a reference to its parent node, find the lowest common ancestor (LCA) of two given nodes, 'N1' and 'N2'. The LCA is defined as the lowest node in the tree that has both 'N1' and 'N2' as descendants (where a node can be a descendant of itself).",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 10^4 (Number of nodes in the tree)",
                    "1 <= DATA <= 10^4 (Value of the node)",
                    "N1 != N2 (N1 and N2 are distinct)",
                    "N1 and N2 exist in the tree.",
                    "The tree contains unique nodes.",
                    "Time limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "3 1\n4 5 2 3 7 -1 -1 -1 -1 6 5 -1 1 -1 -1 -1 -1",
                        "output": "5",
                        "explanation": "The LCA of nodes 3 and 1 in the given tree is 5."
                    },
                    {
                        "input": "2 10\n3 7 4 -1 -1 8 9 2 6 -1 5 -1 -1 -1 10 -1 -1 -1 -1",
                        "output": "8",
                        "explanation": "The LCA of nodes 2 and 10 in the given tree is 8."
                    },
                    {
                        "input": "6 4\n2 1 6 -1 -1 4 -1 -1 -1",
                        "output": "6",
                        "explanation": "The LCA of nodes 6 and 4 in the given tree is 6."
                    },
                    {
                        "input": "3 5\n3 -1 4 -1 5 -1 -1",
                        "output": "3",
                        "explanation": "The LCA of nodes 3 and 5 in the given tree is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we use the \u2018parent\u2019 pointer to keep track of the ancestor of two nodes?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}