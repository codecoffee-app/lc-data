{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7503,
            "title": "LRU Cache Implementation",
            "titleSlug": "lru-cache-implementation_670276",
            "content": "<h4 id=\"design-and-implement-a-data-structure-for-least-recently-used-lru-cache-to-support-the-following-operations\">Design and implement a data structure for <a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\" target=\u201d_blank\u201d>Least Recently Used (LRU) cache</a> to support the following operations:</h4>\n\n<pre><code>1. get(key) - Return the value of the key if the key exists in the cache, otherwise return -1.\n\n2. put(key, value), Insert the value in the cache if the key is not already present or update the value of the given key if the key is already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting the new item.\n</code></pre>\n\n<h5 id=\"you-will-be-given-q-queries-each-query-will-belong-to-one-of-these-two-types\">You will be given \u2018Q\u2019 queries. Each query will belong to one of these two types:</h5>\n\n<pre><code>Type 0: for get(key) operation.\nType 1: for put(key, value) operation.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. The cache is initialized with a capacity (the maximum number of unique keys it can hold at a time).\n\n2. Access to an item or key is defined as a get or a put operation on the key. The least recently used key is the one with the oldest access time.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains two space-separated integers &#39;C&#39; and &#39;Q&#39;, denoting the capacity of the cache and the number of operations to be performed respectively.\n\nThe next Q lines contain operations, one per line. Each operation starts with an integer which represents the type of operation. \n\nIf it is 0, then it is of the first type and is followed by one integer key. \n\nIf it is 1, it is of the second type and is followed by two space-separated integers key and value(in this order). \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each operation of type 0, print an integer on a single line, denoting the value of the key if the key exists, otherwise -1.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= C &lt;= 10^4\n1 &lt;= Q &lt;= 10^5\n1 &lt;= key, value &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3 11\n1 1 1\n1 2 2\n1 3 3\n1 4 5\n0 3\n0 1\n0 4\n1 2 3\n0 1\n0 3\n0 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n-1\n5\n-1\n3\n3\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">Explanation to Sample Input 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/lru-4752.png\" alt=\"alt-text\"></p>\n\n<pre><code>Initializing a cache of capacity 3, LRUCache cache = new LRUCache(3);\nThen each operation is performed as shown in the above figure.\ncache.put(1,1)\ncache.put(2,2)\ncache.put(3,3)\ncache.put(4,5)\ncache.get(3)      // returns 3\ncache.get(1)      // returns -1\ncache.get(2)      // returns 2\ncache.put(5,5)\ncache.get(4)      // returns -1\ncache.get(3)      // returns 3\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2 6\n1 1 1\n1 2 2\n0 2\n1 3 3\n0 3\n0 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n3\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 87,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design and implement a Least Recently Used (LRU) cache data structure to support `get(key)` and `put(key, value)` operations.\n\n`get(key)`: Return the value of the key if it exists in the cache, otherwise return -1.\n\n`put(key, value)`: Insert the value into the cache if the key is not present, or update the value if the key is already present. If the cache reaches its capacity, invalidate the least recently used item before inserting the new item.\n\nYou will be given 'Q' queries of two types:\n\nType 0: `get(key)` operation.\nType 1: `put(key, value)` operation.\n\nThe cache is initialized with a capacity (maximum number of unique keys it can hold). Access to an item is defined as a `get` or `put` operation. The least recently used key is the one with the oldest access time.",
                "constraints": [
                    "1 <= C <= 10^4 (C is the cache capacity)",
                    "1 <= Q <= 10^5 (Q is the number of queries)",
                    "1 <= key, value <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "3 11\n1 1 1\n1 2 2\n1 3 3\n1 4 5\n0 3\n0 1\n0 4\n1 2 3\n0 1\n0 3\n0 2",
                        "output": "3\n-1\n5\n-1\n3\n3",
                        "explanation": "The cache has capacity 3. Operations performed are: put(1,1), put(2,2), put(3,3).  When put(4,5) is called, '1' is evicted. get(3) returns 3. get(1) returns -1. get(4) returns 5. put(2,3) updates the value of key '2'. get(1) returns -1. get(3) returns 3. get(2) returns 3."
                    },
                    {
                        "input": "2 6\n1 1 1\n1 2 2\n0 2\n1 3 3\n0 3\n0 1",
                        "output": "2\n3\n-1",
                        "explanation": "The cache has capacity 2. put(1,1), put(2,2).  get(2) returns 2. put(3,3) evicts '1'. get(3) returns 3. get(1) returns -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use an array to store the keys and maintain the access time after each get or put operation.</p>",
            "<p>Use doubly linked list queue data structure to maintain the least recently and most recently used keys.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(Q) \r\n    Space Complexity: O(capacity)\r\n    \r\n    where Q is the number of the given queries and \r\n    capacity is the maximum number of keys LRU Cache can store.\r\n*/\r\n\r\n#include <map>\r\n\r\nclass Node\r\n{\r\npublic:\r\n    Node *left, *right;\r\n    int key, val;\r\n\r\n    Node(int key, int val)\r\n    {\r\n        this->key = key;\r\n        this->val = val;\r\n        this->left = this->right = NULL;\r\n    }\r\n};\r\n\r\nclass LRUCache\r\n{\r\npublic:\r\n    map<int, Node *> nodemap;\r\n    Node *head, *tail;\r\n    int capacity, size;\r\n\r\n    // Initialize LRUCache\r\n    LRUCache(int capacity)\r\n    {\r\n        head = tail = NULL;\r\n        this->capacity = capacity;\r\n        this->size = 0;\r\n    }\r\n    \r\n    // Add node at rear of linked list,\r\n    void addToRear(Node *nd)\r\n    {\r\n        if (head == NULL)\r\n        {\r\n            head = tail = nd;\r\n            return;\r\n        }\r\n\r\n        tail->right = nd;\r\n        nd->left = tail;\r\n\r\n        tail = nd;\r\n\r\n        return;\r\n    }\r\n    \r\n    void deleteNode(Node *nd)\r\n    {\r\n        if (nd->left != NULL)\r\n        {\r\n            nd->left->right = nd->right;\r\n        }\r\n        else\r\n        {\r\n            head = nd->right;\r\n        }\r\n\r\n        if (nd->right != NULL)\r\n        {\r\n            nd->right->left = nd->left;\r\n        }\r\n        else\r\n        {\r\n            tail = nd->left;\r\n        }\r\n\r\n        nd->left = nd->right = NULL;\r\n    }\r\n\r\n    // Return the value of the given key\r\n    int get(int key)\r\n    {\r\n        if (nodemap.find(key) == nodemap.end())\r\n        {\r\n            return -1;\r\n        }\r\n\r\n        deleteNode(nodemap[key]);\r\n        addToRear(nodemap[key]);\r\n\r\n        return nodemap[key]->val;\r\n    }\r\n\r\n    // Inserts a key and it's value into the LRUCache\r\n    void put(int key, int value)\r\n    {\r\n        if (nodemap.find(key) != nodemap.end())\r\n        {\r\n            nodemap[key]->val = value;\r\n\r\n            deleteNode(nodemap[key]);\r\n            addToRear(nodemap[key]);\r\n        }\r\n        else\r\n        {\r\n            Node *nd = new Node(key, value);\r\n            nodemap[key] = nd;\r\n\r\n            if (size == capacity)\r\n            {\r\n                nodemap.erase(head->key);\r\n                deleteNode(head);\r\n                addToRear(nd);\r\n            }\r\n            else\r\n            {\r\n                size++;\r\n                addToRear(nd);\r\n            }\r\n        }\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(Q) \r\n    Space Complexity: O(capacity)\r\n    \r\n    where Q is the number of the given queries and \r\n    capacity is the maximum number of keys LRU Cache can store.\r\n*/\r\n\r\nimport java.util.HashMap;\r\n\r\nclass Node\r\n{\r\n    Node left, right;\r\n    int key, val;\r\n\r\n    Node(int key, int val)\r\n    {\r\n        this.key = key;\r\n        this.val = val;\r\n        left = null;\r\n        right = null;\r\n    }\r\n}\r\n\r\npublic class LRUCache\r\n{\r\n    HashMap<Integer, Node> map;\r\n    Node tail, head;\r\n    int capacity, size;\r\n    \r\n    // Initialize LRUCache\r\n    public LRUCache(int capacity)\r\n    {\r\n        map = new HashMap();\r\n        this.capacity = capacity;\r\n        size = 0;\r\n        head = null;\r\n        tail = null;\r\n    }\r\n\r\n    public void deleteNode(Node nod)\r\n    {\r\n        if (nod.left != null)\r\n        {\r\n            nod.left.right = nod.right;\r\n        }\r\n        else\r\n        {\r\n            head = head.right;\r\n        }\r\n\r\n        if (nod.right != null)\r\n        {\r\n            nod.right.left = nod.left;\r\n        }\r\n        else\r\n        {\r\n            tail = tail.left;\r\n        }\r\n\r\n        nod.right = null;\r\n        nod.left = null;\r\n    }\r\n    \r\n    // Add node at rear of linked list,\r\n    public void addToRear(Node nod)\r\n    {\r\n        if (head == null)\r\n        {\r\n            head = nod;\r\n            tail = nod;\r\n            return;\r\n        }\r\n\r\n        tail.right = nod;\r\n        nod.left = tail;\r\n        tail = nod;\r\n    }\r\n    \r\n    // Return the value of the given key\r\n    public int get(int key)\r\n    {\r\n        if (!map.containsKey(key))\r\n        {\r\n            return -1;\r\n        }\r\n        Node nod = map.get(key);\r\n\r\n        deleteNode(nod);\r\n        addToRear(nod);\r\n\r\n        return nod.val;\r\n    }\r\n    \r\n    // Inserts a key and it's value into the LRUCache\r\n    public void put(int key, int value)\r\n    {\r\n        if (map.containsKey(key))\r\n        {\r\n            Node nod = map.get(key);\r\n            nod.val = value;\r\n\r\n            deleteNode(nod);\r\n            addToRear(nod);\r\n        }\r\n        else\r\n        {\r\n            Node nod = new Node(key, value);\r\n            map.put(key, nod);\r\n\r\n            if (size == capacity)\r\n            {\r\n                map.remove(head.key);\r\n                deleteNode(head);\r\n                addToRear(nod);\r\n            }\r\n            else\r\n            {\r\n                addToRear(nod);\r\n                size++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(Q) \r\n    Space Complexity: O(capacity)\r\n    \r\n    where Q is the number of the given queries and \r\n    capacity is the maximum number of keys LRU Cache can store.\r\n'''\r\n\r\nfrom sys import stdin\r\n\r\nclass Node():\r\n    \r\n    def __init__ (self, key, value):\r\n        self.key = key\r\n        self.value = value\r\n        self.left = None\r\n        self.right = None\r\n\r\n\r\n\r\nclass LRUCache:   \t\r\n\t# Initialize LRUCache\r\n    def __init__(self, capacity):\r\n        self.head = None\r\n        self.tail = None\r\n        self.capacity = capacity\r\n        self.size = 0\r\n        self.nodemap = {}\r\n\t\r\n    def addToRear(self, nd):\r\n        if self.head is None:\r\n            self.head = nd\r\n            self.tail = nd\r\n            return None\r\n        \r\n        self.tail.right = nd\r\n        nd.left = self.tail\r\n\r\n        self.tail = nd\r\n    \r\n    def deleteNode(self, nd):\r\n        if nd.left is not None:\r\n            nd.left.right = nd.right\r\n        else:\r\n            self.head = nd.right\r\n\r\n        if nd.right is not None:\r\n            nd.right.left = nd.left\r\n        else:\r\n            self.tail = nd.left\r\n        \r\n        nd.left = None\r\n        nd.right = None\r\n\r\n\r\n\t# Return the value of the given key\r\n    def get(self, key):\r\n        if key not in self.nodemap:\r\n            return -1\r\n        \r\n        self.deleteNode(self.nodemap[key])\r\n        self.addToRear(self.nodemap[key])\r\n\r\n        return self.nodemap[key].value\r\n\r\n\t# Inserts a key and its value into the LRUCache\r\n    def put(self, key, value):\r\n        if key in self.nodemap:\r\n            nd = self.nodemap[key]\r\n            nd.value = value\r\n\r\n            self.deleteNode(nd)\r\n            self.addToRear(nd)\r\n        else:\r\n            nd = Node(key, value)\r\n            self.nodemap[key] = nd\r\n\r\n            if self.size == self.capacity:\r\n                self.nodemap.pop(self.head.key)\r\n                self.deleteNode(self.head)\r\n                self.addToRear(nd)\r\n            else:\r\n                self.size += 1\r\n                self.addToRear(nd)\r\n\r\n# main\r\ncapacity, q = map(int, stdin.readline().rstrip().split(\" \"))\r\n\r\ncache = LRUCache(capacity)\r\n\r\nwhile q != 0:\r\n\tquery = list(map(int, stdin.readline().rstrip().split()))\r\n\r\n\tif query[0] == 0:\r\n\t\tkey = query[1]\r\n\t\tprint(cache.get(key))\r\n\telif query[0] == 1:\r\n\t\tkey = query[1]\r\n\t\tvalue = query[2]\r\n\t\tcache.put(key, value)\r\n\t\r\n\tq -= 1",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}