{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9211,
            "title": "LRU Cache Implementation",
            "titleSlug": "lru-cache-implementation_981239",
            "content": "<h4 id=\"design-a-data-structure-that-follows-the-concept-of-lru-i-e-least-recently-used-cache\">Design a data structure that follows the concept of LRU i.e. Least Recently Used Cache.</h4>\n\n<h5 id=\"lru-cache-class-implementation\">LRU Cache Class implementation :</h5>\n\n<pre><code>You are given a capacity \u2018C\u2019 for LRUCache(int capacity) which basically initializes the LRU cache with positive size capacity.\n\nThen you are given a \u2018KEY\u2019 for which the function int get(int key) returns the value of the key if the key exists, otherwise, return -1.\n\nYou are given two integers \u2018KEY\u2019 and \u2018VALUE\u2019 for which the function void put(int key, int value) updates the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains the \u2018Q\u2019 i.e. number of queries.\n\nThe first integer of each query defines the type of queries that can contain values \u20180\u2019,\u20191\u2019, or \u20182\u2019.\nIf the value is \u20180\u2019, it denotes that constructor \u2018LRUCache\u2019 is called.\nIf the value is \u20181\u2019, it denotes that function \u2018get\u2019 is called.\nIf the value is \u20182\u2019, it denotes that function \u2018put\u2019 is called.\n\nNow,\nIf the query is \u20180\u2019, then it follows by one integer, for the capacity size.\nIf the query is \u20181\u2019, then it follows by one integer, for the key.\nIf the query is \u20180\u2019, then it follows by two integers, for the key and value pair.\n\nEach query is in a different line.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the output array/list.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^4\n0 &lt;= QType[i] &lt;= 2\n1 &lt;= QValues[i] &lt;= 10^5\n\nWhere \u2018T\u2019 is the number of test cases.\n&#39;N&#39; is the given capacity size of the LRU Cache.\n\u2018QType\u2019 is the given type of query.\n\u2018QValues\u2019 is the given query values.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4\n0 2\n2 1 1 \n2 2 2\n1 1\n6\n0 3 \n2 1 1\n2 2 2\n1 1\n2 3 3\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n1 2\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">Explanation to Sample Input 1 :</h5>\n\n<pre><code>In the first test case, \nLRUCache lRUCache = new LRUCache(2);\nFor lRUCache.put(1, 1); cache is {1=1}\nFor lRUCache.put(2, 2); cache is {1=1, 2=2}\nFor lRUCache.get(1); Output 1\n\n\nIn the second test case, \nLRUCache lRUCache = new LRUCache(3);\nFor lRUCache.put(1, 1); cache is {1=1}\nFor lRUCache.put(2, 2); cache is {1=1, 2=2}\nFor lRUCache.get(1); Output 1\nFor lRUCache.put(3, 3); {1=1, 2=2, 3=3}\nFor lRUCache.get(2); Output 2\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n10\n0 2\n2 1 1\n2 2 2\n1 1\n2 3 3\n1 2\n2 4 4\n1 1\n1 3 \n1 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 -1 -1 3 4\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-2\">Explanation to Sample Input 2 :</h5>\n\n<pre><code>LRUCache lRUCache = new LRUCache(2);\nFor lRUCache.put(1, 1); cache is {1=1}\nFor lRUCache.put(2, 2); cache is {1=1, 2=2}\nFor lRUCache.get(1); Output 1\nFor lRUCache.put(3, 3); LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nFor lRUCache.get(2); Output -1 (not found)\nFor lRUCache.put(4, 4); LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nFor lRUCache.get(1);  Output -1 (not found)\nFor lRUCache.get(3); Output 3\nFor lRUCache.get(4); Output 4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a data structure that implements an LRU (Least Recently Used) cache. The LRU cache has a fixed capacity. When a key is accessed or updated, it becomes the most recently used. When the cache is full and a new key is added, the least recently used key is evicted.\n\nImplement the following methods:\n\n*   `LRUCache(int capacity)`: Initializes the LRU cache with the given capacity.\n*   `int get(int key)`: Returns the value of the key if the key exists in the cache; otherwise, returns -1.\n*   `void put(int key, int value)`: Updates the value of the key if the key exists. Otherwise, adds the key-value pair to the cache. If the cache is full, evicts the least recently used key before adding the new key-value pair.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^4",
                    "0 <= QType[i] <= 2",
                    "1 <= QValues[i] <= 10^5",
                    "Where \u2018T\u2019 is the number of test cases.",
                    "\u2018N\u2019 is the given capacity size of the LRU Cache.",
                    "\u2018QType\u2019 is the given type of query.",
                    "\u2018QValues\u2019 is the given query values.",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "4\n0 2\n2 1 1\n2 2 2\n1 1",
                        "output": "1",
                        "explanation": "LRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1); // Returns 1. Cache remains {2=2, 1=1} as 1 is now most recently used."
                    },
                    {
                        "input": "6\n0 3\n2 1 1\n2 2 2\n1 1\n2 3 3\n1 2",
                        "output": "1 2",
                        "explanation": "LRUCache lRUCache = new LRUCache(3);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1); // Returns 1. Cache becomes {2=2, 1=1}\nlRUCache.put(3, 3); // cache is {2=2, 1=1, 3=3}\nlRUCache.get(2); // Returns 2. Cache becomes {1=1, 3=3, 2=2}"
                    },
                    {
                        "input": "10\n0 2\n2 1 1\n2 2 2\n1 1\n2 3 3\n1 2\n2 4 4\n1 1\n1 3\n1 4",
                        "output": "1 -1 -1 3 4",
                        "explanation": "LRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1); // Returns 1. Cache is {2=2, 1=1}\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2); // Returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {3=3, 4=4}\nlRUCache.get(1);  // Returns -1 (not found)\nlRUCache.get(3); // Returns 3\nlRUCache.get(4); // Returns 4"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of an approach using a doubly-linked list and the map?</p>"
        ],
        "relatedTopics": [],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}