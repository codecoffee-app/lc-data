{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22940,
            "title": "LRU Cache",
            "titleSlug": "lru-cache_6212844",
            "content": "<h5 id=\"design-a-data-structure-that-satisfies-the-constraints-of-a-least-recently-used-lru\">Design a data structure that satisfies the constraints of a Least Recently Used (LRU).</h5>\n\n<pre><code>1. Get(int num): If the key exists, it will return the value of the key stored. Else, return -1.    \n2. Put(int key, int value): If the key already exists, update the value of the key. Else add the key-value pair to the cache. If the number of keys is more than the capacity for this operation, delete the least recently key used. \n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>For the following input: \n\n4 2\n2 1 4\n1 1\n1 4\n\nWe will initialize an empty LRU cache for the first operation with a maximum capacity of 2.\nFor the first operation, we need to add a key-value pair (1,4) to the cache.\nFor the second operation, we need to return the value stored for key 1, i.e., 4\nFor the third operation, we need to return -1, as we don&#39;t have any key 4 in the cache.\n\nSo, the final output will be: \n4  -1\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains a single integer \u2018T\u2019 representing the no. of test cases.\nThe first line of each test case contains two integers \u2018N\u2019 and \u2018X\u2019, denoting the no. of the operations. We need to initialize an empty LRU cache of the maximum capacity of \u2018X\u2019.\nThe next \u2018N\u2019 lines of each test case contain either of the operations in the following format: - \nGet =&gt; two space-separated integers, 1 and \u2018Y\u2019 like &#39;1 Y&#39;. We need to return the value of the key \u2018Y\u2019 if it exists. Otherwise, Return -1.\nPut =&gt; three space-separated integers, 2, \u2018A\u2019 and \u2018B\u2019 like &#39;2 A B&#39;. If the key already exists, update the value of the key. Else add the key-value pair to the cache. If the number of keys is more than the capacity for this operation, delete the least recently key used. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, Return the results of the operations performed on the LRU separated by spaces.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not require to print anything. it has already been taken care of. Just implement the function and return the answer.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints -</h5>\n\n<pre><code>1 \u2264 T \u2264 10\n1 \u2264 N \u2264 10^5\n\u03a3N \u2264 2*10^5\n1 \u2264 X \u2264 (10^9)\n1 \u2264 Y \u2264 (10^9)\n1 \u2264 A \u2264 (10^9)\n1 \u2264 B \u2264 (10^9)\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 2\n2 1 4\n1 1\n1 4\n4 1\n2 1 4\n2 2 6\n1 1\n1 2\n</code></pre>\n\n<p>##### Sample Output 1 :</p>\n\n<pre><code>4 -1\n-1 6\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first case:\n\nFor the following input: \n\n3 2\n2 1 4\n1 1\n1 4\n\nWe will initialize an empty LRU cache for the first operation with a maximum capacity of 2.\nFor the first operation, we need to add a key-value pair (1,4) to the cache.\nFor the second operation, we need to return the value stored for key 1, i.e., 4\nFor the third operation, we need to return -1, as we don&#39;t have any key 4 in the cache.\n\nSo, the final output will be: \n4  -1\n\nFor the second case:\n\nFor the following input: \n\n5 1\n2 1 4\n2 2 6\n1 1\n1 2\n\nWe will initialize an empty LRU cache for the first operation with a maximum capacity of 1.\nFor the first operation, we need to add a key-value pair (1,4) to the cache.\nFor the second operation, we need to add a key-value pair (2,6) to the cache and remove (1,4) from the cache.\nFor the third operation, we need to return -1, as we don&#39;t have any key 1 in the cache.\nFor the fourth operation, we need to return the value stored for key 2, i.e., 6\n\nSo, the final output will be: \n -1 6\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 3\n2 1 4\n2 2 5\n1 2\n5 5\n2 1 4\n2 2 6\n1 1\n1 2\n1 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5\n4 6 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a data structure that satisfies the constraints of a Least Recently Used (LRU) cache. Implement the following operations:\n\n1.  **Get(int num):** If the key `num` exists in the cache, return its corresponding value. Otherwise, return -1.\n2.  **Put(int key, int value):** If the key `key` already exists in the cache, update its value to `value`. Otherwise, add the key-value pair (`key`, `value`) to the cache. If adding the new key-value pair would exceed the cache's capacity, evict the least recently used key before adding the new entry.",
                "constraints": [
                    "1 \u2264 T \u2264 10",
                    "1 \u2264 N \u2264 10^5",
                    "\u03a3N \u2264 2*10^5",
                    "1 \u2264 X \u2264 (10^9)",
                    "1 \u2264 Y \u2264 (10^9)",
                    "1 \u2264 A \u2264 (10^9)",
                    "1 \u2264 B \u2264 (10^9)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 2\n2 1 4\n1 1\n1 4",
                        "output": "4 -1",
                        "explanation": "Initialize an LRU cache with a capacity of 2.\n- Put (1, 4): Add the key-value pair (1, 4) to the cache.\n- Get(1): The key 1 exists in the cache, return its value 4.\n- Get(4): The key 4 does not exist in the cache, return -1."
                    },
                    {
                        "input": "4 1\n2 1 4\n2 2 6\n1 1\n1 2",
                        "output": "-1 6",
                        "explanation": "Initialize an LRU cache with a capacity of 1.\n- Put (1, 4): Add the key-value pair (1, 4) to the cache.\n- Put (2, 6): Add the key-value pair (2, 6) to the cache. Since the cache is full, evict the least recently used key (1). Now cache contains (2,6)\n- Get(1): The key 1 does not exist in the cache, return -1.\n- Get(2): The key 2 exists in the cache, return its value 6."
                    },
                    {
                        "input": "3 3\n2 1 4\n2 2 5\n1 2",
                        "output": "5",
                        "explanation": "Initialize an LRU cache with a capacity of 3.\n- Put (1, 4): Add the key-value pair (1, 4) to the cache.\n- Put (2, 5): Add the key-value pair (2, 5) to the cache.\n- Get(2): The key 2 exists in the cache, return its value 5."
                    },
                    {
                        "input": "5 5\n2 1 4\n2 2 6\n1 1\n1 2\n1 3",
                        "output": "4 6 -1",
                        "explanation": "Initialize an LRU cache with a capacity of 5.\n- Put (1, 4): Add the key-value pair (1, 4) to the cache.\n- Put (2, 6): Add the key-value pair (2, 6) to the cache.\n- Get(1): The key 1 exists in the cache, return its value 4.\n- Get(2): The key 2 exists in the cache, return its value 6.\n- Get(3): The key 3 does not exist in the cache, return -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a combination of two data structres.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}