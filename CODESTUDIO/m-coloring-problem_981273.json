{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9242,
            "title": "M-Coloring Problem",
            "titleSlug": "m-coloring-problem_981273",
            "content": "<h4 id=\"you-are-given-an-undirected-graph-as-an-adjacency-matrix-consisting-of-v-vertices-and-an-integer-m\">You are given an undirected graph as an adjacency matrix consisting of <em><strong>&#39;v&#39;</strong></em> vertices and an integer <em><strong>&#39;m&#39;</strong></em>.</h4>\n\n<p><br></p>\n\n<h4 id=\"you-need-to-return-yes-if-you-can-color-the-graph-using-at-most-m-colors-so-that-no-two-adjacent-vertices-are-the-same-else-return-no\">You need to return &#39;YES&#39; if you can color the graph using at most &#39;m&#39; colors so that no two adjacent vertices are the same. Else, return &#39;NO&#39;.</h4>\n\n<p><br></p>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Input:\nIf the given adjacency matrix is:\n[0 1 0]\n[1 0 1]\n[0 1 0] and &#39;m&#39; = 3.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/ex1-28434.png\" alt=\"alt.txt\"></p>\n\n<pre><code>Output: YES\n\nExplanation:\nThe given adjacency matrix tells us that 1 is connected to 2 and 2 is connected to 3. We can use three different colors and color all three nodes.\nHence we return true.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains two space-separated integers, &#39;v&#39; and &#39;m&#39;, denoting the number of vertices in the undirected graph and the number of colors, respectively.\n\nEach of the next &#39;v&#39; lines contains &#39;v&#39; integers denoting the adjacency matrix of the undirected graph.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>You need to return \u201cYES\u201d if we can color the graph with at most M colors. Otherwise, return \u201cNO\u201d. (without the inverted commas)\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output. It has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3 2\n0 1 0\n1 0 1\n0 1 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>YES\n</code></pre>\n\n<h5 id=\"explanation-of-input-1\">Explanation of Input 1:</h5>\n\n<pre><code>The adjacency matrix tells us that 1 is connected to 2, and 2 is connected to 3. We can see that a minimum of 2 colors would be needed to color the graph. So it is possible to color the graph in this case.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3 1\n0 1 0\n1 0 1\n0 1 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>NO\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 \u2264 v \u2264 20\n1 \u2264 m \u2264 v\n\nTime Limit: 1 sec \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 70,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph represented by an adjacency matrix `mat` with `v` vertices, determine if it's possible to color the graph using at most `m` colors such that no two adjacent vertices have the same color. Return 'YES' if it's possible, and 'NO' otherwise.",
                "constraints": [
                    "1 \u2264 v \u2264 20",
                    "1 \u2264 m \u2264 v",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "mat=[[0, 1, 0], [1, 0, 1], [0, 1, 0]], m=2",
                        "output": "YES",
                        "explanation": "The adjacency matrix represents a graph where vertices 1 and 2 are connected, and vertices 2 and 3 are connected.  At least 2 colors are needed, and since we have 2 colors available, we can color the graph."
                    },
                    {
                        "input": "mat=[[0, 1, 0], [1, 0, 1], [0, 1, 0]], m=1",
                        "output": "NO",
                        "explanation": "The adjacency matrix represents a graph where vertices 1 and 2 are connected, and vertices 2 and 3 are connected. We need at least 2 colors. With only 1 color available, we cannot color the graph."
                    },
                    {
                        "input": "mat=[[0, 1, 1], [1, 0, 1], [1, 1, 0]], m=3",
                        "output": "YES",
                        "explanation": "The graph is fully connected (a complete graph of 3 vertices). Thus, it requires 3 colors to color it. Since m=3, it is possible."
                    },
                    {
                        "input": "mat=[[0, 1, 1], [1, 0, 1], [1, 1, 0]], m=2",
                        "output": "NO",
                        "explanation": "The graph is fully connected (a complete graph of 3 vertices). Thus, it requires 3 colors to color it. Since m=2, it is not possible."
                    },
                    {
                        "input": "mat=[[0, 0, 0], [0, 0, 0], [0, 0, 0]], m=1",
                        "output": "YES",
                        "explanation": "The graph has no edges. Each vertex can be colored with the same single color."
                    },
                    {
                        "input": "mat=[[0, 0, 0], [0, 0, 0], [0, 0, 0]], m=3",
                        "output": "YES",
                        "explanation": "The graph has no edges. Each vertex can be colored with the same single color or with a different color. The condition m >= 1 satisfies the problem."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Take all different color combinations possible</p>",
            "<p>Take all different color combinations possible</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}