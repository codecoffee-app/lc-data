{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 1794,
            "title": "Magic Grid",
            "titleSlug": "magic-grid_625511",
            "content": "<h4 id=\"you-are-given-a-magic-grid-a-with-r-rows-and-c-columns-in-the-cells-of-the-grid-you-will-either-get-magic-juice-which-increases-your-strength-by-a-i-j-points-or-poison-which-takes-away-a-i-j-strength-points-if-at-any-point-of-the-journey-the-strength-points-become-less-than-or-equal-to-zero-then-you-will-die\">You are given a magic grid A with R rows and C columns. In the cells of the grid, you will either get magic juice, which increases your strength by |A[i][j]| points, or poison, which takes away |A[i][j]| strength points. If at any point of the journey, the strength points become less than or equal to zero, then you will die.</h4>\n\n<h4 id=\"you-have-to-start-from-the-top-left-corner-cell-1-1-and-reach-at-the-bottom-right-corner-cell-r-c-from-a-cell-i-j-you-can-only-move-either-one-cell-down-or-right-i-e-to-cell-i-1-j-or-cell-i-j-1-and-you-can-not-move-outside-the-magic-grid-you-have-to-find-the-minimum-number-of-strength-points-with-which-you-will-be-able-to-reach-the-destination-cell\">You have to start from the top-left corner cell (1,1) and reach  at the bottom-right corner cell (R,C). From a cell (i,j), you can only move either one cell down or right i.e., to cell (i+1,j) or cell (i,j+1) and you can not move outside the magic grid. You have to find the minimum number of strength points with which you will be able to reach the destination cell.</h4>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains the number of test cases T. T cases follow. Each test case consists of R C in the first line followed by the description of the grid in R lines, each containing C integers. Rows are numbered 1 to R from top to bottom and columns are numbered 1 to C from left to right. Cells with A[i][j] &lt; 0 contain poison, others contain magic juice.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>Output T lines, one for each case containing the minimum strength you should start with from the cell (1,1) to have a positive strength through out his journey to the cell (R,C).\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 \u2264 T \u2264 5\n2 \u2264 R, C \u2264 500\n-10^3 \u2264 A[i][j] \u2264 10^3\nA[1][1] = A[R][C] = 0\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n2 3\n0 1 -3\n1 -2 0\n2 2\n0 1\n2 0\n3 4\n0 -2 -3 1\n-1 4 0 -2\n1 -2 -3 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n1\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a magic grid represented by a 2D array A with R rows and C columns. Each cell A[i][j] contains an integer. A positive value represents magic juice, which increases your strength by the absolute value of A[i][j]. A negative value represents poison, which decreases your strength by the absolute value of A[i][j]. You start at the top-left corner (1, 1) and must reach the bottom-right corner (R, C). You can only move down (i+1, j) or right (i, j+1). Your strength must remain strictly positive throughout the journey (i.e., greater than zero). Determine the minimum initial strength needed to complete the journey from (1, 1) to (R, C) without your strength ever dropping to zero or below.",
                "constraints": [
                    "1 \u2264 T \u2264 5",
                    "2 \u2264 R, C \u2264 500",
                    "-10^3 \u2264 A[i][j] \u2264 10^3",
                    "A[1][1] = A[R][C] = 0",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "2 3\n0 1 -3\n1 -2 0",
                        "output": "2",
                        "explanation": null
                    },
                    {
                        "input": "2 2\n0 1\n2 0",
                        "output": "1",
                        "explanation": null
                    },
                    {
                        "input": "3 4\n0 -2 -3 1\n-1 4 0 -2\n1 -2 -3 0",
                        "output": "2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The very first approach can be to try all possible paths from top left to bottom right and minimize the health required.</p>",
            "<p>Eliminate the need for solving the same subproblems again and again.&nbsp;</p>",
            "<p>Solve the small problem first and then reach the final answer using a bottom-up approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}