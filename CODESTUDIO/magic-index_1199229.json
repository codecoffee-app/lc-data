{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10255,
            "title": "Magic Index",
            "titleSlug": "magic-index_1199229",
            "content": "<h4 id=\"you-are-given-a-sorted-array-a-consisting-of-n-integers-your-task-is-to-find-the-magic-index-in-the-given-array\">You are given a sorted array A consisting of N integers. Your task is to find the magic index in the given array.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. A magic index in an array A[0 ... N - 1] is defined to be an index i such that A[i] = i.\n2. The elements in the array can be negative.\n3. The elements in the array can be repeated multiple times.\n4. There can be more than one magic index in an array.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains an integer T denoting the number of test cases.\n\nThe first line of each test case contains one integer N, as described in the problem statement.\n\nThe second line of each test case contains N space-separated integers, representing the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case print in a new line, one integer representing the magic index of the given array or -1 if there does not exist any magic index for the given array.\n\nIn case there is more than one magic index, return any of them.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n-10^9 &lt;= A[i] &lt;= 10^9\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n5\n-5 -1 2 1 9\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>The output is 2 because A[2] = 2 and hence 2 is the magic index.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5\n2 3 4 5 6\n6\n-1 -1 -1 4 4 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>-1\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 204,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array A of N integers, find a magic index. A magic index i satisfies A[i] = i. The array may contain negative numbers and duplicates. If multiple magic indices exist, return any one of them. Return -1 if no magic index exists.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "-10^9 <= A[i] <= 10^9",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "1\n5\n-5 -1 2 1 9",
                        "output": "2",
                        "explanation": "A[2] = 2, so 2 is a magic index."
                    },
                    {
                        "input": "2\n5\n2 3 4 5 6\n6\n-1 -1 -1 4 4 4",
                        "output": "-1\n4",
                        "explanation": "In the first test case, there is no index i such that A[i] = i.\nIn the second test case, A[4] = 4, so 4 is a magic index."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><i>Check each index one by one.</i></p>",
            "<p><i>We can use binary search.</i></p>",
            "<p><i>We can use some kind of modified binary search</i></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1),\n\n    Where N is the number of elements in the array.\n*/\n\nint findMagicIndex(vector<int>& a, int left, int right) \n{\n    if (left > right) \n    {\n        return -1;\n    }\n\n    int mid = (left + right) / 2;\n    int midVal = a[mid];\n    if (midVal == mid) \n    {\n        return mid;\n    }\n\n    // Trying to find the answer towards left\n    int leftAns = findMagicIndex(a, left, min(mid - 1, midVal));\n    if (leftAns >= 0) \n    {\n        return leftAns;\n    }\n\n    // If we couldn't find the answer towards left then trying to find the answer towards right\n    int rightAns = findMagicIndex(a, max(mid + 1, midVal), right);\n    return rightAns;\n}\n\nint magicIndex(vector<int>& a, int n) \n{\n    return findMagicIndex(a, 0, n - 1);\n}\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1),\n\n    Where N is the number of elements in the array.\n*/\n\nimport java.util.ArrayList;\n\npublic class Solution \n{\n    public static int findMagicIndex(ArrayList<Integer> a, int left, int right) \n    {\n        if (left > right) \n        {\n            return -1;\n        }\n\n        int mid = (left + right) / 2;\n        int midVal = a.get(mid);\n\n        if (midVal == mid) \n        {\n            return mid;\n        }\n\n        // Trying to find the answer towards left\n        int leftAns = findMagicIndex(a, left, Math.min(mid - 1, midVal));\n        if (leftAns >= 0) \n        {\n            return leftAns;\n        }\n\n        // If we couldn't find the answer towards left then trying to find the answer towards right\n        int rightAns = findMagicIndex(a, Math.max(mid + 1, midVal), right);\n        return rightAns;\n    }\n    public static int magicIndex(ArrayList<Integer> a, int n) \n    {\n        return findMagicIndex(a, 0, n - 1);\n    }\n\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1),\r\n\r\n    Where N is the number of elements in the array.\r\n'''\r\n\r\ndef findMagicIndex(a, left, right):\r\n    if (left > right) :\r\n        return -1\r\n\r\n    mid = (left + right) // 2\r\n    midVal = a[mid]\r\n    if (midVal == mid) :\r\n        return mid\r\n    \r\n    # Trying to find the answer towards left\r\n    leftAns = findMagicIndex(a, left, min(mid - 1, midVal))\r\n    if (leftAns >= 0) :\r\n        return leftAns\r\n    \r\n    # If we couldn't find the answer towards left then trying to find the answer towards right\r\n    rightAns = findMagicIndex(a, max(mid + 1, midVal), right)\r\n    return rightAns\r\n\r\ndef magicIndex(a, n):\r\n    return findMagicIndex(a, 0, n - 1)\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}