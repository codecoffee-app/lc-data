{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8850,
            "title": "Magician and Chocolates",
            "titleSlug": "magician-and-chocolates_920437",
            "content": "<h4 id=\"in-a-magic-event-you-are-given-n-bags-each-bag-containing-a-i-chocolates-in-one-unit-of-time-you-can-choose-any-bag-i-and-eat-all-the-chocolates-a-i-in-that-bag-and-then-the-magician-fills-the-ith-bag-with-floor-a-i-2-chocolates-your-task-is-to-find-the-maximum-number-of-chocolate-you-can-eat-in-k-units-of-time\">In a magic event, you are given \u2018N\u2019 bags, each bag containing \u2018A[i]\u2019 chocolates. In one unit of time, you can choose any bag \u2018i\u2019 and eat all the chocolates \u2018A[i]\u2019 in that bag and then the magician fills the ith bag with floor(\u2018A[i]\u2019 / 2) chocolates. Your task is to find the maximum number of chocolate you can eat in \u2018K\u2019 units of time.</h4>\n\n<h4 id=\"since-the-answer-could-be-large-return-answer-modulo-10-9-7\">Since the answer could be large, return answer modulo 10^9 + 7.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>For the array [ 4, 7, 9, 10] and \u2018k\u2019=2\nIn the first step, we can choose the last bag. So the answer will be 10 and the array will be [4, 7, 9, 5].\nIn the second step, we can choose the second last bag. So the answer will be 19 and the array will be [4, 7, 4, 5].\nSo the final output will be 19.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases to be run. Then the test cases follow.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018K\u2019, representing the number of bags and the amount of time.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers representing the number of chocolates in each bag.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an integer representing the maximum number of chocolates you can eat in the given amount of time.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You are not required to print anything, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^5\n1 &lt;= ARR[i] &lt;= 10^5\n\nIt is guaranteed that the sum of \u2018N\u2019 over all test cases doesn\u2019t exceed 10^5.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 1\n3 8 2 4\n4 2\n10 4 7 22\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>8\n33\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case,\nIn the first step, we can choose the second bag. So the answer will be 8 and the array will be [3, 4, 2, 4].\nSo, the final answer will be 8.\n\nFor the second test case,\nIn the first step, we can choose the last bag. So the answer will be 22 and the array will be [10, 4, 7, 11].\nIn the second step, we can choose the last bag. So the answer will be 33 and the array will be [10, 4, 7, 5].\nSo, the final answer will be 33.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 3\n3 6 10 12 8\n4 1\n2 10 4 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>30\n10\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 22,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'N' bags, each containing 'A[i]' chocolates. In each unit of time, you can choose any bag 'i', eat all its chocolates 'A[i]', and then the bag is refilled with floor('A[i]' / 2) chocolates. Determine the maximum number of chocolates you can eat in 'K' units of time. Return the answer modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^5",
                    "1 <= ARR[i] <= 10^5",
                    "The sum of \u2018N\u2019 over all test cases doesn\u2019t exceed 10^5.",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "4 1\n3 8 2 4",
                        "output": "8",
                        "explanation": "Choosing the second bag (8 chocolates) yields the maximum chocolate consumption in one unit of time. The bag refills with 8/2 = 4 chocolates."
                    },
                    {
                        "input": "4 2\n10 4 7 22",
                        "output": "33",
                        "explanation": "In the first step, choosing the last bag yields 22 chocolates, and the bag refills with 22/2 = 11 chocolates. In the second step, choosing the updated last bag yields 11 chocolates. Total: 22 + 11 = 33."
                    },
                    {
                        "input": "5 3\n3 6 10 12 8",
                        "output": "30",
                        "explanation": "Choosing the bag with 12 in first step, 12/2 = 6. Sum = 12\nChoosing the bag with 10 in second step, 10/2 = 5. Sum = 12+10 = 22\nChoosing the bag with 8 in third step, 8/2 = 4. Sum = 22+8 = 30"
                    },
                    {
                        "input": "4 1\n2 10 4 3",
                        "output": "10",
                        "explanation": "Choosing the bag with 10 in the first step, 10/2=5. So sum is 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to get the maximum number of chocolates possible at each step.</p>",
            "<p>Can we use any data structure to speed up the process of finding the maximum elements.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}