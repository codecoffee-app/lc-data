{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8548,
            "title": "Majority Element - II",
            "titleSlug": "majority-element-ii_893027",
            "content": "<h4 id=\"you-are-given-an-array-list-arr-of-integers-of-length-n-you-are-supposed-to-find-all-the-elements-that-occur-strictly-more-than-floor-n-3-times-in-the-given-array-list\">You are given an array/list &#39;ARR&#39; of integers of length \u2018N\u2019. You are supposed to find all the elements that occur strictly more than floor(N/3) times in the given array/list.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. The test cases follow.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of elements in the array.\n\nThe second line contains \u2018N\u2019 single space-separated integers denoting the elements of the array/list.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return all the majority elements separated by a single space.\n\nThe output of every test case will be printed in a separate line.\n\nYou may return the majority of elements in any order.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n3 &lt;= N &lt;= 5000\n1 &lt;= ARR[i] &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n7\n3 2 2 1 5 2 3\n5\n7 4 4 9 7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n4 7\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>In the first test case, floor(N/3) = floor(7/3) is equal to 2, and 2 occurs 3 times which is strictly more than N/3. No other element occurs more than 2 times.\n\nIn the second test case, floor(N/3) = floor(5/3) is equal to 1, and 4 and 7 both occur 2 times. No other element occurs more than once.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n6\n1 2 4 4 3 4\n4\n6 6 6 7\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4\n6\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>In the first test case, floor(N/3) = floor(6/3) is equal to 2, and 4 occurs 3 times which is strictly more than N/3. No other element occurs more than 2 times.\n\nIn the second test case, floor(N/3) = floor(4/3) is equal to 1, and 6 occurs 3 times. No other element occurs more than once.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 162,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find all elements that appear more than floor(N/3) times, where N is the size of the array.",
                "constraints": [
                    "1 <= T <= 100",
                    "3 <= N <= 5000",
                    "1 <= ARR[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 7, nums = [3, 2, 2, 1, 5, 2, 3]",
                        "output": "2",
                        "explanation": "floor(7/3) = 2. The element 2 appears 3 times, which is strictly greater than 2."
                    },
                    {
                        "input": "n = 5, nums = [7, 4, 4, 9, 7]",
                        "output": "4 7",
                        "explanation": "floor(5/3) = 1. The elements 4 and 7 both appear 2 times, which is strictly greater than 1."
                    },
                    {
                        "input": "n = 6, nums = [1, 2, 4, 4, 3, 4]",
                        "output": "4",
                        "explanation": "floor(6/3) = 2. The element 4 appears 3 times, which is strictly greater than 2."
                    },
                    {
                        "input": "n = 4, nums = [6, 6, 6, 7]",
                        "output": "6",
                        "explanation": "floor(4/3) = 1. The element 6 appears 3 times, which is strictly greater than 1."
                    },
                    {
                        "input": "n = 3, nums = [1,2,3]",
                        "output": "",
                        "explanation": "floor(3/3) = 1.  No element appears more than 1 time."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check for each element, whether it occurs more than N/3 times or not.</p>",
            "<p>Can you use a data structure to store the number of occurrences of each element?</p>",
            "<p>Can you think about sorting?</p>",
            "<p>Can you use the fact that there are at most 2 elements that occur more than N/3 times in the array?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1)\r\n\r\n    Where 'N' is the number of elements in the given array/list\r\n*/\r\n\r\nvector<int> majorityElementII(vector<int> &arr)\r\n{\r\n    int n = arr.size();\r\n\r\n    // Array for storing final answer.\r\n    vector<int> majorityElement;\r\n\r\n    // Variables for storing the elements which may occur more than n/3 times.\r\n    int firstCandidate = 0, secondCandidate = 0;\r\n\r\n    // Variables for storing the frequency of the candidate elements.\r\n    int firstCount = 0, secondCount = 0;\r\n\r\n    // Iterate through the array.\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        // Increment firstCount if the current element is equal to firstCandidate.\r\n        if (arr[i] == firstCandidate)\r\n        {\r\n            firstCount = firstCount + 1;\r\n        }\r\n\r\n        // Increment secondCount if the current element is equal to secondCandidate.\r\n        else if (arr[i] == secondCandidate)\r\n        {\r\n            secondCount = secondCount + 1;\r\n        }\r\n        // Change value of the firstCandidate to the current element if firstCount is equal to 0.\r\n        else if (firstCount == 0)\r\n        {\r\n            firstCandidate = arr[i];\r\n            firstCount = 1;\r\n        }\r\n\r\n        // Change value of the secondCandidate to the current element if secondCount is equal to 0.\r\n        else if (secondCount == 0)\r\n        {\r\n            secondCandidate = arr[i];\r\n            secondCount = 1;\r\n        }\r\n\r\n        // Otherwise decrement firstCount and secondCount by 1.\r\n        else\r\n        {\r\n            firstCount = firstCount - 1;\r\n            secondCount = secondCount - 1;\r\n        }\r\n    }\r\n\r\n    firstCount = 0;\r\n    secondCount = 0;\r\n\r\n    // Iterate through the array to find frequency of firstCandidate and secondCandidate.\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        // Increment firstCount if the current element is equal to firstCandidate.\r\n        if (arr[i] == firstCandidate)\r\n        {\r\n            firstCount = firstCount + 1;\r\n        }\r\n\r\n        // Increment secondCount if the current element is equal to secondCandidate.\r\n        else if (arr[i] == secondCandidate)\r\n        {\r\n            secondCount = secondCount + 1;\r\n        }\r\n    }\r\n\r\n    // Include firstCandidate in the answer if its frequency is more than n/3.\r\n    if (firstCount > n / 3)\r\n    {\r\n        majorityElement.push_back(firstCandidate);\r\n    }\r\n\r\n    // Include secondCandidate in the answer if its frequency is more than n/3.\r\n    if (secondCount > n / 3)\r\n    {\r\n        majorityElement.push_back(secondCandidate);\r\n    }\r\n\r\n    // Return all stored majority elements.\r\n    return majorityElement;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    Where 'N' is the number of elements in the given array/list\n*/\n\nimport java.util.ArrayList;\n\npublic class Solution {\n    public static ArrayList<Integer> majorityElementII(ArrayList<Integer> arr) {\n        int n = arr.size();\n\n        // Array for storing final answer.\n        ArrayList<Integer> majorityElement=new ArrayList<Integer> ();\n\n        // Variables for storing the elements which may occur more than n/3 times.\n        int firstCandidate = 0, secondCandidate = 0;\n\n        // Variables for storing the frequency of the candidate elements.\n        int firstCount = 0, secondCount = 0;\n\n        // Iterate through the array.\n        for (int i = 0; i < n; i++) {\n            // Increment firstCount if the current element is equal to firstCandidate.\n            if (arr.get(i) == firstCandidate) {\n                firstCount = firstCount + 1;\n            }\n\n            // Increment secondCount if the current element is equal to secondCandidate.\n            else if (arr.get(i) == secondCandidate) {\n                secondCount = secondCount + 1;\n            }\n            // Change value of the firstCandidate to the current element if firstCount is equal to 0.\n            else if (firstCount == 0) {\n                firstCandidate = arr.get(i);\n                firstCount = 1;\n            }\n\n            // Change value of the secondCandidate to the current element if secondCount is equal to 0.\n            else if (secondCount == 0) {\n                secondCandidate = arr.get(i);\n                secondCount = 1;\n            }\n\n            // Otherwise decrement firstCount and secondCount by 1.\n            else {\n                firstCount = firstCount - 1;\n                secondCount = secondCount - 1;\n            }\n        }\n\n        firstCount = 0;\n        secondCount = 0;\n\n        // Iterate through the array to find frequency of firstCandidate and secondCandidate.\n        for (int i = 0; i < n; i++) {\n            // Increment firstCount if the current element is equal to firstCandidate.\n            if (arr.get(i) == firstCandidate) {\n                firstCount = firstCount + 1;\n            }\n\n            // Increment secondCount if the current element is equal to secondCandidate.\n            else if (arr.get(i) == secondCandidate) {\n                secondCount = secondCount + 1;\n            }\n        }\n\n        // Include firstCandidate in the answer if its frequency is more than n/3.\n        if (firstCount > n / 3) {\n            majorityElement.add(firstCandidate);\n        }\n\n        // Include secondCandidate in the answer if its frequency is more than n/3.\n        if (secondCount > n / 3) {\n            majorityElement.add(secondCandidate);\n        }\n\n        // Return all stored majority elements.\n        return majorityElement;\n\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1)\r\n\r\n    Where 'N' is the number of elements in the given array/list.\r\n'''\r\n\r\ndef majorityElementII(arr):\r\n\r\n    n = len(arr)\r\n\r\n    # Array for storing final answer.\r\n    majorityElement = []\r\n\r\n    # Variables for storing the elements which may occur more than n/3 times.\r\n    firstCandidate = 0\r\n    secondCandidate = 0\r\n\r\n    # Variables for storing the frequency of the candidate elements.\r\n    firstCount = 0\r\n    secondCount = 0\r\n\r\n    # Iterate through the array.\r\n    for i in range(n):\r\n\r\n        # Increment firstCount if the current element is equal to firstCandidate.\r\n        if (arr[i] == firstCandidate):\r\n            firstCount = firstCount + 1\r\n\r\n        # Increment secondCount if the current element is equal to secondCandidate.\r\n        elif (arr[i] == secondCandidate):\r\n            secondCount = secondCount + 1\r\n\r\n        # Change value of the firstCandidate to the current element if firstCount is equal to 0.\r\n        elif (firstCount == 0):\r\n            firstCandidate = arr[i]\r\n            firstCount = 1\r\n\r\n        # Change value of the secondCandidate to the current element if secondCount is equal to 0.\r\n        elif (secondCount == 0):\r\n            secondCandidate = arr[i]\r\n            secondCount = 1\r\n\r\n        # Otherwise decrement firstCount and secondCount by 1.\r\n        else:\r\n            firstCount = firstCount - 1\r\n            secondCount = secondCount - 1\r\n\r\n    firstCount = 0\r\n    secondCount = 0\r\n\r\n    # Iterate through the array to find frequency of firstCandidate and secondCandidate.\r\n    for i in range(n):\r\n\r\n        # Increment firstCount if the current element is equal to firstCandidate.\r\n        if (arr[i] == firstCandidate):\r\n            firstCount = firstCount + 1\r\n\r\n        # Increment secondCount if the current element is equal to secondCandidate.\r\n        elif(arr[i] == secondCandidate):\r\n            secondCount = secondCount + 1\r\n\r\n    # Include firstCandidate in the answer if its frequency is more than n/3.\r\n    if (firstCount > n / 3):\r\n        majorityElement.append(firstCandidate)\r\n\r\n    # Include secondCandidate in the answer if its frequency is more than n/3.\r\n    if (secondCount > n / 3):\r\n        majorityElement.append(secondCandidate)\r\n\r\n    # Return all stored majority elements.\r\n    return majorityElement",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}