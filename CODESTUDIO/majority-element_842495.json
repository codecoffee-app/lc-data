{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8278,
            "title": "Majority element",
            "titleSlug": "majority-element_842495",
            "content": "<h4 id=\"you-have-been-given-an-array-list-arr-consisting-of-n-integers-your-task-is-to-find-the-majority-element-in-the-array-if-there-is-no-majority-element-present-print-1\">You have been given an array/list &#39;ARR&#39; consisting of &#39;N&#39; integers. Your task is to find the majority element in the array. If there is no majority element present, print -1.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>A majority element is an element that occurs more than floor(&#39;N&#39; / 2) times in the array.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains a single positive integer \u2018N\u2019 representing the size of the array/list.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers representing the array elements of &#39;ARR&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print an integer denoting the majority element present in the array. Print-1 in case of no majority element.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print the output, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5 * 10^3\n-10^5 &lt;= ARR[i] &lt;= 10^5\n\nWhere &#39;ARR[i]&#39; denotes the element at the &#39;i&#39;th index in the array/list &#39;ARR&#39;.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\n2 3 9 2 2\n4\n8 5 1 9 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n-1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h4>\n\n<pre><code>In test case 1, frequencies of occurrences of different elements are:\n\n2 \u2192 3 times\n3 \u2192 1 time\n9 \u2192 1 time\n\nAs 2 occurs more than floor(5/2) (i.e. floor(2.5) = 2) times, it is the majority element.\n\nIn test case 2, frequencies of occurrences of different elements are:\n\n8 \u2192 1 time\n5 \u2192 1 time\n1 \u2192 1 time\n9 \u2192 1 time\n\nAs no element occurs more than floor(4/2) = 2 times. Thus No majority element is present.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n7\n8 8 8 8 8 9 1 \n4\n2 2 3 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>8\n-1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2:</h5>\n\n<pre><code>In test case 1, frequencies of occurrences of different elements are:\n\n8 \u2192 5 times\n9 \u2192 1 time\n1 \u2192 1 time\n\nAs 8 occurs more than floor(7/2) (i.e. floor(3.5) = 3) times, it is the majority element.\n\nIn test case 2, frequencies of occurrences of different elements are:\n\n2 \u2192 2 times\n3 \u2192 2 times\n\nAs no element occurs more than floor(4/2) = 2 times. Thus No majority element is present.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 216,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array/list of integers, find the majority element. A majority element appears more than N/2 times in the array, where N is the size of the array. If no majority element exists, return -1.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 5 * 10^3 (Size of the array)",
                    "-10^5 <= ARR[i] <= 10^5 (Value of each element in the array)",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "5\n2 3 9 2 2",
                        "output": "2",
                        "explanation": "The element 2 appears 3 times in the array of size 5. Since 3 is greater than floor(5/2) = 2, 2 is the majority element."
                    },
                    {
                        "input": "4\n8 5 1 9",
                        "output": "-1",
                        "explanation": "No element appears more than floor(4/2) = 2 times. Therefore, there is no majority element."
                    },
                    {
                        "input": "7\n8 8 8 8 8 9 1",
                        "output": "8",
                        "explanation": "The element 8 appears 5 times in the array of size 7. Since 5 is greater than floor(7/2) = 3, 8 is the majority element."
                    },
                    {
                        "input": "4\n2 2 3 3",
                        "output": "-1",
                        "explanation": "The elements 2 and 3 each appear 2 times in the array of size 4. Since no element appears more than floor(4/2) = 2 times, there is no majority element."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Naively count the frequency of each element.</p>",
            "<p>Can we use extra space to improve the time complexity of counting the frequency of each element?</p>",
            "<p>Use the fact that frequency of majority element is greater than the combined frequency of rest of the elements.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    Where 'N' is the size of array/list.\n*/\n\nint findMajorityElement(int arr[], int n) {\t\n\t// Variable to store the majority element in the array, it it is present.\n\tint majorityElement = -1;\n\tint count = 0;\n\n\t// Iterating the array to know if there is a possible majority element present.\n\tfor(int i = 0; i < n; i++) {\t\n\t\t// If count becomes 0, set current element as a possible candidate for majority element, reset count to 1.\n\t\tif(count == 0) {\n\t\t\tmajorityElement = arr[i];\n\t\t\tcount = 1;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Increment the count if the current element of the array is equal to the current majority element, else decrement it.\n\t\tif(arr[i] == majorityElement) {\n\t\t\tcount++;\n\t\t}\t\t\n\t\telse {\n\t\t\tcount--;\n\t\t}\n\t}\n\n\tcount = 0;\n\n\t// Checking if majority element occurs more than 'n' / 2 times.\n\tfor(int i = 0; i < n; i++) {\n\t\tif(arr[i] == majorityElement) {\n\t\t\tcount++;\n\t\t}\n\t}\n\n\t// If the count of the majority element is greater than 'n' / 2, then return it.\n\tif(count > n / 2) {\n\t\treturn majorityElement;\n\t}\n\n\t// If no majority element found, return -1.\n\treturn -1;\t\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    Where 'N' is the size of array/list.\n*/\n\npublic class Solution {\n\n\tpublic static int findMajority(int[] arr, int n) {\n\t\t// Variable to store the majority element in the array, it it is present.\n\t\tint majorityElement = -1;\n\t\tint count = 0;\n\n\t\t// Iterating the array to know if there is a possible majority element present.\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\t// If count becomes 0, set current element as a possible candidate for majority element, reset count to 1.\n\t\t\tif (count == 0) {\n\t\t\t\tmajorityElement = arr[i];\n\t\t\t\tcount = 1;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Increment the count if the current element of the array is equal to the current majority element, else decrement it.\n\t\t\tif (arr[i] == majorityElement) {\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tcount--;\n\t\t\t}\n\t\t}\n\n\t\tcount = 0;\n\n\t\t// Checking if majority element occurs more than 'n' / 2 times.\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (arr[i] == majorityElement) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\n\t\t// If the count of the majority element is greater than 'n' / 2, then return it.\n\t\tif (count > n / 2) {\n\t\t\treturn majorityElement;\n\t\t}\n\n\t\t// If no majority element found, return -1.\n\t\treturn -1;\n\t}\n\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    Where 'N' is the size of array/list.\n'''\n\ndef findMajorityElement(arr, n):\n\t# Variable to store the majority element in the array, it it is present.\n\tmajorityElement = -1\n\tcount = 0\n\n\t# Iterating the array to know if there is a possible majority element present.\n\tfor i in range(n):\n\t\t# If count becomes 0, set current element as a possible candidate for majority element, reset count to 1.\n\t\tif count == 0:\n\t\t\tmajorityElement = arr[i]\n\t\t\tcount = 1\n\t\t\t\n\t\t\tcontinue\n\n\t\t# Increment the count if the current element of the array is equal to the current majority element, else decrement it.\n\t\tif arr[i] == majorityElement:\n\t\t\tcount += 1\n\t\telse:\n\t\t\tcount -= 1\n\n\tcount = 0\n\n\t# Checking if majority element occurs more than 'n' / 2 times.\n\tfor i in range(n):\n\t\tif arr[i] == majorityElement:\n\t\t\tcount += 1\n\n\t# If the count of the majority element is greater than 'n' / 2, then return it.\n\tif count > n / 2:\n\t\treturn majorityElement\n\n\t# If no majority element found, return -1.\n\treturn -1",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}