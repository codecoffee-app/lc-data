{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9447,
            "title": "Make Palindrome",
            "titleSlug": "make-palindrome_985351",
            "content": "<h4 id=\"you-are-given-a-string-str-of-length-n-consisting-of-lowercase-english-alphabet-letters-your-task-is-to-return-the-count-of-minimum-characters-to-be-added-at-front-to-make-the-string-a-palindrome\">You are given a string STR of length N consisting of lowercase English Alphabet letters. Your task is to return the count of minimum characters to be added at front to make the string a palindrome.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>For the given string \u201cdeed\u201d, the string is already a palindrome, thus, minimum characters needed to be added are 0. \n\nSimilarly, for the given string \u201caabaaca\u201d, the minimum characters needed are 2 i.e. \u2018a\u2019 and \u2018c\u2019 which makes the string \u201cacaabaaca\u201d, which is a palindrome.   \n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then, the T test cases follow.\n\nThe first and only line of each test case contains the string STR. \n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the count of minimum characters needed to make the string palindrome.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100 \n1 &lt;= N &lt;= 5000 \nSTR contains only lowercase English letters.\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1:</h5>\n\n<pre><code>2\nabcd\ndad \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>3\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for Sample 1:</h5>\n\n<pre><code>For test case 1: \nMinimum characters to be added at front to make it a palindrome are 3 i.e. \u201cdcb\u201d which makes the string \u201cdcbabcd\u201d.\n\nFor test case 2:\nThe string is already a palindrome, we do not need to add any character.     \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample input 2:</h5>\n\n<pre><code>2\nxxaxxa    \nabb\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>1\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `str` consisting of lowercase English alphabet letters, determine the minimum number of characters that need to be added to the front of the string to transform it into a palindrome.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 5000, where N is the length of the string",
                    "STR contains only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "str = \"abcd\"",
                        "output": "3",
                        "explanation": "To make \"abcd\" a palindrome, we can add \"dcb\" at the front, resulting in \"dcbabcd\". Therefore, 3 characters need to be added."
                    },
                    {
                        "input": "str = \"dad\"",
                        "output": "0",
                        "explanation": "The string \"dad\" is already a palindrome, so no characters need to be added."
                    },
                    {
                        "input": "str = \"aabaaca\"",
                        "output": "2",
                        "explanation": "Adding \"ac\" at the front of \"aabaaca\" results in \"acaabaaca\", which is a palindrome. Therefore, 2 characters need to be added."
                    },
                    {
                        "input": "str = \"xxaxxa\"",
                        "output": "1",
                        "explanation": "Adding \"x\" to the front makes the string \"xxxaxxa\". Then if we drop the leading 'x' it reads the same backward or forward (i.e. xxaxxa). Another approach is to add 'x' at the end 'xxaxxax'.  If we add the x to the front, the string now needs 1 additional char to be prepended to make it 'a'.  However adding \"a\" to the end works since it already reads 'a' backwards from where the difference began."
                    },
                    {
                        "input": "str = \"abb\"",
                        "output": "2",
                        "explanation": "Adding \"bb\" to the front of \"abb\" results in \"bbabb\", or adding 'b' to the front and 'a' to the end gives \"babba\" or \"babbaa\" depending on which order we're looking at doing it."
                    },
                    {
                        "input": "str = \"deed\"",
                        "output": "0",
                        "explanation": "The string \"deed\" is already a palindrome, so no characters need to be added."
                    },
                    {
                        "input": "str = \"aba\"",
                        "output": "0",
                        "explanation": "The string \"aba\" is already a palindrome, so no characters need to be added."
                    },
                    {
                        "input": "str = \"abcba\"",
                        "output": "0",
                        "explanation": "The string \"abcba\" is already a palindrome, so no characters need to be added."
                    },
                    {
                        "input": "str = \"aaaaaaaa\"",
                        "output": "0",
                        "explanation": "The string \"aaaaaaaa\" is already a palindrome, so no characters need to be added."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>First off, observe that the question focuses on the terms palindrome and addition at front.</p>",
            "<p>As we here want a pattern, if you observe carefully, you need the longest prefix which is a palindrome. This can be done in an optimised way if you modify the KMP string matching algorithm.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}