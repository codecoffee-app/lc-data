{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9094,
            "title": "Matrix Chain Multiplication",
            "titleSlug": "matrix-chain-multiplication_975344",
            "content": "<h4 id=\"given-a-chain-of-matrices-a1-a2-a3-an-your-task-is-to-find-out-the-minimum-cost-to-multiply-these-matrices-the-cost-of-matrix-multiplication-is-defined-as-the-number-of-scalar-multiplications-a-chain-of-matrices-a1-a2-a3-an-is-represented-by-a-sequence-of-numbers-in-an-array-arr-where-the-dimension-of-1st-matrix-is-equal-to-arr-0-arr-1-2nd-matrix-is-arr-1-arr-2-and-so-on\">Given a chain of matrices A1, A2, A3,.....An. Your task is to find out the minimum cost to multiply these matrices. The cost of matrix multiplication is defined as the number of scalar multiplications. A Chain of matrices A1, A2, A3,.....An is represented by a sequence of numbers in an array \u2018arr\u2019 where the dimension of 1st matrix is equal to arr[0] * arr[1] , 2nd matrix is arr[1] * arr[2], and so on.</h4>\n\n<h3 id=\"for-example\">For example:</h3>\n\n<pre><code>For arr[ ] = { 10, 20, 30, 40}, matrix A1 = [10 * 20], A2 = [20 * 30], A3 = [30 * 40]\n\nScalar multiplication of matrix with dimension 10 * 20 is equal to 200.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. Then each test case follows.\n\nThe first line of each test case contains the Integer \u2018N\u2019 denoting the number of elements in the array.\n\nThe second and the last line of each test case contains \u2018N\u2019 single space-separated integers representing the elements of the array.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, print a single integer, denoting the minimum cost of matrix multiplication.\n\nOutput of each test case will be printed on a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n2 &lt;= N &lt;= 100\n1 &lt;= arr[i] &lt;= 400 \n\nTime Limit: 1 sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n4\n4 5 3 2\n4\n10 15 20 25\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>70\n8000\n</code></pre>\n\n<h4 id=\"sample-output-explanation-1\">Sample Output Explanation 1:</h4>\n\n<pre><code>In the first test case, there are three matrices of dimensions A = [4 5], B = [5 3] and C = [3 2]. The most efficient order of multiplication is A * ( B * C).\nCost of ( B * C ) = 5 * 3 * 2 = 30  and (B * C) = [5 2] and A * (B * C) = [ 4 5] * [5 2] = 4 * 5 * 2 = 40. So the overall cost is equal to 30 + 40 =70.\n\nIn the second test case, there are two ways to multiply the chain - A1*(A2*A3) or (A1*A2)*A3.\n\nIf we multiply in order- A1*(A2*A3), then the number of multiplications required is 11250.\n\nIf we multiply in order- (A1*A2)*A3, then the number of multiplications required is 8000.\n\nThus a minimum number of multiplications required is 8000. \n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>1\n4\n1 4 3 2\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>18\n</code></pre>\n\n<h4 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2:</h4>\n\n<pre><code>In the first test case, there are three matrices of dimensions A = [1 4], B = [4 3] and C = [3 2]. The most efficient order of multiplication is (A *  B) * C .\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 147,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a chain of matrices A1, A2, A3, ..., An, determine the minimum cost (number of scalar multiplications) required to multiply them. The dimensions of the matrices are represented by an array 'arr', where the ith matrix has dimensions arr[i-1] x arr[i]. For instance, if arr = [10, 20, 30], then matrix A1 is 10x20 and A2 is 20x30.",
                "constraints": [
                    "1 <= T <= 5",
                    "2 <= N <= 100",
                    "1 <= arr[i] <= 400",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4\n4 5 3 2",
                        "output": "70",
                        "explanation": "Consider matrices A=[4x5], B=[5x3], C=[3x2]. Multiplying as A * (B * C) yields the minimum cost. Cost(B * C) = 5 * 3 * 2 = 30, resulting in a [5x2] matrix. Cost(A * (B * C)) = 4 * 5 * 2 = 40. Total cost: 30 + 40 = 70."
                    },
                    {
                        "input": "4\n10 15 20 25",
                        "output": "8000",
                        "explanation": "With dimensions represented as 10 15 20 25, calculating (A1*A2)*A3 costs (10*15*20) + (10*20*25) = 3000 + 5000 = 8000 multiplications.  Calculating A1*(A2*A3) costs (15*20*25) + (10*15*25) = 7500 + 3750 = 11250 multiplications. Minimum is 8000."
                    },
                    {
                        "input": "4\n1 4 3 2",
                        "output": "18",
                        "explanation": "Matrices A=[1x4], B=[4x3], C=[3x2]. The optimal multiplication order is (A * B) * C. Cost(A * B) = 1 * 4 * 3 = 12, giving a [1x3] matrix. Cost((A * B) * C) = 1 * 3 * 2 = 6.  Total cost: 12 + 6 = 18."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try out all possible combinations and avoid recomputation of repetitive subproblems.</p>",
            "<p>Solve problems with matrix chain of length 1, length 2, and then 3, and so on.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N ^ 3) \r\n    Note: It is the upper bound. In real Time Complexity will be much lesser.\r\n    \r\n    Space Complexity: O(N * N)\r\n\r\n    Where 'N' is the number of elements in the array.\r\n*/ \r\n\r\n// Function to find minimum cost(scalar multiplication) of matrix multipication\r\nint matrixMultiplication(vector<int> &arr, int N)\r\n{\r\n    /* \r\n        For simplicity of the program, one\r\n        extra row and one extra column are allocated in 'dp[][]'.\r\n        0th row and 0th column of 'dp[][]'' are not used \r\n    */\r\n\r\n    int dp[N][N];\r\n    /* \r\n        State: dp[i, j] = Minimum number of scalar\r\n        multiplications needed to compute the\r\n        matrix A[i]A[i+1]...A[j] = A[i..j] where\r\n        dimension of A[i] is arr[i-1] x arr[i] \r\n    */\r\n\r\n    // The cost of multiplying one matrix is 0\r\n    for (int i = 1; i < N; i++)\r\n    {\r\n        // Make dp[i][i] 0\r\n        dp[i][i] = 0;\r\n    }\r\n       \r\n\r\n    // Run a loop from length 2 to n-1 \r\n    for (int l = 2; l < N; l++)\r\n    {\r\n        for (int i = 1; i < N - l + 1; i++)\r\n        {\r\n            int j = i + l - 1;\r\n\r\n            // Initialize dp[i][j] with maximum value\r\n            dp[i][j] = INT_MAX;\r\n\r\n            for (int k = i; k <= j - 1; k++)\r\n            {\r\n                // Store the temporary cost (scalar multiplications) in 'temp' \r\n                int temp = dp[i][k] + dp[k + 1][j]  + arr[i - 1] * arr[k] * arr[j];\r\n                \r\n                // If temporary answer 'temp' is less than actual aswer then update actual ans i.e dp[i][j]\r\n                dp[i][j] = min(dp[i][j], temp);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Return dp[1][N-1]\r\n    return dp[1][N - 1];\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N ^ 3) \r\n    Note: It is the upper bound. In real Time Complexity will be much lesser.\r\n    \r\n    Space Complexity: O(N * N)\r\n\r\n    Where 'N' is the number of elements in the array.\r\n'''\r\n\r\n# Function to find minimum cost(scalar multiplication) of matrix multipication\r\nfrom typing import no_type_check_decorator\r\n\r\n\r\ndef matrixMultiplication(arr, N):\r\n\t''' \r\n        For simplicity of the program, one\r\n        extra row and one extra column are allocated in 'dp[][]'.\r\n        0th row and 0th column of 'dp[][]'' are not used \r\n\t'''\r\n\t\r\n\tdp = [[0 for i in range(N)] for i in range(N)]\r\n\t''' \r\n        State: dp[i, j] = Minimum number of scalar\r\n        multiplications needed to compute the\r\n        matrix A[i]A[i+1]...A[j] = A[i..j] where\r\n        dimension of A[i] is arr[i-1] x arr[i] \r\n\t'''\r\n\r\n    # The cost of multiplying one matrix is 0\r\n\tfor i in range(1, N):\r\n\t\t\r\n\t\t# Make dp[i][i] 0\r\n\t\tdp[i][i] = 0\r\n\t\t\r\n\t# Run a loop from length 2 to n - 1 \r\n\tfor l in range(2, N):\r\n\t\tfor i in range(1, N - l + 1):\r\n\t\t\tj = i + l - 1\r\n\t\t\t\r\n\t\t\t# Initialize dp[i][j] with maximum value\r\n\t\t\tdp[i][j] = 1000000000\r\n\r\n\t\t\tfor k in range(i, j):\r\n\t\t\t\t\r\n\t\t\t\t# Store the temporary cost (scalar multiplications) in 'temp' \r\n\t\t\t\ttemp = dp[i][k] + dp[k + 1][j]  + arr[i - 1] * arr[k] * arr[j]\r\n\t\t\t\t\r\n\t\t\t\t# If temporary answer 'temp' is less than actual aswer then update actual ans i.e dp[i][j]\r\n\t\t\t\tdp[i][j] = min(dp[i][j], temp)\r\n\t\t\t\t\r\n\t# Return dp[1][N-1]\r\n\treturn dp[1][N - 1]",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "\n/*\n\tTime Complexity: O(N ^ 3) \n\tNote: It is the upper bound. In real Time Complexity will be much lesser.\n\t\n\tSpace Complexity: O(N * N)\n\t\n\tWhere 'N' is the number of elements in the array.\n*/\npublic class Solution {\n\t\n\t// Function to find minimum cost(scalar multiplication) of matrix multipication\n\tpublic static int matrixMultiplication(int[] arr, int N) {\n\n\t    /* \n\t        For simplicity of the program, one\n\t        extra row and one extra column are allocated in 'dp[][]'.\n\t        0th row and 0th column of 'dp[][]'' are not used \n\t    */\n\n\t    int dp[][] =new int[N][N];\n\t   \n\t    /* \n\t        State: dp[i, j] = Minimum number of scalar\n\t        multiplications needed to compute the\n\t        matrix A[i]A[i+1]...A[j] = A[i..j] where\n\t        dimension of A[i] is arr[i-1] x arr[i] \n\t    */\n\n\t    // The cost of multiplying one matrix is 0\n\t    for (int i = 1; i < N; i++)\n\t    {\n\t        // Make dp[i][i] 0\n\t        dp[i][i] = 0;\n\t    }\n\t       \n\n\t    // Run a loop from length 2 to n - 1 \n\t    for (int l = 2; l < N; l++)\n\t    {\n\t        for (int i = 1; i < N - l + 1; i++)\n\t        {\n\t            int j = i + l - 1;\n\n\t            // Initialize dp[i][j] with maximum value\n\t            dp[i][j] = Integer.MAX_VALUE;\n\n\t            for (int k = i; k <= j - 1; k++)\n\t            {\n\t                // Store the temporary cost (scalar multiplications) in 'temp' \n\t                int temp = dp[i][k] + dp[k + 1][j]  + arr[i - 1] * arr[k] * arr[j];\n\t                \n\t                // If temporary answer 'temp' is less than actual aswer then update actual ans i.e dp[i][j]\n\t                dp[i][j] = Math.min(dp[i][j], temp);\n\t            }\n\t        }\n\t    }\n\n\t    // Return dp[1][N-1]\n\t    return dp[1][N - 1];\n\t}\n\n}\n\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}