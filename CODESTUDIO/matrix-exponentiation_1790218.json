{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13745,
            "title": "Matrix Exponentiation",
            "titleSlug": "matrix-exponentiation_1790218",
            "content": "<h4 id=\"ninja-is-playing-a-game-he-is-standing-on-index-1-in-a-linear-array-of-size-n-then-he-rolls-a-dice-and-moves-forward-according-to-the-number-on-the-top-of-the-dice-he-repeats-this-operation-until-he-reached-index-n-he-asked-you-to-find-the-expected-number-of-moves-required-to-reach-position-n-starting-from-1\">Ninja is playing a game, he is standing on index 1 in a linear array of size \u2018N\u2019, then he rolls a dice and moves forward according to the number on the top of the dice. He repeats this operation until he reached index \u2018N\u2019. He asked you to find the expected number of moves required to reach position \u2018N\u2019 starting from \u20181\u2019.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. The expected number of moves can be fractional.\n\n2. Ninja cannot go outside the array i.e if he is at (n - 1)-th position he can only move if he gets 1 as an outcome in dice.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run.\n\nThe first line of each test case contains one integer, \u2018N\u2019, denoting the size of the board.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return a double value. If the returned value is correct with an error margin of 0.001 to -0.001. then the output will be 1 else 0.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to input or print anything, as it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10^9\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\n8\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\n\nHere the answer is equal to the expected number of dice rolls to get the first 1 as an outcome because we cannot go outside the array. And the expected number of dice rolls to get the first &#39;1&#39; is 6. i.e. On average, we need to roll a dice 6 times to get at position 2.\n\nTest case 2.\nIf we are 7 steps away, then we can get from 1 by getting &#39;6&#39; with probability (1 / 6) and expected dice roll equal to 6, similarly, from 2 we can get 5, from 3 by 4, and so on. with all same probability i.e. 1 / 6 and expected no. of dice roll 6. Now the average value will be 1 + ( (6 * 6) / 6 = 7.\nHence, for 7 steps away, our answer is 7.    \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>Test case 1:\nAs the Input is less than 7, the expected number of operations will be 6.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja is playing a game on a linear array of size N. Starting at index 1, Ninja rolls a dice and moves forward based on the dice roll. The goal is to reach index N. Determine the expected number of moves required to reach position N from position 1.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10^9",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "2\n2\n8",
                        "output": "1\n1",
                        "explanation": "Test case 1: When N = 2, the expected number of moves is 6, as the player needs to roll a '1' to reach the end. However, in the system this is treated as 1\nTest case 2: When N = 8, the expected number of moves is 7. From position 1, the average number of moves is equal to 1 + ( (6 * 6) / 6) = 7"
                    },
                    {
                        "input": "1\n3",
                        "output": "1",
                        "explanation": "Test case 1: When N = 3, the expected number of moves is 6, but is treated as 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Matrix Exponentiaiton.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}