{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8420,
            "title": "Matrix Median",
            "titleSlug": "matrix-median_873378",
            "content": "<h4 id=\"you-have-been-given-a-matrix-of-n-rows-and-m-columns-filled-up-with-integers-where-every-row-is-sorted-in-non-decreasing-order-your-task-is-to-find-the-overall-median-of-the-matrix-i-e-if-all-elements-of-the-matrix-are-written-in-a-single-line-then-you-need-to-return-the-median-of-that-linear-array\">You have been given a matrix of \u2018N\u2019 rows and \u2018M\u2019 columns filled up with integers where every row is sorted in non-decreasing order. Your task is to find the overall median of the matrix i.e if all elements of the matrix are written in a single line, then you need to return the median of that linear array.</h4>\n\n<h4 id=\"the-median-of-a-finite-list-of-numbers-is-the-middle-number-when-those-numbers-are-listed-in-order-from-smallest-to-greatest-if-there-is-an-odd-number-of-observations-the-middle-one-is-picked-for-example-consider-the-list-of-numbers-1-3-3-6-7-8-9-this-list-contains-seven-numbers-the-median-is-the-fourth-of-them-which-is-6\">The median of a finite list of numbers is the &quot;middle&quot; number when those numbers are listed in order from smallest to greatest. If there is an odd number of observations, the middle one is picked. For example, consider the list of numbers [1, 3, 3, 6, 7, 8, 9]. This list contains seven numbers. The median is the fourth of them, which is 6.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain two integers \u2018N\u2019 and \u2018M\u2019 denoting the number of rows and columns, respectively.\n\nNext \u2018N\u2019 lines contain \u2018M\u2019 space-separated integers each denoting the elements in the matrix.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an integer which is the overall median of the given matrix.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 50\n1 &lt;= &#39;N&#39; , &#39;M&#39; &lt;= 100\n1 &lt;= &#39;MATRIX&#39;[&#39;I&#39;][&#39;J&#39;] &lt;= 10 ^ 5\n&#39;N&#39; * &#39;M&#39; is always an odd number.\n\nWhere &#39;MATRIX&#39;[&#39;I&#39;][&#39;J&#39;]  denotes the value at (&#39;I&#39;, &#39;J&#39;)th cell in the matrix.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 3\n1 2 3\n3 3\n2 6 9\n1 5 11\n3 7 8\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n6\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>In the first test case, the overall median of the matrix is 2.\n\nIn the second test case, the overall median of the matrix is 6.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 3\n2 6 8\n1 4 7\n6 8 9\n3 5\n1 2 6 6 10\n2 4 4 5 7\n2 5 5 6 6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2\n5\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>In the first test case, the overall median of the matrix is 2.\n\nIn the second test case, the overall median of the matrix is 5.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 87,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix of 'N' rows and 'M' columns filled with integers, where each row is sorted in non-decreasing order, find the overall median of the matrix. The overall median is the median of all elements in the matrix when considered as a single sorted array. The median of a sorted list is the middle element when the number of elements is odd.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N, M <= 100",
                    "1 <= MATRIX[I][J] <= 10^5",
                    "N * M is always an odd number.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n1 3\n1 2 3",
                        "output": "2",
                        "explanation": "The matrix is [1, 2, 3]. The sorted array is [1, 2, 3]. The median is 2."
                    },
                    {
                        "input": "1\n3 3\n2 6 9\n1 5 11\n3 7 8",
                        "output": "6",
                        "explanation": "The matrix elements are [2, 6, 9, 1, 5, 11, 3, 7, 8]. The sorted array is [1, 2, 3, 5, 6, 7, 8, 9, 11]. The median is 6."
                    },
                    {
                        "input": "1\n3 3\n2 6 8\n1 4 7\n6 8 9",
                        "output": "6",
                        "explanation": "The matrix elements are [2, 6, 8, 1, 4, 7, 6, 8, 9]. The sorted array is [1, 2, 4, 6, 6, 7, 8, 8, 9]. The median is 6."
                    },
                    {
                        "input": "1\n3 5\n1 2 6 6 10\n2 4 4 5 7\n2 5 5 6 6",
                        "output": "5",
                        "explanation": "The matrix elements, when combined and sorted, form the array [1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 10]. The median is 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of sorting the whole matrix?</p>",
            "<p>Can you utilise the fact that the rows are in sorted order?</p>",
            "<p>Can you think of doing it without using extra space?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N * log(M) * log(MAX - MIN) )\r\n    Space Complexity : O(1)\r\n\r\n    Where \u2018N\u2019 is the number of rows,\r\n    and \u2018M\u2019 is the number of columns in the given matrix,\r\n    and MAX and MIN are the minimum and maximum element of the matrix, respectively.\r\n*/\r\n\r\n// It returns the index of the first element in the range [first, last) which compares grater than val.\r\nint upper_bound(vector<int> const &arr, int first, int last, int val)\r\n{\r\n    // Initialise the \"low\" and \"high\" appropriately.\r\n    int low = first, high = last;\r\n\r\n    while (low < high)\r\n    {\r\n        int mid = (low + high) / 2;\r\n\r\n        if (arr[mid] > val)\r\n        {\r\n            /*\r\n               If the current element is less than val,\r\n               reduce the search space to left half.\r\n            */\r\n            high = mid;\r\n        }\r\n        else\r\n        {\r\n            /*\r\n               If the current element is greater than or equal to val,\r\n               reduce the search space to right half.\r\n            */\r\n            low = mid + 1;\r\n        }\r\n    }\r\n\r\n    return low;\r\n}\r\n\r\nint getMedian(vector<vector<int>> &matrix)\r\n{\r\n\r\n    int n = matrix.size();\r\n    int m = matrix[0].size();\r\n\r\n    // Since, 1 <= matrix[i][j] <= 10^5, set the \"low\" and \"high\" value accordingly.\r\n    int low = 1, high = 100000;\r\n\r\n    // Loop until our search spaces convergers to single element.\r\n    while (low < high)\r\n    {\r\n\r\n        int mid = (low + high) / 2;\r\n\r\n        // To count number of elements less than or equal to \"mid\".\r\n        int count = 0;\r\n\r\n        // Iterate through each row and increment the \"count\".\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            /*\r\n               NOTE:\r\n               upper_bound (ForwardIterator first, ForwardIterator last, const T& val);\r\n               Returns an iterator\r\n               pointing to the first element in the range [first,last)\r\n               which compares greater than val.\r\n            */\r\n            count = count + upper_bound(matrix[i], 0, matrix[i].size(), mid);\r\n        }\r\n\r\n        if (count >= (n * m + 1) / 2)\r\n        {\r\n            // The median will lie in the range of [\u201cmid\u201d, \u201chigh\u201d].\r\n            high = mid;\r\n        }\r\n        else\r\n        {\r\n            // The median will lie in the range of [\"mid\" + 1, \"high\"].\r\n            low = mid + 1;\r\n        }\r\n    }\r\n    return low;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N * log(M) * log(MAX - MIN) )\r\n    Space Complexity : O(1)\r\n\r\n    Where 'N' is the number of rows,\r\n    and 'M' is the number of columns in the given matrix,\r\n    and 'MAX' and 'MIN' are the minimum and maximum element of the matrix, respectively.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution \r\n{\r\n\t// It returns the index of the first element in the range [first, last) which compares grater than val.\r\n\tprivate static int upper_bound(ArrayList<Integer> arr, int first, int last, int val) \r\n\t{\r\n\t\t// Initialise the \"low\" and \"high\" appropriately.\r\n\t\tint low = first, high = last;\r\n\t\t\r\n\t\twhile (low < high) \r\n\t\t{\r\n\t\t\tint mid = (low + high) / 2;\r\n\r\n\t\t\tif (arr.get(mid) > val) \r\n\t\t\t{\r\n\t\t\t\t// If the current element is less than val, reduce the search space to left half.\r\n\t\t\t\thigh = mid;\r\n\t\t\t} \r\n\t\t\telse \r\n\t\t\t{\r\n\t\t\t\t// If the current element is greater than or equal to val, reduce the search space to right half.\r\n\t\t\t\tlow = mid + 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn low;\r\n\t}\r\n\r\n\tpublic static int getMedian(ArrayList<ArrayList<Integer>> matrix) \r\n\t{\r\n\t\tint n = matrix.size();\r\n\t\tint m = matrix.get(0).size();\r\n\r\n\t\t// Since, 1 <= matrix.get(i).get(j) <= 10^5, set the \"low\" and \"high\" value accordingly.\r\n\t\tint low = 1, high = 100000;\r\n\r\n\t\t// Loop until our search spaces convergers to single element.\r\n\t\twhile (low < high) \r\n\t\t{\r\n\r\n\t\t\tint mid = (low + high) / 2;\r\n\r\n\t\t\t// To count number of elements less than or equal to \"mid\".\r\n\t\t\tint count = 0;\r\n\r\n\t\t\t// Iterate through each row and increment the \"count\".\r\n\t\t\tfor (int i = 0; i < n; i++) \r\n\t\t\t{\r\n\t\t\t\t/*\r\n\t\t\t\t    NOTE:\r\n\t\t\t\t    upper_bound (ForwardIterator first, ForwardIterator last, const T& val);\r\n\t\t\t\t    Returns an iterator pointing to the first element in the range [first,last) which compares greater than val.\r\n\t\t\t\t*/\r\n\t\t\t\tcount = count + upper_bound(matrix.get(i), 0, matrix.get(i).size(), mid);\r\n\t\t\t}\r\n\r\n\t\t\tif (count >= (n * m + 1) / 2) \r\n\t\t\t{\r\n\t\t\t\t// The median will lie in the range of [\"mid\", \"high\"].\r\n\t\t\t\thigh = mid;\r\n\t\t\t} \r\n\t\t\telse \r\n\t\t\t{\r\n\t\t\t\t// The median will lie in the range of [\"mid\" + 1, \"high\"].\r\n\t\t\t\tlow = mid + 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn low;\r\n\t}\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity : O(N * log(M) * log(MAX - MIN) )\r\n    Space Complexity : O(1)\r\n\r\n    Where \u2018N\u2019 is the number of rows,\r\n    and \u2018M\u2019 is the number of columns in the given matrix,\r\n    and MAX and MIN are the minimum and maximum element of the matrix, respectively.\r\n'''\r\n\r\nfrom sys import stdin\r\n\r\n# It returns the index of the first element in the range [first, last) which compares grater than val.\r\ndef upper_bound(arr, first, last, val):\r\n\r\n    # Initialise the \"low\" and \"high\" appropriately.\r\n    low = first\r\n    high = last\r\n\r\n    while low < high:\r\n        mid = (low + high) // 2\r\n\r\n        if (arr[mid] > val):\r\n            # If the current element is less than val, reduce the search space to left half.\r\n            high = mid\r\n\r\n        else:\r\n            # If the current element is greater than or equal to val, reduce the search space to right half.\r\n            low = mid + 1\r\n\r\n    return low\r\n\r\ndef getMedian(matrix):\r\n\r\n    n = len(matrix)\r\n    m = len(matrix[0])\r\n\r\n    # Since, 1 <= matrix.get(i).get(j) <= 10^5, set the \"low\" and \"high\" value accordingly.\r\n    low = 1\r\n    high = 100000\r\n\r\n    # Loop until our search spaces convergers to single element.\r\n    while low < high:\r\n\r\n        mid = (low + high) // 2\r\n\r\n        # To count number of elements less than or equal to \"mid\".\r\n        count = 0\r\n\r\n        # Iterate through each row and increment the \"count\".\r\n        for i in range(n):\r\n            \r\n            '''\r\n                NOTE:\r\n                upper_bound (ForwardIterator first, ForwardIterator last, const T& val);\r\n                Returns an iterator pointing to the first element in the range [first,last) which compares greater than val.\r\n            '''\r\n            count = count + upper_bound(matrix[i], 0, len(matrix[i]), mid)\r\n\r\n        if (count >= (n * m + 1) // 2):\r\n            \r\n            # The median will lie in the range of [\"mid\", \"high\"].\r\n            high = mid\r\n        else:\r\n            \r\n            # The median will lie in the range of [\"mid\" + 1, \"high\"].\r\n            low = mid + 1\r\n\r\n    return low\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}