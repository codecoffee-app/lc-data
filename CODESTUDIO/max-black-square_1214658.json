{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10348,
            "title": "Max Black Square",
            "titleSlug": "max-black-square_1214658",
            "content": "<h4 id=\"you-are-given-a-square-matrix-with-n-rows-and-n-columns-in-which-each-cell-pixel-is-either-black-or-white-the-black-pixels-are-represented-as-1-and-the-white-pixels-are-represented-as-0\">You are given a square matrix with N rows and N columns, in which each cell (pixel) is either black or white. The black pixels are represented as \u20181\u2019 and the white pixels are represented as \u20180\u2019.</h4>\n\n<h4 id=\"design-an-algorithm-to-find-the-maximum-length-of-a-sub-square-of-the-matrix-such-that-all-four-borders-are-filled-with-black-pixels\">Design an algorithm to find the maximum length of a sub-square of the matrix such that all four borders are filled with black pixels.</h4>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T&#39; representing the number of test cases.\n\nThe first line of each test case contains one integer \u2018N\u2019 denoting the size of the matrix.\n\nThe next \u2018N\u2019 lines contain \u2018N\u2019 integers separated by spaces describing rows of the matrix. (each element of the matrix is either 0 or 1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, on a separate line, output one integer - the maximum length of a side of a subsquare such that all four borders are filled with black pixels.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^3\nMATRIX[i][j] = 0 or 1\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019  is the size of the given array, and \u2018MATRIX[i][j]\u2019 denotes the j\u2019th element of the i\u2019th row of the matrix &quot;MATRIX&quot;.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\n1 1\n1 1\n5\n1 1 1 0 0\n0 1 1 1 1\n0 1 0 1 1\n0 1 1 1 1\n0 1 1 0 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case, the maximum square submatrix surrounded by all 1\u2019s starts at (0, 0) and ends at (1, 1). And the size of this square matrix is 2.\n\nFor the second test case, the maximum square submatrix surrounded by all 1\u2019s starts at (1, 1) and ends at (3, 3). And the size of this square matrix is 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3\n1 0 1\n0 1 0\n1 0 1\n5\n1 1 1 0 1\n0 0 0 0 0\n1 1 0 0 1 \n1 1 1 0 1 \n0 0 0 0 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a square matrix of size N x N, where each cell represents a pixel ('1' for black, '0' for white), determine the maximum side length of a sub-square within the matrix where all four borders of the sub-square consist entirely of black pixels (represented by '1').",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 10^3 (Size of the matrix)",
                    "MATRIX[i][j] = 0 or 1 (Pixel value)"
                ],
                "testcases": [
                    {
                        "input": "2\n2\n1 1\n1 1\n5\n1 1 1 0 0\n0 1 1 1 1\n0 1 0 1 1\n0 1 1 1 1\n0 1 1 0 1",
                        "output": "2\n3",
                        "explanation": "Test Case 1: The largest black-bordered sub-square is of size 2x2, encompassing the entire matrix.\nTest Case 2: The largest black-bordered sub-square is of size 3x3, starting at (1, 1) and ending at (3, 3)."
                    },
                    {
                        "input": "2\n3\n1 0 1\n0 1 0\n1 0 1\n5\n1 1 1 0 1\n0 0 0 0 0\n1 1 0 0 1\n1 1 1 0 1\n0 0 0 0 0",
                        "output": "1\n2",
                        "explanation": "Test Case 1: The largest black-bordered sub-square is of size 1x1, corresponding to individual '1' cells.\nTest Case 2: The largest black-bordered sub-square is of size 2x2, formed by the top-left corner '1's in rows 1 and 3, and columns 1 and 2. The coordinates would be (0,0), (0,1), (2,0), and (2,1)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try every possible square submatrix.</p>",
            "<p>Can you think of some preprocessing to optimize the brute-force solution?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}