{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8308,
            "title": "Max element in the path",
            "titleSlug": "max-element-in-the-path_842785",
            "content": "<h4 id=\"given-a-binary-search-tree-and-two-integers-node1-and-node2-you-have-to-find-the-maximum-element-in-the-path-from-node1-to-node2\">Given a Binary Search Tree and two integers NODE1 and NODE2. You have to find the maximum element in the path from NODE1 to NODE2.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-also-called-an-ordered-or-sorted-binary-tree-is-a-rooted-binary-tree-whose-internal-nodes-each-store-a-key-greater-than-all-the-keys-in-the-nodes-left-subtree-and-less-than-those-in-its-right-subtree\">A binary search tree (BST), also called an ordered or sorted binary tree, is a rooted binary tree whose internal nodes each store a key greater than all the keys in the node&#39;s left subtree and less than those in its right subtree.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. The path from NODE1 to NODE2 does not include NODE1 and NODE2.\n\n2. NODE1 and NODE2 are unique.\n\n3. If there is no element in the path from NODE1 to NODE2, return -1.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nEach test case follows:\nThe first line of every test case contains elements in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nThe second line contains two space-separated integers denoting NODE1 and NODE2.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/first-5644.png\" alt=\"example\"></p>\n\n<pre><code>20\n10 35 \n5 15 30 42 \n-1 13 -1 -1 -1 -1 -1 \n-1 -1\n\nExplanation:\n\nLevel 1 :\nThe root node of the tree is 20\nLevel 2 :\nLeft child of 20 = 10\nRight child of 20 = 35\nLevel 3 :\nLeft child of 10 = 5\nRight child of 10 = 15\nLeft child of 35 = 30\nRight child of 35 = 42\nLevel 4 :\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 15 = 13\nRight child of 15 = null (-1)\nLeft child of 30 = null (-1)\nRight child of 30 = null (-1)\nLeft child of 42 = null (-1)\nRight child of 42 = null (-1)\nLevel 5 :\nLeft child of 13 = null (-1)\nRight child of 13 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n20 10 35 5 15 30 42 -1 13 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the maximum element in the path from NODE1 to NODE2. If either NODE1 or NODE2 does not exist in the BST, return -1.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You don\u2019t have to print anything; it has already been taken care of. Just complete the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n0 &lt;= DATA &lt;= 10 ^ 9\n1 &lt;= NODE1, NODE2 &lt;= 10 ^ 9 \n\nWhere \u2018T\u2019 is the total number of test cases, &#39;N&#39; denotes the number of nodes in the given BST,  &#39;DATA&#39; denotes the value of each node in the given tree, and NODE1 and NODE2 are 2 integers.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n5 3 7 1 4 6 9 -1 2 -1 -1 -1 -1 -1 -1 -1 -1\n1 9 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>7\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>The BST of the given elements is shown below. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/second-5645.png\" alt=\"example\"></p>\n\n<pre><code>The path from 1 to 9 is shown in the curve. \nAs we can see, the maximum element in the path from 1 to 9 is 7.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2 1 4 -1 -1 3 -1 -1 -1\n3 5\n7 5 8 -1 6 -1 10 -1 -1 9 -1 -1 -1\n6 7\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1 \n5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2:</h5>\n\n<pre><code>Test case 1:\nAs 5 does not exist in the BST, simply return -1.\n\nTest case 2:\nAfter creating the BST for the given level order, we can see that the 5 is the maximum element between 6 and 7.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) and two integers, NODE1 and NODE2, find the maximum element in the path from NODE1 to NODE2. The path should not include NODE1 and NODE2 themselves. Return -1 if either NODE1 or NODE2 is not found in the BST or if there are no nodes in the path between them.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 3000 (Number of nodes in the BST)",
                    "0 <= DATA <= 10^9 (Value of each node in the tree)",
                    "1 <= NODE1, NODE2 <= 10^9 (The two integers)",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 3 7 1 4 6 9 -1 2 -1 -1 -1 -1 -1 -1 -1 -1\n1 9",
                        "output": "7",
                        "explanation": "The path between nodes 1 and 9 is 3 -> 5 -> 7. The maximum element in this path is 7."
                    },
                    {
                        "input": "2 1 4 -1 -1 3 -1 -1 -1\n3 5",
                        "output": "-1",
                        "explanation": "The integer 5 does not exist in the BST. Therefore, the result is -1."
                    },
                    {
                        "input": "7 5 8 -1 6 -1 10 -1 -1 9 -1 -1 -1\n6 7",
                        "output": "5",
                        "explanation": "The path between nodes 6 and 7 is 5. The maximum element is 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try solving using LCA, lowest common ancestor. Can you do this without storing the paths?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}