{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8839,
            "title": "Max Increasing Path",
            "titleSlug": "max-increasing-path_920390",
            "content": "<h4 id=\"you-are-given-a-binary-tree-with-n-number-of-nodes-your-task-is-to-find-the-length-of-the-longest-path-of-nodes-having-values-in-increasing-order-this-path-need-not-start-and-end-at-the-root-and-leaf-node-respectively-that-is-it-can-start-and-end-from-any-node\">You are given a binary tree with \u2018N\u2019 number of nodes. Your task is to find the length of the longest path of nodes having values in increasing order. This path need not start and end at the root and leaf node respectively. That is, it can start and end from any node.</h4>\n\n<h4 id=\"a-binary-tree-is-a-hierarchical-data-structure-in-which-each-node-has-at-most-two-children\">A binary tree is a hierarchical data structure in which each node has at most two children.</h4>\n\n<h4 id=\"note-a-path-should-be-linear-i-e-it-should-start-from-a-node-and-ends-in-a-subtree-of-that-node-only\">Note: A Path should be linear, i.e it should start from a node and ends in a subtree of that node only.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<p><img src=\"https://files.codingninjas.in/1-10924.png\" alt=\"\"></p>\n\n<h4 id=\"for-the-given-tree-the-maximum-consecutive-path-is-10-11-12-whose-length-is-3\">For the given tree, the maximum consecutive path is 10 -&gt; 11 -&gt; 12, whose length is 3.</h4>\n\n<h4 id=\"hence-the-output-will-be-3\">Hence, the output will be 3.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have a left or right child, take -1 in its place.\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/2-10925.png\" alt=\"\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\n\nLevel 1 :\n  The root node of the tree is 1\n\nLevel 2 :\n  Left child of 1 = 2\n  Right child of 1 = 3\n\nLevel 3 :\n  Left child of 2 = 4\n  Right child of 2 = null (-1)\n  Left child of 3 = 5\n  Right child of 3 = 6\n\nLevel 4 :\n  Left child of 4 = null (-1)\n  Right child of 4 = 7\n  Left child of 5 = null (-1)\n  Right child of 5 = null (-1)\n  Left child of 6 = null (-1)\n  Right child of 6 = null (-1)\n\nLevel 5 :\n  Left child of 7 = null (-1)\n  Right child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n\nNote: The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the length of the longest path of nodes having values in increasing order.\n\nThe output of each test case should be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n0 &lt;= nodeVal&lt;= 10^5 \n\nWhere, nodeVal denotes the value associated with the node.\n\nTime Limit : 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n10 9 4 -1 -1 5 8 -1 6 -1 -1 3 -1 -1 -1\n11 7 3 9 4 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<pre><code>Test Case 1:\n\nFor the given level order traversal the tree will be:-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/3-10928.png\" alt=\"\"></p>\n\n<pre><code>For this tree, the maximum consecutive path will be 4 -&gt; 5 -&gt; 6, whose length is 3. Hence the output will be 3.\n</code></pre>\n\n<h4 id=\"test-case-2\">Test Case 2:</h4>\n\n<pre><code>For the given level order traversal the tree will be:-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/4-10929.png\" alt=\"\"></p>\n\n<pre><code>For the given tree the maximum consecutive path will be 7 -&gt; 9, whose length is 2. Hence the output will be 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n10 11 9 13 12 13 8 -1 -1 -1 -1 -1 -1 -1 -1\n5 8 11 9 -1 -1 10 6 -1 15 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>3\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree represented by its root node, determine the length of the longest path where the values of the nodes are strictly increasing. The path does not have to start at the root or end at a leaf node, but it must be linear (i.e., within a single subtree).",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3000",
                    "0 <= nodeVal <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "root = [10, 9, 4, -1, -1, 5, 8, -1, 6, -1, -1, 3, -1, -1, -1]",
                        "output": "3",
                        "explanation": "The tree is:\n\n      10\n     /  \\\n    9    4\n        /  \\\n       5    8\n      /       \\\n     6         3\n\nThe longest increasing path is 4 -> 5 -> 6, with a length of 3."
                    },
                    {
                        "input": "root = [11, 7, 3, 9, 4, -1, -1, -1, -1, -1, -1]",
                        "output": "2",
                        "explanation": "The tree is:\n\n      11\n     /  \\\n    7    3\n   /  \\\n  9    4\n\nThe longest increasing path is 7 -> 9, with a length of 2."
                    },
                    {
                        "input": "root = [10, 11, 9, 13, 12, 13, 8, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "3",
                        "explanation": "The tree is:\n\n        10\n      /    \\\n     11      9\n    /  \\    /  \\\n  13   12  13   8\n\nThe longest increasing path is 10 -> 11 -> 12, with a length of 3."
                    },
                    {
                        "input": "root = [5, 8, 11, 9, -1, -1, 10, 6, -1, 15, -1, -1, -1, -1, -1]",
                        "output": "3",
                        "explanation": "The tree is:\n\n          5\n        /  \\\n       8    11\n      /    /  \\\n     9    10   6\n    /          \\\n   15\n\nThe longest increasing path is 5 -> 8 -> 9, with a length of 3."
                    },
                    {
                        "input": "root = [1, 2, 3, 4, -1, 5, 6, -1, 7, -1, -1, -1, -1, -1, -1]",
                        "output": "3",
                        "explanation": "The tree is:\n\n          1\n        /  \\\n       2    3\n      /    / \\\n     4    5   6\n      \\n       7\n\n The longest increasing path can be either 4 -> 5 -> 6 is incorrect, there is no such path. The other choice is an empty tree or a single node. In this case the longest path is 1 node 7->8 has a length of 1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of recursively finding the path length for the left and right subtree.</p>",
            "<p>Try to optimize the solution by traversing each node only once.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}