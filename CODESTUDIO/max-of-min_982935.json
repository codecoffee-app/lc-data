{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9337,
            "title": "max of min",
            "titleSlug": "max-of-min_982935",
            "content": "<h4 id=\"you-are-given-an-array-of-n-integers-you-need-to-find-the-maximum-of-minimum-for-every-window-size-the-size-of-the-window-should-vary-from-1-to-n-only\">You are given an array of \u2018N\u2019 integers, you need to find the maximum of minimum for every window size. The size of the window should vary from 1 to \u2018N\u2019 only.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>ARR = [1,2,3,4]\nMinimums of window size 1 = min(1), min(2), min(3), min(4) = 1,2,3,4\nMaximum among (1,2,3,4)  is 4\n\nMinimums of window size 2 = min(1,2), min(2,3),   min(3,4) = 1,2,3\nMaximum among (1,2,3) is 3\n\nMinimums of window size 3 = min(1,2,3), min(2,3,4) = 1,2\nMaximum among (1,2) is 2\n\nMinimums of window size 4 = min(1,2,3,4) = 1\nMaximum among them is 1\nThe output array should be [4,3,2,1].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single positive integer \u2018N\u2019 denoting the number of the elements present in the array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output of each test case should contain \u2018N\u2019 space-separated integer such that he ith integer indicates the maximum of minimums of the windows of size \u2018i\u2019.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10 ^ 4 \n-10 ^ 9 &lt;= ARR[i] &lt;= 10 ^ 9\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the size of the array and \u2018ARR[i]\u2019 is the size of the array elements.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\n1 2 3 4\n5\n3 3 4 2 4    \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4 3 2 1\n4 3 3 2 2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>Test case 1:\nAlready explained in the question.\n\nTest case 2:\nMinimums of window size 1 = min(3), min(3), min(4), min(2), min(4) = 3, 3, 4, 2, 4\nMaximum among (3, 3, 4, 2, 4) is 4\n\nMinimums of window size 2 = min(3,3), min(3,4), min(4,2), min(2,4) = 3, 3, 2, 2\nMaximum among (3, 3, 2, 2) is 3\n\nMinimums of window size 3 = min(3,3,4), min(3,4,2), min(4,2,4) = 3, 2, 2\nMaximum among (3, 2, 2) is 3\n\nMinimums of window size 4 = min(3,3,4,2), min(3,4,2,4) = 2, 2\nMaximum among (2, 2) is 2\n\nMinimums of window size 4 = min(3,3,4,2,4) = 2\nMaximum among them is 2\nThe output array should be [4,3,3,2,2].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 \n45 -2 42 5 -11 \n6 \n-2 12 -1 1 20 1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code> 45 5 -2 -2 -11\n 20 1  1 -1 -1 -2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 204,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of 'N' integers, find the maximum of the minimums for every window size. The window size should vary from 1 to 'N'. For each window size 'i' from 1 to 'N', calculate the minimum value within each window of size 'i'. Then, find the maximum of these minimum values for that window size 'i'. Return an array containing these maximum of minimums for each window size.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^4",
                    "-10^9 <= ARR[i] <= 10^9",
                    "Where \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the size of the array and \u2018ARR[i]\u2019 is the size of the array elements.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4\n1 2 3 4",
                        "output": "4 3 2 1",
                        "explanation": "For the input array [1, 2, 3, 4]:\n- Window size 1: Minimums are [1, 2, 3, 4]. Maximum of minimums is 4.\n- Window size 2: Minimums are [1, 2, 3]. Maximum of minimums is 3.\n- Window size 3: Minimums are [1, 2]. Maximum of minimums is 2.\n- Window size 4: Minimums is [1]. Maximum of minimums is 1.\nOutput is [4, 3, 2, 1]."
                    },
                    {
                        "input": "5\n3 3 4 2 4",
                        "output": "4 3 3 2 2",
                        "explanation": "For the input array [3, 3, 4, 2, 4]:\n- Window size 1: Minimums are [3, 3, 4, 2, 4]. Maximum of minimums is 4.\n- Window size 2: Minimums are [3, 3, 2, 2]. Maximum of minimums is 3.\n- Window size 3: Minimums are [3, 2, 2]. Maximum of minimums is 3.\n- Window size 4: Minimums are [2, 2]. Maximum of minimums is 2.\n- Window size 5: Minimum is [2]. Maximum of minimums is 2.\nOutput is [4, 3, 3, 2, 2]."
                    },
                    {
                        "input": "5\n45 -2 42 5 -11",
                        "output": "45 5 -2 -2 -11",
                        "explanation": null
                    },
                    {
                        "input": "6\n-2 12 -1 1 20 1",
                        "output": "20 1 1 -1 -1 -2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find the minimum value for every possible window and choose the maximum among them.</p>",
            "<p>For each element try to find that if this element can be the answer for some window?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n\tSpace complexity: O(N)\r\n\r\n\tWhere 'N' is the number elements present in the given array.\r\n */\r\n\r\n#include <stack>\r\n\r\n// This function will return an array.\r\n// Each ith position contains the index of previous smaller elements in the original array.\r\nvector<int> previousSmaller(vector<int> &arr, int n) \r\n{\r\n    vector<int> prev(n);\r\n    stack<int> s;\r\n\r\n    for (int i = 0; i < n; i++) \r\n    {\r\n        while (!s.empty() && arr[s.top()] >= arr[i]) \r\n        {\r\n            s.pop();\r\n        }\r\n        \r\n        if (s.empty()) \r\n        {\r\n            prev[i] = -1;\r\n        } \r\n        else \r\n        {\r\n            prev[i] = s.top();\r\n        }\r\n\r\n        s.push(i);\r\n    }\r\n    \r\n    return prev;\r\n}\r\n\r\n// This function will return an array.\r\n// Each ith position contains the index of next smaller elements in the original array.\r\nvector<int> nextSmaller(vector<int> &arr, int n) \r\n{\r\n    stack<int> s;\r\n    vector<int> next(n);\r\n\r\n    for (int i = n - 1; i >= 0; i--) \r\n    {\r\n        while (!s.empty() && arr[s.top()] >= arr[i]) \r\n        {\r\n            s.pop();\r\n        }\r\n        \r\n        if (s.empty()) \r\n        {\r\n            next[i] = n;\r\n        } \r\n        else \r\n        {\r\n            next[i] = s.top();\r\n        }\r\n    \r\n        s.push(i);\r\n    }\r\n    \r\n    return next;\r\n}\r\n\r\nvector<int> maxMinWindow(vector<int> &arr, int n) \r\n{\r\n    // Definition: answer[i] will store the maximum of minimum of every window of size 'i'.\r\n    vector<int> answer(n, INT_MIN);\r\n\r\n    // Definition: next[i] will store the index of next smaller element which lie on the right hand side of 'i'.\r\n    vector<int> next = nextSmaller(arr, n);\r\n\r\n    // Definition: prev[i] will store the index of previous smaller element which lie on the left hand side of 'i'.\r\n    vector<int> prev = previousSmaller(arr, n);\r\n\r\n    for (int i = 0; i < n; i++) \r\n    {\r\n        // Length of the window in which a[i] is minimum\r\n        int length = next[i] - prev[i] - 1;\r\n\r\n        // Update the answer[length-1] ( 0 based indexing )  with a[i]\r\n        answer[length - 1] = max(answer[length - 1], arr[i]);\r\n    }\r\n\r\n\t// Some entries in answer[] may not be filled yet.\r\n\t// We fill them by taking maximum element from suffix starting from 'i'.\r\n    for (int i = n - 2; i >= 0; i--) \r\n    {\r\n        answer[i] = max(answer[i], answer[i + 1]);\r\n    }\r\n\r\n    return answer;\r\n}\r\n\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N)\r\n\tSpace complexity: O(N)\r\n\r\n\tWhere 'N' is the number elements present in the given array.\r\n'''\r\n\r\nfrom sys import maxsize\r\n\r\n# This function will return an array.\r\n# Each ith position contains the index of previous smaller elements in the original array.\r\ndef previousSmaller(arr, n):\r\n\r\n    prev = []\r\n    s = []\r\n\r\n    for i in range(n):\r\n\r\n        while (len(s) != 0 and arr[s[-1]] >= arr[i]):\r\n            s.pop()\r\n\r\n        if (len(s) == 0):\r\n            prev.append(-1)\r\n        else:\r\n            prev.append(s[-1])\r\n\r\n        s.append(i)\r\n\r\n    return prev\r\n\r\n# This function will return an array.\r\n# Each ith position contains the index of next smaller elements in the original array.\r\ndef nextSmaller(arr, n):\r\n\r\n    s = []\r\n    next = [0] * n\r\n\r\n    for i in range(n-1, -1, -1):\r\n\r\n        while (len(s) != 0 and arr[s[-1]] >= arr[i]):\r\n            s.pop()\r\n\r\n        if (len(s) == 0):\r\n            next[i] = n\r\n        else:\r\n            next[i] = s[-1]\r\n\r\n        s.append(i)\r\n\r\n    return next\r\n\r\n\r\ndef maxMinWindow(arr, n):\r\n\r\n    INT_MIN = -maxsize - 1\r\n\r\n    answer = [INT_MIN] * n\r\n\r\n    # Definition: next[i] will store the index of next smaller element which lie on the right hand side of 'i'.\r\n    next = nextSmaller(arr, n)\r\n\r\n    # Definition: prev[i] will store the index of previous smaller element which lie on the left hand side of 'i'.\r\n    prev = previousSmaller(arr, n)\r\n\r\n    for i in range(n):\r\n\r\n        # Length of the window in which a[i] is minimum\r\n        length = next[i] - prev[i] - 1\r\n        # Update the answer[length-1] ( 0 based indexing )  with a[i]\r\n        answer[length - 1] = max(answer[length - 1], arr[i])\r\n\r\n    # Some entries in answer[] may not be filled yet.\r\n    # We fill them by taking maximum element from suffix starting from 'i'.\r\n    for i in range(n - 2, -1, -1):\r\n        answer[i] = max(answer[i], answer[i + 1])\r\n\r\n    return answer\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n\tSpace complexity: O(N)\r\n\r\n\tWhere 'N' is the number elements present in the given array.\r\n */\r\n\r\nimport java.util.Stack;\r\n\r\npublic class Solution \r\n{\r\n    public static int[] maxMinWindow(int[] arr, int n) \r\n    {\r\n        // Definition: answer[i] will store the maximum of minimum of every window of size 'i'.\r\n        int[] answer = new int[n];\r\n        \r\n        for (int i = 0; i < n; ++i) \r\n        {\r\n            answer[i] = Integer.MIN_VALUE;\r\n        }\r\n\r\n        // Definition: next[i] will store the index of next smaller element which lie on the right hand side of 'i'.\r\n        int[] next = nextSmaller(arr, n);\r\n\r\n        // Definition: prev[i] will store the index of previous smaller element which lie on the left hand side of 'i'.\r\n        int[] prev = previousSmaller(arr, n);\r\n\r\n        for (int i = 0; i < n; i++) \r\n        {\r\n            // Length of the window in which a[i] is minimum\r\n            int length = next[i] - prev[i] - 1;\r\n            \r\n            // Update the answer[length-1] ( 0 based indexing )  with a[i]\r\n            answer[length - 1] = Math.max(answer[length - 1], arr[i]);\r\n        }\r\n        \r\n       // Some entries in answer[] may not be filled yet.\r\n       // We fill them by taking maximum element from suffix starting from 'i'.\r\n        for (int i = n - 2; i >= 0; i--) \r\n        {\r\n            answer[i] = Math.max(answer[i], answer[i + 1]);\r\n        }\r\n\r\n        return answer;\r\n    }\r\n\r\n\t// This function will return an array.\r\n    // Each ith position contains the index of previous smaller elements in the original array.\r\n    private static int[] previousSmaller(int[] arr, int n) \r\n    {\r\n        int[] prev = new int[n];\r\n        Stack<Integer> s = new Stack<>();\r\n        \r\n        for (int i = 0; i < n; i++) \r\n        {\r\n            while (!s.empty() && arr[s.peek()] >= arr[i]) \r\n            {\r\n                s.pop();\r\n            }\r\n            \r\n            if (s.empty()) \r\n            {\r\n                prev[i] = -1;\r\n            } \r\n            else \r\n            {\r\n                prev[i] = s.peek();\r\n            }\r\n            \r\n            s.push(i);\r\n        }\r\n        \r\n        return prev;\r\n    }\r\n\r\n    // This function will return an array.\r\n    // Each ith position contains the index of next smaller elements in the original array.\r\n    private static int[] nextSmaller(int[] arr, int n) \r\n    {\r\n        Stack<Integer> s = new Stack<>();\r\n        int[] next = new int[n];\r\n    \r\n        for (int i = n - 1; i >= 0; i--) \r\n        {\r\n            while (!s.isEmpty() && arr[s.peek()] >= arr[i]) \r\n            {\r\n                s.pop();\r\n            }\r\n            \r\n            if (s.empty()) \r\n            {\r\n                next[i] = n;\r\n            } \r\n            else \r\n            {\r\n                next[i] = s.peek();\r\n            }\r\n            \r\n            s.push(i);\r\n        }\r\n        \r\n        return next;\r\n    }\r\n\r\n}\r\n\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}