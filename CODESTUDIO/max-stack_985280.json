{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9418,
            "title": "max stack",
            "titleSlug": "max-stack_985280",
            "content": "<h4 id=\"you-have-to-implement-a-special-data-structure-max_stack-it-would-be-a-hybrid-data-structure-of-max-heap-and-stack-basically-it-will-have-all-the-functionality-of-a-stack-in-addition-to-it-the-max-stack-should-also-give-max-element-in-a-stack-in-o-1-you-have-to-implement-the-following-functions\">You have to implement a special data structure \u201cMAX_STACK\u201d it would be a hybrid data structure of max heap and stack. Basically, it will have all the functionality of a stack in addition to it the max stack should also give max element in a stack in O(1). you have to implement the following functions:</h4>\n\n<pre><code>specialPush(value): should push the value in the stack in O(1).\nspecialPop( ) : should pop the last element from the stack in O(1).\nspecialTop( ): should give the element at the top of the stack in O(1).\nspecialMax( ): should give the maximum element from all the elements that are currently present in the stack in O(1).\n</code></pre>\n\n<h4 id=\"in-addition-it-tries-to-construct-it-only-using-the-stack-data-structure\">In addition it tries to construct it only using the stack data structure.</h4>\n\n<pre><code>Four types of queries denote these operations:\n\nType 1 : for specialPush(value) operation.\nType 2 : for specialPop( ) operation.\nType 3 : for specialTop( ) operation.\nType 4 : for specialMax( ) operation.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains a single integer &#39;Q&#39;, denoting the number of queries.\n\nThe next &#39;Q&#39; line contains one operation per line.\n\nEach operation starts with a single positive integer representing the type of operation. \n\nIf it is 1 then the operation is of type 1 and it is followed by a positive integer value.\nIf it is 2, 3, or 4 then it represents the operation of type 2, 3, and 4 respectively.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each operation of type 2, return an integer on a single line - the element popped from the stack, and if there is underflow i.e. there is no element in the stack then return -1.\nFor each operation of type 3, return an integer on a single line - the top element of the stack and if the stack is empty return -1.\nFor each operation of type 4, return an integer on a single line - the maximum element on the stack and if the stack is empty return -1.  \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= Q &lt;= 10^6\n1 &lt;= type &lt;= 4\n1 &lt;= value &lt;= 10^9\n\nTime Limit : 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>10\n1 5\n1 4\n1 6\n1 1\n3\n4\n2\n2\n3\n4\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>1\n6\n4\n5\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>Initialising the new stack : MaxStack Stack = new MaxStack().\nThen each operation is performed as shown below. \nStack.specialPush(5)         // stack = [5]\nStack.specialPush(4)         // stack = [5,4]\nStack.specialPush(6)         // stack = [5,4,6]\nStack.specialPush(1)         // stack = [5,4,6,1]\nStack.specialTop()           // returns 1, stack = [5,4,6,1]\nStack.specialMax()           // returns 6, stack = [5,4,6,1]\nStack.specialPop()           // stack = [5,4,6]\nStack.specialPop()           // stack = [5,4]\nStack.specialTop()           // returns 4, stack = [5,4]\nStack.specialMax()           // returns 5, stack = [5,4]\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>10\n1 8         \n1 7         \n1 13       \n1 10       \n4            \n2            \n4            \n2            \n4\n3\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>13\n13\n8\n7\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h4>\n\n<pre><code>Initialising the new stack : MaxStack Stack = new MaxStack().\nThen each operation is performed as shown below. \nStack.specialPush(8)           // stack = [8]\nStack.specialPush(7)           // stack = [8,7]\nStack.specialPush(13)          // stack = [8,7,13]\nStack.specialPush(10)          // stack = [8,7,13,10]\nStack.specialMax()             // returns 13, stack = [8,7,13,10]\nStack.specialPop()             // stack = [8,7,13]\nStack.specialMax()             // return 13, stack = [8,7,13]\nStack.specialPop()             // stack = [8,7]\nStack.specialMax()             // returns 8, stack = [8,7]\nStack.specialTop()             // returns 7, stack = [8,7]\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 12,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a special data structure called `MaxStack` that combines the functionalities of a stack and a max heap.  It should support the standard stack operations (push, pop, top) in O(1) time, and additionally, provide a method to retrieve the maximum element currently present in the stack, also in O(1) time. Implement the `MaxStack` class using only stack data structures. The class should have the following methods:\n\n*   `specialPush(value)`: Pushes the given `value` onto the stack in O(1) time.\n*   `specialPop()`: Pops and returns the top element from the stack in O(1) time. Returns -1 if the stack is empty.\n*   `specialTop()`: Returns the top element of the stack in O(1) time without removing it. Returns -1 if the stack is empty.\n*   `specialMax()`: Returns the maximum element currently present in the stack in O(1) time. Returns -1 if the stack is empty.",
                "constraints": [
                    "1 <= Q <= 10^6, where Q is the number of queries.",
                    "1 <= type <= 4, where type represents the type of operation.",
                    "1 <= value <= 10^9, where value is the integer to be pushed onto the stack."
                ],
                "testcases": [
                    {
                        "input": "Q = 10, queries = [[1, 5], [1, 4], [1, 6], [1, 1], [3], [4], [2], [2], [3], [4]]",
                        "output": "1\n6\n4\n5",
                        "explanation": "Initialising the new stack : MaxStack Stack = new MaxStack().\nThen each operation is performed as shown below. \nStack.specialPush(5)         // stack = [5]\nStack.specialPush(4)         // stack = [5,4]\nStack.specialPush(6)         // stack = [5,4,6]\nStack.specialPush(1)         // stack = [5,4,6,1]\nStack.specialTop()           // returns 1, stack = [5,4,6,1]\nStack.specialMax()           // returns 6, stack = [5,4,6,1]\nStack.specialPop()           // stack = [5,4,6]\nStack.specialPop()           // stack = [5,4]\nStack.specialTop()           // returns 4, stack = [5,4]\nStack.specialMax()           // returns 5, stack = [5,4]"
                    },
                    {
                        "input": "Q = 10, queries = [[1, 8], [1, 7], [1, 13], [1, 10], [4], [2], [4], [2], [4], [3]]",
                        "output": "13\n13\n8\n7",
                        "explanation": "Initialising the new stack : MaxStack Stack = new MaxStack().\nThen each operation is performed as shown below. \nStack.specialPush(8)           // stack = [8]\nStack.specialPush(7)           // stack = [8,7]\nStack.specialPush(13)          // stack = [8,7,13]\nStack.specialPush(10)          // stack = [8,7,13,10]\nStack.specialMax()             // returns 13, stack = [8,7,13,10]\nStack.specialPop()             // stack = [8,7,13]\nStack.specialMax()             // return 13, stack = [8,7,13]\nStack.specialPop()             // stack = [8,7]\nStack.specialMax()             // returns 8, stack = [8,7]\nStack.specialTop()             // returns 7, stack = [8,7]"
                    },
                    {
                        "input": "Q = 3, queries = [[2], [3], [4]]",
                        "output": "-1\n-1\n-1",
                        "explanation": "The stack is initially empty, so pop, top, and max operations return -1."
                    },
                    {
                        "input": "Q = 5, queries = [[1, 10], [1, 5], [4], [2], [4]]",
                        "output": "10\n10",
                        "explanation": "Pushes 10 and then 5. The max is 10. Popping 5, max remains 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try solving it with just two stacks.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}