{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 21541,
            "title": "Max tasks in the given Budget ",
            "titleSlug": "max-tasks-in-the-given-budget_5239107",
            "content": "<h4 id=\"you-are-given-a-straight-line-starting-at-0-to-10-9-you-start-at-zero-and-there-are-n-tasks-you-can-perform-ith-task-is-located-at-point-task-i-0-in-the-line-and-requires-task-i-1-time-to-be-performed\">You are given a straight line starting at 0 to 10^9. You start at zero, and there are \u2018N\u2019 tasks you can perform. \u2018ith\u2019 task is located at point &#39;Task[i][0]&#39; in the line and requires &#39;Task[i][1]&#39; time to be performed.</h4>\n\n<h4 id=\"to-perform-the-task-you-need-to-reach-the-point-task-i-0-and-spend-task-i-1-time-at-that-location-e-g-5-8-lies-at-five-so-travel-distance-is-five-and-work-effort-is-8\">To perform the task, you need to reach the point &#39;Task[i][0]&#39; and spend &#39;Task[i][1]&#39; time at that location. e.g. (5,8) lies at five, so travel distance is five, and work effort is 8.</h4>\n\n<h4 id=\"it-takes-one-second-to-travel-one-unit-of-the-path\">It takes one second to travel one unit of the path.</h4>\n\n<h4 id=\"now-we-are-given-a-total-of-totaltime-seconds-and-we-need-to-complete-as-many-tasks-as-possible-and-reach-back-to-starting-position\">Now, we are given a total of \u2018totalTime\u2019 seconds, and we need to complete as many tasks as possible and reach back to starting position.</h4>\n\n<h4 id=\"find-the-max-number-of-tasks-that-you-can-finish-in-totaltime\">Find the max number of tasks that you can finish in \u2018totalTime\u2019.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>3 tasks and 16 units of total time.\nTask = [( 2, 8 ) , ( 4, 5) , ( 5, 1)]\n( 2, 8 ) -&gt; task 1 at position 2 in line and takes 8 sec to complete.\n( 4, 5)  -&gt; task 2 at position 4 in line and takes 5 sec to complete.\n( 5, 1) -&gt; task 3 at position 5 in line and takes 1 sec to complete.\nSkipping the first task leaves us enough time to complete the other two tasks. Going to the location of the third task and coming back costs 2x5 =10 sec, and performing tasks at locations 4 and 5 cost us 5+1 = 6 sec. \nTotal time spent will be 10+6=16 sec.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>First-line contains &#39;T,&#39; denoting the number of Test cases.\nFor each Test case:\nThe first line contains two integers, &#39;N&#39; and \u2018totalTime\u2019, where \u2018N\u2019 is the number of tasks and \u2018totalTime\u2019 is the time given.\nNext, the \u2018N\u2019 lines contain two integers, \u2018Task[i][0]\u2019 and \u2018Task[i][1]\u2019, each denoting the distance of the task and the time required to complete the task.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:-</h5>\n\n<pre><code>After operating, you must return the maximum number of tasks you can finish in time \u2018totalTime\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note:-</h5>\n\n<pre><code>You don\u2019t need to print anything. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1&lt;= T &lt;=10\n1&lt;= N &lt;=10^5\n1&lt;= totalTime &lt;=10^9\n1&lt;= Task[i][0] &lt;= 10^9 \n1&lt;= Task[i][1] &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 11\n2 3\n3 5\n1 4\n6 1\n4 20\n1 1\n2 1\n3 1\n4 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For testcase one:\nTask= [ (2,3), (3,5), (1,4), (6,1)]    , totalTime= 11\nIn this case, we can go to position two and complete tasks one and three. This can be done in 2 * 2 + (3 + 4) =  11 sec.\nHence, the answer to this test case will be 11.\nFor test case two:\nTask= [ (1,1), (2,1), (3,1), (4,1)]    , totalTime= 20\nIn this case, we can go to position four and complete tasks one, two, three, and four. This can be done in 2 * 4 + (1+1+1+1) = 12 sec.\nHence, the answer to this test case will be 4.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 40 \n6 5\n5 5\n3 7\n1 10\n10 1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>3\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -8,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a straight line from 0 to 10^9. You start at position 0. There are N tasks. The i-th task is located at 'Task[i][0]' on the line and requires 'Task[i][1]' units of time to complete.  To perform a task, you must travel to its location and spend the required time. It takes one second to travel one unit of distance. Given a total time of 'totalTime' seconds, find the maximum number of tasks you can complete and return to the starting position.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "1 <= totalTime <= 10^9",
                    "1 <= Task[i][0] <= 10^9",
                    "1 <= Task[i][1] <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 11\n2 3\n3 5\n1 4\n6 1",
                        "output": "2",
                        "explanation": "We can choose tasks at positions 1 and 2.  The cost is 2 * 2 + 4 + 3 = 11. This allows us to complete two tasks."
                    },
                    {
                        "input": "4 20\n1 1\n2 1\n3 1\n4 1",
                        "output": "4",
                        "explanation": "We can perform all four tasks. The travel cost is 2 * 4 = 8, and the task completion cost is 1 + 1 + 1 + 1 = 4. The total cost is 8 + 4 = 12, which is less than 20."
                    },
                    {
                        "input": "3 40\n6 5\n5 5\n3 7",
                        "output": "3",
                        "explanation": "With total time 40, we can complete all the task 2*3+5+7+5 = 6+17 = 23. We can do all three"
                    },
                    {
                        "input": "1 10\n10 1",
                        "output": "0",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For any distance \u2018Task[i][0]\u2019 try to complete tasks till Task[i][0], which takes less time first.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}