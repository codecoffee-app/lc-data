{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11543,
            "title": "Max Xor Queries.",
            "titleSlug": "max-xor-queries_1382020",
            "content": "<h4 id=\"you-are-given-an-array-list-arr-consisting-of-n-non-negative-integers-you-are-also-given-a-list-queries-consisting-of-m-queries-where-the-i-th-query-is-a-list-array-of-two-non-negative-integers-xi-ai-i-e-queries-i-xi-ai\">You are given an array/list \u2018ARR\u2019 consisting of \u2018N\u2019 non-negative integers.  You are also given a list \u2018QUERIES\u2019 consisting of \u2018M\u2019 queries, where the \u2018i-th\u2019 query is a list/array of two non-negative integers \u2018Xi\u2019, \u2018Ai\u2019, i.e \u2018QUERIES[i]\u2019 = [\u2018Xi\u2019, \u2018Ai\u2019].</h4>\n\n<h4 id=\"the-answer-to-the-ith-query-i-e-queries-i-is-the-maximum-bitwise-xor-value-of-xi-with-any-integer-less-than-or-equal-to-ai-in-arr\">The answer to the ith query, i.e \u2018QUERIES[i]\u2019 is the maximum bitwise xor value of \u2018Xi\u2019 with any integer less than or equal to \u2018Ai\u2019  in \u2018ARR\u2019.</h4>\n\n<h4 id=\"you-should-return-an-array-list-consisting-of-n-integers-where-the-i-th-integer-is-the-answer-of-queries-i\">You should return an array/list consisting of \u2018N\u2019 integers where the \u2018i-th\u2019 integer is the answer of \u2018QUERIES[i]\u2019.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. If all integers are greater than \u2018Ai\u2019 in array/list \u2018ARR\u2019  then the answer to this ith query will be -1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain two space-separated integers \u2018N\u2019 and \u2018M\u2019 representing the size of array/list \u2018ARR\u2019 and number of queries respectively.\n\nThe second line of each test case will contain \u2018N\u2019 space-separated integers representing array/list \u2018ARR\u2019.\n\nThe next \u2018M\u2019 line of each test case contains the description of \u2018QUERIES\u2019. The \u2018i-th\u2019 line of these \u2018M\u2019 lines consists of two space-separated integers \u2018Xi\u2019, \u2018Ai\u2019 as described in the problem statement.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print \u2018M\u2019 space-separated integer where the \u2018i-th\u2019 integer is the answer of the \u2018i-th\u2019 query.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N, M &lt;= 10000\n0 &lt;= ARR[i], Xi, Ai &lt;= 10^9\n\nWhere \u2018T\u2019 is the number of test cases, &#39;N&#39; is the size of \u2018ARR\u2019, \u2018M\u2019  is the number of queries, \u2018ARR[i]\u2019 is an element of array/list \u2018ARR\u2019 and \u2018Xi\u2019, \u2018Ai\u2019 are the integers in \u2018QUERIES[i]\u2019.  \n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5 2\n0 1 2 3 4\n1 3\n5 6\n1 1\n1\n1 0  \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3 7\n-1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>In the first test case, the answer of query [1, 3] is 3 because 1^2 = 3 and 2 &lt;= 3,  and the answer of query [5, 6] is 7 because  5 ^ 2 = 7 and 2 &lt;= 6.\n\nIn the second test case, no element is less than or equal to 0 in the given array \u2018ARR\u2019.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n6 3\n6 6 3 5 2 4\n6 3\n8 1\n12 4 \n5 2\n0 0 0 0 0\n1 0\n1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5 -1 15\n1 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 91,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an array of non-negative integers, `ARR`, of size `N`. You are also given a list of `M` queries, `QUERIES`, where each query consists of two non-negative integers `Xi` and `Ai`. For each query, find the maximum bitwise XOR value of `Xi` with any integer in `ARR` that is less than or equal to `Ai`. Return a list of `M` integers, where the `i`-th integer is the answer to the `i`-th query. If no integer in `ARR` is less than or equal to `Ai`, the answer to the query is -1.",
                "constraints": [
                    "1 <= T <= 50 (Number of test cases)",
                    "1 <= N, M <= 10000 (Size of array ARR and number of queries)",
                    "0 <= ARR[i], Xi, Ai <= 10^9 (Elements of ARR and query integers)",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 2\n0 1 2 3 4\n1 3\n5 6\n1 1\n1\n1 0",
                        "output": "3 7\n-1",
                        "explanation": "Test Case 1:\n\nFor the first query [1, 3], the maximum XOR value is obtained with 2 (1 ^ 2 = 3), where 2 is in ARR and is less than or equal to 3.\nFor the second query [5, 6], the maximum XOR value is obtained with 2 (5 ^ 2 = 7), where 2 is in ARR and is less than or equal to 6.\n\nTest Case 2:\nFor the query [1, 0], there are no elements in ARR that are less than or equal to 0. Therefore, the answer is -1."
                    },
                    {
                        "input": "6 3\n6 6 3 5 2 4\n6 3\n8 1\n12 4\n5 2\n0 0 0 0 0\n1 0\n1 1",
                        "output": "5 -1 15\n1 1",
                        "explanation": "Test Case 1:\nFor the first query [6, 3], the elements in ARR that are <= 3 are [3, 2].  6 ^ 2 = 4 and 6 ^ 3 = 5. So the answer is 5.\nFor the second query [8, 1], the elements in ARR that are <= 1 are []. Therefore, the answer is -1.\nFor the third query [12, 4], the elements in ARR that are <= 4 are [3, 2, 4]. 12 ^ 2 = 14, 12 ^ 3 = 15, 12 ^ 4 = 8. The maximum is 15.\n\nTest Case 2:\nFor the query [1, 0], the elements in ARR that are <= 0 are [0, 0, 0, 0, 0]. 1 ^ 0 = 1.\nFor the query [1, 1], the elements in ARR that are <= 1 are [0, 0, 0, 0, 0]. 1 ^ 0 = 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For each query try out all integers in the given array.</p>",
            "<p>Can you think about a solution using Binary Search?</p>",
            "<p>Can you think of building a trie consisting of the binary representation of integers in \u2018ARR\u2019?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tries",
                "slug": "tries"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity : O(N*(log(N)) + M*(log(M)))\n    Space Complexity : O(N + M)\n\n    Where 'N' is the size of \u2018ARR\u2019, and \u2018M\u2019  is the number of queries.\n*/\n\n#include <algorithm>\n\nstruct TrieNode {\n    TrieNode *children[2];\n};\n\nvoid insert(TrieNode *root, int num) {\n    TrieNode *ptr = root;\n\n    for(int i = 30; i >= 0; i--) {\n        if(num & (1 << i)) {\n            if(ptr->children[1] == NULL) {\n                ptr->children[1] = new TrieNode();\n            }\n            ptr = ptr->children[1];\n        }\n        else {\n            if(ptr->children[0] == NULL) {\n                ptr->children[0] = new TrieNode();\n            }\n            ptr = ptr->children[0];\n        }\n    }\n}\n\nvector<int> maxXorQueries(vector<int>& arr, vector<vector<int>>& queries)\n{\n\n    //  Size of array and number of queries.\n    int n = arr.size();\n    int m = queries.size();\n\n    vector<int> result(m, -1), order(m);\n\n    //  Sort \u2018arr\u2019 in non-decreasing order.\n    sort(arr.begin(), arr.end());\n\n    for(int i = 0; i < m; i++)\n    {\n        order[i] = i;\n    }\n\n    //  Order in which queries will be processed.\n    sort(order.begin(), order.end(), [&](int i, int j) -> bool {\n        return queries[i][1] < queries[j][1];\n    });\n\n    TrieNode *root = new TrieNode();\n    int p = 0;\n\n    //  Finding answer of each query.\n    for(int i = 0; i < m; i++)\n    {\n\n        //  Index of query process in current iteration.\n        int id = order[i];\n\n        //  Insert integers of 'arr' smaller or equal to queries[id][1] in trie.\n        while(p < n && arr[p] <= queries[id][1])\n        {\n            insert(root, arr[p]);\n            p++;\n        }\n\n        //  If trie is empty then answer to this query is -1.\n        if(root->children[0] == NULL && root->children[1] == NULL)\n        {\n            continue;\n        }\n\n        TrieNode *ptr = root;\n        int ans = 0;\n\n        for(int j = 30; j >= 0; j--)\n        {\n\n            // If jth bit is set in query[id][0].\n            if(queries[id][0] & (1 << j))\n            {\n                if(ptr->children[0] != NULL)\n                {\n                    ptr = ptr->children[0];\n                    ans = ans | (1 << j);\n                }\n                else\n                {\n                    ptr = ptr->children[1];\n                }\n\n            }\n            else\n            {\n\n                // If jth bit is not set in query[id][0].\n                if(ptr->children[1] != NULL) {\n                    ptr = ptr->children[1];\n                    ans = ans | (1 << j);\n                } else {\n                    ptr = ptr -> children[0];\n                }\n            }\n        }\n\n        result[id] = ans;\n\n    }\n\n    return result;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\n    Time Complexity : O(N*(log(N)) + M*(log(M)))\n    Space Complexity : O(N + M)\n\n    Where 'N' is the size of \u00e2\u20ac\u02dcARR\u00e2\u20ac\u2122, and \u00e2\u20ac\u02dcM\u00e2\u20ac\u2122  is the number of queries.\n\"\"\"\n\n\nclass TrieNode:\n    def __init__(self):\n        self.children = [None, None]\n\n\ndef insert(root, num):\n    ptr = root\n\n    for i in range(30, -1, -1):\n        if num & (1 << i):\n            if ptr.children[1] == None:\n                ptr.children[1] = TrieNode()\n            ptr = ptr.children[1]\n        else:\n            if ptr.children[0] == None:\n                ptr.children[0] = TrieNode()\n            ptr = ptr.children[0]\n\n\ndef maxXorQueries(arr, queries):\n    \n    #  Size of array and number of queries.\n    n = len(arr)\n    m = len(queries)\n\n    result = [-1]*m\n    order = [0]*m\n\n    #  Sort \u00e2\u20ac\u02dcarr\u00e2\u20ac\u2122 in non-decreasing order.\n    arr.sort()\n\n    for i in range(0, m):\n        order[i] = i\n\n    #  Order in which queries will be processed.\n    order.sort(key=lambda x: queries[x][1])\n\n    root = TrieNode()\n    p = 0\n\n    #  Finding answer of each query.\n    for i in range(0, m):\n\n        #  Index of query process in current iteration.\n        id = order[i]\n\n        #  Insert integers of 'arr' smaller or equal to queries[id][1] in trie.\n        while p < n and arr[p] <= queries[id][1]:\n            insert(root, arr[p])\n            p = p + 1\n\n        #  If trie is empty then answer to this query is -1.\n        if root.children[0] == None and root.children[1] == None:\n            continue\n\n        ptr = root\n        ans = 0\n\n        for j in range(30, -1, -1):\n\n            # If jth bit is set in query[id][0].\n            if queries[id][0] & (1 << j):\n                if ptr.children[0] != None:\n                    ptr = ptr.children[0]\n                    ans = ans | (1 << j)\n                else:\n                    ptr = ptr.children[1]\n\n            else:\n\n                # If jth bit is not set in query[id][0].\n                if ptr.children[1] != None:\n                    ptr = ptr.children[1]\n                    ans = ans | (1 << j)\n                else:\n                    ptr = ptr.children[0]\n        result[id] = ans\n\n    return result",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(N)\n\n    Where 'N' is the size of array ARR.\n*/\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Solution \n{\n\tstatic class TrieNode\n\t{\n\t\tTrieNode[] children = new TrieNode[2];\n\t\tTrieNode()\n\t\t{\n            for (int i = 0; i < 2; i++)\n                children[i] = null;\n        }\n\t};\n\n\tstatic TrieNode root;\n\n\tstatic void insert(int num)\n\t{\n\t\tTrieNode ptr = root;\n\t\t\t\n\t\tfor(int i = 30; i >= 0; i--)\n\t\t{\n\t\t\tif((num & (1 << i)) > 0)\n\t\t\t{\n\t\t\t\tif(ptr.children[1] == null)\n\t\t\t\t{\n\t\t\t\t\tptr.children[1] = new TrieNode();\n\t\t\t\t}\n\t\t\t\tptr = ptr.children[1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(ptr.children[0] == null)\n\t\t\t\t{\n\t\t\t\t\tptr.children[0] = new TrieNode();\n\t\t\t\t}\n\t\t\t\tptr = ptr.children[0];\n\t\t\t}\n\t\t}\n\t}\n\n    public static ArrayList<Integer> maxXorQueries(ArrayList<Integer> arr,ArrayList<ArrayList<Integer>> queries)\n    {\n\n\t\t//  Size of array and number of queries.\n\t\tint n = arr.size();\n\t\tint m = queries.size();\n\t\t\n\t\tArrayList<Integer> result = new ArrayList<Integer>(m);\n\t\tArrayList<Integer> order = new ArrayList<Integer>(m);\n\t\tArrayList<ArrayList<Integer>> temp = new ArrayList<ArrayList<Integer>>(m);\n\t\tfor(int i = 0; i < m; i++)\n\t\t{\n\t\t\tresult.add(-1);\n\t\t\torder.add(i);\n\t\t}\n\t\tfor(int i = 0; i < m; i++)\n\t\t{\n\t\t\tArrayList<Integer> local = new ArrayList<Integer>();\n\t\t\tlocal.add(queries.get(i).get(1));\n\t\t\tlocal.add(order.get(i));\n\t\t\ttemp.add(local);\n\t\t}\n\t\t\n\t\t//  Sort arr in non-decreasing order.\n\t\tCollections.sort(arr);\n\t\n\t\t//  Order in which queries will be processed.\n\t\tCollections.sort(temp,new java.util.Comparator<ArrayList<Integer>>(){\n            public int compare(ArrayList<Integer> a,ArrayList<Integer> b)\n            {\n                return Integer.compare(a.get(0) , b.get(0));\n            }\n        });\n\n\t\tfor(int i = 0; i < m; i++)\n\t\t{\n\t\t\torder.set(i,temp.get(i).get(1));\n\t\t}\n\n\t\troot = new TrieNode();\n\t\tint p = 0;\n\t\n\t\t// Finding answer of each query.\n\t\tfor(int i = 0; i < m; i++)\n\t\t{\n\n\t\t\t// Index of query process in current iteration.\n\t\t\tint id = order.get(i);\n\t\n\t\t\t// Insert integers of 'arr' smaller or equal to queries[id][1] in trie.\n\t\t\twhile(p < n && arr.get(p) <= queries.get(id).get(1))\n\t\t\t{\n\t\t\t\tinsert(arr.get(p));\n\t\t\t\tp++;\n\t\t\t}\n\t\n\t\t\t// If trie is empty then answer to this query is -1.\n\t\t\tif(root.children[0] == null && root.children[1] == null)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\tTrieNode ptr = root;\n\t\t\tint ans = 0;\n\t\n\t\t\tfor(int j = 30; j >= 0; j--) \n\t\t\t{\n\n\t\t\t\t// If jth bit is set in query[id][0].\n\t\t\t\tif((queries.get(id).get(0) & (1 << j)) > 0)\n\t\t\t\t{\n\t\t\t\t\tif(ptr.children[0] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tptr = ptr.children[0];\n\t\t\t\t\t\tans = ans | (1 << j);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tptr = ptr.children[1];\n\t\t\t\t\t}\n\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\n\t\t\t\t\t// If jth bit is not set in query[id][0].\n\t\t\t\t\tif(ptr.children[1] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tptr = ptr.children[1];\n\t\t\t\t\t\tans = ans | (1 << j);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tptr = ptr.children[0];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\tresult.set(id, ans);\n\t\t}\n\t\treturn result;\n    }\n\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}