{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12647,
            "title": "Max_SubArray_Sum",
            "titleSlug": "max_subarray_sum_1469227",
            "content": "<h4 id=\"given-an-array-of-n-integers-and-q-queries-the-query-is-defined-as-below\">Given an array of \u2018N\u2019 integers and \u2018Q\u2019 queries. The query is defined as below :-</h4>\n\n<h4 id=\"given-2-integers-l-and-r-l-0-and-r-n-find-the-maximum-subarray-sum-between-l-to-r-inclusive\">Given 2 integers \u2018l\u2019 and \u2018r\u2019 (\u2018l\u2019 &gt;= 0 and \u2018r\u2019 &lt; N) find the maximum subarray sum between \u2018l\u2019 to \u2018r\u2019 (Inclusive).</h4>\n\n<h4 id=\"query-l-r-max-arr-i-arr-i-1-arr-j-i-l-and-j-r\">Query( \u2018l\u2019 ,\u2019r\u2019) = max(arr[i] + arr[i+1] +...arr[j].( i &gt;= \u2018l\u2019 and j &lt;= \u2018r\u2019)</h4>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line contains \u2018T,\u2019 denoting the number of test cases.\n\nThe first line of the test case contains a single integer \u2018N\u2019  denoting the size of the \u2018arr\u2019 array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the array \u2018arr\u2019.\n\nThe third line of each test case contains an integer \u2018Q\u2019 denoting the number of queries.\n\nThe next \u2018Q&#39;  lines of each test case contain 2 space-separated integers denoting the following:\n\nThe first integer denotes \u2018l\u2019 and the second integer denotes \u2018r\u2019  which are the range for which we need to calculate max(arr[i] + arr[i+1] +...arr[j].( i &gt;= \u2018l\u2019 and j &lt;= \u2018r\u2019).\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each query print an integer denoting the maximum possible value.in the range of \u2018l\u2019 and \u2018r\u2019.\n\nThe output for each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You need not to print anything. It has been already taken care of. Just implement the function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code> 1 &lt;= T &lt;= 5\n 1 &lt;= N &lt;= 10^5\n 1 &lt;= Q &lt;= 10^5\n -10^9 &lt;= arr[i] &lt;= 10^9\n\nWhere \u2018arr[i]\u2019 is the value of the element at index \u2018i\u2019.\n\nTime Limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>1\n5\n1 2 3 4 -5\n3\n0 2\n1 3\n0 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>6\n9\n10\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for sample output 1 :</h5>\n\n<pre><code>The first line has a single integer which means it\u2019s a single test case.\nThe next line has an integer 5 denoting that there are 5 integers in the array.\nThen the 5 space-separated integers in the third line represent the elements in the array.\nThen the fourth line has \u2018Q\u2019 which is the number of queries. In this case, we have 3 queries.\n\nThe 3 queries are as follow:-\nIn first query \u2018l\u2019 = 0 and \u2018r\u2019 = 2\nThus maximum possible value is arr[0] + arr[1] + arr[2] = 1 + 2 + 3 = 6\n\nIn second query \u2018l\u2019 = 1 and \u2018r\u2019 = 3\nThus maximum possible value is arr[1] + arr[2] + arr[3] =  2 + 3 +4 = 9\n\n In third query \u2018l\u2019 = 0 and \u2018r\u2019 = 4\nThus maximum possible value is arr[0] + arr[1] + arr[2] + arr[3] = 1+  2 + 3 +4 = 10\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3\n-10 -19 -13 \n3\n0 2\n1 2\n1 1\n5\n6 4 0 -17 -19 \n1\n0 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>-10\n-13\n-19\n 10\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of N integers and Q queries, where each query consists of two integers L and R (0 <= L and R < N). For each query, find the maximum subarray sum within the range [L, R] (inclusive). The maximum subarray sum is defined as the maximum value of the sum of elements from index i to index j, where L <= i and j <= R.",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= N <= 10^5 (Size of the array)",
                    "1 <= Q <= 10^5 (Number of queries)",
                    "-10^9 <= arr[i] <= 10^9 (Value of each element in the array)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n5\n1 2 3 4 -5\n3\n0 2\n1 3\n0 4",
                        "output": "6\n9\n10",
                        "explanation": "Test case 1 has a single test case with an array of size 5: [1, 2, 3, 4, -5]. There are 3 queries:\n- Query 1 (0, 2): The maximum subarray sum in the range [0, 2] is 1 + 2 + 3 = 6.\n- Query 2 (1, 3): The maximum subarray sum in the range [1, 3] is 2 + 3 + 4 = 9.\n- Query 3 (0, 4): The maximum subarray sum in the range [0, 4] is 1 + 2 + 3 + 4 = 10."
                    },
                    {
                        "input": "2\n3\n-10 -19 -13 \n3\n0 2\n1 2\n1 1\n5\n6 4 0 -17 -19 \n1\n0 2",
                        "output": "-10\n-13\n-19\n10",
                        "explanation": "Test case 2 has two test cases:\n- Test case 1: Array = [-10, -19, -13], Queries:\n  - (0, 2): Max subarray sum = -10\n  - (1, 2): Max subarray sum = -13\n  - (1, 1): Max subarray sum = -19\n- Test case 2: Array = [6, 4, 0, -17, -19], Queries:\n  - (0, 2): Max subarray sum = 6 + 4 = 10"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the Kadane algorithm.</p>",
            "<p>Use the segment tree.</p>"
        ],
        "relatedTopics": [],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}