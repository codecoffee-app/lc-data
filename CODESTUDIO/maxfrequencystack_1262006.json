{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10627,
            "title": "MaxFrequencyStack",
            "titleSlug": "maxfrequencystack_1262006",
            "content": "<h4 id=\"implement-the-given-class-frequencystack-consisting-of-three-functions\">Implement the given class FrequencyStack consisting of three functions :</h4>\n\n<pre><code>FrequencyStack() : Creates a new FrequencyStack.\n\nvoid push(int element) : Pushes the element onto the top of the stack.\n\nint pop() : Returns and remove the most frequent element in the stack. If there are multiple elements with the same maximum frequency then return the integer which is closest to the stack top.\n</code></pre>\n\n<h4 id=\"you-will-be-given-q-queries-consisting-of-push-and-pop-operation-in-each-query-input-is-of-following-type\">You will be given \u2018q\u2019 queries consisting of push and pop operation. In each query input is of following type :</h4>\n\n<pre><code>0 : It means we have to pop the element with maximum frequency and return this element.\n\n1 \u2018element\u2019 : It means we have to push \u2018element\u2019 onto the top of the stack. \n\nNote: If a pop operation is used in an empty stack nothing happens to the stack, but you have to return  -1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains \u2018q\u2019 denoting the number of queries.\n\nIn the next &#39;q&#39; lines input is either of the types :\n0 : It means you have to pop the element with maximum frequency and return this element.\n1 \u2018element\u2019 : It means we have to push \u2018element\u2019 onto the top of the stack. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>If the stack is non-empty return the removed element.\nIf a stack is empty return  -1.\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n0 &lt;= q , element &lt;= 5000\n0 &lt;= id &lt;= 1\n\nwhere &#39;id&#39; denotes the type of query which is either 0 or 1.\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n7\n0\n1 3\n1 3\n1 2\n1 2\n0\n0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>-1\n 2\n 3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the First test case :\n\nInitially, stack is empty : {}\n\nFor the first query : pop operation :\nSince the stack is empty return -1.\n\nFor the second query: push operation:\nThe stack is now : {3}\n\nFor the third query: push operation:\nThe stack is now : {3,3}\n\nFor the fourth query : push operation :\nStack is now : {2,3,3}\n\nFor the fifth query : push operation :\nThe stack is now : {2,2,3,3}\n\nFor the sixth query : pop operation :\nBoth 2 and 3 have the same frequency but 2 is \nnearer to the top. Hence 2 is popped\nStack is now : {2,3,3}\n\nFor the seventh query : pop operation :\n3 has a maximum frequency. Hence 3 is popped.\nThe stack is now : {2,3}\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n3\n1 1\n0\n0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a `FrequencyStack` class with the following methods:\n\n*   `FrequencyStack()`: Initializes an empty FrequencyStack.\n*   `void push(int element)`: Pushes the given element onto the top of the stack.\n*   `int pop()`: Removes and returns the most frequent element in the stack. If multiple elements have the same highest frequency, return the element closest to the top of the stack.\n\nYou will receive 'q' queries. Each query is one of the following types:\n\n*   `0`: Pop an element from the stack and return it.\n*   `1 element`: Push the given 'element' onto the stack.\n\nIf a pop operation is attempted on an empty stack, return -1.",
                "constraints": [
                    "1 <= T <= 50",
                    "0 <= q <= 5000",
                    "0 <= element <= 5000",
                    "0 <= id <= 1 (where 'id' denotes the query type, 0 or 1)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "7\n0\n1 3\n1 3\n1 2\n1 2\n0\n0",
                        "output": "-1\n2\n3",
                        "explanation": "Initially, the stack is empty: {}\nQuery 1 (0): Pop operation on an empty stack, return -1.\nQuery 2 (1 3): Push 3 onto the stack: {3}\nQuery 3 (1 3): Push 3 onto the stack: {3, 3}\nQuery 4 (1 2): Push 2 onto the stack: {2, 3, 3}\nQuery 5 (1 2): Push 2 onto the stack: {2, 2, 3, 3}\nQuery 6 (0): Pop operation. Both 2 and 3 have frequency 2. 2 is closer to the top, so pop 2. Stack: {2, 3, 3}\nQuery 7 (0): Pop operation. 3 has the highest frequency, so pop 3. Stack: {2, 3}"
                    },
                    {
                        "input": "3\n1 1\n0\n0",
                        "output": "1\n-1",
                        "explanation": "Initially, the stack is empty: {}\nQuery 1 (1 1): Push 1 onto the stack: {1}\nQuery 2 (0): Pop operation. 1 is popped: {}.\nQuery 3 (0): Pop operation on an empty stack, return -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use hashmaps + stack to implement the stack.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}