{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10627,
            "title": "MaxFrequencyStack",
            "titleSlug": "maxfrequencystack_1262006",
            "content": "<h4 id=\"implement-the-given-class-frequencystack-consisting-of-three-functions\">Implement the given class FrequencyStack consisting of three functions :</h4>\n\n<pre><code>FrequencyStack() : Creates a new FrequencyStack.\n\nvoid push(int element) : Pushes the element onto the top of the stack.\n\nint pop() : Returns and remove the most frequent element in the stack. If there are multiple elements with the same maximum frequency then return the integer which is closest to the stack top.\n</code></pre>\n\n<h4 id=\"you-will-be-given-q-queries-consisting-of-push-and-pop-operation-in-each-query-input-is-of-following-type\">You will be given \u2018q\u2019 queries consisting of push and pop operation. In each query input is of following type :</h4>\n\n<pre><code>0 : It means we have to pop the element with maximum frequency and return this element.\n\n1 \u2018element\u2019 : It means we have to push \u2018element\u2019 onto the top of the stack. \n\nNote: If a pop operation is used in an empty stack nothing happens to the stack, but you have to return  -1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains \u2018q\u2019 denoting the number of queries.\n\nIn the next &#39;q&#39; lines input is either of the types :\n0 : It means you have to pop the element with maximum frequency and return this element.\n1 \u2018element\u2019 : It means we have to push \u2018element\u2019 onto the top of the stack. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>If the stack is non-empty return the removed element.\nIf a stack is empty return  -1.\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n0 &lt;= q , element &lt;= 5000\n0 &lt;= id &lt;= 1\n\nwhere &#39;id&#39; denotes the type of query which is either 0 or 1.\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n7\n0\n1 3\n1 3\n1 2\n1 2\n0\n0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>-1\n 2\n 3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the First test case :\n\nInitially, stack is empty : {}\n\nFor the first query : pop operation :\nSince the stack is empty return -1.\n\nFor the second query: push operation:\nThe stack is now : {3}\n\nFor the third query: push operation:\nThe stack is now : {3,3}\n\nFor the fourth query : push operation :\nStack is now : {2,3,3}\n\nFor the fifth query : push operation :\nThe stack is now : {2,2,3,3}\n\nFor the sixth query : pop operation :\nBoth 2 and 3 have the same frequency but 2 is \nnearer to the top. Hence 2 is popped\nStack is now : {2,3,3}\n\nFor the seventh query : pop operation :\n3 has a maximum frequency. Hence 3 is popped.\nThe stack is now : {2,3}\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n3\n1 1\n0\n0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement the `FrequencyStack` class with the following functionalities:\n\n- `FrequencyStack()`: Initializes an empty `FrequencyStack`.\n- `push(int element)`: Adds the given `element` to the top of the stack.\n- `pop()`: Removes and returns the most frequent element in the stack. If multiple elements share the highest frequency, return the one closest to the stack's top.  If the stack is empty, return -1.",
                "constraints": [
                    "1 <= T <= 50",
                    "0 <= q, element <= 5000",
                    "0 <= id <= 1 (where 'id' denotes the query type: 0 for pop, 1 for push)"
                ],
                "testcases": [
                    {
                        "input": "q = 7, queries = [[0], [1, 3], [1, 3], [1, 2], [1, 2], [0], [0]]",
                        "output": "-1\n2\n3",
                        "explanation": "Initially, stack is empty: {}\n- pop(): stack is empty, return -1.\n- push(3): stack = {3}\n- push(3): stack = {3, 3}\n- push(2): stack = {2, 3, 3}\n- push(2): stack = {2, 2, 3, 3}\n- pop(): 2 and 3 have frequency 2, 2 is closer to the top, return 2. stack = {2, 3, 3}\n- pop(): 3 has the maximum frequency, return 3. stack = {2, 3}"
                    },
                    {
                        "input": "q = 3, queries = [[1, 1], [0], [0]]",
                        "output": "1\n-1",
                        "explanation": "Initially, stack is empty: {}\n- push(1): stack = {1}\n- pop(): 1 is the most frequent, return 1. stack = {}\n- pop(): stack is empty, return -1."
                    },
                    {
                        "input": "q = 5, queries = [[1, 5], [1, 7], [1, 5], [1, 7], [1, 4]]",
                        "output": "",
                        "explanation": "Push operations only. No pop operations to evaluate."
                    },
                    {
                        "input": "q = 6, queries = [[1,5],[1,5],[1,5],[1,4],[0],[0]]",
                        "output": "4\n5",
                        "explanation": "Stack becomes {5,5,5,4}. The first pop removes 4. Then the second pop removes 5."
                    },
                    {
                        "input": "q = 8, queries = [[1, 2], [1, 2], [1, 1], [1, 2], [1, 1], [0], [0], [0]]",
                        "output": "1\n1\n2",
                        "explanation": "The stack will be: {2, 2, 1, 2, 1}. The frequency count will have 2 appear 3 times and 1 appears 2 times. The first pop occurs and 1 is closer to the top so 1 is popped. Next time 1 will be popped again, and last time 2 will be popped."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use hashmaps + stack to implement the stack.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}