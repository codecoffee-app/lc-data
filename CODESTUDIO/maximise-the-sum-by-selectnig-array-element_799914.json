{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8043,
            "title": "Maximise the sum by selectnig array element",
            "titleSlug": "maximise-the-sum-by-selectnig-array-element_799914",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-n-integers-you-are-required-to-perform-an-operation-on-the-array-each-time-until-it-becomes-empty-the-operation-is-to-select-an-element-from-the-array-let-s-say-at-ith-index-i-e-arr-i-and-remove-one-occurrence-of-the-selected-element-from-the-array-and-remove-all-the-occurrences-of-arr-i-1-and-arr-i-1-from-the-array-if-present-your-task-is-to-maximize-the-sum-of-selected-elements-from-the-array\">You are given an array \u201cARR\u201d of N integers. You are required to perform an operation on the array each time until it becomes empty. The operation is to select an element from the array(let\u2019s say at ith index i.e ARR[i]) and remove one occurrence of the selected element from the array and remove all the occurrences of (ARR[i]-1) and (ARR[i]+1) from the array(if present). Your task is to maximize the sum of selected elements from the array.</h4>\n\n<h4 id=\"for-example-let-s-say-the-given-array-is-2-3-3-3-4-5\">For example, let\u2019s say the given array is [2, 3, 3, 3, 4, 5].</h4>\n\n<h4 id=\"the-maximum-possible-sum-for-the-given-array-would-be-14-because-if-we-select-one-of-the-3-s-from-the-array-then-one-3-and-all-occurrences-of-3-1-and-3-1-i-e-2-and-4-will-be-deleted-from-the-array-now-we-left-with-3-3-5-elements-in-the-array-then-again-we-select-3-in-the-next-two-steps-and-in-both-steps-3-will-be-deleted-also-3-1-and-3-1-doesnt-exist-in-the-array-so-nothing-extra-to-delete-in-both-steps-now-we-left-with-only-5-and-in-the-next-step-we-select-the-5-and-delete-it-then-the-array-becomes-empty-thus-the-sum-of-selected-elements-will-be-3-3-3-5-14\">The maximum possible sum for the given array would be 14. Because if we select one of the 3\u2019s from the array, then one 3 and all occurrences of (3-1) and  (3+1) i.e 2 and 4 will be deleted from the array. Now we left with {3,3,5} elements in the array. Then again we select 3 in the next two steps and in both steps 3 will be deleted also (3-1) and (3+1) doesn&#39;t exist in the array so nothing extra to delete in both steps. Now we left with only {5} and in the next step, we select the 5 and delete it. Then the array becomes empty. Thus the sum of selected elements will be 3+3+3+5 = 14.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases or queries to be processed.\n\nThen the test case follows.\n\nThe first line of each test case contains integer N, denoting the size of the array.\n\nThe second line of each test case contains &#39;N&#39; single space-separated integers representing the array elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer denoting the maximum sum, in a single line. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5  \n1 &lt;= ARR[i] &lt;= 10^5\n\nWhere &#39;ARR[i]&#39; denotes the &#39;ith&#39; element of the array.\n\nTime Limit: 1 sec    \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n9\n2 2 1 1 1 1 1 3 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>11\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample input 1 :</h5>\n\n<pre><code>In the first step, we select one of the 3\u2019s from the array and remove one occurrence of 3 and all occurrences of (3-1) and  (3+1) i.e 2 and 4. Now we left with {1, 1, 1, 1, 1, 3} elements in the array. \n\nThen again we select 3 in the next step and again 3 will be deleted and as (3-1) and (3+1) doesn&#39;t exist in the array so nothing more to be deleted in this step. Now we left with {1,1,1,1,1}. \n\nIn the next five steps, we select 1 as the element and delete it. Thus the array becomes empty.\n\nThus the sum we got is 3+3+1+1+1+1+1 = 11 which is the maximum possible sum.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n6\n2 3 3 3 4 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>14\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of N integers, you need to maximize the sum of selected elements by performing operations until the array is empty. In each operation, you select an element (ARR[i]), remove one occurrence of ARR[i] from the array, and remove all occurrences of (ARR[i] - 1) and (ARR[i] + 1) from the array if they exist.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "1 <= ARR[i] <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n9\n2 2 1 1 1 1 1 3 3",
                        "output": "11",
                        "explanation": "Select one of the 3's, removing it and all 2's and 4's, leaving {1, 1, 1, 1, 1, 3}. Then select the 3, removing it.  Now we have {1, 1, 1, 1, 1}.  Finally, select each of the 1's, removing them. Total sum is 3 + 3 + 1 + 1 + 1 + 1 + 1 = 11."
                    },
                    {
                        "input": "1\n6\n2 3 3 3 4 5",
                        "output": "14",
                        "explanation": "Select one of the 3's, removing it and all 2's and 4's, leaving {3, 3, 5}. Then select the two 3's. No 2's or 4's exist. Then select the 5. Total sum is 3 + 3 + 3 + 5 = 14."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of brute force and try to generate all the possibilities to find the maximum sum</p>",
            "<p>Think of a solution to optimize the previous approach by using memoization.</p>",
            "<p>Think of a solution to use bottom-up dynamic programming.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}