{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11030,
            "title": "Maximize Sum",
            "titleSlug": "maximize-sum_1376445",
            "content": "<h4 id=\"you-are-given-two-lists-array-nums-of-the-same-size-your-task-is-to-maximise-the-possible-sum-which-can-be-calculated-using-the-elements-of-the-two-given-lists-in-order-to-maximise-the-sum-you-are-only-allowed-to-swap-any-element-of-the-first-list-array-with-the-other-that-too-for-any-position-any-index-i-any-number-of-times\">You are given two lists (array) (nums) of the same size. Your task is to maximise the possible sum which can be calculated using the elements of the two given lists. In order to maximise the sum, you are only allowed to swap any element of the first list (array) with the other that too for any position (any index \u2018i\u2019) any number of times.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The maximum sum is calculated by using the following rules:-\n\nFor every \u2018i\u2019 in range 0...N:\n\nMax_sum += abs(arr1[i] - arr2[i])\n\nAnd If i &lt; N-1:\n    Max_sum += abs(arr1[i+1] - arr2[i])\n</code></pre>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>Input:\nn = 4\narr1[] = {2,3,4,1}\narr2[] = {2,4,1,1}\n\nOuput: 11\n\n\nExplanation:\n\nHere we will swap arr1[2] and arr2[2]. (Swap)\n\narr1[] = {2,3,1,1}\narr2[] = {2,4,4,1}\n\nfor this type of arrangement, we have our maximum Define Sum.\n\nSum = abs(arr1[0]-arr2[0]) + abs(arr1[1]-arr2[0]) + abs(arr1[1]-arr2[1]) + abs(arr1[2]-arr2[1]) ....\nSum = abs(2-2) + abs(3-2) + abs(3-4) + abs(1-4) + abs(1-4) + abs(1-4) + abs(1-1) = 11\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains a single integer \u2018T\u2019 denoting the number of test cases that would be there.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of integers that would be given in both the lists (arrays).\n\nThe next two lines contain \u2018N\u2019 space-separated integers denoting the elements of the two lists which would be given.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Return maximised possible sum which can be calculated using the elements of the two given lists as depicted by the formula mentioned above.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n1 &lt;= nums[i] &lt;= 10^6\n\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4\n2 2 4 3\n2 4 2 3\n5\n5 5 6 6 5\n1 2 5 4 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>9\n24\n</code></pre>\n\n<h4 id=\"explanation-for-sample-1\">Explanation for Sample 1 :</h4>\n\n<pre><code>Here we will swap arr1[2] and arr2[2]. (Swap)\n\narr1[] = {2,4,4,3}\narr2[] = {2,2,2,3}\n\nfor this type of arrangement, we have our maximum Define Sum.\n\nSum = abs(arr1[0]-arr2[0]) + abs(arr1[1]-arr2[0]) + abs(arr1[1]-arr2[1]) + abs(arr1[2]-arr2[1]) ....\nSum = abs(2-2) + abs(4-2) + abs(4-2) + abs(4-2) + abs(4-2) + abs(3-2) + abs(3-3) = 9\n\n\n\nHere we will swap arr1[3] and arr2[3] and Also swap arr1[4] and arr2[4]. (Swap)\n\narr1[] = {5,5,6,4,3}\narr2[] = {1,2,5,6,5}\n\nfor this type of arrangement, we have our maximum Defined Sum.\n\nSum = abs(arr1[0]-arr2[0]) + abs(arr1[1]-arr2[0]) + abs(arr1[1]-arr2[1]) + abs(arr1[2]-arr2[1]) ....\nSum = abs(5-1) + abs(5-1) + abs(5-2) + abs(6-2) + abs(6-5) + abs(6-5) + abs(4-6) + abs(3-6) + abs(3-5) = 24\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n4\n2 3 4 1\n2 4 1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>11\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 115,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, `nums1` and `nums2`, of the same size, the goal is to maximize the sum calculated as follows:\n\nFor each index `i` from 0 to N-1:\n  * Add the absolute difference between `nums1[i]` and `nums2[i]` to the sum.\n  * If `i` is less than N-1, add the absolute difference between `nums1[i+1]` and `nums2[i]` to the sum.\n\nYou are allowed to swap elements between `nums1` and `nums2` at any index any number of times to achieve the maximum possible sum.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 5000",
                    "1 <= nums[i] <= 10^6",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "4\n2 2 4 3\n2 4 2 3",
                        "output": "9",
                        "explanation": "By swapping arr1[2] and arr2[2], we get arr1[] = {2, 4, 4, 3} and arr2[] = {2, 2, 2, 3}. The resulting sum is |2-2| + |4-2| + |4-2| + |4-2| + |3-2| + |3-3| = 0 + 2 + 2 + 2 + 1 + 0 = 9."
                    },
                    {
                        "input": "5\n5 5 6 6 5\n1 2 5 4 3",
                        "output": "24",
                        "explanation": "By swapping arr1[3] and arr2[3], and arr1[4] and arr2[4], we get arr1[] = {5, 5, 6, 4, 3} and arr2[] = {1, 2, 5, 6, 5}. The resulting sum is |5-1| + |5-1| + |5-2| + |6-2| + |6-5| + |4-5| + |3-6| + |3-5| = 4 + 4 + 3 + 4 + 1 + 1 + 3 + 2 = 22. It seems the provided answer is wrong. The correct calculation results in a value of 22. Let's calculate: abs(5-1) + abs(5-1) + abs(5-2) + abs(6-2) + abs(6-5) + abs(4-5) + abs(3-6) + abs(3-5) = 4 + 4 + 3 + 4 + 1 + 1 + 3 + 2 = 22."
                    },
                    {
                        "input": "4\n2 3 4 1\n2 4 1 1",
                        "output": "11",
                        "explanation": "By swapping arr1[2] and arr2[2], we get arr1[] = {2, 3, 1, 1} and arr2[] = {2, 4, 4, 1}. The resulting sum is |2-2| + |3-2| + |3-4| + |1-4| + |1-4| + |1-1| = 0 + 1 + 1 + 3 + 3 + 0 = 8.  The next part of the calculation is to add |arr1[i+1] - arr2[i]| for i in range(0, n-1).  This gives |3-2| + |1-4| + |1-1| = 1 + 3 + 0 = 4. The sum is 8 + 3 = 11 . However, if we get arr1[]={2,3,1,1}, arr2[]={2,4,4,1}. So |2-2| + |3-2| + |3-4| + |1-4| + |1-1| = 0 + 1 + 1+ 3+ 0 =5. So sum should be |3-2| + |1-4| + |1-1| = 1 +3+ 0 = 4. 5+4 = 9. Swapping at index i=2 would be correct. "
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find a pattern of solving repeated sub-problems and use dynamic programming to solve them.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n\n    where N denotes the number of items given in the problem for the two lists.\n*/\n\nlong long calculateMaximisedSum(vector<int>& arr1, vector<int>& arr2, int n){\n\n    long long dp[n][2] = {0};\n\n    dp[0][0] = dp[0][1] = abs(arr1[0] - arr2[0]);\n\n    for(int i = 1; i < n; i++){\n        dp[i][0] = abs(arr1[i] - arr2[i]) + max((dp[i - 1][0] + abs(arr1[i] - arr2[i - 1])), (dp[i - 1][1] + abs(arr1[i] - arr1[i - 1])));\n        dp[i][1] = abs(arr1[i] - arr2[i]) + max((dp[i - 1][0] + abs(arr2[i] - arr2[i - 1])), (dp[i - 1][1] + abs(arr2[i] - arr1[i - 1])));\n    }\n\n    return max(dp[n - 1][0], dp[n - 1][1]);\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n\n    where N denotes the number of items given in the problem for the two lists.\n'''\n\ndef calculateMaximisedSum(arr1, arr2, N):\n    \n    dp = [[0, 0] for _ in range(N)]\n    \n    dp[0][0] = dp[0][1] = abs(arr1[0] - arr2[0])\n    \n    for i in range(1,N):\n        \n        dp[i][0] = abs(arr1[i] - arr2[i]) + max((dp[i - 1][0] + abs(arr1[i] - arr2[i - 1])), (dp[i - 1][1] + abs(arr1[i] - arr1[i - 1])))\n        dp[i][1] = abs(arr1[i] - arr2[i]) + max((dp[i - 1][0] + abs(arr2[i] - arr2[i - 1])), (dp[i - 1][1] + abs(arr2[i] - arr1[i - 1])))\n        \n    return max(dp[N - 1][0], dp[N - 1][1])",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n\n    where N denotes the number of items given in the problem for the two lists.\n*/\npublic class Solution {\n    public static int calculateMaximisedSum(int[] arr1, int[] arr2, int n) {\n        \n        long[][] dp = new long[n][2];\n        dp[0][0] = Math.abs(arr1[0] - arr2[0]);\n        dp[0][1] = Math.abs(arr1[0] - arr2[0]);\n        for(int i = 1; i < n; i++){\n            dp[i][0] = Math.abs(arr1[i] - arr2[i]) + Math.max((dp[i - 1][0] + Math.abs(arr1[i] - arr2[i - 1])), (dp[i - 1][1] + Math.abs(arr1[i] - arr1[i - 1])));\n            dp[i][1] = Math.abs(arr1[i] - arr2[i]) + Math.max((dp[i - 1][0] + Math.abs(arr2[i] - arr2[i - 1])), (dp[i - 1][1] + Math.abs(arr2[i] - arr1[i - 1])));\n        }\n        return (int)Math.max(dp[n - 1][0], dp[n - 1][1]);\n    }\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}