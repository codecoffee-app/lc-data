{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10077,
            "title": "Maximize the sum",
            "titleSlug": "maximize-the-sum_1118624",
            "content": "<h4 id=\"you-are-given-two-sorted-arrays-of-distinct-integers-arr1-and-arr2-if-you-find-a-common-element-in-both-arrays-you-can-switch-from-one-array-to-another\">You are given two sorted arrays of distinct integers, \u2018ARR1\u2019 and \u2018ARR2\u2019. If you find a common element in both arrays, you can switch from one array to another.</h4>\n\n<h4 id=\"your-task-is-to-find-a-path-through-the-intersections-i-e-common-integers-of-arr1-and-arr2-that-produces-maximum-sum-and-return-that-maximum-sum-as-the-answer\">Your task is to find a path through the intersections i.e common integers of \u2018ARR1\u2019 and \u2018ARR2\u2019, that produces maximum sum and return that maximum sum as the answer.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Let \u2018ARR1\u2019 = [1, 5, 10, 15, 20]  and \u2018ARR2\u2019 = [2, 4, 5, 9, 15]\nIn this example, common points are 5, 15.\n\nFirst, we start with ARR2 and take the sum till 5 (i.e. sum = 11). Then we will switch to \u2018ARR1\u2019 at element 10 and take the sum till 15. So sum = 36. Now no element is left in \u2018ARR2\u2019 after 15, so we will continue in array 1. Hence sum is 56. And the path is 2 -&gt; 4 -&gt; 5 -&gt; 10 -&gt; 15 -&gt; 20.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample1-7877.png\" alt=\"array\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019 and \u2018M,\u2019 representing the number of elements in \u2018ARR1\u2019 and \u2018ARR2\u2019.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers denoting the values of \u2018ARR1\u2019.\n\nThe third line of each test case contains \u2018M\u2019 single space-separated integers denoting the values of \u2018ARR2\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the maximum sum value.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 100\n1 &lt;= \u2018N\u2019, \u2019M\u2019 &lt;= 10^4\n1 &lt;= \u2018ARR1[i]\u2019, \u2018ARR2[j]\u2019 &lt;= 10^5\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5 4\n1 2 4 5 6\n2 3 4 7 \n5 5\n1 2 3 4 5\n1 2 3 4 5   \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>21\n15\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For sample test case 1: \nCommon points are: 2, 4\n\nFirst, we start with \u2018ARR1\u2019 and take the sum till 2 (i.e. sum = 3). Then we will switch to \u2018ARR2\u2019 at element 2 and take the sum till 4 (i.e. sum = 10). Then we will switch to \u2018ARR1\u2019 at element 4 and take the sum till the end of the \u2018ARR1\u2019. Hence sum is 21.\n\nThe path is 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6.\n\nFor sample test case 2: \nCommon points are : 1, 2, 3, 4, 5\n\nFirst, we start with ARR1 and take the sum till 1 (i.e. sum = 1). Then we again continue with \u2018ARR1\u2019  and take the sum till 2 (i.e., 3). Similarly, we continue with &#39;ARR1&#39; and keep on adding elements until the last element. Hence sum is 15.\n\nAnd the path is 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5 4\n2 4 5 8 10\n4 6 8 9\n4 4\n1 2 3 4\n5 6 7 8 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>30\n26\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two sorted arrays of distinct integers, `ARR1` and `ARR2`, find the maximum sum path through the common elements (intersections). You can switch between arrays at any common element.  The goal is to maximize the sum of the elements in the chosen path.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N, M <= 10^4",
                    "1 <= ARR1[i], ARR2[j] <= 10^5",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "5 4\n1 2 4 5 6\n2 3 4 7",
                        "output": "21",
                        "explanation": "Common points are 2 and 4.\nStarting with ARR1, sum until 2 (1 + 2 = 3). Switch to ARR2 at 2 and sum until 4 (3 + 3 + 4 = 10). Switch to ARR1 at 4 and sum until the end (10 + 5 + 6 = 21).\nThe path is 1 -> 2 -> 3 -> 4 -> 5 -> 6."
                    },
                    {
                        "input": "5 5\n1 2 3 4 5\n1 2 3 4 5",
                        "output": "15",
                        "explanation": "Common points are 1, 2, 3, 4, and 5.\nStarting with ARR1 and traversing through all the elements, sum equals 1 + 2 + 3 + 4 + 5 = 15.\nThe path is 1 -> 2 -> 3 -> 4 -> 5."
                    },
                    {
                        "input": "5 4\n2 4 5 8 10\n4 6 8 9",
                        "output": "30",
                        "explanation": "Common points are 4 and 8.\nStarting with ARR1, sum until 4 (2 + 4 = 6). Switch to ARR2 at 4 and sum until 8 (6 + 6 + 8 = 20). Switch to ARR1 at 8 and sum until end of ARR1(20 + 10 = 30). \n The path is 2 -> 4 -> 6 -> 8 -> 10."
                    },
                    {
                        "input": "4 4\n1 2 3 4\n5 6 7 8",
                        "output": "26",
                        "explanation": "Common points are none. The optimal choice is to take the larger array sum, so choose the array whose sum is largest. sum of array1 is 10, sum of array 2 is 26. Hence the largest sum = 26."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a Recursive solution.</p>",
            "<p>Optimize the above solution using some extra space.</p>",
            "<p>Apply Two Pointer Approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}