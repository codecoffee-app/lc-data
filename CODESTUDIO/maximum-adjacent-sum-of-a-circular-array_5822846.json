{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22643,
            "title": "Maximum Adjacent Sum of a Circular array",
            "titleSlug": "maximum-adjacent-sum-of-a-circular-array_5822846",
            "content": "<h4 id=\"you-are-given-a-circular-array-of-integers-nums-of-length-n-you-need-to-choose-some-elements-from-the-array-in-such-a-way-that-between-every-pair-of-adjacent-elements-you-have-chosen-at-least-one-of-them\">You are given a circular array of integers \u2018NUMS\u2019 of length \u2018N\u2019. You need to choose some elements from the array in such a way that between every pair of adjacent elements you have chosen at least one of them.</h4>\n\n<h4 id=\"choose-the-elements-optimally-and-return-the-minimum-sum-of-the-chosen-elements\">Choose the elements optimally and return the minimum sum of the chosen elements.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018N\u2019 = 5,  \u2018NUMS\u2019 = {1, 2, 3, 5, 2}.\n\nOutput: 6.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/trash-18561.png\" alt=\"\"></p>\n\n<pre><code>The indices of the chosen elements are [0, 2, 4], hence sum = 1 + 3 + 2 = 6.\nNote: Some of the invalid ways to choose the elements are: \nChoose the elements with indices (0, 4), it is invalid because, among the pair of indices (1, 2) none of them were chosen. \nChoose the elements with indices (0, 2), it is invalid because, among the pair of indices (3, 4) none of them were chosen. \nChoose the elements with indices (1, 2), it is invalid because, among the pair of indices (0, 4) none of them were chosen. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain the integer &#39;T&#39;, denoting the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the length of the array \u2018NUMS. \n\nThe second line of each test case contains \u2018N\u2019 space-separated integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, you don\u2019t need to print anything just return the minimum adjacent sum\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^6 \n0 &lt;= NUMS[ i ] &lt;= 10^3\nSum of N Over all the Test cases &lt;= 10^6\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5\n1 1 2 1 2\n3\n2 2 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first case:\nChoose the elements with the indices (0, 1, 3), hence sum = 1 + 1 + 1 = 3.\n\nFor the second case:\nChoose the elements with the indices (0, 1), hence sum = 2 + 2 = 4.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n6\n15 100 23 23 1 15\n7\n101 110 123 11 12 1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>39\n124\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a circular array of integers `NUMS` of length `N`, select a subset of elements such that for every pair of adjacent elements in the original array, at least one of them is included in your selection. The goal is to minimize the sum of the selected elements.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^6",
                    "0 <= NUMS[i] <= 10^3",
                    "Sum of N over all test cases <= 10^6",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n1 1 2 1 2",
                        "output": "3",
                        "explanation": "Choosing elements at indices (0, 1, 3) results in the minimum sum: 1 + 1 + 1 = 3. This selection satisfies the condition that for every adjacent pair, at least one is chosen: (0,1), (1,2), (2,3), (3,4), (4,0)."
                    },
                    {
                        "input": "3\n2 2 2",
                        "output": "4",
                        "explanation": "Choosing elements at indices (0, 1) results in the minimum sum: 2 + 2 = 4. This selection satisfies the condition that for every adjacent pair, at least one is chosen: (0,1), (1,2), (2,0)."
                    },
                    {
                        "input": "6\n15 100 23 23 1 15",
                        "output": "39",
                        "explanation": null
                    },
                    {
                        "input": "7\n101 110 123 11 12 1 2",
                        "output": "124",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a way to solve this problem using recursion?</p>",
            "<p>Can you think of a way to optimize the previous approach using memoization?</p>",
            "<p>Can you think of a way to find the minimum sum for element \u2018i\u2019 by using the minimum sum that you can get from 0 to \u2018i\u2019 - 1?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}