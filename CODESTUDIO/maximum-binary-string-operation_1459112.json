{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12280,
            "title": "Maximum Binary String Operation",
            "titleSlug": "maximum-binary-string-operation_1459112",
            "content": "<h4 id=\"in-the-coding-school-the-teacher-gave-his-students-a-binary-string-bstring-and-asked-them-to-make-the-greatest-binary-string-possible-out-of-it-by-applying-the-below-mentioned-operations-any-number-of-times-the-two-allowed-operations-are\">In the coding school, the teacher gave his students a binary string \u2018bString\u2019, and asked them to make the greatest binary string possible out of it by applying the below-mentioned operations any number of times. The two allowed operations are:</h4>\n\n<pre><code>Operation 1: If the string contains the substring &quot;00&quot;, the student can replace it with &quot;10&quot;. For example, &quot;00010&quot; -&gt; &quot;10010&quot; \nOperation 2: If the string contains the substring &quot;10&quot;, the student can replace it with &quot;01&quot;. For example, &quot;00010&quot; -&gt; &quot;00001&quot;\n</code></pre>\n\n<h4 id=\"assuming-that-you-are-the-student-find-the-greatest-binary-string-one-can-obtain-after-applying-the-above-operations-any-number-of-times\">Assuming that you are the student, find the greatest binary string one can obtain after applying the above operations any number of times.</h4>\n\n<h4 id=\"a-binary-string-x-is-said-to-be-greater-than-binary-string-y-if-xs-decimal-representation-is-greater-than-ys-decimal-representation\">A Binary string \u2018X\u2019 is said to be greater than binary string \u2018Y\u2019, if X&#39;s decimal representation is greater than Y&#39;s decimal representation.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Let\u2019s say we have bstring as \u201c001\u201d which is an integer 1 in decimal representation. If you apply the above-given operation then you will have bString as \u201c101\u201d which is an integer 5 in decimal representation. \n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. \nThe first line of each test case contains a binary string \u2018bString\u2019 of 0\u2019s and 1\u2019s.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the greatest binary string you can obtain after applying the given operations.\n\nOutput for each test case is printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n\nThe binary string will only consist of 0\u2019s and 1\u2019s as characters.\n\nWhere \u2018T\u2019 represents the number of test cases, \u2018N\u2019 represents the length of the binary string.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n000110 \n01\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>111011\n01\n</code></pre>\n\n<h5 id=\"explanation-1\">Explanation 1:</h5>\n\n<pre><code>For the first test case, \nGiven the binary string as \u201c000110\u201d. So we will first apply operation 2 on \u201c000110\u201d and the string will be converted to \u201c000101\u201d.Then again we will apply operation 2 on \u201c000101\u201d and the string will be converted to \u201c000011\u201d. Now will apply operation 1 on \u201c000011\u201d and the string will be converted to \u201c100011\u201d. Then again apply operation 1 on \u201c100011\u201d and it will be converted to \u201c110011\u201d. Now again we will apply operation 1 on \u201c110011\u201d and it will be converted to \u201c111011\u201d. Now we can\u2019t apply any further given operations on the string \u201c111011\u201d so our final output is \u201c111011\u201d.    \n\nFor the second test case, \nGiven the binary string as \u201c01\u201d. Since from the given operations available none of them is applicable so our final output will be \u201c01\u201d itself.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1111\n000010\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1111\n111101\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 16,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary string 'bString' consisting of 0s and 1s, determine the lexicographically largest binary string achievable through repeated applications of the following operations:\n\nOperation 1: Replace the substring \"00\" with \"10\".\nOperation 2: Replace the substring \"10\" with \"01\".\n\nYou may apply these operations any number of times, in any order.  Return the resulting maximum binary string.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5 (where N is the length of bString)",
                    "The binary string will only consist of 0\u2019s and 1\u2019s as characters."
                ],
                "testcases": [
                    {
                        "input": "bString = 000110",
                        "output": "111011",
                        "explanation": "Applying the operations, \"000110\" -> \"000101\" -> \"000011\" -> \"100011\" -> \"110011\" -> \"111011\"."
                    },
                    {
                        "input": "bString = 01",
                        "output": "01",
                        "explanation": "No operations can be applied. The string remains unchanged."
                    },
                    {
                        "input": "bString = 1111",
                        "output": "1111",
                        "explanation": "No operations can be applied. The string remains unchanged."
                    },
                    {
                        "input": "bString = 000010",
                        "output": "111101",
                        "explanation": "Applying the operations, \"000010\" -> \"100010\" -> \"110010\" -> \"111010\" -> \"111101\"."
                    },
                    {
                        "input": "bString = 00101",
                        "output": "11011",
                        "explanation": "Applying the operations, \"00101\" -> \"10101\" -> \"10011\" -> \"01111\" -> \"11011\"."
                    },
                    {
                        "input": "bString = 1000",
                        "output": "1011",
                        "explanation": "Applying the operations, \"1000\" -> \"0100\" -> \"0010\" -> \"0001\" -> \"1001\" -> \"1010\" -> \"1011\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The greatest binary string will have at most one \u20180\u2019 in the string after applying the operation.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}