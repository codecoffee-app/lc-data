{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8841,
            "title": "Maximum Binary Tree Path",
            "titleSlug": "maximum-binary-tree-path_920392",
            "content": "<h4 id=\"you-are-given-a-binary-tree-having-n-nodes-find-and-print-the-maximum-sum-path-from-root-to-a-leaf-the-binary-tree-contains-negative-values-as-well\">You are given a binary tree having N nodes, find and print the maximum sum path from root to a leaf. The binary tree contains negative values as well.</h4>\n\n<h4 id=\"a-binary-tree-is-a-hierarchical-data-structure-in-which-each-node-has-at-most-two-children\">A binary tree is a hierarchical data structure in which each node has at most two children.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Consider the given binary tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree1-10828.PNG\" alt=\"\"></p>\n\n<pre><code>For the given tree the leaf nodes are 5, 4, 7, 6. In this binary tree, the maximum sum path is 11(1 + 3 + 7). So the path 1 3 7 is printed.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains a single integer T representing the number of test cases. \n\nThe first line of each test case contains elements in the level order form(refer to the example below) (separated by space). If any node does not have a left or right child, take -1 in its place.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-10829.PNG\" alt=\"\"></p>\n\n<pre><code>Explanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n\nNote: The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print &quot;True&quot; if all the leaf nodes are at the same level otherwise print &quot;False\u201d (without quotes).\n\nThe output of each test case should be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You are not required to print anything, it has already been taken care of. Just implement the function.    \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n-10^9 &lt;= nodeVal &lt;= 10^9\n\nWhere nodeVal denotes the value associated with the node.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 2 4 3 -1 5 6 -1 -1 -1 -1 -1 -1 \n1 2 3 4 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 4 6\n1 2 4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>In the first test case, the leaves of the binary tree are 3 ( path-&gt; 1 2 3 ) , 5 (path-&gt; 1 4 5), and 6 (path-&gt; 1 4 6). So, The maximum sum path is 11 (1+4+6). So 1 4 6 is printed.\n\nDiagram of the Binary Tree given in the first test case of Sample Input 1.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree3-10830.PNG\" alt=\"\"></p>\n\n<pre><code>In the first test case, the leaves of the binary tree are 3 ( path-&gt; 1 3 ) and 4 (path-&gt; 1 2 4).\nSo, The maximum path is 7 (1+2+4). So 1 2 4 is printed.\n\nDiagram of the Binary Tree given in the second test case of Sample Input 1.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree4-10831.PNG\" alt=\"\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 2 3 -1 -1 4 -1 -1 -1\n1 2 -1 3 -1 4 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 3 4\n1 2 3 4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree represented by its root node, find and return the path from the root to a leaf node that has the maximum sum of node values. The tree nodes may contain negative values. You need to return a vector of integers representing the nodes in the path from the root to the leaf with the maximum sum. If there are multiple paths with the same maximum sum, return any one of them.",
                "constraints": [
                    "1 <= N <= 3000, where N is the number of nodes in the tree.",
                    "-10^9 <= nodeVal <= 10^9, where nodeVal is the value of a node.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "root = [1, 2, 4, 3, -1, 5, 6, -1, -1, -1, -1, -1, -1]",
                        "output": "[1, 4, 6]",
                        "explanation": "The binary tree is as shown in the first example. The leaves are 3, 5, and 6. The paths and their sums are: 1->2->3 (sum=6), 1->4->5 (sum=10), 1->4->6 (sum=11). The maximum sum path is 1->4->6, so [1, 4, 6] is returned."
                    },
                    {
                        "input": "root = [1, 2, 3, 4, -1, -1, -1, -1, -1]",
                        "output": "[1, 2, 4]",
                        "explanation": "The binary tree is as shown in the second example. The leaves are 4 and 3. The paths and their sums are: 1->2->4 (sum=7), 1->3 (sum=4). The maximum sum path is 1->2->4, so [1, 2, 4] is returned."
                    },
                    {
                        "input": "root = [1, 2, 3, -1, -1, 4, -1, -1, -1]",
                        "output": "[1, 3, 4]",
                        "explanation": "The leaves of the binary tree are 4 and 2. The path 1->2 has sum 3, and the path 1->3->4 has sum 8. Thus, [1, 3, 4] is the result."
                    },
                    {
                        "input": "root = [1, 2, -1, 3, -1, 4, -1, -1, -1]",
                        "output": "[1, 2, 3, 4]",
                        "explanation": "The only leaf of the binary tree is 4. Thus the path 1->2->3->4 is the only valid path."
                    },
                    {
                        "input": "root = [1, -2, -3]",
                        "output": "[1, -2]",
                        "explanation": "Leaves are -2 and -3. path 1->-2 is sum -1, 1-> -3 is sum -2. Hence [1, -2] is the expected output."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check the sum path of all the leaves in the tree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}