{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7626,
            "title": "Maximum Coins ",
            "titleSlug": "maximum-coins_758902",
            "content": "<h4 id=\"you-are-given-a-two-dimensional-matrix-of-integers-of-dimensions-n-m-where-each-cell-represents-the-number-of-coins-in-that-cell-alice-and-bob-have-to-collect-the-maximum-number-of-coins-the-followings-are-the-conditions-to-collect-coins\">You are given a two-dimensional matrix of integers of dimensions N*M, where each cell represents the number of coins in that cell. Alice and Bob have to collect the maximum number of coins. The followings are the conditions to collect coins:</h4>\n\n<h4 id=\"alice-starts-from-top-left-corner-i-e-0-0-and-should-reach-left-bottom-corner-i-e-n-1-0-bob-starts-from-top-right-corner-i-e-0-m-1-and-should-reach-bottom-right-corner-i-e-n-1-m-1\">Alice starts from top left corner, i.e., (0, 0) and should reach left bottom corner, i.e., (N-1, 0). Bob starts from top right corner, i.e., (0, M-1) and should reach bottom right corner, i.e., (N-1, M-1).</h4>\n\n<h4 id=\"from-a-point-i-j-alice-and-bob-can-move-to-i-1-j-1-or-i-1-j-1-or-i-1-j\">From a point (i, j), Alice and Bob can move to (i+1, j+1) or (i+1, j-1) or (i+1, j)</h4>\n\n<h4 id=\"they-have-to-collect-all-the-coins-that-are-present-at-a-cell-if-alice-has-already-collected-coins-of-a-cell-then-bob-gets-no-coins-if-goes-through-that-cell-again\">They have to collect all the coins that are present at a cell. If Alice has already collected coins of a cell, then Bob gets no coins if goes through that cell again.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>If the matrix is \n0 2 4 1\n4 8 3 7\n2 3 6 2\n9 7 8 3\n1 5 9 4\n\nThen answer is 47. As, Alice will collect coins 0+8+3+9+1 = 21 coins. Bob will collect coins 1+7+6+8+4 = 26 coins. Total coins is 21+26 = 47 coins.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \nThen the T test cases follow.\n\nThe first line of input contains two single space-separated integers &#39;N&#39; and &#39;M&#39; representing the number of rows and columns of the matrix respectively.\n\nThe next &#39;N&#39; lines contain &#39;M&#39; single space-separated integers each representing the coins in a row of the matrix.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output contains a single integer i.e. The minimum coins that can be collected by Alice and Bob. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10^2\n1 &lt;= M &lt;= 10^2\n0 &lt;= MAT[i][j] &lt;= 10^3\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n5 4\n3 6 8 2\n5 2 4 3\n1 1 20 10\n1 1 20 10\n1 1 20 10 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>73\n</code></pre>\n\n<h5 id=\"explanation-for-input-1\">Explanation for Input 1:</h5>\n\n<pre><code>Alice will collect coins 3 + 2 + 20 + 1 + 1 = 27 coins.\nBob will collect coins 2 + 4 + 10 + 20 + 10 = 46 coins.\nSo total coins will get connected are 27 + 46 = 73 coins.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n4 1\n3 \n6\n7\n8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>24\n</code></pre>\n\n<h5 id=\"explanation-for-input-2\">Explanation for Input 2:</h5>\n\n<pre><code>As, initially both are at (0,0) so either Alice or Bob can pick up 3 coins. Similarly is the case with every coin. So total 24 coins will get picked.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 22,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a two-dimensional matrix of integers with dimensions N*M, where each cell represents the number of coins. Alice starts from the top-left corner (0, 0) and must reach the bottom-left corner (N-1, 0). Bob starts from the top-right corner (0, M-1) and must reach the bottom-right corner (N-1, M-1). From any point (i, j), both Alice and Bob can move to (i+1, j+1), (i+1, j-1), or (i+1, j). They collect the coins in each cell they visit. If Alice collects coins from a cell, Bob receives no coins if he later visits the same cell. The goal is to maximize the total number of coins collected by Alice and Bob.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 100",
                    "1 <= M <= 100",
                    "0 <= MAT[i][j] <= 1000",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n5 4\n3 6 8 2\n5 2 4 3\n1 1 20 10\n1 1 20 10\n1 1 20 10",
                        "output": "73",
                        "explanation": "Alice collects coins: 3 + 2 + 20 + 1 + 1 = 27. Bob collects coins: 2 + 4 + 10 + 20 + 10 = 46. Total coins collected: 27 + 46 = 73."
                    },
                    {
                        "input": "1\n4 1\n3\n6\n7\n8",
                        "output": "24",
                        "explanation": "Since there's only one column, either Alice or Bob can pick up the coins at each row. The total number of coins collected is 3 + 6 + 7 + 8 = 24."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of brute force and try to generate all the possibilities.</p>",
            "<p>Try to generate all the possibilities and use memoization.</p>",
            "<p>Try to generate all the possibilities and use iterative dynamic programming.</p>",
            "<p>Try to generate all the possibilities and use dynamic programming and the fact that the answer of the current row is only dependent on the final answer of the previous row.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}