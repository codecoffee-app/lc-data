{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9788,
            "title": "Maximum depth of a binary tree",
            "titleSlug": "maximum-depth-of-a-binary-tree_1090542",
            "content": "<h4 id=\"you-are-given-the-root-node-of-a-binary-tree-with-n-nodes-whose-nodes-have-integer-values-your-task-is-to-find-the-maximum-depth-of-the-given-binary-tree\">You are given the root node of a binary tree with N nodes,  whose nodes have integer values. Your task is to find the maximum depth of the given Binary tree.</h4>\n\n<h4 id=\"depth-of-a-binary-tree-is-the-same-as-its-height-in-simpler-terms-you-have-to-find-the-total-number-of-nodes-encountered-while-moving-from-the-root-node-to-the-farthest-leaf-node-along-the-longest-path-of-the-binary-tree\">Depth of a binary tree is the same as its height. In simpler terms, you have to find the total number of nodes encountered while moving from the root node to the farthest leaf node, along the longest path of the binary tree.</h4>\n\n<h5 id=\"example\">Example:-</h5>\n\n<p><img src=\"https://files.codingninjas.in/h-7151.png\" alt=\"example\"></p>\n\n<pre><code>If we are given the above binary tree as input then moving from root node(5) to the farthest leaf node(50), the path formed will be [ 5-&gt;10-&gt;25-&gt;35-&gt;40-&gt;45-&gt;50 ]. The total number of nodes encountered is 7, therefore the maximum depth of the binary tree is 7.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains a single integer T, representing the number of test cases.\n\nThe first and only line of each test case contains the values of the nodes of the tree in the level order form ( -1 for NULL node) Refer to the example for further clarification.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Consider the following binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btreeexample-7152.jpg\" alt=\"example\"></p>\n\n<pre><code>The input of the tree shown in the above image will look like: \n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on. The input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer \u201cN\u201d representing the maximum depth of the input binary tree. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n0 &lt;= data &lt;= 10^9\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n1 2 3 -1 -1 -1 -1\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n1 2 -1 3 -1 4 -1 5 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n4\n5\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>In the first test case,  the given tree has the longest path along [ 1 -&gt; 2 ] or [ 1-&gt;3 ], hence the maximum depth is 2.\n\nIn the second test case, the given tree has the longest path along [ 1 -&gt; 2 -&gt; 4-&gt; 7 ], hence the maximum depth is 4.\n\nIn the thirds test case, the given tree is a left-skewed tree having the longest path along [ 1 -&gt; 2 -&gt; 3-&gt; 4 -&gt;5 ], hence the maximum depth is 5.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 -1 -1\n1 2 3 -1 -1 4 -1 -1 -1 \n1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n7\n3\n1    \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a binary tree, determine the maximum depth of the tree. The depth of a binary tree is the number of nodes along the longest path from the root node down to the farthest leaf node.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3000",
                    "0 <= data <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "root=[1, 2, 3, -1, -1, -1, -1]",
                        "output": "2",
                        "explanation": "The longest paths are [1 -> 2] and [1 -> 3], both with a depth of 2."
                    },
                    {
                        "input": "root=[1, 2, 3, 4, -1, 5, 6, -1, 7, -1, -1, -1, -1, -1, -1]",
                        "output": "4",
                        "explanation": "The longest path is [1 -> 2 -> 4 -> 7], with a depth of 4."
                    },
                    {
                        "input": "root=[1, 2, -1, 3, -1, 4, -1, 5, -1, -1, -1]",
                        "output": "5",
                        "explanation": "The longest path is [1 -> 2 -> 3 -> 4 -> 5], with a depth of 5."
                    },
                    {
                        "input": "root=[1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "3",
                        "explanation": "The tree is complete and balanced with a depth of 3."
                    },
                    {
                        "input": "root=[1, 2, -1, 3, -1, 4, -1, 5, -1, 6, -1, 7, -1, -1, -1]",
                        "output": "7",
                        "explanation": "The longest path is [1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7] with depth 7"
                    },
                    {
                        "input": "root=[1, 2, 3, -1, -1, 4, -1, -1, -1]",
                        "output": "3",
                        "explanation": "The longest path is [1->3->4], thus the depth is 3."
                    },
                    {
                        "input": "root=[1, -1, -1]",
                        "output": "1",
                        "explanation": "The tree only consists of root, thus the depth is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we recursively find the max depth of the left and the right child?</p>",
            "<p>Can you do it by traversing the tree and counting the nodes?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}