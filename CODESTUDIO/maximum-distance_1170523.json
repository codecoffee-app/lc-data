{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10160,
            "title": "Maximum Distance",
            "titleSlug": "maximum-distance_1170523",
            "content": "<h4 id=\"you-have-been-given-an-array-a-of-n-integers-you-need-to-find-the-maximum-value-of-j-i-subjected-to-the-constraint-of-a-i-a-j-where-i-and-j-are-the-indices-of-the-array\">You have been given an array &#39;A&#39; of N integers. You need to find the maximum value of j - i subjected to the constraint of A[i] &lt;= A[j], where \u2018i\u2019 and \u2018j\u2019 are the indices of the array.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>If &#39;A&#39; = {3, 5, 4, 1}\n\nthen the output will be 2.\nMaximum value occurs for the pair (3, 4)\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases are as follows.\n\nThe first line of each test case contains an integer \u2018N\u2019 which denotes the size of the array.\n\nThe second line of each test case contains elements of the array. The line consists of values of elements of the array separated by a single space.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the maximum value of j - i subjected to the condition A[i] &lt;= A[j].\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don\u2019t have to print anything; it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10 ^ 4\n-10 ^ 5 &lt;= A[i] &lt;= 10 ^ 5\n\nTime limit: 1 sec.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve it using O(N) time complexity?\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n9\n34 8 10 3 2 80 30 33 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>6\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>Maximum value occurs for the pair (8, 33)\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n10\n9 2 3 4 5 6 7 8 18 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>8\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>Maximum value occurs for the pair (9, 18)\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 91,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'A' of N integers, find the maximum difference between two indices j and i, such that A[i] <= A[j].",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^4",
                    "-10^5 <= A[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 9, a = [34, 8, 10, 3, 2, 80, 30, 33, 1]",
                        "output": "6",
                        "explanation": "The maximum difference occurs for the pair (8, 33) at indices 1 and 7 respectively.  7 - 1 = 6"
                    },
                    {
                        "input": "n = 10, a = [9, 2, 3, 4, 5, 6, 7, 8, 18, 0]",
                        "output": "8",
                        "explanation": "The maximum difference occurs for the pair (2, 18) at indices 1 and 8 respectively. 8-1 = 8"
                    },
                    {
                        "input": "n = 4, a = [3, 5, 4, 1]",
                        "output": "2",
                        "explanation": "The maximum difference occurs for the pair (3, 4) at indices 0 and 2 respectively. 2 - 0 = 2"
                    },
                    {
                        "input": "n = 5, a = [5, 4, 3, 2, 1]",
                        "output": "0",
                        "explanation": "In this case, the array is sorted in descending order. The maximum difference will always be 0, for any i where A[i] <= A[i]."
                    },
                    {
                        "input": "n = 5, a = [1, 2, 3, 4, 5]",
                        "output": "4",
                        "explanation": "The maximum difference occurs for the pair (1, 5) at indices 0 and 4 respectively. 4 - 0 = 4"
                    },
                    {
                        "input": "n = 1, a = [10]",
                        "output": "0",
                        "explanation": "With only one element, the maximum difference will always be 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of solving the problem in O(N) time complexity by using extra space?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n\r\n\tTime complexity: O(N)\r\n\tSpace complexity: O(N)\r\n\r\n\twhere 'N' is the size of the array.\r\n\r\n*/\r\n\r\nint maxDiff(vector<int> a, int n)\r\n{\r\n    // Create auxiliary vector.\r\n    vector <int> RMax (n, 0);\r\n\r\n    RMax[n - 1] = a[n -1] ;\r\n\r\n    // Store greatest element from right.\r\n    for(int j = n - 2; j >= 0; j--)\r\n    {\r\n        RMax[j] = max(a[j], RMax[j+1]);\r\n    }\r\n\r\n    int i = 0, j = 0;\r\n    int diff = -1;\r\n\r\n    // Start comparing both vectors.\r\n    while (j < n && i < n)\r\n    {\r\n        // If greater element is found on right side as per the given condition.\r\n        if (a[i] <= RMax[j])\r\n        {\r\n            // Update diff.\r\n            diff = max(diff, j - i);\r\n            j = j + 1;\r\n        }\r\n        else\r\n        {\r\n            // Move a step ahead in given array.\r\n            i = i + 1;\r\n        }\r\n    }\r\n\r\n    return diff;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n\r\n\tTime complexity: O(N)\r\n\tSpace complexity: O(N)\r\n\r\n\twhere 'N' is the size of the array.\r\n\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n\tpublic static int maxDiff(ArrayList<Integer> a, int n) {\r\n\r\n\t\t// Create an auxiliary ArrayList.\r\n\t\tArrayList<Integer> RMax = new ArrayList<Integer>(n);\r\n\r\n\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\tRMax.add(0);\r\n\t\t}\r\n\r\n\t\tRMax.set(n - 1, a.get(n - 1));\r\n\r\n\t\t// Store greatest element from right.\r\n\t\tfor (int j = n - 2; j >= 0; j--) {\r\n\t\t\tRMax.set(j, Math.max(a.get(j), RMax.get(j + 1)));\r\n\t\t}\r\n\r\n\t\tint i = 0, j = 0;\r\n\t\tint diff = -1;\r\n\r\n\t\t// Start comparing both ArrayLists.\r\n\t\twhile (j < n && i < n) {\r\n\r\n\t\t\tif (a.get(i).intValue() <= RMax.get(j).intValue()) {\r\n\t\t\t\tdiff = Math.max(diff, j - i);\r\n\t\t\t\tj = j + 1;\r\n\t\t\t} else {\r\n\t\t\t\t// Move a step ahead in given array.\r\n\t\t\t\ti = i + 1;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn diff;\r\n\t}\r\n\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time complexity: O(N)\r\n\tSpace complexity: O(N)\r\n\r\n\twhere 'N' is the size of the array.\r\n'''\r\n\r\ndef maxDiff(a, n):\r\n    \r\n    rmax = [0] * n\r\n    rmax[-1] = a[-1]\r\n    \r\n    # Store largest element to the right.\r\n    for i in range (n - 2, -1, -1):\r\n        rmax[i] = max(rmax[i + 1], a[i])\r\n        \r\n    res = -1\r\n    i = 0\r\n    j = 0\r\n    \r\n    # Compare both arrays.\r\n    while i < n and j < n:\r\n        if a[i] <= rmax[j]:\r\n            res = max(res, j - i)\r\n            j += 1\r\n        else:\r\n            i += 1\r\n            \r\n    return res\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}