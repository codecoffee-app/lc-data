{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 19773,
            "title": "Maximum Equality",
            "titleSlug": "maximum-equality_4537621",
            "content": "<h4 id=\"ninja-has-an-integer-array-a-of-n-elements-he-is-allowed-to-perform-at-most-x-operations-on-the-array\">Ninja has an integer array &#39;A&#39; of &#39;N&#39; elements. He is allowed to perform at most &#39;X&#39; operations on the array.</h4>\n\n<h4 id=\"in-one-operation-he-can-increment-any-one-element-of-the-array-by-1-an-operation-can-be-performed-repeatedly-on-the-same-element\">In one operation he can increment any one element of the array by 1. An operation can be performed repeatedly on the same element.</h4>\n\n<h4 id=\"he-wants-to-know-the-longest-subarray-he-can-obtain-in-which-all-the-elements-of-the-subarray-are-equal\">He wants to know the longest subarray he can obtain in which all the elements of the subarray are equal.</h4>\n\n<h4 id=\"a-subarray-is-a-contiguous-part-of-an-array\">A subarray is a contiguous part of an array.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>\u2018N\u2019 = &#39;7&#39;\n&#39;X&#39; = 5\nThe following line contains &#39;Ai&#39;, the &#39;ith&#39; element from the left.\n3 4 8 5 9 6 1\n\nAssuming 0-based indexing, Ninja can perform the operations on &#39;i&#39;=2, &#39;A[i]&#39; = 8 once and &#39;i&#39;=3, &#39;A[i]&#39; = 5 four times to obtain [3 4 9 9 9 6 1].\n\nThus, the longest subarray with equal elements that can be obtained is [9, 9, 9] i.e. of length 3.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39;, which denotes the number of test cases to be run. Then the test cases follow.\n\nThe first line of each test case contains two space-separated integers &#39;N&#39; and &#39;X&#39;, denoting the total number of elements and the maximum number of allowed operations respectively.\n\nThe second line of each test case contains &#39;N&#39; space-separated integers, the elements of the array &#39;A&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return the length of the longest subarray with the same elements that could be obtained after performing the operations.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n0 &lt;= X &lt; 2^31\n1 &lt;= Ai &lt;= 10^9  (0 &lt;= i &lt;= N-1)\n\nThe sum of &#39;N&#39; overall &#39;T&#39; does not exceed 10^5.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 2\n1 1 2 3\n3 0\n2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For test case 1:\nNinja can apply the operation once on A[0] and A[1] to get [2,2,2,3]. Hence, the longest subarray with all elements as the same is A[0:2] i.e. length 3.\n\n\nFor test case 2:\nSince all elements are distinct and &#39;X&#39; = 0 i.e. no operation is allowed. The longest subarray is only a single element.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n8 5\n1 3 2 2 1 3 4 2\n5 3\n1 2 1 1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `A` of size `N`, and a maximum number of operations `X`, determine the length of the longest contiguous subarray that can be made equal by incrementing elements within the subarray. Each increment operation increases a single element by 1.  You are allowed to perform at most `X` such operations in total.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "0 <= X < 2^31",
                    "1 <= Ai <= 10^9 for all 0 <= i < N"
                ],
                "testcases": [
                    {
                        "input": "n = 4, x = 2, a = [1, 1, 2, 3]",
                        "output": "3",
                        "explanation": "We can increment a[0] and a[1] by 1 to make them equal to 2.  The array becomes [2, 2, 2, 3], and the longest equal subarray is [2, 2, 2] with length 3."
                    },
                    {
                        "input": "n = 3, x = 0, a = [2, 3, 4]",
                        "output": "1",
                        "explanation": "Since no operations are allowed (X = 0) and all elements are distinct, the longest equal subarray can only be of length 1."
                    },
                    {
                        "input": "n = 8, x = 5, a = [1, 3, 2, 2, 1, 3, 4, 2]",
                        "output": "5",
                        "explanation": "We can increment a[0], a[2], a[3], a[4] to equal to 3 and leave the rest of the array elements unchanged. The array becomes [3, 3, 3, 3, 3, 3, 4, 2].  The longest equal subarray is [3,3,3,3,3] with length 5"
                    },
                    {
                        "input": "n = 5, x = 3, a = [1, 2, 1, 1, 1]",
                        "output": "4",
                        "explanation": "We can increment a[0] by 0, a[1] by -1, a[2] by 0 , and keep the rest of the array the same. Thus the array is [1,1,1,1,1] making the longest equivalent subarray of length 4."
                    },
                    {
                        "input": "n = 7, x = 5, a = [3, 4, 8, 5, 9, 6, 1]",
                        "output": "3",
                        "explanation": "Ninja can perform the operations on 'i'=2, 'A[i]' = 8 once and 'i'=3, 'A[i]' = 5 four times to obtain [3 4 9 9 9 6 1]. Thus, the longest subarray with equal elements that can be obtained is [9, 9, 9] i.e. of length 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>&nbsp;</strong>If we can obtain a length 'Y' satisfying the condition, can we obtain a length of 'Y-1'?</p>",
            "<p>How to find out the number of operations required in A[i : j]?</p>",
            "<p>How to expand and shrink a subarray window such that operations required are less than or equal to 'X' ?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}