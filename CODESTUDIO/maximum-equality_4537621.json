{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 19773,
            "title": "Maximum Equality",
            "titleSlug": "maximum-equality_4537621",
            "content": "<h4 id=\"ninja-has-an-integer-array-a-of-n-elements-he-is-allowed-to-perform-at-most-x-operations-on-the-array\">Ninja has an integer array &#39;A&#39; of &#39;N&#39; elements. He is allowed to perform at most &#39;X&#39; operations on the array.</h4>\n\n<h4 id=\"in-one-operation-he-can-increment-any-one-element-of-the-array-by-1-an-operation-can-be-performed-repeatedly-on-the-same-element\">In one operation he can increment any one element of the array by 1. An operation can be performed repeatedly on the same element.</h4>\n\n<h4 id=\"he-wants-to-know-the-longest-subarray-he-can-obtain-in-which-all-the-elements-of-the-subarray-are-equal\">He wants to know the longest subarray he can obtain in which all the elements of the subarray are equal.</h4>\n\n<h4 id=\"a-subarray-is-a-contiguous-part-of-an-array\">A subarray is a contiguous part of an array.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>\u2018N\u2019 = &#39;7&#39;\n&#39;X&#39; = 5\nThe following line contains &#39;Ai&#39;, the &#39;ith&#39; element from the left.\n3 4 8 5 9 6 1\n\nAssuming 0-based indexing, Ninja can perform the operations on &#39;i&#39;=2, &#39;A[i]&#39; = 8 once and &#39;i&#39;=3, &#39;A[i]&#39; = 5 four times to obtain [3 4 9 9 9 6 1].\n\nThus, the longest subarray with equal elements that can be obtained is [9, 9, 9] i.e. of length 3.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39;, which denotes the number of test cases to be run. Then the test cases follow.\n\nThe first line of each test case contains two space-separated integers &#39;N&#39; and &#39;X&#39;, denoting the total number of elements and the maximum number of allowed operations respectively.\n\nThe second line of each test case contains &#39;N&#39; space-separated integers, the elements of the array &#39;A&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return the length of the longest subarray with the same elements that could be obtained after performing the operations.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n0 &lt;= X &lt; 2^31\n1 &lt;= Ai &lt;= 10^9  (0 &lt;= i &lt;= N-1)\n\nThe sum of &#39;N&#39; overall &#39;T&#39; does not exceed 10^5.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 2\n1 1 2 3\n3 0\n2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For test case 1:\nNinja can apply the operation once on A[0] and A[1] to get [2,2,2,3]. Hence, the longest subarray with all elements as the same is A[0:2] i.e. length 3.\n\n\nFor test case 2:\nSince all elements are distinct and &#39;X&#39; = 0 i.e. no operation is allowed. The longest subarray is only a single element.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n8 5\n1 3 2 2 1 3 4 2\n5 3\n1 2 1 1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array 'A' of 'N' elements, you are allowed to perform at most 'X' operations. In one operation, you can increment any one element of the array by 1. The goal is to find the length of the longest subarray that can be obtained in which all the elements of the subarray are equal after performing at most 'X' operations. A subarray is a contiguous part of an array.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "0 <= X < 2^31",
                    "1 <= Ai <= 10^9  (0 <= i <= N-1)",
                    "The sum of 'N' overall 'T' does not exceed 10^5.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 2\n1 1 2 3",
                        "output": "3",
                        "explanation": "By applying the operation once on A[0] and A[1], the array becomes [2,2,2,3]. The longest subarray with equal elements is [2,2,2], which has a length of 3."
                    },
                    {
                        "input": "3 0\n2 3 4",
                        "output": "1",
                        "explanation": "Since 'X' is 0, no operations can be performed. The longest subarray with equal elements is any single element, so the length is 1."
                    },
                    {
                        "input": "8 5\n1 3 2 2 1 3 4 2",
                        "output": "5",
                        "explanation": null
                    },
                    {
                        "input": "5 3\n1 2 1 1 1",
                        "output": "4",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>&nbsp;</strong>If we can obtain a length 'Y' satisfying the condition, can we obtain a length of 'Y-1'?</p>",
            "<p>How to find out the number of operations required in A[i : j]?</p>",
            "<p>How to expand and shrink a subarray window such that operations required are less than or equal to 'X' ?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}