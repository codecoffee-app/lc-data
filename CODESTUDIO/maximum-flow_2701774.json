{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15769,
            "title": "Maximum Flow",
            "titleSlug": "maximum-flow_2701774",
            "content": "<h4 id=\"there-are-n-houses-in-the-ninja-land-numbered-from-1-to-n-you-are-given-m-pipes-connecting-the-houses-pipes-i-is-represented-as-from-to-capacity-your-task-is-to-find-the-maximum-flow-of-water-from-house-1-to-house-n\">There are \u2018N\u2019 houses in the Ninja Land, numbered from 1 to N. You are given M pipes connecting the houses. \u2018PIPES[i]\u2019 is represented as [FROM, TO, CAPACITY]. Your task is to find the maximum flow of water from house 1 to house N,</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>You are given \u2018N\u2019 = 4, \u2018M\u2019 = 3 and \u2018PIPES\u2019 = [[1, 2, 2], [1, 3, 4], [3, 4, 3]]. The maximum flow will be 3. The graph will look like this:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph0-13549.png\" alt=\"graph0\"></p>\n\n<pre><code>The maximum flow will be 3 because 4 units of water can flow from 1 -&gt; 3, and 3 units of water can flow from 3 -&gt; 4.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains a single integer &#39;T&#39;, representing the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019 and \u2018M\u2019, representing the numbers of houses and pipes, respectively.\n\nThe next line \u2018M\u2019 lines contain three space-separated integers representing a pipe.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the maximum flow of water from house 1 to house N.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 500\n1 &lt;= M &lt;= (N*(N-1))/2\n1 &lt;= PIPES[i][0] &lt;= N\n1 &lt;= PIPES[i][1] &lt;= N\n1 &lt;= PIPES[i][2] &lt;= 500\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 3\n1 2 2\n1 3 4\n3 4 3\n3 2\n1 2 1\n2 3 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, the graph will look like this:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph0-13549.png\" alt=\"graph0\"></p>\n\n<pre><code>The maximum flow will be 3 because 4 units of water can flow from 1 -&gt; 3, and 3 units of water can flow from 3 -&gt; 4.\n\nFor the second test case, the graph will look like this:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph1-13550.png\" alt=\"graph0\"></p>\n\n<pre><code>The maximum flow will be 1 as 1 unit of water can flow from 1 -&gt; 2 -&gt; 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 2\n1 2 2\n1 3 3\n4 4\n1 2 2\n1 3 2\n1 3 4\n3 4 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Ninja",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a network of 'N' houses (numbered 1 to N) connected by 'M' pipes, determine the maximum flow of water that can be sent from house 1 (the source) to house N (the sink). Each pipe 'i' is defined by a 'FROM' house, a 'TO' house, and a 'CAPACITY', representing the maximum amount of water that can flow through that pipe.  Implement a function to calculate this maximum flow.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 500",
                    "1 <= M <= (N*(N-1))/2",
                    "1 <= PIPES[i][0] <= N",
                    "1 <= PIPES[i][1] <= N",
                    "1 <= PIPES[i][2] <= 500"
                ],
                "testcases": [
                    {
                        "input": "n = 4, m = 3, pipes = [[1, 2, 2], [1, 3, 4], [3, 4, 3]]",
                        "output": "3",
                        "explanation": "The maximum flow is 3 because 4 units of water can flow from 1 -> 3, and 3 units of water can flow from 3 -> 4.  The bottleneck is the capacity of the pipe from house 3 to house 4."
                    },
                    {
                        "input": "n = 3, m = 2, pipes = [[1, 2, 1], [2, 3, 1]]",
                        "output": "1",
                        "explanation": "The maximum flow is 1 as 1 unit of water can flow from 1 -> 2 -> 3. The capacity of each pipe limits the total flow to 1."
                    },
                    {
                        "input": "n = 3, m = 2, pipes = [[1, 2, 2], [1, 3, 3]]",
                        "output": "3",
                        "explanation": "All 3 units can flow from 1 to 3, since there is no path necessary to N=3 from the house #2. "
                    },
                    {
                        "input": "n = 4, m = 4, pipes = [[1, 2, 2], [1, 3, 2], [1, 3, 4], [3, 4, 3]]",
                        "output": "3",
                        "explanation": "Here we have edges from 1->2, 1->3 and from 3->4. Max flow is 3, using the pipes 1->3 and 3->4."
                    },
                    {
                        "input": "n = 4, m = 4, pipes = [[1, 2, 2], [1, 3, 2], [3, 4, 3], [1, 4, 1]]",
                        "output": "3",
                        "explanation": "In this case a flow of 2 is going through 1->3->4, while a flow of 1 is going through 1->4"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the Ford-Fulkerson algorithm.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}