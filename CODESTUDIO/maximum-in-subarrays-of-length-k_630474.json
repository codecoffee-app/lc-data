{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7242,
            "title": "Maximum in Subarrays of length K",
            "titleSlug": "maximum-in-subarrays-of-length-k_630474",
            "content": "<h4 id=\"given-an-array-of-integers-of-size-n-and-a-number-k-print-the-maximum-value-of-each-subarray-of-length-k-in-the-array\">Given an array of integers of size N and a number K, print the maximum value of each subarray of length K in the array</h4>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line contains two single space separated integers, N and K.\n\nThe second line contains N single space separated integers denoting the elements of the array.\n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>A single line consisting of N - K + 1 single space separated integers denoting the maximum values of the K-sized subarrays where the subarrays are taken in a left to right fashion starting from the 0th index.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>0 &lt;= N &lt;= 5 * (10 ^ 5)\n1 &lt;= K &lt;= N\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>6 3\n10 5 2 7 8 7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>10 7 8 8\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>We get the values 10 7 8 8 because:\n10 = max(10, 5, 2)\n7 = max(5, 2, 7)\n8 = max(2, 7, 8)\n8 = max(7, 8, 7)\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>7 3 \n12 1 78 90 57 89 56\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>78 90 90 90 89\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr` of size `n` and an integer `k`, find the maximum value within each contiguous subarray of length `k` in `arr`. Print these maximum values separated by spaces.",
                "constraints": [
                    "0 <= n <= 5 * (10 ^ 5)",
                    "1 <= k <= n",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 6, arr=[10, 5, 2, 7, 8, 7], k = 3",
                        "output": "10 7 8 8",
                        "explanation": "The maximum values of the subarrays of size 3 are:\nmax(10, 5, 2) = 10\nmax(5, 2, 7) = 7\nmax(2, 7, 8) = 8\nmax(7, 8, 7) = 8"
                    },
                    {
                        "input": "n = 7, arr=[12, 1, 78, 90, 57, 89, 56], k = 3",
                        "output": "78 90 90 90 89",
                        "explanation": "The maximum values of the subarrays of size 3 are:\nmax(12, 1, 78) = 78\nmax(1, 78, 90) = 90\nmax(78, 90, 57) = 90\nmax(90, 57, 89) = 90\nmax(57, 89, 56) = 89"
                    },
                    {
                        "input": "n = 5, arr=[1, 2, 3, 4, 5], k = 1",
                        "output": "1 2 3 4 5",
                        "explanation": "The maximum value of each subarray of size 1 is just the element itself."
                    },
                    {
                        "input": "n = 5, arr=[5, 4, 3, 2, 1], k = 5",
                        "output": "5",
                        "explanation": "The maximum value of the entire array is 5."
                    },
                    {
                        "input": "n = 4, arr=[1, 3, -1, -3], k = 2",
                        "output": "3 -1 -1",
                        "explanation": "The maximum values of the subarrays of size 2 are:\nmax(1,3) = 3\nmax(3,-1) = -1\nmax(-1,-3) = -1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Is there a way to just check all k-subarrays one by one and find the maximum element for each?</p>",
            "<p>A double-ended queue is a data structure that can insert, delete and fetch elements at its two ends in O(1) time. Can you use it to design an algorithm that runs in O(N) time?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}