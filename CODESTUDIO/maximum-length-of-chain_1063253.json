{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9607,
            "title": "Maximum Length of Chain",
            "titleSlug": "maximum-length-of-chain_1063253",
            "content": "<h4 id=\"you-have-been-given-an-array-list-pairs-of-n-pairs-of-integers-in-every-pair-the-first-number-is-always-smaller-than-the-second-number-a-pair-a-b-can-follow-another-pair-c-d-in-a-chain-if-a-d-now-you-are-supposed-to-find-the-length-of-the-longest-chain-which-can-be-formed\">You have been given an array/list \u201cpairs\u201d of \u2018N\u2019 pairs of integers. In every pair, the first number is always smaller than the second number. A pair (a, b) can follow another pair (c, d) in a chain if a &gt; d. Now you are supposed to find the length of the longest chain which can be formed.</h4>\n\n<h4 id=\"you-can-select-pairs-in-any-order\">You can select pairs in any order.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019 denoting the number of test cases. Then each test case is as follows.\n\nThe first input line of each test case contains an integer \u2018N\u2019 which denotes the number of pairs.\n\nNext \u2018N\u2019 lines contain two space-separated integers denoting a pair.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the length of the longest chain which can be formed.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 1000 \n0 &lt;= pairs[i][0], pairs[i][1] &lt;= 10^6\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2\n3 6\n4 5\n2\n2 4\n6 9\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>1\n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample output 1 :</h5>\n\n<pre><code>For the first test case, one of the longest chains is (3, 6) of length 1.\n\nFor the second test case, the longest chain is (2, 4) -&gt; (6, 9) and its length is 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3\n1 2\n2 3\n3 4\n1\n7 8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>2\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of integer pairs, where the first element of each pair is always smaller than the second, determine the length of the longest chain that can be formed. A pair (a, b) can follow another pair (c, d) if a > d. You can select pairs in any order to form the chain.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 1000",
                    "0 <= pairs[i][0], pairs[i][1] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 2, pairs = [[3, 6], [4, 5]]",
                        "output": "1",
                        "explanation": "One of the longest chains is (3, 6) of length 1."
                    },
                    {
                        "input": "N = 2, pairs = [[2, 4], [6, 9]]",
                        "output": "2",
                        "explanation": "The longest chain is (2, 4) -> (6, 9) and its length is 2."
                    },
                    {
                        "input": "N = 3, pairs = [[1, 2], [2, 3], [3, 4]]",
                        "output": "2",
                        "explanation": "The longest chain is (1, 2) -> (3, 4) with length 2."
                    },
                    {
                        "input": "N = 1, pairs = [[7, 8]]",
                        "output": "1",
                        "explanation": "The only chain is (7, 8) with length 1."
                    },
                    {
                        "input": "N = 4, pairs = [[5, 24], [39, 60], [5, 28], [27, 40]]",
                        "output": "3",
                        "explanation": "One of the longest chains is (5,24) -> (27, 40) -> (39, 60)."
                    },
                    {
                        "input": "N = 5, pairs = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]",
                        "output": "1",
                        "explanation": "Longest chain contains one element"
                    },
                    {
                        "input": "N = 4, pairs = [[1,10],[2,3],[4,5],[6,7]]",
                        "output": "4",
                        "explanation": "The longest chain is (1,10) is not part of the chain. chain will be (2,3) -> (4,5) -> (6,7)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of breaking the problem into sub-problems?</p>",
            "<p>Can you optimize your recursive solution using some extra space?</p>",
            "<p>Can you think of doing it iteratively to avoid stack size problems?</p>",
            "<p>Can you think of a greedy approach?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}