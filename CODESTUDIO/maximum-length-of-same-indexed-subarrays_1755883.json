{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13620,
            "title": "Maximum length of same indexed subarrays",
            "titleSlug": "maximum-length-of-same-indexed-subarrays_1755883",
            "content": "<h4 id=\"given-two-arrays-a-and-b-and-an-integer-c-the-task-is-to-find-the-maximum-possible-length-say-k-of-the-same-indexed-subarrays-such-that-the-sum-of-the-maximum-element-in-the-k-length-subarray-in-b-with-the-product-between-k-and-sum-of-the-k-length-subarray-in-a-does-not-exceed-c\">Given two arrays \u2018A\u2019 and \u2018B\u2019 and an integer \u2018C\u2019, the task is to find the maximum possible length, say K, of the same indexed subarrays such that the sum of the maximum element in the K-length subarray in \u2018B\u2019 with the product between K and sum of the K-length subarray in \u2018A\u2019 does not exceed \u2018C\u2019.</h4>\n\n<h4 id=\"more-formally-you-have-to-find-the-maximum-length-subarray-which-starts-and-end-at-the-same-point-in-a-and-b-and-the-sum-of-maximum-element-of-b-in-that-subarray-with-the-product-of-the-length-of-the-subarray-and-sum-of-a-subarray-in-a-is-less-than-or-equal-to-c\">More Formally you have to find the maximum length subarray, which starts and end at the same point in \u2018A\u2019 and \u2018B\u2019, and the sum of, maximum element of \u2018B\u2019 in that subarray, with the product of the length of the subarray and sum of a subarray in \u2018A\u2019 is less than or equal to \u2018C\u2019.</h4>\n\n<h4 id=\"for-example\">For example</h4>\n\n<pre><code>Given:\n\u2018N\u2019 = 6, \u2018C\u2019 = 23\n\u2018A\u2019[] = {5, 19, 13, 2, 4, 0} \n\u2018B\u2019[] = {10, 4, 7, 4, 5, 14}\nThe max-length subarray will be 2, consider the subarray from 3 to 4 (0-based indexing) and here, the subarray sum of \u2018A\u2019 = 6 max element in \u2018B\u2019 = 5. Therefore 6*2 + 5 = 17, Which is less than 23. Hence 2 is the final answer. \n</code></pre>\n\n<h4 id=\"if-there-are-multiple-answers-you-can-choose-any-subarray\">If there are multiple answers, you can choose any subarray.</h4>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018N,\u2019 where \u2018N\u2019 is the number of elements of the array and \u2018C\u2019 where \u2018C\u2019 is the given integer.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers, denoting the array elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, You are supposed to return an integer that denotes the maximum length subarray.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= \u2018N\u2019 &lt;= 5000\n0 &lt;= &#39;ARR[i]\u2019 &lt;= 10 ^ 6\n\nTime Limit: 1sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n6 23\n5 19 13 2 4 0 \n10 4 7 4 5 14 \n5 46\n15 18 2 18 3 \n14 15 9 19 1 \n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>2\n1  \n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>In the first test case, The max-length subarray will be 2, consider the subarray from 3 to 4 (0-based indexing), and here, the subarray sum of \u2018A\u2019 = 6 max element in \u2018B\u2019 = 5. Therefore 6*2 + 5 = 17, Which is less than 23. Hence 2 is the final answer. \n\nIn the second test case, The max-length subarray will be 1, consider the subarray from 2 to 2 (0-based indexing), and here, the subarray sum of \u2018A\u2019 = 2 max element in \u2018B\u2019 = 9. Therefore 2*2 + 9 = 13, Which is less than 46. Hence 1 is the final answer. \n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n6 36\n4 17 12 16 5 12 \n1 10 4 14 13 8 \n5 16\n3 4 13 0 9 \n19 16 16 17 19\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>1\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integer arrays, `a` and `b`, of size `n`, and an integer `c`, determine the maximum length `k` of a same-indexed subarray (starting at the same index in both arrays) such that the sum of the maximum element in the k-length subarray of `b` and the product of `k` and the sum of the k-length subarray of `a` is less than or equal to `c`. Return this maximum length `k`. If no such subarray exists return 0.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 10",
                    "1 <= \u2018N\u2019 <= 5000",
                    "0 <= 'ARR[i]' <= 10 ^ 6"
                ],
                "testcases": [
                    {
                        "input": "n = 6, a = [5, 19, 13, 2, 4, 0], b = [10, 4, 7, 4, 5, 14], c = 23",
                        "output": "2",
                        "explanation": "The max-length subarray will be 2. Consider the subarray from index 3 to 4 (0-based indexing).  The subarray sum of 'a' is 2 + 4 = 6. The maximum element in 'b' is max(4, 5) = 5. Therefore, 6 * 2 + 5 = 17, which is less than 23. Hence 2 is the final answer."
                    },
                    {
                        "input": "n = 5, a = [15, 18, 2, 18, 3], b = [14, 15, 9, 19, 1], c = 46",
                        "output": "1",
                        "explanation": "The max-length subarray will be 1. Consider the subarray from index 2 to 2 (0-based indexing). The subarray sum of 'a' is 2. The maximum element in 'b' is 9. Therefore, 2 * 1 + 9 = 11, which is less than 46. Hence 1 is the final answer."
                    },
                    {
                        "input": "n = 6, a = [4, 17, 12, 16, 5, 12], b = [1, 10, 4, 14, 13, 8], c = 36",
                        "output": "1",
                        "explanation": "The subarray of length 1 starting from index 0 satisfies the condition (4 * 1 + 1 <= 36). Checking for length 2 would require a = 4 + 17 = 21, b = max(1,10) = 10 and 21*2 + 10 = 52 > 36. Thus 1 is the correct answer."
                    },
                    {
                        "input": "n = 5, a = [3, 4, 13, 0, 9], b = [19, 16, 16, 17, 19], c = 16",
                        "output": "0",
                        "explanation": "Even a subarray of length 1 starting at index 0 (a[0] * 1 + b[0] = 3 * 1 + 19 = 22) exceeds the limit c=16. Therefore, the maximum length subarray is 0."
                    },
                    {
                        "input": "n = 3, a = [1, 2, 3], b = [4, 5, 6], c = 100",
                        "output": "3",
                        "explanation": "For k=3: sum(a) = 1+2+3=6; max(b) = 6. Condition: 6*3 + 6 = 24 <= 100. Hence 3."
                    },
                    {
                        "input": "n = 3, a = [100, 2, 3], b = [4, 5, 6], c = 10",
                        "output": "0",
                        "explanation": "Even for k=1: sum(a) = 100; max(b) = 4. Condition: 100*1 + 4 = 104 > 10. Hence 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;Can we check for each length?</p>",
            "<p>Can we use a binary search?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}