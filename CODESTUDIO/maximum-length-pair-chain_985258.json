{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9396,
            "title": "Maximum length pair chain ",
            "titleSlug": "maximum-length-pair-chain_985258",
            "content": "<h4 id=\"you-are-given-n-pairs-of-integers-in-which-the-first-number-is-always-smaller-than-the-second-number-i-e-in-pair-a-b-a-b-always-now-we-define-a-pair-chain-as-the-continuous-arrangement-of-pairs-in-which-a-pair-c-d-can-follow-another-pair-a-b-only-when-b-c\">You are given \u2018N\u2019 pairs of integers in which the first number is always smaller than the second number i.e in pair (a,b) -&gt;  a &lt; b always. Now we define a pair chain as the continuous arrangement of pairs in which a pair (c,d) can follow another pair (a,b) only when b &lt; c.</h4>\n\n<h4 id=\"find-the-length-of-the-longest-pair-chain-that-can-be-formed-using-the-given-pairs\">Find the length of the longest pair chain that can be formed using the given pairs.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Given Pairs =  [3,4], [1,2], [2,3].\n\nThe length of the maximum chain will be 2. The longest chain is [1,2] -&gt; [3,4].\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. You can select a pair only once.\n\n2. You needn\u2019t use up all the given pairs.\n\n3. You can select pairs in any order. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single positive integer \u2018N\u2019 denoting the total number of the pairs.\n\nNext \u2018N\u2019 lines of each test case contain two space-separated integers \u2018a\u2019 and \u2018b\u2019 denoting the elements of the pair.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return a positive integer denoting the maximum length of the pair chain that can be possible while satisfying the given condition.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything, it has been already taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^4 \n-10^9 &lt;= a,b &lt;= 10^9\n\nWhere \u2018a\u2019 and \u2018b\u2019 is the elements of the pair.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\n5 8 \n3 4\n3 4\n2\n2 3\n-1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h5>\n\n<pre><code>In test case 1, The max length pair chain will be [3,4], -&gt; [5,8] as 4 &lt; 5 that means we can join these two pairs and form a chain of length two.\n\nIn test case 2, To join two pairs (a,b), (c,d) we need b &lt; c but this condition is not satisfied by the given pairs in the input hence the max length will be 1 and the max length pair chain will be [2,3] or [-1,2].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1\n10 20\n4\n4 6\n2 3\n9 12\n15 20\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h5>\n\n<pre><code>In test case 1, The max length pair chain will be [10,20] form a chain of length one.\n\nIn test case 2, The max length pair chain will be [2,3] -&gt; [4,6] -&gt; [9,12] -&gt; [15,20], that means we can join these two pairs as it satisfies the condition and form a chain of length four.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 16,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'N' pairs of integers (a, b) where a < b, find the length of the longest pair chain that can be formed. A pair (c, d) can follow (a, b) in the chain only if b < c. Each pair can be used only once, and you don't need to use all the given pairs. The order in which you select the pairs is arbitrary.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^4",
                    "-10^9 <= a, b <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "3\n5 8\n3 4\n3 4",
                        "output": "2",
                        "explanation": "The longest chain is [3, 4] -> [5, 8], resulting in a length of 2 because 4 < 5."
                    },
                    {
                        "input": "2\n2 3\n-1 2",
                        "output": "1",
                        "explanation": "No pair can follow another pair. The longest chain consists of a single pair, either [2, 3] or [-1, 2], resulting in a length of 1."
                    },
                    {
                        "input": "1\n10 20",
                        "output": "1",
                        "explanation": "There is only one pair, so the longest chain has length 1."
                    },
                    {
                        "input": "4\n4 6\n2 3\n9 12\n15 20",
                        "output": "4",
                        "explanation": "The longest chain is [2, 3] -> [4, 6] -> [9, 12] -> [15, 20], which has a length of 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try checking all the possible follow up pairs while forming a chain.</p>",
            "<p>Use some extra space to memoize the above recursive solution.</p>",
            "<p>Think about LIS.</p>",
            "<p>Sort the pairs according to the second element.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}