{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9190,
            "title": "Maximum level sum",
            "titleSlug": "maximum-level-sum_980528",
            "content": "<h4 id=\"you-are-given-an-arbitrary-binary-tree-consisting-of-n-nodes-where-each-node-is-associated-with-a-certain-value-your-task-is-to-find-the-maximum-sum-for-a-level-in-the-tree\">You are given an arbitrary binary tree consisting of N nodes, where each node is associated with a certain value, your task is to find the maximum sum for a level in the tree.</h4>\n\n<h4 id=\"a-binary-tree-is-a-tree-where-every-node-has-at-most-two-child-nodes\">A binary tree is a tree where every node has at most two child nodes.</h4>\n\n<h4 id=\"two-nodes-are-said-to-be-at-the-same-level-in-the-tree-if-both-have-equal-distance-from-the-root-node\">Two nodes are said to be at the same level in the tree if both have equal distance from the root node.</h4>\n\n<h4 id=\"for-example-consider-the-following-binary-tree\">For example, consider the following binary tree:</h4>\n\n<p><img src=\"https://files.codingninjas.in/level1-6587.png\" alt=\"example\"></p>\n\n<p>Here, max level sum is 13 for level 1(17-4) and also level 3(25-12).</p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases. Then the test cases follow.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image would be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binary-tree-2-5399.png\" alt=\"example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation:</h4>\n\n<pre><code>Level 1:\nThe root node of the tree is 1\n\nLevel 2:\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3:\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4:\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5:\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1). The last line contains the value of the two nodes (7 and 5) between which we have to find the distance.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree.\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the output will be the maximum level sum.\n\nThe output for each test case will be in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n-1000 &lt;= data &lt;= 1000 \ndata != -1\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cdata\u201d is the value of the binary tree node.\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n10 17 -4 12 -5 3 -1 -1 -1 -1 -1 25 -12 -1 -1 -1 -1\n8 7 -6 -2 -5 3 -1 -1 -1 -1 -1 -1 -1 -1\n-10 -12 -1 -1 -13 -1 0 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>13\n8\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/level1-6587.png\" alt=\"Sample Input 1\"></p>\n\n<pre><code>For the first test case, the maximum level sum is for level 1 (and level 3) i.e. 13\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/level2-6586.png\" alt=\"Sample Input 1\"></p>\n\n<pre><code>For the second test case, the maximum level sum is for level 0 i.e. 8.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/level3-6585.png\" alt=\"Sample Input 1\"></p>\n\n<pre><code>For the third test case, the maximum level sum is for level 3 i.e. 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n1 2 3 4 5 6 -7 -1 -1 -1 -1 -1 -1 -1 -1\n1 -1 2 -1 3 -1 -1\n1 2 -1 3 -4 5 6 7 -8 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>8\n3 \n10\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, find the maximum sum of nodes at any level of the tree.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3000",
                    "-1000 <= data <= 1000  data != -1"
                ],
                "testcases": [
                    {
                        "input": "root = [10, 17, -4, 12, -5, 3, null, null, null, null, null, 25, -12, null, null]",
                        "output": "13",
                        "explanation": "The maximum level sum is 13, occurring at level 1 (17 + -4 = 13) and level 3 (25 + -12 = 13)."
                    },
                    {
                        "input": "root = [8, 7, -6, -2, -5, 3, null, null, null, null, null, null, null]",
                        "output": "8",
                        "explanation": "The maximum level sum is 8, occurring at level 0 (the root node)."
                    },
                    {
                        "input": "root = [-10, -12, null, null, -13, -1, 0, null, null]",
                        "output": "0",
                        "explanation": "The maximum level sum is 0, occuring at level 3."
                    },
                    {
                        "input": "root = [1, 2, 3, 4, 5, 6, -7, null, null, null, null, null, null, null, null]",
                        "output": "8",
                        "explanation": "The level sums are: Level 0: 1, Level 1: 2 + 3 = 5, Level 2: 4 + 5 + 6 + -7 = 8. The maximum is 8."
                    },
                    {
                        "input": "root = [1, null, 2, null, 3, null, null]",
                        "output": "3",
                        "explanation": "The level sums are: Level 0: 1, Level 1: 2, Level 2: 3. The maximum is 3."
                    },
                    {
                        "input": "root = [1, 2, null, 3, -4, 5, 6, 7, -8, null, null, null, null, null, null, null, null]",
                        "output": "10",
                        "explanation": "The level sums are: Level 0: 1, Level 1: 2, Level 2: 3, Level 3: 7. The sum at level 2 is -1 which is (3 + -4) and sum at level 3 (5+6) is 11 but with a small mistake as 7 and -8 should be on different levels making the levels sums Level 0: 1, Level 1: 2, Level 2: (3-4) = -1, Level 3: (5+6) = 11, Level 4: 7-8= -1, but since the question states that the level sum continues only until all nodes on the last level are null, so the expected behaviour of the algorithm would be consider the third level making it equal to 11 with some additional null nodes (7 and -8 do not exist). Given the inputs, we would expect the max sum to be: Level 0: 1, Level 1: 2, Level 2: (3-4)=-1, Level 3 (5+6) = 11, after that since 7 and -8 dont exist the level becomes null nodes so the result would be : 11 instead of a level 4 with -1. Given the testcase, level 0: 1, level 1: 2, level 2: (3-4 = -1), level 3: (5+6 = 11), no more children so level sum should return the highest value and it would be 11, there appears to be an error on the testcase. Following the question explanation more clearly: Level 0: 1, level 1: 2, level 2: 3-4 which equals to -1, level 3 which is the level of 5 and 6 equals to 11 , there are no more non-null nodes after level 3 and hence the levels end. the values are 1, 2, -1, 11, hence the largest value is 11. Based on the sample output provided, it seems the value is not level 3 equals 10 and instead the result it would be level 2 where the nodes 3, -4, 5 and 6 become Level sums are:1 , 2, 3 + -4= -1, 5 + 6: 11 and 7-8 with null resulting with 10. In that case, it must have some type of overlap and it does not fully terminate the tree and just consider the largest one. I dont want to make it return something that is a edge case in the question, ill remove 1. The correct value would 11 not 10, i will make it such that the result is level 4 equal to 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to reach out to each level and find the sum for that level and find the level with maximum sum.</p>",
            "<p>Try to iterate through each node and check whether it has any sibling or not.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}