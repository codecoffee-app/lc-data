{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12425,
            "title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
            "titleSlug": "maximum-nesting-depth-of-two-valid-parentheses-strings_1461222",
            "content": "<h4 id=\"you-are-given-a-valid-parentheses-string-vps-vpsseq-you-have-to-minimize-the-depth-of-a-vps-by-splitting-all-pairs-of-parentheses-into-two-disjoint-subsequences-x-and-y-such-that-x-and-y-are-vpss-and-length-of-x-length-of-y-length-of-vpsseq\">You are given a valid parentheses string (VPS), \u2018VPSSEQ\u2019. You have to minimize the depth of a VPS by splitting all pairs of parentheses into two disjoint subsequences, \u2018X\u2019 and \u2018Y\u2019, such that \u2018X\u2019 and \u2018Y\u2019 are VPS&#39;s and length of \u2018X\u2019 + length of \u2018Y\u2019 = length of \u2018VPSSEQ\u2019.</h4>\n\n<h4 id=\"your-task-is-to-return-an-array-result-of-size-vpsseq-length-that-encodes-such-a-choice-of-x-and-y-if-vpsseq-i-is-part-of-x-result-i-0-else-result-i-1\">Your task is to return an array, \u2019result\u2019  (of size \u2018VPSSEQ.length\u2019) that encodes such a choice of \u2018X\u2019 and \u2018Y\u2019: if \u2018VPSSEQ[ i ]\u2019 is part of \u2018X\u2019, RESULT[ i ] = 0, else RESULT[ i ] = 1.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1) A valid parentheses string (VPS) is a string containing balanced parentheses, i.e. an opening parenthesis is followed by exactly one closing parenthesis, and any closing parenthesis is preceded by at least one unbalanced opening parenthesis.\nFor example, \u201c(())()\u201d, \u201c\u201d, \u201c()(())()((()))(())\u201d are VPS whereas \u201c(()\u201d, \u201c)()(\u201d, \u201c((\u201d are not VPS.\n\n2) The nesting depth of any VPS is defined as follows:\n   2.1) depth(&quot;&quot;) = 0.\n   2.2) depth(X + Y) = max(depth(X), depth(Y)), where \u2018X\u2019 and \u2018Y\u2019 are VPS&#39;s.\n   2.3) depth(&quot;(&quot; + X + &quot;)&quot;) = 1 + depth(X), where \u2018X\u2019 is a VPS.\n\n3) Given VPSSEQ= &quot;(())()&quot; can be split in two disjoint VPS sequences in a number of ways. Like, X = &quot;(())()&quot; and Y = &quot;\u201d, X = \u201c(())\u201d and Y = \u201c()\u201d, X = \u201c()\u201d and Y = \u201c()()\u201d, etc. Out of all, X = \u201c()\u201d and Y = \u201c()()\u201d will have minimum depth of 1.\n\n4) A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 representing the length of the string \u2018VPSSEQ\u2019.\n\nThe last line of each test case contains a string of parenthesis, \u2018VPSSEQ\u2019 of length \u2018N\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, return an array, \u2019RESULT\u2019  (of size \u2018VPSSEQ.length\u2019) that encodes such a choice of \u2018X\u2019 and \u2018Y\u2019: if \u2018VPSSEQ[ i ]\u2019 is part of \u2018X\u2019, RESULT[ i ] = 0, else RESULT[ i ] = 1. \n\nSince multiple answers may exist, you may return any of them. The encoded sequence will be internally interpreted and if correct then \u2018true\u2019 will be printed otherwise \u2018false\u2019 will be printed.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;=  N &lt;= 5000\nVPSSEQ[ i ] \u2208 { \u2018(\u2018, \u2018)\u2019}\n\u2018VPSSEQ\u2019 is a VPS.\n\nWhere \u2018VPSSEQ\u2019, and \u2018VPSSEQ[ i ]\u2019 is the \u2018i\u2019th element in the \u2018VPSSEQ\u2019 string.\n\nTime limit: 1 sec\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n6\n(())()\n8\n()()(())\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>true\ntrue\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1 :</h5>\n\n<pre><code>Test Case 1 :  \nGiven VPSSEQ = \u201c(())()\u201d. One way to minimize the depth is \u2018X\u2019 should contain parentheses at position 1, 3, 5 and 6, and \u2018Y\u2019 should contain parentheses at positions 2, 4.\nSo, X = \u201c()()\u201d and Y = \u201c()\u201d, resulting in the depth of 1, which is minimum. For this the encoded sequence will be \u201c0 1 0 1 0 0\u201d, which will be internally interpreted as correct answer and thus \u201ctrue\u201d will be printed.\n\nTest Case 2 : \nGiven VPSSEQ = \u201c()()(())\u201d. One way to minimize the depth is \u2018X\u2019 should contain parentheses at position 1, 2, 3, 4, 5 and 7, and \u2018Y\u2019 should contain parentheses at positions 6, 8.\nSo, X = \u201c()()()\u201d and Y = \u201c()\u201d, resulting in the depth of 1, which is minimum. For this the encoded sequence will be \u201c0 0 0 0 0 1 0 1\u201d, which will be internally interpreted as correct answer and thus \u201ctrue\u201d will be printed\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n10\n(())((()))\n4\n(())\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>true\ntrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a valid parentheses string (VPS) 'vpsSeq' of length 'n', divide the pairs of parentheses into two disjoint subsequences, 'X' and 'Y', such that both 'X' and 'Y' are also VPSs and the combined length of 'X' and 'Y' equals the length of 'vpsSeq'. The goal is to minimize the maximum nesting depth between the two subsequences. Return an array of integers 'result' of size 'n', where result[i] = 0 if vpsSeq[i] belongs to 'X', and result[i] = 1 if vpsSeq[i] belongs to 'Y'. Multiple valid solutions might exist, and you can return any one of them.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 5000",
                    "vpsSeq[i] \u2208 { \u2018(\u2018, \u2018)\u2019}"
                ],
                "testcases": [
                    {
                        "input": "n = 6, vpsSeq = \"(())()\"",
                        "output": "true",
                        "explanation": "One possible solution is X = \"()()\" and Y = \"()\", which results in a maximum depth of 1.  The corresponding result array would be [0, 1, 0, 1, 0, 0], internally verified as correct."
                    },
                    {
                        "input": "n = 8, vpsSeq = \"()()(())\"",
                        "output": "true",
                        "explanation": "One possible solution is X = \"()()()\" and Y = \"()\", resulting in a maximum depth of 1. The corresponding result array would be [0, 0, 0, 0, 0, 1, 0, 1], internally verified as correct."
                    },
                    {
                        "input": "n = 10, vpsSeq = \"(())((()))\"",
                        "output": "true",
                        "explanation": "A valid output exists, indicating that the function correctly split the VPS into two subsequences X and Y and returned a valid encoded array such that max(depth(X), depth(Y)) is minimized."
                    },
                    {
                        "input": "n = 4, vpsSeq = \"(())\"",
                        "output": "true",
                        "explanation": "A valid output exists, indicating that the function correctly split the VPS into two subsequences X and Y and returned a valid encoded array such that max(depth(X), depth(Y)) is minimized."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you divide the parenthesis in \u2018X\u2019 and \u2018Y\u2019 depending on their depth in the string, \u2018VPSSEQ\u2019?</p>",
            "<p>Minimum depth can be achieved by putting half of the parentheses in \u2018X\u2019 and another half in \u2018Y\u2019.</p>",
            "<p>Can you greedily split the parentheses in \u2018X\u2019 and \u2018Y\u2019?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}