{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8863,
            "title": "Maximum node in between",
            "titleSlug": "maximum-node-in-between_920450",
            "content": "<h4 id=\"given-a-bst-binary-search-tree-with-n-number-of-distinct-nodes-and-two-nodes-x-and-y-which-are-definitely-present-in-the-input-bst-you-need-to-find-the-value-of-the-maximum-node-that-lies-in-between-the-nodes-x-and-y-both-inclusive-in-the-given-bst\">Given a BST (Binary search tree) with N number of distinct nodes and two nodes \u2018X\u2019 and \u2018Y\u2019 (which are definitely present in the input BST). You need to find the value of the maximum node that lies in between the nodes \u2018X\u2019 and \u2018Y\u2019 (both inclusive) in the given BST.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-which-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure which has the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. All the elements of the Binary Search Tree are unique.\n\n2. You can\u2019t use the same node value/element of BST twice.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, which denotes the number of test cases. Then each test case follows. \n\nThe first line of every test case contains elements of the Binary Search Tree in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nThe second line of each test case contains two integers denoting the value of nodes \u2018X\u2019 and \u2018Y\u2019.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<p><img src=\"https://files.codingninjas.in/tree-pic-11255.png\"></p>\n\n<pre><code>The input for the tree depicted in the below image would be :\n\n20 10 35 5 15 30 42 -1 13 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, print a single integer denoting the value of maximum node lies between \u2018X\u2019 and \u2018Y\u2019.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don\u2019t need to print the output, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5    \n1 &lt;= N &lt;= 10 ^ 3\n0 &lt;= DATA &lt;= 10 ^ 6\n1 &lt;= X, Y &lt;= 10 ^ 6 \n\nWhere \u2018DATA\u2019 denotes the value of each node in the given tree.\n\u2018N\u2019 denotes the number of nodes in BST.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2 \n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n2 10\n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n8 7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>10\n8\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/image-5979-9894.jpg\"></p>\n\n<pre><code>For the first test case, the maximum value of node lying between 2 and 10 is 10    \n\nFor the second test case, the maximum value of nodes lying between 8 and 7 is 8.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n7 3 10 1 5 9 -1 -1 -1 -1 6 -1 -1 -1 -1\n3 9\n7 3 10 1 5 9 -1 -1 -1 -1 6 -1 -1 -1 -1\n1 6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>10\n6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) with N distinct nodes and two nodes 'X' and 'Y', both guaranteed to be present in the BST, find the maximum node value within the range [X, Y] (inclusive). A BST is defined by the following properties:\n\n*   The left subtree of a node contains only nodes with data less than the node's data.\n*   The right subtree of a node contains only nodes with data greater than the node's data.\n*   Both the left and right subtrees must also be binary search trees.\n\nNote:\n\n1.  All elements in the BST are unique.\n2.  A node value cannot be used more than once.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10^3",
                    "0 <= DATA <= 10^6",
                    "1 <= X, Y <= 10^6",
                    "Where \u2018DATA\u2019 denotes the value of each node in the given tree.",
                    "\u2018N\u2019 denotes the number of nodes in BST.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n2 10",
                        "output": "10",
                        "explanation": "The BST contains the nodes [2, 5, 6, 7, 8, 10]. The maximum node value in the range [2, 10] is 10."
                    },
                    {
                        "input": "8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n8 7",
                        "output": "8",
                        "explanation": "The BST contains the nodes [2, 5, 6, 7, 8, 10]. The maximum node value in the range [7, 8] is 8."
                    },
                    {
                        "input": "7 3 10 1 5 9 -1 -1 -1 -1 6 -1 -1 -1 -1\n3 9",
                        "output": "10",
                        "explanation": "The BST contains the nodes [1, 3, 5, 6, 7, 9, 10]. The maximum node value in the range [3, 9] is 9. However, 10 also lies in the path, so 10 becomes the maximum element."
                    },
                    {
                        "input": "7 3 10 1 5 9 -1 -1 -1 -1 6 -1 -1 -1 -1\n1 6",
                        "output": "6",
                        "explanation": "The BST contains the nodes [1, 3, 5, 6, 7, 9, 10]. The maximum node value in the range [1, 6] is 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of the solution using the Lowest Common Ancestor of the two given nodes.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}