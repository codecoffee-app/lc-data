{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10179,
            "title": "Maximum of all subarrays of size k.",
            "titleSlug": "maximum-of-all-subarrays-of-size-k_1170789",
            "content": "<h4 id=\"you-are-given-an-array-consisting-of-n-non-negative-integers-and-an-integer-k-denoting-the-length-of-a-subarray-your-task-is-to-determine-the-maximum-elements-for-each-subarray-of-size-k\">You are given an array consisting of N non-negative integers, and an integer K denoting the length of a subarray, your task is to determine the maximum elements for each subarray of size K.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>A subarray is a contiguous subset of an array.\n\nThe array may contain duplicate elements.\n\nThe given array follows 0-based indexing.\n\nIt is guaranteed that there exists at least one subarray of size K.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer T denoting the number of test cases. \n\nThe first line of each test case contains two space-separated integers N and K, as described in the problem statement.\n\nThe second line of each test case contains N space-separated integers, representing the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case print in a new line, X space-separated integers, where X is the number of possible subarrays of size K, and the ith integer denote the maximum element of the ith possible subarray of size K starting from the left. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n1 &lt;= K &lt;= N\n1 &lt;= arr[i] &lt;= 10^9\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n4 2\n10 7 8 11\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>10 8 11\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>The first subarray of length 2 is [10,7] and the maximum of it is 10, then the next subarray of length 2 is [7,8] and the maximum of it is 8, and the last subarray of size 2 is [8,11] and the maximum of it is 11, So the output is [10,8,11].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n4 3 \n11 3 9 6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>11 9\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 23,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of N non-negative integers and an integer K, representing the length of a subarray, find the maximum element for each subarray of size K. The array uses 0-based indexing and may contain duplicate elements. It is guaranteed that at least one subarray of size K exists.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "1 <= K <= N",
                    "1 <= arr[i] <= 10^9",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "4 2\n10 7 8 11",
                        "output": "10 8 11",
                        "explanation": "For the array [10, 7, 8, 11] and K = 2, the subarrays are [10, 7], [7, 8], and [8, 11]. The maximum elements of these subarrays are 10, 8, and 11, respectively."
                    },
                    {
                        "input": "4 3\n11 3 9 6",
                        "output": "11 9",
                        "explanation": "For the array [11, 3, 9, 6] and K = 3, the subarrays are [11, 3, 9] and [3, 9, 6]. The maximum elements of these subarrays are 11 and 9, respectively."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><i>Consider each window of size K one by one.</i></p>",
            "<p><i>Try to optimize the time complexity by using some data structures.</i></p>",
            "<p><i>We can try to optimize the time complexity by using a much better data structure ( Deque ).&nbsp;</i></p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}