{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7852,
            "title": "Maximum Path Sum Between Two Leaves",
            "titleSlug": "maximum-path-sum-between-two-leaves_794950",
            "content": "<h4 id=\"you-are-given-a-non-empty-binary-tree-where-each-node-has-a-non-negative-integer-value-return-the-maximum-possible-sum-of-path-between-any-two-leaves-of-the-given-tree\">You are given a non-empty binary tree where each node has a non-negative integer value. Return the maximum possible sum of path between any two leaves of the given tree.</h4>\n\n<h4 id=\"the-path-is-also-inclusive-of-the-leaf-nodes-and-the-maximum-path-sum-may-or-may-not-go-through-the-root-of-the-given-tree\">The path is also inclusive of the leaf nodes and the maximum path sum may or may not go through the root of the given tree.</h4>\n\n<h4 id=\"if-there-is-only-one-leaf-node-in-the-tree-then-return-1\">If there is only one leaf node in the tree, then return -1.</h4>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases. Then the test cases follow.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binarytree3-5126.png\" alt=\"Example Input\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer representing the maximum path sum between two leaf nodes of the given tree.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n0 &lt;= data &lt;= 10^5\n\nWhere &#39;N&#39; is the number of nodes in the tree.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n5 6 2 4 3 -1 -1 9 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>26\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/binarytree2-5129.png\" alt=\"Sample Input 1\"></p>\n\n<pre><code>The paths between the leaves are as follows :\n(1). 9-&gt;4-&gt;7               (sum = 20)\n(2). 9-&gt;4-&gt;6-&gt;3            (sum = 22)\n(3). 9-&gt;4-&gt;6-&gt;5-&gt;2         (sum = 26)\n(4). 7-&gt;4-&gt;6-&gt;3            (sum = 20)\n(5). 7-&gt;4-&gt;6-&gt;5-&gt;2         (sum = 24)\n(6). 3-&gt;6-&gt;5-&gt;2            (sum = 16)\n\nOut of all the above 6 paths, path 9-&gt;4-&gt;6-&gt;5-&gt;3 is the maximum sum path with the sum 26.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n2 3 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>The given tree has only one leaf node (3), thus the answer is -1.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 76,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-empty binary tree where each node has a non-negative integer value, find the maximum possible sum of a path between any two leaf nodes in the tree.  The path must include the leaf nodes, and the maximum path sum may or may not pass through the root of the tree. If the tree contains only one leaf node, return -1.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 5000",
                    "0 <= data <= 10^5",
                    "Where 'N' is the number of nodes in the tree.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 6 2 4 3 -1 -1 9 7 -1 -1 -1 -1 -1 -1",
                        "output": "26",
                        "explanation": "The maximum path sum between two leaf nodes is 26.  One such path is 9 -> 4 -> 6 -> 5 -> 2."
                    },
                    {
                        "input": "2 3 -1 -1 -1",
                        "output": "-1",
                        "explanation": "Since the tree only contains one leaf node (3), the output is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>What is the maximum sum path between the 2 leaves passing through a given node ?</p>",
            "<p>Can the solution be optimized if we traverse the tree in a bottom-up manner ?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}