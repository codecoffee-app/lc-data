{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7973,
            "title": "Maximum Path Sum in the matrix",
            "titleSlug": "maximum-path-sum-in-the-matrix_797998",
            "content": "<h4 id=\"you-have-been-given-an-n-m-matrix-filled-with-integer-numbers-find-the-maximum-sum-that-can-be-obtained-from-a-path-starting-from-any-cell-in-the-first-row-to-any-cell-in-the-last-row\">You have been given an N*M matrix filled with integer numbers, find the maximum sum that can be obtained from a path starting from any cell in the first row to any cell in the last row.</h4>\n\n<h4 id=\"from-a-cell-in-a-row-you-can-move-to-another-cell-directly-below-that-row-or-diagonally-below-left-or-right-so-from-a-particular-cell-row-col-we-can-move-in-three-directions-i-e\">From a cell in a row, you can move to another cell directly below that row, or diagonally below left or right. So from a particular cell (row, col), we can move in three directions i.e.</h4>\n\n<pre><code>Down: (row+1,col)\nDown left diagonal: (row+1,col-1)\nDown right diagonal: (row+1, col+1)\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39;, which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains two Integers &#39;N&#39; and &#39;M&#39; where &#39;N&#39; denotes the number of rows in the given matrix. And &#39;M&#39; denotes the number of columns in the given matrix.\n\nThe next &#39;N&#39; line of each test case contains &#39;M&#39; space-separated integers denoting the cell elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case/query, print the maximum sum that can be obtained by taking a path as described above.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 100\n1 &lt;= M &lt;= 100\n-10^4 &lt;= matrix[i][j] &lt;= 10^4\n\nWhere &#39;T&#39; is the number of test cases.\nWhere &#39;N&#39; is the number of rows in the given matrix, and &#39;M&#39; is the number of columns in the given matrix.\nAnd, matrix[i][j] denotes the value at (i,j) cell in the matrix.\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"input-1\">Input 1 :</h5>\n\n<pre><code>2\n4 4\n1 2 10 4\n100 3 2 1\n1 1 20 2\n1 2 2 1\n3 3\n10 2 3\n3 7 2\n8 1 5\n</code></pre>\n\n<h5 id=\"output-1\">Output 1 :</h5>\n\n<pre><code>105\n25\n</code></pre>\n\n<h5 id=\"explanation-of-input-1\">Explanation Of Input 1 :</h5>\n\n<pre><code>In the first test case for the given matrix,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/maxpath-5169.jpg\" alt=\"Example\"></p>\n\n<pre><code>The maximum path sum will be 2-&gt;100-&gt;1-&gt;2, So the sum is 105(2+100+1+2).\n\nIn the second test case for the given matrix, the maximum path sum will be 10-&gt;7-&gt;8, So the sum is 25(10+7+8).\n</code></pre>\n\n<h5 id=\"input-2\">Input 2 :</h5>\n\n<pre><code>2\n3 3\n1 2 3\n9 8 7\n4 5 6\n4 6\n10 10 2 -13 20 4\n1 -9 -81 30 2 5\n0 10 4 -79 2 -10\n1 -5 2 20 -11 4\n</code></pre>\n\n<h5 id=\"output-2\">Output 2 :</h5>\n\n<pre><code>17\n74\n</code></pre>\n\n<h5 id=\"explanation-of-input-2\">Explanation Of Input 2 :</h5>\n\n<pre><code>In the first test case for the given matrix, the maximum path sum will be 3-&gt;8-&gt;6, So the sum is 17(3+8+6).\n\nIn the second test case for the given matrix, the maximum path sum will be 20-&gt;30-&gt;4-&gt;20, So the sum is 74(20+30+4+20).\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 245,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an N*M matrix filled with integers, find the maximum sum achievable from a path starting at any cell in the first row and ending at any cell in the last row. You can move from a cell (row, col) to the following cells:\n\n*   Directly below: (row+1, col)\n*   Diagonally below left: (row+1, col-1)\n*   Diagonally below right: (row+1, col+1)",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 100",
                    "1 <= M <= 100",
                    "-10^4 <= matrix[i][j] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "2\n4 4\n1 2 10 4\n100 3 2 1\n1 1 20 2\n1 2 2 1\n3 3\n10 2 3\n3 7 2\n8 1 5",
                        "output": "105\n25",
                        "explanation": "In the first test case, the maximum path sum is achieved by the path 2 -> 100 -> 1 -> 2, with a sum of 105.\nIn the second test case, the maximum path sum is achieved by the path 10 -> 7 -> 8, with a sum of 25."
                    },
                    {
                        "input": "2\n3 3\n1 2 3\n9 8 7\n4 5 6\n4 6\n10 10 2 -13 20 4\n1 -9 -81 30 2 5\n0 10 4 -79 2 -10\n1 -5 2 20 -11 4",
                        "output": "17\n74",
                        "explanation": "In the first test case, the maximum path sum is achieved by the path 3 -> 8 -> 6, with a sum of 17.\nIn the second test case, the maximum path sum is achieved by the path 20 -> 30 -> 4 -> 20, with a sum of 74."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Does it make sense to explore all the possible paths?</p>",
            "<p>Can you optimise your recursive solution using some extra space?</p>",
            "<p>Can you do it without using any extra space?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "\r\n/*\r\n    Time Complexity : O(N*M)\r\n    Space Complexity : O(1)\r\n    Where \u2018N\u2019 is the number of rows and \u2018M\u2019 is the number of columns in the given matrix.\r\n*/\r\n\r\n#include <climits>\r\n\r\nint getMaxPathSum(vector<vector<int>> &matrix)\r\n{\r\n    int n = matrix.size(), m = matrix[0].size();\r\n\r\n    //  Iterate over matrix\r\n    for (int row = 1; row < n; row++)\r\n    {\r\n        for (int col = 0; col < m; col++)\r\n        {\r\n            //  Get maximum of all valid path\r\n            matrix[row][col] = matrix[row][col] + max(matrix[row - 1][col], max(matrix[row - 1][max(0, col - 1)], matrix[row - 1][min(m - 1, col + 1)]));\r\n        }\r\n    }\r\n\r\n    //  Get the max path sum\r\n    int maxPathSum = INT_MIN;\r\n    for (int col = 0; col < m; col++)\r\n    {\r\n        if (maxPathSum < matrix[n - 1][col])\r\n        {\r\n            maxPathSum = matrix[n - 1][col];\r\n        }\r\n    }\r\n    return maxPathSum;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "\r\n/*\r\n    Time Complexity : O(N*M)\r\n    Space Complexity : O(1)\r\n    Where N is the number of rows and M is the number of columns in the given matrix.\r\n*/\r\n\r\npublic class Solution {\r\n\r\n\tpublic static int getMaxPathSum(int[][] matrix) {\r\n\t\tint n = matrix.length, m = matrix[0].length;\r\n\r\n\t\tfor (int row = 1; row < n; row++) {\r\n\t\t\tfor (int col = 0; col < m; col++) {\r\n\t\t\t\tmatrix[row][col] = matrix[row][col] + Math.max(matrix[row - 1][col],\r\n\t\t\t\t\t\tMath.max(matrix[row - 1][Math.max(0, col - 1)], matrix[row - 1][Math.min(m - 1, col + 1)]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Get the max path sum\r\n\t\tint maxPathSum = Integer.MIN_VALUE;\r\n\t\tfor (int col = 0; col < m; col++) {\r\n\t\t\tif (maxPathSum < matrix[n - 1][col]) {\r\n\t\t\t\tmaxPathSum = matrix[n - 1][col];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn maxPathSum;\r\n\t}\r\n\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "''' \r\n    Time Complexity : O(N*M)\r\n    Space Complexity : O(1)\r\n\r\n    Where \u2018N\u2019 is the number of rows and \u2018M\u2019 is the number of columns in the given matrix.\r\n'''\r\n\r\nfrom sys import stdin, setrecursionlimit\r\nsetrecursionlimit(10**7)\r\n\r\n\r\ndef getMaxPathSum(matrix):\r\n\r\n    n = len(matrix)\r\n    m = len(matrix[0])\r\n\r\n    #   Iterate over matrix\r\n    for row in range(1, n):\r\n        for col in range(m):\r\n            #   Get maximum of all valid path\r\n            matrix[row][col] = matrix[row][col] + max(matrix[row - 1][col], matrix[row - 1][max(\r\n                0, col - 1)], matrix[row - 1][min(m - 1, col + 1)])\r\n\r\n    #   Get the max path sum\r\n    maxPathSum = float('-inf')\r\n\r\n    for col in range(m):\r\n        if (maxPathSum < matrix[n - 1][col]):\r\n            maxPathSum = matrix[n - 1][col]\r\n\r\n    return maxPathSum\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#   taking inpit using fast I/O\r\ndef takeInput() :\r\n    n_x = stdin.readline().strip().split(\" \")\r\n    n = int(n_x[0].strip())\r\n    m = int(n_x[1].strip())\r\n\r\n    matrix=[list(map(int, stdin.readline().strip().split(\" \"))) for row in range(n)]\r\n\r\n    return matrix, n, m\r\n\r\n\r\n#   main\r\nT = int(input())\r\nwhile (T > 0):\r\n    T -= 1\r\n    matrix, n, m = takeInput()\r\n    print(getMaxPathSum(matrix))\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}