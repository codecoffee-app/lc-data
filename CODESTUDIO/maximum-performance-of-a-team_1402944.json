{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12075,
            "title": "Maximum Performance of a Team",
            "titleSlug": "maximum-performance-of-a-team_1402944",
            "content": "<h4 id=\"ninja-is-forming-a-team-of-at-most-k-engineers-out-of-the-n-engineers-for-each-engineer-ninja-has-his-speed-and-his-efficiency-he-wants-to-form-the-team-so-that-the-performance-of-the-team-is-maximal\">Ninja is forming a team of at most \u2018K\u2019 engineers out of the \u2018N\u2019 engineers. For each engineer, Ninja has his \u2018SPEED\u2019 and his \u2018EFFICIENCY\u2019. He wants to form the team so that the \u2018performance\u2019 of the team is maximal.</h4>\n\n<h4 id=\"the-performance-of-the-team-is-defined-as-the-sum-of-the-speed-of-the-engineers-present-in-the-team-multiplied-by-the-minimum-efficiency-among-the-engineers-in-the-same-team-since-ninja-is-busy-with-other-work-he-wants-your-help-to-solve-this-task\">The \u2018performance\u2019 of the team is defined as the sum of the \u2018SPEED\u2019 of the engineers present in the team multiplied by the minimum \u2018EFFICIENCY\u2019 among the engineers in the same team. Since Ninja is busy with other work, he wants your help to solve this task.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019, which denotes the number of test cases to be run. Then, the T test cases follow. \n\nThe first line of each test case contains two positive integers, \u2018N\u2019, and \u2018K\u2019, denoting the total number of engineers and the maximum number of engineers in a team.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers, \u2018SPEED[i]\u2019, representing the ith engineer\u2019s speed.\n\nThe third line of each test case contains \u2018N\u2019 space-separated integers, \u2018EFFICIENCY[i]\u2019, representing the ith engineer\u2019s efficiency.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the \u2018maximum performance\u2019 of the team modulo \u201810^9 + 7\u2019, as described in the problem statement.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. You do not need to print anything. It has already been taken care of. Just implement the given function.\n2. Since the answer can be a big number, you have to return its modulo \u201810^9 + 7\u2019.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= \u2018N\u2019 &lt;= 10^4\n1 &lt;= \u2018K\u2019 &lt;= \u2018N\u2019\n1 &lt;= \u2018SPEED[i]\u2019, \u2018EFFICIENCY[i]\u2019 &lt;= 10^4\nSPEED.length == EFFICIENCY.length  == N\n\nWhere \u2018SPEED[i]\u2019  is the speed of the i-th engineer,  and \u2018EFFICIENCY[i]\u2019 is the efficiency of the i-th engineer.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n5 2\n3 2 4 3 1\n5 2 4 3 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>28\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>We get the maximum performance of the team by selecting the following engineers:\n1. 1st engineer, speed = 3, efficiency = 5.\n2. 3rd engineer, speed = 4, efficiency = 4.\nSo, the performance of the team = (3 + 4) * min(5,4) = 28. There is no other way to get a performance greater than 28.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n5 2\n3 2 4 1 2\n5 1 2 3 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>15\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>We get the team\u2019s maximum performance by selecting only one engineer, i.e., the first engineer, speed = 3, and efficiency = 5. So, the performance become = 3 * 5 = 15. \n\nNotice that we can also form a team with the two engineers, but it is not possible to get the performance greater than 15 in any other way. \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given N engineers, each with a SPEED and EFFICIENCY, form a team of at most K engineers to maximize the team's performance. The performance is calculated as the sum of the engineers' speeds multiplied by the minimum efficiency among the selected engineers.  Determine the maximum possible team performance modulo 10^9 + 7.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 10",
                    "1 <= \u2018N\u2019 <= 10^4",
                    "1 <= \u2018K\u2019 <= \u2018N\u2019",
                    "1 <= \u2018SPEED[i]\u2019, \u2018EFFICIENCY[i]\u2019 <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "N = 5, K = 2, speed = [3, 2, 4, 3, 1], efficiency = [5, 2, 4, 3, 2]",
                        "output": "28",
                        "explanation": "Selecting the 1st (speed=3, efficiency=5) and 3rd (speed=4, efficiency=4) engineers gives the maximum performance.  (3 + 4) * min(5, 4) = 7 * 4 = 28."
                    },
                    {
                        "input": "N = 5, K = 2, speed = [3, 2, 4, 1, 2], efficiency = [5, 1, 2, 3, 2]",
                        "output": "15",
                        "explanation": "Selecting only the 1st engineer (speed=3, efficiency=5) yields the highest performance. 3 * 5 = 15.  Any team of two will have a lower minimum efficiency, resulting in a lower overall performance."
                    },
                    {
                        "input": "N = 3, K = 3, speed = [1, 2, 3], efficiency = [3, 2, 1]",
                        "output": "12",
                        "explanation": "Selecting all three engineers gives the performance: (1+2+3) * min(3,2,1) = 6 * 1 = 6. Selecting the first two: (1+2) * min(3,2) = 3 * 2 = 6. Selecting the first and third: (1+3) * min(3,1) = 4 * 1 = 4. Selecting the second and third: (2+3) * min(2,1) = 5 * 1 = 5. Selecting just the first: 1 * 3 = 3. Selecting just the second: 2 * 2 = 4. Selecting just the third: 3 * 1 = 3. If K=2, select [1,3] = (1+3) * min(3,1) = 4 If K=1, select [1] = 1 * 3 = 3 [2] = 2*2 = 4 [3] = 3*1=3 If K=3: (1+2+3) * min(3,2,1) = 6. So answer should be 6."
                    },
                    {
                        "input": "N = 4, K = 1, speed = [10, 5, 2, 8], efficiency = [7, 9, 4, 6]",
                        "output": "45",
                        "explanation": "Choosing engineer 2 (speed 5, efficiency 9) gives the maximum performance: 5 * 9 = 45."
                    },
                    {
                        "input": "N = 6, K = 3, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2]",
                        "output": "63",
                        "explanation": "Choose engineers [1, 5, 4]: speed = [10, 5, 1], efficiency = [4, 7, 9]. Sum of speed = 10+5+1=16, min eff = 4, perf = 16 * 4 = 64. If we pick [1,5,4]: perf = (10+5+9) * 4 = 96 NOT valid. The engineer speed and efficiency does correspond. Choose 1, 4, 5: sum(10, 1, 5) = 16, min(4, 9, 7) = 4, 16*4 = 64. Choose 0, 1: (2+10) * 4 = 48 Choose 0, 4: (2+5) * 5 = 35 Choose 0, 5: (2+8) * 2 = 20.  Looks like 1, 4, 5 is NOT optimum.  0, 1, 4: (2+10+5)*3=51 0,1,5 : (2+10+8)*2 = 40. pick 0, 1 and 4 gives perf = (2+10+5) * min(5, 4, 7) = 17 * 4 = 68. We made an error here. Not (7,9) = 63, we are saying engineer 1 to pick for perf. 10+5+8 = 23 min is 2, 46"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of sorting based on efficiency.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}