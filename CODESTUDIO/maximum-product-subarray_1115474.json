{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9992,
            "title": "Maximum Product Subarray",
            "titleSlug": "maximum-product-subarray_1115474",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-integers-your-task-is-to-find-the-contiguous-subarray-within-the-array-which-has-the-largest-product-of-its-elements-you-have-to-report-this-maximum-product\">You are given an array \u201carr&#39;&#39; of integers. Your task is to find the contiguous subarray within the array which has the largest product of its elements. You have to report this maximum product.</h4>\n\n<pre><code>An array c is a subarray of array d if c can be obtained from d by deletion of several elements from the beginning and several elements from the end.\n\nFor e.g.- The non-empty subarrays of an array [1,2,3] will be- [1],[2],[3],[1,2],[2,3],[1,2,3]. \n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>If arr = {-3,4,5}.\nAll the possible non-empty contiguous subarrays of \u201carr\u201d are {-3}, {4}, {5}, {-3,4}, {4,5} and {-3,4,5}.\nThe product of these subarrays are -3, 4, 5, -12, 20 and -60 respectively.\nThe maximum product is 20. Hence, the answer is 20.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve this in linear time and constant space complexity?\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then, the T test cases follow.\nThe first line of each test case contains a single integer N, denoting the number of elements of the array \u201carr\u201d.\nThe second line of each test case contains N space separated integers denoting the elements of the array \u201carr\u201d.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the maximum product of the contiguous non-empty subarray of the array \u201carr\u201d.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n-100 &lt;= arr[i] &lt;= 100\nwhere N is the size of the array \u201carr\u201d.\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\n3 5 -2 -4\n5\n2 4 3 5 6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>120\n720\n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for sample 1:</h5>\n\n<pre><code>For the first test case, all the possible non-empty contiguous subarrays of \u201carr\u201d are {3}, {5}, {-2}, {-4}, {3,5}, {5,-2}, {-2,-4}, {3,5,-2}, {5,-2,-4} and {3,5,-2,-4}. \nThe product of these subarrays are 3, 5, -2, -4, 15, -10, 8, -30, 40 and 120 respectively.\nSo, the maximum product is 120.\nFor the second test case, since all the elements in the array \u201carr\u201d are positive, we get the maximum product subarray by multiplying all the elements in the array. So, the maximum product is 720.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4\n6 0 2 -4\n3\n-1 -3 -4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>6\n12\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 92,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the contiguous subarray with the largest product. Return this maximum product.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 5000",
                    "-100 <= arr[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "n = 4, nums = [3, 5, -2, -4]",
                        "output": "120",
                        "explanation": "The subarray {3, 5, -2, -4} has the largest product, which is 120."
                    },
                    {
                        "input": "n = 5, nums = [2, 4, 3, 5, 6]",
                        "output": "720",
                        "explanation": "The entire array {2, 4, 3, 5, 6} has the largest product, which is 720."
                    },
                    {
                        "input": "n = 4, nums = [6, 0, 2, -4]",
                        "output": "6",
                        "explanation": "The subarray {6} has the largest product, which is 6.  Note that a zero will always reset any product you're tracking."
                    },
                    {
                        "input": "n = 3, nums = [-1, -3, -4]",
                        "output": "12",
                        "explanation": "The subarray {-3, -4} has the largest product, which is 12."
                    },
                    {
                        "input": "n = 5, nums = [-2, 3, -4, 0, 5]",
                        "output": "24",
                        "explanation": "The subarray [3, -4] or [-2, 3, -4] has largest product equal to 24."
                    },
                    {
                        "input": "n = 3, nums = [0, 2, 0]",
                        "output": "2",
                        "explanation": "The maximum product is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a brute force solution to find the product of all the possible subarrays of the array.</p>",
            "<p>Think of a brute force solution to find the product of all the possible subarrays of the array starting from each index.</p>",
            "<p>Think of a solution using the fact that the product of an even number of negative integers is a positive integer.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity - O(N)\n    Space Complexity - O(1)\n\n    Where N is size of the array \"arr\".\n*/\n\n#include <algorithm>\n\nint maximumProduct(vector<int> &arr, int n){\n    \n    int ans = INT_MIN;\n\n    int productFromFront = 1, productFromBack = 1;\n\n    for(int i = 0; i < n; i++){\n        productFromFront = productFromFront * arr[i];\n        productFromBack = productFromBack * arr[n-i-1];\n\n        // Store the maximum of ans, productFromFront and productFromBack in the ans variable.\n        ans = max({ans, productFromFront, productFromBack});\n\n        // If any of the products become 0, make them 1 again.\n        if(productFromFront == 0){\n            productFromFront = 1;\n        }\n        if(productFromBack == 0){\n            productFromBack = 1;\n        }\n    }\n\n    return ans;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity - O(N)\n    Space Complexity - O(1)\n\n    Where N is size of the array \"arr\".\n*/\n\nimport java.util.ArrayList;\n\npublic class Solution {\n\tpublic static int maximumProduct(ArrayList<Integer> arr, int n) {\n\n\t\tint ans = Integer.MIN_VALUE;\n\n\t\tint productFromFront = 1, productFromBack = 1;\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tproductFromFront = productFromFront * arr.get(i);\n\t\t\tproductFromBack = productFromBack * arr.get(n - i - 1);\n\n\t\t\t// Store the maximum of ans, productFromFront and productFromBack in the ans\n\t\t\t// variable.\n\t\t\tans = Math.max(ans, Math.max(productFromFront, productFromBack));\n\n\t\t\t// If any of the products become 0, make them 1 again.\n\t\t\tif (productFromFront == 0) {\n\t\t\t\tproductFromFront = 1;\n\t\t\t}\n\t\t\tif (productFromBack == 0) {\n\t\t\t\tproductFromBack = 1;\n\t\t\t}\n\t\t}\n\n\t\treturn ans;\n\t}\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity - O(N)\n    Space Complexity - O(1)\n\n    Where N is size of the array \"arr\".\n'''\n\ndef maximumProduct(arr, n):\n    \n    ans = -100000000000\n    \n    productFromFront = 1\n    productFromBack = 1;\n\n    for i in range(0, n):\n        \n        productFromFront = productFromFront * arr[i]\n        productFromBack = productFromBack * arr[n-i-1]\n\n        # Store the maximum of ans, productFromFront and productFromBack in the ans variable.\n        ans = max(ans, productFromFront, productFromBack)\n\n        # If any of the products become 0, make them 1 again.\n        if productFromFront == 0:\n            productFromFront = 1\n        if productFromBack == 0:\n            productFromBack = 1\n\n\n    return ans\n\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}