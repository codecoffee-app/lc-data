{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15486,
            "title": "Maximum Profit",
            "titleSlug": "maximum-profit_2542081",
            "content": "<h4 id=\"bob-has-joined-a-part-time-job-as-a-delivery-man-he-needs-to-deliver-n-packages-with-a-i-value-within-k-days\">Bob has joined a part-time job as a delivery man. He needs to deliver \u2018N\u2019 packages with \u2018A[i]\u2019 value within \u2018K\u2019 days.</h4>\n\n<h4 id=\"in-one-day-bob-can-deliver-as-many-packages-as-he-wants-but-the-i-th-package-cannot-be-delivered-until-i-1-th-package-is-not-delivered\">In one day, Bob can deliver as many packages as he wants, but the \u2018i\u2019th package cannot be delivered until \u2018(i - 1)\u2019th package is not delivered.</h4>\n\n<h4 id=\"each-day-bob-earns-the-maximum-value-of-the-packages-bob-delivered-during-that-day\">Each day, Bob earns the maximum value of the packages Bob delivered during that day.</h4>\n\n<h4 id=\"can-you-help-bob-to-find-a-way-to-deliver-his-packages-to-maximize-his-earning\">Can you help Bob to find a way to deliver his packages to maximize his earning?</h4>\n\n<h4 id=\"note-if-bob-does-not-deliver-any-packages-someday-his-earning-will-be-0-on-that-day\">Note: If Bob does not deliver any packages someday, his earning will be 0 on that day.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains \u2018T\u2019, denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019 &amp; \u2018K\u2019.\n\nThe following line contains \u2018N\u2019 space-separated integers denoting the array \u2018A\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an integer denoting the maximum amount Bob can earn after all deliveries.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= K &lt;= N &lt;= 10^5\n1 &lt;= A[i] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5 1\n1 2 3 4 5\n5 5\n1 2 3 4 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>5\n15\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>In the first test case, Bob will deliver all packages on the first day, so his earning will be max(1, 2, 3, 4, 5) = 5.\n\nIn the second test case, Bob will deliver one package each day, so his earning will be 1 + 2 + 3 + 4 + 5 = 15.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n6 3\n7 7 7 7 7 7\n5 5\n1 2 3 7 8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>21\n21\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "A delivery man, Bob, has to deliver N packages with varying values A[i] over K days. He can deliver multiple packages per day, but only in sequential order (i.e., package i can only be delivered after package i-1). Bob earns the maximum value of the packages he delivers each day. The goal is to determine the maximum total earnings Bob can achieve by strategically delivering the packages over K days. If Bob doesn't deliver any packages on a particular day, he earns 0 for that day.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= K <= N <= 10^5",
                    "1 <= A[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 5, k = 1, a = [1, 2, 3, 4, 5]",
                        "output": "5",
                        "explanation": "Bob delivers all 5 packages on day 1. His earning is max(1, 2, 3, 4, 5) = 5."
                    },
                    {
                        "input": "n = 5, k = 5, a = [1, 2, 3, 4, 5]",
                        "output": "15",
                        "explanation": "Bob delivers one package each day. His earnings are 1 + 2 + 3 + 4 + 5 = 15."
                    },
                    {
                        "input": "n = 6, k = 3, a = [7, 7, 7, 7, 7, 7]",
                        "output": "21",
                        "explanation": "Bob can deliver two packages each day. His earnings are 7+7+7=21."
                    },
                    {
                        "input": "n = 5, k = 5, a = [1, 2, 3, 7, 8]",
                        "output": "21",
                        "explanation": "Bob delivers one package each day. His earnings are 1 + 2 + 3 + 7 + 8 = 21."
                    },
                    {
                        "input": "n = 4, k = 2, a = [1, 5, 2, 4]",
                        "output": "9",
                        "explanation": "Bob delivers [1,5] in day 1 and [2,4] in day 2. Earning = max(1,5)+max(2,4)= 5+4 =9"
                    },
                    {
                        "input": "n = 3, k = 1, a = [10, 5, 2]",
                        "output": "10",
                        "explanation": "Deliver all in one day. Max(10,5,2) = 10"
                    },
                    {
                        "input": "n = 3, k = 3, a = [10, 5, 2]",
                        "output": "17",
                        "explanation": "Deliver each one in a single day. 10+5+2 = 17"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we check the earnings for all possible configurations?</p>",
            "<p>Are there any overlapping subproblems?</p>",
            "<p>Is there any relationship between the answer when \u2018K\u2019 = \u2018X\u2019 and when \u2018K\u2019 = \u2018X - 1\u2019?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}