{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22703,
            "title": "Maximum Score of Stones ",
            "titleSlug": "maximum-score-of-stones_5826704",
            "content": "<h4 id=\"you-and-your-friend-are-playing-a-game-you-are-given-n-stones-each-stone-has-a-value-associated-with-it-the-value-of-each-stone-is-given-by-a-0-indexed-array-nums-where-nums-i-denotes-the-value-of-the-i-th-stone\">You and your friend are playing a game. You are given \u2018N\u2019 stones. Each stone has a value associated with it. The value of each stone is given by a 0-indexed array \u2018NUMS\u2019 where \u2018NUMS[ i ]\u2019 denotes the value of the \u2018i\u2019th stone.</h4>\n\n<h4 id=\"the-game-starts-with-you-and-your-friend-are-standing-on-the-k-th-stone-the-game-consists-of-two-parts\">The game starts with you and your friend are standing on the \u2018K\u2019th stone. The game consists of two parts:</h4>\n\n<h4 id=\"first-part-consists-of-you-jumping-forward-and-collecting-the-value-of-stones-from-any-i-th-stone-you-can-jump-to-i-1-th-stone-or-i-2-th-stone-and-then-collect-the-value-of-that-stone-you-can-stop-at-any-stone-anytime-you-can-make-0-or-more-than-0-moves-of-this-kind\">First part consists of you jumping forward and collecting the value of stones. From any \u2018i\u2019th stone you can jump to (\u2018i\u2019 + 1)th stone or (\u2018i\u2019 + 2)th stone and then collect the value of that stone. You can stop at any stone anytime. You can make 0 or more than 0 moves of this kind.</h4>\n\n<h4 id=\"second-part-consists-of-your-friend-jumping-backward-the-stone-at-which-you-stopped-your-friend-will-start-jumping-backward-from-that-stone-and-collect-the-value-of-the-stones-from-any-i-th-stone-your-friend-can-jump-to-i-1-th-stone-or-i-2-th-stone-and-then-collect-the-value-of-that-stone-your-friend-can-make-0-or-more-than-0-moves-of-this-kind\">Second part consists of your friend jumping backward. The stone at which you stopped, your friend will start jumping backward from that stone and collect the value of the stones. From any \u2018i\u2019th stone your friend can jump to (\u2018i\u2019 - 1)th stone or (\u2018i\u2019 - 2)th stone and then collect the value of that stone. Your friend can make 0 or more than 0 moves of this kind.</h4>\n\n<h4 id=\"the-index-value-after-the-jump-should-be-inside-the-boundary-of-0-to-n-1-inclusive\">The index value after the jump should be inside the boundary of 0 to \u2018N\u2019-1 inclusive.</h4>\n\n<h4 id=\"the-game-ends-when-your-friend-reaches-the-0-th-stone-find-the-maximum-score-you-and-your-friend-can-collect\">The game ends when your friend reaches the \u20180\u2019th stone. Find the maximum score you and your friend can collect.</h4>\n\n<h4 id=\"note-you-don-t-count-the-value-of-starting-stone-k-at-which-you-are-initially-standing-but-if-after-some-operation-you-again-return-to-the-k-th-stone-then-you-add-that-value-to-your-answer\">Note: You don\u2019t count the value of starting stone \u2018K\u2019 at which you are initially standing but if after some operation you again return to the \u2018K\u2019th stone then you add that value to your answer.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018N\u2019 = 4,  \u2018NUMS\u2019 = {2, 1, -2, 3}, \u2018K\u2019 = 1.\n\nOutput: 6.\n\nYou are standing on the stone with index 1. You can jump from stone with index 1 to stones with index 2 or 3. Jump to stone 3 and collect the value of stone 3, total score = 3.\nNow you cannot make any forward jump, your friend starts his backward turn now, he can jump to stone 1 or stone 2. Jump to stone 1 and collect the value of stone 1, total score = 4.\nJump from stone 1 to stone 0 and collect the value of stone 0, total score = 6.\nHence, the maximum score that you and your friend can collect is 6.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain the integer &#39;T&#39;, denoting the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 and \u2018K\u2019 denoting the length of the array \u2018NUMS an arbitrary integer. \n\nThe second line of each test case contains \u2018N\u2019 space-separated integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, you don\u2019t need to print anything just return the maximum value you and your friend can collect.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^6 \n-1000 &lt;= NUMS[ i ] &lt;= 1000\nSum of N Over all the Test cases &lt;= 10^6\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5 2\n-1 -1 2 -1 2\n3 0\n-2 2 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first case:\nJump from stone 2 to stone 4, total score = 2,\nYour friend jumps from stone 4 to stone 2, total score = 4,\nYour friend jumps from stone 2 to stone 1, total score = 3.\nHence, the maximum score is 3.\n\nFor the second case:\nSince you are already standing on stone 0, the best option is to not make any jumps.\nHence, the maximum score is 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n6 4\n-15 100 23 -23 1 15\n7 6\n101 110 123 -11 -12 1 -2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>124\n324 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -10,
            "dislikes": "NA",
            "rephrased": {
                "body": "You and your friend are playing a game on N stones, each with a value. You start at the Kth stone (0-indexed). Your turn involves jumping forward, and your friend's turn involves jumping backward. The goal is to maximize the total score.\n\n**Your Turn:** You jump forward from stone 'i' to either 'i+1' or 'i+2', collecting the value of the stone you land on. You can make any number of jumps (including zero).\n\n**Friend's Turn:** Starting from where you stopped, your friend jumps backward from stone 'i' to either 'i-1' or 'i-2', collecting the value of the stone they land on. The friend's turn ends when they reach the 0th stone.\n\n**Objective:** Find the maximum combined score you and your friend can achieve. Remember that you don't initially count the value of the Kth stone, but if you return to the Kth stone during your moves, you do count it.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^6",
                    "-1000 <= NUMS[i] <= 1000",
                    "Sum of N over all the test cases <= 10^6",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 2\n-1 -1 2 -1 2",
                        "output": "3",
                        "explanation": "You start at index 2. You jump from stone 2 to stone 4, total score = 2.\nYour friend jumps from stone 4 to stone 2, total score = 4.\nYour friend jumps from stone 2 to stone 1, total score = 3. Hence, the maximum score is 3."
                    },
                    {
                        "input": "3 0\n-2 2 2",
                        "output": "0",
                        "explanation": "You start at index 0.  The best option is to not make any jumps. Hence, the maximum score is 0."
                    },
                    {
                        "input": "6 4\n-15 100 23 -23 1 15",
                        "output": "124",
                        "explanation": null
                    },
                    {
                        "input": "7 6\n101 110 123 -11 -12 1 -2",
                        "output": "324",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a way to solve this problem recursively?</p>",
            "<p>Can you think of a way to optimize the previous approach using memoization?</p>",
            "<p>Can you think of a way to first find the maximum forward score for each stone and then use it to find the maximum backward score?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}