{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8540,
            "title": "Maximum size rectangle sub-matrix with all 1's",
            "titleSlug": "maximum-size-rectangle-sub-matrix-with-all-1-s_893017",
            "content": "<h4 id=\"you-are-given-an-n-m-sized-binary-valued-matrix-mat-where-n-is-the-number-of-rows-and-m-is-the-number-of-columns-you-need-to-return-the-maximum-size-area-of-the-submatrix-which-consists-of-all-1-s-i-e-the-maximum-area-of-a-submatrix-in-which-each-cell-has-only-the-value-1\">You are given an &#39;N&#39; * &#39;M&#39; sized binary-valued matrix &#39;MAT, where &#39;N&#39; is the number of rows and &#39;M&#39; is the number of columns. You need to return the maximum size (area) of the submatrix which consists of all 1\u2019s i.e. the maximum area of a submatrix in which each cell has only the value \u20181\u2019.</h4>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-11-20-07-52-16-5877.png\" alt=\"subMatrix_image\"></p>\n\n<pre><code>In the above image, areas in green, red, and violet color are all submatrices of the original 4x4 matrix.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. Binary valued matrix has only two values in each cell : 0 and 1.\n2. A submatrix is a matrix formed by selecting certain rows and columns from a larger matrix.\n3. The area of a matrix with &#39;h&#39; rows and &#39;w&#39; columns is equal to &#39;h&#39; * &#39;w&#39;. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer &#39;T&#39; denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers &#39;N&#39; and &#39;M&#39;, where &#39;N&#39; = the number of rows in the given matrix and &#39;M&#39; = the number of columns in the given matrix.\n\nThen &#39;N&#39; lines follow for each test case. Each line contains &#39;M&#39; space-separated integers (either 1 or 0) denoting matrix elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case print in a single line the area of maximum size submatrix of all 1\u2019s in the given matrix on a new line.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 50\n1 &lt;= &#39;N&#39;, &#39;M&#39; &lt;= 100\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 2\n1 1\n1 1\n5 4\n1 0 1 1\n1 0 1 1\n0 1 0 1\n1 1 1 1\n0 0 0 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n5\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For First Test Case: It is easy to see that whole matrix of size 2 * 2 contains &#39;1&#39; only hence the required area will be 4.\n\nFor Second Test Case:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-11-20-08-14-58-5878.png\" alt=\"explanationSampleInput1\">    </p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2 2\n1 0\n0 1\n4 4\n1 1 1 1\n1 1 1 1\n0 0 1 1\n0 0 1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n8\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 96,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an N x M sized binary-valued matrix MAT, where N is the number of rows and M is the number of columns.  Your task is to find the maximum area of a submatrix within MAT that consists entirely of 1s.  The area of a submatrix is calculated as its height multiplied by its width.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N, M <= 100",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n2 2\n1 1\n1 1\n5 4\n1 0 1 1\n1 0 1 1\n0 1 0 1\n1 1 1 1\n0 0 0 1",
                        "output": "4\n5",
                        "explanation": "For the first test case, the entire 2x2 matrix contains only 1s, so the maximum area is 2 * 2 = 4. For the second test case, the largest submatrix of 1s has dimensions 5x1, giving an area of 5."
                    },
                    {
                        "input": "2\n2 2\n1 0\n0 1\n4 4\n1 1 1 1\n1 1 1 1\n0 0 1 1\n0 0 1 1",
                        "output": "1\n8",
                        "explanation": "For the first test case, the largest submatrix of 1s is of size 1x1. For the second test case, the largest submatrix of 1s has dimensions 4x2, giving an area of 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you precalculate the overlapping subproblems?&nbsp;</p>",
            "<p>Can you think of using stack?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N*M)\r\n    Space Complexity: O(M)\r\n\r\n    Where N is the number of rows in matrix and M is the number of columns in the matrix.\r\n*/\r\n\r\n#include<stack>\r\n\r\nint largestRectangleAreaInHistogram(vector < int > & height) {\r\n    stack < int > stack;\r\n    int globalMax = 0;\r\n    int i = 0;\r\n    for (; i < height.size(); i++) {\r\n\r\n        while (!stack.empty() && height[i] < height[stack.top()]) {\r\n            int top = stack.top();\r\n            stack.pop();\r\n            int area = 0;\r\n            if (stack.empty()) {\r\n                area = height[top] * i;\r\n            } else {\r\n                area = height[top] * (i - stack.top() - 1);\r\n            }\r\n\r\n            if (area > globalMax) {\r\n                globalMax = area;\r\n            }\r\n        }\r\n        stack.push(i);\r\n    }\r\n    while (!stack.empty()) {\r\n        int top = stack.top();\r\n        stack.pop();\r\n        int area = 0;\r\n        if (stack.empty()) {\r\n            area = height[top] * i;\r\n\r\n        } else {\r\n            area = height[top] * (i - stack.top() - 1);\r\n        }\r\n        if (area > globalMax) {\r\n            globalMax = area;\r\n        }\r\n    }\r\n    return globalMax;\r\n}\r\n\r\nint maximalAreaOfSubMatrixOfAll1(vector < vector < int >> & mat, int n, int m) {\r\n\r\n    if (mat.size() == 0) {\r\n        return 0;\r\n    }\r\n\r\n    int maxArea = 0;\r\n\r\n    // Stores histogram height in a given row.\r\n    vector < int > height(m);\r\n\r\n    for (int i = 0; i < n; i++) {\r\n        for (int j = 0; j < m; j++) {\r\n            if (mat[i][j] == 0) {\r\n                height[j] = 0;\r\n            } else {\r\n                height[j] = height[j] + 1;\r\n            }\r\n        }\r\n\r\n        maxArea = max(maxArea, largestRectangleAreaInHistogram(height));\r\n    }\r\n\r\n    return maxArea;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N*M)\r\n    Space Complexity: O(M)\r\n\r\n    Where N is the number of rows in matrix and M is the number of columns in the matrix.\r\n*/\r\n\r\nimport java.util.Stack;\r\n\r\npublic class Solution {\r\n    public static int largestRectangleAreaInHistogram(int[] height) {\r\n\r\n        Stack < Integer > stack = new Stack < Integer > ();\r\n        int globalMax = 0;\r\n        int i = 0;\r\n        for (; i < height.length; i++) {\r\n\r\n            while (!stack.isEmpty() && height[i] < height[stack.peek()]) {\r\n                int top = stack.pop();\r\n                int area = 0;\r\n                if (stack.isEmpty()) {\r\n                    area = height[top] * i;\r\n                } else {\r\n                    area = height[top] * (i - stack.peek() - 1);\r\n                }\r\n\r\n                if (area > globalMax) {\r\n                    globalMax = area;\r\n                }\r\n            }\r\n            stack.push(i);\r\n        }\r\n        while (!stack.isEmpty()) {\r\n            int top = stack.pop();\r\n            int area = 0;\r\n            if (stack.isEmpty()) {\r\n                area = height[top] * i;\r\n\r\n            } else {\r\n                area = height[top] * (i - stack.peek() - 1);\r\n            }\r\n            if (area > globalMax) {\r\n                globalMax = area;\r\n            }\r\n        }\r\n        return globalMax;\r\n    }\r\n\r\n    public static int maximalAreaOfSubMatrixOfAll1(int[][] mat, int n, int m) {\r\n\r\n        if (mat.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        int maxArea = 0;\r\n\r\n        // Stores histogram height in a given row.\r\n        int height[] = new int[m];\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < m; j++) {\r\n                if (mat[i][j] == 0) {\r\n                    height[j] = 0;\r\n                } else {\r\n                    height[j] = height[j] + 1;\r\n                }\r\n            }\r\n\r\n            maxArea = Math.max(maxArea, largestRectangleAreaInHistogram(height));\r\n        }\r\n\r\n        return maxArea;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N*M)\r\n    Space Complexity: O(M)\r\n\r\n    Where N is the number of rows in matrix and M is the number of columns in the matrix.\r\n'''\r\n\r\ndef largestRectangleAreaInHistogram(height):\r\n    height.append(0)\r\n    n = len(height)\r\n\r\n    # st will be used as a stack.\r\n    \r\n    st = list()  \r\n    i = 0\r\n    j = 0\r\n    area = 0\r\n\r\n    while i < n:\r\n        if len(st) == 0 or height[i] > height[st[-1]]:\r\n            st.append(i)\r\n            i += 1\r\n\r\n        else:\r\n            curh = height[st[-1]]\r\n            st.pop()\r\n            stopidx = 0\r\n            if len(st) == 0:\r\n                stopidx = -1\r\n\r\n            else:\r\n                stopidx = st[-1]\r\n\r\n            area = max(area, curh * ((i - 1) - stopidx))\r\n\r\n    return area\r\n\r\n\r\ndef maximalAreaOfSubMatrix(mat, n, m):\r\n    maxArea = 0\r\n    height = [0 for i in range(m)]\r\n    for i in range(n):\r\n        for j in range(m):\r\n            if mat[i][j] == 0:\r\n                height[j] = 0\r\n\r\n            else:\r\n                height[j] += 1\r\n                \r\n        maxArea = max(maxArea, largestRectangleAreaInHistogram(height))\r\n\r\n    return maxArea\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}