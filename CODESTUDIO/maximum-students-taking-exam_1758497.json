{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13650,
            "title": "Maximum Students Taking Exam",
            "titleSlug": "maximum-students-taking-exam_1758497",
            "content": "<h4 id=\"the-ultimate-ninja-ankush-has-prepared-a-test-for-all-of-his-fellow-ninja-students-but-since-he-is-the-ultimate-ninja-he-does-not-like-cheating-and-since-his-students-are-also-ninjas-they-broke-some-chairs-in-the-dojo-while-practicing-their-moves\">The Ultimate Ninja Ankush, has prepared a test for all of his fellow Ninja students, but since he is the Ultimate Ninja, he does not like cheating, and since his students are also ninjas, they broke some chairs in the dojo while practicing their moves.</h4>\n\n<h4 id=\"the-class-consists-of-m-n-seats-represented-in-a-matrix-seats-among-the-seats-some-of-the-seats-are-broken-if-a-seat-is-broken-it-is-denoted-by-character-otherwise-it-is-denoted-by-a-character-denoting-that-the-seat-can-be-occupied-a-ninja-can-t-sit-in-a-broken-seat\">The class consists of \u2018M\u2019 * \u2018N\u2019 seats, represented in a matrix \u2018SEATS\u2019.  Among the seats, some of the seats are broken. If a seat is broken, it is denoted by &#39;#&#39; character otherwise it is denoted by a &#39;.&#39; character, denoting that the seat can be occupied. A Ninja can\u2019t sit in a broken seat.</h4>\n\n<h4 id=\"ankush-wants-to-avoid-cheating-at-any-cost-according-to-his-observations-a-student-can-see-the-answers-of-four-neighboring-students-sitting-next-to-the-left-right-upper-left-and-upper-right-but-they-cannot-see-the-answers-of-the-student-sitting-directly-in-front-or-behind-him-ankush-is-very-busy-so-he-wants-to-use-the-dojo-to-the-fullest-more-formally-he-wants-to-know-the-maximum-number-of-ninja-students-that-can-be-placed-in-the-dojo\">Ankush wants to avoid cheating at any cost. According to his observations, a student can see the answers of four neighboring students sitting next to the left, right, upper left, and upper right, but they cannot see the answers of the student sitting directly in front or behind him. Ankush is very busy so he wants to use the dojo to the fullest. More formally he wants to know the maximum number of ninja students that can be placed in the dojo.</h4>\n\n<h4 id=\"for-example\">For example</h4>\n\n<pre><code>Given:\n\u2018M\u2019 = 3, \u2018N\u2019 = 3.\n\u2018SEATS\u2019 = {\n   {\u2018.\u2019, \u2018.\u2019, \u2018.\u2019},\n   {\u2018#\u2019,\u2019#\u2019, \u2018#\u2019},\n   {\u2018.\u2019,\u2019.\u2019,\u2019.\u2019} \n   }\nThe answer will be 4, since 4 students can be placed at the four corners, i.e. (0,0), (2,2), (2,0), and (0,2) such that no cheating is possible.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018M,\u2019 where \u2018M\u2019 is the number of rows in \u2018SEATS\u2019 and \u2018N\u2019 where \u2018N\u2019 is the number of columns in \u2018SEATS\u2019.\n\nThe next \u2018M\u2019 line contains \u2018N\u2019 space-separated integers which tell if the seat is broken or in good condition.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, You are supposed to return an integer that denotes the maximum number of students that can be placed such that no cheating is possible.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= \u2018N\u2019 &lt;= 10\n1 &lt;= \u2018M\u2019 &lt;= 10\n\nTime Limit: 1sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n3 3\n. . .\n# # #\n. . .\n2 4\n# . # . \n# # . .\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>4\n3  \n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>In the first test case, The answer will be 4, since 4 students can be placed at the four corners, i.e. (0,0), (2,2), (2,0), and (0,2) such that no cheating is possible.\n\n\nIn the second test case, The answer will be 3, since we can place 3 students at 3 different places, i.e. (0,1), (0,3), (1,3), such that no cheating is possible. \n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n3 3\n. . . \n# . # \n# . . \n2 4\n. # # # \n# . . . \n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>3\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -6,
            "dislikes": "NA",
            "rephrased": {
                "body": "A ninja master, Ankush, has designed a test for his students. To prevent cheating, he needs to arrange the students in the dojo such that no student can see the answers of their neighbors (left, right, upper-left, and upper-right). The dojo has M x N seats, some of which are broken and cannot be used. Given the arrangement of seats represented by a matrix where '.' denotes an available seat and '#' denotes a broken seat, determine the maximum number of students Ankush can place in the dojo without allowing any cheating.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 10",
                    "1 <= \u2018N\u2019 <= 10",
                    "1 <= \u2018M\u2019 <= 10",
                    "Time Limit: 1sec."
                ],
                "testcases": [
                    {
                        "input": "3 3\n. . .\n# # #\n. . .",
                        "output": "4",
                        "explanation": "Four students can be placed at the corners (0,0), (0,2), (2,0), and (2,2) without any cheating."
                    },
                    {
                        "input": "2 4\n# . # .\n# # . .",
                        "output": "3",
                        "explanation": "Three students can be placed at (0,1), (0,3), and (1,3) without any cheating."
                    },
                    {
                        "input": "3 3\n. . .\n# . #\n# . .",
                        "output": "3",
                        "explanation": null
                    },
                    {
                        "input": "2 4\n. # # #\n# . . .",
                        "output": "2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we use bitmasks to denote the state of each row?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}