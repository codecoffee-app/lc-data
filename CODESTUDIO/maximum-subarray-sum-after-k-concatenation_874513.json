{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8436,
            "title": "Maximum subarray sum after K concatenation",
            "titleSlug": "maximum-subarray-sum-after-k-concatenation_874513",
            "content": "<h4 id=\"you-have-been-given-a-vector-list-arr-consisting-of-n-integers-you-are-also-given-a-positive-integer-k\">You have been given a vector/list &#39;ARR&#39; consisting of \u2018N\u2019 integers. You are also given a positive integer \u2018K\u2019.</h4>\n\n<h4 id=\"let-s-define-a-vector-list-concat-of-size-n-k-formed-by-concatenating-arr-k-times-for-example-if-arr-0-1-2-and-k-3-then-concat-is-given-by-0-1-2-0-1-2-0-1-2\">Let\u2019s define a vector/list &#39;CONCAT&#39; of size &#39;N * K&#39; formed by concatenating &#39;ARR&#39; \u2018K\u2019 times. For example, if &#39;ARR&#39; = [0, -1, 2] and &#39;K&#39; = 3, then &#39;CONCAT&#39; is given by [0, -1, 2, 0, -1, 2, 0, -1, 2].</h4>\n\n<h4 id=\"your-task-is-to-find-the-maximum-possible-sum-of-any-non-empty-subarray-contagious-of-concat\">Your task is to find the maximum possible sum of any non-empty subarray (contagious) of &#39;CONCAT&#39;.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases or queries to be processed. Then the test case follows.\n\nThe first line of each test case contains two single space-separated integers \u2018N\u2019 and \u2018K\u2019 representing the size of the vector/list and the given integer, respectively.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers representing the vector elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print an integer denoting the maximum possible subarray sum of &#39;CONCAT&#39;.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^4\n1 &lt;= K &lt;= 10^4    \n-10^5 &lt;= ARR[i] &lt;= 10^5\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2 3\n1 3\n3 2\n1 -2 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>12\n2\n</code></pre>\n\n<h5 id=\"sample-output-1-explanation\">Sample Output 1 Explanation:</h5>\n\n<pre><code>For the first test case, vector &#39;CONCAT&#39; is obtained by concatenating vector [1, 3] three times. \n&#39;CONCAT&#39; = [1, 3, 1, 3, 1, 3]\n\nThe subarray with a maximum sum of 12 is [1, 3, 1, 3, 1, 3].\n\n\nFor the second test case, vector &#39;CONCAT&#39; is obtained by concatenating vector [1, -2, 1] two times. \n&#39;CONCAT&#39; = [1, -2, 1, 1, -2, 1]\n\nThe subarray with a maximum sum of 2 is [1, 1].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n2 3\n-2 1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 244,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'ARR' of 'N' integers and a positive integer 'K', create a new array 'CONCAT' by concatenating 'ARR' 'K' times. Find the maximum possible sum of any non-empty contiguous subarray within 'CONCAT'.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^4",
                    "1 <= K <= 10^4",
                    "-10^5 <= ARR[i] <= 10^5",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "2\n2 3\n1 3\n3 2\n1 -2 1",
                        "output": "12\n2",
                        "explanation": "Case 1: ARR = [1, 3], K = 3. CONCAT = [1, 3, 1, 3, 1, 3]. The subarray [1, 3, 1, 3, 1, 3] has the maximum sum of 12.\nCase 2: ARR = [1, -2, 1], K = 2. CONCAT = [1, -2, 1, 1, -2, 1]. The subarray [1, 1] has the maximum sum of 2."
                    },
                    {
                        "input": "1\n2 3\n-2 1",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>If a subarray has a prefix with negative sum, then should we keep this prefix or remove it from our subarray?&nbsp;</p>",
            "<p>Can you think of all possible cases of this problem and devise your solution according to these cases to improve time complexity?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    where 'N' is the size of vector/list 'ARR'.\n*/\n\n\nlong long kadane(vector<int> &arr, int n, int k)\n{\n    long long maxSum = -1e15;\n    long long curSum = 0; \n  \n    for (int i = 0; i < n * k; i++) \n    { \n        curSum += arr[i % n];   \n        maxSum = max(maxSum, curSum);  \n        if (curSum < 0)\n        {\n            curSum = 0;\n        } \n    } \n\n    return maxSum;\n}\n\n\nlong long maxSubSumKConcat(vector<int> &arr, int n, int k)\n{   \n    long long maxSubSum;\n\n    if (k == 1)\n    {\n        maxSubSum = kadane(arr, n, k);\n\n        return maxSubSum;\n    }\n\n    int arrSum = 0;\n\n    for (int i = 0; i < n; i++)\n    {\n        arrSum += arr[i];\n    }\n\n    if (arrSum <= 0)\n    {   \n        // Finding the maximum subarray sum for k = 2.\n        maxSubSum = kadane(arr, n, 2);   \n    }\n    else\n    {\n        // Finding the maximum subarray sum for k = 2.\n        maxSubSum = kadane(arr, n, 2);\n        maxSubSum += (long long)(k - 2) * (long long)arrSum;\n    } \n\n    return maxSubSum;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    where 'N' is the size of vector/list 'ARR'.\n*/\n\nimport java.util.*;\n\npublic class Solution {\n\n\tpublic static long kadane(ArrayList <Integer> arr, int n, int k)\n\t{\n\t     long maxSum = Long.MIN_VALUE;\n\t     long curSum = 0; \n\t  \n\t    for (int i = 0; i < n * k; i++) \n\t    { \n\t        curSum += arr.get(i % n); \n\t        maxSum = Math.max(maxSum, curSum);\t  \n\t        if (curSum < 0)\n\t        {\n\t            curSum = 0;\n\t        } \n\t    } \n\n\t    return maxSum;\n\t}\n\n\tpublic static long maxSubSumKConcat(ArrayList<Integer> arr, int n, int k) {\n\t\tlong maxSubSum;\n\n\t    if (k == 1)\n\t    {\n\t        maxSubSum = kadane(arr, n, k);\n\n\t        return maxSubSum;\n\t    }\n\n\t    int arrSum = 0;\n\n\t    for (int i = 0; i < n; i++)\n\t    {\n\t        arrSum += arr.get(i);\n\t    }\n\n\t    if (arrSum <= 0)\n\t    {   \n\t        // Finding the maximum subarray sum for k = 2. \n\t        maxSubSum = kadane(arr, n, 2);   \n\t    }\n\t    else\n\t    {\n\t        // Finding the maximum subarray sum for k = 2.\n\t        maxSubSum = kadane(arr, n, 2);\n\t        maxSubSum += (long)(k - 2) * (long)arrSum;\n\t    } \n\n\t    return maxSubSum;\n\t}\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1)\r\n\r\n    Where N is the size of array/list.\r\n'''\r\n\r\n\r\ndef kadane(arr, n, k):\r\n    maxSum = -1e9\r\n    curSum = 0\r\n\r\n    for i in range(n*k):\r\n        curSum += arr[i % n]\r\n\r\n        maxSum = max(maxSum, curSum)\r\n\r\n        if curSum < 0:\r\n            curSum = 0\r\n\r\n    return maxSum\r\n\r\n\r\ndef maxSubSumKConcat(arr, n, k):\r\n\r\n    maxSubSum = -1\r\n\r\n    if k == 1:\r\n        maxSubSum = kadane(arr, n, k)\r\n\r\n        return maxSubSum\r\n\r\n\r\n    arrSum = 0\r\n\r\n    for i in range(n):\r\n        arrSum += arr[i]\r\n\r\n    if arrSum <= 0: \r\n        # Finding the maximum subarray sum for k = 2 \r\n        maxSubSum = kadane(arr, n, 2)\r\n    else:\r\n        # Finding the maximum subarray sum for k = 2\r\n        maxSubSum = kadane(arr, n, 2)\r\n        maxSubSum += (k - 2) * arrSum\r\n\r\n    return maxSubSum",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}