{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 4961,
            "title": "Maximum Subarray Sum",
            "titleSlug": "maximum-subarray-sum_628288",
            "content": "<h4 id=\"given-an-array-of-numbers-find-the-maximum-sum-of-any-contiguous-subarray-of-the-array\">Given an array of numbers, find the maximum sum of any contiguous subarray of the array.</h4>\n\n<p><br/></p>\n\n<h4 id=\"for-example-given-the-array-34-50-42-14-5-86-the-maximum-sum-would-be-137-since-we-would-take-elements-42-14-5-and-86\">For example, given the array [34, -50, 42, 14, -5, 86], the maximum sum would be 137, since we would take elements 42, 14, -5, and 86.</h4>\n\n<p><br/></p>\n\n<h4 id=\"given-the-array-5-1-8-9-the-maximum-sum-would-be-1\">Given the array [-5, -1, -8, -9], the maximum sum would be -1.</h4>\n\n<p><br/></p>\n\n<h4 id=\"follow-up-do-this-in-o-n-time\">Follow up: Do this in O(N) time.</h4>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains size of array, which is denoted by N and second line of input contains N space separated integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>The first and only line of output should print the maximum subarray sum, as described in the description.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^6\n1 &lt;= K &lt;= N\nTime limit: 1 sec \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4 1\n1 2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>6 2\n2 7 3 6 7 7 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>14\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h4>\n\n<pre><code>There are 5 subarrays of size 2 in this array. They are {2, 7}, {7, 3}, {3, 6}, {6, 7}, {7, 7}. Since the subarray {7, 7} has the maximum sum among all the subarrays, the output will be 7 + 7 = 14\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 704,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the maximum sum of any contiguous subarray within the array. The solution must have a time complexity of O(N).",
                "constraints": [
                    "1 <= N <= 10^6",
                    "Time limit: 1 sec",
                    "The array can contain positive and negative integers."
                ],
                "testcases": [
                    {
                        "input": "n = 6, nums = [34, -50, 42, 14, -5, 86]",
                        "output": "137",
                        "explanation": "The contiguous subarray with the maximum sum is [42, 14, -5, 86], which sums to 137."
                    },
                    {
                        "input": "n = 4, nums = [-5, -1, -8, -9]",
                        "output": "-1",
                        "explanation": "The contiguous subarray with the maximum sum is [-1], which sums to -1. In cases where all numbers are negative, the maximum sum is the largest negative number."
                    },
                    {
                        "input": "n = 5, nums = [1, 2, 3, 4, 5]",
                        "output": "15",
                        "explanation": "The entire array [1, 2, 3, 4, 5] forms the contiguous subarray with the maximum sum, which sums to 15."
                    },
                    {
                        "input": "n = 7, nums = [-2, 1, -3, 4, -1, 2, 1]",
                        "output": "6",
                        "explanation": "The contiguous subarray with the maximum sum is [4, -1, 2, 1], which sums to 6."
                    },
                    {
                        "input": "n = 1, nums = [-10]",
                        "output": "-10",
                        "explanation": "With only one element, the maximum sum is simply that element, which is -10."
                    },
                    {
                        "input": "n = 3, nums = [2, -1, 2]",
                        "output": "3",
                        "explanation": "The maximum contiguous subarray is [2, -1, 2] which sums up to 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Is there a way to just check all k-subarrays one by one and find the maximum element for each?</p>",
            "<p>A Binary Search Tree (BST) stores data in such a way that it takes logarithmic time to insert, search or delete an element. Can you think of a way to use it in this problem?</p>",
            "<p>A double ended queue is a data structure that can insert, delete and fetch elements at its two ends in O(1) time. Can you use it to design an algorithm that runs in O(n) time?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity - O(N)\r\n    Space Complexity - O(K)\r\n\r\n    where N is the length of the array and K is the size of subarrays\r\n*/\r\n\r\n#include <deque>\r\n\r\nvoid printSubarrayMax(int *arr, int n, int k)\r\n{\r\n    if (n == 0 || k == 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    deque<int> indices;\r\n\r\n    for (int i = 0; i < k; ++i)\r\n    {\r\n        while (!indices.empty() && arr[i] >= arr[indices.back()])\r\n        {\r\n            indices.pop_back();\r\n        }\r\n\r\n        indices.push_back(i);\r\n    }\r\n\r\n    cout << arr[indices.front()] << \" \";\r\n\r\n    for (int i = k; i < n; ++i)\r\n    {\r\n        while (!indices.empty() && indices.front() <= i - k)\r\n        {\r\n            indices.pop_front();\r\n        }\r\n\r\n        while (!indices.empty() && arr[i] >= arr[indices.back()])\r\n        {\r\n            indices.pop_back();\r\n        }\r\n\r\n        indices.push_back(i);\r\n\r\n        cout << arr[indices.front()] << \" \";\r\n    }\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity - O(N)\r\n    Space Complexity - O(K)\r\n\r\n    where N is the length of the array and K is the size of subarrays\r\n*/\r\n\r\n#include <deque>\r\n\r\nvoid printSubarrayMax(int *arr, int n, int k)\r\n{\r\n    if (n == 0 || k == 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    deque<int> indices;\r\n\r\n    for (int i = 0; i < k; ++i)\r\n    {\r\n        while (!indices.empty() && arr[i] >= arr[indices.back()])\r\n        {\r\n            indices.pop_back();\r\n        }\r\n\r\n        indices.push_back(i);\r\n    }\r\n\r\n    cout << arr[indices.front()] << \" \";\r\n\r\n    for (int i = k; i < n; ++i)\r\n    {\r\n        while (!indices.empty() && indices.front() <= i - k)\r\n        {\r\n            indices.pop_front();\r\n        }\r\n\r\n        while (!indices.empty() && arr[i] >= arr[indices.back()])\r\n        {\r\n            indices.pop_back();\r\n        }\r\n\r\n        indices.push_back(i);\r\n\r\n        cout << arr[indices.front()] << \" \";\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "/*\r\n    Time Complexity - O(N)\r\n    Space Complexity - O(K)\r\n\r\n    where N is the length of the array and K is the size of subarrays\r\n*/\r\n\r\n#include <deque>\r\n\r\nvoid printSubarrayMax(int *arr, int n, int k)\r\n{\r\n    if (n == 0 || k == 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    deque<int> indices;\r\n\r\n    for (int i = 0; i < k; ++i)\r\n    {\r\n        while (!indices.empty() && arr[i] >= arr[indices.back()])\r\n        {\r\n            indices.pop_back();\r\n        }\r\n\r\n        indices.push_back(i);\r\n    }\r\n\r\n    cout << arr[indices.front()] << \" \";\r\n\r\n    for (int i = k; i < n; ++i)\r\n    {\r\n        while (!indices.empty() && indices.front() <= i - k)\r\n        {\r\n            indices.pop_front();\r\n        }\r\n\r\n        while (!indices.empty() && arr[i] >= arr[indices.back()])\r\n        {\r\n            indices.pop_back();\r\n        }\r\n\r\n        indices.push_back(i);\r\n\r\n        cout << arr[indices.front()] << \" \";\r\n    }\r\n}",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}