{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7294,
            "title": "Maximum Subarray Sum",
            "titleSlug": "maximum-subarray-sum_630526",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-length-n-consisting-of-integers\">You are given an array <em><strong>&#39;arr&#39;</strong></em> of length <em><strong>&#39;n&#39;</strong></em>, consisting of integers.</h4>\n\n<p><br/></p>\n\n<h4 id=\"a-subarray-is-a-contiguous-segment-of-an-array-in-other-words-a-subarray-can-be-formed-by-removing-0-or-more-integers-from-the-beginning-and-0-or-more-integers-from-the-end-of-an-array\">A subarray is a contiguous segment of an array. In other words, a subarray can be formed by removing 0 or more integers from the beginning and 0 or more integers from the end of an array.</h4>\n\n<p><br/></p>\n\n<h4 id=\"find-the-sum-of-the-subarray-including-empty-subarray-having-maximum-sum-among-all-subarrays\">Find the sum of the subarray <strong>(including empty subarray)</strong> having maximum sum among all subarrays.</h4>\n\n<p><br/></p>\n\n<h4 id=\"the-sum-of-an-empty-subarray-is-0\">The sum of an empty subarray is 0.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Input: &#39;arr&#39; = [1, 2, 7, -4, 3, 2, -10, 9, 1]\n\nOutput: 11\n\nExplanation: The subarray yielding the maximum sum is [1, 2, 7, -4, 3, 2].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;n&#39;, representing the array&#39;s length.\n\nThe second line of input contains &#39;n&#39; single space-separated integers, denoting the elements of the array.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The output contains the maximum subarray sum.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>9\n1 2 7 -4 3 2 -10 9 1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>11\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for Sample 1 :</h5>\n\n<pre><code>The subarray yielding the maximum sum is [1, 2, 7, -4, 3, 2].\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>6\n10 20 -30 40 -50 60\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>60\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-3\">Sample Input 3 :</h5>\n\n<pre><code>3\n-3 -5 -6\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-3\">Sample Output 3 :</h5>\n\n<pre><code>0\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity :</h5>\n\n<pre><code>The expected time complexity is O(n).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10 ^ 6\n-10 ^ 6 &lt;= &#39;arr[i]&#39; &lt;= 10 ^ 6\n\nTime limit: 1sec\n</code></pre>\n\n<p><br/></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1416,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'arr' of integers with length 'n', find the maximum sum of any contiguous subarray (including the empty subarray).  The empty subarray has a sum of 0.",
                "constraints": [
                    "1 <= 'n' <= 10 ^ 6",
                    "-10 ^ 6 <= 'arr[i]' <= 10 ^ 6",
                    "Time limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "n = 9, arr = [1, 2, 7, -4, 3, 2, -10, 9, 1]",
                        "output": "11",
                        "explanation": "The subarray [1, 2, 7, -4, 3, 2] yields the maximum sum of 11."
                    },
                    {
                        "input": "n = 6, arr = [10, 20, -30, 40, -50, 60]",
                        "output": "60",
                        "explanation": "The subarray [60] (or just the single element 60) yields the maximum sum of 60."
                    },
                    {
                        "input": "n = 3, arr = [-3, -5, -6]",
                        "output": "0",
                        "explanation": "Since all elements are negative, the maximum subarray sum is 0 (the empty subarray)."
                    },
                    {
                        "input": "n = 5, arr = [1, 2, 3, 4, 5]",
                        "output": "15",
                        "explanation": "The subarray [1, 2, 3, 4, 5] yields the maximum sum of 15 (the sum of all elements)."
                    },
                    {
                        "input": "n = 1, arr = [-100]",
                        "output": "0",
                        "explanation": "Since the only element is negative, the maximum subarray sum is 0 (empty array)."
                    },
                    {
                        "input": "n = 1, arr = [100]",
                        "output": "100",
                        "explanation": "The subarray [100] yields the maximum sum of 100."
                    },
                    {
                        "input": "n = 7, arr = [-2,1,-3,4,-1,2,1,-5,4]",
                        "output": "6",
                        "explanation": "The subarray [4,-1,2,1] has the largest sum = 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Using basic implementation, let\u2019s check for all subarrays to find the maximum sum among them.</p>",
            "<p>Is it really effective to add some element in the negative sum instead of taking the element as the individual one?</p>",
            "<p>Try to fix the starting point of all the subarrays and slide their ending points till the end of the array.</p>",
            "<p>Try to think of some approach based on divide and conquer.</p>",
            "<p>Take every index of the array as the ending point of the subarray and find the maximum sum ending at that index.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N^2)\r\n    Space Complexity: O(1)\r\n\r\n    where N is the length of the array.\r\n*/\r\n\r\nlong long maxSubarraySum(vector<int> arr, int n)\r\n{\r\n    long long maxSum = 0;\r\n\r\n    for(int i=0; i<n; i++)\r\n    {\r\n        long long curSum = 0;\r\n\r\n        for(int j=i; j<n; j++)\r\n        {\r\n            curSum += arr[j];\r\n            maxSum = max(maxSum, curSum);\r\n        }\r\n    }\r\n\r\n    return maxSum;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N^2)\n    Space Complexity: O(1)\n\n    where N is the length of the array.\n*/\n\npublic class Solution {\n\n    public static long maxSubarraySum(int arr[], int n) {\n    \n        long maxSum = 0;\n\n        for(int i = 0; i < n; i++) {\n            long curSum = 0;\n\n            for(int j = i; j < n; j++) {\n                curSum += arr[j];\n                maxSum = Math.max(maxSum, curSum);\n            }\n        }\n\n        return maxSum;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(N^2)\n    Space Complexity: O(1)\n\n    where N is the length of the array.\n'''\n\nfrom sys import stdin,setrecursionlimit\nsetrecursionlimit(10**7)\n\ndef maxSubarraySum(arr, n) :\n\n    ans = 0\n    for i in range(n) :\n\n        tempSum = 0\n        for j in range(i, n) :\n\n            tempSum += arr[j]\n            ans = max(ans, tempSum)\n\n    return ans\n\n\n\n#taking inpit using fast I/O\ndef takeInput() :\n\t\n    n =  int(input())\n\n    if(n == 0) :\n        return list(), n\n\n    arr = list(map(int, stdin.readline().strip().split(\" \")))\n\n    return arr, n\n\n\n#main\narr, n = takeInput()\nprint(maxSubarraySum(arr, n))\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}