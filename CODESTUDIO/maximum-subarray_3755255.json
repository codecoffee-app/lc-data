{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 17121,
            "title": "Maximum Subarray",
            "titleSlug": "maximum-subarray_3755255",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-n-integers\">You are given an array <em><strong>&#39;arr&#39;</strong></em> of <em><strong>&#39;n&#39;</strong></em> integers.</h4>\n\n<p><br/></p>\n\n<h4 id=\"you-have-to-divide-the-array-into-some-subarrays-such-that-each-element-is-present-in-exactly-one-of-the-subarrays\">You have to divide the array into some subarrays such that each element is present in exactly one of the subarrays.</h4>\n\n<p><br/></p>\n\n<h4 id=\"the-length-of-each-subarray-should-be-at-most-k-after-partitioning-all-the-elements-of-each-subarray-will-be-changed-to-the-maximum-element-present-in-that-subarray\">The length of each subarray should be at most <em><strong>&#39;k&#39;</strong></em>. After partitioning all the elements of each subarray will be changed to the maximum element present in that subarray.</h4>\n\n<p><br/></p>\n\n<h4 id=\"find-the-maximum-possible-sum-of-all-the-elements-after-partitioning\">Find the maximum possible sum of all the elements after partitioning.</h4>\n\n<p><br/></p>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Input is given such that the answer will fit in a 32-bit integer.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: &#39;k&#39; = 3, &#39;arr&#39; = [1, 20, 13, 4, 4, 1]\n\nOutput: 80\n\nExplanation:\nWe can divide the array into the following subarrays\n[1,20] max of this subarray is 20 so the contribution of \nthis subarray in the final answer will be 20*2=40.\n[13,4,4]  max of this subarray is 13 so the contribution of \nthis subarray in the final answer will be 13*3=39.\n[1]  max of this subarray is 1 so the contribution of this \nsubarray in the final answer will be 1*1=1.\n\nSo, the answer will be 40 + 39 + 1 = 80.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains two space-separated integers &#39;n&#39; and &#39;k&#39;, denoting the size of the array and the given integer.\n\nThe second line of each test case contains &#39;n&#39; space-separated integers denoting elements of the array.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Return the maximum sum of elements after partitioning.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<p><br/></p>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>5 2\n1 21 1 5 4 \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-answer\">Expected Answer:</h5>\n\n<pre><code>56\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-on-console\">Output on console:</h5>\n\n<pre><code>56\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>We can divide the array into the following subarrays\n[1,21] max of this subarray is 21 so the contribution of this subarray in the final answer will be 21*2=42.\n[1,5]  max of this subarray is 5 so the contribution of this subarray in the final answer will be 5*2=10.\n[4]  max of this subarray is 4 so the contribution of this subarray in the final answer will be 1*4=4.\nSo, the answer will be 42 + 10 + 4 = 56.\n</code></pre>\n\n<p><br/>.</p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1 1\n6\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-answer\">Expected Answer:</h5>\n\n<pre><code>6\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-on-console\">Output on console:</h5>\n\n<pre><code>6\n</code></pre>\n\n<p><br/></p>\n\n<h4 id=\"expected-time-complexity\">Expected Time Complexity:</h4>\n\n<pre><code>Try to solve this in O(n*k).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 300\n0 &lt;= &#39;arr[i]&#39; &lt;= 10^9\n1 &lt;= &#39;k&#39; &lt;= &#39;n&#39;\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 16,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'arr' of 'n' integers, partition it into subarrays such that each element belongs to exactly one subarray. The length of each subarray must be at most 'k'. After partitioning, each element within a subarray is replaced with the maximum element of that subarray. Determine the maximum possible sum of all the elements after this partitioning.",
                "constraints": [
                    "1 <= 'n' <= 300",
                    "0 <= 'arr[i]' <= 10^9",
                    "1 <= 'k' <= 'n'"
                ],
                "testcases": [
                    {
                        "input": "n = 6, nums=[1, 20, 13, 4, 4, 1], k = 3",
                        "output": "80",
                        "explanation": "We can divide the array into the following subarrays: [1,20] (max=20, contribution=40), [13,4,4] (max=13, contribution=39), [1] (max=1, contribution=1). Total sum: 40 + 39 + 1 = 80."
                    },
                    {
                        "input": "n = 5, nums=[1, 21, 1, 5, 4], k = 2",
                        "output": "56",
                        "explanation": "We can divide the array into the following subarrays: [1,21] (max=21, contribution=42), [1,5] (max=5, contribution=10), [4] (max=4, contribution=4). Total sum: 42 + 10 + 4 = 56."
                    },
                    {
                        "input": "n = 1, nums=[6], k = 1",
                        "output": "6",
                        "explanation": "The array contains only one element. The subarray is [6] (max=6, contribution=6). Total sum: 6."
                    },
                    {
                        "input": "n = 4, nums=[5, 5, 5, 5], k = 4",
                        "output": "20",
                        "explanation": "We can divide the array into one subarray: [5, 5, 5, 5] (max=5, contribution=20). Total sum: 20."
                    },
                    {
                        "input": "n = 4, nums=[1, 2, 3, 4], k = 1",
                        "output": "10",
                        "explanation": "We can divide the array into subarrays of length 1: [1],[2],[3],[4]. The contribution of each subarray will be equal to its element, resulting in a total sum of 1 + 2 + 3 + 4 = 10."
                    },
                    {
                        "input": "n = 7, nums=[10, 2, 8, 5, 1, 9, 4], k = 3",
                        "output": "63",
                        "explanation": "One possible partition is: [10, 2] (max=10, contribution=20), [8, 5, 1] (max=8, contribution=24), [9, 4] (max=9, contribution=18), [4](max=4, contribution=4). Total sum: 20 + 24 + 18 + 4 = 66.\nOptimal partition: [10] [2, 8, 5] [1, 9, 4] max=10, 8, 9 Total Sum = 10 + 24 + 27 = 61. Incorrect\nOptimal partition: [10, 2, 8] [5, 1, 9] [4] . max=10, 9. Total Sum = 30 + 27 + 4 = 61. Incorrect.\nOptimal partition: [10,2] [8, 5, 1] [9,4]. Total = 20+24+18=62\nConsider: [10, 2, 8] [5, 1] [9, 4]. max=10, max=5, max=9 Sum is 30 + 10 + 18 = 58\nConsider: [10] [2,8] [5,1,9][4]. Total: 10+16+27+4=57.\nOptimal partition: [10, 2] [8, 5] [1, 9] [4]. Max is 10, 8, 9, 4. Total = 20+16+18+4=58+2+4 = 62"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check for every possible valid way of dividing the array and find the max of all valid ways.</p>",
            "<p>Can you optimize your recursive solution using some extra space?</p>",
            "<p>Can you think of doing it iteratively to avoid stack size problems?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}