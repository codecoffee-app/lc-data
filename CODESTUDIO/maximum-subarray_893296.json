{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8679,
            "title": "Maximum subarray",
            "titleSlug": "maximum-subarray_893296",
            "content": "<h4 id=\"ninjas-has-been-given-an-array-he-wants-to-find-a-subarray-such-that-the-sum-of-all-elements-in-the-subarray-is-maximum\">Ninjas has been given an array. He wants to find a subarray such that the sum of all elements in the subarray is maximum.</h4>\n\n<h4 id=\"subarray-a-is-greater-than-sub-array-b-if-sum-a-sum-b-if-two-sub-array-have-the-same-maximum-sum-then-output-the-subarray-that-has-a-larger-length\">Subarray &#39;A&#39; is greater than sub-array &#39;B&#39; if sum(A) &gt; sum(B). If two sub-array have the same maximum sum, then output the subarray that has a larger length.</h4>\n\n<h4 id=\"a-subarray-means-a-contiguous-part-of-an-array-for-example-in-arr-1-2-3-4-1-2-2-3-4-are-the-contiguous-subarry-but-1-3-4-is-not-a-subarray\">A subarray means a contiguous part of an array. For example, In &#39;arr&#39; = [1, 2, 3, 4], [1, 2], [2, 3, 4] are the contiguous subarry but [1, 3, 4] is not a subarray.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>More than one sub-array can have a maximum sum, in that case, output any.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the size of the array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each case, If the returned subarray is correct then print 1, else print 0.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to input or print anything, and it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 1000\n-99 &lt;= |arr| &lt;= 99\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n6\n1 2 5 -7 2 3\n4\n-2 -3 -4 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n1    \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nFor the first test case of sample output 1, as we start traveling the array, the summation of the first 3 elements counts to 8 but if add the rest of the elements, our sum decreases on reaching the end. Hence our maximum subarray will be [ 1, 2, 5 ]. \n\nTest case 2:   \nFor the second test case of sample output 1, as we start traveling the array, we find that our maximum subarray would contain only the last element as the rest of the elements make the sum negative. Hence our maximum subarray will be [1].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n7\n-3 1 2 3 -4 6 -9\n4\n-4 -3 -2 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 \n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2:</h5>\n\n<pre><code>Test case 1:\nFor the first test case of sample output 2, we would consider the subarray [ 1, 2, 3, -4, 6].\n\nTest case 2:   \nFor the second test case of sample output 2, as we start traveling the array, we find that all the numbers in the array are negative. So, our maximum sum subarray is [-1]\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 59,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the contiguous subarray with the largest sum. If multiple subarrays have the same maximum sum, return the one with the largest length.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 1000",
                    "-99 <= arr[i] <= 99",
                    "Time limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "6\n1 2 5 -7 2 3\n4\n-2 -3 -4 1",
                        "output": "1\n1",
                        "explanation": "Test case 1: The subarray [1, 2, 5] has the maximum sum of 8.\nTest case 2: The subarray [1] has the maximum sum of 1."
                    },
                    {
                        "input": "7\n-3 1 2 3 -4 6 -9\n4\n-4 -3 -2 -1",
                        "output": "1\n1",
                        "explanation": "Test case 1: The subarray [1, 2, 3, -4, 6] has the maximum sum of 8.\nTest case 2: The subarray [-1] has the maximum sum of -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find all possible combinations possible.</p>",
            "<p>Can we find our maximum sum in one single traverse??</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}