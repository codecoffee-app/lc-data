{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9725,
            "title": "Maximum Subtree Sum",
            "titleSlug": "maximum-subtree-sum_1082330",
            "content": "<h4 id=\"you-are-given-an-arbitrary-binary-tree-consisting-of-n-nodes-your-task-is-to-find-the-largest-subtree-sum\">You are given an arbitrary binary tree consisting of N nodes. Your task is to find the largest subtree sum.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1. The value of any node will not be equal to zero.\n2. Subtree of a node X is all the nodes that are below X and X itself.\n3. For example in the tree given below, nodes 1, 2 and 3 are in subtree of 1.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-2021-01-19-190613-7571.png\" alt=\"altImage\"></p>\n\n<pre><code>4. Subtree sum of X is the sum value of all the nodes in subtree of X.  \n5. Binary tree is a tree wherein each node has at most two children.  \n6. Any two nodes may have the same value associated with it.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>First line of each input has a single integer T, denoting the number of test cases.\n\nFirst line of each test case contains a single integer N, denoting the number of nodes in the tree.\n\nThe second line contains the values of the nodes of the tree in the level order form ( 0 for NULL node) Refer to the example for further clarification.\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Consider the binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-2021-01-19-191154-7572.png\" alt=\"altImage\"></p>\n\n<h4 id=\"the-input-of-the-tree-depicted-in-the-image-above-will-be-like\">The input of the tree depicted in the image above will be like:</h4>\n\n<pre><code>1\n2 3\n4 0 5 6\n0 7 0 0 0 0\n0 0\n\nExplanation :\n7 is the number of nodes\nSecond-line contains the value of nodes from 1 to 7.\nThen the structure of the tree follows. \nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (0)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (0)\nRight child of 4 = 7\nLeft child of 5 = null (0)\nRight child of 5 = null (0)\nLeft child of 6 = null (0)\nRight child of 6 = null (0)\n\nLevel 5 :\nLeft child of 7 = null (0)\nRight child of 7 = null (0)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (0).\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case print a single integer on a new line, representing the maximum subtree sum.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n1 &lt;= N &lt;= 3*10^3\n10^(-9) &lt;= VAL[i] &lt;= 10*(9)\n\nWhere &#39;VAL&#39; denotes the values of nodes in binary tree.\n\nTime Limit : 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n6\n-5 1 2 1 1 0 3 0 0 0 0 0 0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>5\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>The above test case represents the following tree.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-2021-01-19-191424-7573.png\" alt=\"altImage\"></p>\n\n<pre><code>So if we calculate the subtree sum of all nodes we will get the following answer.\nSubtreeSum[-5] = 3\nSubtreeSum[1] = 3\nSubtreeSum[2] = 5\nSubtreeSum[1] = 1\nSubtreeSum[1] = 1\nSubtreeSum[3] = 3\nSo the largest subtree sum is 5.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n7\n10 -3 -3 1 1 1 1 0 0 0 0 0 0 0 0 \n1\n-1 0 0 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>8\n-1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation For Sample Output 2 :</h5>\n\n<pre><code>In test case 1 , we are given the following tree.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-2021-01-19-191618-7574.png\" alt=\"altImage\"></p>\n\n<pre><code>So if we calculate the subtree sum of all nodes we will get the following answer.\nSubtreeSum[10] = 8\nSubtreeSum[-3] = -1\nSubtreeSum[-3] = -1\nSubtreeSum[1] = 1\nSubtreeSum[1] = 1\nSubtreeSum[1] = 1\nSubtreeSum[1] = 1\nSo the largest subtree sum is 8.\n\nIn the second test case we have only one node so there will be only one subtree so we return its value as answer that is we return -1.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree represented by its root node, find the largest subtree sum. The subtree of a node X includes all nodes below X and X itself. The subtree sum is the sum of all node values within that subtree.",
                "constraints": [
                    "1 <= T <= 10^2",
                    "1 <= N <= 3 * 10^3",
                    "-10^9 <= VAL[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "root = [1, 2, 3, 4, 0, 5, 6, 0, 7, 0, 0, 0, 0, 0, 0]",
                        "output": "5",
                        "explanation": "The tree is:\n\n      1\n     / \\\n    2   3\n   /   / \\\n  4   5   6\n   \\ \n    7\n\nSubtreeSum[1] = 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28\nSubtreeSum[2] = 2 + 4 + 7 = 13\nSubtreeSum[3] = 3 + 5 + 6 = 14\nSubtreeSum[4] = 4 + 7 = 11\nSubtreeSum[5] = 5\nSubtreeSum[6] = 6\nSubtreeSum[7] = 7\n\nActually it is not what the description say. \nSubtreeSum[-5] = -5 + 1 + 2 + 1 + 1 + 0 + 3= 3\nSubtreeSum[1] = 1+ 1 + 1=3\nSubtreeSum[2] = 2 + 1 + 2 = 5\nSubtreeSum[1] = 1\nSubtreeSum[1] = 1\nSubtreeSum[3] = 3\nSo the largest subtree sum is 5."
                    },
                    {
                        "input": "root = [10, -3, -3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]",
                        "output": "8",
                        "explanation": "The tree is:\n\n          10\n         /  \\\n       -3    -3\n      /  \\  /  \\\n     1    1 1   1\n\nSubtreeSum[10] = 10 + (-3) + (-3) + 1 + 1 + 1 + 1 = 8\nSubtreeSum[-3] = -3 + 1 + 1 = -1\nSubtreeSum[-3] = -3 + 1 + 1 = -1\nSubtreeSum[1] = 1\nSubtreeSum[1] = 1\nSubtreeSum[1] = 1\nSubtreeSum[1] = 1\n\nThe largest subtree sum is 8."
                    },
                    {
                        "input": "root = [-1, 0, 0]",
                        "output": "-1",
                        "explanation": "The tree is:\n\n    -1\n   /  \\\n  0    0\n\nSubtreeSum[-1] = -1 + 0 + 0 = -1\nSubtreeSum[0] = 0\nSubtreeSum[0] = 0\n\nThe largest subtree sum is -1."
                    },
                    {
                        "input": "root = [-5, 1, 2, 1, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0]",
                        "output": "5",
                        "explanation": "The tree is:\n\n          -5\n         /  \\\n       1    2\n      /  \\  /  \\\n     1    1 0   3\n\nSubtreeSum[-5] = -5 + 1 + 2 + 1 + 1 + 0 + 3 = 3\nSubtreeSum[1] = 1+1+1=3\nSubtreeSum[2] = 2+0+3=5\nSubtreeSum[1] = 1\nSubtreeSum[1] = 1\nSubtreeSum[0] = 0\nSubtreeSum[3] = 3\n\nThe largest subtree sum is 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of using some extra space for storing nodes of the tree.</p>",
            "<p>Think of using tree traversal.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}