{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14253,
            "title": "Maximum Sum BST In Binary Tree",
            "titleSlug": "maximum-sum-bst-in-binary-tree_2099910",
            "content": "<h4 id=\"you-are-given-a-binary-tree-root-the-given-binary-tree-may-or-may-not-be-a-binary-search-tree-bst-itself-your-task-is-to-find-the-maximum-sum-of-node-values-of-any-subtree-that-is-a-binary-search-tree-bst\">You are given a Binary Tree \u2018root\u2019. The given Binary Tree may or may not be a Binary Search Tree(BST) itself. Your task is to find the maximum sum of node values of any subtree that is a Binary Search Tree(BST).</h4>\n\n<h5 id=\"binary-search-tree-is-defined-as-follows\">Binary Search Tree is defined as follows:</h5>\n\n<pre><code>1) If the left subtree exists it should contain only nodes with values less than the current node&#39;s value.\n\n2) If the right subtree exists it should contain only nodes with values greater than the current node&#39;s value.\n\n3) Both the left and right subtrees should also be Binary Search Tree.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<p><img src=\"https://files.codingninjas.in/grid3-12029.jpg\" alt=\"\"></p>\n\n<pre><code>For the above binary tree, the BST with the maximum possible sum is marked with RED colour, the sum of this BST is equal to 6.\n</code></pre>\n\n<p>&nbsp</p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. \n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case print the maximum sum possible.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10      \n1 &lt;= Number Of Nodes &lt;= 5*10^4\n0 &lt;= Node.data &lt;= 10^5\n\nTime limit: 1 sec\n</code></pre>\n\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1\n1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>28\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation Of Sample Output 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/sampletree1-11874.jpg\" alt=\"\"></p>\n\n<pre><code>For test case 1, the image above shows the input tree:\nGiven binary tree is itself a BST, also as all the nodes have positive values hence entire tree will be the subtree with maximum sum. Sum of all the node values is: 1 + 2 + 3 + 4 +5 + 6 + 7 = 28 \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sampletree2-11875.jpg\" alt=\"\"></p>\n\n<pre><code>For test case 2, the image above shows the input tree:\nThe subtree with a single node and node value equal to 3 is the BST with maximum sum.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2 1 3 -1 -1 -1 -1\n1 3 2 2 4 1 3 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>6\n9\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, which may or may not be a Binary Search Tree (BST), find the maximum sum of node values of any subtree that *is* a BST.\n\nA Binary Search Tree is defined as follows:\n\n1.  For every node, all nodes in its left subtree have values less than the node's value.\n2.  For every node, all nodes in its right subtree have values greater than the node's value.\n3.  Both the left and right subtrees must also be BSTs.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= Number Of Nodes <= 5 * 10^4",
                    "0 <= Node.data <= 10^5",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1\n1 2 3 -1 -1 -1 -1",
                        "output": "28\n3",
                        "explanation": "Test case 1: The input tree is already a BST, and since all nodes have positive values, the entire tree is the BST with the maximum sum (4 + 2 + 6 + 1 + 3 + 5 + 7 = 28).\n\nTest case 2: The largest BST subtree is the single node with value 3."
                    },
                    {
                        "input": "2 1 3 -1 -1 -1 -1\n1 3 2 2 4 1 3 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "6\n9",
                        "explanation": "Test case 1: The given tree is a valid BST and the sum is 2+1+3 = 6.\nTest case 2: The BST with the maximum sum consists of the subtree with nodes [2,2,4,1,3] the sum of this tree is 9. Consider the nodes 2,1,3"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse the entire tree and for each node evaluate sum of the subtree if it is a BST.</p>",
            "<p>Evaluate the following parameters for each node: isBST, maxSum, maxLeft, minRight</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}