{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10039,
            "title": "Maximum Sum of nodes in a binary tree such that no two nodes are adjacent",
            "titleSlug": "maximum-sum-of-nodes-in-a-binary-tree-such-that-no-two-nodes-are-adjacent_1118112",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-with-an-integer-value-associated-to-each-node-you-are-supposed-to-choose-a-subset-of-these-nodes-such-that-the-sum-of-these-chosen-nodes-is-maximum-keep-in-mind-that-no-two-of-the-chosen-nodes-must-be-adjacent-to-each-other\">You have been given a binary tree with an integer value associated to each node. You are supposed to choose a subset of these nodes such that the sum of these chosen nodes is maximum. Keep in mind that no two of the chosen nodes must be adjacent to each other.</h4>\n\n<h5 id=\"note\">Note  :</h5>\n\n<pre><code>Two nodes are said to be adjacent to each other if they are directly connected to each other. This means that if a node is taken as part of the sum, then none of its children can be considered for the same and vice versa.\n</code></pre>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>For the given binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/maximum-sum-of-nodes-in-a-binary-tree-such-that-no-two-nodes-are-adjacent-3-7844.png\" alt=\"Example\"></p>\n\n<pre><code>Nodes used in consideration for maximum sum such that no two of them are adjacent are highlighted. Maximum sum of nodes = 1 + 1 + 1 + 4 + 5 = 12.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases are as follows.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/maximum-sum-of-nodes-in-a-binary-tree-such-that-no-two-nodes-are-adjacent-7840.png\" alt=\"Example\"></p>\n\n<pre><code>Input Format :   \n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the maximum sum of nodes keeping the above constraints in mind.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. You just need to return the maximum sum of nodes.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 3000\n1 &lt;= data &lt;= 10^4\n\n Where \u2018T\u2019 is the number of test cases, and \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cdata\u201d is the value of the binary tree node.\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n1 2 3 1 -1 4 5 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>11\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>The binary tree will look like this:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000457_1623447651_image1.png\" alt=\"Example\"></p>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000458_1623449333_maximum_sum_of_nodes.png\" alt=\"Example\"></p>\n\n<pre><code>In the above Binary tree chosen nodes(highlighted) such that the sum of nodes is maximum and they are not adjacent to each other = 2, 4, 5 and their sum = 2 + 4 + 5 = 11. Hence, the output is 11   \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 2 3 -1 -1 -1 -1\n7 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5\n7 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h5>\n\n<pre><code>For the first test case, the maximum sum of nodes = 2 + 3 = 5\nFor the third test case, the maximum sum of nodes = 7.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 27,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree where each node has an integer value, determine the maximum sum achievable by selecting a subset of nodes. The key constraint is that no two selected nodes can be adjacent (i.e., directly connected as parent and child).",
                "constraints": [
                    "1 <= T <= 100",
                    "0 <= N <= 3000",
                    "1 <= data <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "root = TreeNode(1), root.left = TreeNode(2), root.right = TreeNode(3), root.left.left = TreeNode(1), root.right.left = TreeNode(4), root.right.right = TreeNode(5)",
                        "output": "11",
                        "explanation": "The optimal subset is {2, 4, 5}, resulting in a sum of 11."
                    },
                    {
                        "input": "root = TreeNode(1), root.left = TreeNode(2), root.right = TreeNode(3)",
                        "output": "5",
                        "explanation": "The optimal subset is either {2, 3} or {1}, the first gives sum 5."
                    },
                    {
                        "input": "root = TreeNode(7)",
                        "output": "7",
                        "explanation": "The only node in the tree is 7, so the maximum sum is 7."
                    },
                    {
                        "input": "root = TreeNode(10), root.left = TreeNode(1), root.right = TreeNode(2)",
                        "output": "3",
                        "explanation": "optimal is 1, 2 or 10, 1 and 2 together are 3, which is the optimal value"
                    },
                    {
                        "input": "root = TreeNode(1), root.left = TreeNode(5), root.right = TreeNode(2), root.left.left = TreeNode(3), root.left.right = TreeNode(4)",
                        "output": "11",
                        "explanation": "The optimal solution is to pick 1 and 3,4 giving 8. Other option is 5 which gives better"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about the fact that if a parent node is considered then none of its child nodes will be considered and vice versa.</p>",
            "<p>Can you think of a way to do this in constant space?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}