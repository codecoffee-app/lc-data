{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8311,
            "title": "Maximum sum of non-adjacent elements",
            "titleSlug": "maximum-sum-of-non-adjacent-elements_843261",
            "content": "<h4 id=\"you-are-given-an-array-list-of-n-integers-you-are-supposed-to-return-the-maximum-sum-of-the-subsequence-with-the-constraint-that-no-two-elements-are-adjacent-in-the-given-array-list\">You are given an array/list of \u2018N\u2019 integers. You are supposed to return the maximum sum of the subsequence with the constraint that no two elements are adjacent in the given array/list.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>A subsequence of an array/list is obtained by deleting some number of elements (can be zero) from the array/list, leaving the remaining elements in their original order.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of elements in the array.\n\nThe second line contains \u2018N\u2019 single space-separated integers denoting the elements of the array/list.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print a single integer that denotes the maximum sum of the non-adjacent elements.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 500\n1 &lt;= N &lt;= 1000\n0 &lt;= ARR[i] &lt;= 10^5\n\nWhere &#39;ARR[i]&#39; denotes the &#39;i-th&#39; element in the array/list.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\n1 2 4\n4\n2 1 4 9\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>5\n11\n</code></pre>\n\n<h5 id=\"explanation-to-sample-output-1\">Explanation to Sample Output 1:</h5>\n\n<pre><code>In test case 1, the sum of &#39;ARR[0]&#39; &amp; &#39;ARR[2]&#39; is 5 which is greater than &#39;ARR[1]&#39; which is 2 so the answer is 5.\n\nIn test case 2, the sum of &#39;ARR[0]&#39; and &#39;ARR[2]&#39; is 6, the sum of &#39;ARR[1]&#39; and &#39;ARR[3]&#39; is 10, and the sum of &#39;ARR[0]&#39; and &#39;ARR[3]&#39; is 11. So if we take the sum of &#39;ARR[0]&#39; and &#39;ARR[3]&#39;, it will give the maximum sum of sequence in which no elements are adjacent in the given array/list.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n1 2 3 5 4\n9\n1 2 3 1 3 5 8 1 9\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>8\n24\n</code></pre>\n\n<h5 id=\"explanation-to-sample-output-2\">Explanation to Sample Output 2:</h5>\n\n<pre><code>In test case 1, out of all the possibilities, if we take the sum of &#39;ARR[0]&#39;, &#39;ARR[2]&#39; and &#39;ARR[4]&#39;, i.e. 8, it will give the maximum sum of sequence in which no elements are adjacent in the given array/list.\n\nIn test case 2, out of all the possibilities, if we take the sum of &#39;ARR[0]&#39;, &#39;ARR[2]&#39;, &#39;ARR[4]&#39;, &#39;ARR[6]&#39; and &#39;ARR[8]&#39;, i.e. 24 so, it will give the maximum sum of sequence in which no elements are adjacent in the given array/list.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 463,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the maximum sum of a subsequence such that no two elements in the subsequence are adjacent in the original array.",
                "constraints": [
                    "1 <= T <= 500",
                    "1 <= N <= 1000",
                    "0 <= ARR[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 3, nums=[1, 2, 4]",
                        "output": "5",
                        "explanation": "The subsequence [1, 4] gives the maximum sum of 5, as no two elements are adjacent."
                    },
                    {
                        "input": "n = 4, nums=[2, 1, 4, 9]",
                        "output": "11",
                        "explanation": "The subsequence [2, 9] gives the maximum sum of 11, as no two elements are adjacent."
                    },
                    {
                        "input": "n = 5, nums=[1, 2, 3, 5, 4]",
                        "output": "8",
                        "explanation": "The subsequence [1, 3, 4] gives the maximum sum of 8, as no two elements are adjacent. Alternatively, [1, 5] also equals to 6 and [2, 5] = 7. so the largest is 8"
                    },
                    {
                        "input": "n = 9, nums=[1, 2, 3, 1, 3, 5, 8, 1, 9]",
                        "output": "24",
                        "explanation": "The subsequence [1, 3, 5, 8, 9] gives the maximum sum of 24, as no two elements are adjacent."
                    },
                    {
                        "input": "n = 1, nums=[5]",
                        "output": "5",
                        "explanation": "When array has only one element the sum is the element itself."
                    },
                    {
                        "input": "n = 2, nums=[5, 10]",
                        "output": "10",
                        "explanation": "We can pick either 5 or 10 and since 10 > 5 we pick 10"
                    },
                    {
                        "input": "n=6, nums=[1, 0, 2, 0, 3, 0]",
                        "output": "6",
                        "explanation": "The subsequence [1, 2, 3] gives the maximum sum of 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Explore all the possible subsequences with given constraints.</p>",
            "<p>How can we reduce the redundant function recursive calls?</p>",
            "<p>Do we need to store all the previous results in the \u2018DP\u2019 array? Can you solve it using Constant space?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(1)\n    \n    Where \u2018N\u2019 is the number of elements in the array/list.\n*/\n\nint maximumNonAdjacentSum(vector<int> &nums){\n    int n = nums.size();\n\n    // Two variables to store the previous results.\n    int prevFirst = 0;\n    int prevSecond = 0;\n\n    for (int i = 0; i < n; i++){\n        int temp = prevFirst;\n        prevFirst = max(prevSecond + nums[i], prevFirst);\n        prevSecond = temp;\n    }\n    return prevFirst;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity : O(N)\n    Space Complexity : O(1)\n\n    Where 'N' is the number of elements in the array/list.\n*/\n\nimport java.util.ArrayList;\n\npublic class Solution {\n\tpublic static int maximumNonAdjacentSum(ArrayList<Integer> nums) {\n\t\tint n = nums.size();\n\n\t\t// Two variables to store the previous results.\n\t\tint prevFirst = 0;\n\t\tint prevSecond = 0;\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint temp = prevFirst;\n\n\t\t\tprevFirst = Math.max(prevSecond + nums.get(i), prevFirst);\n\t\t\tprevSecond = temp;\n\t\t}\n\t\treturn prevFirst;\n\t}\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity : O(N)\n    Space Complexity : O(1)\n\n    Where 'N' is the number of elements in the array/list.\n'''\n\nfrom sys import stdin\n\ndef maximumNonAdjacentSum(nums):\n    n = len(nums)\n\n    # Two variables to store the previous results.\n    prevFirst = 0\n    prevSecond = 0\n\n    for i in range(0, n):\n        temp = prevFirst\n        prevFirst = max(prevSecond + nums[i],prevFirst)\n        prevSecond = temp\n\n    return prevFirst\n\n# Main.\nt = int(stdin.readline().rstrip())\n\nwhile t > 0:\n    \n    n = int(stdin.readline().rstrip())\n    arr = list(map(int, stdin.readline().rstrip().split(\" \")))\n    print(maximumNonAdjacentSum(arr))\n    \n    t -= 1",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}