{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9089,
            "title": "Maximum sum path from the leaf to root",
            "titleSlug": "maximum-sum-path-from-the-leaf-to-root_975299",
            "content": "<h4 id=\"you-are-given-a-binary-tree-of-n-nodes\">You are given a binary tree of &#39;N&#39; nodes.</h4>\n\n<h4 id=\"your-task-is-to-find-the-path-from-the-leaf-node-to-the-root-node-which-has-the-maximum-path-sum-among-all-the-root-to-leaf-paths\">Your task is to find the path from the leaf node to the root node which has the maximum path sum among all the root to leaf paths.</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<p><img src=\"https://files.codingninjas.in/screenshot_2020-12-09-pd-and-approaches-6477.png\" alt=\"sample tree\"></p>\n\n<pre><code>All the possible root to leaf paths are:\n3, 4, -2, 4 with sum 9\n5, 3, 4 with sum 12\n6, 3, 4 with sum 13\nHere, the maximum sum is 13. Thus, the output path will be 6, 3, 4.\n</code></pre>\n\n<h3 id=\"note\">Note:</h3>\n\n<pre><code>There will be only 1 path with max sum.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The very first line of input contains an integer &#39;T&#39; denoting the number of queries or test cases. \n\nThe first and only line of every test case contains elements of the binary tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take 0 in its place.\n\nFor example, the level order input for the tree depicted in the above image would be :\n\n4\n-2 3\n4 0 5 6\n0 3 0 0 0 0\n0 0\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 4\n\nLevel 2 :\nLeft child of 4 = -2\nRight child of 4 = 3\n\nLevel 3 :\nLeft child of -2 = 4\nRight child of -2 = null (0)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (0)\nRight child of 4 = 3\nLeft child of 5 = null (0)\nRight child of 5 = null (0)\nLeft child of 6 = null (0)\nRight child of 6 = null (0)\n\nLevel 5 :\nLeft child of 3 = null (0)\nRight child of 3 = null (0)\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n4 -2 3 4 0 5 6 0 7 0 0 0 0 0 0\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print integers representing the path from the leaf node to the root node which has the maximum sum separated by spaces in a single line. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n-10 ^ 5 &lt;= DATA &lt;= 10 ^ 5, DATA != 0\n\nwhere &#39;T&#39; is the number of test cases, &#39;N&#39; is the number of nodes in the tree and &#39;DATA&#39; is the value of each node.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1:</h5>\n\n<pre><code>2\n4 -2 3 4 0 5 6 0 3 0 0 0 0 0 0\n1 0 2 0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>6 3 4\n2 1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>For test case 1: Refer to the example given above in the problem description.\n\nFor test case2: The tree given in the input can be represented as:-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot_2020-12-09-pd-and-approaches-1-6478.png\" alt=\"test case 2\"></p>\n\n<pre><code>There is only 1 possible path from the leaf to root which is 2, 1 with sum 3. So, this will be our answer.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample input 2:</h5>\n\n<pre><code>2\n4 3 2 -10 0 3 1 0 0 0 0 0 0\n6 1 3 5 0 0 2 0 0 0 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>3 2 4\n5 1 6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 14,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of 'N' nodes, find the path from a leaf node to the root node that yields the maximum path sum among all possible root-to-leaf paths.  Assume there will be only one path with the maximum sum.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 3000 (Number of nodes in the tree)",
                    "-10^5 <= DATA <= 10^5, DATA != 0 (Value of each node)",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 -2 3 4 0 5 6 0 3 0 0 0 0 0 0",
                        "output": "6 3 4",
                        "explanation": "The binary tree can be constructed from the level-order traversal. The root-to-leaf paths are: (3, 4, -2, 4) with a sum of 9, (5, 3, 4) with a sum of 12, and (6, 3, 4) with a sum of 13.  The path with the maximum sum is 6, 3, 4."
                    },
                    {
                        "input": "1 0 2 0 0",
                        "output": "2 1",
                        "explanation": "The binary tree has root 1 and a right child 2. The only leaf-to-root path is 2, 1."
                    },
                    {
                        "input": "4 3 2 -10 0 3 1 0 0 0 0 0 0",
                        "output": "3 2 4",
                        "explanation": null
                    },
                    {
                        "input": "6 1 3 5 0 0 2 0 0 0 0",
                        "output": "5 1 6",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The idea is to use recursion to get the maximum sum path. We can recursively get the max sum path from the left and right subtree, then, we can choose the one with the maximum sum.</p>",
            "<p>We can go through all the paths and find the maximum root to leaf sum possible, then, we can print the path with that particular maximum sum.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}