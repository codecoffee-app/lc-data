{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10412,
            "title": "Maximum Sum path of a binary tree.",
            "titleSlug": "maximum-sum-path-of-a-binary-tree_1214968",
            "content": "<h4 id=\"you-are-given-a-binary-tree-having-n-nodes-each-node-of-the-tree-has-an-integer-value\">You are given a binary tree having <em><strong>&#39;n&#39;</strong></em> nodes. Each node of the tree has an integer value.</h4>\n\n<p><br></p>\n\n<h4 id=\"your-task-is-to-find-the-maximum-possible-sum-of-a-simple-path-between-any-two-nodes-possibly-the-same-of-the-given-tree\">Your task is to find the maximum possible sum of a simple path between any two nodes (possibly the same) of the given tree.</h4>\n\n<p><br></p>\n\n<h4 id=\"a-simple-path-is-a-path-between-any-two-nodes-of-a-tree-such-that-no-edge-in-the-path-is-repeated-twice-the-sum-of-a-simple-path-is-defined-as-the-summation-of-all-node-values-in-a-path\">A simple path is a path between any two nodes of a tree, such that no edge in the path is repeated twice. The sum of a simple path is defined as the summation of all node values in a path.</h4>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The only line of input contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binarytree3-5126.png\" alt=\"Example Input\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level, and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print the maximum sum of a simple path between any two nodes of the given tree.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1 2 3 4 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>10\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>The tree looks as follows:\n                        1\n                       / \\\n                      2   3 \n                     /\n                    4\nThe path between Node 3 (with value 3) and Node 4 (with value 4) produces the maximum sum, i.e., 10. Hence, the maximum possible sum is 10 in this case.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2 4 -1 3 6 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>13\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>The tree looks as follows:\n                        2\n                       / \n                      4    \n                     / \\   \n                    3   6\nThe path between Node 3 (with value 3) and Node 4 (with value 6) produces the maximum sum, i.e., 13. Hence, the maximum possible sum is 13 in this case.\n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity:</h5>\n\n<pre><code> The expected time complexity is O(n).\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10^6\n-10^5 &lt;= &#39;data&#39; &lt;= 10^5 and &#39;data&#39; !=-1\n\nWhere \u2018n\u2019 is the total number of nodes in the binary tree, and &#39;data&#39; is the value of the binary tree node\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 49,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with 'n' nodes, where each node has an integer value, find the maximum possible sum of a simple path between any two nodes in the tree. A simple path is a path where no edge is repeated. The sum of the path is the sum of all node values in that path.",
                "constraints": [
                    "1 <= n <= 10^6",
                    "-10^5 <= data <= 10^5 and data != -1",
                    "Where \u2018n\u2019 is the total number of nodes in the binary tree, and 'data' is the value of the binary tree node",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 -1 -1 -1 -1 -1",
                        "output": "10",
                        "explanation": "The tree structure is:\n        1\n       / \\\n      2   3 \n     /\n    4\nThe path between nodes 3 and 4 (3 -> 1 -> 2 -> 4) yields the highest sum: 3 + 1 + 2 + 4 = 10."
                    },
                    {
                        "input": "2 4 -1 3 6 -1 -1 -1 -1",
                        "output": "13",
                        "explanation": "The tree structure is:\n    2\n   /\n  4\n / \\\n3   6\nThe path between nodes 3 and 6 (3 -> 4 -> 6) yields the highest sum: 3 + 4 + 6 = 13."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of a recursive approach to solve the problem.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}