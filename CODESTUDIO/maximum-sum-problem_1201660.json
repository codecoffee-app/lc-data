{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10286,
            "title": "Maximum Sum Problem",
            "titleSlug": "maximum-sum-problem_1201660",
            "content": "<h4 id=\"you-are-given-a-number-n-that-can-be-broken-into-three-parts-n-2-n-3-and-n-4-considering-only-integer-parts-each-number-obtained-in-this-process-can-be-divided-further-recursively-your-task-is-to-find-the-maximum-sum-that-can-be-obtained-by-summing-up-the-divided-parts-together\">You are given a number N that can be broken into three parts N / 2, N / 3, and N / 4 (considering only integer parts). Each number obtained in this process can be divided further recursively. Your task is to find the maximum sum that can be obtained by summing up the divided parts together.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The maximum sum may be obtained without dividing N also.\n</code></pre>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>N = 12 breaking N into three parts will give 6, 4, and 3 which gives us the sum = 13. Further breaking 6, 4, and 3 into other parts will give us a sum less than or equal to 6, 4, and 3 respectively. Therefore, the maximum answer will be 13.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer T denoting the number of test cases.\n\nThe first and the only line of each test case contains a single integer N.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code> For each test case, in a separate line, print a single integer which is the maximum sum. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t have to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 3000\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n19\n21\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>19\n22\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case:\nGiven N = 19, breaking it into three parts {9, 6, 4} which gives a sum of 19, and further breaking these three numbers will still produce less than or equal sum to 19. Therefore, the answer will be 19.\n\nFor the second test case:\nGiven N = 21, breaking it into three parts {10, 7, 5} which gives a sum of 22, and further breaking these three numbers will still produce less than or equal sum to 22. Therefore, the answer will be 22.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3\n4\n29\n13\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4\n30\n13\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer N, you can break it down into three integer parts: N/2, N/3, and N/4. This process can be applied recursively to each of these parts. The goal is to find the maximum sum that can be obtained by repeatedly breaking down the numbers and summing the resulting parts.  It's important to note that sometimes not dividing N at all yields the maximum sum.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 3000",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "19\n21",
                        "output": "19\n22",
                        "explanation": "For N = 19, dividing into parts 19/2 = 9, 19/3 = 6, and 19/4 = 4 yields a sum of 9 + 6 + 4 = 19. Further divisions will not increase the sum. For N = 21, dividing into parts 21/2 = 10, 21/3 = 7, and 21/4 = 5 yields a sum of 10 + 7 + 5 = 22. Again, further divisions won't result in a larger sum."
                    },
                    {
                        "input": "4",
                        "output": "4",
                        "explanation": "For N = 4, breaking it into parts 4/2 = 2, 4/3 = 1, and 4/4 = 1 which gives a sum of 2 + 1 + 1 = 4. Therefore, the answer will be 4."
                    },
                    {
                        "input": "29",
                        "output": "30",
                        "explanation": "For N = 29, dividing into parts 29/2 = 14, 29/3 = 9, and 29/4 = 7 which gives a sum of 14 + 9 + 7 = 30. Therefore, the answer will be 30."
                    },
                    {
                        "input": "13",
                        "output": "13",
                        "explanation": "For N = 13, breaking it into parts 13/2 = 6, 13/3 = 4, and 13/4 = 3 which gives a sum of 6 + 4 + 3 = 13. Therefore, the answer will be 13."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you do it recursively?</p>",
            "<p>Save your previous result so that you can avoid redundant function calls.</p>",
            "<p>Can you use the already calculated sum?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}