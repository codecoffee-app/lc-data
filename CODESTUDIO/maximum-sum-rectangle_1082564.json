{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9741,
            "title": "Maximum Sum Rectangle",
            "titleSlug": "maximum-sum-rectangle_1082564",
            "content": "<h4 id=\"you-are-given-a-matrix-arr-with-n-rows-and-m-columns-your-task-is-to-find-the-maximum-sum-rectangle-in-the-matrix\">You are given a matrix \u2018ARR\u2019 with \u2018N\u2019 rows and \u2018M\u2019 columns. Your task is to find the maximum sum rectangle in the matrix.</h4>\n\n<h4 id=\"maximum-sum-rectangle-is-a-rectangle-with-the-maximum-value-for-the-sum-of-integers-present-within-its-boundary-considering-all-the-rectangles-that-can-be-formed-from-the-elements-of-that-matrix\">Maximum sum rectangle is a rectangle with the maximum value for the sum of integers present within its boundary, considering all the rectangles that can be formed from the elements of that matrix.</h4>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>Consider following matrix:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image4-7074.png\" alt=\"\"></p>\n\n<pre><code>The rectangle (1,1) to (3,3) is the rectangle with the maximum sum, i.e. 29.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image1-7077.png\" alt=\"\"></p>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test cases follow.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018M\u2019 denoting the number of rows and number of columns respectively.\n\nThe next \u2018N\u2019 lines contain \u2018M\u2019 space-separated integers denoting the elements of ARR.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, print the value of the sum for the maximum sum rectangle.\n\nPrint the output of each test case in a separated line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code> 1 &lt;= T &lt;= 10\n 1 &lt;= M, N &lt;= 75\n -10^5 &lt;= ARR[i][j] &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1</h5>\n\n<pre><code>2\n1 2\n-1 1\n2 2\n-1 1\n2 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code>1\n4\n</code></pre>\n\n<h5 id=\"explanation-of-input-1\">Explanation of Input 1</h5>\n\n<pre><code>The maximum sum rectangle corresponding to the first test case is-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image6-7072.png\" alt=\"\"></p>\n\n<pre><code>The maximum sum rectangle corresponding to the second test case is-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image2-7076.png\" alt=\"\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2</h5>\n\n<pre><code>1\n4 5\n1 2 -1 -4 -20\n-8 -3  4 2 1\n3  8 10 1 3\n-4 -1 1 7 -6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>29\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 220,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix 'ARR' of 'N' rows and 'M' columns, find the rectangle within the matrix that has the maximum sum of its elements. A maximum sum rectangle is defined as the rectangle with the highest total value for the sum of the integers contained within its boundaries, considering all possible rectangles that can be formed from the matrix elements.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= M, N <= 75",
                    "-10^5 <= ARR[i][j] <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2\n-1 1",
                        "output": "1",
                        "explanation": "The matrix is [[-1, 1]]. The maximum sum rectangle is the single element '1'."
                    },
                    {
                        "input": "2 2\n-1 1\n2 2",
                        "output": "4",
                        "explanation": "The matrix is [[-1, 1], [2, 2]]. The maximum sum rectangle is the entire matrix with sum -1 + 1 + 2 + 2 = 4."
                    },
                    {
                        "input": "4 5\n1 2 -1 -4 -20\n-8 -3 4 2 1\n3 8 10 1 3\n-4 -1 1 7 -6",
                        "output": "29",
                        "explanation": "The maximum sum rectangle is from (2,2) to (3,4), containing the elements 8, 10, 1, -1, 1, 7, adding up to 29."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we iterate over all possible rectangles?</p>",
            "<p>Can we use prefix sum to solve this problem?</p>",
            "<p>Can we use the Kadane Algorithm for maximum subarray sum to solve this problem?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity: O(N * M * M)\r\n    Space complexity: O(N)\r\n    \r\n    Where N denotes the number of rows of the matrix and M denotes the number of columns of the matrix.\r\n\r\n*/\r\n\r\nint kadaneAlgorithm(int arr[], int n)\r\n{\r\n\tint sum = 0;\r\n\t\r\n\tint maxSum = INT_MIN;\r\n    \r\n    // Traverse the array.\r\n\tfor(int currIndex = 0; currIndex < n; currIndex++)\r\n\t{\r\n\t\tsum += arr[currIndex];\r\n\r\n\t\tif(maxSum < sum)\r\n\t\t{\r\n\t\t\tmaxSum = sum;\r\n\t\t}\r\n\t\t\r\n\t\tif(sum < 0)\r\n\t\t{\r\n\t\t\tsum = 0;\r\n\t\t}\r\n\t}\r\n\r\n\treturn maxSum;\r\n}\r\n\r\nint maxSumRectangle(vector<vector<int>>& arr, int n, int m)\r\n{\r\n\tint maxSum = INT_MIN;\r\n\t\r\n    // Initialize a 1-D array.\r\n\tint temp[n];\r\n    \r\n    // heck for all possible left and right boundaries.\r\n\tfor(int left = 0; left < m; left++)\r\n\t{\r\n\t\tfor(int i = 0; i < n; i++)\r\n\t\t{\r\n\t\t\ttemp[i] = 0;\r\n\t\t}\r\n\r\n\t\tfor(int right = left; right < m; right++)\r\n\t\t{\r\n\t\t\tfor(int i = 0; i < n; i++)\r\n\t\t\t{\r\n\t\t\t\ttemp[i] += arr[i][right];\r\n\t\t\t}\r\n            \r\n            // Function to find maximum sum of sub array of array 'temp'.\r\n\t\t\tint sum = kadaneAlgorithm(temp, n);\r\n            \r\n            // Update 'maxSum'.\r\n\t\t\tif(sum > maxSum)\r\n\t\t\t{\r\n\t\t\t\tmaxSum = sum;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn maxSum;\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time complexity: O(N * M * M)\r\n    Space complexity: O(N)\r\n    \r\n    Where N denotes the number of rows of the matrix and M denotes the number of columns of the matrix.\r\n'''\r\n\r\nfrom sys import maxsize\r\n\r\n\r\ndef kadaneAlgorithm(arr, n):\r\n\r\n    sum = 0\r\n    maxSum = -maxsize\r\n\r\n    for currIndex in range(n):\r\n\r\n        sum += arr[currIndex]\r\n\r\n        if(maxSum < sum):\r\n            maxSum = sum\r\n\r\n        if(sum < 0):\r\n            sum = 0\r\n\r\n    return maxSum\r\n\r\n\r\ndef maxSumRectangle(arr, n, m):\r\n\r\n    maxSum = -maxsize\r\n\r\n    temp = [0] * n\r\n\r\n    for left in range(m):\r\n        for i in range(n):\r\n            temp[i] = 0\r\n\r\n        for right in range(left, m):\r\n            for i in range(n):\r\n\r\n                temp[i] += arr[i][right]\r\n\r\n            sum = kadaneAlgorithm(temp, n)\r\n\r\n            if(sum > maxSum):\r\n                maxSum = sum\r\n\r\n    return maxSum\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity: O(N * M * M)\r\n    Space complexity: O(N)\r\n    \r\n    Where N denotes the number of rows of the matrix and M denotes the number of columns of the matrix.\r\n\r\n*/\r\n\r\npublic class Solution\r\n{\r\n\r\npublic static int kadaneAlgorithm(int[] arr, int n)\r\n    {\r\n        int sum = 0;\r\n\r\n        int maxSum = Integer.MIN_VALUE;\r\n\r\n        // Traverse the array.\r\n        for (int currIndex = 0; currIndex < n; currIndex++)\r\n        {\r\n            sum += arr[currIndex];\r\n\r\n            if (maxSum < sum)\r\n            {\r\n                maxSum = sum;\r\n            }\r\n\r\n            if (sum < 0)\r\n            {\r\n                sum = 0;\r\n            }\r\n        }\r\n\r\n        return maxSum;\r\n    }\r\n    \r\npublic static int maxSumRectangle(int[][] arr, int n, int m)\r\n    {\r\n        int maxSum = Integer.MIN_VALUE;\r\n\r\n        // Initialize a 1-D array.\r\n        int[] temp = new int[n];\r\n\r\n        // heck for all possible left and right boundaries.\r\n        for (int left = 0; left < m; left++)\r\n        {\r\n            for (int i = 0; i < n; i++)\r\n            {\r\n                temp[i] = 0;\r\n            }\r\n\r\n            for (int right = left; right < m; right++)\r\n            {\r\n                for (int i = 0; i < n; i++)\r\n                {\r\n                    temp[i] += arr[i][right];\r\n                }\r\n\r\n                // Function to find maximum sum of sub array of array 'temp'.\r\n                int sum = kadaneAlgorithm(temp, n);\r\n\r\n                // Update 'maxSum'.\r\n                if (sum > maxSum)\r\n                {\r\n                    maxSum = sum;\r\n                }\r\n            }\r\n        }\r\n\r\n        return maxSum;\r\n    }\r\n}\r\n\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}