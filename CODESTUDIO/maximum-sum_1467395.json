{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12637,
            "title": "Maximum Sum",
            "titleSlug": "maximum-sum_1467395",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-size-n-you-are-given-q-queries-there-are-two-types-of-queries-and-they-are-defined-as-follows\">You are given an array \u201cArr\u201d of size \u2018N\u2019. You are given \u2018Q\u2019 queries. There are two types of queries and they are defined as follows:</h4>\n\n<pre><code>1.  \u201cindex\u201d \u201cvalue\u201d in this query, set the value of arr[index] to value.\n2.  \u2018L\u2019 \u2018R\u2019 in this query, you must find i and j such that L is less than or equal to i, and j is less than or equal to R, and i is not equal to j, such that the sum of arr[i] and arr[j] is maximized. Then, print the sum of arr[i] and arr[j].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018Q\u2019 denoting the number of elements in the array and number of queries respectively.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers, denoting the elements in the array \u201cArr\u201d.\n\nThe next \u2018Q\u2019 lines contain three space-separated integers.\nIf the first integer is 1, Denote type 1 query, next 2 space-separated integers denote \u201cindex\u201d and \u201cvalue\u201d.\nIf the first integer is 2, Denote type 2 query, next 2 space-separated integers denote \u2018L\u2019 and \u2018R\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the list of integers, where the ith of them denotes the answer of the ith type 2 query.\n\nOutput for each test case will be printed in a new line. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 100000\n1 &lt;= Q &lt;= 100000    \n1 &lt;= Arr[i], value &lt; 10^9\n1 &lt;= index, L &lt; R &lt;= N\n\nWhere \u2018T\u2019 denotes the number of test cases,\n\u2018N\u2019 denotes the number of elements in the array,\n\u2018Q\u2019 denotes the number of queries,\n\u201cvalue\u201d and \u201cindex\u201d denote index and value in the query of type 1,\n\u2018L\u2019 and \u2018R\u2019 denote the range limits in the query of type 2.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5 3\n1 2 3 4 5\n2 2 4\n1 2 6\n2 2 4\n4 3\n3 2 3 1\n2 2 4\n1 3 1\n2 2 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>7\n10\n5\n3\n</code></pre>\n\n<h4 id=\"explanation-for-sample-1\">Explanation for Sample 1:</h4>\n\n<pre><code>For the 1st test case:\nIn the first query, in the range [2, 4], i = 3 and j = 4 gives the maximum value that is 7.\nIn the second query we will set value at index 2 (1 based index) in the \u201cArr\u201d to 6.\nIn the third query, in the range [2, 4], i = 2 and j = 4 gives the maximum value that is 10.\n\nFor the second test case:\nIn the first query, in the range [2, 4], i = 2 and j = 3 gives the maximum value that is 5.\nIn the second query we will set value at index 3 (1 based index) in the \u201cArr\u201d to 1.\nIn the third query, in the range [2, 4], i = 2 and j = 3 gives the maximum value that is 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 3\n48 71 44 \n1 3 27\n2 2 3\n2 1 3\n4 3\n20 36 26 12 \n1 2 14\n2 1 3\n1 4 68\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>98\n119\n46\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -1,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an array 'Arr' of size 'N'. You are given 'Q' queries. There are two types of queries:\n\n1.  Update Query: Given \"index\" and \"value\", set Arr[index] = value (1-based indexing).\n2.  Maximum Sum Query: Given 'L' and 'R', find two distinct indices i and j within the range [L, R] (inclusive) such that Arr[i] + Arr[j] is maximized. Return this maximum sum.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 100000",
                    "1 <= Q <= 100000",
                    "1 <= Arr[i], value <= 10^9",
                    "1 <= index, L < R <= N",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 3\n1 2 3 4 5\n2 2 4\n1 2 6\n2 2 4\n4 3\n3 2 3 1\n2 2 4\n1 3 1\n2 2 4",
                        "output": "7\n10\n5\n3",
                        "explanation": "For the 1st test case:\n- Query 1 (2 2 4): Maximum sum in range [2, 4] is Arr[3] + Arr[4] = 3 + 4 = 7.\n- Query 2 (1 2 6): Arr[2] is updated to 6. Array becomes [1, 6, 3, 4, 5].\n- Query 3 (2 2 4): Maximum sum in range [2, 4] is Arr[2] + Arr[4] = 6 + 4 = 10.\n\nFor the second test case:\n- Query 1 (2 2 4): Maximum sum in range [2, 4] is Arr[2] + Arr[3] = 2 + 3 = 5.\n- Query 2 (1 3 1): Arr[3] is updated to 1. Array becomes [3, 2, 1, 1].\n- Query 3 (2 2 4): Maximum sum in range [2, 4] is Arr[2] + Arr[3] = 2 + 1 = 3."
                    },
                    {
                        "input": "3 3\n48 71 44 \n1 3 27\n2 2 3\n2 1 3\n4 3\n20 36 26 12 \n1 2 14\n2 1 3\n1 4 68",
                        "output": "98\n119\n46",
                        "explanation": "For the 1st test case:\n- Query 1 (1 3 27): Arr[3] is updated to 27. Array becomes [48, 71, 27].\n- Query 2 (2 2 3): Maximum sum in range [2, 3] is Arr[2] + Arr[3] = 71 + 27 = 98.\n- Query 3 (2 1 3): Maximum sum in range [1, 3] is Arr[1] + Arr[2] = 48 + 71 = 119.\n\nFor the second test case:\n- Query 1 (1 2 14): Arr[2] is updated to 14. Array becomes [20, 14, 26, 12].\n- Query 2 (2 1 3): Maximum sum in range [1, 3] is Arr[1] + Arr[3] = 20 + 26 = 46.\n- Query 3 (1 4 68): Arr[4] is updated to 68. Array becomes [20, 14, 26, 68]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you find the two highest values in the range between \u2018L\u2019 and \u2018R\u2019?</p>",
            "<p>Can we use a range query data structure like a segment tree to calculate the two highest values efficiently?</p>"
        ],
        "relatedTopics": [],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}