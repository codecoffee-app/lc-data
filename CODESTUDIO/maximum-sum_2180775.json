{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14485,
            "title": "Maximum sum",
            "titleSlug": "maximum-sum_2180775",
            "content": "<h4 id=\"you-are-given-an-array-arr-consisting-of-n-integers-your-task-is-to-maximize-the-value-of-0-arr-0-1-arr-1-2-arr-2-n-1-arr-n-1-you-can-rotate-the-array-as-many-times-as-you-wish\">You are given an array \u2018arr\u2019 consisting of \u2018N\u2019 integers. Your task is to maximize the value of 0 * arr[0] + 1 * arr[1] + 2 * arr[2] \u2026 (N - 1) * arr[N - 1] . You can rotate the array as many times as you wish.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>For the given arr[ ] = { 1, 2, 3, 1} \nAfter 0 rotation arr[ ] = { 1, 2, 3, 1} the sum is = (0 *1 + 1 * 2 + 2 * 3 + 3 * 1) = 11.\nAfter 1 rotation  arr[ ] = { 1, 1, 2, 3} the sum is = (0 *1 + 1 * 1 + 2 * 2 + 3 * 3) = 14.\nAfter 2 rotation arr[ ] = { 3, 1, 1, 2} the sum is = (0 *3 + 1 * 1 + 2 * 1 + 3 * 2) = 9.\nAfter 3 rotation arr[ ] = { 2, 3, 1, 1} the sum is = (0 *2 + 1 * 3 + 2 * 1 + 3 * 1) = 8.\nSo the maximum sum is 14 when arr[ ] = { 1, 1, 2, 3}.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. Then each test case follows.\n\nThe first line of each test case contains the Integer \u2018N\u2019 denoting the number of elements in the array.\n\nThe second and the last line of each test case contains \u2018N\u2019 single space-separated integers representing the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an integer representing the maximum value of 0 * arr[0] + 1 * arr[1] + 2 * arr[2] \u2026 (N - 1) * arr[N - 1].\n\nThe output of each test case will be printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 5 * 10 ^ 6\n-10 ^ 5 &lt;= arr[i] &lt;= 10 ^ 5\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\n1 2 3 1 \n5\n1 3 10 -2 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>14\n51\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>In the first test case, for the given arr[  ] = { 1, 2, 3, 1} \nAfter 0 rotation arr[ ] = { 1, 2, 3, 1} the sum is = (0 * 1 + 1 * 2 + 2 * 3 + 3 * 1) = 11.\nAfter 1 rotation  arr[ ] = { 1, 1, 2, 3} the sum is = (0 * 1 + 1 * 1 + 2 * 2 + 3 * 3) = 14.\nAfter 2 rotation arr[ ] = { 3, 1, 1, 2} the sum is = (0 * 3 + 1 * 1 + 2 * 1 + 3 * 2) = 9.\nAfter 3 rotation arr[ ] = { 2, 3, 1, 1} the sum is = (0 * 2 + 1 * 3 + 2 * 1 + 3 * 1) = 8.\nSo the maximum sum is 14 when arr[ ] = { 1, 1, 2, 3}.\n\nIn the second test case, for the given arr[  ] = { 1, 3, 10, -2, 0} \nAfter 0 rotation arr[ ] ={ 1, 3, 10, -2, 0}  the sum is = (0 *1+1* 3 +2 *10 +3 *-2 + 4 * 0) = 17.\nAfter 1 rotation arr[ ] ={ 0, 1, 3, 10, -2}  the sum is = (0 *0+1* 1 +2 *3 +3 *10 + 4 * -2) = 29.\nAfter 2 rotation arr[ ] ={ -2, 0, 1, 3, 10}  the sum is = (0 *-2+1* 0 +2 *1 +3 *3 + 4 * 10) = 51.\nAfter 3 rotation arr[ ] ={ 10, -2, 0, 1, 3}  the sum is = (0 *10+1* -2 +2 *0 +3 *1 + 4 * 3) = 13.\nAfter 4 rotation arr[ ] ={ 3, 10, -2, 0, 1}  the sum is = (0 *3+1* 10 +2 *-2 +3 *0 + 4 * 1) = 10.\nSo the maximum sum is 51 when arr[ ] = { -2, 0, 1, 3, 10} .\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n1 2 3 4 5\n5\n1 -2 3 -4 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>40\n14\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the maximum possible sum that can be obtained by rotating the array any number of times. The sum is calculated as the sum of each element multiplied by its index after rotation (i.e., 0 * arr[0] + 1 * arr[1] + ... + (N - 1) * arr[N - 1]).",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 5 * 10 ^ 6",
                    "-10 ^ 5 <= arr[i] <= 10 ^ 5"
                ],
                "testcases": [
                    {
                        "input": "n = 4, nums=[1, 2, 3, 1]",
                        "output": "14",
                        "explanation": "Initial array: [1, 2, 3, 1], sum = (0*1 + 1*2 + 2*3 + 3*1) = 11\nRotation 1: [1, 1, 2, 3], sum = (0*1 + 1*1 + 2*2 + 3*3) = 14\nRotation 2: [3, 1, 1, 2], sum = (0*3 + 1*1 + 2*1 + 3*2) = 9\nRotation 3: [2, 3, 1, 1], sum = (0*2 + 1*3 + 2*1 + 3*1) = 8\nMaximum sum is 14."
                    },
                    {
                        "input": "n = 5, nums=[1, 3, 10, -2, 0]",
                        "output": "51",
                        "explanation": "Initial array: [1, 3, 10, -2, 0], sum = (0*1 + 1*3 + 2*10 + 3*-2 + 4*0) = 17\nRotation 1: [0, 1, 3, 10, -2], sum = (0*0 + 1*1 + 2*3 + 3*10 + 4*-2) = 29\nRotation 2: [-2, 0, 1, 3, 10], sum = (0*-2 + 1*0 + 2*1 + 3*3 + 4*10) = 51\nRotation 3: [10, -2, 0, 1, 3], sum = (0*10 + 1*-2 + 2*0 + 3*1 + 4*3) = 13\nRotation 4: [3, 10, -2, 0, 1], sum = (0*3 + 1*10 + 2*-2 + 3*0 + 4*1) = 10\nMaximum sum is 51."
                    },
                    {
                        "input": "n = 5, nums=[1, 2, 3, 4, 5]",
                        "output": "40",
                        "explanation": "The maximum sum is achieved with the initial array [1, 2, 3, 4, 5]: (0*1 + 1*2 + 2*3 + 3*4 + 4*5) = 0 + 2 + 6 + 12 + 20 = 40."
                    },
                    {
                        "input": "n = 5, nums=[1, -2, 3, -4, 5]",
                        "output": "14",
                        "explanation": "Initial array: [1, -2, 3, -4, 5], sum = (0*1 + 1*-2 + 2*3 + 3*-4 + 4*5) = 0 - 2 + 6 - 12 + 20 = 12\nRotation 1: [5, 1, -2, 3, -4], sum = (0*5 + 1*1 + 2*-2 + 3*3 + 4*-4) = 0 + 1 - 4 + 9 - 16 = -10\nRotation 2: [-4, 5, 1, -2, 3], sum = (0*-4 + 1*5 + 2*1 + 3*-2 + 4*3) = 0 + 5 + 2 - 6 + 12 = 13\nRotation 3: [3, -4, 5, 1, -2], sum = (0*3 + 1*-4 + 2*5 + 3*1 + 4*-2) = 0 - 4 + 10 + 3 - 8 = 1\nRotation 4: [-2, 3, -4, 5, 1], sum = (0*-2 + 1*3 + 2*-4 + 3*5 + 4*1) = 0 + 3 - 8 + 15 + 4 = 14. Maximum sum is 14"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you find out maximum value by trying out all possible rotations?</p>",
            "<p>Can you find out the result of the current from the result of the previous rotation?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}