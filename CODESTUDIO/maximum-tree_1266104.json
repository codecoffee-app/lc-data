{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10848,
            "title": "Maximum Tree ",
            "titleSlug": "maximum-tree_1266104",
            "content": "<h4 id=\"you-have-been-given-an-array-list-tree-having-n-unique-integers-you-need-to-make-a-maximum-binary-tree-recursively-from-tree-using-the-following-conditions\">You have been given an  array/list \u2018TREE\u2019 having \u2018N\u2019 unique integers. You need to make a maximum binary tree recursively from \u2018TREE\u2019 using the following conditions:</h4>\n\n<pre><code>1. Create a root of the maximum binary tree whose value is the maximum value present in the \u2018TREE\u2019.\n2. Recursively build the left subtree on the subarray prefix to the left of the maximum value.\n3. Recursively build the right subtree on the subarray suffix to the right of the maximum value.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>For \u2018TREE\u2019 = [6, 1, 8, 2, 5],see the maximum binary tree in the below picture for reference:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree1-8450.jpg\" alt=\"img\"></p>\n\n<pre><code>As we can see the root of the maximum binary tree as shown in the picture is \u20188\u2019 which is the maximum value in the \u2018TREE\u2019. The left subtree contains all the values which are present in the left of 8  in \u2018TREE\u2019 and the right subtree contains all the values which are present in the right of \u20188\u2019 in \u2018TREE\u2019. Similarly, the maximum value in the left subarray of 8 is 6 so 6 becomes the root of the left subtree, 5 is the maximum value in the right subarray of the 8 so 5 becomes the root of the right subarray, and so on. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains an integer \u2018N\u2019 representing the number of elements in the \u2018TREE\u2019.\n\nThe second line of each test case contains \u2018N\u2019 space separated integers denoting the values of \u2018TREE\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the level order traversal of the maximum binary tree formed using the array/list \u2018TREE\u2019.\n\nThe output for each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of, Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10 ^ 4\n1 &lt;= TREE[i] &lt;= 10 ^ 4 \n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2\n1 5\n3\n8 10 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>5 1  \n10 8 2\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>For the first test case :\nSee the picture below for the output reference:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/st1-8451.jpg\" alt=\"img\"></p>\n\n<pre><code>For the second test case :\nSee the picture below for the output reference:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/st2-8452.jpg\" alt=\"img\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1\n8\n5\n12 3 15 1 11\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>8\n15 12 11 3 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of unique integers, construct a maximum binary tree recursively. The root of the tree is the maximum element in the array. The left subtree is built from the subarray to the left of the maximum element, and the right subtree is built from the subarray to the right of the maximum element. Return the root of the constructed maximum binary tree.  The output is the level order traversal of the tree.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10 ^ 4",
                    "1 <= TREE[i] <= 10 ^ 4"
                ],
                "testcases": [
                    {
                        "input": "n = 2, tree = [1, 5]",
                        "output": "5 1",
                        "explanation": "The maximum element is 5, so it becomes the root. The left subtree is built from [1], and the right subtree is empty."
                    },
                    {
                        "input": "n = 3, tree = [8, 10, 2]",
                        "output": "10 8 2",
                        "explanation": "The maximum element is 10, so it becomes the root. The left subtree is built from [8], and the right subtree is built from [2]."
                    },
                    {
                        "input": "n = 1, tree = [8]",
                        "output": "8",
                        "explanation": "The maximum element is 8, so it becomes the root. Both left and right subtrees are empty."
                    },
                    {
                        "input": "n = 5, tree = [12, 3, 15, 1, 11]",
                        "output": "15 12 11 3 1",
                        "explanation": "The maximum element is 15, so it becomes the root. The left subtree is built from [12, 3], and the right subtree is built from [1, 11]."
                    },
                    {
                        "input": "n = 5, tree = [6, 1, 8, 2, 5]",
                        "output": "8 6 5 1 2",
                        "explanation": "The maximum element is 8, so it becomes the root. The left subtree is built from [6, 1], and the right subtree is built from [2, 5]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use recursion in this problem.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}