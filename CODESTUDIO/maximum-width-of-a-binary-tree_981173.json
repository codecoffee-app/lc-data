{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9201,
            "title": "Maximum width of a Binary Tree",
            "titleSlug": "maximum-width-of-a-binary-tree_981173",
            "content": "<h4 id=\"you-are-given-an-arbitrary-binary-tree-consisting-of-n-nodes-where-each-node-is-associated-with-a-certain-value-your-task-is-to-find-the-maximum-width-of-the-given-tree\">You are given an arbitrary binary tree consisting of N nodes, where each node is associated with a certain value, your task is to find the maximum width of the given tree.</h4>\n\n<h4 id=\"width-of-a-binary-tree-is-defined-as-the-maximum-width-of-all-levels\">Width of a binary tree is defined as the maximum width of all levels.</h4>\n\n<p>For example, consider the following binary tree:\n<img src=\"https://files.codingninjas.in/binary-tree-2-5399.png\" alt=\"example\"></p>\n\n<p>For the above tree, width of level 1 is 1, width of level 2 is 2, width of level 3 is 3 and width of level 4 is 1. So the maximum width of the tree is 3.</p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases. Then the test cases follow.\n\nThe only line of each test case contains values of the nodes in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image would be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binary-tree-2-5399.png\" alt=\"example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation:</h4>\n\n<pre><code>Level 1:\nThe root node of the tree is 1\n\nLevel 2:\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3:\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4:\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5:\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree.\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, a single integer denoting the maximum width of the given binary tree.\n\nThe output for each test case is in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 3000\n-10^6 &lt;= data &lt;= 10^6 and data != -1\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cdata\u201d is the value of the binary tree node.\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5 6 2 4 3 -1 -1 9 7 -1 -1 -1 -1 -1 -1\n1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/binary-tree-3-5400.png\" alt=\"Sample Input 1\"></p>\n\n<pre><code>For the first test case, the width of 1st level is 1 and for the remaining levels it is 2. So, the maximum width of the binary tree is 2.\n\nFor the second test case, the binary tree has only one level having 1 element i.e. root. Hence, the maximum width of the binary tree is 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 2 3 4 5 6 7 8 9 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n1 2 3 4 5 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a binary tree with N nodes. Your task is to find the maximum width of the tree. The width of a binary tree at a level is the number of nodes present at that level. The maximum width is the maximum number of nodes present at any level in the tree.",
                "constraints": [
                    "1 <= T <= 100",
                    "0 <= N <= 3000",
                    "-10^6 <= data <= 10^6 and data != -1",
                    "Where \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cdata\u201d is the value of the binary tree node.",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "5 6 2 4 3 -1 -1 9 7 -1 -1 -1 -1 -1 -1\n1 -1 -1",
                        "output": "2\n1",
                        "explanation": "For the first test case, the tree can be visualized as a root node with value 5. The next level has 6 and 2. Therefore, the maximum width is 2.\n\nFor the second test case, the tree has only a root node with value 1. Therefore, the maximum width is 1."
                    },
                    {
                        "input": "1 2 3 4 5 6 7 8 9 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n1 2 3 4 5 -1 -1 -1 -1 -1 -1",
                        "output": "4\n2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about using level order traversal to count the no. of nodes in each level?</p>",
            "<p>Can you think about using level order traversal using a queue to count the no. of nodes in each level?</p>",
            "<p>Can you think about using preorder traversal to count the no. of nodes in each level?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}