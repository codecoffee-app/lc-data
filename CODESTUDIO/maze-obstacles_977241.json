{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9167,
            "title": "Maze obstacles",
            "titleSlug": "maze-obstacles_977241",
            "content": "<h4 id=\"given-a-n-m-maze-with-obstacles-count-and-return-the-number-of-unique-paths-to-reach-the-right-bottom-cell-from-the-top-left-cell-a-cell-in-the-given-maze-has-a-value-1-if-it-is-a-blockage-or-dead-end-else-0-from-a-given-cell-we-are-allowed-to-move-to-cells-i-1-j-and-i-j-1-only-since-the-answer-can-be-large-print-it-modulo-10-9-7\">Given a \u2018N\u2019 * \u2019M\u2019 maze with obstacles, count and return the number of unique paths to reach the right-bottom cell from the top-left cell. A cell in the given maze has a value &#39;-1&#39; if it is a blockage or dead-end, else 0. From a given cell, we are allowed to move to cells (i+1, j) and (i, j+1) only. Since the answer can be large, print it modulo 10^9 + 7.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>Consider the maze below :\n0 0 0 \n0 -1 0 \n0 0 0\n\nThere are two ways to reach the bottom left corner - \n\n(1, 1) -&gt; (1, 2) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3)\n(1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (3, 2) -&gt; (3, 3)\n\nHence the answer for the above test case is 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. Then each test case follows.\n\nThe first line of each test case contains integers \u2018N\u2019 and \u2018M\u2019 representing the size of the input grid.\n\nThen \u2018N\u2019 lines follow, each of which contains \u2018M\u2019 space-separated integers denoting the elements of the matrix.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case print an integer denoting the number of ways to reach the bottom right corner from the top-left corner modulo 10^9 + 7.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N,M &lt;= 200\n\nNote: It is guaranteed that the top-left cell does not have an obstacle.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2    \n2 2\n0 0\n0 0\n3 3\n0 0 0 \n0 -1 0 \n0 0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<pre><code>For the first test case, there are two possible paths to reach (2, 2) from (1, 1) : \n    (1, 1) -&gt; (1, 2) -&gt; (2, 2)\n    (1, 1) -&gt; (2, 1) -&gt; (2, 2)\n\nFor the second test case, there are two ways to reach the bottom left corner - \n(1, 1) -&gt; (1, 2) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3)\n(1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (3, 2) -&gt; (3, 3)\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n2 2\n0 -1\n-1  0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 143,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 'N' * 'M' maze, find the number of unique paths from the top-left cell (0, 0) to the bottom-right cell (N-1, M-1). A cell with value '-1' represents an obstacle, while '0' represents a free cell. You can only move down (i+1, j) or right (i, j+1). Return the number of paths modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N,M <= 200",
                    "The top-left cell is guaranteed to be free (not an obstacle)."
                ],
                "testcases": [
                    {
                        "input": "2\n2 2\n0 0\n0 0\n3 3\n0 0 0 \n0 -1 0 \n0 0 0",
                        "output": "2\n2",
                        "explanation": "Test Case 1: \nFor the first test case (2x2 maze with no obstacles), there are two possible paths: Right then Down, or Down then Right.\nFor the second test case (3x3 maze with one obstacle), there are two paths avoiding the obstacle."
                    },
                    {
                        "input": "1\n2 2\n0 -1\n-1 0",
                        "output": "0",
                        "explanation": "Test Case 2: In the given 2x2 maze, all paths are blocked, therefore the number of unique paths is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>How can we reach a general cell (i, j) ?.</p>",
            "<p>Can you find overlapping calls to the recursive function.</p>",
            "<p>Can you eliminate recursion using iterative dp ?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O( N * M ).\r\n    Space Complexity: O( N * M ).\r\n\r\n    Where N * M is the size of input matrix.\r\n*/\r\n\r\nint mazeObstacles(int n, int m, vector< vector< int> > &mat) {\r\n    \r\n    // dp table to store the already calculated values.\r\n    vector< vector<int> > dp(n, vector<int>(m, 0));\r\n    // Base case for first cell.\r\n    dp[0][0] = 1;\r\n\r\n    // Fill the first column.\r\n    for(int i = 1; i < n; i++){\r\n        if(mat[i][0] == 0){\r\n            dp[i][0] = dp[i - 1][0];\r\n        }\r\n    }\r\n    // Fill the first row.\r\n    for(int i = 1; i < m; i++){\r\n        if(mat[0][i] == 0){\r\n            dp[0][i] = dp[0][i - 1];\r\n        } \r\n    }\r\n\r\n    int mod = 1e9 + 7;\r\n    // Calculate for each cell dp[i][j].\r\n    for(int i = 1; i < n; i++){\r\n        for(int j = 1; j < m; j++){\r\n            if(mat[i][j] == 0){\r\n                dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % mod; \r\n            }\r\n        }\r\n    }\r\n    // Return the number of ways to reach the bottom-right cell in the maze.\r\n    return dp[n - 1][m - 1];  \r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O( N * M ).\n    Space Complexity: O( N * M ).\n\n    Where N * M is the size of input matrix.\n'''\n\ndef mazeObstacles(n, m, mat):\n    \n    # dp table to store the already calculated values.\n    dp = [[0 for i in range(m)] for j in range(n)]\n    dp[0][0] = 1\n    \n    # Fill the first column.\n    for i in range(1, n):\n        \n        if mat[i][0] == 0:\n            dp[i][0] = dp[i - 1][0]\n            \n    # Fill the first row.\n    for i in range(1, m):\n        \n        if mat[0][i] == 0:\n            dp[0][i] = dp[0][i - 1]\n            \n    mod = 1000000007\n    \n    # Calculate for each cell dp[i][j].\n    for i in range(1, n):\n        \n        for j in range(1, m):\n            \n            if mat[i][j] == 0:\n                dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % mod\n                \n    # Return the number of ways to reach the bottom-right cell in the maze.\n    return dp[n - 1][m - 1]",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O( N * M ).\r\n    Space Complexity: O( N * M ).\r\n\r\n    Where N * M is the size of input matrix.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n\r\n    static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {\r\n\r\n        // dp table to store the already calculated values.\r\n        int[][] dp = new int[n][m];\r\n        // Base case for first cell.\r\n        dp[0][0] = 1;\r\n\r\n        // Fill the first column.\r\n        for (int i = 1; i < n; i++) {\r\n            if (mat.get(i).get(0) == 0) {\r\n                dp[i][0] = dp[i - 1][0];\r\n            }\r\n        }\r\n\r\n        // Fill the first row.\r\n        for (int i = 1; i < m; i++) {\r\n            if (mat.get(0).get(i) == 0) {\r\n                dp[0][i] = dp[0][i - 1];\r\n            }\r\n        }\r\n\r\n        int mod = 1000000007;\r\n        // Calculate for each cell dp[i][j].\r\n        for (int i = 1; i < n; i++) {\r\n            for (int j = 1; j < m; j++) {\r\n                if (mat.get(i).get(j) == 0) {\r\n                    dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % mod;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Return the number of ways to reach the bottom-right cell in the maze.\r\n        return dp[n - 1][m - 1];\r\n    }\r\n\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}