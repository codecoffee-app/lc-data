{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16396,
            "title": "Maze Runner",
            "titleSlug": "maze-runner_3130881",
            "content": "<h4 id=\"ninja-is-stuck-in-a-maze-with-empty-spaces-and-walls-ninja-can-go-through-empty-spaces-by-running-up-down-left-or-right-but-he-will-continue-running-in-the-same-direction-until-hitting-a-wall-when-he-stops-he-could-choose-the-next-direction\">Ninja is stuck in a maze with empty spaces and walls. Ninja can go through empty spaces by running up, down, left or right, but he will continue running in the same direction until hitting a wall. When he stops, he could choose the next direction.</h4>\n\n<h4 id=\"given-ninjas-start-position-the-destination-and-the-maze-find-the-shortest-distance-for-ninja-to-stop-at-the-destination-the-distance-is-defined-by-the-number-of-empty-spaces-traveled-by-ninja-from-the-start-position-excluded-to-the-destination-included-if-ninja-cannot-stop-at-the-destination-return-1\">Given Ninja&#39;s start position, the destination and the maze, find the shortest distance for Ninja to stop at the destination. The distance is defined by the number of empty spaces traveled by Ninja from the start position (excluded) to the destination (included). If Ninja cannot stop at the destination, return -1.</h4>\n\n<h4 id=\"the-maze-is-represented-by-a-binary-2d-array-1-means-the-wall-and-0-means-the-empty-space-you-may-assume-that-the-borders-of-the-maze-are-all-walls-the-start-and-destination-coordinates-are-represented-by-row-and-column-indexes\">The maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The start and destination coordinates are represented by row and column indexes.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Both Ninja\u2019s starting cell and the destination cell exist on an empty space, and they will not be at the same position initially.\n\nThe given maze does not contain borders (like the red rectangle in the sample pictures), but you could assume the borders of the maze are all walls.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>N = 3, M = 3\nMaze = [ [ 0, 0, 0 ], [ 0, 1, 0 ], [ 1, 0, 0] ]\nStart = [ 0, 0 ]\nDestination = [ 2, 1 ]\n\nExplanation : \n\nNinja can start from (0,0) and take the right direction and run till (0,2). Then he turns direction to down and runs till (2,2). Then Ninja turns direction to the left and runs till (2,1). \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases to be run. Then the test cases follow.\n\nThe first line of each test case contains integers \u2018N\u2019 and \u2018M\u2019 representing the number of rows and columns of the maze.\n\nThe next \u2018N\u2019 line contains \u2018M\u2019 integers representing the cells of the maze. 1 represents a wall and 0 represents the empty space.\n\nThe next line contains two integers representing the coordinates of the starting position of Ninja.\n\nThe next line contains the destination coordinates.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, output an integer denoting the shortest distance required to reach from the starting position to the destination. If it is impossible to reach the destination, output -1.\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 100\n1 &lt;= M &lt;= 100\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n5 5\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 1 0\n1 1 0 1 1\n0 0 0 0 0\n0 4 \n4 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>12\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For test case 1 we have, \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture-13705.JPG\" alt=\"\">    </p>\n\n<pre><code>The starting position is (0,4) and the destination is (4,4).\n\nOne of the shortest ways is : left -&gt; down -&gt; left -&gt; down -&gt; right -&gt; down -&gt; right.\n\nThe total distance is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.\n\nSo, we output 12.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 4\n1 0 1 0 \n0 0 0 1 \n0 0 1 1 \n2 1\n1 2\n3 5\n0 0 0 1 0 \n0 1 1 1 1 \n1 1 0 0 0 \n2 4\n0 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "A ninja is trapped in a maze composed of empty spaces and walls. The ninja can move horizontally or vertically through empty spaces, continuously moving in the chosen direction until encountering a wall. Upon stopping at a wall, the ninja can choose a new direction. Given the maze's layout, the ninja's starting position, and the destination, determine the shortest distance (number of empty spaces traversed) required for the ninja to reach the destination. The starting position is excluded from the distance calculation, while the destination is included. If reaching the destination is impossible, return -1. The maze is represented as a 2D binary array, where 1 indicates a wall and 0 represents an empty space. Assume the maze borders are walls. The start and destination points are provided as row and column indices.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 100",
                    "1 <= M <= 100",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n5 5\n0 0 1 0 0\n0 0 0 0 0\n0 0 0 1 0\n1 1 0 1 1\n0 0 0 0 0\n0 4\n4 4",
                        "output": "12",
                        "explanation": "The starting position is (0,4) and the destination is (4,4). One possible shortest path involves moving left, down, left, down, right, down, and right, resulting in a total distance of 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12."
                    },
                    {
                        "input": "2\n3 4\n1 0 1 0\n0 0 0 1\n0 0 1 1\n2 1\n1 2\n3 5\n0 0 0 1 0\n0 1 1 1 1\n1 1 0 0 0\n2 4\n0 0",
                        "output": "4\n-1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of the BFS approach.</p><p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}