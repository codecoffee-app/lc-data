{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9078,
            "title": "Median in a stream",
            "titleSlug": "median-in-a-stream_975268",
            "content": "<h4 id=\"given-that-integers-are-read-from-a-data-stream-your-task-is-to-find-the-median-of-the-elements-read-so-far\">Given that integers are read from a data stream. Your task is to find the median of the elements read so far.</h4>\n\n<h4 id=\"median-is-the-middle-value-in-an-ordered-integer-list-if-the-size-of-the-list-is-even-there-is-no-middle-value-so-the-median-is-the-floor-of-the-average-of-the-two-middle-values\">Median is the middle value in an ordered integer list. If the size of the list is even there is no middle value. So the median is the floor of the average of the two middle values.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>[2,3,4] - median is 3.\n[2,3] - median is floor((2+3)/2) = 2.\n</code></pre>\n\n<p><br>\n<be></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \n\nThen the T test cases follow.\nThe first line of each test case contains the number of elements, N, in the input data stream.\n\nThe second line of each test case contains N space separated elements of the input data stream.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the median of the elements after each incoming element. Each median value is separated by a single space.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, just return the vector of medians after each element is read from the stream. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^4\n0 &lt;= data &lt;= 10^8\nWhere T is the number of test cases, N is the number of elements in the data stream.\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n3\n1 2 3 \n2\n9 9 \n1\n4 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 1 2\n9 9 \n4 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>For test case 1 \nAfter reading first element of stream , Median of [1] is 1 \nAfter reading second element of stream, Median of [1, 2]  = floor((1+2)/2)  = 1\nAfter reading third element of stream, Median of [1,2,3] = 2\nSo the output will be 1 1 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3\n5 3 8\n2\n3 8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5 4 5\n3 5\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2:</h5>\n\n<pre><code>For test case 1 \nAfter reading first element of stream, Median of [5] is 5\nAfter reading second element of stream, Median of [5, 3]  = floor((5+3)/2)  = 4\nAfter reading third element of stream, Median of [5,3,8] = 5 , it is the middle value of the sorted array\nSo the output will be 5 4 5.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 149,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a stream of integers, calculate and return the median of the elements read so far after each new element is added to the stream.  The median is defined as the middle value in a sorted list of integers. If the list has an even number of elements, the median is the floor of the average of the two middle values.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^4",
                    "0 <= data <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "n = 3, arr = [1, 2, 3]",
                        "output": "[1, 1, 2]",
                        "explanation": "After reading the first element of the stream, the median of [1] is 1.\nAfter reading the second element of the stream, the median of [1, 2] is floor((1+2)/2) = 1.\nAfter reading the third element of the stream, the median of [1, 2, 3] is 2."
                    },
                    {
                        "input": "n = 2, arr = [9, 9]",
                        "output": "[9, 9]",
                        "explanation": "After reading the first element of the stream, the median of [9] is 9.\nAfter reading the second element of the stream, the median of [9, 9] is floor((9+9)/2) = 9."
                    },
                    {
                        "input": "n = 1, arr = [4]",
                        "output": "[4]",
                        "explanation": "After reading the first element of the stream, the median of [4] is 4."
                    },
                    {
                        "input": "n = 3, arr = [5, 3, 8]",
                        "output": "[5, 4, 5]",
                        "explanation": "After reading the first element of the stream, the median of [5] is 5.\nAfter reading the second element of the stream, the median of [5, 3] is floor((5+3)/2) = 4.\nAfter reading the third element of the stream, the median of [5, 3, 8] is 5 (sorted array is [3,5,8])."
                    },
                    {
                        "input": "n = 2, arr = [3, 8]",
                        "output": "[3, 5]",
                        "explanation": "After reading the first element of the stream, the median of [3] is 3.\nAfter reading the second element of the stream, the median of [3, 8] is floor((3+8)/2) = 5."
                    },
                    {
                        "input": "n = 4, arr = [1, 5, 2, 9]",
                        "output": "[1, 3, 2, 3]",
                        "explanation": "Medians are: [1], [1,5] -> 3, [1,5,2] -> [1,2,5] -> 2, [1,5,2,9] -> [1,2,5,9] -> (2+5)/2 = 3.5 -> 3"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Do what the question says.</p>",
            "<p>Can Insertion sort help?</p>",
            "<p>Can you solve this problem using heaps?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n\r\n\tTime complexity: O(N*(log(N))) \r\n\tSpace complexity: O(N)\r\n\t\r\n\twhere N is the total number of elements in the array.\r\n\r\n*/\r\n\r\n#include <queue>\r\n\r\nvector<int> findMedian(vector<int> &arr, int n){\r\n\t\r\n\t// To store the medians\r\n\tvector<int> medians;\r\n\t\r\n\t// max heap\r\n\tpriority_queue<int> lo;  \r\n\t\r\n\t//min heap                            \r\n    priority_queue<int, vector<int>, greater<int>> hi;   \r\n    \r\n    for(int i = 0; i < n; i++){\r\n    \t\r\n    \tint num = arr[i];\r\n    \t\r\n    \t// Add to max heap\r\n    \tlo.push(num);                                \r\n\t\t\r\n\t\t// Balancing step, that is inserting the current element at its position that is either less than median or more than median value\r\n        hi.push(lo.top());                        \r\n        lo.pop();\r\n\r\n\t\t// Maintain size property, as 'lo' can have utmost one more element than 'hi' or both have equal number of elements\r\n        if (lo.size() < hi.size()) {                    \r\n            lo.push(hi.top());\r\n            hi.pop();\r\n        }\r\n        \r\n        int median;\r\n        \r\n        // For odd number of elements\r\n        if(lo.size() > hi.size()){\r\n        \t\r\n        \tmedian = lo.top();\r\n        \t\r\n\t\t}\r\n\t\t// For even number of elements\r\n\t\telse{\r\n\t\t\t\r\n\t\t\tmedian = (lo.top() + hi.top())/2;  \r\n\t\t\t\r\n\t\t}\r\n        \r\n    \tmedians.push_back(median);\r\n\t}\r\n\t\r\n\treturn medians;\r\n\r\n\t\r\n}\r\n\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n\r\n\tTime complexity: O(N*(log(N))) \r\n\tSpace complexity: O(N)\r\n\t\r\n\twhere N is the total number of elements in the array.\r\n\r\n*/\r\n\r\nimport java.util.PriorityQueue;\r\nimport java.util.Collections;\r\n\r\npublic class Solution {\r\n\r\n    public static int[] findMedian(int[] arr, int n) {\r\n\r\n        // To store the medians\r\n        int[] medians = new int[n];\r\n\r\n        // min heap\r\n        PriorityQueue<Integer> lo = new PriorityQueue<>();\r\n\r\n        // max heap\r\n        PriorityQueue<Integer> hi = new PriorityQueue<>(Collections.reverseOrder());\r\n\r\n        for (int i = 0; i < n; i++) {\r\n\r\n            int num = arr[i];\r\n\r\n            // Add to max heap\r\n            lo.add(num);\r\n\r\n            // Balancing step, that is inserting the current element at its position that is\r\n            // either less than median or more than median value\r\n            hi.add(lo.poll());\r\n\r\n            // Maintain size property, as 'lo' can have utmost one more element than 'hi' or\r\n            // both have equal number of elements\r\n            if (lo.size() < hi.size()) {\r\n                lo.add(hi.poll());\r\n\r\n            }\r\n\r\n            int median;\r\n\r\n            // For odd number of elements\r\n            if (lo.size() > hi.size()) {\r\n\r\n                median = lo.peek();\r\n\r\n            }\r\n            // For even number of elements\r\n            else {\r\n\r\n                median = (lo.peek() + hi.peek()) / 2;\r\n\r\n            }\r\n\r\n            medians[i] = median;\r\n        }\r\n\r\n        return medians;\r\n\r\n    }\r\n\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n\r\n\tTime complexity: O(N*(log(N)))\r\n\tSpace complexity: O(N)\r\n\r\n\twhere N is the total number of elements in the array.\r\n\r\n'''\r\n\r\nfrom queue import PriorityQueue\r\n\r\n\r\ndef findMedian(arr, n):\r\n\r\n    # To store the medians\r\n    medians = []\r\n\r\n    # max heap\r\n    lo = PriorityQueue()\r\n\r\n    # min heap\r\n    hi = PriorityQueue()\r\n\r\n    for i in range(n):\r\n\r\n        num = arr[i]\r\n\r\n        # Add to max heap\r\n        lo.put(num)\r\n\r\n        # Balancing step, that is inserting the current element at its position that is either less than median or more than median value\r\n        temp = lo.get()\r\n        # Inserting the val with negative priority because 'hi' is min heap\r\n        hi.put((-temp, temp))\r\n\r\n        # Maintain size property, as 'lo' can have utmost one more element than 'hi' or both have equal number of elements\r\n        if (lo.qsize() < hi.qsize()):\r\n            tempPair = hi.get()\r\n            lo.put(tempPair[1])\r\n\r\n        median = 0\r\n\r\n        # For odd number of elements\r\n        if(lo.qsize() > hi.qsize()):\r\n            median = lo.queue[0]\r\n\r\n        # For even number of elements\r\n        else:\r\n            median = (lo.queue[0] + hi.queue[0][1]) // 2\r\n\r\n        medians.append(median)\r\n\r\n    return medians\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}