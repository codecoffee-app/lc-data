{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8627,
            "title": "Median of a BST",
            "titleSlug": "median-of-a-bst_893184",
            "content": "<h4 id=\"you-are-given-a-binary-search-tree-of-integers-with-n-nodes-your-task-is-to-find-the-median-of-the-given-bst\">You are given a binary search tree of integers with N nodes. Your task is to find the median of the given BST.</h4>\n\n<h4 id=\"the-median-of-a-bst-is-the-middle-element-when-all-the-data-nodes-are-written-in-ascending-order-in-other-words\">The median of a BST is the middle element when all the data nodes are written in ascending order. In other words-</h4>\n\n<pre><code>\u2022 If \u2018N\u2019 is even, then the median is the integral average of N/2-th and (N/2+1)-th nodes when nodes are written in ascending order. \n\u2022 If \u2018N\u2019 is odd, then the median is the (N+1)/2-th node when nodes are written in ascending order. \n</code></pre>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-which-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure which has the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h4 id=\"follow-up\">Follow Up:</h4>\n\n<pre><code>Try to do this problem in O(1) space and linear time.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of input contains the elements of the tree in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single line containing the median of the BST.\n\nThe output for each test case will be printed in a new line. \n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n0 &lt;= Data &lt;= 10^6 and Data!=-1\n\nData will be distinct.\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 1 5 -1 2 -1 6 -1 -1 -1 -1 \n2 1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n1\n</code></pre>\n\n<h4 id=\"explanation-for-sample-1\">Explanation for Sample 1:</h4>\n\n<pre><code>The sorted array corresponding to the first test case will be [1, 2, 3, 5, 6]. Here, we can see the median of the array is equal to 3.\n\nThe sorted array corresponding to the second test case will be [1, 2]. Here, we can see the median of the array is equal to (1+2) / 2 = int(1.5) = 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code> 1\n 10 -1 20 -1 30 -1 40 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>25\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary search tree (BST) of integers, find the median of the BST. If the number of nodes 'N' is even, the median is the integral average of the N/2-th and (N/2 + 1)-th smallest nodes. If 'N' is odd, the median is the (N+1)/2-th smallest node.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 5000",
                    "0 <= Data <= 10^6 and Data!=-1",
                    "Data will be distinct."
                ],
                "testcases": [
                    {
                        "input": "root = [3,1,5,null,2,null,6]",
                        "output": "3",
                        "explanation": "The sorted array corresponding to the first test case will be [1, 2, 3, 5, 6]. Here, we can see the median of the array is equal to 3."
                    },
                    {
                        "input": "root = [2,1,null]",
                        "output": "1",
                        "explanation": "The sorted array corresponding to the second test case will be [1, 2]. Here, we can see the median of the array is equal to (1+2) / 2 = int(1.5) = 1."
                    },
                    {
                        "input": "root = [10,null,20,null,30,null,40]",
                        "output": "25",
                        "explanation": "The sorted array corresponding to the test case will be [10, 20, 30, 40]. Here, we can see the median of the array is equal to (20+30) / 2 = int(25) = 25."
                    },
                    {
                        "input": "root = [1]",
                        "output": "1",
                        "explanation": "The sorted array corresponding to the test case will be [1]. Here, we can see the median of the array is equal to 1."
                    },
                    {
                        "input": "root = [4,2,6,1,3,5,7]",
                        "output": "4",
                        "explanation": "The sorted array corresponding to the test case will be [1,2,3,4,5,6,7]. Here, we can see the median of the array is equal to 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use the inorder traversal of the BST.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}