{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9991,
            "title": " Median of a row wise sorted matrix",
            "titleSlug": "median-of-a-row-wise-sorted-matrix_1115473",
            "content": "<h4 id=\"you-are-given-a-row-wise-sorted-matrix-mat-of-size-m-x-n-where-m-and-n-are-the-numbers-of-rows-and-columns-of-the-matrix-respectively\">You are given a row-wise sorted matrix <em><strong>&#39;mat&#39;</strong></em> of size m x n where <em><strong>&#39;m&#39;</strong></em> and <em><strong>&#39;n&#39;</strong></em> are the numbers of rows and columns of the matrix, respectively.</h4>\n\n<p><br /></p>\n\n<h4 id=\"your-task-is-to-find-and-return-the-median-of-the-matrix\">Your task is to find and return the median of the matrix.</h4>\n\n<p><br /></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>&#39;m&#39; and &#39;n&#39; will always be odd.\n</code></pre>\n\n<p><br /></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: &#39;n&#39; = 5, &#39;m&#39; = 5\n&#39;mat&#39; = \n[     [ 1, 5, 7, 9, 11 ],\n      [ 2, 3, 4, 8, 9 ],\n      [ 4, 11, 14, 19, 20 ],\n      [ 6, 10, 22, 99, 100 ],\n      [ 7, 15, 17, 24, 28 ]   ]\n\nOutput: 10\n\nExplanation: If we arrange the elements of the matrix in the sorted order in an array, they will be like this-\n\n1 2 3 4 4 5 6 7 7 8 9 9 10 11 11 14 15 17 19 20 22 24 28 99 100 \n\nSo the median is 10, which is at index 12, which is midway as the total elements are 25, so the 12th index is exactly midway. Therefore, the answer will be 10. \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains two space-separated integers, &#39;m&#39;, and &#39;n&#39;, representing the number of rows and the columns of the matrix, respectively.\n\nEach of the next &#39;m&#39; lines contains &#39;n&#39; space-separated integers denoting the elements of the matrix.\n</code></pre>\n\n<p><br /></p>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Return a single integer representing the median of the matrix.\n</code></pre>\n\n<p><br /></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t have to print anything; it has already been taken care of. Just implement the given function. \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>5 5\n1 5 7 9 11 \n2 3 4 8 9 \n4 11 14 19 20 \n6 10 22 99 100 \n7 15 17 24 28 \n</code></pre>\n\n<p><br/>   </p>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>10\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>If we arrange the elements of the matrix in the sorted order in an array, they will be like this-\n\n1 2 3 4 4 5 6 7 7 8 9 9 10 11 11 14 15 17 19 20 22 24 28 99 100 \n\nSo the median is 10, which is at index 12, which is midway as the total elements are 25, so the 12th index is exactly midway. Therefore, the answer will be 10. \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3 5\n1 2 3 4 5\n8 9 11 12 13\n21 23 25 27 29\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>11\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>If we arrange the elements of the matrix in the sorted order in an array, they will be like this-\n\n1 2 3 4 5 8 9 11 12 13 21 23 25 27 29\n\nSo the median is 11, which is at index 7, which is midway as the total elements are 15, so the 7th index is exactly midway. Therefore, the answer will be 11. \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to solve this in O(32 * m * log(n)).          \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= m &lt; 100\n1 &lt;= n &lt; 100\n1 &lt;= mat[i][j] &lt;=10^9\n\nTime Limit: 1 sec  \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 160,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a row-wise sorted matrix 'matrix' of size m x n, where 'm' and 'n' are odd integers representing the number of rows and columns respectively, find the median of all the elements in the matrix.",
                "constraints": [
                    "1 <= m < 100",
                    "1 <= n < 100",
                    "1 <= matrix[i][j] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "matrix = [[1, 5, 7, 9, 11], [2, 3, 4, 8, 9], [4, 11, 14, 19, 20], [6, 10, 22, 99, 100], [7, 15, 17, 24, 28]], m = 5, n = 5",
                        "output": "10",
                        "explanation": "The elements of the matrix in sorted order are: 1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9, 9, 10, 11, 11, 14, 15, 17, 19, 20, 22, 24, 28, 99, 100. The median is 10."
                    },
                    {
                        "input": "matrix = [[1, 2, 3, 4, 5], [8, 9, 11, 12, 13], [21, 23, 25, 27, 29]], m = 3, n = 5",
                        "output": "11",
                        "explanation": "The elements of the matrix in sorted order are: 1, 2, 3, 4, 5, 8, 9, 11, 12, 13, 21, 23, 25, 27, 29. The median is 11."
                    },
                    {
                        "input": "matrix = [[1, 3, 5], [2, 6, 9], [3, 6, 9]], m = 3, n = 3",
                        "output": "5",
                        "explanation": "The elements of the matrix in sorted order are: 1, 2, 3, 3, 5, 6, 6, 9, 9. The median is 5."
                    },
                    {
                        "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], m = 3, n = 3",
                        "output": "5",
                        "explanation": "The elements of the matrix in sorted order are: 1, 2, 3, 4, 5, 6, 7, 8, 9. The median is 5."
                    },
                    {
                        "input": "matrix = [[1]], m = 1, n = 1",
                        "output": "1",
                        "explanation": "The only element is 1, so the median is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>What if the elements were stored in an array?</p>",
            "<p>Use the fact that the rows of the matrix are already sorted. Can we apply Binary Search?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n        Time Complexity: O(32 * m * log(n))\n        Space complexity: O(1)\n\n        Where 'm' denotes the number of rows and 'n' denotes the number of columns of the matrix.\n\n*/\n\nint median(vector<vector<int>> &matrix, int m, int n)\n{\n    int maximum = INT_MIN;\n    int minimum = INT_MAX;\n\n    // To find the minimum and maximum in the matrix\n    for (int i = 0; i < m; i++)\n    {\n        if (matrix[i][0] < minimum)\n        {\n            minimum = matrix[i][0];\n        }\n        if (matrix[i][n - 1] > maximum)\n        {\n            maximum = matrix[i][n - 1];\n        }\n    }\n\n    // Count for the number to be the median\n    int checkCount = (m * n + 1) / 2;\n\n    // Binary search for the median\n    while (minimum < maximum)\n    {\n        int mid = minimum + (maximum - minimum) / 2;\n        int count = 0;\n        int find = 0;\n\n        for (int i = 0; i < m; ++i)\n        {\n            \n            // Binary search for finding the count in each row\n            find = upper_bound(matrix[i].begin(), matrix[i].end(), mid) - matrix[i].begin();\n\n            // Increment count\n            count = count + find;\n        }\n\n        if (count < checkCount)\n        {\n            minimum = mid + 1;\n        }\n        else\n        {\n            maximum = mid;\n        }\n    }\n\n    // Finally return the answer\n    return minimum;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n        Time Complexity: O(32 * M * log(N))\r\n        Space complexity: O(1)\r\n\r\n        Where 'M' denotes the number of rows and 'N' denotes the number of columns of the matrix.\r\n\r\n*/\r\n\r\nimport java.util.Arrays;\r\n\r\npublic final class Solution \r\n{\r\n    public static int findMedian(int matrix[][], int M, int N) \r\n    {\r\n\r\n        int maximum = Integer.MIN_VALUE;\r\n        int minimum = Integer.MAX_VALUE;\r\n\r\n        // To find the minimum and maximum in the matrix\r\n        for (int i = 0; i < M; i++) \r\n        {\r\n\r\n            if (matrix[i][0] < minimum) \r\n            {\r\n                minimum = matrix[i][0];\r\n            }\r\n\r\n            if (matrix[i][N - 1] > maximum) \r\n            {\r\n                maximum = matrix[i][N - 1];\r\n            }\r\n        }\r\n\r\n        // Count for the number to be the median\r\n        int checkCount = (M * N + 1) / 2;\r\n\r\n        // Binary search for the median\r\n        while (minimum < maximum) \r\n        {\r\n            int mid = minimum + (maximum - minimum) / 2;\r\n            int count = 0;\r\n            int find = 0;\r\n\r\n            for (int i = 0; i < M; ++i) \r\n            {\r\n                \r\n                // Binary search for finding the count in each row\r\n                find = Arrays.binarySearch(matrix[i], mid);\r\n\r\n                \r\n                // If the element is not present, get the position of where it should be\r\n                // inserted\r\n                \r\n                if (find < 0) \r\n                {\r\n                    \r\n                    // Minus one because Arrays.BinarySearch return -(insertionPoint + 1)\r\n                    find = Math.abs(find) - 1;\r\n                }\r\n\r\n                else \r\n                {\r\n                    \r\n                    // If the element is found then check for the best position of it Means in case\r\n                    //  of duplicate elements just increase the index\r\n                    while (find < matrix[i].length && matrix[i][find] == mid) \r\n                    {\r\n                        find += 1;\r\n                    }\r\n                }\r\n                \r\n                // Increment count\r\n                count = count + find;\r\n            }\r\n\r\n            if (count < checkCount) \r\n            {\r\n                minimum = mid + 1;\r\n            }\r\n            else \r\n            {\r\n                maximum = mid;\r\n            }\r\n        }\r\n        \r\n        // Finally return the answer\r\n        return minimum;\r\n    }\r\n\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\r\n\t\tTime Complexity: O(32 * m * log(n))\r\n\t\tSpace complexity: O(1)\r\n\r\n\t\tWhere 'm' denotes the number of rows and 'n' denotes the number of columns of the matrix.\r\n\r\n\"\"\"\r\n\r\nfrom bisect import bisect_right\r\n\r\n\r\ndef median(matrix: [[int]], m: int, n: int) -> int:\r\n\r\n    maximum = -1e9\r\n    minimum = 1e9\r\n\r\n    # To find the minimum and maximum in the matrix\r\n    for i in range(m):\r\n\r\n        if matrix[i][0] < minimum:\r\n\r\n            minimum = matrix[i][0]\r\n\r\n        if matrix[i][n - 1] > maximum:\r\n\r\n            maximum = matrix[i][n - 1]\r\n\r\n    # Count for the number to be the median\r\n    checkCount = (m * n + 1) // 2\r\n\r\n    # Binary search for the median\r\n    while minimum < maximum:\r\n\r\n        mid = minimum + (maximum - minimum) // 2\r\n        count = 0\r\n        find = 0\r\n\r\n        for i in range(m):\r\n\r\n            # Binary search for finding the count in each row\r\n            find = bisect_right(matrix[i], mid)\r\n\r\n            # Increment count\r\n            count = count + find\r\n\r\n        if count < checkCount:\r\n\r\n            minimum = mid + 1\r\n\r\n        else:\r\n\r\n            maximum = mid\r\n\r\n    # Finally return the answer\r\n    return minimum\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}