{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9430,
            "title": "Median of two sorted arrays",
            "titleSlug": "median-of-two-sorted-arrays_985294",
            "content": "<h4 id=\"given-two-sorted-arrays-a-and-b-of-size-n-and-m-respectively\">Given two sorted arrays <em><strong>&#39;a&#39;</strong></em> and <em><strong>&#39;b&#39;</strong></em> of size <em><strong>&#39;n&#39;</strong></em> and <em><strong>&#39;m&#39;</strong></em> respectively.</h4>\n\n<p><br/></p>\n\n<h4 id=\"find-the-median-of-the-two-sorted-arrays\">Find the median of the two sorted arrays.</h4>\n\n<p><br/></p>\n\n<h4 id=\"median-is-defined-as-the-middle-value-of-a-sorted-list-of-numbers-in-case-the-length-of-list-is-even-median-is-the-average-of-the-two-middle-elements\">Median is defined as the middle value of a sorted list of numbers. In case the length of list is even, median is the average of the two middle elements.</h4>\n\n<p><br/></p>\n\n<h4 id=\"the-expected-time-complexity-is-o-min-logn-logm-where-n-and-m-are-the-sizes-of-arrays-a-and-b-respectively-and-the-expected-space-complexity-is-o-1\">The expected time complexity is <em><strong>O(min(logn, logm))</strong></em>, where &#39;n&#39; and &#39;m&#39; are the sizes of arrays &#39;a&#39; and &#39;b&#39;, respectively, and the expected space complexity is <em><strong>O(1)</strong></em>.</h4>\n\n<p><br /></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: &#39;a&#39; = [2, 4, 6] and &#39;b&#39; = [1, 3, 5]\n\nOutput: 3.5\n\nExplanation: The array after merging &#39;a&#39; and &#39;b&#39; will be { 1, 2, 3, 4, 5, 6 }. Here two medians are 3 and 4. So the median will be the average of 3 and 4, which is 3.5.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains two space-separated integers \u2018n\u2019 and \u2018m\u2019 representing the sizes of the two arrays.\n\nThe second line contains &#39;n&#39; space-separated integers representing the elements of the first array.\n\nThe third line contains &#39;m&#39; space-separated integers representing the elements of the second array.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Print a single line containing a single value denoting the median of the combined array.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function and return the median of the two arrays.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3 3\n2 4 6\n1 3 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3.5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>The array after merging &#39;a&#39; and &#39;b&#39; will be { 1, 2, 3, 4, 5, 6 }. \nHere two medians are 3 and 4. So the median will be the average of 3 and 4, which is 3.5.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3 2\n2 4 6\n1 3  \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h5>\n\n<pre><code>The array after merging &#39;a&#39; and &#39;b&#39; will be { 1, 2, 3, 4, 6 }. \nThe median is 3.\n</code></pre>\n\n<h5 id=\"sample-input-3\">Sample Input 3:</h5>\n\n<pre><code>3 3\n1 2 2\n2 4 4\n</code></pre>\n\n<h5 id=\"sample-output-3\">Sample Output 3:</h5>\n\n<pre><code>2.0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-3\">Explanation of Sample Input 3 :</h5>\n\n<pre><code>The array after merging &#39;a&#39; and &#39;b&#39; will be { 1, 2, 2, 2, 4, 4 }. \nHere two medians are 2 and 2. So the median will be the average of 2 and 2, which is 2.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10 ^ 6\n1 &lt;= &#39;m&#39; &lt;= 10 ^ 6\n1 &lt;= &#39;a[i]&#39; &lt;= 10 ^ 9\n1 &lt;= &#39;b[i]&#39; &lt;= 10 ^ 9\n\nTime limit: 1 sec.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 222,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two sorted arrays, 'a' of size 'n' and 'b' of size 'm', find the median of the merged sorted array. The median is the middle value of a sorted list. If the list has an even number of elements, the median is the average of the two middle elements.  Achieve this with a time complexity of O(min(log n, log m)) and space complexity of O(1).",
                "constraints": [
                    "1 <= n <= 10^6",
                    "1 <= m <= 10^6",
                    "1 <= a[i] <= 10^9",
                    "1 <= b[i] <= 10^9",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 3\n2 4 6\n1 3 5",
                        "output": "3.5",
                        "explanation": "Merging 'a' and 'b' results in {1, 2, 3, 4, 5, 6}. The two middle elements are 3 and 4.  The median is (3 + 4) / 2 = 3.5."
                    },
                    {
                        "input": "3 2\n2 4 6\n1 3",
                        "output": "3",
                        "explanation": "Merging 'a' and 'b' results in {1, 2, 3, 4, 6}. The middle element is 3. Therefore, the median is 3."
                    },
                    {
                        "input": "3 3\n1 2 2\n2 4 4",
                        "output": "2.0",
                        "explanation": "Merging 'a' and 'b' results in {1, 2, 2, 2, 4, 4}. The two middle elements are 2 and 2.  The median is (2 + 2) / 2 = 2.0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a brute force approach.</p>",
            "<p>Do we really need to traverse and store both arrays completely to get the median?</p>",
            "<p>Can we make use of the fact that the given arrays are sorted?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(min(log 'n', log 'm'))\r\n    Space Complexity: O(1)\r\n\r\n    Where 'n' & 'm' are the sizes of the arrays.\r\n*/\r\n\r\ndouble median(vector<int>& a, vector<int>& b) {\r\n    if (a.size() > b.size())\r\n    {\r\n        swap(a, b);\r\n    }\r\n\r\n    int n = a.size(), m = b.size();\r\n    int low = 0, high = n;\r\n\r\n    while (low <= high) {\r\n        int mid = (low + high) / 2;\r\n\r\n        int part = (n + m + 1) / 2 - mid;\r\n\r\n        if (part > m)\r\n        {\r\n            low = mid + 1;\r\n            continue;\r\n        }\r\n\r\n        int leftMax = 0, rightMin = 1e9 + 1;\r\n        if (mid > 0)\r\n        {\r\n            leftMax = max(leftMax, a[mid - 1]);\r\n        }\r\n\r\n        if (part > 0)\r\n        {\r\n            leftMax = max(leftMax, b[part - 1]);\r\n        }\r\n\r\n        if (mid < n)\r\n        {\r\n            rightMin = min(rightMin, a[mid]);\r\n        }\r\n\r\n        if (part < m)\r\n        {\r\n            rightMin = min(rightMin, b[part]);\r\n        }\r\n\r\n        if (leftMax <= rightMin)\r\n        {\r\n            if ((n + m) & 1)\r\n            {\r\n                return leftMax;\r\n            }\r\n            return (leftMax + rightMin) / 2.0;\r\n        }\r\n\r\n        if (a[mid] < leftMax)\r\n        {\r\n            low = mid + 1;\r\n        }\r\n        else\r\n        {\r\n            high = mid - 1;\r\n        }\r\n    }\r\n\r\n    return -1;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(min(log N, log M))\r\n    Space Complexity: O(1)\r\n\r\n    Where 'N' & 'M' are the sizes of the arrays.\r\n*/\r\n\r\nimport java.util.Arrays;\r\n\r\npublic class Solution \r\n{\r\n\r\n    public static double median(int[] a, int[] b) \r\n    {\r\n        if(a.length > b.length) \r\n        {\r\n            return medianHelper(b, a);\r\n        }\r\n\r\n        return medianHelper(a, b);\r\n    }\r\n\r\n    // Function to find median.\r\n    public static double medianHelper(int[] a, int[] b) \r\n    {\r\n        int n = a.length, m = b.length;\r\n        int low = 0, high = n;\r\n\r\n        // Binary search.\r\n        while(low <= high) \r\n        {\r\n            int mid = (low + high) / 2;\r\n            int part = (n + m + 1) / 2 - mid;\r\n\r\n            // If part is greater than m\r\n            if(part > m) \r\n            {\r\n                low = mid + 1;\r\n                continue;\r\n            }\r\n\r\n            int leftMax = 0, rightMin = 1000000001;\r\n            \r\n            if(mid > 0) \r\n            {\r\n                leftMax = Math.max(leftMax, a[mid-1]);\r\n            }\r\n\r\n            if(part > 0) \r\n            {\r\n                leftMax = Math.max(leftMax, b[part-1]);\r\n            }\r\n\r\n            if(mid < n) \r\n            {\r\n                rightMin = Math.min(rightMin, a[mid]);\r\n            }\r\n\r\n            if(part < m) \r\n            {\r\n                rightMin = Math.min(rightMin, b[part]);\r\n            }\r\n\r\n            // If leftMax is less than or greater than rightMin\r\n            if(leftMax <= rightMin) \r\n            {\r\n                if(((n + m) & 1) == 1) \r\n                {\r\n                    return leftMax;\r\n                }\r\n                \r\n                return (leftMax + rightMin) / 2.0;\r\n            }\r\n\r\n            // If a[mid] is less than leftMax\r\n            if(a[mid] < leftMax) \r\n            {\r\n                low = mid + 1;\r\n            }\r\n            else \r\n            {\r\n                high = mid - 1;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(min(log N, log M))\r\n    Space Complexity: O(1)\r\n\r\n    Where 'N' & 'M' are the sizes of the arrays.\r\n'''\r\n\r\n\r\ndef median(a, b):\r\n\r\n    if len(a) > len(b):\r\n        a, b = b, a\r\n\r\n    n = len(a)\r\n    m = len(b)\r\n    low = 0\r\n    high = n\r\n\r\n    # Binary search.\r\n    while low <= high:\r\n\r\n        mid = (low + high) // 2\r\n        part = (n + m + 1) // 2 - mid\r\n\r\n        # If part is greater than m\r\n        if part > m:\r\n            low = mid + 1\r\n            continue\r\n\r\n        leftMax = 0\r\n        rightMin = 10**9 + 1\r\n\r\n        if (mid > 0):\r\n            leftMax = max(leftMax, a[mid-1])\r\n\r\n        if (part > 0):\r\n            leftMax = max(leftMax, b[part-1])\r\n\r\n        if (mid < n):\r\n            rightMin = min(rightMin, a[mid])\r\n\r\n        if (part < m):\r\n            rightMin = min(rightMin, b[part])\r\n\r\n        # If leftMax is less than or greater than rightMin\r\n        if(leftMax <= rightMin):\r\n\r\n            if ((n + m) & 1):\r\n                return leftMax * 1.0\r\n\r\n            return (leftMax + rightMin) / 2.0\r\n\r\n        # If a[mid] is less than leftMax\r\n        if (a[mid] < leftMax):\r\n            low = mid + 1\r\n\r\n        else:\r\n            high = mid - 1\r\n\r\n    return -1\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}