{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9334,
            "title": "Medium",
            "titleSlug": "medium_982932",
            "content": "<h4 id=\"given-two-arrays-arr-and-brr-of-size-n-and-m-respectively-your-task-is-to-sort-the-elements-of-arr-in-such-a-way-that-the-relative-order-among-the-elements-will-be-the-same-as-those-are-in-brr-for-the-elements-not-present-in-brr-append-them-in-the-last-in-sorted-order\">Given two arrays \u2018ARR\u2019 and \u2018BRR\u2019 of size \u2018N\u2019 and \u2018M\u2019 respectively. Your task is to sort the elements of \u2018ARR\u2019 in such a way that the relative order among the elements will be the same as those are in \u2018BRR\u2019. For the elements not present in \u2018BRR\u2019, append them in the last in sorted order.</h4>\n\n<h4 id=\"for-example\">For example</h4>\n\n<pre><code>Consider the arrays as ARR = { 9, 5, 8, 4, 6, 5 } and BRR = { 8, 4, 5 }\nThe output for the above example  is { 8, 4, 5, 5, 6, 9 }.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Elements of \u2018BRR\u2019 are non repeating.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then, the \u2018T\u2019 test cases follow.\n\nThe first line of each test case or query contains two single-space separated integers &#39;N&#39; and \u2018M\u2019 representing the size of the \u2018ARR\u2019 and \u2018BRR\u2019 respectively.\n\nThe second line contains &#39;N&#39; single space-separated integers, representing the elements of array \u2018ARR\u2019.\n\nThe third line contains &#39;M&#39; single space-separated integers, representing the elements of array \u2018BRR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print \u2018N\u2019 single space-separated integers, representing the elements of \u2018ARR\u2019 after the required sorting order in a single line.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10 ^ 5\n1 &lt;= M &lt;= 10 ^ 5\n(-10 ^ 9) &lt;= ARR[i] , BRR[i]  &lt;= (10 ^ 9) \n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n6 3\n9 5 8 4 6 5 \n8 4 5\n4 4\n1 8 1 6 \n1 9 6 7 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>8 4 5 5 6 9\n1 1 6 8\n</code></pre>\n\n<h4 id=\"explanation\">Explanation:</h4>\n\n<pre><code>For test case 1:\nAs 8 comes first in BRR, so we first add all occurrences of 8 in ARR, in our resultant array RES. Now, RES={8} and ARR={9,5,4,6,5}.\nAfter 8, 4 comes in BRR, so we add all occurrences of 4 that are in ARR, in the RES array. Now, RES={8,4} and ARR={9,5,6,5}.\nAfter 4, 5 comes in BRR, so we add all occurrences of 5 that are in ARR, in the RES array. Now, RES={8,4,5,5} and ARR={9,6}.\nNow, after processing all the elements of BRR, we will add the remaining elements of ARR in sorted order, in our RES array.\nSo the final RES is {8,4,5,5,6,9}.\n\nFor test case 2: \nAs 1 comes first in BRR, so we first add all occurrences of 1 in ARR, in our resultant array RES. Now, RES={1,1} and ARR={8,6}.\nAfter 1, 9 comes in BRR, so we add all occurrences of 9 that are in ARR, in the RES array, but 9 is not present in ARR, so RES remains the same. Now, RES={1,1} and ARR={8,6}.\nAfter 9, 6 comes in BRR, so we add all occurrences of 6 that are in ARR, in the RES array. Now, RES={1,1,6} and ARR={8}.\nAfter 9, 7 comes in BRR, so we add all occurrences of 7 in ARR, in our RES, but 7 is not present in ARR, so RES remains the same. Now, RES={1,1,6} and ARR={8}.\nNow, after processing all the elements of BRR, we will add the remaining elements of ARR in sorted order, in our RES array.\nSo the final RES is {1,1,6,8}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 5\n7 5 8  \n8 4 5 6 3\n4 2\n9 2 2 4 \n5 2 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>8 5 7\n2 2 4 9\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 28,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integer arrays, `arr` of size `n` and `brr` of size `m`, sort `arr` such that the relative ordering of elements present in `brr` is maintained. Elements in `arr` that are not present in `brr` should be appended to the end of the sorted `arr` in ascending order. Return the sorted array. Implement the function:  `vector<int> relativeSorting(vector<int> &arr, vector<int> &brr, int n, int m)`",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= m <= 10^5",
                    "(-10^9) <= arr[i], brr[i] <= (10^9)"
                ],
                "testcases": [
                    {
                        "input": "n = 6, arr = [9, 5, 8, 4, 6, 5], m = 3, brr = [8, 4, 5]",
                        "output": "[8, 4, 5, 5, 6, 9]",
                        "explanation": "The elements of `brr` dictate the order. 8, 4, and 5 appear in `brr` in that sequence.  The elements in `arr` that are not in `brr` (6 and 9) are appended to the end in sorted order."
                    },
                    {
                        "input": "n = 4, arr = [1, 8, 1, 6], m = 4, brr = [1, 9, 6, 7]",
                        "output": "[1, 1, 6, 8]",
                        "explanation": "1 and 6 are the only elements that exist in both `arr` and `brr`.  The order is maintained according to `brr` (1 then 6). 9 and 7 don't exist in `arr`, so they are skipped. The rest of the elements in `arr` (8) are added in sorted order."
                    },
                    {
                        "input": "n = 3, arr = [7, 5, 8], m = 5, brr = [8, 4, 5, 6, 3]",
                        "output": "[8, 5, 7]",
                        "explanation": "8, 5 are present in both. 4,6,3 are skipped as they don't exit in arr. 7 is present in arr but not in brr, so it is added at the end after sorting rest of the element in arr."
                    },
                    {
                        "input": "n = 4, arr = [9, 2, 2, 4], m = 2, brr = [5, 2]",
                        "output": "[2, 2, 4, 9]",
                        "explanation": "Only 2 is in both. 5 is skipped. The remaining elements 4,9 are appended after sorting"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The very first approach is to look for all occurrences of BRR elements one by one in ARR and then add them in the RES array.</p>",
            "<p>As the final order of first array elements depends on the relative order of second order elements. We can sort the elements of the first array and then use binary search to find the frequency of second array elements in the first array.</p>",
            "<p>We can also use a map to find the frequency of elements of ARR.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}