{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15736,
            "title": "Meet-Up",
            "titleSlug": "meet-up_2698977",
            "content": "<h4 id=\"your-friends-live-in-a-grid-of-size-n-m-where\">Your friends live in a grid of size \u2018N\u2019 * \u2018M\u2019, where:</h4>\n\n<h4 id=\"each-represents-an-empty-spot-through-which-anyone-can-pass\">\u2022 Each \u2018.\u2019 represents an empty spot through which anyone can pass.</h4>\n\n<h4 id=\"each-represents-an-obstacle-which-no-one-can-pass-through\">\u2022 Each \u2018#\u2019 represents an obstacle which no one can pass through.</h4>\n\n<h4 id=\"each-f-represents-the-house-of-your-friend-and-no-one-can-pass-through-it\">\u2022 Each \u2018F\u2019 represents the house of your friend, and no one can pass through it.</h4>\n\n<h4 id=\"you-are-planning-to-meet-up-with-all-your-friends-so-you-need-to-find-an-empty-spot-where-you-can-wait-for-all-your-friends-and-the-sum-of-the-total-distance-travelled-by-all-your-friends-is-minimum-your-friends-can-only-move-left-right-up-or-down-and-each-move-increases-the-distance-travelled-by-1\">You are planning to meet up with all your friends so you need to find an empty spot where you can wait for all your friends, and the sum of the total distance travelled by all your friends is minimum. Your friends can only move left, right, up or down, and each move increases the distance travelled by 1.</h4>\n\n<h4 id=\"find-the-minimum-sum-of-total-distance-travelled-by-all-your-friends-or-print-1-to-say-that-no-such-spot-exists\">Find the minimum sum of total distance travelled by all your friends or print -1 to say that no such spot exists.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases.\n\nThe first line of each test case contains two spaced integers, \u2018N\u2019 and \u2018M\u2019, denoting the number of rows and columns.\n\nThe following line \u2018N\u2019 lines contain a string of size \u2018M\u2019 denoting the grid where your friends live.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer denoting the minimum sum of distance your friends need to travel or -1 if there is no meeting spot.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N, M &lt;= 30 \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 3\n.#F\n...\n..F\n3 3\n.#F\n..F\n..F\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n-1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>In the first test case, you can wait at the point (1, 2), and your friends at the point (0,2) and (2,2) will have to cover the distance of unit 1. So the sum of total distance travelled by all your friends 2.\n\nIn the second test case, there is no spot where all three of your friends can meet as the friend at (0, 3) cant move.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 2 \nF.\n2 2 \n.F\n.F\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 \n3 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a grid of size N x M, where '.' represents an empty spot, '#' represents an obstacle, and 'F' represents a friend's house, find the minimum total distance traveled by all friends to reach a common empty meeting spot. Friends can only move up, down, left, or right. Return -1 if no such meeting spot exists. The input is provided as a vector of strings representing the grid.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N, M <= 30",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "grid = {\".#F\", \"...\", \"..F\"}",
                        "output": "2",
                        "explanation": "You can wait at (1, 2). The friend at (0, 2) travels 1 unit, and the friend at (2, 2) travels 1 unit. Total distance is 2."
                    },
                    {
                        "input": "grid = {\".#F\", \"..F\", \"..F\"}",
                        "output": "-1",
                        "explanation": "The friend at (0,2) cannot move because of the obstacle, therefore no meeting point is possible."
                    },
                    {
                        "input": "grid = {\"F.\"}",
                        "output": "1",
                        "explanation": "The friend at (0,0) will need to move 1 step to the right to meet at (0,1)"
                    },
                    {
                        "input": "grid = {\".F\", \".F\"}",
                        "output": "3",
                        "explanation": "The friends can meet at (0,0) or (1,0). In both cases, the total distance is 1+2=3. The distances are: friend 1= 1 step, friend 2 = 2 steps ( or vice versa)"
                    },
                    {
                        "input": "grid = {\"F..\", \"...\", \"..F\"}",
                        "output": "4",
                        "explanation": "Friends located at (0,0) and (2,2) will have to travel to (1,1) with total distance is 2+2 = 4"
                    },
                    {
                        "input": "grid = {\"F#F\", \"###\", \"F#F\"}",
                        "output": "-1",
                        "explanation": "No '.' are available. Therefore no meeting points are possible."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we find the minimum distance of each empty spot to all your friends?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}