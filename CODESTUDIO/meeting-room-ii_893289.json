{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8672,
            "title": "Meeting Room II",
            "titleSlug": "meeting-room-ii_893289",
            "content": "<h4 id=\"stark-industry-is-planning-to-organize-stark-expo-for-which-various-departments-have-to-organize-meetings-to-check-their-preparations-since-stark-tower-has-limited-rooms-available-for-the-meeting-tony-decided-to-allot-a-room-to-each-meeting-so-that-all-the-meetings-are-organized-in-the-least-possible-conference-rooms-and-a-the-moment-only-one-meeting-will-happen-in-one-room-so-he-asked-jarvis-to-allot-each-meeting-a-room-and-tell-the-minimum-number-of-conference-rooms-to-be-reserved-but-since-jarvis-was-busy-rendering-another-iron-man-suit-model-he-asked-you-to-help\">Stark Industry is planning to organize Stark Expo, for which various departments have to organize meetings to check their preparations. Since Stark Tower has limited rooms available for the meeting, Tony decided to allot a room to each meeting so that all the meetings are organized in the least possible conference rooms, and a the moment, only one meeting will happen in one room. So, he asked JARVIS to allot each meeting a room and tell the minimum number of conference rooms to be reserved. But, since JARVIS was busy rendering another Iron Man suit model, he asked you to help.</h4>\n\n<h4 id=\"you-are-given-an-array-of-integers-arr-of-size-n-x-2-representing-the-start-and-end-time-for-n-meetings-your-task-is-to-find-the-minimum-number-of-rooms-required-to-organize-all-the-meetings\">You are given an array of integers ARR of size N x 2, representing the start and end time for N meetings. Your task is to find the minimum number of rooms required to organize all the meetings.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. You can assume that all the meetings will happen on the same day.\n2. Also, as soon as a meeting gets over if some other meeting is scheduled to start at that moment, they can then be allocated that room.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Try to solve the problem in linear time complexity.\n</code></pre>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>Consider there are three meetings scheduled with timings:\n1pm - 4pm\n3pm - 5pm\n4pm - 6pm\n\nAt the start of time, meeting 1 will be allotted room 1, which will be occupied till 4 pm hence for meeting 2 we\u2019ll have to provide another room. At 4 pm, meeting 3 can be organized in room 1 because by that time, meeting 1 would have ended. Hence we\u2019ll require two rooms for holding all three meetings.\n</code></pre>\n\n<h5 id=\"input-format\">Input format</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of the test cases. Then the test case follows.\n\nThe first line of each test case contains an integer \u2018N\u2019 representing the number of meetings scheduled.\n\nThe second line of each test case contains N space-separated integers representing the start time for each meeting.\n\nThe third line of each test case contains N space-separated integers representing the end time for each meeting.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, print the minimum number of conference rooms required.\n\nThe output of each test case should be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 1000\n0000 &lt;= INTERVAL[start][end] &lt;= 2359\n\nwhere &#39;T&#39; is the number of test cases, &#39;N&#39; is the number of meetings, and &#39;INTERVAL[start][end]&#39; represents the starting time and ending time of a meeting.\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n2\n0100 0500\n0300 0600\n3\n0100 0300 0400\n0400 0500 0600\n3\n0100 0300 0200\n0700 0500 0300\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n2\n2\n</code></pre>\n\n<h5 id=\"explanation-of-input-1\">Explanation of Input 1:</h5>\n\n<pre><code>(i) Occupancy of rooms - Room 1: (1-3) (5-6)\n\n(ii) Occupancy of rooms - Room 1: (1-4) (4-6) Room 2: (3-5) \n\n(iii) Occupancy of rooms - Room 1: (2-3) (3-5) Room 2: (1-7) \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n1\n0100\n1000\n5\n0100 0500 0300 0400 0600\n0300 0800 0500 0800 0950\n6\n0100 0900 0100 0300 0200 0400\n0200 1200 0200 0400 0600 0700\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n3\n2\n</code></pre>\n\n<h5 id=\"explanation-of-input-2\">Explanation of Input 2:</h5>\n\n<pre><code>(i) Occupancy of rooms - Room 1: (1-10)\n\n(ii) Occupancy of rooms - Room 1: (1-3) (3-5) (5-8) Room 2: (4-8) Room 3: (6-9:50) \n\n(iii) Occupancy of rooms - Room 1: (1-2) (3-4) (4-7) Room 2: (1-2) (2-6) (9-12) \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 12,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of meeting time intervals, where each interval is represented by a pair of integers [start_time, end_time], determine the minimum number of conference rooms required to accommodate all meetings. Assume all meetings occur on the same day, and a room can be reused immediately after a meeting ends. Solve this problem with linear time complexity.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 1000 (Number of meetings)",
                    "0000 <= INTERVAL[start][end] <= 2359 (Meeting start and end times)"
                ],
                "testcases": [
                    {
                        "input": "intervals = [[100, 300], [500, 600]]",
                        "output": "1",
                        "explanation": "The first meeting occupies room 1 from time 100 to 300.  The second meeting can use the same room after the first meeting completes, from 500 to 600."
                    },
                    {
                        "input": "intervals = [[100, 400], [300, 500], [400, 600]]",
                        "output": "2",
                        "explanation": "Meeting 1 (100-400) is assigned to room 1. Meeting 2 (300-500) overlaps with Meeting 1 and needs a new room, so it's assigned to room 2. Meeting 3 (400-600) starts exactly when meeting 1 ends. Thus meeting 3 can reuse room 1."
                    },
                    {
                        "input": "intervals = [[100, 700], [300, 500], [200, 300]]",
                        "output": "2",
                        "explanation": "Meeting 3 (200-300) gets room 1. Meeting 2 (300-500) occupies room 1. Meeting 1(100-700) needs a separate room 2."
                    },
                    {
                        "input": "intervals = [[100, 1000]]",
                        "output": "1",
                        "explanation": "Only one meeting is scheduled so only one room is needed."
                    },
                    {
                        "input": "intervals = [[100, 300], [500, 800], [300, 500], [400, 800], [600, 950]]",
                        "output": "3",
                        "explanation": "Room 1: (100-300), (300-500), (600-950)\nRoom 2: (400-800)\nRoom 3: (500-800)"
                    },
                    {
                        "input": "intervals = [[100, 200], [900, 1200], [100, 200], [300, 400], [200, 600], [400, 700]]",
                        "output": "2",
                        "explanation": "Room 1: (100-200), (300-400), (400-700)\nRoom 2: (100-200), (200-600), (900-1200)"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of a solution where meeting scheduled earlier gets a room</p>",
            "<p>Try to think of how you can use heaps to find the optimal solution.</p>",
            "<p>Try to solve the problem by using the fact that every minute there can be fix rooms occupied and there are fix minutes in a day.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}