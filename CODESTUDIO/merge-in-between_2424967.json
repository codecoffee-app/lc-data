{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15231,
            "title": "Merge In Between",
            "titleSlug": "merge-in-between_2424967",
            "content": "<h4 id=\"you-are-given-two-linked-lists-head1-and-head2-of-size-n-and-m-you-are-also-provided-with-two-integers-x-and-y-and-your-task-is-to-remove-the-first-linked-list-s-nodes-from-index-x-to-y-and-insert-all-the-nodes-of-the-second-linked-list-in-their-place\">You are given two linked lists, \u2019head1\u2019 and \u2018head2\u2019 of size \u2018N\u2019 and \u2018M\u2019. You are also provided with two integers, \u2018X\u2019 and \u2018Y\u2019, and your task is to remove the first Linked List\u2019s nodes from index \u2018X\u2019 to \u2018Y\u2019 and insert all the nodes of the second Linked List in their place.</h4>\n\n<h4 id=\"you-need-to-return-the-head-of-the-merged-linked-list\">You need to return the head of the merged Linked List.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>If the first list is: [0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL], the second list is: [10 -&gt; 20 -&gt; 30 -&gt; NULL], \u2018X\u2019 = 2 and \u2018Y\u2019 = 4 then if we remove nodes from index 2 to 4, and after inserting the second list at index 2 then the final list will be: [0 -&gt; 1 -&gt; 10 -&gt; 20 -&gt; 30 -&gt; 5 -&gt; NULL].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases.\n\nThe first line of each test case contains two space-separated integers denoting the value of \u2018X\u2019 and \u2018Y\u2019.\n\nThe second line of each test case contains space-separated integers denoting the values of the first Linked List nodes. The Linked List is terminated with -1. \n\nThe third line of each test case contains space-separated integers denoting the values of the second Linked List nodes. The Linked List is terminated with -1. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the final linked list in a single line in a space-separated manner.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n3 &lt;= N &lt;= 10 ^ 6\n1 &lt;= M &lt;= 10 ^ 6\n-10^9 &lt;= Node.Data &lt;= 10^9 and Node.Data != -1\n1 &lt;= X &lt;= Y &lt; N - 1\n\nThe linked list is 0-indexed.\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to input or print anything, as it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 4\n0 1 2 3 4 5 -1\n10 20 30 -1\n3 3\n0 1 3 8 11 -1\n7 9 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0 1 10 20 30 5 -1 \n0 1 3 7 9 11 -1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For the first test case, if we remove nodes from index 2 to 4 and after inserting the second list at the index 2 then the final list will be: [0 -&gt; 1 -&gt; 10 -&gt; 20 -&gt; 30 -&gt; 5 -&gt; NULL].\n\nFor the second test case, if we remove node at index 3, and after inserting second list at the index 3 then the final list will be: [0 -&gt; 1 -&gt; 3 -&gt; 7 -&gt; 9 -&gt; 11  -&gt; NULL].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2 3 \n-2 3 5 -7 9 -1\n0 0 0 -1\n3 4 \n3 4 5 2 6 7 -1\n9 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-2 3 0 0 0 9 -1\n3 4 5 9 7 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two linked lists, `head1` and `head2`, of sizes `N` and `M` respectively. You are also given two integers, `X` and `Y`.  Modify the first linked list `head1` by removing the nodes from index `X` to `Y` (inclusive) and inserting the entire second linked list `head2` in their place. Return the head of the modified linked list.",
                "constraints": [
                    "1 <= T <= 10",
                    "3 <= N <= 10 ^ 6",
                    "1 <= M <= 10 ^ 6",
                    "-10^9 <= Node.Data <= 10^9 and Node.Data != -1",
                    "1 <= X <= Y < N - 1"
                ],
                "testcases": [
                    {
                        "input": "x = 2, y = 4, head1 = [0, 1, 2, 3, 4, 5, -1], head2 = [10, 20, 30, -1]",
                        "output": "0 1 10 20 30 5 -1",
                        "explanation": "Nodes from index 2 to 4 in head1 (2, 3, and 4) are removed. The linked list head2 (10, 20, 30) is inserted starting at index 2 of head1. The result is [0 -> 1 -> 10 -> 20 -> 30 -> 5 -> NULL]."
                    },
                    {
                        "input": "x = 3, y = 3, head1 = [0, 1, 3, 8, 11, -1], head2 = [7, 9, -1]",
                        "output": "0 1 3 7 9 11 -1",
                        "explanation": "The node at index 3 in head1 (8) is removed. The linked list head2 (7, 9) is inserted starting at index 3 of head1. The result is [0 -> 1 -> 3 -> 7 -> 9 -> 11 -> NULL]."
                    },
                    {
                        "input": "x = 2, y = 3, head1 = [-2, 3, 5, -7, 9, -1], head2 = [0, 0, 0, -1]",
                        "output": "-2 3 0 0 0 9 -1",
                        "explanation": "Nodes from index 2 to 3 in head1 (5 and -7) are removed. The linked list head2 (0, 0, 0) is inserted starting at index 2 of head1. The result is [-2 -> 3 -> 0 -> 0 -> 0 -> 9 -> NULL]."
                    },
                    {
                        "input": "x = 3, y = 4, head1 = [3, 4, 5, 2, 6, 7, -1], head2 = [9, -1]",
                        "output": "3 4 5 9 7 -1",
                        "explanation": "Nodes from index 3 to 4 in head1 (2 and 6) are removed. The linked list head2 (9) is inserted starting at index 3 of head1. The result is [3 -> 4 -> 5 -> 9 -> 7 -> NULL]."
                    },
                    {
                        "input": "x = 1, y = 2, head1 = [1, 2, 3, 4, 5, -1], head2 = [6, 7, 8, -1]",
                        "output": "1 6 7 8 4 5 -1",
                        "explanation": "Remove nodes from index 1 to 2 which are 2 and 3. Insert linkedlist2. output : 1 6 7 8 4 5 -1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use pointers to keep track of previous nodes.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}