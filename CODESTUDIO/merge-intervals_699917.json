{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7572,
            "title": "Merge Intervals",
            "titleSlug": "merge-intervals_699917",
            "content": "<h4 id=\"you-are-given-n-number-of-intervals-where-each-interval-contains-two-integers-denoting-the-start-time-and-the-end-time-for-the-interval\">You are given N number of intervals, where each interval contains two integers denoting the start time and the end time for the interval.</h4>\n\n<h4 id=\"the-task-is-to-merge-all-the-overlapping-intervals-and-return-the-list-of-merged-intervals-sorted-by-increasing-order-of-their-start-time\">The task is to merge all the overlapping intervals and return the list of merged intervals sorted by increasing order of their start time.</h4>\n\n<h4 id=\"two-intervals-a-b-and-c-d-are-said-to-be-overlapping-with-each-other-if-there-is-at-least-one-integer-that-is-covered-by-both-of-them\">Two intervals [A,B] and [C,D] are said to be overlapping with each other if there is at least one integer that is covered by both of them.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>For the given 5 intervals - [1, 4], [3, 5], [6, 8], [10, 12], [8, 9].\n\nSince intervals [1, 4] and [3, 5] overlap with each other, we will merge them into a single interval as [1, 5].\n\nSimilarly, [6, 8] and [8, 9] overlap, merge them into [6,9].\n\nInterval [10, 12] does not overlap with any interval.\n\nFinal List after merging overlapping intervals: [1, 5], [6, 9], [10, 12].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer N, the number of intervals.\n\nThe second line of input contains N integers, i.e. all the start times of the N intervals.\n\nThe third line of input contains N integers, i.e. all the end times of the N intervals.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print S lines, each contains two single space-separated integers A, and B, where S is the size of the merged array of intervals, &#39;A&#39; is the start time of an interval and &#39;B&#39; is the end time of the same interval.\n</code></pre>\n\n<h4 id=\"note\">Note</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^5 \n0 &lt;= START, FINISH &lt;= 10^9\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 3\n3 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 5  \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1</h5>\n\n<pre><code>Since these two intervals overlap at point 3 so we merge them and the new interval becomes (1,5).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5\n1 3 6 8 10\n4 5 8 9 12\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 5\n6 9\n10 12\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 217,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of N intervals, where each interval is defined by a start time and an end time, merge all overlapping intervals. The merged intervals should be sorted in ascending order based on their start times. Two intervals [A, B] and [C, D] overlap if they share at least one common integer. For example, intervals [1, 4] and [3, 5] overlap and can be merged into [1, 5].",
                "constraints": [
                    "1 <= N <= 10^5",
                    "0 <= START, FINISH <= 10^9",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "2\n1 3\n3 5",
                        "output": "1 5",
                        "explanation": "The intervals [1, 3] and [3, 5] overlap at 3. Merging them results in the interval [1, 5]."
                    },
                    {
                        "input": "5\n1 3 6 8 10\n4 5 8 9 12",
                        "output": "1 5\n6 9\n10 12",
                        "explanation": "The input consists of the intervals [1, 4], [3, 5], [6, 8], [8, 9], and [10, 12].  [1, 4] and [3, 5] merge to [1, 5]. [6, 8] and [8, 9] merge to [6, 9]. [10, 12] does not overlap with any other interval and remains as [10, 12]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For each interval check all intervals and merge the overlapping ones.</p>",
            "<p>Try sorting the intervals.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N * log(N))\r\n    Space Complexity: O(1)\r\n\r\n    Where N is the number of intervals.\r\n*/\r\n\r\n#include <algorithm>\r\n\r\nvector<vector<int>> mergeIntervals(vector<vector<int>> &intervals)\r\n{\r\n    int n = intervals.size();\r\n    sort(intervals.begin(), intervals.end());\r\n    vector<vector<int>> res;\r\n\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        int curS = intervals[i][0];\r\n        int curE = intervals[i][1];\r\n\r\n\t    // If current interval doesn't overlap with the previous interval.\r\n        if (res.size() == 0 || curS > res[res.size() - 1][1]) \r\n        {\r\n\r\n            res.push_back(intervals[i]);\r\n        }\r\n        // If current interval overlaps with the previous interval.\r\n        else \r\n        {\r\n            res[res.size() - 1][1] = max(res[res.size() - 1][1], curE);\r\n        }\r\n    }\r\n\r\n    return res;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N * log(N))\r\n    Space Complexity: O(1)\r\n\r\n    Where N is the number of intervals.\r\n'''\r\n\r\nfrom sys import stdin, setrecursionlimit\r\n\r\n\r\nclass Solution:\r\n    def __init__(self, start, end):\r\n        self.start = start\r\n        self.end = end\r\n\r\n\r\ndef mergeIntervals(intervals):\r\n\r\n    n = len(intervals)\r\n    res = []\r\n\r\n    for i in range(n):\r\n        curS = intervals[i].start\r\n        curE = intervals[i].end\r\n        # If current interval doesn't overlap with the previous interval.\r\n        if (len(res) == 0 or curS > res[len(res) - 1].end):\r\n            res.append(intervals[i])\r\n\r\n        else:\r\n            # If current interval overlaps with the previous interval.\r\n            res[len(res)-1].end = max(res[len(res)-1].end, curE)\r\n\r\n    return res\r\n\r\n\r\n# Main Code.\r\nn = int(input())\r\narr1 = list(map(int, stdin.readline().strip().split(\" \")))\r\narr2 = list(map(int, stdin.readline().strip().split(\" \")))\r\narr1.sort()\r\narr2.sort()\r\nintervals = []\r\nfor i in range(n):\r\n    a = Solution(arr1[i], arr2[i])\r\n    intervals.append(a)\r\n\r\nres = mergeIntervals(intervals)\r\n\r\nfor i in range(len(res)):\r\n    print(res[i].start, res[i].end)\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N * log(N))\r\n    Space Complexity: O(1)\r\n\r\n    Where N is the number of intervals.\r\n*/\r\n\r\nimport java.util.*;\r\n\r\npublic class Solution {\r\n\r\n    public static List<Interval> mergeIntervals(Interval[] intervals) {\r\n        int n = intervals.length;\r\n        List<Interval> res = new ArrayList();\r\n\r\n        Arrays.sort(intervals, new Comparator<Interval>() {\r\n\r\n            public int compare(Interval a, Interval b) {\r\n                if(a.start == b.start) {\r\n                    return a.finish - b.finish;\r\n                }\r\n\r\n                return a.start - b.start;\r\n            }\r\n\r\n        });\r\n\r\n        for(int i = 0; i < n; i++) {\r\n            int curS = intervals[i].start;\r\n            int curE = intervals[i].finish;\r\n\r\n            if(res.size() == 0 || curS > res.get(res.size() - 1).finish) {\r\n                res.add(intervals[i]);\r\n            }\r\n            else {\r\n                res.get(res.size() - 1).finish = Math.max(res.get(res.size() - 1).finish, curE);\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}