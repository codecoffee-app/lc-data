{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9108,
            "title": "Merge K Sorted Arrays",
            "titleSlug": "merge-k-sorted-arrays_975379",
            "content": "<h4 id=\"you-have-been-given-k-different-arrays-lists-which-are-sorted-individually-in-ascending-order-you-need-to-merge-all-the-given-arrays-list-such-that-the-output-array-list-should-be-sorted-in-ascending-order\">You have been given \u2018K\u2019 different arrays/lists, which are sorted individually (in ascending order). You need to merge all the given arrays/list such that the output array/list should be sorted in ascending order.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer T, the number of test cases.\n\nThe first line of each test case contains an integer that denotes the value of K.\n\nThe next 2*K lines of each test case follow: \nThe first line contains an integer \u2018N\u2019 denoting the size of the array. \n\nThe second line contains N space-separated integers. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The first and only line of output contains space-separated elements of the merged and sorted array, as described in the task.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t have to print anything; it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= K &lt;= 5\n1 &lt;= N &lt;= 20\n-10^5 &lt;= DATA &lt;= 10^5\n\nTime Limit: 1 sec \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n2\n3 \n3 5 9 \n4 \n1 2 3 8   \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 3 3 5 8 9 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>After merging the two given arrays/lists [3, 5, 9] and [ 1, 2, 3, 8], the output sorted array will be [1, 2, 3, 3, 5, 8, 9].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n4\n3\n1 5 9\n2\n45 90\n5\n2 6 78 100 234\n1\n0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0 1 2 5 6 9 45 78 90 100 234\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h5>\n\n<pre><code>After merging the given arrays/lists [1, 5, 9], [45, 90], [2, 6, 78, 100, 234] and [0], the output sorted array will be [0, 1, 2, 5, 6, 9, 45, 78, 90, 100, 234].\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 227,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given 'K' sorted arrays/lists (in ascending order). Merge them into a single sorted array/list (also in ascending order).",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= K <= 5",
                    "1 <= N <= 20",
                    "-10^5 <= DATA <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n2\n3 \n3 5 9 \n4 \n1 2 3 8",
                        "output": "1 2 3 3 5 8 9",
                        "explanation": "The two input arrays [3, 5, 9] and [1, 2, 3, 8] are merged and sorted to produce the output [1, 2, 3, 3, 5, 8, 9]."
                    },
                    {
                        "input": "1\n4\n3\n1 5 9\n2\n45 90\n5\n2 6 78 100 234\n1\n0",
                        "output": "0 1 2 5 6 9 45 78 90 100 234",
                        "explanation": "The four input arrays [1, 5, 9], [45, 90], [2, 6, 78, 100, 234], and [0] are merged and sorted to produce the output [0, 1, 2, 5, 6, 9, 45, 78, 90, 100, 234]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Copy the values and sort the final array.&nbsp;</p>",
            "<p>Can we repeatedly merge two arrays until we are left with one final array?</p>",
            "<p>Try to use a min-heap of size K to store the elements from the given K set of sorted arrays and keep removing the minimum (root) element (As we know, the root of the min-heap is always the minimum element in the heap) and adding it to the output array to get the desired merged sorted array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O((N * K) * log(K)) \r\n    Space Complexity: O(N * K)\r\n    \r\n    Where N is the total number of elements in all the arrays, and K is the number of arrays.\r\n*/\r\n\r\n#include<queue>\r\n\r\nvector<int> mergeKSortedArrays(vector<vector<int>>&kArrays, int k)\r\n{\r\n    vector<int> result; \r\n  \r\n    // Create a min heap to store atmost k heap nodes at a time.\r\n    priority_queue<pair<int, pair<int, int> >, vector<pair<int, pair<int, int> > >, greater<pair<int, pair<int, int> > > > minHeap; \r\n  \r\n    for (int i = 0; i < kArrays.size(); i++)\r\n    {\r\n        minHeap.push({ kArrays[i][0], { i, 0 } }); \r\n    }\r\n  \r\n    while (minHeap.empty() == false) \r\n    { \r\n    \r\n        // Remove the minimum element from the heap.\r\n        pair<int, pair<int, int> > curr = minHeap.top(); \r\n        minHeap.pop(); \r\n  \r\n        // i is the array number and j is the index of the removed element in the ith array.\r\n        int i = curr.second.first; \r\n        int j = curr.second.second; \r\n    \r\n        // Add the removed element to the output array.\r\n        result.push_back(curr.first); \r\n  \r\n        // If the next element of the extracted element exists, add it to the heap.\r\n        if (j + 1 < kArrays[i].size())\r\n        {\r\n            minHeap.push({ kArrays[i][j + 1], { i, j + 1 } }); \r\n        }\r\n    } \r\n  \r\n    // Return the output array.\r\n    return result; \r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O((N * K) * log(K)) \n    Space Complexity: O(N * K)\n    \n    Where N is the total number of elements in all the arrays, and K is the number of arrays.\n*/\n\n// import java.util.*;\n\nimport java.util.HashSet;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.Collections;\nimport java.util.PriorityQueue;\n\n\nclass Pair \n{\n    public int first, second, third;\n\n    Pair(int first, int second, int third) \n    {\n        this.first = first;\n        this.second = second;\n        this.third = third;\n    }\n}\n\n\n// Implements Comparator interface for min-heap.\nclass PqComparator implements Comparator<Pair> \n{\n    public int compare(Pair pair1, Pair pair2) \n    {\n        if (pair1.first < pair2.first) \n        {\n            return -1;\n        }\n        if (pair1.first == pair2.first) \n        {\n            return 0;\n        }\n        return 1;\n    }\n}\n\npublic class Solution \n{\n\n    public static ArrayList<Integer> mergeKSortedArrays(ArrayList<ArrayList<Integer>> kArrays, int k) \n    {\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\n        // Create a min heap to store atmost k heap nodes at a time.\n        PriorityQueue<Pair> minHeap = new PriorityQueue < Pair>(new PqComparator());\n\n        for (int i = 0; i < kArrays.size(); i++) \n        {\n            minHeap.add(new Pair( kArrays.get(i).get(0), i, 0 ));\n        }\n\n\n        while (minHeap.isEmpty() == false) \n        {\n\n            // Remove the minimum element from the heap.\n            Pair curr = minHeap.remove();\n\n            // i is the array number and j is the index of the removed element in the ith array.\n            int i = curr.second;\n            int j = curr.third;\n\n            // Add the removed element to the output array.\n            result.add(curr.first);\n\n            // If the next element of the extracted element exists, add it to the heap.\n            if (j + 1 < kArrays.get(i).size()) \n            {\n                minHeap.add(new Pair( kArrays.get(i).get(j + 1),  i, j + 1 ));\n            }\n        }\n\n        // Return the output array.\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O((N * K) * log(K)) \n    Space Complexity: O(N * K)\n\n    Where N is the total number of elements in all the arrays, and K is the number of arrays.\n'''\n\nimport heapq\n\ndef mergeKSortedArrays(kArrays, k):\n    \n    result = []\n    \n    # Create a min heap to store atmost k heap nodes at a time.\n    minHeap = []\n    \n    for i in range(len(kArrays)):\n        \n        heapq.heappush( minHeap, (kArrays[i][0], i, 0) )\n        \n    while len(minHeap) > 0:\n        \n        # Remove the minimum element from the heap.\n        curr = heapq.heappop(minHeap)\n        \n        # i is the array number and j is the index of the removed element in the ith array.\n        i = curr[1]\n        j = curr[2]\n        \n        # Add the removed element to the output array.\n        result.append(curr[0])\n        \n        # If the next element of the extracted element exists, add it to the heap.\n        if j + 1 < len(kArrays[i]):\n            \n            heapq.heappush( minHeap, (kArrays[i][j + 1], i, j + 1) )\n    \n            \n    # Return the output array.        \n    return result\n        \n    \n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}