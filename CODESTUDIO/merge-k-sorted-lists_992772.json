{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9464,
            "title": "Merge k sorted lists",
            "titleSlug": "merge-k-sorted-lists_992772",
            "content": "<h4 id=\"given-k-sorted-linked-lists-each-list-is-sorted-in-increasing-order-you-need-to-merge-all-these-lists-into-one-single-sorted-list-you-need-to-return-the-head-of-the-final-linked-list\">Given <em><strong>&#39;k&#39;</strong></em> sorted linked lists, each list is sorted in increasing order. You need to merge all these lists into one single sorted list. You need to return the head of the final linked list.</h4>\n\n<p><br></p>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Input:\n3\n3\n4 6 8\n3\n2 5 7 \n2\n1 9\n\nOutput:\n1 2 4 5 6 7 8 9 \n\nExplanation:\nFirst list is: 4 -&gt; 6 -&gt; 8 -&gt; NULL\nSecond list is: 2 -&gt; 5 -&gt; 7 -&gt; NULL\nThird list is: 1 -&gt; 9 -&gt; NULL\nThe final list would be: 1 -&gt; 2 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8 -&gt; 9 -&gt; NULL\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line consists of an integer &#39;k&#39; denoting the number of lists.\n\nNext 2*k lines consists of &#39;n&#39;, the size of linked list and the &#39;n&#39; space-separated elements on the new line.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:.</h5>\n\n<pre><code>The output consists of space-separated elements of the merged sorted list.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\n2 6 \n2\n-5 7 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>-5 2 6 7\n</code></pre>\n\n<h5 id=\"explanation-for-input-1\">Explanation for input 1:</h5>\n\n<pre><code>First list is: 2 -&gt; 6 -&gt; NULL\nSecond list is: -5 -&gt; 7 -&gt; NULL\nThe final list would be: -5 -&gt; 2 -&gt; 6 -&gt; 7 -&gt; NULL\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3\n8 9 11 \n2\n1 2 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>1 2 8 9 11 \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;k&#39; &lt;= 10 ^ 3\n1 &lt;= &#39;n&#39; &lt;= 100\n-10 ^ 9  &lt;= &#39;data&#39; &lt;=  10 ^ 9 \n\nwhere &#39;n&#39; is the size of the list.\nTime limit: 1 sec.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 98,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given 'k' sorted linked lists, where each list is sorted in ascending order. Your task is to merge all these lists into a single sorted linked list and return the head of the merged list. Implement the `mergeKLists` function to achieve this.",
                "constraints": [
                    "1 <= 'k' <= 10 ^ 3",
                    "1 <= 'n' <= 100 (where 'n' is the size of each list)",
                    "-10 ^ 9 <= 'data' <= 10 ^ 9 (where 'data' represents the values in the linked lists)"
                ],
                "testcases": [
                    {
                        "input": "k = 2, listArray = [{data: 2, next: {data: 6, next: null}}, {data: -5, next: {data: 7, next: null}}]",
                        "output": "-5 2 6 7",
                        "explanation": "The first list is: 2 -> 6 -> NULL. The second list is: -5 -> 7 -> NULL.  The merged sorted list is: -5 -> 2 -> 6 -> 7 -> NULL."
                    },
                    {
                        "input": "k = 2, listArray = [{data: 8, next: {data: 9, next: {data: 11, next: null}}}, {data: 1, next: {data: 2, next: null}}]",
                        "output": "1 2 8 9 11",
                        "explanation": "The first list is: 8 -> 9 -> 11 -> NULL. The second list is: 1 -> 2 -> NULL. The merged sorted list is: 1 -> 2 -> 8 -> 9 -> 11 -> NULL."
                    },
                    {
                        "input": "k = 3, listArray = [{data: 4, next: {data: 6, next: {data: 8, next: null}}}, {data: 2, next: {data: 5, next: {data: 7, next: null}}}, {data: 1, next: {data: 9, next: null}}]",
                        "output": "1 2 4 5 6 7 8 9",
                        "explanation": "First list is: 4 -> 6 -> 8 -> NULL. Second list is: 2 -> 5 -> 7 -> NULL. Third list is: 1 -> 9 -> NULL.  The final list would be: 1 -> 2 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> NULL"
                    },
                    {
                        "input": "k = 1, listArray = [{data: 5, next: null}]",
                        "output": "5",
                        "explanation": "Only one list with single element. The final list would be: 5 -> NULL"
                    },
                    {
                        "input": "k = 2, listArray = [{data: 10, next: {data: 20, next: {data: 30, next: null}}}, {data: 5, next: {data: 15, next: null}}]",
                        "output": "5 10 15 20 30",
                        "explanation": "First list is: 10 -> 20 -> 30 -> NULL. Second list is: 5 -> 15 -> NULL. The merged sorted list is: 5 -> 10 -> 15 -> 20 -> 30 -> NULL."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Insert elements of all lists into one array.&nbsp;</p>",
            "<p>An optimized of approach 2 is to make searching of list with smaller head node values.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N * logK)\r\n    Space Complexity: O(K)\r\n\r\n    Where 'N' is the total number of Nodes.\r\n    And 'K' is the number of lists.\r\n*/\r\n\r\n// Compare class for priority queue.\r\nclass compare\r\n{\r\npublic:\r\n    bool operator()(const Node *first, const Node *second)\r\n    {\r\n        return (first->data > second->data);\r\n    }\r\n};\r\n\r\nNode* mergeKLists(vector<Node*> &listArray)\r\n{\r\n    int k = listArray.size();\r\n\r\n    if (k == 0)\r\n    {\r\n        return NULL;\r\n    }\r\n\r\n    priority_queue<Node*, vector<Node*>, compare> helperPQ;\r\n\r\n    // Push into the queue.\r\n    for (int i = 0; i < k; i++)\r\n    {\r\n        if (listArray[i] != NULL)\r\n        {\r\n            helperPQ.push(listArray[i]);\r\n        }\r\n    }\r\n\r\n    Node *head = NULL, *tail = NULL;\r\n\r\n    // Add nodes while queue is non empty.\r\n    while (helperPQ.size() > 0)\r\n    {\r\n        Node *minNode = helperPQ.top();\r\n        helperPQ.pop();\r\n\r\n        if (minNode->next != NULL)\r\n        {\r\n            helperPQ.push(minNode->next);\r\n            minNode->next = NULL;\r\n        }\r\n\r\n        if (head == NULL)\r\n        {\r\n            head = minNode;\r\n            tail = minNode;\r\n        }\r\n        else\r\n        {\r\n            tail->next = minNode;\r\n            tail = tail->next;\r\n        }\r\n    }\r\n\r\n    return head;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N * logK)\r\n    Space Complexity: O(K)\r\n\r\n    Where 'N' is the total number of Nodes.\r\n    And 'K' is the number of lists.\r\n*/\r\n\r\nimport java.util.PriorityQueue;\r\nimport java.util.Comparator;\r\n\r\npublic class Solution {\r\n\r\n    public static LinkedListNode<Integer> mergeKLists(LinkedListNode<Integer>[] listArray) {\r\n        int k = listArray.length;\r\n\r\n        if (k == 0) {\r\n            return null;\r\n        }\r\n\r\n        PriorityQueue<LinkedListNode<Integer>> helperPQ = new PriorityQueue(new LLComparator());\r\n\r\n\t\t// Add nodes in the queue.\r\n        for (int i = 0; i < k; i++) {\r\n            if (listArray[i] != null) {\r\n                helperPQ.add(listArray[i]);\r\n            }\r\n        }\r\n\r\n        LinkedListNode<Integer> head = null, tail = null;\r\n\r\n\t\t// Add nodes while queue is non empty.\r\n        while (helperPQ.size() > 0) {\r\n            LinkedListNode<Integer> minNode = helperPQ.poll();\r\n\r\n            if (minNode.next != null) {\r\n                helperPQ.add(minNode.next);\r\n                minNode.next = null;\r\n            }\r\n\r\n            if (head == null) {\r\n                head = minNode;\r\n                tail = minNode;\r\n            }\r\n            else {\r\n                tail.next = minNode;\r\n                tail = tail.next;\r\n            }\r\n        }\r\n\r\n        return head;\r\n    }\r\n\r\n}\r\n\r\n// Compare function for priority queue.\r\nclass LLComparator implements Comparator<LinkedListNode<Integer>>{ \r\n               \r\n    public int compare(LinkedListNode<Integer> s1, LinkedListNode<Integer> s2) {\r\n        int a = s1.data, b = s2.data;  \r\n        if (a > b) {\r\n            return 1; \r\n        }\r\n        else if (a < b) {\r\n            return -1;  \r\n        }\r\n        return 0;\r\n    } \r\n} ",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "import heapq\r\n\r\nclass Node:\r\n    def __init__(self, data=0, next=None):\r\n        self.data = data\r\n        self.next = next\r\n\r\ndef mergeKLists(lists):\r\n    if not lists:\r\n        return None\r\n\r\n    # Create a min heap using a custom comparison function.\r\n    heap = []\r\n    for i in range(len(lists)):\r\n        if lists[i]:\r\n            heapq.heappush(heap, (lists[i].data, i))\r\n\r\n    dummy_head = Node()\r\n    current = dummy_head\r\n\r\n    while heap:\r\n        data, i = heapq.heappop(heap)\r\n        current.next = Node(data)\r\n        current = current.next\r\n        if lists[i] and lists[i].next:\r\n            lists[i] = lists[i].next\r\n            heapq.heappush(heap, (lists[i].data, i))\r\n\r\n    return dummy_head.next\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}