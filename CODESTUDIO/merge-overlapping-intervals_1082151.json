{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9705,
            "title": "Merge overlapping intervals",
            "titleSlug": "merge-overlapping-intervals_1082151",
            "content": "<h4 id=\"given-n-number-of-intervals-where-each-interval-contains-two-integers-denoting-the-boundaries-of-the-interval-the-task-is-to-merge-all-the-overlapping-intervals-and-return-the-list-of-merged-intervals-sorted-in-ascending-order\">Given &#39;N&#39; number of intervals, where each interval contains two integers denoting the boundaries of the interval. The task is to merge all the overlapping intervals and return the list of merged intervals sorted in ascending order.</h4>\n\n<h4 id=\"two-intervals-will-be-considered-to-be-overlapping-if-the-starting-integer-of-one-interval-is-less-than-or-equal-to-the-finishing-integer-of-another-interval-and-greater-than-or-equal-to-the-starting-integer-of-that-interval\">Two intervals will be considered to be overlapping if the starting integer of one interval is less than or equal to the finishing integer of another interval, and greater than or equal to the starting integer of that interval.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>for the given 5 intervals - [1,4], [3,5], [6,8], [10,12], [8,9].\nSince intervals [1,4] and [3,5] overlap with each other, we will merge them into a single interval as [1,5].\n\nSimilarly [6,8] and [8,9] overlaps, we merge them into [6,9].\n\nInterval [10,12] does not overlap with any interval.\n\nFinal List after merging overlapping intervals: [1,5], [6,9], [10,12]\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of the test case. Then the test case follows.\n\nThe first line of each test case contains an integer &#39;N&#39;, the number of intervals.\n\nThe second line of the test case contains &#39;N&#39; integers, the starting integer of &#39;N&#39; intervals.\n\nThe third line of the test case contains &#39;N&#39; integers, the ending integer of &#39;N&#39; intervals.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print &#39;S&#39; lines, each contains two single space-separated integers &#39;a&#39;, and &#39;b&#39;, where &#39;S&#39; is the size of the merged array of intervals, &#39;a&#39; is the start time of an interval and &#39;b&#39; is the end time of the same interval.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 1000\n0 &lt;= start, finish &lt;= 10^9\n\nWhere &#39;T&#39; denotes the number of test cases, &#39;N&#39; denotes the number of intervals respectively, &#39;start&#39; and &#39;finish&#39; are the starting and finishing times for intervals.   \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n2\n1 3\n3 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 5  \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1</h5>\n\n<pre><code>Since these two intervals overlap at point 3 so we merge them and the new interval becomes (1,5).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n5\n1 3 6 8 10\n4 5 8 9 12\n10\n1 2 3 1 9 5 11 7 12 14\n3 7 5 8 10 11 12 10 12 17\n7\n1 4 2 5 6 2 8\n2 6 7 6 9 11 12\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 5\n6 9\n10 12\n1 12\n14 17\n1 12\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 31,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of intervals represented by their start and end points, merge all overlapping intervals into a set of non-overlapping intervals. Return the merged intervals, sorted in ascending order based on their start times.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 1000 (Number of intervals)",
                    "0 <= start, finish <= 10^9 (Interval boundaries)"
                ],
                "testcases": [
                    {
                        "input": "intervals = [[1, 3], [3, 5]]",
                        "output": "[[1, 5]]",
                        "explanation": "The intervals [1,3] and [3,5] overlap, so they are merged into [1,5]."
                    },
                    {
                        "input": "intervals = [[1, 4], [3, 5], [6, 8], [10, 12], [8, 9]]",
                        "output": "[[1, 5], [6, 9], [10, 12]]",
                        "explanation": "The intervals [1,4] and [3,5] overlap to form [1,5]. The intervals [6,8] and [8,9] overlap to form [6,9]. [10,12] remains as is."
                    },
                    {
                        "input": "intervals = [[1, 2], [3, 7], [8, 10], [15, 18]]",
                        "output": "[[1, 2], [3, 7], [8, 10], [15, 18]]",
                        "explanation": "No intervals overlap, so the result is the same as the input."
                    },
                    {
                        "input": "intervals = [[1, 4], [0, 4]]",
                        "output": "[[0, 4]]",
                        "explanation": "[1,4] and [0,4] overlap, so they are merged into [0,4]."
                    },
                    {
                        "input": "intervals = [[1, 4], [0, 2], [3, 5]]",
                        "output": "[[0, 5]]",
                        "explanation": "The intervals [1,4], [0,2] and [3,5] overlap. First [0,2] and [1,4] merge to form [0,4].  Then [0,4] and [3,5] merge to form [0,5]."
                    },
                    {
                        "input": "intervals = [[1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [6, 6]]",
                        "output": "[[1, 10]]",
                        "explanation": "All intervals overlap, so they are merged into [1, 10]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>What are the conditions when an interval needs to be merged?</p>",
            "<p>Can we try sorting the intervals?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}