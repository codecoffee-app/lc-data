{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8884,
            "title": "Merge Sort Linked List",
            "titleSlug": "merge-sort-linked-list_920473",
            "content": "<h4 id=\"you-are-given-a-singly-linked-list-of-integers-sort-the-linked-list-using-merge-sort\">You are given a Singly Linked List of integers. Sort the Linked List using merge sort.</h4>\n\n<h4 id=\"merge-sort-is-a-divide-and-conquer-algorithm-it-divides-the-input-into-two-halves-calls-itself-for-the-two-halves-and-then-merges-the-two-sorted-halves-the-merge-function-is-used-for-merging-two-halves-the-merge-arr-l-m-r-is-a-key-process-that-assumes-that-arr-l-m-and-arr-m-1-r-are-sorted-and-merges-the-two-sorted-subarrays-into-one\">Merge Sort is a Divide and Conquer algorithm. It divides the input into two halves, calls itself for the two halves, and then merges the two sorted halves. The merge() function is used for merging two halves. The merge(arr, L, M, R) is a key process that assumes that arr[L..M] and arr[M + 1...R] are sorted and merges the two sorted subarrays into one.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \nThen the T test cases follow.\n\nThe first line of each test case contains the elements of the singly linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the sorted linked list. The elements of the sorted list should be single-space separated, terminated by -1.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^4\n-10^9 &lt;= data &lt;= 10^9 and data != -1\n\nWhere data is the value associated with the node.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n1 -2 3 -1\n9 9 -1\n4 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>-2 1 3 -1\n9 9 -1\n4 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For every test case, the sorted list is printed, terminated by -1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 1 1 -1\n3 -3 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 1 1 -1\n-3 3 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 32,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list of integers, sort the list using the merge sort algorithm. Merge sort is a divide-and-conquer algorithm that recursively divides the list into halves until each sublist contains only one element. Then, it merges the sublists in a sorted manner until the entire list is sorted. Implement a function that takes the head of the linked list as input and returns the head of the sorted linked list.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^4",
                    "-10^9 <= data <= 10^9 and data != -1, where data is the value associated with the node.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 -2 3 -1",
                        "output": "-2 1 3 -1",
                        "explanation": "The input list 1 -> -2 -> 3 is sorted using merge sort resulting in -2 -> 1 -> 3."
                    },
                    {
                        "input": "9 9 -1",
                        "output": "9 9 -1",
                        "explanation": "The input list 9 -> 9 is already sorted and remains 9 -> 9."
                    },
                    {
                        "input": "4 -1",
                        "output": "4 -1",
                        "explanation": "The input list 4 contains only one element and is therefore already sorted."
                    },
                    {
                        "input": "1 1 1 -1",
                        "output": "1 1 1 -1",
                        "explanation": "The input list 1 -> 1 -> 1 is already sorted."
                    },
                    {
                        "input": "3 -3 -1",
                        "output": "-3 3 -1",
                        "explanation": "The input list 3 -> -3 is sorted to -3 -> 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of the same way, you would sort an array using MergeSort, but for the linked list, we will change pointers rather than swapping data.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}