{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22217,
            "title": "Merge Strings",
            "titleSlug": "merge-strings_5591746",
            "content": "<h4 id=\"you-are-given-two-strings-a-and-b-of-length-n-and-m-respectively-you-need-to-construct-a-new-string-c-by-merging-both-strings-in-such-a-way-that-the-relative-order-of-characters-in-a-and-b-is-the-same-in-string-c\">You are given two strings \u2018A\u2019 and \u2018B\u2019 of length \u2018N\u2019 and \u2018M\u2019 respectively. You need to construct a new string \u2018C\u2019 by merging both strings in such a way that the relative order of characters in \u2018A\u2019 and \u2018B\u2019 is the same in string \u2018C\u2019.</h4>\n\n<h4 id=\"for-example-if-the-string-a-is-of-length-3-then-the-first-character-of-string-a-should-be-placed-before-the-second-and-third-characters-of-string-a-in-string-c-similarly-the-second-character-of-string-a-should-be-placed-after-the-first-character-and-before-the-third-character-of-string-a-in-string-c\">For example, if the string \u2018A\u2019 is of length 3 then the first character of string \u2018A\u2019 should be placed before the second and third characters of string \u2018A\u2019 in string \u2018C\u2019. Similarly, the second character of string \u2018A\u2019 should be placed after the first character and before the third character of string \u2018A\u2019  in string \u2018C\u2019.</h4>\n\n<h4 id=\"the-cost-of-merging-the-strings-is-given-by-the-number-of-consecutive-characters-in-string-c-that-are-not-equal-1-i-e-c-i-c-i-1\">The cost of merging the strings is given by the number of consecutive characters in string \u2018C\u2019 that are not equal + 1, i.e.  \u2018C[ i ] != \u2018C[ i + 1]\u2019.</h4>\n\n<h4 id=\"find-the-minimum-cost-of-merging-both-strings\">Find the minimum cost of merging both strings.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018N\u2019 = 3, \u2018M\u2019 = 3, \u2018A\u2019 = aba, \u2018B\u2019 = aab \n\nOutput: 3\n\nOne of the valid strings with minimum cost after merging \u2018A\u2019 and \u2018B\u2019 is \u2018aaabba\u2019. The order of characters of string \u2018A\u2019 as well as \u2018B\u2019 is maintained in the string \u2018aaabba\u2019 and the cost of this string is (1 + 2) = 3.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain the integer &#39;T&#39;, denoting the number of test cases.\n\nThe first line of each test case contains two integers \u2018N\u2019 and \u2018M\u2019 denoting the length of strings \u2018A\u2019 and \u2018B\u2019 respectively\u2019.\n\nThe second line of each test case contains the string \u2018A\u2019.\n\nThe third line of each test case contains the string \u2018B\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, you don\u2019t need to print anything just return the minimum cost of merging strings \u2018A\u2019 and \u2018B\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 5000\n1 &lt;= M &lt;= 5000\n\nSum of N Over all the Test cases &lt;= 5000\nSum of M Over all the Test cases &lt;= 5000\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 4\naaaa\nbbbb\n3 3\nabc\ndef\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n6\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first case:\nOne of the valid strings with minimum cost is \u201caaaabbbb\u201d. The cost of this string is ( 1 + 1 ) = 2.\n\nFor the second case:\nOne of the valid strings with minimum cost is \u201cabcdef\u201d. The cost of this string is ( 1 + 5 ) = 6\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 4\nahu\nhuaa\n4 3\nabaa\naab\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4 \n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings 'A' and 'B' of lengths 'N' and 'M' respectively, construct a new string 'C' by merging 'A' and 'B'. The relative order of characters within 'A' and 'B' must be preserved in 'C'. The cost of merging is defined as the number of consecutive characters in 'C' that are different, plus 1 (i.e., the number of times 'C[i]' != 'C[i+1]'). Find the minimum possible cost of merging 'A' and 'B'.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 5000",
                    "1 <= M <= 5000",
                    "Sum of N Over all the Test cases <= 5000",
                    "Sum of M Over all the Test cases <= 5000",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 4\naaaa\nbbbb",
                        "output": "2",
                        "explanation": "One optimal merged string is 'aaaabbbb'. The cost is calculated as follows: 'aaaa' has no changes (cost 1). Transitioning to 'bbbb' has one change (cost 1). Total cost = 1 + 1 = 2."
                    },
                    {
                        "input": "3 3\nabc\ndef",
                        "output": "6",
                        "explanation": "One optimal merged string is 'abcdef'.  Every character is distinct, so each transition adds to the cost. Total cost = 6."
                    },
                    {
                        "input": "3 4\nahu\nhuaa",
                        "output": "4",
                        "explanation": null
                    },
                    {
                        "input": "4 3\nabaa\naab",
                        "output": "3",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a way to generate all possible strings recursively and then choose the one with minimum cost?</p>",
            "<p>Can you think of a way to optimize the brute force approach using memoization?</p>",
            "<p>Can you think of a way to optimize the brute force approach using tabulation?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}