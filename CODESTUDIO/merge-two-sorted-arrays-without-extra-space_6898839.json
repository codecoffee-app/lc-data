{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 23605,
            "title": "Merge Two Sorted Arrays Without Extra Space",
            "titleSlug": "merge-two-sorted-arrays-without-extra-space_6898839",
            "content": "<h4 id=\"given-two-non-decreasing-sorted-arrays-a-and-b-having-n-and-m-elements-respectively\">Given two non-decreasing sorted arrays, <em><strong>\u2018A\u2019</strong></em> and <em><strong>\u2018B\u2019</strong></em>, having <em><strong>\u2018N\u2019</strong></em> and <em><strong>\u2018M\u2019</strong></em> elements, respectively.</h4>\n\n<p><br></p>\n\n<h4 id=\"you-must-merge-these-arrays-a-and-b-into-a-sorted-array-without-using-extra-space-of-all-the-n-m-sorted-elements-array-a-should-contain-the-first-n-elements-and-array-b-should-have-the-last-m-elements\">You must merge these arrays, \u2018A\u2019 and \u2018B\u2019, into a sorted array without using extra space. Of all the &#39;N + M&#39; sorted elements, array &#39;A&#39; should contain the first &#39;N&#39; elements, and array &#39;B&#39; should have the last &#39;M&#39; elements.</h4>\n\n<p><br></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You must perform the merge operation in place and must not allocate any extra space to merge the two arrays.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>When \u2018N\u2019 = 4, \u2018A\u2019 = {1, 4, 5, 7} and \u2018M\u2019 = 3, \u2018B\u2019 = {2, 3, 6}. \nWe can merge these two arrays into {1, 2, 3, 4, 5, 6, 7} (The elements of \u2018A\u2019 are {1, 2, 3, 4} ).\nHence, the answer is {1, 2, 3, 4, 5, 6, 7}.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains two integers, \u2018N\u2019 and \u2018M\u2019, denoting the sizes of \u2018A\u2019 and \u2018B\u2019, respectively.\nThe second line contains \u2018N\u2019 integers denoting the elements of \u2018A\u2019.\nThe third line contains \u2018M\u2019 integers denoting the elements of \u2018B\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>You must merge the two sorted arrays in place. The smallest \u2018N\u2019 elements should be in \u2018A\u2019, and the greatest \u2018M\u2019 elements should be in \u2018B\u2019. You don\u2019t have to return anything. The system will print \u2018A\u2019 + \u2018B\u2019, where \u2018+\u2019 denotes concatenation. \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3 4\n1 8 8\n2 3 4 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 3 4 5 8 8\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>We have \u2018A\u2019 = {1, 8, 8} and \u2018B\u2019 = {2, 3, 4, 5}. \nMerging the two arrays results in {1, 2, 3, 4, 5, 8, 8}.\nHence the answer is {1, 2, 3, 4, 5, 8, 8}, where \u2018A\u2019 contains {1, 2, 3} and \u2018B\u2019 contains {4, 5, 8, 8}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4 5\n1 1 1 1 \n2 2 3 3 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 1 1 1 2 2 3 3 5\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^5\n1 &lt;= M &lt;= 10^5\n0 &lt;= A[i] &lt;= 10^9\n0 &lt;= B[i] &lt;= 10^9\n\nThe sum of \u2018N + M\u2019 over all test cases does not exceed 2 * 10^5.\nTime Limit: 1-sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 181,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two non-decreasing sorted arrays 'A' of size 'N' and 'B' of size 'M', merge them into a single sorted array in-place. The first 'N' elements of the merged array should be stored in 'A', and the last 'M' elements should be stored in 'B'. You cannot use any extra space.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= M <= 10^5",
                    "0 <= A[i] <= 10^9",
                    "0 <= B[i] <= 10^9",
                    "The sum of \u2018N + M\u2019 over all test cases does not exceed 2 * 10^5.",
                    "Time Limit: 1-sec"
                ],
                "testcases": [
                    {
                        "input": "3 4\n1 8 8\n2 3 4 5",
                        "output": "1 2 3 4 5 8 8",
                        "explanation": "Array A = {1, 8, 8} and array B = {2, 3, 4, 5}. After merging and sorting, A becomes {1, 2, 3} and B becomes {4, 5, 8, 8}."
                    },
                    {
                        "input": "4 5\n1 1 1 1\n2 2 3 3 5",
                        "output": "1 1 1 1 2 2 3 3 5",
                        "explanation": "Array A = {1, 1, 1, 1} and array B = {2, 2, 3, 3, 5}. After merging and sorting, A becomes {1, 1, 1, 1} and B becomes {2, 2, 3, 3, 5}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a solution to pick the smallest \u2018N\u2019 numbers in \u2018A\u2019 and the remaining in \u2018B\u2019.</p>",
            "<p>Do you really need to search the entire \u2018B\u2019 and \u2018A\u2019&nbsp; for the minimum every time?</p>",
            "<p>Think of a way of updating \u2018A\u2019 that doesn\u2019t need us to sort \u2018A\u2019 and \u2018B\u2019 at the end.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\nTime Complexity: O(M + N), where 'N' is the size of 'A' and 'M' is the size of 'B'.\nSpace Complexity: O(1)\n*/\n\n#include<vector>\n\nvoid mergeTwoSortedArraysWithoutExtraSpace(vector<long long> &a, vector<long long> &b){\n\tint n = a.size(), m = b.size();\n\t\n\t// Maximum element we will use for Euclid's Lemma.\n\tconst long long MX = 1e9 + 7;\n\tint i = 0, j = 0, k = 0;\n\t\n\t// Iterating over 'A' and 'B'.\n\twhile(i < n && j < m && k < n + m){\n\t\t\n\t\t// Extracting the original numbers.\n\t\tlong long originalNumberA = a[i] % MX;\n\t\tlong long originalNumberB = b[j] % MX;\n\t\t\n\t\t// Comparing the original numbers.\n\t\tif(originalNumberA <= originalNumberB){\n\t\t\tif(k < n)\n\t\t\t\ta[k] += originalNumberA * MX;\n\t\t\telse\n\t\t\t\tb[k - n] += originalNumberA * MX;\n\t\t\t++i;\n\t\t\t++k;\n\t\t}\n\t\telse{\n\t\t\tif(k < n)\n\t\t\t\ta[k] += originalNumberB * MX;\n\t\t\telse\n\t\t\t\tb[k - n] += originalNumberB * MX;\n\t\t\t++j;\n\t\t\t++k;\n\t\t}\n\t}\n\t\n\t// Iterating over the remaining elements of 'B' (if any).\n\twhile(j < m){\n\t\tlong long originalNumberB = b[j] % MX;\n\t\tif(k < n)\n\t\t\ta[k] += originalNumberB * MX;\n\t\telse\n\t\t\tb[k - n] += originalNumberB * MX;\n\t\t++j;\n\t\t++k;\n\t}\n\t\n\t// Iterating over the remaining elements of 'A' (if any).\n\twhile(i < n){\n\t\tlong long originalNumberA = a[i] % MX;\n\t\tif(k < n)\n\t\t\ta[k] += originalNumberA * MX;\n\t\telse\n\t\t\tb[k - n] += originalNumberA * MX;\n\t\t++i;\n\t\t++k;\n\t}\n\t\n\t// Changing the elements of 'A' to the new numbers.\n\tfor(int i = 0; i < n; ++i)\n\t\ta[i] /= MX;\n\t\n\t// Changing the elements of 'B' to the new numbers.\n\tfor(int i = 0; i < m; ++i)\n\t\tb[i] /= MX;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\nTime Complexity: O(M + N), where 'N' is the size of 'A' and 'M' is the size of 'B'.\r\nSpace Complexity: O(1)\r\n*/\r\nimport java.util.*;\r\npublic class Solution {\r\n    public static void mergeTwoSortedArraysWithoutExtraSpace(long []a, long []b){\r\n        int n = a.length, m = b.length;\r\n        // Maximum element we will use for Euclid's Lemma.\r\n        long MX = 1000000007;\r\n        int i = 0, j = 0, k = 0;\r\n\r\n        // Iterating over 'A' and 'B'.\r\n        while(i < n && j < m && k < n + m){\r\n\r\n            // Extracting the original numbers.\r\n            long originalNumberA = a[i] % MX;\r\n            long originalNumberB = b[j] % MX;\r\n\r\n            // Comparing the original numbers.\r\n            if(originalNumberA <= originalNumberB){\r\n                if(k < n)\r\n                    a[k] += originalNumberA * MX;\r\n                else\r\n                    b[k - n] += originalNumberA * MX;\r\n                ++i;\r\n                ++k;\r\n            }\r\n            else{\r\n                if(k < n)\r\n                    a[k] += originalNumberB * MX;\r\n                else\r\n                    b[k - n] += originalNumberB * MX;\r\n                ++j;\r\n                ++k;\r\n            }\r\n        }\r\n\r\n        // Iterating over the remaining elements of 'B' (if any).\r\n        while(j < m){\r\n            long originalNumberB = b[j] % MX;\r\n            if(k < n)\r\n                a[k] += originalNumberB * MX;\r\n            else\r\n                b[k - n] += originalNumberB * MX;\r\n            ++j;\r\n            ++k;\r\n        }\r\n\r\n        // Iterating over the remaining elements of 'A' (if any).\r\n        while(i < n){\r\n            long originalNumberA = a[i] % MX;\r\n            if(k < n)\r\n                a[k] += originalNumberA * MX;\r\n            else\r\n                b[k - n] += originalNumberA * MX;\r\n            ++i;\r\n            ++k;\r\n        }\r\n\r\n        // Changing the elements of 'A' to the new numbers.\r\n        for(int l = 0; l < n; ++l)\r\n            a[l] /= MX;\r\n\r\n        // Changing the elements of 'B' to the new numbers.\r\n        for(int l = 0; l < m; ++l)\r\n            b[l] /= MX;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\n    Time Complexity: O(M + N), where 'N' is the size of 'A' and 'M' is the size of 'B'.\n    Space Complexity: O(1)\n\"\"\"\nfrom typing import *\n\ndef mergeTwoSortedArraysWithoutExtraSpace(a : List[int], b : List[int]) -> int:\n\n    n, m = len(a), len(b)\n\n    # Maximum element we will use for Euclid's Lemma.\n    MX = 10 ** 9 + 7\n    i, j, k = 0, 0, 0\n\n    # Iterating over 'A' and 'B'.\n    while i < n and j < m and k < n + m:\n\n        # Extracting the original numbers.\n        originalNumberA = a[i] % MX\n        originalNumberB = b[j] % MX\n\n        # Comparing the original numbers.\n        if originalNumberA <= originalNumberB:\n            if k < n:\n                a[k] += originalNumberA * MX\n            else:\n                b[k - n] += originalNumberA * MX\n            i += 1\n            k += 1\n        else:\n            if k < n:\n                a[k] += originalNumberB * MX\n            else:\n                b[k - n] += originalNumberB * MX\n            j += 1\n            k += 1\n\n    # Iterating over the remaining elements of 'B' (if any).\n    while j < m:\n        originalNumberB = b[j] % MX\n\n        if k < n:\n            a[k] += originalNumberB * MX\n        else:\n            b[k - n] += originalNumberB * MX\n        j += 1\n        k += 1\n\n    # Iterating over the remaining elements of 'A' (if any).\n    while i < n:\n        originalNumberA = a[i] % MX\n\n        if k < n:\n            a[k] += originalNumberA * MX\n        else:\n            b[k - n] += originalNumberA * MX\n\n        i += 1\n        k += 1\n\n    # Changing the elements of 'A' to the new numbers.\n    for i in range(n):\n        a[i] = a[i] // MX\n\n    # Changing the elements of 'B' to the new numbers.\n    for i in range(m):\n        b[i] = b[i] // MX",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}