{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8079,
            "title": "Merge Two Sorted Linked Lists",
            "titleSlug": "merge-two-sorted-linked-lists_800332",
            "content": "<h4 id=\"you-are-given-two-sorted-linked-lists-you-have-to-merge-them-to-produce-a-combined-sorted-linked-list-you-need-to-return-the-head-of-the-final-linked-list\">You are given two sorted linked lists. You have to merge them to produce a combined sorted linked list. You need to return the head of the final linked list.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The given linked lists may or may not be null.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>If the first list is: 1 -&gt; 4 -&gt; 5 -&gt; NULL and the second list is: 2 -&gt; 3 -&gt; 5 -&gt; NULL\n\nThe final list would be: 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 5 -&gt; NULL\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains the elements of the first linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n\nThe second line of input contains the elements of the second linked list separated by a single space and terminated by -1.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print the final linked list. The elements of the linked list must be separated by a single space and terminated by -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= L &lt;= 10^5\n1 \u2264 data \u2264 10^6 and data != -1\n\nWhere L is the number of nodes in either of the two Linked List.\n\nTime Limit: 1 sec \n</code></pre>\n\n<h4 id=\"follow-up\">Follow-up:</h4>\n\n<pre><code>Try to solve this problem in linear time complexity and constant space complexity.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>7 8 -1\n1 3 4 6 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 3 4 6 7 8 -1\n</code></pre>\n\n<h5 id=\"explanation-of-input-1\">Explanation of Input 1:</h5>\n\n<pre><code>In this testcase, the first list is: 7 -&gt; 8 -&gt; NULL\nThe second list is: 1 -&gt; 3 -&gt; 4 -&gt; 6 -&gt; NULL\nThe final list would be: 1 -&gt; 3 -&gt; 4 -&gt; 6 -&gt; 7 -&gt; 8 -&gt; NULL\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5 -1\n1 3 6 10 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>1 3 5 6 10 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 304,
            "dislikes": "NA",
            "rephrased": {
                "body": "Merge two sorted linked lists into a single sorted linked list. Return the head of the merged list.\n\nNote: The given linked lists may or may not be null.",
                "constraints": [
                    "1 <= L <= 10^5",
                    "1 <= data <= 10^6 and data != -1",
                    "Where L is the number of nodes in either of the two Linked List.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "7 8 -1\n1 3 4 6 -1",
                        "output": "1 3 4 6 7 8 -1",
                        "explanation": "The first list is: 7 -> 8 -> NULL. The second list is: 1 -> 3 -> 4 -> 6 -> NULL. The merged list is: 1 -> 3 -> 4 -> 6 -> 7 -> 8 -> NULL."
                    },
                    {
                        "input": "5 -1\n1 3 6 10 -1",
                        "output": "1 3 5 6 10 -1",
                        "explanation": "The first list is: 5 -> NULL. The second list is: 1 -> 3 -> 6 -> 10 -> NULL. The merged list is: 1 -> 3 -> 5 -> 6 -> 10 -> NULL."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Take the smaller head of the two linked lists.</p>",
            "<p>Can you do the task without using any extra space? Try to use one of the given linked lists to store the answer.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n        Time Complexity - O(N + M)\n        Space Complexity - O(1)\n\n        Where N and M are the number of nodes in both lists respectively.\n*/\n\nNode<int>* sort(Node<int>* first, Node<int>* second)\n{\n    // When only one node is in first list, point its head to the second list.\n    if(first -> next == NULL)\n    {\n        first->next = second;\n        return first;\n    }\n\n    Node<int>* cur1 = first, *next1 = first -> next;\n    Node<int>* cur2 = second, *next2 = second -> next;\n\n    while(next1 && cur2)\n    {\n        if ((cur2->data) >= (cur1->data) && (cur2->data) <= (next1->data)) { \n            next2 = cur2->next; \n            cur1->next = cur2; \n            cur2->next = next1; \n  \n            // Let cur1 and cur2 to point to their immediate next pointers.\n            cur1 = cur2; \n            cur2 = next2; \n        } \n        else { \n            // if there are more nodes in first list.\n            if (next1->next) { \n                next1 = next1->next; \n                cur1 = cur1->next; \n            } \n  \n            // else point the last node of first list to the remaining nodes of second list.\n            else { \n                next1->next = cur2; \n                return first; \n            } \n        } \n    }\n\n    return first;\n}\n\nNode<int>* sortTwoLists(Node<int>* first, Node<int>* second) {\n    if(!first)\n    {\n        return second;\n    }\n    if(!second)\n    {\n        return first;\n    }\n\n    if((first -> data) < (second ->data))\n    {\n        return sort(first, second);\n    }\n    else\n    {\n        return sort(second, first);\n    }\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "def sort(first, second):\r\n\r\n    \r\n    #When only one node is in first list, point its head to the second list\r\n    if first.next == None:\r\n        \r\n        first.next = second\r\n        return first\r\n    \r\n    \r\n    cur1 = first\r\n    next1 = first.next\r\n    \r\n    cur2 = second\r\n    next2 = second.next\r\n    \r\n    \r\n    while (next1 != None and cur2 != None):\r\n        \r\n        if ((cur2.data) >= (cur1.data) and (cur2.data) <= (next1.data)):\r\n            \r\n            next2 = cur2.next\r\n            cur1.next = cur2\r\n            cur2.next = next1\r\n            \r\n            \r\n            #Let cur1 and cur2 to point to their immediate next pointers\r\n            cur1 = cur2\r\n            cur2 = next2\r\n            \r\n        else:\r\n            \r\n            #If there are more nodes in first list\r\n            if (next1.next != None): \r\n                next1 = next1.next\r\n                cur1 = cur1.next\r\n              \r\n            #Else point the last node of first list to the remaining nodes of second list\r\n            else:\r\n                \r\n                next1.next = cur2\r\n                return first\r\n            \r\n            \r\n    return first\r\n\r\n\r\ndef sortTwoLists(first, second):\r\n    \r\n    if first == None:\r\n        return second\r\n    \r\n    if second == None:\r\n        return first\r\n    \r\n    if(first.data < second.data):\r\n        return sort(first, second)\r\n    \r\n    else:\r\n        return sort(second, first)\r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n        Time Complexity - O(N + M)\r\n        Space Complexity - O(1)\r\n\r\n        Where N and M are the number of nodes in both lists respectively.\r\n*/\r\n\r\npublic class Solution {\r\n\r\n\tpublic static LinkedListNode<Integer> sort(LinkedListNode<Integer> first, LinkedListNode<Integer> second) {\r\n\t\t\r\n\t\t// When only one node is in first list, point its head to the second list.\r\n\t\tif (first.next == null) {\r\n\t\t\tfirst.next = second;\r\n\t\t\treturn first;\r\n\t\t}\r\n\r\n\t\tLinkedListNode<Integer> cur1 = first, next1 = first.next;\r\n\t\tLinkedListNode<Integer> cur2 = second, next2 = second.next;\r\n\r\n\t\twhile (next1 != null && cur2 != null) {\r\n\t\t\tif ((cur2.data) >= (cur1.data) && (cur2.data) <= (next1.data)) {\r\n\t\t\t\tnext2 = cur2.next;\r\n\t\t\t\tcur1.next = cur2;\r\n\t\t\t\tcur2.next = next1;\r\n\r\n\t\t\t\t// Let cur1 and cur2 to point to their immediate next pointers.\r\n\t\t\t\tcur1 = cur2;\r\n\t\t\t\tcur2 = next2;\r\n\t\t\t} \r\n\t\t\t\r\n\t\t\telse {\r\n\t\t\t\t\r\n\t\t\t\t// If there are more nodes in first list.\r\n\t\t\t\tif (next1.next != null) {\r\n\t\t\t\t\tnext1 = next1.next;\r\n\t\t\t\t\tcur1 = cur1.next;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Else point the last node of first list to the remaining nodes of second list.\r\n\t\t\t\telse {\r\n\t\t\t\t\tnext1.next = cur2;\r\n\t\t\t\t\treturn first;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn first;\r\n\t}\r\n\r\n\tpublic static LinkedListNode<Integer> sortTwoLists(LinkedListNode<Integer> first, LinkedListNode<Integer> second) {\r\n\t\t\r\n\t\tif (first == null) {\r\n\t\t\treturn second;\r\n\t\t}\r\n\t\t\r\n\t\tif (second == null) {\r\n\t\t\treturn first;\r\n\t\t}\r\n\r\n\t\tif ((first.data) < (second.data)) {\r\n\t\t\treturn sort(first, second);\r\n\t\t} \r\n\t\telse {\r\n\t\t\treturn sort(second, first);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}