{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7282,
            "title": "MergeSort  Linked List",
            "titleSlug": "mergesort-linked-list_630514",
            "content": "<h4 id=\"for-a-given-singly-linked-list-of-integers-sort-the-list-using-the-merge-sort-algorithm\">For a given Singly Linked List of integers, sort the list using the &#39;Merge Sort&#39; algorithm.</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first and the only line of input contains the elements of the linked list separated by a single space. \n</code></pre>\n\n<h5 id=\"remember-consider\">Remember/Consider :</h5>\n\n<pre><code>While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>The only line of output contains the sorted elements of the Singly Linked List in a row, separated by a single space.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the elements, just sort the elements and return the head to the updated Singly Linked List.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^5\n1 &lt;= DATA &lt;= 10^9\n\nWhere &#39;DATA&#39; denotes the value of node of Linked List.\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1 4 5 2 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 2 4 5\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>10 9 8 7 6 5 4 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4 5 6 7 8 9 10\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 87,
            "dislikes": "NA",
            "rephrased": {
                "body": "Sort a given singly linked list of integers using the Merge Sort algorithm. The input linked list will be provided as a space-separated sequence of integers, with -1 indicating the end of the list.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= DATA <= 10^9  (where DATA is the value of a node in the linked list)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "1 4 5 2 -1",
                        "output": "1 2 4 5",
                        "explanation": null
                    },
                    {
                        "input": "10 9 8 7 6 5 4 -1",
                        "output": "4 5 6 7 8 9 10",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>If you know the merge sort algorithm for an array, can you extend the same idea to a LinkedList? Think of the changes when you have a LinkedList in place of an array. For example, we cannot get the middle element of the LinkedList directly.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N*LogN)\r\n    Space Complexity :  O(LogN)\r\n    \r\n    Where N is the size of LinkedList.\r\n*/\r\n\r\nnode* findMid(node *head) {\r\n\tif(head == NULL) {\r\n\t\treturn head;\r\n\t}\r\n\tnode *slow = head, *fast = head;\r\n\twhile(fast -> next != NULL && fast -> next -> next != NULL) {\r\n\t\tslow = slow -> next;\r\n\t\tfast = fast -> next -> next;\r\n\t}\r\n\treturn slow;\r\n}\r\n\r\nnode* merge(node *head1, node *head2) {\r\n\tif(head1 == NULL) {\r\n\t\treturn head2;\r\n\t}\r\n\tif(head2 == NULL) {\r\n\t\treturn head1;\r\n\t}\r\n\tnode *head = NULL, *tail = NULL;\r\n\tif(head1 -> data < head2 -> data) {\r\n\t\thead = head1;\r\n\t\ttail = head1;\r\n\t\thead1 = head1 -> next;\r\n\t}\r\n\telse {\r\n\t\thead = head2;\r\n\t\ttail = head2;\r\n\t\thead2 = head2 -> next;\r\n\t}\r\n\r\n\twhile(head1 != NULL && head2 != NULL) {\r\n\t\tif(head1 -> data < head2 -> data) {\r\n\t\t\ttail -> next = head1;\r\n\t\t\ttail = head1;\r\n\t\t\thead1 = head1 -> next;\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttail -> next = head2;\r\n\t\t\ttail = head2;\r\n\t\t\thead2 = head2 -> next;\r\n\t\t}\r\n\t}\r\n\tif(head1 != NULL) {\r\n\t\ttail -> next = head1;\r\n\t}\r\n\tif(head2 != NULL) {\r\n\t\ttail -> next = head2;\r\n\t}\r\n\treturn head;\r\n}\r\n\r\nnode* mergeSort(node *head) {\r\n\tif(head == NULL || head -> next == NULL) {\r\n\t\treturn head;\r\n\t}\r\n\tnode *mid = findMid(head);\r\n\tnode *half1 = head;\r\n\tnode *half2 = mid -> next;\r\n\tmid -> next = NULL;\r\n\thalf1 = mergeSort(half1);\r\n\thalf2 = mergeSort(half2);\r\n\r\n\tnode *finalHead = merge(half1, half2);\r\n\treturn finalHead;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity : O(N*LogN)\n    Space Complexity :  O(LogN)\n    \n    Where N is the size of the Singly Linked List.\n*/\n\npublic class Solution {\n\n\tprivate static Node<Integer> findMid(Node<Integer> head) {\n\t\tif(head == null) {\n\t\t\treturn head;\n\t\t}\n\n\t\tNode<Integer> slow = head, fast = head;\n\n\t\twhile(fast.next != null && fast.next.next != null) {\n\t\t\tslow = slow.next;\n\t\t\tfast = fast.next.next;\n\t\t}\n\n\t\treturn slow;\n\t}\n\n\tprivate static Node<Integer> merge(Node<Integer> head1, Node<Integer> head2) {\n\n\t\tif(head1 == null) {\n\t\t\treturn head2;\n\t\t}\n\n\t\tif(head2 == null) {\n\t\t\treturn head1;\n\t\t}\n\n\t\tNode<Integer> head = null, tail = null;\n\n\t\tif(head1.data < head2.data) {\n\t\t\thead = head1;\n\t\t\ttail = head1;\n\t\t\thead1 = head1.next;\n\t\t} else {\n\t\t\thead = head2;\n\t\t\ttail = head2;\n\t\t\thead2 = head2.next;\n\t\t}\n\n\t\twhile(head1 != null && head2 != null) {\n\t\t\t\n\t\t\tif(head1.data < head2.data) {\n\t\t\t\ttail.next = head1;\n\t\t\t\ttail = head1;\n\t\t\t\thead1 = head1.next;\n\t\t\t} else {\n\t\t\t\ttail.next = head2;\n\t\t\t\ttail = head2;\n\t\t\t\thead2 = head2.next;\n\t\t\t}\n\n\t\t}\n\n\t\tif(head1 != null) {\n\t\t\ttail.next = head1;\n\t\t}\n\n\t\tif(head2 != null) {\n\t\t\ttail.next = head2;\n\t\t}\n\n\t\treturn head;\n\t}\n\n\tpublic static Node<Integer> mergeSort(Node<Integer> head) {\n\t\t\n\t\tif(head == null || head.next == null) {\n\t\t\treturn head;\n\t\t}\n\n\t\tNode<Integer> mid = findMid(head);\n\t\t\n\t\tNode<Integer> firstHalf = head;\n\t\tNode<Integer> secondHalf = mid.next;\n\n\t\tmid.next = null;\n\n\t\tfirstHalf = mergeSort(firstHalf);\n\t\tsecondHalf = mergeSort(secondHalf);\n\n\t\tNode<Integer> finalHead = merge(firstHalf, secondHalf);\n\n\t\treturn finalHead;\n\t}\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity : O(N*LogN)\n    Space Complexity :  O(LogN)\n    \n    Where N is the size of LinkedList.\n'''\n\n# List Node class.\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\ndef ll(arr):\n\n    if len(arr)==0:\n        return None\n\n    head = Node(arr[0])\n    last = head\n\n    for data in arr[1:]:\n        last.next = Node(data)\n        last = last.next\n        \n    return head\n\ndef printll(head):\n    while head:\n        print(head.data, end=' ')\n        head = head.next\n    print()\n\ndef merge(head1,head2):\n    '''\n        Two linked lists sorted in increasing order. Merge them in such\n        a way that the result list is also sorted (in increasing order). Try\n        solving with O(1) auxiliary space (in-place). You just need to return the\n        head of new linked list, don't print the elements.\n    '''\n    \n    if(head1==None):\n        return head2\n\n    if(head2==None):\n        return head1\n\n    if(head1.data<=head2.data):\n        head=head1\n        head1=head1.next\n\n    else:\n        head=head2\n        head2=head2.next\n\n    curr=head\n\n    while(head1 and head2):\n\n        if(head1.data<=head2.data):\n            curr.next=head1\n            head1=head1.next\n\n        else:\n            curr.next=head2\n            head2=head2.next\n\n        curr=curr.next\n\n    if(head1==None):\n        curr.next=head2\n\n    else:\n        curr.next=head1\n\n    return head\n\ndef midpoint_linkedlist(head):\n\n    # Given a linked list, find and return the midpoint.\n    curr=head\n    result=0\n\n    while curr:\n        result += 1\n        curr = curr.next\n\n    curr=head\n    for i in range(1, (result+1)//2):\n        curr = curr.next\n\n    return curr\n\ndef mergeSort(head):\n\n    #  Sort a given linked list using Merge Sort.\n    if(head==None):\n        return None\n\n    if(head.next==None):\n        return head\n\n    # We have atleast 2 s. Split the list into two parts equally.\n\n    mid = midpoint_linkedlist(head)\n    head2 = mid.next\n    mid.next = None\n\n    # MegreSort the two lists.\n    head = mergeSort(head)\n    head2 = mergeSort(head2)\n    head = merge(head, head2)\n    return head\n\n# Main.\n# Read the link list elements including -1.\narr=list(int(i) for i in input().strip().split(' '))\n\n# Create a Linked list after removing -1 from list.\nl = ll(arr[:-1])\nl = mergeSort(l)\nprintll(l)\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}