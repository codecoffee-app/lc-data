{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9067,
            "title": "Middle of Linked List",
            "titleSlug": "middle-of-linked-list_973250",
            "content": "<h4 id=\"given-a-singly-linked-list-of-n-nodes-the-objective-is-to-determine-the-middle-node-of-a-singly-linked-list-however-if-the-list-has-an-even-number-of-nodes-we-return-the-second-middle-node\">Given a singly linked list of <em><strong>&#39;N&#39;</strong></em> nodes. The objective is to determine the middle node of a singly linked list. However, if the list has an even number of nodes, we return the second middle node.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. If the list is empty, the function immediately returns None because there is no middle node to find.\n2. If the list has only one node, then the only node in the list is trivially the middle node, and the function returns that node.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;N&#39;, the size of the linked list.\nThe second line contains &#39;N&#39; space-separated integers.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The output contains all the integers from the middle node.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<p><br></p>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>5\n1 2 3 4 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3 4 5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/untitled-2-27536.jpg\" alt=\"add-image\"></p>\n\n<pre><code>We can clearly see that there are 5 elements in the linked list therefore the middle node is the node with value &#39;3&#39;.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>6\n1 2 3 4 5 6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4 5 6\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/untitled-3-27538.jpg\" alt=\"add-image\"></p>\n\n<pre><code>We can clearly see that there are 6 elements in the linked list and the middle nodes are  nodes with values 3 and 4 hence we return a second middle node having value &#39;4&#39;.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;N&#39; &lt;= 10^4\n0 &lt;= &#39;data&#39; &lt;= 10^3 \n\nWhere &#39;N&#39; is the length of the linked list.\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 304,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list of N nodes, find the middle node. If the list has an even number of nodes, return the second middle node.\n\nNote:\n\n1.  If the list is empty, return null.\n2.  If the list has only one node, return that node.",
                "constraints": [
                    "1 <= N <= 10^4, where N is the length of the linked list.",
                    "0 <= data <= 10^3, where data is the value of a node in the linked list.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n1 2 3 4 5",
                        "output": "3 4 5",
                        "explanation": "The linked list has 5 nodes. The middle node is 3. The output consists of the middle node and all subsequent nodes."
                    },
                    {
                        "input": "6\n1 2 3 4 5 6",
                        "output": "4 5 6",
                        "explanation": "The linked list has 6 nodes, which is an even number. The middle nodes are 3 and 4. According to the problem statement, the second middle node (4) and all subsequent nodes should be returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find the number of elements in the given Linked List.</p>",
            "<p>Can we do it in a single pass? i.e without finding the number of elements?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity: O(N)\r\n    Space complexity: O(1)\r\n\r\n    Where 'N' is the number of elements in the linked list\r\n*/\r\n\r\nNode *findMiddle(Node *head) \r\n{\r\n    // If head is null just return null\r\n    if (head == NULL) \r\n    {\r\n        return head;\r\n    }\r\n    \r\n    // If the Linked List has just 1 element that element is the middle\r\n    if (head->next == NULL) \r\n    {\r\n        return head;\r\n    }\r\n    \r\n    Node *fast = head;\r\n    Node *slow = head;\r\n    while (fast != NULL && fast->next != NULL) \r\n    {\r\n        fast = fast->next->next;\r\n        slow = slow->next;\r\n    }\r\n    return slow;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time complexity: O(N)\r\n    Space complexity: O(1)\r\n\r\n    Where 'N' is the number of elements in the linked list\r\n\r\n'''\r\n\r\ndef findMiddle(head):\r\n    \r\n    # If head is null just return null\r\n    if (head is None):\r\n        return head\r\n\r\n    # If the Linked List has just 1 element that element is the middle\r\n    if (head.next is None):\r\n        return head\r\n\r\n    fast = head\r\n    slow = head\r\n    while (fast is not None and fast.next is not None):\r\n        fast = fast.next.next\r\n        slow = slow.next\r\n\r\n    return slow\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity: O(N)\r\n    Space complexity: O(1)\r\n\r\n    Where 'N' is the number of elements in the linked list\r\n*/\r\n\r\npublic class Solution\r\n{\r\n    public static Node findMiddle(Node head)\r\n    {\r\n        // If head is null just return null\r\n        if (head == null)\r\n        {\r\n            return head;\r\n        }\r\n\r\n        // If the Linked List has just 1 element that element is the middle\r\n        if (head.next == null)\r\n        {\r\n            return head;\r\n        }\r\n\r\n        Node fast = head;\r\n        Node slow = head;\r\n        while (fast != null && fast.next != null)\r\n        {\r\n            fast = fast.next.next;\r\n            slow = slow.next;\r\n        }\r\n\r\n        return slow;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}