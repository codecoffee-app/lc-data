{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8287,
            "title": "Min Cost Path",
            "titleSlug": "min-cost-path_842565",
            "content": "<h4 id=\"you-have-been-given-a-matrix-of-n-rows-and-m-columns-filled-up-with-integers-find-the-minimum-sum-that-can-be-obtained-from-a-path-which-starts-from-the-top-left-corner-and-ends-with-the-bottom-right-corner\">You have been given a matrix of \u2018N\u2019 rows and \u2018M\u2019 columns filled up with integers. Find the minimum sum that can be obtained from a path which starts from the top left corner and ends with the bottom right corner.</h4>\n\n<h4 id=\"from-any-cell-in-a-row-we-can-move-to-the-right-down-or-the-down-right-diagonal-cell-so-from-a-particular-cell-row-col-we-can-move-to-the-following-three-cells\">From any cell in a row, we can move to the right, down or the down-right diagonal cell. So from a particular cell (row, col), we can move to the following three cells:</h4>\n\n<pre><code>Down: (row+1,col)\nRight: (row, col+1)\nDown right diagonal: (row+1, col+1)\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain two integers \u2018N\u2019 and \u2018M\u2019 denoting the number of rows and columns, respectively.\n\nNext \u2018N\u2019 lines contain \u2018M\u2019 space-separated integers each denoting the elements in the matrix.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an integer which represents the minimum sum that can be obtained by travelling a path as described above.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N, M &lt;= 100\n-10000 &lt;= cost[i][j] &lt;= 10000\n\nWhere \u2018T\u2019 is the number of test cases.\nWhere &#39;N&#39; is the number of rows in the given matrix, and &#39;M&#39; is the number of columns in the given matrix.\nAnd, cost[i][j] denotes the value at (i,j) cell in the matrix.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 3\n2 3 1\n1 2 1\n2 2 3\n2 3\n2 3 3\n5 2 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>7\n5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/min-cost-path-matrix-5646.png\" alt=\"Example\"></p>\n\n<pre><code>In the first test case, the minimum cost path will be (0, 0) -&gt; (1, 1) -&gt; (2, 2), So the path sum will be (2 + 2 + 3) = 7, which is the minimum of all possible paths.\n\nIn the second test case, the minimum cost path will be (0, 0) -&gt; (1, 1) -&gt; (1, 2), So the path sum will be (2 + 2 + 1) = 5, which is the minimum of any possible path.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 3\n2 1 3\n2 2\n1 2\n-5 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>6\n-1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>In the first test case, there is only one possible path which is (0, 0) -&gt; (0, 1) -&gt; (0, 1). The path sum is (2 + 1 + 3) = 6\n\nIn the second test case, the minimum cost path will be (0, 0) -&gt; (1, 0) -&gt; (1, 1), So the path sum will be (1 - 5 + 3) = -1, which is the minimum of any possible path.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix of N rows and M columns, where each cell contains an integer, find the minimum sum achievable by traversing a path from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1).  From any cell (row, col), you can move to one of the following cells:\n\n*   Down: (row+1, col)\n*   Right: (row, col+1)\n*   Down-Right Diagonal: (row+1, col+1)",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N, M <= 100",
                    "-10000 <= cost[i][j] <= 10000"
                ],
                "testcases": [
                    {
                        "input": "3 3\n2 3 1\n1 2 1\n2 2 3",
                        "output": "7",
                        "explanation": "The minimum cost path is (0, 0) -> (1, 1) -> (2, 2), with a sum of 2 + 2 + 3 = 7."
                    },
                    {
                        "input": "2 3\n2 3 3\n5 2 1",
                        "output": "5",
                        "explanation": "The minimum cost path is (0, 0) -> (1, 1) -> (1, 2), with a sum of 2 + 2 + 1 = 5."
                    },
                    {
                        "input": "1 3\n2 1 3",
                        "output": "6",
                        "explanation": "The only path is (0, 0) -> (0, 1) -> (0, 2), with a sum of 2 + 1 + 3 = 6."
                    },
                    {
                        "input": "2 2\n1 2\n-5 3",
                        "output": "-1",
                        "explanation": "The minimum cost path is (0, 0) -> (1, 0) -> (1, 1), with a sum of 1 + (-5) + 3 = -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about exploring all possible paths?</p>",
            "<p>Can you optimise your recursive solution using some extra space?</p>",
            "<p>Can you think of optimisation of space?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}