{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13698,
            "title": "Min Efforts Required",
            "titleSlug": "min-efforts-required_1788454",
            "content": "<h4 id=\"the-ultimate-ninja-ankush-after-training-hard-goes-for-a-good-meal-at-the-ninja-cafe-for-that-he-follows-the-path-given-on-the-map-which-may-or-may-not-lead-him-to-the-ninja-cafe-the-map-is-a-directed-graph-since-he-is-also-very-lazy-he-wants-to-minimize-the-effort-to-travel-the-effort-is-defined-as-the-product-of-all-the-distance-it-takes-to-reach-from-the-dojo-source-to-the-ninja-cafe-destination-can-you-help-him-find-the-path-with-the-minimum-effort-it-would-take-the-ultimate-ninja-ankush-to-reach-the-destination\">The Ultimate Ninja Ankush, after training hard, goes for a good meal at the ninja cafe, for that he follows the path given on the map, which may or may not lead him to the ninja cafe. The map is a directed graph. Since he is also very lazy, he wants to minimize the effort to travel. The effort is defined as the product of all the distance it takes to reach from the dojo (source) to the ninja cafe (destination). Can you help him find the path with the minimum effort it would take The Ultimate Ninja Ankush to reach the destination?</h4>\n\n<h4 id=\"more-formally-you-are-given-a-directed-graph-with-n-nodes-and-m-edges-where-the-distance-of-each-edge-is-greater-than-0-also-given-a-source-src-and-a-destination-dest-the-task-is-to-find-the-minimum-product-of-edges-from-src-to-dest-if-there-is-no-path-from-src-to-dest-then-return-1\">More Formally, you are given a directed graph with \u2018N\u2019 nodes and \u2018M\u2019 edges where the distance of each edge is greater than 0, also given a source \u2018src\u2019 and a destination \u2018dest\u2019. The task is to find the minimum product of edges from src\u2019 to \u2018dest\u2019. If there is no path from \u2018src\u2019 to \u2018dest\u2019, then return -1.</h4>\n\n<h4 id=\"for-example\">For example</h4>\n\n<pre><code>Given:\n\u2018N\u2019 = 3, \u2018M\u2019 = 3. \n\u2018edges\u2019 = \n    [[0 1 1],\n     [1 2 1],\n     [0 2 3]]\n\u2018src\u2019 = 0, \u2018dest\u2019 = 2.\n\nThere are two possible paths, that is to go from node-0 to node-2 directly, which will take 2 units of effort, or go from node-0 to node-1 and then node-1 to node-2, which will take 1 unit of effort.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018N,\u2019 where \u2018N\u2019 is the number of nodes in the graph, and \u2018M\u2019 where \u2018M\u2019 is the number of edges.\n\nThe next \u2018M\u2019 line contains 3 space-separated integers \u2018U\u2019, &#39;V\u2019, and \u2018WT\u2019, \u2018U\u2019 is the parent node, \u2018V\u2019 is the child node and \u2018WT\u2019 is the weight of that edge.\n\nThe last line contains 2 space-separated integers, \u2018src\u2019 and \u2018dest\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, You are supposed to return an integer that denotes the minimum effort required.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= \u2018N\u2019 &lt;= 100\n1 &lt;= \u2018M\u2019 &lt;= (N*(N + 1))/2\n0 &lt;= \u2018src\u2019,\u2019dest\u2019 &lt;= N \n\nTime Limit: 1sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n3 3\n0 1 1\n1 2 1\n0 2 3\n0 2\n4 2\n0 1 4\n0 2 2\n0 3\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>1\n-1  \n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>In the first test case, There are two possible paths, that is to go from node \u20190\u2019 to node-2\u2019 directly, which will take 2 units of effort, or go from node \u20180\u2019 to node \u20181\u2019 and then node \u20181\u2019 to node \u20182\u2019, which will take 1 unit of effort. Therefore the final answer is 1.\n\nIn the second test case, The answer is -1 since there is no path from the source node[0] to the target node[3]. \n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n4 5\n0 1 1\n1 2 2\n2 3 2\n0 3 3\n0 2 2\n0 3\n3 3\n0 1 4\n1 2 5\n0 2 15\n0 2\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>3\n15\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph with 'N' nodes and 'M' edges, where each edge has a positive weight, find the minimum product of edge weights along any path from a given source node 'src' to a destination node 'dest'. If no path exists from 'src' to 'dest', return -1.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 10",
                    "1 <= \u2018N\u2019 <= 100",
                    "1 <= \u2018M\u2019 <= (N*(N + 1))/2"
                ],
                "testcases": [
                    {
                        "input": "edges = [[[0, 1], 1], [[1, 2], 1], [[0, 2], 3]], n = 3, src = 0, dest = 2",
                        "output": "1",
                        "explanation": "Path 1: 0 -> 2, Effort = 3. Path 2: 0 -> 1 -> 2, Effort = 1 * 1 = 1. Minimum Effort = 1."
                    },
                    {
                        "input": "edges = [[[0, 1], 4], [[0, 2], 2]], n = 4, src = 0, dest = 3",
                        "output": "-1",
                        "explanation": "There is no path from node 0 to node 3."
                    },
                    {
                        "input": "edges = [[[0, 1], 1], [[1, 2], 2], [[2, 3], 2], [[0, 3], 3], [[0, 2], 2]], n = 4, src = 0, dest = 3",
                        "output": "3",
                        "explanation": "Path 1: 0 -> 3, Effort = 3. Path 2: 0 -> 1 -> 2 -> 3, Effort = 1 * 2 * 2 = 4. Path 3: 0 -> 2 -> 3, Effort = 2 * 2 = 4. Minimum Effort = 3."
                    },
                    {
                        "input": "edges = [[[0, 1], 4], [[1, 2], 5], [[0, 2], 15]], n = 3, src = 0, dest = 2",
                        "output": "15",
                        "explanation": "Path 1: 0 -> 2, Effort = 15. Path 2: 0 -> 1 -> 2, Effort = 4 * 5 = 20. Minimum Effort = 15."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we use any single-source shortest path algorithm?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}