{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 21780,
            "title": "Min Heap Implementation",
            "titleSlug": "min-heap-implementation_5480527",
            "content": "<h4 id=\"implement-the-min-heap-data-structure\">Implement the Min Heap data structure.</h4>\n\n<pre><code>Min heap is a tree data structure where the root element is the smallest of all the elements in the heap. Also, the children of every node are smaller than or equal to the root node. \n\nThe insertion and removal of elements from the heap take log(&#39;N&#39;), where &#39;N&#39; is the number of nodes in the tree. \n</code></pre>\n\n<h4 id=\"implement-the-minheap-class-you-will-be-given-the-following-types-of-queries\">Implement the \u201cminHeap\u201d class. You will be given the following types of queries:-</h4>\n\n<pre><code>0 extractMinElement(): Remove the minimum element present in the heap, and return it.\n\n1 deleteElement( i ): Delete the element present at the &#39;i&#39; th index.\n\n2 insert( key ): Insert the value &#39;key&#39; in the heap.\n\nFor queries of types 0 and 1, at least one element should be in the heap.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain a single integer &#39;N&#39;, the number of queries.\n\nThen each of the following \u2018N\u2019 lines contains queries of the following type:-\n0 \n1 X\n2 X\n\nWhere &#39;X&#39; is some value and 0, 1, and 2 are the respective values as shown in the queries above.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Print the output of each query if there is some output.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The input will contain at least one operation of type 1.\n\nYou don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3\n2 2\n2 1\n0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>Insert 2 in the heap, and currently, 2 is the smallest element in the heap.\n\nInsert 1 in the heap and now the smallest element is 1.\n\nReturn the smallest element, which is 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>5\n2 5\n2 43\n2 15\n1 2\n0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>15\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2 :</h5>\n\n<pre><code>Insert 5 in the heap.\nInsert 43 in the heap.\nInsert 15 in the heap.\n\nRemove element at index 2 i.e. X from the heap.\n\nReturn the smallest element, which is 15.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^5\n1 &lt;= X &lt;= 50\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 13,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a Min Heap data structure. A Min Heap is a tree-based data structure where the value of each node is less than or equal to the value of its children. The root node contains the smallest element in the heap. Implement the `minHeap` class to handle the following queries:\n\n*   `extractMinElement()`: Removes and returns the minimum element from the heap.\n*   `deleteElement(i)`: Deletes the element at the given index `i` from the heap.\n*   `insert(key)`: Inserts the given value `key` into the heap.\n\nFor `extractMinElement()` and `deleteElement(i)`, ensure the heap is not empty before performing the operation.",
                "constraints": [
                    "1 <= N <= 10^5 (where N is the number of queries)",
                    "1 <= X <= 50 (where X is a value to insert or the index to delete)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\n2 2\n2 1\n0",
                        "output": "1",
                        "explanation": "Initially, insert 2 into the heap.  Then, insert 1. The heap now contains [1, 2]. extractMinElement() removes and returns the smallest element, which is 1."
                    },
                    {
                        "input": "5\n2 5\n2 43\n2 15\n1 2\n0",
                        "output": "15",
                        "explanation": "Insert 5, 43, and 15 into the heap. The heap would be [5, 43, 15]. Delete the element at index 2 (which is 15). After deletion the heap is [5,43]. extractMinElement() removes and returns the smallest element, which is 5 (after delete the 15 is remove so smallest element will be 5)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Complete Binary Tree with the top element as the smallest element.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}