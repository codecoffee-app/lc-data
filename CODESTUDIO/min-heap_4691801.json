{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 20655,
            "title": "Min Heap",
            "titleSlug": "min-heap_4691801",
            "content": "<h4 id=\"implement-the-min-heap-data-structure\">Implement the Min Heap data structure.</h4>\n\n<h4 id=\"you-will-be-given-2-types-of-queries\">You will be given 2 types of queries:-</h4>\n\n<pre><code>0 X\nInsert X in the heap.\n\n1\nPrint the minimum element from the heap and remove it.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain the integer &#39;T&#39;, denoting the number of test cases.\n\nFor each test case, the first line will contain a single integer &#39;N&#39;, the number of queries.\n\nThen, each of the next \u2018N\u2019 lines contains two types of query either 0 \u2018X\u2019 or 1.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, output the answer for query of type 1.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10^5\n1 &lt;= X &lt;= 50\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3\n0 2\n0 1\n1\n2\n0 1\n1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first test case:-\nInsert 2 in the heap and currently, 2 is the smallest element in the heap.\nInsert 1 in the heap and now the smallest element is 1.\nReturn and remove the smallest element which is 1.\n\nFor the second test case:-\nInsert 1 in the heap and currently, 1 is the smallest element in the heap.\nReturn the smallest element from the heap which is 1 and remove it.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5\n0 5\n1\n0 43\n0 15\n0 5\n2\n0 4\n1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 95,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a Min Heap data structure to handle insertion and extraction of minimum elements. You will receive a series of queries, each of which is one of two types:\n\n*   **0 X**: Insert the integer `X` into the Min Heap.\n*   **1**: Print and remove the minimum element from the Min Heap. If the heap is empty when this query is issued, handle the case appropriately (e.g., by returning a specific value like -1 or null, depending on the implementation context).\n",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= N <= 10^5 (Number of queries per test case)",
                    "1 <= X <= 50 (Value to be inserted)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "3\n0 2\n0 1\n1",
                        "output": "1",
                        "explanation": "Initially, the heap is empty. The first query inserts 2. The second query inserts 1. The third query asks for the minimum element, which is 1. After printing 1, it is removed from the heap."
                    },
                    {
                        "input": "2\n0 1\n1",
                        "output": "1",
                        "explanation": "The first query inserts 1. The second query asks for the minimum element, which is 1. After printing 1, it is removed from the heap."
                    },
                    {
                        "input": "5\n0 5\n1\n0 43\n0 15\n0 5",
                        "output": "5",
                        "explanation": "The first query inserts 5. The second query asks for the minimum element, which is 5. After printing 5, it is removed from the heap. The third query inserts 43. The fourth query inserts 15. The fifth query inserts 5."
                    },
                    {
                        "input": "2\n0 4\n1",
                        "output": "4",
                        "explanation": "The first query inserts 4. The second query asks for the minimum element, which is 4. After printing 4, it is removed from the heap."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Complete Binary Tree with the top element as the smallest element.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity: O( N * log( N ) )\r\n    Space complexity: O( N )\r\n\r\n    Where N is the size of heap array.\r\n*/\r\n\r\n// Left child of the node.\r\nint left(int k) {\r\n    return 2 * k + 1;\r\n}\r\n\r\n// Right child of the node.\r\nint right(int k) {\r\n    return 2 * k + 2;\r\n}\r\n\r\n// Returns the parent node.\r\nint parent(int k) {\r\n    return (k - 1) / 2;\r\n}\r\n\r\n// Heapify the heap\r\nint heapify(vector < int > & heap, int k, int & size) {\r\n\r\n    // Find the left child of the node.\r\n    int l = left(k);\r\n\r\n    // Find the right child of the node.\r\n    int r = right(k);\r\n\r\n    // Find the smallest element between the current node and its children.\r\n    // Check if the left child is smallest.\r\n    int smallest = k;\r\n\r\n    if (l < size && heap[l] < heap[k]) {\r\n        smallest = l;\r\n    }\r\n\r\n    // Check if the right node is smallest then the previous smallest.\r\n    if (r < size && heap[r] < heap[smallest]) {\r\n        smallest = r;\r\n    }\r\n\r\n    // If the smallest element is not in the current node.\r\n    // We have to heapify the Heap to take that element to the top.\r\n    if (smallest != k) {\r\n\r\n        // Swap the values of current node and the smallest node value.\r\n        int tempp = heap[k];\r\n        heap[k] = heap[smallest];\r\n        heap[smallest] = tempp;\r\n\r\n        // Call the heapify function on smallest value node which now contains the value of parent node.\r\n        heapify(heap, smallest, size);\r\n    }\r\n}\r\n\r\n// Insert a val in the heap.\r\n// Function contains heap array, val to inserted and the current size of the heap.\r\nvoid insert(vector < int > & heap, int val, int & size) {\r\n\r\n    // Insert the val at the end of the heap.\r\n    heap[size] = val;\r\n\r\n    // If There is nore than 1 node in the Heap.\r\n    // MinHeapify the heap by checking the val at its parent node.\r\n    // Also do it until the heap property is not satisfied.\r\n    int i = size;\r\n\r\n    size += 1;\r\n\r\n    while (i != 0 && heap[parent(i)] > heap[i]) {\r\n\r\n        // Swap the value of current node with its parent.\r\n        swap(heap[i], heap[parent(i)]);\r\n\r\n        // Check that if the parent element of current element is satisfying the heap property.\r\n        i = parent(i);\r\n    }\r\n}\r\n\r\nint extractMin(vector < int > & heap, int & size) {\r\n\r\n    // Check if the current node is the only node in the heap.\r\n    if (size == 1) {\r\n        size -= 1;\r\n        return heap[0];\r\n    }\r\n\r\n    // Takeout the min value and remove it from the heap.\r\n    int val = heap[0];\r\n\r\n    // Put last node on the top of heap.\r\n    heap[0] = heap[size - 1];\r\n\r\n    // Decrease the size of heap as the minimum element is removed.\r\n    size -= 1;\r\n\r\n    // Heapify the heap to satisfy the heap property.\r\n    heapify(heap, 0, size);\r\n\r\n    return val;\r\n}\r\n\r\n// minHeap function which take size of Queries and Queries as Input.\r\n// Returns an array out outputs depending on the query.\r\nvector < int > minHeap(int n, vector < vector < int >> & q) {\r\n\r\n    int size = 0;\r\n\r\n    vector < int > heap(n);\r\n\r\n    // Define an array which stores the min elements.\r\n    vector < int > ans;\r\n\r\n    // For each query in the array Q.\r\n    for (int i = 0; i < n; i++) {\r\n\r\n        // If query is of type 1 then insert the value in the heap.\r\n        // Else take min element from the heap and append it in the ans.\r\n        if (q[i][0] == 0) {\r\n            insert(heap, q[i][1], size);\r\n        } else {\r\n            ans.push_back(extractMin(heap, size));\r\n        }\r\n    }\r\n\r\n    // Return the ans array.\r\n    return ans;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time complexity: O( N * log( N ) )\r\n    Space complexity: O( N )\r\n\r\n    Where N is the size of heap array.\r\n\"\"\"\r\n\r\n\r\n# Left child of the node.\r\ndef left(k):\r\n    return 2 * k + 1\r\n\r\n\r\n# Right child of the node.\r\ndef right(k) -> int:\r\n    return 2 * k + 2\r\n\r\n\r\n# Returns the parent node.\r\ndef parent(k) -> int:\r\n    return (k - 1) // 2\r\n\r\n\r\n# Heapify the heap\r\ndef heapify(heap, k, size):\r\n\r\n    # Find the left child of the node.\r\n    l = left(k)\r\n\r\n    # Find the right child of the node.\r\n    r = right(k)\r\n\r\n    # Find the smallest element between the current node and its children.\r\n    # Check if the left child is smallest.\r\n    smallest = k\r\n    if l < size[0] and heap[l] < heap[k]:\r\n        smallest = l\r\n\r\n    # Check if the right node is smallest then the previous smallest.\r\n    if r < size[0] and heap[r] < heap[smallest]:\r\n        smallest = r\r\n\r\n    # If the smallest element is not in the current node.\r\n    # We have to heapify the Heap to take that element to the top.\r\n    if smallest != k:\r\n\r\n        # Swap the values of current node and the smallest node value.\r\n        heap[k], heap[smallest] = heap[smallest], heap[k]\r\n\r\n        # Call the heapify function on smallest value node which now contains the value of parent node.\r\n        heapify(heap, smallest, size)\r\n\r\n\r\n# Insert a val in the heap.\r\n# Function contains heap array, val to inserted and the current size of the heap.\r\ndef insert(heap: [], val: int, size: []):\r\n\r\n    # Insert the val at the end of the heap.\r\n    heap[size[0]] = val\r\n\r\n    # If There is nore than 1 node in the Heap.\r\n    # MinHeapify the heap by checking the val at its parent node.\r\n    # Also do it until the heap property is not satisfied.\r\n    i = size[0]\r\n    size[0] += 1\r\n    while i != 0 and heap[parent(i)] > heap[i]:\r\n\r\n        # Swap the value of current node with its parent.\r\n        heap[i], heap[parent(i)] = heap[parent(i)], heap[i]\r\n\r\n        # Check that if the parent element of current element is satisfying the heap property.\r\n        i = parent(i)\r\n\r\n\r\ndef extractMin(heap: [], size: []) -> int:\r\n    # Check if the current node is the only node in the heap.\r\n    if size[0] == 1:\r\n        size[0] -= 1\r\n        return heap[0]\r\n\r\n    # Takeout the min value and remove it from the heap.\r\n    val = heap[0]\r\n\r\n    # Put last node on the top of heap.\r\n    heap[0] = heap[size[0] - 1]\r\n\r\n    # Decrease the size of heap as the minimum element is removed.\r\n    size[0] -= 1\r\n\r\n    # Heapify the heap to satisfy the heap property.\r\n    heapify(heap, 0, size)\r\n    return val\r\n\r\n\r\n# Define minHeap function which take size of Queries and Queries as Input.\r\n# Returns an array out outputs depending on the query.\r\ndef minHeap(n: int, q: [[]]) -> []:\r\n\r\n    # Size of the heap.\r\n    size = [0]\r\n    # Define a heap array to store elements.\r\n    heap = [None] * n\r\n\r\n    # Define an array which stores the min elements.\r\n    ans = []\r\n\r\n    # For each query in the array Q.\r\n    for i in range(n):\r\n\r\n        # If query is of type 1 then insert the value in the heap.\r\n        # Else take min element from the heap and append it in the ans.\r\n        if q[i][0] == 0:\r\n            insert(heap, q[i][1], size)\r\n        else:\r\n            ans.append(extractMin(heap, size))\r\n\r\n    # Return the ans array.\r\n    return ans\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity: O( N * log( N ) )\r\n    Space complexity: O( N )\r\n\r\n    Where N is the size of heap array.\r\n*/\r\n\r\npublic class Solution {\r\n\r\n    // Left child of the node.\r\n    static int left(int k) {\r\n        return 2 * k + 1;\r\n    }\r\n\r\n    // Right child of the node.\r\n    static int right(int k) {\r\n        return 2 * k + 2;\r\n    }\r\n\r\n    // Returns the parent node.\r\n    static int parent(int k) {\r\n        return (k - 1) / 2;\r\n    }\r\n\r\n    // Heapify the heap\r\n    static void heapify(int[] heap, int k, int size) {\r\n\r\n        // Find the left child of the node.\r\n        int l = left(k);\r\n\r\n        // Find the right child of the node.\r\n        int r = right(k);\r\n\r\n        // Find the smallest element between the current node and its children.\r\n        // Check if the left child is smallest.\r\n        int smallest = k;\r\n\r\n        if (l < size && heap[l] < heap[k]) {\r\n            smallest = l;\r\n        }\r\n\r\n        // Check if the right node is smallest then the previous smallest.\r\n        if (r < size && heap[r] < heap[smallest]) {\r\n            smallest = r;\r\n        }\r\n\r\n        // If the smallest element is not in the current node.\r\n        // We have to heapify the Heap to take that element to the top.\r\n        if (smallest != k) {\r\n\r\n            // Swap the values of current node and the smallest node value.\r\n            int tempp = heap[k];\r\n            heap[k] = heap[smallest];\r\n            heap[smallest] = tempp;\r\n\r\n            // Call the heapify function on smallest value node which now contains the value of parent node.\r\n            heapify(heap, smallest, size);\r\n        }\r\n    }\r\n\r\n    static int sz;\r\n\r\n    // Insert a val in the heap.\r\n// Function contains heap array, val to inserted and the current size of the heap.\r\n    static void insert(int[] heap, int val) {\r\n\r\n        // Insert the val at the end of the heap.\r\n        heap[sz] = val;\r\n\r\n        // If There is nore than 1 node in the Heap.\r\n        // MinHeapify the heap by checking the val at its parent node.\r\n        // Also do it until the heap property is not satisfied.\r\n        int i = sz;\r\n\r\n        sz += 1;\r\n\r\n        while (i != 0 && heap[parent(i)] > heap[i]) {\r\n\r\n            // Swap the value of current node with its parent.\r\n            int tmp = heap[i];\r\n            heap[i] = heap[parent(i)];\r\n            heap[parent(i)] = tmp;\r\n\r\n            // Check that if the parent element of current element is satisfying the heap property.\r\n            i = parent(i);\r\n        }\r\n    }\r\n\r\n    static int extractMin(int[] heap) {\r\n\r\n        // Check if the current node is the only node in the heap.\r\n        if (sz == 1) {\r\n            sz -= 1;\r\n            return heap[0];\r\n        }\r\n\r\n        // Takeout the min value and remove it from the heap.\r\n        int val = heap[0];\r\n\r\n        // Put last node on the top of heap.\r\n        heap[0] = heap[sz - 1];\r\n\r\n        // Decrease the size of heap as the minimum element is removed.\r\n        sz -= 1;\r\n\r\n        // Heapify the heap to satisfy the heap property.\r\n        heapify(heap, 0, sz);\r\n\r\n        return val;\r\n    }\r\n\r\n    // minHeap function which take size of Queries and Queries as Input.\r\n// Returns an array out outputs depending on the query.\r\n    static int[] minHeap(int n, int[][] q) {\r\n\r\n        int size = 0;\r\n\r\n        int[] heap = new int[n];\r\n\r\n        // Define an array which stores the min elements.\r\n        int tot = 0;\r\n        for(int i=0;i<n;i++){\r\n            if(q[i][0]==1)tot++;\r\n        }\r\n\r\n        int[] ans = new int[tot];\r\n        int id = 0;\r\n\r\n        // For each query in the array Q.\r\n        for (int i = 0; i < n; i++) {\r\n\r\n            // If query is of type 1 then insert the value in the heap.\r\n            // Else take min element from the heap and append it in the ans.\r\n            if (q[i][0] == 0) {\r\n                sz = size;\r\n                insert(heap, q[i][1]);\r\n                size = sz;\r\n            } else {\r\n                sz = size;\r\n                ans[id++] = extractMin(heap);\r\n                size = sz;\r\n            }\r\n        }\r\n\r\n        // Return the ans array.\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}