{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9411,
            "title": "Min jumps",
            "titleSlug": "min-jumps_985273",
            "content": "<h4 id=\"you-live-in-a-ninja-town-which-is-in-the-form-of-a-n-m-grid-in-this-town-people-travel-from-one-place-to-another-by-jumping-over-the-buildings-which-are-present-in-each-cell-of-the-grid-it-is-christmas-eve-and-santa-wants-to-give-gifts-and-chocolates-to-the-kids-who-live-in-the-building-which-is-present-at-the-cell-n-1-m-1-initially-santa-is-present-on-cell-0-0-since-santa-is-in-a-hurry-help-him-find-a-path-from-starting-point-to-the-endpoint-with-the-least-amount-of-time\">You live in a Ninja town which is in the form of a N * M grid. In this town, people travel from one place to another by jumping over the buildings which are present in each cell of the grid. It is Christmas eve, and Santa wants to give gifts and chocolates to the kids who live in the building which is present at the cell (N - 1, M - 1). Initially, Santa is present on cell (0, 0). Since Santa is in a hurry, help him find a path from starting point to the endpoint with the least amount of time.</h4>\n\n<h4 id=\"the-santa-may-go-only-from-one-building-to-any-of-its-adjacent-buildings-which-is-present-either-to-the-right-or-to-the-bottom-or-bottom-right-cell-i-e-if-the-current-position-is-x-y-he-may-go-to-x-1-y-1-or-x-1-y-or-x-y-1-given-that-the-new-coordinates-are-in-the-grid-the-time-taken-to-reach-from-one-building-to-another-is-equal-to-the-absolute-difference-between-the-heights-of-buildings\">The Santa may go only from one building to any of its adjacent buildings which is present either to the right or to the bottom or bottom right cell i.e. if the current position is (x, y), he may go to (x + 1, y + 1) or (x + 1, y) or (x, y + 1) given that the new coordinates are in the grid. The time taken to reach from one building to another is equal to the absolute difference between the heights of buildings.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. The heights of the buildings are positive.\n2. Santa starts from the cell (0, 0) and he has to reach the building (N - 1, M - 1).\n3. Santa cannot leave the grid at any point of time.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer T denoting the number of test cases. Then T lines follow:\n\nThe first line of each test case contains two space-separated integers N and M, where N = number of rows in the given matrix and M = number of columns in the given matrix.    \n\nThen N lines follow for each test case:\nEach line contains M space-separated integers.\n\nFor more clarity please refer to the sample input.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output of each test case consists of an integer X, denoting the minimum time required to reach the last cell.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n1 &lt;= N &lt;= 10^2\n1 &lt;= M &lt;= 10^2\n1 &lt;= Height &lt;= 10^5\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 3\n1 2 3\n4 5 6\n7 8 9\n2 2\n1 2\n3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>8\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For test case 1:\n\nOne of the possible ways is to go from (0, 0) to (1, 1) to (2, 2). \nSo the total cost will be abs(1 - 5) + abs(5 - 9) = 8. \n\nFor test case 2:\n\nOptimal was to go from (0,0) to (1,1) is (0,0) --&gt; (1,1) with the \ncost abs(1-4) = 3. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2 2\n4 5\n3 4\n3 3\n2 3 4\n2 4 5\n2 4 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Santa needs to deliver gifts in a Ninja town represented as an N x M grid. He starts at cell (0, 0) and wants to reach cell (N - 1, M - 1) with the minimum time. He can only move to adjacent cells: right, bottom, or diagonally bottom-right. The time taken to move between cells is the absolute difference in building heights. Find the minimum time required for Santa to reach his destination.",
                "constraints": [
                    "1 <= T <= 10^2",
                    "1 <= N <= 10^2",
                    "1 <= M <= 10^2",
                    "1 <= Height <= 10^5",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "3 3\n1 2 3\n4 5 6\n7 8 9",
                        "output": "8",
                        "explanation": "One optimal path is (0, 0) -> (1, 1) -> (2, 2). The total time is abs(1 - 5) + abs(5 - 9) = 4 + 4 = 8."
                    },
                    {
                        "input": "2 2\n1 2\n3 4",
                        "output": "3",
                        "explanation": "The optimal path is (0, 0) -> (1, 1) with a cost of abs(1 - 4) = 3."
                    },
                    {
                        "input": "2 2\n4 5\n3 4",
                        "output": "0",
                        "explanation": "One optimal path is (0, 0) -> (1, 1) with the cost abs(4-4) = 0."
                    },
                    {
                        "input": "3 3\n2 3 4\n2 4 5\n2 4 4",
                        "output": "2",
                        "explanation": "One of the optimal path is (0,0) -> (1,0) -> (2,0) ->(2,1) -> (2,2) . cost abs(2-2) + abs(2-2) + abs(2-4) + abs(4-4) = 0+0+2+0 = 2"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try all possible combinations.</p>",
            "<p>Try to use previously calculated values.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}