{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 17280,
            "title": "Min Stack",
            "titleSlug": "min-stack_3843991",
            "content": "<h4 id=\"design-a-stack-that-supports-push-pop-top-and-retrieving-the-minimum-element-in-constant-time\">Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</h4>\n\n<pre><code>1. Push(num): Push the given number in the stack.\n2. Pop: Remove and return the top element from the stack if present, else return -1.\n3. Top: return the top element of the stack if present, else return -1.\n4. getMin: Returns minimum element of the stack if present, else return -1.\n</code></pre>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>For the following input: \n1\n5\n1 1\n1 2\n4\n2\n3\n\nFor the first two operations, we will just insert 1 and then 2 into the stack which was empty earlier. So now the stack is =&gt; [2,1]\nIn the third operation, we need to return the minimum element of the stack, i.e., 1. So now the stack is =&gt; [2,1]\nFor the fourth operation, we need to pop the topmost element of the stack, i.e., 2. Now the stack is =&gt; [1]\nIn the fifth operation, we return the top element of the stack, i.e. 1 as it has one element. Now the stack is =&gt; [1]\n\nSo, the final output will be: \n1 2 1\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of the input contains a single integer \u2018T\u2019 representing the no. of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019, denoting the no. of the operations.\n\nThe next \u2018N\u2019 lines of each test case contain either of the operations in the following format: - \nPush -&gt; two space-separated integers, 1 and \u2018X\u2019 like \u201c1 X\u201d. We need to push \u2018X\u2019 on top of the stack.\nPop -&gt; single integer 2. We need to remove the topmost element from the stack.\nTop -&gt; single integer 3. We need to return the topmost element from the stack.\ngetMin -&gt; single integer 4, We need to return the minimum element of the stack if present and 0 otherwise.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, print the results of the operations performed on the stack separated by spaces.\n\nPrint output of each test case in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function and return the answer.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints -</h4>\n\n<pre><code>1 \u2264 T \u2264 1000\n1 \u2264 N \u2264 100000\n\u03a3N \u2264 200000\n1 \u2264 X \u2264 (10^9)\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5\n1 1\n1 2\n4\n2\n3\n4\n1 13\n2\n3\n4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 2 1\n13 -1 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For First Case - Similar to the example explained above. \n\nFor Second Case - \nFor the first operation, we will just insert 13 into the stack which was empty earlier. So now the stack is =&gt; [13]\nIn the second operation, we need to remove the topmost element 13 and return it for printing. Now the stack is =&gt; [] (empty)\nFor the third operation, we need to return the topmost element of the stack. As the stack is empty we will return -1. Now the stack is =&gt; [] (empty)\n In the fourth operation, we return the minimum element of the stack if it is not empty, i.e. -1 as it has no elements. Now the stack is =&gt; [] (empty)\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4 \n4\n2\n1 4\n3\n6\n1 19\n1 45\n3\n4\n2\n3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>-1 -1 4\n45 19 45 19\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 91,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a stack data structure that efficiently supports the following operations in constant time (O(1)): push, pop, top, and getMin (retrieving the minimum element).",
                "constraints": [
                    "1 \u2264 T \u2264 1000 (Number of test cases)",
                    "1 \u2264 N \u2264 100000 (Number of operations per test case)",
                    "\u03a3N \u2264 200000 (Sum of N across all test cases)",
                    "1 \u2264 X \u2264 (10^9) (Value to push onto the stack)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n1 1\n1 2\n4\n2\n3",
                        "output": "1 2 1",
                        "explanation": "Initially, the stack is empty.  '1 1' pushes 1 onto the stack: [1]. '1 2' pushes 2 onto the stack: [2, 1]. '4' requests the minimum element, which is 1. '2' pops the top element (2): [1]. '3' requests the top element, which is 1."
                    },
                    {
                        "input": "4\n1 13\n2\n3\n4",
                        "output": "13 -1 -1",
                        "explanation": "'1 13' pushes 13 onto the stack: [13]. '2' pops the top element (13), resulting in an empty stack: []. '3' requests the top element, but the stack is empty, so -1 is returned. '4' requests the minimum element, but the stack is empty, so -1 is returned."
                    },
                    {
                        "input": "4\n4\n2\n1 4\n3",
                        "output": "-1 -1 4",
                        "explanation": "'4' requests the minimum element, but the stack is empty, so -1 is returned.  '2' attempts to pop the stack, it is empty, so -1 is returned (though no printing happens for a pop, it sets the stage for the next operations).  '1 4' pushes 4 onto the stack: [4]. '3' requests the top element, which is 4."
                    },
                    {
                        "input": "6\n1 19\n1 45\n3\n4\n2\n3",
                        "output": "45 19 45 19",
                        "explanation": "'1 19' pushes 19 onto the stack: [19]. '1 45' pushes 45 onto the stack: [45, 19]. '3' requests the top element, which is 45. '4' requests the minimum element, which is 19. '2' pops the top element (45): [19]. '3' requests the top element, which is 19."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we do some additional bookkeeping that helps us in getting a minimum of the stack?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N) \n    Space Complexity:O(N) \n\n    Where 'N' is the no. of operations performed.\n*/\n\nclass minStack\n{\n\tstack<int> Stack, Min;\n\t\n\tpublic:\n\t\t\n\t\t// Constructor\n\t\tminStack() { }\n\t\t\n\t\t// Function to add another element equal to num at the top of stack.\n\t\tvoid push(int num)\n\t\t{\n\t\t\tStack.push(num);\n\t\t\tif(Min.empty() || Min.top() >= num){\n\t\t\t\tMin.push(num);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Function to remove the top element of the stack.\n\t\tint pop()\n\t\t{\n\t\t\tif(!Min.empty() && Min.top() == Stack.top()) {\n\t\t\t\tMin.pop();\n\t\t\t}\n\n\t\t\tint ret = -1;\n\n\t\t\tif(!Stack.empty()) {\n\t\t\t\tret = Stack.top();\n\t\t\t\tStack.pop();\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\t\t\n\t\t// Function to return the top element of stack if it is present. Otherwise return -1.\n\t\tint top()\n\t\t{\n\t\t\tint ret = -1;\n\t\t\tif(!Stack.empty()){\n\t\t\t\tret = Stack.top();\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t\t\n\t\t// Function to return minimum element of stack if it is present. Otherwise return -1.\n\t\tint getMin()\n\t\t{\n\t\t\tint ret = -1;\n\t\t\tif(!Min.empty()) {\n\t\t\t\tret = Min.top();\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(N) \n    Space Complexity:O(N) \n\n    Where 'N' is the no. of operations performed.\n'''\n\nclass minStack:\n\n    Stack = []\n    Min = []\n            \n    # Constructor\n    def __init__(self):\n        pass\n    \n\n    # Function to add another element equal to num at the top of stack.\n    def push(self, num: int) -> None:\n\n        self.Stack.append(num)\n        if len(self.Min) == 0 or self.Min[-1] >= num:\n            self.Min.append(num)\n        \n\n    # Function to remove the top element of the stack.\n    def pop(self) -> int:\n    \n        if len(self.Min) != 0 and self.Min[-1] == self.Stack[-1]:\n            self.Min.pop()\n\n        ret = -1\n\n        if len(self.Stack) != 0:\n            ret = self.Stack[-1]\n            self.Stack.pop()\n\n        return ret\n    \n\n    # Function to return the top element of stack if it is present. Otherwise return -1.\n    def top(self) -> int:\n    \n        ret = -1\n        if len(self.Stack) != 0:\n            ret = self.Stack[-1]\n        \n        return ret\n    \n    \n    # Function to return minimum element of stack if it is present. Otherwise return -1.\n    def getMin(self) -> int:\n    \n        ret = -1\n        if len(self.Min) != 0:\n            ret = self.Min[-1]\n        \n        return ret\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity:O(N)\r\n\r\n    Where 'N' is the no. of operations performed.\r\n*/\r\n\r\nimport java.util.Stack;\r\n\r\npublic class Solution {\r\n\r\n    static class MinStack {\r\n\r\n        Stack<Integer> stack, Min;\r\n\r\n        // Constructor\r\n        MinStack() {\r\n            stack = new Stack<Integer>();\r\n            Min = new Stack<Integer>();\r\n        }\r\n\r\n        // Function to add another element equal to num at the top of stack.\r\n        void push(int num) {\r\n            stack.push(num);\r\n            if (Min.empty() || Min.peek() >= num) {\r\n                Min.push(num);\r\n            }\r\n        }\r\n\r\n        // Function to remove the top element of the stack.\r\n        int pop() {\r\n            if (!Min.empty() && Min.peek() == stack.peek()) {\r\n                Min.pop();\r\n            }\r\n\r\n            int ret = -1;\r\n\r\n            if (!stack.empty()) {\r\n                ret = stack.peek();\r\n                stack.pop();\r\n            }\r\n\r\n            return ret;\r\n        }\r\n\r\n        // Function to return the top element of stack if it is present. Otherwise\r\n        // return -1.\r\n        int top() {\r\n            int ret = -1;\r\n            if (!stack.empty()) {\r\n                ret = stack.peek();\r\n            }\r\n            return ret;\r\n        }\r\n\r\n        // Function to return minimum element of stack if it is present. Otherwise\r\n        // return -1.\r\n        int getMin() {\r\n            int ret = -1;\r\n            if (!Min.empty()) {\r\n                ret = Min.peek();\r\n            }\r\n            return ret;\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}