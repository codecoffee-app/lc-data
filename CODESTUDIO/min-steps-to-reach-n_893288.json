{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8671,
            "title": "Min steps to reach N",
            "titleSlug": "min-steps-to-reach-n_893288",
            "content": "<h4 id=\"ninja-yuki-is-in-the-mood-of-shopping-ninja-blades-today-and-why-should-he-not-be-its-finally-the-time-for-the-spring-fair-in-his-village-initially-he-has-0-number-of-blades-and-aims-to-buy-n-of-them-from-the-fair-but-the-blade-shopkeeper-being-a-cunning-man-himself-presents-a-weird-way-of-pricing-the-number-of-ninja-blades-yuki-can-buy\">Ninja Yuki is in the mood of shopping ninja blades today, and why should he not be, its finally the time for the Spring Fair in his Village. Initially, he has 0 number of blades and aims to buy \u2018N\u2019 of them from the fair. But the blade shopkeeper being a cunning man himself, presents a weird way of pricing the number of ninja blades Yuki can buy.</h4>\n\n<h4 id=\"suppose-at-any-instance-yuki-has-k-number-of-blades-then\">Suppose at any instance Yuki  has \u2018K\u2019 number of blades, then:</h4>\n\n<pre><code>1) Yuki can buy 1 more blade with cost &#39;A.\u2019 He now has \u2018K+1\u2019 Ninja blades.\n2) Yuki could buy a \u2018K\u2019 number of blades with cost &#39;B.\u2019 He now has \u20182*K\u2019 blades.\nwhere &#39;A&#39; and &#39;B&#39; are predefined and constant.\n</code></pre>\n\n<h4 id=\"yuki-does-not-want-to-get-robbed-in-the-fair-being-his-nerd-friend-can-you-tell-him-the-minimum-price-he-needs-to-pay-to-buy-exactly-n-ninja-blades-considering-he-has-0-blades-initially\">Yuki does not want to get robbed in the fair. Being his nerd friend can you tell him the minimum price he needs to pay to buy exactly \u2018N\u2019 ninja blades, considering he has 0 blades initially?</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>There can be two or more ways with the exact cost. You can consider any one of them, but the overall cost to reach from 0 to &#39;N&#39; must be minimized.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Consider Yuki need to buy 5 blades, the cost of adding 1 blade is 2, and the cost of doubling the blades is 1 then you have to perform the following operations:\n1) Doubling 0 will result in 0 only, so add 1 blade to 0 blades with cost 2. Total cost becomes 2.\n\n2) Next, you can either double 1 to reach 2 or add 1 blade. But since the cost of doubling is less than that of adding, so double 1 with cost 1. Total cost becomes 3.\n\n3) Doubling 2 will result in 4 with a cost of 1. Total becomes 4.\n\n4) Adding 1 in 4 will result in 5 (which is the desired number) with a cost of 2. The total cost to reach 5 becomes 6.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of the test cases. Then the test case follows.\n\nThe first line of each test case contains three space-separated integers, &#39;N&#39;, &#39;A&#39;, and &#39;B&#39;. where &#39;N&#39; is the number of blades Yuki wants to buy, &#39;A&#39; is the price to increase the number of blades by 1 and &#39;B&#39; is the price to double the number of blades he has.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the minimum price needed to buy the \u2018N\u2019 blades following the method described above.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 100\n1 &lt;= &#39;N&#39; &lt;= 10^4\n0 &lt;= &#39;A&#39;,&#39;B&#39; &lt;= 10^3\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n13 5 8\n1 5 8\n2 5 3    \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>36\n5\n8\n</code></pre>\n\n<h5 id=\"explanation-of-input-1\">Explanation of Input 1:</h5>\n\n<pre><code>(i)For the first test case:\n Possible series of operations we need to perform: (+1) -&gt; (+1) -&gt; (+1) -&gt; (*2) -&gt; (*2) -&gt; (+1)\n So minimum cost: 5+5+5+8+8+5 = 36\n\n(ii)For the second test case:\nPossible series of operations we need to perform: (+1)\nSo minimum cost: 5 \n\n(iii)For the second test case:\nPossible series of operations we need to perform: (+1) -&gt; (*2) \nSo minimum cost: 5+3 = 8\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5\n1 2 2\n2 17 2\n3 3 4\n4 2 1\n5 5 8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>2\n19\n9\n4\n23\n</code></pre>\n\n<h5 id=\"explanation-of-input-1\">Explanation of Input 1:</h5>\n\n<pre><code>(i)For the first test case:\n Possible series of operations we need to perform: (+1)\nSo minimum cost: 2\nOperations: (+1) Cost: 2\n\n(ii)For the second test case:\n Possible series of operations we need to perform: (+1) -&gt; (*2) \n So minimum cost: 17 + 2 = 19\n\n(iii)For the third test case:\n Possible series of operations we need to perform: (+1) -&gt; (+1) -&gt; (+1)\n So minimum cost: 3+3+3 = 9\n\n(iv) For the first test case:\n Possible series of operations we need to perform: (+1) -&gt; (*2) -&gt; (*2)\n So minimum cost: 2 + 1 + 1 = 4\n\n(v) For the first test case:\n Possible series of operations we need to perform: (+1) -&gt; (+1) -&gt; (*2) -&gt; (+1)\n So minimum cost: 5+5+8+5 = 23\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 15,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja Yuki wants to buy exactly 'N' ninja blades from a fair. He starts with 0 blades. He can either buy 1 blade for a cost of 'A' or double his current number of blades for a cost of 'B'. Determine the minimum cost Yuki needs to pay to acquire exactly 'N' blades.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 100",
                    "1 <= 'N' <= 10^4",
                    "0 <= 'A','B' <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "n = 13, a = 5, b = 8",
                        "output": "36",
                        "explanation": "Optimal operations: (+1) -> (+1) -> (+1) -> (*2) -> (*2) -> (+1). Cost: 5+5+5+8+8+5 = 36"
                    },
                    {
                        "input": "n = 1, a = 5, b = 8",
                        "output": "5",
                        "explanation": "Optimal operations: (+1). Cost: 5"
                    },
                    {
                        "input": "n = 2, a = 5, b = 3",
                        "output": "8",
                        "explanation": "Optimal operations: (+1) -> (*2). Cost: 5+3 = 8"
                    },
                    {
                        "input": "n = 1, a = 2, b = 2",
                        "output": "2",
                        "explanation": "Optimal operations: (+1). Cost: 2"
                    },
                    {
                        "input": "n = 2, a = 17, b = 2",
                        "output": "19",
                        "explanation": "Optimal operations: (+1) -> (*2). Cost: 17 + 2 = 19"
                    },
                    {
                        "input": "n = 3, a = 3, b = 4",
                        "output": "9",
                        "explanation": "Optimal operations: (+1) -> (+1) -> (+1). Cost: 3+3+3 = 9"
                    },
                    {
                        "input": "n = 4, a = 2, b = 1",
                        "output": "4",
                        "explanation": "Optimal operations: (+1) -> (*2) -> (*2). Cost: 2 + 1 + 1 = 4"
                    },
                    {
                        "input": "n = 5, a = 5, b = 8",
                        "output": "23",
                        "explanation": "Optimal operations: (+1) -> (+1) -> (*2) -> (+1). Cost: 5+5+8+5 = 23"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find a brute force approach.</p>",
            "<p>In the previous approach, we were repetitively solving the same problems. Can you use memoization to avoid this problem?</p>",
            "<p>Can you use Dynamic Programming and avoid recursion?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}