{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10424,
            "title": "Min substring",
            "titleSlug": "min-substring_1215004",
            "content": "<h4 id=\"you-are-given-two-strings-a-and-b-your-task-is-to-return-a-substring-s-of-a-such-that-the-following-conditions-hold-true\">You are given two strings \u2018A\u2019 and \u2018B\u2019. Your task is to return a substring \u2018S\u2019 of \u2018A\u2019 such that the following conditions hold true :</h4>\n\n<p><br></p>\n\n<pre><code>\u2022 You can make \u2018B\u2019 from \u2018S\u2019 by removing some characters and rearranging some characters zero or more times.\n\n\u2022 Length of \u2018S\u2019 must be as minimum as possible.\n</code></pre>\n\n<p><br></p>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>Testcases are generated such that a substring always exists and is unique.\n</code></pre>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>A = ninjas, B = sin\n\nAll possible substrings with which &#39;B&#39; can be created are\n&quot;ninjas&quot;, &quot;injas&quot;.\n\nHence the substring with minimum length is &quot;injas&quot;.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line contains two space-separated strings \u2018A\u2019 and \u2018B\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>Print the substring with minimum length.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>fight it \n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>ight\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h4>\n\n<pre><code>Given A = \u201cfight\u201d and B = \u201cit\u201d \n\nConsider the substring \u201cight\u201d of A. \n\nWe can remove g and h from it to get \u201cit\u201d.\n\nWe can also get &quot;it&quot; from &quot;fight&quot; but it is not the substring with minimum length.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>coding cin\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>codin\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;=  |A| = |B| &lt;= 3000\nBoth A, B contain only lowercase English letters.\n\nWhere |A| and |B| are the length of strings.\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 20,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings A and B, find the shortest substring S of A such that B can be formed by removing zero or more characters from S and rearranging the remaining characters zero or more times. It is guaranteed that a unique solution exists.",
                "constraints": [
                    "1 <= |A| <= 3000",
                    "1 <= |B| <= 3000",
                    "|A| >= |B|",
                    "Both A and B contain only lowercase English letters.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "fight it",
                        "output": "ight",
                        "explanation": "Given A = 'fight' and B = 'it', the substring 'ight' of A allows us to remove 'g' and 'h' to obtain 'it'. While 'fight' also contains the characters to form 'it', 'ight' is the shortest such substring."
                    },
                    {
                        "input": "coding cin",
                        "output": "codin",
                        "explanation": "Given A = 'coding' and B = 'cin', substring 'codin' contains all characaters to form 'cin'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check all possible substrings.</p>",
            "<p>Optimize the previous approach using sliding window technique.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}