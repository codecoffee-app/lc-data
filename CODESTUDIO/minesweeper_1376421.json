{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11010,
            "title": "Minesweeper",
            "titleSlug": "minesweeper_1376421",
            "content": "<h4 id=\"minesweeper-is-a-popular-computer-game-of-the-1980s-similar-to-that-you-are-given-a-2d-char-matrix-representing-the-game-board-as\">Minesweeper is a popular computer game of the 1980s. Similar to that, you are given a 2D char matrix representing the game board as:</h4>\n\n<pre><code>1) \u2018#\u2019 (HASH) represents an unrevealed mine.\n2) \u2018.\u2019 (DOT) represents an unrevealed empty cell.\n3) \u2018_\u2019 (UNDERSCORE) represents a revealed blank cell that has no neighbouring mines.\n4) Digits (\u20181\u2019 to \u20188\u2019) represents the number of neighbouring mines corresponding to the current cell.\n5) \u2018*\u2019 (ASTERISK) represents a revealed mine.\n</code></pre>\n\n<h4 id=\"in-this-game-you-are-given-a-click-position-row-column-indices-among-all-unrevealed-cells-or-your-task-is-to-return-the-game-board-after-revealing-the-click-position-as-per-the-following-rules\">In this game, you are given a click position (row &amp; column indices) among all unrevealed cells (\u2018#\u2019 or \u2018.\u2019). Your task is to return the game board after revealing the click position as per the following rules:</h4>\n\n<pre><code>1) If the revealed cell contains a mine (\u2018#\u2019), then the game is over - change it to \u2018*\u2019.\n2) If the revealed cell is empty (&#39;.&#39;) with no neighbouring mines revealed, then change it to revealed blank (&#39;_&#39;), and all of its neighbouring unrevealed cells should be revealed recursively.\n3) If the revealed cell is empty (&#39;.&#39;) with at least one neighbouring mine revealed, then change it to a digit (&#39;1&#39; to &#39;8&#39;) representing the number of neighbouring mines.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1) Two cells are neighbours if they share a corner or an edge, i.e., cells corresponding above, below, left, right, and all four diagonals.\n2) For simplicity, ignore the rules which are not mentioned in this problem. For example, when the game is over,  you don&#39;t need to reveal all the unrevealed mines.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains two single-spaced integers, \u2018M\u2019 and \u2018N\u2019, representing the number of rows and columns of the matrix, respectively.\n\nThe next \u2018M\u2019 line contains \u2018N\u2019 single-spaced elements.\n\nThe last line of each test case contains two single-spaced integers, \u2018x\u2019 and \u2018y\u2019, representing the row and column indices of the click position, respectively.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, return the updated game board when no more cells can be revealed.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= M, N &lt;= 50\n0 &lt;= x &lt;= M - 1\n0 &lt;= y &lt;= N - 1\ndata \u2208 {\u2018#\u2019, \u2018*\u2019, \u2018.\u2019, \u2018_\u2019, \u20181\u2019, \u20182\u2019, \u20183\u2019, \u20184\u2019, \u20185\u2019, \u20186\u2019, \u20187\u2019, \u20188\u2019}\n\nWhere \u2018data\u2019 is the value of the elements of the matrix, &quot;gameBoard&quot;.\n\nThe click position will correspond to an unrevealed cell (&#39;#&#39; or &#39;.&#39;), which also means the input board contains at least one clickable cell.\nThe input board is not provided at a stage when the game is over (some mines have been revealed).\n\nTime Limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n5 5\n. . 1 _ _\n. . 2 1 _\n. . . 1 _\n1 . . 2 _\n. . # 1 _\n0 1\n4 6\n. . # 1 . .\n2 3 . . . .\n_ 1 . . 4 .\n_ 1 . . . .\n0 2\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>_ _ 1 _ _\n_ _ 2 1 _\n_ _ _ 1 _\n1 1 1 2 _\n. . # 1 _\n. . * 1 . .\n2 3 . . . .\n_ 1 . . 4 .\n_ 1 . . . .\n</code></pre>\n\n<h4 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h4>\n\n<pre><code>Test Case 1 :\nThe configuration of \u2018gameBoard\u2019 is:\n. . * 1 . .\n2 3 . . . .\n_ 1 . . 4 .\n_ 1 . . . .\nAnd, the click position is (0, 1).\nAt (0, 1), we have an unrevealed cell. So, we will count the number of neighbouring mines, which is 0. So, we will replace the \u2018.\u2019 by \u2018_\u2019 and then recur in all eight directions from (0, 1). The possible click positions will then be (0, 0), (0, 2), (1, 0), (1, 1), (1, 2).\nAfter recurring for all click positions, the final configuration of the board will be:\n_ _ 1 _ _\n_ _ 2 1 _\n_ _ _ 1 _\n1 1 1 2 _\n. . # 1 _\nwhich will be printed as output.\n\n\nTest Case 2 : \nThe configuration of \u2018gameBoard\u2019 is:\n. . # 1 . .\n2 3 . . . .\n_ 1 . . 4 .\n_ 1 . . . .\nAnd, click position is (0, 2).\nWe can see that the cell at (0, 2) contains an unrevealed mine (\u2018#\u2019). So, according to the rules, we will replace the unrevealed mine (\u2018#\u2019) by a revealed mine (\u2018*\u2019) and return the board.\nTherefore, the final configuration of the board will be:\n. . * 1 . .\n2 3 . . . .\n_ 1 . . 4 .\n_ 1 . . . .\nwhich will be printed as output.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>1\n4 6\n. . # 1 . .\n2 3 . . . .\n_ 1 . . 4 .\n_ 1 . . . .\n3 2\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>. . # 1 _ _\n2 3 1 1 _ _\n_ 1 _ _ 4 _\n_ 1 _ _ _ _\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -5,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a 2D character matrix representing a Minesweeper game board. The board contains the following characters:\n\n*   '#' (HASH): Represents an unrevealed mine.\n*   '.' (DOT): Represents an unrevealed empty cell.\n*   '_' (UNDERSCORE): Represents a revealed blank cell with no neighboring mines.\n*   Digits ('1' to '8'): Represents the number of neighboring mines.\n*   '*' (ASTERISK): Represents a revealed mine.\n\nGiven a click position (row and column indices) on an unrevealed cell ('#' or '.'), update the game board based on these rules:\n\n1.  If the revealed cell contains a mine ('#'), change it to '*' (game over).\n2.  If the revealed cell is empty ('.') with no neighboring mines, change it to '_' and recursively reveal all neighboring unrevealed cells.\n3.  If the revealed cell is empty ('.') with at least one neighboring mine, change it to a digit ('1' to '8') representing the number of neighboring mines.\n\nNeighbors are defined as cells sharing a corner or an edge (above, below, left, right, and all four diagonals).\n",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= M, N <= 50 (Rows and Columns of the matrix)",
                    "0 <= x <= M - 1 (Click row index)",
                    "0 <= y <= N - 1 (Click column index)",
                    "data \u2208 {\u2018#\u2019, \u2018*\u2019, \u2018.\u2019, \u2018_\u2019, \u20181\u2019, \u20182\u2019, \u20183\u2019, \u20184\u2019, \u20185\u2019, \u20186\u2019, \u20187\u2019, \u20188\u2019} (Valid characters on the board)",
                    "The click position will correspond to an unrevealed cell ('#' or '.').",
                    "The input board is not provided at a stage when the game is over.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 5\n. . 1 _ _\n. . 2 1 _\n. . . 1 _\n1 . . 2 _\n. . # 1 _\n0 1",
                        "output": "_ _ 1 _ _\n_ _ 2 1 _\n_ _ _ 1 _\n1 1 1 2 _\n. . # 1 _",
                        "explanation": "The initial board is given along with a click at (0, 1). The cell at (0, 1) is '.', so we check for neighboring mines. Since there are none, we change it to '_' and recursively reveal neighbors.  This continues until all connected empty cells are revealed and cells adjacent to mines are numbered accordingly."
                    },
                    {
                        "input": "4 6\n. . # 1 . .\n2 3 . . . .\n_ 1 . . 4 .\n_ 1 . . . .\n0 2",
                        "output": ". . * 1 . .\n2 3 . . . .\n_ 1 . . 4 .\n_ 1 . . . .",
                        "explanation": "The initial board is given with a click at (0, 2). The cell at (0, 2) contains a mine ('#'). Therefore, according to the rules, we change it to a revealed mine ('*')."
                    },
                    {
                        "input": "4 6\n. . # 1 . .\n2 3 . . . .\n_ 1 . . 4 .\n_ 1 . . . .\n3 2",
                        "output": ". . # 1 _ _\n2 3 1 1 _ _\n_ 1 _ _ 4 _\n_ 1 _ _ _ _",
                        "explanation": "The initial board is given with a click at (3, 2). The cell at (3, 2) is '.', so we check for neighboring mines. Since there are none, we change it to '_' and recursively reveal neighbors. This continues until all connected empty cells are revealed and cells adjacent to mines are numbered accordingly."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>This is a typical search problem. We can start from the click position and traverse the board as per the mentioned rules.</p>",
            "<p>Can you save the recursive stack space by utilizing some other algorithm for matrix traversal?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}