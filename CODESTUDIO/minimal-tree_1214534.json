{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10304,
            "title": "Minimal Tree",
            "titleSlug": "minimal-tree_1214534",
            "content": "<h4 id=\"you-are-given-an-array-arr-consisting-of-n-distinct-integers-elements-in-array-arr-are-sorted-in-increasing-order-your-task-is-to-convert-it-to-a-height-balanced-binary-search-tree\">You are given an array \u2018Arr\u2019 consisting of \u2018N\u2019 distinct integers. Elements in array \u2018Arr\u2019 are sorted in increasing order. Your task is to convert it to a height-balanced binary search tree.</h4>\n\n<h4 id=\"a-binary-tree-is-height-balanced-when-the-height-of-the-two-subtrees-of-every-node-never-differs-by-more-than-one\">A binary tree is height-balanced when the height of the two subtrees of every node never differs by more than one.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1. There can be more than one way to convert an array to a height-balanced binary tree. You can find any one of them.\n</code></pre>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>Consider an array \u2018Arr\u2019 = [-10, -5, 2, 4, 5],  one way to convert it to a height-balanced binary tree is -:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/mintree-8085.png\" alt=\"alt text\"></p>\n\n<pre><code>Here, You can see that the height of the left and right subtree of the node having the data \u20182\u2019 is  2 and 2 respectively, i.e both are the same,  and the height of the left and the right tree of the node having the data \u2018-10\u2019, is 0, 1 respectively, i.e differ by only 1,  and the height of left and right subtree of the node having the data \u20184\u2019, is also 0 and \u20181\u2019 respectively, i.e differ by only \u20181\u2019. Thus this binary search tree is height-balanced.  Also, note that this is not the only way to convert this array to a height-balanced binary search tree.\n</code></pre>\n<h4 id=\"input-format\">Input format :</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases, then \u2018T\u2019 test cases follow.\n\nThe first line of each test case consists of a single integer \u2018N\u2019, representing the number of elements in array \u2018Arr\u2019.\n\nThe second line of each test case consists of \u2018N\u2019 space-separated integers, representing array \u2018Arr\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>For each test case, in a separate line \u2018Correct\u2019 will be printed if you convert the given array in the height-balanced tree correctly, otherwise \u2018Incorrect\u2019 will be printed.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 50\n1  &lt;= N &lt;= 10^4\n-10^9 &lt;= Arr[i] &lt;= 10^9\n\n\nTime limit: 1 sec\n</code></pre>\n\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n1\n1\n5\n-10 -5 2 4 5\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>Correct\nCorrect\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h4>\n\n<pre><code>Test case 1:\nThere is only one node, so the correct way to convert it to the height-balanced binary search tree is to create a tree having a single node with the data \u20181\u2019\n\nTest case 2:\nSee the problem statement for an explanation.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n5\n1 2 3 4 5\n2\n-10 25\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>Correct\nCorrect\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array 'Arr' of 'N' distinct integers, construct a height-balanced Binary Search Tree (BST) from it.\n\nA height-balanced binary tree is defined as a tree where the height difference between the left and right subtrees of any node never exceeds one.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^4",
                    "-10^9 <= Arr[i] <= 10^9",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n1\n1",
                        "output": "Correct",
                        "explanation": "A single node tree with the value 1 is inherently height-balanced."
                    },
                    {
                        "input": "1\n5\n-10 -5 2 4 5",
                        "output": "Correct",
                        "explanation": "One possible height-balanced BST for the given array is a tree with 2 as the root, -10 and 4 as children, -5 and 5 as the grandchildren."
                    },
                    {
                        "input": "1\n5\n1 2 3 4 5",
                        "output": "Correct",
                        "explanation": "Null"
                    },
                    {
                        "input": "1\n2\n-10 25",
                        "output": "Correct",
                        "explanation": "Null"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The middle element of the array is the root of this binary search tree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}