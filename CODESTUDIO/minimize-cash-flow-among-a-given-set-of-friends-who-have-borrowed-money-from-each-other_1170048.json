{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10128,
            "title": "Minimize Cash Flow among a given set of friends who have borrowed money from each other",
            "titleSlug": "minimize-cash-flow-among-a-given-set-of-friends-who-have-borrowed-money-from-each-other_1170048",
            "content": "<h4 id=\"you-are-given-a-list-of-transactions-between-n-number-of-friends-who-have-to-give-each-other-money-the-list-consists-of-data-of-receiver-sender-and-transaction\">You are given a list of \u2018transactions\u2019 between \u2018n\u2019 number of friends. who have to give each other money. The list consists of data of receiver, sender, and transaction.</h4>\n\n<h4 id=\"your-task-is-to-minimize-the-cash-flow-and-the-total-number-of-transactions-should-also-be-minimum\">Your task is to minimize the cash flow and the total number of transactions should also be minimum.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-199-7957.png\" alt=\"subsequence\"></p>\n\n<pre><code>In figure 1 : friend-1 has to pay 2000$ to friend-2, and 4000$ to friend-3 and friend-2 has to pay 3000$ to friend-3.\n\nIn figure 2 : so we can minimize the flow between friend-1 to friend-2 by direct pay to friend-1 to friend-3\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a number \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers \u2018n\u2019, where \u2018n\u2019 denotes the number of friends.\n\nThe next \u2018n\u2019 line consists of \u2018n\u2019 space-separated number, where \u2018i\u2019, \u2018j\u2019 represents the \u2018i-th\u2019 friend to pay \u2018arr[i][j]\u2019 to \u2018j-th\u2019 friend.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For every test case, return the 2-D matrix.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 1000 \n0 &lt;= arr[i][j] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4\n0 100 0 200\n0 0 300 0\n0 0 0 200\n0 0 0 0\n3 \n0 2000 4000\n0 0 3000\n0 0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>0 0 0 300\n0 0 100 100\n0 0 0 0\n0 0 0 0\n0 0 6000\n0 0 1000\n0 0 0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For sample input 1 :</h5>\n\n<pre><code>Test Case 1 :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-201-7958.png\" alt=\"subsequence\"></p>\n\n<pre><code>As you can see: friend-0 has to pay only 300$ to friend-3, friend-1 has to pay 100$ to friend-2 and 100$ to friend-3.  \nSo output will be \n0 0 0 300\n0 0 100 100\n0 0 0 0 \n0 0 0 0\n\nTest Case 2 :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-205-7959.png\" alt=\"subsequence\"></p>\n\n<pre><code>As you can see: friend-0 has to pay only 600$ to friend-2, friend-1 has to pay only 1000$ to friend-2.\nSo output will be \n0 0 6000\n0 0 1000\n0 0 0\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3\n0 100 0\n0 0 200\n0 0 0\n3\n0 100 0\n0 0 100\n100 0 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0 0 100\n0 0 100\n0 0 0 \n0 0 0\n0 0 0\n0 0 0 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 21,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix representing transactions between 'n' friends, where `transaction[i][j]` denotes the amount friend 'i' owes to friend 'j', minimize the cash flow such that the total number of transactions is also minimized. Return the adjusted transaction matrix representing the minimized cash flow.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 1000",
                    "0 <= arr[i][j] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 4, transaction = [[0, 100, 0, 200], [0, 0, 300, 0], [0, 0, 0, 200], [0, 0, 0, 0]]",
                        "output": "[[0, 0, 0, 300], [0, 0, 100, 100], [0, 0, 0, 0], [0, 0, 0, 0]]",
                        "explanation": "friend-0 pays 300 to friend-3, friend-1 pays 100 to friend-2 and 100 to friend-3."
                    },
                    {
                        "input": "n = 3, transaction = [[0, 2000, 4000], [0, 0, 3000], [0, 0, 0]]",
                        "output": "[[0, 0, 6000], [0, 0, 1000], [0, 0, 0]]",
                        "explanation": "friend-0 pays 6000 to friend-2, friend-1 pays 1000 to friend-2."
                    },
                    {
                        "input": "n = 3, transaction = [[0, 100, 0], [0, 0, 200], [0, 0, 0]]",
                        "output": "[[0, 0, 100], [0, 0, 100], [0, 0, 0]]",
                        "explanation": "friend-0 pays 100 to friend-2, and friend-1 pays 100 to friend-2."
                    },
                    {
                        "input": "n = 3, transaction = [[0, 100, 0], [0, 0, 100], [100, 0, 0]]",
                        "output": "[[0, 0, 0], [0, 0, 0], [0, 0, 0]]",
                        "explanation": "No one owes anyone anything"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think in a greedy manner.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}