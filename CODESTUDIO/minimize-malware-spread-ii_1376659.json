{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11082,
            "title": "Minimize Malware Spread II",
            "titleSlug": "minimize-malware-spread-ii_1376659",
            "content": "<h4 id=\"you-are-given-a-network-of-n-nodes-numbered-from-0-to-n-1-this-network-is-represented-using-an-adjacency-matrix-graph-of-size-n-x-n-you-are-also-given-an-array-initial-of-size-m-which-contains-the-nodes-that-are-initially-infected-by-malware-if-there-is-a-direct-connection-between-two-nodes-and-at-least-one-of-them-is-infected-by-malware-both-nodes-will-be-infected-by-the-malware-this-malware-spread-will-continue-until-no-more-nodes-are-left-or-no-more-nodes-can-be-infected-by-this-manner\">You are given a network of \u2018N\u2019 nodes numbered from 0 to \u2018N-1\u2019. This network is represented using an adjacency matrix \u2018GRAPH\u2019 of size \u2018N\u2019 x \u2018N\u2019. You are also given an array \u2018INITIAL\u2019 of size \u2018M\u2019, which contains the nodes that are initially infected by malware. If there is a direct connection between two nodes and at least one of them is infected by malware, both nodes will be infected by the malware. This malware spread will continue until no more nodes are left, or no more nodes can be infected by this manner.</h4>\n\n<h4 id=\"let-us-define-a-variable-infected-to-the-total-number-of-infected-nodes-by-the-malware-spread-your-task-is-to-remove-exactly-one-node-from-the-array-initial-such-that-it-results-in-the-minimum-value-of-infected\">Let us define a variable \u2018INFECTED\u2019 to the total number of infected nodes by the malware spread. Your task is to remove exactly one node from the array \u2018INITIAL\u2019 such that it results in the \u2018minimum\u2019 value of \u2018INFECTED\u2019.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1. If GRAPH[X][Y] = 1, then the node \u2018X\u2019 is directly connected to a node \u2018Y\u2019. Otherwise, there is not a direct connection between \u2018X\u2019 and \u2018Y\u2019.\n2. If we remove a node, we must also remove its connections to any other node.\n3. If multiple such nodes exist that can minimize the value of \u2018INFECTED\u2019, you have to find the node with the smallest index.\n4. All nodes in the array \u2018INITIAL\u2019 are unique.\n5. You have to return the \u2018index\u2019 of the node, not the minimum value of the \u2018INFECTED\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019, which denotes the number of test cases to be run. Then, the T test cases follow. \n\nThe first line of each test case contains two positive integers, \u2018N\u2019 and \u2018M\u2019, denoting the number of nodes in the network and the number of initially infected nodes respectively.\n\nThe following \u2018N\u2019 lines of each test case contain \u2018N\u2019 integers each, representing the adjacency matrix \u2018GRAPH\u2019.\n\nThe last line of input contains \u2018M\u2019 space-separated non-negative integers, denoting the elements of the array \u2018INITIAL\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the \u2018index\u2019 of the node that, after removing, would minimize the value of \u2018INFECTED\u2019, as described in the problem statement.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n2 &lt;= N &lt;= 100\n0 &lt;= GRAPH[i][j] &lt;= 1,  GRAPH[i][j] == GRAPH[j][i]\nGRAPH[i][i] == 1\n1 &lt;= M &lt;= N\n0 &lt;= INITIAL[i] &lt; N\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n3 2\n1 0 1\n0 1 1\n1 1 1\n0 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/min_malware_ii_tc1-8712.png\" alt=\"altImage\"></p>\n\n<pre><code>The left side graph denotes the initial nodes infected by malware, and the right side indicates the final graph after malware spread.\nIf you remove node \u20182\u2019 from the \u2018INITIAL\u2019, you will get the minimum value of \u2018INFECTED\u2019 that is 1. There is no other way to get a value of \u2018INFECTED\u2019 less than 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n3 1\n1 0 1\n0 1 1\n1 1 1\n0 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h5>\n\n<pre><code>There is only one node in the array \u2018INITIAL\u2019. So, we have to remove it.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/min_malware_ii_tc2-8711.png\" alt=\"altImage\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 13,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a network of N nodes (numbered 0 to N-1) represented by an N x N adjacency matrix GRAPH. An array INITIAL contains the initially infected nodes.  If two nodes are directly connected, and one is infected, both become infected. This spread continues until no more nodes can be infected. The goal is to find the node in INITIAL to remove that minimizes the total number of infected nodes (INFECTED) after the spread. Removing a node also removes its connections. If multiple nodes minimize INFECTED, return the one with the smallest index.",
                "constraints": [
                    "1 <= T <= 5",
                    "2 <= N <= 100",
                    "0 <= GRAPH[i][j] <= 1, GRAPH[i][j] == GRAPH[j][i]",
                    "GRAPH[i][i] == 1",
                    "1 <= M <= N",
                    "0 <= INITIAL[i] < N",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "3 2\n1 0 1\n0 1 1\n1 1 1\n0 2",
                        "output": "2",
                        "explanation": "Removing node '2' from the initially infected nodes results in only node '0' becoming infected after the spread. This is the minimum possible number of infected nodes achievable by removing a single node."
                    },
                    {
                        "input": "3 1\n1 0 1\n0 1 1\n1 1 1\n0",
                        "output": "0",
                        "explanation": "Since there's only one initially infected node ('0'), removing it will result in no infected nodes. Hence, index '0' is returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use <a href=\"https://en.wikipedia.org/wiki/Breadth-first_search\">BFS</a> to calculate how many nodes will be infected after removing the <strong>i</strong>th node from the array <strong>INITIAL</strong>.</p>",
            "<p>Similar idea as that of BFS but instead use DFS to calculate how many nodes will be infected after removing the <strong>i</strong>th node from the array <strong>INITIAL</strong>.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}