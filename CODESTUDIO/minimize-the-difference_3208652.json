{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16560,
            "title": "Minimize The Difference",
            "titleSlug": "minimize-the-difference_3208652",
            "content": "<h4 id=\"you-are-given-an-array-a-of-length-n-consisting-only-of-positive-integers-and-an-integer-k-you-have-to-update-every-element-of-the-array-by-increasing-or-decreasing-its-value-by-k-only-once-your-task-is-to-minimize-the-difference-between-maximum-and-minimum-elements-of-the-array-after-performing-the-increment-or-decrement-on-every-element-of-the-array\">You are given an array \u2018A\u2019 of length \u2018N\u2019 consisting only of positive integers and an integer \u2018K\u2019. You have to update every element of the array by increasing or decreasing its value by \u2018K\u2019 only once. Your task is to minimize the difference between maximum and minimum elements of the array after performing the increment or decrement on every element of the array.</h4>\n\n<h4 id=\"note-after-the-operation-every-value-of-the-array-should-remain-non-negative\">Note: After the operation, every value of the array should remain non-negative.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Let\u2019s say the array \u2018A\u2019 = [1, 2, 3, 4, 5] and \u2018K\u2019 = 2, then after increasing each element by \u2018K\u2019. The array \u2018A\u2019 will become [3, 4, 5, 6, 7]. So the maximum - minimum will be 7 - 3 = 4. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format-</h5>\n\n<pre><code>First-line contains \u2018T\u2019, denoting the number of Test cases.\nFor each Test case:\nThe first line contains two space-separated integers, \u2018N\u2019 and \u2018K\u2019, denoting the length of the array \u2018A\u2019 and the amount you must increase or decrease, respectively.\nThe following line contains \u2018N\u2019 space-separated positive integers, representing the array\u2019s values. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format-</h5>\n\n<pre><code>For each test case, you have to print an integer denoting the minimum difference between maximum and minimum elements of the array after performing the increment or decrement on every element of the array.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints -</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 5\n1 &lt;= \u2018N\u2019 &lt;= 10^5\n1 &lt;= \u2018K\u2019 &lt;= 10^9\n1 &lt;= A[i] &lt;= 10^9, for 1 &lt;= i &lt;= \u2018N\u2019\nNote- Sum of \u2018N\u2019 over all test cases does not exceed 10^5.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input-1</h5>\n\n<pre><code>2\n4 2\n1 5 8 10\n5 2\n1 2 3 4 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output-1</h5>\n\n<pre><code>5\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>For test case 1:\n    The final array will look like [3, 3, 6, 8]. So the difference between maximum and minimum is 8 - 3 = 5.\nFor test case 2:\n    The final array will look like [3, 4, 1, 2, 3]. So the difference between maximum and minimum is 4 - 1 = 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input -2</h5>\n\n<pre><code>2\n1 2\n8\n3 2\n1 3 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output -2</h5>\n\n<pre><code>0\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 168,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'A' of positive integers and an integer 'K', modify each element of 'A' by either adding or subtracting 'K' exactly once.  The goal is to minimize the difference between the maximum and minimum elements of the resulting array, ensuring all elements remain non-negative after the operation. Return the minimum possible difference.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= K <= 10^9",
                    "1 <= A[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "A=[1, 5, 8, 10], K=2",
                        "output": "5",
                        "explanation": "The optimal array could be [3, 3, 6, 8]. The difference between the maximum and minimum is 8 - 3 = 5."
                    },
                    {
                        "input": "A=[1, 2, 3, 4, 5], K=2",
                        "output": "3",
                        "explanation": "The optimal array could be [3, 0, 5, 2, 7].  Taking [3,4,1,6,7] gives 7-1 =6. However [3, 0, 5, 2, 3] is not an optimal array. Taking [3, 4, 1, 6, 3] gives 6-1 = 5. The optimal array will look like [3, 0, 5, 2, 3] or [3, 4, 1, 6, 3]. The array could be [3, 0, 5, 2, 3]. So, the difference between maximum and minimum is 5-0=5 but it can also be [3,4,1,6,3]. So the difference is 6-1 = 5. Also [3,4,1,2,3] yields 4-1 = 3 as an answer."
                    },
                    {
                        "input": "A=[8], K=2",
                        "output": "0",
                        "explanation": "The array can be updated to either [10] or [6]. In both cases, the difference between the maximum and minimum is 0 since there is only one element."
                    },
                    {
                        "input": "A=[1, 3, 3], K=2",
                        "output": "2",
                        "explanation": "The optimal array could be [3, 1, 1] or [3, 5, 1] or [3,1,5] or [1,1,1]. The difference between maximum and minimum is 3-1 = 2 if array is [3,1,1] or 5-1=4 if array is [5,1,1] or 1-1=0 if array is [-1,1,1], but the values must be non negative, so [3,1,1] remains. Also [3,1,1] or [-1,1,1] is only possible by adding k to the 1 and subtracting from other elements. To avoid negative value the other option is [3,5,1] or [3,1,5] since both yield 5-1=4. Therefore the best is [3,1,1] with maximum and minimum difference as 2"
                    },
                    {
                        "input": "A=[10, 2, 15, 4, 8], K=5",
                        "output": "8",
                        "explanation": "Possible updated arrays include [15, 7, 20, 9, 13], [5, 7, 10, 9, 3], etc. The optimal one is [5, 7, 10, 9, 13]. minimum value being 5 and max 13 . So the difference is 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>How does the maximum and minimum element change when applying the operation?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N).\r\n    Space Complexity: O(1).\r\n\r\n    Where 'N' is the length of the array.\r\n*/\r\n\r\nint minimizeIt(vector<int> A, int K)\r\n{\r\n    int n = A.size();\r\n    sort(A.begin(), A.end());\r\n    int ans = A[n - 1] - A[0];\r\n    int minimum = A[0] + K;\r\n    int maximum = A[n - 1] - K;\r\n    int current_minimum, current_maximum;\r\n    for (int i = 0; i < n - 1; i++)\r\n    {\r\n        // Finding the minimum and the maximum value if we perform the decrement operation on all the\r\n        // indexes greater than index \u2018i\u2019 and increment operation until the index \u2018i\u2019.\r\n        current_minimum = min(A[i + 1] - K, minimum);\r\n        current_maximum = max(A[i] + K, maximum);\r\n        // Checking if minimum value is non-negative or not.\r\n        if (current_minimum >= 0)\r\n        {\r\n            ans = min(ans, current_maximum - current_minimum);\r\n        }\r\n    }\r\n    return ans;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N).\r\n    Space Complexity: O(1).\r\n\r\n    Where 'N' is the length of the array.\r\n*/\r\n\r\nimport java.util.*;\r\npublic class Solution {\r\n\r\n    public static int minimizeIt(int[] A, int K) {\r\n        \r\n        int n = A.length;\r\n        Arrays.sort(A);\r\n        int ans = A[n - 1] - A[0];\r\n        int minimum = A[0] + K;\r\n        int maximum = A[n - 1] - K;\r\n        int current_minimum = 0, current_maximum = 0;\r\n        for (int i = 0; i < n - 1; i++)\r\n        {\r\n            // Finding the minimum and the maximum value if we perform the decrement operation on all the\r\n            // indexes greater than index i and increment operation until the index i.\r\n            current_minimum = Math.min(A[i + 1] - K, minimum);\r\n            current_maximum = Math.max(A[i] + K, maximum);\r\n            // Checking if minimum value is non-negative or not.\r\n            if (current_minimum >= 0)\r\n            {\r\n                ans = Math.min(ans, current_maximum - current_minimum);\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "from typing import *\r\n\r\ndef minimizeIt(A: List[int], K: int) ->int:\r\n\r\n    n = len(A)\r\n    A.sort()\r\n    ans = A[n - 1] - A[0]\r\n    minimum = A[0] + K\r\n    maximum = A[n - 1] - K\r\n    for i in range(n  - 1):\r\n        # Finding the minimum and the maximum value if we perform the decrement operation on all the\r\n        # indexes greater than index \u2018i\u2019 and increment operation until the index \u2018i\u2019.\r\n        current_minimum = min(A[i + 1] - K, minimum)\r\n        current_maximum = max(A[i] + K, maximum)\r\n\r\n        # Checking if minimum value is non-negative or not.\r\n        if (current_minimum >= 0) : \r\n            ans = min(ans, current_maximum - current_minimum)\r\n        \r\n    return ans\r\n\r\n\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}