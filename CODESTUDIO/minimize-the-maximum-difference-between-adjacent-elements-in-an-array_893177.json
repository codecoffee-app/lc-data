{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8621,
            "title": "Minimize the maximum difference between adjacent elements in an array ",
            "titleSlug": "minimize-the-maximum-difference-between-adjacent-elements-in-an-array_893177",
            "content": "<h4 id=\"you-are-given-a-non-decreasing-array-and-an-integer-k-you-need-to-remove-exactly-k-integers-from-the-given-array-such-that-the-maximum-difference-between-adjacent-elements-is-minimum\">You are given a non-decreasing array and an integer K. You need to remove exactly K integers from the given array such that the maximum difference between adjacent elements is minimum.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>If the given array is: [2 6 7 7 10] and K = 2. We need to remove A[0] = 2 and A[4] = 10, then the resultant array would become [6 7 7], where the difference between adjacent pairs are {1, 0}. Thus our answer would be 1. You can see that there would not be any better answer than 1 for this array\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \n\nThen the T test cases follow.\n\nThe first line of each test case contains two space-separated integers N and K representing the length of the array and the number of integers to be removed.\n\nThe second line of each test case contains N space-separated integers denoting the elements of the given array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the maximum difference between adjacent elements is minimum after K integers are removed, in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 \u2264 T \u2264 100\n3 \u2264 N \u2264 1000\n1 \u2264 Ai \u2264 10^6\n0 \u2264 K \u2264 N - 2\n\nTime Limit : 1 sec \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n5 2\n2 6 7 7 10\n3 1\n4 6 6 \n4 0\n3 6 6 7 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n0\n3\n</code></pre>\n\n<h5 id=\"explanation-of-input-1\">Explanation of Input 1:</h5>\n\n<pre><code>The first test case has already been explained in the problem statement.\nFor the second test case, the given array is: [4 6 6] and K = 1. We remove A[0] = 4, then the resultant array would become [6 6]. So the answer would be 0.\nFor the third test case, the given array is: [3 6 6 7] and K = 0. We cannot remove any number. The array remains the same. So the answer becomes 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n9 6\n3 3 4 6 7 10 10 12 15 \n4 0\n1 1 3 3 \n9 7\n1 1 2 5 7 10 13 16 17 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>1\n2\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 55,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-decreasing array `arr` of integers and an integer `k`, determine the minimum possible maximum difference between adjacent elements in the array after removing exactly `k` elements. The function should return this minimum maximum difference.",
                "constraints": [
                    "1 \u2264 T \u2264 100",
                    "3 \u2264 N \u2264 1000",
                    "0 \u2264 K \u2264 N - 2"
                ],
                "testcases": [
                    {
                        "input": "n = 5, arr = [2, 6, 7, 7, 10], k = 2",
                        "output": "1",
                        "explanation": "Removing 2 and 10 leaves [6, 7, 7]. The adjacent differences are {1, 0}. The maximum of these is 1."
                    },
                    {
                        "input": "n = 3, arr = [4, 6, 6], k = 1",
                        "output": "0",
                        "explanation": "Removing 4 leaves [6, 6]. The adjacent difference is {0}. The maximum of these is 0."
                    },
                    {
                        "input": "n = 4, arr = [3, 6, 6, 7], k = 0",
                        "output": "3",
                        "explanation": "Removing 0 elements means the array remains [3, 6, 6, 7]. The adjacent differences are {3, 0, 1}. The maximum of these is 3."
                    },
                    {
                        "input": "n = 9, arr = [3, 3, 4, 6, 7, 10, 10, 12, 15], k = 6",
                        "output": "1",
                        "explanation": "One possible solution is to remove [3, 4, 6, 7, 10, 12] resulting in [3, 10, 15]. Adjacent differences are {7,5}. The maximum of these is 7.  However, removing [4,6,7,10,10,12] resulting in [3,3,15] has adjacent differences of [0, 12] so max is 12. Removing [3,4,6,7,10,10] resulting in [3,12,15] gives [9,3] and max 9. The optimal solution here involves having many adjacent equal elements, which are removed."
                    },
                    {
                        "input": "n = 4, arr = [1, 1, 3, 3], k = 0",
                        "output": "2",
                        "explanation": "No removals are possible, so the differences are {0, 2, 0} with a maximum of 2."
                    },
                    {
                        "input": "n = 9, arr = [1, 1, 2, 5, 7, 10, 13, 16, 17], k = 7",
                        "output": "0",
                        "explanation": "We remove the elements {2,5,7,10,13,16,17}. The new array is {1,1}, difference {0}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Generate all possible solutions and take the minimum</p>",
            "<p>Does removing from the middle of the array help us?</p>",
            "<p>How about modifying the above approach and using an adjacent difference array?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}