{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10833,
            "title": "Minimum Changes To Make Valid Path",
            "titleSlug": "minimum-changes-to-make-valid-path_1266070",
            "content": "<h4 id=\"given-a-matrix-of-size-n-x-m-each-cell-in-a-grid-has-a-character-denoting-the-next-cell-that-can-be-visited-from-the-current-cell-if-matrix-i-j-is-equal-to\">Given a matrix of size \u2018N\u2019 x \u2019M\u2019. Each cell in a grid has a character denoting the next cell that can be visited from the current cell. If &#39;MATRIX&#39;[i][j] is equal to:</h4>\n\n<pre><code>\u2018U\u2019:- then from (i,j) you can visit (i - 1, j) only if i - 1 &gt;= 0.\n\u2018D\u2019:- then from (i,j) you can visit (i + 1, j) only if i + 1 &lt; n.\n\u2018R\u2019:- then from (i,j) you can visit (i, j + 1) only if j + 1 &lt; m.\n\u2018L\u2019:- then from (i,j) you can visit (i, j - 1) only if j - 1 &gt;= 0.\n</code></pre>\n\n<h4 id=\"you-can-change-the-direction-of-each-cell-at-most-one-time\">You can change the direction of each cell at most one time.</h4>\n\n<h4 id=\"you-need-to-determine-a-minimum-number-of-changes-you-need-to-make-to-reach-from-the-cell-0-0-to-the-cell-n-1-m-1\">You need to determine a minimum number of changes you need to make to reach from the cell (0,0) to the cell(&#39;N&#39; - 1, &#39;M&#39; - 1).</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of the test case contains 2 integers \u2018N\u2019 and \u2018M\u2019 denoting the length and width of the matrix.\n\nThe next \u2018N\u2019 lines contain \u2018M\u2019 characters each denoting the direction of the cell of the matrix.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer denoting a minimum number of cell\u2019s direction need to change to reach from (0,0) to (&#39;N&#39; - 1, &#39;M&#39; - 1).\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1&lt;= T &lt;=10\n1&lt;= N, M &lt;=100\nMATRIX[i][j] = {\u2018D\u2019,\u2019R\u2019,\u2019U\u2019,\u2019L\u2019}.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 3\nDDD\nRRL\nUUU\n2 2\nUU\nDD\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h5>\n\n<pre><code>In test case 1, one of the paths is as follows:\n\n(0,0) --&gt; (1,0) --&gt; (1,1) --&gt; (1,2). Change the direction of (1,2) from \u2018L\u2019 to \u2018D\u2019. (1,2) -&gt; (2,2).\n\n\nIn test case 2, one of the paths is as follows:\n\nChange the direction of (0,0) cell to \u2018R\u2019.\n(0,0) --&gt; (0,1).\n\nChange the direction of (0,1) cell from \u2018U\u2019 to \u2018D\u2019.\n(0,1) --&gt; (1,1).\n\nThus 2 changes are needed to reach (1,1) cell.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 1\nD\n2 2\nRD\nRD\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h5>\n\n<pre><code>In test case 1, there is only one cell and so, we don&#39;t need any cell to change its direction. Thus, 0 will be the output.\n\n\nIn test case 2, No changes are required. Thus, 0 will be the output.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix of size 'N' x 'M', where each cell contains a character ('U', 'D', 'R', 'L') indicating the direction to move from that cell:\n\n*   'U': Move to (i-1, j) if i-1 >= 0.\n*   'D': Move to (i+1, j) if i+1 < N.\n*   'R': Move to (i, j+1) if j+1 < M.\n*   'L': Move to (i, j-1) if j-1 >= 0.\n\nYou are allowed to change the direction of any cell at most once.  The task is to find the minimum number of changes required to reach cell (N-1, M-1) from the starting cell (0, 0).",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N, M <= 100",
                    "MATRIX[i][j] = {'D','R','U','L'}",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 3\nDDD\nRRL\nUUU",
                        "output": "1",
                        "explanation": "One possible path is (0,0) -> (1,0) -> (1,1) -> (1,2). Changing the direction of (1,2) from 'L' to 'D' allows reaching (2,2)."
                    },
                    {
                        "input": "2 2\nUU\nDD",
                        "output": "2",
                        "explanation": "Changing the direction of (0,0) to 'R' gives (0,0) -> (0,1). Changing the direction of (0,1) from 'U' to 'D' allows reaching (1,1)."
                    },
                    {
                        "input": "1 1\nD",
                        "output": "0",
                        "explanation": "With only one cell, no changes are needed."
                    },
                    {
                        "input": "2 2\nRD\nRD",
                        "output": "0",
                        "explanation": "No changes are required to reach (1,1) from (0,0)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use BFS to find a minimum number of changes to reach from. (0,0) cell to all other cells and it will lead us to get minimum answer.</p>",
            "<p>Try to iterate all the cells with going to nearby possible cells once at a time using level order traversal.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}