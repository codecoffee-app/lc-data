{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16578,
            "title": "Minimum Cost BST",
            "titleSlug": "minimum-cost-bst_3210619",
            "content": "<h4 id=\"you-are-given-two-arrays-arr-and-freq-where-freq-i-represent-the-number-of-times-we-are-querying-the-element-arr-i-your-task-is-to-construct-a-binary-search-tree-from-the-elements-of-arr-such-that-the-cost-of-querying-the-elements-of-arr-is-minimum\">You are given two arrays \u2018arr\u2019 and \u2018freq\u2019, where \u2018freq[i]\u2019 represent the number of times we are querying the element \u2018arr[i]\u2019. Your task is to construct a binary search tree from the elements of \u2018arr\u2019 such that the cost of querying the elements of \u2018arr\u2019 is minimum.</h4>\n\n<h4 id=\"the-cost-of-a-bst-node-is-the-level-of-the-node-multiplied-by-it-s-frequency\">The cost of a BST node is the level of the node multiplied by it\u2019s frequency.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The array \u2018arr\u2019 is sorted.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>You are given \u2018arr\u2019 = [1, 2, 3] and \u2018freq\u2019 = [10, 30, 20], we can construct binary search trees such that\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000561_1639193006_BSTDiag.drawio.png\" alt=\"TestCase1\"></p>\n\n<pre><code>We can clearly see that the minimum cost of the tree is 90.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 representing the size of the array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers representing the element of the array, \u2018arr\u2019.\n\nThe third line of each test case contains \u2018N\u2019 space-separated integers representing the element of the array, \u2018freq\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case print a single integer representing the minimum cost of the BST.\n\nPrint a separate line for each test case.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= |arr| = |freq| &lt;= 100\n0 &lt;= freq[i] &lt;= 10^8\n\nTime Limit = 1 sec\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h6 id=\"sample-input-1\">Sample Input 1:</h6>\n\n<pre><code>2\n3\n1 2 3\n10 30 20\n2\n1 3\n50 10\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>90\n70\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code> For the first test case, \u2018arr\u2019 = [1, 2, 3] and \u2018freq\u2019 = [10, 30, 20], we can construct binary search trees such that \n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000561_1639193006_BSTDiag.drawio.png\" alt=\"TestCase1\"></p>\n\n<pre><code>We can clearly see that the minimum cost of the tree is 90.\n\nFor the second test case, \u2018arr\u2019 = [1, 2] and \u2018freq\u2019 = [50, 10] we can construct binary search trees such that \n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000562_1639193445_BSTDiag-Page-2.drawio.png\" alt=\"TestCase2\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4\n1 3 4 6\n5 2 1 4\n1\n1\n50\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>23\n50\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array 'arr' and a corresponding array 'freq' representing the frequency of each element in 'arr', construct a Binary Search Tree (BST) such that the total cost of querying the elements is minimized. The cost of querying a node is the product of its level in the BST and its frequency. Return the minimum possible cost of such a BST.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |arr| = |freq| <= 100",
                    "0 <= freq[i] <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "n = 3, arr = [1, 2, 3], freq = [10, 30, 20]",
                        "output": "90",
                        "explanation": "One optimal BST has 2 as the root, 1 as the left child, and 3 as the right child. The cost is (1 * 10) + (0 * 30) + (1 * 20) = 10 + 0 + 20 = 90"
                    },
                    {
                        "input": "n = 2, arr = [1, 3], freq = [50, 10]",
                        "output": "70",
                        "explanation": "One optimal BST has 1 as the root, and 3 as the right child. The cost is (0 * 50) + (1 * 10) = 0 + 10 = 10 Another BST has 3 as root and 1 as the left child . The cost is 1*50 + 0*10 = 50. The code return the minimum of these which is 10 "
                    },
                    {
                        "input": "n = 4, arr = [1, 3, 4, 6], freq = [5, 2, 1, 4]",
                        "output": "23",
                        "explanation": "An optimal BST yields a minimum cost of 23."
                    },
                    {
                        "input": "n = 1, arr = [1], freq = [50]",
                        "output": "50",
                        "explanation": "A BST with a single node has level 0. Cost is 0 * 50 = 0"
                    },
                    {
                        "input": "n = 5, arr = [1, 2, 3, 4, 5], freq = [1, 2, 3, 4, 5]",
                        "output": "40",
                        "explanation": "The minimum cost BST has a cost of 40."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;Try to find the optimal substructure to the solution.</p>",
            "<p>&nbsp;Try to memoize the previous approach .</p>",
            "<p>Try to use dynamic programming to reuse the solution for subproblems</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}