{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8502,
            "title": "Minimum cost of reducing Array by merging any adjacent elements repetitively",
            "titleSlug": "minimum-cost-of-reducing-array-by-merging-any-adjacent-elements-repetitively_874580",
            "content": "<h4 id=\"you-are-given-an-array-arr-consisting-of-n-positive-integers-and-you-need-to-reduce-the-size-of-the-array-to-1-by-performing-an-operation-several-number-of-times-in-a-single-operation-you-can-merge-any-two-adjacent-elements-of-the-array-and-the-cost-of-merging-will-be-equal-to-the-sum-of-those-two-elements-find-the-minimum-cost-of-reducing-the-given-array-by-performing-this-operation-several-number-of-times\">You are given an array &#39;ARR&#39; consisting of &#39;N&#39; positive integers, and you need to reduce the size of the array to 1 by performing an operation several number of times. In a single operation, you can merge any two adjacent elements of the array, and the cost of merging will be equal to the sum of those two elements. Find the minimum cost of reducing the given array by performing this operation several number of times.</h4>\n\n<h4 id=\"in-a-single-merge-operation-the-two-elements-are-removed-and-their-sum-is-inserted-at-its-place-hence-decreasing-the-size-of-the-array-by-1-after-each-operation-for-eg-consider-the-array-a1-a2-ai-2-ai-1-ai-aj-aj-1-aj-2-an-let-the-operation-be-performed-on-two-indices-i-and-j-so-after-merging-the-array-will-look-like-a1-a2-ai-2-ai-1-ai-aj-aj-1-aj-2-an\">In a single merge operation, the two elements are removed, and their sum is inserted at its place, hence decreasing the size of the array by 1 after each operation. For eg: Consider the array A1, A2, Ai-2, Ai-1, Ai, Aj, Aj+1, Aj+2 ,,,, An. Let the operation be performed on two indices i and j, So after merging the array will look like  A1, A2, Ai-2, Ai-1, Ai+Aj, Aj+1, Aj+2,,,,  An.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Note that the given operation will be performed only &#39;N&#39;-1 times, where &#39;N&#39; is the size of the given array.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer T denoting the number of test cases. \n\nThe first line of each test case contains the integer N, denoting the size of the sorted array. \n\nThe second line of each test case contains N space-separated integers denoting the array elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output of each test case should contain a single integer which denotes the minimum cost of merging the whole array.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 100\n1 &lt;= ARR[i] &lt;= 10^6\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n3\n1 3 7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>15\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>The optimal way of merging is as follows:\nMerge (1, 3). The array becomes {4, 7}. Cost for this operation is 4.\nMerge (4, 7). The array becomes {11}. Cost for this operation is 11.\nTherefore the total cost of merging is 4 + 11 = 15.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n4\n3 2 4 1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>20\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2:</h5>\n\n<pre><code>The optimal way of merging is as follows:\n1. Merge (3, 2), then array becomes {5, 4, 1}. Cost for this operation is 5. \n2. Merge (4, 1), then array becomes {5, 5}. Cost for this operation is 5.\n3. Merge (5, 5), then array becomes {10}. Cost for this operation is 10.\nTherefore the total cost of merging is 5 + 5 + 10 = 20.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers, the goal is to reduce it to a single element by repeatedly merging adjacent elements. The cost of each merge is the sum of the two elements being merged. Determine the minimum total cost to reduce the array to a single element through optimal merging.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 100",
                    "1 <= ARR[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "n = 3, arr=[1,3,7]",
                        "output": "15",
                        "explanation": "The optimal way of merging is as follows:\nMerge (1, 3). The array becomes {4, 7}. Cost for this operation is 4.\nMerge (4, 7). The array becomes {11}. Cost for this operation is 11.\nTherefore the total cost of merging is 4 + 11 = 15."
                    },
                    {
                        "input": "n = 4, arr=[3,2,4,1]",
                        "output": "20",
                        "explanation": "The optimal way of merging is as follows:\n1. Merge (3, 2), then array becomes {5, 4, 1}. Cost for this operation is 5. \n2. Merge (4, 1), then array becomes {5, 5}. Cost for this operation is 5.\n3. Merge (5, 5), then array becomes {10}. Cost for this operation is 10.\nTherefore the total cost of merging is 5 + 5 + 10 = 20."
                    },
                    {
                        "input": "n = 5, arr=[1,2,3,4,5]",
                        "output": "33",
                        "explanation": "One possible optimal way to merge is:\n1. Merge (1, 2) -> {3, 3, 4, 5}, cost = 3\n2. Merge (3, 3) -> {6, 4, 5}, cost = 6\n3. Merge (6, 4) -> {10, 5}, cost = 10\n4. Merge (10, 5) -> {15}, cost = 15\nTotal cost = 3 + 6 + 10 + 15 = 34. Another possible optimal way to merge is:\n1. Merge(4,5)->{1,2,3,9}, cost = 9\n2. Merge(1,2)->{3,3,9}, cost = 3\n3. Merge(3,3)->{6,9}, cost = 6\n4. Merge(6,9)->{15}, cost = 15\nTotal cost = 9+3+6+15=33"
                    },
                    {
                        "input": "n = 2, arr=[10, 20]",
                        "output": "30",
                        "explanation": "Merge (10, 20). The array becomes {30}. Cost = 30."
                    },
                    {
                        "input": "n = 6, arr=[5, 1, 4, 2, 8, 10]",
                        "output": "69",
                        "explanation": "One possible optimal way to merge is: \n 1. Merge (5,1)-> {6,4,2,8,10}, cost =6\n 2. Merge (6,4)-> {10,2,8,10}, cost =10\n 3. Merge (2,8)-> {10,10,10}, cost =10\n 4. Merge (10,10)-> {20,10}, cost =20\n 5. Merge (20,10)->{30}, cost=30\n Total Cost = 6+10+10+20+30 =76. Another optimal merging path gives cost 69"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Don\u2019t try greedy.</p>",
            "<p>Bottom up dp.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}