{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7283,
            "title": "Minimum Cost Path",
            "titleSlug": "minimum-cost-path_630515",
            "content": "<h4 id=\"you-have-been-given-a-matrix-of-n-rows-and-m-columns-filled-up-with-integers-find-the-minimum-sum-that-can-be-obtained-from-a-path-which-from-cell-x-y-and-ends-at-the-top-left-corner-1-1\">You have been given a matrix of \u2018N\u2019 rows and \u2018M\u2019 columns filled up with integers. Find the minimum sum that can be obtained from a path which from cell (x,y) and ends at the top left corner (1,1).</h4>\n\n<h4 id=\"from-any-cell-in-a-row-we-can-move-to-the-right-down-or-the-down-right-diagonal-cell-so-from-a-particular-cell-row-col-we-can-move-to-the-following-three-cells\">From any cell in a row, we can move to the right, down or the down right diagonal cell. So from a particular cell (row, col), we can move to the following three cells:</h4>\n\n<pre><code>Down: (row+1,col)\nRight: (row, col+1)\nDown right diagonal: (row+1, col+1)\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line will contain two integers \u2018N\u2019 and \u2018M\u2019 denoting the number of rows and columns, respectively.\n\nNext \u2018N\u2019 lines contain \u2018M\u2019 space-separated integers each denoting the elements in the matrix.\n\nThe last line will contain two integers \u2018x\u2019 and \u2018y\u2019 denoting the cell to start from.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an integer that represents the minimum sum that can be obtained by traveling a path as described above.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N, M &lt;= 100\n-10000 &lt;= cost[i][j] &lt;= 10000\n1 &lt;= x, y &lt;= 100\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3 4\n3 4 1 2\n2 1 8 9\n4 7 8 1\n2 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>12\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For sample input 1:</h5>\n\n<pre><code>The minimum cost path will be (0, 0) -&gt; (1, 1) -&gt; (2, 3), So the path sum will be (3 + 1 + 8) = 12, which is the minimum of all possible paths.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3 4\n11 2 8 6 \n2 12 17 6 \n3 3 1 8 \n3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>25\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 22,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix of 'N' rows and 'M' columns filled with integers, find the minimum sum of a path from cell (x, y) to the top-left corner (1, 1). From any cell (row, col), you can move to the following cells:\n\n*   Down: (row+1, col)\n*   Right: (row, col+1)\n*   Down-right diagonal: (row+1, col+1)",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N, M <= 100",
                    "-10000 <= cost[i][j] <= 10000",
                    "1 <= x, y <= 100",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 4\n3 4 1 2\n2 1 8 9\n4 7 8 1\n2 3",
                        "output": "12",
                        "explanation": "The minimum cost path is (1, 2) -> (2, 3), corresponding to values 1 and 8. However, we need a path that ends at (1,1). The path (2,3) -> (1,2) -> (0,1) is not allowed. The correct path according to 1-based indexing from (2,3) to (1,1) resulting in minimum sum is (2,3) -> (1,1) values 8 + 4 = 12"
                    },
                    {
                        "input": "3 4\n11 2 8 6 \n2 12 17 6 \n3 3 1 8 \n3 4",
                        "output": "25",
                        "explanation": "The minimum cost path from (3,4) to (1,1) is (3,4) -> (2,3) -> (1,2)->(0,1). Values in the path: 8+17,12,2 =25"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of trying all possible paths that can be taken from (1,1) to (X,Y). Can you implement this using recursion?</p>",
            "<p>Observe the previous approach carefully. Can you notice that some results are getting computed repeatedly? Is there a way to avoid this recomputation?</p>",
            "<p>Try thinking of a bottom-up approach corresponding to the memoized recursive solution from the previous approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}