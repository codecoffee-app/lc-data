{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7221,
            "title": "Minimum Cost to Buy Oranges",
            "titleSlug": "minimum-cost-to-buy-oranges_630455",
            "content": "<h4 id=\"you-are-given-a-bag-of-size-w-kg-and-provided-with-the-costs-of-packets-with-different-weights-of-oranges-as-a-list-array-with-the-name-cost-every-i-th-position-in-the-cost-denotes-the-price-of-i-1-kg-packet-of-oranges\">You are given a bag of size &#39;W&#39; kg and provided with the costs of packets with different weights of oranges as a list/array with the name &#39;cost&#39;. Every i-th position in the cost denotes the price of &#39;i+1&#39; kg packet of oranges.</h4>\n\n<h4 id=\"if-at-any-point-in-time-the-i-th-cost-is-1-it-means-that-i-1-kg-packet-of-orange-is-unavailable\">If at any point in time the i-th cost is -1, it means that &#39;i+1&#39; kg packet of orange is unavailable.</h4>\n\n<h4 id=\"you-are-required-to-find-the-minimum-total-cost-to-buy-exactly-w-kg-oranges-and-if-its-not-possible-to-buy-precisely-w-kg-oranges-then-print-1-there-is-an-infinite-supply-of-all-available-packet-types\">You are required to find the minimum total cost to buy exactly &#39;W&#39; kg oranges and if it&#39;s not possible to buy precisely W kg oranges then print -1. There is an infinite supply of all available packet types.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Array index &#39;i&#39; denotes the cost of (i+1)kg packet. \nExample: cost[0] is the cost of a 1kg packet of oranges.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of each test case contains two single space-separated integers &#39;N&#39; and &#39;W&#39; where &#39;N&#39; denotes the size of the array/list(cost), and &#39;W&#39; is the bag&#39;s size.\n\nThe second line of each test case contains &#39;N&#39; single space-separated integers denoting the values of the cost.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print the minimum cost to buy exactly W kg oranges. If it&#39;s impossible, print &quot;-1&quot;.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;= 1000\n1 &lt;= W &lt;= 1000\n-1 &lt;= cost[i] &lt;= 1000000\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>5 5\n20 10 4 50 100\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>14\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">\u00a0Explanation Of Sample Input 1 :</h5>\n\n<pre><code>The optimal solution is to buy one bag of 2kg packet and one bag of 3kg packet.\nTotal Cost = 10 + 4 = 14 \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>5 5\n-1 -1 4 5 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>-1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">\u00a0Explanation Of Sample Input 2 :</h5>\n\n<pre><code>It&#39;s impossible to buy exactly 5kg oranges, so the answer is -1.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the cost of orange packets of different weights, where `cost[i]` represents the cost of an `i+1` kg packet, determine the minimum total cost to buy exactly `W` kg of oranges. If a packet is unavailable, its cost is represented as -1. You have an unlimited supply of each available packet type. If it's impossible to buy exactly `W` kg, return -1.",
                "constraints": [
                    "1 <= N <= 1000",
                    "1 <= W <= 1000",
                    "-1 <= cost[i] <= 1000000"
                ],
                "testcases": [
                    {
                        "input": "n = 5, cost = [20, 10, 4, 50, 100], w = 5",
                        "output": "14",
                        "explanation": "The optimal solution is to buy one bag of 2kg packet (cost: 10) and one bag of 3kg packet (cost: 4). Total Cost = 10 + 4 = 14"
                    },
                    {
                        "input": "n = 5, cost = [-1, -1, 4, 5, -1], w = 5",
                        "output": "-1",
                        "explanation": "It's impossible to buy exactly 5kg oranges, as packets of sizes 1, 2, and 5 are unavailable."
                    },
                    {
                        "input": "n = 4, cost = [1, 2, 3, 4], w = 5",
                        "output": "5",
                        "explanation": "Optimal solution is to buy five 1kg orange packets. Cost = 5 * 1 = 5. Alternatively, two 1kg packets (2) and one 3kg packet (3) for a cost of 5, or one 1kg (1) and one 4 kg (4) for cost 5, or one 2kg (2) and one 3kg (3) for cost 5."
                    },
                    {
                        "input": "n = 3, cost = [1, 2, 3], w = 7",
                        "output": "7",
                        "explanation": "Optimal solution is to buy seven 1kg orange packets.  The cost is 7 * 1 = 7."
                    },
                    {
                        "input": "n = 3, cost = [-1, -1, -1], w = 7",
                        "output": "-1",
                        "explanation": "All packet types are unavailable, so it's impossible to buy any oranges."
                    },
                    {
                        "input": "n = 1, cost = [5], w = 3",
                        "output": "15",
                        "explanation": "Buy three packets of 1 kg for a total cost of 15 (5 * 3 = 15)."
                    },
                    {
                        "input": "n = 1, cost = [-1], w = 3",
                        "output": "-1",
                        "explanation": "No packets are available."
                    },
                    {
                        "input": "n = 4, cost = [2, 3, 5, 10], w = 8",
                        "output": "16",
                        "explanation": "Buy four packets of 2kg oranges. 4 * 2 = 8, and 4*2 = 8. The cost is 16."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to explore all the possibilities, i.e. taking or skipping all \u2018i\u2019 kg packets for all the possible values of weights from 0 to W.</p>",
            "<p>Try to observe overlapping subproblems in the previous recursive solution. Can we save time in those repetitive calls by using some memory?</p>",
            "<p>Can you save the extra space of those recursive call stacks in the previous approach? Try to convert that recursive DP to iterative DP. It will also save some time in calling recursive functions.</p>",
            "<p>Can you save some space using 1D DP Array? Try finding some other unique states following the optimal substructure property.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}