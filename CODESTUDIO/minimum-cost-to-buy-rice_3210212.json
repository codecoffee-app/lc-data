{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16566,
            "title": "Minimum Cost to Buy Rice",
            "titleSlug": "minimum-cost-to-buy-rice_3210212",
            "content": "<h4 id=\"it-s-year-end-and-also-the-perfect-time-to-have-a-ninja-gathering-you-are-planning-to-invite-your-ninja-friends-for-a-delightful-rice-meal\">It\u2019s year-end and also the perfect time to have a Ninja gathering. You are planning to invite your Ninja friends for a delightful rice meal.</h4>\n\n<h4 id=\"the-town-you-live-in-has-exactly-n-shops-selling-rice-the-shops-are-numbered-from-1-2-3-n-and-the-i-th-shop-sells-rice-bags-that-weigh-exactly-i-kgs-each-shop-has-an-unlimited-supply-of-the-bags-that-they-sell-so-you-don-t-have-to-worry-about-that-you-are-also-given-an-array-cost-where-cost-i-denotes-the-price-at-which-the-i-th-shop-sells-one-bag-of-rice-note-that-if-cost-i-is-equal-to-1-then-it-means-that-the-i-th-shop-is-closed-and-you-cannot-buy-rice-from-that-shop-the-array-cost-follows-0-based-indexing\">The town you live in has exactly \u2018N\u2019 shops selling rice. The shops are numbered from 1, 2, 3 \u2026 N, and the <strong>i\u2019th</strong> shop sells rice bags that weigh exactly <strong>i</strong> kgs. Each shop has an unlimited supply of the bags that they sell so you don\u2019t have to worry about that. You are also given an array \u2018COST\u2019 where COST[i] denotes the price at which the i\u2019th shop sells one bag of rice. Note that if COST[i] is equal to -1, then it means that the i\u2019th shop is closed and you cannot buy rice from that shop (The array \u2018COST\u2019 follows 0-based indexing).</h4>\n\n<h4 id=\"you-have-to-buy-exactly-w-kgs-of-rice-you-are-not-willing-to-buy-extra-rice-to-avoid-any-wastage-find-the-minimum-cost-to-complete-this-task-if-it-is-not-possible-to-complete-the-task-then-print-1\">You have to buy exactly \u2018W\u2019 kgs of rice, you are not willing to buy extra rice to avoid any wastage. Find the minimum cost to complete this task, if it is not possible to complete the task then print \u201c-1\u201d.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>If \u2018N\u2019 = 5, \u2018W\u2018 = 4 and \u201cCOST\u2019\u2019 = {100, 5, -1, 100, 100}.\n\nThen, we can buy two bags of rice from the 2\u2019nd shop. This shop sells rice in packing of 2kgs each and sells each bag for COST[1] = 5. Therefore we have to pay a total cost of 2 * 5 = 10 to complete this task.\nNote that there are more ways to complete this task. For example, we can buy four bags of rice from the 1\u2019st shop, this will have a cost of 4 * COST[0] = 400 which is much greater than the cost of 10 calculated earlier. Therefore we will print 10.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains two integers \u2018N\u2019 and \u2018W\u2019, denoting the number of shops and the weight of rice respectively.\n\nThe next lines contain N integers \u2018COST\u2019, denoting the price charged by each shop for one bag of rice.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the minimum cost to complete the task.\n\nOutput for each test case will be printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 \u2018T\u2019 \u2264 10      \n1 \u2264 N \u2264 100\n1 \u2264 W \u2264 500\n-1 \u2264 COST[i] \u2264 10^5 \n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5 4\n100 5 -1 100 100\n5 1\n-1 5 -1 100 100\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>10\n-1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For test case 1 :\nWe will print 10 because:\nwe can buy two bags of rice from the 2\u2019nd shop. This shop sells rice in packing of 2kgs each and sells each bag for COST[1] = 5. Therefore we have to pay a total cost of 2 * 5 = 10 to complete this task.\n\nFor test case 2 : \nWe will print -1 because:\nWe need to buy exactly 1kg of rice, and in order to complete this task we only have one option, that is to buy one bag of rice from the 1\u2019st shop. But we can\u2019t complete this task as the 1\u2019st shop is closed.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n17 138\n40 28 7 21 59 48 74 15 63 24 81 14 31 7 35 -1 13\n12 63\n35 43 40 18 80 64 63 99 50 51 36 31\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>77\n178\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "A Ninja gathering is planned, and you need to buy exactly W kgs of rice from N shops. Each shop 'i' sells rice bags weighing 'i' kgs at a price of COST[i]. If COST[i] is -1, the shop is closed. Find the minimum cost to buy exactly W kgs of rice. If it's impossible, return -1.",
                "constraints": [
                    "1 \u2264 \u2018T\u2019 \u2264 10",
                    "1 \u2264 N \u2264 100",
                    "1 \u2264 W \u2264 500",
                    "-1 \u2264 COST[i] \u2264 10^5",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 4\n100 5 -1 100 100",
                        "output": "10",
                        "explanation": "We can buy two bags of rice from the 2nd shop. This shop sells rice in packing of 2kgs each and sells each bag for COST[1] = 5. Therefore, the total cost is 2 * 5 = 10."
                    },
                    {
                        "input": "5 1\n-1 5 -1 100 100",
                        "output": "-1",
                        "explanation": "We need to buy exactly 1kg of rice. The only way to do this is to buy one bag from the 1st shop, but the 1st shop is closed (COST[0] = -1)."
                    },
                    {
                        "input": "17 138\n40 28 7 21 59 48 74 15 63 24 81 14 31 7 35 -1 13",
                        "output": "77",
                        "explanation": null
                    },
                    {
                        "input": "12 63\n35 43 40 18 80 64 63 99 50 51 36 31",
                        "output": "178",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a recursive approach that can later be memoized to solve optimally.</p>",
            "<p>Let DP[i][j] store the minimum cost to buy exactly \u2018j\u2019 kgs of rice only from the first \u2018i\u2019 shops. Think of some transitions to calculate the value of DP[i][j].</p>",
            "<p>Let DP[i][j] store the minimum cost to buy exactly \u2018j\u2019 kgs of rice only from the first \u2018i\u2019 shops. Think of some transitions to calculate the value of DP[i][j].</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}