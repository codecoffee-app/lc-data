{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9366,
            "title": "Minimum Cost to Connect Cities",
            "titleSlug": "minimum-cost-to-connect-cities_983628",
            "content": "<h4 id=\"ninjaland-is-a-country-having-n-states-numbered-from-1-to-n-these-n-states-are-connected-by-m-bidirectional-roads-each-road-connects-to-different-states-and-has-some-cost-to-travel-from-one-state-to-another-now-the-chief-wants-you-to-select-n-1-roads-in-such-a-way-that-the-tourist-bus-can-travel-to-every-state-at-least-once-at-minimum-cost\">Ninjaland is a country having &#39;N&#39; states numbered from 1 to &#39;N&#39;. These &#39;N&#39; states are connected by &#39;M&#39; bidirectional roads. Each road connects to different states and has some cost to travel from one state to another. Now, the chief wants you to select &#39;N&#39; - 1 roads in such a way that the tourist bus can travel to every state at least once at minimum &#39;COST&#39;.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>Consider a country having 4 states numbered from 1 to 4. These 4 states are connected by 5 bidirectional roads given as :\n1 --- 2 with cost = 8\n2 --- 3 with cost = 6\n3 --- 4 with cost = 5\n1 --- 4 with cost = 2\n1 --- 3 with cost = 4\n\nThe map of the country can be represented as:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/first1-6789.jpg\" alt=\"\"></p>\n\n<pre><code>Now, the best way to choose 3 roads is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/first2-6791.jpg\" alt=\"\"></p>\n\n<pre><code>The cost of travelling from any state to all other states is  2 + 4 + 6 i.e. 12.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; denoting the number of test cases or queries to be run. \n\nThe first line of each test case or query contains two space-separated integers &#39;N&#39; and \u2018M\u2019 representing the number of states and number of roads in the country, respectively. \n\nThe next &#39;N&#39; lines of every test case contain three single space-separated integers \u2018A\u2019, \u2018B\u2019 and \u2018C\u2019, representing a road between the states &#39;A&#39; and &#39;B&#39; and &#39;C&#39; denoting the cost of travelling them.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print &#39;N&#39; - 1 lines each containing 3 space separated integers &#39;A&#39;, &#39;B&#39; and &#39;C&#39; representing the road you have chosen and the cost to traverse that road.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 10\n1 &lt;= &#39;N&#39; &lt;= 1000\n&#39;N&#39; - 1 &lt;= &#39;M&#39; &lt;= 2000\n1 &lt;= &#39;C&#39; &lt;= 10^6 \n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n4 4\n1 2 3\n1 4 5\n2 3 1\n3 4 8  \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 2 3\n2 3 1\n1 4 5\n</code></pre>\n\n<h5 id=\"explanation-for-1\">Explanation for 1:</h5>\n\n<pre><code>Here &#39;N&#39; = 4, So we need to pick 3 roads such that all states are visited and cost is minimum. Now the possible ways are.\n\n1. (1, 2) (2, 3) (1, 4): In this case, the total cost of travelling is 3 + 1 + 5 = 9.\n2. (1, 2) (2, 3) (3, 4): In this case, the total cost of travelling is 3 + 1 + 8 = 12.\n3. (1, 2) (1, 4) (3, 4): in this case, the total cost of travelling is 3 + 5 + 8 = 16.\n4. (1, 4) (2, 3) (3, 4): In this case, the total cost of travelling is 5 + 1 + 8 = 14.\n\nClearly, the cost is minimal in the first case so we pick (1, 2) ( 2, 3) (1, 4) with cost of travel 9. Refer above for diagram. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n3 3\n1 2 5\n2 3 4\n3 1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2 3 4\n3 1 2\n</code></pre>\n\n<h5 id=\"explanation-for-2\">Explanation for 2:</h5>\n\n<pre><code>The given graph is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/prims1-6839.PNG\" alt=\"\"></p>\n\n<pre><code>Here &#39;N&#39; = 3, So we need to pick 2 roads such that all states are visited and the cost is minimum. Now the possible ways are.\n\n1. (1, 2) (2, 3) : In this case, the total cost of travelling is 5 + 4 = 9.\n2. (1, 3) (2, 3) : In this case, the total cost of travelling is 2 + 4 = 6.\n3. (1, 2) (1, 3) : in this case, the total cost of travelling is 5 + 2 = 7.\n\nClearly, the cost is minimal in the second case so we pick (1, 3) ( 2, 3)  with the cost of travel 6.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/prims2-6840.PNG\" alt=\"\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a country with 'N' states (numbered 1 to 'N') connected by 'M' bidirectional roads, where each road connects two distinct states and has an associated cost. The goal is to select 'N' - 1 roads such that all states are reachable, minimizing the total cost of the selected roads.  Implement a function that finds a Minimum Spanning Tree (MST) of the graph represented by the roads.",
                "constraints": [
                    "1 <= 'T' <= 10",
                    "1 <= 'N' <= 1000",
                    "'N' - 1 <= 'M' <= 2000",
                    "1 <= 'C' <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "n = 4, m = 4, road = [[1, 2, 3], [1, 4, 5], [2, 3, 1], [3, 4, 8]]",
                        "output": "[[1, 2, 3], [2, 3, 1], [1, 4, 5]]",
                        "explanation": "The minimum cost to connect all 4 states is achieved by selecting roads (1, 2), (2, 3), and (1, 4) with a total cost of 3 + 1 + 5 = 9. The selected roads form a Minimum Spanning Tree."
                    },
                    {
                        "input": "n = 3, m = 3, road = [[1, 2, 5], [2, 3, 4], [3, 1, 2]]",
                        "output": "[[2, 3, 4], [3, 1, 2]]",
                        "explanation": "The minimum cost to connect all 3 states is achieved by selecting roads (2, 3) and (3, 1) with a total cost of 4 + 2 = 6. These roads form a Minimum Spanning Tree."
                    },
                    {
                        "input": "n = 5, m = 6, road = [[1, 2, 10], [1, 3, 15], [2, 4, 20], [2, 5, 25], [3, 4, 30], [4, 5, 35]]",
                        "output": "[[1, 2, 10], [1, 3, 15], [2, 4, 20], [2, 5, 25]]",
                        "explanation": "Choosing edges (1,2), (1,3), (2,4), (2,5) gives the minimum cost of 10+15+20+25 = 70 to connect all nodes."
                    },
                    {
                        "input": "n = 2, m = 1, road = [[1, 2, 100]]",
                        "output": "[[1, 2, 100]]",
                        "explanation": "Only one edge exists, so it must be chosen to connect the two states."
                    },
                    {
                        "input": "n = 6, m = 7, road = [[1, 2, 1], [2, 3, 2], [3, 4, 3], [4, 5, 4], [5, 6, 5], [1, 6, 10], [2, 5, 11]]",
                        "output": "[[1, 2, 1], [2, 3, 2], [3, 4, 3], [4, 5, 4], [5, 6, 5]]",
                        "explanation": "The edges (1, 2), (2, 3), (3, 4), (4, 5) and (5, 6) already connect all nodes. The alternatives are higher cost."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The problem wants us to find a minimum spanning tree for the country. So, the idea is to use Prim\u2019s algorithm to find the minimum spanning tree.</p>",
            "<p>The idea is to reduce the time for searching the minimum weight state. We can use <strong>set</strong> to maintain weights of states.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}