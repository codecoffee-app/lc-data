{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7177,
            "title": "Minimum Cost to Destination",
            "titleSlug": "minimum-cost-to-destination_630411",
            "content": "<h4 id=\"you-have-been-given-an-n-m-matrix-where-there-are-n-rows-and-m-columns-filled-with-0s-and-1s\">You have been given an N*M matrix where there are &#39;N&#39; rows and &#39;M&#39; columns filled with &#39;0s&#39; and &#39;1s&#39;.</h4>\n\n<p><br></p>\n\n<h4 id=\"1-means-you-can-use-the-cell-and-0-means-the-cell-is-blocked-you-can-move-in-the-4-following-directions-from-a-particular-position-i-j\">&#39;1&#39; means you can use the cell, and &#39;0&#39; means the cell is blocked. You can move in the 4 following directions from a particular position (i, j):</h4>\n\n<pre><code>1. Left - (i, j-1)\n2. Right - (i, j+1)\n3. Up - (i-1, j)\n4. Down - (i+1, j)\n</code></pre>\n\n<h4 id=\"now-for-moving-in-the-up-and-down-directions-it-costs-you-1-and-moving-to-the-left-and-right-directions-are-free-of-cost\">Now, for moving in the up and down directions, it costs you $1, and moving to the left and right directions are free of cost.</h4>\n\n<h4 id=\"you-have-to-calculate-the-minimum-cost-to-reach-x-y-from-0-0-where-x-is-the-row-number-and-y-is-the-column-number-of-the-destination-cell-if-it-is-impossible-to-reach-the-destination-print-1\">You have to calculate the minimum cost to reach (X, Y) from (0, 0) where &#39;X&#39; is the row number and &#39;Y&#39; is the column number of the destination cell. If it is impossible to reach the destination, print -1.</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains two integer values, &#39;N&#39; and &#39;M&#39;, separated by a single space. They represent the &#39;rows&#39; and &#39;columns&#39; respectively, for the two-dimensional array/list.\n\nThe second line onwards, the next &#39;N&#39; lines or rows represent the i-th row values.\n\nEach of the ith row constitutes &#39;M&#39; column values separated by a single space.\n\nThe next and the final line contains two single space separated Integers &#39;X&#39; and &#39;Y&#39; where &#39;X&#39; is the row number and &#39;Y&#39; is the column number of the destination cell.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Print the minimum cost required to reach the destination (X, Y) from (0, 0).\nIf it is impossible to reach the destination, print -1.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. You are not required to print the output explicitly, it has already been taken care of. Just implement the given function.\n\n2. &#39;X&#39; and &#39;Y&#39; are 0-based indexing. \n\n3. matrix[0][0] will always be 1.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^3\n1 &lt;= M &lt;= 10^3\n0 &lt;= matrix[i][j] &lt;= 1\n0 &lt;= X &lt; N\n0 &lt;= Y &lt; M\n\nwhere &#39;N&#39; represents the number of rows, &#39;M&#39; represents the number of columns, &#39;matrix[i][j]&#39; represents the elements of the matrix, and &#39;X&#39; and &#39;Y&#39; represents the coordinates of the destination point.\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>4 4\n1 0 1 0\n1 1 0 1\n0 0 0 1\n1 1 0 1\n3 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>-1\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">\u00a0Explanation to Sample Input 1 :</h5>\n\n<pre><code>It is impossible to reach (3, 3) from (0, 0), so Output is -1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>5 5\n1 0 1 0 0\n1 0 1 1 1\n1 1 1 0 1\n0 0 0 0 1\n1 1 1 1 1\n3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-2\">\u00a0Explanation to Sample Input 2 :</h5>\n\n<pre><code>The optimal path to reach (3, 4) from (0,0) is :\n(0, 0) -&gt; (1, 0) -&gt; (2, 0) -&gt; (2, 1) -&gt; (2, 2) -&gt; (1, 2) -&gt; (1, 3) -&gt; (1, 4) -&gt; (2, 4) -&gt; (3, 4)\nSo the cost is : 1 + 1 + 0 + 0 + 1 + 0 + 0 + 1 + 1 = 5\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an N*M matrix where each cell is either '0' (blocked) or '1' (usable). You can move from cell (i, j) to (i, j-1) (Left - cost 0), (i, j+1) (Right - cost 0), (i-1, j) (Up - cost 1), or (i+1, j) (Down - cost 1).  Find the minimum cost to reach cell (X, Y) from (0, 0). The starting cell (0,0) will always be 1. If it is impossible to reach (X, Y), return -1.",
                "constraints": [
                    "1 <= N <= 10^3",
                    "1 <= M <= 10^3",
                    "0 <= matrix[i][j] <= 1",
                    "0 <= X < N",
                    "0 <= Y < M",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "4 4\n1 0 1 0\n1 1 0 1\n0 0 0 1\n1 1 0 1\n3 3",
                        "output": "-1",
                        "explanation": "It is impossible to reach (3, 3) from (0, 0) because the path is blocked by '0' cells."
                    },
                    {
                        "input": "5 5\n1 0 1 0 0\n1 0 1 1 1\n1 1 1 0 1\n0 0 0 0 1\n1 1 1 1 1\n3 4",
                        "output": "5",
                        "explanation": "The optimal path to reach (3, 4) from (0,0) has a cost of 5.  An example path is (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) -> (1, 2) -> (1, 3) -> (1, 4) -> (2, 4) -> (3, 4) with cost 1 + 1 + 0 + 0 + 1 + 0 + 0 + 1 + 1 = 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to explore all the possibilities, i.e. going in all four directions and find the minimum cost.</p>",
            "<p>Try to move step by step from the cell which possesses the least cost maintaining a data structure to get the cheapest cell in faster complexity. Think about using BFS.</p>",
            "<p>Try to exploit the observation that we can only have 0 or 1 as our cost from one cell to another. Try using some other Data Structure with better time complexity to fulfil our needs.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}