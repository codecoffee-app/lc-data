{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10016,
            "title": "Minimum cost to make string valid",
            "titleSlug": "minimum-cost-to-make-string-valid_1115770",
            "content": "<h4 id=\"ninja-has-been-given-a-string-str-containing-either-or-str-is-called-valid-if-all-the-brackets-are-balanced-formally-for-each-opening-bracket-there-must-be-a-closing-bracket-right-to-it\">Ninja has been given a string \u2018STR\u2019 containing either \u2018{\u2019 or \u2018}\u2019. &#39;STR\u2019  is called valid if all the brackets are balanced. Formally for each opening bracket, there must be a closing bracket right to it.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>\u201c{}{}\u201d, \u201c{{}}\u201d, \u201c{{}{}}\u201d are valid strings while \u201c}{}\u201d, \u201c{}}{{}\u201d, \u201c{{}}}{\u201c are not valid strings.\n</code></pre>\n\n<h4 id=\"ninja-wants-to-make-str-valid-by-performing-some-operations-on-it-in-one-operation-he-can-convert-into-or-vice-versa-and-the-cost-of-one-such-operation-is-1\">Ninja wants to make \u2018STR\u2019 valid by performing some operations on it. In one operation, he can convert \u2018{\u2019 into \u2018}\u2019 or vice versa, and the cost of one such operation is 1.</h4>\n\n<h4 id=\"your-task-is-to-help-ninja-determine-the-minimum-cost-to-make-str-valid\">Your task is to help Ninja determine the minimum cost to make \u2018STR\u2019 valid.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>Minimum operations to make \u2018STR\u2019 =  \u201c{{\u201c valid is 1.\n</code></pre>\n\n<p>In one operation, we can convert \u2018{\u2019 at index \u20181\u2019 (0-based indexing) to \u2018}\u2019. The \u2018STR\u2019 now becomes &quot;{}&quot; which is a valid string. </p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Return -1 if it is impossible to make \u2018STR\u2019 valid.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe only line of each test case contains a string &#39;STR&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the minimum cost needed to make \u2018STR\u2019 valid.\n\nPrint -1 if it is impossible to make \u2018STR\u2019 valid.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= |STR| &lt;= 10^5\nSTR[i] = \u2018{\u2019 or \u2018}\u2019\n\nTime Limit: 1 sec \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n{{{}\n{{}{}}\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case:\nThe two valid strings that can be obtained from  \u2018STR\u2019 using minimum operations \u201c{{}}\u201d   and \u201c{}{}\u201d. Ninja can transform \u2018STR\u2019 to \u201c{{}}\u201d by performing the following operations:\nConvert \u2018{\u2019 at index 2 to \u2018}\u2019.\n\nNinja can transform \u2018STR\u2019 to \u201c{}{}\u201d by performing the following operations:\nConvert \u2018{\u2018 at index 1 to \u2018}\u2019.\nThe minimum number of operations in transforming \u2018STR\u2019 to either of the two valid strings is 1.So, the total cost is 1.\n\nFor the second test case:\nGiven \u2018STR\u2019 is already valid so the minimum number of \noperations required is 0.\nSo, the total cost is 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n{}}{}}\n{{{{\n{{{}}\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n2\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 244,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'STR' containing only '{' and '}', determine the minimum cost to make 'STR' a valid string of balanced brackets. A string is valid if each opening bracket has a corresponding closing bracket to its right. The cost of converting a '{' to '}' or vice versa is 1. If it is impossible to make the string valid, return -1.",
                "constraints": [
                    "1 <= T <= 100",
                    "0 <= |STR| <= 10^5",
                    "STR[i] = '{' or '}'",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "{{{}}",
                        "output": "-1",
                        "explanation": null
                    },
                    {
                        "input": "{{{}",
                        "output": "1",
                        "explanation": "The minimum operations to make \u2018STR\u2019 = \u201c{{{}\u201d valid is 1. We can convert \u2018{\u2019 at index 2 to \u2018}\u2019. The \u2018STR\u2019 now becomes \u201c{{}}\u201d which is a valid string."
                    },
                    {
                        "input": "{{}{}}",
                        "output": "0",
                        "explanation": "Given \u2018STR\u2019 is already valid so the minimum number of operations required is 0."
                    },
                    {
                        "input": "{}}{}}",
                        "output": "1",
                        "explanation": null
                    },
                    {
                        "input": "{{{{",
                        "output": "2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Brute Force</p>",
            "<p>Try to use Stack in this problem</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity : O(|STR|)\n    Space Complexity : O(|STR|)\n\n    Where |STR| is the length of STR.\n*/\n\n#include<stack>\n\nint findMinimumCost(string str)\n{\n\tint n = str.length();\n\n\t// If lenght is odd then it is impossible to make str valid.\n\tif (n % 2 == 1)\n\t{\n\t\treturn -1;\n\t}\n\n\t// To store invalid parts.\n\tstack<char> st;\n\n\tfor (int i = 0 ; i < n ; i++)\n\t{\n\t\tif (str[i] == '}' && !st.empty())\n\t\t{\n\t\t\tif (st.top() == '{')\n\t\t\t{\n\t\t\t\t// Remove the valid part in the stack.\n\t\t\t\tst.pop();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Keep the invalid part in the stack.\n\t\t\t\tst.push(str[i]);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Keep the invalid part in the stack.\n\t\t\tst.push(str[i]);\n\t\t}\n\t}\n\n\tint p = 0, q = 0;\n\n\t// Calculate the opening and closing brackets\n\twhile (!st.empty())\n\t{\n\t\tif (st.top() == '{')\n\t\t{\n\t\t\tp++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tq++;\n\t\t}\n\t\tst.pop();\n\t}\n\n\treturn ((p + 1) / 2) + ((q + 1) / 2);\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n\n    Time Complexity : O(|STR|)\n    Space Complexity : O(|STR|)\n\n    Where |STR| is the length of STR.\n\n'''\n\nfrom collections import deque\n\ndef findMinimumCost(str):\n    n = len(str)\n    \n    # If lenght is odd then it is impossible to make str valid.\n    if(n % 2 == 1):\n        return -1\n\n    # To store invalid parts.\n    st = deque()\n\n    for i in range(n):\n\n        if(str[i] == '}' and len(st) != 0):\n\n            if(st[len(st) - 1] == '{'):\n\n                # Remove the valid part in the stack.\n                st.pop()\n            else:\n\n                # Keep the invalid part in the stack.\n                st.append(str[i])\n        else:\n            # Keep the invalid part in the stack.\n            st.append(str[i])\n    \n    p, q = 0, 0\n\n    # Calculate the opening and closing brackets\n    while(len(st) != 0):\n\n        if(st[len(st) - 1] == '{'):\n            p += 1\n\n        else:\n            q += 1\n\n        st.pop()\n\n    return ((p + 1) // 2) + ((q + 1) // 2)",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time Complexity : O(|STR|)\n    Space Complexity : O(|STR|)\n\n    Where |STR| is the length of STR.\n*/\n\nimport java.util.Deque;\nimport java.util.LinkedList;\n\npublic class Solution \n{\n\tpublic static int findMinimumCost(String str) \n\t{\n\t\tint n = str.length();\n\n\t\t// If lenght is odd then it is impossible to make str valid.\n\t\tif (n % 2 == 1) \n\t\t{\n\t\t\treturn -1;\n\t\t}\n\n\t\t// To store invalid parts.\n\t\tDeque<Character> open = new <Character>LinkedList();\n\t\tDeque<Character> close = new <Character>LinkedList();\n\n\t\tint price = 0;\n\n\t\tfor (int i = 0; i < str.length(); i++) \n\t\t{\n\t\t\tif (str.charAt(i) == '}') \n\t\t\t{\n\n\t\t\t\tif (open.isEmpty()) \n\t\t\t\t{\n\t\t\t\t\t// Keep the invalid part in the stack.\n\t\t\t\t\tprice++;\n\t\t\t\t\topen.add(str.charAt(i));\n\t\t\t\t} \n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\t// Remove the valid part in the stack.\n\t\t\t\t\topen.removeLast();\n\t\t\t\t}\n\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\t// Keep the invalid part in the stack.\n\t\t\t\topen.add(str.charAt(i));\n\t\t\t}\n\n\n\t\t}\n\n\t\tif (open.isEmpty()) \n\t\t{\n\n\t\t\tif (close.size() % 2 == 1) \n\t\t\t{\n\t\t\t\treturn -1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn (close.size() / 2) + price;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\n\t\t\tif (open.size() % 2 == 1) \n\t\t\t{\n\t\t\t\treturn -1;\n\t\t\t} \n\t\t\telse \n\t\t\t{\n\t\t\t\treturn (open.size() / 2) + price;\n\t\t\t}\n\n\t\t}\n\t}\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}