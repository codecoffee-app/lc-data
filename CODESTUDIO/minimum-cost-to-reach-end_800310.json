{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8077,
            "title": "Minimum cost to reach end",
            "titleSlug": "minimum-cost-to-reach-end_800310",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-n-integers-and-an-integer-k-you-can-move-from-any-index-i-to-index-j-if-j-i-k-the-cost-of-moving-from-one-index-i-to-the-other-index-j-is-abs-arr-j-arr-i-your-task-is-to-find-the-minimum-cost-to-reach-the-end-of-the-array-from-the-beginning-of-the-array-when-a-maximum-jump-of-k-is-allowed\">You are given an array \u201cARR\u201d of &#39;N&#39; integers and an integer &#39;K&#39;. You can move from any index &#39;i&#39; to index &#39;j&#39; if j \u2264 i + K. The cost of moving from one index &#39;i&#39; to the other index &#39;j&#39; is abs(ARR[j] \u2013 ARR[i]). Your task is to find the minimum cost to reach the end of the array from the beginning of the array when a maximum jump of &#39;K&#39; is allowed.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>If the given array is [10, 3, 40, 5, 25] and K is 2 then the minimum cost would be 29. \nSince K = 2, the optimal way to reach the end of the array with minimum cost is to take a jump to 1st index from 0th index with the cost of abs(3 - 10)  i.e 7 and then we take a jump of 2 from 1st index to the 3rd index with the cost of abs(5 - 3). i.e 2. Then we take a jump of 1 from 3rd index to the last index with the cost of abs(25 - 5) .ie 20. \nTherefore the minimum cost to reach the end of the array is (7 + 2 + 20) i.e 29.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains a single integer &#39;T&#39;, representing the number of test cases or queries to be run.\nThen the &#39;T&#39; test cases follow. \n\nThe first line of each test case contains two single space-separated integers &#39;N&#39;, and &#39;K&#39;, denoting the size of the array and the maximum jump allowed from any index.\n\nThe second line of each test case contains &#39;N&#39; single space-separated integers, elements of the array.  \n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the minimum cost, in a single line.   \n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 1000\n1 &lt;= K &lt; N\n0 &lt;= ARR[i] &lt;= 10 ^ 6\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n5 3\n1 3 4 5 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">Explanation to Sample Input 1 :</h5>\n\n<pre><code>Since K = 3, the optimal way to reach the end of the array with minimum cost is to take a jump to 1st index from 0th index with the cost of abs(3-1)  i.e 2 and then we take a jump of 3 from 1st index to the last index with the cost of abs(2-3). I.e 1 Therefore the minimum cost to reach the end of the array is (2+1) i.e 3\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n7 3\n20 30 40 25 15 20 28\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>8\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-2\">Explanation to Sample Input 2 :</h5>\n\n<pre><code>Since K = 3, the optimal way to reach the end of the array with minimum cost is to take a jump to 3rd index from 0th index with the cost of abs(25-20)  i.e 5 and again we take a jump of 3 from 3rd index to the last index with the cost of abs(28-25). I.e 3 Therefore the minimum cost to reach the end of the array is (5+3) i.e 8.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the minimum cost to reach the end of the array from the beginning. You can move from index i to index j if j <= i + k, where k is a given integer. The cost of moving from index i to index j is the absolute difference between the values at those indices. Your task is to calculate the minimum cumulative cost to reach the end of the array (index n-1) from the start (index 0).",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 1000",
                    "1 <= K < N",
                    "0 <= ARR[i] <= 10 ^ 6"
                ],
                "testcases": [
                    {
                        "input": "n = 5, arr=[1, 3, 4, 5, 2], k = 3",
                        "output": "3",
                        "explanation": "The optimal path is 0 -> 1 -> 4.  Cost is abs(3-1) + abs(2-3) = 2 + 1 = 3."
                    },
                    {
                        "input": "n = 7, arr=[20, 30, 40, 25, 15, 20, 28], k = 3",
                        "output": "8",
                        "explanation": "The optimal path is 0 -> 3 -> 6. Cost is abs(25-20) + abs(28-25) = 5 + 3 = 8."
                    },
                    {
                        "input": "n = 5, arr=[10, 3, 40, 5, 25], k = 2",
                        "output": "29",
                        "explanation": "The optimal path is 0 -> 1 -> 3 -> 4. Cost is abs(3-10) + abs(5-3) + abs(25-5) = 7 + 2 + 20 = 29."
                    },
                    {
                        "input": "n = 4, arr=[1, 5, 2, 7], k = 1",
                        "output": "11",
                        "explanation": "The optimal path is 0 -> 1 -> 2 -> 3. Cost is abs(5-1) + abs(2-5) + abs(7-2) = 4 + 3 + 5 = 12. Another possible path is 0 -> 1 -> 3 which results in cost of abs(5-1) + abs(7-5) = 4 + 2 = 6. Another is 0 -> 2 -> 3: abs(2-1) + abs(7-2) = 1 + 5 = 6. Path: 0 -> 3, abs(7-1) = 6. Optimal: 0->2->3 or 0->1->3 (same cost of 6). Oops, I am wrong. The right path is 0 -> 1 -> 3. abs(5-1) + abs(7-5) = 4 + 2 = 6"
                    },
                    {
                        "input": "n = 3, arr=[1, 2, 3], k = 1",
                        "output": "2",
                        "explanation": "The optimal path is 0 -> 1 -> 2. Cost is abs(2-1) + abs(3-2) = 1 + 1 = 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a solution to use bottom-up dynamic programming.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}