{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14309,
            "title": "Minimum Cost to travel",
            "titleSlug": "minimum-cost-to-travel_2109208",
            "content": "<h4 id=\"you-are-given-an-undirected-weighted-graph-consisting-of-n-vertices-and-m-edges-your-task-is-to-select-n-1-edge-such-that-a-path-exists-between-each-pair-of-vertices-and-the-weight-of-the-spanning-tree-of-the-graph-is-minimum\">You are given an undirected, weighted graph consisting of  \u2018N\u2019 vertices and \u2018M\u2019 edges. Your task is to select &#39;N&#39; - 1 edge such that a path exists between each pair of vertices and the weight of the spanning tree of the graph is minimum.</h4>\n\n<h4 id=\"a-minimum-spanning-tree-is-a-sub-graph-of-an-undirected-connected-graph-which-includes-all-the-vertices-of-the-graph-with-a-minimum-possible-sum-of-the-weight-of-edges\">A minimum spanning tree is a sub-graph of an undirected connected graph, which includes all the vertices of the graph with a minimum possible sum of the weight of edges.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>Consider a graph having 4 vertices. These 4 vertices are connected by 5 bidirectional edges given as :\n1 --- 2 with weight = 8\n2 --- 3 with weight = 6\n3 --- 4 with weight = 5\n1 --- 4 with weight = 2\n1 --- 3 with weight = 4\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000487_1627978418_first1-6789.jpg\" alt=\"diagram\"></p>\n\n<pre><code>Now, the best way to choose 3 edges is:\n2 --- 3 with weight = 6\n1 --- 4 with weight = 2\n1 --- 3 with weight = 4\nThe weight of the minimum spanning tree is 2 + 4 + 6, i.e., 12.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000488_1627978430_first2-6791.jpg\" alt=\"diagram\"></p>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; denoting the number of test cases. \n\nThe first line of each test case or query contains two space-separated integers &#39;N&#39; and \u2018M\u2019 representing the number of vertices and edges in the graph. \n\nThe next &#39;N&#39; lines of every test case contain three single space-separated integers \u2018A\u2019, \u2018B\u2019 and \u2018C\u2019, representing an edge between the vertices &#39;A&#39; and &#39;B&#39; and &#39;C&#39; denoting the weight of the edge.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print N - 1 line each containing 3 space-separated integers &#39;A&#39;, &#39;B&#39;, and &#39;C&#39; representing the edge you have chosen and the weight to traverse that edge.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 10\n1 &lt;= &#39;N&#39; &lt;= 1000\nN - 1 &lt;= &#39;M&#39; &lt;= 2000\n1 &lt;= &#39;C&#39; &lt;= 10^6 \n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 3 \n1 2 2\n2 3 3\n1 3 4\n4 6\n1 2 2\n2 3 3\n3 4 4\n4 1 1\n1 3 4\n2 4 3  \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 2 2\n2 3 3\n1 2 2\n2 3 3\n4 1 1 \n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For test case 1:\nHere &#39;N&#39; = 3, So we need to pick 2 edges such that all vertices are visited, and weight is minimum. Now the possible ways are.\n1. [(1, 2), (2, 3)] : In this case, the weight of the spanning tree is 2 + 3 = 5.\n2. [(1, 2), (1, 3)] : In this case, the weight of the spanning tree is 2 + 4 = 6.\n3. [(2, 3), (1, 3)] : In this case, the weight of the spanning tree is 4 + 3 = 7.\n\nClearly, the weight is minimal in the first case so we pick [(1, 2), (2, 3)] with the weight 5. \n\nFor test case 2:\nHere &#39;N&#39; = 4, So we need to pick 3 edges such that all vertices are visited, and weight is minimum. Now the possible ways are.\n1. [(1, 2), (2, 3), (3, 4)] : In this case, the weight of the spanning tree is 2 + 3 + 4 = 9.\n2. [(1, 2), (2, 3), (4, 1)] : In this case, the weight of the spanning tree is 2 + 3 + 1 = 6.\n3. [(1, 2), (2, 3), (2, 4)] : In this case, the weight of the spanning tree is 2 + 3 + 3 = 8.\n4. [(1, 2), (4, 1), (3, 4)] : In this case, the weight of the spanning tree is 2 + 1 + 4 = 7.\n5. [(1, 2), (1, 3), (3, 4)] : In this case, the weight of the spanning tree is 2 + 4 + 4 = 10.\n6. [(1, 2), (2, 4), (3, 4)] : In this case, the weight of the spanning tree is 2 + 3 + 4 = 9.\n7. [(1, 2), (4, 1), (1, 3)] : In this case, the weight of the spanning tree is 2 + 1 + 4 = 7.\n8. [(1, 2), (1, 3), (2, 4)] : In this case, the weight of the spanning tree is 2 + 4 + 3 = 9.\n  and so on. \n\nClearly, the weight is minimal in the second case, so we pick [(1, 2), (2, 3), (4, 1)] with the weight 6. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2 2\n1 2 1\n2 2 4\n3 2\n1 2 1\n2 3 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 2 1\n1 2 1\n2 3 3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected, weighted graph with 'N' vertices and 'M' edges, the goal is to find a set of 'N' - 1 edges that connect all vertices while minimizing the total weight of the selected edges. This set of edges forms a minimum spanning tree.",
                "constraints": [
                    "1 <= 'T' <= 10 (Number of test cases)",
                    "1 <= 'N' <= 1000 (Number of vertices)",
                    "N - 1 <= 'M' <= 2000 (Number of edges)",
                    "1 <= 'C' <= 10^6 (Weight of each edge)",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 3 \n1 2 2\n2 3 3\n1 3 4",
                        "output": "1 2 2\n2 3 3",
                        "explanation": "For N=3, we need to select 2 edges.  Selecting edges (1,2) with weight 2 and (2,3) with weight 3 gives a total weight of 5.  Other possible combinations like (1,2) & (1,3) (weight 6), or (2,3) & (1,3) (weight 7) have higher total weights. Hence, the minimum spanning tree consists of edges (1,2) and (2,3)."
                    },
                    {
                        "input": "4 6\n1 2 2\n2 3 3\n3 4 4\n4 1 1\n1 3 4\n2 4 3",
                        "output": "1 2 2\n2 3 3\n4 1 1",
                        "explanation": "For N=4, we need to select 3 edges.  Selecting edges (1,2) with weight 2, (2,3) with weight 3 and (4,1) with weight 1 gives a total weight of 6, which is the minimum possible weight for connecting all vertices. Hence the edges printed out are from the selected combination"
                    },
                    {
                        "input": "2 2\n1 2 1\n2 2 4",
                        "output": "1 2 1",
                        "explanation": null
                    },
                    {
                        "input": "3 2\n1 2 1\n2 3 3",
                        "output": "1 2 1\n2 3 3",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}