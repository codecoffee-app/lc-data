{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10819,
            "title": "Minimum Cost Tree From Leaf Nodes",
            "titleSlug": "minimum-cost-tree-from-leaf-nodes_1266047",
            "content": "<h4 id=\"given-an-array-list-arr-of-size-n-the-task-is-to-generate-a-complete-binary-tree-in-such-a-way-that-the-sum-of-the-non-leaf-nodes-is-minimum-whereas-values-of-the-leaf-node-correspond-to-the-array-elements-in-an-in-order-traversal-of-the-tree-and-value-of-each-non-leaf-node-corresponds-to-the-product-of-the-largest-leaf-value-in-the-left-sub-tree-and-right-sub-tree\">Given an array/list \u2018ARR&#39; of size \u2018N\u2019, the task is to generate a Complete Binary Tree in such a way that the sum of the non-leaf nodes is minimum, whereas values of the leaf node correspond to the array elements in an In-order Traversal of the tree and value of each non-leaf node corresponds to the product of the largest leaf value in the left sub-tree and right sub-tree.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Let&#39;s say we have an &#39;ARR&#39; = {1, 2, 3, 4}, so the possible complete \nbinary trees will be:\n   4                                                          12                      \n  /  \\                                                       /  \\\n 1   8                                                      6    4\n     / \\                                                   /  \\\n   2   12                                                  2   3   \n        /  \\                                              /  \\\n        3   4                                             1   2\n  Sum of non-leaf nodes  = 24                    Sum of non-leaf nodes = 20\n  So the required answer you have to return is 20.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. \n\nThe first line of every test case contains an integer \u2018N\u2019 denoting the number of array elements.\n\nThe second line of every test case contains &#39;N&#39; space-separated integers denoting the inorder traversal of leaf nodes of a complete binary tree.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, return the minimum possible sum of non-leaf nodes of a binary tree.\n\nOutput for each test case is printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1.You do not need to print anything, it has already been taken care of. Just return the minimum possible sum of all non-leaf nodes.\n\n2. It is guaranteed that the answer fits into a 32-bit signed integer (ie. it is less than 2^31).\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 40\n1 &lt;= ARR[i] &lt;= 15\n\nWhere \u2018ARR[i]\u2019 represents the array elements.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\n1 2 3 4\n3\n6 2 4  \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>20\n32  \n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h5>\n\n<pre><code>In test case 1, It is already explained above in the example.\n\nIn test case 2, There are two possible trees. The first has a non-leaf node sum of 36, and the second has a non-leaf node sum of 32. So the required answer is 32\n\n       24                24\n      /  \\              /  \\\n     12   4             6    8\n     /\\                     / \\\n   6    2                  2   4\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3\n5 2 3\n4\n5 3 2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code> 21\n 23\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of leaf node values representing an in-order traversal of a complete binary tree, determine the minimum sum of the non-leaf nodes. The value of each non-leaf node is the product of the largest leaf value in its left subtree and the largest leaf value in its right subtree.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 40",
                    "1 <= ARR[i] <= 15"
                ],
                "testcases": [
                    {
                        "input": "n = 4, arr = [1, 2, 3, 4]",
                        "output": "20",
                        "explanation": "Possible trees are shown in the problem description. The tree with non-leaf sum 20 yields the minimum cost."
                    },
                    {
                        "input": "n = 3, arr = [6, 2, 4]",
                        "output": "32",
                        "explanation": "There are two possible trees. The first has a non-leaf node sum of 36, and the second has a non-leaf node sum of 32. So the required answer is 32\n\n       24                24\n      /  \\              /  \\\n     12   4             6    8\n     /\\                     / \\\n   6    2                  2   4"
                    },
                    {
                        "input": "n = 3, arr = [5, 2, 3]",
                        "output": "21",
                        "explanation": "Possible trees:\n\n      10       15\n     /  \\      / \\\n    5   6      10  3\n       / \\     / \\\n      2   3   5   2\nsums 10 + 6 = 16 sums 15 + 10 = 25\nAlternatively\n   15\n  /  \\\n 5   6\n    / \\\n    2 3\nRoot = max(5) * max(2, 3) = 5 * 3 = 15\nLeft Subtree max = 5\nRight Subtree Parent node = max(2) * max(3) = 6\nThen 15 + 6 = 21 is best case"
                    },
                    {
                        "input": "n = 4, arr = [5, 3, 2, 1]",
                        "output": "23",
                        "explanation": "Consider the tree formation (5,3,(2,1))\nThis would give 2*1 = 2\n3*2 = 6\n5*6 = 30\n30 + 6 = 36\nNext consider (5,(3,2),1)\n3*2 = 6\n5*1 = 5\n5*6 = 30\n30+6+5 = 41\nNow consider ((5,3),2,1)\n5*3 = 15\n2*1 = 2\n15*2 = 30\n15 + 2 + 30 = 47\nNow consider (5,3,2,1) can be:\n(5, (3, (2,1))) --> 2*1 + 3*2 + 5*3 = 2 + 6 + 15 = 23\n((5,3), (2,1))--> 5*3 + 2*1 + 15*2 = 15 + 2 + 30 = 47"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to solve the problem by breaking it into subproblems(recursive approach)</p>",
            "<ul><li>Try to solve the problem by breaking it into subproblems and also storing the value of each of the subproblems(recursive approach + memoization).</li></ul>",
            "<p>Try to solve the problem iteratively(Iterative dynamic programming + memoization).</p>",
            "<p>Try to think greedily and implicit stack-based approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}