{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7300,
            "title": "Minimum Cost",
            "titleSlug": "minimum-cost_630564",
            "content": "<h4 id=\"you-are-given-two-strings-str1-and-str2-find-the-minimum-operations-required-to-convert-str1-into-str2\">You are given two strings &#39;str1&#39; and &#39;str2&#39;. Find the minimum operations required to convert str1 into str2.</h4>\n\n<h5 id=\"an-operation-is-defined-as\">An Operation is defined as:</h5>\n\n<pre><code>A character from an index of a string(str1) is put at the end of it, is defined as a single operation.\n</code></pre>\n\n<h5 id=\"note\">\u00a0Note :</h5>\n\n<pre><code>You cannot perform any operation on the string, str2.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains a single integer &#39;T&#39; denoting the number of test cases or queries to be run. \n\nThe first line of each test case contains a string, representing  str1. \n\nThe second line of each test case contains a string, representing str2. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case/query, print the minimum number of operations required to convert str1 into str2. Print -1 if it is not possible.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print the output explicitly, it has already been taken care of. Just implement the function.\n\nInput strings contain only lower case and uppercase letters and do not contain blank spaces.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n1 &lt;= M &lt;= 10^5\nWhere N and M are the lengths of the input strings &#39;str1&#39;, and &#39;str2&#39; respectively.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\nABC\nACB\nAbcD\nbcAD\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, we can move &#39;B&#39; to the end of str1 so str1 becomes &#39;ACB&#39; which is equal to the str2. Hence 1 operation was needed.\n\nFor the second test case, move &#39;A&#39; to the end of str1 so new string becomes &#39;bcDA&#39;, Now move &#39;D&#39; to the end so we have now str1 = &#39;bcAD&#39; which is equal to the str2. Hence 2 operations were needed.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\nIFDfxPCdNvCNXPe\nNFfPICxeCNDdXPv\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>14\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 49,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `str1` and `str2`, determine the minimum number of operations required to transform `str1` into `str2`. An operation consists of moving a character from any index in `str1` to the end of `str1`.  You are not allowed to modify `str2`. If it is not possible to convert `str1` to `str2`, return -1.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5, where N is the length of str1",
                    "1 <= M <= 10^5, where M is the length of str2"
                ],
                "testcases": [
                    {
                        "input": "str1 = \"ABC\", str2 = \"ACB\"",
                        "output": "1",
                        "explanation": "Move 'B' to the end of str1. str1 becomes 'ACB', which is equal to str2. One operation is required."
                    },
                    {
                        "input": "str1 = \"AbcD\", str2 = \"bcAD\"",
                        "output": "2",
                        "explanation": "Move 'A' to the end of str1, making str1 = 'bcDA'. Then, move 'D' to the end of str1, resulting in str1 = 'bcAD'. Two operations are required."
                    },
                    {
                        "input": "str1 = \"IFDfxPCdNvCNXPe\", str2 = \"NFfPICxeCNDdXPv\"",
                        "output": "14",
                        "explanation": "14 operations are required to transform 'IFDfxPCdNvCNXPe' to 'NFfPICxeCNDdXPv' using the specified operation."
                    },
                    {
                        "input": "str1 = \"ABCD\", str2 = \"ACBD\"",
                        "output": "1",
                        "explanation": "Move 'B' to the end. 'ABCD' becomes 'ACDB', move D to the end to become 'ACBD'. only one step. remove D to improve efficiency"
                    },
                    {
                        "input": "str1 = \"ABCD\", str2 = \"BCDA\"",
                        "output": "3",
                        "explanation": "Move 'A' to the end, 'BCD' to the end, 'A' to the end"
                    },
                    {
                        "input": "str1 = \"EACBD\", str2 = \"ABCDE\"",
                        "output": "4",
                        "explanation": "Multiple operations are needed to re-arrange 'EACBD' to 'ABCDE'"
                    },
                    {
                        "input": "str1 = \"AB\", str2 = \"BA\"",
                        "output": "1",
                        "explanation": "One swap to make AB into BA"
                    },
                    {
                        "input": "str1 = \"ABC\", str2 = \"BAC\"",
                        "output": "1",
                        "explanation": "Convert ABC to BAC by moving A to end: 'BCA' move B to end 'CAB' move C to end 'ABC' "
                    },
                    {
                        "input": "str1 = \"ABCD\", str2 = \"ABCE\"",
                        "output": "-1",
                        "explanation": "Cannot form str2 with str1 operations"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think when it is possible to convert str1 into str2 and if it is possible, then how to do it in a greedy way to minimize the operations.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}