{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7533,
            "title": "Minimum depth in a Binary Tree",
            "titleSlug": "minimum-depth-in-a-binary-tree_696332",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-integers-find-the-minimum-depth-of-this-binary-tree-the-minimum-depth-of-a-binary-tree-is-the-number-of-nodes-along-the-shortest-path-from-the-root-node-down-to-the-nearest-leaf-node\">You have been given a Binary Tree of integers, find the minimum depth of this Binary Tree. The minimum depth of a Binary Tree is the number of nodes along the shortest path from the root node down to the nearest leaf node.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>A leaf is a node with no children.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>For the given binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bt-4728.JPG\" alt=\"alt text\"></p>\n\n<pre><code>Output: 2\nThe shortest path is from root node 1 to leaf node 2 which contains 2 nodes in the path. Hence, the minimum depth is 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case:\n\nPrint an integer i.e. Minimum depth of the BInary Tree.\n\nPrint output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n0 &lt;= N &lt;= 10^3  \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n1 2 3 -1 -1 -1 -1\n1 2 -1 3 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n2\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case, the given tree is\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>There are two shortest paths from the root to the leaf node i.e. {1 -&gt; 3 -&gt; 5} and {1 -&gt; 3 -&gt; 6}. Both paths contain 3 nodes, hence the minimum depth of this binary tree is 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n1 2 -1 3 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 66,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of integers, find the minimum depth of the tree. The minimum depth is defined as the number of nodes along the shortest path from the root node down to the nearest leaf node. A leaf node is a node with no children.",
                "constraints": [
                    "1 <= T <= 10^2",
                    "0 <= N <= 10^3",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1",
                        "output": "3",
                        "explanation": "The shortest paths from the root to a leaf node are {1 -> 3 -> 5} and {1 -> 3 -> 6}. Both paths contain 3 nodes, so the minimum depth is 3."
                    },
                    {
                        "input": "1 2 3 -1 -1 -1 -1",
                        "output": "2",
                        "explanation": "The shortest path is from root (1) to leaf (2 or 3). Both have a depth of 2."
                    },
                    {
                        "input": "1 2 -1 3 -1 -1 -1",
                        "output": "3",
                        "explanation": "The shortest path is {1 -> 2 -> 3} since 3 is a leaf node. The depth is 3."
                    },
                    {
                        "input": "1 2 -1 3 -1 -1 -1",
                        "output": "3",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a recursive solution in the form of minimum depth in the left and right subtrees.</p>",
            "<p>Can you use level order traversal to reach the nearest leaf node?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}