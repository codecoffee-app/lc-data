{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14874,
            "title": "Minimum Dishes",
            "titleSlug": "minimum-dishes_2280380",
            "content": "<h4 id=\"the-chef-has-received-the-order-to-make-n-dishes-represented-by-an-array-arr-where-arr-i-denotes-the-type-of-dish\">The chef has received the order to make \u2018N\u2019 dishes represented by an array \u2018Arr\u2019, where \u2018Arr[i]\u2019 denotes the type of dish.</h4>\n\n<h4 id=\"chef-has-the-liberty-to-cancel-at-most-m-orders-he-cancels-the-order-in-such-a-way-that-the-different-types-of-dishes-he-has-to-cook-are-minimized-the-chef-is-lazy-and-dumb-so-he-has-asked-you-to-help-him\">Chef has the liberty to cancel at most \u2018M\u2019 orders. He cancels the order in such a way that the different types of dishes he has to cook are minimized. The chef is lazy and dumb so he has asked you to help him.</h4>\n\n<h4 id=\"find-the-count-of-the-minimum-variety-of-dishes-that-the-chef-will-have-to-cook\">Find the count of the minimum variety of dishes that the chef will have to cook.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If N = 6, Arr = { 1, 2, 3, 1, 1, 2 } and M = 2\n\nThen the chef will have to cook at least 2 different varieties of dishes, because:\nHe may cancel the orders for both the dishes of type 2, now he left with {1, 1, 1, 3}\nHe may cancel the orders for dish type 3 and one of the orders of dish type 1, now he left with {2, 1, 1, 2}\nThere are many other ways to cancel the orders, but none of them will result in an answer less than 2, hence we will return the value 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains two integers \u2018N\u2019 and \u2018M\u2019, denoting the number of orders and the maximum number of orders the chef can cancel respectively.\n\nThe next line contains N integers, \u2018Arr[i]\u2019 denoting the type of the i&lt;sup&gt;th&lt;/sup&gt; dish.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer denoting the minimum types of dishes that the chef will have to cook.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10      \n0 &lt;= M &lt; N &lt;= 500\n0 &lt;= Arr[i] &lt;= 1\u2019000\u2019000\u2019000\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n6 2\n1 2 3 1 1 2\n4 2\n1 1 1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For test case 1 : \nWe will return 2, because:\nThe chef will cancel the orders for both the dishes of type 2, now he left with {1, 1, 1, 3}\n\nFor test case 2 : \nWe will return 1, because:\nRegardless of whether the chef cancels the order or not, we will have to cook at least 1 dish in this case.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5 4\n1 2 3 4 5\n5 3\n1 2 3 4 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "A chef needs to prepare N dishes, represented by an array Arr, where Arr[i] indicates the type of the i-th dish. The chef can cancel at most M orders. The goal is to minimize the number of different dish types the chef has to cook. Determine the minimum number of distinct dish types after canceling up to M orders.",
                "constraints": [
                    "1 <= T <= 10",
                    "0 <= M < N <= 500",
                    "0 <= Arr[i] <= 1000000000",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "6 2\n1 2 3 1 1 2",
                        "output": "2",
                        "explanation": "The chef can cancel both dishes of type 2, leaving {1, 1, 1, 3}. Another option is to cancel the dish of type 3 and one dish of type 1, resulting in {2, 1, 1, 2}. In either case, the chef needs to cook at least 2 distinct dish types."
                    },
                    {
                        "input": "4 2\n1 1 1 1",
                        "output": "1",
                        "explanation": "Regardless of which orders the chef cancels, there will always be only one distinct dish type (type 1)."
                    },
                    {
                        "input": "5 4\n1 2 3 4 5",
                        "output": "1",
                        "explanation": "The chef can cancel any four dishes, leaving only one dish type. Thus the minimum variety of dishes is 1."
                    },
                    {
                        "input": "5 3\n1 2 3 4 5",
                        "output": "2",
                        "explanation": "The chef can cancel any three dishes. For example, cancelling dishes of type 3, 4, and 5 will leave dishes of types 1 and 2, meaning the chef will have to cook two different varieties of dishes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The Chef will greedily try to cancel the orders which have the dishes with the least frequency.</p>",
            "<p>How can we avoid finding the least frequent after traversing all the other dishes? Keep in mind that we greedily will cancel the orders for the least frequent dishes.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}