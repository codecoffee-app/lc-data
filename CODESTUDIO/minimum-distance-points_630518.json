{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7286,
            "title": "Minimum distance points",
            "titleSlug": "minimum-distance-points_630518",
            "content": "<h4 id=\"you-are-given-an-array-containing-n-points-in-the-plane-the-task-is-to-find-out-the-distance-of-the-closest-points\">You are given an array containing &#39;N&#39; points in the plane. The task is to find out the distance of the closest points.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Where distance between two points (x1, y1) and (x2, y2) is calculated as [(x1 - x2) ^ 2] + [(y1 - y2) ^ 2].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer &#39;N&#39; denoting the number of points.\n\nThe next &#39;N&#39; lines contain two integers separated by a single space, where the first integer represents the x coordinate and the second integer represents the y coordinate.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The only line contains the minimum distance between the &#39;N&#39; points.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>2 &lt;= &#39;N&#39; &lt;= 10^5\n-10^5 &lt;= &#39;x&#39; &lt;= 10^5 \n-10^5 &lt;= &#39;y&#39; &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>5\n1 2\n2 3\n3 4\n5 6\n2 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h5>\n\n<pre><code>We have 2 pairs which are probable answers (1, 2) with (2, 3) and (2, 3) with (3, 4). The distance between both of them is equal to 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3\n0 0\n-3 -4\n6 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>25\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1 :</h5>\n\n<pre><code>If we choose the pairs (0, 0) and (-3, -4), the distance between them is 3^2 + 4^2 = 25. This is the optimal answer for this test case.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 23,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'N' points in a 2D plane, represented as an array of (x, y) coordinates, find the minimum squared Euclidean distance between any two distinct points in the array. The squared Euclidean distance between points (x1, y1) and (x2, y2) is calculated as (x1 - x2)^2 + (y1 - y2)^2.",
                "constraints": [
                    "2 <= N <= 10^5",
                    "-10^5 <= x <= 10^5",
                    "-10^5 <= y <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n1 2\n2 3\n3 4\n5 6\n2 1",
                        "output": "2",
                        "explanation": "The minimum squared distance is 2, found between points (1, 2) and (2, 3), or (2, 3) and (3, 4).  Distance is calculated as (2-1)^2 + (3-2)^2 = 1 + 1 = 2 in the first case and similarly (3-2)^2 + (4-3)^2 = 1 + 1 = 2 in the second case."
                    },
                    {
                        "input": "3\n0 0\n-3 -4\n6 4",
                        "output": "25",
                        "explanation": "The minimum squared distance is 25, found between points (0, 0) and (-3, -4). Distance is calculated as (-3 - 0)^2 + (-4 - 0)^2 = 9 + 16 = 25."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of brute force and return the minimum distance.</p>",
            "<p>Try to think of the divide and conquer algorithm.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}