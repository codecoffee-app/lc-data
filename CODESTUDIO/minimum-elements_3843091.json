{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 17239,
            "title": "Minimum Elements",
            "titleSlug": "minimum-elements_3843091",
            "content": "<h4 id=\"you-are-given-an-array-of-n-distinct-integers-and-an-integer-x-representing-the-target-sum-you-have-to-tell-the-minimum-number-of-elements-you-have-to-take-to-reach-the-target-sum-x\">You are given an array of \u2018N\u2019 distinct integers and an integer \u2018X\u2019 representing the target sum. You have to tell the minimum number of elements you have to take to reach the target sum \u2018X\u2019.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You have an infinite number of elements of each type.\n</code></pre>\n\n<h5 id=\"for-example\">For example</h5>\n\n<pre><code>If N=3 and X=7 and array elements are [1,2,3]. \nWay 1 - You can take 4 elements  [2, 2, 2, 1] as 2 + 2 + 2 + 1 = 7.\nWay 2 - You can take 3 elements  [3, 3, 1] as 3 + 3 + 1 = 7.\nHere, you can see in Way 2 we have used 3 coins to reach the target sum of 7.\nHence the output is 3.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T\u2019, denoting the number of test cases.\n\nThe first line of each test case will contain two space-separated integers \u2018N\u2019 and \u2018X\u2019, denoting the size of the array and the target sum.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the minimum number of coins needed to reach the target sum \u2018X\u2019, if it&#39;s not possible to reach to target then print &quot;-1&quot;.\n\nPrint a separate line for each test case.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 15\n1 &lt;= nums[i] &lt;= (2^31) - 1\n1 &lt;= X &lt;= 10000\n\nAll the elements of the \u201cnums\u201d array will be unique.\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 7\n1 2 3\n1 0\n1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code> 3\n 0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case,\nWay 1 - You can take 4 elements  [2, 2, 2, 1] as 2 + 2 + 2 + 1 = 7.\nWay 2 - You can take 3 elements  [3, 3, 1] as 3 + 3 + 1 = 7.\nHere, you can see in Way 2 we have used 3 coins to reach the target sum of 7.\nHence the output is 3.\nFor the second test case\nTo reach X = 0, you don\u2019t need to take any elements from the array.\nThe sum is already 0, so the total number of elements used is 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 4\n12 1 3\n2 11\n2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>2\n6 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 261,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of 'N' distinct integers and a target sum 'X', determine the minimum number of elements required to reach the target sum 'X'. You can use each element an infinite number of times. If it's not possible to reach the target sum, return -1. If the target sum is 0, return 0.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 15",
                    "1 <= nums[i] <= (2^31) - 1",
                    "1 <= X <= 10000",
                    "All the elements of the 'nums' array will be unique.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 7\n1 2 3",
                        "output": "3",
                        "explanation": "The array contains [1, 2, 3] and the target is 7.  The optimal solution is to use two 3s and one 1 (3 + 3 + 1 = 7), requiring a minimum of 3 elements."
                    },
                    {
                        "input": "1 0\n1",
                        "output": "0",
                        "explanation": "The target is 0.  No elements are needed to reach a sum of 0."
                    },
                    {
                        "input": "3 4\n12 1 3",
                        "output": "2",
                        "explanation": "The array contains [12, 1, 3] and the target is 4. The optimal solution is to use four 1s  (1 + 1 + 1 + 1 = 4) or one 1 and one 3 (1 + 3 = 4).  Therefore, minimum elements used is 2 by using  3 and 1."
                    },
                    {
                        "input": "2 11\n2 1",
                        "output": "6",
                        "explanation": "The array contains [2, 1] and the target is 11. We can use five 2s and one 1 (2 * 5 + 1 = 11), a total of 6 elements."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check for every possible way such that the sum is \u2018X\u2019.</p>",
            "<p>Can you optimize your recursive solution using some extra space?</p>",
            "<p>Can you think of doing it iteratively to avoid stack size problems?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N *X).\r\n    Space Complexity:O(X).\r\n\r\n    Where \u2018N\u2019 is the size of the array and 'X' is the target sum.\r\n*/\r\n\r\nint minimumElements(vector<int> &num, int x)\r\n{\r\n\r\n    int n = num.size();\r\n\r\n    // Create a vector \"dp\" of size 'X'.\r\n    vector<int> dp(x + 1, INT_MAX);\r\n\r\n    dp[0] = 0;\r\n\r\n    for (int i = 1; i <= x; i++)\r\n    {\r\n        // Try out for each possible element and take the minimum.\r\n        for (int j = 0; j < n; j++)\r\n        {\r\n            if (i - num[j] >= 0 && dp[i - num[j]] != INT_MAX)\r\n                dp[i] = min(dp[i], 1 + dp[i - num[j]]);\r\n        }\r\n    }\r\n\r\n    // Return -1 as it is not possible to make desired sum 'X'.\r\n    if (dp[x] == INT_MAX)\r\n    {\r\n        return -1;\r\n    }\r\n\r\n    // Return the minimum number of elements.\r\n    return dp[x];\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(N *X).\n    Space Complexity:O(X).\n\n    Where \u2018N\u2019 is the size of the array and 'X' is the target sum.\n'''\n\nfrom typing import List\n\ndef minimumElements(num: List[int], x: int) -> int:\n\n    n = len(num)\n\n    # Create a vector \"dp\" of size 'X'.\n    dp = [float('inf') for _ in range(x + 1)]\n\n    dp[0] = 0\n\n    for i in range(1, x + 1):\n    \n        # Try out for each possible element and take the minimum.\n        for j in range(n):\n        \n            if (i - num[j] >= 0 and dp[i - num[j]] != float('inf')):\n                dp[i] = min(dp[i], 1 + dp[i - num[j]])\n\n    # Return -1 as it is not possible to make desired sum 'X'.\n    if dp[x] == float('inf'):\n        return -1\n\n    # Return the minimum number of elements.\n    return dp[x]\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N*X).\n    Space Complexity:O(X).\n\n  where N is the size of the array and X is the target sum.\n*/\n\npublic class Solution {\n\n    public static int minimumElements(int num[], int x) {\n\n        int n = num.length;\n        // Create a vector \"dp\" of size 'X'.\n        int dp[] = new int[x + 1];\n        for (int i = 0; i <= x; i++) {\n            dp[i] = Integer.MAX_VALUE;\n        }\n\n        dp[0] = 0;\n\n        for (int i = 1; i <= x; i++) {\n            // Try out for each possible element and take the minimum.\n            for (int j = 0; j < n; j++) {\n                if (i - num[j] >= 0 && dp[i - num[j]] != Integer.MAX_VALUE)\n                    dp[i] = Math.min(dp[i], 1 + dp[i - num[j]]);\n            }\n        }\n\n        // Return -1 as it is not possible to make desired sum 'X'.\n        if (dp[x] == Integer.MAX_VALUE) {\n            return -1;\n        }\n\n        // Return the minimum number of elements.\n        return dp[x];\n    }\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}