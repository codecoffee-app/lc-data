{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8620,
            "title": "Minimum Fountains",
            "titleSlug": "minimum-fountains_893176",
            "content": "<h4 id=\"there-is-a-one-dimensional-garden-of-length-n-on-each-of-the-positions-from-0-to-n-there-is-a-fountain-and-this-fountain-s-water-can-reach-up-to-a-certain-range-as-explained-further-in-other-words-there-are-n-1-fountains-located-at-positions-0-1-2-3-n-which-can-be-activated-in-the-garden\">There is a one-dimensional garden of length &#39;N&#39;. On each of the positions from 0 to &#39;N&#39;, there is a fountain, and this fountain\u2019s water can reach up to a certain range as explained further. In other words, there are &#39;N&#39; + 1 fountains located at positions  0, 1, 2, 3, \u2026. &#39;N&#39; which can be activated in the garden.</h4>\n\n<h4 id=\"you-are-given-an-integer-n-and-an-array-list-arr-of-length-n-1-where-each-index-of-the-array-denotes-the-coverage-limit-of-a-particular-fountain\">You are given an integer &#39;N&#39; and an array/list &#39;ARR&#39; of length &#39;N&#39; + 1, where each index of the array denotes the coverage limit of a particular fountain.</h4>\n\n<h4 id=\"a-fountain-at-index-i-can-water-the-area-ranging-from-the-position-i-arr-i-to-i-arr-i\">A fountain at index &#39;i&#39; can water the area ranging from the position &#39;i&#39; - &#39;ARR&#39;[&#39;i&#39;] to &#39;i&#39; + &#39;ARR&#39;[&#39;i&#39;].</h4>\n\n<h4 id=\"your-task-is-to-find-the-minimum-number-of-fountains-that-have-to-be-activated-such-that-the-whole-garden-from-position-0-to-n-has-access-to-the-water-from-at-least-some-fountain\">Your task is to find the minimum number of fountains that have to be activated such that the whole garden from position 0 to &#39;N&#39; has access to the water from at least some fountain.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. 0-based indexing is used in the array.\n2. We only care about the garden from 0 to &#39;N&#39; only. So if i - &#39;ARR&#39;[&#39;i&#39;] &lt; 0 or i + &#39;ARR&#39;[&#39;i&#39;] &gt; &#39;N&#39;, you may ignore the exceeding area.\n3. If some fountain covers the garden from position &#39;A&#39; to position &#39;B&#39;, it means that the water from this fountain will spread to the whole line segment with endpoints &#39;A&#39; and &#39;B&#39;.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer &#39;T&#39;, denoting the number of test cases.\n\nThe first line of each test case contains the integer &#39;N&#39;, denoting the size of the garden.\n\nThe second line of each test case contains &#39;N&#39; + 1 space-separated integers denoting the array elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer that corresponds to the minimum number of fountains to be activated.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 50\n1 &lt;= &#39;N&#39; &lt;= 10^4\n1 &lt;= &#39;ARR&#39;[i] &lt;= &#39;N&#39;\n\nWhere &#39;ARR[i]&#39; represents the elements at &#39;i&#39;th index.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\n1 2 1\n4\n2 1 2 1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-11-25-00-56-26-5994.png\" alt=\"asd\"></p>\n\n<pre><code>For the first test case, as shown in the figure, \nFountain at i = 0 can cover area from (-1,1).\nFountain at i = 1 can cover area from (-1, 3).\nFountain at i = 2 can cover the area from (1, 3).\nSo if we activate the fountain on index = 1, we will be able to cover the whole garden.\n\nFor the second test case,  we can just activate the fountain on index 2 as it will cover all the positions from 0 to 4\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n4\n2 1 1 2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2:</h5>\n\n<pre><code>We can activate the fountains on index 0 and 3 to cover the whole garden.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 64,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a one-dimensional garden of length N, with fountains at positions 0 to N. Each fountain at position 'i' has a coverage range defined by ARR[i], allowing it to water the area from i - ARR[i] to i + ARR[i]. Determine the minimum number of fountains that need to be activated to ensure the entire garden from 0 to N is watered.\n\nConsider that the garden is only from 0 to N, exceeding ranges of fountain can be ignored. Also fountain covers the garden between its start and end point completely.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^4",
                    "1 <= ARR[i] <= N"
                ],
                "testcases": [
                    {
                        "input": "2\n2\n1 2 1\n4\n2 1 2 1 1",
                        "output": "1\n1",
                        "explanation": "Test Case 1: Activating the fountain at index 1 covers the entire garden.\nTest Case 2: Activating the fountain at index 2 covers the entire garden."
                    },
                    {
                        "input": "1\n4\n2 1 1 2 1",
                        "output": "2",
                        "explanation": "Activating the fountains at index 0 and index 3 covers the entire garden."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of sorting and implementing dp.</p>",
            "<p>Try greedy approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}