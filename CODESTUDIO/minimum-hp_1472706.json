{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12679,
            "title": "Minimum HP",
            "titleSlug": "minimum-hp_1472706",
            "content": "<h4 id=\"you-are-playing-a-board-game-where-you-die-when-your-hp-health-points-becomes-0-or-negative-now-you-start-with-some-initial-hp-and-start-moving-in-the-board-starting-from-the-top-left-corner-you-have-to-reach-the-bottom-right-corner-of-the-board-by-only-moving-right-and-down-whenever-you-arrive-on-a-cell-in-the-board-your-hp-may-increase-or-decrease-by-the-amount-written-on-the-cell-if-the-cell-has-a-positive-value-it-means-your-hp-increases-if-it-has-a-negative-value-it-means-your-hp-decreases-you-need-to-return-the-minimum-initial-health-required-so-that-you-can-reach-the-rightmost-corner\">You are playing a board game where you die when your hp (health points) becomes 0 or negative. Now you start with some initial hp, and start moving in the board starting from the top-left corner. You have to reach the bottom right corner of the board by only moving right and down. Whenever you arrive on a cell in the board your hp may increase or decrease by the amount written on the cell. If the cell has a positive value it means your hp increases, if it has a negative value it means your hp decreases. You need to return the minimum initial health required so that you can reach the rightmost corner.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>In the example below, if we follow the path shown in the figure, then the minimum initial hp required will be 3.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000430_1619259691_mat.png\" alt=\"board\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains \u2018T,\u2019 denoting the number of test cases. The &#39;T&#39; test cases follow.\n\nThe first line of each test case contains two integers, \u2018N\u2019 and \u2018M\u2019, denoting the number of rows and columns of the board.\n\nNext \u2018N\u2019 lines contain &#39;M&#39; space-separated integers denoting the elements of the array &#39;board&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print an integer denoting the minimum initial hp required to reach the bottom-right corner of the board.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N, M &lt;= 1000\n-3000 &lt;= board[i][j] &lt;= 3000\n\nWhere &#39;board[i][j]&#39; represent the value of board at &#39;jth&#39; column of &#39;ith&#39; row.\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 3\n1 -3 4\n-6 -7 2\n15 20 -4\n1 1\n-4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n5\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h4>\n\n<pre><code>In test case 1:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000430_1619259691_mat.png\" alt=\"board\"></p>\n\n<pre><code>If we follow the path shown in the figure then the minimum initial hp required will be 3.\n\nIn test case 2:\n\nThere is only 1 element in the board, if where minimum 5 initial hp is required. Because 5 + (-4) = 1, if we have anything lower than 5, we will have 0 or negative hp at the end.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 4\n-1 -7 3 -10 \n10 -13 3 -14 \n-13 6 -6 9 \n5 5\n3 -1 2 14 19 \n-8 -5 5 -15 -19 \n-9 -10 -5 -18 -8 \n6 20 13 1 -9 \n0 13 5 6 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are playing a board game where your health points (HP) determine your survival. Starting with an initial HP, you navigate a board from the top-left to the bottom-right corner, moving only right or down. Each cell on the board modifies your HP, increasing it for positive values and decreasing it for negative values. The goal is to find the minimum initial HP required to reach the bottom-right corner without your HP ever dropping to 0 or below.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N, M <= 1000",
                    "-3000 <= board[i][j] <= 3000",
                    "Where 'board[i][j]' represent the value of board at 'jth' column of 'ith' row.",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "3 3\n1 -3 4\n-6 -7 2\n15 20 -4\n1 1\n-4",
                        "output": "3\n5",
                        "explanation": "In the first test case, following the path 1 -> -3 -> -7 -> 20 -> -4 requires a minimum initial HP of 3 to avoid dropping to 0 or below.\nIn the second test case, with only one cell containing -4, an initial HP of 5 is needed to ensure the HP remains positive (5 + (-4) = 1)."
                    },
                    {
                        "input": "3 4\n-1 -7 3 -10\n10 -13 3 -14\n-13 6 -6 9\n5 5\n3 -1 2 14 19\n-8 -5 5 -15 -19\n-9 -10 -5 -18 -8\n6 20 13 1 -9\n0 13 5 6 -1",
                        "output": "5\n1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try all possible paths from the top left to the bottom right and minimize the health required.</p>",
            "<p>Eliminate the need for solving the same subproblems again and again?</p>",
            "<p>Solve the small problem first and then reach the final answer using a bottom-up approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}