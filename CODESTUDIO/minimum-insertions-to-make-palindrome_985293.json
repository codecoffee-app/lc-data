{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9429,
            "title": "Minimum Insertions to make Palindrome",
            "titleSlug": "minimum-insertions-to-make-palindrome_985293",
            "content": "<h4 id=\"a-palindrome-string-is-one-that-reads-the-same-backward-as-well-as-forward\">A palindrome string is one that reads the same backward as well as forward.</h4>\n\n<p><br/></p>\n\n<h4 id=\"you-are-given-a-string-str\">You are given a string <em><strong>&#39;str&#39;</strong></em>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"find-the-minimum-number-of-characters-needed-to-insert-in-str-to-make-it-a-palindromic-string\">Find the minimum number of characters needed to insert in &#39;str&#39; to make it a palindromic string.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Input: &#39;str&#39; = &quot;abca&quot;\n\nOutput: 1\n\nExplanation:\nIf we insert the character \u2018b\u2019 after \u2018c\u2019, we get the string &quot;abcba&quot;, which is a palindromic string. Please note that there are also other ways possible.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains a string &#39;str&#39;, containing lowercase English letters i.e from \u2018a\u2019 to \u2018z\u2019.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>The output contains a single integer denoting the minimum number of insertions needed to make &#39;str&#39; palindrome.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>abca\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-input-1\">Explanation for input 1:</h5>\n\n<pre><code>If we insert the character \u2018b\u2019 after \u2018c\u2019, we get the string &quot;abcba&quot;, which is a palindromic string. Please note that there are also other ways possible.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>abcdefg\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>6\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-3\">Sample Input 3:</h5>\n\n<pre><code>aaaaa\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-3\">Sample Output 3:</h5>\n\n<pre><code>0\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity :</h5>\n\n<pre><code>The expected time complexity is O(|str| ^ 2).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= |str| &lt;= 1000\n\nWhere |str| represents the length of the string &#39;str&#39;.\n\nTime Limit: 1 sec.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 126,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'str', determine the minimum number of characters that need to be inserted into 'str' to transform it into a palindrome. You are allowed to insert characters at any position within the string.",
                "constraints": [
                    "1 <= |str| <= 1000, where |str| is the length of the string 'str'.",
                    "The string 'str' contains only lowercase English letters (a-z).",
                    "Expected time complexity is O(|str|^2)."
                ],
                "testcases": [
                    {
                        "input": "str = \"abca\"",
                        "output": "1",
                        "explanation": "Inserting 'b' after 'c' results in \"abcba\", which is a palindrome. Therefore, only 1 insertion is needed."
                    },
                    {
                        "input": "str = \"abcdefg\"",
                        "output": "6",
                        "explanation": "To make \"abcdefg\" a palindrome, you could insert the characters in reverse order after the string. For example, inserting 'fedcba' gives \"abcdefgfedcba\".  This requires 6 insertions."
                    },
                    {
                        "input": "str = \"aaaaa\"",
                        "output": "0",
                        "explanation": "The string \"aaaaa\" is already a palindrome, so no insertions are needed."
                    },
                    {
                        "input": "str = \"aba\"",
                        "output": "0",
                        "explanation": "The string \"aba\" is already a palindrome, so no insertions are needed."
                    },
                    {
                        "input": "str = \"zzazz\"",
                        "output": "0",
                        "explanation": "The string \"zzazz\" is already a palindrome, so no insertions are needed."
                    },
                    {
                        "input": "str = \"mbadm\"",
                        "output": "2",
                        "explanation": "Inserting 'd' at the beginning and 'b' at the end of the string results in \"dmbadmb\", which is a palindrome. There are other possibilities but 2 is the minimum insertions needed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The very first approach can be to try all possible substrings of the string and minimize the ans among the valid ones.</p>",
            "<p>The recursive approach exhibits overlapping subproblems. Think of storing the results of these subproblems to improve time complexity.</p>",
            "<p>Can you solve the small problem first and then reach the final answer iteratively?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(|str| ^ 2)\n    Space Complexity: O(|str| ^ 2)\n\n    Where |str| is the length of the given string 'str'.\n*/\n\nint minimumInsertions(string &str)\n{\n    int n = str.length();\n\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n\n    for (int len = 1; len <= n; len++)\n    {\n        for (int i = 0; i <= (n - len); i++)\n        {\n            int j = i + len - 1;\n\n            // If length is 1.\n            if (i == j)\n            {\n                dp[i][j] = 0;\n            }\n            // If characters are same.\n            else if (str[i] == str[j])\n            {\n                dp[i][j] = dp[i + 1][j - 1];\n            }\n            else\n            {\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n\n    return dp[0][n - 1];\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(|str| ^ 2)\r\n    Space Complexity: O(|str| ^ 2)\r\n\r\n    Where |str| is the length of the given string 'str'.\r\n*/\r\n\r\npublic class Solution {\r\n\r\n    public static int minInsertion(String str) {\r\n        int n = str.length();\r\n\r\n        int[][] dp = new int[n][n];\r\n\r\n        for (int len = 1; len <= n; len++) {\r\n            for (int i = 0; i <= (n - len); i++) {\r\n                int j = i + len - 1;\r\n                // If length is 1.\r\n                if (i == j) {\r\n                    dp[i][j] = 0;\r\n                }\r\n                // If characters are same.\r\n                else if (str.charAt(i) == str.charAt(j)) {\r\n                    dp[i][j] = dp[i + 1][j - 1];\r\n                }\r\n                else {\r\n                    dp[i][j] = 1 + Math.min(dp[i + 1][j], dp[i][j - 1]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return dp[0][n - 1];\r\n\r\n    }\r\n\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N ^ 2)\r\n    Space Complexity: O(N ^ 2)\r\n\r\n    Where 'N' is the length of the string.\r\n'''\r\n\r\ndef minInsertion(str):\r\n    \r\n    n = len(str)\r\n    dp = [[0 for j in range (n)]for i in range (n)]\r\n    \r\n    for l in range (2, n + 1):\r\n        \r\n        for i in range (n - l + 1):\r\n            j = i + l - 1\r\n            \r\n            # If characters are same.\r\n            if str[i] == str[j]:\r\n                dp[i][j] = dp[i + 1][j - 1]\r\n            else:\r\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\r\n                \r\n    return dp[0][n - 1]\r\n\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}