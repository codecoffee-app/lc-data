{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9591,
            "title": "Minimum Jumps",
            "titleSlug": "minimum-jumps_1062693",
            "content": "<h4 id=\"bob-lives-with-his-wife-in-a-city-named-berland-bob-is-a-good-husband-so-he-goes-out-with-his-wife-every-friday-to-arcade-mall\">Bob lives with his wife in a city named Berland. Bob is a good husband, so he goes out with his wife every Friday to \u2018Arcade\u2019 mall.</h4>\n\n<h4 id=\"arcade-is-a-very-famous-mall-in-berland-it-has-a-very-unique-transportation-method-between-shops-since-the-shops-in-the-mall-are-laying-in-a-straight-line-you-can-jump-on-a-very-advanced-trampoline-from-the-shop-i-and-land-in-any-shop-between-i-to-i-arr-i-where-arr-i-is-a-constant-given-for-each-shop\">\u2018Arcade\u2019 is a very famous mall in Berland. It has a very unique transportation method between shops. Since the shops in the mall are laying in a straight line, you can jump on a very advanced trampoline from the shop i, and land in any shop between (i) to (i\u2009+\u2009Arr[i]), where Arr[i] is a constant given for each shop.</h4>\n\n<h4 id=\"there-are-n-shops-in-the-mall-numbered-from-0-to-n-1-bobs-wife-starts-her-shopping-journey-from-shop-0-and-ends-it-in-shop-n-1-as-the-mall-is-very-crowded-on-fridays-unfortunately-bob-gets-lost-from-his-wife-so-he-wants-to-know-what-is-the-minimum-number-of-trampoline-jumps-from-shop-0-he-has-to-make-in-order-to-reach-shop-n-1-and-see-his-wife-again-if-it-is-impossible-to-reach-the-last-shop-return-1\">There are N shops in the mall, numbered from 0 to N-1. Bob&#39;s wife starts her shopping journey from shop 0 and ends it in shop N-1. As the mall is very crowded on Fridays, unfortunately, Bob gets lost from his wife. So he wants to know, what is the minimum number of trampoline jumps from shop 0 he has to make in order to reach shop N-1 and see his wife again. If it is impossible to reach the last shop, return -1.</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \n\nThen the T test cases follow.\n\nThe first line of each test case contains a positive integer N, which represents the number of shops.\n\nThe next line contains &#39;N&#39; single space-separated positive integers representing a constant given for each shop.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the minimum number of jumps or -1, if it is impossible to reach the last shop.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 5 * 10^4\n0 &lt;= Arr[i] &lt;= N\nWhere T is the number of test cases, N is the size of the array and Arr[i] is the ith element in the array.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\n2 1 3 2 4\n3\n3 2 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>In the 1st test case, Bobs jumps from shop 0 to shop 2 and then jumps from shop 2 to shop 4, so he needs two jumps to reach the last shop.\n\nIn the 2nd test case, Bobs jumps from shop 0 to shop 2, so he needs only one jump to reach the last shop.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n1 0 3 2 1\n4\n1 1 1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 179,
            "dislikes": "NA",
            "rephrased": {
                "body": "Bob is at the 'Arcade' mall with his wife. The mall has N shops arranged in a line, numbered from 0 to N-1. A unique trampoline system allows jumping from shop 'i' to any shop between 'i' and 'i + Arr[i]', where Arr[i] is a constant for that shop. Bob gets lost and wants to find his wife at shop N-1. Determine the minimum number of trampoline jumps Bob needs to make from shop 0 to reach shop N-1. If it's impossible to reach shop N-1, return -1.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 5 * 10^4",
                    "0 <= Arr[i] <= N"
                ],
                "testcases": [
                    {
                        "input": "5\n2 1 3 2 4",
                        "output": "2",
                        "explanation": "Bob jumps from shop 0 to shop 2 (0 + 2). Then, he jumps from shop 2 to shop 4 (2 + 2 or 2 +3 which one is larger but still less then or equal to N -1), reaching the last shop in two jumps."
                    },
                    {
                        "input": "3\n3 2 1",
                        "output": "1",
                        "explanation": "Bob jumps from shop 0 to shop 2 (0 + 3 or 0 + min(3, 2) or 0+1), directly reaching the last shop in one jump using value at index 0. Since 2 is the index of the last shop."
                    },
                    {
                        "input": "5\n1 0 3 2 1",
                        "output": "-1",
                        "explanation": "Bob jumps from shop 0 to shop 1 (0 + 1).  From shop 1, he cannot jump to any shop beyond shop 1 as Arr[1] is 0. Thus, he cannot reach shop 4, and the output is -1."
                    },
                    {
                        "input": "4\n1 1 1 1",
                        "output": "3",
                        "explanation": "Bob can only jump to the next adjacent shop. Therefore, Bob needs to jump from shop 0 to 1, 1 to 2 and 2 to 3. He requires 3 jumps to reach the final destination"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a recursive approach to solve the problem.</p>",
            "<p>Using memoization, you can optimise the previous approach.</p>",
            "<p>Can you solve this problem using Iterative DP?</p>",
            "<p>Can you solve this problem in linear time?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space complexity: O(1)\n    \n    Where N is the number of shops.\n*/\n\n\nint minimumJumps(vector<int> &arr, int n)\n{\n    if (n == 1)\n    {\n        return 0;\n    }\n    if (arr[0] == 0)\n    {\n        // we cannot jump from this shop\n        return -1;\n    }\n\n    int jumpsTaken = 1;\n    int maxReach = arr[0];\n    int stepsLeft = arr[0];\n\n    for (int i = 1; i <= (n - 2); i++)\n    {\n        maxReach = max(maxReach, i + arr[i]);\n        // we took a step to reach current index\n        stepsLeft--;\n        if (stepsLeft == 0)\n        {\n            jumpsTaken++;\n            if (i >= maxReach)\n            {\n                // Impossible to reach the last shop\n                return -1;\n            }\n            stepsLeft = maxReach - i;\n        }\n    }\n    return jumpsTaken;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N)\r\n    Space complexity: O(1)\r\n    \r\n    Where N is the number of shops.\r\n'''\r\n\r\n\r\ndef minimumJumps(arr, n):\r\n\r\n    if (n == 1):\r\n        return 0\r\n\r\n    if (arr[0] == 0):\r\n        # we cannot jump from this shop\r\n        return -1\r\n\r\n    jumpsTaken = 1\r\n    maxReach = arr[0]\r\n    stepsLeft = arr[0]\r\n\r\n    for i in range(1, n - 1):\r\n\r\n        maxReach = max(maxReach, i + arr[i])\r\n\r\n        # we took a step to reach current index\r\n        stepsLeft -= 1\r\n\r\n        if (stepsLeft == 0):\r\n\r\n            jumpsTaken += 1\r\n            if (i >= maxReach):\r\n                # Impossible to reach the last shop\r\n                return -1\r\n\r\n            stepsLeft = maxReach - i\r\n\r\n    return jumpsTaken\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space complexity: O(1)\r\n    \r\n    Where N is the number of shops.\r\n*/\r\n\r\nimport java.util.Arrays;\r\npublic class Solution {\r\n    public static int minimumJumps(int[] arr, int N) {\r\n        if (N == 1) {\r\n            return 0;\r\n        }\r\n        if (arr[0] == 0) {\r\n            \r\n            // We cannot jump from this shop\r\n            return -1;\r\n        }\r\n\r\n        int jumpsTaken = 1;\r\n        int maxReach = arr[0];\r\n        int stepsLeft = arr[0];\r\n\r\n        for (int i = 1; i <= (N - 2); i++) {\r\n            maxReach = Math.max(maxReach, i + arr[i]);\r\n            \r\n            // We took a step to reach current index\r\n            stepsLeft--;\r\n            if (stepsLeft == 0) {\r\n                jumpsTaken++;\r\n                if (i >= maxReach) {\r\n                    \r\n                    // Impossible to reach the last shop\r\n                    return -1;\r\n                }\r\n                stepsLeft = maxReach - i;\r\n            }\r\n        }\r\n        return jumpsTaken;\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}