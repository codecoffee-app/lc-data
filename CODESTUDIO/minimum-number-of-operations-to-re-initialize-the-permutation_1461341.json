{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12450,
            "title": "MINIMUM NUMBER OF OPERATIONS TO RE INITIALIZE THE PERMUTATION",
            "titleSlug": "minimum-number-of-operations-to-re-initialize-the-permutation_1461341",
            "content": "<h4 id=\"in-an-interview-of-a-company-the-interviewer-asked-a-question-to-the-student-that-you-are-given-a-permutation-permarray-of-length-n-n-is-always-even-which-is-filled-with-values-0-to-n-1-such-that-permarray-i-i-the-student-has-to-perform-operations-on-the-permarray-which-are-given-below\">In an interview of a company the interviewer asked a question to the student that you are given a permutation \u2018permArray\u2019 of length \u2018N\u2019 (N is always even) which is filled with values 0 to N-1 such that permArray[i] = i. The student has to perform operations on the \u2018permArray\u2019 which are given below.</h4>\n\n<h4 id=\"in-one-operation-you-will-create-a-new-array-arr-and-for-each-i\">In one operation, you will create a new array \u2018ARR\u2019, and for each i:</h4>\n\n<pre><code>1) If i % 2 == 0, then ARR[i] = permArray[i / 2].\n2) If i % 2 == 1, then ARR[i] = permArray[N / 2 + (i - 1) / 2].\n</code></pre>\n\n<h4 id=\"you-will-then-assign-arr-to-permarray\">You will then assign ARR to &#39;permArray&#39;.</h4>\n\n<h4 id=\"the-student-has-to-find-the-minimum-number-of-non-zero-operations-to-make-the-permarray-return-to-its-original-state-assuming-yourselves-as-the-student-solve-the-question-given-by-the-interviewer\">The student has to find the minimum number of non-zero operations to make the \u2018permArray\u2019 return to its original state. Assuming yourselves as the student, solve the question given by the interviewer.</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. \n\nThe first line of each test case contains an integer \u2018N\u2019, denoting the length of the permutation.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the minimum number of non-zero operations to make the given array back to its original state.\n\nOutput for each test case is printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 10^5\nN%2 = 0\n\nWhere \u2018T\u2019 represents the number of test cases, \u2018N\u2019 represents the length of the permutation \u2018permArray\u2019.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2\n4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n2\n</code></pre>\n\n<h5 id=\"explanation-1\">Explanation 1 :</h5>\n\n<pre><code>For the first test case, \nInitially, the \u2018permArray\u2019 will look like [0, 1]. Then we will create a new array \u2018ARR\u2019 which will look like [0,1] after performing the first operation and then assigning the values in \u2018ARR\u2019 to \u2018permArray\u2019. So \u2018permArray\u2019 will become [0, 1] which is the same as the original array. So the output will be 1.\n\nFor the second test case, \nInitially the \u2018permArray\u2019 will look like [0,1,2,3]. Then we will create a new array \u2018ARR\u2019 which will look like [0,2,1,3] after performing the first operation and then assigning the values in \u2018ARR\u2019 to \u2018permArray\u2019. So \u2018permArray\u2019 will become [0,2,1,3]. Then again we will create a new array \u2018ARR\u2019 which will look like [0,1, 2, 3] after performing the second operation and then assigning the values in \u2018ARR\u2019 to \u2018permArray\u2019. So \u2018permArray\u2019 will become [0,1,2,3] which is the same as the original array. So the output will be 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n6\n8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a permutation `permArray` of length `N` (where `N` is even) containing values from 0 to N-1, initially `permArray[i] = i`. Perform the following operation repeatedly:\n\n1. Create a new array `ARR`. For each index `i`:\n   - If `i` is even, then `ARR[i] = permArray[i / 2]`. \n   - If `i` is odd, then `ARR[i] = permArray[N / 2 + (i - 1) / 2]`. \n2. Assign `ARR` to `permArray`. \n\nDetermine the minimum number of non-zero operations required to return `permArray` to its original state.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "2 <= N <= 10^5 (Length of permutation)",
                    "N % 2 == 0"
                ],
                "testcases": [
                    {
                        "input": "2\n2",
                        "output": "1",
                        "explanation": "Initially, permArray = [0, 1]. After one operation, ARR = [0, 1]. permArray becomes [0, 1], which is the initial state. Therefore, only 1 operation is needed."
                    },
                    {
                        "input": "2\n4",
                        "output": "2",
                        "explanation": "Initially, permArray = [0, 1, 2, 3]. After the first operation, ARR = [0, 2, 1, 3]. permArray becomes [0, 2, 1, 3]. After the second operation, ARR = [0, 1, 2, 3]. permArray becomes [0, 1, 2, 3], which is the initial state. Therefore, 2 operations are needed."
                    },
                    {
                        "input": "2\n6",
                        "output": "4",
                        "explanation": null
                    },
                    {
                        "input": "2\n8",
                        "output": "3",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to simulate the process exactly as mentioned in the problem statement.&nbsp;</p>",
            "<p>Try to find the LCM of length of the cycles obtained from each index.</p>",
            "<p>Try to find after how many steps value at index 1 will come to its initial position.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}