{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8006,
            "title": "Minimum Number of Platforms",
            "titleSlug": "minimum-number-of-platforms_799400",
            "content": "<h4 id=\"you-have-been-given-two-arrays-at-and-dt-representing-the-arrival-and-departure-times-of-all-trains-that-reach-a-railway-station\">You have been given two arrays, &#39;AT&#39; and &#39;DT&#39;, representing the arrival and departure times of all trains that reach a railway station.</h4>\n\n<h4 id=\"your-task-is-to-find-the-minimum-number-of-platforms-required-for-the-railway-station-so-that-no-train-needs-to-wait\">Your task is to find the minimum number of platforms required for the railway station so that no train needs to wait.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. Every train will depart on the same day and the departure time will always be greater than the arrival time. For example, A train with arrival time 2240 and departure time 1930 is not possible.\n\n2. Time will be given in 24H format and colons will be omitted for convenience. For example, 9:05AM will be given as &quot;905&quot;, or 9:10PM will be given as &quot;2110&quot;.\n\n3. Also, there will be no leading zeroes in the given times. For example, 12:10AM will be given as \u201c10\u201d and not as \u201c0010\u201d.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains an integer &#39;N&#39;, representing the total number of trains.\n\nThe second line of each test case contains &#39;N&#39; single-spaced separated elements of the array &#39;AT&#39;,  representing the arrival times of all the trains.\n\nThe third line of each test case contains &#39;N&#39; single-spaced separated elements of the array &#39;DT&#39;, representing the departure times of all the trains.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the minimum number of platforms required for the railway station so that no train needs to wait.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print the output, it has already been taken care of. You just need to implement the given function.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow up :</h5>\n\n<pre><code>Try to solve the problem in O(N) time and O(1) space.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 50000\n0 &lt;= AT[i] &lt;= DT[i] &lt;= 2359\n\nWhere &#39;AT[i]&#39; and &#39;DT[i]&#39; are the elements of the arrival and the departure arrays respectively.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n6\n900 940 950 1100 1500 1800\n910 1200 1120 1130 1900 2000\n4\n100 200 300 400\n200 300 400 500\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n2\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-output-1\">Explanation of the Sample Output 1:</h5>\n\n<pre><code>In test case 1, For the given input, the following will be the schedule of the trains:\n\nTrain 1 arrived at 900 on platform 1. \nTrain 1 departed at 910 from platform 1. \nTrain 2 arrived at 940 on platform 1.\nTrain 3 arrived at 950 on platform 2 (since platform 1 was already occupied by train 1).\nTrain 4 arrived at 1100 on platform 3 (since both platforms 1 and 2 were occupied by trains 2 and 3 respectively).\nTrain 3 departed at 1120 from platform 2 (platform 2 becomes vacant).\nTrain 4 departed at 1130 from platform 3 (platform 3 also becomes vacant).\nTrain 2 departed at 1200 from platform 1 (platform 1 also becomes vacant).\nTrain 5 arrived at 1500 on platform 1.\nTrain 6 arrived at 1800 on platform 2.\nTrain 5 departed at 1900 from platform 1.\nTrain 6 departed at 2000 from platform 2.\n\nThus, minimum 3 platforms are needed for the given input.\n\nIn test case 2, For the given input, the following will be the schedule of the trains:\n\nTrain 1 arrived at 100 on platform 1. \nTrain 2 arrived at 200 from platform 2 (as platform 1 is occupied by train 1).\nTrain 1 departed at 200 from platform 1. \nTrain 3 arrived at 300 on platform 1.\nTrain 2 departed at 300 from platform 2.\nTrain 4 arrived at 400 on platform 2.\nTrain 3 departed at 400 from platform 1.\nTrain 4 departed at 500 from platform 2. \n\nThus, 2 platforms are needed for the given input.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2\n900 1000\n999 1100\n3\n1200 1300 1450\n1310 1440 1600    \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n2\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-output-2\">Explanation of the Sample Output 2:</h5>\n\n<pre><code>In test case 1, For the given input, the following will be the schedule of the trains:\n\nTrain 1 arrived at 900 on platform 1. \nTrain 1 departed at 999 from platform 1. \nTrain 2 arrived at 1000 on platform 1.\nTrain 2 arrived at 1100 on platform 1.\n\nThus, only 1 platform is needed for the given input.\n\nIn test case 2, For the given input, the following will be the schedule of the trains:\n\nTrain 1 arrived at 1200 on platform 1. \nTrain 2 arrived at 1300 on platform 2. (since platform 1 was already occupied by train 1). \nTrain 1 departed at 1310 from platform 1.\nTrain 2 departed at 1440 from platform 2.\nTrain 3 arrived at 1450 on platform 1.\nTrain 3 departed at 1600 on platform 1.\n\nThus, minimum 2 platforms are needed for the given input.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 122,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, 'AT' and 'DT', representing the arrival and departure times of trains at a railway station, determine the minimum number of platforms required to ensure no train has to wait. Each train departs on the same day, and departure time is always later than arrival time. Times are in 24H format without colons, e.g., 9:05 AM is '905'. No leading zeroes are present.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 50000 (Number of trains)",
                    "0 <= AT[i] <= DT[i] <= 2359",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "6\n900 940 950 1100 1500 1800\n910 1200 1120 1130 1900 2000",
                        "output": "3",
                        "explanation": "Consider the provided schedule of trains: Train 1 arrives at 900 and departs at 910 on platform 1. Train 2 arrives at 940 on platform 1. Train 3 arrives at 950 on platform 2. Train 4 arrives at 1100 on platform 3. Train 3 departs at 1120, Train 4 departs at 1130 and Train 2 departs at 1200. Train 5 arrives at 1500 on platform 1 and Train 6 arrives at 1800 on platform 2. Train 5 departs at 1900 and Train 6 departs at 2000. Therefore, a minimum of 3 platforms are required."
                    },
                    {
                        "input": "4\n100 200 300 400\n200 300 400 500",
                        "output": "2",
                        "explanation": "Consider the schedule: Train 1 arrives at 100 on platform 1. Train 2 arrives at 200 on platform 2. Train 1 departs at 200 from platform 1. Train 3 arrives at 300 on platform 1. Train 2 departs at 300 from platform 2. Train 4 arrives at 400 on platform 2. Train 3 departs at 400 from platform 1. Train 4 departs at 500 from platform 2. Thus, 2 platforms are needed."
                    },
                    {
                        "input": "2\n900 1000\n999 1100",
                        "output": "1",
                        "explanation": "Train 1 arrives at 900 and departs at 999 using platform 1. Train 2 arrives at 1000 and departs at 1100 using platform 1. Thus, only 1 platform is needed."
                    },
                    {
                        "input": "3\n1200 1300 1450\n1310 1440 1600",
                        "output": "2",
                        "explanation": "Train 1 arrives at 1200 on platform 1. Train 2 arrives at 1300 on platform 2. Train 1 departs at 1310 from platform 1. Train 2 departs at 1440 from platform 2. Train 3 arrives at 1450 on platform 1 and Train 3 departs at 1600 from platform 1. Thus, a minimum of 2 platforms are needed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to solve this problem by keeping track of the number of platforms required at all points of time in a day using an array.</p>",
            "<p>Try to solve the problem by keeping all the events (arrival and departure) in sorted order.</p>",
            "<p>Try to solve this problem by incrementing the number of platforms at the time of arrival and decrementing the number of platforms after the departure of every train.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity : O(N)\n    Space Complexity :  O(1)\n\n    Where 'N' is the number of trains.\n*/\n\nint calculateMinPatforms(int at[], int dt[], int n)\n{\n    // Array to store the number of platforms required at different points of time.\n    int platforms[2361] = {0};\n\n    // Variable to store the final answer i.e. minimum number of platforms required.\n    int minNumOfPlatforms = 1;\n\n    for (int i = 0; i < n; i++)\n    {\n\n        // Increment the count of platforms at the time of arrival.\n        ++platforms[at[i]];\n\n        // Decrease the platform count just after the departure.\n        --platforms[dt[i] + 1];\n    }\n\n    // We are running loop till 2361 because maximum time value in a day can be 23:60.\n    for (int i = 1; i < 2361; i++)\n    {\n\n        // Taking cumulative sum of platforms.\n        platforms[i] = platforms[i] + platforms[i - 1];\n\n        // Update minNumOfPlatforms.\n        minNumOfPlatforms = max(minNumOfPlatforms, platforms[i]);\n    }\n\n    // Return the minimum number of platforms.\n    return minNumOfPlatforms;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n\tTime Complexity : O(N)\n\tSpace Complexity : O(1)\n\n\tWhere 'N' is the number of trains.\n*/\n\nimport java.util.Arrays;\n\npublic class Solution {\n\n\tstatic int calculateMinPatforms(int at[], int dt[], int n) {\n\t\t// Array to store the number of platforms required at different points of time.\n\t\tint platforms[] = new int[2361];\n\t\tArrays.fill(platforms, 0);\n\n\t\t// Variable to store the final answer i.e. minimum number of platforms required.\n\t\tint minNumOfPlatforms = 1;\n\n\t\tfor (int i = 0; i < n; i++) {\n\n\t\t\t// Increment the count of platforms at the time of arrival.\n\t\t\t++platforms[at[i]];\n\n\t\t\t// Decrease the platform count just after the departure.\n\t\t\t--platforms[dt[i] + 1];\n\t\t}\n\n\t\t// We are running loop till 2361 because maximum time value in a day can be 23:60.\n\t\tfor (int i = 1; i < 2361; i++) {\n\n\t\t\t// Taking cumulative sum of platforms.\n\t\t\tplatforms[i] = platforms[i] + platforms[i - 1];\n\n\t\t\t// Update minNumOfPlatforms.\n\t\t\tminNumOfPlatforms = Math.max(minNumOfPlatforms, platforms[i]);\n\t\t}\n\n\t\t// Return the minimum number of platforms.\n\t\treturn minNumOfPlatforms;\n\t}\n\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "''' \r\n    Time Complexity : O(N)\r\n    Space Complexity :  O(1)\r\n\r\n    Where 'N' is the number of trains.\r\n'''\r\n\r\nfrom sys import stdin, setrecursionlimit\r\nsetrecursionlimit(10**7)\r\n\r\ndef calculateMinPatforms(at, dt, n):\r\n\r\n    # Array to store the number of platforms required at different points of time.\r\n    platforms = [0 for i in range(2361)]\r\n\r\n    # Variable to store the final answer i.e. minimum number of platforms required.\r\n    minNumOfPlatforms = 1\r\n\r\n    for i in range(n):\r\n\r\n        # Increment the count of platforms at the time of arrival.\r\n        platforms[at[i]] += 1\r\n\r\n        # Decrease the platform count just after the departure.\r\n        platforms[dt[i] + 1] -= 1\r\n\r\n    # We are running loop till 2361 because maximum time value in a day can be 23:60.\r\n    for i in range(1, 2361):\r\n\r\n        # Taking cumulative sum of platforms.\r\n        platforms[i] = platforms[i] + platforms[i - 1]\r\n\r\n        # Update minimum number of platforms.\r\n        minNumOfPlatforms = max(minNumOfPlatforms, platforms[i])\r\n\r\n    # Return the minimum number of platforms.\r\n    return minNumOfPlatforms\r\n\r\n# Taking the input.\r\ndef takeInput():\r\n    n = int(stdin.readline().strip())\r\n    at = list(map(int, stdin.readline().strip().split(\" \")))\r\n    dt = list(map(int, stdin.readline().strip().split(\" \")))\r\n\r\n    return at, dt, n\r\n\r\n# Main.\r\nT = int(input())\r\nwhile (T > 0):\r\n    T -= 1\r\n    at, dt, n = takeInput()\r\n    minNumOfPlatforms = calculateMinPatforms(at, dt, n)\r\n    print(minNumOfPlatforms)",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}