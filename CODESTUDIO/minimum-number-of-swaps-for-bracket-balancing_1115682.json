{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10006,
            "title": "Minimum number of swaps for bracket balancing",
            "titleSlug": "minimum-number-of-swaps-for-bracket-balancing_1115682",
            "content": "<h4 id=\"ninja-and-his-friend-are-playing-a-game-in-which-his-friend-picks-n-opening-brackets-and-n-closing-brackets-he-then-mixes-all-of-them-randomly-and-generates-a-string-brackets-he-asks-ninja-to-balance-brackets\">Ninja and his friend are playing a game in which his friend picks N opening brackets \u2018(\u2018 and N closing brackets \u2018)\u2019. He then mixes all of them randomly and generates a string &#39;BRACKETS&#39;. He asks Ninja to balance \u2018BRACKETS\u2019.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Here are some examples of balanced BRACKETS &quot;(())&quot;, &quot;()()&quot;, &quot;(())()&quot;.\n</code></pre>\n\n<h4 id=\"ninja-can-perform-the-following-operation-to-balance-brackets-in-one-operation-ninja-can-pick-two-adjacent-brackets-and-swap-them-his-friend-challenges-him-to-accomplish-the-task-in-minimum-possible-operations-ninja-needs-your-help-to-do-this\">Ninja can perform the following operation to balance BRACKETS. In one operation, Ninja can pick two adjacent brackets and swap them. His friend challenges him to accomplish the task in minimum possible operations. Ninja needs your help to do this.</h4>\n\n<h4 id=\"can-you-help-ninja-to-make-the-string-brackets-balanced-in-minimum-possible-swaps\">Can you help Ninja to make the string \u2018BRACKETS\u2019 balanced in minimum possible swaps?</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains one integer \u2018N\u2019 representing the number opening (or closing) brackets.\n\nThe second line of each test case contains a string\u2018 BRACKETS\u2019 of length &#39;2*N&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the minimum possible swaps required to make string \u2018BRACKETS\u2019 balanced.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 100\n1 &lt;= \u2018N\u2019 &lt;= 5000 \n\u2018BRACKETS\u2019[i]\u2019 = \u2018(\u2018 or \u2018)\u2019\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\n()\n2\n)(\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0\n1\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h4>\n\n<pre><code>For sample test case 1: \nIn this sample test case, the given input string is already balanced. So the minimum number of swaps required to balance \u2018BRACKETS\u2019 is 0.\n\nFor sample test case 2: \nIn this sample test case, if we swap position 0 with 1, then the string \u2018BRACKETS\u2019 becomes &quot;()&quot; which is balanced. So, the minimum number of swaps needed to balance \u2018BRACKETS\u2019 is 1. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3\n())()(\n2\n))((\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code> 2\n 3  \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja is challenged to balance a string of mixed opening and closing brackets by swapping adjacent brackets. Given a string 'BRACKETS' of length 2N, consisting of N opening '(' and N closing ')' brackets, determine the minimum number of swaps required to balance the string.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 5000",
                    "'BRACKETS'[i] = '(' or ')'",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "2\n2\n()\n2\n)(",
                        "output": "0\n1",
                        "explanation": "Test case 1: The string '()' is already balanced, requiring 0 swaps.\nTest case 2: Swapping the characters at indices 0 and 1 in the string ')(' results in '()', which is balanced, requiring 1 swap."
                    },
                    {
                        "input": "2\n3\n())()\n2\n))((",
                        "output": "2\n3",
                        "explanation": "Test case 1: For the string '())()', two swaps are needed to balance the string.\nTest case 2: For the string '))((', three swaps are needed to balance the string."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Do we need to balance the part of BRACKETS that is already balanced?&nbsp;</p>",
            "<p>Think of optimizing the above approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}