{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11099,
            "title": "Minimum Number of Vertices to Reach All Nodes",
            "titleSlug": "minimum-number-of-vertices-to-reach-all-nodes_1377922",
            "content": "<h4 id=\"given-a-directed-acyclic-graph-having-n-nodes-a-matrix-edges-of-size-m-x-2-is-given-which-represents-the-m-edges-such-that-there-is-an-edge-directed-from-node-edges-i-0-to-node-edges-i-1\">Given a directed acyclic graph having \u2018N\u2019 nodes. A matrix \u2018edges\u2019 of size M x 2 is given which represents the \u2018M\u2019 edges such that there is an edge directed from node edges[i][0] to node edges[i][1].</h4>\n\n<h4 id=\"find-the-smallest-set-of-vertices-from-which-all-the-nodes-in-the-graph-are-reachable\">Find the smallest set of vertices from which all the nodes in the graph are reachable.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>Nodes are numbered from 0 to N - 1.\n\nThe graph given is connected.\n\nPrint the vertices in sorted order.\n</code></pre>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>The following is an example of DAG i.e a directed graph with no cycles in it. \n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000322_1617235074_dag.png\" alt=\"alt\ntext\"></p>\n\n<h4 id=\"in-the-above-graph-we-can-reach-all-the-vertices-from-node-a\">In the above graph, we can reach all the vertices from node a.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. The test cases are as follows.\n\nThe first line of each test case contains two integers separated by a single space \u2018N\u2019 and \u2018M\u2019, where \u2018N\u2019  denoting the number of the vertices and \u2018M\u2019 denoting the number of edges in the graph.\n\nThe next \u2018M\u2019 lines of each test case contain two integers \u2018X\u2019 and \u2018Y\u2019 separated by a single space, here \u2018X\u2019 and \u2019Y\u2019 the vertices connected by a directed edge from \u2018X\u2019 to \u2018Y\u2019.  \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the smallest set of vertices from which all the nodes in the graph are reachable in sorted order.\n\nPrint the output of each test case on a new line. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n2 &lt;= N &lt;= 10^5\n1 &lt;= M &lt;= 10^5\n0 &lt;= X,Y &lt;= N - 1\n\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n6 5\n0 1\n0 2\n2 5\n3 4\n4 2\n5 4\n0 1\n2 1\n1 4\n2 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>0 3\n0 2 3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1 :</h5>\n\n<pre><code>For the first test case, \nWe can\u2019t cover all the nodes by only one vertex.\nFrom, 0 we can cover 0, 1, 2, 5.\nFrom, 2 we can cover 2, 5.\nFrom, 3 we can cover 2, 3, 4, 5.\nFrom, 5 we can cover 5.\n\nFrom, 0, 3 we can cover 0, 1, 2, 3, 4, 5.\n\nFor the second test case,\nFrom, 0, 2, 3 we can cover the whole graph.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n4 5\n0 1\n0 2\n0 3\n1 2\n2 3\n2 1\n1 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed acyclic graph (DAG) with 'N' nodes, represented by a matrix 'edges' of size M x 2. Each row in 'edges' indicates a directed edge from node edges[i][0] to node edges[i][1]. The nodes are numbered from 0 to N - 1. The graph is guaranteed to be connected.\n\nFind the smallest set of vertices from which all nodes in the graph are reachable. Return the vertices in sorted order.",
                "constraints": [
                    "1 <= T <= 5",
                    "2 <= N <= 10^5",
                    "1 <= M <= 10^5",
                    "0 <= X, Y <= N - 1",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "6 5\n0 1\n0 2\n2 5\n3 4\n4 2\n5 4\n0 1\n2 1\n1 4\n2 4",
                        "output": "0 3\n0 2 3",
                        "explanation": "In the first test case, the smallest set of vertices that can reach all nodes is {0, 3}.  From vertex 0, we can reach {0, 1, 2, 5}, and from vertex 3, we can reach {3, 4, 2, 5}. Together, {0, 3} covers all vertices {0, 1, 2, 3, 4, 5}.\n\nIn the second test case, the smallest set of vertices that can reach all nodes is {0, 2, 3}. From these vertices, we can cover the entire graph."
                    },
                    {
                        "input": "4 5\n0 1\n0 2\n0 3\n1 2\n2 3\n2 1\n1 0",
                        "output": "0\n1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about the nodes which are not reachable from any other node?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}