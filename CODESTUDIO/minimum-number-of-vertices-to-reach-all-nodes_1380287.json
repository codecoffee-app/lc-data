{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11160,
            "title": "Minimum Number of Vertices to Reach All Nodes",
            "titleSlug": "minimum-number-of-vertices-to-reach-all-nodes_1380287",
            "content": "<h4 id=\"given-a-connected-directed-acyclic-graph-having-n-nodes-and-m-edges-a-matrix-edges-of-size-m-x-2-is-given-which-represents-the-m-edges-such-that-there-is-an-edge-directed-from-node-edges-i-0-to-node-edges-i-1\">Given a connected directed acyclic graph having \u2018N\u2019 nodes and \u2018M\u2019 edges. A matrix \u2018edges\u2019 of size M x 2 is given, which represents the \u2018M\u2019 edges such that there is an edge directed from node edges[i][0] to node edges[i][1].</h4>\n\n<h4 id=\"you-are-supposed-to-find-all-possible-paths-from-node-0-to-node-n-1\">You are supposed to find all possible paths from node 0 to node n - 1.</h4>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>Nodes are numbered from 0 to N - 1.\n\nThe graph given is connected.\n\nPrint the path[][] in sorted order i.e path[i] is an array containing the path from 0 to n-1, and path[i] is lexicographically smaller than path[i + 1] then path[i] should appear before path[i + 1].\n\nAssume we have two solutions\nS1: A1 B1 C1 D1  \nS2: A2 B2 C2 D2\n\nS1 is lexicographically smaller than S2 iff,\nA1 &lt; A2 OR\nA1 = A2 AND B1 &lt; B2 OR\nA1 = A2 AND B1 = B2 AND C1 &lt; C2 OR \nA1 = A2 AND B1 = B2 AND C1 = C2 AND D1 &lt; D2\n</code></pre>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>The following is an example of DAG i.e a directed graph with no cycles in it. \n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000322_1617235074_dag.png\" alt=\"alt\ntext\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. The test cases are as follows.\n\nThe first line of each test case contains two integers separated by a single space,\u2018N\u2019 and \u2018M\u2019, where \u2018N\u2019  denotes the number of the vertices and \u2018M\u2019 denotes the number of edges in the graph.\n\nThe next \u2018M\u2019 lines of each test case contain two integers \u2018X\u2019 and \u2018Y\u2019 separated by a single space, here \u2018X\u2019 and \u2019Y\u2019 are the vertices connected by a directed edge from \u2018X\u2019 to \u2018Y\u2019.  \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print all possible paths from node 0 to N - 1 in sorted order.\n\nPrint the output of each test case on a new line. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n2 &lt;= N &lt;= 16\nN-1 &lt;= M &lt;= N*(N - 1)/2\n0 &lt;= X,Y &lt;= N - 1\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n6 5\n0 1\n0 2\n2 5\n3 4\n4 2\n5 6\n0 1\n2 1\n1 4\n2 4\n0 4\n3 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>0 2 5\n0 1 4\n0 4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case, \nAll possible paths from 0 to 5 are:\n0 -&gt; 2 -&gt; 5\n\nFor the second test case,\nAll possible paths from 0 to 5 are:\n0 -&gt; 1 -&gt; 4\n0 -&gt; 4\nAs the first path appears before so it is printed first and then the second path.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n4 4\n0 1\n0 2\n0 3\n1 2\n2 1\n0 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0 3\n0 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a connected directed acyclic graph (DAG) with 'N' nodes and 'M' directed edges, find all possible paths from node 0 to node N-1. The graph is represented by an adjacency list derived from the input 'edges'.  The paths should be returned in lexicographical order.",
                "constraints": [
                    "1 <= T <= 5",
                    "2 <= N <= 16",
                    "N-1 <= M <= N*(N - 1)/2",
                    "0 <= X,Y <= N - 1"
                ],
                "testcases": [
                    {
                        "input": "n = 6, edges = [[0, 1], [0, 2], [2, 5], [3, 4], [4, 2]]",
                        "output": "[[0, 2, 5]]",
                        "explanation": "The only path from node 0 to node 5 is 0 -> 2 -> 5."
                    },
                    {
                        "input": "n = 6, edges = [[0, 1], [2, 1], [1, 4], [2, 4], [0, 4]]",
                        "output": "[[0, 1, 4], [0, 4]]",
                        "explanation": "There are two paths from 0 to 4: 0 -> 1 -> 4 and 0 -> 4. They are returned in lexicographical order."
                    },
                    {
                        "input": "n = 4, edges = [[0, 1], [0, 2], [0, 3]]",
                        "output": "[[0, 3]]",
                        "explanation": "The path from 0 to 3 is: 0 -> 3."
                    },
                    {
                        "input": "n = 4, edges = [[0, 1], [0, 2], [0, 3], [1, 2]]",
                        "output": "[[0, 3]]",
                        "explanation": "The path from 0 to 3 is: 0 -> 3."
                    },
                    {
                        "input": "n = 5, edges = [[0,1],[0,2],[1,3],[2,3],[3,4]]",
                        "output": "[[0, 1, 3, 4], [0, 2, 3, 4]]",
                        "explanation": "Two paths exist from 0 to 4: 0->1->3->4 and 0->2->3->4. Output them in lexicographical order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of some order which would cover the whole graph?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}