{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8218,
            "title": "Minimum operations to make strings equal",
            "titleSlug": "minimum-operations-to-make-strings-equal_840703",
            "content": "<h4 id=\"you-have-been-given-two-strings-a-and-b-consisting-of-lower-case-english-letters-the-task-is-to-count-the-minimum-number-of-pre-processing-moves-on-the-string-a-required-to-make-it-equal-to-string-b-after-applying-below-operations\">You have been given two strings A and B consisting of lower case English letters. The task is to count the minimum number of pre-processing moves on the string A required to make it equal to string B after applying below operations:</h4>\n\n<pre><code>1. Choose any index i (0 &lt;= i &lt; n) and swap characters a[i]  and b[i].\n2. Choose any index i (0 &lt;= i &lt; n) and swap characters a[i]  and a[n-i-1] .\n3. Choose any index i (0 &lt;= i &lt; n) and swap characters b[i]  and b[n-i-1] .\n</code></pre>\n\n<h4 id=\"in-one-preprocess-move-you-can-replace-a-character-in-a-with-any-other-character-of-the-english-alphabet\">In one preprocess move, you can replace a character in A with any other character of the English alphabet.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The number of changes you make after the preprocess move does not matter.\n2. You cannot apply to preprocess moves to the String B or make any preprocess moves after the first change is made.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains string A consisting of lowercase English letters.\n\nThe second line of each test case contains string B consisting of lowercase English letters.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer denoting the minimum number of pre-processing moves on the string A required to make it equal to the string B. Print -1, if it is impossible to make strings equal.\n\nThe output for each test case is in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given fuction.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n\nWhere \u2018N\u2019 is the length of the strings.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\nabacaba\nbacabaa\nzcabd\ndbacz\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, preprocess moves are as follows: A[0] = \u2018b\u2019, A[2] = \u2018c\u2019, A[3] = \u2018a\u2019 and A[4] = \u2018b\u2019. Afterwards, A = \u2018\u201cbbcabba\u201d. Then we can obtain equal strings by the following sequence of changes: swap(A[2], B[2]) and swap(A[2], A[6]). There is no way to use fewer than 4 preprocess moves before a sequence of changes to make strings equal, so the answer in this test case is 4.\n\nFor the second test case, no preprocess moves are required. We can use the following sequence of changes to make A and B equal: swap(B[1], B[5]), swap(A[2], A[4]).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\nzxyyxzx\nzyzyxyy\njfhjfl\njhkkjs\nabcd\nabcde\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n4\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 60,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, 'a' and 'b', of lowercase English letters, determine the minimum number of character replacements (pre-processing moves) needed in string 'a' to potentially make it equal to string 'b' using the following operations:\n\n1.  Swap `a[i]` and `b[i]` for any valid index `i`.\n2.  Swap `a[i]` and `a[n-i-1]` for any valid index `i`.\n3.  Swap `b[i]` and `b[n-i-1]` for any valid index `i`.\n\nYou can only apply pre-processing moves on string 'a' and must do so before applying any of the three swap operations. You cannot apply any pre-processing moves to string 'b'.\n\nReturn -1 if it is impossible to make the strings equal using these operations.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 5000 (Length of the strings)",
                    "Strings 'a' and 'b' consist of lowercase English letters"
                ],
                "testcases": [
                    {
                        "input": "a = \"abacaba\", b = \"bacabaa\"",
                        "output": "4",
                        "explanation": "We need to change 'a' to 'bbcabba' using 4 preprocessing moves. Then, swap(A[2], B[2]) and swap(A[2], A[6]) will make the strings equal."
                    },
                    {
                        "input": "a = \"zcabd\", b = \"dbacz\"",
                        "output": "0",
                        "explanation": "No preprocessing moves are required. swap(B[1], B[3]), swap(A[2], A[4]) will make the strings equal"
                    },
                    {
                        "input": "a = \"zxyyxzx\", b = \"zyzyxyy\"",
                        "output": "3",
                        "explanation": "3 preprocessing moves are required to change 'a' to 'zyzyxzx' "
                    },
                    {
                        "input": "a = \"jfhjfl\", b = \"jhkkjs\"",
                        "output": "4",
                        "explanation": "4 preprocessing moves are required to change 'a' to 'jhkkjs'"
                    },
                    {
                        "input": "a = \"abcd\", b = \"abcde\"",
                        "output": "-1",
                        "explanation": "It is impossible to make the strings equal because they have different lengths."
                    },
                    {
                        "input": "a = \"aaaa\", b = \"bbbb\"",
                        "output": "1",
                        "explanation": "Changing any one character to 'b' makes it possible to arrange the strings as \"bbbb\""
                    },
                    {
                        "input": "a = \"abc\", b = \"cba\"",
                        "output": "0",
                        "explanation": "No preprocessing needed, just apply swap operations"
                    },
                    {
                        "input": "a = \"abcdabcd\", b = \"dcbadcba\"",
                        "output": "0",
                        "explanation": "No preprocessing needed, just apply swap operations"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about grouping the interchangeable characters and process them?</p>",
            "<p>Count all the possible cases that require a particular no. of preprocessing moves.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}