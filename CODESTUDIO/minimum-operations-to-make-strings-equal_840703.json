{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8218,
            "title": "Minimum operations to make strings equal",
            "titleSlug": "minimum-operations-to-make-strings-equal_840703",
            "content": "<h4 id=\"you-have-been-given-two-strings-a-and-b-consisting-of-lower-case-english-letters-the-task-is-to-count-the-minimum-number-of-pre-processing-moves-on-the-string-a-required-to-make-it-equal-to-string-b-after-applying-below-operations\">You have been given two strings A and B consisting of lower case English letters. The task is to count the minimum number of pre-processing moves on the string A required to make it equal to string B after applying below operations:</h4>\n\n<pre><code>1. Choose any index i (0 &lt;= i &lt; n) and swap characters a[i]  and b[i].\n2. Choose any index i (0 &lt;= i &lt; n) and swap characters a[i]  and a[n-i-1] .\n3. Choose any index i (0 &lt;= i &lt; n) and swap characters b[i]  and b[n-i-1] .\n</code></pre>\n\n<h4 id=\"in-one-preprocess-move-you-can-replace-a-character-in-a-with-any-other-character-of-the-english-alphabet\">In one preprocess move, you can replace a character in A with any other character of the English alphabet.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The number of changes you make after the preprocess move does not matter.\n2. You cannot apply to preprocess moves to the String B or make any preprocess moves after the first change is made.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains string A consisting of lowercase English letters.\n\nThe second line of each test case contains string B consisting of lowercase English letters.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer denoting the minimum number of pre-processing moves on the string A required to make it equal to the string B. Print -1, if it is impossible to make strings equal.\n\nThe output for each test case is in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given fuction.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n\nWhere \u2018N\u2019 is the length of the strings.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\nabacaba\nbacabaa\nzcabd\ndbacz\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, preprocess moves are as follows: A[0] = \u2018b\u2019, A[2] = \u2018c\u2019, A[3] = \u2018a\u2019 and A[4] = \u2018b\u2019. Afterwards, A = \u2018\u201cbbcabba\u201d. Then we can obtain equal strings by the following sequence of changes: swap(A[2], B[2]) and swap(A[2], A[6]). There is no way to use fewer than 4 preprocess moves before a sequence of changes to make strings equal, so the answer in this test case is 4.\n\nFor the second test case, no preprocess moves are required. We can use the following sequence of changes to make A and B equal: swap(B[1], B[5]), swap(A[2], A[4]).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\nzxyyxzx\nzyzyxyy\njfhjfl\njhkkjs\nabcd\nabcde\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n4\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 60,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given two strings, A and B, consisting of lowercase English letters. Determine the minimum number of pre-processing moves required on string A to make it equal to string B. A pre-processing move involves replacing a character in A with any other lowercase English alphabet character.\n\nAfter pre-processing, the following operations can be applied any number of times to make the strings equal:\n\n1. Swap characters A[i] and B[i] for any index i.\n2. Swap characters A[i] and A[n-i-1] for any index i, where n is the length of the strings.\n3. Swap characters B[i] and B[n-i-1] for any index i, where n is the length of the strings.\n\nNote:\n\n*   The number of changes after the pre-processing move does not matter.\n*   Pre-processing can only be applied to string A and cannot be applied after the initial changes.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 5000 (Length of strings A and B)",
                    "Strings A and B consist of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "abacaba\nbacabaa",
                        "output": "4",
                        "explanation": "Initially, A = 'abacaba' and B = 'bacabaa'. We can change A to 'bbcabba' in 4 moves. A[0] = 'b', A[2] = 'c', A[3] = 'a', A[4] = 'b'. After that, swap(A[2], B[2]) and swap(A[2], A[6]) makes both string equal"
                    },
                    {
                        "input": "zcabd\ndbacz",
                        "output": "0",
                        "explanation": "Initially, A = 'zcabd' and B = 'dbacz'. No preprocessing moves are required.  We can achieve equality by swap(B[1], B[3]), swap(A[2], A[4])."
                    },
                    {
                        "input": "zxyyxzx\nzyzyxyy",
                        "output": "3",
                        "explanation": null
                    },
                    {
                        "input": "jfhjfl\njhkkjs",
                        "output": "4",
                        "explanation": null
                    },
                    {
                        "input": "abcd\nabcde",
                        "output": "-1",
                        "explanation": "The length of strings A and B are different, so it's not possible to make strings equal"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about grouping the interchangeable characters and process them?</p>",
            "<p>Count all the possible cases that require a particular no. of preprocessing moves.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}