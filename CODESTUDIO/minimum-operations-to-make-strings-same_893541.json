{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8786,
            "title": "Minimum Operations to make strings same",
            "titleSlug": "minimum-operations-to-make-strings-same_893541",
            "content": "<h4 id=\"given-two-strings-initial-and-final-where-initial-is-the-initial-string-and-final-is-the-final-string-each-state-will-contain-a-b-and-only-one-empty-slot-represented-by-_-your-task-is-to-transform-the-initial-string-into-the-final-string-with-the-minimum-number-of-operation\">Given two strings \u2018initial\u2019 and \u2018final\u2019 , where \u2018initial\u2019 is the initial string and \u2018final\u2019 is the final string. Each state will contain \u2018a\u2019,\u2019b\u2019 and only one empty slot represented by \u2018_\u2019. Your task is to transform the initial string into the final string with the minimum number of operation.</h4>\n\n<h4 id=\"allowed-operations-are\">Allowed operations are:</h4>\n\n<pre><code>1. You can swap empty character with any adjacent character. (For example, \u2018aba_ab\u2019 can be converted into \u2018ab_aab\u2019 or \u2018abaa_b\u2019).\n\n2. You can swap empty character with next to the adjacent character only if the adjacent character is different from next to the adjacent character. (For example, \u2018aba_ab\u2019 can be converted into \u2018a_abab\u2019 or \u2018ababa_\u2019, but \u2018ab_aab\u2019 cannot be converted to \u2018abaa_b\u2019 because \u2018a\u2019 cannot jump over \u2018a\u2019).\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe next \u20182*T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of each test case consists of a string \u2018initial\u2019 denoting the initial string.\n\nThe second line of each test case consists of a string \u2018final\u2019 denoting the final string.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer denoting the minimum number of operations to convert the initial string to the final string.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. Do not print anything, it has already been taken care of. Just implement the given function.\n\n2. The string characters consist of \u2018a\u2019 \u2018b\u2019 and one  \u2018_\u2019.\n\n3. Length of the initial string is equal to the length of the final string.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 25\n1&lt;= length(initial), length(final) &lt;= 10\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\na_b\nab_\naba_a\n_baaa \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n2 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>Test Case 1:\n\n\n\nThe initial string is: a_b\nThe final string is ab_\n\nWe can clearly see that using the first operation i.e swapping the second and third character we can get the final string ab_.\n\nTherefore we return 1.\n\nTest Case 2: \n\nThe initial string is: aba_a\nThe final string is: _baaa\n\nWe need 2 operations to change the initial string to final string i.e :\n(Consider 0 based indexing)\n1.Swap index 2 and index 3 (Allowed since they are adjacent)\n\nAfter the operation, the string is: ab_aa\n\n2. Swap index 0 and index 2 ( Allowed since \u2018_\u2019 is at index 2 and the elements at index 1 and 0 are different.\nAfter the operation, the string is: _baaa\n\nWhich is the final string.\nHence the minimum of 2 operations are needed.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\nab_bba\nbbbaa_\naa_ab\nb_aaa\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>6\n6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, 'initial' and 'final', each containing 'a', 'b', and a single empty slot represented by '_', determine the minimum number of operations required to transform 'initial' into 'final'.\n\nAllowed operations:\n\n1.  **Adjacent Swap:** Swap the empty slot with any adjacent character.\n2.  **Jump Swap:** Swap the empty slot with the character next to the adjacent character, but only if the two adjacent characters are different.",
                "constraints": [
                    "1 <= T <= 25",
                    "1 <= length(initial), length(final) <= 10",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "a_b\nab_",
                        "output": "1",
                        "explanation": "The initial string 'a_b' can be transformed into the final string 'ab_' by swapping the empty slot '_' with the adjacent character 'b'. This requires only one operation."
                    },
                    {
                        "input": "aba_a\n_baaa",
                        "output": "2",
                        "explanation": "The initial string 'aba_a' can be transformed into the final string '_baaa' in two steps:\n1. Swap '_' with 'a': 'aba_a' -> 'ab_aa'\n2. Swap '_' with 'b': 'ab_aa' -> '_baaa'"
                    },
                    {
                        "input": "ab_bba\nbbbaa_",
                        "output": "6",
                        "explanation": null
                    },
                    {
                        "input": "aa_ab\nb_aaa",
                        "output": "6",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>Use a Breadth-first search to find the optimal answer.</strong></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}