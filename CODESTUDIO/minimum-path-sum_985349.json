{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9445,
            "title": "Minimum Path Sum",
            "titleSlug": "minimum-path-sum_985349",
            "content": "<h4 id=\"ninjaland-is-a-country-in-the-shape-of-a-2-dimensional-grid-grid-with-n-rows-and-m-columns-each-point-in-the-grid-has-some-cost-associated-with-it\">Ninjaland is a country in the shape of a 2-Dimensional grid &#39;GRID&#39;, with &#39;N&#39; rows and &#39;M&#39; columns. Each point in the grid has some cost associated with it.</h4>\n\n<p><br/></p>\n\n<h4 id=\"find-a-path-from-top-left-i-e-0-0-to-the-bottom-right-i-e-n-1-m-1-which-minimizes-the-sum-of-the-cost-of-all-the-numbers-along-the-path-you-need-to-tell-the-minimum-sum-of-that-path\">Find a path from top left i.e. (0, 0) to the bottom right i.e. (&#39;N&#39; - 1, &#39;M&#39; - 1) which minimizes the sum of the cost of all the numbers along the path. You need to tell the minimum sum of that path.</h4>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You can only move down or right at any point in time.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; denoting the number of test cases. \n\nThe first line of each test case contains two space-separated integers &#39;N&#39; and \u2018M\u2019 representing the number of rows and number of columns in the grid, respectively. \n\nNext &#39;N&#39; lines will have &#39;M&#39; space-separated integers, each line denotes cost values of that row.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the minimum sum of the path from top left to bottom right.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve this in O(1) space complexity?\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100   \n1 &lt;= N, M &lt;= 10^2\n1 &lt;= GRID[i][j] &lt;= 10^5\n\nWhere &#39;GRID[i][j]&#39; denotes the value of the cell in the matrix.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 3\n5 9 6\n11 5 2\n1 1\n5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>21\n5\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>In test case 1, Consider a grid of 2*3:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/first1-6822.PNG\" alt=\"\"></p>\n\n<pre><code>For this the grid the path with minimum value is (0,0) -&gt; (0,1) -&gt; (1,1) -&gt; (1,2). And the sum along this path is 5 + 9 +5 + 2 = 21. So the ans is 21.\n\nIn test case 2, The given grid is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/first2-6823.PNG\" alt=\"\"></p>\n\n<pre><code>For this the grid the path with minimum value is (0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (1,2) -&gt; (2,2).The sum along this path is 1 + 2 + 3 + 4 + 9 = 19.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2 2\n5 6\n1 2\n3 3\n1 2 3\n4 5 4\n7 5 9\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>8\n19\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation For Sample Output 2:</h5>\n\n<pre><code>In test case 1, For this the grid the path with minimum value is (0,0) -&gt; (1,0) -&gt; (1,1). The sum along this path is 5 + 1 + 2 = 8.\n\nIn test case 2, The given grid is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/first2-6823.PNG\" alt=\"\"></p>\n\n<pre><code>For this the grid the path with minimum value is (0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (1,2) -&gt; (2,2).The sum along this path is 1 + 2 + 3 + 4 + 9 = 19.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 168,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D grid of size N x M, where each cell has a cost associated with it, find the minimum cost path from the top-left cell (0, 0) to the bottom-right cell (N-1, M-1). You can only move down or right at any point in time. Return the minimum sum of the costs along this path.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N, M <= 10^2",
                    "1 <= GRID[i][j] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "2\n2 3\n5 9 6\n11 5 2\n1 1\n5",
                        "output": "21\n5",
                        "explanation": "Test case 1: For the 2x3 grid, the optimal path is (0,0) -> (0,1) -> (1,1) -> (1,2) with a total cost of 5 + 9 + 5 + 2 = 21.\nTest case 2: For the 1x1 grid, the only path is from (0,0) to (0,0) with a cost of 5."
                    },
                    {
                        "input": "2\n2 2\n5 6\n1 2\n3 3\n1 2 3\n4 5 4\n7 5 9",
                        "output": "8\n19",
                        "explanation": "Test case 1: For the 2x2 grid, the optimal path is (0,0) -> (1,0) -> (1,1) with a total cost of 5 + 1 + 2 = 8.\nTest case 2: For the 3x3 grid, the optimal path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) with a total cost of 1 + 2 + 3 + 4 + 9 = 19."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The very first approach can be to try all possible paths from top left to bottom right and minimize the path sum among the valid ones.</p>",
            "<p>Eliminate the need for solving the same subproblems again and again.&nbsp;</p>",
            "<p>Solve the small problem first and then reach the final answer using a bottom-up approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N * M)\n    Space Complexity: O(1)\n\n    Where 'N' is the number of rows and 'M' is the number of columns in grid.\n*/\n\nint minSumPath(vector<vector<int>> &grid) {\n    int n = grid.size();\n    int m = grid[0].size();\n\n    // Iterating all the grid cells.\n    for (int i = n - 1; i >= 0; i--) {\n        for (int j = m - 1; j >= 0; j--) {   \n            // If it is the bottom rightmost cell.\n            if (i == n - 1 && j == m - 1) {\n                continue;\n            }\n            // If the cell is in last row.\n            else if (i == n - 1) {\n                grid[i][j] = grid[i][j] + grid[i][j + 1];\n            }\n            // If the cell is in last column.\n            else if (j == m - 1) {\n                grid[i][j] = grid[i][j] + grid[i + 1][j];\n            }\n            // Else store the value which will be minimum of both the directions.\n            else {\n                grid[i][j] = grid[i][j] + min(grid[i + 1][j], grid[i][j + 1]);\n            }\n        }\n    }\n    // Return the minimum path sum.\n    return grid[0][0];\n}\n\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N * M)\n    Space Complexity: O(1)\n\n    Where 'N' is the number of rows and 'M' is the number of columns in grid.\n*/\n\npublic class Solution {\n    public static int minSumPath(int[][] grid) {\n        int n = grid.length;\n        int m = grid[0].length;\n\n        // Iterating all the grid cells.\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                // If it is the bottom rightmost cell.\n                if (i == n - 1 && j == m - 1) {\n                    continue;\n                }\n                // If the cell is in last row.\n                else if (i == n - 1) {\n                    grid[i][j] = grid[i][j] + grid[i][j + 1];\n                }\n                // If the cell is in last column.\n                else if (j == m - 1) {\n                    grid[i][j] = grid[i][j] + grid[i + 1][j];\n                }\n                // Else store the value which will be minimum of both the directions.\n                else {\n                    grid[i][j] = grid[i][j] + Math.min(grid[i + 1][j], grid[i][j + 1]);\n                }\n            }\n        }\n        // Return the minimum path sum.\n        return grid[0][0];\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\n    Time Complexity: O(N * M)\n    Space Complexity: O(1)\n\n    Where 'N' is the number of rows and 'M' is the number of columns in grid.\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10**7)\n\ndef minSumPath(grid):\n    n = len(grid)\n    m = len(grid[0])\n\n    lst = [i for i in range(n)]\n    lst2 = [j for j in range(m)]\n    lst.reverse()\n    lst2.reverse()\n\n    # Iterating all the grid cells.\n    for i in lst:\n        for j in lst2:\n            # If it is the bottom rightmost cell.\n            if (i == n - 1 and j == m - 1):\n                continue\n            \n            # If the cell is in last row.\n            elif (i == n - 1):\n                grid[i][j] = grid[i][j] + grid[i][j + 1]\n                \n            # If the cell is in last column.\n            elif (j == m - 1):\n                grid[i][j] = grid[i][j] + grid[i + 1][j]\n            \n            # Else store the value which will be minimum of both the directions.\n            else:\n                grid[i][j] = grid[i][j] + min(grid[i + 1][j], grid[i][j + 1])\n\n    # Return the minimum path sum.\n    return grid[0][0]\n\n# Main.\nt = int(input())\nwhile (t > 0):\n    l = list(map(int, input().split()))\n    n,m = l[0], l[1]\n    grid = []\n    for i in range(n):\n        ll = list(map(int, input().split()))\n        grid.append(ll)\n    print(minSumPath(grid))\n    t -= 1",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}