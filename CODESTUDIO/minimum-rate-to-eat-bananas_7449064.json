{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 24522,
            "title": "Minimum Rate To Eat Bananas",
            "titleSlug": "minimum-rate-to-eat-bananas_7449064",
            "content": "<h4 id=\"a-monkey-is-given-n-piles-of-bananas-where-the-ith-pile-has-a-i-bananas-an-integer-h-is-also-given-which-denotes-the-time-in-hours-in-which-all-the-bananas-should-be-eaten\">A monkey is given <em><strong>\u2018n\u2019</strong></em> piles of bananas, where the &#39;ith&#39; pile has <em><strong>\u2018a[i]\u2019</strong></em> bananas. An integer <em><strong>\u2018h\u2019</strong></em> is also given, which denotes the time (in hours) in which all the bananas should be eaten.</h4>\n\n<p><br></p>\n\n<h4 id=\"each-hour-the-monkey-chooses-a-non-empty-pile-of-bananas-and-eats-m-bananas-if-the-pile-contains-less-than-m-bananas-then-the-monkey-consumes-all-the-bananas-and-won-t-eat-any-more-bananas-in-that-hour\">Each hour, the monkey chooses a non-empty pile of bananas and eats <em><strong>\u2018m\u2019</strong></em> bananas. If the pile contains less than \u2018m\u2019 bananas, then the monkey consumes all the bananas and won\u2019t eat any more bananas in that hour.</h4>\n\n<p><br></p>\n\n<h4 id=\"find-the-minimum-number-of-bananas-m-to-eat-per-hour-so-that-the-monkey-can-eat-all-the-bananas-within-h-hours\">Find the minimum number of bananas \u2018m\u2019 to eat per hour so that the monkey can eat all the bananas within \u2018h\u2019 hours.</h4>\n\n<p><br></p>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Input: \u2018n\u2019 = 4, \u2018a\u2019 =  [3, 6, 2, 8] , \u2018h\u2019 = 7\n\nOutput: 3\n\nExplanation: If \u2018m\u2019 = 3, then \nThe time taken to empty the 1st pile is 1 hour.\nThe time taken to empty the 2nd pile is 2 hour.\nThe time taken to empty the 3rd pile is 1 hour.\nThe time taken to empty the 4th pile is 3 hour.\nTherefore a total of 7 hours is taken. It can be shown that if the rate of eating bananas is reduced, they can\u2019t be eaten in 7 hours.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line contains one integer, \u2018n\u2019, denoting the number of piles of bananas.\n\nThe second line contains \u2018n\u2019 integers denoting the number of bananas on the ith pile.\n\nThe third line contains one integer, \u2018h\u2019, denoting the time (in hours) in which all bananas should be eaten.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>Return the minimum number of bananas (\u2018m\u2019) to eat per hour so the monkey can eat all the bananas within \u2018h\u2019 hours.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print anything. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4\n7 15 6 3\n8\n</code></pre>\n\n<p><br/>   </p>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>5\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>Input: \u2018n\u2019 = 4, \u2018a\u2019 = [7, 15, 6, 3], \u2018h\u2019 = 8\n\nOutput: 5\n\nExplanation: If \u2018m\u2019 = 5, then \nThe time taken to empty the 1st pile is 2 hour.\nThe time taken to empty the 2nd pile is 3 hour.\nThe time taken to empty the 3rd pile is 2 hour.\nThe time taken to empty the 4th pile is 1 hour.\nTherefore a total of 8 hours is taken. It can be shown that if the rate of eating bananas is reduced, they can\u2019t be eaten in 8 hours.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5\n25 12 8 14 19\n5\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>25\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2:</h5>\n\n<pre><code>Input: \u2018n\u2019 = 5, \u2018a\u2019 = [25,12,8,14,19], \u2018h\u2019 = 5\n\nOutput: 25\n\nExplanation: If \u2018m\u2019 = 25, \nThe time taken to empty the 1st pile is 1 hour.\nThe time taken to empty the 2nd pile is 1 hour.\nThe time taken to empty the 3rd pile is 1 hour.\nThe time taken to empty the 4th pile is 1 hour.\nThe time taken to empty the 5th pile is 1 hour.\nTherefore a total of 5 hours is taken. It can be shown that if the rate of eating bananas is reduced, they can\u2019t be eaten in 5 hours.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to solve the problem in O(log n).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= n &lt;= 10^4\n1 &lt;= a[i] &lt;= 10^9\nn &lt;= h &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 181,
            "dislikes": "NA",
            "rephrased": {
                "body": "A monkey is given 'n' piles of bananas, where the 'ith' pile has 'a[i]' bananas. Given an integer 'h', which represents the time (in hours) the monkey has to eat all the bananas, determine the minimum number of bananas 'm' the monkey must eat per hour to finish all the bananas within 'h' hours.  Each hour, the monkey selects a pile and eats 'm' bananas. If a pile has fewer than 'm' bananas, the monkey eats all remaining bananas in that pile and does not eat any more bananas that hour.",
                "constraints": [
                    "1 <= n <= 10^4",
                    "1 <= a[i] <= 10^9",
                    "n <= h <= 10^9",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4\n7 15 6 3\n8",
                        "output": "5",
                        "explanation": "With m = 5, the time taken to empty the piles are: 2 hours (7/5 rounded up), 3 hours (15/5), 2 hours (6/5 rounded up), and 1 hour (3/5 rounded up).  The total time is 2 + 3 + 2 + 1 = 8 hours.  A lower value of 'm' would result in exceeding the available time, h = 8."
                    },
                    {
                        "input": "5\n25 12 8 14 19\n5",
                        "output": "25",
                        "explanation": "With m = 25, the time taken to empty the piles are: 1 hour, 1 hour, 1 hour, 1 hour, and 1 hour. The total time is 5 hours, matching the given h = 5. Any value less than 25 would not allow the monkey to finish within the allotted time since the largest pile is 25."
                    },
                    {
                        "input": "4\n3 6 2 8\n7",
                        "output": "3",
                        "explanation": "With m = 3, the time taken to empty the piles are: 1 hour, 2 hours, 1 hour, and 3 hours. The total time is 7 hours. A lower value of 'm' would result in exceeding the available time, h = 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Apply Binary Search on the eating rate of bananas per hour.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n\tTime Complexity: O(N * logM)\r\n\t\r\n\tSpace Complexity: O(1)\r\n\t\r\n\t where N is the number of piles, \r\n     and M is the integer(1e9).\r\n*/\r\nint minimumRateToEatBananas(vector<int> v, int h) {\r\n    // Number of piles of bananas\r\n    int n = v.size();\r\n    \r\n    // Lower and Upper bound for the rate to\r\n    // eat bananas\r\n    long long s = 1, e = (long long)1e9;\r\n    // long long is used to avoid overflow in some \r\n    // scenario\r\n    \r\n    // \"ans\" will store the minimum rate to\r\n    // eat bananas\r\n    int ans = -1;\r\n    \r\n    // Applying Binary Search\r\n    while(s <= e) {\r\n        long long mid = (s + e) >> 1;\r\n        \r\n        // We assume that the rate to eat bananas\r\n        // is \"mid\"\r\n        // Now, we calculate the time taken to eat all \r\n        // bananas\r\n        // It will be stored in \"cnt\"\r\n        long long cnt = 0;\r\n        for(int i = 0; i < n; ++i) {\r\n            int p = v[i];\r\n            \r\n            // Adding ceil value\r\n            cnt += (p + mid - 1) / mid;\r\n        }\r\n        \r\n        if(cnt <= h) {\r\n            // With this rate, we can eat all bananas\r\n            // within the time\r\n            ans = mid;\r\n            // Searching for smaller rate\r\n            e = mid - 1;\r\n        }\r\n        else {\r\n            // Searching for higher rate\r\n            s = mid + 1;\r\n        }\r\n    }\r\n    return ans;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\r\n\tTime Complexity: O(N * logM)\r\n\t\r\n\tSpace Complexity: O(1)\r\n\t\r\n\t where N is the number of piles, \r\n     and M is the integer(1e9).\r\n\"\"\"\r\n\r\n\r\ndef minimumRateToEatBananas(v: [int], h: int) -> int:\r\n    # Number of piles of bananas\r\n    n = len(v)\r\n\r\n    # Lower and Upper bound for the rate to\r\n    # eat bananas\r\n    s = 1\r\n    e = int(1e9)\r\n    # long long is used to avoid overflow in some\r\n    # scenario\r\n\r\n    # \"ans\" will store the minimum rate to\r\n    # eat bananas\r\n    ans = -1\r\n\r\n    # Applying Binary Search\r\n    while s <= e:\r\n        mid = (s + e) // 2\r\n        # We assume that the rate to eat bananas\r\n        # is \"mid\"\r\n        # Now, we calculate the time taken to eat all\r\n        # bananas\r\n        # It will be stored in \"cnt\"\r\n        cnt = 0\r\n        for i in range(n):\r\n            p = v[i]\r\n\r\n            # Adding ceil value\r\n            cnt += (p + mid - 1) // mid\r\n\r\n        if cnt <= h:\r\n            # With this rate, we can eat all bananas\r\n            # within the time\r\n            ans = mid\r\n            # Searching for smaller rate\r\n            e = mid - 1\r\n        else:\r\n            # Searching for higher rate\r\n            s = mid + 1\r\n    return ans\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n   Time Complexity: O(N * logM)\r\n\r\n   Space Complexity: O(1)\r\n\r\n    where N is the number of piles,\r\n    and M is the integer(1e9).\r\n*/\r\npublic class Solution {\r\n    public static int minimumRateToEatBananas(int []v, int h) {\r\n        // Number of piles of bananas\r\n        int n = v.length;\r\n\r\n        // Lower and Upper bound for the rate to\r\n        // eat bananas\r\n        long s = 1, e = (long)1000000000;\r\n        // long long is used to avoid overflow in some \r\n        // scenario\r\n\r\n        // \"ans\" will store the minimum rate to\r\n        // eat bananas\r\n        int ans = -1;\r\n\r\n        // Applying Binary Search\r\n        while(s <= e) {\r\n            long mid = (s + e) >> 1;\r\n\r\n            // We assume that the rate to eat bananas\r\n            // is \"mid\"\r\n            // Now, we calculate the time taken to eat all \r\n            // bananas\r\n            // It will be stored in \"cnt\"\r\n            long cnt = 0;\r\n            for(int i = 0; i < n; ++i) {\r\n                int p = v[i];\r\n\r\n                // Adding ceil value\r\n                cnt += (p + mid - 1) / mid;\r\n            }\r\n\r\n            if(cnt <= h) {\r\n                // With this rate, we can eat all bananas\r\n                // within the time\r\n                ans = (int)mid;\r\n                // Searching for smaller rate\r\n                e = mid - 1;\r\n            }\r\n            else {\r\n                // Searching for higher rate\r\n                s = mid + 1;\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}