{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16442,
            "title": "Minimum Sorted Groups",
            "titleSlug": "minimum-sorted-groups_3153016",
            "content": "<h4 id=\"you-are-given-an-array-arr-containing-n-integers\">You are given an array \u2018ARR\u2019 containing \u2018N\u2019 integers.</h4>\n\n<h4 id=\"you-have-a-simple-task-you-need-to-split-the-elements-of-this-array-into-different-groups-inside-each-group-the-relative-order-between-elements-must-be-maintained\">You have a simple task, you need to split the elements of this array into different groups, inside each group the relative order between elements must be maintained.</h4>\n\n<h4 id=\"you-need-to-find-the-minimum-number-of-groups-that-are-required-to-be-formed-such-that-elements-inside-each-group-are-sorted-in-ascending-order\">You need to find the minimum number of groups that are required to be formed such that elements inside each group are sorted in ascending order.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If \u2018N\u2019 = 7 and \u2018ARR\u2019 = { 1, 5, 2, 3, 4, 6, 7 }\n\nThen, we can split the array elements into two groups: { 1, 2, 3, 4 } and { 5, 6, 7 }, this splitting is valid as it maintains the relative ordering of the elements of the original array and after splitting all the groups contain elements in sorted order. Therefore we will print 2.\n\nNote that a group like { 1, 2, 3, 5 } can\u2019t be formed as it doesn\u2019t have relative ordering the same as the input array.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains a single integer \u2018N\u2019, denoting the size of the array.\n\nThe second line of each test case contains &#39;N&#39; integers \u2018ARR\u2019, denoting the array elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the count of minimum groups that need to be formed.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 T \u2264 10      \n1 \u2264 N \u2264 5000\n-10^9 \u2264 ARR[i] \u2264 10^9\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n7\n1 5 2 3 4 6 7\n6\n-1 0 2 3 4 6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For test case 1 :\nWe will print 2 because:\nWe can split the array elements into two groups: { 1, 2, 3, 4 } and { 5, 6, 7 }, this splitting is valid as it maintains the relative ordering of the elements of the original array and after splitting all the groups contain elements in sorted order.\n\nFor test case 2 : \nWe will print 1 because:\nThe given array is itself sorted, so all the elements can be grouped together and this will result in the formation of a sorted group while maintaining the relative order of the array elements.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4\n3 1 2 0\n3\n1 1 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>3\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'ARR' of 'N' integers, the task is to split the array elements into the minimum number of groups such that within each group, the elements are in ascending order, and the relative order of elements from the original array is preserved.",
                "constraints": [
                    "1 \u2264 T \u2264 10",
                    "1 \u2264 N \u2264 5000",
                    "-10^9 \u2264 ARR[i] \u2264 10^9",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "7\n1 5 2 3 4 6 7",
                        "output": "2",
                        "explanation": "The array can be split into two groups: {1, 2, 3, 4} and {5, 6, 7}. Both groups are sorted in ascending order, and the relative order of elements from the original array is maintained."
                    },
                    {
                        "input": "6\n-1 0 2 3 4 6",
                        "output": "1",
                        "explanation": "The array is already sorted in ascending order, so it can be considered as a single group."
                    },
                    {
                        "input": "4\n3 1 2 0",
                        "output": "3",
                        "explanation": "One possible optimal grouping: {3}, {1, 2}, {0}. This requires 3 groups to ensure ascending order within each group while maintaining the original relative order."
                    },
                    {
                        "input": "3\n1 1 0",
                        "output": "2",
                        "explanation": "One possible optimal grouping: {1, 1}, {0}. This requires 2 groups to ensure ascending order within each group while maintaining the original relative order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Is there a way to keep the track of the last element of each sorted group?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}