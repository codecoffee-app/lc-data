{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7307,
            "title": "Minimum Spanning Tree",
            "titleSlug": "minimum-spanning-tree_631769",
            "content": "<h4 id=\"you-are-given-an-undirected-connected-and-weighted-graph-g-v-e-consisting-of-v-number-of-vertices-numbered-from-0-to-v-1-and-e-number-of-edges\">You are given an undirected, connected and weighted graph G(V, E), consisting of V number of vertices (numbered from 0 to V-1) and E number of edges.</h4>\n\n<h4 id=\"find-and-print-the-total-weight-of-the-minimum-spanning-tree-mst-using-kruskals-algorithm\">Find and print the total weight of the Minimum Spanning Tree (MST) using Kruskal&#39;s algorithm.</h4>\n\n<h4 id=\"by-definition-a-minimum-weight-spanning-tree-is-a-subset-of-the-edges-of-a-connected-edge-weighted-undirected-graph-that-connects-all-the-vertices-together-without-any-cycles-and-with-the-minimum-possible-total-edge-weight\">By definition, a minimum weight spanning tree is a subset of the edges of a connected, edge-weighted undirected graph that connects all the vertices together, without any cycles and with the minimum possible total edge weight.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first input contains two integers, N and M, the number of vertices and edges in the graph respectively.\n\nThe next M input lines contains three integers X, Y and W each, representing each edge of the graph.\n\nThe edge X Y W represents an edge between vertices X and Y, having weight W.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The edges will be passed to the function as a array of arrays. Each array will contain 3 integers, X, Y, and W in that order.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print the total weight of the minimum spanning tree.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t explicitly have to print anything, just return the total weight.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>2 &lt;= V &lt;= 10^5\n1 &lt;= E &lt;= 3 * 10^5\n0 &lt;= X &lt; N\n0 &lt;= Y &lt; N\n1 &lt;= W &lt;= 10^4\n\nwhere V and E represent the number of vertices and edges respectively.\nX and Y represent the vertices between which there is an edge.\nW is the weight of the edge.\n\nTime limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>4 4\n0 1 3\n0 3 5\n1 2 1\n2 3 8\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>9\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>The edge (2,3) having weight 8 will be excluded from the MST. The total weight of the MST then will be 1 + 3 + 5 = 9.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4 4\n1 2 6\n2 3 2\n1 3 2\n1 0 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 114,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected, connected, and weighted graph G(V, E) with V vertices (numbered 0 to V-1) and E edges, find the total weight of the Minimum Spanning Tree (MST) using Kruskal's algorithm. The MST is a subset of edges that connects all vertices without cycles and has the minimum total edge weight.",
                "constraints": [
                    "2 <= V <= 10^5",
                    "1 <= E <= 3 * 10^5",
                    "0 <= X < N",
                    "0 <= Y < N",
                    "1 <= W <= 10^4",
                    "Time limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "4 4\n0 1 3\n0 3 5\n1 2 1\n2 3 8",
                        "output": "9",
                        "explanation": "The edges are: (0,1,3), (0,3,5), (1,2,1), and (2,3,8). Kruskal's algorithm will select edges in increasing order of weight. The MST includes edges (1,2,1), (0,1,3), and (0,3,5). The edge (2,3,8) is excluded to avoid a cycle. The total weight is 1 + 3 + 5 = 9."
                    },
                    {
                        "input": "4 4\n1 2 6\n2 3 2\n1 3 2\n1 0 2",
                        "output": "6",
                        "explanation": "The edges are: (1,2,6), (2,3,2), (1,3,2), and (1,0,2). Kruskal's algorithm selects edges in increasing order of weight. The MST includes edges (2,3,2), (1,3,2), and (1,0,2). Total weight is 2+2+2 = 6.  The edge (1,2,6) is not included to prevent a cycle and because the graph is already connected with the first three edges and lower weights."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can a greedy solution where you consider edges in the increasing order of their weights work?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity - O(E * log(V))\r\n    Space Complexity - O(E + V)\r\n\r\n    where V is the number of nodes in the graph.\r\n    and E is the number of edges in the graph.\r\n*/\r\n\r\n#include <vector>\r\n#include <algorithm>\r\nusing namespace std;\r\n\r\n// Comparator for sorting edges in increasing order of their weights\r\nbool sortByWeight(const vector<int>& edge1, const vector<int>& edge2)\r\n{\r\n    return edge1[2] < edge2[2];\r\n}\r\n\r\n// Finding the set of a node\r\n// (Uses path compression technique)\r\nint findSet(vector<int>& parent, int node)\r\n{\r\n    if (node == parent[node])\r\n        return node;\r\n    return parent[node] = findSet(parent, parent[node]);\r\n}\r\n\r\n// Function to initialize a set\r\nvoid makeSet(vector<int>& parent, vector<int>& rank, int node)\r\n{\r\n    parent[node] = node;\r\n    rank[node] = 0;\r\n}\r\n\r\n// Function that does the union of two sets\r\nvoid unionSet(vector<int>& parent,vector<int>& rank, int set1, int set2)\r\n{\r\n    set1 = findSet(parent, set1);\r\n    set2 = findSet(parent, set2);\r\n\r\n    if (set1 != set2)\r\n    {\r\n        if (rank[set1] < rank[set2])\r\n        {\r\n            swap(set1, set2);\r\n        }\r\n\r\n        parent[set2] = set1;\r\n\r\n        if (rank[set1] == rank[set2])\r\n        {\r\n            rank[set1]++;\r\n        }\r\n    }\r\n}\r\n\r\n// Function which returns weight of the MST of a graph\r\nint minimumSpanningTree(vector<vector<int>>& edges, int n)\r\n{\r\n    // Sort edges by increasing order of their weight\r\n    sort(edges.begin(), edges.end(), sortByWeight);\r\n\r\n    // Variable to store weight of MST\r\n    int finalWeight = 0;\r\n\r\n\r\n    vector<int> parent(n);\r\n    vector<int> rank(n);\r\n\r\n    // Initializing all sets\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        makeSet(parent, rank, i);\r\n    }\r\n\r\n    // Traverse through edges in increasing order of their weights\r\n    for (int i = 0; i < edges.size(); i++)\r\n    {\r\n        // Find the set for each node in the edge\r\n        int set1 = findSet(parent, edges[i][0]);\r\n        int set2 = findSet(parent, edges[i][1]);\r\n\r\n        // If both sets are different, perform union\r\n        // And add this edge to our final MST, hence add its weight to final weight\r\n\r\n        // Avoiding cycle\r\n        if(set1 != set2)\r\n        {\r\n            finalWeight += edges[i][2];\r\n\r\n            // Perform union\r\n            unionSet(parent,rank, set1, set2);\r\n        }\r\n    }\r\n\r\n    // Return weight of MST\r\n    return finalWeight;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity - O(e *log v)\n    Space Complexity - O(e + v)\n\n    where v is the number of nodes in the graph\n    and e is the number of edges in the graph\n'''\nfrom sys import stdin,setrecursionlimit\nsetrecursionlimit(10**7)\n\n\n\n# Edge class for storing the Edges of thee graph\nclass Edge:\n    \n    def __init__(self, start, end, weight) :\n\n        self.start = start\n        self.end = end\n        self.weight = weight\n\n\n# Finding the set of a node\n# (Uses path compression technique)\n\ndef findSet(parent, node) :\n\n    if (node == parent[node]) :\n        return node\n     \n    parent[node] = findSet(parent, parent[node])\n    return parent[node]\n\n\n# Function that does the union of two sets\ndef unionSet(parent, rank, set1, set2) :\n\n    set1 = findSet(parent, set1)\n    set2 = findSet(parent, set2)\n\n    if (set1 != set2) :\n    \n        if (rank[set1] < rank[set2]) :\n        \n            temp = set1\n            set1 = set2\n            set2 = temp\n        \n        parent[set2] = set1\n\n        if (rank[set1] == rank[set2]) :\n        \n            rank[set1] += 1\n        \n\ndef minimumSpanningTree(edges, V, E):\n\n\t# Sort edges by increasing order of their weight\n    edges.sort(key = lambda temp : temp.weight)\n\n    # Variable to store weight of MST\n    finalWeight = 0\n    parent = [i for i in range(V)]\n    rank = [0 for i in range(V)]\n\n    # Traverse through edges in increasing order of their weights\n    for i in range(len(edges)) :\n\n        # Find the set for each node in the edge\n        set1 = findSet(parent, edges[i].start)\n        set2 = findSet(parent, edges[i].end)\n\n        # If both sets are different, perform union\n        # And add this edge to our final MST, hence add its weight to final weight\n        # Avoiding cycle\n        if(set1 != set2) :\n        \n            finalWeight += edges[i].weight\n\n            # Perform union\n            unionSet(parent,rank, set1, set2)\n\n    # Return weight of MST\n    return finalWeight\n\n\n#taking inpit using fast I/O\ndef takeInput() :\n    n_m = stdin.readline().strip().split(\" \")\n    V = int(n_m[0].strip())\n    E = int(n_m[1].strip())\n\n    edges = [Edge(0, 0, 0) for i in range(E)]\n    for i in range(E) :\n\n        temp = list(map(int, stdin.readline().strip().split(\" \")))\n        edges[i] = Edge(temp[0], temp[1], temp[2])\n\n    return edges, V, E\n\n\n#main\nedges, V, E = takeInput()\nprint(minimumSpanningTree(edges, V, E))\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "\n/*\n    Time Complexity - O(E * log(V))\n    Space Complexity - O(E + V)\n\n    where V is the number of nodes in the graph.\n    and E is the number of edges in the graph.\n*/\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\n\n\n// Comparator for sorting edges in increasing order of their weights\nclass ListComparator<T extends Comparable<T>> implements Comparator<ArrayList<T>> {\n\n\t@Override\n\tpublic int compare(ArrayList<T> firstEdge, ArrayList<T> secondEdge) {\n\t\t\n\t\tT firstWeight = firstEdge.get(2);\n\t\tT secondWeight = secondEdge.get(2);\n\t\t\n\t\treturn Integer.valueOf(firstWeight.toString()) - Integer.valueOf(secondWeight.toString());\n\t}\n\t\n}\n\npublic class Solution {\n\n\t// Finding the set of a node\n\t// (Uses path compression technique)\n\tprivate static int findSet(ArrayList<Integer> parent, int node) {\n\t\tif (node == parent.get(node)) {\n\t\t\treturn node;\n\t\t}\n\n\t\tparent.set(node, findSet(parent, parent.get(node)));\n\n\t\treturn parent.get(node);\n\t}\n\n\t// Function to initialize a set\n\tprivate static void makeSet(ArrayList<Integer> parent, ArrayList<Integer> rank, int node) {\n\t\tparent.set(node, node);\n\t\trank.set(node, 0);\n\t}\n\n\t// Function that does the union of two sets\n\tprivate static void unionSet(ArrayList<Integer> parent, ArrayList<Integer> rank, int set1, int set2) {\n\t\tset1 = findSet(parent, set1);\n\t\tset2 = findSet(parent, set2);\n\n\t\tif (set1 != set2) {\n\t\t\tif (rank.get(set1) < rank.get(set2)) {\n\t\t\t\tint temp = set1;\n\t\t\t\tset1 = set2;\n\t\t\t\tset2 = temp;\n\t\t\t}\n\n\t\t\tparent.set(set2, set1);\n\n\t\t\tif (rank.get(set1).equals(rank.get(set2))) {\n\t\t\t\trank.set(set1, rank.get(set1) + 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Function which returns weight of the MST of a graph\n\tpublic static int minimumSpanningTree(ArrayList<ArrayList<Integer>> edges, int n) {\n\t\t// Sort edges by increasing order of their weight\n\t\t// sort(edges.begin(), edges.end(), sortByWeight);\n\t\tCollections.sort(edges, new ListComparator<>());\n\n\t\t// Variable to store weight of MST\n\t\tint finalWeight = 0;\n\n\t\tArrayList<Integer> parent = new ArrayList<>();\n\t\tArrayList<Integer> rank = new ArrayList<>();\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tparent.add(null);\n\t\t\trank.add(null);\n\t\t}\n\n\t\t// Initializing all sets\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tmakeSet(parent, rank, i);\n\t\t}\n\n\t\t// Traverse through edges in increasing order of their weights\n\t\tfor (int i = 0; i < edges.size(); i++) {\n\t\t\t// Find the set for each node in the edge\n\t\t\tint set1 = findSet(parent, edges.get(i).get(0));\n\t\t\tint set2 = findSet(parent, edges.get(i).get(1));\n\n\t\t\t// If both sets are different, perform union\n\t\t\t// And add this edge to our final MST, hence add its weight to final weight\n\n\t\t\t// Avoiding cycle\n\t\t\tif (set1 != set2) {\n\t\t\t\tfinalWeight += edges.get(i).get(2);\n\n\t\t\t\t// Perform union\n\t\t\t\tunionSet(parent, rank, set1, set2);\n\t\t\t}\n\t\t}\n\n\t\t// Return weight of MST\n\t\treturn finalWeight;\n\t}\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}