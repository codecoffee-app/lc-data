{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9548,
            "title": "Minimum steps taken by knight to reach target",
            "titleSlug": "minimum-steps-taken-by-knight-to-reach-target_1062628",
            "content": "<h4 id=\"you-are-given-a-2d-matrix-of-size-n-x-n-which-is-nothing-but-a-square-chessboard-given-the-starting-and-target-positions-of-the-knight-you-are-supposed-to-return-the-minimum-number-of-steps-required-by-the-knight-to-reach-the-target-position-from-the-given-starting-point\">You are given a 2D matrix of size N x N which is nothing but a square chessboard. Given the starting and target positions of the knight, you are supposed to return the minimum number of steps required by the knight to reach the target position from the given starting point.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Following is the possible movements of the knight from a particular position.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/knight_moves-6832.png\" alt=\"alt text\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code> The first line of input contains an integer &#39;T&#39; representing the number of the test case. Then the test cases are as follows.\n\n The first line of each test case contains one integer \u2018N\u2019 representing the side of the square chessboard or 2D matrix.\n\n The second line contains two integers \u2018SX\u2019 and \u2018SY\u2019 representing the starting position of the knight in the chessboard.\n\n The third line contains two integers \u2018TX\u2019 and \u2018TY\u2019 representing the target position in the chessboard.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the minimum number of steps taken by the knight to reach the target position from the given starting position.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; It has already been taken care of. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 T \u2264 50\n1 \u2264 N \u2264 100\n1 \u2264 SX,SY,TX,TY \u2264 100\n\nWhere \u2018T\u2019 is the number of test cases.\n\u2018N\u2019 is the side of the given chessboard or matrix.\n\u2018SX\u2019, \u2018SY\u2019, \u2018TX\u2019, \u2018TY\u2019 denotes the starting and target positions in the given chessboard.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n10\n2 3 5 9 \n10\n1 5 9 8\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n5    \n</code></pre>\n\n<h5 id=\"explanation-of-input-1\">Explanation of Input 1 :</h5>\n\n<pre><code>For, first test case, the minimum number of steps taken by the knight to reach the target position is 3.\nThe steps followed will be starting from (2,3) -&gt; (3,5) -&gt; (4,7) -&gt; (5,9), so in total there are 3 minimum steps that a knight needs to reach target position.\n\nFor, second test case, the minimum number of steps taken by the knight to reach the target position is 5.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4\n1 2 3 4\n4\n2 3 4 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a square chessboard of size N x N, determine the minimum number of moves a knight needs to reach a target position (TX, TY) from a starting position (SX, SY). The knight can move in the standard 'L' shape (two squares in one direction and one square perpendicularly).",
                "constraints": [
                    "1 \u2264 T \u2264 50",
                    "1 \u2264 N \u2264 100",
                    "1 \u2264 SX, SY, TX, TY \u2264 100"
                ],
                "testcases": [
                    {
                        "input": "n = 10, sx = 2, sy = 3, tx = 5, ty = 9",
                        "output": "3",
                        "explanation": "The minimum number of steps taken by the knight to reach the target position is 3. One possible path: (2,3) -> (3,5) -> (4,7) -> (5,9)."
                    },
                    {
                        "input": "n = 10, sx = 1, sy = 5, tx = 9, ty = 8",
                        "output": "5",
                        "explanation": "The minimum number of steps taken by the knight to reach the target position is 5."
                    },
                    {
                        "input": "n = 4, sx = 1, sy = 2, tx = 3, ty = 4",
                        "output": "2",
                        "explanation": "The minimum number of steps taken by the knight to reach the target position is 2. One possible path: (1,2) -> (3,3) -> (3,4)"
                    },
                    {
                        "input": "n = 4, sx = 2, sy = 3, tx = 4, ty = 4",
                        "output": "1",
                        "explanation": "The minimum number of steps taken by the knight to reach the target position is 1. One possible path: (2,3) -> (4,4)"
                    },
                    {
                        "input": "n = 5, sx = 1, sy = 1, tx = 1, ty = 1",
                        "output": "0",
                        "explanation": "The start and target positions are the same, so no moves are required."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of all the possible 8 positions where the knight can reach from the current position.</p>",
            "<p>Check whether the results are different in the case if the knight and the target positions are in the same rows or columns.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}