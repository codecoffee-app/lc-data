{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7550,
            "title": "Minimum subarray with required sum",
            "titleSlug": "minimum-subarray-with-required-sum_696460",
            "content": "<h4 id=\"you-have-been-given-an-array-arr-of-positive-integers-and-an-integer-x-you-have-to-find-the-minimum-length-subarray-such-that-the-sum-of-all-of-its-elements-is-strictly-greater-than-the-given-integer-x\">You have been given an array(ARR) of positive integers and an integer X. You have to find the minimum length subarray such that the sum of all of its elements is strictly greater than the given integer X.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>A subarray is a contiguous block of elements that can be formed by deleting some (possibly zero) elements from the beginning or the end of the original array. \n</code></pre>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>If the given array is [1, 2, 3, 4, 5], then [2, 3, 4], [1, 2], [5] are some subarrays while [1, 3], [2, 3, 5] are not.\n\nIf there are multiple subarrays with minimum length, find one which appears earlier in the array (i.e. subarray that starts with lower index).\n\nIf there is no such subarray, print an empty line.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains two integers &#39;N&#39; and &#39;X&#39; separated by a single space. &#39;N&#39; represents the size of the given array/list and &#39;X&#39; represents the given integer.\n\nThe second line of input contains &#39;N&#39; single space-separated integers representing the elements of the array/list.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The only line of output contains single space-separated elements of the minimum length subarray.\n\nYou do not need to print anything explicitly, it has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;= 5 * 10^5\n1 &lt;= X &lt;= 10^9\n1 &lt;= ARR[i] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up  :</h5>\n\n<pre><code>Try to solve in O(N) Time Complexity and O(1) Space Complexity.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4 13\n13 7 6 12\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>13 7\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>Out of all the subarrays, we have [13, 7] and [6, 12] with minimum length of 2 and sum of their elements greater than X = 13. As the starting index of [13, 7] is lower, we print it as the output.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5 6\n1 2 3 4 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3 4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 48,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers and a target integer, find the minimum length subarray whose sum is strictly greater than the target. If multiple such subarrays exist with the same minimum length, return the one that starts earliest in the array. If no such subarray exists, return an empty array.",
                "constraints": [
                    "1 <= N <= 5 * 10^5",
                    "1 <= X <= 10^9",
                    "1 <= ARR[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 4, arr=[13, 7, 6, 12], x = 13",
                        "output": "[13, 7]",
                        "explanation": "The subarrays [13, 7] and [6, 12] both have a sum greater than 13 and a length of 2. Since [13, 7] starts at index 0, it is the earlier subarray and is returned."
                    },
                    {
                        "input": "n = 5, arr=[1, 2, 3, 4, 5], x = 6",
                        "output": "[3, 4]",
                        "explanation": "The subarray [3, 4] is the shortest subarray with a sum (7) greater than 6."
                    },
                    {
                        "input": "n = 3, arr=[1, 2, 3], x = 10",
                        "output": "[]",
                        "explanation": "No subarray has a sum strictly greater than 10.  Therefore, an empty array is returned."
                    },
                    {
                        "input": "n = 1, arr=[10], x = 5",
                        "output": "[10]",
                        "explanation": "The subarray [10] is the only possible subarray and has a sum greater than 5."
                    },
                    {
                        "input": "n = 6, arr=[1, 2, 1, 4, 2, 1], x = 5",
                        "output": "[4, 2]",
                        "explanation": "Several subarrays have a sum greater than 5: [1,2,1,4],[2,1,4],[1,4,2],[4,2],[4,2,1],[1,4,2,1]. The shortest are [4,2] and [1,2,4]. [4,2] comes first in the array so it is the answer."
                    },
                    {
                        "input": "n = 2, arr=[1, 5], x = 5",
                        "output": "[1, 5]",
                        "explanation": "The sum of [1,5] is 6, which is greater than 5."
                    },
                    {
                        "input": "n = 5, arr=[10,1,2,3,4], x = 9",
                        "output": "[10]",
                        "explanation": "The subarray [10] is the only possible subarray and has a sum greater than 9."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to check the sum of every subarray naively.</p>",
            "<p>Can we use Binary Search to find the minimum length subarray?</p>",
            "<p>As all numbers are positive, try to use the two pointers technique.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}