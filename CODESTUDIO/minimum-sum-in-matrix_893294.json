{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8677,
            "title": "Minimum Sum in matrix",
            "titleSlug": "minimum-sum-in-matrix_893294",
            "content": "<h4 id=\"you-are-given-a-2d-matrix-arr-of-size-n-x-3-having-integers-where-n-is-the-number-of-rows\">You are given a 2D matrix \u2018ARR\u2019 of size \u2018N x 3\u2019 having integers, where \u2018N\u2019 is the number of rows.</h4>\n\n<h4 id=\"your-task-is-to-find-the-smallest-sum-possible-while-taking-one-element-from-each-row\">Your task is to find the smallest sum possible while taking one element from each row.</h4>\n\n<h4 id=\"the-rules-for-selecting-elements-are-as-follows\">The rules for selecting elements are as follows-</h4>\n\n<pre><code>1. In a row, after selecting an element at a given position, you cannot select the element directly below it\n2. You can only select elements that are not directly below the previously selected element.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of every test case contains a single integer, \u2018N\u2019 denoting the number of rows.\n\nThen each of the \u2018N\u2019 rows contains three elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, return the smallest sum possible as per the rules.\n\nOutput for each test case is printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^3\n0 &lt;= ARR[i][j] &lt;= 10^3\n\nWhere \u2018ARR[i][j]\u2019 denotes the matrix element at the jth column in the ith row\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 \n1 2 3\n4 5 6\n1\n3 5 6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>6\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>For the first test case, \nThere are only six possible sums as per rules:\n(i) 1 -&gt; 5 with sum equal to 6.\n(ii) 1 -&gt; 6 with sum equal to 7.\n(iii) 2 -&gt; 4 with sum equal to 6.\n(iv) 2 -&gt; 8 with sum equal to 8.\n(v) 3 -&gt; 4 with sum equal to 7.\n(vi) 3 -&gt; 5 with sum equal to 8.\nSo the minimum among all of these is 6. So the output is 6.\n\n\nFor the second test case, \nSince the given matrix has a single row so the possible sum can be {3, 5, 6} and the minimum among all of them is 3. So the output is 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2\n4 5 6\n7 8 9\n2\n4 8 9\n6 10 12\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>12\n14\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2:</h5>\n\n<pre><code>For the first test case, \nThere are only six possible sums as per rules:\n(i) 4 -&gt; 8 with sum equal to 12 .\n(ii) 4 -&gt; 9 with sum equal to 13.\n(iii) 5 -&gt; 7 with sum equal to 12.\n(iv) 5 -&gt; 9 with sum equal to 14.\n(v) 6 -&gt; 7 with sum equal to 13.\n(vi) 6 -&gt; 8 with sum equal to 14.\nSo the minimum among all of these is 12. So the output is 12.\n\n\nFor the second test case, \nThere are only six possible sums as per rules:\n(i) 4 -&gt; 10 with sum equal to 14.\n(ii) 4 -&gt; 12 with sum equal to 16.\n(iii) 8 -&gt; 6 with sum equal to 14.\n(iv) 8 -&gt; 12 with sum equal to 20.\n(v) 9 -&gt; 6 with sum equal to 15.\n(vi) 9 -&gt; 10 with sum equal to 19.\nSo the minimum among all of these is 14. So the output is 14.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D matrix 'ARR' of size 'N x 3' containing integers, find the smallest possible sum achievable by selecting one element from each row. The selection must adhere to the rule that if an element is selected at a given position in a row, the element directly below it in the next row cannot be selected.",
                "constraints": [
                    "1 <= T <= 10 (where T is the number of test cases)",
                    "1 <= N <= 10^3 (where N is the number of rows)",
                    "0 <= ARR[i][j] <= 10^3 (where ARR[i][j] denotes the matrix element at the jth column in the ith row)"
                ],
                "testcases": [
                    {
                        "input": "N = 2, ARR = [[1, 2, 3], [4, 5, 6]]",
                        "output": "6",
                        "explanation": "The possible sums are: (1+5)=6, (1+6)=7, (2+4)=6, (2+6)=8, (3+4)=7, (3+5)=8. The minimum sum is 6."
                    },
                    {
                        "input": "N = 1, ARR = [[3, 5, 6]]",
                        "output": "3",
                        "explanation": "Since there is only one row, the minimum element is 3."
                    },
                    {
                        "input": "N = 2, ARR = [[4, 5, 6], [7, 8, 9]]",
                        "output": "12",
                        "explanation": "The possible sums are: (4+8)=12, (4+9)=13, (5+7)=12, (5+9)=14, (6+7)=13, (6+8)=14. The minimum sum is 12."
                    },
                    {
                        "input": "N = 2, ARR = [[4, 8, 9], [6, 10, 12]]",
                        "output": "14",
                        "explanation": "The possible sums are: (4+10)=14, (4+12)=16, (8+6)=14, (8+12)=20, (9+6)=15, (9+10)=19. The minimum sum is 14."
                    },
                    {
                        "input": "N = 3, ARR = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
                        "output": "12",
                        "explanation": "Possible sums and the minimal one is 12 (1->5->6),(1->5->9),(1->6->7),(1->6->8), (2->4->8), (2->4->9), (2->6->7), (2->6->8),(3->4->8), (3->4->9), (3->5->7),(3->5->8)"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Recursively find all the combinations.</p>",
            "<p>Try to use the memoization technique.</p>",
            "<p>There can be 6 possible sums if we take two rows at a time.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}