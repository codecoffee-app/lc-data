{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10036,
            "title": "Minimum swaps to convert Binary tree into BST",
            "titleSlug": "minimum-swaps-to-convert-binary-tree-into-bst_1118109",
            "content": "<h4 id=\"you-are-given-an-arbitrary-array-of-n-nodes-which-represents-a-complete-binary-tree-which-means-for-a-node-at-index-i-its-left-child-will-be-at-index-2-i-1-and-right-child-will-be-at-index-2-i-2\">You are given an arbitrary array of \u2018N\u2019 nodes which represents a complete binary tree, which means, for a node at index \u2018i\u2019, its left child will be at index (2 * i + 1) and right child will be at index (2 * i + 2).</h4>\n\n<h4 id=\"you-have-to-find-the-minimum-number-of-swaps-to-convert-this-tree-into-a-binary-search-tree\">You have to find the minimum number of swaps to convert this tree into a binary search tree.</h4>\n\n<h4 id=\"binary-search-tree-is-a-binary-tree-where-for-any-given-root-all-the-values-in-the-left-subtree-are-smaller-than-the-value-of-root-and-all-the-values-in-the-right-subtree-are-greater-than-or-equal-to-the-value-of-the-root\">Binary search tree is a binary tree where for any given root, all the values in the left subtree are smaller than the value of root and all the values in the right subtree are greater than or equal to the value of the root.</h4>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of the input contains a single integer T, representing the number of test cases.\n\nThe first line of each test case contains an integer N, which denotes the number of nodes in the tree.\n\nThe second line of each test case contains N space-separated integers denoting the node values.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, print a single integer which denotes the minimum number of swaps required to convert the given tree into a BST. The output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 3000\n1 &lt;= arr[i] &lt;= 10^5   \n\nWhere T are the number of test cases and N is the number of nodes in the tree.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n7\n1 2 3 4 5 6 7\n3\n1 2 3\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>3\n1\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-1\">Explanation for sample input 1 :</h4>\n\n<pre><code>For the first test case, the given tree is :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2021-02-06-12-57-35-7856.png\" alt=\"\"></p>\n\n<pre><code>Swap 1: Swap node 4 with 1.\nSwap 2: Swap node 5 with 6.\nSwap 3: Swap node 6 with 3.\nAfter swapping, the tree will become\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2021-02-06-13-01-51-7855.png\" alt=\"\"></p>\n\n<pre><code>For the second test case, the given tree is\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2021-02-06-13-02-44-7854.png\" alt=\"\"></p>\n\n<pre><code>We can swap node 3 with 1 to get the BST, hence the number of swaps is 1.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>1\n4\n4 3 2 1\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 13,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array representing a complete binary tree, determine the minimum number of swaps required to transform it into a valid Binary Search Tree (BST).  A complete binary tree is represented such that for a node at index 'i', its left child is at index (2 * i + 1) and its right child is at index (2 * i + 2). A BST requires that for any given root node, all values in its left subtree are less than the root's value, and all values in its right subtree are greater than or equal to the root's value.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 3000",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 7, arr = [1, 2, 3, 4, 5, 6, 7]",
                        "output": "3",
                        "explanation": "The minimum number of swaps to convert the given tree into a BST is 3. The required swaps are:\n1. Swap node 4 with 1.\n2. Swap node 5 with 6.\n3. Swap node 6 with 3."
                    },
                    {
                        "input": "n = 3, arr = [1, 2, 3]",
                        "output": "1",
                        "explanation": "The minimum number of swaps to convert the given tree into a BST is 1. Swap node 3 with 1."
                    },
                    {
                        "input": "n = 4, arr = [4, 3, 2, 1]",
                        "output": "2",
                        "explanation": "The minimum number of swaps to convert the given tree into a BST is 2."
                    },
                    {
                        "input": "n = 5, arr = [5, 4, 3, 2, 1]",
                        "output": "3",
                        "explanation": "The minimum number of swaps to convert the given tree into a BST is 3."
                    },
                    {
                        "input": "n = 6, arr = [4, 3, 5, 1, 2, 6]",
                        "output": "3",
                        "explanation": "Minimum number of swaps is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use inorder traversal to find the answer.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}