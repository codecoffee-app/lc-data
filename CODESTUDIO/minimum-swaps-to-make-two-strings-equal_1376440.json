{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11026,
            "title": "Minimum swaps to make two strings equal",
            "titleSlug": "minimum-swaps-to-make-two-strings-equal_1376440",
            "content": "<h4 id=\"you-are-given-two-strings-s1-and-s2-each-of-length-n-the-strings-s1-and-s2-are-anagrams-i-e-they-contain-the-same-characters-you-can-swap-the-position-of-any-two-characters-in-s1-any-number-of-times-the-task-is-to-find-the-minimum-number-of-swaps-we-need-to-perform-to-make-s1-equal-to-s2\">You are given two strings, \u2018s1\u2019 and \u2018s2\u2019, each of length \u2018N\u2019. The strings \u2018s1\u2019 and \u2018s2\u2019 are anagrams (i.e., they contain the same characters). You can swap the position of any two characters in \u2018s1\u2019 any number of times. The task is to find the minimum number of swaps we need to perform to make \u2018s1\u2019 equal to \u2018s2\u2019.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>s1 = \u201cbac\u201d, s2 = \u201cacb\u201d, n = 3\n\nWe need to perform at least two swaps to make \u2018s1 = s2\u2019:\n1. Swap \u2018b\u2019 and \u2018a\u2019, so:\n    s1 = \u201cabc\u201d\n2. Swap \u2018b\u2019 and \u2018c\u2019, so:\n    s1 = \u201cacb\u201d\nSo, the answer is \u20182\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases. Then, the \u2018T\u2019 test cases follow.\n\nEach test case\u2019s first line contains an integer \u2018N\u2019 denoting the size of strings \u2018s1\u2019 and \u2018s2\u2019.\n\nThe second line of each test case contains the string \u2018s1\u2019.\n\nThe third line of each test case contains the string \u2018s2\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For every test case, return the minimum number of swaps we need to perform to make \u2018s1\u2019 equal to \u2018s2\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 1\n1 &lt;= N &lt;= 20\n\nValues in string \u2018s1\u2019 and \u2018s2\u2019 = {\u2018a\u2019, \u2018b\u2019, \u2018c\u2019, \u2018d\u2019, \u2018e\u2019, \u2018f\u2019}.\n\u2018s1\u2019 is an anagram of \u2018s2\u2019.\n\n\nTime limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample input 1 :</h4>\n\n<pre><code>2\n4\ndabc\nabcd\n5\nabaac\nacaab\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample output 1 :</h4>\n\n<pre><code>3\n1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h4>\n\n<pre><code>Test Case 1:\ns1 = \u201cdabc\u201d, s2 = \u201cabcd\u201d, n = 4\n\nWe need to perform at least three swaps to make \u2018s1 = s2\u2019:\n1. Swap \u2018d\u2019 and \u2018a\u2019, so:\n    s1 = \u201cadbc\u201d\n2. Swap \u2018d\u2019 and \u2018b\u2019, so:\n    s1 = \u201cabdc\u201d\n3. Swap \u2018d\u2019 and \u2018c\u2019, so:\n    s1 = \u201cabcd\u201d\nSo, the answer is \u20183\u2019.\n\nTest Case 2:\ns1 = \u201cabaac\u201d, s2 = \u201cacaab\u201d, n = 5\n\nWe need to perform at least one swap to make \u2018s1 = s2\u2019:\n1. Swap \u2018b\u2019 and \u2018c\u2019, so:\n    s1 = \u201cacaab\u201d\nSo, the answer is \u20181\u2019.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n3\nfde\ndef\n4\nbabc\nabcb\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>2\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, 's1' and 's2', of equal length 'N', which are anagrams of each other, determine the minimum number of swaps required to transform 's1' into 's2'. You are allowed to swap any two characters within 's1' any number of times.",
                "constraints": [
                    "1 <= T <= 1",
                    "1 <= N <= 20",
                    "Values in string \u2018s1\u2019 and \u2018s2\u2019 = {\u2018a\u2019, \u2018b\u2019, \u2018c\u2019, \u2018d\u2019, \u2018e\u2019, \u2018f\u2019}.",
                    "\u2018s1\u2019 is an anagram of \u2018s2\u2019.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4\ndabc\nabcd",
                        "output": "3",
                        "explanation": "s1 = 'dabc', s2 = 'abcd', n = 4. The minimum swaps required are 3: 1. Swap 'd' and 'a' (adbc), 2. Swap 'd' and 'b' (abdc), 3. Swap 'd' and 'c' (abcd)."
                    },
                    {
                        "input": "5\nabaac\nacaab",
                        "output": "1",
                        "explanation": "s1 = 'abaac', s2 = 'acaab', n = 5. The minimum swaps required are 1: Swap 'b' and 'c' (acaab)."
                    },
                    {
                        "input": "3\nfde\ndef",
                        "output": "2",
                        "explanation": "s1 = 'fde', s2 = 'def', n = 3. The minimum swaps required are 2."
                    },
                    {
                        "input": "4\nbabc\nabcb",
                        "output": "2",
                        "explanation": "s1 = 'babc', s2 = 'abcb', n = 4. The minimum swaps required are 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find all possible solutions maybe we can use backtracking to generate all possible solutions.</p>",
            "<p>Can we find the answer from the recursion tree without going any deeper than the level that stores the answer?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}