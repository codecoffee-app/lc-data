{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8973,
            "title": "Minimum time to reach destination.",
            "titleSlug": "minimum-time-to-reach-destination_920772",
            "content": "<h4 id=\"you-are-given-an-arbitrary-graph-consisting-of-v-vertices-and-e-edges-a-source-node-s-and-a-destination-node-d-every-node-of-the-graph-has-a-colour-red-blue-or-green-associated-with-it-the-cost-of-travelling-from-one-node-to-some-adjacent-node-takes-1-second-if-you-stop-at-a-node-for-1-second-you-will-get-a-colour-ball-of-the-colour-of-the-current-node\">You are given an arbitrary graph consisting of V vertices and E edges, a source node (S) and a destination node (D). Every node of the graph has a colour (Red, Blue or Green) associated with it. The cost of travelling from one node to some adjacent node takes 1 second. If you stop at a node for 1 second, you will get a colour ball of the colour of the current node.</h4>\n\n<h4 id=\"you-have-to-find-the-minimum-time-taken-in-order-to-reach-from-source-to-destination-node-ensuring-that-the-number-of-balls-of-each-colour-is-equal-and-non-zero-the-source-and-destination-nodes-will-always-be-in-different-colours\">You have to find the minimum time taken in order to reach from source to destination node ensuring that the number of balls of each colour is equal and non-zero. The source and destination nodes will always be in different colours.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. The given graph is never empty and consists of at least 3 nodes with the colour Red, Green and Blue each.\n2. There are no self-loops(an edge connecting a node to itself) in a graph.\n3. There are no parallel edges i.e no two nodes are directly connected by more than 1 edge in the given graph.\n4. The nodes in the graph are numbered from 1 to V.\n5. All the edges in the graph are bidirectional.\n6. You can stay at one node for more than 1 second as well, but every second you stay there you will get an additional colour ball of the colour of that node.\n7. Number of edges(E) in the graph is always equal to V-1.\n8. You can also collect the ball from the destination and the source node itself. Also if you reach the destination without having an equal number of balls for each colour, the time calculated would not be valid.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer T, the number of test cases.\n\nThe first line of each test case contains two space-separated integers V, and E denoting the number of vertices and number of edges in the given graph respectively.\n\nThe second line of each test case denotes V space-separated integers  (0 / 1/ 2) denoting the colour of vertex i, where 1 &lt;= i &lt;= V and 0 denotes \u201cRed\u201d colour, 1 denotes \u201cBlue\u201d colour and 2 denotes \u201cGreen\u201d colour.\n\nFrom the third line onwards of each test case, the next &#39;E&#39; lines will denote the edges of the given graph.\n\nEvery edge is defined by two single space-separated integers &#39;a&#39; and &#39;b&#39;, which signifies an edge between node \u2018a\u2019 and node &#39;b&#39;.\n\nThe last line of each test case consists of two space-separated integers S and D, denoting the source node and destination node.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return an integer denoting the minimum time to reach from source node (S) to destination node (D), fulfilling mentioned conditions.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code> You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n3 &lt;= V &lt;= 5000\nE = V - 1\n1 &lt;= a,b &lt;= V\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n6 5\n1 0 2 1 2 0\n1 2\n1 3    \n3 4\n3 5\n2 6\n6 5   \n5 4\n0 0 1 2 1\n1 2\n2 3\n3 4\n3 5 \n1 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>7\n8\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>For the first test case of sample input 2, Source Node, S = 6 and Destination Node, D = 5.\nThe tree depicted is as follows: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-12-07-09-22-59-6438.png\" alt=\"explanation_input1\"></p>\n\n<pre><code>For the second test case of sample input 2, Source Node, S = 1 and Destination Node, D = 5.\nThe tree depicted is as follows: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-11-26-01-26-16-6439.png\" alt=\"explanation_input2\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 4\n1 0 2 0 0 \n3 1\n4 2\n2 3\n5 3\n2 1\n4 3\n0 0 2 1 \n3 2\n3 1\n3 4\n4 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5\n6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a graph with V vertices and E edges, where each vertex has a color (Red, Blue, or Green), find the minimum time to travel from a source node S to a destination node D such that the number of balls of each color collected is equal and non-zero.  Traveling along an edge takes 1 second.  Staying at a node for 1 second yields a ball of that node's color.",
                "constraints": [
                    "1 <= T <= 10",
                    "3 <= V <= 5000",
                    "E = V - 1",
                    "1 <= a,b <= V"
                ],
                "testcases": [
                    {
                        "input": "V = 6, E = 5, colour = [1, 0, 2, 1, 2, 0], edge = [[1, 2], [1, 3], [3, 4], [3, 5], [2, 6]], S = 6, D = 5",
                        "output": "7",
                        "explanation": "For the first test case, Source Node, S = 6 and Destination Node, D = 5. The tree depicted is as follows:\n(Image of the tree is not representable here, but the optimal path takes 7 seconds to collect at least one ball of each color)."
                    },
                    {
                        "input": "V = 5, E = 4, colour = [0, 0, 1, 2, 1], edge = [[1, 2], [2, 3], [3, 4], [3, 5]], S = 1, D = 5",
                        "output": "8",
                        "explanation": "For the second test case, Source Node, S = 1 and Destination Node, D = 5. The tree depicted is as follows:\n(Image of the tree is not representable here, but the optimal path takes 8 seconds to collect at least one ball of each color)."
                    },
                    {
                        "input": "V = 5, E = 4, colour = [1, 0, 2, 0, 0], edge = [[3, 1], [4, 2], [2, 3], [5, 3]], S = 2, D = 1",
                        "output": "5",
                        "explanation": "Optimal path from node 2 to node 1, ensuring at least one of each color is obtained."
                    },
                    {
                        "input": "V = 4, E = 3, colour = [0, 0, 2, 1], edge = [[3, 2], [3, 1], [3, 4]], S = 4, D = 3",
                        "output": "6",
                        "explanation": "Optimal path from node 4 to node 3, making sure to collect at least one of each ball."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Multisource Breadth-First Search to find the minimum distance from the path from source to the destination of the colours.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}