{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9567,
            "title": "Minimum Time To Solve The Problems",
            "titleSlug": "minimum-time-to-solve-the-problems_1062659",
            "content": "<h4 id=\"there-are-n-number-of-subjects-and-the-ith-subject-contains-subject-i-number-of-problems-each-problem-takes-1-unit-of-time-to-be-solved-also-you-have-k-friends-and-you-want-to-assign-the-subjects-to-each-friend-such-that-each-subject-is-assigned-to-exactly-one-friend-also-the-assignment-of-subjects-should-be-contiguous-your-task-is-to-calculate-the-maximum-number-of-problems-allocated-to-a-friend-is-minimum-see-example-for-more-understanding\">There are &#39;N&#39; number of subjects and the ith subject contains subject[i] number of problems. Each problem takes 1 unit of time to be solved. Also, you have &#39;K&#39; friends, and you want to assign the subjects to each friend such that each subject is assigned to exactly one friend. Also, the assignment of subjects should be contiguous. Your task is to calculate the maximum number of problems allocated to a friend is minimum. See example for more understanding.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>If N = 4, K = 2 and subjects = {50,100,300,400}\nAssignment of problems can be done in the following ways among the two friends.\n{} and {50,100,300,400}. Time required = max(0, 50+100+300+400) = max(0, 850) = 850\n{50} and {100,300,400}. Time required = max(50, 100+300+400) = max(50, 800) = 800\n{50, 100} and {300,400}. Time required = max(50+100, 300+400) = max(150, 700) = 700\n{50,100,300} and {400}. Time required = max(50+100+300, 400) = max(450, 400) = 400\n{50,100,300, 400} and {}. Time required = max(50+100+300+400, 0) = max(850, 0) = 850\n\nSo, out of all the above following ways, 400 is the lowest possible time.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains a single integer &#39;T&#39;, representing the number of test cases or queries to be run.\n\nThen the &#39;T&#39; test cases follow. \n\nThe first line of each test case contains a single space-separated two integers &#39;N&#39; and &#39;K&#39; representing the total subjects and friends.\n\nThe second line of each test case contains &#39;N&#39; space-separated integers representing the problems of the array \u201csubjects\u201d.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the minimum possible time to solve all the problems.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 \n1 &lt;= N, K &lt;= 10^4\n1 &lt;= subjects[i] &lt;= 10^9   \n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n3 1\n20 12 40\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>72\n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for sample 1:</h5>\n\n<pre><code>For the first test case, there is only 1 possible way to do the assignment, i.e. {20, 12, 40}. So, the minimum time required is 20 + 12 + 40 = 72.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4 8\n30 50 40 100\n4 2\n12 20 50 60\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>100\n82\n</code></pre>\n\n<h5 id=\"explanation-for-sample-2\">Explanation for sample 2:</h5>\n\n<pre><code>For the first test case, there are 8 friends, but only 4 subjects. So each subject is assigned to one friend and the maximum time taken is max(30, 50, 40, 100) = 100.\n\nFor the second test case, the assignment of problems can be done in the following ways.\n{} and {12,20,50,60}. Time required = max(0, 12+20+50+60) = max(0, 142) = 142\n{12} and {20,50,60}. Time required = max(12, 20+50+60) = max(12, 130) = 130\n{12, 20} and {50,60}. Time required = max(12+20, 50+60) = max(32, 110) = 110\n{12,20,50} and {60}. Time required = max(12+20+50, 60) = max(82, 60) = 82\n{12,20,50, 60} and {}. Time required = max(12+20+50+60, 0) = max(142, 0) = 142\nSo, out of all the above following ways, 82 is the lowest possible time. Hence, our answer is 82.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `subjects` of size 'N', where `subjects[i]` represents the number of problems in the i-th subject, and an integer 'K' representing the number of friends. The task is to assign the subjects to the friends such that each subject is assigned to exactly one friend and the assignment of subjects should be contiguous. The goal is to minimize the maximum number of problems allocated to any single friend. Find this minimum possible maximum number of problems.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N, K <= 10^4",
                    "1 <= subjects[i] <= 10^9",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 1\n20 12 40",
                        "output": "72",
                        "explanation": "With only 1 friend, all subjects must be assigned to them. Therefore, the total number of problems assigned is 20 + 12 + 40 = 72."
                    },
                    {
                        "input": "4 8\n30 50 40 100",
                        "output": "100",
                        "explanation": "Since there are more friends than subjects, each subject can be assigned to a separate friend. The maximum number of problems any friend has is the maximum value in the subjects array, which is max(30, 50, 40, 100) = 100."
                    },
                    {
                        "input": "4 2\n12 20 50 60",
                        "output": "82",
                        "explanation": "Possible assignments:\n- {} and {12,20,50,60}: max(0, 142) = 142\n- {12} and {20,50,60}: max(12, 130) = 130\n- {12, 20} and {50,60}: max(32, 110) = 110\n- {12,20,50} and {60}: max(82, 60) = 82\n- {12,20,50, 60} and {}: max(142, 0) = 142\nThe minimum of the maximum problem count across all assignments is 82."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a brute force solution by considering all possible assignments and calculate the result for each assignment.</p>",
            "<p>Think of a solution to optimize the previous approach by using memoization.</p>",
            "<p>Think of a solution to use bottom-up dynamic programming.</p>",
            "<p>Think of a solution using binary search on the total number of problems.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}