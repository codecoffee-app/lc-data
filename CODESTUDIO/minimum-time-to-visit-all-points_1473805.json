{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12701,
            "title": "Minimum time to visit all points",
            "titleSlug": "minimum-time-to-visit-all-points_1473805",
            "content": "<h4 id=\"ninja-lives-in-a-2d-plane-where-each-location-is-represented-with-integer-coordinates-x-y-you-are-given-an-array-points-containing-n-such-points-ninja-lives-at-the-location-points-0-and-wants-to-visit-all-the-remaining-n-1-points-in-the-order-given-by-the-points-array-your-task-is-to-help-ninja-find-the-minimum-time-in-seconds-required-to-visit-all-the-points-in-the-given-order-starting-from-points-0\">Ninja lives in a 2D plane where each location is represented with integer coordinates \u2018[X, Y]\u2019. You are given an array \u2018POINTS\u2019 containing \u2018N\u2019 such points. Ninja lives at the location \u2018POINTS[0]\u2019 and wants to visit all the remaining \u2018N-1\u2019 points in the order given by the \u2018POINTS\u2019 array. Your task is to help ninja find the minimum time (in seconds) required to visit all the points in the given order (starting from \u2018POINTS[0]\u2019).</h4>\n\n<h5> The ninja can travel according to the following rules :\n\n</br>\n\n<ul><li>In one second, the ninja can either:<ul><li>Move vertically by one unit, i.e., along the y-direction.</li><li>Move horizontally by one unit, i.e., along the x-direction.</li><li>Move diagonally by \u2018sqrt(2)\u2019 units, i.e., move one unit horizontally then one unit vertically.</li></ul><li>The ninja must visit the points in the exact order as they are given the \u2018POINTS\u2019 array.</li><li>The ninja is allowed to pass through points that may be given later in the order, but these points will not be counted as visited.</li></ul></h5>\n\n<p></br></p>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>\u2018POINTS = [ [3, 1], [-1, 3], [2, 0] ]\u2019, \u2018N = 3\u2019\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/example-9466.png\" alt=\"Example\"></p>\n\n<pre><code>The path with minimum time is: \u2018[3,1] -&gt; [2,2] -&gt; [1,3] - &gt; [0,3] -&gt; [-1,3] -&gt; [0,2] -&gt; [1,1] -&gt; [2,0]\u2019.\n\nTime taken from [3,1] to [-1,3] = 4 seconds.\nTime taken from [-1,3] to [2,0] = 3 seconds.\n\nTotal time = 7 seconds. Thus, you should return \u20187\u2019 as the answer.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases. Then, the \u2018T\u2019 test cases follow.\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the number of points. Then, \u2018N\u2019 lines follow.\n\nEach line contains two integers, \u2018X\u2019 and \u2018Y\u2019, representing an element of the array \u2018POINTS\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For every test case, the minimum time to visit all the points in the given order.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 1000\n\nEach element of \u2018POINTS\u2019 contains exactly two integers ranging from [-10^5, 10^5].\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4\n4 1\n0 1\n2 3\n2 1\n3\n5 4\n3 4\n1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>8\n5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>Test Case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample1-9467.png\" alt=\"Sample1\"></p>\n\n<pre><code>The path with minimum time is: \u2018[4,1] -&gt; [3,1] -&gt; [2,1] - &gt; [1,1] -&gt; [0,1] -&gt; [1,2] -&gt; [2,3] -&gt; [2,2] -&gt; [2,1]\u2019.\n\nTime taken from [4,1] to [0,1] = 4 seconds.\nTime taken from [0,1] to [2,3] = 2 seconds.\nTime taken from [2,3] to [2,1] = 2 seconds.\n\nTotal time = 8 seconds. Thus, you should return \u20188\u2019 as the answer. \nNote: While moving from \u2018[4,1]\u2019 to \u2018[0,1]\u2019, the ninja passes through the points \u2018[2,1]\u2019, but \u2018[2,1]\u2019 is not counted as visited. The ninja has to visit \u2018[2,1]\u2019 after visiting \u2018[2,3]\u2019.\n\nTest Case 2:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample2-9468.png\" alt=\"Sample2\"></p>\n\n<pre><code>The path with minimum time is: \u2018[5,4] -&gt; [4,4] -&gt; [3,4] -&gt; [2,3] -&gt; [1,2] -&gt; [1,1].\n\nTime taken from [5,4] to [3,4] = 2 seconds.\nTime taken from [3,4] to [1,1] = 3 seconds.\n\nTotal time = 5 seconds. Thus, you should return \u20185\u2019 as the answer.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3\n4 3\n-1 3\n-1 2\n4\n-3 3\n2 2\n1 1\n-2 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>6\n9\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "A ninja lives in a 2D plane where each location is represented by integer coordinates (X, Y). Given an array 'POINTS' of 'N' points, representing locations, the ninja starts at POINTS[0] and must visit all other points (N-1) in the order they appear in the array. The goal is to find the minimum time (in seconds) required for the ninja to visit all points in the specified order, starting from POINTS[0].\n\nThe ninja can move in three ways:\n\n*   Vertically: one unit along the y-axis (1 second).\n*   Horizontally: one unit along the x-axis (1 second).\n*   Diagonally: one unit horizontally and one unit vertically (1 second).\n\nThe ninja must visit the points in the exact order given in the 'POINTS' array. Passing through other points that appear later in the order is allowed, but these points are not considered visited until their turn in the sequence.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 1000 (Number of points)",
                    "Each element of \u2018POINTS\u2019 contains exactly two integers ranging from [-10^5, 10^5]."
                ],
                "testcases": [
                    {
                        "input": "4\n4 1\n0 1\n2 3\n2 1",
                        "output": "8",
                        "explanation": "The ninja travels from [4,1] to [0,1] in 4 seconds, then from [0,1] to [2,3] in 2 seconds, and finally from [2,3] to [2,1] in 2 seconds. Total time: 4 + 2 + 2 = 8 seconds."
                    },
                    {
                        "input": "3\n5 4\n3 4\n1 1",
                        "output": "5",
                        "explanation": "The ninja travels from [5,4] to [3,4] in 2 seconds, and then from [3,4] to [1,1] in 3 seconds. Total time: 2 + 3 = 5 seconds."
                    },
                    {
                        "input": "3\n4 3\n-1 3\n-1 2",
                        "output": "6",
                        "explanation": "The ninja travels from [4, 3] to [-1, 3] in 5 seconds, then from [-1, 3] to [-1, 2] in 1 second. Total time: 5 + 1 = 6 seconds."
                    },
                    {
                        "input": "4\n-3 3\n2 2\n1 1\n-2 2",
                        "output": "9",
                        "explanation": "The ninja travels from [-3, 3] to [2, 2] in 5 seconds, then from [2, 2] to [1, 1] in 1 second, and finally from [1, 1] to [-2, 2] in 3 seconds. Total time: 5 + 1 + 3 = 9 seconds."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The minimum distance between two points is the maximum difference of their x and y coordinates.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Computational Geometry",
                "slug": "computational-geometry"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}