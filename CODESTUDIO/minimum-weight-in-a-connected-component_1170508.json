{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10145,
            "title": "Minimum Weight In A Connected Component",
            "titleSlug": "minimum-weight-in-a-connected-component_1170508",
            "content": "<h4 id=\"you-are-given-a-directed-graph-of-several-connected-components-maybe-only-one-every-node-of-the-graph-has-at-most-one-outgoing-edge-and-at-most-one-incoming-edge-the-graph-does-not-contain-any-cycles-or-self-loops\">You are given a directed graph of several connected components (maybe only one). Every node of the graph has at most one outgoing edge and at most one incoming edge. The graph does not contain any cycles or self-loops.</h4>\n\n<h4 id=\"there-is-a-weight-associated-with-each-edge-of-the-graph-your-task-is-to-find-out-the-number-of-connected-components-the-starting-and-ending-node-of-each-component-and-the-minimum-weight-in-that-component-it-is-guaranteed-that-each-component-has-at-least-one-edge\">There is a weight associated with each edge of the graph. Your task is to find out the number of connected components, the starting and ending node of each component, and the minimum weight in that component. It is guaranteed that each component has at least one edge.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>The example of a graph is shown in the below figure.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph_example-7968-10760.jpeg\" alt=\"graph_example\"></p>\n\n<pre><code>So, there are two connected components in the above graph. The starting and ending node of one component is 1 and 3, respectively, and the minimum weight in this component is 9. The starting and ending node in the other component is 4 and 5 respectively, and the minimum weight is 11.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39;, which denotes the number of test cases or queries to be run. Then, the T test cases follow.\n\nThe first line of each test case contains two space-separated integers N and M, denoting the number of nodes and the number of edges in the graph, respectively.\n\nThen M lines follow. Each line contains three space-separated integers denoting the source, destination, and weight of each edge.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the number of connected components. Let\u2019s denote this as C. Then C lines follow. \n\nEach line contains three space-separated integers representing each component\u2019s starting and ending node and the minimum weight in that component.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N, M &lt;= 5000\n1 &lt;= Source and Destination of an edge &lt;= N \n1 &lt;= weight of an edge &lt;= 10^5\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n6 3\n1 2 5\n3 4 8\n6 5 10\n9 6\n1 2 5\n2 3 1\n3 4 8\n5 6 10\n6 8 9\n7 9 15\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n1 2 5\n3 4 8\n6 5 10\n3\n1 4 1\n5 8 9\n7 9 15\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For the first test case, the given graph is depicted in the below figure.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph_input1_tc1-7969-10761.jpeg\" alt=\"graph_input1_ex1\"></p>\n\n<pre><code>For the second test case, the given graph is depicted in the below figure.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph_input1_tc2-7970-10762.jpeg\" alt=\"graph_input1_ex2\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2 1\n2 1 8\n6 5\n1 2 7\n2 3 9\n3 4 10\n4 5 12\n5 6 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n2 1 8\n1\n1 6 2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a directed graph represented by a list of edges. Each node in the graph has at most one outgoing and one incoming edge. The graph contains no cycles or self-loops and might consist of multiple connected components.  Each edge has a weight associated with it. Your task is to identify the connected components and, for each component, determine its starting node, ending node, and the minimum edge weight within that component. Assume that each component contains at least one edge.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N, M <= 5000",
                    "1 <= Source and Destination of an edge <= N",
                    "1 <= weight of an edge <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 6, m = 3, edges = [[1, 2, 5], [3, 4, 8], [6, 5, 10]]",
                        "output": "[[1, 2, 5], [3, 4, 8], [6, 5, 10]]",
                        "explanation": "There are three connected components: 1->2 (weight 5), 3->4 (weight 8), and 6->5 (weight 10).  Starting nodes are 1, 3, and 6 respectively. Ending nodes are 2, 4, and 5 respectively. Minimum weights are 5, 8, and 10 respectively."
                    },
                    {
                        "input": "n = 9, m = 6, edges = [[1, 2, 5], [2, 3, 1], [3, 4, 8], [5, 6, 10], [6, 8, 9], [7, 9, 15]]",
                        "output": "[[1, 4, 1], [5, 8, 9], [7, 9, 15]]",
                        "explanation": "There are three connected components. The first component is 1->2->3->4.  The minimum weight is 1 (edge 2->3). The second is 5->6->8, minimum weight is 9 (edge 6->8). The third is 7->9, minimum weight is 15."
                    },
                    {
                        "input": "n = 2, m = 1, edges = [[2, 1, 8]]",
                        "output": "[[2, 1, 8]]",
                        "explanation": "Single connected component 2->1 with minimum weight 8."
                    },
                    {
                        "input": "n = 6, m = 5, edges = [[1, 2, 7], [2, 3, 9], [3, 4, 10], [4, 5, 12], [5, 6, 2]]",
                        "output": "[[1, 6, 2]]",
                        "explanation": "Single connected component 1->2->3->4->5->6. Minimum weight is 2 (edge 5->6)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a <a href=\"https://cp-algorithms.com/graph/depth-first-search.html\">DFS</a> based approach.</p>",
            "<p>Think of a <a href=\"https://cp-algorithms.com/graph/breadth-first-search.html\">BFS</a> based approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}