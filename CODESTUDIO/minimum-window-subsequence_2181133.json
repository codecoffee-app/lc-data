{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14501,
            "title": "Minimum window subsequence",
            "titleSlug": "minimum-window-subsequence_2181133",
            "content": "<h4 id=\"you-are-given-two-strings-s-and-t-your-task-is-to-find-the-minimum-contiguous-substring-w-of-s-such-that-t-is-a-subsequence-of-w\">You are given two strings \u2018S\u2019 and \u2018T\u2019. Your task is to find the minimum (Contiguous) substring \u2018W\u2019 of \u2018S\u2019, such that \u2018T\u2019 is a subsequence of \u2018W\u2019</h4>\n\n<h4 id=\"a-subsequence-is-a-sequence-that-can-be-derived-from-another-sequence-by-removing-zero-or-more-elements-without-changing-the-order\">A subsequence is a sequence that can be derived from another sequence by removing zero or more elements, without changing the order.</h4>\n\n<h4 id=\"a-substring-is-a-contiguous-part-of-a-string\">A substring is a contiguous part of a string.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>For the given string \u201cCodingNinjas\u201d: \u201cNinja\u201d is a substring while \u201cdinas\u201d is a subsequence. \n</code></pre>\n\n<h4 id=\"if-there-is-no-such-window-in-s-that-covers-all-characters-in-t-return-an-empty-string-if-there-are-multiple-such-minimum-length-windows-return-the-one-with-the-smallest-starting-index\">If there is no such Window in \u2018S\u2019 that covers all characters in \u2018T\u2019, return an empty string &quot;&quot;. If there are multiple such minimum length windows, return the one with the smallest starting index.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows.\n\nThe first line of each test case contains the string \u2018S\u2019.\nThe second line of each test case contains the string \u2018T\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the substring of minimum length such that.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>  You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= S &lt;= 1000      \n1 &lt;= T &lt;= 100\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\nrdew\nu\nabcdebdde\nbde\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>&quot;&quot;\nbcde\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<pre><code>For test case 1 :\nSince there is no window in \u2018S\u2019 which covers all characters of \u2018T\u2019 so therefore we returned an empty string.\n\nFor test case 2 :\n\u201cbcde\u201d is the substring of minimum length in which we find \u201cbde\u201d. \u201cbdde\u201d is also a substring of minimum length however the index of \u201cbcde\u201d occurs first, therefore we returned bcde\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nhello\neo\ngoodbye\ndy\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>ello\ndby\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 55,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings 'S' and 'T', find the smallest contiguous substring 'W' of 'S' such that 'T' is a subsequence of 'W'. If no such substring exists, return an empty string. If multiple minimum length substrings exist, return the one with the smallest starting index.",
                "constraints": [
                    "1 <= |S| <= 1000",
                    "1 <= |T| <= 100",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "S = \"rdew\", T = \"u\"",
                        "output": "\"\"",
                        "explanation": "There is no substring in 'S' that contains 'T' as a subsequence."
                    },
                    {
                        "input": "S = \"abcdebdde\", T = \"bde\"",
                        "output": "bcde",
                        "explanation": "\"bcde\" is the smallest substring of 'abcdebdde' that contains \"bde\" as a subsequence. While \"bdde\" also qualifies for minimal length, \"bcde\" appears first."
                    },
                    {
                        "input": "S = \"hello\", T = \"eo\"",
                        "output": "ello",
                        "explanation": "\"ello\" is the smallest substring of \"hello\" containing \"eo\" as a subsequence."
                    },
                    {
                        "input": "S = \"goodbye\", T = \"dy\"",
                        "output": "dby",
                        "explanation": "\"dby\" is the smallest substring of \"goodbye\" containing \"dy\" as a subsequence."
                    },
                    {
                        "input": "S = \"abcabcbb\", T = \"abc\"",
                        "output": "abc",
                        "explanation": "\"abc\" is the smallest substring of \"abcabcbb\" containing \"abc\" as subsequence, first occurrence."
                    },
                    {
                        "input": "S = \"adobecodebanc\", T = \"abc\"",
                        "output": "adobec",
                        "explanation": "Smallest substring of S that has T as a subsequence is adobec"
                    },
                    {
                        "input": "S = \"xyzdazbc\", T = \"abc\"",
                        "output": "dazbc",
                        "explanation": "Smallest substring containing the subsequence abc."
                    },
                    {
                        "input": "S = \"aaaaaaaaaa\", T = \"b\"",
                        "output": "\"\"",
                        "explanation": "The string 'S' does not contain the character 'b', so there is no substring containing 'T' as a subsequence."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>First, at least try to find a window where the whole string \u2018T\u2019 is present. Then try to reduce the size of this window.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}