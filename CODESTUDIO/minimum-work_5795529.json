{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22551,
            "title": "Minimum Work",
            "titleSlug": "minimum-work_5795529",
            "content": "<h4 id=\"you-are-given-n-tasks-the-duration-to-complete-the-tasks-is-given-by-an-array-times-of-length-n-you-can-choose-to-skip-tasks-but-you-cannot-skip-3-tasks-in-a-row\">You are given \u2018N\u2019 tasks. The duration to complete the tasks is given by an array \u2018TIMES\u2019 of length \u2018N\u2019. You can choose to skip tasks but you cannot skip 3 tasks in a row.</h4>\n\n<h4 id=\"to-complete-task-i-for-i-in-range-0-n-1-takes-times-i-time\">To complete task \u2018i\u2019 for \u2018i\u2019 in range [0, N-1] takes TIMES[i] time.</h4>\n\n<h4 id=\"find-the-minimum-time-you-need-to-invest-to-complete-the-tasks-that-you-assign-to-yourself\">Find the minimum time you need to invest to complete the tasks that you assign to yourself.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018N\u2019 = 5,  \u2018TIMES\u2019 = [1, 2, 3, 1, 2]\n\nOutput: 2.\n\nThe optimal assignment of tasks is to choose the 0th and 3rd tasks. The duration of the 0th and 3rd tasks is [1, 1]. So the time required to complete the task is 1 + 1 = 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain the integer &#39;T&#39;, denoting the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the number of tasks.\u2019. \n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the duration of tasks.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, you don\u2019t need to print anything just return the minimum time you need to complete the tasks that you assign to yourself.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n1 &lt;= TIMES[ i ] &lt;= 10^5\n\nSum of N Over all the Test cases &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5\n4 2 2 3 1\n3\n10 10 10\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n10\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the First case:\nSkip the first two tasks then complete the 3rd task and then again skip the last two tasks. Hence the time required to complete the tasks is 10.\n\n\nFor the second case:\nComplete the first task and then skip the last two tasks. Hence Hence the time required to complete the tasks is 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n8\n1 2 3 4 5 6 7 8\n5\n5 3 4 1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>9\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'N' tasks, where 'TIMES' is an array of length 'N' representing the duration of each task. Determine the minimum time required to complete a subset of these tasks, with the constraint that you cannot skip three consecutive tasks.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "1 <= TIMES[ i ] <= 10^5",
                    "Sum of N Over all the Test cases <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n4 2 2 3 1",
                        "output": "2",
                        "explanation": "The optimal solution is to skip the first two tasks, take the third(TIMES[2] = 2) skip next two tasks, so total is 2"
                    },
                    {
                        "input": "3\n10 10 10",
                        "output": "10",
                        "explanation": "The optimal solution is to take first task, so total is 10"
                    },
                    {
                        "input": "8\n1 2 3 4 5 6 7 8",
                        "output": "9",
                        "explanation": "One optimal solution involves taking tasks with durations 1, 2, and 6 for a total of 9. There may be other optimal solutions."
                    },
                    {
                        "input": "5\n5 3 4 1 2",
                        "output": "4",
                        "explanation": "One optimal solution is to skip the first two tasks, take the third(TIMES[2] = 4) , skip next two tasks, so total is 4"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a way to recursively generate all possible combinations of valid tasks and then find the minimum duration?</p>",
            "<p>Can you think of a way to optimize the previous approach using memoization?</p>",
            "<p>Try to find the minimum time required to complete any task considering all the tasks before that are solved optimally.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}