{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 18795,
            "title": "Mining Diamonds",
            "titleSlug": "mining-diamonds_4244494",
            "content": "<h4 id=\"there-are-n-diamonds-in-a-mine-the-size-of-each-diamond-is-given-in-the-form-of-integer-array-a-if-the-miner-mines-a-diamond-then-he-gets-size-of-previous-unmined-diamond-size-of-currently-mined-diamond-size-of-next-unmined-diamond-number-of-coins-if-there-isn-t-any-next-or-previous-unmined-diamond-then-their-size-is-replaced-by-1-while-calculating-the-number-of-coins\">There are \u2018N\u2019 diamonds in a mine. The size of each diamond is given in the form of integer array \u2018A\u2019. If the miner mines a diamond, then he gets &#39;size of previous unmined diamond * size of currently mined diamond * size of next unmined diamond&#39; number of coins. If there isn\u2019t any next or previous unmined diamond then their size is replaced by 1 while calculating the number of coins.</h4>\n\n<h4 id=\"vladimir-a-dumb-miner-was-assigned-the-task-to-mine-all-diamonds-since-he-is-dumb-he-asks-for-your-help-to-determine-the-maximum-number-of-coins-that-he-can-earn-by-mining-the-diamonds-in-an-optimal-order\">Vladimir, a dumb miner was assigned the task to mine all diamonds. Since he is dumb he asks for your help to determine the maximum number of coins that he can earn by mining the diamonds in an optimal order.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Suppose \u2018N\u2019 = 3, and \u2018A\u2019 = [7, 1, 8]\n\nThe optimal order for mining diamonds will be [2, 1, 3].\nState of mine -    [7, 1, 8]    [7, 8]    [8]\nCoins earned -    (7*1*8) + (1*7*8) + (1*8*1)  = 56 + 56 + 8 = 120\nHence output will be 120.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of the input contains a single integer \u2018T\u2019 representing the no. of test cases.\n\nThe first line of each test case contains a single integer value, \u2018N\u2019, denoting the number of diamonds in the mine.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers, denoting the size of the diamonds in the mine.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, print a single integer value denoting the maximum number of coins that can be earned by mining the diamonds in an optimal order.\n\nPrint a separate line for each test case.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function and return the answer.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 \u2264 T \u2264 100\n1 \u2264 N \u2264 100\n0 \u2264 A[i] \u2264 100\n1 \u2264 \u03a3N \u2264 300\n\nTime limit: 1 Sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3\n7 1 8\n2\n9 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>120\n18\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For First Case - Same as explained in above example.\n\nFor the second case - \n\n\u2018N\u2019 = 2, and \u2018A\u2019 = [9, 1]\n\nThe optimal order for mining diamonds will be [2, 1].\nState of mine -    [9, 1]    [9]\nCoins earned -    (1*9*1) + (1*9*1) = 9 + 9 = 18\nHence output will be 18..\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5\n1 2 3 4 5\n4\n1 5 2 8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>110\n136\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 33,
            "dislikes": "NA",
            "rephrased": {
                "body": "There are \u2018N\u2019 diamonds in a mine. The size of each diamond is given in the form of an integer array \u2018A\u2019. If a diamond is mined, the miner receives 'size of previous unmined diamond * size of currently mined diamond * size of next unmined diamond' coins. If there is no adjacent unmined diamond, its size is considered 1 for coin calculation.\n\nDetermine the maximum number of coins Vladimir can earn by mining the diamonds in an optimal order.",
                "constraints": [
                    "1 \u2264 T \u2264 100",
                    "1 \u2264 N \u2264 100",
                    "0 \u2264 A[i] \u2264 100",
                    "1 \u2264 \u03a3N \u2264 300",
                    "Time limit: 1 Sec"
                ],
                "testcases": [
                    {
                        "input": "3\n7 1 8",
                        "output": "120",
                        "explanation": "With N = 3 and A = [7, 1, 8], the optimal mining order is [2, 1, 3].\nCoins earned: (7*1*8) + (1*7*8) + (1*8*1) = 56 + 56 + 8 = 120."
                    },
                    {
                        "input": "2\n9 1",
                        "output": "18",
                        "explanation": "With N = 2 and A = [9, 1], the optimal mining order is [2, 1].\nCoins earned: (1*9*1) + (1*9*1) = 9 + 9 = 18."
                    },
                    {
                        "input": "5\n1 2 3 4 5",
                        "output": "110",
                        "explanation": null
                    },
                    {
                        "input": "4\n1 5 2 8",
                        "output": "136",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we iterate over all the possible ways to mine diamonds?</p>",
            "<p>We can improve on time if we eliminate duplicate calculations.</p>",
            "<p>We can improve on time if we eliminate duplicate calculations.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}