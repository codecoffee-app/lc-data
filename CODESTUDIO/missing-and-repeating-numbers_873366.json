{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8409,
            "title": "Missing and repeating numbers",
            "titleSlug": "missing-and-repeating-numbers_873366",
            "content": "<h4 id=\"you-are-given-an-array-of-size-n-the-elements-of-the-array-are-in-the-range-from-1-to-n\">You are given an array of size \u2018N\u2019. The elements of the array are in the range from 1 to \u2018N\u2019.</h4>\n\n<h4 id=\"ideally-the-array-should-contain-elements-from-1-to-n-but-due-to-some-miscalculations-there-is-a-number-r-in-the-range-1-n-which-appears-in-the-array-twice-and-another-number-m-in-the-range-1-n-which-is-missing-from-the-array\">Ideally, the array should contain elements from 1 to \u2018N\u2019. But due to some miscalculations, there is a number R in the range [1, N] which appears in the array twice and another number M in the range [1, N] which is missing from the array.</h4>\n\n<h4 id=\"your-task-is-to-find-the-missing-number-m-and-the-repeating-number-r\">Your task is to find the missing number (M) and the repeating number (R).</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Consider an array of size six. The elements of the array are { 6, 4, 3, 5, 5, 1 }. \nThe array should contain elements from one to six. Here, 2 is not present and 5 is occurring twice. Thus, 2 is the missing number (M) and 5 is the repeating number (R). \n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up</h5>\n\n<pre><code>Can you do this in linear time and constant additional space? \n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line contains an integer \u2018N\u2019 denoting the size of the array.\nThe second line contains \u2018N\u2019 space-separated integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print the missing number (M) and the repeating number (R) separated by a single space. \n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the function. \nYou have to return a pair whose first element is the missing number \u2018M\u2019 and the second element is the repeating number \u2018R\u2019. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>2 &lt;= N &lt;= 5 * 10^4\n1 &lt;= data &lt;= N\n\nWhere \u2018N\u2019 is the size of the array and \u2018data\u2019 denotes the value of the elements of the array. \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 341,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of size N containing numbers in the range [1, N], find the missing and repeating numbers. The array ideally should contain all numbers from 1 to N, but one number (R) appears twice, and another number (M) is missing. Your task is to identify both M and R.\n\nFor example, in the array {6, 4, 3, 5, 5, 1} of size 6, the number 5 is repeated, and the number 2 is missing. Therefore, M = 2 and R = 5.\n\nCan you solve this problem in linear time and constant additional space?",
                "constraints": [
                    "2 <= N <= 5 * 10^4",
                    "1 <= data <= N, where 'data' represents an element in the array"
                ],
                "testcases": [
                    {
                        "input": "6\n6 4 3 5 5 1",
                        "output": "2 5",
                        "explanation": "The array is {6, 4, 3, 5, 5, 1}. The missing number is 2, and the repeating number is 5."
                    },
                    {
                        "input": "5\n1 2 3 3 5",
                        "output": "4 3",
                        "explanation": "The array is {1, 2, 3, 3, 5}. The missing number is 4, and the repeating number is 3."
                    },
                    {
                        "input": "4\n1 2 2 4",
                        "output": "3 2",
                        "explanation": "The array is {1, 2, 2, 4}. The missing number is 3, and the repeating number is 2."
                    },
                    {
                        "input": "2\n1 1",
                        "output": "2 1",
                        "explanation": "The array is {1, 1}. The missing number is 2, and the repeating number is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you do this by applying brute force?&nbsp;</p>",
            "<p>Can you do this by sorting the array?</p>",
            "<p>Do we really need to sort the entire array?&nbsp; Try to use additional space to reduce the time complexity.&nbsp;</p>",
            "<p>What about keeping track of the visited elements?</p>",
            "<p>Can we use XOR to find the missing and repeating elements?&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n\r\n\tTime complexity: O(N) \r\n\tSpace complexity: O(1)\r\n\t\r\n\tWhere N is the length of the given array. \r\n\t\r\n*/\r\n\r\npair<int,int> missingAndRepeating(vector<int> &arr, int n)\r\n{\r\n\tint findXOR = 0;\r\n\t\r\n\t// calculating the XOR of all the numbers from 1 to n\r\n\tfor(int i  = 1; i <= n; i += 1)\r\n\t{\r\n\t\tfindXOR ^= i;\r\n\t}\r\n\t\r\n\t// calculating the XOR of all the elements of the array\r\n\tfor(int i  = 0; i < n; i += 1)\r\n\t{\r\n\t\tfindXOR ^= arr[i];\r\n\t}\r\n\t\r\n\t// last set bit of findXOR\r\n\tint bitIndex = findXOR & ~(findXOR - 1); \r\n\t\r\n\tint bitSet = 0, bitNotSet = 0;\r\n\t\r\n\t// dividing the elements of the array in two sets, bitSet and bitNotSet\r\n\tfor (int i = 0; i < n; i++) \r\n\t{ \r\n        if (arr[i] & bitIndex) \r\n        {\r\n            bitSet = bitSet ^ arr[i];\r\n\t\t}\r\n  \r\n        else\r\n        {\r\n            bitNotSet = bitNotSet ^ arr[i]; \r\n        }\r\n    } \r\n    \r\n    // dividing the elements from 1 to n in two sets\r\n    for (int i = 1; i <= n; i++) \r\n\t{ \r\n        if (i & bitIndex) \r\n        {\r\n            bitSet = bitSet ^ i; \r\n  \t\t}\r\n  \t\t\r\n        else\r\n\t\t{\r\n            bitNotSet = bitNotSet ^ i; \r\n        }\r\n    } \r\n    \r\n\tint m, r;\r\n\t\r\n\t\r\n\tfor(int i = 0; i < n; i += 1)\r\n\t{\r\n\t\t// if bitSet is present in the array, it is the repeating number and bitNotSet is the missing number\r\n\t\tif(bitSet == arr[i])\r\n\t\t{\r\n\t\t\tr = bitSet ; \r\n\t\t\tm = bitNotSet;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\t\r\n\t\t// if bitNotSet is present in the array, it is the repeating number and bitSet is the missing number\r\n\t\tif(bitNotSet == arr[i])\r\n\t\t{\r\n\t\t\tr = bitNotSet;\r\n\t\t\tm = bitSet;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpair<int, int>ans;\r\n\t\r\n\tans.first = m;\r\n\tans.second = r;\r\n\t\r\n\treturn ans;\r\n\t \r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity: O(N)\r\n\tSpace complexity: O(1)\r\n\r\n\tWhere N is the length of the given array.\r\n\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n    public static int[] missingAndRepeating(ArrayList<Integer> arr, int n) {\r\n        int findXOR = 0;\r\n\r\n        // Calculating the XOR of all the numbers from 1 to n\r\n        for (int i = 1; i <= n; i += 1) {\r\n            findXOR ^= i;\r\n        }\r\n\r\n        // Calculating the XOR of all the elements of the array\r\n        for (int i = 0; i < n; i += 1) {\r\n            findXOR ^= arr.get(i);\r\n        }\r\n\r\n        // last set bit of findXOR\r\n        int bitIndex = findXOR & ~(findXOR - 1);\r\n\r\n        int bitSet = 0, bitNotSet = 0;\r\n\r\n        // Dividing the elements of the array in two sets, bitSet and bitNotSet\r\n        for (int i = 0; i < n; i++) {\r\n            if ((arr.get(i) & bitIndex) > 0) {\r\n                bitSet = bitSet ^ arr.get(i);\r\n            }\r\n\r\n            else {\r\n                bitNotSet = bitNotSet ^ arr.get(i);\r\n            }\r\n        }\r\n\r\n        // Dividing the elements from 1 to n in two sets\r\n        for (int i = 1; i <= n; i++) {\r\n            if ((i & bitIndex) > 0) {\r\n                bitSet = bitSet ^ i;\r\n            }\r\n\r\n            else {\r\n                bitNotSet = bitNotSet ^ i;\r\n            }\r\n        }\r\n\r\n        int r = 0, m = 0;\r\n\r\n        for (int i = 0; i < n; i += 1) {\r\n            // If bitSet is present in the array, it is the repeating number and bitNotSet\r\n            // Is the missing number\r\n            if (bitSet == arr.get(i)) {\r\n                r = bitSet;\r\n                m = bitNotSet;\r\n                break;\r\n            }\r\n\r\n            // If bitNotSet is present in the array, it is the repeating number and bitSet\r\n            // is the missing number\r\n            if (bitNotSet == arr.get(i)) {\r\n                r = bitNotSet;\r\n                m = bitSet;\r\n                break;\r\n            }\r\n        }\r\n\r\n        int[] ans = new int[]{m, r};\r\n\r\n        return ans;\r\n\r\n    }\r\n\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n\r\n\tTime complexity: O(N)\r\n\tSpace complexity: O(1)\r\n\r\n\tWhere N is the length of the given array.\r\n\r\n'''\r\n\r\n\r\ndef missingAndRepeating(arr, n):\r\n    findXOR = 0\r\n\r\n    # calculating the XOR of all the numbers from 1 to n\r\n    for i in range(1, n+1):\r\n        findXOR ^= i\r\n\r\n    # calculating the XOR of all the elements of the array\r\n    for i in range(n):\r\n        findXOR ^= arr[i]\r\n\r\n    # last set bit of findXOR\r\n    bitIndex = findXOR & ~(findXOR - 1)\r\n\r\n    bitSet = 0\r\n    bitNotSet = 0\r\n\r\n    # dividing the elements of the array in two sets, bitSet and bitNotSet\r\n    for i in range(n):\r\n        if (arr[i] & bitIndex):\r\n            bitSet = bitSet ^ arr[i]\r\n\r\n        else:\r\n            bitNotSet = bitNotSet ^ arr[i]\r\n\r\n    # dividing the elements from 1 to n in two sets\r\n    for i in range(1, n+1):\r\n        if (i & bitIndex):\r\n            bitSet = bitSet ^ i\r\n\r\n        else:\r\n            bitNotSet = bitNotSet ^ i\r\n\r\n    m = -1\r\n    r = -1\r\n\r\n    for i in range(n):\r\n        # if bitSet is present in the array, it is the repeating number and bitNotSet is the missing number\r\n        if(bitSet == arr[i]):\r\n            r = bitSet\r\n            m = bitNotSet\r\n            break\r\n\r\n        # if bitNotSet is present in the array, it is the repeating number and bitSet is the missing number\r\n        if(bitNotSet == arr[i]):\r\n            r = bitNotSet\r\n            m = bitSet\r\n            break\r\n\r\n    ans = m, r\r\n\r\n    return ans\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}