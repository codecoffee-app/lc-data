{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9673,
            "title": "mnfrj",
            "titleSlug": "mnfrj_1075018",
            "content": "<h4 id=\"given-a-string-pattern-which-contains-only-two-types-of-characters\">Given a string &quot;pattern&quot;, which contains only two types of characters \u2018(\u2019, \u2018)\u2019.</h4>\n\n<h4 id=\"your-task-is-to-find-the-minimum-number-of-parentheses-either-we-must-add-the-parentheses-in-string-pattern-and-the-resulted-string-is-valid\">Your task is to find the minimum number of parentheses either \u2018(\u2019, \u2018)\u2019 we must add the parentheses in string \u2018pattern\u2019 and the resulted string is valid.</h4>\n\n<h4 id=\"condition-for-valid-string\">Condition for valid string-</h4>\n\n<h4 id=\"every-opening-parenthesis-must-have-a-correct-closing-parenthesis\">Every opening parenthesis \u2018(\u2019 must have a correct closing parenthesis \u2018)\u2019.</h4>\n\n<h4 id=\"example-are-valid-string-and-are-invalid-string\">Example - \u2018(()(()))\u2019, \u2018()()()\u2019, \u2018((()))\u2019 are valid string, and \u2018(((\u2019, \u2018(()\u2019, \u2018)(())\u2019 are invalid string.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. You are not required to print the output explicitly, it has already been taken care of. Just implement the function and return the minimum number of parentheses required to make a string valid.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u2018T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of each test case contains a string &quot;pattern&quot;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the minimum number of parentheses.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^4\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 denotes the length of string &quot;pattern&quot;.\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n)((()\n((\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>Test Case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-161-_li-6989.jpg\" alt=\"alt text\"></p>\n\n<pre><code>In the given &quot;pattern&quot; = &quot;)((()&quot;, only one pair of parentheses ( at index \u20183\u2019 and \u20184\u2019) is valid and parentheses at index \u20180\u2019, \u20181\u2019 and \u20182\u2019 are invalid.\nAs you can see, we need three extra parentheses to make the string valid in the above image, one opening parenthesis \u2018(\u2019 for index \u20180\u2019, two closing parentheses \u2018)\u2019 for index \u20181\u2019 and \u20182\u2019.\nSo return 3 number of minimum extra parentheses to make string &quot;pattern&quot; valid.\n\nTest Case 2:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-163-_li-6990.jpg\" alt=\"alt text\"></p>\n\n<pre><code>In the given &quot;pattern&quot; = &quot;((&quot; so we need two extra closing parentheses \u2018)\u2019 to make string &quot;pattern&quot; valid.\nSo return 2 number of minimum extra parentheses to make string &quot;pattern&quot; valid.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n(((((\n))(\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 85,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'pattern' containing only '(' and ')' characters, determine the minimum number of parentheses (either '(' or ')') needed to add to 'pattern' to make it a valid parentheses string. A valid parentheses string has the property that every opening parenthesis '(' has a corresponding closing parenthesis ')'.",
                "constraints": [
                    "1 <= T <= 50, where T is the number of test cases.",
                    "1 <= N <= 10^4, where N is the length of the string 'pattern'.",
                    "The string 'pattern' contains only '(' and ')' characters."
                ],
                "testcases": [
                    {
                        "input": "pattern = ')(()'",
                        "output": "3",
                        "explanation": "The input ')(()' requires 3 additional parentheses to become valid.  One '(' at the beginning, and two ')' after the '()' pair, resulting in '(()())'."
                    },
                    {
                        "input": "pattern = '(('",
                        "output": "2",
                        "explanation": "The input '((' requires 2 additional ')' to become valid. This results in '(())'."
                    },
                    {
                        "input": "pattern = '(((((('",
                        "output": "7",
                        "explanation": "The input '(((((((' requires 7 additional ')' to become valid. This results in '(((((((())' which can be formed by adding 7 closing parenthesis."
                    },
                    {
                        "input": "pattern = ')('",
                        "output": "2",
                        "explanation": "The input ')(', requires 2 parentheses. Add '(' before and ')' after to result in '()()'."
                    },
                    {
                        "input": "pattern = ''",
                        "output": "0",
                        "explanation": "Empty string needs no parenthesis to be a valid string."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to balance every closing parenthesis first.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}