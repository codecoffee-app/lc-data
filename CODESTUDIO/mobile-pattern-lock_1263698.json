{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10732,
            "title": "Mobile Pattern Lock. ",
            "titleSlug": "mobile-pattern-lock_1263698",
            "content": "<h4 id=\"mobile-pattern-lock-is-a-graphical-password-method-where-users-create-patterns-on-a-line-connecting-3-3-grid-you-are-given-two-integers-m-and-n-count-a-total-number-of-valid-mobile-pattern-locks-which-consist-of-at-least-m-keys-and-at-most-n-keys-in-a-valid-pattern-all-keys-must-be-distinct-the-order-of-keys-used-matters-if-the-line-joining-two-consecutive-keys-passes-through-any-other-keys-the-other-keys-must-be-previously-selected-in-pattern\">Mobile Pattern Lock is a graphical password method where users create patterns on a line connecting 3*3 grid. You are given two integers \u2018M\u2019 and \u2018N\u2019. Count a total number of valid mobile pattern locks which consist of at least \u2018M\u2019 keys and at most \u2018N\u2019 keys. In a valid pattern, all keys must be distinct. The order of keys used matters. If the line joining two consecutive keys passes through any other keys, the other keys must be previously selected in pattern.</h4>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>We can treat the 3*3 grid as follows:- \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/keypad-8366.jpg\" alt=\"subsequence\"></p>\n\n<pre><code>4-7-9-6 is an invalid pattern lock because while joining 7-9 it passes through key 8 which has not been previously selected in pattern.\n9-1-2-3 is an invalid pattern lock because while joining 9-1 it passes through key 5 which has not been previously selected in pattern.\n4-2-6-8 is a valid pattern lock.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000480_1627267132_pattern-8365.jpg\" alt=\"subsequence\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe only line of each test case contains two space-separated integers \u2018M\u2019 and \u2018N\u2019 representing two integers for which you need to return the total number of valid patterns.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case print an integer denoting the total number of valid mobile pattern locks which consist of at least \u2018M\u2019 keys and at most \u2018N\u2019 keys.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= M &lt;= N &lt;= 9\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1 1\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>9\n65\n</code></pre>\n\n<h4 id=\"explanation-of-sample-output-1\">Explanation Of Sample Output 1 :</h4>\n\n<pre><code>Test case 1:\n\n1,2,3,4,5,6,7,8 and 9 are 9 possible patterns.\n\nTest case 2:\n\nKey with 1- 1,2,3,4,5,6,7,8 and 9 are 9 possible patterns.\nKey with 2-  all adjacent pair, so total count is 56\nReturn 9+56.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2 2\n4 6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>56\n34792\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 3x3 grid representing a mobile pattern lock, determine the number of valid patterns that can be created using between 'M' and 'N' keys, inclusive. A valid pattern must satisfy the following conditions:\n\n1.  All keys in the pattern must be distinct.\n2.  The order of keys matters.\n3.  If a line connecting two consecutive keys passes through another key, that key must have been previously selected in the pattern.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= M <= N <= 9",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "m = 1, n = 1",
                        "output": "9",
                        "explanation": "Each individual key (1 through 9) constitutes a valid pattern of length 1."
                    },
                    {
                        "input": "m = 1, n = 2",
                        "output": "65",
                        "explanation": "There are 9 patterns of length 1. For patterns of length 2, each of the 9 starting points has a number of available subsequent key presses, taking the grid constraints into account.  The total count becomes 9 (patterns of length 1) + 56 ( patterns of length 2) = 65."
                    },
                    {
                        "input": "m = 2, n = 2",
                        "output": "56",
                        "explanation": "Only patterns of length 2 are considered.  There are a total of 56 valid patterns when choosing 2 distinct keys."
                    },
                    {
                        "input": "m = 4, n = 6",
                        "output": "34792",
                        "explanation": "This test case requires calculating the number of valid patterns of lengths 4, 5, and 6, and then summing them. This involves more complex calculations and adherence to the rule where any key passed through must be previously selected in the pattern. "
                    },
                    {
                        "input": "m = 9, n = 9",
                        "output": "8656",
                        "explanation": "Only considers patterns of length 9, which requires visiting all keys. Calculating the valid combinations of all possible 9-key sequences is needed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to iterate over all positions using DFS.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}