{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10561,
            "title": "Modify BST   ",
            "titleSlug": "modify-bst_1233278",
            "content": "<h4 id=\"you-are-given-the-root-of-a-binary-search-tree-tree-and-the-lowest-and-highest-boundaries-as-low-and-high-your-task-is-to-modify-the-tree-so-that-all-its-nodes-have-values-in-the-range-low-high-inclusive\">You are given the root of a binary search tree \u2018TREE\u2019 and the lowest and highest boundaries as \u2018LOW\u2019 and \u2018HIGH\u2019. Your task is to modify the tree so that all its nodes have values in the range  [\u2018LOW\u2019, \u2018HIGH\u2019] inclusive.</h4>\n\n<h4 id=\"modifying-the-tree-should-not-change-the-relative-structure-of-the-nodes-that-will-remain-in-the-tree-i-e-any-nodes-descendant-should-remain-a-descendant-there-will-always-be-a-unique-answer\">Modifying the tree should not change the relative structure of the nodes that will remain in the tree (i.e., any node&#39;s descendant should remain a descendant). There will always be a unique answer.</h4>\n\n<h4 id=\"note-that-the-root-may-change-depending-on-the-given-bounds\">Note that the root may change depending on the given bounds.</h4>\n\n<h4 id=\"for-example-for-low-3-and-high-6-see-the-below-picture-for-reference\">For example: For \u2018LOW\u2019 = 3 and \u2018HIGH\u2019 = 6 see the below picture for reference:</h4>\n\n<p><img src=\"https://files.codingninjas.in/dfg-8290.JPG\" alt=\"img\"></p>\n\n<pre><code>As we can see 0 is not in the range [3, 6] so we delete this node from the \u2018TREE\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains two single space-separated integers \u2018LOW\u2019 and \u2018HIGH\u2019.\n\nThe second line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bsttominheap-6482.jpg\" alt=\"image\"></p>\n\n<pre><code>4\n2 6\n1 3 5 7\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 4\n\nLevel 2 :\nLeft child of 4 = 2\nRight child of 4 = 6\n\nLevel 3 :\nLeft child of 2 = 1\nRight child of 2 = 3\nLeft child of 6 = 5\nRight child of 6 = 7\n\nLevel 4 :\nLeft child of 1 = null (-1)\nRight child of 1 = null (-1)\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the modified tree after trimming in the level order form.\n\nThe output for each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10 ^ 4\n1 &lt;= DATA &lt;= 10 ^ 4 \n1 &lt;= LOW , HIGH &lt;= 10 ^ 4\n\nWhere N is the number of nodes in the \u2018TREE\u2019, \u2018DATA\u2019 represents the value of the node.\n\nTime Limit: 1 Sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1 5\n3 -1 -1\n2 8\n1 0 9 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3 -1 -1\n-1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-output-1\">Explanation Of Sample Output 1:</h4>\n\n<pre><code>For the first test case :\nThere is only one node in the \u2018TREE\u2019 which lies in the given range 1 &lt;= 3 &lt;= 5\nSo in this case we don\u2019t need to delete any node from the \u2018TREE\u2019.\n\nFor the second test case :\nAll the nodes in the \u2018TREE\u2019 are not in the range so every node gets deleted from the \u2018TREE\u2019. So we return NULL in this case.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 6\n3 0 8 -1 2 -1 -1 1 -1 -1 -1\n5 5\n5 -1 6 -1 -1  \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>3 2 -1 1 -1 -1 -1 \n5 -1 -1 \n</code></pre>\n\n<h4 id=\"explanation-of-sample-output-2\">Explanation Of Sample Output 2:</h4>\n\n<pre><code>For the first test case :\nNodes marked blue are not in the range so we will delete these nodes.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/st1-8291.JPG\" alt=\"img\"></p>\n\n<pre><code>For the second test case :\nNode marked blue is not in the range so we will delete this node.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/st21-8292.JPG\" alt=\"img\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a binary search tree 'TREE' and the lowest and highest boundaries 'LOW' and 'HIGH', modify the tree such that all its node values are within the inclusive range ['LOW', 'HIGH']. The relative structure of the remaining nodes should remain unchanged (i.e., a node's descendants should remain its descendants). There will always be a unique answer. Note that the root node may change based on the given bounds.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^4",
                    "1 <= DATA <= 10^4",
                    "1 <= LOW, HIGH <= 10^4",
                    "Where N is the number of nodes in the \u2018TREE\u2019, \u2018DATA\u2019 represents the value of the node.",
                    "Time Limit: 1 Sec"
                ],
                "testcases": [
                    {
                        "input": "1 5\n3 -1 -1",
                        "output": "3 -1 -1",
                        "explanation": "The 'TREE' has only one node with the value 3, and it falls within the range [1, 5]. Therefore, no modifications are needed, and the tree remains unchanged."
                    },
                    {
                        "input": "2 8\n1 0 9 -1 -1 -1 -1",
                        "output": "-1",
                        "explanation": "The 'TREE' consists of nodes with values 1, 0, and 9. None of these values are within the range [2, 8].  Therefore, all nodes are removed, resulting in an empty tree represented by -1."
                    },
                    {
                        "input": "1 6\n3 0 8 -1 2 -1 -1 1 -1 -1 -1",
                        "output": "3 2 -1 1 -1 -1 -1",
                        "explanation": "The input tree has nodes with values 3, 0, 8, 2, and 1.  The nodes with values 0 and 8 are outside the range [1, 6] and will be removed.  The resulting tree, after trimming, will contain the values 3, 2, and 1 in the level order form: 3 2 -1 1 -1 -1 -1"
                    },
                    {
                        "input": "5 5\n5 -1 6 -1 -1",
                        "output": "5 -1 -1",
                        "explanation": "The input tree has nodes with values 5 and 6. Since 'LOW' and 'HIGH' are both 5, the acceptable range is [5,5]. The node with value 6 is outside this range and needs to be deleted, resulting in the tree with just the root node 5:  5 -1 -1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use inorder traversal in this problem to get final tree.</p>",
            "<p>Use iterative in depth traversal to find final tree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}