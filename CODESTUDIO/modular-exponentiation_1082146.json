{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9701,
            "title": "Modular exponentiation",
            "titleSlug": "modular-exponentiation_1082146",
            "content": "<h4 id=\"you-are-given-a-three-integers-x-n-and-m-your-task-is-to-find-x-n-m-a-b-is-defined-as-a-raised-to-power-b-and-a-c-is-the-remainder-when-a-is-divided-by-c\">You are given a three integers &#39;X&#39;, &#39;N&#39;, and &#39;M&#39;. Your task is to find (&#39;X&#39; ^ &#39;N&#39;) % &#39;M&#39;. A ^ B is defined as A raised to power B and A % C is the remainder when A is divided by C.</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains a single integer &#39;T&#39;, representing the number of test cases. \n\nThe first line of each test contains three space-separated integers &#39;X&#39;, &#39;N&#39;, and &#39;M&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return a single line containing the value of (&#39;X&#39; ^ &#39;N&#39;) % &#39;M&#39;.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up :</h5>\n\n<pre><code>Can you solve the problem in O(log &#39;N&#39;) time complexity and O(1) space complexity?\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100   \n1 &lt;= X, N, M &lt;= 10^9\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2 \n3 1 2\n4 3 10\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h5>\n\n<pre><code>In test case 1, \nX = 3, N = 1, and M = 2 \nX ^ N = 3 ^ 1 = 3 \nX ^ N % M = 3 % 2 = 1. \nSo the answer will be 1.\n\nIn test case 2,\nX = 4, N = 3, and M = 10 \nX ^ N = 4 ^ 3 = 64 \nX ^ N % M = 64 % 10 = 4. \nSo the answer will be 4.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5 2 10 \n2 5 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h5>\n\n<pre><code>In test case 1, \nX = 5, N = 2, and M = 10 \nX^N = 5^2 = 25 \nX^N %M = 25 % 10 = 5. \nSo the answer will be 5.\n\nIn test case 2,\nX = 2, N = 5, and M = 4 \nX^N = 2^5 = 32 \nX^N %M = 32 % 4 = 0. \nSo the answer will be 0.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 202,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given three integers X, N, and M, calculate (X raised to the power of N) modulo M.  In other words, find the remainder when X^N is divided by M. Aim for an O(log N) time complexity solution with O(1) space complexity.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= X, N, M <= 10^9",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 1 2",
                        "output": "1",
                        "explanation": "X = 3, N = 1, M = 2. X^N = 3^1 = 3.  X^N % M = 3 % 2 = 1."
                    },
                    {
                        "input": "4 3 10",
                        "output": "4",
                        "explanation": "X = 4, N = 3, M = 10. X^N = 4^3 = 64.  X^N % M = 64 % 10 = 4."
                    },
                    {
                        "input": "5 2 10",
                        "output": "5",
                        "explanation": "X = 5, N = 2, M = 10. X^N = 5^2 = 25. X^N % M = 25 % 10 = 5."
                    },
                    {
                        "input": "2 5 4",
                        "output": "0",
                        "explanation": "X = 2, N = 5, M = 4. X^N = 2^5 = 32. X^N % M = 32 % 4 = 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a solution using brute force.</p>",
            "<p>Think of a solution using recursion.</p>",
            "<p>Think of a solution using binary exponentiation.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n\tTime Complexity  : O(log N)\n\tSpace Complexity : O(1)\n\n\tWhere 'N' is the number given in the problem.\n*/\n\nint modularExponentiation(int x, int n, int m) {\n\t// Declare a variable to store our result and initialize it with 1.\n\tint answer = 1;\n\n\t// Run a loop until 'N' > 0.\n\twhile (n > 0) {\n\t\t// If bitwise and of 'N' with 1 is 1 then multiply answer with 'X'.\n\t\tif (n & 1)  {\n\t\t\tanswer = (1LL * answer * x) % m;\n\t\t}\n\t\t// Do modular squaring of 'X'.\n\t\tx = (1LL * x * x ) % m;\n\n\t\t// Right shift 'N' by 1 bit for next iteration.\n\t\tn >>= 1;\n\t}\n\t// Return the answer.\n\treturn answer;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\n\tTime Complexity  : O(log N)\n\tSpace Complexity : O(1)\n\n\tWhere 'N' is the number given in the problem.\n\"\"\"\n\ndef modularExponentiation(x, n, m):\n\t# Declare a variable to store our result and initialize it with 1.\n\tanswer = 1\n\n\t# Run a loop until 'N' > 0.\n\twhile (n > 0):\n\t\t# If bitwise and of 'N' with 1 is 1 then multiply answer with 'X'.\n\t\tif (n & 1): \n\t\t\tanswer = (answer * x) % m\n\t\t\n\t\t# Do modular squaring of 'X'.\n\t\tx = (x * x ) % m\n\n\t\t# Right shift 'N' by 1 bit for next iteration.\n\t\tn >>= 1\n\n\t# Return the answer.\n\treturn answer\n\n# Main.\nt = int(input())\nwhile (t > 0):\n\tlst = list(map(int,input().split()))\n\tx,n,m = lst[0], lst[1], lst[2]\n\tprint(modularExponentiation(x, n, m))\n\tt -= 1",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\n\tTime Complexity  : O(log N)\n\tSpace Complexity : O(1)\n\n\tWhere 'N' is the number given in the problem.\n*/\n\npublic class Solution {\n    public static int modularExponentiation(int x, int n, int m) {\n        // Declare a variable to store our result and initialize it with 1.\n        long answer = 1;\n\n        long tempX = x;\n        // Run a loop until 'N' > 0.\n        while (n > 0) {\n            // If bitwise and of 'N' with 1 is 1 then multiply answer with 'X'.\n            if ((n & 1) == 1) {\n                answer = (answer * tempX) % m;\n            }\n            // Do modular squaring of 'X'.\n            tempX = (tempX * tempX) % m;\n\n            // Right shift 'N' by 1 bit for next iteration.\n            n >>= 1;\n        }\n        // Return the answer.\n        return (int) (answer % m);\n    }\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}