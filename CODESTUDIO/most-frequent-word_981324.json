{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9289,
            "title": "Most Frequent Word",
            "titleSlug": "most-frequent-word_981324",
            "content": "<h4 id=\"you-are-given-two-strings-a-and-b-of-words-your-task-is-to-find-out-the-most-frequent-and-lexicographically-smallest-word-in-string-a-which-is-not-present-in-string-b-if-no-such-word-is-present-in-a-then-return-1\">You are given two strings &#39;A&#39; and &#39;B&#39; of words. Your task is to find out the most frequent and lexicographically smallest word in string &#39;A&#39;, which is not present in string &#39;B&#39;. If no such word is present in &#39;A&#39;, then return -1.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. A word is a sequence of one or more lowercase characters.\n\n2. Words are separated by a single whitespace character.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>For the given string &#39;A&#39; = \u201ccoding ninjas coding ninjas\u201d and &#39;B&#39; = \u201cdata structures and algorithms\u201d, so both the word &#39;coding&#39; and &#39;ninjas&#39; are not present in string &#39;B&#39; and occur two times each, but the word \u201ccoding\u201d is lexicographically smaller than the word \u201cninjas\u201d. So the answer is \u201ccoding\u201d.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases. \n\nThe first line of each test case contains a string &#39;A&#39;, having lowercase English letters only.\n\nThe second line of each test case contains a string &#39;B&#39;, having lowercase English letters only.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, return the most frequent and lexicographically smallest word in string &#39;A&#39;, which is not present in string B. If no such word exists, return -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print anything, It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= |A|, |B| &lt;= 10^5 \n\nWhere |A|, |B| denotes the length of string &#39;A&#39; and &#39;B&#39; respectively.   \n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\nyuvraj hit six sixes in six balls\nyuvraj is a cricketer\ncoding ninjas coding ninjas\ncomputer science\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>six\ncoding\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h5>\n\n<pre><code>In test case 1, \u201csix\u201d is the only word which occurs the most number of times in string &#39;A&#39; and is not present in string &#39;B&#39;.\n\nIn test case 2, both the word \u201ccoding\u201d and \u201cninjas\u201d occur two times in string &#39;A&#39; and is not present in string &#39;B&#39;. Since, the word \u201ccoding\u201d is lexicographically smaller than \u201cninjas\u201d, hence we return \u201ccoding\u201d.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\na a b b c c d\na b d\nthis algorithm repeats the same process again and again\nthis algorithm repeats the same process again and again\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>c\n-1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h5>\n\n<pre><code>In test case 1, the words \u201ca\u201d, \u201cb\u201d and \u201cc\u201d occur 3 times in string &#39;A&#39;, but \u201ca\u201d and \u201cb\u201d are present in &#39;B&#39;. Hence, we return \u201cc\u201d.\n\nIn test case 2, both the strings are equal. Hence we return an -1 as there is no such word which is present in &#39;A&#39;, but not present in &#39;B&#39;.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, 'A' and 'B', consisting of lowercase words separated by single spaces, identify the most frequent and lexicographically smallest word in 'A' that is not present in 'B'. A word is defined as a sequence of one or more lowercase characters. If no such word exists in 'A', return -1.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |A|, |B| <= 10^5",
                    "Where |A|, |B| denotes the length of string 'A' and 'B' respectively.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "yuvraj hit six sixes in six balls\nyuvraj is a cricketer",
                        "output": "six",
                        "explanation": "The word 'six' appears most frequently in string 'A' and is not present in string 'B'."
                    },
                    {
                        "input": "coding ninjas coding ninjas\ncomputer science",
                        "output": "coding",
                        "explanation": "Both 'coding' and 'ninjas' appear twice in 'A' and are not in 'B'. 'coding' is lexicographically smaller."
                    },
                    {
                        "input": "a a b b c c d\na b d",
                        "output": "c",
                        "explanation": "The words 'a', 'b' and 'c' occur most number of times in string 'A', but 'a' and 'b' are present in 'B'. Hence, we return 'c'."
                    },
                    {
                        "input": "this algorithm repeats the same process again and again\nthis algorithm repeats the same process again and again",
                        "output": "-1",
                        "explanation": "Both strings are equal, so there is no word present in 'A' but not in 'B'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of brute force to check for each word in A, which is not present in B and count its occurrence.</p>",
            "<p>Think of a solution to store a word in a Data Structure in which we can check its occurrences or presence in string \u2018B\u2019 in constant time.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}