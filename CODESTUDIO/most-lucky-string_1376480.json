{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11038,
            "title": "Most Lucky String",
            "titleSlug": "most-lucky-string_1376480",
            "content": "<h4 id=\"mr-x-is-planning-to-visit-ninja-land-ninja-land-has-n-cities-numbered-from-0-to-n-1-and-m-bidirectional-roads-each-road-connects-two-of-the-n-cities-and-no-two-cities-have-multiple-roads-between-them-all-the-n-cities-have-a-certain-3-letter-code-given-in-the-array-arr-mr-x-will-stay-at-ninja-land-for-exactly-k-days-and-he-does-not-like-to-stay-in-the-same-city-for-two-consecutive-days-therefore-he-needs-to-change-his-city-every-day-of-his-stay-he-also-has-a-special-string-that-is-initially-empty-mr-x-has-a-habit-that-whenever-he-visits-a-city-he-appends-the-code-of-that-city-to-his-special-string\">Mr. X is planning to visit Ninja Land. Ninja Land has &#39;N&#39; cities numbered from 0 to &#39;N-1&#39; and &#39;M&#39; bidirectional roads. Each road connects two of the &#39;N&#39; cities, and no two cities have multiple roads between them. All the &#39;N&#39; cities have a certain 3 letter code given in the array &#39;ARR&#39;. Mr. X will stay at Ninja land for exactly &#39;K&#39; days, and he does not like to stay in the same city for two consecutive days. Therefore, he needs to change his city every day of his stay. He also has a special string that is initially empty. Mr. X has a habit that whenever he visits a city, he appends the code of that city to his special string.</h4>\n\n<h4 id=\"mr-x-has-a-lucky-string-s-of-length-3-k-mr-x-wants-to-plan-his-stay-in-such-a-manner-that-the-number-of-places-where-the-final-special-string-differs-from-the-lucky-string-is-the-minimum-possible-your-task-is-to-find-any-such-order-of-cities-that-mr-x-should-visit-satisfying-the-above-conditions\">Mr. X has a lucky string &#39;S&#39; of length &#39;3*K&#39;. Mr. X wants to plan his stay in such a manner that the number of places where the final special string differs from the lucky string is the minimum possible. Your task is to find any such order of cities that Mr. X should visit satisfying the above conditions.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains three space-separated integers, &#39;N&#39;, &#39;M&#39; and &#39;K&#39;, denoting the number of cities, the number of bidirectional roads, and the number of cities that Mr. X will visit, respectively. \n\nThe second line of each test case contains &#39;N&#39; space-separated strings denoting the elements of the array &#39;ARR&#39;.\n\nThe third line of each test contains the special string &#39;S&#39;.\n\nThe next &#39;M&#39; lines of each test case contain the description of the &#39;M&#39; roads.\nThe &#39;i&#39;th&#39; line contains two space-separated integers, &#39;City1&#39;, &#39;City2&#39;. &#39;City1&#39; and &#39;City2&#39; denote the two cities that are connected by the &#39;i&#39;th&#39; road.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, the checker will print &quot;valid&quot; if the returned order of cities results in a string that differs from the lucky string &#39;S&#39; at the minimum possible places. Otherwise, the checker will print &quot;invalid&quot;.\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 1000\n1 &lt;= M  &lt;= min(1000,(N*(N-1))/2)\n1 &lt;= K &lt;= 100\n|ARR[i]| = 3 \n|S| = 3*K \n0 &lt;= City1, City2 &lt;= N-1\n\nEvery city is reachable from every other city, any two cities are directly connected by at most one road and all the input strings contain uppercase English letters only.\n\nWhere &#39;T&#39; denotes the number of test cases, &#39;N&#39; denotes the number of cities, &#39;M&#39; denotes the number of roads, &#39;K&#39; denotes the number of cities that Mr. X will visit, ARR[i] denotes the &#39;i&#39;th&#39; element of the array &#39;ARR&#39;, &#39;S&#39; denotes the lucky string, &#39;City1&#39; and &#39;City2&#39; denotes the two cities that are connected by the &#39;i&#39;th&#39; road, .\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 2 2\nAAB BBD ABC\nAABABCBBD\n0 2\n1 2\n4 3 1\nAAA BBD CCD BBC\nBFC\n1 2\n0 3\n1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>valid\nvalid\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>For the first test case : \nMr. X can start his journey at City-0, then go to City-2 and then end his journey at City-1. The special string will be &quot;AABABCBBD&quot; which is exactly same as the lucky string.\n\nFor the second test case :\nMr. X should visit City-3 only, as the special string in this case differs by the lucky string at only one place.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 3 2\nABC BBD ARQ\nABDABD\n1 2\n0 2\n0 1\n2 1 1\nAAB BBA\nAAA\n1 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>valid\nvalid\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2 :</h5>\n\n<pre><code>For the first test case : \nMr. X should follow the path City-0 =&gt; City-1.\n\nFor the second test case:\nMr. X should visit City-1 only.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Mr. X is planning a K-day trip to Ninja Land. Ninja Land has N cities, each with a 3-letter code. Mr. X wants to visit K cities, changing cities daily. Each city visit appends its code to a special string. Given a lucky string S of length 3*K, the goal is to find an order of city visits that minimizes the differences between the special string and the lucky string.  The cities are connected by M bidirectional roads. Your task is to implement a function that finds such an optimal order.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 1000",
                    "1 <= M  <= min(1000,(N*(N-1))/2)",
                    "1 <= K <= 100",
                    "|ARR[i]| = 3",
                    "|S| = 3*K",
                    "0 <= City1, City2 <= N-1",
                    "Every city is reachable from every other city, any two cities are directly connected by at most one road and all the input strings contain uppercase English letters only.",
                    "All the input strings contain uppercase English letters only.",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 2, k = 2, arr = [\"AAB\", \"BBD\", \"ABC\"], s = \"AABABCBBD\", roads = [[0, 2], [1, 2]]",
                        "output": "valid",
                        "explanation": "Mr. X can start his journey at City-0, then go to City-2 and then end his journey at City-1. The special string will be \"AABABCBBD\" which is exactly same as the lucky string."
                    },
                    {
                        "input": "n = 4, m = 3, k = 1, arr = [\"AAA\", \"BBD\", \"CCD\", \"BBC\"], s = \"BFC\", roads = [[1, 2], [0, 3], [1, 3]]",
                        "output": "valid",
                        "explanation": "Mr. X should visit City-3 only, as the special string in this case differs by the lucky string at only one place."
                    },
                    {
                        "input": "n = 3, m = 3, k = 2, arr = [\"ABC\", \"BBD\", \"ARQ\"], s = \"ABDABD\", roads = [[1, 2], [0, 2], [0, 1]]",
                        "output": "valid",
                        "explanation": "Mr. X should follow the path City-0 => City-1."
                    },
                    {
                        "input": "n = 2, m = 1, k = 1, arr = [\"AAB\", \"BBA\"], s = \"AAA\", roads = [[1, 0]]",
                        "output": "valid",
                        "explanation": "Mr. X should visit City-1 only."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of generating all the possible order of cities that Mr. X should visit.&nbsp;</p>",
            "<p>Try to optimize the previous approach using Memoization.</p>",
            "<p>Try to optimize the recursive approach using Dynamic Programming.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}