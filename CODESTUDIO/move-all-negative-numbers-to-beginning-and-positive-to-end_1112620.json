{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9959,
            "title": "Move All Negative Numbers To Beginning And Positive To End",
            "titleSlug": "move-all-negative-numbers-to-beginning-and-positive-to-end_1112620",
            "content": "<h4 id=\"you-are-given-an-array-arr-consisting-of-n-integers-you-need-to-rearrange-the-array-elements-such-that-all-negative-numbers-appear-before-all-positive-numbers\">You are given an array &#39;ARR&#39; consisting of &#39;N&#39; integers. You need to rearrange the array elements such that all negative numbers appear before all positive numbers.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The order of elements in the resulting array is not important.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Let the array be [1, 2, -3, 4, -4, -5]. On rearranging the array such that all negative numbers appear before all positive numbers we get the resulting array [-3, -5, -4, 2, 4, 1].\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The very first line of input contains an integer \u2018T\u2019 denoting the number of test cases. \n\nThe first line of every test case contains an integer \u2018N\u2019 denoting the number of elements present in the array.\n\nThe second line of every test case contains \u2018N\u2019 space-separated integers denoting the elements present in the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, \u201cYes\u201d is printed if the resulting array is correct otherwise \u201cNo\u201d.\n\nOutput for each test case is printed on a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 5 * 10^4\n-10^5 &lt;= ARR[i] &lt;= 10^5\n\nWhere  \u2018T\u2019 represents the number of test cases and \u2018N\u2019 represents the number of elements present in the array.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\n1 -4 -2 5 3\n2\n2 1    \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>Yes\nYes\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>For the first test case we have, array: [1, -4, -2, 5, 3] and N = 5. On rearranging the array such that all negative numbers appear before all positive numbers we get the resulting array [-2, -4, 1, 5, 3].\n\nFor the second test case we have, array: [2, 1] and N = 2. There are no negative numbers. Hence, we do not require any rearrangement.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n4\n1 -5 -5 3\n5\n-1 -2 3 4 5\n1\n-2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>Yes \nYes\nYes\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2:</h5>\n\n<pre><code>For the first test case we have, array: [1, -5, -5,  3] and N = 4. On rearranging the array such that all negative numbers appear before all positive numbers we get the resulting array [-5, -5, 1, 3].\n\nFor the second test case we have, array: [-1, -2, 3, 4, 5] and N = 5. There are already arranged in required way. Hence, we do not require any rearrangement.\n\nFor the third test case we have, array: [-2 ] and N = 1. The array is already arranged in required way. Hence, we do not require any rearrangement.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 176,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, rearrange the elements such that all negative numbers precede all positive numbers. The order of elements within each group (negative and positive) is not important.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 5 * 10^4",
                    "-10^5 <= ARR[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 5, nums=[1, -4, -2, 5, 3]",
                        "output": "Yes",
                        "explanation": "The array [1, -4, -2, 5, 3] can be rearranged to [-4, -2, 1, 5, 3], where all negative numbers appear before all positive numbers."
                    },
                    {
                        "input": "n = 2, nums=[2, 1]",
                        "output": "Yes",
                        "explanation": "The array [2, 1] contains no negative numbers, so it is already in the desired format."
                    },
                    {
                        "input": "n = 4, nums=[1, -5, -5, 3]",
                        "output": "Yes",
                        "explanation": "The array [1, -5, -5, 3] can be rearranged to [-5, -5, 1, 3], where all negative numbers appear before all positive numbers."
                    },
                    {
                        "input": "n = 5, nums=[-1, -2, 3, 4, 5]",
                        "output": "Yes",
                        "explanation": "The array [-1, -2, 3, 4, 5] already has all negative numbers before all positive numbers."
                    },
                    {
                        "input": "n = 1, nums=[-2]",
                        "output": "Yes",
                        "explanation": "The array [-2] contains only a negative number, so it is already in the desired format."
                    },
                    {
                        "input": "n = 6, nums=[1, 2, -3, 4, -4, -5]",
                        "output": "Yes",
                        "explanation": "The array [1, 2, -3, 4, -4, -5] can be rearranged to [-3, -4, -5, 1, 2, 4]."
                    },
                    {
                        "input": "n = 3, nums=[-1,-2,-3]",
                        "output": "Yes",
                        "explanation": "The array [-1, -2, -3] contains only negative numbers, so it is already in the desired format."
                    },
                    {
                        "input": "n = 3, nums=[1,2,3]",
                        "output": "Yes",
                        "explanation": "The array [1,2,3] contains only positive numbers, so it is already in the desired format."
                    },
                    {
                        "input": "n = 7, nums=[0, -1, 0, 1, -2, 0, 2]",
                        "output": "Yes",
                        "explanation": "The array [0, -1, 0, 1, -2, 0, 2] can be rearranged to [-1, -2, 0, 0, 0, 1, 2]"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you solve this problem by sorting the given array?</p>",
            "<p>Can you solve this problem by partitioning the elements into two halves, similar to quicksort partition algorithm?</p>",
            "<p>Can you solve this problem using a two-pointer approach?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n\tTime complexity: O(N)\r\n\tSpace Complexity: O(1)\r\n\t\r\n\tWhere N is the number of elements in the array.\r\n*/\r\n\r\nvector < int > separateNegativeAndPositive(vector < int > & nums) {\r\n\r\n    // Create two pointers- \"LEFT\" and \"RIGHT\".\r\n    int left = 0;\r\n    int right = nums.size() - 1;\r\n\r\n    while (left < right) {\r\n\r\n        if (nums[left] < 0 && nums[right] < 0) {\r\n\r\n            // Case 1: Both the pointers point to negative elements.\r\n            ++left;\r\n        } \r\n        else if (nums[left] >= 0 && nums[right] >= 0) {\r\n            \r\n            // Case 2: Both the pointers point to positive elements.\r\n            --right;\r\n        } \r\n        else if (nums[left] >= 0 && nums[right] < 0) {\r\n\r\n            // Case 3: \"LEFT\" points to positive element and \"RIGHT\" points to negative element.\r\n            swap(nums[left], nums[right]);\r\n            ++left;\r\n            --right;\r\n        } \r\n        else {\r\n\r\n            // Case 4: \"LEFT\" points to negative element and \"RIGHT\" points to positive element.\r\n            ++left;\r\n            --right;\r\n        }\r\n\r\n    }\r\n\r\n    return nums;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity: O(N)\r\n    Space Complexity: O(1)\r\n\r\n    Where N is the number of elements in the array.\r\n*/\r\n\r\npublic class Solution {\r\n    public static int[] separateNegativeAndPositive(int []nums) {\r\n\r\n        // 'j' stores the index of the leftmost positive element.\r\n        int j = 0;\r\n\r\n        for (int i = 0; i < nums.length; i++) {\r\n\r\n            if (nums[i] < 0) {\r\n\r\n                // Current element is negative.\r\n                if (i != j) {\r\n\r\n                    // Swap the current element with the leftmost positive element.\r\n                    int temp = nums[i];\r\n                    nums[i] = nums[j];\r\n                    nums[j] = temp;\r\n                }\r\n\r\n                ++j;\r\n            }\r\n        }\r\n\r\n        return nums;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time complexity: O(N)\n\tSpace Complexity: O(1)\n\n\tWhere N is the number of elements in the array.\n'''\n\ndef separateNegativeAndPositive(nums):\n\n    # Create two pointers- \"LEFT\" and \"RIGHT\".\n    left = 0\n    right = len(nums)-1\n\n    while (left < right):\n\n        if (nums[left] < 0 and nums[right] < 0):\n            # Case 1: Both the pointers point to negative elements.\n            left += 1\n\n        elif (nums[left] >= 0 and nums[right] >= 0):\n            # Case 2: Both the pointers point to positive elements.\n            right -= 1\n\n        elif (nums[left] >= 0 and nums[right] < 0):\n            # Case 3: \"LEFT\" points to positive element and \"RIGHT\" points to negative element.\n            get = nums[left], nums[right]\n            nums[right], nums[left] = get\n            left += 1\n            right -= 1\n\n        else:\n            # Case 4: \"LEFT\" points to negative element and \"RIGHT\" points to positive element.\n            left += 1\n            right -= 1\n\n    return nums\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}