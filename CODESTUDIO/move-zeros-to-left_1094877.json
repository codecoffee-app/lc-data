{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9828,
            "title": "Move Zeros To Left",
            "titleSlug": "move-zeros-to-left_1094877",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-integers-your-task-is-to-modify-the-array-so-that-all-the-array-elements-having-zero-values-get-pushed-to-the-left-and-all-the-array-elements-having-non-zero-value-come-after-them-while-maintaining-their-relative-order\">You are given an array &#39;ARR&#39; of integers. Your task is to modify the array so that all the array elements having zero values get pushed to the left and all the array elements having non-zero value come after them while maintaining their relative order.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>Consider the array { 1, 1, 0, 2, 0 }. \nFor the given array the modified array should be {0,0,1,1,2} . \nArrays { 0, 0, 1, 2, 1 } and  { 0, 0, 2, 1, 1 } are not the correctly reorganized array even if they have all the zero values pushed to the left as in both the arrays the relative order of non-zero elements is not maintained.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up :</h5>\n\n<pre><code>Can you solve the problem in linear time, and constant space?\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains an integer &#39;T&#39; representing the number of test cases or queries to be processed.\nThen the &#39;T&#39; test case follows.\nThe first line of each test case contains an integer &#39;N&#39; denoting the number of elements in the array &#39;ARR&#39;.\nThe second line of each test contains &#39;N&#39; space-separated integers denoting the array elements.   \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the modified array in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n-10^9 &lt;= ARR[i] &lt;= 10^9\n\nWhere &#39;T&#39; denotes the number of test cases, &#39;N&#39; denotes the number of elements in the array \u2018ARR\u2019 respectively, and &#39;ARR[i]&#39; denotes the \u2019i-th\u2019 element of the array &#39;ARR&#39;. \n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2 \n5\n1 2 0 0 1\n3\n1 0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>0 0 1 2 1\n0 0 1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1 :</h5>\n\n<pre><code>For the first test case, the given array is { 1, 2, 0, 0, 1 }, if we move all the zeros to the left the modified array becomes { 0, 0, 1, 2, 1} which is our final answer. \n\nFor the second test case, the given array is { 1, 0, 0}, if we move all the zeros to the left the modified array becomes { 0, 0, 1} which is our final answer.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n5\n1 2 3 4 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 2 3 4 5\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 36,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, rearrange the elements such that all zeros are moved to the left side of the array, while preserving the relative order of the non-zero elements.  For example, the array `[1, 1, 0, 2, 0]` should be modified to `[0, 0, 1, 1, 2]`. Aim for a solution with linear time complexity and constant space complexity.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "-10^9 <= ARR[i] <= 10^9",
                    "T denotes the number of test cases.",
                    "N denotes the number of elements in the array ARR.",
                    "ARR[i] denotes the i-th element of the array ARR.",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "5\n1 2 0 0 1",
                        "output": "0 0 1 2 1",
                        "explanation": "The input array is [1, 2, 0, 0, 1]. After moving all the zeros to the left while maintaining the order of non-zero elements, the resulting array is [0, 0, 1, 2, 1]."
                    },
                    {
                        "input": "3\n1 0 0",
                        "output": "0 0 1",
                        "explanation": "The input array is [1, 0, 0]. After rearranging, the array becomes [0, 0, 1]."
                    },
                    {
                        "input": "5\n1 2 3 4 5",
                        "output": "1 2 3 4 5",
                        "explanation": "The input array contains no zeros, so the array remains unchanged."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of an approach using a data structure to store all the non-zero elements.</p>",
            "<p>Try to think of an approach using two pointers.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}