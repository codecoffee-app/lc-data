{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10235,
            "title": "Multilevel Inheritance",
            "titleSlug": "multilevel-inheritance_1172171",
            "content": "<h4 id=\"create-a-class-grandfather-that-has-a-parameterized-constructor-and-a-grandfathername-attribute\">Create a class GrandFather that has a parameterized constructor and a grandFatherName attribute.</h4>\n\n<h4 id=\"create-another-class-father-that-inherits-the-property-of-grandfather-and-has-a-parameterized-constructor-with-an-additional-argument-fathername\">Create another class Father that inherits the property of GrandFather and has a parameterized constructor with an additional argument fatherName.</h4>\n\n<h4 id=\"create-another-class-son-that-inherits-fathers-property-and-has-a-parameterized-constructor-with-an-additional-argument-sonname-and-a-printname-method-that-prints-the-sonname-fathername-and-grandfathername-into-the-format-as-shown-below-in-sampleoutput-1\">Create another class Son that inherits Father&#39;s property and has a parameterized constructor with an additional argument sonName and a printName method that prints the sonName,fatherName, and grandFatherName into the format as shown below in SampleOutput 1.</h4>\n\n<h4 id=\"you-need-to-create-the-object-of-son-class-and-pass-the-value-of-sonname-fathername-grandfathername-as-saurabh-ramesh-and-suresh-respectively-and-call-the-printname-method\">You need to create the object of Son class and pass the value of sonName,fatherName,grandFatherName as &#39;Saurabh&#39;, &#39;Ramesh&#39;, and &#39;Suresh&#39; respectively and call the printName method.</h4>\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>sonname:  Saurabh\nfathername:  Ramesh\ngrandfather:  Suresh\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Keep all the attribute value static as  above mention in sample output 1.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design three classes: `GrandFather`, `Father`, and `Son`. The `GrandFather` class should have a constructor that takes a `grandFatherName` as input and stores it as an attribute. The `Father` class should inherit from `GrandFather` and its constructor should take both `grandFatherName` and `fatherName` as input.  The `Son` class should inherit from `Father` and its constructor should accept `grandFatherName`, `fatherName`, and `sonName` as input. The `Son` class should also have a method called `printName` that prints the `sonName`, `fatherName`, and `grandFatherName` in the specified format. Instantiate a `Son` object with `sonName` as 'Saurabh', `fatherName` as 'Ramesh', and `grandFatherName` as 'Suresh', and then call the `printName` method.",
                "constraints": [
                    "The GrandFather class must have a grandFatherName attribute.",
                    "The Father class must inherit from GrandFather and have a fatherName attribute.",
                    "The Son class must inherit from Father, have a sonName attribute, and a printName method that prints all three names in the specified format."
                ],
                "testcases": [
                    {
                        "input": "// Create the classes here\nclass GrandFather {\npublic:\n    string grandFatherName;\n    GrandFather(string grandFatherName) : grandFatherName(grandFatherName) {}\n};\n\nclass Father : public GrandFather {\npublic:\n    string fatherName;\n    Father(string grandFatherName, string fatherName) : GrandFather(grandFatherName), fatherName(fatherName) {}\n};\n\nclass Son : public Father {\npublic:\n    string sonName;\n    Son(string grandFatherName, string fatherName, string sonName) : Father(grandFatherName, fatherName), sonName(sonName) {}\n\n    void printName() {\n        cout << \"sonname:  \" << sonName << endl;\n        cout << \"fathername:  \" << fatherName << endl;\n        cout << \"grandfather:  \" << grandFatherName << endl;\n    }\n};\n\nint main() {\n    Son s(\"Suresh\", \"Ramesh\", \"Saurabh\");\n    s.printName();\n    return 0;\n}",
                        "output": "sonname:  Saurabh\nfathername:  Ramesh\ngrandfather:  Suresh",
                        "explanation": "This test case creates a Son object with the given names and calls the printName method, which should output the names in the correct format."
                    },
                    {
                        "input": "// Create the classes here\nclass GrandFather {\npublic:\n    string grandFatherName;\n    GrandFather(string grandFatherName) : grandFatherName(grandFatherName) {}\n};\n\nclass Father : public GrandFather {\npublic:\n    string fatherName;\n    Father(string grandFatherName, string fatherName) : GrandFather(grandFatherName), fatherName(fatherName) {}\n};\n\nclass Son : public Father {\npublic:\n    string sonName;\n    Son(string grandFatherName, string fatherName, string sonName) : Father(grandFatherName, fatherName), sonName(sonName) {}\n\n    void printName() {\n        cout << \"sonname:  \" << sonName << endl;\n        cout << \"fathername:  \" << fatherName << endl;\n        cout << \"grandfather:  \" << grandFatherName << endl;\n    }\n};\n\nint main() {\n    Son s(\"Grandpa\", \"Dad\", \"Kid\");\n    s.printName();\n    return 0;\n}",
                        "output": "sonname:  Kid\nfathername:  Dad\ngrandfather:  Grandpa",
                        "explanation": "This test case tests the program using different names to verify proper output formatting."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}