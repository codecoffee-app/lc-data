{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11475,
            "title": "My Calendar III",
            "titleSlug": "my-calendar-iii_1381737",
            "content": "<h4 id=\"a-k-booking-happens-when-k-events-have-some-non-empty-intersection-i-e-there-is-some-time-that-is-common-to-all-k-events-you-are-given-some-events-start-end-after-each-given-event-return-an-integer-k-representing-the-maximum-k-booking-between-all-the-previous-events\">A k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.) You are given some events [start, end), after each given event, return an integer k representing the maximum k-booking between all the previous events.</h4>\n\n<h4 id=\"implement-the-mycalendarevents-class\">Implement the MyCalendarEvents class:</h4>\n\n<h4 id=\"mycalendarevents-initializes-the-object\">MyCalendarEvents() Initializes the object.</h4>\n\n<h4 id=\"int-book-int-start-int-end-returns-an-integer-k-representing-the-largest-integer-such-that-there-exists-a-k-booking-in-the-calendar\">int book(int start, int end) Returns an integer k representing the largest integer such that there exists a k-booking in the calendar.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Here the start of the event is included while the end is not as part of the slot i.e. the slot end right before the end.\n</code></pre>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>Input:\n[&quot;MyCalendarEvents&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;, &quot;book&quot;]\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]  \nOutput:\n[null, 1, 1, 2, 3, 3, 3]\n\nExplanation:\nMyCalendarEvents myCalendarEvent = new MyCalendarEvents();\nmyCalendarEvent.book(10, 20); // return 1, The first event can be booked and is disjoint, so the maximum k-booking is a 1-booking.\nmyCalendarEvent.book(50, 60); // return 1, The second event can be booked and is disjoint, so the maximum k-booking is a 1-booking.\nmyCalendarEvent.book(10, 40); // return 2, The third event [10, 40) intersects the first event, and the maximum k-booking is a 2-booking.\nmyCalendarEvent.book(5, 15); // return 3, The remaining events cause the maximum K-booking to be only a 3-booking.\nmyCalendarEvent.book(5, 10); // return 3\nmyCalendarEvent.book(25, 55); // return 3\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line determines the number of test cases that would be given in the problem.\nThe first line of each test case contains the integer \u2018N\u2019 which denotes the number of events that are going to be there.\nEach \u2018N\u2019 line of input contains two space-separated integers where the first value is the start of the slot of the events \u2018start\u2019 while the second integer is the end of the slot of the events \u2018end\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, return an integer k representing the maximum k-booking between all the previous events.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 1000\n0 &lt;= start &lt; end &lt;= 10^9\n\nWhere \u2018start\u2019 is the start of the slot of the events \u2018columns\u2019 is the number of columns.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\n1 2\n1 2\n2 3\n2\n10 20\n15 30\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>1 2 2\n1 2\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For the first test case:\n\nMyCalendarEvents myCalendarEvent = new MyCalendarEvents();\nmyCalendarEvent.book(1, 2); // return 1, The first event can be booked and is disjoint, so the maximum k-booking is a 1-booking.\nmyCalendarEvent.book(1, 2); // return 2, The second event [1, 2) intersects the first event, and the maximum k-booking is a 2-booking.\nmyCalendarEvent.book(2, 3); // return 2 \n\nHence the Output: [1,2,2]\n\n\nFor the second test case:\n\nMyCalendarEvents myCalendarEvents = new MyCalendarEvents();\nmyCalendarEvent.book(10, 20); // return 1, The first event can be booked and is disjoint, so the maximum k-booking is a 1-booking.\nmyCalendarEvent.book(15, 30); // return 2, The second event [1, 2) intersects the first event, and the maximum k-booking is a 2-booking.\n\n\nHence the Output: [1,2]\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n6\n10 20\n50 60\n10 40\n5 15\n5 10\n25 55  \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>1 1 2 3 3 3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "A k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events). Given a series of events represented as [start, end), for each event added to the calendar, determine the maximum k-booking possible up to that point.\n\nImplement the `MyCalendarEvents` class:\n\n*   `MyCalendarEvents()`: Initializes the object.\n*   `int book(int start, int end)`: Returns an integer k representing the largest integer such that there exists a k-booking in the calendar after adding the event `[start, end)`. Note that the event includes `start` but excludes `end`.",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= N <= 1000 (Number of events)",
                    "0 <= start < end <= 10^9 (Event start and end times)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\n1 2\n1 2\n2 3",
                        "output": "1 2 2",
                        "explanation": "Initial event [1, 2) results in a 1-booking. Adding [1, 2) again creates an intersection, resulting in a 2-booking. Finally, [2, 3) is disjoint from the intersection of the previous events, so the maximum remains 2."
                    },
                    {
                        "input": "2\n10 20\n15 30",
                        "output": "1 2",
                        "explanation": "The first event [10, 20) results in a 1-booking.  The second event [15, 30) overlaps with the first, creating a 2-booking."
                    },
                    {
                        "input": "6\n10 20\n50 60\n10 40\n5 15\n5 10\n25 55",
                        "output": "1 1 2 3 3 3",
                        "explanation": "The sequence of bookings progressively increases the maximum k-booking as overlaps are introduced. [10,20] is 1, [50,60] is 1, [10,40] overlaps [10,20] making it 2, [5,15] overlaps [10,20] and [10,40] making it 3, [5,10] overlaps [5,15],[10,20], and [10,40] but does not raise it above 3. [25, 55] intersects [10,40] and [50,60] still at 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>You can store the interval counts and find the maximum booked interval value for each given intersecting or non-intersecting sets of intervals.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}