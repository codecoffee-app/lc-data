{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11167,
            "title": "My Calendar",
            "titleSlug": "my-calendar_1380859",
            "content": "<h4 id=\"given-n-events-each-with-a-start-and-end-time-in-the-form-of-intervals-such-that-it-represents-a-booking-on-the-half-open-interval-start-end-i-e-the-range-of-real-numbers-x-such-that-start-x-end-initially-the-calendar-has-no-events-a-new-event-can-be-added-to-the-calendar-if-adding-the-event-will-not-cause-a-triple-booking-a-triple-booking-happens-when-three-events-have-some-non-empty-intersection-i-e-there-exists-a-time-common-to-all-the-3-events\">Given \u2018N\u2019 events each with a \u2018start\u2019 and \u2018end\u2019 time in the form of intervals such that it represents a booking on the half-open interval [start, end), i.e., the range of real numbers x such that start &lt;= x &lt; end. Initially, the calendar has no events. A new event can be added to the calendar, if adding the event will not cause a triple booking. A triple booking happens when three events have some non-empty intersection (i.e., there exists a  time common to all the 3 events).</h4>\n\n<h4 id=\"your-task-is-to-process-the-n-events-and-for-each-of-the-events-add-that-event-to-the-calendar-and-return-true-if-the-event-can-be-added-to-the-calendar-successfully-without-causing-a-triple-booking-otherwise-return-false-and-do-not-add-that-event-to-the-calendar\">Your task is to process the &#39;N&#39; events, and for each of the events, add that event to the calendar and return \u2018True\u2019, if the event can be added to the calendar successfully without causing a triple booking. Otherwise, return \u2018False\u2019 and do not add that event to the calendar.</h4>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. \n\nThe first line of each test case contains an integer \u2018N\u2019, which represents the total number of events.\n\nThen the next \u2018N\u2019 lines contain two space-separated integers &#39;Start&#39; and &#39;End&#39;, denoting the starting and ending times of the &#39;N&#39; intervals. \n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print &#39;N&#39; space-separated &#39;True&#39; or &#39;False&#39; denoting the status of each event.  (\u2018True\u2019 if the addition of an event to the calendar does not cause triple booking, \u2018False\u2019 otherwise).\n\nOutput for each test case is printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given functions.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 1000\n0 &lt;= Start , End &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n6\n10 20\n50 60\n10 40\n5 15\n5 10\n25 55\n4\n1 10\n20 30\n5 6\n8 9\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True True True False True True\nTrue True True True\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case, \n\nThe first two events can be booked. The third event can be booked because it causes conflict with the first event only once.The fourth event (5, 15) can&#39;t be booked, because it would result in a triple booking. The fifth event (5, 10) can be booked, as it does not use time [1, 10) or overlapping instead it overlaps with [5, 15) which is overlapped once. The sixth event (25, 55) can be booked, as it will overlap with the third event with the time [10, 40) which is also overlapped only once.\n\nFor the second test case,\n\nThe first two events can be booked. The third event will also be booked as it will be overlap with the first event. The fourth event will be booked because it will overlap with the first event only and not with the third event.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4\n1 10\n20 30\n5 6\n2 7\n5\n1 10\n20 30\n1 15\n8 9 \n10 15   \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>True True True False\nTrue True True False True\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a calendar with no initial events, process 'N' events. Each event is represented by a half-open interval [start, end). An event can be added if it doesn't cause a triple booking (three events with overlapping time). For each event, determine if adding it causes a triple booking. If not, add it to the calendar and return True; otherwise, return False and don't add it.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 1000 (Number of events per test case)",
                    "0 <= Start, End <= 10^9 (Start and end times of events)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "6\n10 20\n50 60\n10 40\n5 15\n5 10\n25 55",
                        "output": "True True True False True True",
                        "explanation": "The first two events can be booked. The third event can be booked because it overlaps with the first event only once. The fourth event (5, 15) can't be booked, because it would result in a triple booking. The fifth event (5, 10) can be booked, as it does not cause triple booking, instead it overlaps with [5, 15) which is overlapped once. The sixth event (25, 55) can be booked, as it will overlap with the third event with the time [10, 40) which is also overlapped only once."
                    },
                    {
                        "input": "4\n1 10\n20 30\n5 6\n8 9",
                        "output": "True True True True",
                        "explanation": "The first two events can be booked. The third event will also be booked as it will overlap with the first event. The fourth event will be booked because it will overlap with the first event only and not with the third event."
                    },
                    {
                        "input": "4\n1 10\n20 30\n5 6\n2 7",
                        "output": "True True True False",
                        "explanation": null
                    },
                    {
                        "input": "5\n1 10\n20 30\n1 15\n8 9\n10 15",
                        "output": "True True True False True",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>In the calendar, there will be only two types of events one that occurs at least one time and the other that occurs exactly two times?</p>",
            "<p>Can you solve this problem using a HashMap?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}