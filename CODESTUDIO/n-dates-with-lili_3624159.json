{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16719,
            "title": "N-dates with Lili",
            "titleSlug": "n-dates-with-lili_3624159",
            "content": "<h4 id=\"cole-is-going-on-a-date-with-lili-but-this-date-is-a-little-strange-and-it-will-last-for-n-days-day-1-day-2-day-n-continuously-they-will-be-going-to-the-place-known-as-kausani-there-are-n-k-1-restaurants-1-2-n-k-1-situated-on-a-line-in-kausani\">Cole is going on a date with Lili. But this date is a little strange, and it will last for \u2018N\u2019 days (day 1, day 2\u2026 day \u2018N\u2019) continuously. They will be going to the place known as \u2018Kausani\u2019. There are (\u2018N\u2019 + \u2018K\u2019 - 1) restaurants (1, 2, \u2026, \u2019N\u2019 + \u2018K\u2019 - 1) situated on a line in \u2018Kausani\u2019.</h4>\n\n<h4 id=\"on-the-i-th-day-they-can-go-to-any-one-of-the-restaurants-from-i-to-i-k-1-which-lilli-will-decide-one-restaurant-can-be-visited-any-number-of-times-you-are-given-an-array-a-in-which-the-j-th-number-denotes-the-number-of-coins-that-will-be-spent-on-restaurant-j\">On the \u2018i-th\u2019 day, they can go to any one of the restaurants from \u2018i\u2019 to \u2018i\u2019 + \u2018K\u2019 - 1, which Lilli will decide(one restaurant can be visited any number of times). You are given an array \u2018A\u2019 in which the \u2018j-th\u2018 number denotes the number of coins that will be spent on restaurant \u2018j\u2019.</h4>\n\n<h4 id=\"cole-is-worried-and-wants-to-know-the-maximum-total-number-of-coins-required-on-these-n-dates-with-lilli-find-the-maximum-total-number-of-coins-needed\">Cole is worried and wants to know the maximum total number of coins required on these N-dates with Lilli. Find the maximum total number of coins needed.</h4>\n\n<h5 id=\"examples\">Examples:</h5>\n\n<pre><code>\u2018N\u2019 = 2\n\u2018K\u2019 = 2\n\u2018A\u2019 = {2, 3, 1}\n\nOn the 1st date, they can go to restaurant 1 or restaurant 2.\nOn the 2nd date, they can go to restaurant 2 or restaurant 3.\n\nThe possible combination of restaurants: \n\u20181\u2019 and \u20182\u2019 on 1st date and 2nd date respectively = 2 + 3 = 5\n\u20181\u2019 and \u20183\u2019 on 1st date and 2nd date respectively = 2 + 1 = 3\n\u20182\u2019 and \u20182\u2019 on 1st date and 2nd date respectively = 3 + 3 = 6\n\u20182\u2019 and \u20183\u2019 on 1st date and 2nd date respectively = 3 + 1 = 4\n\nMaximum Total number of coins = max(5, 3, 6, 4) = 6\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019 which denotes the number of test cases to be run. Then the test cases follow.\n\nThe first line of each test case contains two integers, \u2018N\u2019 and \u2018K\u2019, denoting the number of dates and the number of restaurants they can go to on each date, respectively.\n\nThe second line contains (\u2018N\u2019 + \u2018K\u2019 - 1) space-separated integers, where the \u2018I-th\u2019 integer denotes the number of coins to be spent in the \u2018I-th\u2019 restaurant.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print a single integer representing the maximum total number of coins required for each test case.\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= K &lt;= N &lt;= 10^5\n1 &lt;= ARR[i] &lt;= 10^4\nSum of \u2018N\u2019 over all test cases is &lt;= 10^5.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 2\n1 2 3 4 5\n3 1\n9 8 7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>14\n24\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For test 1: \nOn the 1st date, they can go to restaurant 1 or restaurant 2.\nOn the 2nd date, they can go to restaurant 2 or restaurant 3.\nOn the 3rd date, they can go to restaurant 3 or restaurant 4.\nOn the 4th date, they can go to restaurant 4 or restaurant 5.\n\nAmong all possible combinations of restaurants, the following is the combination with the maximum total number of coins :\nDate 1: restaurant 2\nDate 2 : restaurant 3\nDate 3 : restaurant 4\nDate 4 : restaurant 5\nMaximum total number of coins = 2 + 3 + 4 + 5 = 14\n\nFor test 2:\nOn the 1st date, they can only go to restaurant 1.\nOn the 2nd date, they can only go to restaurant 2.\nOn the 3rd date, they can only go to restaurant 3.\n\nMaximum Total number of coins = 9 + 8 + 7 = 24\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n4 2\n1 1 1 1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Cole and Lili are planning a series of N dates in Kausani. There are N + K - 1 restaurants along a line, each with a specific cost represented by the array A. On each of the N days, they can choose any restaurant within the range [i, i + K - 1], where 'i' is the day number (1-indexed).  Determine the maximum total cost they can incur across all N dates by optimally selecting restaurants each day.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= K <= N <= 10^5",
                    "1 <= ARR[i] <= 10^4",
                    "Sum of \u2018N\u2019 over all test cases is <= 10^5."
                ],
                "testcases": [
                    {
                        "input": "arr=[1, 2, 3, 4, 5], n=4, k=2",
                        "output": "14",
                        "explanation": "Date 1: restaurant 2 (cost 2)\nDate 2: restaurant 3 (cost 3)\nDate 3: restaurant 4 (cost 4)\nDate 4: restaurant 5 (cost 5)\nMaximum total cost = 2 + 3 + 4 + 5 = 14"
                    },
                    {
                        "input": "arr=[9, 8, 7], n=3, k=1",
                        "output": "24",
                        "explanation": "Date 1: restaurant 1 (cost 9)\nDate 2: restaurant 2 (cost 8)\nDate 3: restaurant 3 (cost 7)\nMaximum total cost = 9 + 8 + 7 = 24"
                    },
                    {
                        "input": "arr=[1, 1, 1, 1, 1], n=4, k=2",
                        "output": "4",
                        "explanation": "Date 1: restaurant 1 or 2 (max 1)\nDate 2: restaurant 2 or 3 (max 1)\nDate 3: restaurant 3 or 4 (max 1)\nDate 4: restaurant 4 or 5 (max 1)\nMaximum total cost = 1 + 1 + 1 + 1 = 4"
                    },
                    {
                        "input": "arr=[2, 3, 1], n=2, k=2",
                        "output": "6",
                        "explanation": "Possible combinations:\n(1, 2) = 2 + 3 = 5\n(1, 3) = 2 + 1 = 3\n(2, 2) = 3 + 3 = 6\n(2, 3) = 3 + 1 = 4\nMaximum total cost = 6"
                    },
                    {
                        "input": "arr=[5, 10, 2, 8, 1], n=5, k=1",
                        "output": "26",
                        "explanation": "Since K=1, on each day, they only have one restaurant choice.\nMax cost = 5 + 10 + 2 + 8 + 1 = 26"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>You need maximum coins for each date to calculate the maximum total number of coins.</p>",
            "<p>How can we find the maximum number of coins for each date faster?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}