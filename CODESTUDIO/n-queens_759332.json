{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7669,
            "title": "N Queens",
            "titleSlug": "n-queens_759332",
            "content": "<h4 id=\"you-are-given-an-integer-n-for-a-given-n-x-n-chessboard-find-a-way-to-place-n-queens-such-that-no-queen-can-attack-any-other-queen-on-the-chessboard\">You are given an integer &#39;N&#39;. For a given &#39;N&#39; x &#39;N&#39; chessboard, find a way to place &#39;N&#39; queens such that no queen can attack any other queen on the chessboard.</h4>\n\n<h4 id=\"a-queen-can-be-killed-when-it-lies-in-the-same-row-or-same-column-or-the-same-diagonal-of-any-of-the-other-queens-you-have-to-print-all-such-configurations\">A queen can be killed when it lies in the same row, or same column, or the same diagonal of any of the other queens. You have to print all such configurations.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first and the only line of input contains an integer &#39;N&#39; representing the size of the chessboard and the number of queens.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Each line would be representing a single configuration.\n\nEach configuration would contain &#39;N &#39;* &#39;N&#39; elements printed row-wise separated by spaces. The position where we can place the queen will have the value 1 rest will have the value 0.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;N&#39; &lt;= 10\n\nTime Limit: 1sec\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>For a chessboard of size 4*4\nThe configurations are \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/chessboard480-svg-28564.png\" alt=\"alt text\"></p>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0\n0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>Output depicts two possible configurations of the chessboard for 4 queens.\n\nThe Chessboard matrix for the first configuration looks as follows:-\n\n0 0 1 0\n1 0 0 0\n0 0 0 1\n0 1 0 0\n\nQueen contained cell is depicted by 1. As seen, No queen is in the same row, column, or diagonal as the other queens. Hence this is a valid configuration.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"sample-output2\">Sample Output2:</h5>\n\n<pre><code>      (Blank)\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>Since no possible configuration exists for 3 Queen&#39;s.The output remains Empty.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 124,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, representing the size of an N x N chessboard, the task is to find all possible arrangements of N queens on the board such that no two queens threaten each other. A queen is under attack if another queen lies in the same row, column, or diagonal.",
                "constraints": [
                    "1 <= N <= 10",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "4",
                        "output": "0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0\n0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0",
                        "explanation": "For N = 4, two valid configurations are possible.  Each configuration represents the chessboard state where '1' indicates the presence of a queen and '0' indicates an empty cell.  The output presents these configurations row by row, ensuring no two queens share a row, column, or diagonal."
                    },
                    {
                        "input": "3",
                        "output": "",
                        "explanation": "For N = 3, no valid configuration exists where three queens can be placed without threatening each other.  Therefore, the output is empty."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we use Backtracking to generate all possible configurations?</p>",
            "<p>Can you use linear arrays instead to check if the cell is safe or not?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N!)\r\n    Space Complexity : O(N)\r\n    \r\n    Where N is the number of Queens.\r\n*/\r\n\r\nvoid addSolution(int n, vector < vector < int >> & ans, vector < int > & row) {\r\n    vector < int > currentAnswer;\r\n    for (int i = 0; i < n; i++) {\r\n        for (int j = 0; j < n; j++) {\r\n            if (row[j] == i) {\r\n                currentAnswer.push_back(1);\r\n            } else {\r\n                currentAnswer.push_back(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    ans.push_back(currentAnswer);\r\n}\r\n\r\nvoid solve(int col, int n, vector < vector < int >> & ans, vector < int > & row, vector < int > & d1, vector < int > & d2) {\r\n    if (col == n) {\r\n        addSolution(n, ans, row);\r\n        return;\r\n    }\r\n\r\n    for (int i = 0; i < n; i++) {\r\n        if ((row[i] == -1) && (d1[col - i + n - 1] == -1) && (d2[col + i] == -1)) {\r\n            row[i] = d1[col - i + n - 1] = d2[col + i] = col;\r\n            solve(col + 1, n, ans, row, d1, d2);\r\n            row[i] = d1[col - i + n - 1] = d2[col + i] = -1;\r\n        }\r\n    }\r\n\r\n    return;\r\n}\r\n\r\nvector < vector < int >> solveNQueens(int n) {\r\n    vector < vector < int >> ans;\r\n    vector < int > row(30, -1), d1(30, -1), d2(30, -1);\r\n    solve(0, n, ans, row, d1, d2);\r\n    return ans;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity : O(N!)\r\n    Space Complexity : O(N)\r\n    \r\n    Where N is the number of queens.\r\n'''\r\n\r\ndef addSolution(n, ans, row):\r\n    currentAnswer = []\r\n    for i in range(n):\r\n        for j in range(n):\r\n            if row[j] == i:\r\n                currentAnswer.append(1)\r\n            else:\r\n                currentAnswer.append(0)\r\n    ans.append(currentAnswer)\r\n\r\ndef solve(col, n, ans, row, d1, d2):\r\n    if col == n:\r\n        addSolution(n, ans, row)\r\n        return\r\n    for i in range(n):\r\n        if ((row[i] == -1) and (d1[col - i + n - 1] == -1) and (d2[col + i] == -1)):\r\n            row[i] = d1[col - i + n - 1] = d2[col + i] = col\r\n            solve(col + 1, n, ans, row, d1, d2)\r\n            row[i] = d1[col - i + n - 1] = d2[col + i] = -1\r\n    return\r\n\r\ndef solveNQueens(n):\r\n    ans = []\r\n    row = [-1] * 30\r\n    d1 = [-1] * 30\r\n    d2 = [-1] * 30\r\n    solve(0, n, ans, row, d1, d2)\r\n    return ans\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N!)\r\n    Space Complexity : O(N)\r\n\r\n    Where N is the number of Queens.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n\r\n    static private void addSolution(int n, ArrayList < ArrayList < Integer >> ans, int[] col) {\r\n        ArrayList < Integer > currentAnswer = new ArrayList < > ();\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < n; j++) {\r\n                if (col[j] == i) {\r\n                    currentAnswer.add(1);\r\n                } else {\r\n                    currentAnswer.add(0);\r\n                }\r\n            }\r\n        }\r\n\r\n        ans.add(currentAnswer);\r\n    }\r\n\r\n    static private void solveNQueensHelper(int row, int n, ArrayList < ArrayList < Integer >> ans, int[] col, int[] d1, int[] d2) {\r\n        if (row == n) {\r\n            addSolution(n, ans, col);\r\n            return;\r\n        }\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            if ((col[i] == -1) && (d1[row - i + n - 1] == -1) && (d2[row + i] == -1)) {\r\n\r\n                col[i] = d1[row - i + n - 1] = d2[row + i] = row;\r\n                solveNQueensHelper(row + 1, n, ans, col, d1, d2);\r\n                col[i] = d1[row - i + n - 1] = d2[row + i] = -1;\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public static ArrayList < ArrayList < Integer >> solveNQueens(int n) {\r\n\r\n        int[] col = new int[31];\r\n        int[] d1 = new int[31];\r\n        int[] d2 = new int[31];\r\n\r\n        for (int i = 0; i <= 30; i++) {\r\n            col[i] = -1;\r\n            d1[i] = -1;\r\n            d2[i] = -1;\r\n        }\r\n\r\n        ArrayList < ArrayList < Integer >> ans = new ArrayList < > ();\r\n        solveNQueensHelper(0, n, ans, col, d1, d2);\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}