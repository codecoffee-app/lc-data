{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10133,
            "title": "N Queue Using Array",
            "titleSlug": "n-queue-using-array_1170053",
            "content": "<h4 id=\"you-will-be-given-n-queries-you-need-to-implement-n-queues-using-an-array-according-to-those-queries-each-query-will-belong-to-one-of-these-two-types\">You will be given \u2018N\u2019 queries. You need to implement \u2018N\u2019 queues using an array according to those queries. Each query will belong to one of these two types:</h4>\n\n<pre><code>1 \u2018X\u2019 N: Enqueue element \u2018X\u2019  into the end of the nth queue. Returns true if the element is enqueued, otherwise false.\n\n2 N: Dequeue the element at the front of the nth queue. Returns -1 if the queue is empty, otherwise, returns the dequeued element.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Please note that Enqueue means adding an element to the end of the queue, while Dequeue means removing the element from the front of the queue.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains three space-separated integers \u2018N\u2019, \u2018S\u2019 and \u2018Q\u2019 denoting the number of queues, the size of the array and number of queries, respectively. \n\nThe next \u2018Q\u2019 lines specify the type of operation/query to be performed on the data structure.\n\nEach query contains an integer \u2018P\u2019 denoting the type of query.\n\nFor query of type 1, the integer \u2018P\u2019 is equal to 1 and it is followed by two space-separated integers \u2018X\u2019 and \u2018M\u2019 denoting the element and queue on which operation is to be performed, respectively.\n\nFor query of type 2, the integer \u2018P\u2019 is equal to 2 and it is followed by a single integer \u2018M\u2019 denoting the queue on which operation is to be performed.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each query, return the output returned after performing the corresponding operation on the data structure. \n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything, It has already been taken care of. You Just have to complete the given functions.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= S &lt;= 1000\n1 &lt;= Q &lt;= 10^5 \n1 &lt;= P &lt;= 2\n1 &lt;= X &lt;= 10^5\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2 5 5\n1 2 1 \n1 3 2 \n1 4 1\n2 2\n2 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True \nTrue\nTrue\n3\n2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h5>\n\n<pre><code>For this input, we have the number of queues, &#39;N&#39; = 2, size of the array, &#39;S&#39; = 5, and number of queries, &#39;Q&#39; = 5.\n\nOperations performed on the queue are as follows:\n\npush(2, 1): Push element \u20182\u2019 into the 1st queue. This returns true.\npush(3, 2): Push element \u20183\u2019 into the 2nd queue. This returns true.\npush(4, 1): Push element \u20184\u2019 into the 1st queue. This returns true.\npop(2): Pop the top element from the 2nd queue. This returns 3.\npop(1): Pop the top element from the 1st queue. This returns 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3 10 7\n1 11 1\n1 51 2\n1 26 3 \n1 16 2\n1 5 3\n2 2 \n2 3    \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>True \nTrue\nTrue\nTrue\nTrue\n51\n26\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h5>\n\n<pre><code>For this input, we have the number of queues, &#39;N&#39; = 3, size of the array, &#39;S&#39; = 10, and number of queries, &#39;Q&#39; = 7.\n\nOperations performed on the queue are as follows:\n\npush(11, 1): Push element \u201811\u2019 into the 1st queue. This returns true.\npush(51, 2): Push element \u201851\u2019 into the 2nd queue. This returns true.\npush(26, 3): Push element \u201826\u2019 into the 3rd queue. This returns true.\npush(16, 2): Push element \u201816\u2019 into the 2nd queue. This returns true.\npush(5, 3): Push element \u20185\u2019 into the 3rd queue. This returns true.\npop(2): Pop the top element from the 2nd queue. This returns 51.\npop(3): Pop the top element from the 1st queue. This returns 26.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 30,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement N queues using a single array to process a series of Q queries. Each query will be one of two types:\n\n1. **Enqueue (1 X N):** Add element X to the end of the Nth queue. Return `true` if the enqueue operation is successful, otherwise `false` if the array is full.\n\n2. **Dequeue (2 N):** Remove and return the element at the front of the Nth queue. If the queue is empty, return -1.",
                "constraints": [
                    "1 <= N <= S <= 1000",
                    "1 <= Q <= 10^5",
                    "1 <= P <= 2",
                    "1 <= X <= 10^5",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2 5 5\n1 2 1\n1 3 2\n1 4 1\n2 2\n2 1",
                        "output": "True\nTrue\nTrue\n3\n2",
                        "explanation": "We have 2 queues with an array of size 5.  \n\n- `push(2, 1)`: Push 2 into the first queue. Returns `True`.\n- `push(3, 2)`: Push 3 into the second queue. Returns `True`.\n- `push(4, 1)`: Push 4 into the first queue. Returns `True`.\n- `pop(2)`: Pop from the second queue. Returns 3.\n- `pop(1)`: Pop from the first queue. Returns 2."
                    },
                    {
                        "input": "3 10 7\n1 11 1\n1 51 2\n1 26 3\n1 16 2\n1 5 3\n2 2\n2 3",
                        "output": "True\nTrue\nTrue\nTrue\nTrue\n51\n26",
                        "explanation": "We have 3 queues with an array of size 10.\n\n- `push(11, 1)`: Push 11 into the first queue. Returns `True`.\n- `push(51, 2)`: Push 51 into the second queue. Returns `True`.\n- `push(26, 3)`: Push 26 into the third queue. Returns `True`.\n- `push(16, 2)`: Push 16 into the second queue. Returns `True`.\n- `push(5, 3)`: Push 5 into the third queue. Returns `True`.\n- `pop(2)`: Pop from the second queue. Returns 51.\n- `pop(3)`: Pop from the third queue. Returns 26."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of using some more arrays?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}