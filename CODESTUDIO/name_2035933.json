{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14166,
            "title": "name",
            "titleSlug": "name_2035933",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-n-nodes-where-the-nodes-have-integer-values-your-task-is-to-return-its-postorder-traversal\">You have been given a Binary Tree of <em><strong>&#39;n&#39;</strong></em> nodes, where the nodes have integer values. Your task is to return its postorder traversal.</h4>\n\n<p><br></p>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>For the given tree below,\nPostorder traversal for the given tree will be [4, 5, 2, 3, 1]. Hence, the answer is [4, 5, 2, 3, 1].\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-23-29779.jpg\" alt=\"Example\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains the elements of the tree in the level order form separated by a single space. If any node does not have a left or right child, take -1 in its place. Refer to the example for further clarification.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. \n\nThe second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The output contains single line of &#39;n&#39; space-separated integers denoting the post-order traversal of the given binary tree.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1 2 3 4 -1 -1 5 6 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>6 7 4 2 5 3 1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>The given tree is:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000475_1626942636_treePostorder.png\" alt=\"binaryTree\"></p>\n\n<pre><code>Postorder traversal for the given tree will be [6, 7, 4, 2, 5, 3, 1]. Hence, the answer is [6, 7, 4, 2, 5, 3, 1].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>10 20 11 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>20 11 10\n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity:</h5>\n\n<pre><code>The expected time complexity is O(n).\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10^5\n0 &lt;= &#39;data&#39; &lt;= 10^5     \n\nwhere &#39;n&#39; is the number of nodes and &#39;data&#39; denotes the node value of the binary tree nodes.\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 49,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree represented by its root node, `root`, implement a function to return its postorder traversal as a list of integers.",
                "constraints": [
                    "1 <= 'n' <= 10^5 where 'n' is the number of nodes in the binary tree",
                    "0 <= 'data' <= 10^5 where 'data' denotes the node value of the binary tree nodes.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "root = TreeNode(1, TreeNode(2, TreeNode(4, TreeNode(6), TreeNode(7)), NULL), TreeNode(3, TreeNode(5), NULL))",
                        "output": "[6, 7, 4, 2, 5, 3, 1]",
                        "explanation": "The binary tree structure is as depicted in Sample Input 1. The postorder traversal is [6, 7, 4, 2, 5, 3, 1]."
                    },
                    {
                        "input": "root = TreeNode(10, TreeNode(20), TreeNode(11))",
                        "output": "[20, 11, 10]",
                        "explanation": "The binary tree structure is as depicted in Sample Input 2. The postorder traversal is [20, 11, 10]."
                    },
                    {
                        "input": "root = TreeNode(1)",
                        "output": "[1]",
                        "explanation": "A single node tree has a postorder traversal containing only that node's value."
                    },
                    {
                        "input": "root = TreeNode(1, TreeNode(2), NULL)",
                        "output": "[2, 1]",
                        "explanation": "A tree with a single left child has postorder traversal of [left_child, root]."
                    },
                    {
                        "input": "root = NULL",
                        "output": "[]",
                        "explanation": "An empty tree has an empty postorder traversal."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use a recursive approach.</p>",
            "<p>Can you use any iterative method?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}