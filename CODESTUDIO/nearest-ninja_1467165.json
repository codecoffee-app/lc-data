{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12624,
            "title": "NEAREST NINJA",
            "titleSlug": "nearest-ninja_1467165",
            "content": "<h4 id=\"ninja-and-his-team-of-n-warriors-started-a-virtual-way-of-helping-each-other-due-to-lockdown-for-this-ninja-has-arranged-all-the-warriors-linearly-in-the-form-of-an-array-list-warrior_arr-where-the-index-number-represents-the-warriors-0-based-indexing-and-the-array-value-represents-their-responding-time\">Ninja and his team of &#39;N&#39; warriors started a virtual way of helping each other due to lockdown. For this Ninja has arranged all the warriors linearly in the form of an array/list \u2018WARRIOR_ARR\u2019 where the index number represents the warriors (0-based indexing) and the array value represents their responding time.</h4>\n\n<h4 id=\"to-help-warrior-x-in-need-ninja-decides-to-assign-a-warrior-y-as-the-helper-of-warrior-x-if-y-has-a-smaller-responding-time-than-the-warrior-x-and-he-is-in-the-closest-position-on-the-left-side-of-the-x-in-the-warrior_arr-if-no-such-helper-y-exists-or-if-the-responding-time-of-all-warriors-is-equal-ninja-will-help-x-himself-and-assign-x-1\">To help warrior &#39;X&#39; in need, Ninja decides to assign a warrior &#39;Y&#39; as the helper of warrior &#39;X&#39;, if &#39;Y&#39; has a smaller responding time than the warrior &#39;X&#39; and he is in the closest position on the left side of the &#39;X&#39; in the \u2018WARRIOR_ARR\u2019. If no such helper &#39;Y&#39; exists (or if the responding time of all warriors is equal), Ninja will help &#39;X&#39; himself and assign &#39;X&#39; &quot;-1&quot;.</h4>\n\n<h4 id=\"as-ninja-needs-to-be-pre-prepared-to-assist-warriors-he-asks-you-for-help-your-task-is-to-help-ninja-determine-the-helper-y-for-each-warrior-x-in-the-warriorarr-formally-return-an-array-list-answer-where-answer-i-represents-the-warrior-that-ninja-chooses-as-helper-of-warrior-at-position-i-in-warriorarr\">As Ninja needs to be pre-prepared to assist warriors, he asks you for help. Your task is to help Ninja determine the helper &#39;Y&#39; for each warrior &#39;X&#39; in the &#39;WARRIOR&#95;ARR&#39;. Formally, return an array/list &#39;ANSWER&#39; where &#39;ANSWER[i]&#39; represents the warrior that Ninja chooses as helper of warrior at position &#39;i&#39; in &#39;WARRIOR&#95;ARR&#39;.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Suppose given \u2018WARRIOR_ARR\u2019 is [ 4, 5, 3, 7, 4 ]\nSo we return [ -1, 0, -1, 2, 2 ]  as \u2018ANSWER\u2019.\n\nFor the first warrior (index 0), there is no warrior with a smaller responding time on his left. So, &#39;ANSWER[0]&#39; = -1.\n\nFor the second warrior (index 1), the warrior with a smaller responding time (4) and at the nearest position on the left side is at index \u20180\u2019. So, &#39;ANSWER[1]&#39; = 0.\n\nFor the third warrior (index 2), there is no warrior with a smaller responding time on his left. So, &#39;ANSWER[2]&#39;  = -1.\n\nFor the fourth warrior (index 3), the warrior with a smaller responding time (3) and at the nearest position on the left side is at index &#39;2&#39;. So, &#39;ANSWER[3]&#39; is 2.\n\nFor the fifth warrior (index 4), the warrior with a smaller responding time (3) and at the nearest position on the left side is at index &#39;2&#39;. So, &#39;ANSWER[4]&#39; is 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a \u2018T\u2019 number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 i.e size of the array/list \u2018WARRIOR_ARR\u2019.\n\nThe second line of each test case contains an array \u2018WARRIOR_ARR\u2019, where \u2018WARRIOR_ARR[i]\u2019 denotes the responding time of \u2018i-th\u2019 warrior.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the \u2018ANSWER\u2019 array/list.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 100\n1 &lt;= \u2018N\u2019 &lt;= 10 ^ 3\n1 &lt;= \u2018WARRIOR_ARR[i]\u2019 &lt;= 10 ^ 6\n\nTime Limit: 1 second  \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n7\n2 6 7 4 5 6 3\n5\n3 6 7 8 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>-1 0 1 0 3 4 0\n-1 0 1 2 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>Test Case 1 :\nGiven \u2018WARRIOR_ARR\u2019 is [ 2, 6, 7, 4, 5, 6, 3 ].\nSo we return [ -1, 0, 1, 0, 3, 4, 0 ]  as \u2018ANSWER\u2019.\n\nFor the first warrior (index 0), there is no warrior with a smaller responding time on his left. So, &#39;ANSWER[0]&#39; = -1. \n\nFor the second warrior (index 1), the warrior with a smaller responding time (2) and at the nearest position on the left side is at index \u20180\u2019. So, &#39;ANSWER[1]&#39; = 0.\n\nFor the third warrior (index 2), the warrior with a smaller responding time (6) and at the nearest position on the left side is at index \u20181\u2019. So, &#39;ANSWER[2]&#39; = 1.\n\nFor the fourth warrior (index 3), the warrior with a smaller responding time (2) and at the nearest position on the left side is at index \u20180\u2019. So, &#39;ANSWER[3]&#39; = 0.\n\nFor the fifth warrior (index 4), the warrior with a smaller responding time (4) and at the nearest position on the left side is at index \u20183\u2019. So, &#39;ANSWER[4]&#39; = 3.\n\nFor the sixth warrior (index 5), the warrior with a smaller responding time (5) and at the nearest position on the left side is at index \u20184\u2019. So, &#39;ANSWER[5]&#39; = 4.\n\nFor the seventh warrior (index 6), the warrior with a smaller responding time (2) and at the nearest position on the left side is at index \u20180\u2019. So, &#39;ANSWER[6]&#39; = 0.\n\n\nTest Case 2 :\nGiven \u2018WARRIOR_ARR\u2019 is [ 3, 6, 7, 8, 3 ].\nSo we return [ -1, 0, 1, 2, -1 ]  as \u2018ANSWER\u2019.\n\nFor the first warrior (index 0), there is no warrior with a smaller responding time on his left. So, &#39;ANSWER[0]&#39; = -1. \n\nFor the second warrior (index 1), the warrior with a smaller responding time (3) and at the nearest position on the left side is at index \u20180\u2019. So, &#39;ANSWER[1]&#39; = 0.\n\nFor the third warrior (index 2), the warrior with a smaller responding time (6) and at the nearest position on the left side is at index \u20181\u2019. So, &#39;ANSWER[2]&#39; = 1.\n\nFor the fourth warrior (index 3), the warrior with a smaller responding time (7) and at the nearest position on the left side is at index \u20182\u2019. So, &#39;ANSWER[3]&#39; = 0.\n\nFor the fifth warrior (index 4), there is no warrior with a smaller responding time on his left. So, &#39;ANSWER[4]&#39; = -1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n7\n2 5 1 4 8 3 2\n5\n5 4 3 2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>-1 0 -1 2 3 2 2\n-1 -1 -1 -1 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of warriors' responding times, determine the nearest warrior to the left with a smaller responding time for each warrior. If no such warrior exists, Ninja will help, indicated by -1. Return an array where each element represents the helper warrior's index for the corresponding warrior in the input array.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^3",
                    "1 <= WARRIOR_ARR[i] <= 10^6",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "7\n2 6 7 4 5 6 3",
                        "output": "-1 0 1 0 3 4 0",
                        "explanation": "For the array [2, 6, 7, 4, 5, 6, 3]:\n- Index 0 (2): No smaller value to the left. Result: -1\n- Index 1 (6): Nearest smaller value to the left is 2 at index 0. Result: 0\n- Index 2 (7): Nearest smaller value to the left is 6 at index 1. Result: 1\n- Index 3 (4): Nearest smaller value to the left is 2 at index 0. Result: 0\n- Index 4 (5): Nearest smaller value to the left is 4 at index 3. Result: 3\n- Index 5 (6): Nearest smaller value to the left is 5 at index 4. Result: 4\n- Index 6 (3): Nearest smaller value to the left is 2 at index 0. Result: 0"
                    },
                    {
                        "input": "5\n3 6 7 8 3",
                        "output": "-1 0 1 2 -1",
                        "explanation": "For the array [3, 6, 7, 8, 3]:\n- Index 0 (3): No smaller value to the left. Result: -1\n- Index 1 (6): Nearest smaller value to the left is 3 at index 0. Result: 0\n- Index 2 (7): Nearest smaller value to the left is 6 at index 1. Result: 1\n- Index 3 (8): Nearest smaller value to the left is 7 at index 2. Result: 2\n- Index 4 (3): No smaller value to the left. Result: -1"
                    },
                    {
                        "input": "7\n2 5 1 4 8 3 2",
                        "output": "-1 0 -1 2 3 2 2",
                        "explanation": "For the array [2, 5, 1, 4, 8, 3, 2]:\n- Index 0 (2): No smaller value to the left. Result: -1\n- Index 1 (5): Nearest smaller value to the left is 2 at index 0. Result: 0\n- Index 2 (1): No smaller value to the left. Result: -1\n- Index 3 (4): Nearest smaller value to the left is 1 at index 2. Result: 2\n- Index 4 (8): Nearest smaller value to the left is 4 at index 3. Result: 3\n- Index 5 (3): Nearest smaller value to the left is 1 at index 2. Result: 2\n- Index 6 (2): Nearest smaller value to the left is 1 at index 2. Result: 2"
                    },
                    {
                        "input": "5\n5 4 3 2 1",
                        "output": "-1 -1 -1 -1 -1",
                        "explanation": "For the array [5, 4, 3, 2, 1]:\n- Index 0 (5): No smaller value to the left. Result: -1\n- Index 1 (4): No smaller value to the left. Result: -1\n- Index 2 (3): No smaller value to the left. Result: -1\n- Index 3 (2): No smaller value to the left. Result: -1\n- Index 4 (1): No smaller value to the left. Result: -1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of traversing the left side of each element?</p>",
            "<p>Can you find the smallest element without going to the left side?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}