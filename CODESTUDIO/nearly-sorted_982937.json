{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9339,
            "title": "Nearly Sorted",
            "titleSlug": "nearly-sorted_982937",
            "content": "<h4 id=\"you-re-given-an-array-list-arr-of-n-elements-where-each-element-is-at-most-k-away-from-its-target-position-position-if-the-array-was-sorted-now-your-task-is-to-devise-an-algorithm-that-sorts-the-given-array-in-o-n-log-k-time\">You\u2019re given an array/list &#39;ARR&#39; of N elements, where each element is at most K away from its target position(Position if the array was sorted). Now, your task is to devise an algorithm that sorts the given array in O(N log K) time.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Let us consider &#39;K&#39; is 3, an element at index 4 in the sorted array, can be at indexes 1, 2, 3, 4, 5, 6, 7 in the given array, because the absolute difference of all these indices with 4 is at most 3.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer T denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers N and K, the number of elements in the array and K as specified in the problem statement.\n\nThe second line of each test contains N space-separated integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output of each test case should contain N space-separated integers denoting the sorted array.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= K &lt; N &lt;= 5000\n1 &lt;= ARR[i] &lt;= 10^9 \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n7 3 \n6 5 3 2 8 10 9\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 3 5 6 8 9 10\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>We could move 6 from position 1 to as far as position 4 (as K=4) and we moved it to position 4 and it can be seen that after that all elements to the left(i.e position 1 to 3) are less than 6, hence 10 is at its best position now. Similarly, we do this for all the elements, to reach our answer. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n8 4\n10 9 8 7 4 70 60 50\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4 7 8 9 10 50 60 70\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>We could move 10 from position 1 to as far as position 5(as K=4) and we moved it to position 5 and it can be seen that after that all elements to the left(i.e position 1 to 4) are less than 10, hence 10 is at its best position now. Similarly we do this for all the elements, to reach our answer. \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 11,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of 'N' elements where each element is at most 'K' positions away from its sorted position, sort the array in O(N log K) time complexity. The goal is to implement an algorithm that efficiently sorts this nearly sorted array.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= K < N <= 5000",
                    "1 <= ARR[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 7, array = [6, 5, 3, 2, 8, 10, 9], k = 3",
                        "output": "2 3 5 6 8 9 10",
                        "explanation": "The array is sorted such that each element is at most 3 positions away from its sorted position. For instance, '6' moves from its original position to its correct sorted position."
                    },
                    {
                        "input": "n = 8, array = [10, 9, 8, 7, 4, 70, 60, 50], k = 4",
                        "output": "4 7 8 9 10 50 60 70",
                        "explanation": "The array is sorted such that each element is at most 4 positions away from its sorted position. Elements like '10' and '4' are moved to their appropriate sorted positions."
                    },
                    {
                        "input": "n = 5, array = [1, 2, 3, 4, 5], k = 1",
                        "output": "1 2 3 4 5",
                        "explanation": "The array is already sorted, and each element is at most 1 position away from its sorted position (it is at its sorted position). Therefore, the output remains the same."
                    },
                    {
                        "input": "n = 6, array = [3, 2, 1, 5, 6, 4], k = 2",
                        "output": "1 2 3 4 5 6",
                        "explanation": "The array is sorted according to the constraints. K=2, it means each element is shifted no more than 2 places away from its original position in the sorted array."
                    },
                    {
                        "input": "n = 4, array = [4, 3, 2, 1], k = 3",
                        "output": "1 2 3 4",
                        "explanation": "The array is sorted according to the constraint. K = 3, meaning that each element is shifted no more than 3 places away from its original position in sorted state."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a sorting algorithm which can be used here.<strong>&nbsp;</strong></p>",
            "<p>Think of a data structure which can sort arrays more efficiently.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}