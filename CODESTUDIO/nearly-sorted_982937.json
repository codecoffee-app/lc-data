{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9339,
            "title": "Nearly Sorted",
            "titleSlug": "nearly-sorted_982937",
            "content": "<h4 id=\"you-re-given-an-array-list-arr-of-n-elements-where-each-element-is-at-most-k-away-from-its-target-position-position-if-the-array-was-sorted-now-your-task-is-to-devise-an-algorithm-that-sorts-the-given-array-in-o-n-log-k-time\">You\u2019re given an array/list &#39;ARR&#39; of N elements, where each element is at most K away from its target position(Position if the array was sorted). Now, your task is to devise an algorithm that sorts the given array in O(N log K) time.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Let us consider &#39;K&#39; is 3, an element at index 4 in the sorted array, can be at indexes 1, 2, 3, 4, 5, 6, 7 in the given array, because the absolute difference of all these indices with 4 is at most 3.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer T denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers N and K, the number of elements in the array and K as specified in the problem statement.\n\nThe second line of each test contains N space-separated integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output of each test case should contain N space-separated integers denoting the sorted array.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= K &lt; N &lt;= 5000\n1 &lt;= ARR[i] &lt;= 10^9 \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n7 3 \n6 5 3 2 8 10 9\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 3 5 6 8 9 10\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>We could move 6 from position 1 to as far as position 4 (as K=4) and we moved it to position 4 and it can be seen that after that all elements to the left(i.e position 1 to 3) are less than 6, hence 10 is at its best position now. Similarly, we do this for all the elements, to reach our answer. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n8 4\n10 9 8 7 4 70 60 50\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4 7 8 9 10 50 60 70\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>We could move 10 from position 1 to as far as position 5(as K=4) and we moved it to position 5 and it can be seen that after that all elements to the left(i.e position 1 to 4) are less than 10, hence 10 is at its best position now. Similarly we do this for all the elements, to reach our answer. \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 11,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an array 'ARR' of N elements. Each element is at most K positions away from its correct sorted position. Your task is to sort the array efficiently, achieving a time complexity of O(N log K).  This means that if the array were sorted, an element currently at index `i` could be found anywhere between indices `i-K` and `i+K` in the given unsorted array.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= K < N <= 5000",
                    "1 <= ARR[i] <= 10^9",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "7 3\n6 5 3 2 8 10 9",
                        "output": "2 3 5 6 8 9 10",
                        "explanation": "The array [6, 5, 3, 2, 8, 10, 9] is sorted such that each element is at most 3 positions away from its original sorted position. The sorted array is [2, 3, 5, 6, 8, 9, 10]."
                    },
                    {
                        "input": "8 4\n10 9 8 7 4 70 60 50",
                        "output": "4 7 8 9 10 50 60 70",
                        "explanation": "The array [10, 9, 8, 7, 4, 70, 60, 50] is sorted such that each element is at most 4 positions away from its original sorted position. The sorted array is [4, 7, 8, 9, 10, 50, 60, 70]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a sorting algorithm which can be used here.<strong>&nbsp;</strong></p>",
            "<p>Think of a data structure which can sort arrays more efficiently.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}