{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7507,
            "title": "Next Greater Element",
            "titleSlug": "next-greater-element_670312",
            "content": "<h4 id=\"you-are-given-an-array-a-of-size-n\">You are given an array <em><strong>&#39;a&#39;</strong></em> of size <em><strong>&#39;n&#39;</strong></em>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"print-the-next-greater-element-nge-for-every-element\">Print the Next Greater Element(NGE) for every element.</h4>\n\n<p><br/></p>\n\n<h4 id=\"the-next-greater-element-for-an-element-x-is-the-first-element-on-the-right-side-of-x-in-the-array-which-is-greater-than-x\">The Next Greater Element for an element &#39;x&#39; is the first element on the right side of &#39;x&#39; in the array, which is greater than &#39;x&#39;.</h4>\n\n<p><br/></p>\n\n<h4 id=\"if-no-greater-elements-exist-to-the-right-of-x-consider-the-next-greater-element-as-1\">If no greater elements exist to the right of &#39;x&#39;, consider the next greater element as -1.</h4>\n\n<p><br/></p>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Input: &#39;a&#39; = [7, 12, 1, 20]\n\nOutput: NGE = [12, 20, 20, -1]\n\nExplanation: For the given array,\n\n- The next greater element for 7 is 12.\n\n- The next greater element for 12 is 20. \n\n- The next greater element for 1 is 20. \n\n- There is no greater element for 20 on the right side. So we consider NGE as -1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;n&#39; representing the size of the array.\n\nThe second line of input contains &#39;n&#39; single space-separated integers representing the elements of the array.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The only line of output contains &#39;n&#39; single space-separated integers representing the Next Greater Element for each element. \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>5\n1 5 3 4 2\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>5 -1 4 -1 -1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5\n5 5 5 5 5\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1 -1 -1 -1 -1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity :</h5>\n\n<pre><code>The expected time complexity is O(n).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10^5\n1 &lt;= &#39;a[i]&#39; &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 182,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'a' of size 'n', find the Next Greater Element (NGE) for each element in the array. The NGE of an element 'x' is the first element on the right side of 'x' that is greater than 'x'. If no such element exists, the NGE is -1.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= a[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "5\n1 5 3 4 2",
                        "output": "5 -1 4 -1 -1",
                        "explanation": "For the input array [1, 5, 3, 4, 2]:\n- NGE of 1 is 5.\n- NGE of 5 is -1 (no greater element to the right).\n- NGE of 3 is 4.\n- NGE of 4 is -1 (no greater element to the right).\n- NGE of 2 is -1 (no greater element to the right)."
                    },
                    {
                        "input": "5\n5 5 5 5 5",
                        "output": "-1 -1 -1 -1 -1",
                        "explanation": "For the input array [5, 5, 5, 5, 5], no element has a greater element to its right, so the NGE for each element is -1."
                    },
                    {
                        "input": "4\n7 12 1 20",
                        "output": "12 20 20 -1",
                        "explanation": "For the input array [7, 12, 1, 20]:\n- NGE of 7 is 12.\n- NGE of 12 is 20.\n- NGE of 1 is 20.\n- NGE of 20 is -1 (no greater element to the right)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For every element, traverse its right side and try to find a greater element.</p>",
            "<p>Use a Stack data structure to keep track of the Next Greater Element.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    Where 'n' is the number of elements in the array.\n*/\n\n#include <stack>\n\nvector<int> nextGreaterElement(vector<int>& arr, int n)\n{\n    // Create a vetor to store next Greater elements\n    vector<int> ans(n);\n\n    // Stack, to keep track of next greater element\n    stack<int> s;\n\n    // Traverse in reverse fashion in the array\n    for (int i = n - 1; i >= 0; i--)\n    {\n        //If current element is greater than or equal to stack's top\n        //element, we can pop it since now it will never get picked\n        //as the next greater element\n        while (!s.empty() && arr[i] >= s.top())\n        {\n            s.pop();\n        }\n\n        //If stack is not empty, stack's top element is\n        //the next greater element, else there is none\n        if (!s.empty())\n        {\n            ans[i] = s.top();\n        }\n        else\n        {\n            ans[i] = -1;\n        }\n\n        // Push current element onto stack\n        s.push(arr[i]);\n    }\n\n    // return final answer vector\n    return ans;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity - O(N)\r\n    Space Complexity - O(N)\r\n\r\n    where N is the number of elements in the array\r\n*/\r\n\r\nimport java.util.Stack;\r\npublic class Solution \r\n{\r\n    public static int[] nextGreaterElement(int[] arr, int n) \r\n    {\r\n        // Create a vetor to store next Greater elements\r\n        int[] ans = new int[n];\r\n\r\n        // Stack, to keep track of next greater element\r\n        Stack<Integer> s = new Stack<Integer>();\r\n\r\n        // Traverse in reverse fashion in the array\r\n        for(int i = n - 1; i >= 0; i--)\r\n        {\r\n            // If current element is greater than or equal to stack's top \r\n            // element, we can pop it since now it will never get picked\r\n            // as the next greater element\r\n            while(!s.empty() && arr[i] >= s.peek())\r\n            {\r\n                 s.pop();\r\n            }\r\n\r\n            // If stack is not empty, stack's top element is \r\n            // the next greater element, else there is none\r\n            if(!s.empty())\r\n            {\r\n                ans[i] = s.peek();\r\n            }\r\n            else\r\n            {\r\n                ans[i] = -1;\r\n            }\r\n\r\n            // Push current element onto stack\r\n            s.push(arr[i]);\r\n        }\r\n\r\n        // return final answer vector\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    Where 'n' is the number of elements in the array.\n'''\n\nfrom typing import List\nfrom collections import deque\n\ndef nextGreaterElement(arr: List[int], n: int) -> List[int]:\n\n    # Create a list to store next Greater elements.\n    ans = [0] * n\n\n    # Stack, to keep track of next greater element.\n    stack = deque()\n\n    # Traverse in reverse fashion in the array.\n    for i in range(n - 1, -1, -1):\n        # If current element is greater than or equal to stack's top\n        # element, we can pop it since now it will never get picked\n        # as the next greater element.\n        while stack and arr[i] >= stack[-1]:\n            stack.pop()\n\n        # If stack is not empty, stack's top element is\n        # the next greater element, else there is none.\n        if stack:\n            ans[i] = stack[-1]\n        else:\n            ans[i] = -1\n\n        # Push current element onto stack.\n        stack.append(arr[i])\n\n    # Return final answer list.\n    return ans\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}