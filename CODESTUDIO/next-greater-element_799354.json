{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7987,
            "title": "Next Greater Element",
            "titleSlug": "next-greater-element_799354",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-length-n-you-have-to-return-a-list-of-integers-containing-the-nge-next-greater-element-of-each-element-of-the-given-array-the-nge-for-an-element-x-is-the-first-greater-element-on-the-right-side-of-x-in-the-array-elements-for-which-no-greater-element-exists-consider-the-nge-as-1\">You are given an array arr of length N. You have to return a list of integers containing the NGE(next greater element) of each element of the given array. The NGE for an element X is the first greater element on the right side of X in the array. Elements for which no greater element exists, consider the NGE as -1.</h4>\n\n<h4 id=\"for-example\">For Example :</h4>\n\n<pre><code>If the given array is [1, 3, 2], then you need to return [3, -1, -1]. Because for 1, 3 is the next greater element, for 3 it does not have any greater number to its right, and similarly for 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \n\nThen the T test cases follow.\n\nThe first line of each test case contains an integer N, representing the length of the input array(ARR).\n\nThe second line contains N single space-separated integers representing elements of the array arr.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a list of integers each representing the NGE(next greater element) of each element of the given array in a single line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n0 &lt;= ARR[i] &lt;= 10^9\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n4\n1 2 4 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2 4 -1 -1\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n4\n9 3 6 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>-1 6 -1 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2 :</h5>\n\n<pre><code>For element 9, there is no next greater element. So -1 would be the next greater element.\nFor element 3, 6 is the next greater element. \nFor element 6, there is no next greater element. So -1 would be the next greater element.\nFor element 5, there is no next greater element. So -1 would be the next greater element.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 152,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the next greater element (NGE) for each element in the array. The NGE for an element X is the first element to the right of X that is greater than X. If no greater element exists to the right, the NGE is -1.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 10^5 (Length of the array)",
                    "0 <= ARR[i] <= 10^9 (Value of each element in the array)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "4\n1 2 4 3",
                        "output": "2 4 -1 -1",
                        "explanation": "For the input array [1, 2, 4, 3]:\n- The next greater element for 1 is 2.\n- The next greater element for 2 is 4.\n- There is no next greater element for 4, so it's -1.\n- There is no next greater element for 3, so it's -1."
                    },
                    {
                        "input": "4\n9 3 6 5",
                        "output": "-1 6 -1 -1",
                        "explanation": "For the input array [9, 3, 6, 5]:\n- There is no next greater element for 9, so it's -1.\n- The next greater element for 3 is 6.\n- There is no next greater element for 6, so it's -1.\n- There is no next greater element for 5, so it's -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find out the next greater number of each element of the array.</p>",
            "<p>Think of using a stack, and traverse the array from backwards.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space Complexity : O(N)\r\n    \r\n    Where N is the length of the array.\r\n*/\r\n\r\n#include<stack>\r\n\r\nvector<int> nextGreater(vector<int> &arr, int n) {\r\n    vector<int> ans(n);\r\n\r\n    stack<int> s;\r\n\r\n    for (int i = n - 1; i >= 0; i--) {\r\n        \r\n        // We will pop the elements from the stack till we get the greater element \r\n        // Or stack become empty\r\n        while (!s.empty() && s.top() <= arr[i]) {\r\n            s.pop();\r\n        }\r\n\r\n        if (s.empty()) {\r\n            ans[i] = -1;\r\n        } \r\n        else {\r\n            ans[i] = s.top();\r\n        }\r\n\r\n        s.push(arr[i]);\r\n    }\r\n\r\n    return ans;\r\n\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "''''\r\n    Time Complexity : O(N)\r\n    Space Complexity : O(N)\r\n    \r\n    Where N is the length of the array.\r\n'''\r\n\r\n\r\nfrom sys import stdin\r\n\r\ndef nextGreater(arr,n):\r\n    \r\n    ans = [0] * n\r\n    \r\n    s = []\r\n    \r\n    for i in range(n-1,-1,-1):\r\n        \r\n        # We will pop the elements from the stack till we get the greater element \r\n        # Or stack become empty\r\n        while(len(s)>0 and s[len(s)-1] <= arr[i]):\r\n            s.pop()\r\n            \r\n        if len(s) == 0:\r\n            ans[i] = -1\r\n            \r\n        else:\r\n            ans[i] = s[len(s)-1]\r\n            \r\n        s.append(arr[i])\r\n        \r\n        \r\n    return ans \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\r\n\r\n\r\n#Main\r\n\r\nt = int(stdin.readline().rstrip())\r\n\r\nwhile t>0:\r\n    \r\n    n=int(stdin.readline().rstrip())\r\n    arr = list(map(int, stdin.readline().rstrip().split(\" \")))\r\n    z = nextGreater(arr,n)\r\n    print(*z)    \r\n    t -= 1\r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space Complexity : O(N)\r\n    \r\n    Where N is the length of the array.\r\n*/\r\n\r\nimport java.util.Stack;\r\n\r\npublic class Solution {\r\n\r\n    public static int[] nextGreater(int[] arr, int n) { \r\n\r\n        int[] ans = new int[n];\r\n\r\n        Stack<Integer> s = new Stack<>();\r\n\r\n        for (int i = n - 1; i >= 0; i--) {\r\n            \r\n            // We will pop the elements from the stack till we get the greater element \r\n            // Or stack become empty\r\n            while (!s.isEmpty() && s.peek() <= arr[i]) {\r\n                s.pop();\r\n            }\r\n\r\n            if (s.isEmpty()) {\r\n                ans[i] = -1;\r\n            } \r\n            else {\r\n                ans[i] = s.peek();\r\n            }\r\n\r\n            s.push(arr[i]);\r\n        }\r\n\r\n        return ans;\r\n    }\r\n\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}