{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8894,
            "title": "Next Higher Node",
            "titleSlug": "next-higher-node_920494",
            "content": "<h4 id=\"you-are-given-a-singly-linked-list-of-distinct-integers-in-addition-to-the-next-pointer-every-node-of-the-linked-list-has-a-nexthigher-pointer-that-currently-points-to-null-the-task-is-to-make-the-nexthigher-pointer-of-every-node-point-to-the-next-higher-value-node-in-the-linked-list\">You are given a Singly Linked List of distinct integers. In addition to the \u2018next\u2019 pointer, every node of the linked list has a \u2018nextHigher\u2019 pointer that currently points to NULL. The task is to make the \u2018nextHigher\u2019 pointer of every node point to the next higher value node in the linked list.</h4>\n\n<h4 id=\"a-singly-linked-list-is-a-type-of-linked-list-that-is-unidirectional-that-is-it-can-be-traversed-in-only-one-direction-from-head-to-the-last-node-tail\">A singly linked list is a type of linked list that is unidirectional; that is, it can be traversed in only one direction from head to the last node (tail).</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>For a node, if there is no higher value node in the linked list, it\u2019s \u2018nextHigher\u2019 pointer should point to NULL. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39;, the number of test cases to run.\n\nThe first and the only line of every test case contains the elements of the singly linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, print the elements of the modified linked list in ascending order. The elements should be single-space separated, terminated by -1.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You do not need to print anything, It already has been taken care of. Just implement the function and return the pointer to the minimum node in the modified linked list.\n\nThe linked list will be traversed using the \u2018nextHigher\u2019 pointer to produce the output. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10    \n1 &lt;= N &lt;= 10^4\n-10^3 &lt;= data &lt;= 10^3 and data != -1\n\nWhere \u2018data\u2019 denotes the value of the nodes in the linked list. \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1 \n6 10 7 8 5 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>5 6 7 8 10 -1 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>The \u2018nextHigher\u2019 pointer of every node should point to the next higher value in the linked list. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/nexthigher-6328.png\" alt=\"example\"></p>\n\n<pre><code>The linked list printed after the above process is 5 6 7 8 10 -1. Note that list is printed starting from the minimum valued node using \u2018nextHigher\u2019 pointer. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n5 10 -6 4 7 -1\n10 20 30 40 50 -1\n-10 -20 -30 -40 -50 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-6 4 6 7 10 -1\n10 20 30 40 50 -1\n-50 -40 -30 -20 -10 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list of distinct integers where each node has a 'next' pointer and a 'nextHigher' pointer (initially NULL), modify the list such that each node's 'nextHigher' pointer points to the node with the next higher value in the linked list. If no higher value node exists, the 'nextHigher' pointer should remain NULL. The goal is to restructure the linked list such that traversing via the 'nextHigher' pointers results in an ascending order of node values.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 10^4 (Number of nodes in the linked list)",
                    "-10^3 <= data <= 10^3 and data != -1 (Value of the nodes in the linked list)"
                ],
                "testcases": [
                    {
                        "input": "6 10 7 8 5 -1",
                        "output": "5 6 7 8 10 -1",
                        "explanation": "The 'nextHigher' pointers are updated so that the list, when traversed using 'nextHigher', is sorted in ascending order. The minimum value node (5) becomes the head of this sorted traversal."
                    },
                    {
                        "input": "5 10 -6 4 7 -1",
                        "output": "-6 4 5 7 10 -1",
                        "explanation": "The list is re-arranged through 'nextHigher' pointers such that starting from the smallest element (-6), each node points to the next largest, forming the sequence -6, 4, 5, 7, 10, terminated by -1 when the 'nextHigher' pointer reaches NULL."
                    },
                    {
                        "input": "10 20 30 40 50 -1",
                        "output": "10 20 30 40 50 -1",
                        "explanation": "The original list was already sorted, so the 'nextHigher' pointers are simply set to point to the next node in the sequence, resulting in the same sorted list 10, 20, 30, 40, 50 terminated by -1."
                    },
                    {
                        "input": "-10 -20 -30 -40 -50 -1",
                        "output": "-50 -40 -30 -20 -10 -1",
                        "explanation": "The list is re-arranged in ascending order. The smallest element, -50, becomes the starting point. Each element points to the next largest one in the modified list, creating the sorted sequence -50, -40, -30, -20, -10 terminated by -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For every node, find the next greater valued node in the linked list.&nbsp;</p>",
            "<p>Think about sorting the linked list without changing the \u2018NEXT\u2019 pointer.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}