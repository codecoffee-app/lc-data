{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8556,
            "title": "Next Permutaion",
            "titleSlug": "next-permutaion_893046",
            "content": "<h4 id=\"you-have-been-given-a-permutation-of-n-integers-a-sequence-of-n-integers-is-called-a-permutation-if-it-contains-all-integers-from-1-to-n-exactly-once-your-task-is-to-rearrange-the-numbers-and-generate-the-lexicographically-next-greater-permutation\">You have been given a permutation of \u2018N\u2019 integers. A sequence of \u2018N\u2019 integers is called a permutation if it contains all integers from 1 to \u2018N\u2019 exactly once. Your task is to rearrange the numbers and generate the lexicographically next greater permutation.</h4>\n\n<h4 id=\"to-determine-which-of-the-two-permutations-is-lexicographically-smaller-we-compare-their-first-elements-of-both-permutations-if-they-are-equal-compare-the-second-and-so-on-if-we-have-two-permutations-x-and-y-then-x-is-lexicographically-smaller-if-x-i-y-i-where-i-is-the-first-index-in-which-the-permutations-x-and-y-differ\">To determine which of the two permutations is lexicographically smaller, we compare their first elements of both permutations. If they are equal \u2014 compare the second, and so on. If we have two permutations X and Y, then X is lexicographically smaller if X[i]\u2009&lt;\u2009Y[i], where \u2018i\u2019 is the first index in which the permutations X and Y differ.</h4>\n\n<h4 id=\"for-example-2-1-3-4-is-lexicographically-smaller-than-2-1-4-3\">For example, [2, 1, 3, 4] is lexicographically smaller than [2, 1, 4, 3].</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain an integer \u2018N\u2019 representing the length of the permutation.\n\nThe second line contains \u2018N\u2019 space-separated integers which are the elements of the permutation.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the elements of the lexicographically next greater permutation with a single space-separated. If lexicographically next greater permutation doesn\u2019t exist, print the lexicographically smallest permutation.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10000\n1 &lt;= P[i] &lt;= N\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\n1 2 3\n5\n2 3 1 4 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 3 2\n2 3 1 5 4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>In the first test case, the lexicographically next greater permutation is [1, 3, 2].\n\nIn the second test case, the lexicographically next greater permutation is [2, 3, 1, 4, 5].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2\n1 2\n3\n3 1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2 1\n3 2 1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>In the first test case, the lexicographically next greater permutation is [2, 1].\n\nIn the second test case, the lexicographically next greater permutation is [3, 2, 1].\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 399,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a permutation of 'N' integers, rearrange the numbers to generate the lexicographically next greater permutation. A permutation contains all integers from 1 to 'N' exactly once. If a lexicographically greater permutation doesn't exist, return the lexicographically smallest permutation (sorted in ascending order).",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10000",
                    "1 <= P[i] <= N",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\n1 2 3",
                        "output": "1 3 2",
                        "explanation": "The lexicographically next greater permutation of [1, 2, 3] is [1, 3, 2]."
                    },
                    {
                        "input": "5\n2 3 1 4 5",
                        "output": "2 3 1 5 4",
                        "explanation": "The lexicographically next greater permutation of [2, 3, 1, 4, 5] is [2, 3, 1, 5, 4]."
                    },
                    {
                        "input": "2\n1 2",
                        "output": "2 1",
                        "explanation": "The lexicographically next greater permutation of [1, 2] is [2, 1]."
                    },
                    {
                        "input": "3\n3 1 2",
                        "output": "3 2 1",
                        "explanation": "The lexicographically next greater permutation of [3, 1, 2] is [3, 2, 1]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of generating all possible permutations?</p>",
            "<p>Can you think of a greedy approach?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space Complexity : O(1)\r\n    \r\n    Where 'N' is the length of the given permutation.\r\n*/\r\n\r\nvector<int> nextPermutation(vector<int> &permutation, int n)\r\n{\r\n\r\n    // Start iterating from the end of the given permutation.\r\n    for (int i = n - 2; i >= 0; i--)\r\n    {\r\n\r\n        if (permutation[i] < permutation[i + 1])\r\n        {\r\n            // Decreasing element found.\r\n\r\n            // To store the index of just greater element.\r\n            int id = n - 1;\r\n\r\n            // Iterating to find the just greater element.\r\n            for (int j = i + 1; j < n; j++)\r\n            {\r\n                if (permutation[j] < permutation[i])\r\n                {\r\n                    // Element found.\r\n                    id = j - 1;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Swap the ith and element at index 'id'.\r\n            swap(permutation[i], permutation[id]);\r\n\r\n            // Reverse rest of the elements.\r\n            for (int j = 0; j < (n - i) / 2; j++)\r\n            {\r\n                swap(permutation[i + 1 + j], permutation[n - 1 - j]);\r\n            }\r\n\r\n            return permutation;\r\n        }\r\n    }\r\n\r\n    // Next greater permuation doesn't exists. So, return the smallest one.\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        permutation[i] = i + 1;\r\n    }\r\n\r\n    return permutation;\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity : O(N)\n    Space Complexity : O(1)\n    \n    Where 'N' is the length of the given permutation.\n'''\n\ndef nextPermutation(permutation, n):\n\n    # Start iterating from the end of the given permutation.\n    for i in range(n - 2, -1, -1):\n\n        if permutation[i] < permutation[i + 1]:\n\n            # Decreasing element found.\n            # To store the index of just greater element.\n            ind = n - 1\n\n            for j in range(i + 1, n):\n\n                if permutation[j] < permutation[i]:\n                    # Element found.\n                    ind = j - 1\n                    break\n\n            # Swap the ith and element at index 'id'.\n            permutation[i], permutation[ind] = permutation[ind], permutation[i]\n\n            # Reverse rest of the elements.\n            for j in range(((n - i) // 2)):\n\n                permutation[i + 1 + j], permutation[n - 1 - j] = permutation[n - 1 - j], permutation[i + 1 + j]\n\n            return permutation\n\n    # Next greater permuation doesn't exists. So, return the smallest one.\n    permutation = [i for i in range(1, n + 1)]\n\n    return permutation\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space Complexity : O(1)\r\n    \r\n    Where 'N' is the length of the given permutation.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\n\r\npublic class Solution \r\n{\r\n\tpublic static ArrayList<Integer> nextPermutation(ArrayList<Integer> permutation) \r\n\t{\r\n\r\n\t\tint n=permutation.size();\r\n\r\n\t\t// Start iterating from the end of the given permutation.\r\n\t\tfor (int i = n - 2; i >= 0; i--) \r\n\t\t{\r\n\t\t\tif (permutation.get(i) < permutation.get(i + 1)) \r\n\t\t\t{\r\n\t\t\t\t// Decreasing element found.\r\n\r\n\t\t\t\t// To store the index of just greater element.\r\n\t\t\t\tint id = n - 1;\r\n\r\n\t\t\t\t// Iterating to find the just greater element.\r\n\t\t\t\tfor (int j = i + 1; j < n; j++) \r\n\t\t\t\t{\r\n\t\t\t\t\tif (permutation.get(j) < permutation.get(i)) \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Element found.\r\n\t\t\t\t\t\tid = j - 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Swap the ith and element at index 'id'.\r\n\t\t\t\tCollections.swap(permutation, i, id);\r\n\r\n\t\t\t\t// Reverse rest of the elements.\r\n\t\t\t\tfor (int j = 0; j < (n - i) / 2; j++) \r\n\t\t\t\t{\r\n\t\t\t\t\tCollections.swap(permutation, (i + 1 + j), (n - 1 - j));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn permutation;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Next greater permuation doesn't exists. So, return the smallest one.\r\n\t\tfor (int i = 0; i < n; i++) \r\n\t\t{\r\n\t\t\tpermutation.set(i, i + 1);\r\n\t\t}\r\n\r\n\t\treturn permutation;\r\n\t}\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}