{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10206,
            "title": "Ninja And Alien",
            "titleSlug": "ninja-and-alien_1171179",
            "content": "<h4 id=\"an-alien-spaceship-arrived-at-our-planet-earth-an-alien-dropped-his-dictionary-of-words-on-the-way-back-to-his-planet-ninja-found-that-dictionary-and-now-wants-to-create-the-order-of-the-characters-of-that-language-help-ninja-in-creating-the-order-of-the-characters-with-the-help-of-the-list-of-words-given-as-were-found-in-the-alien-s-dictionary\">An alien spaceship arrived at our planet Earth. An alien dropped his dictionary of words on the way back to his planet. Ninja found that dictionary and now wants to create the order of the characters of that language. Help ninja in creating the order of the characters with the help of the list of words given as were found in the Alien\u2019s dictionary.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Let us assume that we have a list of words found in the dictionary in the same order as given: [\u201cbaa\u201d, \u201cabcd\u201d, \u201cabca\u201d, \u201ccab\u201d, \u201ccad\u201d]\n\nNow, ninja needs to find the order of the characters used in these strings.\n\nThe order would be: \u2018b\u2019, \u2018d\u2019, \u2018a\u2019, \u2018c\u2019, because \u201cbaa\u201d comes before \u201cabcd\u201d, hence \u2018b\u2019 will come before \u2018a\u2019 in the order, similarly because, \u201cabcd\u201d comes before \u201cabca\u201d, \u2018d\u2019 will come before \u2018a\u2019. And so on.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>A certain list of words might have more than one correct order of characters. In such cases, you need to find the smallest in normal lexicographical order. In the case of INVALID ORDER, simply return an empty string.\n</code></pre>\n\n<h5 id=\"invalid-order\">Invalid Order:</h5>\n\n<pre><code>words = [\u201caba\u201d, \u201cbba\u201d, \u201caaa\u201d]. \nIn this case, no valid order is possible because, from the first two words, we can deduce \u2018a\u2019 should appear before \u2018b\u2019, but from the last two words, we can deduce \u2018b\u2019 should appear before \u2018a\u2019 which is not possible.\n</code></pre>\n\n<h5 id=\"more-than-one-correct-order\">More than one correct order:</h5>\n\n<pre><code>words = [\u201cca\u201d, \u201ccb\u201d]. \nIn this case, we only know that \u2018b\u2019 will come after \u2018a\u2019 in the order of characters, but we don&#39;t have any knowledge of \u2018c\u2019. So, the valid correct orders can be = \u201cabc\u201d, \u201ccab\u201d, \u201cacb\u201d. Out of these, \u201cabc\u201d is lexicographically smallest, hence it will be printed.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain an integer \u2018N\u2019, which denotes the number of words in the dictionary.\n\nThe second line of each test case will contain \u2018N\u2019 space-separated strings which denote the words of the dictionary.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the order of characters.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 300\n0 &lt;= size &lt;= 100\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\nwrt wrf er ett rftt\n2\nz x\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>wertf\nzx\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>In the first test case, \nfrom &quot;wrt&quot;and&quot;wrf&quot; ,we can get &#39;t&#39; &lt; &#39;f&#39;\nfrom &quot;wrt&quot;and&quot;er&quot; ,we can get &#39;w&#39; &lt; &#39;e&#39;\nfrom &quot;er&quot;and&quot;ett&quot; ,we can get &#39;r&#39; &lt; &#39;t&#39;\nfrom &quot;ett&quot;and&quot;rftt&quot; ,we can get &#39;e&#39; &lt; &#39;r&#39;\n\nSo the order of characters will be &quot;wertf\u201d\n\nIn the second test case, \nfrom &quot;z&quot; and &quot;x&quot;\uff0cwe can get &#39;z&#39; &lt; &#39;x&#39;\nSo the order of characters will be &quot;zx&quot;\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n5\nbaa abcd abca cab cad\n3    \ncaa aaa aab\n2\nca cb\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>bdac\ncab \nabc\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of words `arr` from an alien language's dictionary, determine the order of the characters in the alien language. The input `arr` is sorted lexicographically according to the alien alphabet.  If a valid order cannot be determined due to contradictions in the input, return an empty string. Among multiple valid orderings, return the lexicographically smallest one.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 300",
                    "0 <= size <= 100 (size is the length of each word)"
                ],
                "testcases": [
                    {
                        "input": "n = 5, arr=[\"wrt\", \"wrf\", \"er\", \"ett\", \"rftt\"]",
                        "output": "wertf",
                        "explanation": "From \"wrt\"and\"wrf\" ,we can get 't' < 'f'\nFrom \"wrt\"and\"er\" ,we can get 'w' < 'e'\nFrom \"er\"and\"ett\" ,we can get 'r' < 't'\nFrom \"ett\"and\"rftt\" ,we can get 'e' < 'r'\nSo the order of characters will be \"wertf\u201d"
                    },
                    {
                        "input": "n = 2, arr=[\"z\", \"x\"]",
                        "output": "zx",
                        "explanation": "From \"z\" and \"x\"\uff0cwe can get 'z' < 'x'\nSo the order of characters will be \"zx\""
                    },
                    {
                        "input": "n = 5, arr=[\"baa\", \"abcd\", \"abca\", \"cab\", \"cad\"]",
                        "output": "bdac",
                        "explanation": "Based on the given word order, we can deduce the character order to be 'b', 'd', 'a', 'c'."
                    },
                    {
                        "input": "n = 3, arr=[\"caa\", \"aaa\", \"aab\"]",
                        "output": "cab",
                        "explanation": "Based on the word order, the deduced character order is 'c', 'a', 'b'."
                    },
                    {
                        "input": "n = 2, arr=[\"ca\", \"cb\"]",
                        "output": "abc",
                        "explanation": "We only know 'a' comes before 'b', 'c' can be anywhere. Lexicographically smallest is 'abc'."
                    },
                    {
                        "input": "n = 3, arr=[\"aba\", \"bba\", \"aaa\"]",
                        "output": "",
                        "explanation": "This test case results in a cycle. 'a' < 'b' from 'aba' and 'bba', and 'b' < 'a' from 'bba' and 'aaa', leading to a contradiction."
                    },
                    {
                        "input": "n = 1, arr=[\"abc\"]",
                        "output": "abc",
                        "explanation": "If there is only one word, the order is simply the unique characters in that word in sorted order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about creating a graph</p>",
            "<p>Can you think about using a topological sort.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}