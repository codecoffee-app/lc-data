{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13320,
            "title": "Ninja and BInary String",
            "titleSlug": "ninja-and-binary-string_1558387",
            "content": "<h4 id=\"ninja-is-given-a-binary-string-s-of-size-n-by-his-friend-the-task-is-to-check-if-the-binary-string-s-can-be-sorted-in-decreasing-order-by-removing-any-number-of-the-non-adjacent-characters-since-ninja-is-busy-with-some-work-he-is-asking-for-your-help-can-you-help-him\">Ninja is given a binary string \u2018S\u2019 of size \u2018N\u2019 by his friend, the task is to check if the binary string \u2018S\u2019 can be sorted in decreasing order by removing any number of the non-adjacent characters. Since Ninja is busy with some work he is asking for your help. Can you help him?</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>A binary string is a string in which all characters are either \u20181\u2019 or \u20180\u2019.\n\nThe order is not strictly decreasing.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the size of the given string.\n\nThe second line of each test case contains the string \u2018S\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, If it is possible to sort the string in decreasing order, then print \u201ctrue\u201d, otherwise print \u201cfalse\u201d.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to input or print anything, as it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10 ^ 4 \n\nWhere \u2018T\u2019 is the total number of test cases and \u2018N\u2019 is the size of the given string.\n\nTime limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n7\n1010101\n4\n0011\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>true\nfalse\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h4>\n\n<pre><code>Test case 1:\n\nWe can remove the non-adjacent characters at indices 1, 3, 5 which modifies the string to \u201c1111\u201d  which is sorted in non-increasing order. So we print \u201ctrue\u201d.\n\nTest case 2:\n\nWe cannot sort the string in non-increasing order by removing adjacent characters so we print \u201cfalse\u201d.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n4\n1011       \n6\n000000\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>true\ntrue\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h4>\n\n<pre><code>Test case 1:\n\nWe can remove the non-adjacent character at indices 1,3,5 which modifies the string to \u201c111\u201d  which is a sorted string in non-increasing order. So we print \u201ctrue\u201d.\n\nTest case 2:\n\nSince the String is already sorted in non-increasing order we print \u201ctrue\u201d.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary string 'S' of size 'N', determine if it's possible to sort 'S' in non-increasing order (decreasing or constant) by removing any number of non-adjacent characters.  A binary string consists only of '1's and '0's.",
                "constraints": [
                    "1 <= T <= 5 (where T is the number of test cases)",
                    "1 <= N <= 10^4 (where N is the size of the string)",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "7\n1010101",
                        "output": "true",
                        "explanation": "Removing characters at non-adjacent indices 1, 3, and 5 results in the string \"1111\", which is sorted in non-increasing order."
                    },
                    {
                        "input": "4\n0011",
                        "output": "false",
                        "explanation": "It is not possible to sort the string \"0011\" in non-increasing order by removing non-adjacent characters."
                    },
                    {
                        "input": "4\n1011",
                        "output": "true",
                        "explanation": "Removing the character at index 1 results in the string \"111\", which is sorted in non-increasing order."
                    },
                    {
                        "input": "6\n000000",
                        "output": "true",
                        "explanation": "The input string is already sorted in non-increasing order, so no removals are needed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>If there exist two adjacent characters having <strong>1s</strong> then what makes it impossible to sort the string in decreasing order by removing the non-adjacent characters.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}