{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10467,
            "title": "Ninja and Binary Tree",
            "titleSlug": "ninja-and-binary-tree_1229407",
            "content": "<h4 id=\"ninja-has-to-implement-a-binary-tree-class-from-scratch-the-ninja-can-perform-three-types-of-queries-on-this-binary-tree\">Ninja has to implement a binary tree class from scratch. The Ninja can perform three types of queries on this binary tree.</h4>\n\n<h5 id=\"i-val-in-this-query-ninja-has-to-insert-a-node-with-the-value-val-in-the-binary-tree-d-val-in-this-query-ninja-has-to-delete-a-node-with-the-value-val-from-the-binary-tree-r-in-this-query-ninja-has-to-print-a-random-node-from-the-tree\"><ul > <li>\u2018I\u2019 \u2018VAL\u2019: In this query, Ninja has to insert a Node with the value \u2018VAL\u2019 in the binary tree.</li> <li>\u2018D\u2019 \u2018VAL\u2019: In this query, Ninja has to delete a Node with the value  \u2018VAL\u2019 from the binary tree. </li> <li>\u2018R\u2019: In this query, Ninja has to print a random node from the tree.</li> </ul></h5>\n\n<h4 id=\"all-the-node-values-in-the-binary-tree-are-different-all-nodes-are-equally-likely-to-be-chosen\">All the Node values in the binary tree are different. All nodes are equally likely to be chosen.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<p><img src=\"https://files.codingninjas.in/insert1-8230.png\" alt=\"\"></p>\n\n<p><img src=\"https://files.codingninjas.in/delete1-8229.png\" alt=\"\"></p>\n\n<p><img src=\"https://files.codingninjas.in/random1-8228.png\" alt=\"\"></p>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases. Then the test cases follow.\n\nThe next line of each test case contains an integer \u2018Q\u2019 representing the number of queries to Ninja.\n\nThe next line, \u2018Q\u2019 lines of each test case, contain a character and integer representing which type of query is to perform on the binary tree and the value of the node.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the value of the Random Node obtained from the get Random Node query.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= \u2018Q\u2019 &lt;= 10000\nChar = {\u2018I\u2019, \u2018D\u2019, \u2018R\u2019}\n1 &lt;= \u2018VAL\u2019 &lt;= 100000  \n\nTime Limit: 1 second\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>1\n5\nI 2\nI 4\nI 5\nD 4\nR\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>Valid answer\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>For sample test case 1: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/example1a-8227.png\" alt=\"\"></p>\n\n<p><img src=\"https://files.codingninjas.in/example1b-8226.png\" alt=\"\"></p>\n\n<p><img src=\"https://files.codingninjas.in/example1c-8225.png\" alt=\"\"></p>\n\n<pre><code>In this sample test case, the random nodes may be 2 or 5 because all nodes should be equally likely to be chosen. So you can print any one of them.\nAs the random node returned (here 2) exists in the tree, the output is a \u201cValid answer.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n5\nI 4\nI 2\nD 2\nI 5  \nR\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>Valid answer\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h4>\n\n<pre><code>For sample test case 1: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/example2a-8224.png\" alt=\"\"></p>\n\n<p><img src=\"https://files.codingninjas.in/example2b-8223.png\" alt=\"\"></p>\n\n<p><img src=\"https://files.codingninjas.in/example2c-8222.png\" alt=\"\"></p>\n\n<p><img src=\"https://files.codingninjas.in/example2d-8221.png\" alt=\"\"></p>\n\n<pre><code>In this sample test case, the random nodes may be 4 or 5 because all nodes should be equally likely to be chosen. So you can print any one of them.\n\nAs the random node returned (here 4) exists in the tree, the output is a \u201cValid answer\u201d.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a binary tree class with the following operations: insert a node with a given value, delete a node with a given value, and return a random node from the tree. All node values in the binary tree are unique, and each node is equally likely to be chosen when selecting a random node.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 10",
                    "1 <= \u2018Q\u2019 <= 10000",
                    "1 <= \u2018VAL\u2019 <= 100000"
                ],
                "testcases": [
                    {
                        "input": "q = 5, queries = [('I', 2), ('I', 4), ('I', 5), ('D', 4), ('R', -1)]",
                        "output": "Valid answer",
                        "explanation": "Initially, the tree is empty. 'I 2' inserts node 2. 'I 4' inserts node 4. 'I 5' inserts node 5. 'D 4' deletes node 4. 'R' returns a random node, which can be either 2 or 5. The output confirms a valid answer, meaning the returned random node exists in the tree."
                    },
                    {
                        "input": "q = 5, queries = [('I', 4), ('I', 2), ('D', 2), ('I', 5), ('R', -1)]",
                        "output": "Valid answer",
                        "explanation": "Initially, the tree is empty. 'I 4' inserts node 4. 'I 2' inserts node 2. 'D 2' deletes node 2. 'I 5' inserts node 5. 'R' returns a random node, which can be either 4 or 5. The output confirms a valid answer, meaning the returned random node exists in the tree."
                    },
                    {
                        "input": "q = 3, queries = [('I', 10), ('R', -1), ('D', 10)]",
                        "output": "Valid answer",
                        "explanation": "Initially, the tree is empty. 'I 10' inserts node 10. 'R' returns a random node, which is 10. 'D 10' deletes the only node"
                    },
                    {
                        "input": "q = 4, queries = [('I', 1), ('I', 2), ('I', 3), ('R', -1)]",
                        "output": "Valid answer",
                        "explanation": "Initially, the tree is empty. 'I 1' inserts node 1. 'I 2' inserts node 2. 'I 3' inserts node 3. 'R' returns a random node, which can be either 1, 2, or 3. The output confirms a valid answer, meaning the returned random node exists in the tree."
                    },
                    {
                        "input": "q = 6, queries = [('I', 50), ('I', 25), ('I', 75), ('D', 50), ('I', 60), ('R', -1)]",
                        "output": "Valid answer",
                        "explanation": "Initially, the tree is empty. 'I 50' inserts node 50. 'I 25' inserts node 25. 'I 75' inserts node 75. 'D 50' deletes node 50.  'I 60' inserts node 60. 'R' will be either 25, 75, or 60. all those nodes are valid nodes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of the brute force approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}