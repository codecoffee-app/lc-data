{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13351,
            "title": "Ninja and Bombs",
            "titleSlug": "ninja-and-bombs_1558570",
            "content": "<h4 id=\"ninja-wants-to-travel-from-his-house-to-his-best-friend-s-house-the-houses-are-located-on-a-2d-coordinate-plane-with-ninja-s-house-being-situated-at-the-origin-ninja-s-friend-s-house-is-located-somewhere-on-the-x-axis-now-bombs-are-located-at-every-point-with-an-odd-x-coordinate-ninja-can-reach-his-friend-s-house-if-it-is-an-even-coordinate-else-he-cannot-reach-there-because-there-is-a-bomb-placed-at-that-point-there-is-a-dragon-who-doesn-t-let-ninja-use-modulus-operator\">Ninja wants to travel from his house to his best friend\u2019s house. The houses are located on a 2D coordinate plane, with Ninja\u2019s house being situated at the origin. Ninja\u2019s friend\u2019s house is located somewhere on the x-axis. Now bombs are located at every point with an odd x-coordinate. Ninja can reach his friend\u2019s house if it is an even coordinate else, he cannot reach there because there is a bomb placed at that point. There is a dragon who doesn\u2019t let ninja use, modulus operator.</h4>\n\n<h4 id=\"you-are-given-an-integer-n-denoting-the-x-coordinate-of-ninja-s-friend-s-house-can-ninja-reach-his-friend-s-house-if-yes-then-return-1-else-return-0-can-you-help-him-find-without-using-the-modulus-operator\">You are given an integer \u2018N\u2019 denoting the x-coordinate of Ninja\u2019s friend\u2019s house. Can Ninja reach his friend\u2019s house? If yes, then return 1 else, return 0. Can you help him find without using the modulus operator?</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains \u2018T\u2019, denoting the number of test cases.\n\nEach test case contains a single integer \u2018N\u2019, denoting the x-coordinate of Ninja\u2019s friend\u2019s house.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return &#39;1&#39; if Ninja can reach his friend\u2019s house else return &#39;0&#39;.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You cannot make use of the modulus operation.\nYou are not required to print the expected output; it has already been taken care of. \nJust implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^9\n\nTime Limit: 1 sec  \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2\n1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n0   \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>In the first test case, the x-coordinate of his friend\u2019s house is, even so, Ninja can reach so 1 is returned.\nIn the second test case, the x-coordinate of his friend\u2019s house is, odd so, Ninja can reach so 0 is returned.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n7\n2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja needs to travel from his house (origin) to his friend's house on the x-axis. Bombs are located at every odd x-coordinate. Determine if Ninja can reach his friend's house located at coordinate 'N' without using the modulus operator.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^9",
                    "Time Limit: 1 sec",
                    "Cannot use the modulus operation."
                ],
                "testcases": [
                    {
                        "input": "2\n2\n1",
                        "output": "1\n0",
                        "explanation": "Test case 1: N = 2 (even), Ninja can reach. Test case 2: N = 1 (odd), Ninja cannot reach."
                    },
                    {
                        "input": "2\n7\n2",
                        "output": "0\n1",
                        "explanation": "Test case 1: N = 7 (odd), Ninja cannot reach. Test case 2: N = 2 (even), Ninja can reach."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you check whether a point is even or not?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}