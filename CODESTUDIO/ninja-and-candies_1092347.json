{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9806,
            "title": "Ninja And Candies",
            "titleSlug": "ninja-and-candies_1092347",
            "content": "<h4 id=\"ninja-is-a-boy-who-lives-in-ninjaland-every-day-during-the-morning-he-gets-1-coin-from-his-mother-he-wants-to-buy-exactly-n-candies-each-of-the-candies-cost-2-coins-usually-and-1-coin-if-it-is-on-sale-ninja-has-to-buy-exactly-k-i-candies-of-the-i-th-type-he-buys-candies-in-the-evening\">Ninja is a boy who lives in ninjaland. Every day, during the morning he gets 1 coin from his mother. He wants to buy exactly \u2018N\u2019 candies. Each of the candies cost 2 coins usually and 1 coin if it is on sale. Ninja has to buy exactly K[i] candies of the i-th type(he buys candies in the evening).</h4>\n\n<h4 id=\"ninjas-can-buy-any-possibly-zero-number-of-candies-of-any-type-during-any-day-if-he-has-enough-money-to-do-it-if-the-candy-is-on-sale-he-can-buy-it-for-1-coin-and-otherwise-he-has-to-buy-it-for-2-coins\">Ninjas can buy any(possibly zero) number of candies of any type during any day(if he has enough money to do it). If the candy is on sale he can buy it for 1 coin and otherwise he has to buy it for 2 coins.</h4>\n\n<h4 id=\"there-are-m-special-offers-in-the-candy-shop-the-j-th-offer-d-j-c-j-means-that-candies-of-the-c-j-th-type-are-on-sale-during-the-d-j-th-day\">There are \u2018M\u2019 special offers in the candy shop. The j-th offer (D[j], C[j]) means that candies of the C[j]-th type are on sale during the D[j]-th day.</h4>\n\n<h4 id=\"ninja-wants-to-buy-all-candies-as-soon-as-possible-your-task-is-to-calculate-the-minimum-day-when-he-can-buy-all-the-candies\">Ninja wants to buy all candies as soon as possible. Your task is to calculate the minimum day when he can buy all the candies.</h4>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test cases follow.\n\nThe first line of each test case contains two space separated integers \u2018N\u2019 and \u2018M\u2019 denoting the total number of types of candies and the number of special offers in the candy shop.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers K[i], denoting the number of candies of each type Ninja has to order.\n\nThe next M-lines contain two space-separated integers (D[i], C[i]), denoting that the candy of C[i] type is on sale on the D[i]-th day.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each query, print the minimum day when the Ninja can order all candies.\n\nOutput for each test case will be printed in a new line. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N, M &lt;= 10^4\n0 &lt;= K[i] &lt;= 10^4\n1 &lt;= C[i] &lt;= N\n1 &lt;= D[i] &lt;= 10^4\n\nHere N denotes the total number of candies and M denotes the total number of special offers.\nHere K[i] denotes the number of candies of the i-th type Ninjas has to order.\nHere C[i]  and D[i] denote that the candy if the C[i]-th type will be on sale on the D[i]-th day.\nSum of K[i]\u2019s in each test case will be less than 5000.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 4\n1 0 2 0\n1 1\n1 3\n2 1\n2 3\n3 3\n1 1 1\n1 1\n1 2\n1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n5\n</code></pre>\n\n<h5 id=\"explanation-of-input-1\">Explanation of Input 1:</h5>\n\n<pre><code>For test case 1, Ninja can buy candies in the following manner-\n\n\u2022 Buy candy of type 1 on day 1 for 1 coin.\n\u2022 Buy candy of type 3 on day 2 for 1 coin.\n\u2022 Buy candy of type 3 on day 4 for 2 coins.\n\nFor test case 2, Ninja can buy candies in the following manner-\n\u2022 Buy candy of type 1 on day 1 for 1 coin.\n\u2022 Buy candy of type 2 on day 3 for 2 coins.\n\u2022 Buy candy of type 3 on day 5 for 2 coins.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>8\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 16,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja wants to buy N candies of different types. Each day he receives 1 coin. Each candy costs 2 coins normally, but if it's on sale, it costs 1 coin.  He needs to buy exactly K[i] candies of type i. There are M special offers; offer (D[j], C[j]) means candy of type C[j] is on sale on day D[j]. Find the minimum day Ninja can buy all the candies.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N, M <= 10^4",
                    "0 <= K[i] <= 10^4",
                    "1 <= C[i] <= N",
                    "1 <= D[i] <= 10^4",
                    "Sum of K[i]\u2019s in each test case will be less than 5000."
                ],
                "testcases": [
                    {
                        "input": "4 4\n1 0 2 0\n1 1\n1 3\n2 1\n2 3",
                        "output": "4",
                        "explanation": "Ninja can buy candies in the following manner:\n- Buy candy of type 1 on day 1 for 1 coin.\n- Buy candy of type 3 on day 2 for 1 coin.\n- Buy candy of type 3 on day 4 for 2 coins."
                    },
                    {
                        "input": "3 3\n1 1 1\n1 1\n1 2\n1 3",
                        "output": "5",
                        "explanation": "Ninja can buy candies in the following manner:\n- Buy candy of type 1 on day 1 for 1 coin.\n- Buy candy of type 2 on day 3 for 2 coins.\n- Buy candy of type 3 on day 5 for 2 coins."
                    },
                    {
                        "input": "5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3",
                        "output": "8",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we iterate over days to get our answer?</p>",
            "<p>Can we use a binary search to solve this problem?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}