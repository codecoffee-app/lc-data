{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10994,
            "title": "Ninja And Flowers",
            "titleSlug": "ninja-and-flowers_1281434",
            "content": "<h4 id=\"ninja-has-n-gardens-labeled-from-1-n-under-his-supervision-he-created-an-array-that-stores-bidirectional-paths-between-i1-and-i2-where-i1-and-i2-are-gardens-stored-at-the-position-i-in-the-array-in-each-garden-he-wants-to-plant-4-types-of-flowers\">Ninja has \u2018N\u2019 gardens labeled from [1, N] under his supervision. He created an array that stores bidirectional paths between I1 and I2, where I1 and I2 are gardens stored at the position I in the array. In each garden, he wants to plant 4 types of flowers.</h4>\n\n<h4 id=\"you-need-to-choose-a-flower-type-for-each-garden-such-that-any-two-gardens-connected-by-a-path-have-different-types-of-flowers\">You need to choose a flower type for each garden such that any two gardens connected by a path, have different types of flowers.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. All gardens have at most three paths coming into or leaving the garden. \n2. There can be more than one possible answer to this question. You need to print the smallest valid answer when all possible answers are sorted in lexicographical order.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019 which denotes the number of test cases or queries to be run. Then the test cases are as follows.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018X\u2019, denoting the number of gardens Ninja has and the number of queries regarding the paths between the gardens.\n\nThe next \u2018X\u2019 lines of each test contain an array of \u2018X\u2019 pairs where each pair denotes a bidirectional path between the two values of the pair.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, you need to return an array of integers denoting the flower type of each garden.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^3\n0 &lt;= X &lt;= 10^3\n1 &lt;= Y1, Y2 &lt;= N\n\nTime limit: 1 sec \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n4 2\n1 2\n3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 1 2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>In the first test case, \nGardens 1 and 2 have different types, and gardens 3 and 4 have different types. So, a possible answer to the question is when gardens 1 and 3 have the same type and gardens 2 and 4 have the same types of flowers. So print 1 2 1 2\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 3\n1 2\n2 3\n3 1\n4 3\n1 2\n2 3\n3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 2 3\n1 2 1 2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2:</h5>\n\n<pre><code>In the first test case, \nGardens 1 and 2 have different types, gardens 2 and 3 have different types, gardens 3 and 1 have different types. Hence, 1 2 3 is a valid answer. Other valid answers include 1 2 4, 4 2 1, 3 2 1. But 1 2 3 is lexicographically smallest, so you need to print 1 2 3\n\nIn the second test case, \nGardens 1 and 2 have different types, gardens 2 and 3 have different types, gardens 3 and 4 have different types. So print 1 2 1 2.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja has 'N' gardens labeled from 1 to N. He has created an array representing bidirectional paths between gardens I1 and I2. In each garden, he wants to plant one of 4 types of flowers. The challenge is to assign a flower type to each garden such that no two gardens connected by a path have the same type of flower. All gardens have at most three paths. Return the lexicographically smallest valid array representing flower types for each garden.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^3",
                    "0 <= X <= 10^3",
                    "1 <= Y1, Y2 <= N",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 2\n1 2\n3 4",
                        "output": "1 2 1 2",
                        "explanation": "Gardens 1 and 2 must have different flower types, and gardens 3 and 4 must have different flower types. A valid solution is to have gardens 1 and 3 with the same flower type and gardens 2 and 4 with the same flower type, resulting in the lexicographically smallest solution: 1 2 1 2."
                    },
                    {
                        "input": "3 3\n1 2\n2 3\n3 1",
                        "output": "1 2 3",
                        "explanation": "Gardens 1 and 2, 2 and 3, and 3 and 1 must all have different flower types. The lexicographically smallest valid solution is 1 2 3."
                    },
                    {
                        "input": "4 3\n1 2\n2 3\n3 4",
                        "output": "1 2 1 2",
                        "explanation": "Gardens 1 and 2, 2 and 3, and 3 and 4 must all have different flower types. The lexicographically smallest valid solution is 1 2 1 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of using greedy algorithms?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}