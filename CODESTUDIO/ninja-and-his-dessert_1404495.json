{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12155,
            "title": "Ninja and his dessert.",
            "titleSlug": "ninja-and-his-dessert_1404495",
            "content": "<h4 id=\"ninja-is-planning-to-make-dessert-for-which-he-is-going-to-buy-ingredients-there-are-n-base-flavors-and-m-toppings-ninja-has-a-target-that-he-will-be-needing-an-amount-of-k-for-making-the-dessert\">Ninja is planning to make dessert. For which he is going to buy ingredients. There are \u2018N\u2019 base flavors and \u2018M\u2019 toppings. Ninja has a target that he will be needing an amount of \u2018K\u2019 for making the dessert.</h4>\n\n<h4 id=\"for-making-dessert-there-are-some-basic-rules\">For making dessert, there are some basic rules</h4>\n\n<pre><code>1. There should be exactly one base flavor.\n2. Toppings can be one or more or none.\n3. There are at most two toppings of each type.\n</code></pre>\n\n<h4 id=\"ninja-wants-to-make-a-dessert-with-a-total-cost-as-close-to-the-target-price-as-possible\">Ninja wants to make a dessert with a total cost as close to the target price as possible.</h4>\n\n<h4 id=\"you-will-be-given-an-array-list-flavor-of-size-n-representing-the-cost-of-each-base-flavor-and-another-array-list-toppings-of-size-m-representing-the-cost-of-each-topping-and-the-target-price\">You will be given an array/list flavor of size N representing the cost of each base flavor and another array/list toppings of size &#39;M&#39; representing the cost of each topping and the target price.</h4>\n\n<h4 id=\"your-task-is-to-help-ninja-to-find-the-closest-possible-cost-of-the-dessert-to-the-target-price-k-if-there-are-multiple-answers-return-the-lower-one\">Your task is to help Ninja to find the closest possible cost of the dessert to the target price &#39;K&#39;. If there are multiple answers, return the lower one.</h4>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>Let N = 2 , M = 2 , K = 10, FLAVOR = [1,7] , TOPPING = [3, 4] , K = 10\n\nHere we can make a dessert with the base flavor of price 7 and adding 1 topping of price 3. Which will cost 7 + 3 = 10, which is exactly equal to k, so the closest possible price would be 10.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first line of each test case contains an integer \u2018N\u2019 representing the number of base FALVOURS.\n\nThe second line of each test case contains \u2018N\u2019 integer representing the cost base FLAVOURS.\n\nThe third line of each test case contains an integer \u2018M\u2019 representing the number of TOPPINGS.\n\nThe second line of each test case contains \u2018M\u2019 integer representing the cost TOPPINGS.\n\nThe fifth and last line of each test case contains an integer \u2018K\u2019 representing the target price for dessert. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the closest possible price of the dessert to the target price.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don\u2019t need to print anything or take input. It already has been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N, M &lt;= 10\n1 &lt;= FLAVOUR[i] , TOPPINGS[i] &lt;= 10 ^ 4\n1 &lt;= K &lt;= 10 ^ 4 \n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1</h5>\n\n<pre><code>2\n2\n1 7\n3\n1 2 3\n10\n1\n10\n3\n5 6 11\n9\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code>10\n10\n</code></pre>\n\n<h5 id=\"explanation\">Explanation</h5>\n\n<pre><code>Test case 1\n\nIn this case, Ninja has 2 base flavours of cost 1 and 7,  and 3 toppings of price 1 and 2. Here target price is 10. So if Ninja takes a base of cost 7 and 1 topping of cost 3, then Ninja can make a dessert exactly of cost 10 ( 7 + 3), i.e., target price.\n\nTest case 2\n\nIn this case, Ninja has only one base flavour of cost 10 and 3 toppings of 5, 6, 11. To make the dessert, Ninja must need a base, so 10 is the minimum cost that he must spend. Now, if he will add toppings price will rise further. So the closest possible price is 10.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4\n1 8 3 4\n3\n2 3 4\n20\n1\n2\n1\n2\n7\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>20\n6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja wants to make a dessert with a cost as close as possible to a target price 'K'. He has 'N' base flavors and 'M' toppings to choose from.\n\nRules:\n1. Exactly one base flavor must be chosen.\n2. Zero or more toppings can be added.\n3. At most two of each type of topping can be used.\n\nYou are given the costs of each base flavor and topping, and the target price.  Find the dessert cost closest to the target, returning the lower cost if there are ties.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N, M <= 10",
                    "1 <= FLAVOUR[i], TOPPINGS[i] <= 10 ^ 4",
                    "1 <= K <= 10 ^ 4",
                    "Time limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "2\n2\n1 7\n3\n1 2 3\n10\n1\n10\n3\n5 6 11\n9",
                        "output": "10\n10",
                        "explanation": "Test case 1:  Base flavor 7 + topping 3 = 10 (exact match).\nTest case 2: Only one base flavor (10) available. Adding toppings increases the cost, so 10 is the closest."
                    },
                    {
                        "input": "2\n4\n1 8 3 4\n3\n2 3 4\n20\n1\n2\n1\n2\n7",
                        "output": "20\n6",
                        "explanation": "Test case 1: Best choice is base flavor 4, two toppings 4,3,3 for a total of 4 + 4 +3 +3  = 14. A better choice is base flavor 8, and two toppings 2,3,4 for a total of 8+2+3+4=17. Another good choice is base flavor 8 and one topping 4 for a total of 12 and another is base flavor 4 and two toppings 2, 3 for a total of 9. \nFinally choosing base 4 and two toppings 4,3,3 is 14 (closest to 20 and lower).\nTest case 2: Closest price: Base 2 and two toppings of value 2 will equal 6. Base 2 by itself has a diff of 5, while the base with two toppings of value 2 brings the difference down to 1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>As constraints are less, try all the possible combinations.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}