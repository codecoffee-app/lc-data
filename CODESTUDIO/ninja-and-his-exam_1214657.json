{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10347,
            "title": "Ninja and his Exam",
            "titleSlug": "ninja-and-his-exam_1214657",
            "content": "<h4 id=\"ninja-has-an-exam-tomorrow-he-has-not-studied-well-for-it-so-he-decided-to-get-only-the-passing-marks-ninja-knows-that-the-exam-will-consist-of-three-types-of-questions-having-marks-2-5-and-7-respectively-he-needs-to-find-the-number-of-ways-he-can-achieve-passing-marks-in-the-exam-by-attempting-those-questions-he-asked-you-to-help-him-with-this-as-he-is-busy-preparing-so-you-need-to-find-out-the-number-of-ways-he-can-score-the-passing-marks\">Ninja has an exam tomorrow. He has not studied well for it. So, he decided to get only the passing marks. Ninja knows that the exam will consist of three types of questions, having marks 2, 5 and 7 respectively. He needs to find the number of ways he can achieve passing marks in the exam by attempting those questions. He asked you to help him with this as he is busy preparing. So, you need to find out the number of ways he can score the passing marks.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Let us suppose the passing marks is: 10\nSo, the number of ways Ninja can score 10 marks are (2, 2, 2, 2, 2) and (5, 5), so you need to print 2.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Keep in mind that a particular test has infinite questions of each type.\nKeep in mind that the ninja does not want more than the passing marks.\nPlease note that (2, 5) and (5, 2) are the same and you need to take them as a single way.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain a single integer \u2018N\u2019 denoting the passing marks of the test.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer that denotes the number of ways to reach the given marks.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n0 &lt;= N &lt;= 10000\n\nTime limit: 1 sec\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n10\n20\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>In the first test case, \nThe number of ways Ninja can score 10 marks are:(2, 2, 2, 2, 2) and (5, 5), so you need to print 2.\n\nIn the second test case, \nThe number of ways Ninja can score 20 marks are: (2, 2, 2, 2, 2, 2, 2, 2, 2, 2), (2, 2, 2, 7, 7), (2, 2, 2, 2, 2, 5, 5), (2, 2, 2, 2, 5, 7) and (5, 5, 5, 5) so you need to print 5.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3\n8\n13\n9\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n2\n2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2 :</h5>\n\n<pre><code>In the first test case, \nThe number of ways Ninja can score 8 marks is :(2, 2, 2, 2), so you need to print 1.\n\nIn the second test case, \nThe number of ways Ninja can score 13 marks are:(2, 2, 2, 7) and (2, 2, 2, 2, 5), so you need to print 2.\n\nIn the third test case, \nThe number of ways Ninja can score 9 marks are:(2, 7) and (2, 2, 5), so you need to print 2.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja needs to pass an exam and wants to find the number of ways to achieve the passing score using questions of 2, 5, and 7 marks each. Given the passing marks, determine how many distinct combinations of these questions can sum up to the target score. Order of questions does not matter.",
                "constraints": [
                    "1 <= T <= 50",
                    "0 <= N <= 10000",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "10",
                        "output": "2",
                        "explanation": "Ninja can score 10 marks in the following ways: (2, 2, 2, 2, 2) and (5, 5). Therefore, the answer is 2."
                    },
                    {
                        "input": "20",
                        "output": "5",
                        "explanation": "Ninja can score 20 marks in these ways: (2, 2, 2, 2, 2, 2, 2, 2, 2, 2), (2, 2, 2, 7, 7), (2, 2, 2, 2, 2, 5, 5), (2, 2, 2, 2, 5, 7) and (5, 5, 5, 5). Thus, the answer is 5."
                    },
                    {
                        "input": "8",
                        "output": "1",
                        "explanation": "Ninja can score 8 marks only in one way: (2, 2, 2, 2). So, the answer is 1."
                    },
                    {
                        "input": "13",
                        "output": "2",
                        "explanation": "Ninja can score 13 marks in the following ways: (2, 2, 2, 7) and (2, 2, 2, 2, 5). Hence, the answer is 2."
                    },
                    {
                        "input": "9",
                        "output": "2",
                        "explanation": "Ninja can score 9 marks in two ways: (2, 7) and (2, 2, 5). Therefore, the answer is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you break your problem into smaller repetitive sub problems?</p>",
            "<p>Think of overlapping subproblems.</p>",
            "<p>Can you use the concept of dynamic programming?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}