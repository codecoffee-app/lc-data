{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10727,
            "title": "Ninja and his meetings",
            "titleSlug": "ninja-and-his-meetings_1263693",
            "content": "<h4 id=\"ninja-has-recently-started-a-startup-in-his-startup-there-is-only-one-conference-room-for-a-meeting-ninja-receives-an-array-list-meetings-of-back-to-back-appointment-requests-and-is-debating-which-ones-to-accept-ninja-needs-a-15-minute-break-between-appointments-and-therefore-he-cannot-accept-any-adjacent-requests\">Ninja has recently started a startup. In his startup, there is only one conference room for a meeting. Ninja receives an array/list \u2018MEETINGS\u2019 of back-to-back appointment requests and is debating which ones to accept. Ninja needs a 15-minute break between appointments, and therefore he cannot accept any adjacent requests.</h4>\n\n<h4 id=\"ninja-has-to-find-the-highest-total-booked-minutes-in-the-conference-room-for-all-meetings\">Ninja has to find the highest total booked minutes in the conference room for all meetings.</h4>\n\n<h4 id=\"note-all-meeting-timings-are-multiples-of-15\">Note: All meeting timings are multiples of 15.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>\u2018MEETINGS[]\u2019 = {30, 15, 60}\n\nLet us assume the meeting starts at 12:00 o\u2019clock.\nThe first meeting takes 30 minutes so after the first meeting time is 12:30.\nThen Ninja cannot attend the second meeting which is for 15 minutes because he needs 15 minutes break after every meeting.\nAfter a 15 minutes break, he can attend the next meeting which is for 60 minutes.\n\nSo the total booked minutes for the meetings is 30 + 60 = 90.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains an integer \u2018N\u2019 represents the number of meetings.\n\nThe next line of each test case contains \u2018N\u2019 single space-separated integers denoting the time taken by a meeting.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the number of minutes for all meetings which are scheduled.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10^2\n1 &lt;= \u2018N\u2019 &lt;= 5*10^3\n0 &lt;= \u2018MEETINGS[i]\u2019 &lt;= 10^5 {each multiple of 15}\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n8\n30 15 60 75 45 15 15 45\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>180\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>For sample test case 1: \n\nLet\u2019s assume the first meeting starts at 12:00 o\u2019clock.\nThen, the first meeting takes 30 minutes, so after the first meeting, the time is 12:30.\nThen Ninja cannot attend the second meeting which is for 15 minutes because he needs a 15 minutes break after every meeting. So after a 15 minutes break, the time is 12:45.\nThen he attends the third meeting which is for 60 minutes, so after the third meeting, the time is 13:45.\nNow he cannot attend the fourth meeting which is for 75 minutes because he needs a 15 minutes break after every meeting. We know the fifth meeting starts after 75 minutes because the allocated time for the fourth meeting is 75 minutes. So after 75 minutes, the time is 15:00.\nThen he attends the fifth meeting which is for 45 minutes, so after the third meeting, the time is 15:45.\nNow he cannot attend the sixth meeting which is for 15 minutes because he needs a 15 minutes break after every meeting. So after a 15 minutes break, the time is 16:00.\nThen he skips the seventh meeting also, which is for 15 minutes, so after the seventh meeting, the time is 16:15.\nThen he attends the eighth meeting which is for 45 minutes, so after the eighth meeting, the time is 17:00.\n\nSo Ninja attended the first, third, fifth, eighth meeting. \nHence the total minutes are: 30 + 60 + 45 + 45 = 180.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n4\n60 15 15 60\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>120\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h4>\n\n<pre><code>For sample test case 1: \n\nLet\u2019s assume the first meeting starts at 12:00 o\u2019clock.\nThen, the first meeting takes 60 minutes, so after the first meeting, the time is 13:00.\nThen he cannot attend the second meeting which is for 15 minutes because he needs 15 minutes to break after every meeting. So after a 15 minutes break, the time is 13:15.\nThen he skips the third meeting also, which is for 15 minutes, so after the third meeting, the time is 13:30.\nThen he attends the fourth meeting which is for 60 minutes, so after the fourth meeting, the time is 14:30.\n\nSo he attended the first and the fourth meeting.  \nHence the total minutes are: 60 + 60 = 120.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja, a startup founder, needs to schedule meetings in a single conference room. Given a list of meeting durations (`MEETINGS`) in multiples of 15 minutes, determine the maximum total meeting time Ninja can book, considering a mandatory 15-minute break between each accepted meeting.  Ninja cannot accept adjacent meeting requests due to the required break.",
                "constraints": [
                    "1 <= T <= 10^2 (Number of test cases)",
                    "1 <= N <= 5 * 10^3 (Number of meetings)",
                    "0 <= MEETINGS[i] <= 10^5 (Meeting duration, multiple of 15)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "1\n8\n30 15 60 75 45 15 15 45",
                        "output": "180",
                        "explanation": "Consider meetings starting at 12:00. Ninja can choose meetings 1, 3, 5, and 8. This yields 30 + 60 + 45 + 45 = 180 minutes.  No other combination yields a higher total."
                    },
                    {
                        "input": "1\n4\n60 15 15 60",
                        "output": "120",
                        "explanation": "Consider meetings starting at 12:00. Ninja can choose meetings 1 and 4. This yields 60 + 60 = 120 minutes. Alternatively meetings 1 and 3 can be chosen, with 60 + 15 = 75 mins, or meetings 2 and 4, with a meeting total of 15 + 60 = 75. Or, ninja could just choose meetings 2 or 3, in which case they would be 15, or ninja could just choose meeting 1 or 4, in which case they would be 60. Therefore, the highest sum is 120"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of the recursive approach.</p>",
            "<p>Think of a solution to optimize the previous approach by using memoization.</p>",
            "<p>Think of a solution to optimize the previous approach by using dynamic programming.</p>",
            "<p>Think of a solution to optimize the previous approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}