{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10584,
            "title": "Ninja and his Secret Information",
            "titleSlug": "ninja-and-his-secret-information_1235180",
            "content": "<h4 id=\"ninja-has-recently-joined-the-fbi-ninja-got-some-secret-information-secretinformation-which-he-wants-to-share-with-his-team-but-he-can-not-send-this-information-directly-because-of-the-hackers-and-security-threats-they-pose\">Ninja has recently joined the FBI. Ninja got some secret information \u2018SECRET&#95;INFORMATION\u2019 which he wants to share with his team. But he can not send this information directly because of the hackers and security threats they pose.</h4>\n\n<h4 id=\"so-ninja-decides-to-encode-this-secretinformation-and-then-send-the-encoded-secretinformation-to-his-team-members-this-way-only-his-team-members-can-decode-this-information-and-thus-share-it-safely\">So Ninja decides to encode this \u2018SECRET&#95;INFORMATION\u2019 and then send the encoded \u2018SECRET&#95;INFORMATION\u2019 to his team members. This way, only his team members can decode this information and thus share it safely.</h4>\n\n<h4 id=\"as-ninja-is-busy-extracting-the-secretinformation-he-asks-you-for-help\">As Ninja is busy extracting the \u2018SECRET&#95;INFORMATION, he asks you for help.</h4>\n\n<h4 id=\"can-you-help-ninja-and-his-friends-with-encoding-and-decoding-the-secretinformation\">Can you help Ninja and his friends with encoding and decoding the \u2018SECRET&#95;INFORMATION\u2019?</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. The \u2018SECRET_INFORMATION\u2019 may contain any possible character out of 256 valid ASCII characters.\n2. While decoding the \u2018SECRET_INFORMATION\u2019 do not use class members / global/static variables.\n3. Do not use any inbuilt library method/function for decoding the \u2018SECRET_INFORMATION\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first and the only line of each test case contains an input string \u2018STR\u2019 \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, design an algorithm that returns the encoded and decoded string for each input \u2018SECRET_INFORMATION\u2019. The output is \u201cTransmission successful\u201d if decoding the encoded string gives the same string as \u2018SECRET_INFORMATION\u2019 else the output is \u201cTransmission failed\u201d. \n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 100\n1 &lt;= |SECRET_INFORMATION| &lt;= 5000\n\nWhere \u2018T\u2019 denotes the total number of test cases and |SECRET_INFORMATION| represents the length of \u2018SECRET_INFORMATION\u2019 Ninja has to transfer to his team.\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\nI love coding ninja\nI am Iron Man 3000\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>Transmission successful \nTransmission successful\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>For sample test case 1: \nOne way to encode the given \u2018SECRET_INFORMATION\u2019 is:\nFirst, we find the ASCII value of each character and then add 3 to it. Then we convert this ASCII value into character and replace this with the actual character of \u2018SECRET_INFORMATION\u2019 and append \u2018!\u2019 after each word of the \u2018SECRET_INFORMATION\u2019. \n\nAfter encoding the \u2018SECRET_INFORMATION\u2019 is: \u201cL!oryh!frglqj!qlqmd\u201d.\nFor decoding the given encoded string we follow the same procedure and for extracting the actual character. First, we find the ASCII value of each character and subtract 3 from it. Then we convert this ASCII value into character.\n\n\n\nFor sample test case 2: \nAnother way to encode the given \u2018SECRET_INFORMATION\u2019 is:\nFirst, we traverse the given \u2018SECRET_INFORMATION\u2019 and append \u2018:\u2019 at each word.\n\nAfter encoding the \u2018SECRET_INFORMATION\u2019 is: &quot;I:am:iron:man:3000&quot;.\nFor decoding the given encoded string we follow the same procedure and for extracting the actual character.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nWe say : yes\nYou are @awesome no. 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>Transmission successful \nTransmission successful\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>For sample test case 1: \nWe can encode \u2018SECRET_INFORMATION\u2019 as \u201cZh!vd|!=!|hv\u201d and decode it in a similar manner.\n\n\nFor sample test case 2: \nWe can encode \u2018SECRET_INFORMATION\u2019 as\u201c\\rx!duh!Cdzhvrph!qr1:4\u201d and decode it in a similar manner.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "A secret agent, Ninja, needs to share sensitive information with his team securely. Due to the risk of hackers, he decides to encode the information before transmitting it. Your task is to help Ninja by implementing an encoding and decoding algorithm. Given a secret message, encode it and then decode it to verify the transmission's integrity. Determine if the decoded message matches the original.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= |SECRET_INFORMATION| <= 5000 (Length of the secret message)",
                    "The secret message may contain any of the 256 valid ASCII characters.",
                    "Decoding should be implemented without using class members/global/static variables.",
                    "Decoding should be implemented without using any inbuilt library method/function."
                ],
                "testcases": [
                    {
                        "input": "I love coding ninja",
                        "output": "Transmission successful",
                        "explanation": "One possible encoding method: Add 3 to the ASCII value of each character and append '!' after each word.  Encoded string: \"L!oryh!frglqj!qlqmd\". Decoding this string should result in the original message."
                    },
                    {
                        "input": "I am Iron Man 3000",
                        "output": "Transmission successful",
                        "explanation": "One possible encoding method: Append ':' to each word. Encoded string: \"I:am:iron:man:3000\". Decoding this string should result in the original message."
                    },
                    {
                        "input": "We say : yes",
                        "output": "Transmission successful",
                        "explanation": "One possible encoding method: Add 3 to the ASCII value of each character and append '!' after each word. Encoded string: \"Zh!vd|!=!|hv\". Decoding this string should result in the original message."
                    },
                    {
                        "input": "You are @awesome no. 1",
                        "output": "Transmission successful",
                        "explanation": "One possible encoding method: Add 3 to the ASCII value of each character and append '!' after each word. Encoded string: \"\\rx!duh!Cdzhvrph!qr1:4\". Decoding this string should result in the original message."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of the Brute force approach</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}