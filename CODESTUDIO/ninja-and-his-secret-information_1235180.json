{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10584,
            "title": "Ninja and his Secret Information",
            "titleSlug": "ninja-and-his-secret-information_1235180",
            "content": "<h4 id=\"ninja-has-recently-joined-the-fbi-ninja-got-some-secret-information-secretinformation-which-he-wants-to-share-with-his-team-but-he-can-not-send-this-information-directly-because-of-the-hackers-and-security-threats-they-pose\">Ninja has recently joined the FBI. Ninja got some secret information \u2018SECRET&#95;INFORMATION\u2019 which he wants to share with his team. But he can not send this information directly because of the hackers and security threats they pose.</h4>\n\n<h4 id=\"so-ninja-decides-to-encode-this-secretinformation-and-then-send-the-encoded-secretinformation-to-his-team-members-this-way-only-his-team-members-can-decode-this-information-and-thus-share-it-safely\">So Ninja decides to encode this \u2018SECRET&#95;INFORMATION\u2019 and then send the encoded \u2018SECRET&#95;INFORMATION\u2019 to his team members. This way, only his team members can decode this information and thus share it safely.</h4>\n\n<h4 id=\"as-ninja-is-busy-extracting-the-secretinformation-he-asks-you-for-help\">As Ninja is busy extracting the \u2018SECRET&#95;INFORMATION, he asks you for help.</h4>\n\n<h4 id=\"can-you-help-ninja-and-his-friends-with-encoding-and-decoding-the-secretinformation\">Can you help Ninja and his friends with encoding and decoding the \u2018SECRET&#95;INFORMATION\u2019?</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. The \u2018SECRET_INFORMATION\u2019 may contain any possible character out of 256 valid ASCII characters.\n2. While decoding the \u2018SECRET_INFORMATION\u2019 do not use class members / global/static variables.\n3. Do not use any inbuilt library method/function for decoding the \u2018SECRET_INFORMATION\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first and the only line of each test case contains an input string \u2018STR\u2019 \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, design an algorithm that returns the encoded and decoded string for each input \u2018SECRET_INFORMATION\u2019. The output is \u201cTransmission successful\u201d if decoding the encoded string gives the same string as \u2018SECRET_INFORMATION\u2019 else the output is \u201cTransmission failed\u201d. \n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 100\n1 &lt;= |SECRET_INFORMATION| &lt;= 5000\n\nWhere \u2018T\u2019 denotes the total number of test cases and |SECRET_INFORMATION| represents the length of \u2018SECRET_INFORMATION\u2019 Ninja has to transfer to his team.\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\nI love coding ninja\nI am Iron Man 3000\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>Transmission successful \nTransmission successful\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>For sample test case 1: \nOne way to encode the given \u2018SECRET_INFORMATION\u2019 is:\nFirst, we find the ASCII value of each character and then add 3 to it. Then we convert this ASCII value into character and replace this with the actual character of \u2018SECRET_INFORMATION\u2019 and append \u2018!\u2019 after each word of the \u2018SECRET_INFORMATION\u2019. \n\nAfter encoding the \u2018SECRET_INFORMATION\u2019 is: \u201cL!oryh!frglqj!qlqmd\u201d.\nFor decoding the given encoded string we follow the same procedure and for extracting the actual character. First, we find the ASCII value of each character and subtract 3 from it. Then we convert this ASCII value into character.\n\n\n\nFor sample test case 2: \nAnother way to encode the given \u2018SECRET_INFORMATION\u2019 is:\nFirst, we traverse the given \u2018SECRET_INFORMATION\u2019 and append \u2018:\u2019 at each word.\n\nAfter encoding the \u2018SECRET_INFORMATION\u2019 is: &quot;I:am:iron:man:3000&quot;.\nFor decoding the given encoded string we follow the same procedure and for extracting the actual character.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nWe say : yes\nYou are @awesome no. 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>Transmission successful \nTransmission successful\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>For sample test case 1: \nWe can encode \u2018SECRET_INFORMATION\u2019 as \u201cZh!vd|!=!|hv\u201d and decode it in a similar manner.\n\n\nFor sample test case 2: \nWe can encode \u2018SECRET_INFORMATION\u2019 as\u201c\\rx!duh!Cdzhvrph!qr1:4\u201d and decode it in a similar manner.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are tasked with assisting Ninja, an FBI agent, in securely transmitting secret information. To protect the data from hackers, Ninja encodes the information before sending it to his team. Your goal is to implement both encoding and decoding functions to ensure successful and secure data transmission. The encoding and decoding methods should be reversible. Given a secret message, determine if encoding and then decoding results in the original message.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 100",
                    "1 <= |SECRET_INFORMATION| <= 5000",
                    "The \u2018SECRET_INFORMATION\u2019 may contain any possible character out of 256 valid ASCII characters."
                ],
                "testcases": [
                    {
                        "input": "secretInformation = \"I love coding ninja\"",
                        "output": "Transmission successful",
                        "explanation": "One possible encoding is to shift each character's ASCII value by 3, adding '!' after each word. Encoding results in \"L!oryh!frglqj!qlqmd\". Decoding reverses this process, resulting in the original string."
                    },
                    {
                        "input": "secretInformation = \"I am Iron Man 3000\"",
                        "output": "Transmission successful",
                        "explanation": "Another possible encoding is to append ':' after each word. Encoding results in \"I:am:Iron:Man:3000\". Decoding reverses this process, resulting in the original string."
                    },
                    {
                        "input": "secretInformation = \"We say : yes\"",
                        "output": "Transmission successful",
                        "explanation": "A potential encoding shifts ASCII value by 3, adding '!' after each word which would result in \"Zh!vd|!=!|hv\". Decoding this will return the original string."
                    },
                    {
                        "input": "secretInformation = \"You are @awesome no. 1\"",
                        "output": "Transmission successful",
                        "explanation": "A potential encoding shifts ASCII value by 3, adding '!' after each word which would result in \"\\rx!duh!Cdzhvrph!qr1:4\". Decoding this will return the original string."
                    },
                    {
                        "input": "secretInformation = \"\"",
                        "output": "Transmission successful",
                        "explanation": "An empty string should encode and decode correctly."
                    },
                    {
                        "input": "secretInformation = \"Hello world! This is a test string.\"",
                        "output": "Transmission successful",
                        "explanation": "Tests a longer string with multiple words and punctuation."
                    },
                    {
                        "input": "secretInformation = \"1234567890\"",
                        "output": "Transmission successful",
                        "explanation": "Tests a numeric string."
                    },
                    {
                        "input": "secretInformation = \"~!@#$%^&*()_+=-`\"",
                        "output": "Transmission successful",
                        "explanation": "Tests a string with special characters."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of the Brute force approach</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}