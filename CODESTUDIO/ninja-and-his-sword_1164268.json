{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10098,
            "title": "Ninja and his sword",
            "titleSlug": "ninja-and-his-sword_1164268",
            "content": "<h4 id=\"ninja-has-been-given-two-integer-matrices-mat1-and-mat2-of-sizes-n1-x-m1-and-n2-x-m2-respectively-he-is-also-given-a-magic-sword-using-this-sword-he-can-cut-a-sub-square-of-any-size-from-the-given-matrices-if-it-is-present-in-both-the-matrices-formally-he-can-cut-that-sub-square-from-the-first-matrix-which-is-also-present-in-the-other-matrix-with-the-same-values-inside-both-sub-squares\">Ninja has been given two integer matrices \u2018MAT1\u2019 and \u2018MAT2\u2019 of sizes &#39;N1 x M1&#39; and &#39;N2 x M2&#39;, respectively. He is also given a magic sword. Using this sword, he can cut a sub-square of any size from the given matrices if it is present in both the matrices. Formally, he can cut that sub-square from the first matrix which is also present in the other matrix with the same values inside both sub-squares.</h4>\n\n<h4 id=\"however-ninja-can-use-this-magic-sword-only-once-so-he-decides-to-cut-that-common-sub-square-which-has-the-largest-size\">However, Ninja can use this magic sword only once. So, he decides to cut that common sub-square which has the largest size.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>For the matrices &#39;MAT1&#39; and &#39;MAT2&#39; as shown in the image below, the largest sub-square which is common in both of the matrices is of size 2.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/mat5-7987.png\" alt=\"matrix\"></p>\n\n<h4 id=\"can-you-help-ninja-achieve-this-task\">Can you help Ninja achieve this task?</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>If there is no such sub-square present then return 0.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T\u2019 denoting the number of test cases. Then each test case follows.\n\nThe first line of each test case contains two single space-separated integers \u2018N1\u2019 and \u2018M1\u2019 representing the size of the matrix \u2018MAT1\u2019.\n\nThe next \u2018N1\u2019 lines of each test case contain \u2018M1\u2019 single space-separated integers denoting the values of \u2018MAT1\u2019.\n\nThe next line of each test case contains two single space-separated integers \u2018N2\u2019 and \u2018M2\u2019 representing the size of the matrix \u2018MAT2\u2019.\n\nThe next \u2018N2\u2019 lines of each test case contain \u2018M2\u2019 single space-separated integers denoting the values of \u2018MAT2\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the size of the largest possible sub-square which is also present in another matrix.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 100\n1 &lt;= \u2018N1, \u2018M1\u2019, \u2018N1\u2019, \u2018M2\u2019 &lt;= 50\n1 &lt;= \u2018MAT1[ i ][ j ]\u2019, \u2018MAT2[ i ][ j ]\u2019 &lt;=10000\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 3\n0 1 1\n1 1 1\n0 1 1\n3 3\n1 0 1\n1 1 1\n0 1 1\n2 2\n1 2\n3 4\n2 2\n5 6\n7 8\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n0\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>For sample test case 1: \nThe largest sub-square which is common in both of the matrices is of size 2 as shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/mat1-7920.png\" alt=\"MAT1\"></p>\n\n<pre><code>For sample test case 2:\nThere is no such sub-square that is common in both the matrices, so our answer is 0.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/mat2-7919.png\" alt=\"MAT2\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2 2\n1 2\n1 2\n2 2\n1 2\n1 2\n2 3\n1 2 3\n2 1 3\n3 2\n2 3\n1 3\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2\n2\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h4>\n\n<pre><code>For sample test case 1: \nIn this sample test case, both matrices are equal. So largest sub-square which is common in both of the matrices is of size 2.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/mat3-7918.png\" alt=\"MAT3\"></p>\n\n<pre><code>For sample test case 2:\nThe largest sub-square which is common in both of the matrices is of size 2 as shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/mat4-7917.png\" alt=\"MAT4\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integer matrices, `mat1` of size N1 x M1 and `mat2` of size N2 x M2, find the size of the largest common sub-square present in both matrices. A common sub-square is defined as a square submatrix with identical elements present in both `mat1` and `mat2` at different positions. You are provided with a function `ninjaAndSword` that takes both matrices and their dimensions as input. Return 0 if no such common sub-square exists.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 100",
                    "1 <= \u2018N1, \u2018M1\u2019, \u2018N1\u2019, \u2018M2\u2019 <= 50",
                    "1 <= \u2018MAT1[ i ][ j ]\u2019, \u2018MAT2[ i ][ j ]\u2019 <=10000"
                ],
                "testcases": [
                    {
                        "input": "n1 = 3, m1 = 3, mat1 = [[0, 1, 1], [1, 1, 1], [0, 1, 1]], n2 = 3, m2 = 3, mat2 = [[1, 0, 1], [1, 1, 1], [0, 1, 1]]",
                        "output": "2",
                        "explanation": "The largest common sub-square of size 2 is present in both matrices, starting at (1,1) in both. The sub-square is [[1,1],[1,1]]."
                    },
                    {
                        "input": "n1 = 2, m1 = 2, mat1 = [[1, 2], [3, 4]], n2 = 2, m2 = 2, mat2 = [[5, 6], [7, 8]]",
                        "output": "0",
                        "explanation": "There is no common sub-square present in both matrices."
                    },
                    {
                        "input": "n1 = 2, m1 = 2, mat1 = [[1, 2], [1, 2]], n2 = 2, m2 = 2, mat2 = [[1, 2], [1, 2]]",
                        "output": "2",
                        "explanation": "Both matrices are identical, so the largest common sub-square is of size 2."
                    },
                    {
                        "input": "n1 = 2, m1 = 3, mat1 = [[1, 2, 3], [2, 1, 3]], n2 = 3, m2 = 2, mat2 = [[2, 3], [1, 3], [1, 2]]",
                        "output": "2",
                        "explanation": "The largest common sub-square of size 2 is present in both matrices. The sub-square is [[2, 3], [1, 3]] in the first and [[2,3],[1,3]] is available in second."
                    },
                    {
                        "input": "n1 = 3, m1 = 3, mat1 = [[1,2,3],[4,5,6],[7,8,9]], n2 = 1, m2 = 1, mat2 = [[5]]",
                        "output": "1",
                        "explanation": "The largest common sub-square of size 1 is present in both matrices, which is the element '5'."
                    },
                    {
                        "input": "n1 = 4, m1 = 4, mat1 = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], n2 = 2, m2 = 2, mat2 = [[11,12],[15,16]]",
                        "output": "2",
                        "explanation": "The largest common sub-square of size 2 is present in both matrices. Which is [[11,12],[15,16]]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we use Rabin Karp algorithm?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}