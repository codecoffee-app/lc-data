{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10332,
            "title": "Ninja and Infinite Size Array",
            "titleSlug": "ninja-and-infinite-size-array_1214641",
            "content": "<h4 id=\"ninja-has-been-given-an-array-list-arr-of-unknown-size-and-an-element-target-the-arr-is-sorted-in-ascending-order-and-all-the-elements-of-the-arr-are-different-however-the-size-of-the-array-is-unknown-to-you-so-ninja-can-only-access-the-arr-using-an-interface-readvalueatindex-if-you-are-trying-to-access-a-value-from-the-index-not-present-in-the-arr-you-get-output-10-9-7-ninja-has-to-find-that-the-position-of-the-element-target-if-it-is-present-in-the-arr\">Ninja has been given an array/list \u2018ARR\u2019 of unknown size and an element \u2018TARGET.\u2019 The \u2018ARR\u2019 is sorted in ascending order and all the elements of the \u2018ARR\u2019 are different. However, the size of the array is unknown to you. So Ninja can only access the &#39;ARR&#39; using an interface \u2018readValueAtIndex\u2019. If you are trying to access a value from the index not present in the \u2018ARR,\u2019 you get output \u201810 ^ 9 + 7\u2019.Ninja has to find that the position of the element \u2018TARGET\u2019 if it is present in the \u2018ARR\u2019.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Let \u2018ARR\u2019 = {2 4 7 10}.\n\nIf you want to know that what is the value at the 0-index in \u2018ARR\u2019, use \u2018readValueAtIndex(0)\u2019. Then the output is 2.\n\nLet\u2019s assume that you are trying to get the value at the 10\u2019th index so, use \u2018readValueAtIndex(10)\u2019. Then the output is \u201810 ^ 9 + 7\u2019. Because you are trying to access an index that is greater than the size of \u2018ARR\u2019.\n</code></pre>\n\n<h4 id=\"note-if-the-element-target-is-not-present-in-the-arr-then-return-1\">Note: If the element \u2018TARGET\u2019 is not present in the \u2018ARR\u2019 then return -1.</h4>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases. \n\nThe first line of each test case contains a space-separated integer \u2018N\u2019 and \u2018TARGET\u2019, which represents the size of \u2018ARR1\u2019 and an element to be searched.\n\nThe next lines of each test case contain \u2018N\u2019 space-separated integers which represent the elements of \u2018ARR1\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the position of the element \u2018TARGET\u2019 if it is present in the \u2018ARR\u2019 otherwise return -1.\n\nOutput for each test case should be in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 100\n1 &lt;= \u2018N\u2019 &lt;= 5000\n1 &lt;= \u2018ARR1[i]\u2019, \u2018TARGET\u2019 &lt;= 100000\n\nWhere \u2018ARR1[i]\u2019 the element of the array &#39;ARR&#39;.\n\nTime Limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n6 7\n1 3 5 7 9 11\n4 11\n1 4 5 19\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>3\n-1\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>In test case 1, 7 is present in the \u2018ARR\u2019 at position 3 (0-based indexing). So the answer is 3.\n\nIn test case 2, 11 is not present in the \u2018ARR\u2019. So the answer is -1.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n5 4\n4 6 13 17 19\n5 19\n1 4 5 10 19\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>0\n4\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h4>\n\n<pre><code>In test case 1, 4 is present in the \u2018ARR\u2019 at position 0 (0-based indexing). So the answer is 0.\n\nIn test case 2, 19 is present in the \u2018ARR\u2019 at position 4 (0-based indexing). So the answer is 4.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array/list 'ARR' of unknown size, sorted in ascending order with distinct elements, and a target element 'TARGET'. You can only access 'ARR' using the 'readValueAtIndex' interface, which returns 10^9 + 7 if the index is out of bounds. Find the index of 'TARGET' in 'ARR'. Return -1 if 'TARGET' is not present.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 5000",
                    "1 <= ARR1[i], TARGET <= 100000",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "6 7\n1 3 5 7 9 11",
                        "output": "3",
                        "explanation": "The target 7 is present at index 3 in the array [1, 3, 5, 7, 9, 11]."
                    },
                    {
                        "input": "4 11\n1 4 5 19",
                        "output": "-1",
                        "explanation": "The target 11 is not present in the array [1, 4, 5, 19]."
                    },
                    {
                        "input": "5 4\n4 6 13 17 19",
                        "output": "0",
                        "explanation": "The target 4 is present at index 0 in the array [4, 6, 13, 17, 19]."
                    },
                    {
                        "input": "5 19\n1 4 5 10 19",
                        "output": "4",
                        "explanation": "The target 19 is present at index 4 in the array [1, 4, 5, 10, 19]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of Iterating each element in the array/list.</p>",
            "<p>Think of finding the index using some divide and <strong>conquer</strong> technique.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}