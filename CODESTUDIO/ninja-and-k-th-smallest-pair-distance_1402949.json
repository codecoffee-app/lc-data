{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12080,
            "title": "Ninja\u200c \u200cand\u200c \u200cK-th\u200c \u200csmallest\u200c \u200cPair\u200c \u200cDistance",
            "titleSlug": "ninja-and-k-th-smallest-pair-distance_1402949",
            "content": "<h4 id=\"ninja-has-been-given-a-nums-array-list-of-size-n-nums-array-list-contains-n-positive-integers-ninja-has-to-find-the-k-th-smallest-distance-among-all-pairs-of-the-nums\">Ninja has been given a \u2018NUMS\u2019 array/list of size \u2018N\u2019. \u2018NUMS\u2019 array/list contains \u2018N\u2019 positive integers. Ninja has to find the \u2018K-th\u2019 smallest distance among all pairs of the \u2018NUMS\u2019.</h4>\n\n<h4 id=\"note-the-distance-between-any-two-numbers-of-nums-is-abs-nums-i-nums-j\">Note: The distance between any two numbers of \u2018NUMS\u2019 is abs(\u2018NUMS[i]\u2019 - \u2018NUMS[j]\u2019).</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>If \u2018NUMS\u2019 = [1, 2, 3] then all possible pairs distances are:\nIndex 0 and 1 i.e abs(\u2018NUMS[0]\u2019 - \u2018NUMS[1]\u2019) = 1\nIndex 0 and 2 i.e abs(\u2018NUMS[0]\u2019 - \u2018NUMS[2]\u2019) = 2\nIndex 1 and 2 i.e abs(\u2018NUMS[1]\u2019 - \u2018NUMS[2]\u2019) = 1\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain two single space-separated integers \u2018N\u2019 and \u2018K\u2019 which represent the size of \u2018NUMS\u2019 and the \u2018K-th\u2019 smallest distance that \u201cNinja\u201d has to find.\n\nThe next line contains \u2018N\u2019 space-separated integers representing the values of the given array/list \u2018NUMS\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the \u2018K-th\u2019 smallest distance among all pairs of the \u2018NUMS\u2019. \n\nThe output for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 50\n2 &lt;= \u2018N\u2019 &lt;= 10000\n1 &lt;= \u2018K\u2019 &lt;= (N *(N - 1)) / 2\n0 &lt;= \u2018NUMS[i]\u2019 &lt;= 100000\n\nWhere \u2018T\u2019 is the number of test cases, &#39;N&#39; is the size of \u2018NUMS\u2019, \u2018K\u2019 represents the \u2018K-th\u2019 smallest distance among all pairs of the \u2018NUMS\u2019 and \u2018NUMS[i]\u2019 represents the \u2018i-th\u2019 value of \u2018NUMS\u2019.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 1\n1 2\n4 4\n1 2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>In the first test case, all possible pairs distances are:\nIndex 0 and 1 i.e abs(\u2018NUMS\u2019[0] - \u2018NUMS\u2019[1]) = 1.\nHence the 1\u2019st smallest distance is 1. \n\nIn the first test case, all possible pairs distances are:\nIndex 0 and 1 i.e abs(\u2018NUMS\u2019[0] - \u2018NUMS\u2019[1]) = 1\nIndex 0 and 2 i.e abs(\u2018NUMS\u2019[0] - \u2018NUMS\u2019[2]) = 2\nIndex 0 and 3 i.e abs(\u2018NUMS\u2019[0] - \u2018NUMS\u2019[3]) = 3\nIndex 1 and 2 i.e abs(\u2018NUMS\u2019[1] - \u2018NUMS\u2019[2]) = 1\nIndex 1 and 3 i.e abs(\u2018NUMS\u2019[1] - \u2018NUMS\u2019[3]) = 2\nIndex 3 and 4 i.e abs(\u2018NUMS\u2019[3] - \u2018NUMS\u2019[4]) = 1\n\nSo all possible distances in increasing order are 1 1 1 2 2 3.\nHence the 4\u2019th smallest distance is 2. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 3\n1 1 2 2 3\n4 2\n3 2 100 8       \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n5\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>In the first test case, all possible distances in increasing order are 0 0 1 1 1 1 1 1  2 2\nHence the 3\u2019th smallest distance is 1. \n\nIn the second test case, all possible distances in increasing order are 1 5 6 92 97 98\nHence the 2\u2019th smallest distance is 5.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'NUMS' of size 'N' containing positive integers, find the K-th smallest absolute difference between any two numbers in 'NUMS'. The absolute difference between NUMS[i] and NUMS[j] is defined as abs(NUMS[i] - NUMS[j]).",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 50",
                    "2 <= \u2018N\u2019 <= 10000",
                    "1 <= \u2018K\u2019 <= (N *(N - 1)) / 2",
                    "0 <= \u2018NUMS[i]\u2019 <= 100000",
                    "\u2018T\u2019 is the number of test cases, 'N' is the size of \u2018NUMS\u2019, \u2018K\u2019 represents the \u2018K-th\u2019 smallest distance among all pairs of the \u2018NUMS\u2019 and \u2018NUMS[i]\u2019 represents the \u2018i-th\u2019 value of \u2018NUMS\u2019.",
                    "Time limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "2\n2 1\n1 2\n4 4\n1 2 3 4",
                        "output": "1\n2",
                        "explanation": "Test case 1: NUMS = [1, 2]. The distances are [abs(1-2)] = [1]. The 1st smallest distance is 1.\nTest case 2: NUMS = [1, 2, 3, 4]. The distances are [abs(1-2), abs(1-3), abs(1-4), abs(2-3), abs(2-4), abs(3-4)] = [1, 2, 3, 1, 2, 1]. Sorted, these are [1, 1, 1, 2, 2, 3]. The 4th smallest distance is 2."
                    },
                    {
                        "input": "2\n5 3\n1 1 2 2 3\n4 2\n3 2 100 8",
                        "output": "1\n5",
                        "explanation": "Test case 1: NUMS = [1, 1, 2, 2, 3]. The distances in increasing order are [0, 0, 1, 1, 1, 1, 1, 1, 2, 2]. The 3rd smallest distance is 1.\nTest case 2: NUMS = [3, 2, 100, 8]. The distances in increasing order are [1, 5, 6, 92, 97, 98]. The 2nd smallest distance is 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of storing all the possible pair distances?</p>",
            "<p>Can we count the pairs using binary search?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}