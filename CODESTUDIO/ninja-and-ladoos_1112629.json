{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9968,
            "title": " Ninja and Ladoos",
            "titleSlug": "ninja-and-ladoos_1112629",
            "content": "<h4 id=\"ninja-wants-to-serve-food-to-needy-people-so-he-bought-ladoos-from-a-sweet-shop-and-placed-them-on-plates-there-can-be-any-number-of-ladoos-present-in-a-plate\">Ninja wants to serve food to needy people. So, he bought Ladoos from a sweet shop and placed them on plates. There can be any number of Ladoos present in a plate.</h4>\n\n<h4 id=\"plates-containing-ladoos-are-placed-in-two-rows-each-row-is-sorted-in-increasing-order-by-the-number-of-ladoos-in-a-plate\">Plates containing Ladoos are placed in two rows. Each row is sorted in increasing order by the number of Ladoos in a plate.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>\u2018ROW1\u2019 :  [2, 5, 8, 17] and  \u2018ROW2\u2019 :  [1, 4, 8, 13, 20]\n</code></pre>\n\n<h4 id=\"now-people-come-one-by-one-in-a-line-to-take-plates-of-ladoos-from-ninja-ninja-picks-the-two-plates-in-front-one-from-each-row-and-gives-that-plate-to-people-in-which-the-number-of-ladoos-is-the-smallest-if-both-plates-contain-equal-numbers-of-ladoos-then-he-serves-any-plate-from-the-two-plates-and-places-the-other-plate-back-to-its-position\">Now people come one by one in a line to take plates of Ladoos from Ninja. Ninja picks the two plates in front, one from each row and gives that plate to people in which the number of ladoos is the smallest (if both plates contain equal numbers of ladoos then he serves any plate from the two plates) and places the other plate back to its position.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If \u2018ROW1\u2019 is [2, 5, 8, 17] and \u2018ROW2\u2019 is [1, 4, 8, 13, 20], then Ninja picks the first plates from each rows, plate containing 2 ladoos from \u2018ROW1\u2019 and a plate containing 1 ladoo from \u2018ROW2\u2019. \nThen he gives the plate with 1 Ladoo to the first person in line and places the other plate back to its position.\n</code></pre>\n\n<h4 id=\"can-you-tell-how-many-ladoos-the-kth-person-will-get\">Can you tell how many ladoos the \u2018K&#39;th\u2019 person will get?</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains three single space-separated integers \u2018N\u2019,  \u2018M\u2019 and \u2018K\u2019 where \u2018N\u2019 and \u2018M\u2019 denote the number of plates containing ladoos in \u2018ROW1\u2019 and \u2018ROW2\u2019  respectively and \u2018K\u2019 denotes the \u2018K\u2019th\u2019 person in line waiting to be served.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers, denoting the number of ladoos in each plate of the first row i.e. \u2018ROW1\u2019.\n\nThe third line of each test case contains \u2018M\u2019 single space-separated integers, denoting the number of ladoos in each plate of the second row i.e. \u2018ROW2\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print an integer denoting the number of ladoos the K&#39;th person will get.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N, M, K &lt;= 10^5\nK &lt;= (N + M)\n0 &lt;= ROW1[i], ROW2[i] &lt;= 10^5\n\nwhere ROW1[i] and ROW2[i] denote the number of Ladoos in i\u2019th plates of ROW1 and ROW2 respectively.\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5 4 3\n3 11 23 45 52\n4 12 14 18\n1 1 2\n1\n2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>11\n 2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1 :</h5>\n\n<pre><code>For sample test case 1: \n1\u2019st person will get 3 ladoos i.e a minimum of 3 and 4. Now  \u2018ROW1\u2019 :  [11, 23, 45, 52] and  \u2018ROW2\u2019 :  [4, 12, 14, 18].\n2\u2019nd person will get 4 ladoos i.e minimum of 11 and 4. Now  \u2018ROW1\u2019 :  [11, 23, 45, 52] and  \u2018ROW2\u2019 :  [12, 14, 18].\n3\u2019rd person will get 11 ladoos i.e minimum of 11 and 12. \n\n For sample test case 2: \n1\u2019st person will get 1 ladoos i.e a minimum of 1 and 2. Now  \u2018ROW1\u2019 :  [ ] and  \u2018ROW2\u2019 :  [2].\n2\u2019st person will get 2 ladoos because we have only one element left in ROW2 . Now  \u2018ROW1\u2019 :  [] and  \u2018ROW2\u2019 :  [].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5 3\n1 3 6 7 10\n3 5 5 7\n3 3 2\n10 20 20\n1 2 3 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>3 \n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2 :</h5>\n\n<pre><code>For sample test case 1: \n1\u2019st person will get 1 ladoo i.e minimum of 1 and 3. Now  \u2018ROW1\u2019 :  [3, 7, 10] and  \u2018ROW2\u2019 :  [3, 5, 5, 7].\n2\u2019nd person will get 3 ladoos i.e now from both rows we will get a plate of 3 ladoos so Ninja can give any one plate containing ladoos from each row. Let us assume Ninja give a plate from \u2018ROW2\u2019. Now  \u2018ROW1\u2019 :  [3, 7, 10] and  \u2018ROW2\u2019 :  [5, 5, 7].\n3\u2019rd person will get 3 ladoos i.e minimum of 3 and 5. Now  \u2018ROW1\u2019 :  [7, 10] and  \u2018ROW2\u2019 :  [5, 5, 7].\n\nFor sample test case 2: \n1\u2019st person will get 1 ladoo i.e minimum of 10 and 1. Now  \u2018ROW1\u2019 :  [10, 20, 30] and  \u2018ROW2\u2019 :  [ 2, 3].\n2\u2019nd person will get 2 ladoos i.e  minimum of 10 and 2. Now  \u2018ROW1\u2019 :  [10, 20, 30] and  \u2018ROW2\u2019 :  [3].\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 89,
            "dislikes": "NA",
            "rephrased": {
                "body": "Two sorted rows of ladoos (plates with varying amounts of ladoos) are available. Ninja needs to serve ladoos to people arriving in a line. For each person, Ninja chooses the plate with the fewest ladoos from the front of each row and serves that plate. If both plates have an equal number of ladoos, Ninja can serve any one. After serving the chosen plate, the other plate goes back to its original position, and the next person in line is served. Given the number of ladoos in each row, find how many ladoos the K'th person will receive.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N, M, K <= 10^5",
                    "K <= (N + M)",
                    "0 <= ROW1[i], ROW2[i] <= 10^5",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "row1 = [3, 11, 23, 45, 52], row2 = [4, 12, 14, 18], n = 5, m = 4, k = 3",
                        "output": "11",
                        "explanation": "1st person gets min(3, 4) = 3. row1 becomes [11, 23, 45, 52], row2 remains [4, 12, 14, 18]\n2nd person gets min(11, 4) = 4. row1 remains [11, 23, 45, 52], row2 becomes [12, 14, 18]\n3rd person gets min(11, 12) = 11."
                    },
                    {
                        "input": "row1 = [1], row2 = [2], n = 1, m = 1, k = 2",
                        "output": "2",
                        "explanation": "1st person gets min(1, 2) = 1. row1 becomes [], row2 remains [2]\n2nd person gets 2, since row1 is empty."
                    },
                    {
                        "input": "row1 = [1, 3, 6, 7, 10], row2 = [3, 5, 5, 7], n = 5, m = 4, k = 3",
                        "output": "3",
                        "explanation": "1st person gets min(1, 3) = 1. row1 becomes [3, 6, 7, 10], row2 remains [3, 5, 5, 7]\n2nd person gets min(3, 3) = 3. Let's say row2's 3 is chosen. row1 remains [3, 6, 7, 10], row2 becomes [5, 5, 7]\n3rd person gets min(3, 5) = 3."
                    },
                    {
                        "input": "row1 = [10, 20, 20], row2 = [1, 2, 3], n = 3, m = 3, k = 2",
                        "output": "2",
                        "explanation": "1st person gets min(10, 1) = 1. row1 remains [10, 20, 20], row2 becomes [2, 3]\n2nd person gets min(10, 2) = 2."
                    },
                    {
                        "input": "row1 = [5, 5, 5, 5, 5], row2 = [5, 5, 5, 5, 5], n = 5, m = 5, k = 7",
                        "output": "5",
                        "explanation": "All values are the same, so each person gets 5."
                    },
                    {
                        "input": "row1 = [2, 4, 6, 8, 10], row2 = [1, 3, 5, 7, 9], n = 5, m = 5, k = 10",
                        "output": "10",
                        "explanation": "The first 5 people will get 1, 2, 3, 4, 5. The next 5 will get 6, 7, 8, 9, 10. So the 10th person will get 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>What is the<i> \u2018K\u2019th\u2019 </i>smallest element in union of two sorted arrays?.</p>",
            "<p>Can you solve using the Two pointer technique?.</p>",
            "<p>Can you solve using the Divide and Conquer?.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity: O(log(K))\r\n    Space complexity: O(log(K))\r\n\r\n    where K denotes the Kth person in line waiting to be served.\r\n */\r\n\r\n\r\nint ninjaAndLadoos(vector<int> &row1, vector<int> &row2, int m, int n, int k) \r\n{     \r\n    // If length of first array is smaller then length of second then swap both the arrays.    \r\n    if (m > n) \r\n    {\r\n        return ninjaAndLadoos(row2, row1, n, m, k);\r\n    }\r\n  \r\n    if (m == 0) \r\n    {\r\n        return row2[k - 1];\r\n    }\r\n    \r\n    // If k is equal to 1\r\n    if (k == 1) \r\n    {\r\n        return min(row1[0], row2[0]);\r\n    }\r\n  \r\n    int i = min(m, k / 2);\r\n    int j = min(n, k / 2);\r\n    \r\n    // If row1[i - 1] is greater than row2[j - 1]\r\n    if (row1[i - 1] > row2[j - 1]) \r\n    {\r\n        vector<int> newRow2;\r\n        newRow2.assign(row2.begin() + j, row2.end());\r\n        \r\n        return ninjaAndLadoos(row1, newRow2, m, n - j, k - j);\r\n    } \r\n\r\n    vector<int> newRow1;\r\n    newRow1.assign(row1.begin() + i, row1.end());\r\n        \r\n    return ninjaAndLadoos(newRow1, row2, m - i, n, k - i);  \r\n} ",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "\n/*\nTime complexity: O(log(K))\nSpace complexity: O(log(K))\n\nwhere K denotes the Kth person in line waiting to be served.\n*/\n\nimport java.util.Arrays;\n\npublic class Solution {\n\tpublic static int ninjaAndLadoos(int row1[], int row2[], int m, int n, int k) {\n\n\t\t// If length of first array is smaller then length of second then swap both the\n\t\t// arrays.\n\t\tif (m > n) {\n\t\t\treturn ninjaAndLadoos(row2, row1, n, m, k);\n\t\t}\n\n\t\tif (m == 0) {\n\t\t\treturn row2[k - 1];\n\t\t}\n\n\t\tif (k == 1) {\n\t\t\treturn Math.min(row1[0], row2[0]);\n\t\t}\n\n\t\tint i = Math.min(m, k / 2);\n\t\tint j = Math.min(n, k / 2);\n\n\t\tif (row1[i - 1] > row2[j - 1]) {\n\t\t\tint newRow2[] = Arrays.copyOfRange(row2, j, n);\n\n\t\t\treturn ninjaAndLadoos(row1, newRow2, m, n - j, k - j);\n\t\t}\n\n\t\tint newRow1[] = Arrays.copyOfRange(row1, i, n);\n\n\t\treturn ninjaAndLadoos(newRow1, row2, m - i, n, k - i);\n\n\t}\n\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time complexity: O(log(K))\r\n    Space complexity: O(log(K))\r\n\r\n    where K denotes the Kth person in line waiting to be served.\r\n\"\"\"\r\n\r\n\r\ndef ninjaAndLadoos(row1, row2, m, n, k):\r\n    \r\n    # If length of first array is smaller then length of second then swap both the arrays.\r\n    if m > n:\r\n        return ninjaAndLadoos(row2, row1, n, m, k)\r\n\r\n    if m == 0:\r\n        return row2[k - 1]\r\n\r\n    # If k is equal to 1\r\n    if k == 1:\r\n        return min(row1[0], row2[0])\r\n\r\n    i = min(m, k // 2)\r\n    j = min(n, k // 2)\r\n\r\n    # If row1[i - 1] is greater than row2[j - 1]\r\n    if row1[i - 1] > row2[j - 1]:\r\n\r\n        newRow2 = row2[j:]\r\n        return ninjaAndLadoos(row1, newRow2, m, n - j, k - j)\r\n\r\n    newRow1 = row1[i:]\r\n\r\n    return ninjaAndLadoos(newRow1, row2, m - i, n, k - i)\r\n    pass\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}