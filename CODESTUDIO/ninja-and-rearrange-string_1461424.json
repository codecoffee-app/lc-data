{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12456,
            "title": "Ninja and Rearrange String",
            "titleSlug": "ninja-and-rearrange-string_1461424",
            "content": "<h4 id=\"ninja-has-been-given-a-string-str-and-an-integer-d-ninja-has-to-rearrange-the-string-str-such-that-the-same-characters-are-present-at-least-d-distance-from-each-other\">Ninja has been given a string \u2018STR\u2019 and an integer \u2018D\u2019. Ninja has to rearrange the string \u2018STR\u2019 such that the same characters are present at least \u2018D\u2019 distance from each other.</h4>\n\n<h4 id=\"if-it-is-possible-to-rearrange-the-string-str-then-return-true-otherwise-print-false\">If it is possible to rearrange the string \u2018STR\u2019, then return true; otherwise, print false.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The string \u2018STR\u2019 contains only lowercase alphabet characters.\n</code></pre>\n\n<h4 id=\"for-example\">For example :</h4>\n\n<pre><code>If \u2018STR\u2019 = \u201caaadbbcc\u201d and \u2018D\u2019 = 2.\nThen one of the possible solution is \u201cabacabcd\u201d. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain two single space-separated integers \u2018N\u2019 and \u2018D\u2019 which denote the size of the \u2018STR\u2019 and the distance such that the same characters are present at least \u2018D\u2019 distance from each other, respectively.\n\nThe next line of each test case contains the string \u2018STR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print &quot;true&quot; if it is possible to rearrange the string \u2018STR\u2019, otherwise, print &quot;false&quot; without quotes.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 50\n1 &lt;= \u2018N\u2019 &lt;= 10000\n1 &lt;= \u2018D\u2019 &lt;= 26\n\u2018STR\u2019 = {a - z}\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n6 2\nabcdef\n9 2\naaaabbbcc\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>true\ntrue\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>In the first test case, all characters are different so any permutation of this string is our answer i,e \u201cabcdef\u201d, \u201cabcdfe\u201d, and so on. As it is possible to rearrange the given string as described in the problem, we return true.\n\nIn the second test case, the possible answer is \u201cabcabcaba\u201d. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4 3\naabb\n6 2\naabbcc  \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>false\ntrue\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2 :</h5>\n\n<pre><code>In the first test case, it is not possible to rearrange the string \u2018STR\u2019. So we return false.\n\nIn the second test case,  one of the possible answers is \u201cabcabc\u201d, \u201dbacabc\u201d and so on. As it is possible to rearrange the given string as described in the problem, we return true.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string \u2018STR\u2019 consisting of lowercase alphabet characters and an integer \u2018D\u2019, determine if it's possible to rearrange \u2018STR\u2019 such that identical characters are separated by at least \u2018D\u2019 characters. Return true if a valid rearrangement exists, otherwise return false.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 50",
                    "1 <= \u2018N\u2019 <= 10000",
                    "1 <= \u2018D\u2019 <= 26",
                    "\u2018STR\u2019 = {a - z}"
                ],
                "testcases": [
                    {
                        "input": "str = \"abcdef\", d = 2",
                        "output": "true",
                        "explanation": "All characters are distinct, so any permutation satisfies the condition. Therefore, rearrangement is possible."
                    },
                    {
                        "input": "str = \"aaaabbbcc\", d = 2",
                        "output": "true",
                        "explanation": "One possible arrangement is \"abcabcaba\", where identical characters are separated by at least 2 characters."
                    },
                    {
                        "input": "str = \"aabb\", d = 3",
                        "output": "false",
                        "explanation": "It is impossible to arrange the string such that each 'a' is at least 3 positions away from another 'a', and similarly for 'b'."
                    },
                    {
                        "input": "str = \"aabbcc\", d = 2",
                        "output": "true",
                        "explanation": "A possible arrangement is \"abcabc\", where identical characters are separated by a distance of 2."
                    },
                    {
                        "input": "str = \"aaabc\", d = 3",
                        "output": "false",
                        "explanation": "No valid arrangement exists where the three 'a's are separated by at least a distance of 3 from each other."
                    },
                    {
                        "input": "str = \"aaaaaaaa\", d = 1",
                        "output": "false",
                        "explanation": "String has too many repeating characters for the given distance."
                    },
                    {
                        "input": "str = \"abc\", d = 0",
                        "output": "true",
                        "explanation": "If D = 0, any arrangement will satisfy the separation condition."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of storing the characters with their freq in a heap?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}