{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10079,
            "title": "Ninja And Sentences",
            "titleSlug": "ninja-and-sentences_1123512",
            "content": "<h4 id=\"ninja-is-trying-to-create-a-robot-which-would-talk-to-humans-ninja-is-stuck-at-a-particular-phase-where-he-wants-the-robot-to-create-all-possible-sentences-from-a-2d-array-of-words-help-ninja-in-solving-this-problem-for-a-given-2d-array-of-words-your-task-is-to-create-all-possible-sentences-that-can-be-made-using-them\">Ninja is trying to create a robot, which would talk to humans. Ninja is stuck at a particular phase where he wants the robot to create all possible sentences from a 2D array of words. Help Ninja in solving this problem. For a given 2D array of words, your task is to create all possible sentences that can be made using them.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>In a particular sentence, the robot can use a single word from the row that the word is part of.\n</code></pre>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThen the T test cases follow.\n\nThe first line of each test case contains two integers \u2018N\u2019 and \u2018M\u2019 , the rows and columns of the 2D array that contains the list of words. \nThe next \u2018N\u2019 lines contain \u2018M\u2019 strings each.\n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>For each test case, all the possible sentences formed are printed in a separate line.\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The output format is predefined for this question. You need to store all possibly created sentences in a predefined data structure. Keep in mind that first you need to store all the sentences that start with the first word of the first row and so on. \n\nFor further clarification on the same see the below example:\n\n1\n2 2 \nyou we\nsleep drink\n\nIn this case there are more than one correct ways to store the sentences but order of the output matters so, you should keep in mind that you start with the first row and the first column and so on. \n\nCorrect Output:             \nyou sleep\nyou drink\nwe sleep\nwe drink\n\nIncorrect outputs:\n\nwe sleep        we drink        you drink\nwe drink        we sleep        you sleep\nyou sleep       you drink       we drink\nyou drink       you sleep       we sleep\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 5\n1 &lt;= M &lt;= 5\n1 &lt;= W &lt;=20\nwhere \u2018T\u2019 is the number of test cases,  \u2018N\u2019 and \u2018M\u2019 are the dimensions of the words array, \u2018array[i][j]\u2019 is the value of words of the array, and \u2018W\u2019 denotes the size of the word.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>1\n2 2 \nyou we\nsleep drink\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>you sleep\nyou drink\nwe sleep\nwe drink\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h4>\n\n<pre><code>Taking a word from each row and adding it to each word of rest all the columns.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n3 1\ni\nlove\ncoding\n3 2\nyou we\nhave are\neat read\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>i love coding\nyou have eat\nyou have read\nyou are eat\nyou are read\nwe have eat\nwe have read\nwe are eat\nwe are read\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D array of words, generate all possible sentences by selecting one word from each row. The order of the sentences should prioritize the words in the first row, then the second, and so on.  The goal is to assist Ninja in creating a robot that can communicate with humans by constructing various sentences from a predefined word list.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 5",
                    "1 <= M <= 5",
                    "1 <= W <= 20"
                ],
                "testcases": [
                    {
                        "input": "T = 1, N = 2, M = 2, arr = [['you', 'we'], ['sleep', 'drink']]",
                        "output": "you sleep\nyou drink\nwe sleep\nwe drink",
                        "explanation": "The sentences are formed by taking one word from each row. The order is determined by starting with the first word in the first row ('you'), then combining it with each word in the second row ('sleep', 'drink'). Then, the second word in the first row ('we') is used, again combined with each word in the second row."
                    },
                    {
                        "input": "T = 2, N1 = 3, M1 = 1, arr1 = [['i'], ['love'], ['coding']], N2 = 3, M2 = 2, arr2 = [['you', 'we'], ['have', 'are'], ['eat', 'read']]",
                        "output": "i love coding\nyou have eat\nyou have read\nyou are eat\nyou are read\nwe have eat\nwe have read\nwe are eat\nwe are read",
                        "explanation": "The first test case forms only one sentence as each row contains only one word. The second test case considers two possible starting words ('you', 'we'), each combined with 'have' and 'are' from the second row, which are further combined with 'eat' and 'read' from the third row, creating all combinations in the specified order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about using recursion</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}