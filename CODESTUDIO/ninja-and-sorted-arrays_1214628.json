{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10331,
            "title": "Ninja and Sorted Arrays",
            "titleSlug": "ninja-and-sorted-arrays_1214628",
            "content": "<h4 id=\"ninja-has-been-given-two-sorted-integer-arrays-lists-arr1-and-arr2-of-size-m-and-n-ninja-has-to-merge-these-sorted-arrays-lists-into-arr1-as-one-sorted-array-you-may-have-to-assume-that-arr1-has-a-size-equal-to-m-n-such-that-arr1-has-enough-space-to-add-all-the-elements-of-arr2-in-arr1\">Ninja has been given two sorted integer arrays/lists \u2018ARR1\u2019 and \u2018ARR2\u2019 of size \u2018M\u2019 and \u2018N\u2019. Ninja has to merge these sorted arrays/lists into \u2018ARR1\u2019 as one sorted array. You may have to assume that \u2018ARR1\u2019 has a size equal to \u2018M\u2019 + \u2018N\u2019 such that \u2018ARR1\u2019 has enough space to add all the elements of \u2018ARR2\u2019 in \u2018ARR1\u2019.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>\u2018ARR1\u2019 = [3 6 9 0 0]\n\u2018ARR2\u2019 = [4 10]\nAfter merging the \u2018ARR1\u2019 and \u2018ARR2\u2019 in \u2018ARR1\u2019. \n\u2018ARR1\u2019 = [3 4 6 9 10]\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains two space-separated integers \u2018M\u2019 and \u2018N\u2019, which represent the size of \u2018ARR1\u2019 and \u2018ARR2\u2019.\n\nThe next lines of each test case contain \u2018M\u2019 space-separated integers and \u2018N\u2019 zeros (i.e. 0) which represent the number of elements in \u2018ARR1\u2019.\n\nThe next lines of each test case contain \u2018N\u2019 space-separated integers which represent the number of elements in \u2018ARR2\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the \u2018ARR1\u2019 after merging.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 100\n1 &lt;= \u2018M\u2019, \u2018N\u2019 &lt;= 5000\n1 &lt;= \u2018ARR1[i], ARR2[i]\u2019 &lt;= 100000\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 2\n1 2 3 0 0 \n4 5\n4 2\n1 4 6 10 0 0\n2 5\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>1 2 3 4 5\n1 2 4 5 6 10\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>For sample test case 1: \nIn this test case, After merging \u2018ARR2\u2019 into \u2018ARR1\u2019. \n\u2018ARR1\u2019 = [1 2 3 4 5]\n\nFor sample test case 2: \nIn this test case, After merging \u2018ARR2\u2019 into \u2018ARR1\u2019. \n\u2018ARR1\u2019 = [1 2 4 5 6 10] \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2 3\n1 10 0 0 0 \n3 8 11\n3 3\n3 4 6 0 0 0\n1 8 10\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>1 3 8 10 11\n1 3 4 6 8 10 \n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h4>\n\n<pre><code>For sample test case 1: \nIn this test case, After merging \u2018ARR2\u2019 into \u2018ARR1\u2019. \n\u2018ARR1\u2019 = [1 3 8 10 11]\n\nFor sample test case 2: \nIn this test case, After merging \u2018ARR2\u2019 into \u2018ARR1\u2019. \n\u2018ARR1\u2019 = [1 3 4 6 8 10]\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 255,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given two sorted integer arrays, `ARR1` of size `M` and `ARR2` of size `N`. Your task is to merge `ARR2` into `ARR1` such that `ARR1` becomes a single sorted array. Assume that `ARR1` has enough space to accommodate all elements from `ARR2` (i.e., `ARR1` has a size of `M + N`).",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= M, N <= 5000 (Sizes of ARR1 and ARR2)",
                    "1 <= ARR1[i], ARR2[i] <= 100000 (Element values)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "3 2\n1 2 3 0 0\n4 5",
                        "output": "1 2 3 4 5",
                        "explanation": "ARR1 initially contains [1, 2, 3, 0, 0] and ARR2 contains [4, 5]. After merging ARR2 into ARR1, the result is [1, 2, 3, 4, 5]."
                    },
                    {
                        "input": "4 2\n1 4 6 10 0 0\n2 5",
                        "output": "1 2 4 5 6 10",
                        "explanation": "ARR1 initially contains [1, 4, 6, 10, 0, 0] and ARR2 contains [2, 5]. After merging ARR2 into ARR1, the result is [1, 2, 4, 5, 6, 10]."
                    },
                    {
                        "input": "2 3\n1 10 0 0 0\n3 8 11",
                        "output": "1 3 8 10 11",
                        "explanation": "ARR1 initially contains [1, 10, 0, 0, 0] and ARR2 contains [3, 8, 11]. After merging ARR2 into ARR1, the result is [1, 3, 8, 10, 11]."
                    },
                    {
                        "input": "3 3\n3 4 6 0 0 0\n1 8 10",
                        "output": "1 3 4 6 8 10",
                        "explanation": "ARR1 initially contains [3, 4, 6, 0, 0, 0] and ARR2 contains [1, 8, 10]. After merging ARR2 into ARR1, the result is [1, 3, 4, 6, 8, 10]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Update the \u2018ARR1\u2019, and get the correct order.</p>",
            "<p>Think of a Greedy Approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n\tTime complexity: O(M+N)\r\n\tSpace complexity: O(1)\r\n\r\n\tWhere M and N are the number of elements in ARR1 and ARR2 respectively.\r\n*/\r\n\r\nvector<int> ninjaAndSortedArrays(vector<int>& arr1, vector<int>& arr2, int m, int n) {\r\n\r\n\tint i = m - 1;\r\n\tint j = n - 1;\r\n\tint lastIndex = m + n - 1;\r\n\r\n\twhile (j >= 0) {\r\n\r\n\t\tif (i >= 0 && arr1[i] > arr2[j]) {\r\n\t\t\tarr1[lastIndex] = arr1[i];\r\n\t\t\ti--;\r\n\t\t} else {\r\n\r\n\t\t\tarr1[lastIndex] = arr2[j];\r\n\t\t\tj--;\r\n\t\t}\r\n\r\n\t\tlastIndex--;\r\n\t}\r\n\treturn arr1;\r\n\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n\tTime complexity: O(M+N)\r\n\tSpace complexity: O(1)\r\n\r\n\tWhere M and N are the number of elements in ARR1 and ARR2 respectively.\r\n'''\r\n\r\ndef ninjaAndSortedArrays(arr1, arr2, m, n):\r\n    \r\n    i = m - 1\r\n    j = n - 1\r\n    lastIndex = m + n - 1\r\n    \r\n    while j >= 0:\r\n        \r\n        if i >= 0 and arr1[i] > arr2[j]:\r\n            arr1[lastIndex] = arr1[i]\r\n            i -= 1\r\n            \r\n        else:\r\n            arr1[lastIndex] = arr2[j]\r\n            j -= 1\r\n            \r\n        lastIndex -= 1\r\n        \r\n    return arr1",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n\tTime complexity: O(M+N)\r\n\tSpace complexity: O(1)\r\n\r\n\tWhere M and N are the number of elements in ARR1 and ARR2 respectively.\r\n*/\r\n\r\npublic class Solution {\r\n\tpublic static int[] ninjaAndSortedArrays(int arr1[], int arr2[], int m, int n) {\r\n\r\n\t\tint i = m - 1;\r\n\t\tint j = n - 1;\r\n\t\tint lastIndex = m + n - 1;\r\n\r\n\t\twhile (j >= 0) {\r\n\r\n\t\t\tif (i >= 0 && arr1[i] > arr2[j]) {\r\n\t\t\t\tarr1[lastIndex] = arr1[i];\r\n\t\t\t\ti--;\r\n\t\t\t} else {\r\n\r\n\t\t\t\tarr1[lastIndex] = arr2[j];\r\n\t\t\t\tj--;\r\n\t\t\t}\r\n\r\n\t\t\tlastIndex--;\r\n\t\t}\r\n\t\treturn arr1;\r\n\r\n\t}\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}