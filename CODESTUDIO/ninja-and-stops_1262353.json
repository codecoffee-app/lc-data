{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10670,
            "title": "Ninja And Stops",
            "titleSlug": "ninja-and-stops_1262353",
            "content": "<h4 id=\"ninja-wants-to-travel-from-his-house-to-a-given-destination-which-is-x-miles-from-his-house-along-the-way-he-needs-to-fill-gas-in-his-vehicle-he-knows-there-are-y-stations-in-his-way-he-also-knows-the-distance-between-the-station-and-his-house-and-how-many-liters-of-gas-that-particular-station-has\">Ninja wants to travel from his house to a given destination, which is \u2018X\u2019 miles from his house. Along the way, he needs to fill gas in his vehicle. He knows there are \u2018Y\u2019 stations in his way. He also knows the distance between the station and his house, and how many liters of gas that particular station has.</h4>\n\n<h4 id=\"ninja-starts-his-journey-with-an-infinite-capacity-of-the-tank-filled-with-z-liters-of-starting-fuel-suppose-his-vehicle-uses-1-liter-of-gas-for-every-mile-and-ninja-can-stop-at-any-gas-station-transfer-all-the-available-gas-at-that-station-and-then-move-ahead\">Ninja starts his journey, with an infinite capacity of the tank filled with \u2018Z\u2019 liters of starting fuel. Suppose his vehicle uses 1 liter of gas for every mile, and ninja can stop at any gas station, transfer all the available gas at that station and then move ahead.</h4>\n\n<h4 id=\"now-you-need-to-find-out-what-is-the-minimum-number-of-stops-ninja-must-make-to-reach-his-desired-destination\">Now, you need to find out what is the minimum number of stops Ninja must make to reach his desired destination.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Note that if Ninja reaches a particular stop with no fuel, it can still fill his tank at that stop and continue his journey ahead. Similarly, if he reaches his destination with no fuel, it is still considered to have arrived.\n</code></pre>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>Given X = 10, Y = 4, ARR[Y] = {[1, 6], [2, 3], [3, 3], [6, 4]} and Z = 1\nSo the path followed in this case would look like this:\n\nNinja starts with 1L of gas. \nDrives to the first gas station at position 1, using 1L of gas, then refueling with 6L of gas.\nThen, drive to position 6, using 5L of gas, then refueling 4L in the current 1L of gas, making it a total of 5L of gas.\nFinally, drive to the destination consuming 4L of gas.\nSo, Ninja made 2 refueling stops before reaching the destination. So, you need to print 2. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019 which denotes the number of test cases or queries to be run. Then the test cases are as follows.\n\nThe first line of each test case contains three space-separated integers \u2018X\u2019, \u2018Y\u2019 and \u2018Z\u2019, denoting distance in miles, number of gas stations, and starting fuel of the vehicle.\n\nThe next \u2018Y\u2019 lines of each test contain an array of \u2018Y\u2019 pairs where each pair denotes the distance from the house and available fuel for a refill.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, you need to return a single integer denoting the minimum stops made to reach the destination.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= X, Z  &lt;= 10^7\n0 &lt;= size of Y &lt;= 10^5\n1 &lt;= Y1, Y2 &lt;= 10^7\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n10 4 1\n1 6\n2 3\n3 3\n6 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>In the first test case, \nThe path followed, in this case, would look like:\n\nNinja starts with 1L of gas. \nDrives to the first gas station at position 1, using 1L of gas, then refuelling with 6L of gas.\nThen, drive to position 6, using 5L of gas, then refuelling 4L in the current 1L of gas, making it a total of 5L of gas.\nFinally, drive to the destination consuming 4L of gas. \nSo, Ninja made 2 refuelling stops before reaching the destination. So, you need to print 2. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n10 1 1\n5 10\n2 1 4\n1 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2:</h5>\n\n<pre><code>In the first test case, \nThe path followed, in this case, would look like this:\n\nNinja starts with 1L of gas. \nCannot drive to the first stop situated at position 5.\nSo, Ninja is not able to reach the destination. So, you need to print -1.\n\nIn the second test case, \nThe path followed, in this case, would look like:\n\nNinja starts with 4L of gas. \nReached the target at position 2 without refuelling the tank. So, you need to print 0.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "A vehicle needs to travel a distance of 'X' miles. It starts with 'Z' liters of fuel and consumes 1 liter per mile. There are 'Y' gas stations along the way, each with a known distance from the starting point and a specific amount of fuel available. The vehicle has an infinite tank capacity. Determine the minimum number of gas station stops required to reach the destination 'X'. If the destination is unreachable, return -1.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= X, Z <= 10^7",
                    "0 <= size of Y <= 10^5",
                    "1 <= Y1, Y2 <= 10^7"
                ],
                "testcases": [
                    {
                        "input": "target = 10, startFuel = 1, stations = [[1, 6], [2, 3], [3, 3], [6, 4]]",
                        "output": "2",
                        "explanation": "Start with 1L. Stop at station 1 (distance 1, fuel 6) -> Fuel = 1 - 1 + 6 = 6. Stop at station 6 (distance 6, fuel 4) -> Fuel = 6 - (6-1) + 4 = 5. Travel to destination (distance 10) -> Fuel = 5 - (10-6) = 1. 2 stops were made."
                    },
                    {
                        "input": "target = 10, startFuel = 1, stations = [[5, 10]]",
                        "output": "-1",
                        "explanation": "Cannot reach station at distance 5 with only 1 liter of fuel. Therefore, the destination is unreachable."
                    },
                    {
                        "input": "target = 2, startFuel = 4, stations = [[1, 4]]",
                        "output": "0",
                        "explanation": "Reaches target distance 2 with starting fuel 4. No stops are needed."
                    },
                    {
                        "input": "target = 100, startFuel = 10, stations = [[10, 60],[20,30],[30,30],[60,40]]",
                        "output": "2",
                        "explanation": "Start with 10L. Stop at station 10 (distance 10, fuel 60) -> Fuel = 10 - 10 + 60 = 60. Stop at station 60 (distance 60, fuel 40) -> Fuel = 60 - (60-10) + 40 = 50. Travel to destination (distance 100) -> Fuel = 50 - (100-60) = 10. 2 stops were made."
                    },
                    {
                        "input": "target = 10, startFuel = 0, stations = [[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]]",
                        "output": "-1",
                        "explanation": "Start with 0L, cant reach the first station at distance 1."
                    },
                    {
                        "input": "target = 200, startFuel = 50, stations = [[100,100],[150,50]]",
                        "output": "1",
                        "explanation": "Start with 50L. Stop at station 100 (distance 100, fuel 100) -> Fuel = 50 - (100 - 0 )+ 100 = 50. Travel to station 150 (distance 150) -> Fuel = 50. Now fuel =  0. Stop at station 150 (distance 150, fuel 50) -> Fuel = 50 - (150 - 100) + 50 = 50. Travel to target (distance 200) -> Fuel = 50 - (200 - 150) = 0. One stop was made."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of using recursion?</p>",
            "<p>Can you think of using Dynamic Programming?&nbsp;</p>",
            "<p>Can you think of using a max heap to store the capacity of each gas station that we have passed?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}