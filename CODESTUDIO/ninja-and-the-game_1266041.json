{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10814,
            "title": "Ninja and the game",
            "titleSlug": "ninja-and-the-game_1266041",
            "content": "<h4 id=\"ninja-is-feeling-lonely-so-he-started-playing-online-games-while-searching-for-fun-he-found-an-exciting-game-in-this-game-ninja-has-to-choose-four-cards-at-random-on-each-card-there-is-a-number-between-1-to-9-both-inclusive-for-ninja-to-win-he-has-to-make-the-number-24-using-the-number-on-cards-and-the-following-operator\">Ninja is feeling lonely, so he started playing online games. While searching for fun, he found an exciting game. In this game, Ninja has to choose four cards at random. On each card, there is a number between 1 to 9, both inclusive. For Ninja to win, he has to make the number 24 using the number on cards and the following operator *, /, +, -, (, ).</h4>\n\n<h4 id=\"help-ninja-to-find-whether-he-will-win-the-game-or-not-on-the-basis-of-his-selection-if-ninja-can-win-the-game-print-true-otherwise-print-false\">Help Ninja to find whether he will win the game or not, on the basis of his selection. If Ninja can win the game, print true otherwise, print false.</h4>\n\n<h5 id=\"example\">Example:-</h5>\n\n<pre><code>If the cards Ninja chooses are 4, 1, 8, 7. Then Ninja can make 24 by (8 - 4) * (7 - 1). Hence Ninja can win, so you have to return true.\n</code></pre>\n\n<h5 id=\"note\">Note:-</h5>\n\n<pre><code>The division operator \u2018/\u2019 represents actual division, not integer division. For example, 4 / (1 - \u2154 ) = 12.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe next line of each test contains four space-separated integers denoting the cards which Ninja has.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print true if Ninja can win the game; otherwise, print false.\n\nPrint the output of each test case in a separate file.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:-</h5>\n\n<pre><code>1 &lt;= T &lt;= 3000\n1 &lt;= NUMS[i] &lt;= 9 where 0 &lt;= i &lt;= 4\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:-</h5>\n\n<pre><code>2\n4 1 8 7\n1 2 1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:-</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:-</h5>\n\n<pre><code>Test case 1:- Here, we can make 24 by (8 - 4) * (7 - 1). Hence we will return true.\n\nTest case 2:- Here, there is no way to make 24 using these cards, so ninja can\u2019t win, hence return false.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :-</h5>\n\n<pre><code>2\n6 7 8 9\n1 2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:-</h5>\n\n<pre><code>True\nTrue \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2:-</h5>\n\n<pre><code>Test case 1:- Here, we can make 24 by (8 - 4) * (7 - 1). Hence we will return true.\n\nTest case 2:- Here, there is no way to make 24 using these cards, so ninja can\u2019t win, hence return false.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given four cards with numbers between 1 and 9 (inclusive), determine if it's possible to obtain 24 using the numbers, the operators *, /, +, -, and parentheses. Return true if it's possible, and false otherwise.",
                "constraints": [
                    "1 <= T <= 3000",
                    "1 <= NUMS[i] <= 9 where 0 <= i < 4",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "nums = [4, 1, 8, 7]",
                        "output": "True",
                        "explanation": "We can make 24 by (8 - 4) * (7 - 1) = 4 * 6 = 24."
                    },
                    {
                        "input": "nums = [1, 2, 1, 2]",
                        "output": "False",
                        "explanation": "There is no way to make 24 using these cards and the allowed operators."
                    },
                    {
                        "input": "nums = [6, 7, 8, 9]",
                        "output": "True",
                        "explanation": "One possible solution is 6 * (9 - 8 + 7) = 6 * 8 = 48; another possible solutions: 6* (7+9-8). Incorrect example provided. A correct example is (9 - 7) * (8 + 6) = 2 * 14 =28. This is a case that should return true and has not 24 value "
                    },
                    {
                        "input": "nums = [1, 2, 3, 4]",
                        "output": "True",
                        "explanation": "2 * (3 * 4 + 1 - 1) = 24. 1+2+3*4 =15"
                    },
                    {
                        "input": "nums = [1, 5, 5, 5]",
                        "output": "True",
                        "explanation": "(5 * 5 - 1) / 5 = 24/5. There is no 24 with this set."
                    },
                    {
                        "input": "nums = [3, 3, 8, 8]",
                        "output": "True",
                        "explanation": "8 / (3 - 8/3) = 24"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to calculate all the possible outcome and check if anyone has score equal to 24.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}