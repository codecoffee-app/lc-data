{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14466,
            "title": "Ninja and the magical sword",
            "titleSlug": "ninja-and-the-magical-sword_2179742",
            "content": "<h4 id=\"ninja-is-very-fond-of-strings-so-he-is-creating-a-new-type-of-string-help-him-in-creating-his-new-magical-string\">Ninja is very fond of strings so he is creating a new type of string, help him in creating his new magical string.</h4>\n\n<h4 id=\"you-are-given-a-string-s-of-length-s-and-an-integer-n-now-you-need-to-find-a-string-str-of-length-at-most-n-such-that-if-you-add-this-string-x-number-of-times-str-str-x-times-lets-say-it-as-xstr-then-the-frequency-of-each-character-in-xstr-string-should-be-greater-than-or-equal-to-the-frequency-of-the-same-character-in-the-string-s-xstr-should-cover-all-the-characters-of-string-s\">You are given a string \u2018S\u2019 of length |S| and an integer \u2018N\u2019. Now, you need to find a string &#39;STR&#39; of length at most \u2018N\u2019 such that if you add this string \u2018X\u2019 number of times(STR + STR +... X times)  let&#39;s say it as &#39;XSTR&#39; then the frequency of each character in &#39;XSTR&#39; string should be greater than or equal to the frequency of the same character in the string \u2018S\u2019. &#39;XSTR&#39; should cover all the characters of string S.</h4>\n\n<h4 id=\"help-ninja-in-finding-the-minimum-possible-value-of-x\">Help Ninja in finding the minimum possible value of \u2018X\u2019.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Given S = &quot;aaabbc&quot; and N = 4.\nFrequency of each character is &#39;a&#39; = 3, &#39;b&#39; = 2, and &#39;c&#39; = 1.\n\nIf we take \u2018STR\u2019 = &quot;aabc&quot; and add this 2 times i.e &quot;aabcaabc&quot; the frequency of each character will be &#39;a&#39; = 4, &#39;b&#39; = 2, &#39;c&#39; = 2. Here the frequency of each character is greater or equal to that of string \u2018S\u2019. i.e for &#39;a&#39; 4 &gt;= 3, &#39;b&#39; 2 &gt;= 2 and &#39;c&#39; 2 &gt;= 1.\nHence X = 2.\nWe can&#39;t find any other string &#39;STR&#39; of length N such that X &lt; 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. Then test cases follow:\n\nThe first line contains an integer \u2018N\u2019 representing the maximum length of string that ninja can write.\n\nThe second line contains a string \u2018S\u2019 representing the given string.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return an integer denoting the minimum possible value of &#39;X&#39;.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\nIt is guaranteed that the solution will always exist.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n1 &lt;= |S| &lt;= 10^5\n\nwhere &#39;S&#39; only contains lowercase letters i.e a-z.\nThe total number of distinct characters in &#39;S&#39; is always less than equal to N.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3\nababccb\n4\naaaaaaa    \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>For the first test case, we will take \u2018STR\u2019 = \u2018abc\u2019 and X = 3. So we are \u2018XSTR\u2019 = \u201cabcabcabc\u201d.\nFor the second test case, we will take \u2018STR\u2019 = \u201caaaa\u201d and X = 2. So we are \u2018XSTR\u2019 = \u201caaaaaaaa\u201d.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5\nninja\n6\nsuperduper\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string \u2018S\u2019 and an integer \u2018N\u2019, find the minimum integer \u2018X\u2019 such that repeating a string \u2018STR\u2019 (of length at most \u2018N\u2019) \u2018X\u2019 times (resulting in \u2018XSTR\u2019) satisfies the following conditions:\n\n1.  The frequency of each character in \u2018XSTR\u2019 is greater than or equal to the frequency of the same character in \u2018S\u2019.\n2.  \u2018XSTR\u2019 contains all characters present in \u2018S\u2019.\n\nIn essence, you need to construct a repeating string 'STR' and find the smallest number of times 'X' it needs to be repeated to cover the frequencies of the characters in the original string 'S'.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "1 <= |S| <= 10^5",
                    "\u2018S\u2019 only contains lowercase letters (a-z).",
                    "The total number of distinct characters in \u2018S\u2019 is always less than or equal to N."
                ],
                "testcases": [
                    {
                        "input": "3\nababccb",
                        "output": "3",
                        "explanation": "For the input string 'ababccb', a possible 'STR' is 'abc'. Repeating 'abc' three times ('abcabcabc') results in frequencies: a=3, b=3, c=3. These frequencies are greater than or equal to the frequencies in 'ababccb' (a=2, b=3, c=2). Thus, X=3."
                    },
                    {
                        "input": "4\naaaaaaa",
                        "output": "2",
                        "explanation": "For the input string 'aaaaaaa', a possible 'STR' is 'aaaa'. Repeating 'aaaa' twice ('aaaaaaaa') results in a frequency of a=8, which is greater than or equal to the frequency in 'aaaaaaa' (a=7). Thus, X=2."
                    },
                    {
                        "input": "5\nninja",
                        "output": "1",
                        "explanation": "For the input string 'ninja', we can take 'STR' as 'ninja' itself. Repeating it once results in 'ninja', which has the same frequencies as the input string. Therefore, X=1."
                    },
                    {
                        "input": "6\nsuperduper",
                        "output": "2",
                        "explanation": "For the input string 'superduper', a possible 'STR' is 'superd'. Repeating 'superd' twice makes sure that the resulting frequencies are greater or equal to the original string frequency."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find the minimum length string require for \u2018K\u2019 scrolls.</p>",
            "<p>Try to apply binary search on the value of \u2018K\u2019.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}