{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10638,
            "title": "Ninja and the Maze",
            "titleSlug": "ninja-and-the-maze_1262274",
            "content": "<h4 id=\"ninja-went-to-an-amusement-park-and-visited-a-maze-now-he-is-stuck-in-the-maze-he-can-go-in-any-direction-up-down-left-or-right-from-this-point-but-he-cannot-change-his-direction-of-motion-until-he-comes-across-a-wall-in-its-path-once-he-stops-he-can-choose-his-new-direction\">Ninja went to an amusement park and visited a maze. Now, he is stuck in the maze. He can go in any direction(Up, Down, Left, or Right) from this point, but he cannot change his direction of motion until he comes across a wall in its path. Once he stops, he can choose his new direction.</h4>\n\n<h4 id=\"now-you-are-given-ninja-s-starting-point-the-destination-he-wants-to-reach-and-the-maze-in-the-form-of-a-2d-matrix-you-need-to-find-out-if-ninja-can-reach-the-destination-from-the-starting-point-or-not\">Now, you are given Ninja\u2019s starting point, the destination he wants to reach, and the maze in the form of a 2D matrix. You need to find out if Ninja can reach the destination from the starting point or not.</h4>\n\n<h4 id=\"the-maze-is-represented-by-a-2d-array-1-means-ninja-came-across-a-wall-and-he-needs-to-stop-0-means-that-it-is-an-empty-space-and-he-can-keep-moving\">The maze is represented by a 2D array. \u20181\u2019 means Ninja came across a wall and he needs to stop. \u20180\u2019 means that it is an empty space and he can keep moving.</h4>\n\n<h4 id=\"the-coordinates-of-starting-point-and-destination-are-represented-by-row-and-column-numbers\">The coordinates of starting point and destination are represented by row and column numbers.</h4>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>Given maze: {[0, 0, 1], [1, 0, 0], [1, 0, 0]} \nStarting point: [2, 2]\nDestination: [0, 0]\n\nFor the above example maze will look like this:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/whatsapp-image-2021-03-16-at-11-32-14-3-8337.jpeg\" alt=\"maze\"></p>\n\n<pre><code>So, we can see there are 2 ways for Ninja to reach destination(D), from the starting point(SP). They are: [left -&gt; up -&gt; left] and [up -&gt; left -&gt; up -&gt; left].\nSo, you need to print true.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019 which denotes the number of test cases.\n\nThe first line of each test case contains two space-separated integers \u2018M\u2019 and \u2018N\u2019 denoting the dimensions of the maze.\n\nThe next \u2018M\u2019 lines contain \u2018N\u2019 space-separated integers each denoting the maze.\n\nThe next line of each test case contains two space-separated integers \u2018startX\u2019 and \u2018startY\u2019 denoting the coordinates of the starting point.\n\nThe last line of each test case contains two space-separated integers \u2018destX\u2019 and \u2018destY\u2019 denoting the coordinates of the destination.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, print a single line containing a single string containing \u2018True\u2019 if it is possible to reach the destination from the starting point and \u2018False\u2019 if it is not possible.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1 &lt;=T &lt;= 50\n1 &lt;= M,N &lt;= 100\n0 &lt;= MAZE[ i ] [ j ] &lt;= 1\n\nWhere MAZE[ i ][ j ] is the value of the maze. The starting point and destination will always lie in the maze and will be in empty spaces. \n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1</h5>\n\n<pre><code>1\n3 3\n0 0 1\n1 0 0\n1 0 0\n2 2\n0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code>True\n</code></pre>\n\n<h5 id=\"explanation\">Explanation</h5>\n\n<pre><code>Test Case 1: \nThe maze given in the test case will look like this:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/whatsapp-image-2021-03-16-at-11-32-14-3-8337.jpeg\" alt=\"maze\"></p>\n\n<pre><code>So, we can see there are 2 ways for Ninja to reach destination(D), from the starting point(SP). They are: [left -&gt; up -&gt; left] and [up -&gt; left -&gt; up -&gt; left].\nSo, you need to print true.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2</h5>\n\n<pre><code>2\n3 3\n0 0 1\n1 0 0\n1 0 1\n0 0\n1 2\n3 3\n1 0 1\n0 0 0\n1 0 1\n1 0\n2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>False\nFalse \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "A ninja is navigating a maze in an amusement park. Stuck within, the ninja can move in four directions: up, down, left, or right. The ninja continues moving in a chosen direction until a wall is encountered. Upon hitting a wall, the ninja can then choose a new direction. Given the maze layout, the ninja's starting point, and the desired destination, determine if the ninja can reach the destination from the starting point following the movement rules.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= M, N <= 100",
                    "0 <= MAZE[i][j] <= 1",
                    "The starting point and destination will always lie within the maze and be in empty spaces (value of 0)."
                ],
                "testcases": [
                    {
                        "input": "3 3\n0 0 1\n1 0 0\n1 0 0\n2 2\n0 0",
                        "output": "True",
                        "explanation": "The ninja starts at (2,2). One possible path to (0,0) is: move left until hitting the wall, then move up until hitting the wall, then move left to reach the destination. Therefore, the output is True."
                    },
                    {
                        "input": "3 3\n0 0 1\n1 0 0\n1 0 1\n0 0\n1 2",
                        "output": "False",
                        "explanation": "The ninja starts at (0,0) and needs to reach (1,2). No path exists given the walls' placements and ninja's movement restrictions. Therefore the output is False."
                    },
                    {
                        "input": "3 3\n1 0 1\n0 0 0\n1 0 1\n1 0\n2 1",
                        "output": "False",
                        "explanation": "The ninja starts at (1,0) and needs to reach (2,1). No path exists given the walls' placements and ninja's movement restrictions. Therefore the output is False."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Recursively check for every cell.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}