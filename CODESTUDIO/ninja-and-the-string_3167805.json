{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16498,
            "title": "Ninja And The String",
            "titleSlug": "ninja-and-the-string_3167805",
            "content": "<h4 id=\"ninja-has-given-a-string-s-of-lowercase-characters-of-size-n-he-also-has-provided-an-array-cost-where-cost-i-refers-to-the-cost-of-deleting-the-i-th-character-in-the-string\">Ninja has given a string &#39;S&#39; of lowercase characters of size &#39;N&#39;. He also has provided an array &#39;COST&#39; where &#39;COST[i]&#39; refers to the Cost of deleting the \u2018i\u2019th character in the string.</h4>\n\n<h4 id=\"ninja-doesnt-like-a-string-with-the-same-adjacent-characters-so-he-asked-you-to-help-him-transform-the-given-string-into-the-string-with-no-adjacent-repetitive-characters-by-deleting-some-characters-in-it\">Ninja doesn&#39;t like a string with the same adjacent characters, so he asked you to help him transform the given string into the string with no adjacent repetitive characters by deleting some characters in it.</h4>\n\n<h4 id=\"cost-of-deleting-some-characters-is-the-sum-of-costs-of-individual-deletion-of-characters-at-every-position-your-task-is-to-find-the-minimum-cost-needed-to-transform-the-string-with-no-adjacent-repetitive-characters\">Cost of deleting some characters is the sum of costs of individual deletion of characters at every position. Your task is to find the minimum cost needed to transform the string with no adjacent repetitive characters.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: &#39;S&#39; = &quot;babbc&quot;, &#39;COST&#39; = [1, 2, 3, 4, 5] \nOutput: 3\n\nBy deleting the third letter &#39;b&#39; with cost, 3 will transform the string into &#39;babc&#39;. This is the minimum possible cost to transform the string.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39;, denoting the number of test cases. \n\nFor each test case, the first line contains an integer &#39;N&#39; second line contains a string of size &#39;N&#39; and the last line contains the &#39;N&#39; elements in the array &#39;COST&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the minimum cost needed to transform the string.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n2 &lt;= &#39;N&#39; &lt;= 10^4\n1 &lt;= &#39;COST[i]&#39;&lt;= 10^4\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5\nabaac\n1 2 3 4 5\n4\nabcd\n4 5 3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first test case, By deleting the third letter &#39;a&#39; with cost, 3 will transform the string into \u2018abac\u2019. This is the minimum possible cost to transform the string.\n\nFor the second test case, all adjacent characters in the string are already unequal. Hence the cost will be 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n6\npqrrss\n7 2 3 4 5 6\n4\nxyyz\n1 3 7 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>8\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S' of lowercase characters of size 'N' and an array 'COST' where 'COST[i]' is the cost of deleting the i-th character in 'S', find the minimum cost to transform 'S' into a string with no adjacent repetitive characters. The cost is the sum of costs of individual character deletions.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 10",
                    "2 <= 'N' <= 10^4",
                    "1 <= 'COST[i]' <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "n = 5, s = \"abaac\", cost = [1, 2, 3, 4, 5]",
                        "output": "3",
                        "explanation": "Deleting the third letter 'a' with cost 3 transforms the string into 'abac'. This is the minimum possible cost."
                    },
                    {
                        "input": "n = 4, s = \"abcd\", cost = [4, 5, 3, 4]",
                        "output": "0",
                        "explanation": "All adjacent characters in the string are already unequal, so no deletions are needed."
                    },
                    {
                        "input": "n = 6, s = \"pqrrss\", cost = [7, 2, 3, 4, 5, 6]",
                        "output": "8",
                        "explanation": "Deleting 'r' (cost 3) and 's' (cost 5) results in 'pqrs', with a total cost of 8."
                    },
                    {
                        "input": "n = 4, s = \"xyyz\", cost = [1, 3, 7, 5]",
                        "output": "3",
                        "explanation": "Deleting the third letter 'y' with cost 7 can not get the minimal cost. Deleting the second letter 'y' with cost 3 will get the minimal cost."
                    },
                    {
                        "input": "n = 2, s = \"aa\", cost = [1, 2]",
                        "output": "1",
                        "explanation": "Deleting the first letter 'a' with cost 1 transforms the string into 'a'."
                    },
                    {
                        "input": "n = 3, s = \"abb\", cost = [1, 5, 2]",
                        "output": "2",
                        "explanation": "Deleting the third letter 'b' with cost 2 transforms the string into 'ab'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think how we can vanish a group of the same continuous characters with less cost.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}