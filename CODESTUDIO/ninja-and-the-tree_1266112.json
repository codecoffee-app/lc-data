{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10855,
            "title": "Ninja and the tree",
            "titleSlug": "ninja-and-the-tree_1266112",
            "content": "<h4 id=\"ninja-is-learning-tree-data-structure-these-days-while-learning-she-came-across-learn-about-the-binary-search-tree-she-found-bst-quite-interesting-she-decided-to-make-her-own-binary-search-tree-being-a-newbie-she-made-a-mistake-and-swap-two-nodes-of-the-binary-search-tree\">Ninja is learning tree data structure these days. While learning, she came across learn about the Binary Search tree. She found BST quite interesting. She decided to make her own Binary Search Tree. Being a newbie, she made a mistake and swap two nodes of the Binary Search Tree.</h4>\n\n<h4 id=\"your-responsibility-being-an-expert-and-a-good-friend-is-to-correct-the-binary-search-tree-made-by-ninja-and-recover-the-correct-binary-search-tree\">Your responsibility being an expert and a good friend is to correct the Binary Search Tree made by Ninja and recover the correct Binary Search Tree.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-with-the-following-properties\">A binary search tree (BST) is a binary tree data structure with the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h5 id=\"example\">Example</h5>\n\n<p><img src=\"https://files.codingninjas.in/graph-3-8457.png\" alt=\"\"></p>\n\n<pre><code>This is the binary search tree made by Ninja. But here, the left node of 8 is greater, and the right node is smaller.\nIf we swap the right and the left node of 8 Ninja\u2019s Binary Search Tree will become correct.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-2-8458.png\" alt=\"\"></p>\n\n<pre><code>This is the correct binary Search Tree.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line contains an Integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n</code></pre>\n\n<h5 id=\"example\">Example</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-4-8466.png\" alt=\"\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the recovered correct Binary Search Tree in level order form.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n2 &lt;= N &lt;= 5000\n0 &lt;= X &lt;= 2^31 - 1\n\nWhere &#39;N&#39; is the number of nodes in the BST and &#39;X&#39; is the value at the node.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n1 3 -1 -1  2 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3 1 -1 -1 2 -1 -1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-6-8464.png\" alt=\"\"></p>\n\n<pre><code>Here the highlighted nodes are swapped as 3 is the left child of 1, which can\u2019t be greater than 1.\nHence if we swap 1 and 3, we can recover Ninja\u2019s BST.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-5-8461.png\" alt=\"\"></p>\n\n<pre><code>Hence our answer will be 3 1 -1 -1 2 -1 -1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n3 1 4 -1 -1 2 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2 1 4 -1 -1 3 -1 -1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2:</h5>\n\n<pre><code>Test case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-9-8462.png\" alt=\"\"></p>\n\n<pre><code>In this case, the highlighted nodes are swapped as the right subtree of 3 has a value smaller than 3. If we swap 3 and 2, Ninja\u2019s BST will be correctly recovered.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-10-8463.png\" alt=\"\">.</p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) where two nodes have been accidentally swapped, your task is to recover the original, valid BST structure. You are provided with the root of the corrupted BST. Implement a function to identify and correct the swapped nodes to restore the BST property: for every node, all nodes in its left subtree have values smaller than the node's value, and all nodes in its right subtree have values larger than the node's value.",
                "constraints": [
                    "1 <= T <= 100",
                    "2 <= N <= 5000, where 'N' is the number of nodes in the BST.",
                    "0 <= X <= 2^31 - 1, where 'X' is the value at the node."
                ],
                "testcases": [
                    {
                        "input": "root = [1,3,null,null,2]",
                        "output": "[3,1,null,null,2]",
                        "explanation": "The original BST was corrupted with nodes 1 and 3 swapped. Swapping them back results in the correct BST: [3,1,null,null,2]. Level order traversal of this corrected BST is: 3 1 2 -1 -1 -1 -1."
                    },
                    {
                        "input": "root = [3,1,4,null,null,2]",
                        "output": "[2,1,4,null,null,3]",
                        "explanation": "In this test case, nodes 3 and 2 are swapped. Swapping them back results in the correct BST: [2,1,4,null,null,3]. Level order traversal is: 2 1 4 -1 -1 3 -1 -1"
                    },
                    {
                        "input": "root = [10,5,8,2,20]",
                        "output": "Example is ambigous, as the expected state of tree is not completely clear. Test Case requires further clarification to be valid.",
                        "explanation": "The expected tree for above input is not clear. This test case requires futher clarification"
                    },
                    {
                        "input": "root = [1,2,3,4,5,6,7]",
                        "output": "Example is ambigous, as the expected state of tree is not completely clear. Test Case requires further clarification to be valid.",
                        "explanation": "The expected tree for above input is not clear. This test case requires futher clarification"
                    },
                    {
                        "input": "root = [3, 1, null, null, 2]",
                        "output": "Example is ambigous, as the expected state of tree is not completely clear. Test Case requires further clarification to be valid.",
                        "explanation": "The expected tree for above input is not clear. This test case requires futher clarification"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think to do Inorder traversal as it traverse tree always in sorted way.</p>",
            "<p>Inorder traversal is already sorted in BST and only 2 nodes are swapped. So, we can recover the BST in some swaps rather than sorting it again.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}