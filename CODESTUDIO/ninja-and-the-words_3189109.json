{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16522,
            "title": "Ninja And The Words",
            "titleSlug": "ninja-and-the-words_3189109",
            "content": "<h4 id=\"ninja-has-given-a-list-of-unique-words-words-of-size-n-and-he-wants-to-find-all-the-words-in-the-list-formed-after-concatenating-two-or-more-words-in-the-same-list\">Ninja has given a list of unique words &#39;WORDS&#39; of size &#39;N&#39; and he wants to find all the words in the list formed after concatenating two or more words in the same list.</h4>\n\n<h4 id=\"as-ninjas-best-friend-he-asked-you-to-help-him-with-the-above-problem-so-your-task-is-to-find-all-words-in-the-list-which-are-formed-after-concatenating-two-or-more-words-in-the-same-list\">As Ninja&#39;s best friend, he asked you to help him with the above problem. So, your task is to find all words in the list which are formed after concatenating two or more words in the same list.</h4>\n\n<h4 id=\"print-words-in-any-order\">Print words in any order.</h4>\n\n<h4 id=\"note-one-word-can-be-concatenated-multiple-times-it-is-guaranteed-that-there-is-at-least-one-word-in-the-list-which-is-formed-after-concatenating-two-or-more-words\">Note: One word can be concatenated multiple times. It is guaranteed that there is at least one word in the list, which is formed after concatenating two or more words.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: &#39;WORDS&#39; = [&quot;ninjas&quot;, &quot;coding&quot;, &quot;codingninjas&quot;]\nOutput: [&quot;codingninjas&quot;]\n\nOnly word &quot;codingninjas&#39; is formed after concatenating two or more words in the list i.e &quot;coding&quot; and &quot;ninjas&quot;.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39;, denoting the number of test cases. \n\nThe first line contains an integer &#39;N&#39; size of the list &#39;WORDS&#39; for each test case. The next line contains &#39;N&#39; words\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print all the formed words after concatenating two or more words in the input list.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n2 &lt;= &#39;N&#39; &lt;= 10^2\n1 &lt;= &#39;WORDS[i].LENGTH&#39;&lt;= 10^2\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3\nninjas coding codingninjas\n4\ncat dog catdog catdogcat\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>codingninjas\ncatdog catdogcat\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first test case, the Only word &quot;codingninjas&#39; is formed after concatenating two or more words in the list, i.e., &quot;coding&quot; and &quot;ninjas&quot;.\n\nFor the second test case, the words &quot;catdog&quot; and &quot;catdogcat&quot; concatenate two or more words in the list.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4\nline input inputline inputlineline\n3\nsolution problem problemsolution\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>inputline inputlineline\nproblemsolution\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of unique words, identify and return all words that can be formed by concatenating two or more words from the same list.  A word can be concatenated with itself multiple times. It is guaranteed that there is at least one word in the list which is formed after concatenating two or more words.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 10^2",
                    "1 <= WORDS[i].LENGTH <= 10^2",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\nninjas coding codingninjas",
                        "output": "codingninjas",
                        "explanation": "The word 'codingninjas' is formed by concatenating 'coding' and 'ninjas'."
                    },
                    {
                        "input": "4\ncat dog catdog catdogcat",
                        "output": "catdog catdogcat",
                        "explanation": "The word 'catdog' is formed by concatenating 'cat' and 'dog'. The word 'catdogcat' is formed by concatenating 'cat', 'dog', and 'cat'."
                    },
                    {
                        "input": "4\nline input inputline inputlineline",
                        "output": "inputline inputlineline",
                        "explanation": "The word 'inputline' is formed by concatenating 'input' and 'line'. The word 'inputlineline' is formed by concatenating 'input', 'line' and 'line'."
                    },
                    {
                        "input": "3\nsolution problem problemsolution",
                        "output": "problemsolution",
                        "explanation": "The word 'problemsolution' is formed by concatenating 'problem' and 'solution'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you try to match all possible combinations recursively?</p>",
            "<p>Can you try to optimize the recursion by storing some immediate results?</p>",
            "<p>Can you do it iteratively?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}