{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16514,
            "title": "Ninja And The Workers",
            "titleSlug": "ninja-and-the-workers_3169341",
            "content": "<h4 id=\"ninja-is-the-steel-factory-owner-and-there-are-n-workers-working-at-that-factory-each-worker-has-his-own-working-time-and-it-is-provided-in-the-array-intervals-where-intervals-i-0-gives-the-start-time-of-the-ith-worker-and-intervals-i-1-gives-the-end-time-of-the-ith-worker\">Ninja is the steel factory owner, and there are &#39;N&#39; workers working at that factory. Each worker has his own working time, and it is provided in the array &#39;intervals&#39; where &#39;INTERVALS[i][0]&#39; gives the start time of the &#39;i&#39;th worker and &#39;INTERVALS[i][1]&#39; gives the end time of the &#39;i&#39;th worker.</h4>\n\n<h4 id=\"ninja-does-not-want-to-allow-more-than-one-worker-to-work-at-the-same-time-so-he-needs-your-help-to-find-the-minimum-number-of-workers-he-needs-to-reschedule-their-work-time-so-as-there-are-non-overlapping-working-times-in-any-two-workers\">Ninja does not want to allow more than one worker to work at the same time, so he needs your help to find the minimum number of workers he needs to reschedule their work time so as there are non-overlapping working times in any two workers.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: &#39;INTERVALS&#39; = [[1, 2], [1, 3], [2, 3], [3, 4]]\nOutput: 1\n\nAfter rescheduling the worker with the interval [1, 3] it is possible to get the non-overlapping working times.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39;, denoting the number of test cases. \n\nThe first line contains an integer &#39;N&#39; size of the list &#39;intervals&#39; next &#39;N&#39; lines will contain two integers, each start and end time for each worker.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the minimum number of workers needed to reschedule their work time so as there are non-overlapping working times in any two workers.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= &#39;N&#39; &lt;= 10^4\n&#39;INTERVALS[i].LENGTH&#39; == 2\n&#39;INTERVALS[i][0]&#39; &lt; &#39;INTERVALS[i][1]&#39;\n&#39;INTERVALS[i][j]&#39; &lt;= 10^9\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4\n1 2\n2 3\n1 3\n3 4\n3\n3 4\n4 5\n5 6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first test case, After rescheduling the worker with the interval [1, 3] it is possible to get the non-overlapping working times.\n\nFor the second test case, there are no overlapping time intervals. Hence we do not need to reschedule any worker&#39;s time.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5\n2 3\n4 5\n6 7\n2 4\n3 6\n4\n4 6\n4 7\n3 5\n3 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 23,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a set of time intervals representing the working times of 'N' workers in a steel factory, determine the minimum number of workers that need to have their work times rescheduled to ensure that no two workers are working concurrently. The input is provided as an array 'intervals', where 'intervals[i][0]' represents the start time and 'intervals[i][1]' represents the end time of the i-th worker's shift.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 10",
                    "1 <= 'N' <= 10^4",
                    "'INTERVALS[i][0]' < 'INTERVALS[i][1]'",
                    "'INTERVALS[i][j]' <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 4, intervals = [[1, 2], [1, 3], [2, 3], [3, 4]]",
                        "output": "1",
                        "explanation": "The intervals [1, 2], [2, 3], and [3, 4] do not overlap. However, the interval [1, 3] overlaps with [1, 2] and [2, 3]. Rescheduling the worker with interval [1, 3] resolves the overlap."
                    },
                    {
                        "input": "n = 3, intervals = [[3, 4], [4, 5], [5, 6]]",
                        "output": "0",
                        "explanation": "The intervals [3, 4], [4, 5], and [5, 6] do not overlap. No rescheduling is needed."
                    },
                    {
                        "input": "n = 5, intervals = [[2, 3], [4, 5], [6, 7], [2, 4], [3, 6]]",
                        "output": "2",
                        "explanation": "Intervals [2,3], [4,5], [6,7] are non overlapping, but [2,4] overlaps with [2,3], and [3,6] overlaps with [2,3], [4,5] and [6,7]. Need to reschedule [2,4] and [3,6]."
                    },
                    {
                        "input": "n = 4, intervals = [[4, 6], [4, 7], [3, 5], [3, 5]]",
                        "output": "3",
                        "explanation": "We have overlaps between [4,6] and [4,7] which require 1 reschedule. [3,5] and [3,5] also overlap, so we need another reschedule. [3,5] also overlap with [4,6] and [4,7]. The intervals [3,5] and [3,5] are basically same. so in total 3 reschedules are required"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you approach according to the ending point of each interval?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}