{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15646,
            "title": "Ninja And Theatre",
            "titleSlug": "ninja-and-theatre_2663292",
            "content": "<h4 id=\"the-lockdown-is-over-and-the-ninja-goes-to-see-a-movie-as-the-covid-is-not-entirely-over-ninja-decides-to-sit-in-a-seat-such-that-the-distance-between-him-and-the-closest-person-to-him-is-maximized\">The lockdown is over, and the Ninja goes to see a movie. As the covid is not entirely over, Ninja decides to sit in a seat such that the distance between him and the closest person to him is maximized.</h4>\n\n<h4 id=\"given-an-array-representing-a-row-of-seats-where-seats-i-1-represents-a-person-sitting-in-the-ith-seat-and-seats-i-0-represents-the-seat-is-empty-can-you-tell-ninja-the-maximum-possible-distance-to-the-closest-person\">Given an array representing a row of \u2018SEATS\u2019, where \u2018SEATS[i]\u2019 = 1 represents a person sitting in the ith seat and \u2018SEATS[i]\u2019 = 0 represents the seat is empty, can you tell ninja the maximum possible distance to the closest person.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>You are given \u2018SEATS\u2019 = {1, 0, 1, 0 , 0, 0, 1}. The answer will be 2 because if the ninja sits on the \u2018SEAT[4]\u2019, then the person on \u2018SEAT[2]\u2019 or the person on \u2018SEAT[6]\u2019 will be at a maximum distance of 2. If the ninja sits on any other empty seat, the nearest person&#39;s distance will be less than 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 representing the length of the \u2018SEATS\u2019 array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers representing the \u2018SEATS\u2019 array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer, representing the maximum possible distance to the closest person.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 \n1 &lt;= N &lt;= 5000\n0 &lt;= SEATS[I] &lt;= 1\n\nTime limit: 1 sec\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to input or print anything, as it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n7\n1 0 1 0 0 0 1\n7\n1 0 1 1 0 0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n3\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For the first test case, The answer will be 2 because if the ninja sits on the \u2018SEAT[4]\u2019, then the person on \u2018SEAT[2]\u2019 or the person on \u2018SEAT[6]\u2019 will be at a maximum distance of 2.\n\nFor the second test case, the answer will be 3 because if the ninja sits on the \u2018SEAT[6]\u2019, then the person on \u2018SEAT[3]\u2019 will be at a maximum distance of 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n1 0 0 1 0\n4\n1 0 1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -9,
            "dislikes": "NA",
            "rephrased": {
                "body": "After the lockdown, Ninja wants to watch a movie. To maintain social distancing, he wants to choose a seat that maximizes the distance to the nearest occupied seat. Given an array `SEATS` representing a row of seats, where `SEATS[i] = 1` indicates an occupied seat and `SEATS[i] = 0` indicates an empty seat, find the maximum possible distance Ninja can achieve to the closest person.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 5000",
                    "0 <= SEATS[I] <= 1",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "7\n1 0 1 0 0 0 1",
                        "output": "2",
                        "explanation": "If Ninja sits in seat 4 (index 3), the closest people are at seats 2 and 6 (indices 1 and 5), both at a distance of 2. This is the maximum possible distance."
                    },
                    {
                        "input": "7\n1 0 1 1 0 0 0",
                        "output": "3",
                        "explanation": "If Ninja sits in seat 6 (index 5), the closest person is at seat 3 (index 2), which is at a distance of 3. This results in the maximum possible distance."
                    },
                    {
                        "input": "5\n1 0 0 1 0",
                        "output": "1",
                        "explanation": "If Ninja sits in seat 2 (index 1) or seat 4 (index 3), the closest people are at seats 1 and 4 (indices 0 and 3) or seat 4 and 5 (indices 3 and 4) respectively.  The closest distance is 1 in both cases."
                    },
                    {
                        "input": "4\n1 0 1 1",
                        "output": "1",
                        "explanation": "If Ninja sits in seat 2 (index 1), the closest people are at seat 1 and 3 (indices 0 and 2), with distance 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to calculate the maximum possible difference in both directions.</p>",
            "<p>Keep track of ones.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}