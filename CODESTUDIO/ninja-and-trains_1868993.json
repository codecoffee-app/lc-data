{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14052,
            "title": "Ninja And Trains",
            "titleSlug": "ninja-and-trains_1868993",
            "content": "<h4 id=\"ninja-is-given-a-few-cities-and-few-connected-trains-each-city-has-a-specific-size-now-due-to-bad-weather-trains-from-certain-cities-get-canceled-given-a-value-x-if-the-size-of-the-city-is-less-than-x-then-all-incoming-and-outgoing-trains-from-the-station-get-canceled-now-ninja-s-task-is-to-determine-the-maximum-threshold-value-x-such-that-trains-from-cities-with-a-size-less-than-x-gets-canceled-then-there-should-exist-a-reachable-component-of-cities-in-the-network-of-size-at-least-k-a-subcomponent-of-the-city-network-is-considered-to-be-a-reachable-component-if-all-the-cities-in-that-network-are-connected-which-implies-all-the-trains-are-available-from-each-other-via-direct-or-connecting-trains\">Ninja is given a few cities and few connected Trains. Each city has a specific size. Now due to bad weather, trains from certain cities get canceled. Given a value X, if the size of the city is less than X, then all incoming and outgoing trains from the station get canceled. Now Ninja\u2019s task is to determine the maximum threshold value X such that trains from cities with a size less than X gets canceled, then there should exist a reachable component of cities in the network of size at least K. A subcomponent of the city network is considered to be a reachable component if all the cities in that network are connected, which implies all the trains are available from each other via direct or connecting trains.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer T, denoting the number of test cases.\n\nThe first line of each test case contains \u2018N\u2019, denoting the number of cities, \u2018M\u2019 denoting the number of trains, and \u2018K\u2019 denoting the size of the connected network of cities.\n\nThe second line of each test case contains &#39;N&#39; space-separated integers denoting the value associated with the i-th city.\n\nThe next &#39;M&#39; lines of each test case contains \u2018M\u2019 pairs (u, v), denoting a train available from city u to city v.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The first and only line of each test case contains the maximum threshold value X, if the maximum threshold value is infinite the return 10 ^ 9. If there is no connected network of cities of size at least K, then return -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5 \n1 &lt;= k &lt;= N &lt;= 10^5\n1 &lt;= M &lt;= 10^5\n1 &lt;= value of nodes &lt;= 10 ^ 9\n\nTime limit: 2 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n6 7 3\n100 150 68 138 32 22\n1 2\n2 3\n3 4\n4 5\n5 1\n4 6\n6 3\n4 5 3\n100 150 68 62 \n1 2\n3 4\n2 3\n4 1\n3 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>32\n68\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h5>\n\n<pre><code>In the first test case, we can traverse all the node\u2019s values starting from 150 and set them as \u2018X\u2019  and check if we remove it will the remaining nodes form a connected component of size at least K. Here we start from 150 and then go to 32. For X= 32, the required conditions are satisfied. For other values of X greater than 32, the conditions are not satisfied, so we return 32 as our answer.\n\nIn the second test case, we traverse all the node\u2019s values starting from 150. We can see that if we remove nodes whose values are less than it, then the connected component of size at least 3 is not maintained. So we further decrease X. Finally we reach the value of X = 68, for which given conditions are satisfied. So we return 68 as our answer.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4 4 2\n3 1 4 5\n1 2\n2 3\n3 4\n4 1\n5 5 3\n3 1 4 5 10\n1 2\n2 3\n3 4\n4 1\n2 5\n</code></pre>\n\n<p>##### Sample Output 2: </p>\n\n<pre><code>1\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a network of cities connected by trains, where each city has a size, determine the maximum threshold value 'X' such that if trains from cities with size less than 'X' are canceled, there still exists a reachable component of cities with a total size of at least 'K'. A reachable component is a set of cities where you can travel between any two cities in the component via trains. If the maximum threshold is infinite, return 10^9. If there is no such connected network of cities of size at least K after cancelling trains from cities with size less than X, return -1. You are given the size of each city in an array and the connections between cities (trains) are given in two arrays 'U' and 'V' such that the 'i'th train runs between city U[i] and V[i]. You are given the number of cities N and the minimum component size K.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= K <= N <= 10^5",
                    "1 <= M <= 10^5",
                    "1 <= value of nodes <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "arr=[100, 150, 68, 138, 32, 22], U=[1, 2, 3, 4, 5, 4, 6], V=[2, 3, 4, 5, 1, 6, 3], K=3",
                        "output": "32",
                        "explanation": "Starting from X=150 and decreasing it until we find a value where a connected component of size at least K=3 exists after removing nodes with values less than X. When X=32, cities with sizes >= 32 are [100, 150, 68, 138, 32]. The graph formed by these cities has a connected component of size >=3."
                    },
                    {
                        "input": "arr=[100, 150, 68, 62], U=[1, 3, 2, 4, 3], V=[2, 4, 3, 1, 1], K=3",
                        "output": "68",
                        "explanation": "Starting from X=150 and decreasing, we find that when X=68, the cities with sizes >= 68 are [100, 150, 68]. The subgraph formed has connected component of size at least K=3. With any value higher than that, it's not possible."
                    },
                    {
                        "input": "arr=[3, 1, 4, 5], U=[1, 2, 3, 4], V=[2, 3, 4, 1], K=2",
                        "output": "1",
                        "explanation": "When X=1, all cities remain and there is a connected component size of at least K=2"
                    },
                    {
                        "input": "arr=[3, 1, 4, 5, 10], U=[1, 2, 3, 4, 2], V=[2, 3, 4, 1, 5], K=3",
                        "output": "1",
                        "explanation": "When X = 1, all cities are considered. Since every city is connected to every other city the maximum threshold is 1."
                    },
                    {
                        "input": "arr=[1, 2, 3], U=[1], V=[2], K=3",
                        "output": "-1",
                        "explanation": "No matter what threshold we take there will be no connected component of size greater than or equal to 3."
                    },
                    {
                        "input": "arr=[1, 2, 3, 4, 5], U=[1, 2, 3, 4], V=[2, 3, 4, 5], K=4",
                        "output": "2",
                        "explanation": "When X = 2, then we have elements which are greater than or equal to 2, which are [2, 3, 4, 5]. And these create a connected components of size 4. This fulfills our condition."
                    },
                    {
                        "input": "arr=[1,2,3], U=[], V=[], K=2",
                        "output": "3",
                        "explanation": "When X=3, only city with value 3 remains. It does not form a connected component size of 2 so we move lower. When x=2, city with value 2 and 3 will remain but it is still not connected because there is no edges, hence at X=1, cities with value 1,2,3 will remain but still, there will be no edge. Since there is no edge the component will not be >= K and so return -1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you check for all node values?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}