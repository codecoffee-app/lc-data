{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9963,
            "title": "Ninja at the Gym       ",
            "titleSlug": "ninja-at-the-gym_1112624",
            "content": "<h4 id=\"ninja-has-recently-joined-the-gym-he-decides-to-lift-dumbbells-to-build-muscles-the-rack-contains-dumbbells-with-varying-weights-his-strategy-is-to-pick-a-dumbbell-randomly-from-the-rack-and-after-exercising-place-it-back-to-its-original-position-now-for-the-next-exercise-he-can-only-pick-dumbbells-that-are-heavier-and-positioned-right-to-the-previously-used-after-completing-all-the-exercises-he-has-to-tell-the-sum-of-weights-of-all-dumbbells-he-picked-to-his-trainer\">Ninja has recently joined the gym. He decides to lift dumbbells to build muscles. The rack contains dumbbells with varying weights. His strategy is to pick a dumbbell randomly from the rack and after exercising place it back to its original position. Now for the next exercise he can only pick dumbbells that are heavier and positioned right to the previously used. After completing all the exercises he has to tell the sum of weights of all dumbbells he picked to his trainer.</h4>\n\n<h4 id=\"in-order-to-impress-his-trainer-he-wants-this-sum-to-be-as-maximum-as-possible-as-ninja-is-saving-energy-for-exercises-he-asks-you-to-help-him-choose-dumbbells-can-you-help-ninja-to-impress-his-trainer\">In order to impress his trainer he wants this sum to be as maximum as possible. As Ninja is saving energy for exercises, he asks you to help him choose dumbbells. Can you help Ninja to impress his trainer?</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>If the \u2018RACK\u2019 contains dumbbells with weights [5, 1,  2, 8], then the possible ways to choose dumbbells according to the given conditions are: [ 5 ], [ 1 ], [ 2 ], [ 8 ], [ 5, 8 ], [ 1, 2 ], [ 1, 2, 8 ], [ 2, 8 ].  Lifting dumbbells with weights [ 5, 8 ] gives the maximum sum of 13.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then each test case follows.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of dumbbells in the RACK.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers, denoting the weights of the dumbbells.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the maximum weight Ninja can lift to impress his trainer as per given conditions.\n\nOutput for each test case will be printed in a new line. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 1000\n1 &lt;= RACK[i] &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4\n9 1 2 8 \n1\n8\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>11\n8\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h4>\n\n<pre><code>For the first test case:\n[ 9 ], [ 1 ], [ 2 ], [ 8 ], [ 2, 8 ], [ 1, 2, 8 ], [ 1, 2  ], [ 1, 8 ]  these are the possible increasing dumbbell weights in which there is only one way i.e  [  1 , 2 , 8 ] to have a maximum sum of 11.\n\nFor the second test case:\nThere is only one dumbbell so the maximum weight that can be lifted is 8.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n6\n1 2 3 4 5 6\n3\n3 2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>21\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 28,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja wants to maximize the total weight lifted in the gym. He can pick a dumbbell, exercise, and return it to its position. For the next exercise, he can only pick a dumbbell that is heavier and to the right of the previously used one. Find the maximum sum of weights Ninja can lift.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 1000",
                    "1 <= RACK[i] <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4\n9 1 2 8",
                        "output": "11",
                        "explanation": "One possible sequence to maximize the weight is [1, 2, 8], resulting in a sum of 11. Other sequences like [5], [8], [1,8] will result in lower sums."
                    },
                    {
                        "input": "1\n8",
                        "output": "8",
                        "explanation": "There is only one dumbbell, so the maximum weight is 8."
                    },
                    {
                        "input": "6\n1 2 3 4 5 6",
                        "output": "21",
                        "explanation": "The optimal sequence is [1, 2, 3, 4, 5, 6], which results in a sum of 21."
                    },
                    {
                        "input": "3\n3 2 1",
                        "output": "3",
                        "explanation": "The optimal sequence is [3], resulting in a sum of 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we solve this problem with the help of recursion?</p>",
            "<p>Can you try to memorize the subproblems?</p>",
            "<p>Initially, we were breaking the large problem into small problems but now, let us look at it in a different way. Can you solve the small problem first and then reach the final answer? Try to use the bottom-up approach now.&nbsp;&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}