{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12421,
            "title": "Ninja favourite string",
            "titleSlug": "ninja-favourite-string_1460386",
            "content": "<h4 id=\"some-time-ago-ninja-found-an-entertaining-string-s-consisting-of-only-lowercase-english-letters-but-he-did-not-like-the-string-if-two-same-characters-are-not-k-distant-apart\">Some time ago, Ninja found an entertaining string \u2018S\u2019 consisting of only lowercase English letters. But he did not like the string if two same characters are not \u2018K\u2019 distant apart.</h4>\n\n<h4 id=\"he-wants-your-help-to-know-whether-it-is-possible-to-rearrange-the-string-s-characters-such-that-all-two-similar-characters-are-at-least-k-distance-apart\">He wants your help to know whether it is possible to rearrange the string\u2019s characters such that all two similar characters are at least \u2018K\u2019 distance apart.</h4>\n\n<h4 id=\"return-1-if-it-is-possible-to-make-such-string-else-return-0\">Return 1 if it is possible to make such string else return 0.</h4>\n\n<h4 id=\"for-example-let-s-aabc-and-k-1-then-we-need-to-rearrange-s-as-two-a-are-not-k-distance-apart-after-rearranging-we-can-write-abac-or-abca-and-return-1\">For example: Let \u2018S\u2019 = \u201caabc\u201d and \u2018K\u2019 = 1, then we need to rearrange \u2018S\u2019 as two \u2018a\u2019 are not \u2018K\u2019 distance apart, after rearranging we can write \u201cabac\u201d or \u201cabca\u201d and return 1.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains a single integer \u2018K\u2019 denoting the distance between the same characters.\n\nThe second line of each test case contains a string \u2018S\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print an integer 1 if it is possible to arrange the string else print 0.\n\nThe output for each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 5000\n1 &lt;= K &lt;= N\n\nWhere \u2018N\u2019 is the length of the string \u2018S\u2019.\n\nTime limit: 1 sec\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1\naabbcc\n2\nabcccd\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1 :</h5>\n\n<pre><code>Test Case 1: We can rearrange \u201caabbcc\u201d as \u201ccbacba\u201d all the same characters are at least one distance apart and return 1. \n\nTest Case 2:  We can rearrange \u201cabcccd\u201d as \u201ccdcbca\u201d all the same characters are at least 2 distance apart and return 1. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3\naaacccb\n2\naaczcbcab\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S' consisting of lowercase English letters, determine if it is possible to rearrange the characters of 'S' such that any two identical characters are at least 'K' positions apart. Return 1 if such a rearrangement is possible, otherwise return 0.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 5000",
                    "1 <= K <= N",
                    "Where \u2018N\u2019 is the length of the string \u2018S\u2019."
                ],
                "testcases": [
                    {
                        "input": "1\naabbcc",
                        "output": "1",
                        "explanation": "For K=1, the string 'aabbcc' can be rearranged as 'cbacba', ensuring that all identical characters are at least one position apart. Therefore, the output is 1."
                    },
                    {
                        "input": "2\nabcccd",
                        "output": "1",
                        "explanation": "For K=2, the string 'abcccd' can be rearranged as 'cdcbca', ensuring that all identical characters are at least two positions apart.  Therefore, the output is 1."
                    },
                    {
                        "input": "3\naaacccb",
                        "output": "0",
                        "explanation": "For K=3, the string 'aaacccb' cannot be rearranged to have at least 3 characters between same characters. 'a' and 'c' characters are appearing many times compared to 'b' and can not be arranged according to problem constraints."
                    },
                    {
                        "input": "2\naaczcbcab",
                        "output": "1",
                        "explanation": "For K=2, the string 'aaczcbcab' can be rearranged such that the distance between same characters is at least 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find which character will be placed at a particular place.</p>",
            "<p>Try to place those characters first whose frequency is maximum.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}