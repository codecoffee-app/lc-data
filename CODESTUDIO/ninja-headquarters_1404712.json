{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12277,
            "title": "Ninja headquarters",
            "titleSlug": "ninja-headquarters_1404712",
            "content": "<h4 id=\"coding-ninjas-are-planning-to-build-their-very-first-ninja-headquarters-there-are-a-total-of-n-different-ninja-offices-where-the-i-th-office-is-located-at-the-x-i-y-i-coordinate-in-the-x-y-plane-and-has-val-i-value-associated-with-it-let-an-integer-range-denotes-the-maximum-distance-in-which-each-office-can-provide-its-services\">Coding ninjas are planning to build their very first ninja headquarters. There are a total of \u2018N\u2019 different ninja offices, where the i-th office is located at the (\u2018X[i]\u2019, \u2018Y[i]\u2019) coordinate in the X-Y plane and has \u2018val[i]\u2019 value associated with it. Let an integer \u2018range\u2019 denotes the maximum distance in which each office can provide its services.</h4>\n\n<h4 id=\"the-number-of-services-offered-by-each-office-decreases-as-the-distance-increases-for-any-coordinate-x-y-in-the-x-y-plane-suppose-the-distance-of-this-coordinate-from-the-i-th-office-is-dist-then-the-number-of-services-offered-by-the-i-th-office-at-x-y-is-the-floor-of-val-i-1-dist-if-dist-is-less-than-or-equal-to-range-and-0-services-otherwise\">The number of services offered by each office decreases as the distance increases. For any coordinate (X, Y) in the X-Y plane, suppose the distance of this coordinate from the i-th office is \u2018dist\u2019, then the number of services offered by the i-th office at (X, Y) is the floor of \u2018val[i] / (1 + dist)\u2019 if \u2018dist\u2019 is less than or equal to \u2018range\u2019, and 0 services otherwise.</h4>\n\n<h4 id=\"coding-ninjas-want-to-build-their-ninja-headquarters-on-a-coordinate-where-the-sum-of-the-number-of-services-offered-by-each-office-is-the-maximum-as-a-member-of-the-technical-staff-your-task-is-to-find-the-required-coordinate-on-the-x-y-plane\">Coding ninjas want to build their ninja headquarters on a coordinate where the sum of the number of services offered by each office is the maximum. As a member of the technical staff, your task is to find the required coordinate on the X-Y plane.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1) All the coordinates are integral coordinates on the X-Y plane.\n2) The distance between any two coordinates is the euclidean distance.\n3) There can be multiple offices located on the same coordinate.\n4) You are allowed to build the ninja headquarters on the coordinate having ninja offices.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains a single integer, \u2018N\u2019, where \u2018N\u2019 denotes the number of ninja offices.\n\nThe second line of each test case contains a single integer, \u2018range\u2019, where \u2018range\u2019 denotes the maximum distance in which each office can provide its services.\n\nThe next \u2018N\u2019 lines of each test case contain three space-separated integers, \u2018X\u2019, \u2018Y\u2019, and \u2018val\u2019, where (\u2018X\u2019, \u2018Y\u2019) denotes the coordinate where the ninja office is located, and \u2018val\u2019 denotes the value associated with that office.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, print the integral coordinate where the sum of the number of services offered by each office is the maximum.\n\nIf there are multiple coordinates with the same number of services, print the lexicographically minimum coordinate.\n\nA coordinate (X1, Y1) is lexicographically smaller than (X2, Y2) if either X1 is less than X2 or X1 is the same as X2 and Y1 is less than Y2.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 25\n0 &lt;= X[i], Y[i] &lt;= 25\n0 &lt;= val[i] &lt;= 10 ^ 5\n1 &lt;= range &lt;= 30\n\nTime Limit: 1Sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n4\n1\n0 1 2\n1 0 5\n0 0 7\n1 1 3\n5\n3\n1 2 1\n2 3 9\n1 4 5\n4 0 3\n5 3 5\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>0 0\n2 3\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h4>\n\n<pre><code>Test Case 1 :  \nThere are four ninja offices. The location of each office in the X-Y plane is,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image-1-8980.png\" alt=\"1\"></p>\n\n<pre><code>Locations of ninja offices are marked in red color, and the location of ninja headquarters is marked in black color.\nThe sum of the number of services offered by each office is maximum at point (0, 0), and it is lexicographically the lowest coordinate.\n\nTest Case 2 : \nThere are five ninja offices. The location of each office in the X-Y plane is,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image-2-8979.png\" alt=\"1\"></p>\n\n<pre><code>Locations of ninja offices are marked in red color, and the location of ninja headquarters is marked in black color.\nThe sum of the number of services offered by each office is maximum at point (2, 3), and it is lexicographically the lowest coordinate.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>1\n5\n2\n2 2 4\n2 2 1\n2 2 7\n2 2 6\n2 2 3\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>2 2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h5>\n\n<pre><code>Test Case 1 :  \nThere are five ninja offices. The location of each office in the X-Y plane is,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image-3-8978.png\" alt=\"1\"></p>\n\n<pre><code>Locations of ninja offices are marked in red color, and the location of ninja headquarters is marked in black color.\nThe sum of the number of services offered by each office is maximum at point (2, 2), and it is lexicographically the lowest coordinate.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Coding Ninjas are establishing their first headquarters. Given the coordinates (X[i], Y[i]) and service value (val[i]) of N ninja offices, along with a maximum service range, determine the optimal location (X, Y) for the headquarters. The optimal location maximizes the sum of services offered by all offices, where the service offered by the i-th office at (X, Y) is floor(val[i] / (1 + dist)) if dist <= range, and 0 otherwise. 'dist' is the Euclidean distance between (X, Y) and (X[i], Y[i]). If multiple locations maximize the service sum, choose the lexicographically smallest coordinate.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 25",
                    "0 <= X[i], Y[i] <= 25",
                    "0 <= val[i] <= 10 ^ 5",
                    "1 <= range <= 30"
                ],
                "testcases": [
                    {
                        "input": "n = 4, range = 1, x = [0, 1, 0, 1], y = [1, 0, 0, 1], val = [2, 5, 7, 3]",
                        "output": "0 0",
                        "explanation": "The sum of the number of services offered by each office is maximum at point (0, 0), and it is lexicographically the lowest coordinate. (0,0) receives floor(2/(1+sqrt(1)))=1, floor(5/(1+sqrt(2)))=2, floor(7/(1+0))=7, floor(3/(1+sqrt(2)))=1 giving total of 11. other points e.g. (1,1) gives floor(2/(1+0))=2, floor(5/(1+sqrt(2)))=2, floor(7/(1+sqrt(2)))=2, floor(3/(1+0))=3 giving total of 9."
                    },
                    {
                        "input": "n = 5, range = 3, x = [1, 2, 1, 4, 5], y = [2, 3, 4, 0, 3], val = [1, 9, 5, 3, 5]",
                        "output": "2 3",
                        "explanation": "The sum of the number of services offered by each office is maximum at point (2, 3), and it is lexicographically the lowest coordinate."
                    },
                    {
                        "input": "n = 5, range = 2, x = [2, 2, 2, 2, 2], y = [2, 2, 2, 2, 2], val = [4, 1, 7, 6, 3]",
                        "output": "2 2",
                        "explanation": "The sum of the number of services offered by each office is maximum at point (2, 2), and it is lexicographically the lowest coordinate. All offices are located at (2,2) so the total service is (4+1+7+6+3)/(1+0) = 21 which is maximum at (2,2)."
                    },
                    {
                        "input": "n = 2, range = 5, x = [0, 5], y = [0, 5], val = [100, 100]",
                        "output": "0 0",
                        "explanation": "Headquarters is located on coordinate where the sum of the number of services offered by each office is the maximum and lexicographically minimum."
                    },
                    {
                        "input": "n = 3, range = 10, x = [1, 2, 3], y = [1, 2, 3], val = [10, 20, 30]",
                        "output": "1 1",
                        "explanation": "Headquarters is located on coordinate where the sum of the number of services offered by each office is the maximum and lexicographically minimum."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the fact that the number of services offered by any office decreases as the distance increases.</p>",
            "<p>Do a Breadth-first search from the coordinates where ninja offices are located.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}