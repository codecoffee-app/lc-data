{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 17868,
            "title": "Ninja in Evil Land",
            "titleSlug": "ninja-in-evil-land_3963321",
            "content": "<h4 id=\"recently-ninja-has-moved-to-an-evil-land-in-this-land-there-is-only-one-bank-which-offers-n-savings-plans-numbered-1-through-n-the-interest-factors-are-given-in-form-of-array-arr\">Recently, Ninja has moved to an evil land. In this land, there is only one bank, which offers \u2018N\u2019 savings plans (numbered 1 through \u2018N\u2019). The interest factors are given in form of array \u2018ARR\u2019.</h4>\n\n<h4 id=\"initially-ninja-has-1-coin-in-his-account-he-may-choose-bank-plans-for-as-long-as-he-wishes-in-any-order-each-plan-may-be-chosen-any-number-of-times-for-each-valid-i-whenever-ninja-chooses-the-i-th-savings-plan-the-number-of-coins-in-his-bank-account-gets-multiplied-by-the-interest-factor-arr-i-of-this-plan-whenever-he-chooses-this-plan-again-the-number-of-coins-is-multiplied-by-arr-i-again\">Initially, Ninja has 1 coin in his account. He may choose bank plans for as long as he wishes, in any order; each plan may be chosen any number of times. For each valid \u2018i\u2019, whenever Ninja chooses the i-th savings plan, the number of coins in his bank account gets multiplied by the interest factor \u2018ARR[i]\u2019 of this plan (whenever he chooses this plan again, the number of coins is multiplied by \u2018ARR[i]\u2019 again).</h4>\n\n<h4 id=\"since-the-bank-in-the-evil-land-is-evil-it-always-stores-the-number-of-coins-in-each-account-modulo-m-m-is-a-prime-number-you-need-to-remove-some-possibly-none-or-all-plans-in-such-a-way-that-ninja-s-account-may-not-ever-contain-an-amount-exactly-equal-to-f-which-is-given-in-input-find-the-minimum-number-of-plans-you-must-remove\">Since the bank in the evil land is evil, it always stores the number of coins in each account modulo \u2018M\u2019. (\u2018M\u2019 is a prime number). You need to remove some (possibly none or all) plans in such a way that Ninja\u2019s account may not ever contain an amount exactly equal to \u2018F\u2019 (which is given in input). Find the minimum number of plans you must remove.</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>Let \u2018N\u2019 = 2, \u2018M\u2019 = 5, \u2018F\u2019 = 3 and \u2018ARR\u2019 = [2, 4].\nNinja\u2019s account can contain 3 coins ((2 * 4) % 5 = 3), if he chooses Plan 1 and Plan 2. It is enough to remove Plan 1 as he can then only multiply the number of coins in his account by 4.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39;, which denotes the number of test cases.\n\nThe next line contains three integers \u2018N\u2019, \u2018M\u2019 and \u2018F\u2019 denoting the number of Plans, Modulo number and coins which Ninja\u2019s bank cannot contain.\n\nThe next line contains \u2018N\u2019 space-separated integers representing an array of interest factors.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the minimum number of plans you must remove.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 T \u2264 10\n1 \u2264 N \u2264 5000\n1 \u2264 M \u2264 10000\n0 \u2264 F &lt; M, F \u2260 1\n0 \u2264 ARR[i] &lt; M\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2 5 3\n2 4\n2 3 2\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1 :</h5>\n\n<pre><code>Test Case 1:\nNinja\u2019s account can contain 3 coins ((2 * 4) % 5 = 3), if he chooses Plan 1 and Plan 2. It is enough to remove Plan 1 as he can then only multiply the number of coins in his account by 4. Hence the answer to this test case is 1.\n\nTest Case 2:\nNinja\u2019s account can contain 2 coins if he chooses Plan 2. So it is enough to remove Plan 2 because he will get only 1 coin from Plan 1. Hence the answer to this test case is 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5 5 0\n1 4 0 3 2\n2 5 2\n2 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2 :</h5>\n\n<pre><code>Test Case 1:\nNinja\u2019s account can contain 0 coin if he choosed Plan 3. So it is enough to remove Plan 3 he can\u2019t get 0 no matter what plans he chose. Hence the anwer to this test case is 1.\n\nTest Case 2:\nNinja\u2019s account can contain 2 coins if he chooses Plan 2((3 * 3 * 3) % 5 = 2), Plan 1(2 % 5 = 2) and also if he choosed both plans((2 * 2 * 3) % 5 = 2). So we need to remove all Plans. Hence the anwer to this test case is 2.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja has arrived in an evil land with a single bank offering 'N' savings plans. Initially, he has 1 coin. Each plan 'i' has an interest factor 'ARR[i]'.  He can choose plans any number of times, multiplying his coins by ARR[i] each time he chooses plan 'i'. The bank stores the coin count modulo 'M', a prime number. The goal is to determine the minimum number of plans Ninja must remove so that his account never contains exactly 'F' coins.",
                "constraints": [
                    "1 \u2264 T \u2264 10",
                    "1 \u2264 N \u2264 5000",
                    "1 \u2264 M \u2264 10000",
                    "0 \u2264 F < M, F \u2260 1",
                    "0 \u2264 ARR[i] < M",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n2 5 3\n2 4\n2 3 2\n1 2",
                        "output": "1\n1",
                        "explanation": "Test Case 1: Ninja can achieve 3 coins by selecting Plan 1 and Plan 2 (2 * 4 % 5 = 3). Removing Plan 1 prevents him from reaching 3.\nTest Case 2: Selecting Plan 2 yields 2 coins. Removing Plan 2 ensures he can only have 1 coin."
                    },
                    {
                        "input": "2\n5 5 0\n1 4 0 3 2\n2 5 2\n2 3",
                        "output": "1\n2",
                        "explanation": "Test Case 1: Plan 3 provides an interest factor of 0. Removing Plan 3 stops Ninja from getting 0.\nTest Case 2: It is possible to get 2 coins using only plan 1. Selecting Plan 2 many times results in 2, So we must remove both plans to prevent him from getting 2 coins."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Euler Totient Function, Primitive root and Fermat little theorem.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}