{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12576,
            "title": "NINJA\u2019S AFFAIR",
            "titleSlug": "ninja-s-affair_1466954",
            "content": "<h4 id=\"ninja-started-using-a-dating-app-and-he-got-two-matches-now-ninja-becomes-greedy-and-thinks-of-dating-both-of-them-at-the-same-time-so-he-wants-to-check-the-number-of-the-affair-points-from-which-the-distance-between-ninja-and-both-the-matches-becomes-equal\">Ninja started using a dating app and he got two matches. Now Ninja becomes greedy and thinks of dating both of them at the same time. So he wants to check the number of the affair points from which the distance between Ninja and both the matches becomes equal.</h4>\n\n<h4 id=\"given-a-2d-array-list-distance-i-xi-yi-of-size-n-x-2-an-affair-point-is-defined-as-a-tuple-of-points-i-j-k-such-that-distance-between-i-and-j-equals-the-distance-between-i-and-k\">Given a 2D array/list DISTANCE[i] = [Xi, Yi] of size &#39;N&#39; x 2, an affair point is defined as a tuple of points ( I, J, K ) such that distance between \u2018I\u2019 and \u2018J\u2019 equals the distance between \u2018I\u2019 and \u2018K\u2019.</h4>\n\n<h4 id=\"as-ninja-is-busy-getting-ready-for-his-date-he-asks-you-for-help-so-your-task-is-to-find-the-numbers-of-affair-points\">As Ninja is busy getting ready for his date, he asks you for help. So your task is to find the numbers of affair points.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. The distance between two points (X1, Y1) and (X2, Y2) is calculated as [ (X1 - X2) ^ 2 + (Y1 - Y2) ^ 2 ] i.e without a square root. \n2. The order of tuples matters.\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Suppose the given &#39;DISTANCE&#39; array/list is [ [ 0, 0 ], [ 1, 0 ], [ 2, 0 ] ]. We return \u20182\u2019as the answer as only two affair points are there as follows:  \n\n[ [ 1, 0 ], [ 0, 0 ], [ 2, 0 ] as ( ( 0 - 1) * ( 0 - 1 ) + (0 - 0 ) * ( 0 - 0 ) = ( 2 - 1 ) * ( 2 - 1 ) + ( 0 - 0 ) * ( 0 - 0 ) = 1\nDistance of [1, 0] is same for [0, 0] and [2, 0].\n\n[ [ 1, 0 ], [ 2, 0 ], [ 0, 0 ] ] as ( ( 2 - 1 ) * ( 2 - 1 ) + ( 0 - 0 ) * ( 0 - 0 ) = ( 0- 1 ) * ( 0 - 1 ) + ( 0 - 0 ) * ( 0 - 0 )\nDistance of [1, 0] is same for [2, 0] and [0, 0].\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains the \u2018T\u2019 number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the number of points in the \u2018DISTANCE\u2019 list/array. Then, \u2018N\u2019 lines follow.\n\nEach line contains two space-separated integers denoting the points \u2018Xi, Yi\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the total number of possible affair points.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 50\n1 &lt;= \u2018N\u2019 &lt;= 100\n-10000 &lt;= \u2018DISTANCE[i][0]\u2019, &#39;DISTANCE[i][1] &lt;= 10000   \n\nWhere \u2018T\u2019 represents the number of test cases, \u2018N\u2019 represents the size of the \u2018DISTANCE\u2019 array/list, and &#39;DISTANCE[i][0]&#39; represents the point &#39;Xi&#39; and &#39;DISTANCE[i][1]&#39; represents the point &#39;Yi&#39;.\n\nTime Limit: 1 sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n3\n3 0\n1 0\n2 0\n3\n1 1\n2 2\n3 3\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>2\n2\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h4>\n\n<pre><code>Test Case 1:\n\nThe  &#39;DISTANCE&#39; array/list is [ [ 3, 0 ], [ 1, 0 ], [ 2, 0 ] ]. We return \u20182\u2019 as the answer as only two affair points are there i.e  [ [ 2, 0 ], [ 1, 0 ], [ 3, 0 ] ] and [ [ 2, 0 ], [ 3, 0 ], [ 1, 0 ] ].\nFor the first affair point, \u2018I\u2019 is [ 2, 0 ], \u2018J\u2019 is[ 1, 0 ] and \u2018K\u2019  is [ 3, 0 ].\nFor the second affair point, \u2018I\u2019 is [ 2, 0 ], \u2018J\u2019 is[ 3, 0 ] and \u2018K\u2019 is[ 1, 0 ]. \nBy using the distance formula, we can say that distance between \u2018I\u2019 to \u2018J\u2019 and \u2018I\u2019 to \u2018K\u2019 is equal.\n\nTest Case 2:\n\nThe &#39;DISTANCE&#39; array is [ [ 1, 1 ], [ 2, 2 ], [ 3, 3 ] ]. We return \u20184\u2019 as the answer as only two affair points are there i.e  [ [ 2, 2 ], [ 1, 1 ], [ 3, 3 ] ] and [ [ 2, 2 ], [ 3, 3 ], [ 1, 1 ] ]. \nBy using distance formula we can say that distance between \u2018I\u2019 to \u2018J\u2019 and \u2018I\u2019 to \u2018K\u2019 is equal.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n2\n1 1\n2 2\n4\n2 2\n1 1\n3 3\n4 4\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>0\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja is using a dating app and wants to date two matches simultaneously. He needs to find 'affair points' - locations where his distance to both matches is the same. Given a list of point coordinates, `DISTANCE[i] = [Xi, Yi]`, an affair point is a tuple `(I, J, K)` where the distance between point `I` and `J` equals the distance between point `I` and `K`. Calculate the number of these affair points.",
                "constraints": [
                    "1 <= T <= 50 (T: number of test cases)",
                    "1 <= N <= 100 (N: size of the DISTANCE array/list)",
                    "-10000 <= DISTANCE[i][0], DISTANCE[i][1] <= 10000 (Coordinate values)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n3\n3 0\n1 0\n2 0\n3\n1 1\n2 2\n3 3",
                        "output": "2\n2",
                        "explanation": "Test Case 1:\nThe points are [[3, 0], [1, 0], [2, 0]]. The affair points are [[2, 0], [1, 0], [3, 0]] and [[2, 0], [3, 0], [1, 0]]. In each, the distance from the first point to the second equals the distance from the first to the third.\n\nTest Case 2:\nThe points are [[1, 1], [2, 2], [3, 3]]. The affair points are [[2, 2], [1, 1], [3, 3]] and [[2, 2], [3, 3], [1, 1]]. Again, distances are equal."
                    },
                    {
                        "input": "2\n2\n1 1\n2 2\n4\n2 2\n1 1\n3 3\n4 4",
                        "output": "0\n4",
                        "explanation": "Test Case 1:\nThe points are [[1, 1], [2, 2]]. There are no combinations where the distance from one point to the other two are equal.\n\nTest Case 2:\nThe points are [[2, 2], [1, 1], [3, 3], [4, 4]]. The affair points combinations exist and result in a count of 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>Can you check all the possible combinations?</strong></p>",
            "<p><strong>Can you think of preprocessing the distances for further use in counting?</strong></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}