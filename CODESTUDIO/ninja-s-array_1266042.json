{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10815,
            "title": "NINJA\u2019S ARRAY",
            "titleSlug": "ninja-s-array_1266042",
            "content": "<h4 id=\"ninja-developed-his-own-coding-platform-and-he-wants-all-the-questions-of-the-array-to-be-uploaded-on-his-platform-now-he-wants-to-create-test-cases-of-problems-but-as-usual-he-uses-his-own-ninja-technique-for-selecting-the-array-and-call-such-arrays-as-ninja-arrays-he-has-two-arrays-one-of-them-has-distinct-integers-named-as-arr-and-another-one-contains-arrays-of-integers-named-as-pieces-according-to-him-if-it-is-possible-to-make-arr-from-pieces-then-that-array-is-a-ninja-array\">Ninja developed his own coding platform and he wants all the questions of the array to be uploaded on his platform. Now, he wants to create test cases of problems. But as usual, he uses his own ninja technique for selecting the array and call such arrays as &#39;Ninja arrays&#39;. He has two arrays one of them has distinct integers (named as \u2018ARR\u2019) and another one contains arrays of integers (named as \u2018PIECES\u2019). According to him, if it is possible to make \u2018ARR\u2019 from \u2018PIECES\u2019 then that array is a &#39;Ninja array&#39;.</h4>\n\n<h4 id=\"your-task-is-to-help-ninja-to-check-whether-we-can-form-an-array-of-distinct-integers-arr-from-an-array-of-integers-arrays-pieces-if-it-is-possible-you-should-return-true-else-return-false\">Your task is to help Ninja to check whether we can form an array of distinct integers \u2018ARR\u2019 from an array of integers arrays \u2018PIECES\u2019. If it is possible you should return \u2018True\u2019 else return \u2018False\u2019.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Case 1:\nSuppose given array of distinct integers \u2018ARR&#39; = [10, 35] and array of integers array \u2018PIECES&#39; = [ [35], [10] ]. So, we return \u2018True\u2019 as we can form such array-like first we concatenate [10], then [35] hence it is possible to make \u2018ARR\u2019 from \u2018PIECES\u2019.\n\nCase 2:\nSuppose if the array of distinct integers \u2018ARR&#39; = [ 2, 1, 3 ] and an array of integers array \u2018PIECES&#39; = [ [ 1, 2 ], [ 3 ] ]. So we return \u2018False\u2019 as we cant form such an array because we can\u2019t change the order of [ 1, 2 ].\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains a \u2018T\u2019 number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019, which represents the size of the array \u2018ARR\u2019.\n\nThe second line of each test case contains the \u2018N\u2019 space-separated integer of array \u2018ARR\u2019.\n\nThe third line of each test case contains an integer \u2018M\u2019 denoting the number of rows in array \u2018PIECES\u2019. Then, \u2018M\u2019 lines follow.\n\nEach line contains an integer \u2018R&#39; denoting the number of columns in that row and \u2018R\u2019 space-separated integers denoting the values of the row.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, print in a line \u2018True\u2019 if it is possible to form else print  \u2018False\u2019.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= M &lt;= N &lt;= 1000\n1 &lt;= R &lt;= 1000\n1 &lt;= ARR[i], PIECES[i][j] &lt;=100    \n\nTime Limit: 1 second  \n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n3\n49 18 16\n1\n3 16 18 49\n4 \n91 4 64 78\n3\n1 78\n2 4 64\n1 91\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>False\nTrue\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h4>\n\n<pre><code>Test Case 1:\nAccording to this test case, \u2018ARR\u2019 is [ 49, 18, 16 ] and \u2018PIECES\u2019 is [ [ 16, 18, 49 ] ]. So we return \u2018False\u2019 because it is not possible to make \u2018ARR\u2019 from \u2018PIECES\u2019 even though the number matches because we can concatenate different arrays in any order but we cant change the orientation of elements inside the array.\n\nTest Case 2:\nAccording to this test case, \u2018ARR\u2019 is [ 91, 4, 64, 78 ] and \u2018PIECES\u2019 is [ [ 78 ], [ 4, 64 ], [ 91] ]. So we return \u2018True\u2019 as it is possible to make \u2018ARR\u2019 from \u2018PIECES\u2019 as first we concatenate [ 91 ] then [ 4, 64 ] and in last [ 78 ].\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n1\n85 \n1\n1 85\n4\n1 3 5 7 \n1\n4 2 4 6 8\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2:</h4>\n\n<pre><code>Test Case 1:\nAccording to this test case, \u2018ARR\u2019 is [ 85 ] and \u2018PIECES\u2019 is [ [ 85 ] ]. So we return \u2018True\u2019 as it is possible to make \u2018ARR\u2019 from \u2018PIECES\u2019.\n\nTest Case 2:\nAccording to this test case, \u2018ARR\u2019 is [ 1, 3, 5, 7 ] and \u2018PIECES\u2019 is [ [ 2, 4, 6, 8 ] ]. So we return \u2018False\u2019 because it is not possible to make \u2018ARR\u2019 from \u2018PIECES\u2019.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of distinct integers `ARR` and an array of integer arrays `PIECES`, determine if it's possible to form `ARR` by concatenating arrays from `PIECES`. The order of elements within each array in `PIECES` must be maintained, but you can choose the order in which you concatenate the arrays from `PIECES`.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= M <= N <= 1000",
                    "1 <= R <= 1000",
                    "1 <= ARR[i], PIECES[i][j] <= 100",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "3\n49 18 16\n1\n3 16 18 49\n4 \n91 4 64 78\n3\n1 78\n2 4 64\n1 91",
                        "output": "False\nTrue",
                        "explanation": "Test Case 1: ARR is [49, 18, 16] and PIECES is [[16, 18, 49]]. It is not possible to form ARR from PIECES because the order within the PIECES array is incorrect.\n\nTest Case 2: ARR is [91, 4, 64, 78] and PIECES is [[78], [4, 64], [91]]. It is possible to form ARR from PIECES by concatenating [91], then [4, 64], and finally [78]."
                    },
                    {
                        "input": "1\n85\n1\n1 85",
                        "output": "True",
                        "explanation": "ARR is [85] and PIECES is [[85]]. It is possible to form ARR from PIECES."
                    },
                    {
                        "input": "4\n1 3 5 7 \n1\n4 2 4 6 8",
                        "output": "False",
                        "explanation": "ARR is [1, 3, 5, 7] and PIECES is [[2, 4, 6, 8]]. It is not possible to form ARR from PIECES."
                    },
                    {
                        "input": "2\n10 35\n2\n1 35\n1 10\n3\n2 1 3\n2\n2 1 2\n1 3",
                        "output": "True\nFalse",
                        "explanation": "Test Case 1: ARR is [10, 35] and PIECES is [[35], [10]]. It's possible to make ARR by concatenating [10] then [35].\n\nTest Case 2: ARR is [1, 3] and PIECES is [[1, 2], [3]]. It's not possible to make ARR because the array [1, 2] cannot be reordered."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you traverse both arrays iteratively and get any possible outcomes from them?</p>",
            "<p>Try to store all the possible arrays which can be used in a hashmap and iteratively try to use it.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}