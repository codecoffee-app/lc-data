{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11008,
            "title": "NINJA\u2019S ENCRYPTION",
            "titleSlug": "ninja-s-encryption_1376419",
            "content": "<h4 id=\"ninja-is-assigned-with-the-duty-of-creating-some-problems-on-algebra-or-we-can-say-questions-on-evaluating-the-expression-after-creating-those-questions-he-has-to-send-it-so-that-the-answer-sheet-according-to-the-questions-can-be-made-so-he-thinks-someone-might-get-his-paper-in-between-so-he-thinks-of-an-encryption-technique\">Ninja is assigned with the duty of creating some problems on algebra or we can say questions on evaluating the expression. After creating those questions he has to send it so that the answer sheet according to the questions can be made. So he thinks someone might get his paper in between so he thinks of an encryption technique.</h4>\n\n<h4 id=\"so-in-this-encryption-technique-he-writes-his-expression-in-the-form-of-a-binary-tree-where-leaf-nodes-represent-the-value-and-all-other-nodes-represent-the-binary-operators-like\">So in this encryption technique, he writes his expression in the form of a binary tree where leaf nodes represent the value and all other nodes represent the binary operators like \u2018-\u2019, \u2018+\u2019, \u2018/\u2019, \u2018*\u2019.</h4>\n\n<h4 id=\"so-now-ninja-has-to-find-a-way-of-decrypting-his-own-technique-as-he-has-to-tell-the-way-of-decrypting-his-own-expression-so-that-the-answer-team-is-able-to-solve-his-expression\">So now ninja has to find a way of decrypting his own technique as he has to tell the way of decrypting his own expression so that the answer team is able to solve his expression.</h4>\n\n<h4 id=\"so-your-task-is-to-write-the-code-that-can-evaluate-the-given-expression-in-the-form-of-a-binary-tree-where-each-node-must-have-two-children-except-leaf-nodes-and-leaf-nodes-represent-integer-while-other-nodes-represent-binary-operators-like\">So your task is to write the code that can evaluate the given expression in the form of a binary tree where each node must have two children except leaf nodes and leaf nodes represent integer while other nodes represent binary operators like \u2018-\u2019, \u2018+\u2019, \u2018/\u2019, \u2018*\u2019.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<p><img src=\"https://files.codingninjas.in/cn1-8593.JPG\" alt=\"Example\"></p>\n\n<pre><code>Consider the following binary search tree so the evaluation of the expression is ( 4 *  ( 5 - ( 2+ 7 ) ) ) = \u2018-16\u2019\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You have been given the root of the tree.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer  \u2018T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 -1 5 6 7 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the evaluation of each expression\n\nPrint output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n1 &lt;= N &lt;= 3*10^3\n0 &lt;= data &lt;= 10^3 or ( \u2018+\u2019, \u2018-\u2019, \u2018*\u2019, \u2018/\u2019 )\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 is the number of nodes of the tree, and data is the value mentioned on the node.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n* 4 - -1 -1 5 + -1 -1 2 7 -1 -1 -1 -1\n/ * 7 + 2 -1 -1 3 4 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>-16\n2\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h4>\n\n<pre><code>Test case 1:\n\nThe binary tree according to the test case is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/cn1-8593.JPG\" alt=\"Example\"></p>\n\n<pre><code>consider the following binary search tree so the evaluation of the expression is ( 4 *  ( 5 - ( 2+ 7 ) ) ) = \u201816\u2019 \n\nTest case 2:\n\nThe binary tree according to the test case is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/cn2-8594.JPG\" alt=\"Example\"></p>\n\n<pre><code>consider the following binary search tree so the evaluation of the expression is ( 3 + 4 ) * 2 ) / 7 ) = \u20182\u2019.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n+ * - 5 4 100 20 -1 -1 -1 -1 -1 -1 -1 -1\n+ * - 5 4 100 / -1 -1 -1 -1 -1 -1 20 2 -1 -1\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>100\n110\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Evaluate a given expression represented as a binary tree. Leaf nodes contain integer values, and non-leaf nodes contain binary operators ('+', '-', '*', '/'). Your task is to decrypt Ninja's expression by evaluating the binary tree and returning the result.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3 * 10^3",
                    "0 <= data <= 10^3 or ( '+', '-', '*', '/' )",
                    "Where \u2018T\u2019 is the total number of test cases, \u2018N\u2019 is the number of nodes of the tree, and data is the value mentioned on the node.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "* 4 - -1 -1 5 + -1 -1 2 7 -1 -1 -1 -1",
                        "output": "-16",
                        "explanation": "The expression tree is equivalent to (4 * (5 - (2 + 7))), which evaluates to -16."
                    },
                    {
                        "input": "/ * 7 + 2 -1 -1 3 4 -1 -1 -1 -1 -1 -1",
                        "output": "2",
                        "explanation": "The expression tree is equivalent to ((7 * (2 + 3)) / 4), which evaluates to 8.75. As the code is expected to give integer results then the result is 2."
                    },
                    {
                        "input": "+ * - 5 4 100 20 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "100",
                        "explanation": "The expression tree is equivalent to ((5 - 4) * 20) + 100, which evaluates to 120."
                    },
                    {
                        "input": "+ * - 5 4 100 / -1 -1 -1 -1 -1 -1 20 2 -1 -1",
                        "output": "110",
                        "explanation": "The expression tree is equivalent to ((5 - 4) * 100) + (20 / 2), which evaluates to 110."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a traversal of the tree that can evaluate these expressions?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}