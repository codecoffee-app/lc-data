{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10993,
            "title": "Ninja's gift",
            "titleSlug": "ninja-s-gift_1281433",
            "content": "<h4 id=\"ninja-is-going-to-visit-her-friend-mico-he-is-thinking-to-gift-her-a-string-but-he-came-to-know-that-mico-only-likes-the-string-s-ninja-already-has-a-string-k-now-ninja-can-change-the-string-k-in-some-other-string-by-choosing-any-character-in-one-move-and-change-all-its-occurrence-with-any-other-lowercase-english-character-he-can-do-this-several-times\">Ninja is going to visit her friend Mico. He is thinking to gift her a string. But he came to know that Mico only likes the string &#39;S&#39;. Ninja already has a string &#39;K&#39;. Now, Ninja can change the string &#39;K&#39; in some other string by choosing any character in one move and change all its occurrence with any other lowercase English character. He can do this several times.</h4>\n\n<h4 id=\"help-ninja-to-find-if-he-can-change-his-string-k-to-string-s-which-mico-likes\">Help Ninja to find if he can change his string &#39;K&#39; to string &#39;S&#39;, which Mico likes.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Both &#39;S&#39; and &#39;K&#39; contain only lowercase English characters.\n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>K = &quot;aabb&quot; and S = &quot;bbcc&quot;\nNow Ninja can do the following changes:\n- Change \u2018b\u2019 to \u2018c\u2019 -&gt; \u201caacc\u201d\n- Change \u2018a\u2019 to \u2018b\u2019 -&gt; \u201cbbcc\u201d\n\nHence Ninja can give Mico the desired gift.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first line of each test case contains a string &#39;S&#39;.\n\nThe next line of each test case contains a string &#39;K&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, if Ninja can convert K into S, return \u201cTrue\u201d else return \u201cFalse\u201d.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to take any input or print anything. This already has been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= |K|, |S| &lt;= 10^5\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\naabcc\nccdaa\nninjas\ncoding\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>Test case 1:\n\nHere K=ccdaa and S=aabcc. Here we can change K into S by following conversions\n\nChange \u2018d\u2019 to \u2018b\u2019 -&gt; ccbaa\n\nChange \u2018a\u2019 to \u2018e\u2019 -&gt; ccbee\n\nChange \u2018c\u2019 to \u2018a\u2019 -&gt; aabee\n\nChange \u2018e\u2019 to \u2018c\u2019-&gt; aabcc\n\nTest case 2:\n\nIt is not possible to change K to S by any number of conversions.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2</h5>\n\n<pre><code>2\ncode\ndope\nacbz\nacbza\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja wants to gift Mico a string 'S' that Mico likes. Ninja currently has a string 'K'. Ninja can transform 'K' by repeatedly choosing a character in 'K' and replacing all its occurrences with another lowercase English character. Determine if Ninja can transform 'K' into 'S' using this method.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= |K|, |S| <= 10^5",
                    "Both 'S' and 'K' contain only lowercase English characters."
                ],
                "testcases": [
                    {
                        "input": "s = \"aabcc\", k = \"ccdaa\"",
                        "output": "True",
                        "explanation": "We can change 'K' to 'S' as follows:\n- Change \u2018d\u2019 to \u2018b\u2019 -> ccbaa\n- Change \u2018a\u2019 to \u2018c\u2019 -> ccbcc\n- Change \u2018c\u2019 to \u2018a\u2019 -> aabcc"
                    },
                    {
                        "input": "s = \"ninjas\", k = \"coding\"",
                        "output": "False",
                        "explanation": "It is not possible to transform 'coding' to 'ninjas' using the allowed operations."
                    },
                    {
                        "input": "s = \"code\", k = \"dope\"",
                        "output": "True",
                        "explanation": "We can transform 'dope' to 'code' as follows:\n- Change \u2018d\u2019 to \u2018c\u2019 -> cope\n- Change \u2018o\u2019 to \u2018o\u2019 -> cope\n- Change \u2018p\u2019 to \u2018d\u2019 -> code"
                    },
                    {
                        "input": "s = \"acbz\", k = \"acbza\"",
                        "output": "False",
                        "explanation": "The strings have different lengths, so it's impossible to transform K to S."
                    },
                    {
                        "input": "s = \"abc\", k = \"xyz\"",
                        "output": "True",
                        "explanation": "We can map x to a, y to b, and z to c. Strings don't have matching characters. "
                    },
                    {
                        "input": "s = \"egg\", k = \"add\"",
                        "output": "True",
                        "explanation": "We can map a to e and d to g."
                    },
                    {
                        "input": "s = \"foo\", k = \"bar\"",
                        "output": "False",
                        "explanation": "Although 'f' and 'b' can be mapped, and 'o' and 'a' can be mapped, it's impossible to make two different characters in K map to the same character in S."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;Think of mapping each character in \u2018K\u2019 to the character in \u2018S\u2019 at corresponding positions in \u2018S\u2019.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}