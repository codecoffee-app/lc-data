{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12560,
            "title": "NINJA\u2019S GRID",
            "titleSlug": "ninja-s-grid_1466931",
            "content": "<h4 id=\"ninja-is-thinking-of-developing-a-game-where-a-user-will-be-provided-with-a-grid-of-size-n-n-the-user-has-to-return-the-minimum-number-of-steps-required-to-make-the-given-grid-as-ninja-grid-if-it-is-not-possible-the-user-has-to-return-1\">Ninja is thinking of developing a game where a user will be provided with a &#39;GRID&#39; of size \u2018N * N\u2019. The user has to return the minimum number of steps required to make the given grid as \u2018Ninja Grid\u2019. If it is not possible the user has to return \u2018-1\u2019.</h4>\n\n<h4 id=\"a-grid-is-called-a-ninja-grid-if-all-the-cells-of-the-grid-that-are-present-above-the-main-diagonal-have-become-equal-to-0-by-doing-below-operation-zero-or-more-times\">A grid is called a \u2018Ninja Grid\u2019 if all the cells of the grid that are present above the main diagonal have become equal to \u20180\u2019 by doing below operation zero or more times:</h4>\n\n<pre><code>1. Choose two adjacent rows and swap them.\n</code></pre>\n\n<h4 id=\"as-ninja-is-busy-developing-the-game-he-asks-you-for-help-your-task-is-to-find-out-the-minimum-number-of-operations-required-to-make-a-ninja-grid-from-a-given-grid-of-size-n-n\">As Ninja is busy developing the game, he asks you for help. Your task is to find out the minimum number of operations required to make a &#39;Ninja grid&#39; from a given &#39;GRID&#39; of size \u2018N * N\u2019.</h4>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run.\n\nThe first line of each test case contains an integer \u2018N\u2019  denoting the size of the &#39;GRID&#39; as size \u2018N * N\u2019.\n\nThen each next \u2018N\u2019 line contains \u2018N\u2019 space-separated integers denoting the given grid values.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, return the minimum number of steps required to make the given grid as \u2018Ninja Grid\u2019. In case it is not possible then return \u2018-1\u2019.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 100\n0 &lt;= GRID[i][j] &lt;= 1\n\nTime Limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n3 \n1 1 1\n1 0 0\n1 1 0\n3 \n1 0 0\n1 1 1\n1 1 1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>2\n-1\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h4>\n\n<pre><code>Test Case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture1-9032.JPG\" alt=\"Example\"></p>\n\n<pre><code>As you can see in the input grid first we have to swap row 1 with 0 and then row 1 with 2 to get the ninja grid so it takes two steps so we return \u20182\u2019.\n\nTest Case 2:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture2-9033.JPG\" alt=\"Example\"></p>\n\n<pre><code>As you can see in the input grid there is no possibility of swapping as the last two rows are the same so we return \u2018-1\u2019.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>1\n3 \n0 0 0\n1 1 1\n1 0 0\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation of sample input 2:</h4>\n\n<pre><code>Test Case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture3-9035.JPG\" alt=\"Example\"></p>\n\n<pre><code>As you can see in the input grid we just have to swap row 1 with 2 to make the grid a ninjas grid.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a square grid of size N x N, determine the minimum number of adjacent row swaps required to transform the grid into a 'Ninja Grid'. A 'Ninja Grid' is defined as a grid where all elements above the main diagonal are 0. If it's impossible to achieve a 'Ninja Grid' through row swaps, return -1.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 100",
                    "0 <= GRID[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "n = 3, grid = [[1, 1, 1], [1, 0, 0], [1, 1, 0]]",
                        "output": "2",
                        "explanation": "Swapping row 1 with row 0, and then row 2 with row 1 achieves the 'Ninja Grid' state. Hence, 2 swaps are required."
                    },
                    {
                        "input": "n = 3, grid = [[1, 0, 0], [1, 1, 1], [1, 1, 1]]",
                        "output": "-1",
                        "explanation": "It's impossible to achieve a 'Ninja Grid' by swapping rows in this scenario.  The last two rows prevent the first row from reaching the bottom."
                    },
                    {
                        "input": "n = 3, grid = [[0, 0, 0], [1, 1, 1], [1, 0, 0]]",
                        "output": "1",
                        "explanation": "Swapping row 1 with row 2 transforms the grid into a 'Ninja Grid'. Only 1 swap needed."
                    },
                    {
                        "input": "n = 4, grid = [[1, 1, 1, 1], [1, 1, 1, 0], [1, 1, 0, 0], [1, 0, 0, 0]]",
                        "output": "6",
                        "explanation": "Bringing rows with trailing zeroes down requires the following operations:\n- Row 4 to position 1 (3 swaps)\n- Row 3 to position 2 (2 swaps)\n- Row 2 to position 3 (1 swap)\nTotal = 3 + 2 + 1 = 6 swaps"
                    },
                    {
                        "input": "n = 4, grid = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]",
                        "output": "-1",
                        "explanation": "All rows are same so 'Ninja Grid' transformation is impossible"
                    },
                    {
                        "input": "n = 2, grid = [[1, 1], [1, 0]]",
                        "output": "1",
                        "explanation": "Swap row 1 with row 0."
                    },
                    {
                        "input": "n = 2, grid = [[1, 0], [1, 1]]",
                        "output": "0",
                        "explanation": "The grid already satisfies the condition. No swap is required"
                    },
                    {
                        "input": "n = 5, grid = [[1,1,1,1,1], [1,1,1,1,0], [1,1,1,0,0], [1,1,0,0,0], [1,0,0,0,0]]",
                        "output": "10",
                        "explanation": "Similar to the n = 4 test case. The 0 row needs 4 swaps, 00 row needs 3 swaps, 000 row needs 2 swaps and 0000 row needs 1 swap. 4+3+2+1 = 10"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of counting \u20180s\u2019 for each row?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}