{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12794,
            "title": "NINJA\u2019S PARENTHESES",
            "titleSlug": "ninja-s-parentheses_1475038",
            "content": "<h4 id=\"one-day-ninja-goes-to-play-some-intellectual-games-there-was-a-game-where-ninja-is-given-a-string-of-balanced-parentheses-str-and-he-has-to-calculate-the-score-of-that-using-the-given-rules-of-the-game-if-he-wins-that-game-the-amount-which-he-has-paid-for-that-game-will-be-refunded\">One day Ninja goes to play some intellectual games. There was a game where Ninja is given a string of balanced parentheses &#39;STR&#39; and he has to calculate the score of that using the given rules of the game. If he wins that game, the amount which he has paid for that game will be refunded.</h4>\n\n<h4 id=\"rules-for-the-game-are-as-follows\">Rules for the game are as follows:</h4>\n\n<pre><code>For \u201c()\u201d you get a score of 1.\nFor \u201cx y\u201d you get a score of x + y where x and y are individual pairs of balanced parentheses.\nFor \u201c(x)\u201d you get a score twice of x (i.e), 2 * score of x.\n</code></pre>\n\n<h4 id=\"your-task-is-to-find-the-score-using-these-rules-for-the-given-string-str\">Your task is to find the score using these rules for the given string &#39;STR&#39;.</h4>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>Suppose given string &#39;STR&#39; is \u201c( ( ) )\u201d.\nSo we return \u20182\u2019 as input is of the form \u201c(x)\u201d, therefore total score = 2 * score of \u201c()\u201d = 2 * 1 = 2.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of input contains a single integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 representing the length of the string.\n\nThe second line of each test case contains a string \u2018STR\u2019 containing the balanced parentheses.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, return the score of the string using the rules given.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 50\n1&lt;= |STR| &lt;= 1000\nSTR[I] = { \u2018(\u2018, \u2018)\u2019 }\n\nWhere \u2018T\u2019 represents the number of test cases and \u2018STR\u2019 represents the given string.\n\nTime Limit: 1 second  \n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n4\n()()\n6\n(()())\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>2\n4\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h4>\n\n<pre><code>Test Case 1 :\n\nFor the first test case, the given string &#39;STR&#39; is \u201c( ) ( )\u201d. As &#39;STR&#39; is in the form &#39;x + y&#39;, so we return \u20182\u2019 as the score we get is 1 + 1 = 2.\n\n\nTest Case 2 :\n\nFor this test case, the given string &#39;STR&#39; is \u201c( ( ) ( ) )\u201d. So we return \u20184\u2019 as the score we get is 2 * ( 1 + 1 ) = 4 as it is in the form &#39;(x + y)&#39;.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n2\n()\n8\n(()(()))\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>1\n6\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h4>\n\n<pre><code>Test Case 1 :\n\nFor the first test case, the given string &#39;STR&#39; is \u201c( )\u201d. So we return \u20181\u2019 as only one balanced parenthesis is present.\n\n\nTest Case 2 :\n\nFor this test case, the given string &#39;STR&#39; is \u201c( ( ) ( ( ) ) )\u201d. As &#39;STR&#39; is in the form &#39;( x + ( y ) )&#39;, so we return \u20186\u2019 as the score we get is 2 * ( 1 + 2 * (1) ) = 6.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja is playing a game with balanced parentheses strings. Given a balanced parentheses string 'STR', calculate its score based on these rules:\n\n*   '()' has a score of 1.\n*   'XY' has a score of X + Y, where X and Y are balanced parentheses strings.\n*   '(X)' has a score of 2 * score(X), where X is a balanced parentheses string.\n\nYour task is to implement a function that takes a balanced parentheses string as input and returns its score.",
                "constraints": [
                    "1 <= T <= 50 (Number of test cases)",
                    "1 <= |STR| <= 1000 (Length of the string)",
                    "STR[i] can be '(' or ')'",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "4\n()()",
                        "output": "2",
                        "explanation": "The string '()()' can be seen as 'XY', where X is '()' and Y is '()'.  Therefore, the score is 1 + 1 = 2."
                    },
                    {
                        "input": "6\n(()())",
                        "output": "4",
                        "explanation": "The string '(()())' can be seen as '(X)', where X is '()()'. The score of '()()' is 2 (from the previous test case).  Therefore, the score of '(())()' is 2 * 2 = 4."
                    },
                    {
                        "input": "2\n()",
                        "output": "1",
                        "explanation": "The string '()' has a score of 1 according to the rules."
                    },
                    {
                        "input": "8\n(()(()))",
                        "output": "6",
                        "explanation": "The string '(()(()))' can be interpreted as '(X)', where X is '()(())'. The score of '()(())' is calculated as '()'+'(())' i.e., 1+(2*1)=3. So, the final score is 2*3=6"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a recursive approach?</p>",
            "<p>Can you think of using a stack?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}