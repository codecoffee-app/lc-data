{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12448,
            "title": "NINJA\u2019S PLAN",
            "titleSlug": "ninja-s-plan_1461338",
            "content": "<h4 id=\"ninja-has-called-a-meeting-of-his-team-members-for-discussing-how-they-can-keep-an-eye-on-their-enemies-from-their-society-so-they-made-a-plan-that-they-will-choose-such-buildings-in-their-locality-from-which-they-are-capable-of-seeing-the-right-side-as-they-know-the-only-entry-point-is-on-the-right-side\">Ninja has called a meeting of his team members for discussing how they can keep an eye on their enemies from their society. So they made a plan that they will choose such buildings in their locality from which they are capable of seeing the right side as they know the only entry point is on the right side.</h4>\n\n<h4 id=\"as-there-are-various-types-of-buildings-in-the-society-of-different-heights-therefore-they-made-a-plan-to-choose-such-buildings-which-have-lower-buildings-in-the-right-direction-from-them\">As there are various types of buildings in the society of different heights, therefore, they made a plan to choose such buildings which have lower buildings in the right direction from them.</h4>\n\n<h4 id=\"so-your-task-is-to-help-ninja-in-finding-the-buildings-which-have-lower-height-buildings-on-the-right-side\">So your task is to help Ninja in finding the buildings which have lower height buildings on the right side.</h4>\n\n<h4 id=\"formally-return-the-index-of-those-buildings-which-have-lower-height-buildings-on-the-right-side-you-will-be-provided-an-arrays-list-heightarr-where-heightarr-i-represents-the-height-of-the-ith-building\">Formally, return the index of those buildings which have lower height buildings on the right side. You will be provided an arrays/list \u2018HEIGHT&#95;ARR\u2019, where \u2018HEIGHT&#95;ARR[i]\u2019 represents the height of the \u2018ith\u2019 building.</h4>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>Suppose given \u2018HEIGHT_ARR\u2019 is { 4, 2, 3, 1 } so we return { 0, 2, 3 } as \u20180th\u2019 index building is \u20184\u2019 which is greater than all other buildings on the right side. \u20181st\u2019 index has \u20182\u2019 which is smaller than \u20183\u2019 so we don\u2019t include it (hidden by building height with \u20183\u2019). We include \u20183\u2019 as it is greater than \u20181\u2019 then we consider \u20181\u2019 as nothing is on the right side of \u20181\u2019.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of input contains a \u2018T\u2019 number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 i.e size of the array \u2018HEIGHT_ARR\u2019.\n\nThe second line of each test case contains an array \u2018HEIGHT_ARR\u2019, where \u2018HEIGHT_ARR[i]\u2019  denotes the height of the \u2018ith\u2019 building.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, return an array containing the index of those building which have a smaller building in the right side of them.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 1000\n1 &lt;= HEIGHT_ARR[i] &lt;= 10^5\n\nWhere \u2018T\u2019 represents the number of test cases and \u2018N\u2019 represents the size of the array and \u2018HEIGHT_ARR[i]\u2019 represents the elements of the array.\n\nTime Limit: 1 second  \n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n7\n4 2 3 1 3 1 2\n5\n5 4 3 2 1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>0 4 6\n0 1 2 3 4\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h4>\n\n<pre><code>Test Case 1:\n\nFor the first test case given \u2018HEIGHT_ARR\u2019 is { 4, 2, 3, 1, 3, 1, 2 } so we return { 0, 4, 6 } as \u20180th\u2019 index building is \u20184\u2019 which is greater than all other buildings on the right side. \u20181st\u2019 index has \u20182\u2019 which is smaller than \u20183\u2019 so we don\u2019t include it. We have \u20183\u2019 at the \u20182nd\u2019 index and which is equal to \u20183\u2019 at the \u20184th\u2019 index so we include \u20183\u2019 of the &#39;4th&#39; index and then \u20182\u2019 at the last index.\n\nTest Case 2:\n\nFor this test case given \u2018HEIGHT_ARR\u2019 is { 5, 4, 3, 2, 1 } so we return { 0, 1, 2, 3, 4 } as all the elements have smaller elements on the right side of the array.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n3\n5 10 20\n5\n6 7 3 2 1\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>2\n1 2 3 4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -7,
            "dislikes": "NA",
            "rephrased": {
                "body": "A team of ninjas wants to strategically position themselves in their locality to monitor their enemies, whose only entry point is on the right side of the buildings. They plan to select buildings from which they have a clear view of the right side. Given an array `HEIGHT_ARR` representing the heights of buildings in the society, your task is to help the ninjas identify and return the indices of buildings that can see a lower height building to their right. Formally, a building at index `i` is selected if there exists a building at index `j` such that `j > i` and `HEIGHT_ARR[j] < HEIGHT_ARR[i]`. Return the indices of the selected buildings.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 1000 (Size of the HEIGHT_ARR)",
                    "1 <= HEIGHT_ARR[i] <= 10^5 (Height of each building)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "7\n4 2 3 1 3 1 2",
                        "output": "0 4 6",
                        "explanation": "The building at index 0 (height 4) can see the buildings with heights 2, 3, 1, 3, 1, and 2. \nThe building at index 4 (height 3) can see the buildings with heights 1 and 2.\nThe building at index 6 (height 2) is the last building."
                    },
                    {
                        "input": "5\n5 4 3 2 1",
                        "output": "0 1 2 3 4",
                        "explanation": "Each building can see a smaller building to its right."
                    },
                    {
                        "input": "3\n5 10 20",
                        "output": "2",
                        "explanation": "Only the building at index 2 (height 20) is included because there are no buildings to its right."
                    },
                    {
                        "input": "5\n6 7 3 2 1",
                        "output": "1 2 3 4",
                        "explanation": "The building at index 1 (height 7) can see buildings with heights 3, 2, and 1.\nThe building at index 2 (height 3) can see buildings with heights 2 and 1.\nThe building at index 3 (height 2) can see the building with height 1.\nThe building at index 4 (height 1) is the last building."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you iterate the array?</p>",
            "<p>Can you iterate the array from last?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}