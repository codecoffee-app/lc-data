{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10754,
            "title": " Ninja\u2019s Safe.",
            "titleSlug": "ninja-s-safe_1264272",
            "content": "<h4 id=\"after-an-accident-ninja-is-suffering-from-transient-amnesia-he-wants-to-open-his-safe-but-has-forgotten-his-password\">After an accident, Ninja is suffering from transient amnesia. He wants to open his safe but has forgotten his password.</h4>\n\n<h4 id=\"the-safe-s-lock-has-4-circular-wheels-each-wheel-has-10-slots-0-1-2-3-4-5-6-7-8-9-the-wheels-can-rotate-clockwise-as-well-as-anti-clockwise-for-example-we-can-turn-9-to-be-0-or-0-to-be-9-each-move-consists-of-turning-one-wheel-in-one-slot\">The safe\u2019s lock has 4 circular wheels.  Each wheel has 10 slots: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. The wheels can rotate clockwise as well as anti-clockwise: for example, we can turn 9 to be 0, or 0 to be 9. Each move consists of turning one wheel in one slot.</h4>\n\n<h4 id=\"the-lock-initially-starts-at-0000-a-string-representing-the-state-of-the-4-wheels\">The lock initially starts at 0000, a string representing the state of the 4 wheels.</h4>\n\n<h4 id=\"ninja-is-given-a-list-of-blockages-dead-ends-meaning-if-the-lock-displays-any-of-these-codes-the-wheels-of-the-lock-will-stop-turning-and-ninja-would-be-unable-to-open-it\">Ninja is given a list of \u2018blockages\u2019 dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning, and  Ninja would be unable to open it.</h4>\n\n<h4 id=\"there-would-be-a-result-given-representing-the-wheels-value-that-will-unlock-the-lock-return-the-minimum-total-number-of-turns-ninja-is-required-to-open-the-lock-or-1-if-it-is-impossible-for-him-to-open-it\">There would be a \u2018result\u2019 given representing the wheels&#39; value that will unlock the lock, return the minimum total number of turns Ninja is required to open the lock, or -1 if it is impossible for him to open it.</h4>\n\n<h4 id=\"help-ninja-to-open-his-safe\">Help Ninja to open his safe.</h4>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the size of the \u2018blockages\u2019 array.\n\nThe next line contains \u2018N\u2019 space-separated strings denoting the values of the \u2018blockages\u2019 array.\n\nThe third line contains a single string denoting the \u2018result\u2019 value.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, print a single line containing numbers of turns or -1 as per the condition.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 5 \n1 &lt;= N &lt;= 500\nblockages[i].length ==  4\nresult.length ==  4\nresult will not be in the list blockages\nresult and blockages[i] consists of only digits from \u20180\u2019 to \u20189\u2019.\n\nTime Limit: 1sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n3\n2000 2020 2022\n2121\n5\n1000 1001 1002 1010 3010\n3000\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>6\n5\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h4>\n\n<pre><code>For the first test case, the initial state is 0000 and the number of moves are 0, now to reach 2121, following steps would be taken:\n0000 -&gt; 1000 [count= 1]\n1000 -&gt; 2000 [count= 2]\n2000 -&gt; 2100 [count= 3]\n2100 -&gt; 2110 [count= 4]\n2110 -&gt; 2120 [count= 5]\n2120 -&gt; 2121 [count= 6]\nHence the output is 6.\n\nSimilarly in the second test case, the initial state is 0000 and the number of moves is 0, now to achieve the result of 3000, steps would be as 0000-&gt; 0100-&gt; 1100-&gt; 2100-&gt; 3100-&gt; 3000\nThe number of steps is 5, hence the output is 5.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>1\n3\n0000 0001 0002\n2000\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>-1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2 :</h4>\n\n<pre><code>Since the initial state is 0000, there would be no option for ninja to try out the password as 0000 is present in the blockages list.\nHence the output would be -1.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja is suffering from amnesia after an accident and needs to open his safe. The safe has a 4-wheel lock, with each wheel having digits 0-9. He can rotate each wheel clockwise or anti-clockwise. The lock starts at 0000. He has a list of blocked combinations. Given the target combination and the blocked combinations, find the minimum number of moves to reach the target combination from 0000, avoiding blocked combinations. If impossible, return -1.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 500",
                    "blockages[i].length == 4",
                    "result.length == 4",
                    "result will not be in the list blockages",
                    "result and blockages[i] consists of only digits from \u20180\u2019 to \u20189\u2019."
                ],
                "testcases": [
                    {
                        "input": "3\n2000 2020 2022\n2121",
                        "output": "6",
                        "explanation": "Starting from 0000, the shortest path to 2121, avoiding the blocked combinations, requires 6 moves: 0000 -> 1000 -> 2000 -> 2100 -> 2110 -> 2120 -> 2121."
                    },
                    {
                        "input": "5\n1000 1001 1002 1010 3010\n3000",
                        "output": "5",
                        "explanation": "Starting from 0000, the shortest path to 3000, avoiding the blocked combinations, requires 5 moves: 0000 -> 0100 -> 1100 -> 2100 -> 3100 -> 3000."
                    },
                    {
                        "input": "3\n0000 0001 0002\n2000",
                        "output": "-1",
                        "explanation": "Since the initial state (0000) is a blocked combination, it is impossible to start the process, and the output is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Categorize the elements of blockages as visited,so that we don't encounter those in the process of achieving the result.</p>",
            "<p>Change the string to integers using <a href=\"https://en.wikipedia.org/wiki/ASCII\">ASCII</a> values, then adding and subtracting would be much more manageable.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}