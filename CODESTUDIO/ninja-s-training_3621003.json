{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16677,
            "title": "Ninja\u2019s Training",
            "titleSlug": "ninja-s-training_3621003",
            "content": "<h4 id=\"ninja-is-planing-this-n-days-long-training-schedule-each-day-he-can-perform-any-one-of-these-three-activities-running-fighting-practice-or-learning-new-moves-each-activity-has-some-merit-points-on-each-day-as-ninja-has-to-improve-all-his-skills-he-can-t-do-the-same-activity-in-two-consecutive-days-can-you-help-ninja-find-out-the-maximum-merit-points-ninja-can-earn\">Ninja is planing this \u2018N\u2019 days-long training schedule. Each day, he can perform any one of these three activities. (Running, Fighting Practice or Learning New Moves). Each activity has some merit points on each day. As Ninja has to improve all his skills, he can\u2019t do the same activity in two consecutive days. Can you help Ninja find out the maximum merit points Ninja can earn?</h4>\n\n<h4 id=\"you-are-given-a-2d-array-of-size-n-3-points-with-the-points-corresponding-to-each-day-and-activity-your-task-is-to-calculate-the-maximum-number-of-merit-points-that-ninja-can-earn\">You are given a 2D array of size N*3  \u2018POINTS\u2019 with the points corresponding to each day and activity. Your task is to calculate the maximum number of merit points that Ninja can earn.</h4>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>If the given \u2018POINTS\u2019 array is [[1,2,5], [3 ,1 ,1] ,[3,3,3] ],the answer will be 11 as 5 + 3 + 3.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer,&#39; N\u2019, denoting the number of days.\n\nThe next \u2018N\u2019 lines of each test case have 3 integers corresponding to POINTS[i].\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return an integer corresponding to the maximum coins  Ninja can collect.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 100000.\n1 &lt;= values of POINTS arrays &lt;= 100 .\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\n1 2 5 \n3 1 1\n3 3 3\n3\n10 40 70\n20 50 80\n30 60 90\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>11\n210\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case,\nOne of the answers can be:\nOn the first day, Ninja will learn new moves and earn 5 merit points. \nOn the second day, Ninja will do running and earn 3 merit points. \nOn the third day, Ninja will do fighting and earn 3 merit points. \nThe total merit point is 11 which is the maximum. \nHence, the answer is 11.\n\nFor the second test case:\nOne of the answers can be:\nOn the first day, Ninja will learn new moves and earn 70 merit points. \nOn the second day, Ninja will do fighting and earn 50 merit points. \nOn the third day, Ninja will learn new moves and earn 90 merit points. \nThe total merit point is 210 which is the maximum. \nHence, the answer is 210.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3\n18 11 19\n4 13 7\n1 8 13\n2\n10 50 1\n5 100 11\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>45\n110\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 852,
            "dislikes": "NA",
            "rephrased": {
                "body": "A ninja is planning an N-day training schedule. Each day, they can choose one of three activities: running, fighting practice, or learning new moves. Each activity yields a certain number of merit points. To improve all skills, the ninja cannot perform the same activity on two consecutive days. Given a 2D array 'POINTS' of size N*3, where POINTS[i][j] represents the merit points for activity j on day i, find the maximum number of merit points the ninja can earn.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 100000",
                    "1 <= values of POINTS arrays <= 100",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\n1 2 5\n3 1 1\n3 3 3",
                        "output": "11",
                        "explanation": "One possible optimal schedule is: Day 1: Learning new moves (5 points), Day 2: Running (3 points), Day 3: Fighting (3 points). Total points: 5 + 3 + 3 = 11."
                    },
                    {
                        "input": "3\n10 40 70\n20 50 80\n30 60 90",
                        "output": "210",
                        "explanation": "One possible optimal schedule is: Day 1: Learning new moves (70 points), Day 2: Fighting (50 points), Day 3: Learning new moves (90 points). Total points: 70 + 50 + 90 = 210."
                    },
                    {
                        "input": "3\n18 11 19\n4 13 7\n1 8 13",
                        "output": "45",
                        "explanation": null
                    },
                    {
                        "input": "2\n10 50 1\n5 100 11",
                        "output": "110",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try out each combination and find the maximum sum.</p>",
            "<p>Try to divide the problem into subproblems and calculate the answers for subproblems and store them for further computation.</p>",
            "<p>Think of an iterative solution.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n\n    where 'N' is the number of days.\n*/\n\nint ninjaTraining(int n, vector<vector<int>> &points)\n{\n   // DP table to memoize the solution.\n    vector<vector<int>> dp(n+1, vector<int>(4, -1));\n\n    for(int i=0;i<n;i++){\n\n        if (i == 0){\n            dp[i][1] = points[i][0];\n            dp[i][2] = points[i][1];\n            dp[i][3] = points[i][2];\n            continue;\n        }\n        \n        dp[i][1] = max(dp[i - 1][2], dp[i - 1][3]) + points[i][0];\n        dp[i][2] = max(dp[i - 1][1], dp[i - 1][3]) + points[i][1];\n        dp[i][3] = max(dp[i - 1][1], dp[i - 1][2]) + points[i][2];\n    }\n\n    int ans = 0;\n    ans = max(ans, dp[n - 1][1]);\n    ans = max(ans, dp[n - 1][2]);\n    ans = max(ans, dp[n - 1][3]);\n    return ans;\n\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n\n    Where N is the size of the array\n*/\npublic class Solution {\n\n\tpublic static int ninjaTraining(int n, int points[][]) {\n\t\t// DP table to memoize the solution.\n\t\tint dp[][] = new int[n + 1][4];\n\t\tfor (int i = 0; i <= n; i++) {\n\t\t\tfor (int j = 0; j < 4; j++) {\n\t\t\t\tdp[i][j] = -1;\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = 0; i < n; i++) {\n\n\t\t\tif (i == 0) {\n\t\t\t\tdp[i][1] = points[i][0];\n\t\t\t\tdp[i][2] = points[i][1];\n\t\t\t\tdp[i][3] = points[i][2];\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tdp[i][1] = Math.max(dp[i - 1][2], dp[i - 1][3]) + points[i][0];\n\t\t\tdp[i][2] = Math.max(dp[i - 1][1], dp[i - 1][3]) + points[i][1];\n\t\t\tdp[i][3] = Math.max(dp[i - 1][1], dp[i - 1][2]) + points[i][2];\n\t\t}\n\n\t\tint ans = 0;\n\t\tans = Math.max(ans, dp[n - 1][1]);\n\t\tans = Math.max(ans, dp[n - 1][2]);\n\t\tans = Math.max(ans, dp[n - 1][3]);\n\t\treturn ans;\n\t}\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n\r\n    where 'N' is the number of days.\r\n\"\"\"\r\n\r\n\r\nfrom typing import *\r\n\r\n\r\ndef ninjaTraining(n: int, points: List[List[int]]) -> int:\r\n\r\n    # DP table to memoize the solution.\r\n    dp = [[-1 for _ in range(4)] for __ in range(n)]\r\n\r\n    for i in range(n):\r\n\r\n        if i == 0:\r\n            dp[i][1] = points[i][0]\r\n            dp[i][2] = points[i][1]\r\n            dp[i][3] = points[i][2]\r\n            continue\r\n\r\n        dp[i][1] = max(dp[i - 1][2], dp[i - 1][3]) + points[i][0]\r\n        dp[i][2] = max(dp[i - 1][1], dp[i - 1][3]) + points[i][1]\r\n        dp[i][3] = max(dp[i - 1][1], dp[i - 1][2]) + points[i][2]\r\n\r\n    ans = 0\r\n    ans = max(ans, dp[n - 1][1])\r\n    ans = max(ans, dp[n - 1][2])\r\n    ans = max(ans, dp[n - 1][3])\r\n    return ans\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}