{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11637,
            "title": "NINJA\u2019S TRIP",
            "titleSlug": "ninja-s-trip_1382291",
            "content": "<h4 id=\"ninja-is-in-a-very-tense-situation-as-he-goes-on-a-trip-of-mountains-but-in-between-his-trip-he-comes-to-know-that-there-are-various-paths-between-mountains-and-each-mountain-has-its-own-limit-of-weight-now-he-starts-looking-at-the-map-of-the-city-to-look-for-the-desired-places-this-map-is-in-the-form-of-undirected-weighted-graphs-where-the-edge-weight-represents-the-weight-mountains-can-hold-between-two-paths\">Ninja is in a very tense situation as he goes on a trip of mountains but in between his trip, he comes to know that there are various paths between mountains and each mountain has its own limit of weight. Now he starts looking at the map of the city to look for the desired places. This map is in the form of undirected weighted graphs where the edge weight represents the weight mountains can hold between two paths.</h4>\n\n<h4 id=\"now-ninja-has-some-places-in-mind-where-he-wants-to-go-but-with-the-limit-on-weight-so-help-our-ninja-in-checking-whether-he-can-go-to-that-place-or-not\">Now ninja has some places in mind where he wants to go but with the limit on weight. So help our ninja in checking whether he can go to that place or not.</h4>\n\n<h4 id=\"your-task-is-to-give-the-answer-to-ninja-queries-where-he-gives-you-2-points-representing-his-current-location-and-ending-location-you-have-to-return-true-if-it-is-possible-to-go-from-that-location-within-the-required-limit-and-return-false-if-it-is-not-possible-to-go\">Your task is to give the answer to ninja queries where he gives you \u20182\u2019 points representing his current location and ending location. You have to return \u2018True\u2019 if it is possible to go from that location within the required limit and return \u2018False\u2019if it is not possible to go.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<p><img src=\"https://files.codingninjas.in/capture1-8899.JPG\" alt=\"Example\"></p>\n\n<pre><code>Suppose our query array is [ [ 0, 1, 2 ], [ 0, 2, 5 ] ] so we return False for the first query as there is no edge with a distance less than \u20182\u2019 from \u20180\u2019 to \u20181\u2019.\nFor the second query, we return \u2018True\u2019 as we can indirectly i.e from \u20180\u2019 to \u20181\u2019 which has the weight \u20182\u2019 less than \u20185\u2019 and then \u20181\u2019 to \u20182\u2019 which has the weight \u20184\u2019 less than \u20185\u2019.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains a \u2018T\u2019 number of test cases.\n\nThe first line of each test case contains a number \u2018N\u2019 and \u2018M\u2019 representing the number of vertices and rows in array \u2018EDGELIST\u2019 respectively. Then, \u2018M\u2019 lines follow.\n\nEach line contains \u20183\u2019 space-separated integers denoting the row values where the first value is the starting point, the second value is the ending point and the third value is the weight of the edge.\n\nAfter \u2018M\u2019 lines contain an integer value \u2018Q\u2019 denoting the number of queries then \u2018Q lines follow\n\nEach line contains \u20183\u2019 space-separated integers denoting the row values where the first value is the starting point, the second value is the ending point and the third value is the weight of the edge.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, print a single line containing the answer for each query, denoted by \u2018True\u2019 if it is possible to go else return \u2018False\u2019.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 100\n2 &lt;= N &lt;= 1000\n2 &lt;= | EDGELIST | , | QUERY | &lt;= 1000\n0 &lt;= EDGELIST[i][j], QUERY[i][j] &lt;= N - 1\n\nWhere \u2018T\u2019 represents the number of test cases, \u2018N\u2019 represents the number of vertices and query length represents the size of the \u2018QUERY\u2019 array and \u2018EDGELIST\u2019 length represents the size of the \u2018EDGELIST\u2019 array.\n\nTime Limit: 1 seC.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n3 4  \n0 1 2\n1 2 4\n2 0 8\n1 0 16\n2\n0 1 2\n0 2 5\n5 4\n0 1 10\n1 2 5\n2 3 9\n3 4 13\n2\n0 4 14\n1 4 13\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>False True\nTrue False\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h4>\n\n<pre><code>Test Case 1:\n\nThe graph according to the edge list given in the test case is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture1-8899.JPG\" alt=\"Example\"></p>\n\n<pre><code>So our query array is [ [ 0, 1, 2 ], [ 0, 2, 5 ] ] so we return False for the first query as there is no edge with a distance less than \u20182\u2019 from \u20180\u2019 to \u20181\u2019.\nFor the second query, we return \u2018True\u2019 as we can indirectly i.e from \u20180\u2019 to \u20181\u2019 which has the weight \u20182\u2019 less than \u20185\u2019 and then \u20181\u2019 to \u20182\u2019 which has the weight \u20184\u2019 less than \u20185\u2019.\n</code></pre>\n\n<p>Test Case 2:</p>\n\n<pre><code>The graph according to the edge list given in the test case is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture2-8900.JPG\" alt=\"Example\"></p>\n\n<pre><code>So our query array is [ [ 0, 4, 14 ], [ 1, 4, 13 ] ] so we return True for the first query as it is clear from the image we can go that place.\nFor the second query, we return \u2018False\u2019 as we cannot go from \u20183\u2019 to \u20184\u2019 as the edge weight is \u201813\u2019 which is not smaller than our given limit.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n3  4\n0 1 8\n1 2 6\n2 0 10\n1 0 12\n2\n0 1 11\n2 0 5\n5 4\n0 1 10\n1 2 5\n2 3 9\n3 4 15\n2\n0 4 18\n1 4 16\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>True False\nTrue True\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected weighted graph representing a map of mountains and paths, determine if Ninja can travel between specified locations within a given weight limit. The graph is represented by an adjacency list where each edge has a weight representing the maximum weight the path between two mountains can hold. Given a series of queries, each specifying a starting location, an ending location, and a maximum allowed weight, determine if a path exists between the two locations where all edges in the path have a weight less than the specified maximum weight.",
                "constraints": [
                    "1 <= T <= 100",
                    "2 <= N <= 1000",
                    "2 <= | EDGELIST |, | QUERY | <= 1000",
                    "0 <= EDGELIST[i][j], QUERY[i][j] <= N - 1"
                ],
                "testcases": [
                    {
                        "input": "n = 3, edgeList = [[0, 1, 2], [1, 2, 4], [2, 0, 8], [1, 0, 16]], queries = [[0, 1, 2], [0, 2, 5]]",
                        "output": "[False, True]",
                        "explanation": "For the first query (0, 1, 2), there is no direct edge from 0 to 1 with a weight less than 2. Hence, the answer is False. For the second query (0, 2, 5), there's a path 0 -> 1 (weight 2 < 5) and 1 -> 2 (weight 4 < 5), so a path exists. Hence, the answer is True."
                    },
                    {
                        "input": "n = 5, edgeList = [[0, 1, 10], [1, 2, 5], [2, 3, 9], [3, 4, 13]], queries = [[0, 4, 14], [1, 4, 13]]",
                        "output": "[True, False]",
                        "explanation": "For the first query (0, 4, 14), a possible path is 0 -> 1 (10 < 14), 1 -> 2 (5 < 14), 2 -> 3 (9 < 14), 3 -> 4 (13 < 14). Hence, the answer is True. For the second query (1, 4, 13), a possible path is 1 -> 2 (5 < 13), 2 -> 3 (9 < 13), 3 -> 4 (13 == 13, but must be strictly less than). If we include the path between node 3 and 4 it becomes 13 which is not strictly less than 13. Hence, the answer is False."
                    },
                    {
                        "input": "n = 3, edgeList = [[0, 1, 8], [1, 2, 6], [2, 0, 10], [1, 0, 12]], queries = [[0, 1, 11], [2, 0, 5]]",
                        "output": "[True, False]",
                        "explanation": "For the first query (0, 1, 11), the edge 0 -> 1 has weight 8, which is less than 11. Hence, the answer is True. For the second query (2, 0, 5), there is no path from 2 to 0 with weight less than 5 directly, or indirectly. The direct path 2-0 has weight 10. The shortest indirect path can be seen as 2->1->0 (6 + 8) which is not smaller than 5. The answer is False."
                    },
                    {
                        "input": "n = 5, edgeList = [[0, 1, 10], [1, 2, 5], [2, 3, 9], [3, 4, 15]], queries = [[0, 4, 18], [1, 4, 16]]",
                        "output": "[True, True]",
                        "explanation": "For the first query (0, 4, 18), a possible path is 0 -> 1 (10 < 18), 1 -> 2 (5 < 18), 2 -> 3 (9 < 18), 3 -> 4 (15 < 18). Hence, the answer is True. For the second query (1, 4, 16), a possible path is 1 -> 2 (5 < 16), 2 -> 3 (9 < 16), 3 -> 4 (15 < 16). Hence, the answer is True."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you use dfs for checking each path?</p>",
            "<p>All the queries are given in advance. Is there a way you can reorder the queries to avoid repeated computations?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}