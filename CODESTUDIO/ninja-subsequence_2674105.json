{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15667,
            "title": "Ninja Subsequence",
            "titleSlug": "ninja-subsequence_2674105",
            "content": "<h4 id=\"ninja-has-recently-learnt-about-sequences-of-parentheses-these-are-special-sequences-that-contain-only-the-characters-and\">Ninja has recently learnt about sequences of parentheses. These are special sequences that contain only the characters &#39;(&#39; and &#39;)&#39;.</h4>\n\n<h4 id=\"ninja-studied-regular-and-non-regular-sequences-of-parentheses-too-a-regular-sequence-follows-the-following-definition\">Ninja studied regular and non-regular sequences of parentheses too. A regular sequence follows the following definition :</h4>\n\n<h4 id=\"an-empty-sequence-is-regular\">An empty sequence is regular :</h4>\n\n<pre><code>If \u2018S\u2019 is a regular sequence, then (S) is also regular.\n\nIf \u2018A\u2019 and \u2018B\u2019 represent two regular sequences, then their concatenation \u2018AB\u2019 is also regular.\n\nTherefore, the sequences (), ()() and (())() are regular, while ()(, ) and ))() are non-regular.\n</code></pre>\n\n<h4 id=\"now-ninja-provides-you-with-a-parentheses-sequence-s-of-length-n-and-challenges-you-to-find-the-longest-subsequence-of-the-given-sequence-which-is-non-regular-amongst-all-such-distinct-subsequences-output-the-lexicographically-kth-amongst-them-if-the-number-of-distinct-subsequences-with-maximum-length-is-less-than-k-please-output-1-instead\">Now Ninja provides you with a parentheses sequence \u2018S\u2019 of length \u2018N\u2019 and challenges you to find the longest subsequence of the given sequence which is non-regular. Amongst all such distinct subsequences, output the lexicographically \u2018Kth\u2019 amongst them. If the number of distinct subsequences with maximum length is less than \u2018K\u2019, please output -1 instead.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>\u2018(\u2018 is considered lexicographically smaller than \u2018)\u2019. \n\nTwo subsequences are distinct if they differ at least at one of the indexes. E.g. \u2018))\u2019 and \u2018((\u2018  are distinct whereas \u2018((\u2018 and \u2018((\u2018 are not.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>N = 5\nS = ()\nK = 2\n\nExplanation : \n\nAll possible subsequences of the given sequence are : \u2018(\u2018 , \u2018)\u2019 and \u2018()\u2019.\n\nThe non-regular subsequences among these are : \u2018(\u2018 and \u2018)\u2019.\n\nOf these the lexicographically \u20182nd\u2019 subsequence is \u2018)\u2019.\n\nHence, final result = \u2018)\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases to be run. Then the test cases follow.\n\nThe first line of each test case contains two integers \u2018N\u2019 and \u2018K\u2019.\n\nThe second line of each test case contains a string \u2018S\u2019 of length \u2018N\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a string denoting the lexicographically \u2018Kth\u2019 non-regular subsequence of string \u2018S\u2019.\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1\u2009&lt;= N &lt;= 10^5\n1 &lt;= K &lt;= 10^9\nS[i] = \u2018(\u2018 or S[i] = \u2018)\u2019.\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 2    \n(()\n4 2\n(())\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>-1\n())\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For test case 1 we have, \n\nThe largest non-regular subsequence is (().\n\nThere exists only 1 largest length non-regular subsequence but we need to find the 2nd non-regular subsequence.\n\nSo we output -1.\n\nFor test case 2 we have, \n\nThe largest non-regular subsequence length is 3 and there are two such unique subsequences. They are (() and ()) respectively in lexicographic order.\n\nWe are required to print the \u20182nd\u2019 subsequence.\n\nSo we output ()).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2 2\n()\n3 1\n(()\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>)\n(()\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a parentheses sequence 'S' of length 'N' consisting of '(' and ')', find the lexicographically 'Kth' longest non-regular subsequence of 'S'. A regular sequence follows these rules:\n\n1.  An empty sequence is regular.\n2.  If 'S' is a regular sequence, then '(S)' is also regular.\n3.  If 'A' and 'B' are regular sequences, then 'AB' is also regular.\n\nIf the number of distinct subsequences with the maximum non-regular length is less than 'K', output -1.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10^5",
                    "1 <= K <= 10^9",
                    "S[i] = '(' or S[i] = ')'",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 2\n(()",
                        "output": "-1",
                        "explanation": "The longest non-regular subsequence is '(()'. There is only 1 longest length non-regular subsequence, but we need to find the 2nd one. Therefore, the output is -1."
                    },
                    {
                        "input": "4 2\n(())",
                        "output": "())",
                        "explanation": "The longest non-regular subsequence length is 3 and there are two such unique subsequences: '(()' and '())', in lexicographic order. The '2nd' subsequence is '())'."
                    },
                    {
                        "input": "2 2\n()",
                        "output": ")",
                        "explanation": null
                    },
                    {
                        "input": "3 1\n(()",
                        "output": "(()",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find all subsequences of the sequence.</p><p>&nbsp;</p>",
            "<p>Notice that we only need the maximum length non-regular subsequences and they can be at most \u2018N\u2019.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}