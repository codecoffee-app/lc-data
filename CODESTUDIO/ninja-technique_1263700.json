{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10734,
            "title": "NINJA TECHNIQUE",
            "titleSlug": "ninja-technique_1263700",
            "content": "<h4 id=\"ninja-has-its-own-technique-of-making-a-decision-to-do-something-or-not-this-technique-is-known-as-the-ninja-technique-in-this-technique-ninja-generates-a-random-string-containing-only-digits-and-if-any-substring-whose-integer-value-can-be-defined-as-the-product-of-two-consecutive-integers-i-e-x-n-n-1-then-ninja-do-that-work-else-didn-t-so-now-ninja-wants-to-invest-in-the-stock-market-so-he-is-using-his-ninja-technique-for-deciding\">Ninja has its own technique of making a decision to do something or not. This technique is known as the ninja technique. In this technique, Ninja generates a random string containing only digits, and if any substring whose integer value can be defined as the product of two consecutive integers i.e \u2018X = N*(N+1)\u2019 then Ninja do that work else didn\u2019t. So now Ninja wants to invest in the stock market so he is using his ninja technique for deciding.</h4>\n\n<h4 id=\"so-your-task-is-to-write-a-code-that-can-check-whether-the-string-contains-any-substring-whose-integer-value-can-be-defined-as-the-product-of-two-consecutive-integers-if-any-substring-exists-you-should-return-true-else-return-false\">So your task is to write a code that can check whether the string contains any substring whose integer value can be defined as the product of two consecutive integers. If any substring exists you should return \u2018True\u2019else return\u2018False\u2019.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>Substring with integer value \u20180\u2019is not considered as special and check only for integers up to length \u20189\u2019as beyond \u20189\u2019integer can\u2019t hold values.\n</code></pre>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>For the string \u20181242\u2019 we return \u2018True\u2019 as for substring:\n\u201812\u2019 we can be defined as the product of two consecutive integers i.e \u20183\u2019 and \u20184\u2019.\n\u20182\u2019 we can be defined as the product of two consecutive integers i.e \u20181\u2019 and \u20182\u2019.\n\u201842\u2019 can be defined as the product of two consecutive integers i.e \u20186\u2019 and \u20187\u2019.\n If the string passes the required condition we have to return \u2018True\u2019 else we have to return \u2018False\u2019.  \n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of input contains a \u2018T\u2019 number of test cases.\n\nIn the second line, the string &#39;STR\u2019 denoting the given string.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, print \u2018True\u2019 if any such substring exists else return \u2018False\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= | STR | &lt;= 30\n\nWhere |STR| represents the length of the string &#39;STR&#39;.\n\nTime Limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n11246\n81\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h4>\n\n<pre><code>Test Case 1:\n\nSo according to this test case string given is \u201811246\u2019 so in this string possible substring is \u20181\u2019, \u20181\u2019, \u20182\u2019, \u20184\u2019, \u20186\u2019, \u201811\u2019, \u201812\u2019, \u201824\u2019, \u201846\u2019, \u2018112\u2019, \u2018124\u2019, \u2018246\u2019, \u20181124\u2019, \u20181246\u2019, \u201811246\u2019 so we return \u2018True\u2019 as there are substrings like \u20182\u2019, \u20186\u2019, \u201812\u2019 and so on which can be defined in the form of the product of two consecutive integers like we can write :\n\u20182\u2019as \u20182*1\u2019\n\u20186\u2019as \u20183*2\u2019\n\u201812\u2019as \u20184*3\u2019\n\nTest Case 2:\n\nSo according to this test case string given is \u201881\u2019 so in this string possible substrings are \u20188\u2019, \u20181\u2019, \u201881\u2019 so we return \u2018False\u2019as for any substring we can\u2019t define in the form of the product of two consecutive integers.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n636\n75\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>True\nFalse\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string of digits, determine if any substring of the string can be expressed as the product of two consecutive integers (i.e., n * (n + 1)). Return 'True' if such a substring exists, and 'False' otherwise.  Consider substrings up to length 9. The substring '0' is not considered a valid product of consecutive integers.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |STR| <= 30",
                    "|STR| represents the length of the string 'STR'.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "11246\n81",
                        "output": "True\nFalse",
                        "explanation": "Test Case 1: The string '11246' contains the substring '2' (1 * 2), '6' (2 * 3), and '12' (3 * 4), among others, which are products of consecutive integers. Therefore, the output is True.\n\nTest Case 2: The string '81' has substrings '8', '1', and '81'. None of these can be represented as n * (n + 1) for any integer n. Therefore, the output is False."
                    },
                    {
                        "input": "636\n75",
                        "output": "True\nFalse",
                        "explanation": "Test Case 1: The string '636' contains substrings '6' (2 * 3), '36' (6 * 6). So it satisfies the condition for substring '6'.\n\nTest Case 2: The string '75' has substrings '7', '5', and '75'. None of these can be represented as n * (n + 1) for any integer n. Therefore, the output is False."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>Try to think of all possible substrings of the string.</strong></p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}