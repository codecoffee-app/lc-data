{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10430,
            "title": "NINJA: The Exam Instructor",
            "titleSlug": "ninja-the-exam-instructor_1215010",
            "content": "<h4 id=\"ninja-went-to-a-school-as-an-invigilator-for-an-exam-the-seats-in-the-room-were-mentioned-with-the-number-and-they-form-a-tree-like-structure-so-he-started-thinking-of-a-solution-so-that-he-allocated-seats-to-students-in-such-a-way-that-no-students-would-sit-adjacent-to-each-other\">Ninja went to a school as an invigilator for an exam the seats in the room were mentioned with the number and they form a tree-like structure so he started thinking of a solution so that he allocated seats to students in such a way that no students would sit adjacent to each other.</h4>\n\n<h4 id=\"so-help-our-ninja-write-a-code-for-the-problem-so-he-is-able-to-count-the-maximum-number-of-seats-available-for-the-students-that-no-student-can-sit-adjacent-to-each-other\">So help our ninja write a code for the problem so he is able to count the maximum number of seats available for the students that no student can sit adjacent to each other.</h4>\n\n<h4 id=\"so-your-task-is-to-write-a-code-that-can-find-the-maximum-subset-of-a-node-in-a-given-binary-tree-where-there-is-no-edge-between-any-two-nodes-of-the-subset\">So your task is to write a code that can find the maximum subset of a node in a given binary tree where there is no edge between any two nodes of the subset.</h4>\n\n<h4 id=\"for-example-consider-the-following-binary-tree-the-largest-subset-set-is-1-5-6-7-and-the-size-of-the-subset-is-4\">For example, consider the following binary tree. The largest subset set is {1, 5, 6, 7} and the size of the subset is 4.</h4>\n\n<p><img src=\"https://files.codingninjas.in/cnt-8137.JPG\" alt=\"Example\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the &#39;T&#39; test cases are as follow.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 -1 5 6 7 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the maximum number of elements in a subset satisfying the given condition. Print output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n-10^9 &lt;= DATA &lt;= 10^9\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 is the number of benches(nodes of the tree) in the given class, and &#39;DATA&#39; is the value mentioned on the bench(value of nodes).\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 -1 4 -1 5 -1 -1 -1 -1\n1 2 -1 4 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n2\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h4>\n\n<pre><code>In first test case, the level order traversal of a given class is 1 2 3 -1 4 -1 5 -1 -1 -1 -1, thus its first bench is bench number with value 1, and left and right benches of the 1 are nodes with 2 and 3 respectively.\nThe binary tree according to the test case is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample1-8138.JPG\" alt=\"Example\"></p>\n\n<pre><code>So we choose the bench with the bench number as {1, 4, 5} so the output is 3.\n\nIn the second test case, the binary tree according to the test case is:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/test-case-2-8139.JPG\" alt=\"Example\"></p>\n\n<pre><code>So we choose the bench with the bench number as {1, 4} so the output is 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 -1 2 -1 -1\n1 2 3 4 5 -1 6 -1 -1 7 8 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>1\n5\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>In the first test case, there are only two nodes thus, one of them is only useful and so, answer will be 1.\nIn the second test case, {1, 4, 6 , 7, 8} can be used and so, answer will be 5.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree representing a seating arrangement in a classroom, determine the maximum number of students that can be seated such that no two students sit in adjacent seats (connected by an edge in the tree).",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 3000 (Number of nodes in the tree)",
                    "-10^9 <= DATA <= 10^9 (Value of each node)"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 -1 4 -1 5 -1 -1 -1 -1",
                        "output": "3",
                        "explanation": "One optimal seating arrangement is to seat students at nodes with values 1, 4, and 5. Therefore the maximum number of students that can be seated without adjacent students is 3."
                    },
                    {
                        "input": "1 2 -1 4 -1 -1 -1",
                        "output": "2",
                        "explanation": "One optimal seating arrangement is to seat students at nodes with values 1 and 4. Therefore the maximum number of students that can be seated without adjacent students is 2."
                    },
                    {
                        "input": "1 -1 2 -1 -1",
                        "output": "1",
                        "explanation": "In this test case, either 1 or 2 can be used but not both. So the answer is 1."
                    },
                    {
                        "input": "1 2 3 4 5 -1 6 -1 -1 7 8 -1 -1 -1 -1 -1 -1",
                        "output": "5",
                        "explanation": "One optimal seating arrangement is to seat students at nodes with values 1, 4, 6, 7, and 8. Therefore the maximum number of students that can be seated without adjacent students is 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we find the largest subset for a node X if we know the largest subset for all descendants of X?&nbsp;</p>",
            "<p>Can we think of storing the solutions to subproblems and solving problems in a bottom-up manner?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}