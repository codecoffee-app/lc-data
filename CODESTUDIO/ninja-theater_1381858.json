{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11511,
            "title": "Ninja theater",
            "titleSlug": "ninja-theater_1381858",
            "content": "<h4 id=\"you-have-been-appointed-as-the-technical-lead-in-the-very-famous-ninja-theater-due-to-the-recent-pandemic-all-the-people-inside-the-theater-must-follow-social-distancing-there-are-n-seats-in-a-single-row-in-the-ninja-theater-numbered-from-0-to-n-1-inclusive-as-a-technical-lead-your-task-is-to-find-a-seating-arrangement-for-ninja-theater-such-that-when-a-person-enters-the-theater-he-she-must-sit-in-the-seat-that-maximizes-the-distance-from-the-closest-person\">You have been appointed as the technical lead in the very famous ninja theater. Due to the recent pandemic, all the people inside the theater must follow social distancing. There are \u2018N\u2019 seats in a single row in the ninja theater, numbered from 0 to \u2018N\u2019 - 1 inclusive. As a technical lead, your task is to find a seating arrangement for ninja theater such that when a person enters the theater, he/she must sit in the seat that maximizes the distance from the closest person.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1) If the theater is empty, i.e., if no one is in the theater, they sit in the first seat(seat number 0).\n2) If there are multiple seats that maximize the distance from the closest person, they sit in the seat with the lowest number.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains a single integer, \u2018N\u2019, where \u2018N\u2019 denotes the number of seats in a single row in ninja theater.\n\nThe second line of each test case contains a single integer, \u2018M\u2019, where \u2018M\u2019 denotes the number of queries. Here each query can be of two types.\n\nThe next \u2018M\u2019 lines contain two space-separated integers, \u2018type\u2019 and \u2018seatNum\u2019, where \u2018type\u2019 denotes the query type. For queries of the first type, \u2018seatNum\u2019 is -1, whereas, for the second type, it denotes the seat number of the person that leaves the theater.\n\nNote: For every query of the first type, it is guaranteed that at least one seat is empty, and for the query of the second type, it is guaranteed that \u2018seatNum\u2019 has a person sitting.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, for each query of the first type, print \u2018K\u2019 space-separated integers denoting the seat numbers that a person should sit to maximize the distance from the closest person. Here \u2018K\u2019 denotes the total number of queries of the first type in the current test case.\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10 ^ 9\n1 &lt;= M &lt;= 100\n1 &lt;= type &lt;= 2\n0 &lt;= seatNum &lt;= \u2018N\u2019 - 1\n\nTime Limit : 1 sec\n\nWhere \u2018T\u2019 is the number of test cases,  \u2018N\u2019 denotes the number of seats in a single row in ninja theater, \u2018M\u2019 denotes the number of queries, type\u2019 denotes the query type, and \u2018seatNum\u2019 denotes the seat number of the person that leaves the theater.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code> You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n6\n4\n1 -1\n1 -1\n1 -1\n1 -1\n7\n5\n1 -1\n1 -1\n1 -1\n2 0\n1 -1 \n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>0 5 2 1\n0 6 3 0\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h4>\n\n<pre><code>Test Case 1 :  \nThere are 6 seats in ninja theater, and initially, all are empty [null, null, null, null, null, null], where null represents an empty seat.\nAfter the first query, the person sits at seat number 0, [person, null, null, null, null, null]\nAfter the second query, the person sits at seat number 5, [person, null, null, null, null, person], since it maximizes the distance from the person sitting at seat number 0.\nAfter the third query, the person sits at seat number 2, [person, null, person, null, null, person], since it maximizes the distance from the person sitting at seat number 0 and 5 and has the lowest seat number.\nAfter the fourth query, the person sits at seat number 1, [person, person, person, null, null, person], since it has the lowest seat number.\n\nTest Case 2 : \nThere are 7 seats in ninja theater, and initially, all are empty [null, null, null, null, null, null, null], where null represents an empty seat.\nAfter the first query, the person sits at seat number 0, [person, null, null, null, null, null, null]\nAfter the second query, the person sits at seat number 6, [person, null, null, null, null, null,  person], since it maximizes the distance from the person sitting at seat number 0.\nAfter the third query, the person sits at seat number 3, [person, null, null, person, null, null, person], since it maximizes the distance from the person sitting at seats number 0 and 6.\nAfter the fourth query, the person sitting at seat number 0 leaves the theater, [null, null, null, person, null, null, person]\nAfter the fifth query, the person sits at seat number 0, [person, null, null, person, null, null, person], since it maximizes the distance from the person sitting at seats number 3 and 6.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>1\n8\n7\n1 -1\n1 -1\n1 -1\n1 -1\n2 7\n2 3\n1 -1\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>0 7 3 5 2\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h4>\n\n<pre><code>Test Case 1 :  \nThere are 8 seats in ninja theater, and initially, all are empty [null, null, null, null, null, null, null, null], where null represents an empty seat.\nAfter the first query, the person sits at seat number 0, [person, null, null, null, null, null, null, null]\nAfter the second query, the person sits at seat number 7, [person, null, null, null, null, null, null, person], since it maximizes the distance from the person sitting at seat number 0.\nAfter the third query, the person sits at seat number 3, [person, null, null, person, null, null, null, person], since it maximizes the distance from the person sitting at seats number 0 and 7 and has the lowest seat number.\nAfter the fourth query,  the person sits at seat number 5, [person, null, null, person, null, person, null, person], since it maximizes the distance from the person sitting at seats number 0, 3, and 7.\nAfter the fifth query, the person sitting at seat number 7 leaves the theater, [person, null, null, person, null, person, null, null]\nAfter the sixth query, the person sitting at seat number 3 leaves the theater, [person, null, null, null, null, person, null, null]\nAfter the seventh query, the person sits at seat number 2, [person, null, person, null, null, person, null, null], since it maximizes the distance from the person sitting at seats number 0 and 5 and has the lowest seat number.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -7,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are the technical lead for the Ninja Theater. Due to a pandemic, social distancing is required. The theater has 'N' seats in a row, numbered from 0 to N-1. Your task is to devise a seating arrangement where each arriving person sits in the seat that maximizes their distance from the nearest occupied seat.  Consider these constraints:\n\n1.  If the theater is empty, the person sits in seat 0.\n2.  If multiple seats maximize the distance, the person chooses the seat with the smallest number.",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= N <= 10^9 (Number of seats)",
                    "1 <= M <= 100 (Number of queries)",
                    "1 <= type <= 2 (Query type)",
                    "0 <= seatNum <= N - 1 (Seat number to leave)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "6\n4\n1 -1\n1 -1\n1 -1\n1 -1",
                        "output": "0 5 2 1",
                        "explanation": "Initially, all 6 seats are empty: [null, null, null, null, null, null].\n- First query: A person sits at seat 0: [person, null, null, null, null, null].\n- Second query: A person sits at seat 5 (farthest from 0): [person, null, null, null, null, person].\n- Third query: A person sits at seat 2 (farthest from 0 and 5, lowest index): [person, null, person, null, null, person].\n- Fourth query: A person sits at seat 1 (farthest from 0, 2, and 5, lowest index): [person, person, person, null, null, person]."
                    },
                    {
                        "input": "7\n5\n1 -1\n1 -1\n1 -1\n2 0\n1 -1",
                        "output": "0 6 3 0",
                        "explanation": "Initially, all 7 seats are empty: [null, null, null, null, null, null, null].\n- First query: A person sits at seat 0: [person, null, null, null, null, null, null].\n- Second query: A person sits at seat 6 (farthest from 0): [person, null, null, null, null, null, person].\n- Third query: A person sits at seat 3 (farthest from 0 and 6): [person, null, null, person, null, null, person].\n- Fourth query: The person at seat 0 leaves: [null, null, null, person, null, null, person].\n- Fifth query: A person sits at seat 0 (farthest from 3 and 6): [person, null, null, person, null, null, person]."
                    },
                    {
                        "input": "8\n7\n1 -1\n1 -1\n1 -1\n1 -1\n2 7\n2 3\n1 -1",
                        "output": "0 7 3 5 2",
                        "explanation": "Initially, all 8 seats are empty: [null, null, null, null, null, null, null, null].\n- First query: A person sits at seat 0: [person, null, null, null, null, null, null, null].\n- Second query: A person sits at seat 7: [person, null, null, null, null, null, null, person].\n- Third query: A person sits at seat 3: [person, null, null, person, null, null, null, person].\n- Fourth query: A person sits at seat 5: [person, null, null, person, null, person, null, person].\n- Fifth query: The person at seat 7 leaves: [person, null, null, person, null, person, null, null].\n- Sixth query: The person at seat 3 leaves: [person, null, null, null, null, person, null, null].\n- Seventh query: A person sits at seat 2: [person, null, person, null, null, person, null, null]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Maintain the seat numbers of the persons sitting in the theater in sorted order. For every query of the first type, iterate over this list of seat numbers and find the lowest seat number, which is empty and has a maximum distance from the closest person.</p>",
            "<p>Try to use an ordered set and an ordered map for fast insertion and deletion. Instead of considering each empty seat at a time, think of an interval of empty seats.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}