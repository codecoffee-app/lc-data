{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11017,
            "title": "Ninja visits his friend",
            "titleSlug": "ninja-visits-his-friend_1376428",
            "content": "<h4 id=\"ninja-and-his-friend-live-in-a-grid-of-size-n-x-m-with-rows-numbered-1-to-n-from-top-to-bottom-and-columns-numbered-1-to-m-from-left-to-right-ninja-lives-in-the-top-left-cell-and-his-friend-lives-in-the-bottom-right-cell\">Ninja and his friend live in a grid of size \u2018N x M\u2019, with rows numbered 1 to \u2018N\u2019 from top to bottom, and columns numbered 1 to \u2018M\u2019 from left to right. Ninja lives in the top-left cell and his friend lives in the bottom-right cell.</h4>\n\n<h4 id=\"every-cell-is-either-allowed-or-blocked-by-an-obstacle\">Every cell is either allowed or blocked by an obstacle.</h4>\n\n<h4 id=\"ninja-wants-your-help-to-find-the-minimum-path-from-his-home-to-his-friend-given-that-ninja-can-use-a-secret-technique-that-can-remove-at-most-k-obstacles\">Ninja wants your help to find the minimum path from his home to his friend given that Ninja can use a secret technique that can remove at most \u2018K\u2019 obstacles.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>If Ninja is unable to reach his friend\u2019s house then return -1.\n\nEmpty cell in the matrix is represented by \u20180\u2019 and an obstacle by \u20181\u2019.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format</h4>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains three space-separated integers, &#39;N&#39; and &#39;M&#39;, denoting the number of rows and columns in the matrix &#39;MAT&#39;, respectively and \u2018K\u2019, denoting the atmost numbers of obstacles Ninja can remove.\n\nEach of the next &#39;N&#39; lines contains &#39;M&#39; space-separated integers denoting the matrix &#39;MAT&#39; elements.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the minimum number of steps needed to reach Ninja\u2019s friend&#39;s house from Ninja house.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N, M &lt;= 50\n1&lt;= K &lt;= N * M\n0 &lt;= MAT[ i ][ j ] &lt;= 1\n\nWhere &#39;T&#39; denotes the number of test cases, &#39;N&#39; and &#39;M&#39; denotes the number of rows and columns in the matrix &#39;MAT&#39; respectively, &#39;K&#39; denotes the most numbers of obstacles Ninja can remove and &#39;MAT[i][j]&#39; denotes the element present at the &#39;i&#39;th&#39; row and the &#39;j&#39;th&#39; column of the matrix &#39;MAT&#39;.\n\nTime limit: 1 sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n2 3 1\n0 0 1\n1 0 0\n3 3 1\n0 1 0\n1 0 0\n1 1 0\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>3\n4\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h4>\n\n<pre><code>Test Case 1 :  \nWe can remove obstacle at (1,3) (1 - based indexing) and then move on shortest path in 3 steps i.e\n(1,1) -&gt; ( 1,2) -&gt; (1,3) -&gt; (2,3).\n\nTest Case 2 : \nWe can remove obstacle at (1,2) (1 - based indexing)  and then move like shown below in 4 steps.\n(1,1) -&gt; ( 1,2) -&gt; (1,3) -&gt; (2,3) -&gt; (3,3).\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n2 2 1\n0 1 \n1 0\n3 3 2\n0 1 1\n1 1 1\n1 1 0\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>2\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a grid of size N x M, where each cell is either allowed (0) or blocked by an obstacle (1). Ninja starts at the top-left cell (1,1) and wants to reach his friend's house at the bottom-right cell (N,M). Ninja can use a secret technique to remove at most K obstacles. Find the minimum number of steps required for Ninja to reach his friend's house. If Ninja cannot reach his friend's house, return -1.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N, M <= 50",
                    "1 <= K <= N * M",
                    "0 <= MAT[ i ][ j ] <= 1"
                ],
                "testcases": [
                    {
                        "input": "2\n2 3 1\n0 0 1\n1 0 0\n3 3 1\n0 1 0\n1 0 0\n1 1 0",
                        "output": "3\n4",
                        "explanation": "Test Case 1: Ninja can remove the obstacle at (1,3) and then take the path (1,1) -> (1,2) -> (1,3) -> (2,3), requiring 3 steps.\n\nTest Case 2: Ninja can remove the obstacle at (1,2) and then take the path (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3), requiring 4 steps."
                    },
                    {
                        "input": "2\n2 2 1\n0 1\n1 0\n3 3 2\n0 1 1\n1 1 1\n1 1 0",
                        "output": "2\n-1",
                        "explanation": "Test Case 1: Ninja can remove the obstacle at (1,2) and then take the path (1,1) -> (1,2) -> (2,2), requiring 2 steps.\n\nTest Case 2: Ninja cannot reach the destination with removing atmost 2 obstacles."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use the BFS traversal.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}