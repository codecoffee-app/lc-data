{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9130,
            "title": "Nodes without siblings",
            "titleSlug": "nodes-without-siblings_975485",
            "content": "<h4 id=\"you-are-given-an-arbitrary-binary-tree-consisting-of-n-nodes-your-task-is-to-find-all-the-nodes-of-the-tree-that-do-not-have-a-sibling\">You are given an arbitrary binary tree consisting of N nodes, your task is to find all the nodes of the tree that do not have a sibling.</h4>\n\n<h4 id=\"a-binary-tree-is-a-tree-where-every-node-has-at-most-two-child-nodes\">A binary tree is a tree where every node has at most two child nodes.</h4>\n\n<h4 id=\"two-nodes-in-a-tree-are-called-siblings-if-they-are-children-of-the-same-parent-node-i-e-they-have-the-same-immediate-ancestor-node\">Two nodes in a tree are called siblings if they are children of the same parent node i.e they have the same immediate ancestor node.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The root node is not considered as the node with no sibling.\n2. If there are no such nodes, return -1.\n</code></pre>\n\n<h4 id=\"for-example-consider-the-following-binary-tree\">For example, consider the following binary tree:</h4>\n\n<p><img src=\"https://files.codingninjas.in/binary-tree-2-5399.png\" alt=\"example\"></p>\n\n<pre><code>Here node 4 and 7 do not have any siblings.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases. Then the test cases follow.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image would be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binary-tree-2-5399.png\" alt=\"example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation:</h4>\n\n<pre><code>Level 1:\nThe root node of the tree is 1\n\nLevel 2:\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3:\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4:\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5:\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1). The last line contains the value of the two nodes (7 and 5) between which we have to find the distance.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree.\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the output will be a list of nodes that do not have a sibling.\n\nThe output for each test case will be in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n1 &lt;= data &lt;= 10^6\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cdata\u201d is the value of the binary tree node.\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5 6 2 4 3 -1 -1 9 7 -1 -1 -1 -1 -1 -1\n1 2 -1 -1 3 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>-1\n2 3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/binary-tree-3-5400.png\" alt=\"Sample Input 1\"></p>\n\n<pre><code>For the first test case, 6 and 2 are siblings, 4 and 3 are siblings and 9 and 7 are siblings. So, there are no nodes that do not have any siblings.\n\nFor the second test case, 2 and 3 do have any siblings.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n1 -1 2 -1 3 -1 -1\n1 2 -1 3 4 5 6 7 8 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n2 3    \n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an arbitrary binary tree with N nodes, identify all nodes that do not have a sibling.  A sibling is defined as another node sharing the same parent. Note that the root node is not considered. If no nodes without siblings exist, return -1.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 3000 (Total number of nodes in the binary tree)",
                    "1 <= data <= 10^6 (Value of a binary tree node)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "5 6 2 4 3 -1 -1 9 7 -1 -1 -1 -1 -1 -1",
                        "output": "-1",
                        "explanation": "In the given tree, nodes 6 and 2 are siblings, nodes 4 and 3 are siblings, and nodes 9 and 7 are siblings. Therefore, no nodes lack a sibling."
                    },
                    {
                        "input": "1 2 -1 -1 3 -1 -1",
                        "output": "2 3",
                        "explanation": "Nodes 2 and 3 do not have any siblings."
                    },
                    {
                        "input": "3\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n1 -1 2 -1 3 -1 -1\n1 2 -1 3 4 5 6 7 8 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "-1\n2 3\n2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to reach out to each node and check whether it has any sibling or not.</p>",
            "<p>Try to iterate through each node and check whether it has any sibling or not.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}