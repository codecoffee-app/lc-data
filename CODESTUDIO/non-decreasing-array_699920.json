{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7574,
            "title": "Non-Decreasing Array",
            "titleSlug": "non-decreasing-array_699920",
            "content": "<h4 id=\"you-have-been-given-an-integer-array-list-arr-of-size-n-write-a-solution-to-check-if-it-could-become-non-decreasing-by-modifying-at-most-1-element\">You have been given an integer array/list &#39;ARR&#39; of size &#39;N&#39;. Write a solution to check if it could become non-decreasing by modifying at most 1 element.</h4>\n\n<h4 id=\"we-define-an-array-as-non-decreasing-if-arr-i-arr-i-1-holds-for-every-i-0-based-such-that-0-i-n-2\">We define an array as non-decreasing, if ARR[i] &lt;= ARR[i + 1] holds for every i (0-based) such that (0 &lt;= i &lt;= N - 2).</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains an Integer &#39;N&#39; denoting the size of the array/list.\n\nThe second line of each test case contains &#39;N&#39; space-separated Integers denoting the array/list.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a single line containing &quot;true&quot; if it&#39;s possible to make &#39;ARR&#39; non-decreasing array with modifying at most one element or &quot;false&quot; otherwise. \n\nThe output for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of.  Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10 ^ 4\n- 10 ^ 9 &lt;= ARR[i] &lt;= 10 ^ 9\n\nWhere &#39;N&#39; is the size of the given array/list.\nAnd, ARR[i] denotes the i-th element in the array/list &#39;ARR&#39;.\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3\n8 4 6\n3\n8 4 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">Explanation to Sample Input 1 :</h5>\n\n<pre><code>For Test Case 1 we can have a possible non-decreasing array : 2 4 6\nWhere only the element at index 0 has been modified.\n\nFor Test Case 2 there is no possible way to make the array non-decreasing by modifying at most 1 element.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n6\n-2 7 -1 0 1 2\n5\n-10 10 0 10 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-2\">Explanation to Sample Input 2 :</h5>\n\n<pre><code>For Test Case 1 we can have a possible non-decreasing array : -2 -2 -1 0 1 2\nWhere only the element at index 1 has been modified\n\nFor Test Case 2 there is no possible way to make the array non-decreasing by modifying at most 1 element.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 148,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array 'ARR' of size 'N', determine if it can be made non-decreasing by modifying at most one element. An array is considered non-decreasing if ARR[i] <= ARR[i + 1] for all 0 <= i <= N - 2.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^4",
                    "-10^9 <= ARR[i] <= 10^9",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "3\n8 4 6",
                        "output": "true",
                        "explanation": "The array can be made non-decreasing by changing 8 to a smaller value like 2 (resulting in 2 4 6)."
                    },
                    {
                        "input": "3\n8 4 2",
                        "output": "false",
                        "explanation": "It is not possible to make the array non-decreasing by modifying only one element. No single modification can rectify both the 8 > 4 and 4 > 2 violations."
                    },
                    {
                        "input": "6\n-2 7 -1 0 1 2",
                        "output": "true",
                        "explanation": "The array can be made non-decreasing by changing 7 to -2 (resulting in -2 -2 -1 0 1 2)."
                    },
                    {
                        "input": "5\n-10 10 0 10 3",
                        "output": "false",
                        "explanation": "It is not possible to make the array non-decreasing by modifying only one element."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>You can try to modify every index one by one and check whether it is possible to make the array non-decreasing.</p>",
            "<p>If the element which needs to be modified is present somewhere in the middle, we can skip some elements from both sides of the array.</p>",
            "<p>Can you find the indices which are not in non-decreasing order?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*  \r\n    Time Complexity : O(N)\r\n    Space Complexity : O(1)\r\n\r\n    Where 'N' is the size of Array.\r\n*/\r\n\r\nbool isPossible(int *arr, int n)\r\n{\r\n\r\n    int i, notInOrderIndex = -1;\r\n\r\n    for (i = 0; i < n - 1; i++)\r\n    {\r\n        if (arr[i] > arr[i + 1])\r\n        {\r\n            \r\n            /*\r\n\t\t\t\tIf more than 1 Index is not in non-decreasing\r\n\t\t\t\torder then we can return false.\r\n\t\t\t*/\r\n            if (notInOrderIndex != -1)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            notInOrderIndex = i;\r\n        }\r\n    }\r\n\r\n    /*\r\n\t\tIf Everyone is in Order OR Only First Number\r\n\t\tis not in Order OR Only Last\r\n\t\tnumber is not in Order.\r\n\t*/\r\n    if (notInOrderIndex == -1 || notInOrderIndex == 0 || notInOrderIndex == n - 2)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /*\r\n\t    If we can change arr[notInOrderIndex]\r\n\t\tto be between arr[notInOrderIndex - 1]\r\n\t    and arr[notInOrderIndex + 1].\r\n\t*/\r\n    if (arr[notInOrderIndex - 1] <= arr[notInOrderIndex + 1])\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /*\r\n\t\tIf we can change arr[notInOrderIndex + 1]\r\n\t\tto be between arr[notInOrderIndex]\r\n\t\tand arr[notInOrderIndex + 2].\r\n\t*/\r\n    if (arr[notInOrderIndex] <= arr[notInOrderIndex + 2])\r\n    {\r\n        return true;\r\n    }\r\n\r\n    /*\r\n\t    If there is no way to make the array\r\n\t\tnon-decreasing by modifying at most 1\r\n\t    element.\r\n\t*/\r\n    return false;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''  \r\n    Time Complexity : O(N)\r\n    Space Complexity : O(1)\r\n\r\n    Where 'N' is the size of Array.\r\n'''\r\n\r\ndef isPossible(arr, n):\r\n    \r\n    notInOrderIndex = -1\r\n    \r\n    for i in range(n-1):\r\n        \r\n        if(arr[i] > arr[i+1]):\r\n            \r\n            '''\r\n                If more than 1 Index is not in non-decreasing\r\n                order then we can return false.\r\n            '''\r\n            if (notInOrderIndex != -1):\r\n                \r\n                return False\r\n            \r\n            notInOrderIndex = i\r\n    \r\n    '''\r\n        If Everyone is in Order OR Only \r\n        First Number is not in Order OR Only Last\r\n        number is not in Order.\r\n    '''\r\n    if (notInOrderIndex == -1 or notInOrderIndex == 0 or notInOrderIndex == n - 2):\r\n        return True\r\n      \r\n    '''\r\n        If we can change arr[notInOrderIndex]\r\n        to be between arr[notInOrderIndex - 1]\r\n        and arr[notInOrderIndex + 1].   \r\n    '''\r\n    if (arr[notInOrderIndex - 1] <= arr[notInOrderIndex + 1]):\r\n        return True\r\n    \r\n    '''\r\n        If we can change arr[notInOrderIndex + 1]\r\n        to be between arr[notInOrderIndex]\r\n        and arr[notInOrderIndex + 2].  \r\n    '''\r\n    if (arr[notInOrderIndex] <= arr[notInOrderIndex + 2]):\r\n        return True\r\n        \r\n    '''\r\n        If there is no way to make the array non-decreasing\r\n        by modifying at most 1 element.\r\n    '''\r\n    return False",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*  \r\n    Time Complexity : O(N)\r\n    Space Complexity : O(1)\r\n\r\n    Where 'N' is the size of Array.\r\n*/\r\n\r\npublic class Solution {\r\n\r\n\tpublic static boolean isPossible(int[] arr, int n) {\r\n\r\n\t\tint i, notInOrderIndex = -1;\r\n\r\n\t\tfor (i = 0; i < n - 1; i++) {\r\n\t\t\tif (arr[i] > arr[i + 1]) {\r\n\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\t    If more than 1 Index is not in non-decreasing\r\n\t\t\t\t    order then we can return false.\r\n\t\t\t\t*/\r\n\t\t\t\tif (notInOrderIndex != -1) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnotInOrderIndex = i;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t    If Everyone is in Order OR Only First Number\r\n\t\t\tis not in Order OR Only Last\r\n\t\t    number is not in Order.\r\n\t\t*/\r\n\t\tif (notInOrderIndex == -1 || notInOrderIndex == 0 || notInOrderIndex == n - 2) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t    If we can change arr[notInOrderIndex]\r\n\t\t\tto be between arr[notInOrderIndex - 1]\r\n\t\t    and arr[notInOrderIndex + 1].\r\n\t\t*/\r\n\t\tif (arr[notInOrderIndex - 1] <= arr[notInOrderIndex + 1]) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t    If we can change arr[notInOrderIndex + 1]\r\n\t\t\tto be between arr[notInOrderIndex]\r\n\t\t    and arr[notInOrderIndex + 2].\r\n\t\t*/\r\n\t\tif (arr[notInOrderIndex] <= arr[notInOrderIndex + 2]) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t    If there is no way to make the array\r\n\t\t\tnon-decreasing by modifying at most 1\r\n\t\t    element.\r\n\t\t*/\r\n\t\treturn false;\r\n\t}\r\n\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}