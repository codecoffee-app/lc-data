{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14457,
            "title": "Non-Overlapping Substrings",
            "titleSlug": "non-overlapping-substrings_2179629",
            "content": "<h4 id=\"you-are-given-a-string-str-find-the-maximum-number-of-non-empty-substrings-of-str-such-that-no-two-substrings-overlap-with-each-other-and-each-substring-that-you-select-containing-a-letter-t-must-contain-all-the-occurrences-of-t-in-that-substring\">You are given a string \u201cstr\u201d. Find the maximum number of non-empty substrings of \u201cstr\u201d such that no two substrings overlap with each other and each substring that you select containing a letter \u2018t\u2019 must contain all the occurrences of \u2018t\u2019 in that substring.</h4>\n\n<h4 id=\"a-string-a-is-a-substring-of-a-string-b-if-a-can-be-obtained-from-b-by-deletion-of-several-possibly-zero-or-all-characters-from-the-beginning-and-several-possibly-zero-or-all-characters-from-the-end\">A string \u2018a\u2019 is a substring of a string \u2018b\u2019 if \u2018a\u2019 can be obtained from \u2018b\u2019 by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>If there are multiple solutions of a string, return the string with minimum total length.\n</code></pre>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>Let str = abaccce\n\nNow In this example, we can make a maximum of three substrings i.e. {\u2018b\u2019, \u2018ccc\u2019, \u2018e\u2019}.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>There can be one more solution with maximum substrings equal to three i.e. {\u2018aba\u2019, \u2018ccc\u2019, \u2018e\u2019} but we have to select the substrings with minimum total length. So the final answer is  {\u2018b\u2019, \u2018ccc\u2019, \u2018e\u2019}.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases to be run. Then the test cases follow.\n\nThe first and only line of each test case contains a string \u201cstr\u201d.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a list of strings \u201cans\u201d.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function and return the answer.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= |str| &lt;= 10^5, where |str| represents the length of the String str.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\nab\nwxzxzz\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>a b\nw xzxzz\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<pre><code>For the first test case, there are two non-overlapping substrings satisfying the condition i.e. a, b.\n\nFor the second test case, we have to select the whole substring \u201cxzxzz\u201d for the final answer as we need to select all the occurrences of a letter in one substring. Hence the answer is w, xzxzz.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\nabc\nxtx\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>a b c\nt\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `str`, find the maximum number of non-overlapping, non-empty substrings of `str`. If a substring contains a character 't', it must contain all occurrences of 't' in `str`.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= |str| <= 10^5, where |str| is the length of the string `str`",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "ab",
                        "output": "a b",
                        "explanation": "The string 'ab' can be split into two non-overlapping substrings 'a' and 'b', both satisfying the condition."
                    },
                    {
                        "input": "wxzxzz",
                        "output": "w xzxzz",
                        "explanation": "Since the string contains the character 'x', the substring containing any 'x' must include all of them. Therefore, 'xzxzz' is considered a single substring, and 'w' is the remaining substring."
                    },
                    {
                        "input": "abc",
                        "output": "a b c",
                        "explanation": "The string 'abc' can be split into three non-overlapping substrings 'a', 'b', and 'c', satisfying the conditions."
                    },
                    {
                        "input": "xtx",
                        "output": "xtx",
                        "explanation": "Since the string contains the character 't', the substring containing any 't' must include all of them. Therefor 'xtx' cannot be split."
                    },
                    {
                        "input": "abaccce",
                        "output": "b ccc e",
                        "explanation": "One possible solution is {'b', 'ccc', 'e'}. There is another solution with maximum substrings equal to three i.e. {\u2018aba\u2019, \u2018ccc\u2019, \u2018e\u2019} but we have to select the substrings with minimum total length."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For every substring try to minimize its length greedily by selecting a shorter substring having all the occurrences of all the letters in the string.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}