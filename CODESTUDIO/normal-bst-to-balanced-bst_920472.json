{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8883,
            "title": "Normal BST To Balanced BST",
            "titleSlug": "normal-bst-to-balanced-bst_920472",
            "content": "<h4 id=\"you-have-been-given-a-binary-search-tree-of-integers-with-n-nodes-your-task-is-to-convert-it-into-a-balanced-bst-with-the-minimum-height-possible\">You have been given a binary search tree of integers with \u2018N\u2019 nodes. Your task is to convert it into a balanced BST with the minimum height possible.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-that-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure that has the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h4 id=\"a-balanced-bst-is-defined-as-a-bst-in-which-the-height-of-two-subtrees-of-every-node-differs-no-more-than-1\">A Balanced BST is defined as a BST, in which the height of two subtrees of every node differs no more than 1.</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>For the given BST:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-40-6145.png\" alt=\"Input\"></p>\n\n<pre><code>The modified BST will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-41-6146.png\" alt=\"Ouput\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example for further clarification.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the inorder traversal of the modified binary tree.\n\nThe inorder traversal of a binary tree is the traversal method in which for any node its left subtree is visited first, then the node itself, and then the right subtree. \n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^5\n0 &lt;= data &lt;= 10^8\n\nWhere &#39;data&#39; denotes the value of nodes of BST.\n\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n10 6 -1 4 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>4 6 10\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample output 1:</h5>\n\n<pre><code>The tree can be represented as follows:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-43-6169.png\" alt=\"Example\">    </p>\n\n<pre><code>After converting this tree to balanced BST. It will look like this:   \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-45-6170.png\" alt=\"Output\"></p>\n\n<pre><code>The inorder traversal of the modified tree will be 4 6 10. Since the inorder is sorted. Hence, it is a valid BST. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2 \n10 5 -1 -1 -1\n20 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>5 10 \n20 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 67,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary search tree (BST) of integers with 'N' nodes, convert it into a balanced BST with the minimum possible height. A balanced BST is defined as a BST where the height difference between the left and right subtrees of every node is no more than 1.  The input represents the tree in level order format, with -1 denoting null nodes.  Your task is to reconstruct the BST into a balanced form and output the inorder traversal of the resulting tree.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^5",
                    "0 <= data <= 10^8",
                    "Where 'T' is the number of test cases.",
                    "Where 'N' is the number of nodes in the BST.",
                    "Where 'data' is the value of a node in the BST.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "10 6 -1 4 -1 -1 -1",
                        "output": "4 6 10",
                        "explanation": "The initial BST is unbalanced. After balancing, the inorder traversal of the balanced BST is 4 6 10."
                    },
                    {
                        "input": "20 -1 -1",
                        "output": "20",
                        "explanation": "The initial BST has only one node. The inorder traversal is 20."
                    },
                    {
                        "input": "10 5 -1 -1 -1",
                        "output": "5 10",
                        "explanation": "The initial BST is unbalanced. After balancing, the inorder traversal of the balanced BST is 5 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Store the nodes in the order of Inorder traversal.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}