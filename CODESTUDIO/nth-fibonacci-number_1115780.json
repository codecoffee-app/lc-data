{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10023,
            "title": "Nth Fibonacci Number",
            "titleSlug": "nth-fibonacci-number_1115780",
            "content": "<h4 id=\"you-are-given-an-integer-n-your-task-is-to-find-and-return-the-n-th-fibonacci-number-using-matrix-exponentiation\">You are given an integer \u2018N\u2019, your task is to find and return the N\u2019th Fibonacci number using matrix exponentiation.</h4>\n\n<h4 id=\"since-the-answer-can-be-very-large-return-the-answer-modulo-10-9-7\">Since the answer can be very large, return the answer modulo 10^9 +7.</h4>\n\n<h5 id=\"fibonacci-number-is-calculated-using-the-following-formula\">Fibonacci number is calculated using the following formula:</h5>\n\n<pre><code>F(n) = F(n-1) + F(n-2), \nWhere, F(1) = F(2) = 1.\n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>For \u2018N\u2019 = 5, the output will be 5.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases to be run. Then the test cases follow.\n\nThe first line of each test case contains a single integer \u2018N\u2019, representing the integer for which we have to find its equivalent Fibonacci number.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer representing the N\u2019th Fibonacci number.\n\nReturn answer modulo 10^9 + 7.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n\nTime Limit: 1 sec.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve it in Time Complexity better than O(N)?\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n10\n7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>55\n13\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case, the 10th Fibonacci number is 55.\nFor the second test case, the 7th Fibonacci number is 13.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1\n3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 739,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, find and return the Nth Fibonacci number using matrix exponentiation. Since the answer can be very large, return the answer modulo 10^9 + 7. The Fibonacci sequence is defined as F(n) = F(n-1) + F(n-2), where F(1) = F(2) = 1.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "10",
                        "output": "55",
                        "explanation": "The 10th Fibonacci number is 55.  (calculated modulo 10^9 + 7)"
                    },
                    {
                        "input": "7",
                        "output": "13",
                        "explanation": "The 7th Fibonacci number is 13.  (calculated modulo 10^9 + 7)"
                    },
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": "The 1st Fibonacci number is 1. (calculated modulo 10^9 + 7)"
                    },
                    {
                        "input": "3",
                        "output": "2",
                        "explanation": "The 3rd Fibonacci number is 2. (calculated modulo 10^9 + 7)"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>What is recursion?</p>",
            "<p>Can we think of Dynamic programming?</p>",
            "<p>Can we think of optimizing the space?</p>",
            "<p>Try to think of a matrix, whose \u2018N-1\u2019th power will contain the \u2018N\u2019th Fibonacci number.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(log(N)).\r\n    Space Complexity: O(log(N)).\r\n\r\n    Where 'N' is the given integer.\r\n*/\r\n\r\n// Function to multiply two matrices.\r\nvector<vector<int>> multiply(vector<vector<int>> a,vector<vector<int>> b){\r\n\r\n    const int mod = 1e9 + 7;\r\n    \r\n    // To store the resultant matrix.\r\n    vector<vector<int>> c(2,vector<int>(2,0));\r\n\r\n    for(int i = 0; i < 2; i++){\r\n        for(int j = 0; j < 2; j++){\r\n            for(int k = 0; k < 2; k++){\r\n                c[i][k] = (c[i][k] + (long long)((long long)a[i][j] * (long long)b[j][k])) % mod;\r\n            }\r\n        }\r\n    }\r\n\r\n    return c;\r\n}\r\n\r\n// Function to calclate n'th power of a matrix.\r\nvector<vector<int>> matrix_power(vector<vector<int>> coef ,int n){\r\n\r\n    // To store the resultant matrix.\r\n    vector<vector<int>> res = {{1,0},{0,1}};\r\n\r\n    // While loop till n > 0.\r\n    while(n){\r\n        // If n is odd, multiply res with coef.\r\n        if(n % 2) res = multiply(res,coef);\r\n\r\n        // Multiply coef with coef and update n to n/2.\r\n        coef = multiply(coef,coef);\r\n        n /= 2;\r\n    }\r\n\r\n    return res;\r\n\r\n}\r\n\r\n\r\nint fibonacciNumber(int n){\r\n\r\n    // Declaring the coef matrix.\r\n    vector<vector<int>> coef={{0,1},{1,1}};\r\n\r\n    // Calculating the (n-1)th power of the coef matrix.\r\n    vector<vector<int>> res = matrix_power(coef,n-1);\r\n\r\n    // Return the bottom right element of the resultant matrix.\r\n    return res[1][1];\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(log(N)).\r\n    Space Complexity: O(log(N)).\r\n\r\n    Where 'N' is the given integer.\r\n*/\r\n\r\npublic class Solution{\r\n    static int[][] multiply(int[][] a, int[][] b) {\r\n        int mod = (int) (1e9 + 7);\r\n        int[][] c = new int[2][2];\r\n        for (int i = 0; i < 2; i++) {\r\n            for (int j = 0; j < 2; j++) {\r\n                c[i][j] = 0;\r\n            }\r\n        }\r\n        for (int i = 0; i < 2; i++) {\r\n            for (int j = 0; j < 2; j++) {\r\n                for (int k = 0; k < 2; k++) {\r\n                    c[i][k] = (int) ((c[i][k] + (long) ((long) a[i][j] * (long) b[j][k])) % mod);\r\n                }\r\n            }\r\n        }\r\n\r\n        return c;\r\n    }\r\n\r\n    // Function to calclate n'th power of a matrix.\r\n    static int[][] matrix_power(int[][] coef, int n) {\r\n\r\n        // To store the resultant matrix.\r\n        int[][] res = {{1, 0}, {0, 1}};\r\n\r\n        // While loop till n > 0.\r\n        while (n > 0) {\r\n            // If n is odd, multiply res with coef.\r\n            if (n % 2 != 0) res = multiply(res, coef);\r\n\r\n            // Multiply coef with coef and update n to n/2.\r\n            coef = multiply(coef, coef);\r\n            n /= 2;\r\n        }\r\n\r\n        return res;\r\n\r\n    }\r\n\r\n    public static int fibonacciNumber(int n) {\r\n        int[][] coef = {{0, 1}, {1, 1}};\r\n\r\n        // Calculating the (n-1)th power of the coef matrix.\r\n        int[][] res = matrix_power(coef, n - 1);\r\n\r\n        // Return the bottom right element of the resultant matrix.\r\n        return res[1][1];\r\n\r\n\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(log(N)).\n    Space Complexity: O(log(N)).\n\n    Where 'N' is the given integer.\n'''\n\ndef multiply(a, b):\n    \n    mod = int(1e9 + 7)\n    c = [[0 for i in range(2)] for j in range(2)]\n    \n    for i in range(2):\n        for j in range(2):\n            for k in range(2):\n                c[i][k] = (c[i][k] + a[i][j] * b[j][k]) % mod\n                \n    return c\n\n# Function to calclate n'th power of a matrix.\ndef matrix_power(coef, n):\n    \n    # To store the resultant matrix.\n    res = [[1, 0], [0, 1]]\n    \n    # While loop till n > 0.\n    while n > 0:\n        \n        # If n is odd, multiply res with coef.\n        if (n % 2 != 0):\n            res = multiply(res, coef)\n            \n        # Multiply coef with coef and update n to n//2.\n        coef = multiply(coef, coef)\n        n //= 2\n        \n    return res\n\ndef fibonacciNumber(n):\n    \n    coef = [[0, 1], [1, 1]]\n    \n    # Calculating the (n-1)th power of the coef matrix.\n    res = matrix_power(coef, n - 1)\n    \n    # Return the bottom right element of the resultant matrix.\n    return res[1][1]\n            ",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}