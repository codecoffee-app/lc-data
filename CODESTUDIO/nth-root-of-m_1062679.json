{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9580,
            "title": "Nth Root of M",
            "titleSlug": "nth-root-of-m_1062679",
            "content": "<h4 id=\"you-are-given-two-positive-integers-n-and-m-you-have-to-return-the-nth-root-of-m-i-e-m-1-n-if-the-nth-root-is-not-an-integer-return-1\">You are given two positive integers <em><strong>&#39;n&#39;</strong></em> and <em><strong>&#39;m&#39;</strong></em>. You have to return the &#39;nth&#39; root of &#39;m&#39;, i.e.  &#39;m<sup>(1/n)</sup>&#39;. If the &#39;nth root is not an integer, return -1.</h4>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>&#39;nth&#39; root of an integer &#39;m&#39; is a number, which, when raised to the power &#39;n&#39;, gives &#39;m&#39; as a result.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018n\u2019 = 3, \u2018m\u2019 = 27\n\nOutput: 3\n\nExplanation: \n3rd Root of 27 is 3, as (3)^3 equals 27.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input consists of two space-separated integers, n and m.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return an integer that denotes the nth root of m in a separate line. If such an integer doesn&#39;t exist return -1.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t have to print anything. It has already been taken care of. Just Implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3 27\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>3rd Root of 27 is 3, as (3)^3 equals 27.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4 69\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>4th Root of 69 is not an integer, hence -1.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to do this in O(log(n+m)).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= n &lt;= 30\n1 &lt;= m &lt;= 10^9\n\nTime Limit: 1 sec.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 488,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two positive integers 'n' and 'm', find the 'nth' root of 'm'.  That is, find a number 'x' such that x<sup>n</sup> = m. If the 'nth' root is an integer, return that integer. Otherwise, return -1.",
                "constraints": [
                    "1 <= n <= 30",
                    "1 <= m <= 10^9",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 27",
                        "output": "3",
                        "explanation": "The 3rd root of 27 is 3, because 3<sup>3</sup> = 27."
                    },
                    {
                        "input": "4 69",
                        "output": "-1",
                        "explanation": "The 4th root of 69 is not an integer."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>Is there any monotonic function followed for this problem?</strong></p>",
            "<p>Use the Newton Raphson Method.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O( log(N) * log(M) )\n    Space Complexity: O( 1 )\n\n    Where 'N' and 'M' are given integers.\n*/\nint NthRoot(int n, int m) {\n    // Variable to store maximum possible error in order\n    // to obtain the precision of 10^(-1) in the answer.\n    double error = 1e-2;\n\n    // Difference between the current answer, and the answer\n    // in next iteration, which we take as big as possible initially.\n    double diff = 1e18;\n\n    // Guessed answer value.\n    double xk = 2;\n\n    // We keep on finding the precise answer till the difference between\n    // answer of two consecutive iteration become less than 10^(-7).\n    while (diff > error) {\n\n        // Answer value in the next iteration.\n        double xk_1 = (pow(xk, n) * (n - 1) + m) / (n * pow(xk, n - 1));\n\n        // Difference of answer in consecutive states updated.\n        diff = abs(xk - xk_1);\n\n        // Updating the current answer with the answer of next iteration.\n        xk = xk_1;\n    }\n\n    // Extracting integer value from 'xk'\n    int integerAns = (int) xk;\n\n    // Checking whether nth Root exists or not\n    int res = 1;\n    for(int i = 0; i < n; ++i) {\n      res *= integerAns;\n    }\n    \n    if(res != m) {\n      // Updating value of 'integerAns'\n      integerAns = -1;\n    }\n\n    // Returning the nthRootOfM\n    return integerAns;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time Complexity: O( log(N) * log(M) )\r\n    Space Complexity: O( 1 )\r\n\r\n    Where 'N' and 'M' are given integers.\r\n\"\"\"\r\n\r\n\r\ndef NthRoot(n: int, m: int) -> int:\r\n    # Variable to store maximum possible error in order\r\n    # to obtain the precision of 10^(-1) in the answer.\r\n    error = 1e-2\r\n\r\n    # Difference between the current answer, and the answer\r\n    # in next iteration, which we take as big as possible initially.\r\n    diff = 1e18\r\n\r\n    # Guessed answer value.\r\n    xk = 2\r\n\r\n    # We keep on finding the precise answer till the difference between\r\n    # answer of two consecutive iteration become less than 10^(-7).\r\n    while diff > error:\r\n\r\n        # Answer value in the next iteration.\r\n        xk_1 = (pow(xk, n) * (n - 1) + m) / (n * pow(xk, n - 1))\r\n\r\n        # Difference of answer in consecutive states updated.\r\n        diff = abs(xk - xk_1)\r\n\r\n        # Updating the current answer with the answer of next iteration.\r\n        xk = xk_1\r\n\r\n    # Extracting integer value from 'xk'\r\n    integerAns = int(xk)\r\n\r\n    # Checking whether nth Root exists or not\r\n    res = 1\r\n    for i in range(n):\r\n        res *= integerAns\r\n\r\n    if res != m:\r\n        # Updating value of 'integerAns'\r\n        integerAns = -1\r\n\r\n    # Returning the nthRootOfM\r\n    return integerAns\r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O( log(N) * log(M) )\r\n    Space Complexity: O( 1 )\r\n\r\n    Where 'N' and 'M' are given integers.\r\n*/\r\npublic class Solution {\r\n    public static int NthRoot(int n, int m) {\r\n        // Variable to store maximum possible error in order\r\n        // to obtain the precision of 10^(-1) in the answer.\r\n        double error = 0.02;\r\n\r\n        // Difference between the current answer, and the answer\r\n        // in next iteration, which we take as big as possible initially.\r\n        double diff = 100000000;\r\n\r\n        // Guessed answer value.\r\n        double xk = 2;\r\n\r\n        // We keep on finding the precise answer till the difference between\r\n        // answer of two consecutive iteration become less than 10^(-7).\r\n        while (diff > error) {\r\n\r\n            // Answer value in the next iteration.\r\n            double xk_1 = (Math.pow(xk, n) * (n - 1) + m) / (n * Math.pow(xk, n - 1));\r\n\r\n            // Difference of answer in consecutive states updated.\r\n            diff = Math.abs(xk - xk_1);\r\n\r\n            // Updating the current answer with the answer of next iteration.\r\n            xk = xk_1;\r\n        }\r\n\r\n        // Extracting integer value from 'xk'\r\n        int integerAns = (int) xk;\r\n\r\n        // Checking whether nth Root exists or not\r\n        int res = 1;\r\n        for(int i = 0; i < n; ++i) {\r\n            res *= integerAns;\r\n        }\r\n\r\n        if(res != m) {\r\n            // Updating value of 'integerAns'\r\n            integerAns = -1;\r\n        }\r\n\r\n        // Returning the nthRootOfM\r\n        return integerAns;\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}