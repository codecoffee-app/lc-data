{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7974,
            "title": "Nth term of GP",
            "titleSlug": "nth-term-of-gp_797999",
            "content": "<h4 id=\"you-are-given-the-first-term-a-the-common-ratio-r-and-an-integer-n-your-task-is-to-find-the-nth-term-of-the-gp-series\">You are given the first term (A), the common ratio (R) and an integer N. Your task is to find the Nth term of the GP series.</h4>\n\n<h4 id=\"the-general-form-of-a-gp-geometric-progression-series-is-a-a-r-a-r-2-a-r-3-and-so-on-where-a-is-the-first-term-of-gp-series\">The general form of a GP(Geometric Progression) series is A, A<em>(R), A</em>(R^2), A*(R^3) and so on where A is the first term of GP series</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<h4 id=\"as-the-answer-can-be-large-enough-return-the-answer-modulo-10-9-7\">As the answer can be large enough, return the answer modulo 10^9 + 7.</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer T denoting the number of queries or test cases. \n\nThe first line of every test case contains three single space-separated integers N, A, and R denoting the term of GP series required, the first term, and the common ratio respectively. \n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print an integer denoting the Nth term of GP in a separate line. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^8\n0 &lt;= A &lt;= 50 \n0 &lt;= R &lt;= 100\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1 :</h5>\n\n<pre><code>1\n5 3 2 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>48\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>For N=5, A=3, and R=2. The GP series will be 3, 6, 12, 24, 48, and so on. Thus, the 5th term will be 48.  \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample input 2 :</h5>\n\n<pre><code>2\n4 1 2\n6 2 1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>8\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 225,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the first term (A), the common ratio (R), and an integer N, find the Nth term of the Geometric Progression (GP) series. The GP series follows the pattern: A, A*R, A*(R^2), A*(R^3), and so on. Calculate the Nth term modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^8",
                    "0 <= A <= 50",
                    "0 <= R <= 100",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "5 3 2",
                        "output": "48",
                        "explanation": "For N=5, A=3, and R=2, the GP series is 3, 6, 12, 24, 48. The 5th term is 48."
                    },
                    {
                        "input": "4 1 2",
                        "output": "8",
                        "explanation": null
                    },
                    {
                        "input": "6 2 1",
                        "output": "2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We can observe that everything asked from us can be done as it is done manually.&nbsp;</p><p>As the GP series is A, AR, A(R^2), A(R^3) and so on, we can find that the Nth term of GP by putting values into the formula:-</p><p>Nth term of GP = AR^(N-1).&nbsp;</p>",
            "<p>We can observe that the power function can be coded in such a way that it breaks the large problem into smaller problems. Thus, we can use the divide and conquer technique.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            },
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity: O(logN) \r\n    Space complexity: O(logN) \r\n    \r\n    Where N is the term of GP required.     \r\n*/\r\n\r\nlong long power(int R, int N, int mod) {\r\n    \r\n    if(N == 0){\r\n        return 1;\r\n    }\r\n    \r\n    long long temp = power(R, N / 2, mod) % mod;\r\n    \r\n    if(N % 2 == 0) {\r\n        return (temp * temp) % mod;\r\n    }\r\n    else {\r\n        return (((temp * temp) % mod) * R) % mod;\r\n    }\r\n\r\n}\r\n\r\nint nthTermOfGP(int N, int A, int R) {\r\n    \r\n    int mod = 1000000007;\r\n    \r\n    long long ans = (A * power(R, N - 1, mod)) % mod;\r\n    \r\n    return (int) ans;\r\n\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\n\n'''\n\n    Time complexity: O(logN) \n    Space complexity: O(logN) \n    \n    Where N is the term of GP required. \n    \n'''\n\nimport sys\nfrom sys import stdin\n\n\n\n\ndef power(r, n, mod):\n    \n    if (n == 0):\n        \n        return 1\n    \n    temp = power(r, n // 2, mod) % mod\n    \n    if (n % 2 == 0):\n        \n        return (temp * temp) % mod\n    \n    else:\n        \n        return (((temp * temp) % mod) * r) % mod\n\n\n\ndef nthTermOfGP(n, a, r):\n    \n    \n    mod = 1000000007\n    \n    ans = (a * power(r, n - 1, mod)) % mod\n    \n    return ans\n\n\nt = int(sys.stdin.readline().strip())\n\nwhile(t > 0):\n    \n    n, a, r = map(int,input().split())\n    print(nthTermOfGP(n,a,r))\n    \n    t = t - 1\n\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity: O(logN) \r\n    Space complexity: O(logN)\r\n    \r\n    Where N is the term of GP required. \r\n*/\r\n\r\npublic class Solution {\r\n    \r\n    public static int nthTermOfGP(int N, int A, int R) {\r\n\r\n        int mod = 1000000007;\r\n        \r\n        long ans = (A * power(R, N - 1, mod)) % mod;\r\n        \r\n        return (int) ans;\r\n\r\n    }\r\n\r\n    public static long power(int R, int N, int mod) {\r\n    \r\n        if(N == 0){\r\n            return 1;\r\n        }\r\n        \r\n        long temp = power(R, N / 2, mod) % mod;\r\n        \r\n        if(N % 2 == 0) {\r\n            return (temp * temp) % mod;\r\n        }\r\n        else {\r\n            return (((temp * temp) % mod) * R) % mod;\r\n        }\r\n        \r\n    }\r\n\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}