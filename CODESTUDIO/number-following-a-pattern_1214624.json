{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10327,
            "title": "Number following a pattern",
            "titleSlug": "number-following-a-pattern_1214624",
            "content": "<h4 id=\"you-are-given-a-string-s-that-consists-of-i-s-and-d-s-pattern-only-i-is-for-increasing-and-d-is-for-decreasing-your-task-is-to-return-the-string-that-consists-of-a-minimum-number-following-that-pattern\">You are given a string &#39;S&#39; that consists of I\u2019s and D\u2019s pattern only. &#39;I&#39; is for increasing, and &#39;D&#39; is for decreasing. Your task is to return the string that consists of a minimum number following that pattern.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1) Digits of the number should be in the range [1,9] and can\u2019t repeat.\n\n2) The length of the string should be less than or equal to 8.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer &#39;T&#39; denoting the number of test cases. \n\nThe first line of each test case contains a string &#39;S&#39;, as described in the problem statement.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return a string consisting of a minimum number following the given pattern.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^3\n1 &lt;= |S| &lt;= 8\n\nwhere |S| is the length of the given string.\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\nIIID\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>12354\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>The pattern consists of increasing up to 3 places and decreasing up to 2 places. Numbers following that pattern are 12354, 23465, 46785, etc. The minimum among all of them is 12354.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\nDID       \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2143\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>The pattern consists of decreasing up to 1 place and then increasing up to 1 place and at last, decreasing up to 1 place. Numbers following that pattern are 4231, 2143, 9685, etc. The minimum among all of them is 2143.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S' consisting of 'I' (increasing) and 'D' (decreasing) characters, construct the lexicographically smallest string of digits that adheres to the pattern. Digits must be unique and in the range [1, 9]. The length of 'S' is limited to 8.",
                "constraints": [
                    "1 <= T <= 10^3",
                    "1 <= |S| <= 8",
                    "Digits in the output string must be unique and in the range [1, 9]."
                ],
                "testcases": [
                    {
                        "input": "s = \"IIID\"",
                        "output": "12354",
                        "explanation": "The pattern is increasing, increasing, increasing, decreasing. The smallest number following this pattern is 12354."
                    },
                    {
                        "input": "s = \"DID\"",
                        "output": "2143",
                        "explanation": "The pattern is decreasing, increasing, decreasing. The smallest number following this pattern is 2143."
                    },
                    {
                        "input": "s = \"I\"",
                        "output": "12",
                        "explanation": "Increasing pattern. The smallest number following this is 12."
                    },
                    {
                        "input": "s = \"D\"",
                        "output": "21",
                        "explanation": "Decreasing pattern. The smallest number following this is 21."
                    },
                    {
                        "input": "s = \"DD\"",
                        "output": "321",
                        "explanation": "Decreasing, decreasing. The smallest number is 321."
                    },
                    {
                        "input": "s = \"II\"",
                        "output": "123",
                        "explanation": "Increasing, increasing. The smallest number is 123."
                    },
                    {
                        "input": "s = \"DDD\"",
                        "output": "4321",
                        "explanation": "Decreasing, decreasing, decreasing. The smallest number is 4321."
                    },
                    {
                        "input": "s = \"IDI\"",
                        "output": "2134",
                        "explanation": "Decreasing, Increasing, Increasing. The smallest number is 2134"
                    },
                    {
                        "input": "s = \"DIDI\"",
                        "output": "32415",
                        "explanation": "Decreasing, Increasing, Decreasing, Increasing. The smallest number is 32415."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><i>Try to use a data structure that uses LIFO(Last In First Out) .</i></p>",
            "<p><i>Try to find consecutive \u2018D\u2019 from reverse order.</i></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}