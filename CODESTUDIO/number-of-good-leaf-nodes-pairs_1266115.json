{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10857,
            "title": "Number of Good Leaf Nodes Pairs",
            "titleSlug": "number-of-good-leaf-nodes-pairs_1266115",
            "content": "<h4 id=\"you-are-given-a-binary-tree-and-an-integer-distance-your-task-is-to-calculate-the-number-of-good-leaf-node-pairs-in-the-tree\">You are given a Binary Tree and an integer \u2018DISTANCE\u2019, Your task is to calculate the number of good leaf node pairs in the tree.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>A pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to \u2018DISTANCE\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an Integer &#39;T&#39; which denotes the number of test cases to be run. Then the test cases follow.\n\nThe first line of each test case contains one integer \u2018DISTANCE\u2019, as described in the problem statement.\n\nThe second line of each test case contains the elements of the tree in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the number of good leaf node pairs in the tree.\n\nThe output of every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= Number of Nodes in the tree,N &lt;= 2^10\n1 &lt;= DISTANCE &lt;= 10\n1 &lt;= Node value &lt;= 10000\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n2\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>Only Pairs {4,5} and {6,7} are good leaf node pairs since the shortest distance between them is 2 and the shortest distance between all the other pairs are greater than 2.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/treeeg-8471.jpg\" alt=\"altImage\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n3\n1 2 3 4 -1 -1 5 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h5>\n\n<pre><code>Since, there are only 2 leaf nodes 4 and 5 and the shortest distance between them is 4 so the answer is 0.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/treeeg2-8472.jpg\" alt=\"altImage\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree and a maximum distance 'DISTANCE', determine the number of 'good leaf node pairs'. A pair of distinct leaf nodes is considered 'good' if the shortest path between them is less than or equal to 'DISTANCE'. Implement a function to count these pairs.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= Number of Nodes in the tree, N <= 2^10",
                    "1 <= DISTANCE <= 10",
                    "1 <= Node value <= 10000",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "distance = 2, tree = [1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "2",
                        "explanation": "Only the pairs {4, 5} and {6, 7} are good leaf node pairs because the shortest path between them is 2, which is less than or equal to the distance of 2.  The shortest path between all other leaf pairs is greater than 2."
                    },
                    {
                        "input": "distance = 3, tree = [1, 2, 3, 4, -1, -1, 5, -1, -1, -1, -1]",
                        "output": "0",
                        "explanation": "There are two leaf nodes, 4 and 5. The shortest distance between them is 4, which is greater than the distance of 3. Therefore, there are no good leaf node pairs."
                    },
                    {
                        "input": "distance = 5, tree = [1, 2, 3, 4, 5, -1, 6, -1, -1, 7, 8, -1, -1, -1, -1]",
                        "output": "4",
                        "explanation": "The leaf nodes are 4, 5, 7, and 8. The good pairs are {4,7}, {4,8}, {5,7} and {5,8} as the distance between each of these pairs is less than or equal to 5."
                    },
                    {
                        "input": "distance = 1, tree = [1, 2, 3, -1, -1, -1, -1]",
                        "output": "0",
                        "explanation": "The leaf nodes are 2 and 3. The shortest distance between them is 2 which is greater than the distance 1. So there are no good pairs."
                    },
                    {
                        "input": "distance = 10, tree = [1, 2, 3, -1, -1, -1, -1]",
                        "output": "1",
                        "explanation": "The leaf nodes are 2 and 3. The shortest distance between them is 2 which is less than the distance 10. So there is 1 good pair."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><i>At each node, calculate the number of good leaf nodes separately.</i></p>",
            "<p><i>Can you think of a way where you don't need to store all the leaf nodes?</i></p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}