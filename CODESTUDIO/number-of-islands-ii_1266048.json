{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10820,
            "title": "Number of Islands II",
            "titleSlug": "number-of-islands-ii_1266048",
            "content": "<h4 id=\"you-have-a-2d-grid-of-n-rows-and-m-columns-which-are-initially-filled-with-water-you-are-given-q-queries-each-consisting-of-two-integers-x-and-y-and-in-each-query-operation-you-have-to-turn-the-water-at-position-x-y-into-a-land-you-are-supposed-to-find-the-number-of-islands-in-the-grid-after-each-query\">You have a 2D grid of \u2018N\u2019 rows and \u2018M\u2019 columns which are initially filled with water. You are given \u2018Q\u2019 queries each consisting of two integers \u2018X\u2019 and \u2018Y\u2019 and in each query operation, you have to turn the water at position (\u2018X\u2019, \u2018Y\u2019) into a land. You are supposed to find the number of islands in the grid after each query.</h4>\n\n<h4 id=\"an-island-is-a-group-of-lands-surrounded-by-water-horizontally-vertically-or-diagonally\">An island is a group of lands surrounded by water horizontally, vertically, or diagonally.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019 denoting the number of test cases. \n\nThe first input line of each test case contains two single space-separated integers \u2018N\u2019 and \u2018M\u2019 representing the number of rows and columns of the grid, respectively.\n\nThe second line of each test case contains an integer \u2018Q\u2019 representing the number of queries.\n\nNext \u2018Q\u2019 lines contain two single space-separated integers \u2018X\u2019 and \u2018Y\u2019, representing the coordinates of the grid i.e the coordinates of the point to be turned into land.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer denoting the number of islands after each query operation.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 1000\n1 &lt;= M &lt;= 1000\n1 &lt;= Q &lt;= 100000\n0 &lt;= X &lt; N\n0 &lt;= Y &lt; M\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 3\n4\n0 0\n0 1\n1 2\n2 1\n4 5\n4\n1 1\n0 1\n3 3\n3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 1 2 3\n1 1 2 2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h5>\n\n<pre><code>In test case 1, \n\n0.  000\n    000\n    000\n\n1.  100\n    000\n    000\n\n2.  110\n    000\n    000\n\n 3. 110\n    001\n    000\n\n 4. 110\n    001\n    100\n\nSo, the answer is 1, 1, 2, 3.\n\nIn test case 2,\n\n0.  00000\n    00000\n    00000\n    00000\n\n1.  00000\n    01000\n    00000\n    00000\n\n2.  01000\n    01000\n    00000\n    00000\n\n 3. 01000\n    01000\n    00000\n    00010\n\n 4. 01000\n    01000\n    00000\n    00011\n\nSo, the answer is 1, 1, 2, 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2 2\n2\n0 0\n1 1\n1 1\n1\n0 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 2\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2:</h5>\n\n<pre><code>In test case 1, \n\n0.  00\n    00\n\n1.  10\n    00\n\n2.  10\n    01\n\nSo, the answer is 1, 2.\n\nIn test case 2,\n\n0.  0\n\n1.  1\n\nSo, the answer is 1.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 52,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D grid of dimensions N x M, initially filled with water, and a series of Q queries. Each query provides coordinates (X, Y) representing a cell in the grid.  For each query, transform the water at the given coordinates (X, Y) into land and determine the number of islands present in the grid after the transformation. An island is defined as a group of connected land cells (horizontally, vertically, or diagonally) surrounded by water.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 1000",
                    "1 <= M <= 1000",
                    "1 <= Q <= 100000",
                    "0 <= X < N",
                    "0 <= Y < M"
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 3, q = [[0, 0], [0, 1], [1, 2], [2, 1]]",
                        "output": "[1, 1, 2, 3]",
                        "explanation": "Initially, the grid is all water.\n1. (0,0) becomes land: one island.\n2. (0,1) becomes land: still one island (connected to (0,0)).\n3. (1,2) becomes land: a new island forms (2 islands).\n4. (2,1) becomes land: another new island forms (3 islands)."
                    },
                    {
                        "input": "n = 4, m = 5, q = [[1, 1], [0, 1], [3, 3], [3, 4]]",
                        "output": "[1, 1, 2, 2]",
                        "explanation": "Initially, the grid is all water.\n1. (1,1) becomes land: one island.\n2. (0,1) becomes land: still one island (connected to (1,1)).\n3. (3,3) becomes land: a new island forms (2 islands).\n4. (3,4) becomes land: still 2 islands (connected to (3,3))."
                    },
                    {
                        "input": "n = 2, m = 2, q = [[0, 0], [1, 1]]",
                        "output": "[1, 2]",
                        "explanation": "Initially, the grid is all water.\n1. (0,0) becomes land: one island.\n2. (1,1) becomes land: a new island forms (2 islands)."
                    },
                    {
                        "input": "n = 1, m = 1, q = [[0, 0]]",
                        "output": "[1]",
                        "explanation": "Initially, the grid is all water.\n1. (0,0) becomes land: one island."
                    },
                    {
                        "input": "n = 2, m = 2, q = [[0, 0], [1, 1], [1, 1]]",
                        "output": "[1, 2, 2]",
                        "explanation": "Initially, the grid is all water.\n1. (0,0) becomes land: one island.\n2. (1,1) becomes land: a new island forms (2 islands).\n3. (1,1) is already land: Number of islands remains same (2 islands)."
                    },
                    {
                        "input": "n = 5, m = 5, q = [[0, 0], [0, 4], [4, 0], [4, 4], [2, 2]]",
                        "output": "[1, 2, 3, 4, 5]",
                        "explanation": "Each land creates a new island as none of them are connected."
                    },
                    {
                        "input": "n = 3, m = 4, q = [[0, 0], [0, 1], [0, 2], [1, 1], [2, 2]]",
                        "output": "[1, 1, 1, 1, 1]",
                        "explanation": "All the islands will get connected and would form one big island"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of some brute force approach to find the islands connected to each other?</p>",
            "<p>Can you think of some data structures to efficiently connect two land cells together?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}