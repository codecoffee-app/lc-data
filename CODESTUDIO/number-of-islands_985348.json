{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9444,
            "title": "Number of Islands",
            "titleSlug": "number-of-islands_985348",
            "content": "<h4 id=\"you-have-been-given-a-non-empty-grid-consisting-of-only-0s-and-1s-you-have-to-find-the-number-of-islands-in-the-given-grid\">You have been given a non-empty grid consisting of only 0s and 1s. You have to find the number of islands in the given grid.</h4>\n\n<h4 id=\"an-island-is-a-group-of-1s-representing-land-connected-horizontally-vertically-or-diagonally-you-can-assume-that-all-four-edges-of-the-grid-are-surrounded-by-0s-representing-water\">An island is a group of 1s (representing land) connected horizontally, vertically or diagonally. You can assume that all four edges of the grid are surrounded by 0s (representing water).</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019 denoting the number of test cases. Then each test case follows.\n\nThe first input line of each test case contains two single space-integers \u2018N\u2019 and \u2018M\u2019 representing the number of rows and columns of the grid, respectively.\n\nFrom the second line of each test case, the next N lines represent the rows of the grid. Every row contains M single space-separated integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the only line of output will print the number of islands in the grid.\n\nPrint the output of each test case in a separate line.\n\nNote: You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 100\n1 &lt;= M &lt;= 100\n0 &lt;= grid[i][j] &lt;= 1\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 5\n0 0 1 1 0\n1 0 1 1 0\n0 1 0 0 0 \n0 0 0 0 1\n1 3\n1 1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>2\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample output 1:</h5>\n\n<pre><code>For the first test case, there are two islands in the grid.\n\nFor the second test case, there is only one island in the grid.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 5\n0 0 0 0 0\n4 4\n1 0 1 0\n0 1 0 1\n1 0 1 0\n0 1 0 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>0\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-empty grid consisting of 0s and 1s, determine the number of islands. An island is a group of 1s (representing land) connected horizontally, vertically, or diagonally. Assume the grid is surrounded by 0s (representing water).",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 100",
                    "1 <= M <= 100",
                    "0 <= grid[i][j] <= 1",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 5\n0 0 1 1 0\n1 0 1 1 0\n0 1 0 0 0 \n0 0 0 0 1\n1 3\n1 1 1",
                        "output": "2\n1",
                        "explanation": "In the first test case, the grid contains two distinct groups of connected 1s, thus representing two islands. The second test case has all 1s connected forming one island."
                    },
                    {
                        "input": "1 5\n0 0 0 0 0\n4 4\n1 0 1 0\n0 1 0 1\n1 0 1 0\n0 1 0 1",
                        "output": "0\n1",
                        "explanation": "The first test case contains only 0s, so there are no islands. The second test case has four islands. The top-left 1 connects with the bottom-left and top-right ones to form one island with the bottom-right 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a recursive solution? Start from a land cell and visit all its neighbour cells.</p>",
            "<p>Can you think of a BFS solution? Start from a land cell and process all its neighbouring cells in level order.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}