{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 17063,
            "title": "Number of Longest Increasing Subsequence",
            "titleSlug": "number-of-longest-increasing-subsequence_3751627",
            "content": "<h4 id=\"given-an-integer-array-arr-of-length-n-return-the-number-of-longest-increasing-subsequences-in-it\">Given an integer array <em><strong>\u2018arr\u2019</strong></em> of length <em><strong>\u2018n\u2019</strong></em>, return the number of longest increasing subsequences in it.</h4>\n\n<p><br></p>\n\n<h4 id=\"the-longest-increasing-subsequence-lis-is-the-longest-subsequence-of-the-given-sequence-such-that-all-subsequent-elements-are-in-strictly-increasing-order\">The longest increasing subsequence(LIS) is the longest subsequence of the given sequence such that all subsequent elements are in strictly increasing order.</h4>\n\n<p><br></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018n\u2019 = 5, \u2018arr\u2019 = [50, 3, 90, 60, 80].\n\nOutput: 2\n\nExplanation: \nIn this array, the longest increasing subsequences are [50, 60, 80] and [3, 60, 80]. \n\nThere are other increasing subsequences as well, but we need the number of the longest ones. Hence the answer is 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of each test case contains a single integer \u2018n\u2019 denoting the length of the array \u2018arr\u2019.\n\nThe following line contains \u2018n\u2019 space-separated integers representing elements in \u2018arr\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return an integer representing the number of longest increasing subsequences.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything. It has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>4\n3 7 4 6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>The length of LIS is 3, and there is only one such LIS, which is [3, 4, 6].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>4\n5 7 2 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h5>\n\n<pre><code>The length of LIS is 2, and there are two such LIS, which are [5, 7] and [2, 3].\n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>The expected time complexity is O(n^2).\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 \u2018n\u2019 \u2264 5000\n1 \u2264 \u2018arr\u2019[i] \u2264 10 ^ 6\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 32,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array 'arr' of length 'n', determine the number of Longest Increasing Subsequences (LIS) present within the array. An increasing subsequence is defined as a subsequence where each element is strictly greater than the preceding element.",
                "constraints": [
                    "1 \u2264 \u2018n\u2019 \u2264 5000",
                    "1 \u2264 \u2018arr\u2019[i] \u2264 10 ^ 6",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 4, arr = [3, 7, 4, 6]",
                        "output": "1",
                        "explanation": "The length of LIS is 3, and there is only one such LIS, which is [3, 4, 6]."
                    },
                    {
                        "input": "n = 4, arr = [5, 7, 2, 3]",
                        "output": "2",
                        "explanation": "The length of LIS is 2, and there are two such LIS, which are [5, 7] and [2, 3]."
                    },
                    {
                        "input": "n = 5, arr = [50, 3, 90, 60, 80]",
                        "output": "2",
                        "explanation": "The longest increasing subsequences are [50, 60, 80] and [3, 60, 80]."
                    },
                    {
                        "input": "n = 5, arr = [1, 3, 2, 4, 5]",
                        "output": "3",
                        "explanation": "The length of LIS is 4, and there are three such LIS: [1, 2, 4, 5], [1, 3, 4, 5] and [1, 3, 4, 5] ."
                    },
                    {
                        "input": "n = 3, arr = [1, 2, 3]",
                        "output": "1",
                        "explanation": "The length of LIS is 3, and there is only one such LIS: [1, 2, 3]."
                    },
                    {
                        "input": "n = 3, arr = [3, 2, 1]",
                        "output": "1",
                        "explanation": "The length of LIS is 1, and there is only one such LIS: [3], [2] and [1]."
                    },
                    {
                        "input": "n = 5, arr = [1, 2, 4, 3, 5]",
                        "output": "2",
                        "explanation": "The length of LIS is 4, and there are two such LIS: [1, 2, 4, 5] and [1, 2, 3, 5]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Generate all possible subsequences present in the array and count the increasing subsequences of maximum length.</p>",
            "<p>Try using Tabulation</p>",
            "<p>Try using Binary search to find the insertion point of the currently processed value.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}