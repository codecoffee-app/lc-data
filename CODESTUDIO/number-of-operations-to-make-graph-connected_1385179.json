{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11698,
            "title": "Number of operations to make Graph connected.",
            "titleSlug": "number-of-operations-to-make-graph-connected_1385179",
            "content": "<h4 id=\"you-have-been-given-a-graph-consisting-of-n-vertices-numbered-from-1-to-n-the-graph-has-m-edges-in-an-operation-you-can-shift-an-edge-between-two-directly-connected-vertices-to-between-pair-of-disconnected-vertices-to-make-them-directly-connected-return-the-minimum-number-of-operations-to-make-the-graph-connected-if-it-is-not-possible-to-make-graph-connected-return-1\">You have been given a graph consisting of \u2018N\u2019 vertices numbered from 1 to \u2018N\u2019. The graph has \u2018M\u2019 edges. In an operation, you can shift an edge between two directly connected vertices to between pair of disconnected vertices to make them directly connected. Return the minimum number of operations to make the graph connected. If it is not possible to make graph connected return -1.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Let\u2019s say \u2018N\u2019 is 4 and \u2018M&#39; is 3. The 3 edges are (1,2), (2,3) and (1,3). Then our graph will look as follows:-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/grp1-8812.jpg\" alt=\"subsequence\"></p>\n\n<pre><code>To make the graph connected we can shift the edge between (1,3) to (1,4). This operation will make the graph connected. There are multiple ways in which we can make graph connected. So, in this case, we can make graph connected in just one operation.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. A connected graph is a graph that is connected in the sense of a topological space, i.e., there is a path from any vertex to any other vertex in the graph.\n\n2. There are no repeated edges and self-loops in the graph.\n\n3. You do not need to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018M\u2019 representing the number of vertices and the number of edges in the graph.\n\nEach of the next \u2018M\u2019 lines contains two space-separated integers representing the vertices that are directly connected by an edge.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the minimum number of operations to make the graph connected. If it is not possible to make graph connected return -1.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to input or print anything, as it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10000\n1 &lt;= M &lt;= 10000\n1 &lt;= U[i], V[i] &lt;= N\n\nWhere \u2018T\u2019 is the number of test cases.\u2018N\u2019 is the number of vertices in the graph. \u2018M\u2019 is the number of edges in the graph. \u2018U[i]\u2019 and \u2018V[i]\u2019 are vertices of the i-th edge.\n\nTime Limit: 1sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 3\n1 2\n2 3\n3 1\n4 3\n1 2\n2 3\n3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h4 id=\"sample-output-1-explanation\">Sample Output 1 Explanation:</h4>\n\n<pre><code>Test case 1:\n\nThe graph looks as follows:-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/grp1-8812.jpg\" alt=\"subsequence\"></p>\n\n<pre><code>Initially, graph is disconnected. We can apply one operation and shift the edge between (2,3) to (3,4). This operation will make the graph connected. The graph after the operation will look as follows:-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/grp3-8819.png\" alt=\"subsequence\"></p>\n\n<pre><code>Therefore the answer is 1.\n\n\nTest case 2:\n\nThe graph looks as follows:-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/grp2-8818.png\" alt=\"subsequence\"></p>\n\n<pre><code>The graph is already connected so we don\u2019t need to make any operation.\n\nTherefore the answer is 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4 2\n1 2\n3 4\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n0 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a graph with 'N' vertices (numbered 1 to 'N') and 'M' edges, determine the minimum number of operations needed to connect the graph. An operation involves moving an edge between two connected vertices to connect two currently disconnected vertices. Return the minimum number of such operations. If it's impossible to connect the graph, return -1.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10000",
                    "1 <= M <= 10000",
                    "1 <= U[i], V[i] <= N"
                ],
                "testcases": [
                    {
                        "input": "n = 4, edges = [(1, 2), (2, 3), (3, 1)], m = 3",
                        "output": "1",
                        "explanation": "The graph is initially disconnected. Moving the edge (3,1) and placing it between vertices 3 and 4 connects all components."
                    },
                    {
                        "input": "n = 4, edges = [(1, 2), (2, 3), (3, 4)], m = 3",
                        "output": "0",
                        "explanation": "The graph is already connected, so no operations are required."
                    },
                    {
                        "input": "n = 4, edges = [(1, 2), (3, 4)], m = 2",
                        "output": "-1",
                        "explanation": "The graph has two connected components.  Since the maximum number of edges possible in a connected graph with 4 vertices is 6, and we start with 2, we need 1 to become connected which is less than the maximum possible edges, which is n*(n-1)/2. However we can at most have 4 vertices, meaning 6 edges. since m <= n(n-1)/2, then we can always convert the graph to a connected graph if M is not exceeding the maximum edge. However, the question is impossible to convert to connected is when m < n - 1. Here n = 4 and n - 1 = 3 and m= 2. Since edges are < than n - 1, the graph is not connected and we cannot turn it to connected. "
                    },
                    {
                        "input": "n = 4, edges = [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)], m = 6",
                        "output": "0",
                        "explanation": "The graph is a complete graph, hence connected. No operations needed."
                    },
                    {
                        "input": "n = 5, edges = [(1, 2), (2, 3)], m = 2",
                        "output": "-1",
                        "explanation": "The number of edges is less than n-1, which is 4. Thus, even with all possible shifting, the graph cannot be connected."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find the number of connected components.</p>",
            "<p>Can you find the number of connected components without the traversal?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}