{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 17774,
            "title": "Number Of Subsets",
            "titleSlug": "number-of-subsets_3952532",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-size-n-containing-positive-integers-and-a-target-sum-k\">You are given an array <em><strong>&#39;arr&#39;</strong></em> of size <em><strong>&#39;n&#39;</strong></em> containing positive integers and a target sum <em><strong>&#39;k&#39;</strong></em>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"find-the-number-of-ways-of-selecting-the-elements-from-the-array-such-that-the-sum-of-chosen-elements-is-equal-to-the-target-k\">Find the number of ways of selecting the elements from the array such that the sum of chosen elements is equal to the target &#39;k&#39;.</h4>\n\n<p><br/></p>\n\n<h4 id=\"since-the-number-of-ways-can-be-very-large-print-it-modulo-10-9-7\">Since the number of ways can be very large, print it modulo 10 ^ 9 + 7.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: &#39;arr&#39; = [1, 1, 4, 5]\n\nOutput: 3\n\nExplanation: The possible ways are:\n[1, 4]\n[1, 4]\n[5]\nHence the output will be 3. Please note that both 1 present in &#39;arr&#39; are treated differently.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains two space-separated integers \u2018n\u2019 and &#39;k&#39;, denoting the size of the array and the target sum.\n\nThe second line contains \u2018n\u2019 space-separated integers denoting the elements of the array.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print the number of ways we can choose elements from &#39;arr&#39; such that their sum is equal to &#39;k&#39;.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>4 5\n1 4 4 5\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code> 3\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>The possible ways are:\n[1, 4]\n[1, 4]\n[5]\nHence the output will be 3. Please note that both 1 present in &#39;arr&#39; are treated differently.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3 2\n1 1 1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>There are three 1 present in the array. Answer is the number of ways to choose any two of them.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-3\">Sample Input 3 :</h5>\n\n<pre><code>3 40\n2 34 5\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-3\">Sample Output 3 :</h5>\n\n<pre><code>0\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity :</h5>\n\n<pre><code>The expected time complexity is O(&#39;n&#39; * &#39;k&#39;).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 100\n0 &lt;= &#39;arr[i]&#39; &lt;= 1000\n1 &lt;= &#39;k&#39; &lt;= 1000\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 455,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of size `n` containing positive integers and a target sum `k`, find the number of ways to select elements from the array such that their sum is equal to `k`.  Return the result modulo 10^9 + 7.",
                "constraints": [
                    "1 <= n <= 100",
                    "0 <= arr[i] <= 1000",
                    "1 <= k <= 1000",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 5\n1 4 4 5",
                        "output": "3",
                        "explanation": "The possible ways to achieve a sum of 5 are:\n[1, 4]\n[1, 4]\n[5]\nBoth occurrences of '1' and '4' are treated as distinct elements."
                    },
                    {
                        "input": "3 2\n1 1 1",
                        "output": "3",
                        "explanation": "There are three '1's in the array. The answer is the number of ways to choose any two of them to sum up to 2, which is 3 (choosing any two 1s)."
                    },
                    {
                        "input": "3 40\n2 34 5",
                        "output": "0",
                        "explanation": "There is no combination of elements in the array that sums up to 40."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check for every possible way such that the sum is \u2018k\u2019.</p>",
            "<p>Can you optimize your recursive solution using some extra space?</p>",
            "<p>Can you think of doing it iteratively to avoid stack size problems?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(n * k)\n\n    Space Complexity: O(n * k)\n\n    Where 'n' is the size of the array and 'k' is the target sum.\n*/\n\n#define MOD 1000000007\n\nint findWays(vector<int>& arr, int k)\n{\n    // Let 'n' be the size of the array.\n    int n = arr.size();\n\n    // Initialize a 2d matrix 'dp' of size ('n' + 1) * ('k' + 1) with value 0.\n    vector<vector<int>> dp(n + 1, vector<int>(k + 1, 0));\n\n    // Here dp[i][j] is the number of ways we can get sum 'j' using\n    // first 'i' numbers in 'arr' (from arr[0] to arr[i - 1]).\n\n\n    // Base case: When we have not chosen any number:\n    // Number of ways to get sum equal to 0 = 1\n    // Number of ways to get sum greater than 0 = 0\n\n    dp[0][0] = 1;\n    // dp[0][i] for i > 0 is already initialized to 0.\n\n\n    // Run a loop from 'i' = 1...'n':\n    for (int i = 1; i <= n; i++) {\n\n        // Run a loop from 'j' = 0...'k':\n        for (int j = 0; j <= k; j++) {\n\n            // Choice 1: Don't choose i'th number (arr[i - 1])\n            // The sum 'j' remains the same.\n            dp[i][j] = dp[i - 1][j];\n\n            // Choice 2: Choose i'th number (arr[i - 1])\n            // This is only possible when the sum before choosing\n            // arr[i - 1] is not negative.\n            if (arr[i - 1] <= j) {\n                dp[i][j] += dp[i - 1][j - arr[i - 1]];\n                dp[i][j] %= MOD;\n            }\n        }\n    }\n\n    // Return the value of 'dp[n][k]'.\n    return dp[n][k];\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N * X).\n    Space Complexity:O(N * X).\n\n    Where N is the size of the array and X is the target sum.\n*/\npublic class Solution {\n\n    public static int findWays(int num[], int tar) {\n        \n        // Let 'n' be the size of the array.\n        int n = num.length;\n        \n        // Initialize a 2d matrix 'dp' of size ('n' + 1) * ('tar' + 1) with value 0.\n        int dp[][] = new int[n + 1][tar + 1];\n\n        // Here dp[i][j] is the number of ways we can get sum 'j' using\n        // first 'i' numbers in 'num' (from num[0] to num[i - 1]).\n\n\n        // Base case: When we have not chosen any number:\n        // Number of ways to get sum equal to 0 = 1\n        // Number of ways to get sum greater than 0 = 0\n\n        dp[0][0] = 1;\n        // dp[0][i] for i > 0 is already initialized to 0.\n\n\n        // Run a loop from 'i' = 1...'n':\n        for (int i = 1; i <= n; i++) {\n\n            // Run a loop from 'j' = 0...'k':\n            for (int j = 0; j <= tar; j++) {\n\n                // Choice 1: Don't choose i'th number (num[i - 1])\n                // The sum 'j' remains the same.\n                dp[i][j] = dp[i - 1][j];\n\n                // Choice 2: Choose i'th number (num[i - 1])\n                // This is only possible when the sum before choosing\n                // num[i - 1] is not negative.\n                if (num[i - 1] <= j) {\n                    dp[i][j] += dp[i - 1][j - num[i - 1]];\n                    dp[i][j] %= 1000000007;\n                }\n            }\n        }\n\n        // Return the value of 'dp[n][tar]'.\n        return dp[n][tar];\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\n    Time Complexity: O(N *X).\n\n    Space Complexity:O(N * X).\n\n    Where 'N' is the size of the array and 'X' is the target sum.\n\"\"\"\nfrom typing import List\n\ndef findWays(arr: List[int], k: int) -> int:\n\n    n = len(arr)\n\n    # Initialize a 2d matrix 'DP' of size ('N'+1) x ('k'+1) with value 0.\n    dp = [[0 for _ in range(k + 1)] for _ in range(n+1)]\n\n    # Set 'DP[0][0]' = 1.\n    dp[0][0] = 1\n\n    # Run a loop from 'j' = 1...'k':\n    for j in range(1, k + 1):\n        # Set 'DP[ 0 ][ j ]' = 0\n        dp[0][j] = 0\n\n    # Run a loop from 'i' = 1...'N':\n    for i in range(1, n + 1):\n        # Run a loop from 'j' = 0...'k':\n        for j in range(k + 1):\n            # If the value of 'NUM' at 'i'-1 <= 'j' then set\n            # 'DP[ i ][ j ]' = 'DP[ i-1 ][ j ]' + 'DP[ i-1 ][ j - num[ i-1 ] ]'.\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]\n            else:\n                # Else Set 'DP[ i ][ j ]' = 'DP[ i-1 ][ j ]'.\n                dp[i][j] = dp[i - 1][j]\n    # Return the value of 'DP[ N ][ k ]'.\n    return dp[n][k] % (10**9 + 7)",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}