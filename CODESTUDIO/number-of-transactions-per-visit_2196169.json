{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14621,
            "title": "Number of Transactions per Visit",
            "titleSlug": "number-of-transactions-per-visit_2196169",
            "content": "<pre><code>Table: Visits\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| user_id       | int     |\n| visit_date    | date    |\n+---------------+---------+\n(user_id, visit_date) is the primary key for this table.\nEach row of this table indicates that user_id has visited the bank in visit_date.\n\n\nTable: Transactions\n\n+------------------+---------+\n| Column Name      | Type    |\n+------------------+---------+\n| user_id          | int     |\n| transaction_date | date    |\n| amount           | int     |\n+------------------+---------+\nThere is no primary key for this table, it may contain duplicates.\nEach row of this table indicates that user_id has done a transaction of amount in transaction_date.\nIt is guaranteed that the user has visited the bank in the transaction_date.(i.e The Visits table contains (user_id, transaction_date) in one row)\n\n\nA bank wants to draw a chart of the number of transactions bank visitors did in one visit to the bank and the corresponding number of visitors who have done this number of transaction in one visit.\n\nWrite an SQL query to find how many users visited the bank and didn&#39;t do any transactions, how many visited the bank and did one transaction and so on.\n\nThe result table will contain two columns:\n\ntransactions_count which is the number of transactions done in one visit.\nvisits_count which is the corresponding number of users who did transactions_count in one visit to the bank.\ntransactions_count should take all values from 0 to max(transactions_count) done by one or more users.\n\nOrder the result table by transactions_count.\n\nThe query result format is in the following example:\n\nVisits table:\n+---------+------------+\n| user_id | visit_date |\n+---------+------------+\n| 1       | 2020-01-01 |\n| 2       | 2020-01-02 |\n| 12      | 2020-01-01 |\n| 19      | 2020-01-03 |\n| 1       | 2020-01-02 |\n| 2       | 2020-01-03 |\n| 1       | 2020-01-04 |\n| 7       | 2020-01-11 |\n| 9       | 2020-01-25 |\n| 8       | 2020-01-28 |\n+---------+------------+\nTransactions table:\n+---------+------------------+--------+\n| user_id | transaction_date | amount |\n+---------+------------------+--------+\n| 1       | 2020-01-02       | 120    |\n| 2       | 2020-01-03       | 22     |\n| 7       | 2020-01-11       | 232    |\n| 1       | 2020-01-04       | 7      |\n| 9       | 2020-01-25       | 33     |\n| 9       | 2020-01-25       | 66     |\n| 8       | 2020-01-28       | 1      |\n| 9       | 2020-01-25       | 99     |\n+---------+------------------+--------+\nResult table:\n+--------------------+--------------+\n| transactions_count | visits_count |\n+--------------------+--------------+\n| 0                  | 4            |\n| 1                  | 5            |\n| 2                  | 0            |\n| 3                  | 1            |\n+--------------------+--------------+\n* For transactions_count = 0, The visits (1, &quot;2020-01-01&quot;), (2, &quot;2020-01-02&quot;), (12, &quot;2020-01-01&quot;) and (19, &quot;2020-01-03&quot;) did no transactions so visits_count = 4.\n* For transactions_count = 1, The visits (2, &quot;2020-01-03&quot;), (7, &quot;2020-01-11&quot;), (8, &quot;2020-01-28&quot;), (1, &quot;2020-01-02&quot;) and (1, &quot;2020-01-04&quot;) did one transaction so visits_count = 5.\n* For transactions_count = 2, No customers visited the bank and did two transactions so visits_count = 0.\n* For transactions_count = 3, The visit (9, &quot;2020-01-25&quot;) did three transactions so visits_count = 1.\n* For transactions_count &gt;= 4, No customers visited the bank and did more than three transactions so we will stop at transactions_count = 3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Ninja",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "A bank wants to analyze customer behavior by tracking the number of transactions made during each visit. Given two tables, `Visits` and `Transactions`, determine the number of users who made 0, 1, 2, ... up to the maximum number of transactions made by any user during a single visit. The result should show the number of transactions (`transactions_count`) and the number of visitors who made that many transactions (`visits_count`).",
                "constraints": [
                    "The `Visits` table has a primary key of `(user_id, visit_date)`.",
                    "The `Transactions` table does not have a primary key and may contain duplicates.",
                    "Each row in `Transactions` corresponds to a valid visit recorded in the `Visits` table."
                ],
                "testcases": [
                    {
                        "input": "Visits table:\n+---------+------------+\n| user_id | visit_date |\n+---------+------------+\n| 1       | 2020-01-01 |\n| 2       | 2020-01-02 |\n| 12      | 2020-01-01 |\n| 19      | 2020-01-03 |\n| 1       | 2020-01-02 |\n| 2       | 2020-01-03 |\n| 1       | 2020-01-04 |\n| 7       | 2020-01-11 |\n| 9       | 2020-01-25 |\n| 8       | 2020-01-28 |\n+---------+------------+\nTransactions table:\n+---------+------------------+--------+\n| user_id | transaction_date | amount |\n+---------+------------------+--------+\n| 1       | 2020-01-02       | 120    |\n| 2       | 2020-01-03       | 22     |\n| 7       | 2020-01-11       | 232    |\n| 1       | 2020-01-04       | 7      |\n| 9       | 2020-01-25       | 33     |\n| 9       | 2020-01-25       | 66     |\n| 8       | 2020-01-28       | 1      |\n| 9       | 2020-01-25       | 99     |\n+---------+------------------+--------+",
                        "output": "+--------------------+--------------+\n| transactions_count | visits_count |\n+--------------------+--------------+\n| 0                  | 4            |\n| 1                  | 5            |\n| 2                  | 0            |\n| 3                  | 1            |\n+--------------------+--------------+",
                        "explanation": "For transactions_count = 0, the visits (1, '2020-01-01'), (2, '2020-01-02'), (12, '2020-01-01') and (19, '2020-01-03') had no transactions, resulting in visits_count = 4.\nFor transactions_count = 1, the visits (2, '2020-01-03'), (7, '2020-01-11'), (8, '2020-01-28'), (1, '2020-01-02') and (1, '2020-01-04') each had one transaction, resulting in visits_count = 5.\nFor transactions_count = 2, no visits had two transactions, resulting in visits_count = 0.\nFor transactions_count = 3, the visit (9, '2020-01-25') had three transactions, resulting in visits_count = 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}