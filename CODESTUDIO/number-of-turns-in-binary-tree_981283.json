{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9252,
            "title": " Number Of Turns In Binary Tree",
            "titleSlug": "number-of-turns-in-binary-tree_981283",
            "content": "<h4 id=\"given-a-binary-tree-and-two-node-values-the-first-one-is-source-node-value-and-the-second-one-is-destination-node-value-your-task-is-to-find-a-number-of-turns-to-reach-from-source-node-to-the-destination-node\">Given a binary tree and two node values, the first one is \u2018source\u2019 node value and the second one is \u2018destination\u2019 node value. Your task is to find a number of turns to reach from \u2018source\u2019 node to the \u2018destination\u2019 node.</h4>\n\n<h4 id=\"a-turn-is-defined-as-rotation-in-the-path-from-source-to-destination\">A turn is defined as rotation in the path from \u2018source\u2019 to \u2018destination\u2019</h4>\n\n<h4 id=\"for-example\">For example -</h4>\n\n<h4 id=\"the-path-from-node-1-source-as-blue-to-9-destination-as-blue-is-shown-in-the-diagram\">The path from node 1( \u2018source\u2019 as blue) to -9 ( \u2018destination\u2019 as blue) is shown in the diagram.</h4>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-139-6804.png\" alt=\"example\"></p>\n\n<h4 id=\"all-the-nodes-that-come-in-the-path-are-represented-by-orange-colour\">All the nodes that come in the path are represented by orange colour.</h4>\n\n<h4 id=\"according-to-the-above-path-we-take-a-turn-at-node-4-node-10-and-at-node-3-to-reach-the-destination-node-i-e-9\">According to the above path, we take a turn at node 4, node 10 and at node 3 to reach the destination node i.e. -9.</h4>\n\n<h4 id=\"hence-the-total-number-of-turns-required-to-reach-at-1-to-9-is-3-return-the-total-number-of-turns-3\">Hence the total number of turns required to reach at \u20181\u2019 to \u2018-9\u2019 is \u20183\u2019, return the total number of turns 3.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. You are not required to print the output explicitly, it has already been taken care of. Just implement the function and return the number of turns required to reach from one \u2018source\u2019 node to \u2018destination\u2019 node.\n2. It is sure that every node value will present exactly once in the binary tree.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u20182*T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of input contains two space-separated integers, the first denotes the given \u2018source\u2019 node value and the second denotes the \u2018destination\u2019 node value.\n\nThe second line of input contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code> 1\n 2 3\n 4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, return the number of turns.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n2 &lt;= N &lt;= 3000 \n-10^9 &lt;= S, D &lt;= 10^9\n-10^9 &lt;= data &lt;= 10^9\n\nWhere \u2018T\u2019 represents the number of test cases, \u2018N\u2019 is the number of nodes in the tree, \u2018S\u2019 and \u2018D\u2019 denotes the value of \u2018source\u2019 node and \u2018destination\u2019 node, and \u2018data\u2019 denotes data contained in the node of a binary tree.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 6\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n3 6\n1 2 4 3 -1 5 -1 -1 -1 -1 6 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>1\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code> Test case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image1-6601.png\" alt=\"Sampletest1\"></p>\n\n<pre><code>According to the above path, we take a turn at node 1 to reach the destination node at 6 from \u2018source\u2019 node \u20184\u2019. \nHence the total number of turns required to reach at \u20184\u2019 to \u20186\u2019 is \u20181\u2019, return the total number of turns 1.\n\nTest case 2:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-135-_li-6803.jpg\" alt=\"Sampletest2\"></p>\n\n<pre><code>According to the above path, we take a turn at node 1, at node 2, and at node 5 to reach the destination node at \u20186\u2019 from \u2018source\u2019 node \u20183\u2019. \nHence the total number of turns required to reach at \u20184\u2019 to \u20186\u2019 is \u20183\u2019, return the total number of turns 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n7 3\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n4 3\n1 -1 2 -1 3 -1 4 -1 5 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree and two node values (source and destination), find the number of turns required to reach the destination node from the source node. A turn is defined as a change in direction in the path from source to destination.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "2 <= N <= 3000 (Number of nodes in the tree)",
                    "-10^9 <= S, D <= 10^9 (Source and Destination node values)",
                    "-10^9 <= data <= 10^9 (Data contained in the node)",
                    "Time Limit: 1 sec",
                    "Every node value will be present exactly once in the binary tree."
                ],
                "testcases": [
                    {
                        "input": "4 6\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1",
                        "output": "1",
                        "explanation": "The path from 4 to 6 is 4 -> 2 -> 1 -> 3 -> 6. There is one turn at node 1."
                    },
                    {
                        "input": "3 6\n1 2 4 3 -1 5 -1 -1 -1 -1 6 -1 -1",
                        "output": "3",
                        "explanation": "The path from 3 to 6 is 3 -> 1 -> 2 -> 5 -> 6. There are three turns: at node 1, node 2, and node 5."
                    },
                    {
                        "input": "7 3\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1",
                        "output": "2",
                        "explanation": "The path from 7 to 3 is 7 -> 4 -> 2 -> 1 -> 3. There are two turns: at node 4, and node 2"
                    },
                    {
                        "input": "4 3\n1 -1 2 -1 3 -1 4 -1 5 -1 -1",
                        "output": "0",
                        "explanation": "The path from 4 to 3 is 4 -> 2 -> 3.  There are no turns."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think recursively.</p>",
            "<p>Try to solve iteratively.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}