{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9364,
            "title": "Number of turns to reach from one node to another",
            "titleSlug": "number-of-turns-to-reach-from-one-node-to-another_983626",
            "content": "<h4 id=\"given-a-number-graynumber-find-the-gray-code-sequence\">Given a number \u2018grayNumber\u2019. Find the gray code sequence.</h4>\n\n<h4 id=\"conditions-for-a-gray-code-sequence\">Conditions for a gray code sequence :</h4>\n\n<pre><code>1. Gray code sequence contains numbers from 0 to 2^&#39;grayNumber&#39;-1 in bit/binary form.\n2. Two consecutive gray code sequence numbers only differ by 1 bit.\n3. Gray code sequence must start with 0.\n</code></pre>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>Given &#39;grayNumber&#39; : 2.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-137-6805.png\" alt=\"alt text\"></p>\n\n<pre><code>As depicted from above image, the gray code sequence is 0,1,3,2.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1. The output sequence must contain the decimal representation of numbers instead of the binary form.\n2. There can be multiple answers print anyone.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of every test case contains an integer \u2018grayNumber\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the \u2018list/vector\u2019 of the Gray code sequence.\n\nThe output is \u2018Valid\u2019 if returned gray code sequence is correct. Else \u2018Invalid\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 2\n0 &lt;= grayNumber &lt;= 15\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>Valid \nValid \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For first test case,\nGiven &#39;grayNumber&#39; :  2\nBits representation of a number from 0 to 2^2-1 = 3 is \u201c 00, 01, 10, 11\u2019\u2019.\nBut we have arranged these bits in such a way that two consecutive bits only differ by 1.\nOnly one possible way is \u201c00, 01, 11, 10 \u201d.\nHence return value of every number \u201c 00 - 0 , 01 - 1, 11 - 3, 10 - 2\u201d.\nSequence : {0, 1, 3, 2}.\n\nFor second test case,\nGiven &#39;grayNumber&#39; : 3\nBits representation of a number from 0 to 2^3-1 =7 is \u201c000, 001, 010, 011, 100, 101, 110, 111\u2019\u2019.\nBut we have arranged these bits in such a way that two consecutive bits only differ by 1.\nOne of the possible ways is \u201c000, 001, 011, 111, 101, 100, 110, 010\u201d.\nHence return value of every number \u201c000 - 0, 001 - 1, 011 - 3, 111 - 7, 101 - 5, 100 - 4, 110 - 6, 010 - 2 \u201d.\nSequence : {0, 1, 3, 7, 5, 4, 6, 2}.\n\nOne another possible sequence can be : {0, 1, 3, 2, 6, 7, 5, 4}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4\n1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>Valid \nValid\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h5>\n\n<pre><code>For first test case,\nGiven &#39;grayNumber&#39; : 4\nSequence : {0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8}.\n\nFor second test case,\nGiven &#39;grayNumber&#39; : 1\nSequence : {0, 1}.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative integer `grayNumber`, generate the Gray code sequence of length 2^`grayNumber`. A Gray code sequence is a sequence of binary numbers where each successive number differs from the previous one in only one bit. The sequence must start with 0 (in decimal representation). Return the Gray code sequence as a list of integers.",
                "constraints": [
                    "1 <= T <= 2",
                    "0 <= grayNumber <= 15",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "grayNumber = 2",
                        "output": "[0, 1, 3, 2]",
                        "explanation": "For grayNumber = 2, the sequence should contain numbers from 0 to 2^2 - 1 = 3. The binary representations are '00', '01', '10', '11'. A valid Gray code sequence is '00', '01', '11', '10', which corresponds to the decimal values 0, 1, 3, 2."
                    },
                    {
                        "input": "grayNumber = 3",
                        "output": "[0, 1, 3, 2, 6, 7, 5, 4]",
                        "explanation": "For grayNumber = 3, the sequence should contain numbers from 0 to 2^3 - 1 = 7.  A valid Gray code sequence is '000', '001', '011', '010', '110', '111', '101', '100', which corresponds to the decimal values 0, 1, 3, 2, 6, 7, 5, 4. Note that [0, 1, 3, 7, 5, 4, 6, 2] is also a valid sequence."
                    },
                    {
                        "input": "grayNumber = 4",
                        "output": "[0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8]",
                        "explanation": "A valid Gray code sequence for grayNumber = 4."
                    },
                    {
                        "input": "grayNumber = 1",
                        "output": "[0, 1]",
                        "explanation": "For grayNumber = 1, the sequence should contain numbers from 0 to 2^1 - 1 = 1. The binary representations are '0', '1'. A valid Gray code sequence is '0', '1', which corresponds to the decimal values 0, 1."
                    },
                    {
                        "input": "grayNumber = 0",
                        "output": "[0]",
                        "explanation": "For grayNumber = 0, the sequence should contain only the number 0."
                    },
                    {
                        "input": "grayNumber = 5",
                        "output": "[0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 11, 9, 8, 24, 25, 27, 26, 30, 31, 29, 28, 20, 21, 23, 22, 18, 19, 17, 16]",
                        "explanation": "Example test case with grayNumber 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Observe the pattern of the Gray code sequence.</p>",
            "<p>Try to solve the problem recursively.</p>",
            "<p>Try to solve without converting numbers in binary bits form.</p>",
            "<p>Use XOR to generate the numbers.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}