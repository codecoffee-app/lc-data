{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10108,
            "title": "Number of ways for the sum k",
            "titleSlug": "number-of-ways-for-the-sum-k_1164407",
            "content": "<h4 id=\"you-have-been-given-a-labelled-binary-tree-having-integer-value-except-zero-corresponding-to-all-its-nodes-you-have-to-find-the-number-of-possible-ways-to-make-the-sum-of-nodes-in-a-particular-path-exactly-equal-to-k\">You have been given a labelled binary tree having integer value (except zero) corresponding to all its nodes. You have to find the number of possible ways to make the sum of nodes (in a particular path) exactly equal to \u2018k\u2019.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>i) Nodes considered for the sum should be from parent to child.\nii) For a particular way, you can only consider nodes having the common path.\niii) Two ways are different from each other if they have an unequal number of nodes (for making sum equal to k) or at least one node is different between both the ways.\n</code></pre>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<p><img src=\"https://files.codingninjas.in/number-of-ways-for-the-sum-k-7908.png\" alt=\"Example\"></p>\n\n<pre><code>For the binary tree shown in the figure, the possible ways/paths are [8, 6, -4], [6, -3, 7], and [1, 9] for a sum of nodes equal to 10.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases to be run. Then the test cases are as follows.\n\nThe first line of each test case contains an integer \u2018K\u2019 denoting the required sum.\n\n The second line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the number of ways to make the sum of nodes equal to k under the given conditions.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n0 &lt;= N &lt;= 500\n-10^9 &lt;= K &lt;= 10^9\n-100 &lt;= data &lt;= 100\n\nWhere \u2018T\u2019 is the number of test cases, and \u2018N\u2019 is the total number of nodes in the binary tree, \u2018K\u2019 is the required sum, and \u201cdata\u201d is the value of the binary tree node. \u201cdata\u201d  equal to -1 represents a NULL value.\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n10\n8 6 1 -4 -3 0 9 1 1 -1 7 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n6\n5 1 -2 2 6 3 3 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case, the tree after the construction is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/number-of-ways-for-the-sum-k-7908.png\" alt=\"Example\"></p>\n\n<pre><code>Possible ways : [8, 6, -4], [6, -3, 7], and [1, 9]\n\nFor the second test case, possible ways are [5, 1], [5, -2, 3], [5, -2, 3], and [6].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n2 3 -1 2 -1 -2 -1 -1 -1\n2\n2 2 2 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>For the first test case, possible ways are [2, 3, 2, -2], [2, 3], and [3, 2].\n\nFor the second test case, possible ways are [2], [2], and [2].\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a labeled binary tree with integer values (excluding zero) at each node, find the number of paths from root to leaf where the sum of the node values equals a target value 'K'.\n\n**Important Notes:**\n\n*   Paths must follow a parent-to-child direction.\n*   Only nodes on a common path can be included in the sum for a given way/path.\n*   Two paths are considered different if they have a different number of nodes or if at least one node differs between the paths.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "0 <= N <= 500 (Total number of nodes in the binary tree)",
                    "-10^9 <= K <= 10^9 (Required sum)",
                    "-100 <= data <= 100 (Value of each node, -1 represents NULL)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "10\n8 6 1 -4 -3 0 9 1 1 -1 7 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "3",
                        "explanation": "The tree and K value of this input can produce paths that sum to K in three ways: [8, 6, -4], [6, -3, 7], and [1, 9]."
                    },
                    {
                        "input": "6\n5 1 -2 2 6 3 3 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "4",
                        "explanation": "The tree and K value of this input can produce paths that sum to K in four ways: [5, 1], [5, -2, 3], [5, -2, 3], and [6]."
                    },
                    {
                        "input": "5\n2 3 -1 2 -1 -2 -1 -1 -1",
                        "output": "3",
                        "explanation": "The tree and K value of this input can produce paths that sum to K in three ways: [2, 3, 2, -2], [2, 3], and [3, 2]."
                    },
                    {
                        "input": "2\n2 2 2 -1 -1 -1 -1",
                        "output": "3",
                        "explanation": "The tree and K value of this input can produce paths that sum to K in three ways: [2], [2], and [2]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you calculate the sum of nodes from leaf to root, recursively?</p>",
            "<p>Take a sum of values of already traversed nodes and check if there exists \u201cK - current sum\u201d.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}