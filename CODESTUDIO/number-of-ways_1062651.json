{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9561,
            "title": "Number of Ways",
            "titleSlug": "number-of-ways_1062651",
            "content": "<h4 id=\"consider-a-game-in-which-players-can-choose-any-of-the-three-coins-3-or-5-or-10-in-a-move-there-is-an-infinite-supply-of-all-the-three-types-of-coins-given-a-total-amount-n-find-the-distinct-combinations-which-sums-up-to-n\">Consider a game in which players can choose any of the three coins =&gt; 3 or 5 or 10 in a move. There is an infinite supply of all the three types of coins. Given a total amount \u2018N\u2019, find the distinct combinations which sums up to &#39;N&#39;.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>3,5 and 5,3 are not distinct combinations.\n</code></pre>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first and only line of each test case contains an integer \u2018N\u2019 , the total amount. \n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>For each test case, return the number of distinct combinations to reach the total amount is printed.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 5 * 10^4\n\nTime Limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>1\n8\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h4>\n\n<pre><code>{3,5} and {5,3} are two possible permutations but these represent the same combination. Thus, the output is 1.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n20\n13\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>4\n2\n</code></pre>\n\n<h4 id=\"explanation-of-sample-output-2\">Explanation of sample output 2:</h4>\n\n<pre><code>For test case 1 :  N  = 20\nPossible distinct combinations are :\n3 3 3 3 3 5\n5 5 5 5 \n5 5 10 \n10 10 \n\nFor test case 2 : N = 13\nPossible distinct combinations are :\n3 5 5 \n3 10\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an amount 'n' and the availability of three types of coins (3, 5, and 10) with an infinite supply, determine the number of distinct combinations of these coins that sum up to 'n'. The order of the coins does not matter (e.g., {3, 5} is considered the same as {5, 3}).",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 5 * 10^4",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 8",
                        "output": "1",
                        "explanation": "{3, 5} and {5, 3} are two possible permutations but these represent the same combination. Thus, the output is 1."
                    },
                    {
                        "input": "n = 20",
                        "output": "4",
                        "explanation": "Possible distinct combinations are : 3 3 3 3 3 5, 5 5 5 5 , 5 5 10 , 10 10"
                    },
                    {
                        "input": "n = 13",
                        "output": "2",
                        "explanation": "Possible distinct combinations are : 3 5 5 , 3 10"
                    },
                    {
                        "input": "n = 1",
                        "output": "0",
                        "explanation": "No combination of coins 3, 5, and 10 can sum to 1."
                    },
                    {
                        "input": "n = 3",
                        "output": "1",
                        "explanation": "Only one combination: {3}"
                    },
                    {
                        "input": "n = 5",
                        "output": "1",
                        "explanation": "Only one combination: {5}"
                    },
                    {
                        "input": "n = 10",
                        "output": "1",
                        "explanation": "Only one combination: {10}"
                    },
                    {
                        "input": "n = 15",
                        "output": "3",
                        "explanation": "Combinations are: {3,3,3,3,3}, {5,5,5}, {5,10}"
                    },
                    {
                        "input": "n = 30",
                        "output": "9",
                        "explanation": "More possible distinct combinations exist for higher values."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of trying all possible combinations.</p>",
            "<p>Think of storing the results of already calculated subproblems to improve time complexity.</p>",
            "<p>For every amount store the number of distinct combinations that sums up to that amount in an array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}