{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7222,
            "title": "Occurrence of X in a Sorted Array",
            "titleSlug": "occurrence-of-x-in-a-sorted-array_630456",
            "content": "<h4 id=\"you-have-been-given-a-sorted-array-list-of-integers-arr-of-size-n-and-an-integer-x\">You have been given a sorted array/list of integers <em><strong>&#39;arr&#39;</strong></em> of size <em><strong>&#39;n&#39;</strong></em> and an integer <em><strong>&#39;x&#39;</strong></em>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"find-the-total-number-of-occurrences-of-x-in-the-array-list\">Find the total number of occurrences of &#39;x&#39; in the array/list.</h4>\n\n<p><br /></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: &#39;n&#39; = 7, &#39;x&#39; = 3\n&#39;arr&#39; = [1, 1, 1, 2, 2, 3, 3]\n\nOutput: 2\n\nExplanation: Total occurrences of &#39;3&#39; in the array &#39;arr&#39; is 2.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of the input contains two integers, n, and x. They represent the size of the array/list and x, respectively. \n\nThe second line contains n single space-separated integer representing the array/list elements.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>Return the total number of occurrences of x in the array/list.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function. \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>7 3\n1 1 1 2 2 3 3\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>In the given list, there are 2 occurrences of integer 3.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code> 5 6\n 1 2 4 4 5\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code> 0\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>In the given list, there are 0 occurrences of integer 6.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity:</h5>\n\n<pre><code>The expected time complexity is O(log &#39;n&#39;).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= n &lt;= 10^4\n1 &lt;= arr[i] &lt;= 10^9\n1 &lt;= x &lt;= 10^9\nWhere arr[i] represents the element i-th element in the array/list.\n\nTime Limit: 1sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 218,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array of integers `arr` of size `n`, find the total number of occurrences of a target integer `x` in the array.",
                "constraints": [
                    "1 <= n <= 10^4",
                    "1 <= arr[i] <= 10^9 (where arr[i] is the i-th element in the array)",
                    "1 <= x <= 10^9",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "7 3\n1 1 1 2 2 3 3",
                        "output": "2",
                        "explanation": "The integer 3 appears twice in the given array [1, 1, 1, 2, 2, 3, 3]."
                    },
                    {
                        "input": "5 6\n1 2 4 4 5",
                        "output": "0",
                        "explanation": "The integer 6 does not appear in the given array [1, 2, 4, 4, 5]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Visit every element in the array and keep a track of whether the element being visited is X or not.</p>",
            "<p>Since the input array is sorted, can we think of a way where we don't have to visit every element?</p>",
            "<p>Since the input array is sorted, can we think of a way where we don't have to visit every element?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity - O(LogN)\n    Space Complexity - O(1)\n\n    where N is the length of the array\n*/\n\nint firstOccurrence(vector<int>& arr, int n, int x)\n{\n    // Initialize start and end pointers\n    int startIndex = 0, endIndex = n - 1;\n\n    // Initialize a pointer for starting index of x\n    int xStartIndex = -1;\n\n    while (startIndex <= endIndex)\n    {\n        int mid = startIndex + (endIndex - startIndex) / 2;\n\n        if(arr[mid] >= x)\n        {\n            // If mid value is x, update index\n            if(arr[mid] == x)\n                xStartIndex = mid;\n\n            // Search on left\n            endIndex = mid - 1;\n        }\n        else\n        {\n            // Search on right\n            startIndex = mid + 1;\n        }\n    }\n\n    // Return xStartIndex;\n    return xStartIndex;\n}\n\nint lastOccurrence(vector<int>& arr, int n, int x)\n{\n    // Initialize start and end pointers\n    int startIndex = 0, endIndex = n - 1;\n\n    // Initialize a pointer for starting index of x\n    int xEndIndex = -1;\n\n    while (startIndex <= endIndex)\n    {\n        int mid = startIndex + (endIndex - startIndex) / 2;\n\n        if(arr[mid] > x)\n        {\n            // Search on left\n            endIndex = mid - 1;\n        }\n        else\n        {\n            // If mid value is x, update index\n            if(arr[mid] == x)\n                xEndIndex = mid;\n\n            // Search on right\n            startIndex = mid + 1;\n        }\n    }\n\n    // Return xEndIndex;\n    return xEndIndex;\n}\n\nint count(vector<int>& arr, int n, int x)\n{\n    // Initialize start and end position variables for x\n    int xStartIndex, xEndIndex;\n\n    xStartIndex = firstOccurrence(arr, n, x);\n\n    // If x is not present\n    if (xStartIndex == -1)\n        return 0;\n\n    xEndIndex = lastOccurrence(arr, n, x);\n\n    // Total occurrences will be\n    int count =  xEndIndex - xStartIndex + 1;\n\n    return count;\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time Complexity : O(log(N))\r\n    Space Complexity : O(1)\r\n\r\n    Where N is the length of the array\r\n\"\"\"\r\n\r\n\r\ndef firstOccurrence(arr, n, x):\r\n    # Initialize start and end pointers\r\n    startIndex = 0\r\n    endIndex = n - 1\r\n\r\n    # Initialize a pointer for starting index of x\r\n    xStartIndex = -1\r\n\r\n    while startIndex <= endIndex:\r\n        mid = startIndex + (endIndex - startIndex) // 2\r\n\r\n        if arr[mid] >= x:\r\n            # If mid value is x, update index\r\n            if arr[mid] == x:\r\n                xStartIndex = mid\r\n\r\n            # Search on left\r\n            endIndex = mid - 1\r\n\r\n        else:\r\n            # Search on right\r\n            startIndex = mid + 1\r\n\r\n    return xStartIndex\r\n\r\n\r\ndef lastOccurrence(arr, n, x):\r\n\r\n    # Initialize start and end pointers\r\n    startIndex = 0\r\n    endIndex = n - 1\r\n\r\n    # Initialize a pointer for starting index of x\r\n    xEndIndex = -1\r\n\r\n    while startIndex <= endIndex:\r\n        mid = startIndex + (endIndex - startIndex) // 2\r\n\r\n        if arr[mid] > x:\r\n            # Search on left\r\n            endIndex = mid - 1\r\n\r\n        else:\r\n            # If mid value is x, update index\r\n            if arr[mid] == x:\r\n                xEndIndex = mid\r\n\r\n            # Search on right\r\n            startIndex = mid + 1\r\n\r\n    return xEndIndex\r\n\r\n\r\ndef count(arr, n, k):\r\n\r\n    xStartIndex = firstOccurrence(arr, n, k)\r\n\r\n    # If x is not present\r\n    if xStartIndex == -1:\r\n        return 0\r\n\r\n    xEndIndex = lastOccurrence(arr, n, k)\r\n\r\n    # Total occurrences will be\r\n    count = xEndIndex - xStartIndex + 1\r\n\r\n    return count\r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity - O(LogN)\r\n    Space Complexity - O(1)\r\n\r\n    where N is the length of the array\r\n*/\r\npublic class Solution {\r\n    public static int count(int arr[], int n, int x) {\r\n        // Initialize start and end position variables for x\r\n        int xStartIndex, xEndIndex;\r\n\r\n        xStartIndex = firstOccurrence(arr, n, x);\r\n\r\n        // If x is not present\r\n        if (xStartIndex == -1)\r\n            return 0;\r\n\r\n        xEndIndex = lastOccurrence(arr, n, x);\r\n\r\n        // Total occurrences will be\r\n        int count =  xEndIndex - xStartIndex + 1;\r\n\r\n        return count;\r\n    }\r\n    private static int firstOccurrence(int arr[], int n, int x) {\r\n\r\n        // initialize start and end pointers\r\n        int startIndex = 0, endIndex = n - 1;\r\n\r\n        // initialize a pointer for starting index of x\r\n        int xStartIndex = -1;\r\n\r\n        while (startIndex <= endIndex) {\r\n            int mid = startIndex + (endIndex - startIndex) / 2;\r\n\r\n            if(arr[mid] >= x) {\r\n                // if mid value is x, update index\r\n                if(arr[mid] == x) {\r\n                    xStartIndex = mid;\r\n                }\r\n\r\n                // search on left\r\n                endIndex = mid - 1;\r\n            }\r\n            else {\r\n                // search on right\r\n                startIndex = mid + 1;\r\n            }\r\n        }\r\n\r\n        // return xStartIndex;\r\n        return xStartIndex;\r\n    }\r\n\r\n    private static int lastOccurrence(int arr[], int n, int x) {\r\n\r\n        // initialize start and end pointers\r\n        int startIndex = 0, endIndex = n - 1;\r\n\r\n        // initialize a pointer for starting index of x\r\n        int xEndIndex = -1;\r\n\r\n        while (startIndex <= endIndex)\r\n        {\r\n            int mid = startIndex + (endIndex - startIndex) / 2;\r\n\r\n            if(arr[mid] > x)\r\n            {\r\n                // search on left\r\n                endIndex = mid - 1;\r\n            }\r\n            else\r\n            {\r\n                // if mid value is x, update index\r\n                if(arr[mid] == x)\r\n                    xEndIndex = mid;\r\n\r\n                // search on right\r\n                startIndex = mid + 1;\r\n            }\r\n        }\r\n\r\n        // return xEndIndex;\r\n        return xEndIndex;\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}