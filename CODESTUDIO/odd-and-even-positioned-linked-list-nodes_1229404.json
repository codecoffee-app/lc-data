{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10464,
            "title": "Odd and even positioned linked list nodes",
            "titleSlug": "odd-and-even-positioned-linked-list-nodes_1229404",
            "content": "<h4 id=\"you-are-given-a-singly-linked-list-head-consisting-of-n-nodes-the-task-is-to-group-all-the-odd-nodes-together-followed-by-the-even-nodes-maintaining-the-relative-order-of-nodes-given-in-the-input-note-that-we-are-talking-about-the-node-s-positions-and-not-the-value-stored-in-the-node-try-to-write-an-in-place-algorithm-i-e-without-using-any-extra-space-to-solve-this-problem\">You are given a singly linked list \u2018HEAD\u2019 consisting of \u2018N\u2019 nodes. The task is to group all the odd nodes together, followed by the even nodes, maintaining the relative order of nodes given in the input. Note that we are talking about the node\u2019s positions and not the value stored in the node. Try to write an in-place algorithm (i.e., without using any extra space) to solve this problem.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Given linked list: \u20182 =&gt; 1 =&gt; 3 =&gt; 4 =&gt; 6 =&gt; 5\u2019\n\nWhile maintaining the relative order of nodes as it is in the input, Nodes at odd positions are (2, 3, 6), and nodes at evens position are (1, 4, 5).\n\nModified linked list: \u20182 =&gt; 3 =&gt; 6 =&gt; 1 =&gt; 4 =&gt; 5\u2019\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. Consider that the first node is odd, the second is even, and so on.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases. Then, the \u2018T\u2019 test cases follow.\n\nThe first and only line of each test case contains space-separated integers denoting the values of nodes of the Linked List. The Linked List is terminated with -1. Hence, -1 is never a node value of the Linked List.\n\nFor more clarity, please refer to the sample inputs. \n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For every test case, return the modified linked list.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^3\n-10^6 &lt;= Node value &lt;= 10^6 (Node Value != -1)  \n\nTime limit: 1 second\n</code></pre>\n<h4 id=\"sample-input-1\">Sample input 1:</h4>\n\n<pre><code>2 \n1 2 3 -4 5 6 -1    \n-3 -1 \n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample output 1:</h4>\n\n<pre><code>1 3 5 2 -4 6 -1\n-3 -1 \n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h4>\n\n<pre><code>Test Case 1:\n\nGiven linked list: \u20181 =&gt; 2 =&gt; 3 =&gt; -4 =&gt; 5 =&gt; 6\u2019\nWhile maintaining the relative order of nodes as it is in the input, Nodes at odd positions are (1, 3, 5), and nodes at evens position are (2, -4, 6). \nModified linked list: \u20181 =&gt; 3 =&gt; 5 =&gt; 2 =&gt; -4 =&gt; 6\u2019\n\nTest Case 2:\n\nInput linked list: \u2018-3\u2019\nThe linked list contains only one node.\nModified linked list: \u2018-3\u2019\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample input 2:</h4>\n\n<pre><code>2\n3 5 -2 1 7 -1\n-2 3 5 3 -1  \n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample output 2:</h4>\n\n<pre><code>3 -2 7 5 1 -1\n-2 5 3 3 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 38,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the head of a singly linked list, rearrange the list so that all nodes at odd positions come before all nodes at even positions. The relative order of nodes within both the odd and even groups should be maintained.  Consider the first node as odd, the second as even, and so on. Perform this rearrangement in-place (without using extra space). Return the head of the modified linked list.",
                "constraints": [
                    "1 <= Number of nodes (N) <= 1000",
                    "-1000000 <= Node value <= 1000000 (Node Value != -1)",
                    "The solution must be implemented in-place."
                ],
                "testcases": [
                    {
                        "input": "n = 6, nums = [2, 1, 3, 4, 6, 5]",
                        "output": "2 3 6 1 4 5",
                        "explanation": "The odd-positioned nodes are 2, 3, and 6. The even-positioned nodes are 1, 4, and 5. The rearranged list is 2 -> 3 -> 6 -> 1 -> 4 -> 5."
                    },
                    {
                        "input": "n = 1, nums = [-3]",
                        "output": "-3",
                        "explanation": "The list contains only one node, so the original list is returned."
                    },
                    {
                        "input": "n = 5, nums = [3, 5, -2, 1, 7]",
                        "output": "3 -2 7 5 1",
                        "explanation": "The odd-positioned nodes are 3, -2 and 7. The even-positioned nodes are 5 and 1. The rearranged list is 3 -> -2 -> 7 -> 5 -> 1."
                    },
                    {
                        "input": "n = 4, nums = [-2, 3, 5, 3]",
                        "output": "-2 5 3 3",
                        "explanation": "The odd-positioned nodes are -2 and 5. The even-positioned nodes are 3 and 3. The rearranged list is -2 -> 5 -> 3 -> 3."
                    },
                    {
                        "input": "n = 7, nums = [1, 2, 3, 4, 5, 6, 7]",
                        "output": "1 3 5 7 2 4 6",
                        "explanation": "The odd-positioned nodes are 1, 3, 5 and 7. The even-positioned nodes are 2, 4, and 6.  The rearranged list is 1 -> 3 -> 5 -> 7 -> 2 -> 4 -> 6."
                    },
                    {
                        "input": "n = 0, nums = []",
                        "output": "",
                        "explanation": "The list is empty so the result is an empty list."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to store the required sequence of nodes in another data structure.</p>",
            "<p>Try to modify the linked list while traversing it.</p>",
            "<p>Append odd nodes to \u2018head\u2019 and even nodes to \u2018head=&gt;next\u2019.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}