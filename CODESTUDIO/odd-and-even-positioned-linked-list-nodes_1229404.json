{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10464,
            "title": "Odd and even positioned linked list nodes",
            "titleSlug": "odd-and-even-positioned-linked-list-nodes_1229404",
            "content": "<h4 id=\"you-are-given-a-singly-linked-list-head-consisting-of-n-nodes-the-task-is-to-group-all-the-odd-nodes-together-followed-by-the-even-nodes-maintaining-the-relative-order-of-nodes-given-in-the-input-note-that-we-are-talking-about-the-node-s-positions-and-not-the-value-stored-in-the-node-try-to-write-an-in-place-algorithm-i-e-without-using-any-extra-space-to-solve-this-problem\">You are given a singly linked list \u2018HEAD\u2019 consisting of \u2018N\u2019 nodes. The task is to group all the odd nodes together, followed by the even nodes, maintaining the relative order of nodes given in the input. Note that we are talking about the node\u2019s positions and not the value stored in the node. Try to write an in-place algorithm (i.e., without using any extra space) to solve this problem.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Given linked list: \u20182 =&gt; 1 =&gt; 3 =&gt; 4 =&gt; 6 =&gt; 5\u2019\n\nWhile maintaining the relative order of nodes as it is in the input, Nodes at odd positions are (2, 3, 6), and nodes at evens position are (1, 4, 5).\n\nModified linked list: \u20182 =&gt; 3 =&gt; 6 =&gt; 1 =&gt; 4 =&gt; 5\u2019\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. Consider that the first node is odd, the second is even, and so on.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases. Then, the \u2018T\u2019 test cases follow.\n\nThe first and only line of each test case contains space-separated integers denoting the values of nodes of the Linked List. The Linked List is terminated with -1. Hence, -1 is never a node value of the Linked List.\n\nFor more clarity, please refer to the sample inputs. \n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For every test case, return the modified linked list.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^3\n-10^6 &lt;= Node value &lt;= 10^6 (Node Value != -1)  \n\nTime limit: 1 second\n</code></pre>\n<h4 id=\"sample-input-1\">Sample input 1:</h4>\n\n<pre><code>2 \n1 2 3 -4 5 6 -1    \n-3 -1 \n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample output 1:</h4>\n\n<pre><code>1 3 5 2 -4 6 -1\n-3 -1 \n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h4>\n\n<pre><code>Test Case 1:\n\nGiven linked list: \u20181 =&gt; 2 =&gt; 3 =&gt; -4 =&gt; 5 =&gt; 6\u2019\nWhile maintaining the relative order of nodes as it is in the input, Nodes at odd positions are (1, 3, 5), and nodes at evens position are (2, -4, 6). \nModified linked list: \u20181 =&gt; 3 =&gt; 5 =&gt; 2 =&gt; -4 =&gt; 6\u2019\n\nTest Case 2:\n\nInput linked list: \u2018-3\u2019\nThe linked list contains only one node.\nModified linked list: \u2018-3\u2019\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample input 2:</h4>\n\n<pre><code>2\n3 5 -2 1 7 -1\n-2 3 5 3 -1  \n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample output 2:</h4>\n\n<pre><code>3 -2 7 5 1 -1\n-2 5 3 3 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 38,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list 'HEAD' consisting of 'N' nodes, rearrange the list such that all nodes at odd positions appear first, followed by nodes at even positions. The relative order of nodes within the odd and even groups should be preserved. The first node is considered to be at an odd position. Implement an in-place algorithm to solve this problem without using extra space.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^3",
                    "-10^6 <= Node value <= 10^6 (Node Value != -1)",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 -4 5 6 -1",
                        "output": "1 3 5 2 -4 6 -1",
                        "explanation": "The linked list is 1 -> 2 -> 3 -> -4 -> 5 -> 6. The nodes at odd positions are 1, 3, and 5. The nodes at even positions are 2, -4, and 6. The modified linked list is 1 -> 3 -> 5 -> 2 -> -4 -> 6."
                    },
                    {
                        "input": "-3 -1",
                        "output": "-3 -1",
                        "explanation": "The linked list contains only one node, -3. The modified linked list remains -3."
                    },
                    {
                        "input": "3 5 -2 1 7 -1",
                        "output": "3 -2 7 5 1 -1",
                        "explanation": "The linked list is 3 -> 5 -> -2 -> 1 -> 7. The nodes at odd positions are 3, -2, and 7. The nodes at even positions are 5 and 1. The modified linked list is 3 -> -2 -> 7 -> 5 -> 1."
                    },
                    {
                        "input": "-2 3 5 3 -1",
                        "output": "-2 5 3 3 -1",
                        "explanation": "The linked list is -2 -> 3 -> 5 -> 3. The nodes at odd positions are -2 and 5. The nodes at even positions are 3 and 3. The modified linked list is -2 -> 5 -> 3 -> 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to store the required sequence of nodes in another data structure.</p>",
            "<p>Try to modify the linked list while traversing it.</p>",
            "<p>Append odd nodes to \u2018head\u2019 and even nodes to \u2018head=&gt;next\u2019.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}