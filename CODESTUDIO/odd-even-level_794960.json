{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7861,
            "title": "Odd even level",
            "titleSlug": "odd-even-level_794960",
            "content": "<h4 id=\"given-a-binary-tree-find-and-return-the-modulus-of-the-difference-between-the-sum-of-odd-level-nodes-and-the-sum-of-even-level-nodes\">Given a binary tree. Find and return the modulus of the difference between the sum of odd level nodes and the sum of even level nodes.</h4>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then, the test cases follow.\n\nThe first and only line of every test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print an integer denoting the modulus of the difference in a single line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n0 &lt;= N &lt;= 10^5\n0 &lt;= val &lt;= 10^9\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n5 6 10 2 3 5 9 -1 -1 -1 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>8\n</code></pre>\n\n<p>Explanation \n    <img src=\"https://ninjasfiles.s3.amazonaws.com/0000000000000615.PNG\" alt=\"Binary tree\"></p>\n\n<pre><code>Level 1= {5}, Sum= 5\nLevel 2= {6, 10} Sum= 16\nLevel 3= {2, 3, 5, 9}, Sum=19\nOdd sum = Sum of Level 1 + Sum of Level 3\n                   5 + 19 \n                   24\n\nEven sum = Sum of Level 2\n                    16\n\n| Even sum - Odd sum | = 8\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n5 3 9 2 6 5 10 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>16\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 25,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, calculate the absolute difference between the sum of nodes at odd levels and the sum of nodes at even levels.  The tree is represented in level order, where -1 indicates a null node.  Return the absolute difference.",
                "constraints": [
                    "1 <= T <= 5",
                    "0 <= N <= 10^5",
                    "0 <= val <= 10^9",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 6 10 2 3 5 9 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "8",
                        "explanation": "Level 1: {5}, Sum = 5\nLevel 2: {6, 10}, Sum = 16\nLevel 3: {2, 3, 5, 9}, Sum = 19\nOdd Sum (Level 1 + Level 3) = 5 + 19 = 24\nEven Sum (Level 2) = 16\nAbsolute Difference = |24 - 16| = 8"
                    },
                    {
                        "input": "5 3 9 2 6 5 10 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "16",
                        "explanation": "Level 1: {5}, Sum = 5\nLevel 2: {3, 9}, Sum = 12\nLevel 3: {2, 6, 5, 10}, Sum = 23\nOdd Sum (Level 1 + Level 3) = 5 + 23 = 28\nEven Sum (Level 2) = 12\nAbsolute Difference = |28 - 12| = 16"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Although the question is focusing on levels of the tree, the use of queue can be eliminated by using recursion i.e depth-first search traversal of the tree. We can maintain the level we are traversing on by using an extra parameter in the DFS function.&nbsp;&nbsp;&nbsp;&nbsp;</p>",
            "<p>First off, observe that the question focuses on levels of the tree. Thus, level order traversal can come to play. We can maintain the odd sum as well as the even sum by maintaining the level at which we are while traversing.&nbsp;&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}