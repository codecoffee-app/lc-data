{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9579,
            "title": "Optimal BST",
            "titleSlug": "optimal-bst_1062671",
            "content": "<h4 id=\"given-a-sorted-array-of-keys-of-bst-and-an-array-of-frequency-counts-of-each-key-in-the-same-order-as-in-the-given-inorder-traversal-the-frequency-of-an-element-is-the-number-of-searches-made-to-that-element-construct-a-binary-search-tree-from-the-given-keys-such-that-the-total-cost-of-all-the-searches-is-minimum\">Given a sorted array of keys of BST and an array of frequency counts of each key in the same order as in the given inorder traversal. The frequency of an element is the number of searches made to that element. Construct a binary search tree from the given keys such that the total cost of all the searches is minimum.</h4>\n\n<pre><code>Cost of searching a key is its frequency multiplied by its level number in the BST.\n</code></pre>\n\n<h4 id=\"a-binary-search-tree-bst-also-called-an-ordered-or-sorted-binary-tree-is-a-rooted-binary-tree-whose-internal-nodes-each-store-a-key-greater-than-all-the-keys-in-the-nodes-left-subtree-and-less-than-those-in-its-right-subtree\">A binary search tree (BST), also called an ordered or sorted binary tree, is a rooted binary tree whose internal nodes each store a key greater than all the keys in the node&#39;s left subtree and less than those in its right subtree.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Input keys = [ 1, 3, 5 ] \nFrequency = [ 3, 10, 7 ] \n\nAll the unique BST possible from the given keys are: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/opt-6899.png\" alt=\"\"></p>\n\n<pre><code>Among all these possible BST, the minimum cost is obtained from the below BST: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/opt-6900.png\" alt=\"\"></p>\n\n<pre><code>Cost = 1 * (freq of 3) + 2 * (freq of 1) + 2 * (freq of 5) = 30 \nwhere 1 is the level of node 3, 2 is the level of the node 1 and node 5. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer T, the number of test cases.\nThe first line of each test case contains an element \u2018N\u2019 denoting the number of elements in the BST. \nThe second line of each test case contains \u2018N\u2019 space separated integers, sorted in ascending order. \nThe third line of each test case contains \u2018N\u2019 space separated integers denoting the frequency of each element of the BST.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, print the minimum total cost of constructing the BST. \nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>1. Given BST will not contain duplicates. \n2. You don\u2019t have to print anything, it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n2 &lt;= N &lt;= 50\n0 &lt;= data &lt;= 10^4\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the number of nodes in the given tree and \u2018data\u2019 denotes the value of the nodes in the given tree.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n3\n1 3 5 \n3 10 7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>30 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>All the possible BST\u2019s for the given input are shown in the above example.\n\nSearching cost in first BST = 1 * 10 + 2 * 3 + 2 * 7 = 30. \nSearching cost in second BST = 1 * 7 + 2 * 3 + 3 * 10 = 43. \nSearching cost in third BST = 1 * 7 + 2 * 10 + 3 * 3 = 36.\nSearching cost in fourth BST = 1 * 3 + 2 * 10 + 3 * 7 = 44. \nSearching cost in fifth BST = 1 * 3 + 2 * 7 + 3 * 10 = 47. \n\nThus, 30 is the minimum cost of all the searches. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n3\n1 2 3\n25 10 20\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>95\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 30,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array of keys and their corresponding frequency counts, construct a Binary Search Tree (BST) that minimizes the total cost of searching all keys. The cost of searching a key is defined as its frequency multiplied by its level in the BST (root is level 1).  Return the minimum possible total search cost for a BST built from these keys and frequencies.",
                "constraints": [
                    "1 <= T <= 5",
                    "2 <= N <= 50",
                    "0 <= data <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "n = 3, keys = [1, 3, 5], freq = [3, 10, 7]",
                        "output": "30",
                        "explanation": "The optimal BST has 3 as the root. The cost is (1 * 10) + (2 * 3) + (2 * 7) = 30."
                    },
                    {
                        "input": "n = 3, keys = [1, 2, 3], freq = [25, 10, 20]",
                        "output": "95",
                        "explanation": "The optimal BST has 2 as the root. The cost is (1 * 10) + (2 * 25) + (2 * 20) = 95."
                    },
                    {
                        "input": "n = 2, keys = [10, 12], freq = [34, 8]",
                        "output": "50",
                        "explanation": "Two possible BSTs:\n1) 10 as root: Cost = (1 * 34) + (2 * 8) = 50\n2) 12 as root: Cost = (1 * 8) + (2 * 34) = 76\nMinimum cost is 50."
                    },
                    {
                        "input": "n = 4, keys = [1, 2, 3, 4], freq = [1, 2, 3, 4]",
                        "output": "20",
                        "explanation": "Optimal BST will have a root closer to the middle with higher frequency to reduce the weighted depth."
                    },
                    {
                        "input": "n = 5, keys = [1, 2, 3, 4, 5], freq = [5, 4, 3, 2, 1]",
                        "output": "34",
                        "explanation": "Optimal BST arrangement minimizes the weighted average depth."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you solve this using recursion?</p>",
            "<p><strong>&nbsp;</strong>Can you optimise the previous approach? Try to memoize the subproblems.&nbsp;</p>",
            "<p>Initially, we were breaking the large problem into small problems but now, let us look at it in a different way. Can you solve the small problem first and then reach the final answer? Try to use the bottom-up approach now.&nbsp;</p>",
            "<p>Can you optimize the previous approach by precomputing the sum of frequencies ?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}