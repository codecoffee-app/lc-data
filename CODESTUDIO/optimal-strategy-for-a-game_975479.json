{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9126,
            "title": "Optimal Strategy for a Game",
            "titleSlug": "optimal-strategy-for-a-game_975479",
            "content": "<h4 id=\"you-and-your-friend-ninjax-are-playing-a-game-of-coins-ninjax-place-the-n-number-of-coins-in-a-straight-line\">You and your friend Ninjax are playing a game of coins. Ninjax place the &#39;N&#39; number of coins in a straight line.</h4>\n\n<h4 id=\"the-rule-of-the-game-is-as-follows\">The rule of the game is as follows:</h4>\n\n<pre><code>1. Each coin has a value associated with it.\n\n2. It\u2019s a two-player game played against an opponent with alternating turns. \n\n3. At each turn, the player picks either the first or the last coin from the line and permanently removes it.\n\n4. The value associated with the coin picked by the player adds up to the total amount the player wins. \n</code></pre>\n\n<h4 id=\"ninjax-is-a-good-friend-of-yours-and-asks-you-to-start-first\">Ninjax is a good friend of yours and asks you to start first.</h4>\n\n<h4 id=\"your-task-is-to-find-the-maximum-amount-you-can-definitely-win-at-the-end-of-this-game\">Your task is to find the maximum amount you can definitely win at the end of this game.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>&#39;N&#39; is always even number.\n\nNinjax is as smart as you, so he will play so as to maximize the amount he wins.\n</code></pre>\n\n<h5 id=\"example-1\">Example 1:</h5>\n\n<pre><code>Let the values associated with four coins be: [9, 5, 21, 7] \n\nLet\u2019s say that initially, you pick 9 and Ninjax picks 7.\nThen, you pick 21 and Ninjax picks 5. \nSo, you win a total amount of (9+21), i.e. 30.\n\nIn case you would have picked up 7 initially and Ninjax would have picked 21 (as he plays optimally). \nThen, you would pick 9 and Ninjax would choose 5. So, you win a total amount of (7+9), i.e. 16, which is not the maximum you can obtain.\n\nThus, the maximum amount you can win is 30.\n</code></pre>\n\n<h5 id=\"example-2\">Example 2:</h5>\n\n<pre><code>Let the values associated with four coins be: [20, 50, 5, 10] \n\nLet\u2019s say that initially, you pick 10 and Ninjax picks 20.\nThen, you pick 50 and Ninjax picks 5. \nSo, you win a total amount of (10+50), i.e. 60.\n\nIn case you would have picked up 20 initially and Ninjax would have picked 50 (as he plays optimally). \nThen, you would pick 10 and Ninjax would choose 5. So, you win a total amount of (20+10), i.e. 30, which is not the maximum you can obtain.\n\nThus, the maximum amount you can win is 60.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The very first line of input contains an integer T denoting the number of test cases. \n\nThe first line of every test case contains an integer \u2018N\u2019 denoting the number of coins present in the line initially. \n\nThe second line of every test case contains \u2018N\u2019 space-separated integers denoting the values associated with the coins placed by Ninjax.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the required answer in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 10 \n2 &lt;= &#39;N&#39; &lt;= 10 ^ 3 \n0 &lt;= &#39;VALUE&#39; &lt;= 10 ^ 5\n\nWhere &#39;T&#39; is the number of test cases, &#39;N&#39; is the number of coins and &#39;VALUE&#39; is the amount on each coin.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\n7 8\n4\n5 30 4 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>8\n31\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case, you can pick the maximum value between 7 and 8, which is 8. Thus, Ninjax has to pick up 7. \n\nSo, you win a total amount of 8.\nFor the second test case, first, you pick 1, Ninjax picks 5. Then, you pick 30 and Ninjax picks 4, which is the only coin left. So, you win a total amount of (1 + 30) 31.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n4\n0 5 1 7\n6\n1 2 3 4 5 6\n4\n5 5 5 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>12\n12\n10\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 15,
            "dislikes": "NA",
            "rephrased": {
                "body": "You and your friend Ninjax are playing a game with coins arranged in a straight line.  There are 'N' coins, each with a value. Players take turns, choosing either the first or last coin from the line and removing it permanently.  The value of the chosen coin is added to the player's score. You go first, and Ninjax, being a smart player, will always play to maximize his own score.  Given the values of the coins, your task is to determine the maximum amount you can guarantee to win at the end of the game.",
                "constraints": [
                    "1 <= T <= 10, where T is the number of test cases.",
                    "2 <= N <= 10^3, where N is the number of coins (N is always even).",
                    "0 <= VALUE <= 10^5, where VALUE is the value of each coin.",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "2\n2\n7 8\n4\n5 30 4 1",
                        "output": "8\n31",
                        "explanation": "Test Case 1: With coins [7, 8], you pick 8, leaving Ninjax to pick 7. Your score is 8.\nTest Case 2: With coins [5, 30, 4, 1], you pick 1.  Ninjax picks 5. You pick 30. Ninjax picks 4. Your score is 1 + 30 = 31. The optimal strategy guarantees you a score of 31."
                    },
                    {
                        "input": "3\n4\n0 5 1 7\n6\n1 2 3 4 5 6\n4\n5 5 5 5",
                        "output": "12\n12\n10",
                        "explanation": "Test Case 1: With coins [0, 5, 1, 7], you can ensure a maximum win of 12.\nTest Case 2: With coins [1, 2, 3, 4, 5, 6], you can ensure a maximum win of 12.\nTest Case 3: With coins [5, 5, 5, 5], you can ensure a maximum win of 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>A simple and intuitive approach could be to try all the possible combinations of coins we can pick, keeping in mind that the other player plays optimally (i.e. always try to win the maximum amount). Finally, we can select the combination which results in the maximum amount.</p>",
            "<p>We have discussed the approach which makes 4 recursive calls to the helper function. Another approach could be to subtract the amount that the other player may win and add the remaining amount to the first player\u2019s winning amount. This solves the problem by making only 2 recursive calls to helper function.&nbsp;</p>",
            "<p>An improvement over the previous approaches would be to avoid calculating the same subproblems again and again. Instead, store the result of the solved sub-problems in a table and use it whenever it is required.</p>",
            "<p>Approach 2 can be optimized by storing the result of the solved sub-problems in a table to avoid calculating it again.</p>",
            "<p>Initially (in Approach 3 and 4), we were breaking the large problem into smaller sub-problems using the concept of Memoization i.e. Top-Down Dynamic Programming but a different approach could be to solve smaller problems first and then reach the final answer. This is done by using the concept Tabulation i.e. Bottom-Up Dynamic Programming. Even though the time complexity remains the same but the bottom-up approach is faster than the top-down approach. This is due to the fact that tabulation doesn\u2019t employ recursion hence, it eliminates the overhead of recursion stack.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}