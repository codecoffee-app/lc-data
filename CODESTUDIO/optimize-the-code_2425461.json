{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15245,
            "title": "Optimize The Code ",
            "titleSlug": "optimize-the-code_2425461",
            "content": "<h4 id=\"while-practicing-questions-on-data-structures-ninja-faced-a-problem-and-was-not-able-to-pass-all-the-test-cases-of-a-question-as-the-time-complexity-of-the-code-ninja-made-was-very-large-ninja-asked-you-for-help-you-are-given-a-snippet-of-code-and-you-have-to-optimize-the-code\">While practicing questions on data structures, Ninja faced a problem and was not able to pass all the test cases of a question as the time complexity of the code Ninja made was very large. Ninja asked you for help. You are given a snippet of code and you have to optimize the code.</h4>\n\n<h4 id=\"pseudocode\">Pseudocode:</h4>\n\n<pre><code>RES = 0\nFOR(i -&gt; A to B) {\n    FOR(j -&gt; C to D) {\n        ADD (i ^ j) to RES;\n    }\n}\nPRINT(RES)\n</code></pre>\n\n<h4 id=\"you-are-given-the-integers-a-b-c-and-d-and-represents-the-bitwise-xor-operator-as-the-result-can-be-large-print-the-result-modulo-1000000007\">You are given the integers \u2018A\u2019, \u2018B\u2019, \u2018C\u2019, and \u2018D\u2019, and \u2018^\u2019 represents the bitwise XOR operator. As the result can be large print the result modulo 1000000007.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains a single integer &#39;T&#39;, representing the number of test cases.\n\nThe first line of each test case contains 4 space-separated integers, representing the integers \u2018A\u2019, \u2018B\u2019, \u2018C\u2019, and \u2018D\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the result of the code modulo 1000000007.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= A &lt;= B &lt;= 5*10^3\n1 &lt;= C &lt;= D &lt;= 5*10^3\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2 3 7 8\n1 1 1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>30\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For the first test case :\n\nThe operations performed will be : 2^7 + 2^8 + 3^7 + 3^8 = 5 + 10 + 4 + 11 = 30\n\nFor the second test :\n\nThe operations performed will be : 1^1 + 1^1 = 0 + 0 = 0\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 5 4 5\n1 2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>15\n14\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given four integers A, B, C, and D, calculate the sum of (i XOR j) for all i in the range [A, B] and j in the range [C, D]. Return the result modulo 1000000007. You need to optimize the code for time complexity.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= A <= B <= 5*10^3",
                    "1 <= C <= D <= 5*10^3",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n2 3 7 8\n1 1 1 1",
                        "output": "30\n0",
                        "explanation": "Test Case 1:\nFor the first test case: The XOR operations are 2^7 + 2^8 + 3^7 + 3^8 = 5 + 10 + 4 + 11 = 30. The result is 30 modulo 1000000007, which is 30.\n\nTest Case 2:\nFor the second test case: The XOR operation is 1^1 = 0. Since we only perform one XOR and the loop runs twice since there are 2 test cases, The sum will be 0"
                    },
                    {
                        "input": "2\n3 5 4 5\n1 2 3 4",
                        "output": "15\n14",
                        "explanation": "Test Case 1:\nFor the first test case: The XOR operations are 3^4 + 3^5 + 4^4 + 4^5 + 5^4 + 5^5 = 7 + 6 + 0 + 1 + 1 + 0 = 15. The result is 15 modulo 1000000007, which is 15.\n\nTest Case 2:\nFor the second test case: The XOR operations are 1^3 + 1^4 + 2^3 + 2^4 = 2 + 5 + 1 + 6 = 14. The result is 14 modulo 1000000007, which is 14."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try checking the number of set bits and unset bits at every bit.</p>",
            "<p>Try to find the number of set bits in constant time using shifting properties.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}