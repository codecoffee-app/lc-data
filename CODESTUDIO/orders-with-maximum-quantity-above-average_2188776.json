{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14528,
            "title": "Orders With Maximum Quantity Above Average",
            "titleSlug": "orders-with-maximum-quantity-above-average_2188776",
            "content": "<pre><code>Table: OrdersDetails\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| order_id    | int  |\n| product_id  | int  |\n| quantity    | int  |\n+-------------+------+\n(order_id, product_id) is the primary key for this table.\nA single order is represented as multiple rows, one row for each product in the order.\nEach row of this table contains the quantity ordered of the product product_id in the order order_id.\n\n\nYou are running an ecommerce site that is looking for imbalanced orders. An imbalanced order is one whose maximum quantity is strictly greater than the average quantity of every order (including itself).\n\nThe average quantity of an order is calculated as (total quantity of all products in the order) / (number of different products in the order). The maximum quantity of an order is the highest quantity of any single product in the order.\n\nWrite an SQL query to find the order_id of all imbalanced orders.\n\nReturn the result table in any order.\n\nThe query result format is in the following example:\n\n\n\nOrdersDetails table:\n+----------+------------+----------+\n| order_id | product_id | quantity |\n+----------+------------+----------+\n| 1        | 1          | 12       |\n| 1        | 2          | 10       |\n| 1        | 3          | 15       |\n| 2        | 1          | 8        |\n| 2        | 4          | 4        |\n| 2        | 5          | 6        |\n| 3        | 3          | 5        |\n| 3        | 4          | 18       |\n| 4        | 5          | 2        |\n| 4        | 6          | 8        |\n| 5        | 7          | 9        |\n| 5        | 8          | 9        |\n| 3        | 9          | 20       |\n| 2        | 9          | 4        |\n+----------+------------+----------+\n\nResult table:\n+----------+\n| order_id |\n+----------+\n| 1        |\n| 3        |\n+----------+\n\nThe average quantity of each order is:\n- order_id=1: (12+10+15)/3 = 12.3333333\n- order_id=2: (8+4+6+4)/4 = 5.5\n- order_id=3: (5+18+20)/3 = 14.333333\n- order_id=4: (2+8)/2 = 5\n- order_id=5: (9+9)/2 = 9\n\nThe maximum quantity of each order is:\n- order_id=1: max(12, 10, 15) = 15\n- order_id=2: max(8, 4, 6, 4) = 8\n- order_id=3: max(5, 18, 20) = 20\n- order_id=4: max(2, 8) = 8\n- order_id=5: max(9, 9) = 9\n\nOrders 1 and 3 are imbalanced because they have a maximum quantity that exceeds the average quantity of every order.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "The `OrdersDetails` table stores information about customer orders in an e-commerce system. Each order can contain multiple products, and the table records the quantity of each product within each order. The task is to identify 'imbalanced' orders, which are defined as orders where the maximum quantity of any single product within the order is strictly greater than the average quantity across *all* orders (including the order itself). The average quantity for an order is calculated as the total quantity of all products in that order divided by the number of distinct products in that order. The goal is to return the `order_id` of all imbalanced orders.",
                "constraints": [],
                "testcases": [
                    {
                        "input": "OrdersDetails table:\n+----------+------------+----------+\n| order_id | product_id | quantity |\n+----------+------------+----------+\n| 1        | 1          | 12       |\n| 1        | 2          | 10       |\n| 1        | 3          | 15       |\n| 2        | 1          | 8        |\n| 2        | 4          | 4        |\n| 2        | 5          | 6        |\n| 3        | 3          | 5        |\n| 3        | 4          | 18       |\n| 4        | 5          | 2        |\n| 4        | 6          | 8        |\n| 5        | 7          | 9        |\n| 5        | 8          | 9        |\n| 3        | 9          | 20       |\n| 2        | 9          | 4        |\n+----------+------------+----------+",
                        "output": "+----------+\n| order_id |\n+----------+\n| 1        |\n| 3        |\n+----------+",
                        "explanation": "The average quantity of each order is:\n- order_id=1: (12+10+15)/3 = 12.3333333\n- order_id=2: (8+4+6+4)/4 = 5.5\n- order_id=3: (5+18+20)/3 = 14.333333\n- order_id=4: (2+8)/2 = 5\n- order_id=5: (9+9)/2 = 9\n\nThe maximum quantity of each order is:\n- order_id=1: max(12, 10, 15) = 15\n- order_id=2: max(8, 4, 6, 4) = 8\n- order_id=3: max(5, 18, 20) = 20\n- order_id=4: max(2, 8) = 8\n- order_id=5: max(9, 9) = 9\n\nOrders 1 and 3 are imbalanced because they have a maximum quantity that exceeds the average quantity of every order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}