{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15923,
            "title": "Page Faults",
            "titleSlug": "page-faults_2826682",
            "content": "<h4 id=\"in-computing-a-page-fault-is-an-exception-for-the-memory-management-unit-mmu-when-a-process-accesses-a-memory-page-without-proper-preparations\">In computing, a page fault is an exception for the memory management unit (MMU) when a process accesses a memory page without proper preparations.</h4>\n\n<p><Br></p>\n\n<h4 id=\"page-replacement-algorithm-is-needed-to-decide-which-page-needs-to-be-replaced-when-the-new-page-comes-in-whenever-a-new-page-is-referred-to-and-is-not-present-in-memory-the-page-fault-occurs-and-the-operating-system-replaces-one-of-the-existing-pages-with-a-newly-needed-page\">Page replacement algorithm is needed to decide which page needs to be replaced when the new page comes in. Whenever a new page is referred to and is not present in memory, the page fault occurs, and the Operating System replaces one of the existing pages with a newly needed page.</h4>\n\n<p><Br></p>\n\n<h4 id=\"you-have-given-a-sequence-of-pages-in-an-array-pages-of-length-n-and-memory-capacity-c-you-have-to-find-the-number-of-page-faults-using-the-least-recently-used-lru-algorithm-initially-memory-doesnt-contain-any-pages\">You have given a sequence of pages in an array \u2018Pages\u2019 of length <strong><em>\u2018N\u2019</em></strong> and memory capacity <strong><em>\u2018C\u2019</em></strong>. You have to find the number of page faults using the Least Recently Used (LRU) Algorithm. Initially, memory doesn&#39;t contain any pages.</h4>\n\n<p><Br></p>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>&#39;N&#39; = 7, &#39;C&#39; = 4, pages = [1, 2, 1, 4, 2, 3, 5].\n\nFor the first four pages, memory allocated with four pages, {1, 2, 1, 4}, page fault = 3.\n\nFor fifth, page number 2 is required, which is already present, page fault = 3.\n\nThen, page number 3 is required, replaces LRU 2, page fault = 4.\n\nThen, page number 5 is required, replaces LRU 1, page fault = 5.\n\nThe total page fault is 5.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format-</h5>\n\n<pre><code>The first line contains two space-separated integers, \u2018N\u2019 and \u2018C\u2019.\n\nThe next line contains the array \u2018Pages\u2019 of the length \u2018N\u2019, denoting the page sequences.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format-</h5>\n\n<pre><code>The only line contains a single integer denoting the total number of page faults.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input-1</h5>\n\n<pre><code>4 3\n1 3 2 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output-1</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>Memory allocated with three pages, {1, 3, 2}. \n\nHence total page faults = 3.\n\nThen, Page number &#39;1&#39; is required, which is already present. Hence total page faults = 3 + 0 = 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input-2</h5>\n\n<pre><code>9 4\n5 6 1 3 2 4 1 6 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output-2</h5>\n\n<pre><code>8\n</code></pre>\n\n<h5 id=\"constraints\">Constraints -:</h5>\n\n<pre><code>1 &lt;= \u2018N\u2019 &lt;= 10^5\n0 &lt;= \u2018C\u2019 &lt;=  10^5\n1 &lt;= Pages[i] &lt;= \u2018N\u2019, for 1 &lt;= i &lt;= \u2018N\u2019\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sequence of page requests represented by the array `Pages` of length `N` and a memory capacity `C`, determine the number of page faults that occur using the Least Recently Used (LRU) page replacement algorithm. The memory is initially empty.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "0 <= C <= 10^5",
                    "1 <= Pages[i] <= N, for 1 <= i <= N"
                ],
                "testcases": [
                    {
                        "input": "C = 3, Pages = [1, 3, 2, 1]",
                        "output": "3",
                        "explanation": "Initially, the memory is empty. Pages 1, 3, and 2 are added, resulting in 3 page faults. When page 1 is requested again, it is already in memory, so no page fault occurs. Total page faults = 3."
                    },
                    {
                        "input": "C = 4, Pages = [5, 6, 1, 3, 2, 4, 1, 6, 5]",
                        "output": "8",
                        "explanation": "With a capacity of 4:\n- 5, fault=1, memory=[5]\n- 6, fault=2, memory=[5,6]\n- 1, fault=3, memory=[5,6,1]\n- 3, fault=4, memory=[5,6,1,3]\n- 2, fault=5, memory=[6,1,3,2] (5 replaced)\n- 4, fault=6, memory=[1,3,2,4] (6 replaced)\n- 1, no fault, memory=[1,3,2,4]\n- 6, fault=7, memory=[3,2,4,6] (1 replaced)\n- 5, fault=8, memory=[2,4,6,5] (3 replaced)\nTotal page faults = 8"
                    },
                    {
                        "input": "C = 4, Pages = [1, 2, 1, 4, 2, 3, 5]",
                        "output": "5",
                        "explanation": "The sequence of page faults is as follows:\n- 1, fault=1, memory=[1]\n- 2, fault=2, memory=[1, 2]\n- 1, no fault, memory=[1, 2]\n- 4, fault=3, memory=[1, 2, 4]\n- 2, no fault, memory=[1, 2, 4]\n- 3, fault=4, memory=[1, 4, 2, 3] (evicts 1 which was least recently used before 3 requested)\n- 5, fault=5, memory=[4, 2, 3, 5] (evicts 1 which was least recently used before 5 requested)\nTotal page faults = 5"
                    },
                    {
                        "input": "C = 1, Pages = [7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2]",
                        "output": "7",
                        "explanation": "Since C = 1, every new page will cause a fault. Only repetitions cause no fault. The distinct pages are [7,0,1,2,3,4]. Hence, we have 7 faults in total."
                    },
                    {
                        "input": "C = 2, Pages = [7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2]",
                        "output": "9",
                        "explanation": "LRU replacement is as follows:\n7 -> [7] Fault = 1\n0 -> [7,0] Fault = 2\n1 -> [0,1] Fault = 3\n2 -> [1,2] Fault = 4\n0 -> [2,0] Fault = 5\n3 -> [0,3] Fault = 6\n0 -> [0,3] no fault\n4 -> [3,4] Fault = 7\n2 -> [4,2] Fault = 8\n3 -> [2,3] Fault = 9\n0 -> [3,0] Fault = 10\n3 -> [3,0] no fault\n2 -> [0,2] Fault = 11 (C incorrect)"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Which page is Least Recently Used in the set of Pages?</p>",
            "<p>Try to use the sliding window technique.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}