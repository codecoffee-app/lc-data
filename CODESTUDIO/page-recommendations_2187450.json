{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14520,
            "title": "Page Recommendations",
            "titleSlug": "page-recommendations_2187450",
            "content": "<pre><code>Table: Friendship\n\n+---------------+---------+\n| Column Name   | Type    |\n+---------------+---------+\n| user1_id      | int     |\n| user2_id      | int     |\n+---------------+---------+\n(user1_id, user2_id) is the primary key for this table.\nEach row of this table indicates that there is a friendship relation between user1_id and user2_id.\n\n\nTable: Likes\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| user_id     | int     |\n| page_id     | int     |\n+-------------+---------+\n(user_id, page_id) is the primary key for this table.\nEach row of this table indicates that user_id likes page_id.\n\n\nWrite an SQL query to recommend pages to the user with user_id = 1 using the pages that your friends liked. It should not recommend pages you already liked.\n\nReturn result table in any order without duplicates.\n\nThe query result format is in the following example:\n\nFriendship table:\n+----------+----------+\n| user1_id | user2_id |\n+----------+----------+\n| 1        | 2        |\n| 1        | 3        |\n| 1        | 4        |\n| 2        | 3        |\n| 2        | 4        |\n| 2        | 5        |\n| 6        | 1        |\n+----------+----------+\n\nLikes table:\n+---------+---------+\n| user_id | page_id |\n+---------+---------+\n| 1       | 88      |\n| 2       | 23      |\n| 3       | 24      |\n| 4       | 56      |\n| 5       | 11      |\n| 6       | 33      |\n| 2       | 77      |\n| 3       | 77      |\n| 6       | 88      |\n+---------+---------+\n\nResult table:\n+------------------+\n| recommended_page |\n+------------------+\n| 23               |\n| 24               |\n| 56               |\n| 33               |\n| 77               |\n+------------------+\nUser one is friend with users 2, 3, 4 and 6.\nSuggested pages are 23 from user 2, 24 from user 3, 56 from user 3 and 33 from user 6.\nPage 77 is suggested from both user 2 and user 3.\nPage 88 is not suggested because user 1 already likes it.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two tables, `Friendship` and `Likes`, write an SQL query to recommend pages to the user with `user_id = 1` using the pages that their friends liked. The query should not recommend pages that user 1 already likes.\n\nThe `Friendship` table indicates friendship relations between users, where `(user1_id, user2_id)` is the primary key.  Each row signifies a friendship between `user1_id` and `user2_id`.\n\nThe `Likes` table indicates which users like which pages, where `(user_id, page_id)` is the primary key.  Each row signifies that `user_id` likes `page_id`.\n\nReturn the result table with a single column named `recommended_page` containing the page IDs recommended to user 1. The results should be in any order without duplicates.",
                "constraints": [],
                "testcases": [
                    {
                        "input": "Friendship table:\n+----------+----------+\n| user1_id | user2_id |\n+----------+----------+\n| 1        | 2        |\n| 1        | 3        |\n| 1        | 4        |\n| 2        | 3        |\n| 2        | 4        |\n| 2        | 5        |\n| 6        | 1        |\n+----------+----------+\n\nLikes table:\n+---------+---------+\n| user_id | page_id |\n+---------+---------+\n| 1       | 88      |\n| 2       | 23      |\n| 3       | 24      |\n| 4       | 56      |\n| 5       | 11      |\n| 6       | 33      |\n| 2       | 77      |\n| 3       | 77      |\n| 6       | 88      |\n+---------+---------+",
                        "output": "+------------------+\n| recommended_page |\n+------------------+\n| 23               |\n| 24               |\n| 56               |\n| 33               |\n| 77               |\n+------------------+",
                        "explanation": "User 1 is friends with users 2, 3, 4, and 6.  User 2 likes pages 23 and 77. User 3 likes pages 24 and 77. User 4 likes page 56. User 6 likes pages 33 and 88.  Therefore, the suggested pages are 23, 24, 56, 33, and 77. Page 88 is not suggested because user 1 already likes it."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}