{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12420,
            "title": "Paint House",
            "titleSlug": "paint-house_1460385",
            "content": "<h4 id=\"you-have-been-given-n-houses-each-house-can-be-painted-with-any-of-three-colours-green-red-and-yellow-you-are-also-given-a-cost-matrix-of-n-3-dimension-which-represents-the-cost-of-painting-an-i-th-house-0-th-based-indexing-with-j-th-colour-the-colour-code-is-as-follows-green-0-red-1-and-yellow-2-now-you-are-supposed-to-find-the-minimum-cost-of-painting-all-houses-such-that-no-adjacent-houses-are-painted-with-the-same-colour\">You have been given \u2018N\u2019 houses, each house can be painted with any of three colours: green, red and yellow. You are also given a \u201ccost\u201d matrix of \u2018N\u2019 * 3 dimension which represents the cost of painting an i-th house (0-th based indexing) with j-th colour. The colour code is as follows: green - 0, red - 1 and yellow - 2. Now, you are supposed to find the minimum cost of painting all houses such that no adjacent houses are painted with the same colour.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019 denoting the number of test cases. Then each test case follows.\n\nThe first input line of each test case contains an integer \u2018N\u2019 denoting the number of houses.\n\nEach of the next \u2018N\u2019 lines contains 3 space-separated integers denoting the cost of painting the i-th house with the green,red and yellow color respectively.  \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the minimum cost of painting all houses such that no adjacent houses are painted with the same colour.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10000\n0 &lt;= cost[i][j] &lt;= 100\n\nWhere cost[i][j] represents the cost of painting the i-th house with j-th colour.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2\n2 3 2\n1 4 1\n1\n1 2 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>3\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation Of Sample Output 1  :</h5>\n\n<pre><code>For the first test case, in the optimal case, we can paint house 0 (0-th based indexing) with colour 0 (0-th based indexing) and house 1 with colour 2. The cost will be 2 + 1 = 3.\n\nFor the second test case, we can choose the colour 0 to paint the house. And the cost will be 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3\n14 2 11\n11 14 5\n14 3 10\n2\n1 2 3\n1 4 6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>10\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation Of Sample Output 2 :</h5>\n\n<pre><code>For the first test case, in the optimal case, we can paint house 0 (0-th based indexing) with colour 1 (0-th based indexing), house 1 with colour 2  and house 2 with colour 1. The cost will be 2 + 5 + 3 = 10.\n\nFor the second test case, the minimum cost will be 3.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 12,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'N' houses, each of which can be painted one of three colors: green, red, or yellow. A cost matrix of size 'N' x 3 is provided, where cost[i][j] represents the cost of painting the i-th house with the j-th color (green - 0, red - 1, yellow - 2). Determine the minimum cost to paint all houses such that no two adjacent houses have the same color.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10000",
                    "0 <= cost[i][j] <= 100"
                ],
                "testcases": [
                    {
                        "input": "cost=[[2, 3, 2], [1, 4, 1]]",
                        "output": "3",
                        "explanation": "Painting house 0 with green (cost 2) and house 1 with yellow (cost 1) gives a total cost of 3, which is the minimum possible cost."
                    },
                    {
                        "input": "cost=[[1, 2, 3]]",
                        "output": "1",
                        "explanation": "Painting the only house with green (cost 1) is the minimum cost."
                    },
                    {
                        "input": "cost=[[14, 2, 11], [11, 14, 5], [14, 3, 10]]",
                        "output": "10",
                        "explanation": "Painting house 0 with red (cost 2), house 1 with yellow (cost 5), and house 2 with red (cost 3) gives a total cost of 10, which is the minimum."
                    },
                    {
                        "input": "cost=[[1, 2, 3], [1, 4, 6]]",
                        "output": "3",
                        "explanation": "Painting house 0 with green (cost 1) and house 1 with red (cost 2) is optimal or painting house 0 with red(cost 2) and house 1 with green(cost 1) gives a total cost of 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of breaking the problem into sub-problems?</p>",
            "<p>Can you think of using memoization?</p>",
            "<p>Can you think of doing it iteratively?</p>",
            "<p>Can you think of optimization of space?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}