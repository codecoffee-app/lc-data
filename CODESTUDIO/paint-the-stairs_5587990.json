{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22211,
            "title": "Paint the Stairs",
            "titleSlug": "paint-the-stairs_5587990",
            "content": "<h4 id=\"you-are-given-an-integer-n-denoting-the-number-of-stairs-you-have-two-colors-red-and-green-count-the-number-of-ways-to-paint-the-stairs-with-colors-red-and-green-such-that-no-two-adjacent-stairs-have-red-colors-painted-on-both-of-them\">You are given an integer \u2018N\u2019 denoting the number of stairs. You have two colors: red and green. Count the number of ways to paint the stairs with colors red and green such that no two adjacent stairs have red colors painted on both of them.</h4>\n\n<h4 id=\"return-the-number-of-ways-modulo-10-9-7\">Return the number of ways modulo 10^9 + 7.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018N\u2019 = 2 \n\nOutput: 3\n\nThe number of ways to paint the stairs is: (red, green), (green, red), (green, green), and (red, red). But two adjacent stairs cannot have the color red painted on both of them, (red, red) is not allowed. \nHence, there are 3 ways to paint 2 stairs.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain the integer &#39;T&#39;, denoting the number of test cases.\n\nThe first line of each test case contains an integer number \u2018N\u2019\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, you don\u2019t need to print anything just return the count of the number of ways to paint \u2018N\u2019 stairs.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first case:\nWe can paint 1 stair with either green or red color. Hence the total number of ways to paint the colors is 2.\n\nFor the second case:\nAll valid ways to paint the stairs are (red, green, red), (green, red, green), (red, green, green), (green. green, red), and (green, green, green).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n10\n15\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>144 \n1597\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -10,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an integer 'N' representing the number of stairs.  You can paint each stair either red or green. Calculate the number of ways to paint the stairs such that no two adjacent stairs are both painted red.  Return the count modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n1",
                        "output": "2",
                        "explanation": "For N=1, we can paint the stair either red or green.  So there are 2 ways."
                    },
                    {
                        "input": "1\n3",
                        "output": "5",
                        "explanation": "For N=3, the valid ways are (red, green, red), (green, red, green), (red, green, green), (green, green, red), and (green, green, green).  So there are 5 ways."
                    },
                    {
                        "input": "1\n10",
                        "output": "144",
                        "explanation": null
                    },
                    {
                        "input": "1\n15",
                        "output": "1597",
                        "explanation": null
                    },
                    {
                        "input": "2\n1\n3",
                        "output": "2\n5",
                        "explanation": "For N=1, we can paint the stair either green or red. Hence the total number of ways to paint the colors is 2.\n\nFor N=3: All valid ways to paint the stairs are (red, green, red), (green, red, green), (red, green, green), (green. green, red), and (green, green, green)."
                    },
                    {
                        "input": "2\n10\n15",
                        "output": "144\n1597",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a way to explore all the ways recursively.</p>",
            "<p>Can you think of a way to optimize the previous approach using memoization?</p>",
            "<p>Can you think of a way to count the number of ways for \u2018N\u2019 stairs using the number of ways to paint \u2018N\u2019 -1 stairs.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}