{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9743,
            "title": "Painter's Partition Problem",
            "titleSlug": "painter-s-partition-problem_1089557",
            "content": "<h4 id=\"given-an-array-list-of-length-n-where-the-array-list-represents-the-boards-and-each-element-of-the-given-array-list-represents-the-length-of-each-board-some-k-numbers-of-painters-are-available-to-paint-these-boards-consider-that-each-unit-of-a-board-takes-1-unit-of-time-to-paint\">Given an array/list of length <em><strong>\u2018n\u2019</strong></em>, where the array/list represents the boards and each element of the given array/list represents the length of each board. Some <em><strong>\u2018k\u2019</strong></em> numbers of painters are available to paint these boards. Consider that each unit of a board takes 1 unit of time to paint.</h4>\n\n<p><br></p>\n\n<h4 id=\"you-are-supposed-to-return-the-area-of-the-minimum-time-to-get-this-job-done-of-painting-all-the-n-boards-under-a-constraint-that-any-painter-will-only-paint-the-continuous-sections-of-boards\">You are supposed to return the area of the minimum time to get this job done of painting all the \u2018n\u2019 boards under a constraint that any painter will only paint the continuous sections of boards.</h4>\n\n<p><br></p>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Input: arr = [2, 1, 5, 6, 2, 3], k = 2\n\nOutput: 11\n\nExplanation:\nFirst painter can paint boards 1 to 3 in 8 units of time and the second painter can paint boards 4-6 in 11 units of time. Thus both painters will paint all the boards in max(8,11) = 11 units of time. It can be shown that all the boards can&#39;t be painted in less than 11 units of time.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains two integers \u2018n\u2019 and \u2018k\u2019 denoting the number of elements in the array/list and number of painters available.\n\nThe second line contains \u2018n\u2019 single space-separated integers denoting the elements of the array/list.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Return the minimum time required to get the job done.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>4 2\n10 20 30 40\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>60\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>In this test case, we can divide the first 3 boards for one painter and the last board for the second painter.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2 2\n48 90\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>90\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to do this in O(n*log(n)).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= n &lt;= 10^5\n1 &lt;= k &lt;= n\n1 &lt;= arr[i] &lt;= 10^9\n\nTime Limit: 1 sec.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 608,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of board lengths, `arr`, with `n` boards, and `k` painters, determine the minimum time required to paint all boards. Each painter can only paint continuous sections of boards, and each unit of a board takes 1 unit of time to paint.  The goal is to minimize the maximum time any single painter spends. You are supposed to return the minimum time to get this job done of painting all the \u2018n\u2019 boards under a constraint that any painter will only paint the continuous sections of boards.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= k <= n",
                    "1 <= arr[i] <= 10^9",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "4 2\n10 20 30 40",
                        "output": "60",
                        "explanation": "One possible optimal solution is to assign the first three boards (10, 20, 30) to one painter, requiring 60 units of time. The second painter is assigned the last board (40), requiring 40 units of time. The maximum time taken by any painter is max(60, 40) = 60."
                    },
                    {
                        "input": "2 2\n48 90",
                        "output": "90",
                        "explanation": "Since the number of painters is equal to the number of boards, each painter paints one board. The maximum time is max(48, 90) = 90."
                    },
                    {
                        "input": "6 2\n2 1 5 6 2 3",
                        "output": "11",
                        "explanation": "First painter can paint boards 1 to 3 in 8 units of time and the second painter can paint boards 4-6 in 11 units of time. Thus both painters will paint all the boards in max(8,11) = 11 units of time. It can be shown that all the boards can't be painted in less than 11 units of time."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Divide the boards into k of fewer partitions such that the maximum sum of the elements in a partition, overall partitions is minimized.</p>",
            "<p>We can precompute the array sums in order to reduce the repetitive calculations.</p>",
            "<p>Can you think of using the binary search?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity = O(K * (log(arrSum)))\r\n    Space Complexity = O(1)\r\n\r\n    Where N is the number of elements in the given array/list and arrSum is the sum of the array elements.\r\n*/\r\n\r\n#include <limits.h>\r\n\r\n//    Return the maximum element from the array.\r\nint findMax(vector<int> &boards, int n)\r\n{\r\n\tint max = INT_MIN;\r\n\r\n\tfor (int i = 0; i < n; i++)\r\n\t{\r\n\t\tif (boards[i] > max)\r\n\t\t{\r\n\t\t\tmax = boards[i];\r\n\t\t}\r\n\t}\r\n\r\n\treturn max;\r\n}\r\n\r\n//    Return the sum of the elements in the array.\r\nint findSum(vector<int> &boards, int n)\r\n{\r\n\tint total = 0;\r\n\tfor (int i = 0; i < n; i++)\r\n\t{\r\n\t\ttotal += boards[i];\r\n\t}\r\n\treturn total;\r\n}\r\n\r\n//    Find minimum required painters for given maxlen which is the maximum length a painter can paint.\r\nint countPainters(vector<int> &boards, int maxLen)\r\n{\r\n\tint n = boards.size(), totalSum = 0, painters = 1;\r\n\r\n\tfor (int i = 0; i < n; i++)\r\n\t{\r\n\t\ttotalSum += boards[i];\r\n\r\n\t\tif (totalSum > maxLen)\r\n\t\t{\r\n\t\t\ttotalSum = boards[i];\r\n\t\t\tpainters++;\r\n\t\t}\r\n\t}\r\n\r\n\treturn painters;\r\n}\r\n\r\nint findLargestMinDistance(vector<int> &boards, int k)\r\n{\r\n\tint n = boards.size();\r\n\r\n\tint low = findMax(boards, n);\r\n\tint high = findSum(boards, n);\r\n\r\n\twhile (low < high)\r\n\t{\r\n\t\tint mid = low + (high - low) / 2;\r\n\t\tint reqPainters = countPainters(boards, mid);\r\n\r\n\t\t//    Find better optimum in lower half here mid is included because we may not get anything better.\r\n\t\tif (reqPainters <= k)\r\n\t\t{\r\n\t\t\thigh = mid;\r\n\t\t}\r\n\t\t\r\n\t\t//    Find better optimum in upper half here mid is excluded because it gives required Painters > k, which is invalid.\r\n\t\telse\r\n\t\t{\r\n\t\t\tlow = mid + 1;\r\n\t\t}\r\n\t}\r\n\r\n\treturn low;\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity = O(K*(log(arrSum)))\r\n    Space Complexity = O(1)\r\n\r\n    Where N is the number of elements in the given array/list and arrSum is the sum of the array elements.\r\n'''\r\n\r\n\r\n#    Return the maximum element from the array.\r\ndef findMax(boards, n):\r\n    max = -1e9\r\n\r\n    for i in range(n):\r\n        if (boards[i] > max):\r\n            max = boards[i];\r\n\r\n    return max;\r\n\r\n\r\n#    Return the sum of the elements in the array.\r\ndef findSum(boards, n):\r\n    total = 0\r\n    for i in range(n):\r\n        total += boards[i]\r\n    return total\r\n\r\n#    Find minimum required painters for given maxlen which is the maximum length a painter can paint.\r\ndef countPainters(boards, maxLen):\r\n    n = len(boards)\r\n    totalSum = 0\r\n    painters = 1\r\n\r\n    for i in range(n):\r\n        totalSum += boards[i]\r\n\r\n        if (totalSum > maxLen):\r\n            totalSum = boards[i]\r\n            painters += 1\r\n\r\n    return painters\r\n\r\ndef findLargestMinDistance(boards, k):\r\n    n = len(boards)\r\n\r\n    low = findMax(boards, n)\r\n    high = findSum(boards, n)\r\n\r\n    while (low < high):\r\n        mid = low + int((high - low) / 2)\r\n        reqPainters = countPainters(boards, mid)\r\n\r\n        #    Find better optimum in lower half here mid is included because we may not get anything better.\r\n        if (reqPainters <= k):\r\n            high = mid\r\n        #    Find better optimum in upper half here mid is excluded because it gives required Painters > k, which is invalid.\r\n        else:\r\n            low = mid + 1\r\n    return low\r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity = O(K * (log(arrSum)))\r\n    Space Complexity = O(1)\r\n\r\n    Where N is the number of elements in the given array/list and arrSum is the sum of the array elements.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution \r\n{\r\n    \r\n    //    Return the maximum element from the array.\r\n    private static int findMax(ArrayList<Integer> boards, int n) \r\n    {\r\n        int max = Integer.MIN_VALUE;\r\n\r\n        for (int i = 0; i < n; i++) \r\n        {\r\n            if (boards.get(i) > max) \r\n            {\r\n                max = boards.get(i);\r\n            }\r\n        }\r\n\r\n        return max;\r\n    }\r\n\r\n    //    Return the sum of the elements in the array.\r\n    private static int findSum(ArrayList<Integer> boards, int n) \r\n    {\r\n        int total = 0;\r\n        for (int i = 0; i < n; i++) \r\n        {\r\n            total += boards.get(i);\r\n        }\r\n        return total;\r\n    }\r\n\r\n    //    Find minimum required painters for given maxlen which is the maximum length a painter can paint.\r\n    private static int countPainters(ArrayList<Integer> boards, int maxLen) \r\n    {\r\n        int n = boards.size(), totalSum = 0, painters = 1;\r\n\r\n        for (int i = 0; i < n; i++) \r\n        {\r\n            totalSum += boards.get(i);\r\n\r\n            if (totalSum > maxLen) \r\n            {\r\n                totalSum = boards.get(i);\r\n                painters++;\r\n            }\r\n        }\r\n\r\n        return painters;\r\n    }\r\n\r\n    public static int findLargestMinDistance(ArrayList<Integer> boards, int k) \r\n    {\r\n        int n = boards.size();\r\n\r\n        int low = findMax(boards, n);\r\n        int high = findSum(boards, n);\r\n\r\n        while (low < high) \r\n        {\r\n            int mid = low + (high - low) / 2;\r\n            int reqPainters = countPainters(boards, mid);\r\n\r\n            //    Find better optimum in lower half here mid is included because we may not get anything better.\r\n            if (reqPainters <= k) \r\n            {\r\n                high = mid;\r\n            }\r\n            \r\n            //    Find better optimum in upper half here mid is excluded because it gives required Painters > k, which is invalid.\r\n            else \r\n            {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        return low;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}