{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15432,
            "title": "Painting Job",
            "titleSlug": "painting-job_2460769",
            "content": "<h4 id=\"the-ninjas-of-ninjaland-are-very-excited-about-their-annual-ninja-festival-which-is-about-to-happen-so-this-time-they-decided-to-paint-their-house-such-that-exactly-the-m-neighbourhood-group-could-be-formed\">The Ninjas of Ninjaland are very excited about their annual Ninja Festival, which is about to happen. So this time, they decided to paint their house such that exactly the \u2018M\u2019 neighbourhood group could be formed.</h4>\n\n<h4 id=\"a-neighbourhood-group-is-a-continuous-group-of-houses-having-the-same-color-for-example-if-the-colors-of-house-is-2-2-2-3-1-1-1-there-exist-3-neighbourhood-groups-2-2-2-3-1-1-1\">A Neighbourhood group is a continuous group of houses having the same color. For example, if the colors of house is [2,2,2,3,1,1,1]. There exist 3 neighbourhood groups [2,2,2], [3], [1,1,1].</h4>\n\n<h4 id=\"you-are-given-a-2-d-array-cost-where-cost-i-j-1-denotes-the-cost-for-painting-the-i-th-house-with-j-th-color-there-are-n-houses-and-k-colours-available-for-painting-these-houses\">You are given a 2-D array \u2018COST\u2019 where COST[i][j-1] denotes the cost for painting the i\u2019th house with j\u2019th color. There are \u2018N\u2019 houses and \u2018K\u2019 colours available for painting these houses.</h4>\n\n<h4 id=\"you-are-given-a-houses-array-where-houses-i-denotes-the-current-colour-of-i-th-house-if-houses-i-0-it-means-that-the-house-is-not-coloured-so-ninja-has-to-colour-it-otherwise-the-already-painted-houses-should-not-be-painted-again-your-task-is-to-find-the-minimum-cost-for-colouring-these-houses-so-that-exactly-m-neighbourhood-groups-can-be-formed-if-it-is-impossible-to-paint-them-in-this-manner-print-1\">You are given a \u2018HOUSES\u2019 array where \u2018HOUSES[i]\u2019 denotes the current colour of i\u2019th house. If HOUSES[i] = 0, it means that the house is not coloured, so Ninja has to colour it. Otherwise, the already painted houses should not be painted again. Your task is to find the minimum cost for colouring these houses so that exactly \u2018M\u2019 neighbourhood groups can be formed if it is impossible to paint them in this manner, print -1.</h4>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>If the given \u2018HOUSES\u2019 array is [0,2,1,2,0] and \u2018COST\u2019 array is [ [1,7],[1,1],[1,1],[1,1],  [5,1] ] and \u2018M\u2019 = 3. \n The minimum cost will be 7+1 =8. We will colour the first house with colour 2 and the last house with colour 1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains three integers, &#39;N\u2019,\u2019K\u2019, and \u2018M\u2019, denoting the number of houses, the number of colours available, and the number of neighbourhood groups, respectively.\n\nThe next line of each test case has \u2018HOUSES\u2019 array.\n\nThe next \u2018N\u2019 lines of each test case have \u2018K\u2019 values corresponding to the values of \u2018COST[i]\u2019 for all \u2018K\u2019 colours. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return an integer corresponding to the minimum cost possible or -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 100.\n1 &lt;= K &lt;= 10\n1 &lt;= M &lt;= N\n0 &lt;= COST[i][j] &lt;= 1000\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5 2 3\n0 2 1 2 0\n1 7\n1 1 \n1 1\n1 1\n5 1\n3 2 2\n0 1 0\n4 5\n5 4\n6 1 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>8\n5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case,\nWe will color the first house with color 2 and the last house with color 2 .So the total cost will be  7+1. Houses array will look like [2,2,1,2,2], which has exactly 3 neighborhood groups. Hence the answer is 8. \n\nFor the second test case:\nWe will color the first house with color 1 and the last house with color 2. So the total cost will be  4+1. Houses array will look like [1,1,2], which has exactly 2 neighborhood groups. Hence the answer is 5.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4 2 3\n2 1 2 0 \n6 2 \n9 1 \n5 4 \n4 4\n5 1 1\n1 0 1 1 0 \n2 \n8 \n5   \n1 \n5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4\n13\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -2,
            "dislikes": "NA",
            "rephrased": {
                "body": "The Ninjas of Ninjaland are preparing for their annual Ninja Festival and want to paint their houses such that there are exactly 'M' neighborhood groups. A neighborhood group is a continuous sequence of houses with the same color. You are given a 'COST' array where COST[i][j-1] is the cost of painting the i-th house with color j. There are 'N' houses and 'K' colors available.  You are also given a 'HOUSES' array, where HOUSES[i] represents the color of the i-th house. If HOUSES[i] is 0, the house needs to be painted; otherwise, it's already painted and shouldn't be repainted.  Find the minimum cost to paint the uncolored houses such that there are exactly 'M' neighborhood groups. If it's impossible to achieve 'M' groups, return -1.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 100",
                    "1 <= K <= 10",
                    "1 <= M <= N",
                    "0 <= COST[i][j] <= 1000",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 2 3\n0 2 1 2 0\n1 7\n1 1\n1 1\n1 1\n5 1",
                        "output": "8",
                        "explanation": "We color the first house with color 2 (cost 7) and the last house with color 1 (cost 1). The houses array becomes [2, 2, 1, 2, 1], which has exactly 3 neighborhood groups: [2,2], [1], [2,1]. The total cost is 7 + 1 = 8."
                    },
                    {
                        "input": "3 2 2\n0 1 0\n4 5\n5 4\n6 1",
                        "output": "5",
                        "explanation": "We color the first house with color 1 (cost 4) and the last house with color 2 (cost 1). The houses array becomes [1, 1, 2], which has exactly 2 neighborhood groups: [1,1], [2]. The total cost is 4 + 1 = 5."
                    },
                    {
                        "input": "4 2 3\n2 1 2 0\n6 2\n9 1\n5 4\n4 4",
                        "output": "4",
                        "explanation": "We color the last house with color 2 (cost 4). The houses array becomes [2, 1, 2, 2], which has exactly 3 neighborhood groups: [2], [1], [2,2]. The total cost is 4."
                    },
                    {
                        "input": "5 1 1\n1 0 1 1 0\n2\n8\n5\n1\n5",
                        "output": "13",
                        "explanation": "We color the second house with color 1(cost 8) and the last house with color 1 (cost 5). The houses array becomes [1, 1, 1, 1, 1], which has exactly 1 neighborhood groups: [1,1,1,1,1]. The total cost is 8 + 5 = 13."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find the answer by trying out all \u2018K\u2019 colors for each unpainted building.</p>",
            "<p>Try to store the values for each state of recursion and use them to reduce time complexity.</p>",
            "<p>Think of an iterative solution.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}