{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8904,
            "title": "Pair sum in a BST",
            "titleSlug": "pair-sum-in-a-bst_920507",
            "content": "<h4 id=\"you-are-given-a-binary-search-tree-and-an-integer-s-your-task-is-to-find-all-the-pairs-of-nodes-in-the-bst-which-sum-to-the-value-s-if-no-such-pair-exists-then-print-1-1\">You are given a binary search tree and an integer \u2018S\u2019. Your task is to find all the pairs of nodes in the BST which sum to the value \u2018S\u2019.  If no such pair exists, then print -1 - 1.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You can use extra space of the order of not more than O(log n).\n\nA binary search tree (BST) is a binary tree data structure which has the following properties.\n\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. All the elements of the Binary Search Tree are unique.\n2. You can\u2019t use the same node value/element of BST twice.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, which denotes the number of test cases. Then each test case  follows. \n\nThe first line of every test case contains elements of the Binary Search Tree in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nThe second line of every test case contains a single integer \u2018K\u2019 which denotes the target value.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>The input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=https://files.codingninjas.in/first-5644-9893.png /></p>\n\n<pre><code>20 10 35 5 15 30 42 -1 13 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>Output contains each pair of integers (pair elements separated by space). The order of different pairs, to be printed, should be in sorted order.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don\u2019t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5    \n1 &lt;= N &lt;= 10 ^ 3\n0 &lt;= DATA &lt;= 10 ^ 9\n1 &lt;= S &lt;= 10 ^ 9 \n\nWhere \u2018DATA\u2019 denotes the value of each node in the given tree.\n\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2 \n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n13\n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n19\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>5 8 6 7\n-1 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>For the first test case, the nodes with values 8, 5 and 6, 7 give a sum equal to the given target 13. Therefore, the output will be 5, 8 and 6, 7 in separate lines.\n\nFor the second test case, there are no two elements in the given BST such that their sum is equal to the given target \u2018K\u2019 = 19. Therefore output will be nothing.\n</code></pre>\n\n<p><img src=https://files.codingninjas.in/image-5979-9894.jpg /></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n20 16 -1 12 -1 8 -1 4 -1 -1 -1 \n12\n15 10 20 8 12 16 25 -1 -1 -1 -1 -1 -1 -1 -1\n57\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4 8\n-1 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary search tree (BST) and an integer 'S', find all pairs of nodes in the BST whose sum equals 'S'.  If no such pair exists, return -1 -1.  You can use extra space of O(log n). All elements in the BST are unique, and each node value can be used only once in a pair.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10^3",
                    "0 <= DATA <= 10^9",
                    "1 <= S <= 10^9",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n13",
                        "output": "5 8\n6 7",
                        "explanation": "The pairs (5, 8) and (6, 7) in the given BST sum to the target value 13."
                    },
                    {
                        "input": "8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n19",
                        "output": "-1 -1",
                        "explanation": "There are no two elements in the given BST that sum to the target value 19."
                    },
                    {
                        "input": "2\n20 16 -1 12 -1 8 -1 4 -1 -1 -1\n12",
                        "output": "4 8",
                        "explanation": "The pair (4, 8) in the given BST sums to the target value 12."
                    },
                    {
                        "input": "15 10 20 8 12 16 25 -1 -1 -1 -1 -1 -1 -1 -1\n57",
                        "output": "-1 -1",
                        "explanation": "There are no two elements in the given BST that sum to the target value 57."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of storing the inorder traversal in an array then try to find the nodes having sum equal to \u2018S\u2019.</p>",
            "<p>Try to think of using a stack as a data structure to store the nodes of bst.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}