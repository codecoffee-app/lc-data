{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8893,
            "title": "Pair Sum in BST.",
            "titleSlug": "pair-sum-in-bst_920493",
            "content": "<h4 id=\"you-are-given-a-binary-search-tree-bst-and-a-target-value-k-your-task-is-to-return-true-if-there-exist-two-nodes-in-the-given-bst-such-that-the-sum-of-their-values-is-equal-to-the-given-target-k-else-return-false\">You are given a Binary Search Tree (BST) and a target value <strong><em>\u2018K\u2019</em></strong>. Your task is to return true if there exist two nodes in the given BST such that the sum of their values is equal to the given target \u2018K\u2019, else return false.</h4>\n\n<p><Br></p>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-which-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure which has the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<p><Br></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. All the elements of the Binary Search Tree are unique.\n\n2. You can\u2019t use the same node value/element of BST twice.\n</code></pre>\n\n<p><Br></p>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>tree: 8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n&#39;K&#39; = 13,\n</code></pre>\n\n<p><img src=https://files.codingninjas.in/image-5979-9894.jpg /></p>\n\n<pre><code>The nodes with values 8 and 5 as shown in the above figure gives sum equal to the given target 13. \n\nTherefore, the output will be \u201ctrue\u201d i.e it is possible to find a pair in the given BST having sum equal to \u2018K\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains elements of the Binary Search Tree in the level order form. The input consists of values of nodes separated by a single space in a single line. In case, a node is null, we take -1 in its place.\n\nThe second line contains a single integer \u2018K\u2019 which denotes the target value.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>The input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=https://files.codingninjas.in/first-5644-9893.png /></p>\n\n<pre><code>20 10 35 5 15 30 42 -1 -1 13 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line contains &quot;true&quot; if there exist two nodes in the given BST such that the sum of their values is equal to the given target \u2018K\u2019, otherwise &quot;false&quot;.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don\u2019t need to print the output, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n19\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>false\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>There are no two elements in the given BST such that their sum equals the given target \u2018K\u2019 = 19.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>20 16 -1 12 -1 8 -1 4 -1 -1 -1 \n12\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>true\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= &#39;N&#39; &lt;= 10^5\n1 &lt;= DATA &lt;= 10^6\n1 &lt;= &#39;K&#39; &lt;= 10^6\n\nWhere \u2018DATA\u2019 denotes the value of each node in the given tree and \u2018N\u2019 denotes the number of nodes in BST.\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 20,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) represented by its root node and a target value 'K', determine if there exist two distinct nodes within the BST whose values sum up to 'K'. Return 'true' if such a pair exists; otherwise, return 'false'.",
                "constraints": [
                    "1 <= 'N' <= 10^5, where 'N' is the number of nodes in the BST.",
                    "1 <= DATA <= 10^6, where 'DATA' denotes the value of each node in the given tree.",
                    "1 <= 'K' <= 10^6, where 'K' is the target sum."
                ],
                "testcases": [
                    {
                        "input": "root = [8, 5, 10, 2, 6, -1, -1, -1, -1, -1, 7, -1, -1], k = 13",
                        "output": "true",
                        "explanation": "Nodes with values 8 and 5 exist in the tree, and their sum is 13, which matches the target value K."
                    },
                    {
                        "input": "root = [8, 5, 10, 2, 6, -1, -1, -1, -1, -1, 7, -1, -1], k = 19",
                        "output": "false",
                        "explanation": "There are no two distinct nodes in the tree whose values sum to 19."
                    },
                    {
                        "input": "root = [20, 16, -1, 12, -1, 8, -1, 4, -1, -1 -1], k = 12",
                        "output": "true",
                        "explanation": "Nodes with values 8 and 4 exist in the tree, and their sum is 12, which matches the target value K."
                    },
                    {
                        "input": "root = [5, 3, 6, 2, 4, -1, 7], k = 9",
                        "output": "true",
                        "explanation": "Nodes with values 3 and 6 exist in the tree, and their sum is 9, which matches the target value K."
                    },
                    {
                        "input": "root = [5, 3, 6, 2, 4, -1, 7], k = 1",
                        "output": "false",
                        "explanation": "No pair of nodes sums to 1. The minimum sum possible is 2 + 3 = 5."
                    },
                    {
                        "input": "root = [1, -1, 2, -1, -1, -1, 3], k = 5",
                        "output": "true",
                        "explanation": "Nodes with values 2 and 3 exist, and 2 + 3 = 5."
                    },
                    {
                        "input": "root = [10, 5, 15, 2, 7, 12, 20], k = 27",
                        "output": "true",
                        "explanation": "Nodes with values 7 and 20 exist in the tree, and their sum is 27, which matches the target value K."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a solution where you will look for the difference of the given value, \u2018K\u2019 and the current node\u2019s value in the given BST.</p>",
            "<p>Think of a solution to store the inorder traversal of the tree in a Data Structure.</p>",
            "<p>Try optimizing the previous solution by storing the value of nodes in a set.</p>",
            "<p>Think of a solution with a two-pointer technique in BST.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}