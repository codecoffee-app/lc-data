{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10191,
            "title": "Pair Sum",
            "titleSlug": "pair-sum_1171154",
            "content": "<h4 id=\"you-are-given-an-array-list-arr-consisting-of-n-distinct-integers-arranged-in-ascending-order-you-are-also-given-an-integer-target-your-task-is-to-count-all-the-distinct-pairs-in-arr-such-that-their-sum-is-equal-to-target\">You are given an array/list \u2018ARR\u2019 consisting of \u2018N\u2019 distinct integers arranged in ascending order. You are also given an integer \u2018TARGET\u2019. Your task is to count all the distinct pairs in \u2018ARR\u2019 such that their sum is equal to \u2018TARGET\u2019.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. Pair (x,y) and Pair(y,x) are considered as the same pair. \n\n2. If there exists no such pair with sum equals to &#39;TARGET&#39;, then return -1.\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Let \u2018ARR\u2019 = [1 2 3] and \u2018TARGET\u2019 = 4. Then, there exists only one pair in \u2018ARR\u2019 with a sum of 4 which is (1, 3). (1, 3) and (3, 1) are counted as only one pair.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases. \n\nThe first line of each test case contains two single space-separated integers \u2018N\u2019 and \u2018TARGET\u2019 representing the number of elements in the array/list \u2018ARR\u2019 and the required pair-sum respectively.\n\nThe next line of each test case contains \u2018N\u2019 single space-separated integers denoting the elements of  \u2018ARR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the numbers of pairs in  \u2018ARR\u2019 whose sum is equal to \u2018TARGET\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 100\n2 &lt;= \u2018N\u2019 &lt;= 5000\n1 &lt;= \u2018ARR[i]\u2019, \u2018TARGET\u2019 &lt;= 10^5\n\nWhere ARR[i]\u2019 represents the elements of array/list \u2018ARR\u2019. \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5 6\n1 2 3 4 5\n6 7\n1 2 3 4 5 6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n3\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>In test case 1, there exist only 2 pairs whose sum is equal to \u2018TARGET\u2019 i.e (1, 5) and (2, 4).\n\nIn test case 2, there are 3 pairs whose sum is equal to \u2018TARGET\u2019 which are  (1, 6), (2, 5), and (3, 4).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4 10\n1 3 5 6\n5 12\n1 3 6 9 11\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n 2\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h4>\n\n<pre><code>In test case 1, there is not a pair whose sum is equal to \u2018TARGET\u2019. So we return -1.\n\nIn test case 2, there are 2 pairs whose sum is equal to \u2018TARGET\u2019, (1, 11) and (3, 9) respectively.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 114,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array 'ARR' of 'N' distinct integers and an integer 'TARGET', find the number of distinct pairs in 'ARR' whose sum equals 'TARGET'. Pairs (x, y) and (y, x) are considered the same. If no such pair exists, return -1.",
                "constraints": [
                    "1 <= T <= 100",
                    "2 <= N <= 5000",
                    "1 <= ARR[i], TARGET <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 6\n1 2 3 4 5",
                        "output": "2",
                        "explanation": "The pairs (1, 5) and (2, 4) sum to 6.  Therefore, the count is 2."
                    },
                    {
                        "input": "6 7\n1 2 3 4 5 6",
                        "output": "3",
                        "explanation": "The pairs (1, 6), (2, 5), and (3, 4) sum to 7. Therefore, the count is 3."
                    },
                    {
                        "input": "4 10\n1 3 5 6",
                        "output": "-1",
                        "explanation": "No pairs in the array sum to 10."
                    },
                    {
                        "input": "5 12\n1 3 6 9 11",
                        "output": "2",
                        "explanation": "The pairs (1, 11) and (3, 9) sum to 12. Therefore, the count is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to traverse through every pair possible.</p>",
            "<p>Can you solve it in O(N) time by using two pointers?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time complexity: O(N)\n    Space complexity: O(1) \n\n    Where 'N' represents the number of elements in the array/list 'ARR'.\n*/\n\nint pairSum(vector<int> &arr, int n, int target) {\n    // Variable to store the number of required pairs.\n    int countPair = 0;\n\n    int start = 0;\n    int end = n - 1;\n\n    // Start comparing the elements from both the ends.\n    while (start < end) {\n        // If sum of a pair results in target, then increment the value of required pairs.\n        if (arr[start] + arr[end] == target) {\n            countPair++;\n            // Reduce both the ends from respective sides.\n            start++;\n            end--;\n        }\n        // If pair sum if smaller then increase the left border for larger elements.\n        else if (arr[start] + arr[end] < target) {\n            start++;\n        } \n        // If pair sum if larger then decrease the right border for smaller elements.\n        else {\n            end--;\n        }\n    }\n    // If no pairs are found, then return -1.\n    if (countPair == 0) {\n        return -1;\n    } \n    // Return the number of required pairs.\n    return countPair;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n\tTime complexity: O(N)\n\tSpace complexity: O(1) \n\n\tWhere 'N' represents the number of elements in the array/list 'ARR'.\n*/\n\npublic class Solution {\n\tpublic static int pairSum(int[] arr, int n, int target) {\n\t\t// Variable to store the number of required pairs.\n\t\tint countPair = 0;\n\n\t\tint start = 0;\n\t\tint end = n - 1;\n\n\t\t// Start comparing the elements from both the ends.\n\t\twhile (start < end) {\n\t\t\t// If sum of a pair results in target, then increment the value of required pairs.\n\t\t\tif (arr[start] + arr[end] == target) {\n\t\t\t\tcountPair++;\n\t\t\t\t// Reduce both the ends from respective sides.\n\t\t\t\tstart++;\n\t\t\t\tend--;\n\t\t\t} \n\t\t\t// If pair sum if smaller then increase the left border for larger elements.\n\t\t\telse if (arr[start] + arr[end] < target) {\n\t\t\t\tstart++;\n\t\t\t}\n\t\t\t// If pair sum if larger then decrease the right border for smaller elements. \n\t\t\telse {\n\t\t\t\tend--;\n\t\t\t}\n\t\t}\n\t\t// If no pairs are found, then return -1.\n\t\tif (countPair == 0) {\n\t\t\treturn -1;\n\t\t}\n\t\t// Return the number of required pairs.\n\t\treturn countPair;\n\t}\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\n    Time complexity: O(N)\n    Space complexity: O(1) \n\n    Where 'N' represents the number of elements in the array/list 'ARR'.\n\"\"\"\n\ndef pairSum(arr, n, target): \n    # Variable to store the number of required pairs.\n    countPair = 0\n\n    start = 0\n    end = n - 1\n\n    # Start comparing the elements from both the ends.\n    while (start < end): \n        # If sum of a pair results in target, then increment the value of required pairs.\n        if (arr[start] + arr[end] == target):\n            countPair += 1\n            # Reduce both the ends from respective sides.\n            start += 1\n            end -= 1\n        \n        # If pair sum if smaller then increase the left border for larger elements.\n        elif (arr[start] + arr[end] < target): \n            start += 1\n         \n        # If pair sum if larger then decrease the right border for smaller elements.\n        else:\n            end -= 1\n        \n    # If no pairs are found, then return -1.\n    if (countPair == 0):\n        return -1\n     \n    # Return the number of required pairs.\n    return countPair",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}