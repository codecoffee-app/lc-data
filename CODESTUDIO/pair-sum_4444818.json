{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 19183,
            "title": "Pair Sum",
            "titleSlug": "pair-sum_4444818",
            "content": "<h4 id=\"you-are-given-a-binary-search-tree-consisting-of-n-nodes-each-node-has-a-weight-associated-with-it-ninja-recently-learned-about-tree-algorithms-and-the-teacher-wants-him-to-know-whether-a-pair-of-nodes-exists-whose-sum-of-values-is-exactly-equal-to-k\">You are given a binary search tree consisting of \u2018N\u2019 nodes. Each node has a weight associated with it. Ninja recently learned about tree algorithms and the teacher wants him to know whether a pair of nodes exists whose sum of values is exactly equal to \u2018K\u2019.</h4>\n\n<h4 id=\"output-true-if-such-a-pair-exists\">Output true if such a pair exists.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains a single integer &#39;T&#39;, representing the number of test cases.\n\nThe first line of each test case contains two integers \u2018N\u2019 and \u2018K\u2019, representing the number of nodes in the tree and the sum value.\n\nThe third line of each test case will contain the values of the nodes of the tree in the level order form ( -1 for &#39;NULL&#39; node) Refer to the example for further clarification.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Consider the binary tree:-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-jpg-15944.png\" alt=\"\"></p>\n\n<pre><code>The input of the tree depicted in the image above will be like : \n5\n3 6\n2 4 -1 7\n-1 -1 -1 -1 -1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\nThe value of the root node is 5.\n\nLevel 2 :\nLeft child of 1 = 2\nValue of left child of 1 = 3\nRight child of 1 = 3\nValue of right child of 1 = 6\n\nLevel 3 :\nLeft child of 2 = 4\nValue of left child of 2 = 2\nRight child of 2 = 5\nValue of Right child of 2 = 4\nLeft child of 3 = null(-1)\nRight child of 3 = 6\nValue of right child of 3 = 7\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = null(-1)\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, output a boolean value denoting if such a pair exist.\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n\nThe weights are pair-wise distinct in the tree.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1\u2009&lt;= N &lt;= 10^4\n-10^4 &lt;= value of node[i] &lt;= 10^4\nValue of node[i] is never equal to -1\nIt is guaranteed that the given input is a binary tree.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5 3\n5 0 -1 -1 1 -1 3 2 -1 -1 -1 \n5 -6\n-4 -1 -3 -1 2 -2 4 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>true\ntrue\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For test case 1 we have, \n\nThe input tree:  \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/2-16199.jpg\" alt=\"\"></p>\n\n<pre><code>The pair of values {0, 3} have sum 3.\n\nSo, we output 1(true).\n\nFor test case 2 we have,\n\nThe input tree : \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/3-16201.jpg\" alt=\"\">    </p>\n\n<pre><code>The pair of values {-4, -2} have sum -6.\n\nSo, we output 1(true).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4 8\n4 -2 -1 -3 3 -1 -1 -1 -1 \n3 4\n5 0 -1 -4 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary search tree with 'N' nodes, where each node has a distinct weight. Determine whether there exists a pair of nodes in the tree whose sum of values is exactly equal to a given target value 'K'.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^4",
                    "-10^4 <= value of node[i] <= 10^4",
                    "Value of node[i] is never equal to -1",
                    "It is guaranteed that the given input is a binary tree.",
                    "The weights are pair-wise distinct in the tree.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 3\n5 0 -1 -1 1 -1 3 2 -1 -1 -1",
                        "output": "true",
                        "explanation": "In the given tree, the nodes with values 0 and 3 sum up to 3."
                    },
                    {
                        "input": "5 -6\n-4 -1 -3 -1 2 -2 4 -1 -1 -1 -1",
                        "output": "true",
                        "explanation": "In the given tree, the nodes with values -4 and -2 sum up to -6."
                    },
                    {
                        "input": "4 8\n4 -2 -1 -3 3 -1 -1 -1 -1",
                        "output": "true",
                        "explanation": "In the given tree, the nodes with values 3 and 5 sum up to 8."
                    },
                    {
                        "input": "3 4\n5 0 -1 -4 -1 -1 -1",
                        "output": "false",
                        "explanation": "No pair of nodes in the given tree sums up to 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For faster value lookup, you can store the value in some data structures like map/set.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}