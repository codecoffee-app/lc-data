{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7553,
            "title": "Pair Sum",
            "titleSlug": "pair-sum_697295",
            "content": "<h4 id=\"you-are-given-an-integer-array-arr-of-size-n-and-an-integer-s-your-task-is-to-return-the-list-of-all-pairs-of-elements-such-that-each-sum-of-elements-of-each-pair-equals-s\">You are given an integer array &#39;ARR&#39; of size &#39;N&#39; and an integer &#39;S&#39;. Your task is to return the list of all pairs of elements such that each sum of elements of each pair equals &#39;S&#39;.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Each pair should be sorted i.e the first value should be less than or equals to the second value. \n\nReturn the list of pairs sorted in non-decreasing order of their first value. In case if two pairs have the same first value, the pair with a smaller second value should come first.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains two space-separated integers &#39;N&#39; and &#39;S&#39;, denoting the size of the input array and the value of &#39;S&#39;.\n\nThe second and last line of input contains &#39;N&#39; space-separated integers, denoting the elements of the input array: ARR[i] where 0 &lt;= i &lt; &#39;N&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print &#39;C&#39; lines, each line contains one pair i.e two space-separated integers, where &#39;C&#39; denotes the count of pairs having sum equals to given value &#39;S&#39;.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^3\n-10^5 &lt;= ARR[i] &lt;= 10^5\n-2 * 10^5 &lt;= S &lt;= 2 * 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>5 5\n1 2 3 4 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 4\n2 3\n</code></pre>\n\n<h5 id=\"explaination-for-sample-output-1\">Explaination For Sample Output 1:</h5>\n\n<pre><code>Here, 1 + 4 = 5\n      2 + 3 = 5\nHence the output will be, (1,4) , (2,3).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5 0\n2 -3 3 3 -2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-3 3\n-3 3\n-2 2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3097,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array 'ARR' of size 'N' and an integer 'S', find all pairs of elements in 'ARR' whose sum equals 'S'. Each pair (a, b) should be sorted such that a <= b. Return a list of these pairs, sorted in non-decreasing order of their first value. If two pairs have the same first value, prioritize the pair with the smaller second value.",
                "constraints": [
                    "1 <= N <= 10^3",
                    "-10^5 <= ARR[i] <= 10^5",
                    "-2 * 10^5 <= S <= 2 * 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 5\n1 2 3 4 5",
                        "output": "1 4\n2 3",
                        "explanation": "The pairs (1, 4) and (2, 3) sum to 5. The pairs are sorted according to the problem description."
                    },
                    {
                        "input": "5 0\n2 -3 3 3 -2",
                        "output": "-3 3\n-3 3\n-2 2",
                        "explanation": "The pairs (-3, 3), (-3, 3), and (-2, 2) sum to 0. The pairs are sorted according to the problem description."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>As N is relatively small, an O(N^2) solution may pass.</p>",
            "<p>Work with frequencies of numbers.</p>",
            "<p>Try to find your answer in a sorted version of the array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n\n    Time Complexity: O(N ^ 2)\n    Space Complexity: O(N)\n\n    where 'N' is the total number of elements\n    i.e the size of the input array.\n\n*/\n\n#include<map>\n\nvector<vector<int>> pairSum(vector<int> &arr, int s){\n   // Used to store result.\n    vector<vector<int>> ans;\n\n    map<int, int> mp;\n    vector<int> keyArray;\n    for (int num : arr) {\n\n        if(!mp.count(num)){\n            keyArray.push_back(num);\n        }\n\n        // Store frequency of each unique element.\n        mp[num] += 1;\n    }\n    \n    sort(keyArray.begin(), keyArray.end());\n    \n    for (int key : keyArray) {\n\n        if (key + key == s) {\n\n            int freq = mp[key];\n\n            // Total number of such pairs will be 'FREQ*(FREQ-1)/2'.\n            for (int j = 0; j < freq * (freq - 1) / 2; j++) {\n\n                ans.push_back({ key, key });\n            }\n        }\n    }\n\n    // Maintain two pointers.\n    int low = 0;\n    int high = keyArray.size() - 1;\n\n    while (low < high) {\n\n        int currSum = keyArray[low] + keyArray[high];\n\n        // If the current sum is equal to the target sum.\n        if (currSum == s) {\n\n            int freq = mp[keyArray[low]] * mp[keyArray[high]];\n\n            // Total number of such pairs will be 'FREQ'.\n            for (int j = 0; j < freq; j++) {\n\n                ans.push_back({ keyArray[low], keyArray[high] });\n            }\n\n            low++;\n            high--;\n\n        }\n        else if (currSum < s) {\n\n            low++;\n        }\n        else {\n\n            high--;\n        }\n\n    }\n\n    for (int i = 0; i < ans.size(); i++) {\n\n        int a = ans[i][0], b = ans[i][1];\n        ans[i][0] = min(a, b);\n        ans[i][1] = max(a, b);\n    }\n    \n    sort(ans.begin(), ans.end());\n    return ans;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n\n    Time Complexity: O(N ^ 2)\n    Space Complexity: O(N)\n\n    where 'N' is the total number of elements\n    i.e the size of the input array.\n\n*/\n\nimport java.util.*;\n\npublic class Solution {\n    public static List < int[] > pairSum(int arr[], int s) {\n\n        // Used to store result.\n        List < int[] > ans = new ArrayList();\n\n        HashMap < Integer, Integer > map = new HashMap < > ();\n\n        for (int num: arr) {\n\n            // Store frequency of each unique element.\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n\n        // Store unique elements.\n        Integer[] keyArray = map.keySet().toArray(new Integer[map.keySet().size()]);\n\n        Arrays.sort(keyArray);\n\n        for (int key: keyArray) {\n\n            if (key + key == s) {\n\n                int freq = map.get(key);\n\n                // Total number of such pairs will be 'FREQ*(FREQ-1)/2'.\n                for (int j = 0; j < freq * (freq - 1) / 2; j++) {\n\n                    ans.add(new int[] {\n                        key,\n                        key\n                    });\n                }\n            }\n        }\n\n        // Maintain two pointers.\n        int low = 0;\n        int high = keyArray.length - 1;\n\n        while (low < high) {\n\n            int currSum = keyArray[low] + keyArray[high];\n\n            // If the current sum is equal to the target sum.\n            if (currSum == s) {\n\n                int freq = map.get(keyArray[low]) * map.get(keyArray[high]);\n\n                // Total number of such pairs will be 'FREQ'.\n                for (int j = 0; j < freq; j++) {\n\n                    ans.add(new int[] {\n                        keyArray[low], keyArray[high]\n                    });\n                }\n\n                low++;\n                high--;\n\n            } else if (currSum < s) {\n\n                low++;\n            } else {\n\n                high--;\n            }\n\n        }\n\n        for (int i = 0; i < ans.size(); i++) {\n            int a = ans.get(i)[0], b = ans.get(i)[1];\n            int res[] = new int[2];\n            res[0] = Math.min(a, b);\n            res[1] = Math.max(a, b);\n            ans.set(i, res);\n        }\n\n        Collections.sort(ans, new Comparator < int[] > () {\n            public int compare(int[] a, int[] b) {\n                if (a[0] == b[0]) {\n                    return a[1] - b[1];\n                }\n                return a[0] - b[0];\n            }\n        });\n\n\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\r\n  Time Complexity : O(N^2)\r\n  Space Complexity : O(N)\r\n\r\n  where \u2018N\u2019 is the total number of elements.\r\n\"\"\"\r\n\r\n\r\nfrom collections import OrderedDict\r\n\r\ndef pairSum(arr, s):\r\n\r\n    n = len(arr)\r\n\r\n    # Map to store frequency of elements.\r\n    map = OrderedDict()\r\n\r\n    # This will store the result.\r\n    ans = []\r\n\r\n    for num in arr:\r\n\r\n        map[num] = map.get(num,0) + 1\r\n\r\n    # Store unique elements.\r\n    keyArray = sorted(map.keys())\r\n\r\n\r\n    for key in keyArray:\r\n\r\n        if (key+key) == s:\r\n\r\n            freq = map[key]\r\n\r\n            # Total number of such pairs will be 'FREQ*(FREQ-1)/2'.\r\n            for j in range ((freq*(freq-1))//2):\r\n                \r\n                ans.append([key,key])\r\n\r\n\r\n    # Maintain two pointers.\r\n    low = 0\r\n    high =len(keyArray) - 1\r\n\r\n    while low < high:\r\n\r\n        currSum = keyArray[low] + keyArray[high]\r\n\r\n        # If the current sum is equal to the target sum.\r\n        if currSum == s:\r\n            \r\n            freq = map[keyArray[low]] * map[keyArray[high]]\r\n\r\n            for j in range(freq):\r\n\r\n                ans.append([keyArray[low],keyArray[high]])\r\n\r\n            low = low + 1\r\n            high = high - 1\r\n\r\n        elif currSum < s:\r\n\r\n            low = low + 1\r\n\r\n        else:\r\n            \r\n            high = high - 1\r\n\r\n        \r\n    # Sorting the 'ans' array element.\r\n    for i in range(len(ans)):\r\n        a = ans[i][0]\r\n        b = ans[i][1]\r\n        ans[i][0] = min(a, b)\r\n        ans[i][1] = max(a, b)\r\n        \r\n    # Finally sorting each pair in 'res'.\r\n    ans = sorted(ans, key=lambda x: x[0])\r\n\r\n    return ans\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}