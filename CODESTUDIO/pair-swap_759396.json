{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7697,
            "title": "Pair Swap",
            "titleSlug": "pair-swap_759396",
            "content": "<h4 id=\"you-are-given-a-singly-linked-list-of-integers\">You are given a singly linked list of integers.</h4>\n\n<h4 id=\"your-task-is-to-swap-every-two-adjacent-nodes-and-return-the-head-of-the-modified-linked-list\">Your task is to swap every two adjacent nodes, and return the head of the modified, linked list.</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>We have a linked list 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7 and so on. You are supposed to swap pairs of a linked list like swap (1,2), (3,4), (5,6), and so on.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. You may not modify the data in the list\u2019s nodes; only nodes themselves may be changed. Because imagine a case where a node contains many fields, so there will be too much unnecessary swap.\n\n2. If a pair of a node does not exist, then leave the node as it is.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The input contains the elements of the singly linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each input, print a single line containing the same number of integers as in the list, in swapped order.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>0 &lt;= N &lt;= 5 * 10 ^ 5\n-10 ^ 9 &lt;= DATA &lt;= 10 ^ 9 and DATA != -1\n\nWhere \u2018N\u2019 is the length of the linked list and &#39;DATA&#39; is data in each node.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>11 21 13 14 15 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>21 11 14 13 15 -1\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input1\">Explanation of the Sample Input1:</h5>\n\n<pre><code>Swap 11 with 21 then swap 13 with 14 and 15 has no pair so leave that node as it is.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>-13 14 -21 18 -20 30 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>14 -13 18 -21 30 -20 -1\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-2\">Explanation of the Sample Input 2:</h5>\n\n<pre><code>Swap -13 with 14 then swap -21 with 18 and then swap -20 to with 30.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 25,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list of integers, swap every two adjacent nodes. Return the head of the modified linked list. You are only allowed to modify the nodes themselves, not the data they contain. If a node does not have a pair, leave it as is.",
                "constraints": [
                    "0 <= N <= 5 * 10^5 (where N is the length of the linked list)",
                    "-10^9 <= DATA <= 10^9 and DATA != -1 (where DATA is the data in each node)",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "11 21 13 14 15 -1",
                        "output": "21 11 14 13 15 -1",
                        "explanation": "Swap 11 with 21, then swap 13 with 14. 15 has no pair, so it remains in its original position."
                    },
                    {
                        "input": "-13 14 -21 18 -20 30 -1",
                        "output": "14 -13 18 -21 30 -20 -1",
                        "explanation": "Swap -13 with 14, then swap -21 with 18, and finally swap -20 with 30."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>How can you change the next pointer of the first node and second node without changing their values such that they are swapped?</p>",
            "<p>Can you think about exploring the property of the link of a node?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}