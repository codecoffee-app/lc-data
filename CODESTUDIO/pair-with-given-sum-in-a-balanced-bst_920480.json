{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8891,
            "title": "Pair with Given Sum in a Balanced BST",
            "titleSlug": "pair-with-given-sum-in-a-balanced-bst_920480",
            "content": "<h4 id=\"you-are-given-the-root-of-a-balanced-binary-search-tree-and-an-integer-target-you-have-to-tell-if-there-exists-any-pair-of-nodes-such-that-the-sum-of-their-value-is-equal-to-the-target\">You are given the \u2018root\u2019 of a Balanced Binary Search Tree and an integer \u2018target,\u2019 you have to tell if there exists any pair of nodes such that the sum of their value is equal to the target.</h4>\n\n<h4 id=\"more-formally-check-if-there-exist-any-two-distinct-nodes-whose-sum-is-equal-to-target\">More formally check if there exist any two distinct nodes, whose sum is equal to \u2018target.\u2019</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>A binary search tree, also called an ordered or sorted binary tree, is a rooted binary tree whose internal nodes each store a key greater than all the keys in the node&#39;s left subtree and less than those in its right subtree.\n\nA balanced binary search tree is a tree in which each node has either 0 or 2 children.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>For Example, the root node is given as follows :\n\u2018ROOT\u2019 = 5 2 6 -1 -1 -1 -1 and \u2018target\u2019 = 8, The answer will be true since the sum of both leaf nodes is equal to 8.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer \u2018T\u2019, representing the number of test cases.\n\nThe first line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nThe second line of each test case contains a single integer \u2018target\u2019, which denotes the sum of that pair of nodes.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For every test case, print a single line that contains a single integer which denotes whether the pair exists or not.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t have to print anything. It has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= \u2018N\u2019 &lt;= 1000\n0 &lt;= data &lt;= 10 ^ 3\n0 &lt;= \u2018target\u2019 &lt;= 10 ^ 3\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5 2 6 -1 -1 -1 -1 \n8\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1 \n6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>For the first test case, The answer will be true since the sum of both leaf nodes, i.e. the roots left node(2) and the roots right node(6) is equal to 8.\n\nFor the second test case, The answer will be true, since the sum of the 4th node(1) and 7th node(5) is equal to 6.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 2 7 1 3 6 9 -1 -1 -1 -1 -1 -1 -1 -1\n10\n5 2 7 1 3 6 9 -1 -1 -1 -1 -1 -1 -1 -1 \n20\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a balanced binary search tree and a target integer, determine if there exist two distinct nodes in the tree whose values sum up to the target.",
                "constraints": [
                    "1 <= \u2018N\u2019 <= 1000 (where N is the number of nodes in the tree)",
                    "0 <= data <= 10 ^ 3 (where data is the value of a node)",
                    "0 <= \u2018target\u2019 <= 10 ^ 3"
                ],
                "testcases": [
                    {
                        "input": "root=[5, 2, 6, -1, -1, -1, -1], target=8",
                        "output": "1",
                        "explanation": "The sum of the nodes with values 2 and 6 is equal to the target 8, so the answer is 1."
                    },
                    {
                        "input": "root=[4, 2, 6, 1, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1], target=6",
                        "output": "1",
                        "explanation": "The sum of the nodes with values 1 and 5 is equal to the target 6, so the answer is 1."
                    },
                    {
                        "input": "root=[5, 2, 7, 1, 3, 6, 9, -1, -1, -1, -1, -1, -1, -1, -1], target=10",
                        "output": "1",
                        "explanation": "The sum of the nodes with values 1 and 9 is equal to the target 10, so the answer is 1."
                    },
                    {
                        "input": "root=[5, 2, 7, 1, 3, 6, 9, -1, -1, -1, -1, -1, -1, -1, -1], target=20",
                        "output": "0",
                        "explanation": "There are no two distinct nodes whose values sum to 20, so the answer is 0."
                    },
                    {
                        "input": "root=[10, 5, 15, 2, 7, 12, 17, -1, -1, -1, -1, -1, -1, -1, -1], target=14",
                        "output": "1",
                        "explanation": "The sum of the nodes with values 7 and 7 is equal to the target 14."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we check for each node?</p>",
            "<p>Can we use hash-map?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}