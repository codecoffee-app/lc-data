{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12124,
            "title": "Pairs Violating BST",
            "titleSlug": "pairs-violating-bst_1404414",
            "content": "<h4 id=\"you-are-given-a-binary-tree-and-you-need-to-find-the-number-of-pairs-violating-bst-property\">You are given a binary tree and you need to find the number of pairs violating BST property.</h4>\n\n<h4 id=\"bst-tree-has-the-following-properties\">BST tree has the following properties:-</h4>\n\n<pre><code>1. For every node, it is greater than or equal to its left child and less than or equal to its right child.\n2. Node is greater than equal to the maximum value of its left subtree and less than the minimum value of its right subtree.\n3. The maximum in the left sub-tree must be less than equal to the minimum in the right subtree.\n</code></pre>\n\n<h5 id=\"for-example-in-the-following-tree\">For example in the following tree:-</h5>\n\n<p><img src=\"https://files.codingninjas.in/image1-8921.png\" alt=\"\"></p>\n\n<pre><code>The numbers of pairs violating BST property are:-\n\n(1,5) : 1 should be greater than its left child value.\n\n(4,3) : 4 should be less than its right child value.\n\n(5,4),(5,3):  Maximum of left subtree of 1 is 5 greater \nthan 2 and 3 of its right subtree.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases. Then the test cases are as follows.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-input-format-2-8282.png\" alt=\"\"></p>\n\n<pre><code>For example, the input for the tree depicted in the above image would be :\n\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the number of pairs violating the BST property.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 10\n1 &lt;= Number of nodes in Tree &lt;= 5000\n1 &lt;= Value of nodes &lt;= 10 ^ 5\n\nWhere &#39;T&#39; is the number of test cases.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n8 4 3 2 -1 6 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>5\n</code></pre>\n\n<h5 id=\"sample-output-explanation\">Sample Output Explanation</h5>\n\n<pre><code> For the above input tree is:-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image3-8922.png\" alt=\"\"></p>\n\n<pre><code>Thus pairs violating BST property are:-\n(8,3) :- Greater than its right child.\n(8,6) :- Greater than node on its right side.\n(8,7) :- Greater than node on its right side.\n(3,6):- The value of 3 is not more than its left child.\n(4,3):- The value in the left subtree is greater than the \nvalue of the right subtree.\n\nThus the number of pairs is 5.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n35 44 26 -1 50 37 20 -1 -1 43 36 -1 -1 -1 -1 -1 -1 \n49 48 26 32 36 40 31 30 -1 25 40 -1 -1 -1 40 -1 -1 -1 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>24\n25\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -10,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a binary tree. Your task is to determine the number of pairs of nodes that violate the Binary Search Tree (BST) property. A binary tree adheres to the BST property if, for every node:\n\n1.  The node's value is greater than or equal to the value of its left child and less than or equal to the value of its right child.\n2.  The node's value is greater than or equal to the maximum value in its left subtree and less than or equal to the minimum value in its right subtree.\n3.  The maximum value in the left subtree is less than or equal to the minimum value in the right subtree.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= Number of nodes in Tree <= 5000",
                    "1 <= Value of nodes <= 10 ^ 5",
                    "Where 'T' is the number of test cases.",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "8 4 3 2 -1 6 7 -1 -1 -1 -1 -1 -1",
                        "output": "5",
                        "explanation": "The tree formed from the input is checked for BST violations:\n\n(8,3): 8 is greater than its right child.\n(8,6): 8 is greater than a node on its right side.\n(8,7): 8 is greater than a node on its right side.\n(3,6): 3 is less than its left child (6 is in the right subtree of node with value 4, which is node 3's right child.)\n(4,3): 4 has a node in its left subtree which is greater than the node in its right subtree."
                    },
                    {
                        "input": "35 44 26 -1 50 37 20 -1 -1 43 36 -1 -1 -1 -1 -1 -1",
                        "output": "24",
                        "explanation": null
                    },
                    {
                        "input": "49 48 26 32 36 40 31 30 -1 25 40 -1 -1 -1 40 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "25",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Do the inorder traversal of the given tree.</p>",
            "<p>Do the inorder traversal of the given tree and then the inversion count.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}