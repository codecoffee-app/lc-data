{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7985,
            "title": "Palindrom Linked List",
            "titleSlug": "palindrom-linked-list_799352",
            "content": "<h4 id=\"you-are-given-a-singly-linked-list-of-integers-your-task-is-to-return-true-if-the-given-singly-linked-list-is-a-palindrome-otherwise-returns-false\">You are given a singly Linked List of integers. Your task is to return true if the given singly linked list is a palindrome otherwise returns false.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>The given linked list is 1 -&gt; 2 -&gt; 3 -&gt; 2-&gt; 1-&gt; NULL.\n\nIt is a palindrome linked list because the given linked list has the same order of elements when traversed forwards and backward\u200b.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve the problem in O(N) time complexity and O(1) space complexity iteratively?\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases or queries to be processed. Then the test case follows.\n\nThe only line of each test case contains the elements of the singly linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print \u201ctrue\u201d or \u201cfalse\u201d in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n0 &lt;= L &lt;= 10^5\n1 &lt;= data &lt;= 10^9 and data != -1\n\nWhere L is the number of nodes in the Linked List.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1 2 3 4 5 6 -1\n1 2 1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>false\ntrue\n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for sample 1:</h5>\n\n<pre><code>For the first test case, it is not a palindrome because Linked List doesn&#39;t have the same order of elements when traversed forwards and backwards\u200b.\n\nFor the second test case, it is a palindrome linked list because a Linked List has the same order of elements when traversed forwards and backwards\u200b.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 -1\n1 10 45 10 1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>true\ntrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 173,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a singly Linked List of integers. Determine if the given singly linked list is a palindrome. Return `true` if it is, otherwise return `false`.\n\n**Follow Up:** Can you solve the problem in O(N) time complexity and O(1) space complexity iteratively?",
                "constraints": [
                    "1 <= T <= 10",
                    "0 <= L <= 10^5",
                    "1 <= data <= 10^9 and data != -1",
                    "Where L is the number of nodes in the Linked List.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 5 6 -1",
                        "output": "false",
                        "explanation": "The linked list 1 -> 2 -> 3 -> 4 -> 5 -> 6 is not a palindrome because it does not have the same sequence of elements when traversed forwards and backwards."
                    },
                    {
                        "input": "1 2 1 -1",
                        "output": "true",
                        "explanation": "The linked list 1 -> 2 -> 1 is a palindrome because it has the same sequence of elements when traversed forwards and backwards."
                    },
                    {
                        "input": "1 -1",
                        "output": "true",
                        "explanation": "A linked list containing only a single node is considered a palindrome."
                    },
                    {
                        "input": "1 10 45 10 1 -1",
                        "output": "true",
                        "explanation": "The linked list 1 -> 10 -> 45 -> 10 -> 1 is a palindrome because it has the same sequence of elements when traversed forwards and backwards."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a solution to store Linked List elements in a data structure that gives reverse order of the linked list.</p>",
            "<p>Think of a solution to create a clone of Linked List.</p>",
            "<p>Think of a solution to check palindrome using recursion.</p>",
            "<p>Think of a solution to reverse the second half of the Linked List.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Compexity: O(1)\r\n\r\n    Where N is the total nodes in Linked List.\r\n*/\r\n\r\nLinkedListNode<int> *reverse(LinkedListNode<int> *head) {\r\n\r\n    // Creating node for remembering previous node in Linked List.\r\n    LinkedListNode<int> *reverseHead = NULL;\r\n\r\n    // Creating temporory node.\r\n    LinkedListNode<int> *current = head;\r\n\r\n    while (current != NULL) {\r\n\r\n        LinkedListNode<int> *currentNext = current->next;\r\n        current->next = reverseHead;\r\n        reverseHead = current;\r\n        current = currentNext;\r\n\r\n    }\r\n\r\n    // Return reverse Linked List.\r\n    return reverseHead;\r\n\r\n}\r\n\r\nbool isPalindrome(LinkedListNode<int> *head) {\r\n\r\n    LinkedListNode<int> *slow = head;\r\n    LinkedListNode<int> *fast = head;\r\n    LinkedListNode<int> *prev = head;\r\n\r\n    // Find the middle node using TORTOISE-HARE-APPROACH.\r\n    while (fast != NULL && fast->next != NULL) {\r\n        prev = slow;\r\n        fast = fast->next->next;\r\n        slow = slow->next;\r\n    }\r\n\r\n    /*\r\n        Fast pointer would become NULL when there are even elements in the list and\r\n        not NULL for odd elements. We need to skip the middle node for odd case.\r\n    */\r\n    if (fast != NULL) {\r\n        slow = slow->next;\r\n    }\r\n\r\n    // When there is only one node in given Linked List.\r\n    if (slow == NULL) {\r\n        return true;\r\n    }\r\n\r\n    // Dividing Linked LIst in two part by pointing prev next to NULL.\r\n    prev->next = NULL;\r\n\r\n    // Now reverse the second half.\r\n    LinkedListNode<int> *reverseHead = reverse(slow);\r\n\r\n    // Iterate through both LinkedList and then compare it.\r\n    while (head != NULL) {\r\n\r\n        if (head->data != reverseHead->data) {\r\n            return false;\r\n        }\r\n        reverseHead = reverseHead->next;\r\n        head = head->next;\r\n\r\n    }\r\n\r\n    return true;\r\n\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N)\r\n    Space Compexity: O(1)\r\n\r\n    Where N is the total nodes in Linked List.\r\n'''\r\n\r\nfrom sys import stdin\r\n\r\nclass Node:\r\n    def __init__(self,data):\r\n        \r\n        self.data = data\r\n        self.next = None\r\n        \r\n# Reverse the LinkedList.\r\n\r\ndef reverse(head):\r\n    \r\n    current = head\r\n    \r\n    reverseHead = None\r\n    \r\n    while current is not None:\r\n        \r\n        currentNext = current.next\r\n        \r\n        current.next = reverseHead\r\n        \r\n        reverseHead = current\r\n        \r\n        current = currentNext\r\n        \r\n    return reverseHead\r\n        \r\n\r\n\r\ndef isPalindrome(head):\r\n    \r\n    slow = head\r\n    fast = head\r\n    prev= head\r\n    \r\n    # Find the middle node using TORTOISE-HARE-APPROACH.\r\n    \r\n    while (fast is not None and fast.next is not None):\r\n        \r\n        prev = slow\r\n        \r\n        fast = fast.next.next\r\n        \r\n        slow = slow.next\r\n        \r\n    '''\r\n        Fast pointer would become NULL when there are even elements in the list and\r\n        not NULL for odd elements. We need to skip the middle node for odd case.\r\n    '''\r\n\r\n    if fast is not None:\r\n        slow = slow.next\r\n    \r\n    # When there is only one node in given Linked List.\r\n    \r\n    if slow is None:\r\n        return True\r\n    \r\n    # Dividing Linked LIst in two part by pointing prev next to null.\r\n    prev.next = None\r\n    \r\n    # Now reverse the second half.\r\n    reverseHead = reverse(slow)\r\n    \r\n    # Iterate through both LinkedList and then compare it.\r\n    while head is not None:\r\n        \r\n        if head.data != reverseHead.data:\r\n            return False\r\n        \r\n        reverseHead = reverseHead.next\r\n        head = head.next\r\n        \r\n    return True\r\n\r\n\r\n        \r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\ndef takeinput():\r\n    \r\n    inputlist=[int(ele) for ele in input().split()]\r\n    \r\n    head=None\r\n    tail=None\r\n    \r\n    for currentData in inputlist:\r\n        \r\n        if currentData == -1:\r\n            break\r\n        \r\n        Newnode=Node(currentData)\r\n        \r\n        if head is None:\r\n            head=Newnode\r\n            tail=Newnode\r\n        else:\r\n            tail.next=Newnode\r\n            tail=Newnode\r\n            \r\n    return head\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#Main\r\nt = int(stdin.readline().rstrip())\r\n\r\nwhile t > 0:\r\n    \r\n    head = takeinput()\r\n    \r\n    if isPalindrome(head):\r\n        print('true')\r\n    else:\r\n        print('false')\r\n        \r\n    t -= 1\r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1)\r\n\r\n    Where N is the total Nodes in Linked List.\r\n*/\r\n\r\npublic class Solution {\r\n    public static boolean isPalindrome(LinkedListNode<Integer> head) {\r\n\r\n        LinkedListNode<Integer> slow = head;\r\n        LinkedListNode<Integer> fast = head;\r\n        LinkedListNode<Integer> prev = head;\r\n\r\n        // Find the middle node using TORTOISE-HARE-APPROACH.\r\n        while (fast != null && fast.next != null) {\r\n            prev = slow;\r\n            fast = fast.next.next;\r\n            slow = slow.next;\r\n        }\r\n\r\n        /*\r\n            Fast pointer would become NULL when there are even elements in the list and\r\n            not NULL for odd elements. We need to skip the middle node for odd case.\r\n        */\r\n\r\n        if (fast != null) {\r\n            slow = slow.next;\r\n        }\r\n\r\n        // When there is only one node in given Linked List.\r\n        if (slow == null) {\r\n\r\n            return true;\r\n        }\r\n\r\n        // Dividing Linked LIst in two part by pointing prev next to null.\r\n        prev.next = null;\r\n\r\n        // Now reverse the second half.\r\n        LinkedListNode<Integer> reverseHead = reverse(slow);\r\n\r\n        // Iterate through both LinkedList and then compare it.\r\n        while (head != null) {\r\n\r\n            if (!head.data.equals(reverseHead.data)) {\r\n                return false;\r\n            }\r\n            reverseHead = reverseHead.next;\r\n            head = head.next;\r\n\r\n        }\r\n        return true;\r\n\r\n    }\r\n\r\n    // Reverse the LinkedList.\r\n    private static LinkedListNode<Integer> reverse(LinkedListNode<Integer> head) {\r\n\r\n        LinkedListNode<Integer> current = head;\r\n        LinkedListNode<Integer> reverseHead = null;\r\n\r\n        while (current != null) {\r\n\r\n            LinkedListNode<Integer> currentNext = current.next;\r\n            current.next = reverseHead;\r\n            reverseHead = current;\r\n            current = currentNext;\r\n\r\n        }\r\n        return reverseHead;\r\n\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}