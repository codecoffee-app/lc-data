{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15019,
            "title": "Palindrome Count",
            "titleSlug": "palindrome-count_2409873",
            "content": "<h4 id=\"ninja-loves-to-play-with-strings-and-anagrams-a-palindrome-is-a-string-that-is-read-the-same-backward-or-forward-an-anagram-is-a-string-that-is-formed-by-rearranging-the-characters-of-the-string-ninjas-have-been-given-a-string-str-and-asked-to-find-the-number-of-substrings-whose-anagram-is-palindromic\">Ninja loves to play with strings and anagrams. A palindrome is a string that is read the same backward or forward. An anagram is a string that is formed by rearranging the characters of the string. Ninjas have been given a string \u2018STR\u2019, and asked to find the number of substrings whose anagram is palindromic.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains a single integer &#39;T&#39;, representing the number of test cases.\n\nThe first line of each test case contains a string \u2018STR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer representing the number of palindromes.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= |STR| &lt;= 5*10^3\nThe string \u2018STR\u2019 contains small letters only.   \n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\naa\nabc\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For first test case :\n\nSubstring are: {a, a, aa}\nSince, all the substrings are palindromes.\nSo, the result is 3.\n\nFor second test :\n\nSubstring are: {a, b, c, ab, bc, abc}\nSince, all {a, b, c} are palindromes. And no anagram of {ab, bc, abc} have palindromes. \nSo, the result is 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\naaa\naab\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>6\n5\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'STR' consisting of lowercase letters, determine the number of substrings whose anagram is a palindrome. A palindrome is a string that reads the same forwards and backward. An anagram is a rearrangement of the characters of a string.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |STR| <= 5*10^3",
                    "The string \u2018STR\u2019 contains small letters only."
                ],
                "testcases": [
                    {
                        "input": "str = \"aa\"",
                        "output": "3",
                        "explanation": "Substrings are: {a, a, aa}. All substrings are palindromes or have a palindromic anagram (in this case, they are already palindromes). So, the result is 3."
                    },
                    {
                        "input": "str = \"abc\"",
                        "output": "3",
                        "explanation": "Substrings are: {a, b, c, ab, bc, abc}.  {a, b, c} are palindromes. No anagram of {ab, bc, abc} is a palindrome. So, the result is 3."
                    },
                    {
                        "input": "str = \"aaa\"",
                        "output": "6",
                        "explanation": "Substrings are: {a, a, a, aa, aa, aaa}. All substrings are palindromes. So the result is 6."
                    },
                    {
                        "input": "str = \"aab\"",
                        "output": "5",
                        "explanation": "Substrings are: {a, a, b, aa, ab, aab}. Palindromic or anagrammatic palindromes: a, a, b, aa, ba from aab. Thus, the result is 5.  'ab' does not have a palindromic anagram, and therefore does not contribute to the count."
                    },
                    {
                        "input": "str = \"aabb\"",
                        "output": "10",
                        "explanation": "Substrings: {a, a, b, b, aa, ab, bb, aab, abb, aabb}. Palindromic anagrams: a, a, b, b, aa, bb, ba, ab, bbaa from aabb (bbaa and aabb have palindromic anagram). Thus, the result is 10."
                    },
                    {
                        "input": "str = \"cdcd\"",
                        "output": "10",
                        "explanation": "Substrings are: {c, d, c, d, cd, dc, cd, dcd, cdc, cdcd}. Their anagrams are: {c, d, c, d, cd, cd, cd, dcd, cdc, cdcd}. Palindromic angrams are {c,d,c,d, cd,cd, cd, dcd, cdc, cdcd}. Note that cd and dc are anagrams and can be arranged into 'cd'. Therefore the answer is 10"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try checking for palindromes on all the substrings.</p>",
            "<p>Try to use bitmask to find the count of all the characters.</p>",
            "<p>Try using some data structure to store the mask of the characters.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}