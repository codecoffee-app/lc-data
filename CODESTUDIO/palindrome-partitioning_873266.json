{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8390,
            "title": "Palindrome Partitioning",
            "titleSlug": "palindrome-partitioning_873266",
            "content": "<h4 id=\"you-are-given-a-string-str-of-length-n\">You are given a string <em><strong>&#39;str&#39;</strong></em> of length <em><strong>&#39;n&#39;</strong></em>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"find-the-minimum-number-of-partitions-in-the-string-so-that-no-partition-is-empty-and-every-partitioned-substring-is-a-palindrome\">Find the minimum number of partitions in the string so that no partition is empty and every partitioned substring is a palindrome.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Input: &#39;str&#39; = &quot;aaccb&quot;\n\nOutput: 2\n\nExplanation: We can make a valid partition like aa | cc | b. \n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains the string &#39;str&#39;, the string to be partitioned.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print the minimum number of cuts to be done so that each partitioned substring is a palindrome.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>aaccb\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>We can make a valid partition like aa | cc | b.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>ababa\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2 :</h5>\n\n<pre><code>The string is already a palindrome, so we need not make any partition.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-3\">Sample Input 3:</h5>\n\n<pre><code>aababa\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-3\">Sample Output 3:</h5>\n\n<pre><code>1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity :</h5>\n\n<pre><code>You can submit a solution of time complexity O(n ^ 3) but also try to write the solution having complexity O(n ^ 2).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 100\n\nTime limit: 1 second\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 76,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `str` of length `n`, determine the minimum number of cuts required to partition the string into substrings, such that each substring is a palindrome and no partition is empty. Implement the function `palindromePartitioning(string str)` to achieve this.",
                "constraints": [
                    "1 <= 'n' <= 100",
                    "Time limit: 1 second",
                    "You can submit a solution of time complexity O(n ^ 3) but also try to write the solution having complexity O(n ^ 2)."
                ],
                "testcases": [
                    {
                        "input": "str = \"aaccb\"",
                        "output": "2",
                        "explanation": "We can make a valid partition like aa | cc | b."
                    },
                    {
                        "input": "str = \"ababa\"",
                        "output": "0",
                        "explanation": "The string is already a palindrome, so we need not make any partition."
                    },
                    {
                        "input": "str = \"aababa\"",
                        "output": "1",
                        "explanation": "We can make a partition like a | bababa or aaba | ba"
                    },
                    {
                        "input": "str = \"aaaa\"",
                        "output": "0",
                        "explanation": "The entire string is a palindrome."
                    },
                    {
                        "input": "str = \"abcba\"",
                        "output": "0",
                        "explanation": "The entire string is a palindrome."
                    },
                    {
                        "input": "str = \"abbab\"",
                        "output": "1",
                        "explanation": "Possible partition is a | bbab.  Another possible partition is abba | b"
                    },
                    {
                        "input": "str = \"abaaba\"",
                        "output": "0",
                        "explanation": "The entire string is a palindrome."
                    },
                    {
                        "input": "str = \"racecar\"",
                        "output": "0",
                        "explanation": "The entire string is a palindrome."
                    },
                    {
                        "input": "str = \"madam\"",
                        "output": "0",
                        "explanation": "The entire string is a palindrome."
                    },
                    {
                        "input": "str = \"coding\"",
                        "output": "5",
                        "explanation": "No palindromic substrings exist other than single characters. Each character must be a separate partition: c|o|d|i|n|g"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find all possible ways to partition the string.</p>",
            "<p>Optimize the recursive solution by using extra space.</p>",
            "<p>Rather than calculating the cost for each length, can we do it in a more efficient way?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}