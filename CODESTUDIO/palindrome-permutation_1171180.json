{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10207,
            "title": "Palindrome Permutation",
            "titleSlug": "palindrome-permutation_1171180",
            "content": "<h4 id=\"you-are-given-a-string-s-check-if-there-exists-any-permutation-of-the-given-string-that-is-a-palindrome\">You are given a string &#39;S&#39;, check if there exists any permutation of the given string that is a palindrome.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1. A palindrome is a word or phrase that reads the same from forward and backward e.g. \u201caba\u201d, it reads the same from forward and backward.\n2. A permutation is a rearrangement of letters.\n3. The palindrome does not need to be limited to just dictionary words.\n</code></pre>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>Given string S : aab\nThe output should be &quot;True&quot; as &quot;aba&quot; (permutation of string S) is a palindrome. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains an integer &#39;T&#39; denoting the number of test cases.\n\nThe first and the only line of each test case contains one string &#39;S&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case print in a new line, \u201cTrue\u201d if any permutation of the string is a palindrome or \u201cFalse\u201d if none of the permutations of the given string are palindrome.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= Length of the given string &lt;= 10^5\nIt is guaranteed that all the characters in the strings are lower case english alphabets.\n\nTime Limit : 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\ncarrace\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>True\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>The output is True because \u201cracecar\u201d is a permutation of \u201ccarrace\u201d and it is a palindrome.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\nferel\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>False\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h5>\n\n<pre><code>Since no permutation of &quot;ferel&quot; is a palindrome hence the output is False.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S', determine if any permutation of the string can form a palindrome. A palindrome reads the same forwards and backward. A permutation is a rearrangement of letters.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= Length of the given string <= 10^5",
                    "All characters in the strings are lowercase English alphabets.",
                    "Time Limit : 1 second"
                ],
                "testcases": [
                    {
                        "input": "carrace",
                        "output": "True",
                        "explanation": "The string \"carrace\" can be rearranged to form the palindrome \"racecar\"."
                    },
                    {
                        "input": "ferel",
                        "output": "False",
                        "explanation": "No permutation of the string \"ferel\" can form a palindrome."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We can use some special property of the palindromic string.</p>",
            "<p>We can try to optimize the space complexity by using bit manipulation.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}