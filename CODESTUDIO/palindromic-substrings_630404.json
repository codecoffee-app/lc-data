{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7170,
            "title": "Palindromic Substrings",
            "titleSlug": "palindromic-substrings_630404",
            "content": "<h4 id=\"you-have-been-given-a-string-str-your-task-is-to-find-the-total-number-of-palindromic-substrings-of-str\">You have been given a string STR. Your task is to find the total number of palindromic substrings of STR.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>If the input string is &quot;abbc&quot;, then all the possible palindromic substrings would be: [&quot;a&quot;, &quot;b&quot;, &quot;b&quot;, c&quot;, &quot;bb&quot;] and hence, the output will be 5 since we have 5 substrings in total which form a palindrome.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>A string is said to be a &#39;Palindrome&#39; if it is read the same forwards and backwards. \nFor example, \u201cabba\u201d is a palindrome, but \u201cabbc\u201d is not.\n\nA &#39;Substring&#39; is a contiguous sequence of characters within a string. \nFor example, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;ab&quot;, &quot;bc&quot;, &quot;abc&quot; are substrings of &quot;abc&quot;.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer &#39;t&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first and only line of each test case contains the string STR for which you have to count the number of palindromic substrings.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the total number of palindromic substrings possible.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You are not required to print anything, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= t &lt;= 100\n0 &lt;= N &lt;= 1000\n\nWhere &#39;t&#39; is the number of test cases, &#39;N&#39; is the length of the given string.\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\nabc\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>All the substrings of the given string are &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;ab&quot;, &quot;bc&quot;, &quot;abc&quot;.\nThe plaindromics substrings are &quot;a&quot;, &quot;b&quot;, &quot;c&quot;. So the output will be 3.   \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\naaa\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 104,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string, determine the total number of palindromic substrings it contains. A substring is a contiguous sequence of characters within the string, and a palindrome is a string that reads the same forwards and backward.",
                "constraints": [
                    "1 <= t <= 100",
                    "0 <= N <= 1000",
                    "Where 't' is the number of test cases, 'N' is the length of the given string.",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "abc",
                        "output": "3",
                        "explanation": "The palindromic substrings of \"abc\" are \"a\", \"b\", and \"c\". Thus, the total count is 3."
                    },
                    {
                        "input": "aaa",
                        "output": "6",
                        "explanation": "The palindromic substrings of \"aaa\" are \"a\", \"a\", \"a\", \"aa\", \"aa\", and \"aaa\". Thus, the total count is 6."
                    },
                    {
                        "input": "abbc",
                        "output": "5",
                        "explanation": "The palindromic substrings of \"abbc\" are \"a\", \"b\", \"b\", \"c\", and \"bb\". Thus, the total count is 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think you have access to all the substrings of the given string in a storage. From the pool of all the possible substrings, which all are palindromes?</p>",
            "<p>Think of some of the smallest strings that are palindrome(with length greater than 0). Eg, string of length 1. Lets say, \"\"a\"\" which is a palindrome. Adding characters to its left and right would may make the string a palindrome again. Extending this idea further would may result in having a palindrome of larger length. We note that this idea would generate all the odd length of palindromes.</p><p>We can extend this same idea on a smallest even length palindrome(say, 'bb') to generate larger length palindromes of even size.&nbsp;</p><p>Hence, the idea is to start with the smallest problem or problems and solve the larger problems step by step with the help of previous small sub problems while you maintain your answer/count.</p>",
            "<p>Think of some overlapping problems in the recursive approach.&nbsp;</p>",
            "<p>Can we convert memoization solution into iterative solution?</p>",
            "<p>The idea is to expand the string from length1 and 2 by considering the initial character or characters as the centre of the palindrome string.</p><p>Standing at a character, think of expanding the string in the left and right direction while checking for the condition of a palindrome. Idea is, if the characters at both the corners of a string are the same given the string in between is a palindrome then the whole string is a palindrome and hence we can say, we have one more substring that is a palindrome.</p><p>Extend this idea for both the even and odd length palindromes by considering every character as the centre of a palindrome string.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity : O(N^2)\n    Space complexity : O(1)\n\n    where N is the size of the input string.\n*/\n\nint palindromicSubstrings(string str)\n{\n    int ans = 0;\n\n    //Finding all the odd length palindromes with center at 'i'.\n    for (int i = 0; i < str.length(); i++)\n    {\n        int left = i;\n        int right = i;\n\n        while (left >= 0 && right < str.length() && str[left] == str[right])\n        {\n            ans++;\n            left--;\n            right++;\n        }\n    }\n\n    //Finding all the even length palindromes with center between 'i' and 'i + 1'.\n    for (int i = 0; i < str.length() - 1; i++)\n    {\n        int left = i;\n        int right = i + 1;\n        while (left >= 0 && right < str.length() && str[left] == str[right])\n        {\n            ans++;\n            left--;\n            right++;\n        }\n    }\n\n    return ans;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity : O(N ^ 2)\n    Space complexity : O(1)\n    \n    Where N is the size of the input String.\n'''\n\ndef palindromicSubstrings(string, n) :\n\n    ans = 0\n\n    #Finding all the odd length palindromes with center at 'i'.\n    for i in range(n) :\n        left = i\n        right = i\n    \n        \n        while (left >= 0 and right < n) and (string[left] == string[right]) :\n            ans += 1\n            left -= 1\n            right += 1\n\n    #Finding all the even length palindromes with center between 'i' and 'i + 1'.\n    for i in range((n - 1)) :\n        left = i\n        right = i + 1\n\n        while (left >= 0 and right < n) and (string[left] == string[right]) :\n            ans += 1\n            left -= 1\n            right += 1\n\n    return ans\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time Complexity - O(N ^ 2)\n    Space complexity - O(1)\n\n    where N is the size of the input String.\n*/\n\npublic class Solution {\n    public static int palindromicSubstrings(String str) {\n        int ans = 0;\n\n        // Finding all the odd length palindromes with center at 'i'.\n        for (int i = 0; i < str.length(); i++) {\n            \n            int left = i;\n            int right = i;\n\n            while (left >= 0 && right < str.length() && str.charAt(left) == str.charAt(right)) {\n                ans++;\n                left--;\n                right++;\n            }\n        }\n\n        // Finding all the even length palindromes with center between 'i' and 'i + 1'.\n        for (int i = 0; i < str.length() - 1; i++) {\n\n            int left = i;\n            int right = i + 1;\n            \n            while (left >= 0 && right < str.length() && str.charAt(left) == str.charAt(right)) {\n                ans++;\n                left--;\n                right++;\n            }\n        }\n\n        return ans;\n    }\n}\n\n\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}