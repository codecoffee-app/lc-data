{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13298,
            "title": "Parth and his OCD",
            "titleSlug": "parth-and-his-ocd_1555645",
            "content": "<h4 id=\"parth-is-a-nerd-programmer-he-has-started-learning-array-list-programming-parth-has-received-an-array-list-arr-of-n-positive-integers-as-a-gift-parth-s-ocd-gets-triggered-every-time-he-sees-an-array-list-having-an-odd-value-at-even-index-or-even-value-at-odd-index-help-parth-to-make-arr-good-before-his-ocd-gets-triggered\">Parth is a nerd programmer. He has started learning array/list programming. Parth has received an array/list \u2018ARR\u2019 of \u2018N\u2019 positive integers as a gift. Parth\u2019s OCD gets triggered every time he sees an array/list having an odd value at even index or even value at odd index. Help Parth to make \u2018ARR\u2019 good before his OCD gets triggered.</h4>\n\n<h4 id=\"example-given-an-arr-7-4-21-1-8-18-the-output-array-list-which-would-be-shown-to-parth-can-be-4-7-8-21-18-1\">Example: Given an \u2018ARR\u2019: [ 7, 4, 21, 1, 8, 18]. The output array/list which would be shown to Parth can be [ 4, 7, 8, 21, 18, 1 ].</h4>\n\n<h4 id=\"note-there-might-be-many-different-output-arrays-possible-like-4-7-8-21-18-1-18-1-8-21-4-21-and-you-can-show-any-one-of-these-which-does-not-trigger-parth-s-ocd-also-the-arr-provided-to-you-would-have-the-same-number-of-odd-elements-as-odd-index-positions-and-vice-versa-assume-arr-as-0-based-indexing\">Note: There might be many different output arrays possible like [ 4, 7, 8, 21, 18, 1 ], [ 18, 1, 8, 21, 4, 21 ] and you can show any one of these which does not trigger Parth\u2019s OCD. Also, the \u2018ARR\u2019 provided to you would have the same number of odd elements as odd index positions and vice versa. Assume \u2018ARR\u2019 as 0-based indexing.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases. \n\nThe first line of each test case will contain one integer \u2018N\u2019 that denotes the size of the \u2018ARR\u2019.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers \u2018ARR[i]\u2019, which denote the numbers present in our \u2018ARR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, do not return anything, only do changes in the original array/list \u2018ARR\u2019.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve this in O(1) auxiliary space?\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n1 &lt;= N &lt;= 10^3\n0 &lt;= A[i] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n6\n15 2 13 1 4 18\n5\n9 1 2 8 14\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>YES\nYES\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>In the first test case, the elements present at index 0 and 2 are not even and at index 1 and 5 are not odd. Thus, we swapped elements at index 0 &amp; 1 and 2 &amp; 5 which makes our \u2018ARR\u2019 perfect. Hence the result \u2018ARR\u2019 is [2, 15, 18, 1, 4, 13].\n\nIn the second test case, the element present at index 0 is not even and at index 3 is not odd. Thus, we swapped both elements which makes our \u2018ARR\u2019 perfect. Hence the result \u2018ARR\u2019 is [8, 1, 2, 9, 14].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2\n1 0\n7\n1 8 7 12 3 10 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>YES\nYES\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>In the first test case, both the elements are improperly placed and swapping them makes our \u2018ARR\u2019 perfect. Hence the result \u2018ARR\u2019 is [0, 1].\n\nIn the second test case, the elements present at index 0, 2, 4 are not even and at index 1, 3, 5 are not odd. Thus, we swapped elements at index 0 &amp; 1, 2 &amp; 3 and 4 &amp; 5 which makes our \u2018ARR\u2019 perfect. Hence the result \u2018ARR\u2019 is [8, 1, 12, 7, 10, 3, 4].\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array/list 'ARR' of 'N' positive integers, rearrange the elements such that no odd number is at an even index and no even number is at an odd index. You are guaranteed that the number of odd elements equals the number of odd indices, and the number of even elements equals the number of even indices.",
                "constraints": [
                    "1 <= T <= 10^2",
                    "1 <= N <= 10^3",
                    "0 <= A[i] <= 10^9",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "6\n15 2 13 1 4 18",
                        "output": "2 15 18 1 4 13",
                        "explanation": "Elements at indices 0 and 2 are odd, and elements at indices 1 and 5 are even. Swapping the elements at indices 0 & 1 and 2 & 5 results in a valid arrangement."
                    },
                    {
                        "input": "5\n9 1 2 8 14",
                        "output": "8 1 14 9 2",
                        "explanation": "Element at index 0 is odd and element at index 3 is even. Swapping them ensures that there are no odd numbers at even index."
                    },
                    {
                        "input": "2\n1 0",
                        "output": "0 1",
                        "explanation": "Both elements are improperly placed. Swapping them creates a valid arrangement."
                    },
                    {
                        "input": "7\n1 8 7 12 3 10 4",
                        "output": "8 1 12 7 10 3 4",
                        "explanation": "Elements at indices 0, 2, and 4 are odd and elements at indices 1, 3, and 5 are even. Swapping the elements at 0 & 1, 2 & 3, and 4 & 5 provides a valid arrangement."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of checking manually for all indexes and replacing them?</p>",
            "<p>Can you think of putting all elements at a fixed position in a temporary array using two pointers ?</p>",
            "<p>Can you think of putting all elements at a fixed position in a given array using two pointers?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}