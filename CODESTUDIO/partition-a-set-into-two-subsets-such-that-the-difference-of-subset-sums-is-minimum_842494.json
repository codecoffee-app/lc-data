{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8277,
            "title": "Partition a set into two subsets such that the difference of subset sums is minimum.",
            "titleSlug": "partition-a-set-into-two-subsets-such-that-the-difference-of-subset-sums-is-minimum_842494",
            "content": "<h4 id=\"you-are-given-an-array-arr-containing-n-non-negative-integers\">You are given an array <emp><strong>&#39;arr&#39;</strong></emp> containing <emp><strong>&#39;n&#39;</strong></emp> non-negative integers.</h4>\n\n<p><br></p>\n\n<h4 id=\"your-task-is-to-partition-this-array-into-two-subsets-such-that-the-absolute-difference-between-subset-sums-is-minimum\">Your task is to partition this array into two subsets such that the absolute difference between subset sums is minimum.</h4>\n\n<p><br></p>\n\n<h4 id=\"you-just-need-to-find-the-minimum-absolute-difference-considering-any-valid-division-of-the-array-elements\">You just need to find the minimum absolute difference considering any valid division of the array elements.</h4>\n\n<p><br></p>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. Each array element should belong to exactly one of the subsets.\n\n2. Subsets need not always be contiguous.\nFor example, for the array : [1, 2, 3], some of the possible divisions are \n   a) {1,2} and {3}\n   b) {1,3} and {2}.\n\n3. Subset-sum is the sum of all the elements in that subset. \n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: &#39;n&#39; = 5, &#39;arr&#39; = [3, 1, 5, 2, 8].\n\nOuput: 1\n\nExplanation: We can partition the given array into {3, 1, 5} and {2, 8}. \nThis will give us the minimum possible absolute difference i.e. (10 - 9 = 1).\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains integer &#39;n&#39; denoting the size of the array.\n\nThe second line of the input contains &#39;n&#39; space-separated integers denoting the elements of the array &#39;arr&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return the minimum possible absolute difference. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4\n1 2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>We can partition the given array into {2,3} and {1,4}.\nThis will give us the minimum possible absolute difference i.e. (5 - 5 = 0) in this case.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n8 6 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>We can partition the given array into {8} and {6,5}. \nThis will give us the minimum possible absolute difference i.e. (11 - 8 = 3).\n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity:</h5>\n\n<pre><code>The expected time complexity is O(n * \ud835\udeba &#39;arr&#39;[i]), where \ud835\udeba &#39;arr&#39;[i] denotes the sum of all elements in &#39;arr&#39;.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10^3\n0 &lt;= &#39;arr&#39;[i] &lt;= 10^3\n0 &lt;= \ud835\udeba &#39;arr&#39;[i] &lt;= 10^4, \n\nwhere \ud835\udeba &#39;arr&#39;[i] denotes the sum of all elements in &#39;arr&#39;.\n\nTime Limit: 1sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 369,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'arr' of 'n' non-negative integers, the goal is to partition it into two subsets such that the absolute difference between the sums of the elements in each subset is minimized. Determine this minimum absolute difference.",
                "constraints": [
                    "1 <= 'n' <= 10^3",
                    "0 <= 'arr'[i] <= 10^3",
                    "0 <= \u03a3 'arr'[i] <= 10^4, where \u03a3 'arr'[i] denotes the sum of all elements in 'arr'."
                ],
                "testcases": [
                    {
                        "input": "n = 4, arr=[1, 2, 3, 4]",
                        "output": "0",
                        "explanation": "We can partition the given array into {2,3} and {1,4}. This will give us the minimum possible absolute difference i.e. (5 - 5 = 0) in this case."
                    },
                    {
                        "input": "n = 3, arr=[8, 6, 5]",
                        "output": "3",
                        "explanation": "We can partition the given array into {8} and {6,5}. This will give us the minimum possible absolute difference i.e. (11 - 8 = 3)."
                    },
                    {
                        "input": "n = 5, arr=[3, 1, 5, 2, 8]",
                        "output": "1",
                        "explanation": "We can partition the given array into {3, 1, 5} and {2, 8}. This will give us the minimum possible absolute difference i.e. (10 - 9 = 1)."
                    },
                    {
                        "input": "n = 2, arr=[10, 4]",
                        "output": "6",
                        "explanation": "We can partition the given array into {10} and {4}. This will give us the minimum possible absolute difference i.e. (10 - 4 = 6)."
                    },
                    {
                        "input": "n = 1, arr=[5]",
                        "output": "5",
                        "explanation": "We can partition the given array into {5} and {}. This will give us the minimum possible absolute difference i.e. (5 - 0 = 5)."
                    },
                    {
                        "input": "n = 6, arr=[2,4,6,8,10,12]",
                        "output": "0",
                        "explanation": "We can partition the given array into {2,4,6,10} and {8,12}. This will give us the minimum possible absolute difference i.e. (22 - 20 = 2). But if we choose {2,4,10,12} and {6,8} we will get a absolute difference of 0 (28-14=0 is wrong) {28} - {14}. partition into {2,4,8,6} and {10,12} which leads to {20} - {22}=2. partition into {2,4,6,8} and {10,12} -> 20 and 22 diff 2. partition {2,4,6,12} and {8,10} -> 24 and 18 diff 6. partition {2,4,6,10} and {8,12} -> 22 and 20, diff 2. partition {2,4,8,10} and {6,12} -> 24 and 18 diff 6. parition {2,4,8,12} and {6,10} -> 26 and 16, diff 10. partition {2,4,10,12} and {6,8} -> 28 and 14, diff 14. partition {6,4,2,8} and {10,12} -> 20 and 22 -> diff 2. partition {6,4,2,10} and {8,12} -> 22 and 20 diff 2. Correct answer is 0 with partition {4, 6, 8} and {2,10,12}, sums are 18 and 24."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try all possible combinations.</p>",
            "<p>Can we use Dynamic Programming?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n\tTime Complexity: O(N * SUM)\r\n\tSpace Complexity: O(N * SUM)\r\n\r\n\tWhere N is the number of elements in the array and SUM denotes the sum of all the elements in the array.\r\n*/\r\n\r\nint minSubsetSumDifference(vector<int>& arr, int n)\r\n{\r\n\tint sum = 0, res = 0, ans = 0;\r\n\t// Calculating the sum of all the array elements.\r\n\tfor (int i = 0; i < n; i++) {\r\n\t\tsum += arr[i];\r\n\t}\r\n\r\n\tres = sum;\r\n\tif (sum % 2 == 0) {\r\n\t\tsum /= 2;\r\n\t}\r\n\r\n\telse {\r\n\t\tsum = (sum + 1) / 2;\r\n\t}\r\n\r\n\tbool dp[n + 1][sum + 1];\r\n\t// Initializing the dp with its initial state.\r\n\tmemset(dp, false, sizeof(dp));\r\n\tfor (int i = 0; i <= n; i++) {\r\n\t\tdp[i][0] = true;\r\n\t}\r\n\t\r\n\t// Calculating the value of each state of the dp.\r\n\tfor (int i = 1; i <= n; i++)\r\n\t{\r\n\t\tfor (int j = 1; j <= sum; j++)\r\n\t\t{\r\n\t\t\tif (arr[i - 1] > j) {\r\n\t\t\t\tdp[i][j] = dp[i - 1][j];\r\n\t\t\t}\r\n\r\n\t\t\telse {\r\n\t\t\t\tdp[i][j] = dp[i - 1][j] | dp[i - 1][j - arr[i - 1]];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (int i = sum; i >= 0; i--)\r\n\t{\r\n\t\tif (dp[n][i])\r\n\t\t{\r\n\t\t\t// Here i represents the path sum.\r\n\t\t\tans = abs(res - 2 * i);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\treturn ans;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n\tTime Complexity: O(N * SUM)\r\n\tSpace Complexity: O(N * SUM)\r\n\r\n\tWhere N is the number of elements in the array and SUM denotes the sum of all the elements in the array.\r\n*/\r\npublic class Solution {\r\n    public static int minSubsetSumDifference(int[] arr, int n) {\r\n        int sum = 0, res = 0, ans = 0;\r\n        // Calculating the sum of all the array elements.\r\n        for (int i = 0; i < n; i++) {\r\n            sum += arr[i];\r\n        }\r\n\r\n        res = sum;\r\n        if (sum % 2 == 0) {\r\n            sum /= 2;\r\n        } else {\r\n            sum = (sum + 1) / 2;\r\n        }\r\n\r\n        boolean[][] dp = new boolean[n + 1][sum + 1];\r\n        // Initializing the dp with its initial state.\r\n        for (int i = 0; i <= n; i++) {\r\n            dp[i][0] = true;\r\n        }\r\n\r\n        // Calculating the value of each state of the dp.\r\n        for (int i = 1; i <= n; i++) {\r\n            for (int j = 1; j <= sum; j++) {\r\n                if (arr[i - 1] > j) {\r\n                    dp[i][j] = dp[i - 1][j];\r\n                } else {\r\n                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j - arr[i - 1]];\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = sum; i >= 0; i--) {\r\n            if (dp[n][i]) {\r\n                // Here i represents the path sum.\r\n                ans = Math.abs(res - 2 * i);\r\n                break;\r\n            }\r\n        }\r\n\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n\tTime Complexity: O(N * SUM)\n\tSpace Complexity: O(N * SUM)\n\n\tWhere N is the number of elements in the array and SUM denotes the sum of all the elements in the array.\n'''\nfrom typing import List\n\n\ndef minSubsetSumDifference(arr: List[str], n: int) -> int:\n    sum, res, ans = 0, 0, 0\n    # Calculating the sum of all the array elements.\n    for i in arr:\n        sum += i\n\n    res = sum\n    sum = (sum + 1) // 2\n\n    # Initializing the dp with its initial state.\n    dp = [[False for i in range(sum + 1)] for j in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = True\n    \n    # Calculating the value of each state of the dp.\n    for i in range(1,n + 1):\n        for j in range(1,sum + 1):\n            if arr[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n\n            else:\n                dp[i][j] = (dp[i - 1][j] | dp[i - 1][j - arr[i - 1]])\n\n    for i in range(sum, -1, -1):\n\n        if dp[n][i] == True:\n            # Here i represents the path sum.\n            ans = abs(res - 2 * i)\n            break\n\n    return ans",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}