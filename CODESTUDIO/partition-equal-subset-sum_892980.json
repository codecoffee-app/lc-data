{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8508,
            "title": "Partition equal subset sum ",
            "titleSlug": "partition-equal-subset-sum_892980",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-n-positive-integers-your-task-is-to-find-if-we-can-partition-the-given-array-into-two-subsets-such-that-the-sum-of-elements-in-both-subsets-is-equal\">You are given an array &#39;ARR&#39; of &#39;N&#39; positive integers. Your task is to find if we can partition the given array into two subsets such that the sum of elements in both subsets is equal.</h4>\n\n<h4 id=\"for-example-let-s-say-the-given-array-is-2-3-3-3-4-5-then-the-array-can-be-partitioned-as-2-3-5-and-3-3-4-with-equal-sum-10\">For example, let\u2019s say the given array is [2, 3, 3, 3, 4, 5], then the array can be partitioned as [2, 3, 5], and [3, 3, 4] with equal sum 10.</h4>\n\n<h4 id=\"follow-up\">Follow Up:</h4>\n\n<pre><code>Can you solve this using not more than O(S) extra space, where S is the sum of all elements of the given array?\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases or queries to be processed.\nThen the test case follows.\n\nThe first line of each test case contains an integer &#39;N&#39;, denoting the size of the array.\n\nThe second line of each test case contains &#39;N&#39; single space-separated integers representing the array elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print \u201ctrue\u201d or \u201cfalse\u201d denoting whether we can partition into two equal subset-sum or not, in a separate line. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 10\n1 &lt;= &#39;N&#39; &lt;= 100 \n1 &lt;= &#39;ARR&#39;[i] &lt;= 100\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n6\n3 1 1 2 2 1\n5\n5 6 5 11 6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>true\nfalse    \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>For the first test case, the array can be partitioned as ([2,1,1,1] and [3, 2]) or ([2,2,1], and [1,1,3]) with sum 5.\n\nFor the second test case, the array can\u2019t be partitioned.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n9\n2 2 1 1 1 1 1 3 3\n6\n8 7 6 12 4 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>false\ntrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 169,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'ARR' of 'N' positive integers, determine if it's possible to partition the array into two subsets such that the sum of elements in both subsets is equal. For example, the array [2, 3, 3, 3, 4, 5] can be partitioned into [2, 3, 5] and [3, 3, 4], both with a sum of 10.  Solve this using O(S) extra space, where S is the sum of all elements in the array.",
                "constraints": [
                    "1 <= 'T' <= 10",
                    "1 <= 'N' <= 100",
                    "1 <= 'ARR'[i] <= 100",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "6\n3 1 1 2 2 1",
                        "output": "true",
                        "explanation": "The array can be partitioned as ([2,1,1,1] and [3, 2]) or ([2,2,1], and [1,1,3]) with sum 5."
                    },
                    {
                        "input": "5\n5 6 5 11 6",
                        "output": "false",
                        "explanation": "The array cannot be partitioned into two subsets with equal sums."
                    },
                    {
                        "input": "9\n2 2 1 1 1 1 1 3 3",
                        "output": "false",
                        "explanation": null
                    },
                    {
                        "input": "6\n8 7 6 12 4 5",
                        "output": "true",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of brute force and try to generate all the possible subsets of the array, and check if its sum is equal to totalSum/2, where totalSum represents the sum of all elements in an array.</p>",
            "<p>Think of a solution to optimize the previous approach by using memoization.</p>",
            "<p>Think of a solution to use bottom-up dynamic programming.</p>",
            "<p>Think of a solution to optimize the space of the previous solution by using a 1-D array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N * S)\r\n    Space Complexity: O(S)\r\n\r\n    Where 'N' is the size of the array,\r\n    and 'S' is the sum of all elements in the given array.\r\n*/\r\n\r\nbool canPartition(vector<int> &arr, int n)\r\n{\r\n\r\n    // It stores the sum of all array element.\r\n    int totalSum = 0;\r\n\r\n    for (int num : arr) {\r\n        totalSum += num;\r\n    }\r\n\r\n    // If sum is odd, then it can't be partitioned into equal sum subsets.\r\n    if (totalSum % 2 != 0)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    // One subset sum will always be totalSum / 2.\r\n    int subsetSum = totalSum / 2;\r\n\r\n    // Create a new auxiliary array dp.\r\n    vector<bool> dp(subsetSum + 1, false);\r\n\r\n    dp[0] = true;\r\n\r\n    // Traversing the given array.\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        for (int j = subsetSum; j >= 0; j--)\r\n        {\r\n            if (j - arr[i - 1] >= 0)\r\n            {\r\n                dp[j] = dp[j - arr[i - 1]] || dp[j];\r\n            }\r\n        }\r\n    }\r\n\r\n    return dp[subsetSum];\r\n\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N * S)\r\n    Space Complexity: O(S)\r\n\r\n    Where 'N' is the size of the array, \r\n    and 'S' is the sum of all elements in the given array.\r\n'''\r\n\r\ndef canPartition(arr, n):\r\n\r\n    # It stores the sum of all array element.\r\n    totalsum = 0\r\n\r\n    # Iterating the array.\r\n    for num in arr:\r\n        totalsum += num\r\n\r\n    # If totalsum is odd, then it can't be partitioned into equal sum subsets.\r\n    if totalsum % 2 != 0:\r\n        return False\r\n    \r\n    # One subset sum will always be totalSum/2.\r\n    subsetsum = totalsum // 2\r\n    \r\n    dp = [None for i in range(subsetsum + 1)]\r\n    \r\n    dp[0] = True\r\n    \r\n    # Traversing the given array.\r\n    for i in range(n+1):\r\n        for j in range(subsetsum, -1, -1):\r\n            \r\n            if (j - arr[i - 1] >= 0):\r\n                \r\n                dp[j] = dp[j - arr[i - 1]] or dp[j]\r\n                \r\n    return dp[subsetsum]\r\n            \r\n\r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N * S)\r\n    Space Complexity: O(S)\r\n\r\n    Where 'N' is the size of the array, \r\n    and 'S' is the sum of all elements in the given array.\r\n*/\r\n\r\npublic class Solution {\r\n\r\n    public static boolean canPartition(int[] arr, int n) {\r\n\r\n        // It stores the sum of all array element.\r\n        int totalSum = 0;\r\n\r\n        for (int num : arr) {\r\n            totalSum += num;\r\n        }\r\n\r\n        // If sum is odd, then it can't be partitioned into equal sum subsets.\r\n        if (totalSum % 2 != 0) {\r\n            return false;\r\n        }\r\n\r\n        // One subset sum will always be totalSum/2.\r\n        int subsetSum = totalSum / 2;\r\n\r\n        boolean dp[] = new boolean[subsetSum + 1];\r\n\r\n        dp[0] = true;\r\n\r\n        // Traversing the given array.\r\n        for (int i = 1; i <= n; i++) {\r\n            for (int j = subsetSum; j >= 0; j--) {\r\n                if (j - arr[i - 1] >= 0) {\r\n                    dp[j] = dp[j - arr[i - 1]] || dp[j];\r\n                }\r\n            }\r\n        }\r\n\r\n        return dp[subsetSum];\r\n    }\r\n\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}