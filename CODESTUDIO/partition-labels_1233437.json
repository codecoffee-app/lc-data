{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10566,
            "title": "Partition Labels",
            "titleSlug": "partition-labels_1233437",
            "content": "<h4 id=\"you-are-given-a-string-s-of-lowercase-english-letters-your-task-is-to-partition-this-string-into-as-many-parts-as-possible-so-that-all-the-occurrences-of-the-same-letter-appear-in-exactly-one-of-the-partitions\">You are given a string \u2018S\u2019 of lowercase English letters. Your task is to partition this string into as many parts as possible so that all the occurrences of the same letter appear in exactly one of the partitions.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>&quot;qvmwtmzzse&quot; is the given string. We can make the first two partitions as \u2018q\u2019, \u2018v\u2019, but \u2018m\u2019 can not be an individual partition because there is another occurrence of m  at index 6. So, the minimum length of the third partition is from index 3 to 6 and the partition is &quot;mwtm&quot;. Similarly, the next partitions are &quot;zz&quot;, \u2018s\u2019, \u2018e\u2019. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. The test cases follow.\n\nThe first line of each test case contains a string \u2018S\u2019 consisting of lowercase English letters.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print the size of the partitions of the string on a single line separated by space. Note that you need to maximize the number of partitions.\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1&lt;= T &lt;= 10^3\n1 &lt;= |S| &lt;= 10^3\n\nWhere |S| is the size of the given string \u2018S\u2019.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\nqvmwtmzzse\ndccccbaabe\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 1 4 2 1 1\n1 4 4 1 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>In the first test case, the given string is \u201cqvmwtmzzse\u201d. To maximize the number of partitions, we will make partitions as follows \u201cq\u201d, \u201cv\u201d, \u201cmwtm\u201d, \u201czz\u201d, \u201cs\u201d, \u201ce\u201d and the lengths are 1, 1, 4, 2, 1, 1 respectively. Hence the answer is {1, 1, 4, 2, 1, 1}.\n\nIn the second test case, the given string is \u201cdccccbaabe\u201d. To maximize the number of partitions, we will make partitions as follows \u201cd\u201d, \u201ccccc\u201d, \u201cbaab\u201d, \u201ce\u201d and the lengths are 1, 4, 4, 1 respectively. Hence the answer is {1, 4, 4, 1}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nvhaagbqkaq\neaaaabaaec\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 1 8\n9 1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2:</h5>\n\n<pre><code>In the first test case, the given string is \u201cvhaagbqkaq\u201d. To maximize the number of partitions, we will make partitions as follows \u201cv\u201d, \u201ch\u201d, \u201caagbqkaq\u201d and the lengths are 1, 1, 8 respectively. Hence the answer is {1, 1, 8}.\n\nIn the second test case, the given string is \u201ceaaaabaaec\u201d. To maximize the number of partitions, we will make partitions as follows \u201ceaaaabaae\u201d, \u201cc\u201d and the lengths are 9, 1 respectively. Hence the answer is {9, 1}.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S' consisting of lowercase English letters, partition it into as many parts as possible such that each letter appears in at most one part. Return a vector containing the sizes of these partitions.",
                "constraints": [
                    "1 <= T <= 10^3",
                    "1 <= |S| <= 10^3",
                    "Where |S| is the size of the given string \u2018S\u2019."
                ],
                "testcases": [
                    {
                        "input": "s = \"qvmwtmzzse\"",
                        "output": "[1, 1, 4, 2, 1, 1]",
                        "explanation": "The optimal partition is \"q\", \"v\", \"mwtm\", \"zz\", \"s\", \"e\" with lengths 1, 1, 4, 2, 1, 1 respectively."
                    },
                    {
                        "input": "s = \"dccccbaabe\"",
                        "output": "[1, 4, 4, 1]",
                        "explanation": "The optimal partition is \"d\", \"cccc\", \"baab\", \"e\" with lengths 1, 4, 4, 1 respectively."
                    },
                    {
                        "input": "s = \"vhaagbqkaq\"",
                        "output": "[1, 1, 8]",
                        "explanation": "The optimal partition is \"v\", \"h\", \"aagbqkaq\" with lengths 1, 1, 8 respectively."
                    },
                    {
                        "input": "s = \"eaaaabaaec\"",
                        "output": "[9, 1]",
                        "explanation": "The optimal partition is \"eaaaabaae\", \"c\" with lengths 9, 1 respectively."
                    },
                    {
                        "input": "s = \"ababcbacadefegdehijhklij\"",
                        "output": "[9, 7, 8]",
                        "explanation": "The optimal partition is \"ababcbaca\", \"defegde\", \"hijhklij\" with lengths 9, 7, 8 respectively."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Iterate through the string, find the last appearance of the current letter and check if it is possible to make it an independent partition?</p>",
            "<p>Can we store the last appearances of each letter instead of finding in every iteration?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}