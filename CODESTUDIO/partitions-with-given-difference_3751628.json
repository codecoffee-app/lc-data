{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 17064,
            "title": "Partitions With Given Difference",
            "titleSlug": "partitions-with-given-difference_3751628",
            "content": "<h4 id=\"given-an-array-arr-partition-it-into-two-subsets-possibly-empty-such-that-their-union-is-the-original-array-let-the-sum-of-the-elements-of-these-two-subsets-be-s1-and-s2\">Given an array \u2018ARR\u2019, partition it into two subsets (possibly empty) such that their union is the original array. Let the sum of the elements of these two subsets be \u2018S1\u2019 and \u2018S2\u2019.</h4>\n\n<h4 id=\"given-a-difference-d-count-the-number-of-partitions-in-which-s1-is-greater-than-or-equal-to-s2-and-the-difference-between-s1-and-s2-is-equal-to-d-since-the-answer-may-be-too-large-return-it-modulo-10-9-7\">Given a difference \u2018D\u2019, count the number of partitions in which \u2018S1\u2019 is greater than or equal to \u2018S2\u2019 and the difference between \u2018S1\u2019 and \u2018S2\u2019 is equal to \u2018D\u2019. Since the answer may be too large, return it modulo \u201810^9 + 7\u2019.</h4>\n\n<h4 id=\"if-pi_sj-denotes-the-subset-j-for-partition-i-then-two-partitions-p1-and-p2-are-considered-different-if\">If \u2018Pi_Sj\u2019 denotes the Subset \u2018j\u2019 for Partition \u2018i\u2019. Then, two partitions P1 and P2 are considered different if:</h4>\n\n<pre><code>1) P1_S1 != P2_S1 i.e, at least one of the elements of P1_S1 is different from P2_S2.\n2) P1_S1 == P2_S2, but the indices set represented by P1_S1 is not equal to the indices set of P2_S2. Here, the indices set of P1_S1 is formed by taking the indices of the elements from which the subset is formed.\nRefer to the example below for clarification.\n</code></pre>\n\n<h4 id=\"note-that-the-sum-of-the-elements-of-an-empty-subset-is-0\">Note that the sum of the elements of an empty subset is 0.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>If N = 4, D = 3, ARR = {5, 2, 5, 1}\nThere are only two possible partitions of this array.\nPartition 1: {5, 2, 1}, {5}. The subset difference between subset sum is: (5 + 2 + 1) - (5) = 3\nPartition 2: {5, 2, 1}, {5}. The subset difference between subset sum is: (5 + 2 + 1) - (5) = 3\nThese two partitions are different because, in the 1st partition, S1 contains 5 from index 0, and in the 2nd partition, S1 contains 5 from index 2.\n</code></pre>\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019 and \u2018D,\u2019 denoting the number of elements in the array and the desired difference.\n\nThe following line contains N integers denoting the space-separated integers \u2018ARR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, find the number of partitions satisfying the above conditions modulo 10^9 + 7.\nOutput for each test case will be printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 T \u2264 10\n1 \u2264 N \u2264 50\n0 \u2264 D \u2264 2500\n0 \u2264 ARR[i] \u2264 50\n\nTime limit: 1 sec\n</code></pre>\n\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 3\n5 2 6 4\n4 0\n1 1 1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n6\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For test case 1:\nWe will print 1 because :\nThere is only one possible partition of this array.\nPartition : {6, 4}, {5, 2}. The subset difference between subset sum is: (6 + 4) - (5 + 2) = 3\n\nFor test case 2:\nWe will print 6 because :\nThe partition {1, 1}, {1, 1} is repeated 6 times:\nPartition 1 : {ARR[0], ARR[1]}, {ARR[2], ARR[3]}\nPartition 2 : {ARR[0], ARR[2]}, {ARR[1], ARR[3]}\nPartition 3 : {ARR[0], ARR[3]}, {ARR[1], ARR[2]}\nPartition 4 : {ARR[1], ARR[2]}, {ARR[0], ARR[3]}\nPartition 5 : {ARR[1], ARR[3]}, {ARR[0], ARR[2]}\nPartition 6 : {ARR[2], ARR[3]}, {ARR[0], ARR[1]}\nThe difference is in the indices chosen for the subset S1(or S2).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3\n3 1\n4 6 3\n5 0\n3 1 1 2 1\n5 1\n3 2 2 5 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n6\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 337,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'ARR', divide it into two subsets (which can be empty), ensuring their union is the original array. Let 'S1' and 'S2' represent the sums of elements in these subsets.\n\nGiven a difference 'D', determine the number of ways to partition 'ARR' such that 'S1' is greater than or equal to 'S2', and the difference between 'S1' and 'S2' equals 'D'. Return the count modulo 10^9 + 7.\n\nTwo partitions, P1 and P2, are considered different if:\n\n1) The subsets S1 in P1 and P2 are not identical (i.e., they contain different elements).\n2) If the subsets S1 in P1 and P2 contain the same elements, the sets of indices from which those elements were selected are different.\n\nNote: The sum of an empty subset is 0.",
                "constraints": [
                    "1 \u2264 T \u2264 10",
                    "1 \u2264 N \u2264 50",
                    "0 \u2264 D \u2264 2500",
                    "0 \u2264 ARR[i] \u2264 50",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 3\n5 2 6 4",
                        "output": "1",
                        "explanation": "There's only one partition where S1 - S2 = 3: {6, 4}, {5, 2}.  (6 + 4) - (5 + 2) = 3"
                    },
                    {
                        "input": "4 0\n1 1 1 1",
                        "output": "6",
                        "explanation": "The partition {1, 1}, {1, 1} can be formed in 6 ways by selecting different indices for each subset. For example: {ARR[0], ARR[1]}, {ARR[2], ARR[3]},  {ARR[0], ARR[2]}, {ARR[1], ARR[3]}, and so on. The difference lies in the indices chosen for the subsets."
                    },
                    {
                        "input": "3 1\n4 6 3",
                        "output": "1",
                        "explanation": "null"
                    },
                    {
                        "input": "5 0\n3 1 1 2 1",
                        "output": "6",
                        "explanation": "null"
                    },
                    {
                        "input": "5 1\n3 2 2 5 1",
                        "output": "3",
                        "explanation": "null"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try all possible partitions.</p>",
            "<p>The Sum and Difference of the two subsets are fixed.&nbsp;</p>",
            "<p>The Sum and Difference of the two subsets are fixed.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N * MAX_SUM),\r\n    Space Complexity: O( 1 )\r\n\r\n    where N and MAX_SUM denote the number of elements in the array,\r\n    and the maximum possible sum of array elements.\r\n*/\r\n\r\nconst int mod = 1e9 + 7;\r\n\r\nint countPartitions(int n, int d, vector<int> &arr) {\r\n\r\n    // Stores the sum of all the elements in the array.\r\n    int totalSum = 0;\r\n\r\n    // Iterate over the array and add the element to 'totalSum'.\r\n    for (int i = 0; i < n; ++i) {\r\n        totalSum += arr[i];\r\n    }\r\n\r\n    // If totalSum is less than 'D', or their difference is odd.\r\n    if (totalSum < d || (totalSum - d) % 2) {\r\n        // Then no partitions are possible.\r\n        return 0;\r\n    }\r\n\r\n    // We want to find the number of subsets, with subset sum target.\r\n    int target = (totalSum - d) / 2;\r\n\r\n    /*\r\n     * Create a 2D dp table.\r\n     * dp[i][j] represents the number of subsets which form a sum of j\r\n     * if we only consider first i elements.\r\n     */\r\n    vector<vector<int>> dp(n + 1, vector<int> (target + 1));\r\n\r\n    // If we want to find the number of subsets with sum 0,\r\n    // but considering 0 elements, only way is take an empty subset.\r\n    dp[0][0] = 1;\r\n\r\n    // Iterate over the number of elements to consider.\r\n    for (int i = 1; i <= n; ++i) {\r\n\r\n        // Iterate over the sum.\r\n        for (int j = 0; j <= target; ++j) {\r\n\r\n            // Take the entry from the previous row\r\n            dp[i][j] = dp[i - 1][j];\r\n\r\n            // If we include this element.\r\n            if (j >= arr[i - 1]) {\r\n                dp[i][j] = (dp[i][j] + dp[i - 1][j - arr[i - 1]]) % mod;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // Return the answer\r\n    return dp[n][target];\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N * MAX_SUM),\r\n    Space Complexity: O( 1 )\r\n\r\n    where N and MAX_SUM denote the number of elements in the array,\r\n    and the maximum possible sum of array elements.\r\n*/\r\n\r\npublic class Solution {\r\n\r\n    public static int countPartitions(int n, int d, int[] arr) {\r\n\r\n        int mod = (int) 1e9 + 7;\r\n\r\n        // Stores the sum of all the elements in the array.\r\n        int totalSum = 0;\r\n\r\n        // Iterate over the array and add the element to totalSum.\r\n        for (int i = 0; i < n; ++i) {\r\n            totalSum += arr[i];\r\n        }\r\n\r\n        // If totalSum is less than D, or their difference is odd.\r\n        if (totalSum < d || ((totalSum - d) % 2) == 1) {\r\n            // Then no partitions are possible.\r\n            return 0;\r\n        }\r\n\r\n        // We want to find the number of subsets, with subset sum target.\r\n        int target = (totalSum - d) / 2;\r\n\r\n        /*\r\n         * Create a 2D dp table.\r\n         * dp[i][j] represents the number of subsets which form a sum of j\r\n         * if we only consider first i elements.\r\n         */\r\n        int[][] dp = new int[n + 1][target + 1];\r\n\r\n        // If we want to find the number of subsets with sum 0,\r\n        // but considering 0 elements, only way is take an empty subset.\r\n        dp[0][0] = 1;\r\n\r\n        // Iterate over the number of elements to consider.\r\n        for (int i = 1; i <= n; ++i) {\r\n\r\n            // Iterate over the sum.\r\n            for (int j = 0; j <= target; ++j) {\r\n\r\n                // Take the entry from the previous row.\r\n                dp[i][j] = dp[i - 1][j];\r\n\r\n                // If we include this element.\r\n                if (j >= arr[i - 1]) {\r\n                    dp[i][j] = (dp[i][j] + dp[i - 1][j - arr[i - 1]]) % mod;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // Return the answer\r\n        return dp[n][target];\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N * MAX_SUM),\r\n    Space Complexity: O( 1 )\r\n\r\n    where N and MAX_SUM denote the number of elements in the array,\r\n    and the maximum possible sum of array elements.\r\n'''\r\n\r\n\r\nfrom typing import List\r\n\r\nmod = 1000000007\r\n\r\n\r\ndef countPartitions(n: int, d: int, arr: List[int]):\r\n\r\n    # Stores the sum of all the elements in the array.\r\n    totalSum = 0\r\n\r\n    #  Iterate over the array and add the element to 'totalSum'.\r\n    for i in range(n):\r\n        totalSum += arr[i]\r\n\r\n    # If totalSum is less than 'D', or their difference is odd.\r\n    if (totalSum < d or (totalSum - d) % 2):\r\n        # Then no partitions are possible.\r\n        return 0\r\n\r\n    # We want to find the number of subsets, with subset sum target.\r\n    target = (totalSum - d) // 2\r\n\r\n    # Create a 2D dp table.\r\n    # dp[i][j] represents the number of subsets which form a sum of j\r\n    # if we only consider first i elements.\r\n\r\n    dp = [[0 for i in range(target + 1)] for j in range(n + 1)]\r\n\r\n    # If we want to find the number of subsets with sum 0,\r\n    # but considering 0 elements, only way is take an empty subset.\r\n    dp[0][0] = 1\r\n\r\n    for i in range(1, n + 1):\r\n\r\n        for j in range(target + 1):\r\n\r\n            # Take the entry from the previous row\r\n            dp[i][j] = dp[i - 1][j]\r\n\r\n            # If we include this element.\r\n            if (j >= arr[i - 1]):\r\n                dp[i][j] = (dp[i][j] + dp[i - 1][j - arr[i - 1]]) % mod\r\n\r\n    #  Return the answer\r\n    return dp[n][target]\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}