{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13341,
            "title": "Party Over",
            "titleSlug": "party-over_1558421",
            "content": "<h4 id=\"ninja-is-coming-after-a-long-party-to-his-home-but-he-faces-a-monster-while-returning-monster-puts-up-a-condition-to-ninja-in-order-to-free-him-the-monster-gives-him-n-strings-and-asks-him-to-sort-them-however-he-adds-an-extra-condition-to-him\">Ninja is coming after a long party to his home, but he faces a monster while returning. Monster puts up a condition to Ninja in order to free him. The monster gives him \u2018n\u2019 strings and asks him to sort them. However, he adds an extra condition to him.</h4>\n\n<h4 id=\"since-the-monster-knows-that-ninja-could-do-it-easily-the-monster-wants-him-to-sort-them-using-the-last-letter-of-each-string-if-there-are-strings-with-the-same-last-character-sort-them-based-on-their-second-last-character-and-so-on\">Since the monster knows that Ninja could do it easily, the monster wants him to sort them using the last letter of each string. If there are strings with the same last character, sort them based on their second last character and so on.</h4>\n\n<h4 id=\"ninja-gets-totally-confused-he-asks-you-to-solve-the-problem-can-you-help-ninja-figure-out-the-correct-order-of-strings\">Ninja gets totally confused, he asks you to solve the problem. Can you help Ninja figure out the correct order of strings?</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T,\u2019 denoting the number of test cases. The test cases follow.\n\nThe first line of each test case contains a number \u2018n\u2019 denoting the number of strings.\n\nThe second line of each test case contains \u2018n\u2019 space-separated strings that the monster gave to Ninja.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the strings sorted according to the last character.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= n &lt;= 10^3\n1 &lt;= size of string &lt;= 10^2\n\nWhere &#39;T\u2019 is the number of test cases, \u2018n\u2019 denotes the number of strings\n\nTime Limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n5\nabc abd aba xyb cdg\n3\njog oop nop\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>aba xyb abc abd cdg\njog nop oop\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>In the first test case, the given strings are [\u201cabc\u201d,\u201dabd\u201d,\u201dxyb\u201d,\u201dcdg\u201d], the last character of strings are: \u2018c\u2019,\u2019d\u2019,\u2019a\u2019,\u2019b\u2019,\u2019g\u2019. So their sorted order is: \u2018a\u2019,\u2019b\u2019,\u2019c\u2019,\u2019d\u2019,\u2019g\u2019. Hence the sorted order of strings are:\u201caba\u201d,\u201dxyb\u201d,\u201dabc\u201d,\u201dabd\u201d,\u201dcdg\u201d.\n\nIn the second test case, the given strings are [\u201cjog\u201d,\u201dnop\u201d,\u201doop\u201d] the last characters of strings are: \u2018g\u2019,\u2019p\u2019,\u2019p\u2019.So their sorted order is : \u2018g\u2019,\u2019p\u2019,\u2019p\u2019. As we can see for strings \u201coop\u201d and \u201cnop\u201d, their last character matches; we need to check from the second previous character till we find a mismatched character and sort them accordingly. Hence the sorted order of strings are: \u201cjog\u201d,\u201d nop\u201d,\u201d oop\u201d.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n4\ntruck bus car auto\n3\nteacher student headmaster\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>truck auto car bus\nteacher headmaster student\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2:</h5>\n\n<pre><code>In the first test case, the given strings are [\u201ctruck\u201d,\u201dbus\u201d,\u201dcar\u201d,\u201dauto\u201d], the last character of strings are: \u2018k\u2019,\u2019s\u2019,\u2019r\u2019,\u2019o\u2019.So their sorted order is: \u2018k\u2019,\u2019o\u2019,\u2019r\u2019,\u2019s\u2019\u2019. Hence the sorted order of strings are:\u201ctruck\u201d,\u201dauto\u201d,\u201dcar\u201d,\u201dbus\u201d.\n\nIn the second test case, the given strings are [\u201cteacher\u201d,\u201dstudent\u201d,\u201dheadmaster\u201d] the last characters of strings are: \u2018r\u2019,\u2019t\u2019,\u2019r\u2019.So their sorted order is : \u2018r\u2019,\u2019r\u2019,\u2019t\u2019. As we can see for strings \u201cteacher\u201d and \u201cheadmaster\u201d, their last character matches; we need to check from the second previous character till we find a mismatched character and sort them accordingly. Hence the sorted order of strings are: \u201cteacher\u201d,\u201d headmaster\u201d,\u201dstudent\u201d.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a set of 'n' strings, sort them in descending order based on their last characters. If two strings have the same last character, compare their second-to-last characters, and so on, until a difference is found or the strings are exhausted.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= n <= 10^3",
                    "1 <= size of string <= 10^2",
                    "'T' is the number of test cases, \u2018n\u2019 denotes the number of strings",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\nabc abd aba xyb cdg",
                        "output": "aba xyb abc abd cdg",
                        "explanation": "The strings are sorted based on their last characters. 'aba' comes first as 'a' is the smallest last character, followed by 'xyb' as 'b' is next. 'abc' and 'abd' come before 'cdg' based on their last characters, 'c' and 'd' respectively, compared to 'g' in 'cdg'."
                    },
                    {
                        "input": "3\njog oop nop",
                        "output": "jog nop oop",
                        "explanation": "The strings are sorted based on their last characters. 'jog' comes first as 'g' is the smallest last character, followed by 'nop' and 'oop' which ends in 'p'. Since 'nop' and 'oop' ends with same character, they are sorted based on their second last character, and hence 'nop' comes before 'oop'"
                    },
                    {
                        "input": "4\ntruck bus car auto",
                        "output": "truck auto car bus",
                        "explanation": "The strings are sorted based on their last characters. 'truck' comes first as 'k' is the smallest last character, followed by 'auto' as 'o' is next. 'car' and 'bus' come last as 'r' and 's' are the largest characters."
                    },
                    {
                        "input": "3\nteacher student headmaster",
                        "output": "teacher headmaster student",
                        "explanation": "The strings 'teacher' and 'headmaster' both end with 'r', so the algorithm compares the next previous character to determine the correct order. Since 'e' comes before 'e', the string 'teacher' precedes 'headmaster'. 'student' comes after both as it ends with 't', which is larger than 'r'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Will it be feasible to reverse all the strings and then sort them?</p>",
            "<p>Will it be feasible to sort them using a comparator?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}