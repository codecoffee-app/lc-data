{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9764,
            "title": "Pascal's Triangle",
            "titleSlug": "pascal-s-triangle_1089580",
            "content": "<h4 id=\"you-are-given-an-integer-n-your-task-is-to-return-a-2-d-arraylist-containing-the-pascal-s-triangle-till-the-row-n\">You are given an integer N. Your task is to return a 2-D ArrayList containing the pascal\u2019s triangle till the row N.</h4>\n\n<h4 id=\"a-pascals-triangle-is-a-triangular-array-constructed-by-summing-adjacent-elements-in-preceding-rows-pascals-triangle-contains-the-values-of-the-binomial-coefficient-for-example-in-the-figure-below\">A Pascal&#39;s triangle is a triangular array constructed by summing adjacent elements in preceding rows. Pascal&#39;s triangle contains the values of the binomial coefficient. For example in the figure below.</h4>\n\n<p><img src=\"https://files.codingninjas.in/image1-7089.png\" alt=\"\"></p>\n\n<h4 id=\"for-example-given-integer-n-4-then-you-have-to-print\">For example, given integer N= 4 then you have to print.</h4>\n\n<pre><code>1  \n1 1 \n1 2 1 \n1 3 3 1\n\nHere for the third row, you will see that the second element is the summation of the above two-row elements i.e. 2=1+1, and similarly for row three 3 = 1+2 and 3 = 1+2.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe first line of each test case contains a single integer N denoting the row till which you have to print the pascal\u2019s triangle.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return the 2-D array/list containing the pascal\u2019s triangle till the row N.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 40\n1 &lt;= N &lt;= 50\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3\n1\n2\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n1 \n1 1 \n1 \n1 1 \n1 2 1 \n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-1\">Explanation of The Sample Input 1:</h5>\n\n<pre><code>For the first test case:\nThe given integer N = 1 you have to print the triangle till row 1 so you just have to output 1.\n\nFor the second test case:\nThe given integer N = 2 you have to print the triangle till row 2 so you have to output \n1\n1 1\n\nFor the third test case\nThe given integer N = 3 you have to print the triangle till row 3 so you have to output \n1\n1 1\n1 2 1\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3\n4\n5\n6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 \n1 1 \n1 2 1\n1 3 3 1 \n1 \n1 1 \n1 2 1 \n1 3 3 1 \n1 4 6 4 1\n1 \n1 1 \n1 2 1 \n1 3 3 1 \n1 4 6 4 1\n1 5 10 10 5 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 365,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, generate Pascal's triangle up to the Nth row. Pascal's triangle is a triangular array where each number is the sum of the two numbers directly above it.",
                "constraints": [
                    "1 <= T <= 40",
                    "1 <= N <= 50",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n1",
                        "output": "1",
                        "explanation": "For N = 1, the triangle consists of only the first row, which is [1]."
                    },
                    {
                        "input": "1\n2",
                        "output": "1\n1 1",
                        "explanation": "For N = 2, the triangle has two rows: [1] and [1, 1]."
                    },
                    {
                        "input": "1\n3",
                        "output": "1\n1 1\n1 2 1",
                        "explanation": "For N = 3, the triangle has three rows: [1], [1, 1], and [1, 2, 1]. The '2' in the third row is calculated as 1 + 1 from the second row."
                    },
                    {
                        "input": "1\n4",
                        "output": "1\n1 1\n1 2 1\n1 3 3 1",
                        "explanation": "For N = 4, the triangle has four rows: [1], [1, 1], [1, 2, 1], and [1, 3, 3, 1]."
                    },
                    {
                        "input": "1\n5",
                        "output": "1\n1 1\n1 2 1\n1 3 3 1\n1 4 6 4 1",
                        "explanation": "For N = 5, the triangle has five rows: [1], [1, 1], [1, 2, 1], [1, 3, 3, 1] and [1, 4, 6, 4, 1]."
                    },
                    {
                        "input": "1\n6",
                        "output": "1\n1 1\n1 2 1\n1 3 3 1\n1 4 6 4 1\n1 5 10 10 5 1",
                        "explanation": "For N = 6, the triangle has six rows: [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] and [1, 5, 10, 10, 5, 1]."
                    },
                    {
                        "input": "3\n1\n2\n3",
                        "output": "1\n1\n1 1\n1\n1 1\n1 2 1",
                        "explanation": null
                    },
                    {
                        "input": "3\n4\n5\n6",
                        "output": "1\n1 1\n1 2 1\n1 3 3 1\n1\n1 1\n1 2 1\n1 3 3 1\n1 4 6 4 1\n1\n1 1\n1 2 1\n1 3 3 1\n1 4 6 4 1\n1 5 10 10 5 1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think about how you get the values of coefficients recursively.</p>",
            "<p>Try to think about the definition of pascals triangle.</p>",
            "<p>Try to think about previous coefficients in order to not recalculate the coefficients.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n\tTime Complexity: O(N^2)\n\tSpace complexity: O(1)\n\t\n\tWhere N denotes the number of Rows.\n*/\n\n#include<vector>\n\nvector < vector < long long int >> printPascal(int n) {\n    vector < vector < long long int >> triangle;\n    vector < long long int > temp;\n\n    for (int i = 1; i <= n; i++) {\n        long long int rCe = 1;\n        temp.clear();\n        for (int j = 1; j <= i; j++) {\n            temp.push_back(rCe);\n            rCe = rCe * (i - j) / j;\n        }\n\n        triangle.push_back(temp);\n    }\n    return triangle;\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n\tTime Complexity: O(N^2)\n\tSpace complexity: O(1)\n\t\n\tWhere N denotes the number of Rows.\n'''\n\ndef printPascal(n):\n    \n    triangle = []\n    \n    for row in range(1, n+1):\n        \n        rCe = 1\n        add = []\n        \n        for i in range(1, row+1):\n            \n            add.append(rCe)\n            rCe = rCe * (row - i) // i\n            \n        triangle.append(add)\n        \n    return triangle\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\n\tTime Complexity: O(N^2)\n\tSpace complexity: O(1)\n\t\n\tWhere N denotes the number of Rows.\n*/\n\nimport java.util.ArrayList;\n\npublic class Solution {\n\tpublic static ArrayList<ArrayList<Long>> printPascal(int n) {\n\t\tArrayList<ArrayList<Long>> triangle = new ArrayList<ArrayList<Long>>();\n\n\t\tfor (int row = 1; row <= n; row++) {\n\t\t\tlong rCe = 1;\n\t\t\tArrayList<Long> add = new ArrayList<Long>();\n\t\t\tfor (int i = 1; i <= row; i++) {\n\n\t\t\t\tadd.add(rCe);\n\t\t\t\trCe = rCe * (row - (long) i) / (long) i;\n\t\t\t}\n\t\t\ttriangle.add(add);\n\t\t}\n\t\treturn triangle;\n\t}\n}\n\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}