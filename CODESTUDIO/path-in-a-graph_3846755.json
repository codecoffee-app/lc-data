{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 17338,
            "title": "Path In A Graph",
            "titleSlug": "path-in-a-graph_3846755",
            "content": "<h4 id=\"you-are-given-an-undirected-graph-consisting-of-n-nodes-from-0-to-n-1-you-are-given-a-list-edges-of-size-m-consisting-of-all-the-edges-of-this-undirected-graph-and-two-nodes-source-and-destination-of-this-graph-determine-whether-there-exists-a-path-from-node-source-to-node-destination-in-other-words-check-whether-there-exists-a-path-from-node-source-to-node-destination-by-moving-along-the-edges-of-the-graph\">You are given an undirected graph consisting of \u2018N\u2019 nodes from 0 to \u2018N\u2019 - 1. You are given a list \u2018EDGES\u2019 of size \u2018M\u2019, consisting of all the edges of this undirected graph, and two nodes \u2018SOURCE\u2019 and \u2018DESTINATION\u2019 of this graph. Determine whether there exists a path from node \u2018SOURCE\u2019 to node \u2018DESTINATION\u2019. In other words, check whether there exists a path from node \u2018SOURCE\u2019 to node \u2018DESTINATION\u2019 by moving along the edges of the graph.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The graph has no self-edges, no parallel edges.\nThe graph may not be connected.\n</code></pre>\n\n<h5 id=\"for-example\">For Example,</h5>\n\n<pre><code>If \u2018N\u2019 = 7, \u2018M\u2019 = 5, \u2018SOURCE\u2019 = 1, \u2018DESTINATION\u2019 = 5, EDGES = [ [2, 4], [2, 5],[3, 5],[3, 6],[4, 5] ].\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-14889.png\" alt=\"\"></p>\n\n<pre><code>Here, you can see that the graph is not connected and there is no way we can reach node 5 from node 1 as they both are in different connected components. Hence, the output is \u201cNo\u201d.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. then \u2018T\u2019 test cases follow.\n\nThe first line of each test case consists of four space-separated integers  \u2018N\u2019, \u2018M\u2019, \u2018SOURCE\u2019, \u2018DESTINATION\u2019, described in the problem statement.\n\nThen next \u2018M\u2019 lines follow in each test case. The ith line consists of two space-separated integers \u2018EDGES[i][0]\u2019 and \u2018EDGES[i][1]\u2019 representing that there is a undirected edge between nodes \u2018EDGES[i][0]\u2019 and \u2018EDGES[i][1]\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the \u201cYes\u201d if there exists a path from node \u2018SOURCE\u2019 to node \u2018DESTINATION\u2019 by moving along the edges of the graph, Otherwise, print \u201cNo\u201d.\n\nPrint a separate line for each test case.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 500\n1 &lt;= M &lt;= (N*(N-1)) / 2\n0 &lt;= \u2018SOURCE\u2019, \u2018DESTINATION\u2019 &lt;= N - 1\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n7 5 1 5\n2 5\n2 4\n3 5\n3 6\n4 5\n7 7 1 6\n0 1\n1 5\n2 5\n2 3\n5 3\n5 4\n6 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code> No\n Yes\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case, the graph will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-14889.png\" alt=\"\"></p>\n\n<pre><code>Here, you can see that the graph is not connected and there is no way such that we can reach node 5 from node 1 as they both are in different connected components. Hence, the output is \u201cNo\u201d.\n\nFor the second test case, the graph will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-1-14888.png\" alt=\"\"></p>\n\n<pre><code>Here, source = 1 , destination = 6, We can reach node 6 from node 1 as 1 -&gt; 5 -&gt; 3 -&gt;6.\nHence, the output is \u201cYes\u201d.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n6 8 5 1\n0 4\n0 5\n1 2\n1 5\n3 5\n3 4\n4 2\n5 2\n10 14 4 8\n0 2\n1 8\n1 0\n2 6\n3 1\n3 7\n4 7\n5 7\n5 6\n6 7\n8 2\n8 0\n9 2\n9 6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>Yes\nYes\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph with 'N' nodes (numbered 0 to N-1) and a list of edges 'EDGES', determine if there exists a path between a given 'SOURCE' node and a 'DESTINATION' node. Implement a function that returns 'true' if a path exists and 'false' otherwise.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 500",
                    "1 <= M <= (N*(N-1)) / 2",
                    "0 <= SOURCE, DESTINATION <= N - 1"
                ],
                "testcases": [
                    {
                        "input": "n = 7, edges = [[2, 5], [2, 4], [3, 5], [3, 6], [4, 5]], source = 1, destination = 5",
                        "output": "false",
                        "explanation": "There is no path from node 1 to node 5 in the given graph. Node 1 is isolated from the component containing node 5."
                    },
                    {
                        "input": "n = 7, edges = [[0, 1], [1, 5], [2, 5], [2, 3], [5, 3], [5, 4], [6, 3]], source = 1, destination = 6",
                        "output": "true",
                        "explanation": "There is a path from node 1 to node 6: 1 -> 5 -> 3 -> 6."
                    },
                    {
                        "input": "n = 6, edges = [[0, 4], [0, 5], [1, 2], [1, 5], [3, 5], [3, 4], [4, 2], [5, 2]], source = 5, destination = 1",
                        "output": "true",
                        "explanation": "There is a path from node 5 to node 1: 5 -> 1. Note that the graph is undirected, thus we can traverse both direction along one edge"
                    },
                    {
                        "input": "n = 10, edges = [[0, 2], [1, 8], [1, 0], [2, 6], [3, 1], [3, 7], [4, 7], [5, 7], [5, 6], [6, 7], [8, 2], [8, 0], [9, 2], [9, 6]], source = 4, destination = 8",
                        "output": "true",
                        "explanation": "There is a path from node 4 to node 8: 4 -> 7 -> 3 -> 1 -> 8."
                    },
                    {
                        "input": "n = 5, edges = [], source = 0, destination = 4",
                        "output": "false",
                        "explanation": "There is no edge exist. Therefore, there is no path connecting node 0 to node 4"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you make a recursive function that traverses the different paths in the graph?</p>",
            "<p>Can you think of doing it iteratively to avoid stack size problems?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}