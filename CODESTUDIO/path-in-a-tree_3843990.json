{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 17279,
            "title": "Path In A Tree",
            "titleSlug": "path-in-a-tree_3843990",
            "content": "<h4 id=\"you-are-given-a-binary-tree-with-n-number-of-nodes-and-a-node-x-your-task-is-to-print-the-path-from-the-root-node-to-the-given-node-x\">You are given a binary tree with \u2018N\u2019 number of nodes and a node \u2018X\u2019. Your task is to print the path from the root node to the given node \u2018X\u2019.</h4>\n\n<h4 id=\"a-binary-tree-is-a-hierarchical-data-structure-in-which-each-node-has-at-most-two-children\">A binary tree is a hierarchical data structure in which each node has at most two children.</h4>\n\n<p><img src=\"https://files.codingninjas.in/tree21-14885.png\" alt=\"\"></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Here, for \u2018X \u2019= 7, the output will be 1 3 7.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an Integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow. \n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space. If any node does not have a left or right child, take -1 in its place. Refer to the example below. \n\nThe second line of each test case contains a single integer \u2018X\u2019, denoting the value of the node you have to find.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-14882.png\" alt=\"\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n\nNote: The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a list of integers denoting the path from the root to the node \u2018X\u2019.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n\nNo two nodes in the tree have the same data values.\n\nYou can assume that there always exists a node with data value \u2018X\u2019 in the given tree.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10000\n1 &lt;= X &lt;= N\nAll the node values will be in a range from 1 to N.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n7\n3 2 1 -1 -1 -1 -1\n1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>1 3 7\n3 1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case, the tree will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree21-14885.png\" alt=\"\"></p>\n\n<pre><code>Here, for \u2018X \u2019= 7, the output will be 1 3 7.\n\n\nFor the second test case, the tree will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree22-14886.png\" alt=\"\"></p>\n\n<pre><code>Here, for \u2018X \u2019= 1, the output will be 3 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 3 -1 -1 4 2 -1 -1 -1\n1\n4 -1 1 2 -1 -1 3 -1 -1\n1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>1\n4 1 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 29,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree represented by its root node, and a target node value 'x', find and return the path from the root node to the node with value 'x'. The path should be represented as a vector of integers, where each integer represents the data of a node along the path. Assume that the node with value 'x' always exists in the tree and that no two nodes have the same data value.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10000",
                    "1 <= X <= N",
                    "All the node values will be in a range from 1 to N."
                ],
                "testcases": [
                    {
                        "input": "root=[1,2,3,4,5,6,7,-1,-1,-1,-1,-1,-1,-1,-1], x=7",
                        "output": "1 3 7",
                        "explanation": "The path from the root (1) to the node with value 7 is 1 -> 3 -> 7."
                    },
                    {
                        "input": "root=[3,2,1,-1,-1,-1,-1], x=1",
                        "output": "3 1",
                        "explanation": "The path from the root (3) to the node with value 1 is 3 -> 1."
                    },
                    {
                        "input": "root=[1,3,-1,-1,4,2,-1,-1,-1], x=1",
                        "output": "1",
                        "explanation": "The target node is the root itself, so the path is just the root's value: 1."
                    },
                    {
                        "input": "root=[4,-1,1,2,-1,-1,3,-1,-1], x=1",
                        "output": "4 1",
                        "explanation": "The path from the root (4) to the node with value 1 is 4 -> 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you make a recursive function that traverses the different paths in the binary tree?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}