{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12525,
            "title": "Path In Zigzag Labelled Binary Tree",
            "titleSlug": "path-in-zigzag-labelled-binary-tree_1463978",
            "content": "<h4 id=\"ninja-is-chasing-an-enemy-hiding-in-a-labeled-node-label-in-an-infinite-binary-tree-where-every-node-has-two-children-the-nodes-are-labeled-in-row-order-but-the-enemy-has-shifted-the-order-of-the-nodes-of-the-tree-to-hide-from-the-ninja-in-such-a-way-that-now-in-the-odd-numbered-level-ie-the-first-third-fifth-the-labeling-is-left-to-right-while-in-the-even-numbered-level-second-fourth-sixth-the-labeling-is-right-to-left\">Ninja is chasing an enemy hiding in a labeled node &#39;LABEL&#39; in an infinite binary tree where every node has two children. The nodes are labeled in row order but the enemy has shifted the order of the nodes of the tree to hide from the Ninja in such a way that now in the odd-numbered level (ie., the first, third, fifth,...), the labeling is left to right, while in the even-numbered level (second, fourth, sixth,...), the labeling is right to left.</h4>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000416_1618570910_Path_In_ZigZag_Tree.png\" alt=\"\"></p>\n\n<h4 id=\"now-given-the-label-of-the-node-in-the-tree-where-the-enemy-is-hiding-return-the-labels-of-the-nodes-in-the-shortest-path-from-the-root-of-the-tree-to-the-node-label-which-ninja-should-follow-to-reach-and-defeat-the-enemy-quickly\">Now given the \u2018LABEL\u2019 of the node in the tree where the enemy is hiding, return the labels of the nodes in the shortest path from the root of the tree to the node &#39;LABEL&#39; which Ninja should follow to reach and defeat the enemy quickly.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000417_1618599937_path_in_zigzag_tree_example.png\" alt=\"\"></p>\n\n<pre><code>Suppose given \u2018LABEL\u2019 is \u201814\u2019 then:\nThe shortest path in the zigzag binary tree from the root where the Ninja starts to reach the node with the given label where the enemy is hiding is 1 -&gt; 3 -&gt; 4 -&gt; 14. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains a single integer \u2018T\u2019 denoting the number of test cases given. Then next \u2018T\u2019 lines follow:\n\nThe first line of each test case input contains a single integer i.e. the \u2018LABEL\u2019 of the node where the enemy is hiding.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, print a single line containing space-separated integers denoting the labels of the nodes in the shortest path from the root of the tree to the node &#39;LABEL&#39; which Ninja can follow to reach and defeat the enemy quickly. \nPrint the list/vector of the elements from the root to the node &#39;LABEL&#39;.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10 ^ 4\n1 &lt;= \u2018LABEL\u2019 &lt;= 10 ^ 6\n\nTime Limit: 1 sec.\n\nWhere &#39;T&#39; denotes the number of test cases and &#39;LABEL&#39; denotes the label of the node the enemy is hiding in.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n26\n44\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>1 2 6 10 26\n1 2 6 11 25 44\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>Test Case 1:\n\nThe output [1, 2, 6, 10, 26] is the required shortest list of labels which Ninja can travel to reach and defeat the enemy.\n\n\nTest Case 2:\n\nThe output [1, 2, 6, 11, 25, 44] is the required shortest list of labels which Ninja can travel to reach and defeat the enemy.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n14\n50\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>1 3 4 14\n1 3 5 12 22 50\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "In an infinite binary tree, nodes are labeled in row order, but with a twist: odd-numbered levels are labeled left-to-right, while even-numbered levels are labeled right-to-left. Given the label of a node in this tree, find the shortest path (list of node labels) from the root (node 1) to the given node.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 10 ^ 4",
                    "1 <= \u2018LABEL\u2019 <= 10 ^ 6",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "label = 26",
                        "output": "1 2 6 10 26",
                        "explanation": "The shortest path from the root (1) to node 26 is 1 -> 2 -> 6 -> 10 -> 26."
                    },
                    {
                        "input": "label = 44",
                        "output": "1 2 6 11 25 44",
                        "explanation": "The shortest path from the root (1) to node 44 is 1 -> 2 -> 6 -> 11 -> 25 -> 44."
                    },
                    {
                        "input": "label = 14",
                        "output": "1 3 4 14",
                        "explanation": "The shortest path from the root (1) to node 14 is 1 -> 3 -> 4 -> 14."
                    },
                    {
                        "input": "label = 50",
                        "output": "1 3 5 12 22 50",
                        "explanation": "The shortest path from the root (1) to node 50 is 1 -> 3 -> 5 -> 12 -> 22 -> 50."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to first build a tree that contains nodes for all the values up until the \u201clabel\u201d which is given as input.</p>",
            "<p>Try to use the fact that for each depth \u2018d\u2019 (level) of the tree, values lie from 2 ^ d to 2 ^ (d + 1) - 1.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}