{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8915,
            "title": "Path Queries",
            "titleSlug": "path-queries_920520",
            "content": "<h4 id=\"you-are-given-a-weighted-undirected-graph-with-v-vertices-numbered-from-1-to-v-and-e-bidirectional-edges\">You are given a weighted, undirected graph with \u2018V\u2019 vertices numbered from 1 to \u2018V\u2019 and \u2018E\u2019 bidirectional edges.</h4>\n\n<h4 id=\"you-have-to-answer-q-queries-every-query-has-two-integers-u-v-representing-the-vertices-your-task-is-to-print-the-shortest-distance-between-u-and-v-and-print-1-if-there-is-no-path\">You have to answer \u2018Q\u2019 queries. Every query has two integers, \u2018u\u2019, \u2018v\u2019, representing the vertices. Your task is to print the shortest distance between \u2018u\u2019 and \u2018v\u2019 and print -1 if there is no path.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000467_1625648108_3_Node_graph.png\" alt=\"altImage\"></p>\n\n<pre><code>For the given graph, we have to find the shortest distance between vertices 1 and 3. \nThe shortest distance between 1 and 3 is 2 (via 1 &lt;-&gt; 2&lt;-&gt; 3). Hence, the answer is 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains three integers \u2018V\u2019, \u2018E\u2019, \u2018Q\u2019, denoting the number of vertices, the number of edges in the graph, and the number of queries.\n\nThe Next \u2018E\u2019 lines of each test case have three integers \u2018u\u2019,\u2019v\u2019,\u2019w\u2019 corresponding to vertices \u2018u\u2019 and \u2018v\u2019 are connected with a weight \u2018w\u2019.\n\nThe Next \u2018Q\u2019 lines of each test case have two integers, \u2018u\u2019,\u2019v\u2019 representing two vertices.      \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print \u2018Q\u2019 lines, each line has one integer corresponding to the minimum distance for the given query.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= V &lt;= 100\n1 &lt;= E &lt;= (V *(V - 1)) / 2\n1 &lt;= Q &lt;= 10^5 \n1 &lt;= u , v &lt;= V\n1 &lt;= w &lt;= 10^6\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 3 1\n1 2 1\n2 3 1\n1 3 5\n1 3\n4 3 2\n1 2 1\n2 3 5\n1 3 3\n2 4\n1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n-1\n3 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case, \nThe shortest distance between 1 and 3 is 2 (via 1 &lt;-&gt; 2&lt;-&gt; 3). Hence, the answer is 2.\n\nFor the second test case,\nFor the first query, -1 because vertex 4 is unreachable from vertex 2. Hence, the answer is -1.\nFor the second query, The shortest distance between 1 and 3 is 3 (via 1&lt;-&gt; 3). Hence, the answer is 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4 3 1\n1 2 1\n2 3 10\n4 1 5\n1 1\n4 2 2\n1 3 3\n1 2 1\n2 3\n4 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0\n4\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a weighted, undirected graph with 'V' vertices (numbered from 1 to 'V') and 'E' bidirectional edges, determine the shortest distance between two given vertices for 'Q' queries. If no path exists between the queried vertices, return -1.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= V <= 100",
                    "1 <= E <= (V *(V - 1)) / 2",
                    "1 <= Q <= 10^5",
                    "1 <= u, v <= V",
                    "1 <= w <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "v = 3, e = 3, q = 1, edges = [[1, 2, 1], [2, 3, 1], [1, 3, 5]], queries = [[1, 3]]",
                        "output": "2",
                        "explanation": "The shortest distance between vertices 1 and 3 is 2 (via 1 <-> 2 <-> 3)."
                    },
                    {
                        "input": "v = 4, e = 3, q = 2, edges = [[1, 2, 1], [2, 3, 5], [1, 3, 3]], queries = [[2, 4], [1, 3]]",
                        "output": "-1, 3",
                        "explanation": "For the first query, vertex 4 is unreachable from vertex 2, so the distance is -1.  For the second query, the shortest distance between 1 and 3 is 3 (via 1 <-> 3)."
                    },
                    {
                        "input": "v = 4, e = 3, q = 1, edges = [[1, 2, 1], [2, 3, 10], [4, 1, 5]], queries = [[1, 1]]",
                        "output": "0",
                        "explanation": "The shortest distance between a vertex to itself is 0."
                    },
                    {
                        "input": "v = 4, e = 2, q = 2, edges = [[1, 3, 3], [1, 2, 1]], queries = [[2, 3], [4, 2]]",
                        "output": "4, -1",
                        "explanation": "The path between 2 and 3 is 2 -> 1 -> 3, the cost is 1 + 3 = 4.  Node 4 is not reachable from 2, therefore -1."
                    },
                    {
                        "input": "v = 5, e = 4, q = 1, edges = [[1, 2, 2], [2, 3, 3], [3, 4, 4], [4, 5, 5]], queries = [[1, 5]]",
                        "output": "-1",
                        "explanation": "The graph is undirected, but vertices 1 and 5 are not connected. It's essential to realize there could be unreachable vertex from the given input graph."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you use any algorithm for a single-source shortest path?</p>",
            "<p>Can you use a dynamic programming approach?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}