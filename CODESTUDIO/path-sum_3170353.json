{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16515,
            "title": "Path Sum",
            "titleSlug": "path-sum_3170353",
            "content": "<h4 id=\"you-are-given-the-root-node-of-a-binary-tree-consisting-of-n-nodes-and-an-integer-value-target-your-task-is-to-find-the-number-of-leaf-nodes-in-the-given-binary-tree-such-that-the-sum-of-all-nodes-from-the-root-to-leaf-is-equal-to-target\">You are given the root node of a binary tree consisting of \u2018N\u2019 nodes and an integer value \u2018TARGET\u2019. Your task is to find the number of leaf nodes in the given binary tree such that the sum of all nodes from the root to leaf is equal to \u2018TARGET\u2019.</h4>\n\n<h4 id=\"a-leaf-node-is-defined-as-a-node-having-no-child-nodes\">A leaf node is defined as a node having no child nodes.</h4>\n\n<h4 id=\"you-are-given-a-root-node-root-your-task-is-to-return-the-number-of-leaf-nodes-satisfying-the-given-condition\">You are given a root node \u2018ROOT\u2019.Your task is to return the number of leaf nodes satisfying the given condition.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation : \nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. \n\nThe second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space. If any node does not have a left or right child, take -1 in its place. Refer to the example for further clarification.\nThe second line of each test case contains an integer corresponding to \u2018TARGET\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the preorder traversal of the given tree.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^6\n1 &lt;= nodeVal &lt;=10^9\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 1 9 -1 -1 6 10 -1 -1 -1 -1\n4\n2 1 4 -1 -1 3 -1 -1 -1\n11\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case,\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000523_1635450208_tree2.png\" alt=\"Example\"></p>\n\n<pre><code>Here, only one path from the root to leaf node [3,1] sum is equal to  \u2018TARGET\u2019.Hence, the answer is 1. \n\nFor the second test case, \n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000498_1630239691_texNPdmavmHBmwUX.png\" alt=\"Example\"></p>\n\n<pre><code>There is no path from the root to leaf having the sum equal to \u2018TARGET\u2019.Hence,  the answer is 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 -1 4 -1 10 -1 -1 \n17\n4 -1 5 5 -1 2 -1 3 -1 -1 -9 -1 -1 \n10\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root node of a binary tree and an integer target value, determine the number of leaf nodes for which the sum of all nodes along the path from the root to that leaf equals the target. A leaf node is defined as a node without any children. You are given a root node 'ROOT'. Return the count of leaf nodes satisfying the given condition.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^6",
                    "1 <= nodeVal <= 10^9",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 1 9 -1 -1 6 10 -1 -1 -1 -1\n4",
                        "output": "1",
                        "explanation": "The tree can be represented as follows:\n\n    3\n   / \\\n  1   9\n     /  \\\n    6   10\n\nThe path from root to leaf [3, 1] sums to 4, which equals the target. Therefore, the count is 1."
                    },
                    {
                        "input": "2 1 4 -1 -1 3 -1 -1 -1\n11",
                        "output": "0",
                        "explanation": "The tree can be represented as follows:\n\n    2\n   / \\\n  1   4\n     / \\\n    3  null\n\nThere are no root-to-leaf paths with a sum of 11.  Therefore, the count is 0."
                    },
                    {
                        "input": "3 -1 4 -1 10 -1 -1 \n17",
                        "output": "1",
                        "explanation": "The tree can be represented as follows:\n\n    3\n     \\\n      4\n       \\\n        10\n\nThe path from root to leaf [3, 4, 10] sums to 17, which equals the target. Therefore, the count is 1."
                    },
                    {
                        "input": "4 -1 5 5 -1 2 -1 3 -1 -1 -9 -1 -1 \n10",
                        "output": "1",
                        "explanation": "The tree can be represented as follows:\n\n        4\n         \\\n          5\n         / \\\n        2    3\n           /  \\\n          -9  null\n\nThe path from root to leaf [4, 5, 3, -9] sums to 3 which is not the target. The path from root to leaf [4, 5, 2] sums to 11 which is not the target. There are no other root-to-leaf paths. It seems there is some issue with the intended example test case from the orginal prompt for the given tree and output, but if the last node was '1' instead of '-9', then [4,5,2,1] will sum to 12, there no path sums to 10. But from looking at the problem statment, the '5 5' and '3 -9' from the last level is assumed left to right. We are expected to get output '1'. Let's assume the input is 4 -> 5 -> 5 , 2, 3 . Therefore the paths can be 4->5->5 or 4->5->2 or 4->5->3 the total sum will be 14, 11, 12 which is not equal to the target 10. Thus, there is no leaf node so the answer is 0.\nLet's assume there is an edge case where there is a possible value of leaf node '1'. The path will be [4, 5, 1]. The sum will be 10. Thus the answer would be '1'. However, based on what's given, the expected output '1' is not logical."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to track the required sum.</p>",
            "<p>Can you use any iterative method?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}