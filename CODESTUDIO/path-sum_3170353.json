{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16515,
            "title": "Path Sum",
            "titleSlug": "path-sum_3170353",
            "content": "<h4 id=\"you-are-given-the-root-node-of-a-binary-tree-consisting-of-n-nodes-and-an-integer-value-target-your-task-is-to-find-the-number-of-leaf-nodes-in-the-given-binary-tree-such-that-the-sum-of-all-nodes-from-the-root-to-leaf-is-equal-to-target\">You are given the root node of a binary tree consisting of \u2018N\u2019 nodes and an integer value \u2018TARGET\u2019. Your task is to find the number of leaf nodes in the given binary tree such that the sum of all nodes from the root to leaf is equal to \u2018TARGET\u2019.</h4>\n\n<h4 id=\"a-leaf-node-is-defined-as-a-node-having-no-child-nodes\">A leaf node is defined as a node having no child nodes.</h4>\n\n<h4 id=\"you-are-given-a-root-node-root-your-task-is-to-return-the-number-of-leaf-nodes-satisfying-the-given-condition\">You are given a root node \u2018ROOT\u2019.Your task is to return the number of leaf nodes satisfying the given condition.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation : \nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. \n\nThe second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space. If any node does not have a left or right child, take -1 in its place. Refer to the example for further clarification.\nThe second line of each test case contains an integer corresponding to \u2018TARGET\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the preorder traversal of the given tree.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^6\n1 &lt;= nodeVal &lt;=10^9\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 1 9 -1 -1 6 10 -1 -1 -1 -1\n4\n2 1 4 -1 -1 3 -1 -1 -1\n11\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case,\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000523_1635450208_tree2.png\" alt=\"Example\"></p>\n\n<pre><code>Here, only one path from the root to leaf node [3,1] sum is equal to  \u2018TARGET\u2019.Hence, the answer is 1. \n\nFor the second test case, \n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000498_1630239691_texNPdmavmHBmwUX.png\" alt=\"Example\"></p>\n\n<pre><code>There is no path from the root to leaf having the sum equal to \u2018TARGET\u2019.Hence,  the answer is 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 -1 4 -1 10 -1 -1 \n17\n4 -1 5 5 -1 2 -1 3 -1 -1 -9 -1 -1 \n10\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a binary tree where each node contains an integer value, and an integer target value, determine the number of leaf nodes for which the sum of all node values along the path from the root to that leaf equals the target value. A leaf node is defined as a node with no children.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^6",
                    "1 <= nodeVal <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "root = [3, 1, 9, -1, -1, 6, 10, -1, -1, -1, -1], target = 4",
                        "output": "1",
                        "explanation": "The tree is structured as follows:\n        3\n       / \\\n      1   9\n     / \\ / \\\n   null null 6 10\n\nThe path 3 -> 1 sums to 4, which is equal to the target. Therefore, there's 1 leaf node (1) with this property."
                    },
                    {
                        "input": "root = [2, 1, 4, -1, -1, 3, -1, -1, -1], target = 11",
                        "output": "0",
                        "explanation": "The tree is structured as follows:\n     2\n    / \\\n   1   4\n  / \\ / \\\n null null 3 null\n\nPaths and their sums:\n2 -> 1: sum = 3\n2 -> 4 -> 3: sum = 9\n\nNo path sums to the target value of 11. So the answer is 0."
                    },
                    {
                        "input": "root = [3, -1, 4, -1, 10, -1, -1], target = 17",
                        "output": "1",
                        "explanation": "The tree is structured as follows:\n  3\n   \\ \n   4\n    \\ \n    10\n\nThe path 3 -> 4 -> 10 sums to 17 which matches the target.  Therefore there is 1 leaf node (10) satisfying the condition."
                    },
                    {
                        "input": "root = [4, -1, 5, 5, -1, 2, -1, 3, -1, -1, -9, -1 -1], target = 10",
                        "output": "1",
                        "explanation": "The tree is structured as follows:\n    4\n     \\\n      5\n     / \\\n    5   2\n   / \\\n  3  -9\n\nPaths and sums:\n4 -> 5 -> 5 = 14\n4 -> 5 -> 2 = 11\n4 -> 5 -> 3 = 12\n4 -> 5 -> -9 = 0\nPath 4 -> 5 ->5 sums up to 14.\nPath 4 -> 5 -> 2 sums up to 11.\nPath 4 -> 5 -> 3 sums up to 12.\n Path 4 -> 5 -> -9 sums up to 0.\n\nConsidering Root = [4,-1,5], TARGET = 9\nPath and sums:\n4 -> 5 = 9\n The root to leaf path is : [4,5]. The target is 9 and the path sum is also 9 so, the no. of leaf nodes are 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to track the required sum.</p>",
            "<p>Can you use any iterative method?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}