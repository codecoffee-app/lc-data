{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11130,
            "title": "Path visiting all nodes",
            "titleSlug": "path-visiting-all-nodes_1378017",
            "content": "<h4 id=\"you-are-given-a-connected-undirected-unweighted-graph-of-n-nodes-and-m-edges-such-that-there-is-only-one-undirected-edge-between-any-two-nodes-and-no-self-loop-your-task-is-to-find-the-length-of-the-shortest-path-that-visits-all-n-nodes-at-least-once\">You are given a connected undirected unweighted graph of \u2018N\u2019 nodes and \u2018M\u2019 edges, such that there is only one undirected edge between any two nodes and no self-loop. Your task is to find the length of the shortest path that visits all \u2018N\u2019 nodes at least once.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1) Here length of the path refers to the number of edges in that path.\n2) You can start and stop at any node.\n3) You can visit any node 0 or more times.\n4) You can use any given edge 0 or more times.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019 and \u2018M\u2019, where \u2018N\u2019 denotes the total number of nodes and \u2018M\u2019 denotes the total number of edges in the graph.\n\nThe next \u2018M\u2019 lines contain two space-separated integers, \u2018U\u2019 and \u2018V\u2019, where \u2018U\u2019 and \u2018V\u2019 represent the nodes that share a common undirected edge between them.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, print the length of the shortest path that visits all \u2018N\u2019 nodes in the given graph.  \nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10\nN - 1 &lt;= M &lt;= N * (N - 1) / 2\n0 &lt;= U, V &lt;= N - 1\n\nWhere \u2018T\u2019 is the number of test cases,  \u2018N\u2019 denotes the total number of nodes and \u2018M\u2019 denotes the total number of edges in the graph, and \u2018U\u2019 and \u2018V\u2019 denotes the nodes that share a common undirected edge between them.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code> You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n3\n3\n0 1\n0 2\n1 2\n4\n3\n0 1\n1 2\n2 3\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>2\n3\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h4>\n\n<pre><code>Test Case 1 :  \nThe given graph is shown below. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image4-8737.png\" alt=\"1\"></p>\n\n<pre><code>One possible shortest path that starts from node 0 ends at node 2 and visits all nodes is [0 - 1 - 2]\nThe number of edges in this path is 2. \nSo the length of the shortest path that visits all nodes in the given graph will be 2.\n\nTest Case 2 : \nThe given graph is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image3-8738.png\" alt=\"1\">     </p>\n\n<pre><code>One possible shortest path that starts from node 0 ends at node 3 and visits all nodes is [0 - 1 - 2 - 3]\nThe number of edges in this path is 3. \nSo the length of the shortest path that visits all nodes in the given graph will be 3.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>1\n5\n8\n0 1\n0 2\n0 3\n0 4\n1 2\n1 3\n1 4\n2 3\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>4\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h4>\n\n<pre><code>Test Case 1 :  \nThe given graph is shown below. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image2-8739.png\" alt=\"1\">    </p>\n\n<pre><code>One possible shortest path that starts from node 3 ends at node 4 and visits all nodes is shown below. The edges marked in red-colored are the edges that are traversed in the path.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image1-8740.png\" alt=\"1\"></p>\n\n<pre><code>The number of edges in the path [3 - 1 - 2 - 0 - 4] is 4. \nSo the length of the shortest path that visits all nodes in the given graph will be 4.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -7,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a connected, undirected, and unweighted graph with 'N' nodes and 'M' edges. There exists only one undirected edge between any two nodes, and there are no self-loops. Your task is to determine the minimum number of edges required to traverse all 'N' nodes at least once. You can start and end at any node and revisit nodes and edges as many times as needed.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10",
                    "N - 1 <= M <= N * (N - 1) / 2",
                    "0 <= U, V <= N - 1"
                ],
                "testcases": [
                    {
                        "input": "3\n3\n0 1\n0 2\n1 2\n4\n3\n0 1\n1 2\n2 3",
                        "output": "2\n3",
                        "explanation": "Test Case 1: A possible shortest path visiting all nodes in the graph [0-1-2] has a length of 2.\nTest Case 2: A possible shortest path visiting all nodes in the graph [0-1-2-3] has a length of 3."
                    },
                    {
                        "input": "1\n5\n8\n0 1\n0 2\n0 3\n0 4\n1 2\n1 3\n1 4\n2 3",
                        "output": "4",
                        "explanation": "A possible shortest path that visits all nodes [3 - 1 - 2 - 0 - 4] has a length of 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Do a depth-first search on the given graph and try all possible paths that visit all the \u2018N\u2019 nodes.</p>",
            "<p>Do a breadth-first traversal from all the \u2018N\u2019 nodes and return the length of the path that visits all the \u2018N\u2019 nodes first.</p>",
            "<p>Use iterative dynamic programming, where each state of the dp can be represented as the subset of nodes visited and the current node.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}