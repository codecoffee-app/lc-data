{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8778,
            "title": "Path with K Coins",
            "titleSlug": "path-with-k-coins_893399",
            "content": "<h4 id=\"the-ultimate-ninja-ankush-is-playing-a-game-where-he-has-a-grid-of-n-m-size-and-each-block-of-the-grid-has-some-coins-the-ultimate-ninja-ankush-is-carrying-a-knapsack-that-can-fit-only-k-coins-and-since-he-is-very-greedy-he-wants-to-know-the-number-of-paths-where-he-can-collect-exactly-k-coins-he-is-initially-at-the-top-left-and-wants-to-reach-bottom-right\">The Ultimate Ninja Ankush is playing a game where he has a grid of \u2018N\u2019 * \u2018M\u2019 size and each block of the grid has some coins. The Ultimate Ninja ankush is carrying a knapsack that can fit only \u2018K\u2019 coins, and since he is very greedy, he wants to know the number of paths where he can collect exactly \u2018K\u2019 coins. He is initially at the top-left and wants to reach bottom-right</h4>\n\n<h4 id=\"more-formally-return-the-number-of-paths-whose-total-sum-of-coins-is-equal-to-k-from-0-0-to-n-1-m-1\">More formally, return the number of paths whose total sum of coins is equal to \u2018K\u2019 from 0,0 to \u2018N - 1\u2019, \u2018M - 1\u2019.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Since the answer can be very large print the answer modulo 10 ^ 9 + 7.\n</code></pre>\n\n<h4 id=\"for-example\">For example</h4>\n\n<pre><code>Given:\n\u2018N\u2019 = 3, \u2018M\u2019 = 3\n\u2018Grid[][]\u2019 = [[5, 2, 5],\n              [3, 3, 1],\n              [3, 5, 1]]\n\u2018K\u2019 = 14.\nThe answer will be 1, since There is only 1 path that is from (0,0) to (0,1) to (0,2) to (1,2) to (2,2) this is because 5 + 2 + 5 + 1 + 1 = 14\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018M,\u2019 where \u2018M\u2019 is the number of rows in \u2018SEATS\u2019 and \u2018N\u2019 where \u2018N\u2019 is the number of columns in \u2018GRID\u2019.\n\nThe next \u2018M\u2019 lines of each test case contains \u2018N\u2019 space-separated integers, which denotes the number of coins at each point.\n\nThe next line of each test case contains a single integer \u2018K\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, You are supposed to return an integer that denotes the total number of paths with the sum of coins equal to \u2018K\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= \u2018N\u2019 &lt;= 20\n1 &lt;= \u2018M\u2019 &lt;= 20\n0 &lt;= \u2018K\u2019 &lt;= 1000\n\nTime Limit: 1sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n3 3\n5 2 5\n3 3 1\n3 5 1\n14\n2 3 \n1 2 1\n2 2 1\n6\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>1\n2  \n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>In the first test case, The answer will be 1, since There is only 1 path that is from (0,0) to (0,1) to (0,2) to (1,2) to (2,2) this is because 5 + 2 + 5 + 1 + 1 = 14\n\nIn the second test case, The answer will be 2, since there are 2 paths those are (0,0) to (1,0) to (1,1) to (1,2) and (0,0) to (0,1) to (1,1) to (1,2) and 1 + 2 + 2 + 1 = 6 in both cases.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n3 3\n1 2 3\n4 5 6\n1 2 3\n11\n2 2\n1 1\n1 1\n3\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>3\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "A ninja is playing a game on a grid of size N x M. Each cell in the grid contains a certain number of coins. The ninja starts at the top-left cell (0, 0) and wants to reach the bottom-right cell (N-1, M-1). The ninja has a knapsack that can hold a maximum of K coins.  The goal is to find the number of paths from the top-left to the bottom-right cell such that the total number of coins collected along the path is exactly K.  The ninja can only move down or right at each step. Return the number of such paths modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 20",
                    "1 <= M <= 20",
                    "0 <= K <= 1000",
                    "Time Limit: 1sec."
                ],
                "testcases": [
                    {
                        "input": "3 3\n5 2 5\n3 3 1\n3 5 1\n14",
                        "output": "1",
                        "explanation": "There is only one path from (0,0) to (2,2) with a total coin value of 14: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2), where 5 + 2 + 5 + 1 + 1 = 14."
                    },
                    {
                        "input": "2 3\n1 2 1\n2 2 1\n6",
                        "output": "2",
                        "explanation": "There are two paths from (0,0) to (1,2) with a total coin value of 6: (0,0) -> (1,0) -> (1,1) -> (1,2) and (0,0) -> (0,1) -> (1,1) -> (1,2). In both cases, the sum is 1 + 2 + 2 + 1 = 6."
                    },
                    {
                        "input": "3 3\n1 2 3\n4 5 6\n1 2 3\n11",
                        "output": "3",
                        "explanation": null
                    },
                    {
                        "input": "2 2\n1 1\n1 1\n3",
                        "output": "2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we check all paths using recursion?</p>",
            "<p>Can we check all paths but better and faster?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}