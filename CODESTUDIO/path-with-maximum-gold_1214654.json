{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10344,
            "title": "Path with Maximum Gold",
            "titleSlug": "path-with-maximum-gold_1214654",
            "content": "<h4 id=\"you-re-given-a-2-dimensional-array-grid-of-n-m-size-representing-a-gold-mine-each-cell-of-this-grid-contains-an-integer-that-represents-the-amount-of-gold-present-in-that-cell\">You\u2019re given a 2 dimensional array &#39;GRID&#39; of N * M size, representing a Gold mine. Each cell of this grid contains an integer that represents the amount of gold present in that cell.</h4>\n\n<h4 id=\"your-task-is-to-return-the-maximum-amount-of-gold-you-can-collect-using-the-following-conditions\">Your task is to return the maximum amount of gold you can collect using the following conditions:</h4>\n\n<pre><code>1. Every time you reach a cell, you collect all the gold present in that cell.\n\n\n2. You can go one step left, right, up, or down from your current cell\u2019s position.\n\n3. You can\u2019t visit the cell which you have already visited.\n\n4. You can\u2019t visit a cell with 0 gold.\n\n5. You can choose any cell to start and stop collecting gold.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer T denoting the number of test cases.\n\nEach test case\u2019s first line contains two space-separated integers N and M, denoting the rows and columns in the grid respectively.\n\nThe next N lines of each test case contain M space-separated integers denoting the amount of gold present in a cell.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, print a single line containing a single integer denoting the maximum amount of gold you can collect.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N, M &lt;= 10 \n0 &lt;= GRID[i][j] &lt;=  10 ^ 5\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n3 3\n0 9 3\n3 0 1\n2 3 2    \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>23\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>The optimal way to collect maximum gold is 9-&gt;3-&gt;1-&gt;2-&gt;3-&gt;2-&gt;3, or we start from the 2nd element of the first column, i.e. \u20183\u2019 and follow the path 3-&gt;2-&gt;3-&gt;2-&gt;1-&gt;3-&gt;9, either way, we\u2019ll get the same amount of gold.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000268_1614533882_Untitled%20Diagram%20(1).png\" alt=\"Alt text\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n2 2\n5 10\n0 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>19\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>The optimal way to collect maximum gold is 5-&gt;10-&gt;4 or 4-&gt;10-&gt;5; either way, we\u2019ll be able to get the same amount of gold.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000269_1614533890_Untitled%20Diagram2.png\" alt=\"Alt text\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a 2D array 'GRID' of size N * M, representing a gold mine. Each cell contains an integer representing the amount of gold in that cell.  Your goal is to find the maximum amount of gold you can collect following these rules:\n\n1.  Collect all gold in a cell when you visit it.\n2.  Move one step left, right, up, or down from your current cell.\n3.  You cannot revisit a cell.\n4.  You cannot visit a cell with 0 gold.\n5.  You can start and stop at any cell.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N, M <= 10",
                    "0 <= GRID[i][j] <= 10 ^ 5",
                    "Time limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "3 3\n0 9 3\n3 0 1\n2 3 2",
                        "output": "23",
                        "explanation": "The maximum gold is collected by following a path such as 9 -> 3 -> 1 -> 2 -> 3 -> 2 -> 3. Starting from different cells may yield different gold amounts, but the maximum obtainable is 23."
                    },
                    {
                        "input": "2 2\n5 10\n0 4",
                        "output": "19",
                        "explanation": "The optimal path to collect maximum gold is 5 -> 10 -> 4 or 4 -> 10 -> 5. Either way, we will be able to get the same amount of gold, which is 19."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of using backtracking here?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}