{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11197,
            "title": "Path With Minimum Effort",
            "titleSlug": "path-with-minimum-effort_1380958",
            "content": "<h4 id=\"you-are-given-heights-a-2d-array-of-size-rows-x-columns-where-heights-row-col-represents-the-height-of-a-cell-which-would-contain-a-row-and-column\">You are given heights, a 2D array of size <strong><em>&#39;rows&#39;</em></strong> x <strong><em>&#39;columns&#39;</em></strong>, where heights[row][col] represents the height of a cell (which would contain a row and column).</h4>\n\n<p><br></p>\n\n<h4 id=\"you-are-a-ninja-training-for-an-upcoming-battle-you-are-situated-in-the-top-left-cell-0-0-and-you-hope-to-travel-to-the-bottom-right-cell-rows-1-columns-1-i-e-0-indexed\">You are a Ninja training for an upcoming battle. You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed).</h4>\n\n<p><Br></p>\n\n<h4 id=\"you-can-move-up-down-left-or-right-and-you-wish-to-find-a-route-that-requires-the-minimum-time-a-routes-time-is-the-maximum-absolute-difference-in-heights-between-two-consecutive-cells-of-the-route\">You can move up, down, left, or right, and you wish to find a route that requires the minimum time. A route&#39;s time is the maximum absolute difference in heights between two consecutive cells of the route.</h4>\n\n<p><br></p>\n\n<h4 id=\"you-must-return-the-minimum-time-required-to-travel-from-the-top-left-cell-to-the-bottom-right-cell\">You must return the minimum time required to travel from the top-left cell to the bottom-right cell.</h4>\n\n<p><Br></p>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>Input: &#39;heights&#39; = [[1, 8, 8],[3, 8, 9],[5,3,5]]\nOutput: 2\n\nExplanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains two space-separated integers, &#39;rows&#39; and &#39;columns&#39;.\n\nNext &#39;rows&#39; lines contain &#39;columns&#39; space-separated integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line contains the minimum time you require to travel from the top-left cell to the bottom-right cell.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3 3\n1 2 3\n3 8 4\n5 3 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>1 \n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000330_1617345375_ex2.png\" alt=\"\"></p>\n\n<pre><code>The figure above describes the following heights list (array). \n\nHere, The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than the route [1,3,5,3,5].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3 3\n1 3 1\n9 9 3\n9 9 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>rows == heights.length\ncolumns == heights[i].length\n1 &lt;= rows, columns &lt;= 100\n1 &lt;= heights[i][j] &lt;= 10^6\n\nWhere \u2018rows\u2019 is the number of rows and \u2018columns\u2019 is the number of columns. \n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 27,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a 2D array `heights` of size `rows` x `columns`, where `heights[row][col]` represents the height of a cell.  You are a ninja starting at the top-left cell (0, 0) and want to reach the bottom-right cell (rows-1, columns-1). You can move up, down, left, or right. The goal is to find a route that minimizes the maximum absolute difference in heights between any two consecutive cells along the route. Return the minimum time (maximum absolute difference) required to travel from the top-left to the bottom-right cell.",
                "constraints": [
                    "rows == heights.length",
                    "columns == heights[i].length",
                    "1 <= rows, columns <= 100",
                    "1 <= heights[i][j] <= 10^6",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 3\n1 2 3\n3 8 4\n5 3 5",
                        "output": "1",
                        "explanation": "One possible path is [1, 2, 3, 4, 5] with a maximum absolute difference of 1 between consecutive cells. This is the optimal (minimum) value."
                    },
                    {
                        "input": "3 3\n1 3 1\n9 9 3\n9 9 1",
                        "output": "2",
                        "explanation": "One optimal path has a maximum absolute difference of 2 between consecutive cells."
                    },
                    {
                        "input": "3 3\n1 8 8\n3 8 9\n5 3 5",
                        "output": "2",
                        "explanation": "The route [1, 3, 5, 3, 5] has a maximum absolute difference of 2 in consecutive cells."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>You can use a Depth-Search Fashioned algorithm to traverse the heights list (array) combined with a binary search to find out the minimum absolute difference.</p>",
            "<p>You can use a modified \u201cDijkstra\u2019s\u201d algorithm to traverse the heights 2-D list (array) along with a heap traverse over the cells in a Breadth-First Search fashion.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}