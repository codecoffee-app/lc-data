{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9256,
            "title": "Paths in a Maze",
            "titleSlug": "paths-in-a-maze_981287",
            "content": "<h4 id=\"you-are-given-a-2-d-matrix-consisting-of-0-s-and-1-s-with-n-rows-and-n-columns-you-are-supposed-to-find-all-paths-from-the-cell-0-0-top-left-cell-to-the-cell-n-1-n-1-bottom-right-cell-all-cells-with-value-0-are-blocked-and-cannot-be-travelled-through-while-all-cells-with-value-1-are-open\">You are given a 2-D matrix consisting of 0\u2019s and 1\u2019s with \u2018N\u2019 rows and \u2018N\u2019 columns, you are supposed to find all paths from the cell (0,0) (top-left cell) to the cell (N-1, N-1)(bottom-right cell). All cells with value 0 are blocked and cannot be travelled through while all cells with value 1 are open.</h4>\n\n<h4 id=\"if-you-are-currently-at-cell-x-y-then-you-can-move-to-x-1-y-denoted-by-d-x-1-y-denoted-by-u-x-y-1-denoted-by-r-x-y-1-denoted-by-l-in-one-move-you-cannot-move-out-of-the-grid\">If you are currently at cell (x,y) then you can move to (x+1,y)(denoted by \u2018D\u2019), (x-1,y)(denoted by \u2018U\u2019), (x,y+1)(denoted by \u2018R\u2019), (x,y-1)(denoted by \u2018L\u2019) in one move. You cannot move out of the grid.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<p><img src=\"https://files.codingninjas.in/grid-movements-6623.png\" alt=\"Example\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. The test cases follow.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of rows and columns in the given matrix.\n\nNext \u2018N\u2019 lines contain \u2018N\u2019 single space-separated integers each denoting the elements in the matrix.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print all paths from (0,0) to (N-1, N-1) separated by a single space.\n\nThe output of every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 5\n0 &lt;= ARR[i][j] &lt;= 1\n\nWhere \u2018T\u2019 denotes the number of test cases, \u2018N\u2019 denotes the number of rows and columns of the given matrix, and ARR[i] denotes the value of the cell (i,j) in the given matrix.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2\n1 1\n1 1\n2\n1 0\n1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>DR RD\nDR\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>In the first test case, there are two paths from (0,0) to (1,1). The first path is (0,0)-&gt;(1,0)-&gt;(1,1) and the second path is (0,0)-&gt;(0,1)-&gt;(1,1)\n\nIn the second test case, there is only one path since the cell at (0,1) is blocked. The path is (0,0)-&gt;(1,0)-&gt;(1,1).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3\n1 0 1\n1 0 0\n1 1 1\n3\n1 1 1\n1 0 1\n1 1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>DDRR\nDDRR RRDD\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h5>\n\n<pre><code>In the first test case, there is only one path from (0,0) to (2,2). The path is (0,0)-&gt;(1,0)-&gt;(2,0)-&gt;(2,1)-&gt;(2,2).\n\nIn the second test case, there are two paths from (0,0) to (2,2). The first path is (0,0)-&gt;(1,0)-&gt;(2,0)-&gt;(2,1)-&gt;(2,2). and the second path is (0,0)-&gt;(0,1)-&gt;(0,2)-&gt;(1,2)-&gt;(2,2).\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 12,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a square 2D matrix of size N x N, where each cell contains either 0 or 1, find all possible paths from the top-left cell (0, 0) to the bottom-right cell (N-1, N-1).  A cell with a value of 0 is considered blocked and cannot be traversed, while a cell with a value of 1 is open and traversable. You can move in four directions: Down ('D'), Up ('U'), Right ('R'), and Left ('L').  You cannot move outside the boundaries of the matrix.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 5",
                    "0 <= ARR[i][j] <= 1",
                    "T denotes the number of test cases.",
                    "N denotes the number of rows and columns of the given matrix.",
                    "ARR[i][j] denotes the value of the cell (i,j) in the given matrix.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n2\n1 1\n1 1\n2\n1 0\n1 1",
                        "output": "DR RD\nDR",
                        "explanation": "Test Case 1: N = 2, Matrix = [[1, 1], [1, 1]]. Two paths exist: Down then Right (DR) and Right then Down (RD).\nTest Case 2: N = 2, Matrix = [[1, 0], [1, 1]].  Only one path exists because the cell (0, 1) is blocked: Down then Right (DR)."
                    },
                    {
                        "input": "2\n3\n1 0 1\n1 0 0\n1 1 1\n3\n1 1 1\n1 0 1\n1 1 1",
                        "output": "DDRR\nDDRR RRDD",
                        "explanation": "Test Case 1: N = 3, Matrix = [[1, 0, 1], [1, 0, 0], [1, 1, 1]]. One path is DDRR which means Down, Down, Right, Right.\nTest Case 2: N = 3, Matrix = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]. Two paths are DDRR and RRDD which mean Down, Down, Right, Right and Right, Right, Down, Down respectively."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about exploring all possible paths using recursion?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}