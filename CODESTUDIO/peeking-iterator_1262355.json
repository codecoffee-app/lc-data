{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10672,
            "title": "Peeking Iterator",
            "titleSlug": "peeking-iterator_1262355",
            "content": "<h4 id=\"implement-the-given-peekingiterator-class-consisting-of-four-functions\">Implement the given PeekingIterator class consisting of four functions:</h4>\n\n<pre><code>Peeking Iterator (int arr[]): Initialize the object with the given array element.\n\nint next(): Returns the next element and moves the pointer to the next element.\n\nbool hasNext(): Return true if there is still an element in the array that otherwise returns false.\n\nint peek(): Return the next element in the array but don\u2019t move the pointer to the next element. \n</code></pre>\n\n<h5 id=\"you-will-be-given-q-queries-consisting-of-next-hasnext-and-peek-operations-in-each-query-input-is-of-the-following-type\">You will be given \u2018Q\u2019 queries consisting of &#39;next&#39;, &#39;hasNext&#39;, and &#39;peek&#39; operations. In each query input is of the following type:</h5>\n\n<pre><code>0 \u2018array/list\u2019 - Initialize the object with the given array element.\n\n1 - Return the next element and move the pointer to the next element.\n\n2 - Return true if there are elements in the array, otherwise return false. \n\n3 - Perform a peek operation in the array.\n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>0 3 7 9 10\n1\n2 \n3\n\nHere we have 4 queries:\nFirstly the query is of type 0. Sp, an object will be created with the list [7,9,10], and the pointer will be at 7.\n\nThen the next query is 1 so we will return 7 and the pointer will move to 9.\n\nThen the next query is 2 and there are elements in the array so we will return &#39;True&#39;.\n\nThe last query is 3. So, we will just return 9 by not moving the pointer ahead.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Only the first query will be of type 0.\n\nYou can&#39;t directly access the array, instead, you will be given access to a separate iterator class.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first line of each test case contains an integer \u2018Q\u2019 denoting the number of queries to be answered.\n\nIn the next \u2018Q\u2019 lines, inputs are 0,1,2 or 3 as mentioned above.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, for all the calls of the query of type:\n\n1: Return the next element\n2: Return true or false \n3: Return element at the pointer position\n\nNote for each call of query, the output is printed in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= size of arr &lt;= 1000\n1 &lt;= arr[i] &lt;= 1000\n1 &lt;= Q &lt;= 1000\nAll queries are valid.\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\n0 4 1 2 3 4\n1\n1\n3\n2\n5\n0 3 1 2 3\n1\n1\n3\n2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>-1\n1\n2\n3\ntrue\n-1\n1\n2\n3\ntrue\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>Test Case 1:\n\nQueries:\n0 - object is initiated with the given array elements, [1,2,3,4].\n\n1 - return 1, and move pointer to 2,  [1,2,3,4]\n\n1 - return 2, and move pointer to 3 [1,2,3,4]\n\n3 - return 3, but pointer stays at same position [1,2,3,4]\n\n2 - return true, as elements are there.\n\nTest Case 2:\n\nQueries:\n0 - object is initiated with given array elements [1,2,3]\n\n1 - return 1, the pointer is moved to 2, [1,2,3]\n\n1 - return 2, the pointer is moved to 3,[1,2,3]\n\n3 - return 3, the pointer stays at the same position. [1,2,3]\n\n2 - return true, as the current pointer is on element 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3\n0 5 6 8 9 10 0 \n3\n3\n4\n0 2 10 11\n3\n1\n2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n6\n6\n-1\n10\n10\ntrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a `PeekingIterator` class that provides the functionality to iterate through an array with the ability to 'peek' at the next element without advancing the iterator.\n\nThe `PeekingIterator` class should consist of the following functions:\n\n*   `PeekingIterator(int arr[])`: Initializes the object with the given array.\n*   `int next()`: Returns the next element in the array and advances the iterator to the next position.\n*   `bool hasNext()`: Returns `true` if there are more elements to iterate, and `false` otherwise.\n*   `int peek()`: Returns the next element in the array without advancing the iterator.\n\nYou will be given a series of 'Q' queries to test your `PeekingIterator` implementation.  The queries are encoded as integers:\n\n*   `0 arr[]`: Initializes the `PeekingIterator` with the given array `arr`.\n*   `1`: Calls the `next()` method and prints the returned value.\n*   `2`: Calls the `hasNext()` method and prints the returned boolean value.\n*   `3`: Calls the `peek()` method and prints the returned value.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= size of arr <= 1000",
                    "1 <= arr[i] <= 1000",
                    "1 <= Q <= 1000",
                    "All queries are valid.",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "5\n0 4 1 2 3 4\n1\n1\n3\n2",
                        "output": "-1\n1\n2\n3\ntrue",
                        "explanation": "Queries:\n0 [1,2,3,4] - Initialize the iterator with [1,2,3,4].\n1 - next() returns 1, iterator moves to 2.  Output: 1\n1 - next() returns 2, iterator moves to 3.  Output: 2\n3 - peek() returns 3, iterator remains at 3. Output: 3\n2 - hasNext() returns true, because element is present at iterator. Output: true"
                    },
                    {
                        "input": "5\n0 3 1 2 3\n1\n1\n3\n2",
                        "output": "-1\n1\n2\n3\ntrue",
                        "explanation": "Queries:\n0 [1,2,3] - Initialize the iterator with [1,2,3].\n1 - next() returns 1, iterator moves to 2.  Output: 1\n1 - next() returns 2, iterator moves to 3.  Output: 2\n3 - peek() returns 3, iterator remains at 3. Output: 3\n2 - hasNext() returns true, because element is present at iterator. Output: true"
                    },
                    {
                        "input": "3\n0 5 6 8 9 10 0\n3\n3\n4",
                        "output": "-1\n6\n6\n-1",
                        "explanation": "Queries:\n0 [6,8,9,10,0] - Initialize the iterator with [6,8,9,10,0].\n3 - peek() returns 6, iterator remains at 6.  Output: 6\n3 - peek() returns 6, iterator remains at 6.  Output: 6\n4 - invalid query.  Output: -1"
                    },
                    {
                        "input": "4\n0 2 10 11\n3\n1\n2",
                        "output": "-1\n10\n10\ntrue",
                        "explanation": "Queries:\n0 [10,11] - Initialize the iterator with [10,11].\n3 - peek() returns 10, iterator remains at 10. Output: 10\n1 - next() returns 10, iterator moves to 11. Output: 10\n2 - hasNext() returns true, iterator on 11. Output: true"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a data structure which can fit in this design problem. Use the given Iterator class to make a new PeekingIterator class.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}