{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15248,
            "title": "Perfect Partition",
            "titleSlug": "perfect-partition_2427909",
            "content": "<h4 id=\"in-the-ninja-world-assets-owned-by-a-person-are-represented-by-a-tree-where-the-total-asset-value-is-equal-to-the-sum-of-all-its-vertices\">In the Ninja world, assets owned by a person are represented by a tree, where the total asset value is equal to the sum of all its vertices.</h4>\n\n<h4 id=\"a-wealthy-father-wants-to-split-all-his-assets-between-his-two-children-he-has-appointed-you-to-help-him-you-are-given-a-tree-containing-n-vertices-vertices-are-numbered-from-0-to-n-1-you-are-also-given-an-array-assets-denoting-the-asset-value-of-ith-vertex\">A wealthy father wants to split all his assets between his two children, he has appointed you to help him. You are given a tree containing \u2018N\u2019 vertices, vertices are numbered from 0 to N-1, you are also given an array \u2018Assets\u2019 denoting the asset-value of i<sup>th</sup> vertex.</h4>\n\n<h4 id=\"splitting-of-assets-can-simply-be-done-by-removing-an-edge-from-the-tree-this-results-in-the-formation-of-two-trees-you-have-to-remove-an-edge-such-that-the-partition-is-as-fair-as-possible-in-a-fair-partition-the-difference-between-the-assets-of-the-children-should-be-as-small-as-possible\">Splitting of assets can simply be done by removing an edge from the tree, this results in the formation of two trees. You have to remove an edge such that the partition is as fair as possible. In a fair partition, the difference between the assets of the children should be as small as possible.</h4>\n\n<h4 id=\"return-the-minimum-possible-difference-between-the-asset-values-of-the-children-after-partition\">Return the minimum possible difference between the asset values of the children after partition.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If N = 5 and Assets = { 10, 20, 30, 40, 50 } and tree is denoted as:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/pp-img-12927.jpg\" alt=\"\"></p>\n\n<pre><code>Then we have 4 choices of deletion:\nEdge 0-1 is deleted: now, the one of the tree contains node-1 and node-3, and the other contains node-0, node-2 and node-3, subtree difference is = 90 - 60 = 30\nEdge 1-3 is deleted: subtree difference is = 110 - 40 = 70\nEdge 0-2 is deleted: subtree difference is = 80 - 70 = 10\nEdge 2-4 is deleted: subtree difference is = 100 - 50 = 50\n\n\nClearly removing the edge between node-0 and node-2 leads to the most optimal partition where the difference is equal to 10. Hence we return the value 10.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number of assets.\n\nThe next line contains N integers, where Assets[i] denotes the asset-value of the ith asset.\n\nThe next N-1 lines each contain two integers \u2018U\u2019 and \u2018V\u2019 denoting that there is an edge between node-U and node-V.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the lowest possible difference between assets after splitting.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 T \u2264 10      \n2 \u2264 N \u2264 200\n0 \u2264 Assets[i] \u2264 10^6\n0 \u2264 U, V \u2264 N-1\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5\n10 20 30 40 50\n0 1\n2 0 \n1 3\n4 2\n2\n10 10\n0 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>10\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For test case 1 : \nWe will return 10 because:\nEdge 0-1 is deleted: subtree difference is = 90 - 60 = 30\nEdge 1-3 is deleted: subtree difference is = 110 - 40 = 70\nEdge 0-2 is deleted: subtree difference is = 80 - 70 = 10\nEdge 2-4 is deleted: subtree difference is = 100 - 50 = 50\n\n\nFor test case 2 : \nWe will return 0 because:\nIf the only edge, that is the edge between node-0 and node-1 is deleted, both the children get assets of the same worth.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2\n50 50\n1 0\n2\n0 100\n0 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n100\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a tree representing assets owned by a person in the Ninja world, where each vertex represents an asset with a given value, and edges represent relationships between assets. The task is to split the tree into two subtrees by removing a single edge, effectively dividing the assets between two children. The goal is to find the minimum possible difference between the total asset values of the two resulting subtrees, ensuring the fairest possible division.",
                "constraints": [
                    "1 \u2264 T \u2264 10",
                    "2 \u2264 N \u2264 200",
                    "0 \u2264 Assets[i] \u2264 10^6",
                    "0 \u2264 U, V \u2264 N-1"
                ],
                "testcases": [
                    {
                        "input": "n = 5, assets = [10, 20, 30, 40, 50], edges = [[0, 1], [2, 0], [1, 3], [4, 2]]",
                        "output": "10",
                        "explanation": "Removing the edge between nodes 0 and 2 results in subtrees with asset values of 80 and 70, yielding a difference of 10, which is the minimum possible difference."
                    },
                    {
                        "input": "n = 2, assets = [10, 10], edges = [[0, 1]]",
                        "output": "0",
                        "explanation": "Removing the edge between nodes 0 and 1 results in subtrees with asset values of 10 and 10, yielding a difference of 0."
                    },
                    {
                        "input": "n = 2, assets = [50, 50], edges = [[1, 0]]",
                        "output": "0",
                        "explanation": "Removing the edge between nodes 1 and 0 results in subtrees with asset values of 50 and 50, yielding a difference of 0."
                    },
                    {
                        "input": "n = 2, assets = [0, 100], edges = [[0, 1]]",
                        "output": "100",
                        "explanation": "Removing the edge between nodes 0 and 1 results in subtrees with asset values of 0 and 100, yielding a difference of 100."
                    },
                    {
                        "input": "n = 4, assets = [1, 2, 3, 4], edges = [[0, 1], [1, 2], [2, 3]]",
                        "output": "2",
                        "explanation": "Removing edge 1-2 results in subtrees [1, 2] and [3, 4] with sums 3 and 7, diff = 4. Removing edge 0-1 results in subtrees [1] and [2, 3, 4] sums 1 and 9 diff 8. Removing edge 2-3 results in subtrees [1, 2, 3] and [4], sums 6 and 4 diff = 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try removing edges one by one to find the optimal answer.</p>",
            "<p>Find the subtree with a sum as close as half the sum of the entire tree! Is there a way to avoid having to recompute the sum of each subtree individually?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}