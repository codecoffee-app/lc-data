{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10808,
            "title": "Perfect Team.",
            "titleSlug": "perfect-team_1265035",
            "content": "<h4 id=\"you-have-been-given-skill-and-age-of-n-players-you-want-to-choose-the-team-with-the-highest-total-skill-the-total-skill-is-the-sum-of-skills-of-all-players-in-the-team-however-in-a-team-no-two-players-must-exist-such-that-the-younger-player-has-greater-skill-than-the-older-player-in-a-team-two-people-of-the-same-age-can-have-different-skill-levels-return-the-highest-total-skill-of-the-team-which-is-possible\">You have been given \u2018SKILL\u2019 and \u2018AGE\u2019 of \u2018N\u2019 players. You want to choose the team with the highest total skill. The total skill is the sum of skills of all players in the team. However, in a team, no two players must exist such that the younger player has greater skill than the older player. In a team, two people of the same age can have different skill levels. Return the highest total skill of the team which is possible.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Let\u2019s say the age of players is [1,2,6,4] and the skill of players is [1,2,3,4]. We cannot take all players in the team as 3rd player is older than 4th player but 4th player has strictly greater skill than 3rd player. Therefore we can take anyone among them. Therefore the highest total skill of team which is possible is 7.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 representing the number of players.\n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers representing the age of players.\n\nThe third line of each test case contains \u2018N\u2019 single space-separated integers representing the skill of players.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer denoting the highest total skill of the team which is possible.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 100\n1 &lt;= \u2018AGE[i]\u2019 &lt;= 10^3\n1 &lt;= \u2018SKILL[i]\u2019 &lt;= 10^6\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\n1 2 3 4\n1 2 3 4  \n5\n1 2 3 4 5\n1 1 2 1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>10\n6\n</code></pre>\n\n<h4 id=\"sample-output-1-explanation\">Sample Output 1 Explanation:</h4>\n\n<pre><code>Test case 1:\n\nWe can take all the players as the player with greater age has greater skill.\n\nTherefore the answer is 10.\n\nTest case 2:\n\nWe can either take 3rd or 4th player as both of them cannot be part of the same team as the 3rd player is younger and has a greater skill. We will prefer 3rd player as we need maximum total skill.\n\nTherefore the answer is 6.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4\n1 2 6 4\n1 2 3 4\n4\n1 2 3 4\n4 3 2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>7\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the ages and skills of N players, determine the highest possible total skill of a team that can be formed. A team is valid if no younger player has a strictly greater skill than an older player. Players with the same age can have different skill levels and can coexist in a team.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 100",
                    "1 <= AGE[i] <= 10^3",
                    "1 <= SKILL[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "n = 4, age = [1, 2, 3, 4], skill = [1, 2, 3, 4]",
                        "output": "10",
                        "explanation": "All players can be included in the team since the older players have greater skills.  1 + 2 + 3 + 4 = 10."
                    },
                    {
                        "input": "n = 5, age = [1, 2, 3, 4, 5], skill = [1, 1, 2, 1, 2]",
                        "output": "6",
                        "explanation": "We can choose players with ages [1, 2, 3, 5] and skills [1, 1, 2, 2] to achieve a total skill of 6.  Alternatively, we can include players with ages [1, 2, 4, 5] and skills [1, 1, 1, 2] for a total skill of 5. Choosing the 3rd player is necessary, or 4th player. We can pick indices [0,1,2,4] where the age is [1,2,3,5] and skill is [1,1,2,2] giving total skill 6. We can also pick [0,1,4] with skill 4 which is not the maximum. The maximum is 6."
                    },
                    {
                        "input": "n = 4, age = [1, 2, 6, 4], skill = [1, 2, 3, 4]",
                        "output": "7",
                        "explanation": "We cannot take both the player with age 6 and skill 3, and the player with age 4 and skill 4, as the younger player has greater skill. We can take the rest of the team. Ages are [1, 2] and skills are [1, 2], skill[3]=4 and age[3]=4. 1 + 2 + 4 = 7"
                    },
                    {
                        "input": "n = 4, age = [1, 2, 3, 4], skill = [4, 3, 2, 1]",
                        "output": "4",
                        "explanation": "We can only choose the player with age 1 and skill 4. Taking any other player would violate the constraint."
                    },
                    {
                        "input": "n = 4, age = [1, 2, 3, 4], skill = [1, 2, 4, 3]",
                        "output": "7",
                        "explanation": "We cannot choose both players with ages 3 and 4 since age[4] is greater than age[3] but skill[4] < skill[3]. We take [1,2,3] -> 1+2+4=7 or [1,2,4]-> 1+2+3 =6, thus we pick first case. "
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Iterate over all possible teams.</p>",
            "<p>Sort the list of players.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}