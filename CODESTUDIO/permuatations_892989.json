{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8516,
            "title": "Permuatations",
            "titleSlug": "permuatations_892989",
            "content": "<h4 id=\"a-permutation-is-a-mathematical-technique-that-determines-the-number-of-possible-arrangements-in-a-set-when-the-order-of-the-arrangements-matters-a-string-of-length-n-has-n-permutations\">A permutation is a mathematical technique that determines the number of possible arrangements in a set when the order of the arrangements matters.  A string of length &#39;N&#39; has &#39;N&#39;! permutations.</h4>\n\n<h4 id=\"given-an-array-of-distinct-integers-return-all-the-possible-permutations-of-the-array\">Given an array of distinct integers, return all the possible permutations of the array.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>&#39;ARR[]&#39; = [1, 2]\n\nThe size of the array is 2. So, the total number of permutations is 2! = 2. The possible permutations are [1, 2] (the array itself) and [2,1] where the position of element 1 in the original array is swapped with element 2 and vice-versa.   \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. All the numbers in the array are unique.\n\n2. You can return the answer in any order.\n\n3. The original array is also a permutation of the given array.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains \u2018N\u2019 denoting the total number of elements in the array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the elements of the array &#39;ARR&#39; whose all possible permutations are to be calculated.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return all the possible permutations of the given array of integers.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 7\n-10 ^ 9 &lt;= ARR[i] &lt;= 10 ^ 9\n\nWhere \u2018ARR[i]\u2019 denotes the range of elements in the array.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1:</h5>\n\n<pre><code>2\n3\n1 2 3 \n1\n1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 3   1 3 2   2 1 3  2 3 1  3 1 2   3 2 1\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h5>\n\n<pre><code>In test case 1, For [1,2,3], size of the array is 3. Therefore, number of permutations is 3!= 6. The possible 6 permutations are [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]].\n\nIn test case 2, For [1], the size of the array is 1. Therefore, the number of permutations is 1!= 1. The only possible permutation is [1].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample input 2:</h5>\n\n<pre><code>2\n2\n0 1\n3\n4 5 6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>0 1  1 0\n4 5 6   4 6 5   5 4 6   5 6 4   6 4 5   6 5 4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2:</h5>\n\n<pre><code>In test case 1, For [0, 1], size of the array is 2. Therefore, number of permutations is 2! = 2. The possible 2 permutations are [[0, 1], [1, 0]].\n\nIn test case 2, For [4, 5, 6], the size of the array is 3. Therefore, the number of permutations is 3! =  6. The possible 6 permutations are [[4, 5, 6], [4, 6, 5], [5, 4, 6], [5, 6, 4], [6, 4, 5], [6, 5, 4]].\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 17,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of distinct integers, find and return all possible permutations of the array. A permutation is a re-arrangement of the elements of the array. For an array of 'N' distinct integers, there will be 'N!' possible permutations.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 7",
                    "-10 ^ 9 <= ARR[i] <= 10 ^ 9",
                    "All numbers in the array are unique."
                ],
                "testcases": [
                    {
                        "input": "3\n1 2 3",
                        "output": "1 2 3   1 3 2   2 1 3  2 3 1  3 1 2   3 2 1",
                        "explanation": "For the array [1, 2, 3], the size of the array is 3. The total number of permutations is 3! = 6.  The possible permutations are [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1]."
                    },
                    {
                        "input": "1\n1",
                        "output": "1",
                        "explanation": "For the array [1], the size of the array is 1. The total number of permutations is 1! = 1. The only possible permutation is [1]."
                    },
                    {
                        "input": "2\n2\n0 1",
                        "output": "0 1  1 0",
                        "explanation": "For the array [0, 1], the size of the array is 2. The total number of permutations is 2! = 2. The possible permutations are [0, 1] and [1, 0]."
                    },
                    {
                        "input": "3\n4 5 6",
                        "output": "4 5 6   4 6 5   5 4 6   5 6 4   6 4 5   6 5 4",
                        "explanation": "For the array [4, 5, 6], the size of the array is 3. The total number of permutations is 3! = 6. The possible permutations are [4, 5, 6], [4, 6, 5], [5, 4, 6], [5, 6, 4], [6, 4, 5], and [6, 5, 4]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Will swapping elements and backtracking help?</p>",
            "<p>Try to generate each permutation in a single step using the previous permutation iteratively.</p>",
            "<p>Try to generate each permutation in a single step using the previous permutation.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}