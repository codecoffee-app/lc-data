{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10243,
            "title": "Permutations of a String",
            "titleSlug": "permutations-of-a-string_1172219",
            "content": "<h4 id=\"ninja-has-been-given-a-string-str-consisting-of-lowercase-english-letters-str-might-contain-duplicate-characters-too-ninja-has-to-return-all-unique-permutations-of-the-given-string-in-lexicographically-increasing-order\">Ninja has been given a string \u2018STR\u2019 consisting of lowercase English letters. \u2018STR\u2019 might contain duplicate characters too. Ninja has to return all unique permutations of the given string in lexicographically increasing order.</h4>\n\n<h4 id=\"can-you-help-ninjas-to-do-this-task\">Can you help Ninjas to do this task?.</h4>\n\n<h4 id=\"string-str1-is-lexicographically-less-than-string-str2-if-either-str1-is-a-prefix-of-str2-and-str1-str2-or-there-exists-such-i-1-i-min-str1-str2-such-that-str1-i-str-i-and-for-any-j-1-j-i-str1-i-str2-i-here-str1-denotes-the-length-of-the-string-str1\">String &#39;STR1&#39; is lexicographically less than string &#39;STR2&#39;, if either &#39;STR1&#39; is a prefix of &#39;STR2&#39; (and &#39;STR1&#39; \u2260 &#39;STR2&#39;), or there exists such i (1 &lt;= i &lt;= min(|&#39;STR1&#39;|, |&#39;STR2&#39;|)), such that &#39;STR1[i]\u2019 &lt; &#39;STR[i]\u2019, and for any j (1 &lt;= \u2018j\u2019 &lt; \u2018i\u2019) &#39;STR1[i]\u2019 = &#39;STR2[i]\u2019. Here |&#39;STR1&#39;| denotes the length of the string &#39;STR1&#39;.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>If the string is \u201caab\u201d, then its unique permutations in lexicographically increasing order are { \u201caab\u201d, \u201caba\u201d, \u201cbaa\u201d }.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line and only line of each test case contain a string \u2018STR\u2019 consisting of lowercase English letters.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For every test case, the permutations of the given string are printed in lexicographically increasing order separated by space.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 5\n1 &lt;= |\u2019STR\u2019| &lt;= 9\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2 \naa\nabc\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>aa\nabc acb bac bca cab cba\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h4>\n\n<pre><code>In the 1st test case, there is only 1 permutation of the given string that is possible i.e { \u201caa\u201d }.\n\nIn the 2nd test case, there are 6 permutations of the given string which are  { \u201cabc\u201d, \u201cacb\u201d, \u201cbac\u201d, \u201cbca\u201d, \u201ccab\u201d, \u201ccba\u201d }.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2 \nbcb\nacaa\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>bbc bcb cbb\naaac aaca acaa caaa\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'STR' consisting of lowercase English letters, possibly containing duplicate characters, generate and return all unique permutations of the string in lexicographically increasing order.",
                "constraints": [
                    "1 <= 'T' <= 5",
                    "1 <= |'STR'| <= 9",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "str = \"aa\"",
                        "output": "aa",
                        "explanation": "There is only 1 permutation of the given string that is possible i.e { \u201caa\u201d }."
                    },
                    {
                        "input": "str = \"abc\"",
                        "output": "abc acb bac bca cab cba",
                        "explanation": "There are 6 permutations of the given string which are { \u201cabc\u201d, \u201cacb\u201d, \u201cbac\u201d, \u201cbca\u201d, \u201ccab\u201d, \u201ccba\u201d }."
                    },
                    {
                        "input": "str = \"bcb\"",
                        "output": "bbc bcb cbb",
                        "explanation": "These are the unique permutations of \"bcb\" in lexicographical order."
                    },
                    {
                        "input": "str = \"acaa\"",
                        "output": "aaac aaca acaa caaa",
                        "explanation": "These are the unique permutations of \"acaa\" in lexicographical order."
                    },
                    {
                        "input": "str = \"ab\"",
                        "output": "ab ba",
                        "explanation": "These are the unique permutations of \"ab\" in lexicographical order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of using backtracking to generate all permutations.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}