{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9392,
            "title": "Permutations of a String",
            "titleSlug": "permutations-of-a-string_985254",
            "content": "<h4 id=\"you-are-given-a-string-str-consisting-of-lowercase-english-letters-your-task-is-to-return-all-permutations-of-the-given-string-in-lexicographically-increasing-order\">You are given a string &#39;STR&#39; consisting of lowercase English letters. Your task is to return all permutations of the given string in lexicographically increasing order.</h4>\n\n<h4 id=\"string-a-is-lexicographically-less-than-string-b-if-either-a-is-a-prefix-of-b-and-a-b-or-there-exists-such-i-1-i-min-a-b-that-a-i-b-i-and-for-any-j-1-j-i-a-i-b-i-here-a-denotes-the-length-of-the-string-a\">String A is lexicographically less than string B, if either A is a prefix of B (and A\u2009\u2260\u2009B), or there exists such i (1\u2009&lt;= i\u2009&lt;=\u2009min(|A|,\u2009|B|)), that A[i] &lt;\u2009B[i], and for any j (1\u2009&lt;=\u2009j\u2009&lt;\u2009i) A[i] =\u2009B[i]. Here |A| denotes the length of the string A.</h4>\n\n<h4 id=\"for-example\">For example :</h4>\n\n<pre><code>If the string is \u201cbca\u201d, then its permutations in lexicographically increasing order are { \u201cabc\u201d, \u201cacb\u201d, \u201cbac\u201d, \u201cbca\u201d, \u201ccab\u201d, \u201ccba\u201d }.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Given string contains unique characters.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a single integer &#39;T&#39;, representing the number of test cases or queries to be run. Then the T test cases follow.\n\nThe first line and only line of each test case contains a string &#39;STR&#39; consisting of lowercase English letters.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For every test case, the permutations of the given string are printed in lexicographically increasing order separated by space.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= |STR| &lt;= 9\n\nWhere |STR| is the length of the string.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\nabc\nbc\nc\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>abc acb bac bca cab cba\nbc cb\nc\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>In the 1st test case, there are 6 permutations of the given string.\nIn the 2nd test case, there are 2 permutations of the given string.\nIn the 3rd test case, there is only 1 permutation of the given string.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\nxyz\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>xyz xzy yxz yzx zxy zyx \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 90,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'STR' consisting of lowercase English letters, generate all its permutations in lexicographically increasing order. String A is lexicographically smaller than string B if A is a prefix of B (and A != B) or if there exists an index i (1 <= i <= min(|A|, |B|)) such that A[i] < B[i] and for all j (1 <= j < i), A[j] = B[j]. |A| represents the length of string A. The input string contains unique characters.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= |STR| <= 9",
                    "Where |STR| is the length of the string.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "abc",
                        "output": "abc acb bac bca cab cba",
                        "explanation": "The permutations of 'abc' in lexicographical order are: abc, acb, bac, bca, cab, cba."
                    },
                    {
                        "input": "bc",
                        "output": "bc cb",
                        "explanation": "The permutations of 'bc' in lexicographical order are: bc, cb."
                    },
                    {
                        "input": "c",
                        "output": "c",
                        "explanation": "The only permutation of 'c' is c."
                    },
                    {
                        "input": "xyz",
                        "output": "xyz xzy yxz yzx zxy zyx",
                        "explanation": "The permutations of 'xyz' in lexicographical order are: xyz, xzy, yxz, yzx, zxy, zyx."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of using backtracking to generate all permutations.</p>",
            "<p>Think of an optimised solution where you don\u2019t have to sort the permutations.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N * N!)\n    Space complexity: O(N * N!)\n    \n    Where N is the length of the given string.\n*/\n\n#include <algorithm>\n\nvector<string> generatePermutations(string &str)\n{\n    // stores the permutations of the string\n    vector<string> ans;\n\n    sort(str.begin(), str.end());\n\n    while (true)\n    {\n        ans.push_back(str);\n\n        int first = -1;\n        for (int i = str.size() - 2; i >= 0; i--)\n        {\n            if (str[i] < str[i + 1])\n            {\n                first = i;\n                break;\n            }\n        }\n\n        if (first == -1)\n        {\n            // we have found all the permutations\n            break;\n        }\n\n        int second = first + 1;\n        for (int i = first + 2; i < str.size(); i++)\n        {\n            if (str[i] > str[first] && str[i] < str[second])\n            {\n                second = i;\n            }\n        }\n\n        swap(str[first], str[second]);\n\n        // reverse(sort) the substring after index first\n        reverse(str.begin() + first + 1, str.end());\n    }\n\n    return ans;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N * N!)\r\n    Space complexity: O(N * N!)\r\n    \r\n    Where N is the length of the given string.\r\n'''\r\n\r\n\r\ndef generatePermutations(str):\r\n\r\n    # stores the permutations of the string\r\n    ans = []\r\n    str = sorted(str)\r\n    str = \"\".join(str)\r\n\r\n    while (True):\r\n        ans.append(str)\r\n\r\n        first = -1\r\n        for i in range(len(str) - 2, -1, -1):\r\n\r\n            if (str[i] < str[i + 1]):\r\n                first = i\r\n                break\r\n\r\n        if (first == -1):\r\n            # we have found all the permutations\r\n            break\r\n\r\n        second = first + 1\r\n        for i in range(first + 2, len(str)):\r\n\r\n            if (str[i] > str[first] and str[i] < str[second]):\r\n                second = i\r\n\r\n        str = list(str)\r\n        str[first], str[second] = str[second], str[first]\r\n        str = \"\".join(str)\r\n\r\n        # reverse(sort) the substring after index first\r\n        reversedStr = ''.join(reversed(str[first + 1:]))\r\n        str = str[:first + 1] + reversedStr\r\n\r\n    return ans\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N * N!)\r\n    Space complexity: O(N * N!)\r\n    \r\n    Where N is the length of the given string.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Arrays;\r\n\r\npublic class Solution \r\n{   \r\n\tpublic static String tempStr;\r\n\tpublic static void sort(String str)\r\n    {\r\n        char tempArray[] = str.toCharArray();\r\n        Arrays.sort(tempArray);\r\n        tempStr = new String(tempArray);\r\n    }\r\n\r\n\tpublic static void swap(String str, int i , int j)\r\n    {\r\n        StringBuilder sb = new StringBuilder(str);\r\n        sb.setCharAt(i, str.charAt(j));\r\n        sb.setCharAt(j, str.charAt(i));\r\n        tempStr = sb.toString();\r\n    }\r\n\r\n\tpublic static ArrayList<String> generatePermutations(String str) \r\n\t{\r\n\t\t// Stores the permutations of the string\r\n\t\tArrayList<String> ans = new ArrayList<>();\r\n\r\n\t\tsort(str);\r\n\t\tstr = tempStr;\r\n\r\n\t\twhile (true) \r\n\t\t{\r\n\t\t\tans.add(str);\r\n\r\n\t\t\tint first = -1;\r\n\t\t\tfor (int i = str.length() - 2; i >= 0; i--) \r\n\t\t\t{\r\n\t\t\t\tif (str.charAt(i) < str.charAt(i+1)) \r\n\t\t\t\t{\r\n\t\t\t\t\tfirst = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (first == -1) \r\n\t\t\t{\r\n\t\t\t\t// we have found all the permutations\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tint second = first + 1;\r\n\t\t\tfor (int i = first + 2; i < str.length(); i++) \r\n\t\t\t{\r\n\t\t\t\tif ((str.charAt(i) > str.charAt(first)) && (str.charAt(i) < str.charAt(second))) \r\n\t\t\t\t{\r\n\t\t\t\t\tsecond = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tswap(str, first, second);\r\n\t\t\tstr = tempStr;\r\n            \r\n            // reverse(sort) the substring after index first\r\n\t\t\tArrayList<Character> temp = new ArrayList<Character>();\r\n            for (int k=first+1 ; k<str.length() ; k++) \r\n\t\t\t{\r\n                temp.add(str.charAt(k));\r\n            }\r\n            Collections.reverse(temp);\r\n            String builder = \"\";\r\n\t\t\tfor(int k = 0 ; k<=first ; k++)\r\n\t\t\t{\r\n\t\t\t\tbuilder += (str.charAt(k));\r\n\t\t\t}\r\n            for (Character c: temp) \r\n\t\t\t{\r\n                builder += (c);\r\n            }\r\n            str = builder;\r\n\t\t}\r\n\t\t\r\n\t\treturn ans;\r\n\t}\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}