{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9511,
            "title": "Placment Of students",
            "titleSlug": "placment-of-students_1062591",
            "content": "<h4 id=\"the-coordinator-of-the-placement-cell-has-received-many-applications-of-students-applying-in-different-companies-there-are-m-students-and-n-companies-who-are-offering-jobs-each-student-is-interested-in-a-particular-number-of-companies-for-a-job-each-job-opening-can-only-accept-one-student-and-a-student-can-only-have-1-job-as-a-placement-coordinator-you-want-to-place-a-maximum-number-of-students\">The coordinator of the placement cell has received many applications of students applying in different companies. There are M students and N companies who are offering jobs. Each student is interested in a particular number of companies for a job. Each job opening can only accept one student and a student can only have 1 job. As a placement coordinator, you want to place a maximum number of students.</h4>\n\n<h4 id=\"your-task-is-to-find-the-maximum-number-of-students-that-can-be-placed-in-one-of-their-desired-jobs\">Your task is to find the maximum number of students that can be placed in one of their desired jobs</h4>\n\n<h4 id=\"the-data-about-the-set-of-favourable-jobs-are-given-in-the-form-of-an-m-n-binary-matrix-named-mat-i-e-for-m-students-we-have-m-rows-each-having-n-integers-now-for-example-if-the-first-candidate-is-interested-in-job1-the-value-of-mat-i-j-will-be-1-otherwise-it-will-be-0\">The data about the set of favourable jobs are given in the form of an M * N binary matrix named \u2018mat\u2019, i.e for M students we have M rows each having N integers. Now for example if the first candidate is interested in job1 the value of mat[i][j] will be 1 otherwise it will be 0.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>It is possible that a single candidate is interested in multiple jobs but he can take up only one of the job out of his favourable jobs, also there is no priority in jobs, i.e all favourable jobs are equally favourable to the candidate\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains 2 space-separated integers \u2018M\u2019 and \u2018N\u2019 which denote the number of applicants and number of jobs respectively.\n\nThe next \u2018M\u2019 lines have \u2018N\u2019 space-separated binary numbers which denote the favourable jobs of each applicant.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return a single integer denoting the maximum number of applicants that got their favourable jobs\n\nThe output for each test case is in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= M * N &lt;= 3000\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 2\n1 0\n0 1\n0 0\n4 4\n0 0 1 1\n1 1 1 1\n0 0 0 1\n1 0 0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Test Case 1: \n\nWe see that we have 3 candidates and 2 jobs. \nCandidate 1 wants jobs 1 only\nCandidate 2 wants job 2 only\nCandidate 3 does not like any job\n\nSo, with this given arrangement, we can have that candidate 1 gets a job1 and candidate 2 gets job 2. So we placed 2 candidates. Hence we return 2.\n\nTest Case 2:\n\nWe have 4 candidates and 4 jobs\nCandidate 1 wants jobs 3 or jobs 4.\nCandidate 2 wants any of the 4 jobs (pretty desperate)\nCandidate 3 wants only job 4 \nCandidate 4 wants only job 1\n\nSo with this arrangement, we can have candidate 1 with job 3, candidate 2 with job 2 candidates 3 with job 4, and candidate 4 with job 1.\nHence we placed all the candidates, hence we return 4.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2 \n3 4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n6 6\n0 1 1 0 0 0\n1 0 0 1 0 0\n0 0 1 0 0 0\n0 0 1 1 0 0\n0 0 0 0 0 0\n0 0 0 0 0 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n5\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 65,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary matrix `mat` of size M x N, where M represents the number of students and N represents the number of companies. `mat[i][j] = 1` indicates that the i-th student is interested in the j-th company, and `mat[i][j] = 0` indicates no interest. Each company can hire at most one student, and each student can accept at most one job. Determine the maximum number of students that can be placed in one of their desired jobs.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= M * N <= 3000",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "mat=[[1, 0],[0, 1],[0, 0]]",
                        "output": "2",
                        "explanation": "We have 3 candidates and 2 jobs. Candidate 1 wants job 1, Candidate 2 wants job 2, and Candidate 3 wants no job. We can place candidate 1 in job 1 and candidate 2 in job 2, resulting in 2 placements."
                    },
                    {
                        "input": "mat=[[0, 0, 1, 1],[1, 1, 1, 1],[0, 0, 0, 1],[1, 0, 0, 0]]",
                        "output": "4",
                        "explanation": "We have 4 candidates and 4 jobs. Candidate 1 wants jobs 3 or 4, Candidate 2 wants any job, Candidate 3 wants job 4, and Candidate 4 wants job 1. We can place candidate 1 in job 3, candidate 2 in job 2, candidate 3 in job 4, and candidate 4 in job 1, resulting in 4 placements."
                    },
                    {
                        "input": "mat=[[1, 1, 1, 1],[1, 1, 1, 1],[1, 1, 1, 1]]",
                        "output": "3",
                        "explanation": "We have 3 candidates and 4 jobs. Every candidate wants every job.  We can assign each candidate to a unique job, resulting in 3 placements."
                    },
                    {
                        "input": "mat=[[0, 1, 1, 0, 0, 0],[1, 0, 0, 1, 0, 0],[0, 0, 1, 0, 0, 0],[0, 0, 1, 1, 0, 0],[0, 0, 0, 0, 0, 0],[0, 0, 0, 0, 0, 1]]",
                        "output": "5",
                        "explanation": "We have 6 candidates and 6 jobs. We can maximize the number of placed students by carefully assigning them to jobs they desire.  Candidate 1 to Job 2, Candidate 2 to Job 1, Candidate 3 to Job 3, Candidate 4 to Job 4, and Candidate 6 to Job 6. Candidate 5 cannot be placed."
                    },
                    {
                        "input": "mat=[[0, 0, 0]]",
                        "output": "0",
                        "explanation": "There is one candidate and three jobs, but the candidate is not interested in any of the jobs, so zero students can be placed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to match people with the jobs they want using a DFS on a bipartite graph.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}