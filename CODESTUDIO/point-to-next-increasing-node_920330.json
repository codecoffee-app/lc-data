{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8822,
            "title": "Point to Next Increasing Node",
            "titleSlug": "point-to-next-increasing-node_920330",
            "content": "<h4 id=\"you-are-given-a-singly-linked-list-with-every-node-having-an-additional-arbitrary-pointer-that-currently-points-to-null-we-need-to-make-the-arbitrary-pointer-to-the-greatest-value-node-in-a-linked-list-on-its-right-side\">You are given a singly linked list with every node having an additional \u201carbitrary\u201d pointer that currently points to NULL. We need to make the \u201carbitrary\u201d pointer to the greatest value node in a linked list on its right side.</h4>\n\n<h4 id=\"more-formally-each-linked-list-node-has-three-attributes-data-which-is-the-value-of-the-node-the-next-pointer-which-points-to-the-next-node-and-an-arbit-pointer-which-is-initially-null\">More formally, each Linked List node has three attributes \u2018data\u2019, which is the value of the node, the \u2018next\u2019 pointer, which points to the next node, and an \u2018arbit\u2019 pointer which is initially NULL.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You need to return the head after populating the \u2018arbit\u2019 pointer.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Given \u2018head\u2019 as 3 -&gt; 5 -&gt; 2 -&gt; 1.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample-10885.png\" alt=\"\"></p>\n\n<pre><code>After populating the arbitrary pointer, each node&#39;s \u2018arbit\u2019 pointer would point to 5 2 1 -1 respectively.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe second line of each test case contains space-separated integers, denoting the elements in linked list nodes, and -1 denotes the end of the linked list.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print integers denoting the value of the nodes being pointed by the arbitrary pointer of that node, if the arbitrary pointer points to NULL, print -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are supposed to return the head of the linked list, whose arbitrary pointer is populated.\n\nYou are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= \u2018N\u2019 &lt;= 5000\n0 &lt;= \u2018data\u2019 &lt;= 10 ^ 4 and \u2018data\u2019 != -1\n\nTime Limit: 1sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n3 5 2 1 -1\n1 3 5 7 -1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>5 2 1 -1\n7 7 7 -1 \n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>For the first test case :  \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample-10885.png\" alt=\"\"></p>\n\n<pre><code>In the given Linked List, the above way will be how we populate the arbitrary pointer.\n\nFor the second test case:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample-4-10886.png\" alt=\"\"></p>\n\n<pre><code>In the given Linked List, the above way will be how we populate the arbitrary pointer.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n4 3 2 1 -1\n1 5 3 -1\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>3 2 1 -1\n5 3 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 15,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list where each node has a 'data' value and 'next' pointer, and an additional 'arbitrary' pointer (initially NULL).  Modify the list so that each node's 'arbitrary' pointer points to the node with the greatest 'data' value to its right. If no greater node exists to the right, the 'arbitrary' pointer should remain NULL (represented as -1 in output). Return the head of the modified linked list.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 5000 (Number of nodes in the linked list)",
                    "0 <= data <= 10^4 and data != -1 (Value of each node)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "3 5 2 1 -1",
                        "output": "5 2 1 -1",
                        "explanation": "The linked list is 3 -> 5 -> 2 -> 1.  The arbitrary pointers will point to 5 (greatest to the right of 3), 2 (greatest to the right of 5), 1 (greatest to the right of 2), and NULL (-1) (no node to the right of 1)."
                    },
                    {
                        "input": "1 3 5 7 -1",
                        "output": "7 7 7 -1",
                        "explanation": "The linked list is 1 -> 3 -> 5 -> 7. The arbitrary pointers will point to 7 (greatest to the right of 1), 7 (greatest to the right of 3), 7 (greatest to the right of 5), and NULL (-1) (no node to the right of 7)."
                    },
                    {
                        "input": "4 3 2 1 -1",
                        "output": "3 2 1 -1",
                        "explanation": "The linked list is 4 -> 3 -> 2 -> 1. The arbitrary pointers will point to 3, 2, 1 and -1 respectively."
                    },
                    {
                        "input": "1 5 3 -1",
                        "output": "5 3 -1",
                        "explanation": "The linked list is 1 -> 5 -> 3. The arbitrary pointers will point to 5, 3, and -1 respectively."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we brute-force for each node?</p>",
            "<p>Will reversing the linked list help?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}