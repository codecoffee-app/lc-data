{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10078,
            "title": "Populate Inorder Successor of all nodes of a Binary Tree",
            "titleSlug": "populate-inorder-successor-of-all-nodes-of-a-binary-tree_1118625",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-you-are-supposed-to-populate-the-next-pointer-for-all-the-nodes-the-next-pointer-for-every-node-should-be-set-to-point-to-the-inorder-successor\">You have been given a Binary Tree. You are supposed to populate the next pointer for all the nodes. The next pointer for every node should be set to point to the inorder successor.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The Inorder Successor of a node in a binary tree is the next node in Inorder traversal of the Binary Tree. It is supposed to be NULL for the last node in Inorder traversal, for which suppose it to be \u2018-1\u2019.\n</code></pre>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>For the given binary tree:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000455_1623220995_populate-inorder-successor-of-all-nodes-4-7849.png\" alt=\"Example\"></p>\n\n<pre><code>The inorder traversal of the tree will be: 4 -&gt; 2 -&gt; 5 -&gt; 1 -&gt; 6 -&gt; 3 -&gt; 7\nHence, the inorder successor of each node will be: 4 -&gt; 2 2 -&gt; 5 5 -&gt; 1 1 -&gt; 6 6 -&gt; 3 3 -&gt; 7 7 -&gt; -1\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases are as follows.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/maximum-sum-of-nodes-in-a-binary-tree-such-that-no-two-nodes-are-adjacent-7840.png\" alt=\"Example\"></p>\n\n<pre><code>Input Format:   \n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the data for both nodes separated by \u2018-&gt;\u2019, in case if the node has no successor, print \u2018-1\u2019. \n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. You just need to complete the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 3000\n1 &lt;= Data &lt;= 10^4\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n10 8 12 3 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3-&gt;8 8-&gt;10 10-&gt;12 12-&gt;-1    \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>The above input would result in the below Binary Tree:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000454_1623220988_populate-inorder-successor-of-all-nodes-3-7847.png\" alt=\"Example\"></p>\n\n<pre><code>Inorder Traversal: 3 -&gt; 8 -&gt; 10 -&gt; 12\nSo, output =&gt; 3 -&gt; 8 8 -&gt; 10 10 -&gt; 12 12 -&gt; -1\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n5 7 1 4 3 2 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4-&gt;7 7-&gt;3 3-&gt;5 5-&gt;2 2-&gt;1 1-&gt;-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Tree, populate the 'next' pointer for each node to point to its inorder successor. The inorder successor of a node is the next node encountered during an inorder traversal of the tree. The 'next' pointer of the last node in the inorder traversal should be set to null (-1).",
                "constraints": [
                    "1 <= T <= 100",
                    "0 <= N <= 3000",
                    "1 <= Data <= 10^4",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n10 8 12 3 -1 -1 -1 -1 -1",
                        "output": "3->8 8->10 10->12 12->-1",
                        "explanation": "The inorder traversal is 3 -> 8 -> 10 -> 12. Thus, the successors are as shown in the output."
                    },
                    {
                        "input": "1\n5 7 1 4 3 2 -1 -1 -1 -1 -1 -1 -1",
                        "output": "4->7 7->3 3->5 5->2 2->1 1->-1",
                        "explanation": "The inorder traversal is 4 -> 7 -> 3 -> 5 -> 2 -> 1. Thus, the successors are as shown in the output."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of an unorthodox method to traverse through the tree?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}