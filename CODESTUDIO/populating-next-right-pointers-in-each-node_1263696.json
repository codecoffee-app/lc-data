{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10730,
            "title": "Populating Next Right Pointers in Each Node",
            "titleSlug": "populating-next-right-pointers-in-each-node_1263696",
            "content": "<h4 id=\"you-have-been-given-a-complete-binary-tree-of-n-nodes-the-nodes-are-numbered-1-to-n\">You have been given a complete binary tree of \u2018N\u2019 nodes. The nodes are numbered 1 to \u2018N\u2019.</h4>\n\n<h4 id=\"you-need-to-find-the-next-node-that-is-immediately-right-in-the-level-order-form-for-each-node-in-the-given-tree\">You need to find the \u2018next\u2019 node that is immediately right in the level order form for each node in the given tree.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1. A complete binary tree is a binary tree in which nodes at all levels except the last level have two children and nodes at the last level have 0 children.\n2. Node \u2018U\u2019 is said to be the next node of \u2018V\u2019 if and only if  \u2018U\u2019 is just next to \u2018V\u2019 in tree representation.\n3. Particularly root node and rightmost nodes have \u2018next\u2019 node equal to \u2018Null\u2019 \n4. Each node of the binary tree has three-pointers, \u2018left\u2019, \u2018right\u2019, and \u2018next\u2019. Here \u2018left\u2019 and \u2018right\u2019 are the children of node and \u2018next\u2019 is one extra pointer that we need to update.\n</code></pre>\n\n<h4 id=\"for-example\">For Example :</h4>\n\n<p><img src=\"https://files.codingninjas.in/1-8373.png\" alt=\"1\"></p>\n\n<h4 id=\"the-next-node-for-1-is-null-2-has-next-node-6-5-has-next-node-3-for-the-rest-of-the-nodes-check-below\">The\u2018next\u2019 node for \u20181\u2019 is \u2018Null\u2019,  \u20182\u2019 has \u2018next\u2019 node \u20186\u2019, \u20185\u2019 has \u2018next\u2019 node \u20183\u2019, For the rest of the nodes check below.</h4>\n\n<p><img src=\"https://files.codingninjas.in/2-8374.png\" alt=\"1\"></p>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree is depicted in the below image.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/3-8375.png\" alt=\"1\"></p>\n\n<pre><code>1\n2 3\n4 5 6 7\n-1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = 5\nLeft child of 3 =6\nRight child of 3 =  7\n\nLevel 4 :\nAll children are \u2018Null\u2019\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, print the tree\u2019s level order traversal after updating \u2018next\u2019 node for each node where  \u2018-1\u2019   denoting the null node. \nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to input or print anything, and it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n0 &lt;= N &lt;= 3000\n1 &lt;= data &lt;= N\nWhere \u2018data\u2019 is the value of the node of the binary tree.\nThe given tree is always a Complete binary tree.\n\nTime Limit: 1sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1 \n1 4 6 5 2 3 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>1 -1 2 3 -1 4 5 6 7 -1\n1 -1 4 6 -1 5 2 3 7 -1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h4>\n\n<pre><code>For the first test case, the tree is\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/4-8376.png\" alt=\"1\"></p>\n\n<pre><code>For the second test case, the tree is.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/5-8377.png\" alt=\"1\"></p>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>1\n1 3 2 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>1 -1 3  2 -1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2 :</h4>\n\n<pre><code>The \u2018next\u2019 node for node \u20181\u2019 and \u20182\u2019 are \u2018Null\u2019, and node \u20183\u2019 has the next node \u20182\u2019.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a complete binary tree of 'N' nodes, numbered from 1 to 'N', the task is to find the 'next' node for each node in the level order traversal. The 'next' node is defined as the node immediately to the right of the current node at the same level. If a node is the rightmost node at its level, its 'next' node is Null.",
                "constraints": [
                    "1 <= T <= 5",
                    "0 <= N <= 3000",
                    "1 <= data <= N (where 'data' is the value of a node)",
                    "The given tree is always a Complete binary tree."
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "1 -1 2 3 -1 4 5 6 7 -1",
                        "explanation": "The tree is a complete binary tree with 7 nodes. The level order traversal with 'next' pointers set is: 1 (next: null), 2 (next: 3), 3 (next: null), 4 (next: 5), 5 (next: 6), 6 (next: 7), 7 (next: null)."
                    },
                    {
                        "input": "1 4 6 5 2 3 7 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "1 -1 4 6 -1 5 2 3 7 -1",
                        "explanation": "The tree is a complete binary tree with 7 nodes and values assigned to the nodes differently than the first test case. The level order traversal with 'next' pointers set is: 1 (next: null), 4 (next: 6), 6 (next: null), 5 (next: 2), 2 (next: 3), 3 (next: 7), 7 (next: null)."
                    },
                    {
                        "input": "1 3 2 -1 -1 -1 -1",
                        "output": "1 -1 3 2 -1",
                        "explanation": "The tree is a complete binary tree with 3 nodes. The level order traversal with 'next' pointers set is: 1 (next: null), 3 (next: 2), 2 (next: null)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we do level order traversal and try to connect the next right node?</p>",
            "<p>Note that the tree is a perfect binary tree. Can we use this fact?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}