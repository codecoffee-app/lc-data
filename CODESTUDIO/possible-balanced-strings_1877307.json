{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14068,
            "title": "Possible Balanced Strings",
            "titleSlug": "possible-balanced-strings_1877307",
            "content": "<h4 id=\"after-getting-around-30-referrals-from-a-faang-company-ninja-could-not-able-to-get-a-single-interview-call-this-makes-ninja-very-frustrated-so-ninja-tried-to-increase-his-reachability-by-posting-random-stuff-on-a-job-searching-platform-so-that-a-recruiter-might-contact-him\">After getting around 30+ referrals from a FAANG company Ninja could not able to get a single interview call. This makes Ninja very frustrated. So Ninja tried to increase his reachability by posting random stuff on a job searching platform so that a recruiter might contact him.</h4>\n\n<h4 id=\"fortunately-one-legendary-grandmaster-lgm-coder-on-codestudio-contacted-ninja-for-a-job-offer-and-lgm-gave-ninja-a-problem-to-solve-as-ninja-is-in-a-state-of-mental-depression-due-to-so-many-rejections-so-he-called-you-for-help\">Fortunately, one Legendary Grandmaster(LGM) coder on CodeStudio contacted Ninja for a job offer and LGM gave Ninja a problem to solve. As Ninja is in a state of mental depression due to so many rejections. So he called you for help.</h4>\n\n<h4 id=\"given-a-string-s-consisting-of-only-the-or-parenthesis-your-task-is-to-make-the-string-balanced-by-doing-the-following-operation-zero-or-more-times\">Given a string S, consisting of only the &#39;(&#39; or &#39;)&#39; parenthesis. Your task is to make the string balanced by doing the following operation zero or more times:</h4>\n\n<h4 id=\"1-choose-a-parenthesis-from-the-string-and-remove-it\">1. Choose a parenthesis from the string and remove it.</h4>\n\n<h4 id=\"you-need-to-print-all-possible-balanced-strings-that-can-be-formed-from-the-given-string-by-doing-the-above-operation-zero-or-more-times\">You need to print all possible balanced strings that can be formed from the given string by doing the above operation zero or more times.</h4>\n\n<h4 id=\"the-fate-of-ninja-lies-in-your-hand\">The fate of Ninja lies in your hand.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Print only those distinct strings that can be formed by removing the minimum number of parentheses.\n\nIf the string is already balanced, return the original string.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>(()\n\nExpected string is:\n\n[ () ]\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run.\n\nThe first line of each test case contains a string \u2018S\u2019 which contains the parentheses.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each case, If the returned strings are correct then the output will be 1, else  0.\n\nThe output of each test case will be printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You can return strings in any order.\n\nYou do not need to input or print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= |S| &lt;= 15\n\nTimit Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n()()()) \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nFor the first test case of sample output 1, three different strings can be created by removing one extra parenthesis.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n()(()\n()()()    \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2:</h5>\n\n<pre><code>Test case 1:\nFor the first test case of sample output 2, we can remove the middle parenthesis to get string ()().\n\nTest case 2:   \nFor the second test case of sample output 2, as the string is already balanced, hence we can return the original string.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string S consisting of only '(' or ')' parenthesis, your task is to find all possible balanced strings that can be formed by removing the minimum number of parentheses.  A balanced string is one where each opening parenthesis has a corresponding closing parenthesis, and they are properly nested.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= |S| <= 15",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "()())",
                        "output": "1",
                        "explanation": "The input string is '()())'. By removing the last ')' we get '()()', which is balanced. Other valid balanced strings are possible."
                    },
                    {
                        "input": "()(()",
                        "output": "1",
                        "explanation": "The input string is '()(()'. By removing the middle '(' we get '()()', which is balanced. Other valid balanced strings are possible."
                    },
                    {
                        "input": "()()()",
                        "output": "1",
                        "explanation": "The input string is '()()()', which is already balanced, so the result is the same string."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}