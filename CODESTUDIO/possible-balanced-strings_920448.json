{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8861,
            "title": "Possible Balanced Strings",
            "titleSlug": "possible-balanced-strings_920448",
            "content": "<h4 id=\"ninja-has-been-given-a-string-s-consisting-of-only-the-or-parenthesis-the-string-is-not-balanced-and-to-make-the-string-balanced-he-can-remove-one-or-more-parentheses-he-needs-to-print-all-possible-balanced-strings-that-can-be-formed-from-the-given-string-by-removing-the-minimum-number-of-parentheses\">Ninja has been given a string S, consisting of only the &#39;(&#39; or &#39;)&#39; parenthesis. The string is not balanced, and to make the string balanced, he can remove one or more parentheses. He needs to print all possible balanced strings that can be formed from the given string by removing the minimum number of parentheses.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Print only those distinct strings that can be formed by removing the minimum number of parentheses.\n\nIf the string is already balanced, return the original string.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>(()()()\n\nExpected strings are:\n\n[ (()()), (())(), ()()() ]\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run.\n\nThe first line of each test case contains a string \u2018S\u2019 which contains the parentheses.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each case, If the returned strings are correct then the output will be 1, else  0.\n\nThe output of each test case will be printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You can return strings in any order.\n\nYou do not need to input or print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= |S| &lt;= 15\n\nTimit Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n(()()() \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nFor the first test case of sample output 1, three different strings can be created by removing one extra parenthesis.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n()())()\n()()\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2:</h5>\n\n<pre><code>Test case 1:\nFor the first test case of sample output 2, two different strings can be created by removing one extra parenthesis.\n\nTest case 2:   \nFor the second test case of sample output 2, as the string is already balanced, hence we can return the original string.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string S consisting of only '(' or ')' parentheses, which is not necessarily balanced, find all possible balanced strings that can be formed by removing the minimum number of parentheses. Return only the distinct balanced strings. If the input string is already balanced, return the original string.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= |S| <= 15",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "(()()()",
                        "output": "1",
                        "explanation": "The input string '(()()()' can be balanced by removing one parenthesis. The possible balanced strings are [(()()), (())(), ()()()].  Since the provided output format checks for correctness based on a 1/0 indicator (and not the specific balanced strings themselves), the output '1' indicates a correct solution generation. The test case focuses on whether or not the algo generates the correct set of answers and not on the exact form of the set."
                    },
                    {
                        "input": "()())()",
                        "output": "1",
                        "explanation": "The input string '()())()' can be balanced by removing one parenthesis. Possible balanced strings include (()()) and ()()(). The output '1' suggests the algorithm produces the correct answer set."
                    },
                    {
                        "input": "()()",
                        "output": "1",
                        "explanation": "The input string '()()' is already balanced. Therefore, the algorithm should return the original string. The output '1' indicates the test case passed and the algorithm returns the correct result for a balanced string."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we use the concept of Backtracking and BFS to solve thisthis??</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}