{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9851,
            "title": "Possible Words From A Phone Number",
            "titleSlug": "possible-words-from-a-phone-number_1094907",
            "content": "<h4 id=\"after-years-of-research-ninja-is-finally-able-to-invent-the-time-machine-and-now-he-is-back-to-the-good-old-days-when-t9-keypads-were-being-used-in-mobile-phones\">After years of research, Ninja is finally able to invent the time machine, and now he is back to the good old days when T9 keypads were being used in mobile phones.</h4>\n\n<h4 id=\"being-a-curious-person-ninja-wants-to-find-out-all-possible-strings-that-can-be-formed-by-pressing-the-keys-of-the-phone\">Being a curious person, Ninja wants to find out all possible strings that can be formed by pressing the keys of the phone.</h4>\n\n<h4 id=\"formally-you-are-given-a-string-s-that-consists-of-digits-from-2-9-both-inclusive-your-task-is-to-find-out-all-the-possible-strings-that-can-be-formed-from-the-input-string-by-mapping-the-digits-to-the-letters-as-in-a-t9-keypad-then-print-the-strings-in-a-lexicographically-sorted-order\">Formally, you are given a string S, that consists of digits from 2-9 (both inclusive), your task is to find out all the possible strings that can be formed from the input string by mapping the digits to the letters as in a T9 keypad. Then, print the strings in a lexicographically sorted order.</h4>\n\n<p><img src=\"https://files.codingninjas.in/t9-keypad-7355.png\" alt=\"T9_Keypad\"></p>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>If S = \u201c34\u201d, then all the possible letters that can be formed from string S are {\u201cdg\u201d, \u201cdh\u201d, \u201cdi\u201d, \u201ceg\u201d, \u201ceh\u201d, \u201cei\u201d, \u201cfg\u201d, \u201cfh\u201d, \u201cfi\u201d}.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then, the &#39;T&#39; test cases follow.\n\nThe first line of each test case contains a string S.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print all the possible strings separated by a single space in lexicographically sorted order, that can be formed from the input string by mapping the digits to the letters as in a T9 keypad.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= |S| &lt;= 7\nwhere |S| denotes the length of the string S.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>j k l\n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for sample 1:</h5>\n\n<pre><code>For the first test case, the words that can be formed from the string S are {\u201cj\u201d, \u201ck\u201d, \u201cl\u201d}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n37\n79\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>dp dq dr ds ep eq er es fp fq fr fs\npw px py pz qw qx qy qz rw rx ry rz sw sx sy sz\n</code></pre>\n\n<h5 id=\"explanation-for-sample-2\">Explanation for sample 2:</h5>\n\n<pre><code>For the first test case, the words that can be formed from the string S are  {\u201cdp\u201d, \u201cdq\u201d, \u201cdr\u201d, \u201cds\u201d, \u201cep\u201d, \u201ceq\u201d, \u201cer\u201d, \u201ces\u201d, \u201cfp\u201d, \u201cfq\u201d, \u201cfr\u201d, \u201cfs\u201d}.\n\nFor the second test case, the words that can be formed from the string S is are {\u201cpw\u201d, \u201cpx\u201d, \u201cpy\u201d, \u201cpz\u201d, \u201cqw\u201d, \u201cqx\u201d, \u201cqy\u201d, \u201cqz\u201d, \u201crw\u201d, \u201crx\u201d, \u201cry\u201d, \u201crz\u201d, \u201csw\u201d, \u201csx\u201d, \u201csy\u201d, \u201csz\u201d}.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` consisting of digits from 2 to 9 (inclusive), find all possible strings that can be formed by mapping the digits to letters according to a standard T9 keypad.  Return the strings in lexicographically sorted order, separated by spaces.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |S| <= 7, where |S| is the length of the string S",
                    "Input string `S` contains only digits from 2 to 9"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "j k l",
                        "explanation": "The digit '5' corresponds to the letters 'j', 'k', and 'l' on a T9 keypad."
                    },
                    {
                        "input": "37",
                        "output": "dp dq dr ds ep eq er es fp fq fr fs",
                        "explanation": "The digit '3' corresponds to 'd', 'e', 'f' and the digit '7' corresponds to 'p', 'q', 'r', 's'. All possible combinations are listed in lexicographical order."
                    },
                    {
                        "input": "79",
                        "output": "pw px py pz qw qx qy qz rw rx ry rz sw sx sy sz",
                        "explanation": "The digit '7' corresponds to 'p', 'q', 'r', 's' and the digit '9' corresponds to 'w', 'x', 'y', 'z'. All possible combinations are listed in lexicographical order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a solution using backtracking.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}