{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13699,
            "title": "PostFix To Prefix",
            "titleSlug": "postfix-to-prefix_1788455",
            "content": "<h4 id=\"you-are-given-a-string-denoting-a-valid-postfix-expression-containing-and-lowercase-letters\">You are given a string denoting a valid Postfix expression containing \u2018+\u2019, \u2019-\u2019, \u2019*\u2019, \u2018/\u2019 and lowercase letters.</h4>\n\n<p><br/></p>\n\n<h4 id=\"convert-the-given-postfix-expression-into-a-prefix-expression\">Convert the given Postfix expression into a Prefix expression.</h4>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Postfix notation is a method of writing mathematical expressions in which operators are placed after the operands. For example, &quot;a b +&quot; represents the addition of a and b.\n\nPrefix notation is a method of writing mathematical expressions in which operators are placed before the operands. For example, &quot;+ a b&quot; represents the addition of a and b.\n\nExpression contains lowercase English letters, \u2018+\u2019, \u2018-\u2019, \u2018*\u2019, and  \u2018/\u2019. \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: abc*+\n\nOutput: +a*bc\n\nExplanation:\nFor the given postfix expression, infix expression is a+b*c. And it&#39;s corresponding prefix expression is +a*bc.\n</code></pre>\n\n<p><br/>   </p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a string \u2018s&#39; which denotes the Postfix expression.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return a string which denotes the corresponding prefix expression.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, and it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>ab+cd-*\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-answer\">Expected Answer:</h5>\n\n<pre><code>*+ab-cd \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-on-console\">Output on console:</h5>\n\n<pre><code>*+ab-cd \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>For this testcase, the infix expression will be (a + b) * (c - d). Hence, our prefix expression will be *+ab-cd.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>ab+c-\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-answer\">Expected Answer:</h5>\n\n<pre><code>-+abc\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-on-console\">Output on console:</h5>\n\n<pre><code>-+abc\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to solve this in O(n), where n is the length of expression.    \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= |s| &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a function `postfixToPrefix` that takes a valid postfix expression string `s` containing lowercase letters and the operators '+', '-', '*', '/' as input. The function should convert the given postfix expression into its equivalent prefix expression and return the resulting prefix string.",
                "constraints": [
                    "1 <= |s| <= 10^5",
                    "The input string 's' represents a valid postfix expression.",
                    "The expression 's' contains only lowercase English letters, '+', '-', '*', and '/'"
                ],
                "testcases": [
                    {
                        "input": "s = \"abc*+\"",
                        "output": "+a*bc",
                        "explanation": "The postfix expression \"abc*+\" is equivalent to the infix expression \"a + b * c\", which translates to the prefix expression \"+a*bc\"."
                    },
                    {
                        "input": "s = \"ab+cd-*\"",
                        "output": "*+ab-cd",
                        "explanation": "The postfix expression \"ab+cd-*\" is equivalent to the infix expression \"(a + b) * (c - d)\", which translates to the prefix expression \"*+ab-cd\"."
                    },
                    {
                        "input": "s = \"ab+c-\"",
                        "output": "-+abc",
                        "explanation": "The postfix expression \"ab+c-\" is equivalent to the infix expression \"(a + b) - c\", which translates to the prefix expression \"-+abc\"."
                    },
                    {
                        "input": "s = \"abc/+d*\"",
                        "output": "*+a/bcd",
                        "explanation": "The postfix expression \"abc/+d*\" is equivalent to the infix expression \"(a + b/c) * d\", which translates to the prefix expression \"*+a/bcd\"."
                    },
                    {
                        "input": "s = \"a\"",
                        "output": "a",
                        "explanation": "A single operand postfix expression is the same in prefix notation."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can stack help to solve this problem?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}