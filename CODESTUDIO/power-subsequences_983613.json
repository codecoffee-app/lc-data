{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9359,
            "title": "Power Subsequences",
            "titleSlug": "power-subsequences_983613",
            "content": "<h4 id=\"you-are-given-a-string-s-which-is-formed-by-characters-a-b-and-c-you-need-to-count-the-number-of-power-subsequences-of-the-given-string-s\">You are given a string S, which is formed by characters \u2018A\u2019, \u2018B\u2019 and \u2018C\u2019. You need to count the number of Power Subsequences of the given string S.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. A subsequence of string S is a string which we get after removal of zero or more characters from S, and without changing the order of character in the remaining string.\n\n2. A subsequence S\u2019 of string S, is known as Power Subsequence if S\u2019 can be represented in the form \u2018A\u2019^i + \u2018B\u2019^j + \u2018C\u2019^k where i, j and k are strictly greater than 0, ie. S\u2019 can be written as a concatenation of I \u2018A\u2019s, followed by j \u2018B\u2019s, followed by k \u2018C\u2019s. \n\n3. Eg. \u201cABC\u201d is a Power Subsequence with i=j=k=1, while \u201cBAC\u201d or \u201cAB\u201d or \u201cBC\u201d are not Power Subsequences.\n\n4. Two subsequences are considered different if and only if the set of indexes of string S, chosen for two subsequences, are different.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of the input contains an integer T denoting the number of test cases.\n\nThe first and only line of each test case consists of a string S.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print an integer that denotes the count of the number of Power Subsequences of the given string S in a separate line.\n\nAs the number of Power Subsequences can be large that&#39;s why print it modulo 10^9 +7.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t have to print anything, it has already been taken care of. Just Implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= |S| &lt;= 10^4\n\nWere |S| denotes the length of given string S.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\nABBC\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>There are 3 power subsequences for a given input string: ABC, ABC and ABBC.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\nAABBC\n</code></pre>\n\n<h5 id=\"sample-output2\">Sample Output2:</h5>\n\n<pre><code>9\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>There are 9 power subsequences for a given input string: ABC, ABC, ABC, ABC, ABBC, ABBC, AABC, AABC, AABBC.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` consisting of characters 'A', 'B', and 'C', determine the number of power subsequences present in `s`. A power subsequence is defined as a subsequence that can be represented in the form 'A'^i + 'B'^j + 'C'^k, where i, j, and k are all strictly greater than 0. Note that two subsequences are considered different if the set of indices chosen from the original string `s` are different.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= |S| <= 10^4",
                    "|S| denotes the length of the given string S."
                ],
                "testcases": [
                    {
                        "input": "s = \"ABBC\"",
                        "output": "3",
                        "explanation": "The power subsequences are ABC, ABC, and ABBC."
                    },
                    {
                        "input": "s = \"AABBC\"",
                        "output": "9",
                        "explanation": "The power subsequences are ABC, ABC, ABC, ABC, ABBC, ABBC, AABC, AABC, AABBC."
                    },
                    {
                        "input": "s = \"ABC\"",
                        "output": "1",
                        "explanation": "The only power subsequence is ABC."
                    },
                    {
                        "input": "s = \"AAABBCC\"",
                        "output": "36",
                        "explanation": "Multiple combinations of A's, B's, and C's form power subsequences."
                    },
                    {
                        "input": "s = \"AAAAAAAABBBBBCC\"",
                        "output": "441",
                        "explanation": "Illustrates a case with more A's, B's and C's"
                    },
                    {
                        "input": "s = \"ABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBC\"",
                        "output": "1",
                        "explanation": "Many Bs."
                    },
                    {
                        "input": "s = \"\"",
                        "output": "0",
                        "explanation": "Empty String"
                    },
                    {
                        "input": "s = \"A\"",
                        "output": "0",
                        "explanation": "Single A."
                    },
                    {
                        "input": "s = \"AB\"",
                        "output": "0",
                        "explanation": "Missing C"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Generate all possible subsequences of string S and count the power subsequences.</p>",
            "<p>Calculate count of sequences type \u2018A\u2019^i, \u2018A\u2019^i + \u2018B\u2019^j and \u2018A\u2019^i + \u2018B\u2019^j + \u2018C\u2019^k at each index (let's say idx) of the string and return count of \u2018A\u2019^i + \u2018B\u2019^j + \u2018C\u2019^k at the end of the string.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}