{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10420,
            "title": "Prefix to Infix",
            "titleSlug": "prefix-to-infix_1215000",
            "content": "<h4 id=\"you-are-given-a-string-denoting-a-valid-prefix-expression-containing-and-lowercase-letters\">You are given a string denoting a valid Prefix expression containing \u2018+\u2019, \u2019-\u2019, \u2019*\u2019, \u2018/\u2019 and lowercase letters.</h4>\n\n<p><br/></p>\n\n<h4 id=\"convert-the-given-prefix-expression-into-an-infix-expression\">Convert the given Prefix expression into an Infix expression.</h4>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Infix notation is a method of writing mathematical expressions in which operators are placed between operands. For example, &quot;a + b&quot; represents the addition of a and b.\n\nPrefix notation is a method of writing mathematical expressions in which operators are placed before the operands. For example, &quot;+ a b&quot; represents the addition of a and b.\n\nExpression contains lowercase English letters, \u2018+\u2019, \u2018-\u2019, \u2018*\u2019, and  \u2018/\u2019. \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: /-ab+-cde\n\nOutput: ((a-b)/((c-d)+e))\n\nExplanation:\nIn this test case, there are four operators \u2018/\u2019, \u2018-\u2019, \u2018+\u2019, \u2018-\u2019.\nPrefix expression:  /-ab+-cde. \nThe operator between  \u2018a\u2019 and \u2018b\u2019 is \u2018-\u2019. Resulting expression: /(a-b)+-cde.\nThe operator between  \u2018c\u2019 and \u2018d\u2019 is \u2018-\u2019. Resulting expression: /(a-b)+(c-d)e.\nThe operator between \u2018c-d\u2019 and \u2018e\u2019 is +. Resulting expression: /(a-b)((c-d)+e).\nThe operator between \u2018a-b\u2019 and \u2018((c-d)+e)\u2019 is \u2018/\u2019. Resulting expression: ((a-b)/((c-d)+e)).\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a string, denoting the given prefix expression.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return the infix expression corresponding to the given prefix expression.\n</code></pre>\n\n<p><br/></p>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don\u2019t need to print anything. You just need to implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>*-a/bc-/dkl\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-answer\">Expected Answer:</h5>\n\n<pre><code>((a-(b/c))*((d/k)-l))\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-on-console\">Output on console:</h5>\n\n<pre><code>((a-(b/c))*((d/k)-l))\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>In this testcase, there are five operators \u2018*\u2019, \u2018-\u2019, \u2018/\u2019, \u2018-\u2019, \u2018/\u2019.\nPrefix Expression: *-a/bc-/dkl.\nThe operator between  \u2018b\u2019 and \u2018c\u2019 is \u2018/\u2019. Resulting expression: *-a(b/c)-/dkl.\nThe operator between  \u2018d\u2019 and \u2018k\u2019 is \u2018/\u2019. Resulting expression: *-a(b/c)-(d/k)l.\nThe operator between  \u2018a\u2019 and \u2018(b/c)\u2019 is \u2018-\u2019. Resulting expression: *(a-(b/c))-(d/k)l.\nThe operator between  \u2018d/k\u2019 and \u2018l\u2019 is \u2018-\u2019. Resulting expression: *(a-(b/c))((d/k)-l).\nThe operator between  \u2018(a-(b/c))\u2019 and \u2018((d/k)-l)\u2019 is \u2018*\u2019. Resulting expression: ((a-(b/c))*((d/k)-l)).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>*-a/bc-/del\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-answer\">Expected Answer:</h5>\n\n<pre><code>((a-(b/c))*((d/e)-l))\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-on-console\">Output on console:</h5>\n\n<pre><code>((a-(b/c))*((d/e)-l))\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to solve this in O(n^2), where n is the length of expression.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= n &lt;= 500\nwhere n is the length of expression.\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 29,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a string representing a valid prefix expression. The expression consists of operators ('+', '-', '*', '/') and lowercase English letters (operands). Your task is to convert this prefix expression into its equivalent infix expression.",
                "constraints": [
                    "1 <= n <= 500, where n is the length of the prefix expression.",
                    "Expression contains lowercase English letters, '+', '-', '*', and '/'."
                ],
                "testcases": [
                    {
                        "input": "/-ab+-cde",
                        "output": "((a-b)/((c-d)+e))",
                        "explanation": "The given prefix expression is '/-ab+-cde'.  First, the operator '-' acts on 'a' and 'b' resulting in '(a-b)'.  Next, the operator '-' acts on 'c' and 'd' resulting in '(c-d)'. Then '+' is applied on (c-d) and e giving ((c-d)+e). Finally, '/' is applied on (a-b) and ((c-d)+e) giving ((a-b)/((c-d)+e))."
                    },
                    {
                        "input": "*-a/bc-/dkl",
                        "output": "((a-(b/c))*((d/k)-l))",
                        "explanation": "The given prefix expression is '*-a/bc-/dkl'. The operator '/' acts on 'b' and 'c' resulting in '(b/c)'. Then, the operator '/' acts on 'd' and 'k' resulting in '(d/k)'. Next, the operator '-' is applied on 'a' and (b/c) resulting in '(a-(b/c))'. The operator '-' is then applied on (d/k) and 'l' resulting in '((d/k)-l)'. Finally, '*' is applied on (a-(b/c)) and ((d/k)-l) resulting in '((a-(b/c))*((d/k)-l))'."
                    },
                    {
                        "input": "*-a/bc-/del",
                        "output": "((a-(b/c))*((d/e)-l))",
                        "explanation": "The given prefix expression is '*-a/bc-/del'. The operator '/' acts on 'b' and 'c' resulting in '(b/c)'. Then, the operator '/' acts on 'd' and 'e' resulting in '(d/e)'. Next, the operator '-' is applied on 'a' and (b/c) resulting in '(a-(b/c))'. The operator '-' is then applied on (d/e) and 'l' resulting in '((d/e)-l)'. Finally, '*' is applied on (a-(b/c)) and ((d/e)-l) resulting in '((a-(b/c))*((d/e)-l))'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you find how to evaluate the expression? Which data structure can be used for the conversion?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}