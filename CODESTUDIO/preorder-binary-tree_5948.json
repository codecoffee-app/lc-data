{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 1565,
            "title": "Preorder Binary Tree",
            "titleSlug": "preorder-binary-tree_5948",
            "content": "<h4 id=\"you-are-given-a-binary-tree\">You are given a <em><strong>\u2018Binary Tree\u2019</strong></em>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"return-the-preorder-traversal-of-the-binary-tree\">Return the preorder traversal of the Binary Tree.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: Consider the following Binary Tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/example-29965.png\" alt=\"Example\">   </p>\n\n<pre><code>Output: \nFollowing is the preorder traversal of the given Binary Tree: [1, 2, 5, 3, 6, 4]\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The only line contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null(-1).\n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return an array representing the preorder traversal of the given binary tree.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1 2 3 5 4 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">\u00a0Sample Output 1:</h5>\n\n<pre><code>1 2 5 4 3 6 7\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>The Binary Tree given in the input is as follows:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample1-29969.png\" alt=\"Sample1\">\n<br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">\u00a0Sample Output 2:</h5>\n\n<pre><code>5 6 2 3 9 10\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>The Binary Tree given in the input is as follows:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample2-29967.png\" alt=\"Sample2\">\n<br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to do this in O(n).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= n &lt;= 100000\nwhere &#39;n&#39; is the number of nodes in the binary tree.\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 71,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a binary tree represented by a TreeNode, return an array containing the preorder traversal of the tree. Implement the `preOrder` function.",
                "constraints": [
                    "1 <= n <= 100000, where 'n' is the number of nodes in the binary tree.",
                    "The data value of each node in the tree is an integer.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "root = TreeNode(1), root.left = TreeNode(2), root.right = TreeNode(3), root.left.left = TreeNode(5), root.left.right = TreeNode(4), root.right.left = TreeNode(6), root.right.right = TreeNode(7)",
                        "output": "[1, 2, 5, 4, 3, 6, 7]",
                        "explanation": "The given binary tree is:\n      1\n     / \\\n    2   3\n   / \\ / \\\n  5   4 6  7\nThe preorder traversal is: 1 -> 2 -> 5 -> 4 -> 3 -> 6 -> 7"
                    },
                    {
                        "input": "root = TreeNode(5), root.left = TreeNode(6), root.right = TreeNode(10), root.left.left = TreeNode(2), root.left.right = TreeNode(3), root.right.left = NULL, root.right.right = NULL, root.left.left.left = NULL, root.left.left.right = NULL, root.left.right.left = NULL, root.left.right.right = TreeNode(9)",
                        "output": "[5, 6, 2, 3, 9, 10]",
                        "explanation": "The given binary tree is:\n      5\n     / \\\n    6   10\n   / \\  \n  2   3\n      \\ \n       9\nThe preorder traversal is: 5 -> 6 -> 2 -> 3 -> 9 -> 10"
                    },
                    {
                        "input": "root = TreeNode(1)",
                        "output": "[1]",
                        "explanation": "The binary tree contains only the root node 1, so the preorder traversal is [1]."
                    },
                    {
                        "input": "root = NULL",
                        "output": "[]",
                        "explanation": "If the root is null, the preorder traversal is an empty list."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>What is the order of visiting in preorder traversal?</p>",
            "<p>Use Stack.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}