{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14167,
            "title": "Preorder Traversal",
            "titleSlug": "preorder-traversal_2035934",
            "content": "<h4 id=\"you-are-given-the-root-node-of-a-binary-tree-consisting-of-n-nodes-your-task-is-to-return-its-preorder-traversal-the-preorder-traversal-of-a-binary-tree-is-defined-as-a-process-of-traversing-each-node-in-the-following-manner\">You are given the root node of a binary tree consisting of \u2018N\u2019 nodes. Your task is to return its preorder traversal. The preorder traversal of a binary tree is defined as a process of traversing each node in the following manner-:</h4>\n\n<pre><code>1- Visit the root node.\n2- Traverse all nodes in the left subtree of the root node.\n3- Traverse all the nodes in the right subtree of the root node.\n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>For the given tree below,\nPreorder traversal for the given tree will be [1, 2, 4, 5, 3]. Hence, the answer is [1, 2, 4, 5, 3].\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000473_1626608226_NrNpEDisiXKDozxN.png\" alt=\"Example\"></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. \n\nThe second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space. If any node does not have a left or right child, take -1 in its place. Refer to the example for further clarification.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line of space-separated integers denoting the preorder traversal of the given binary tree.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^4\n1 &lt;= nodeVal &lt;=10^9\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 4 -1 -1 5 6 7 -1 -1 -1 -1 -1 -1\n5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 4 6 7 3 5 \n5 6 2 3 9 10\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For the first test case, the given tree is:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000475_1626942636_treePostorder.png\" alt=\"binaryTree\"></p>\n\n<pre><code>Preorder traversal will be : [1, 2, 4, 6, 7, 3, 5]. Hence, the answer is [1, 2, 4, 6, 7, 3, 5].\n\n\nFor the second test case, the given tree is\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000476_1626943229_treePostorder2.png\" alt=\"binaryTree2\"></p>\n\n<pre><code>Preorder traversal will be : [5, 6, 2, 3, 9, 10]. Hence, the answer is  [5, 6, 2, 3, 9, 10].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 2 3 4 -1 7 8 5 -1 9 -1 -1 -1 6 -1 -1 -1 -1 -1\n10 20 11 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 2 4 5 6 3 7 9 8\n10 20 11\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 29,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root node of a binary tree consisting of 'N' nodes, return its preorder traversal.  Preorder traversal visits the root node first, then recursively traverses the left subtree, and finally recursively traverses the right subtree.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^4",
                    "1 <= nodeVal <= 10^9",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 -1 -1 5 6 7 -1 -1 -1 -1 -1 -1",
                        "output": "1 2 4 6 7 3 5",
                        "explanation": "The binary tree can be visualized, preorder traversal visits node 1, then its left child 2, then the left child of 2 (4), then the left child of 4(6), then the left child of 6, which is null and then right child which is 7. Then right child of 4 which is null and then comes back to node 2 and moves to it's right which is null. Now the traversal moves to 3 and then traverses the left child 5.  The complete traversal is [1, 2, 4, 6, 7, 3, 5]."
                    },
                    {
                        "input": "5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1",
                        "output": "5 6 2 3 9 10",
                        "explanation": "The binary tree can be visualized, preorder traversal visits node 5, then its left child 6, then the left child of 6 (2), then left child of 2 which is null and then right child which is 3.  Now right child of 6 which is null. Now the traversal moves to 10 and then traverses the left child 9. The complete traversal is [5, 6, 2, 3, 9, 10]."
                    },
                    {
                        "input": "1 2 3 4 -1 7 8 5 -1 9 -1 -1 -1 6 -1 -1 -1 -1 -1",
                        "output": "1 2 4 5 6 3 7 9 8",
                        "explanation": null
                    },
                    {
                        "input": "10 20 11 -1 -1 -1 -1",
                        "output": "10 20 11",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use a recursive approach.</p>",
            "<p>Can you use any iterative method?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}