{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 17201,
            "title": "Preorder Traversal",
            "titleSlug": "preorder-traversal_3838888",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-n-nodes-where-the-nodes-have-integer-values-your-task-is-to-find-the-pre-order-traversal-of-the-given-binary-tree\">You have been given a Binary Tree of &#39;N&#39; nodes, where the nodes have integer values. Your task is to find the Pre-Order traversal of the given binary tree.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>For the given binary tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-14509.jpg\" alt=\"\"></p>\n\n<pre><code>The Preorder traversal will be [1, 3, 5, 2, 4, 7, 6].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>The input for the tree is depicted in the below image:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/2-14510.jpg\" alt=\"\"></p>\n\n<pre><code>1 3 8 5 2 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 3\nRight child of 1 = 8\n\nLevel 3 :\nLeft child of 3 = 5\nRight child of 3 = 2\nLeft child of 8 =7\nRight child of 8 =  null (-1)\n\nLevel 4 :\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 2 = null (-1)\nRight child of 2 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\n1\n3 8\n5 2 7 -1\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. The first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\n2. The input ends when all nodes at the last level are null(-1).\n\n3. The above format was just to provide clarity on how the input is formed for a given tree. The sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 3 8 5 2 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return a vector containing the Pre-Order traversal of a given binary tree.\n\nThe first and only line of output of each test case prints &#39;N&#39; single space-separated integers denoting the node&#39;s values in Pre-Order traversal.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n0 &lt;= N &lt;= 3000\n0 &lt;= data &lt;= 10^9     \n\nWhere &#39;data&#39; denotes the node value of the binary tree nodes.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1 2 3 -1 -1 -1  6 -1 -1\n1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 2 3 6\n1 2 3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1 :</h5>\n\n<pre><code> In test case 1, the given binary tree is shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/3-14511.jpg\" alt=\"\"></p>\n\n<pre><code>Preorder traversal of given tree = [1, 2, 3, 6]\n\nIn test case 2, the given binary tree is shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/4-14512.jpg\" alt=\"\"></p>\n\n<pre><code>Preorder traversal of given tree = [1, 2, 3]\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 -1 -1\n1 2 4 5 3 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n1 2 5 3 4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2 :</h5>\n\n<pre><code>In test case 1, there is only one node, so Pre-Order traversal will be only [1].\n\nIn test case 2, the given binary tree is shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/5-14513.jpg\" alt=\"\"></p>\n\n<pre><code>Preorder traversal of given tree = [1, 2, 5, 3, 4]\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 34,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree represented by its root node, return a vector containing the pre-order traversal of the tree. The binary tree nodes have integer values.",
                "constraints": [
                    "1 <= T <= 10",
                    "0 <= N <= 3000",
                    "0 <= data <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "root = TreeNode(1, TreeNode(2, nullptr, nullptr), TreeNode(3, nullptr, TreeNode(6, nullptr, nullptr)))",
                        "output": "1 2 3 6",
                        "explanation": "The pre-order traversal of the tree with root 1, left child 2 and right child 3, where 3 has a right child 6, is [1, 2, 3, 6]."
                    },
                    {
                        "input": "root = TreeNode(1, TreeNode(2, nullptr, nullptr), TreeNode(3, nullptr, nullptr))",
                        "output": "1 2 3",
                        "explanation": "The pre-order traversal of the tree with root 1, left child 2 and right child 3 is [1, 2, 3]."
                    },
                    {
                        "input": "root = TreeNode(1, nullptr, nullptr)",
                        "output": "1",
                        "explanation": "The pre-order traversal of a tree with only the root node 1 is [1]."
                    },
                    {
                        "input": "root = TreeNode(1, TreeNode(2, TreeNode(4, nullptr, nullptr), TreeNode(5, nullptr, nullptr)), TreeNode(3, nullptr, nullptr))",
                        "output": "1 2 4 5 3",
                        "explanation": "The pre-order traversal of the tree is [1, 2, 4, 5, 3]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a recursive solution.</p>",
            "<p>Think of an iterative solution</p>",
            "<p>Think of an iterative solution using constant space.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}