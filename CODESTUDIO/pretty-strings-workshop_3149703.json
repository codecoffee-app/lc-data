{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16420,
            "title": "Pretty Strings Workshop",
            "titleSlug": "pretty-strings-workshop_3149703",
            "content": "<h4 id=\"ninja-runs-a-workshop-where-he-converts-a-string-to-a-pretty-string-a-pretty-string-is-a-string-that-does-not-contain-a-substring-of-length-at-least-2-which-is-a-palindrome-the-cost-of-a-string-is-the-minimum-number-of-operations-required-to-convert-the-string-into-a-pretty-string-in-one-operation-the-ninja-can-change-any-character-of-the-string-to-one-of-the-first-three-letters-of-the-english-alphabet-as-ninja-is-good-at-string-processing-but-incompetent-at-math-so-can-you-help-ninja-in-calculating-the-cost-of-the-strings\">Ninja runs a workshop where he converts a string to a pretty string. A pretty string is a string that does not contain a substring of length at least 2, which is a palindrome. The cost of a string is the minimum number of operations required to convert the string into a pretty string. In one operation, the ninja can change any character of the string to one of the first three letters of the English alphabet. As ninja is good at string processing but incompetent at math. So, can you help ninja in calculating the cost of the strings?</h4>\n\n<h4 id=\"you-are-given-a-string-str-containing-only-the-first-three-letters-of-the-english-alphabet-and-m-queries-in-each-query-you-have-to-find-the-cost-of-the-substring-of-the-str-from-index-l-to-r\">You are given a string \u2018STR\u2019 containing only the first three letters of the English alphabet and \u2018M\u2019 queries. In each query, you have to find the cost of the substring of the \u2018STR\u2019 from index \u2018L\u2019 to \u2018R\u2019.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>You are given \u2018STR\u2019 = \u201caabac\u201d and \u2018QUERIES\u2019 = [[1, 3], [2, 5]].\nThen the answer of the first query will be 1 as we can convert the substring \u201caab\u201d to \u201cacb\u201d by converting \u2018a\u2019 at index 2 to \u2018c\u2019 to get a pretty string. \nThe answer for the second query will be 1 as we can convert the substring \u201cabac\u201d to \u201ccbac\u201d by converting \u2018a\u2019 at index 2 to \u2018c\u2019. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases.\n\nThe first line contains two space-separated integers, \u2018N\u2019 and \u2018M\u2019, denoting the length of the input string and the number of queries, respectively.\n\nThe second line of each test case contains a string denoting the input string.\n\nThe following \u2018M\u2019 lines contain two space-separated integers, \u2018L\u2019 and \u2018R\u2019, denoting the start and end index(1-indexed) of the substring of the string, respectively.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each query, print the cost of the substring to the string from index \u2018L\u2019 to \u2018R\u2019. \n\nThe output for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 \n1 &lt;= N &lt;= 2000\n\u2018STR\u2019 contains only \u2018a\u2019, \u2018b\u2019 or \u2018c\u2019.\n1 &lt;= M &lt;= 2000\n1 &lt;= L &lt;= N  \nL &lt;= R &lt;= N\n\nTime limit: 1 sec\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to input or print anything, as it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5 2\naabac\n1 3\n2 5\n3 1\nabb\n1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n1\n1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For the first test case, the answer of the first query will be 1 as we can convert the substring \u201caab\u201d to \u201cacb\u201d by converting \u2018a\u2019 at index 2 to \u2018c\u2019 to get a pretty string. \nThe answer for the second query will be 1 as we can convert the substring \u201cabac\u201d to \u201ccbac\u201d by converting \u2018a\u2019 at index 2 to \u2018c\u2019. \nFor the second test case, the answer of the first query will be 1 as we can convert the substring \u201cabb\u201d to \u201cabc\u201d by converting \u2018b\u2019 at index 3 to \u2018c\u2019 to get a pretty string. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4 2\nabcb\n1 2\n2 4\n3 1\naaa\n1 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0\n1\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `STR` of length `N` consisting of the first three lowercase English letters ('a', 'b', 'c'), and a set of `M` queries, determine the minimum number of character changes required to transform each substring specified by the queries into a 'pretty string'. A 'pretty string' is defined as a string that does not contain any palindromic substring of length 2 or greater. Each query consists of a start index `L` and an end index `R` (1-indexed), representing the substring `STR[L-1...R-1]`. In a single operation, you can change any character in the string to one of 'a', 'b', or 'c'. Calculate the cost (minimum number of operations) for each query.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 2000",
                    "1 <= M <= 2000",
                    "1 <= L <= N",
                    "L <= R <= N",
                    "`STR` contains only 'a', 'b', or 'c'."
                ],
                "testcases": [
                    {
                        "input": "n = 5, s = \"aabac\", m = 2, queries = [[1, 3], [2, 5]]",
                        "output": "[1, 1]",
                        "explanation": "For the first query (1, 3), the substring is \"aab\". Changing the second 'a' to 'c' gives \"acb\", which is a pretty string. Cost is 1.\nFor the second query (2, 5), the substring is \"abac\". Changing the first 'a' to 'c' gives \"cbac\", which is a pretty string. Cost is 1."
                    },
                    {
                        "input": "n = 3, s = \"abb\", m = 1, queries = [[1, 3]]",
                        "output": "[1]",
                        "explanation": "For the query (1, 3), the substring is \"abb\". Changing the second 'b' to 'c' gives \"abc\", which is a pretty string. Cost is 1."
                    },
                    {
                        "input": "n = 4, s = \"abcb\", m = 2, queries = [[1, 2], [2, 4]]",
                        "output": "[0, 1]",
                        "explanation": "For the first query (1, 2), the substring is \"ab\". It is already a pretty string. Cost is 0.\nFor the second query (2, 4), the substring is \"bcb\". Changing the 'c' to 'a' gives \"bab\", which is a pretty string. Cost is 1."
                    },
                    {
                        "input": "n = 3, s = \"aaa\", m = 1, queries = [[1, 3]]",
                        "output": "[2]",
                        "explanation": "For the query (1, 3), the substring is \"aaa\". Changing the first 'a' to 'b' and the second 'a' to 'c' gives \"bac\", which is a pretty string. Cost is 2. Other valid solutions are \"abc\", \"bca\", etc. Note that \"aba\" is not a pretty string because it contains a palindrome \"aba\" of length 3."
                    },
                    {
                        "input": "n = 6, s = \"abcabc\", m = 1, queries = [[1,6]]",
                        "output": "[0]",
                        "explanation": "The entire string \"abcabc\" does not contain any palindromes of length greater than or equal to 2. So cost is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find all the possible pretty strings.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}