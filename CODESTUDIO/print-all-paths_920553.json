{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8947,
            "title": "Print All Paths",
            "titleSlug": "print-all-paths_920553",
            "content": "<h4 id=\"you-are-given-a-graph-with-n-nodes-and-m-unidirectional-edges-also-you-are-given-two-integers-s-and-d-denoting-the-source-and-destination-your-task-is-to-find-all-the-paths-from-s-to-d\">You are given a graph with \u2018N\u2019 nodes and \u2018M\u2019 unidirectional edges. Also you are given two integers \u2018S\u2019 and \u2018D\u2019 denoting the source and destination. Your task is to find all the paths from \u2018S\u2019 to \u2018D\u2019.</h4>\n\n<h4 id=\"note-an-ordered-set-of-nodes-s-u1-u2-un-d-is-a-valid-path-between-s-and-d-if-all-nodes-along-the-path-are-unique\">Note: An ordered set of nodes { S, u1, u2...un, D} is a valid path between \u2018S\u2019 and \u2018D\u2019, if all nodes along the path are unique.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>For given N = 4, M = 4, S = 0 and D =3.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bridge1-11402.png\" alt=\"1\"></p>\n\n<pre><code>In the above example, the path 0 -&gt; 1 - &gt; 3 is a valid path as all nodes along the path are unique and the path 0 -&gt; 1 -&gt; 2 -&gt; 1 -&gt; 3 is not a valid path because node 1 is visited twice.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains one positive integer \u2018T\u2019, denoting the number of test cases, then \u2018T\u2019 test cases follows.\n\nThe first line of each test case contains two integers \u2018N\u2019 and  \u2018M\u2019, denoting the number of nodes and the number of edges.\n\nThe next \u2018M\u2019 lines of each test case contains two space-separated integers \u2019u\u2019 and \u2018v\u2019, denoting the edge between \u2018u\u2019 and \u2018v\u2019.\n\nThe last line of each test case contains two integers \u2018S\u2019 and \u2018D\u2019 denoting the source and destination.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The first line of each test case contains an integer \u2018N\u2019 , denoting the number of valid paths from \u2018S\u2019 to \u2018D\u2019.\n\nThe next \u2018N\u2019 line of each test case contains the all nodes from \u2018S\u2019 to \u2018D\u2019 along the \u2018ith\u2019 path where 1 &lt;= i &lt;= N. \n\nIf there are more than one path then the ith path should be lexicographically smaller than (i + 1) path.\n\nOutput of each test case will be printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 5\n1 &lt;= M &lt;= 10\n0 &lt;= u, v , S, D &lt;= N - 1 \n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 4\n0 1\n1 2\n1 3\n2 3\n0 3\n5 3\n0 1\n1 2\n3 4\n0 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n0 1 2 3 \n0 1 3 \n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output1\">Explanation of Sample Output1:</h5>\n\n<pre><code>In the first test case, the graph like this: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bridge1-11402.png\" alt=\"1\"></p>\n\n<pre><code>As we can observe, there are two valid path\nP1 : 0  -&gt; 1 -&gt;  2 -&gt;  3 \nP2 : 0  -&gt; 1 -&gt;  3 \n\nNote : Path P2: 0 -&gt; 1 -&gt; 3 is lexicographically larger than P1: 0 -&gt; 1 -&gt; 2 -&gt; 3, so path P1 is printed before path P2.\n\nIn the second test case, the graph looks like this: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/disconnected-graph-11668.png\" alt=\"1\"></p>\n\n<pre><code>As we can observe, there are two disconnected graphs - {0, 1, 2} and {3, 4}. There is no path between 0 and 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 4\n0 0\n0 1\n1 3\n4 2\n3 0\n2 2\n0 0\n1 1\n0 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n3 1 0 \n1\n0 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph with 'N' nodes and 'M' edges, find all valid paths from a source node 'S' to a destination node 'D'. A valid path is defined as a sequence of unique nodes starting at 'S' and ending at 'D'. The paths should be returned in lexicographical order.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 5",
                    "1 <= M <= 10",
                    "0 <= u, v, S, D <= N - 1",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "4 4\n0 1\n1 2\n1 3\n2 3\n0 3",
                        "output": "2\n0 1 2 3\n0 1 3",
                        "explanation": "There are two valid paths from node 0 to node 3. The first path is 0 -> 1 -> 2 -> 3, and the second path is 0 -> 1 -> 3. The first path (0 1 2 3) is lexicographically smaller than the second path (0 1 3), so it is printed first."
                    },
                    {
                        "input": "5 3\n0 1\n1 2\n3 4\n0 3",
                        "output": "0",
                        "explanation": "There are two disconnected components in the graph: {0, 1, 2} and {3, 4}. Consequently, there is no path from node 0 to node 3."
                    },
                    {
                        "input": "5 4\n0 0\n0 1\n1 3\n4 2\n3 0",
                        "output": "1\n3 1 0",
                        "explanation": null
                    },
                    {
                        "input": "2 2\n0 0\n1 1\n0 0",
                        "output": "1\n0",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;Can you use backtracking and try out all possible paths?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}