{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10813,
            "title": "Print Binary Tree",
            "titleSlug": "print-binary-tree_1266040",
            "content": "<h4 id=\"given-a-binary-tree-of-integers-you-need-to-print-the-binary-tree-in-a-2-d-array-of-string-such-that\">Given a binary tree of integers, you need to print the binary tree in a 2-D array of string such that -</h4>\n\n<h4 id=\"1-there-should-be-h-number-of-rows-in-the-matrix-where-h-is-the-binary-tree-s-height\">1. There should be \u2018H\u2019 number of rows in the matrix where \u2018H\u2019 is the binary tree\u2019s height.</h4>\n\n<h4 id=\"2-the-column-number-should-always-be-an-odd-value\">2. The column number should always be an odd value.</h4>\n\n<h4 id=\"the-unfilled-cells-should-contain-an-empty-string\">The unfilled cells should contain an empty string \u201c \u201c.</h4>\n\n<h4 id=\"if-the-parent-node-is-placed-at-matrix-row-column-this-cell-will-divide-the-rest-space-into-two-parts-i-e-left-part-and-right-part-you-should-print-the-left-subtree-of-this-parent-node-in-the-left-part-and-the-right-subtree-in-the-right-part\">If the parent node is placed at matrix[ row ][ column ], this cell will divide the rest space into two parts, i.e., left part and right part. You should print the left subtree of this parent node in the left part and the right subtree in the right part.</h4>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>If one of the left and right subtree is empty while the other is not, then for the empty part, you don\u2019t have to print anything but have to leave the space as that of the nonempty size subtree.\n</code></pre>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>For the given binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-2-8437.png\" alt=\"\"></p>\n\n<pre><code>Matrix will look like as\n\n[ \u201c \u201c,  \u201c \u201c,  \u201c \u201c,  \u201c2\u201d,  \u201c \u201c,  \u201c \u201c,  \u201c \u201c ] \n[ \u201c \u201c,  \u201c6 \u201c,  \u201c \u201c,  \u201c \u201c,  \u201c \u201c,  \u201c4 \u201c,  \u201c \u201c ] \n[ \u201c \u201c,  \u201c \u201c,  \u201c8 \u201c,  \u201c \u201c,  \u201c \u201c,  \u201c \u201c,  \u201c \u201c ] \n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases. Then the test cases are as follows.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-input-format-2-8282.png\" alt=\"\"></p>\n\n<pre><code>For example, the input for the tree depicted in the above image would be :\n\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test, print the binary tree in 2-D array of strings.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n0 &lt;= N &lt;= 10^3\n1 &lt;= data &lt;= 10^4\n\nWhere \u201cdata\u201d is the value of the binary tree node.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 11 18 7 -1 5 2 -1 -1 -1 -1 -1 -1\n24 2 -1 5 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>[ \u201c \u201c,  \u201c \u201c,  \u201c \u201c,  \u201c4\u201d,  \u201c \u201c,  \u201c \u201c,  \u201c \u201c ] \n[ \u201c \u201c,  \u201c11\u201c,  \u201c \u201c,  \u201c \u201d,  \u201c \u201c,  \u201c18\u201c,  \u201c \u201c ] \n[ \u201c7 \u201c,  \u201c \u201c,  \u201c \u201c,  \u201c \u201d,  \u201c5 \u201c,  \u201c \u201c,  \u201c2 \u201c ] \n[ \u201c \u201c,  \u201c \u201c,  \u201c \u201c,  \u201c24\u201d,  \u201c \u201c,  \u201c \u201c,  \u201c \u201c ] \n[ \u201c \u201c,  \u201c2\u201c,  \u201c \u201c,  \u201c \u201d,  \u201c \u201c,  \u201c \u201c,  \u201c \u201c ] \n[ \u201c 5\u201c,  \u201c \u201c,  \u201c \u201c,  \u201c \u201d,  \u201c \u201c,  \u201c \u201c,  \u201c \u201c ] \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>Test Case 1: The binary tree given in this case will look as\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-3-8438.png\" alt=\"\"></p>\n\n<pre><code>Therefore the matrix will look as \n[ \u201c \u201c,  \u201c \u201c,  \u201c \u201c,  \u201c4\u201d,  \u201c \u201c,  \u201c \u201c,  \u201c \u201c ] \n[ \u201c \u201c,  \u201c11\u201c,  \u201c \u201c,  \u201c \u201d,  \u201c \u201c,  \u201c18\u201c,  \u201c \u201c ] \n[ \u201c7 \u201c,  \u201c \u201c,  \u201c \u201c,  \u201c \u201d,  \u201c5 \u201c,  \u201c \u201c,  \u201c2 \u201c ] \n\n\nTest Case 2: The binary tree in this case is-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-4-8439.png\" alt=\"\"></p>\n\n<pre><code>Therefore the output of this case will look as \n[ \u201c \u201c,  \u201c \u201c,  \u201c \u201c,  \u201c24\u201d,  \u201c \u201c,  \u201c \u201c,  \u201c \u201c ] \n[ \u201c \u201c,  \u201c2\u201c,  \u201c \u201c,  \u201c \u201d,  \u201c \u201c,  \u201c \u201c,  \u201c \u201c ] \n[ \u201c 5\u201c,  \u201c \u201c,  \u201c \u201c,  \u201c \u201d,  \u201c \u201c,  \u201c \u201c,  \u201c \u201c ] \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 29 7 -1 -1 -1 -1\n5 -1 10 15 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>[ \u201c \u201c,  \u201c 5 \u201c,  \u201c \u201c ]    \n[ \u201c29 \u201c,  \u201c \u201c,  \u201c 7\u201c ]    \n[ \u201c \u201c,  \u201c \u201c,  \u201c \u201c,  \u201c5\u201d,  \u201c \u201c,  \u201c \u201c,  \u201c \u201c ] \n[ \u201c \u201c,  \u201c-1 \u201c,  \u201c \u201c,  \u201c\u201d,  \u201c \u201c,  \u201c10 \u201c,  \u201c \u201c ] \n[ \u201c \u201c,  \u201c \u201c,  \u201c \u201c,  \u201c \u201d,  \u201c15 \u201c,  \u201c \u201c,  \u201c \u201c ] \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2:</h5>\n\n<pre><code>Test Case 1: The matrix will look as \n[ \u201c \u201c,  \u201c 5 \u201c,  \u201c \u201c ]    \n[ \u201c29 \u201c,  \u201c \u201c,  \u201c 7\u201c ]    \n\n\nTest Case 2: The output of this case will look as \n[ \u201c \u201c,  \u201c \u201c,  \u201c \u201c,  \u201c5\u201d,  \u201c \u201c,  \u201c \u201c,  \u201c \u201c ] \n[ \u201c \u201c,  \u201c-1 \u201c,  \u201c \u201c,  \u201c\u201d,  \u201c \u201c,  \u201c10 \u201c,  \u201c \u201c ] \n[ \u201c \u201c,  \u201c \u201c,  \u201c \u201c,  \u201c \u201d,  \u201c15 \u201c,  \u201c \u201c,  \u201c \u201c ] \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of integers, construct a 2D string array representation of the tree, adhering to the following rules:\n\n*   The number of rows in the matrix ('H') must equal the height of the binary tree.\n*   The number of columns must always be an odd value.\n*   Empty cells in the matrix should contain an empty string \" \".\n*   If a parent node is placed at `matrix[row][column]`, the remaining space is divided into left and right parts. The left subtree of the parent node should be printed in the left part, and the right subtree in the right part.\n\n**Note:** If one subtree (left or right) is empty while the other is not, allocate the empty part the same width as the non-empty subtree.",
                "constraints": [
                    "1 <= T <= 50",
                    "0 <= N <= 10^3",
                    "1 <= data <= 10^4",
                    "Where \u201cdata\u201d is the value of the binary tree node.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 11 18 7 -1 5 2 -1 -1 -1 -1 -1 -1",
                        "output": "[ \" \",  \" \",  \" \",  \"4\",  \" \",  \" \",  \" \" ] \n[ \" \",  \"11\",  \" \",  \" \",  \" \",  \"18\",  \" \" ] \n[ \"7 \",  \" \",  \" \",  \" \",  \"5 \",  \" \",  \"2 \" ] ",
                        "explanation": "The binary tree can be visualized as follows:\n\n      4\n     / \\\n    11 18\n   /  / \\\n  7  5   2\n\nThe resulting matrix represents this structure according to the problem's layout rules."
                    },
                    {
                        "input": "24 2 -1 5 -1 -1 -1",
                        "output": "[ \" \",  \" \",  \" \",  \"24\",  \" \",  \" \",  \" \" ] \n[ \" \",  \"2\",  \" \",  \" \",  \" \",  \" \",  \" \" ] \n[ \" 5\",  \" \",  \" \",  \" \",  \" \",  \" \",  \" \" ] ",
                        "explanation": "The binary tree can be visualized as:\n\n   24\n  /\n 2\n/ \n5\n\nThe resulting matrix represents this structure with appropriate spacing for left and right subtrees, even if they are null."
                    },
                    {
                        "input": "5 29 7 -1 -1 -1 -1",
                        "output": "[ \" \",  \" 5 \",  \" \" ]    \n[ \"29 \",  \" \",  \" 7\" ]    ",
                        "explanation": "The binary tree can be visualized as:\n\n   5\n  / \\\n 29  7\n\nThe resulting matrix represents this simple tree structure."
                    },
                    {
                        "input": "5 -1 10 15 -1 -1 -1",
                        "output": "[ \" \",  \" \",  \" \",  \"5\",  \" \",  \" \",  \" \" ] \n[ \" \",  \"-1 \",  \" \",  \"\",  \" \",  \"10 \",  \" \" ] \n[ \" \",  \" \",  \" \",  \" \",  \"15 \",  \" \",  \" \" ] ",
                        "explanation": "The binary tree can be visualized as:\n\n    5\n      \\\n       10\n      / \n     15\n\nSince the input represents null values with -1 and these should be converted to string format as well the ouput shows the value \"-1\" at the correct location. Note that the specification of leaving the space for the empty subtrees is being followed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>In the resultant matrix Number of rows will be equal to the tree\u2019s height, and columns will be ( 2^height - 1 ).</p>",
            "<p>Can you think of iterating it level wise as it would get easy to find the final output.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}