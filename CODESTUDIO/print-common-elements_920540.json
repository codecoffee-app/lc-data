{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8934,
            "title": "Print Common Elements",
            "titleSlug": "print-common-elements_920540",
            "content": "<h4 id=\"given-two-binary-search-trees-your-task-is-to-return-a-list-of-integers-which-contains-the-values-that-are-present-in-both-the-binary-search-trees\">Given two Binary Search Trees, your task is to return a list of integers which contains the values that are present in both the Binary Search Trees.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>If the binary search trees look like the ones below:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000442_1621165812_NISHANT (6).png\"/></p>\n\n<pre><code>The only common values are 6 and 7, therefore we return the list [6, 7].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases are as follows.\n\nThe first line of each test case contains elements of the first tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nThe second line of each test case contains elements of the second tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>The input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/maximum-sum-of-nodes-in-a-binary-tree-such-that-no-two-nodes-are-adjacent-7840.png\" alt=\"Example\"></p>\n\n<pre><code>Input Format:   \n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\n\n #### Explanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return a list containing the common elements.\n\nOutput for each test case will be printed in a new line. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given functions.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10 ^ 5\n-10 ^ 9 &lt;= val &lt;= 10 ^ 9\n\nwhere \u201cval\u201d represents the values stored in the nodes\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n7 6 -1 -1 -1 \n4 -1 7 6 8 -1 -1 -1 -1\n5 -1 8 -1 9 -1 -1 \n7 1 9 -1 -1 8 10 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>6 7\n8 9\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h4>\n\n<pre><code>In the first case,\nThe first and second Binary Search Trees looks like:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000442_1621165812_NISHANT (6).png\"/></p>\n\n<pre><code>Clearly, the only common elements are 6 and 7. Therefore we return the list [6, 7].\n\nIn the second case,\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000443_1621078675_NISHANT (4).png\"/></p>\n\n<pre><code>Both the trees have common elements 8 and 9, therefore we return the list [8, 9].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n10 5 12 1 6 -1 -1 -1 -1 -1 -1\n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n2 -1 6 -1 8 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5 6 10\n2 6 8\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two binary search trees represented by their root nodes, find and return a sorted list of integers that are present in both trees.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10 ^ 5",
                    "-10 ^ 9 <= val <= 10 ^ 9 where 'val' represents the values stored in the nodes"
                ],
                "testcases": [
                    {
                        "input": "ptr1: 7 6 -1 -1 -1, ptr2: 4 -1 7 6 8 -1 -1 -1 -1",
                        "output": "[6, 7]",
                        "explanation": "The common elements between the two trees are 6 and 7."
                    },
                    {
                        "input": "ptr1: 5 -1 8 -1 9 -1 -1, ptr2: 7 1 9 -1 -1 8 10 -1 -1 -1 -1",
                        "output": "[8, 9]",
                        "explanation": "Both trees share the elements 8 and 9."
                    },
                    {
                        "input": "ptr1: 8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1, ptr2: 10 5 12 1 6 -1 -1 -1 -1 -1 -1",
                        "output": "[5, 6, 10]",
                        "explanation": "The integers 5, 6, and 10 exist in both binary search trees."
                    },
                    {
                        "input": "ptr1: 8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1, ptr2: 2 -1 6 -1 8 -1 -1",
                        "output": "[2, 6, 8]",
                        "explanation": "Common integers are 2, 6, and 8."
                    },
                    {
                        "input": "ptr1: 1 -1 -1, ptr2: 1 -1 -1",
                        "output": "[1]",
                        "explanation": "Both trees only contain the element 1."
                    },
                    {
                        "input": "ptr1: 1 -1 -1, ptr2: 2 -1 -1",
                        "output": "[]",
                        "explanation": "The trees have no elements in common."
                    },
                    {
                        "input": "ptr1: 5 3 7 2 4 6 8 -1 -1 -1 -1 -1 -1 -1 -1, ptr2: 5 2 7 1 4 6 9 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "[2, 4, 5, 6, 7]",
                        "explanation": "Elements common to both trees: 2,4,5,6,7"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For each element in the first Binary Search Tree can we check if it exists in the second one?</p>",
            "<p>Can you think of using two pointers?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}