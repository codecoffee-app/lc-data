{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7304,
            "title": "Print Leaf Nodes",
            "titleSlug": "print-leaf-nodes_631160",
            "content": "<h4 id=\"given-a-binary-tree-write-a-function-that-returns-a-list-containing-all-the-leaf-nodes-of-the-binary-tree-in-the-order-in-which-they-appear-from-left-to-right-in-case-two-leaf-nodes-are-at-the-same-distance-from-the-leftmost-node-the-one-that-has-a-lesser-depth-has-to-be-printed-first\">Given a binary tree, write a function that returns a list containing all the leaf nodes of the binary tree in the order in which they appear from left to right. In case two leaf nodes are at the same distance from the leftmost node, the one that has a lesser depth has to be printed first.</h4>\n\n<h5 id=\"remember-consider\">\u00a0Remember/Consider:</h5>\n\n<pre><code>If both horizontal and vertical distances are the same for two leaf nodes, then print the one with smaller node data.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>Elements in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>You have to return a list containing all the leaf nodes of the binary tree in the order in which they appear from left to right. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>0 &lt;= N &lt;= 10^5\n0 &lt;= Value of node &lt;= 10^8\nWhere &#39;N&#39; is the total number of nodes in the BinaryTree.\n\ntime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 4 7 13\n</code></pre>\n\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>7 5 6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 17,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, create a function that identifies and returns a list of all leaf nodes. The order of nodes in the list must reflect their left-to-right appearance in the tree. If two leaf nodes share the same horizontal distance from the leftmost node, prioritize the node with the shallower depth (smaller depth value). If both horizontal and vertical distances are the same for two leaf nodes, then print the one with smaller node data.",
                "constraints": [
                    "0 <= N <= 10^5 (where 'N' is the total number of nodes in the BinaryTree)",
                    "0 <= Value of node <= 10^8",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1",
                        "output": "1 4 7 13",
                        "explanation": null
                    },
                    {
                        "input": "1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1",
                        "output": "7 5 6",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think around vertical traversal of the tree!</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}