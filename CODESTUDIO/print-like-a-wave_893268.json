{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8651,
            "title": "Print Like a Wave",
            "titleSlug": "print-like-a-wave_893268",
            "content": "<h4 id=\"for-a-given-two-dimensional-integer-array-list-arr-of-size-n-x-m-print-the-arr-in-a-sine-wave-order-i-e-print-the-first-column-top-to-bottom-next-column-bottom-to-top-and-so-on\">For a given two-dimensional integer array/list \u2018ARR\u2019 of size (N x M), print the \u2018ARR\u2019 in a sine wave order, i.e., print the first column top to bottom, next column bottom to top, and so on.</h4>\n\n<h4 id=\"for-eg\">For eg:-</h4>\n\n<pre><code>The sine wave for the matrix:-\n1 2\n3 4\nwill be [1, 3, 4, 2].\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an Integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains two integer values, &#39;N&#39; and &#39;M,\u2019 separated by a single space. They represent the &#39;rows&#39; and &#39;columns,\u2019 respectively, for the two-dimensional array/list \u2018ARR\u2019.\n\nThe next \u2018N\u2019 line contains an \u2018M\u2019 single-separated integer denoting the value of \u2018ARR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the two-dimensional array/list \u2018ARR\u2019 elements in the sine wave order in a single line, separated by a single space.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 100\n1 &lt;= M &lt;= 100\n0 &lt;= ARR[i][j] &lt;= 100\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n4 4\n1 2 4 5\n3 6 8 10\n11 12 13 15\n16 14 9 7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 5 9 10 6 2 3 7 11 12 8 4\n1 3 11 16 14 12 6 2 4 8 13 9 7 15 10 5 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>Here, the elements are printed in a form of a wave, first, the 0th column is printed from top to bottom then the 1st column from bottom to top, and so on. Basically, the even column is printed from top to bottom and the odd column in the opposite direction.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 1\n3\n1 2\n6 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n6 5 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 216,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a two-dimensional integer array/list \u2018ARR\u2019 of size (N x M), print the \u2018ARR\u2019 in a sine wave order. This means printing the first column from top to bottom, the next column from bottom to top, and so on. Even-indexed columns are printed top-to-bottom, and odd-indexed columns are printed bottom-to-top.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 100",
                    "1 <= M <= 100",
                    "0 <= ARR[i][j] <= 100",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "2\n3 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n4 4\n1 2 4 5\n3 6 8 10\n11 12 13 15\n16 14 9 7",
                        "output": "1 5 9 10 6 2 3 7 11 12 8 4\n1 3 11 16 14 12 6 2 4 8 13 9 7 15 10 5",
                        "explanation": "The elements are printed in a sine wave pattern. The 0th column is printed from top to bottom, the 1st column from bottom to top, and so on. Even columns are traversed from top to bottom, while odd columns are traversed from bottom to top."
                    },
                    {
                        "input": "2\n1 1\n3\n1 2\n6 5",
                        "output": "3\n6 5",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we iterate over the matrix to get our order?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n\n    Time Complexity : O(N*M)\n    Space Complexity : O(N*M)\n\n    Where N denotes the total number of rows and M denote the total number of columns.\n\n\n*/\n\nvector<int> wavePrint(vector<vector<int>> arr, int nRows, int mCols)\n{\n    vector<int> ans;\n    // Loop to iterate through the columns given to us.\n    for (int j = 0; j < mCols; j++)\n    {\n        // If the current column is even then we will print the elements from top to bottom.\n        if (j % 2 == 0)\n        {\n            for (int i = 0; i < nRows; i++)\n            {\n                // store the element in the vector.\n                ans.push_back(arr[i][j]);\n            }\n        }\n        // Else the elements will be printed from bottom to top.\n        else\n        {\n            for (int i = nRows - 1; i >= 0; i--)\n            {\n                // store the element in the vector.\n                ans.push_back(arr[i][j]);\n            }\n        }\n    }\n    return ans;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n\n    Time Complexity : O(N*M)\n    Space Complexity : O(N*M)\n\n    Where N denotes the total number of rows and M denote the total number of columns.\n\n\n'''\n\n\ndef wavePrint(arr, nRows, mCols):\n    \n    ans = []\n\n    \n    #Loop to iterate through the columns given to us.\n    for j in range(mCols):\n        \n        # If the current column is even then we will add the elements from top to bottom.\n        if j % 2 == 0:\n            \n            for i in range(nRows):\n                ans.append(arr[i][j])\n                \n        \n        # Else the elements will be add from bottom to top.\n        else:\n            for i in range(nRows - 1, -1, -1):\n                ans.append(arr[i][j])\n                \n    return ans",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\n\n    Time Complexity : O(N^M)\n    Space Complexity : O(N^M)\n\n    where N is the number of rows and M is the number of columns\n\n\n*/\n\n\npublic class Solution {\n\n    public static int[] wavePrint(int arr[][], int nRows, int mCols) {\n        \n        int ans[] = new int[nRows*mCols];\n        int k = 0;\n        // Loop tp iterate through the columns given to us.\n        for (int j = 0; j < mCols; j++)\n        {\n            // If the current column is even then we will add the elements from top to bottom.\n            if (j % 2 == 0)\n            {\n                for (int i = 0; i < nRows; i++)\n                {\n                    ans[k++] = arr[i][j];\n                }\n            }\n            // Else the elements will be add from bottom to top.\n            else\n            {\n                for (int i = nRows - 1; i >= 0; i--)\n                {\n                   ans[k++] = arr[i][j];\n                }\n            }\n        }\n        \n        return ans;\n    }\n}\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}