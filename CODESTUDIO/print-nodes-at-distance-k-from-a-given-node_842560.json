{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8282,
            "title": "Print Nodes at distance K from a given node",
            "titleSlug": "print-nodes-at-distance-k-from-a-given-node_842560",
            "content": "<h4 id=\"you-are-given-an-arbitrary-binary-tree-a-node-of-the-tree-and-an-integer-k-you-need-to-find-all-such-nodes-which-have-a-distance-k-from-the-given-node-and-return-the-list-of-these-nodes\">You are given an arbitrary binary tree, a node of the tree, and an integer &#39;K&#39;. You need to find all such nodes which have a distance K from the given node and return the list of these nodes.</h4>\n\n<p><br></p>\n\n<h4 id=\"distance-between-two-nodes-in-a-binary-tree-is-defined-as-the-number-of-connections-edges-in-the-path-between-the-two-nodes\">Distance between two nodes in a binary tree is defined as the number of connections/edges in the path between the two nodes.</h4>\n\n<p><br></p>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. A binary tree is a tree in which each node has at most two children. \n2. The given tree will be non-empty.\n3. The given tree can have multiple nodes with the same value.\n4. If there are no nodes in the tree which are at distance = K from the given node, return an empty list.\n5. You can return the list of values of valid nodes in any order. For example if the valid nodes have values 1,2,3, then you can return {1,2,3} or {3,1,2} etc.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-11-03-15-04-33-5636.png\" alt=\"Sample Output 2 explanation\"></p>\n\n<pre><code>Consider this tree above. The target node is 5 and K = 3. The nodes at distance 1 from node 5 are {2}, nodes at distance 2 from node 5 are {1, 4} and nodes at distance 3 from node 5 are {6, 3}.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line will contain the values of the nodes of the tree in the level order form ( -1 for NULL node). Refer to the example below for further explanation.\n\nThe second line contains the value of the target node.\n\nThe third and the last line contains the integer K denoting the distance at which nodes are to be found. \n\nExample:\n\nConsider the binary tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-11-03-14-34-55-5635.png\" alt=\"Input Format Fig.\"></p>\n\n<pre><code>The input for the tree depicted in the above image would be :\n\n3\n5 1\n6 2 0 8\n-1 -1 7 4 -1 -1 -1 -1\n-1 -1 -1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 3\n\nLevel 2 :\nLeft child of 3 = 5\nRight child of 3 = 1\n\nLevel 3 :\nLeft child of 5 = 6\nRight child of 5 = 2\nLeft child of 1 = 0\nRight child of 1 = 8\n\nLevel 4 :\nLeft child of 6 = null (-1)\nRight child of 6 = null(-1)\nLeft child of 2 = 7\nRight child of 2 = 4\nLeft child of 0 = null (-1)\nRight child of 0 = null (-1)\nLeft child of 8 = null (-1)\nRight child of 8 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\nLeft child of 4 = null (-1)\nRight child of 4 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n3 5 1 6 2 0 8 -1 -1 7 4 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print the values of all nodes at distance = K, from the given target node.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3 5 1 6 2 0 8 -1 -1 7 4 -1 -1 -1 -1 -1 -1 -1 -1\n5\n2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>7 4 1\n</code></pre>\n\n<h5 id=\"explanation-for-the-sample-output-1\">Explanation For The Sample Output 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/8282_explanation_sample1-5637.png\" alt=\"Sample Input 1 explanation\"></p>\n\n<pre><code>Target Node is 5. Nodes at distance 1 from 5 are {6, 2, 3} and nodes at distance 2 are {7, 4, 1}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>7 -1 14 9 -1 13 -1 20 9 -1 8 -1 -1 2 -1 -1 16 -1 -1 \n2\n6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>7\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 3000\n0 &lt;= K &lt;= 3000\n0 &lt;= nodeValue &lt;= 3000\n\nWhere nodeValue donates the value of the node.\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 67,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an arbitrary binary tree, a target node within the tree, and an integer 'K', find all nodes in the tree that are at a distance of exactly K from the target node. The distance between two nodes is defined as the number of edges in the path connecting them. Return a list containing the values of these nodes.",
                "constraints": [
                    "1 <= N <= 3000, where N is the number of nodes in the tree",
                    "0 <= K <= 3000",
                    "0 <= nodeValue <= 3000, where nodeValue denotes the value of a node"
                ],
                "testcases": [
                    {
                        "input": "root=3 5 1 6 2 0 8 -1 -1 7 4 -1 -1 -1 -1 -1 -1 -1 -1, target=5, K=2",
                        "output": "7 4 1",
                        "explanation": "The target node is 5. Nodes at distance 1 from 5 are {6, 2, 3} and nodes at distance 2 are {7, 4, 1}."
                    },
                    {
                        "input": "root=7 -1 14 9 -1 13 -1 20 9 -1 8 -1 -1 2 -1 -1 16 -1 -1, target=2, K=6",
                        "output": "7",
                        "explanation": "The node at distance 6 from 2 is 7. Note that -1 are null nodes."
                    },
                    {
                        "input": "root=1 2 3 4 5 -1 -1, target=2, K=2",
                        "output": "3",
                        "explanation": "The target node is 2. The node at distance 2 is 3."
                    },
                    {
                        "input": "root=1 2 3 -1 -1 -1 -1, target=1, K=0",
                        "output": "1",
                        "explanation": "The target node is 1. The node at distance 0 is 1 itself."
                    },
                    {
                        "input": "root=1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1, target=4, K=3",
                        "output": "1",
                        "explanation": "The target node is 4.  The path from node 4 to 1 is 4 -> 2 -> 1 which is 2 edges.  Distance 3 from node 4 is only node 1 since the length of each edge is 1."
                    },
                    {
                        "input": "root=1 2 3 -1 -1 4 5, target=2, K=1",
                        "output": "4",
                        "explanation": "The target node is 2. Node 4 is at distance 1 to Node 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Store parents of each node in the tree.</p>",
            "<p>Try to solve this problem using only a depth-first search.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}