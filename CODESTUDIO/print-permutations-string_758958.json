{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7658,
            "title": "Print Permutations - String",
            "titleSlug": "print-permutations-string_758958",
            "content": "<h4 id=\"you-are-given-an-input-string-s-your-task-is-to-find-and-return-all-possible-permutations-of-the-input-string\">You are given an input string &#39;S&#39;. Your task is to find and return all possible permutations of the input string.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The input string may contain the same characters, so there will also be the same permutations.\n\n2. The order of permutation does not matter.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first and only line of input contains a string &#39;S&#39; of alphabets in lower case characters.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print all the permutations of the given string &#39;S&#39; in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.    \n</code></pre>\n\n<h5 id=\"constraint\">Constraint:</h5>\n\n<pre><code>1 &lt;= |S| &lt;= 8\n\nWhere |S| denotes the length of string &#39;S&#39;.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>cba\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>abc\nacb\nbac\nbca\ncab\ncba\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h5>\n\n<pre><code>All the possible permutations for string &quot;cba&quot; will be &quot;abc&quot;, &quot;acb&quot;, &quot;bac&quot;, &quot;bca&quot;, &quot;cab&quot; and &quot;cba&quot;.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>xyx\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>xyx\nxxy\nyxx\nyxx\nxyx\nxxy\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h5>\n\n<pre><code>All the possible permutations for string &quot;xyx&quot; will be &quot;xyx&quot;, &quot;xxy&quot;, &quot;yxx&quot;, &quot;yxx&quot;, &quot;xyx&quot; and &quot;xxy&quot;. Here, all three permutations &quot;xyx&quot;, &quot;yxx&quot;, &quot;xxy&quot; are repeating twice but we need to print all the possible permutations and hence we are printing them twice..\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 122,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S' consisting of lowercase alphabets, find and return all possible permutations of the string.\n\nNote:\n1. The input string may contain duplicate characters.\n2. The order of permutations does not matter.",
                "constraints": [
                    "1 <= |S| <= 8, where |S| is the length of the string 'S'.",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "cba",
                        "output": "abc\nacb\nbac\nbca\ncab\ncba",
                        "explanation": "The possible permutations of the string \"cba\" are \"abc\", \"acb\", \"bac\", \"bca\", \"cab\", and \"cba\"."
                    },
                    {
                        "input": "xyx",
                        "output": "xyx\nxxy\nyxx\nyxx\nxyx\nxxy",
                        "explanation": "The possible permutations of the string \"xyx\" are \"xyx\", \"xxy\", \"yxx\", \"yxx\", \"xyx\", and \"xxy\". Although \"xyx\", \"yxx\", and \"xxy\" each appear twice, all possible permutations should be printed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about how you can break this problem between the first character of the string and the rest of it.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n\n    Time Complexity: O(N*N!).\n    Space Complexity: O(N).\n\n    Where N is the length of the input string.\n\n*/\n\n#include <algorithm>\n#include <vector>\n\n// Swaping two alphabets in a string.\nvoid swap(string &s, int i, int j) {\n    char te = s[i];\n    s[i] = s[j];\n    s[j] = te;\n}\n\nvoid findPermutationsHelper(string &s, int i, int j, vector <string> &ans) {\n    if (i >= j) {\n        // Storing the string in the vector ans.\n        string permutation = \"\";\n\n        for (int k = 0; k < s.length(); k++) {\n            permutation += (s[k]);\n        }\n\n        ans.push_back(permutation);\n        return;\n    }\n\n    // Fixing a character at index i and then swapping with characters from index i to j and by this way building up permutation strings.\n    for (int k = i; k <= j; k++) {\n        swap(s, i, k);\n\n        findPermutationsHelper(s, i + 1, j, ans);\n\n        swap(s, i, k);\n    }\n\n}\n\nvector <string> findPermutations(string &s) {\n    // Declaring a vector of string to store all the possible permutations of the string.\n    vector <string> ans;\n\n    // Calling the user defined function which stores all the possible permutations of the string in the vector ans.\n    findPermutationsHelper(s, 0, s.length() - 1, ans);\n\n    return ans;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\n\n    Time Complexity: O(N*N!).\n    Space Complexity: O(N).\n\n    Where N is the length of the input string.\n\n\"\"\"\n\n# Swaping two alphabets in a string.\ndef swap(lst, i, j):\n    te = lst[i]\n    lst[i] = lst[j]\n    lst[j] = te\n\ndef findPermutationsHelper(lst, i, j, ans):\n    if (i >= j):\n        # Storing the string in the vector ans.\n        permutation = \"\"\n\n        for k in range(len(lst)):\n            permutation += (lst[k])  \n\n        ans.append(permutation)\n        return\n\n    # Fixing a character at index i and then swapping with characters from index i to j and by this way building up permutation strings.\n    for k in range(i,j+1):\n        swap(lst, i, k)\n        findPermutationsHelper(lst, i + 1, j, ans)\n        swap(lst, i, k)\n    \n\ndef findPermutations(s):\n    # Declaring a vector of string to store all the possible permutations of the string.\n    ans = []\n    lst = list(s)\n    # Calling the user defined function which stores all the possible permutations of the string in the vector ans.\n    findPermutationsHelper(lst, 0, len(lst) - 1, ans)\n    return ans\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\n\n    Time Complexity: O(N*N!).\n    Space Complexity: O(N).\n\n    Where N is the length of string .\n\n*/\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Solution {\n\n    public static List<String> findPermutations(String s) {\n        // Convert string to character array.\n        char[] a = s.toCharArray();\n\n        // Declaring a List of string to store all the possible permutations of the string.\n        List<String> ans = new ArrayList<>();\n\n        // Calling the user defined function which stores all the possible permutations of the string in the List ans.\n        findPermutationsHelper(a, 0, a.length - 1, ans);\n\n        return ans;\n    }\n\n    private static void findPermutationsHelper(char[] a, int i, int j, List<String> ans) {\n        if (i >= j) {\n            // Storing the string in the List ans.\n            String permutation = \"\";\n\n            for (int k = 0; k < a.length; k++) {\n                permutation += (a[k]);\n            }\n\n            // for printing in next line\n            ans.add(permutation);\n            return;\n        }\n\n        // Fixing a character at index i and then swapping with characters from index i to j and by this way building up permutation strings.\n        for (int k = i; k <= j; k++) {\n\n            swap(a, i, k);\n\n            findPermutationsHelper(a, i + 1, j, ans);\n\n            swap(a, i, k);\n\n        }\n    }\n\n    // Swaping two alphabets in a string.\n    private static void swap(char[] a, int i, int j) {\n        char te = a[i];\n        a[i] = a[j];\n        a[j] = te;\n    }\n\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}