{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 1409,
            "title": "Print Permutations - String",
            "titleSlug": "print-permutations-string_91605",
            "content": "<h4 id=\"given-an-input-string-str-print-all-possible-permutations-of-the-input-string\">Given an input string (STR), print all possible permutations of the input string.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The input string may contain the same characters, so there will also be the same permutations.\nThe order of permutations doesn\u2019t matter.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The only input line contains a string (STR) of alphabets in lower case\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print each permutations in a new line\n</code></pre>\n\n<h5 id=\"constraint\">Constraint:</h5>\n\n<pre><code>1&lt;=length of STR&lt;=8\nTime Limit: 1sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>cba\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>abc\nacb\nbac\nbca\ncab\ncba\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string, generate and print all possible permutations of the string to standard output. Note that the string may contain duplicate characters, and the order of the permutations does not matter.",
                "constraints": [
                    "1 <= Length of input string <= 8",
                    "Input string consists of lowercase alphabets only.",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "input=cba",
                        "output": "abc\nacb\nbac\nbca\ncab\ncba",
                        "explanation": "All possible arrangements of the characters 'c', 'b', and 'a' are printed, each on a new line."
                    },
                    {
                        "input": "input=ab",
                        "output": "ab\nba",
                        "explanation": "The possible arrangements of characters 'a' and 'b' are printed."
                    },
                    {
                        "input": "input=aab",
                        "output": "aab\naba\nbaa",
                        "explanation": "The string has duplicate characters, so some permutations will look the same, but all possibilities are printed without removing duplicates."
                    },
                    {
                        "input": "input=abcd",
                        "output": "abcd\nabdc\nacbd\nacdb\nadbc\nadcb\nbacd\nbadc\nbcad\nbcda\nbdac\nbdca\ncabd\ncadb\ncbad\ncbda\ncdab\ncdba\ndabc\ndacb\ndbac\ndbca\ndcab\ndcba",
                        "explanation": "All possible permutations of the string 'abcd' are printed. It has 4! = 24 permutations."
                    },
                    {
                        "input": "input=a",
                        "output": "a",
                        "explanation": "Single character input. There's only one permutation."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about how you can break this problem between the first character of the string and the rest of it</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}