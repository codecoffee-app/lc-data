{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16486,
            "title": "Print Valid String",
            "titleSlug": "print-valid-string_3164683",
            "content": "<h4 id=\"you-are-given-a-string-s-consisting-of-lowercase-alphabets-and-you-need-to-remove-the-minimum-number-of-parentheses-to-make-the-string-valid-and-print-that-valid-string\">You are given a string \u2018S\u2019 consisting of lowercase alphabets, \u201c(\u201c and \u201c)\u201d. You need to remove the minimum number of parentheses to make the string valid and print that valid string.</h4>\n\n<h4 id=\"a-string-is-valid-iff\">A string is valid iff:</h4>\n\n<pre><code>1. It is an empty string, it contains lowercase alphabets only, or\n2. It can be written as (S), where \u2018S\u2019 is the valid string.\n3. It can be written as AB (\u2018A\u2019 concatenated with \u2018B\u2019), where \u2018A\u2019 and \u2018B\u2019 are valid strings.\n</code></pre>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>Let string be: \u201cco(di()ng\u201d\nThe valid string can be: \u201cco(di)ng\u201d or \u201ccodi()ng\u201d.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases.\n\nThe first line of each test case contains a string \u2018S\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a valid string. There are multiple answers possible, you may print any of them.\n\nPrint output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= |S| &lt;= 10^5\n\nWhere |S| represents the length of the string \u2018S\u2019.    \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\nco(di()ng\nnin())jas\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>co(di)ng\nnin()jas\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<pre><code>For test case 1: \nThe valid string can be: \u201cco(di)ng\u201d or \u201ccodi()ng\u201d.\n\nFor test case 2: \nThe valid string will be: \u201cnin()jas\u201d.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\nst()))ick\nabc\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>st()ick\nabc\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S' consisting of lowercase alphabets, '(' and ')', determine the minimum number of parentheses that must be removed to make the string valid. A valid string is defined as follows:\n\n1.  An empty string, or a string containing only lowercase alphabets.\n2.  '(S)', where 'S' is a valid string.\n3.  'AB', where 'A' and 'B' are valid strings.  Return a valid string after removing the minimum number of parentheses.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |S| <= 10^5",
                    "|S| represents the length of the string \u2018S\u2019."
                ],
                "testcases": [
                    {
                        "input": "s = \"co(di()ng\"",
                        "output": "co(di)ng",
                        "explanation": "The valid string can be: \u201cco(di)ng\u201d or \u201ccodi()ng\u201d."
                    },
                    {
                        "input": "s = \"nin())jas\"",
                        "output": "nin()jas",
                        "explanation": "The valid string will be: \u201cnin()jas\u201d."
                    },
                    {
                        "input": "s = \"st()))ick\"",
                        "output": "st()ick",
                        "explanation": "Removes one of the closing parentheses to create \"st()ick\"."
                    },
                    {
                        "input": "s = \"abc\"",
                        "output": "abc",
                        "explanation": "The input string contains only lowercase alphabets and is already valid."
                    },
                    {
                        "input": "s = \"(a(b(c)d)\"",
                        "output": "a(b(c)d)",
                        "explanation": "The input needs the first parenthesis removed to create a valid string"
                    },
                    {
                        "input": "s = \"))((\"",
                        "output": "",
                        "explanation": "The optimal valid string after minimal removal will be the empty string."
                    },
                    {
                        "input": "s = \"()())\"",
                        "output": "()()",
                        "explanation": "The last parenthesis must be removed to make the whole string valid."
                    },
                    {
                        "input": "s = \"(abcdefg)\"",
                        "output": "(abcdefg)",
                        "explanation": "The input has a single encapsulating parenthesis and is a valid input, thus returned as is."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to check all the possibilities by removing the brackets.</p>",
            "<p>Try to store the indices of the imbalanced brackets.</p>",
            "<p>Try to store the count of open brackets.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}