{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11941,
            "title": "Priority CPU Scheduling : 2",
            "titleSlug": "priority-cpu-scheduling-2_1402310",
            "content": "<h4 id=\"you-are-given-the-arrival-times-the-burst-times-and-the-priority-of-n-processes-in-a-cpu-you-need-to-find-the-order-of-process-scheduling-according-to-priority-based-cpu-scheduling-along-with-the-order-also-find-the-individual-waiting-and-turnaround-time-for-all-the-processes-in-order-of-their-schedule\">You are given the arrival times, the burst times and the priority of \u2018N\u2019 processes in a CPU.  You need to find the order of process scheduling according to Priority Based CPU Scheduling. Along with the order, also find the individual waiting and turnaround time for all the processes in order of their schedule.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The processes are numbered from 1 to &#39;N&#39;.\n2. The process with lowest arrival time will be scheduled first, followed by the next lowest arrival time, and so on.\n3. If any two processes have the same arrival time, then you have to run the process based on the priority of the process. The highest priority process will be scheduled first, followed by the next highest priority, and so on.\n4. If the two processes have the same priority, then you have to run the process with the lowest process number first.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019 which denotes the number of test cases or queries to be run. Then the test cases are as follows.\n\nThe first line of each test case contains \u2018N\u2019 space-separated integers denoting the Arrival Times. \n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the Burst Times.\n\nThe third line of each test case contains \u2018N\u2019 space-separated integers denoting the Priorities of the processes.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print three lines:\n\nThe first line should contain \u2018N\u2019 space-separated integers denoting the order of the processes in which they are scheduled.\n\nThe second line should contain \u2018N\u2019 space-separated integers denoting the waiting time of the processes. \n\nThe third line should contain \u2018N\u2019 space-separated integers denoting the turnaround time of the processes.   \n\nPrint the output of each test case in three separate lines.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^4\n1 &lt;= X, Y, Z &lt;= 10^4\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 denotes the number of processes, \u2018X\u2019, \u2018Y\u2019, Z\u2019 denotes the arrival time, burst time and priority of a process respectively.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n5\n0 1 3 2 4\n3 6 1 2 4\n3 4 9 7 8\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 4 3 5\n0 2 7 8 8 \n3 8 9 9 12\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>In the first test case, \nThe table of the processes is shown below and with the help of this table we can find the turnaround and waiting time of each individual process:\n\nGantt chart:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000395_1617797855_Priority CPU Scheduling_ 2.png\"/></p>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000396_1617797864_Priority CPU Scheduling_ 2 (1).png\"/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n4\n8 5 1 0\n1 2 3 4\n1 2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4 3 2 1\n0 3 2 1\n4 6 4 2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>In the first test case, \nThe table of the processes is shown below and with the help of this table we can find the turnaround and waiting time of each individual process:\n\nGantt Chart:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000397_1617797871_Priority CPU Scheduling_ 2 (2).png\"/></p>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000398_1617797878_Priority CPU Scheduling_ 2 (3).png\"/></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Simulate priority-based CPU scheduling for a set of processes. Given the arrival times, burst times, and priorities of 'N' processes, determine the order in which the processes are executed, as well as the waiting time and turnaround time for each process according to the scheduling order. The process scheduling adheres to the following rules:\n\n1.  Processes are initially sorted based on arrival time in ascending order.\n2.  If two processes have the same arrival time, the process with the higher priority (lower numerical value) is scheduled first.  If priorities are also the same, the process with the smaller process number is scheduled first.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^4",
                    "1 <= X, Y, Z <= 10^4 (where X = arrival time, Y = burst time, Z = priority)"
                ],
                "testcases": [
                    {
                        "input": "arrivalTime=[0, 1, 3, 2, 4], burstTime=[3, 6, 1, 2, 4], priority=[3, 4, 9, 7, 8]",
                        "output": "Process Order: 1 2 4 3 5\nWaiting Time: 0 2 7 8 8\nTurnaround Time: 3 8 9 9 12",
                        "explanation": "The processes are scheduled as follows:\n\nProcess 1 arrives at time 0 and is executed first (priority 3, burst time 3). Waiting time = 0, Turnaround time = 3.\nProcess 2 arrives at time 1 and is executed next (priority 4, burst time 6). Waiting time = 3-1 = 2, Turnaround time = 3+6-1 = 8.\nProcess 4 arrives at time 2 and is executed next (priority 7, burst time 2). Waiting time = 9-2 = 7, Turnaround time = 9+2-2 = 9.\nProcess 3 arrives at time 3 and is executed next (priority 9, burst time 1). Waiting time = 9-1 = 8, Turnaround time = 9+1-1 = 9.\nProcess 5 arrives at time 4 and is executed last (priority 8, burst time 4). Waiting time = 12-4 = 8, Turnaround time = 12-4+4 = 12."
                    },
                    {
                        "input": "arrivalTime=[8, 5, 1, 0], burstTime=[1, 2, 3, 4], priority=[1, 2, 3, 4]",
                        "output": "Process Order: 4 3 2 1\nWaiting Time: 0 3 2 1\nTurnaround Time: 4 6 4 2",
                        "explanation": "The processes are scheduled as follows:\n\nProcess 4 arrives at time 0 and is executed first (priority 4, burst time 4). Waiting time = 0, Turnaround time = 4.\nProcess 3 arrives at time 1 and is executed next (priority 3, burst time 3). Waiting time = 4-1 = 3, Turnaround time = 4+3-1 = 6.\nProcess 2 arrives at time 5 and is executed next (priority 2, burst time 2). Waiting time = 4+3-5 = 2, Turnaround time = 4+3+2-5 = 4.\nProcess 1 arrives at time 8 and is executed last (priority 1, burst time 1). Waiting time = 4+3+2-8 = 1, Turnaround time = 4+3+2+1-8 = 2."
                    },
                    {
                        "input": "arrivalTime=[0,0,0], burstTime=[1,2,3], priority=[1,2,3]",
                        "output": "Process Order: 1 2 3\nWaiting Time: 0 1 3\nTurnaround Time: 1 3 6",
                        "explanation": "Process 1 starts at t=0, waiting time = 0, turnaround time = 1\nProcess 2 starts at t=1, waiting time = 1, turnaround time = 3\nProcess 3 starts at t=3, waiting time = 3, turnaround time = 6"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of sorting processes according to requirement?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}