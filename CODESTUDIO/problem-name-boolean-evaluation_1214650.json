{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10340,
            "title": "Problem Name: Boolean Evaluation",
            "titleSlug": "problem-name-boolean-evaluation_1214650",
            "content": "<h4 id=\"you-are-given-an-expression-exp-in-the-form-of-a-string-where-operands-will-be-true-or-false-and-operators-will-be-and-or-or-xor\">You are given an expression <em><strong>&#39;exp&#39;</strong></em> in the form of a string where operands will be : (TRUE or FALSE), and operators will be :  (AND, OR or XOR).</h4>\n\n<p><br></p>\n\n<h4 id=\"now-you-have-to-find-the-number-of-ways-we-can-parenthesize-the-expression-such-that-it-will-evaluate-to-true\">Now you have to find the number of ways we can parenthesize the expression such that it will evaluate to TRUE.</h4>\n\n<p><br></p>\n\n<h4 id=\"as-the-answer-can-be-very-large-return-the-output-modulo-1000000007\">As the answer can be very large, return the output modulo 1000000007.</h4>\n\n<p><br></p>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>\u2018T\u2019 will represent the operand TRUE.\n\u2018F\u2019 will represent the operand FALSE.\n\u2018|\u2019 will represent the operator OR.\n\u2018&amp;\u2019 will represent the operator AND.\n\u2018^\u2019 will represent the operator XOR.\n</code></pre>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>Input: &#39;exp\u2019 = &quot;T|T &amp; F&quot;.\n\nOutput: 1\n\nExplanation:\nThere are total 2  ways to parenthesize this expression:\n    (i) (T | T) &amp; (F) = F\n    (ii) (T) | (T &amp; F) = T\nOut of 2 ways, one will result in True, so we will return 1.\n</code></pre>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line of each input contains a string representing the expression \u2018exp\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>print a single integer representing the number of ways we can parenthesize the expression to evaluate to true.   \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>T^T^F    \n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>0\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h4>\n\n<pre><code>There are total 2  ways to parenthesize this expression:\n(i) (T^T)^(F) = F\n(ii) (T)^(T^F) = F\nBoth ways will result in False, so we will return 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>F|T^F\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h4>\n\n<pre><code>For the first test case:\nThere are total 2  ways to parenthesize this expression:\n(i) (F|T)^(F) = T\n(ii) (F)|(T^F) = T\nBoth ways will result in True, so we will return 2.\n</code></pre>\n\n<h4 id=\"expected-time-complexity\">Expected time complexity</h4>\n\n<pre><code>The expected time complexity is O(n ^ 3), where &#39;n&#39; denotes the length of &#39;exp&#39;.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>3 &lt;= |\u2018exp\u2019| &lt;= 200\nWhere |&#39;exp&#39;| denotes the length of &#39;exp&#39;.\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 164,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a boolean expression `exp` consisting of operands (TRUE 'T' or FALSE 'F') and operators (AND '&', OR '|', XOR '^'), determine the number of ways to parenthesize the expression such that it evaluates to TRUE. Since the answer can be very large, return the result modulo 1000000007.",
                "constraints": [
                    "3 <= |exp| <= 200, where |exp| denotes the length of exp.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "T^T^F",
                        "output": "0",
                        "explanation": "There are two ways to parenthesize the expression:\n(i) (T^T)^(F) = F\n(ii) (T)^(T^F) = F\nBoth ways result in FALSE, so the answer is 0."
                    },
                    {
                        "input": "F|T^F",
                        "output": "2",
                        "explanation": "There are two ways to parenthesize the expression:\n(i) (F|T)^(F) = T\n(ii) (F)|(T^F) = T\nBoth ways result in TRUE, so the answer is 2."
                    },
                    {
                        "input": "T|T&F",
                        "output": "1",
                        "explanation": "There are two ways to parenthesize this expression:\n(i) (T | T) & (F) = F\n(ii) (T) | (T & F) = T\nOnly one way results in TRUE, so the answer is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>&nbsp;</strong>Can you try to think to find all combinations and then calculate?</p>",
            "<p>Can we avoid the overlapping subproblems?</p>",
            "<p>Can you try to think to get final answer by solving small problems and merging them?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N ^ 3)\r\n    Space Complexity: O(N ^ 2)\r\n\r\n    Where 'N' is the the length of string.\r\n*/\r\n\r\n#define mod 1000000007\r\n\r\nint evaluateExp(string & exp) {\r\n    int n = exp.size();\r\n\r\n    // We need to evaluate whole expression for true.\r\n    vector < vector < vector < long long int >>> dp(n, vector < vector <long long int >> \r\n        (n, vector < long long int > (2, 0)));\r\n\r\n    // Filling the diagonal enteries.\r\n    for (int i = 0; i < n; i++) {\r\n        if (exp[i] == 'T') {\r\n            dp[i][i][1] = 1;\r\n        } else if (exp[i] == 'F') {\r\n            dp[i][i][0] = 1;\r\n        }\r\n    }\r\n\r\n    // Filling the dp array.\r\n    for (int gap = 2; gap < n; gap += 2) {\r\n        for (int j = 0; j + gap < n; j += 2) {\r\n            for (int k = j; k < j + gap; k += 2) {\r\n\r\n                if(exp[k + 1] == '|') {\r\n                    // T|T=T, T|F=T, F|T=T , F|F=F. \r\n                    dp[j][j + gap][1] += ((dp[j][k][0] * dp[k + 2][j + gap][1]) + \r\n                        (dp[j][k][1] * dp[k + 2][j + gap][0]) + \r\n                        (dp[j][k][1] * dp[k + 2][j + gap][1])) % mod;\r\n                    dp[j][j + gap][1] %= mod;\r\n                    dp[j][j + gap][0] += ((dp[j][k][0] * dp[k + 2][j + gap][0])) % mod;\r\n                    dp[j][j + gap][0] %= mod;\r\n                }\r\n\r\n                if(exp[k + 1] == '&') {\r\n                    // T&T=T, T&F=F, F&T=F , F|F=F.\r\n                    dp[j][j + gap][1] += ((dp[j][k][1] * dp[k + 2][j + gap][1])) % mod;\r\n                    dp[j][j + gap][1] %= mod;\r\n                    dp[j][j + gap][0] += ((dp[j][k][0] * dp[k + 2][j + gap][1]) + \r\n                        (dp[j][k][1] * dp[k + 2][j + gap][0]) + \r\n                        (dp[j][k][0] * dp[k + 2][j + gap][0])) % mod;\r\n                    dp[j][j + gap][0] %= mod;\r\n                }\r\n\r\n                if(exp[k + 1] == '^') {\r\n                    // T^T=F, T^F=T, F^T=T , F^F=F\r\n                    dp[j][j + gap][1] += ((dp[j][k][1] * dp[k + 2][j + gap][0]) + \r\n                        (dp[j][k][0] * dp[k + 2][j + gap][1])) % mod;\r\n                    dp[j][j + gap][1] %= mod;\r\n                    dp[j][j + gap][0] += ((dp[j][k][0] * dp[k + 2][j + gap][0]) + \r\n                        (dp[j][k][1] * dp[k + 2][j + gap][1])) % mod;\r\n                    dp[j][j + gap][0] %= mod;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return dp[0][n - 1][1];\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(N ^ 3)\n    Space Complexity: O(N ^ 2)\n\n    Where 'N' is the the length of string.\n'''\n\nmod = 1000000007\n\ndef evaluateExp(exp: str) -> int:\n    n = len(exp)\n\n    # We need to evaluate whole expression for true.\n    dp = [[[0 for k in range(2)] for j in range(n)] for k in range(n)]\n\n    # Filling the diagonal enteries.\n    for i in range(n):\n        if (exp[i] == 'T'):\n            dp[i][i][1] = 1\n        elif (exp[i] == 'F'):\n            dp[i][i][0] = 1\n        \n    # Filling the dp array.\n    for gap in range(2, n, 2):\n        for j in range(0, n - gap, 2):\n            for k in range(j, j + gap, 2):\n\n                if(exp[k + 1] == '|'):\n                    # T|T=T, T|F=T, F|T=T , F|F=F. \n                    dp[j][j + gap][1] += ((dp[j][k][0] * dp[k + 2][j + gap][1]) + \n                        (dp[j][k][1] * dp[k + 2][j + gap][0]) + \n                        (dp[j][k][1] * dp[k + 2][j + gap][1])) % mod\n                    dp[j][j + gap][1] %= mod\n                    dp[j][j + gap][0] += ((dp[j][k][0] * dp[k + 2][j + gap][0])) % mod\n                    dp[j][j + gap][0] %= mod\n            \n                if(exp[k + 1] == '&'):\n                    # T&T=T, T&F=F, F&T=F , F|F=F.\n                    dp[j][j + gap][1] += ((dp[j][k][1] * dp[k + 2][j + gap][1])) % mod\n                    dp[j][j + gap][1] %= mod\n                    dp[j][j + gap][0] += ((dp[j][k][0] * dp[k + 2][j + gap][1]) + \n                        (dp[j][k][1] * dp[k + 2][j + gap][0]) + \n                        (dp[j][k][0] * dp[k + 2][j + gap][0])) % mod\n                    dp[j][j + gap][0] %= mod\n                \n                if(exp[k + 1] == '^'):\n                    # T^T=F, T^F=T, F^T=T , F^F=F.\n                    dp[j][j + gap][1] += ((dp[j][k][1] * dp[k + 2][j + gap][0]) + \n                        (dp[j][k][0] * dp[k + 2][j + gap][1])) % mod\n                    dp[j][j + gap][1] %= mod\n                    dp[j][j + gap][0] += ((dp[j][k][0] * dp[k + 2][j + gap][0]) + \n                        (dp[j][k][1] * dp[k + 2][j + gap][1])) % mod\n                    dp[j][j + gap][0] %= mod\n            \n    return dp[0][n - 1][1]",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N ^ 3)\n    Space Complexity: O(N ^ 2)\n\n    Where 'N' is the the length of string.\n*/\n\npublic class Solution {\n    public static int mod = 1000000007;\n\n    public static int evaluateExp(String exp) {\n        int n = exp.length();\n\n        // We need to evaluate whole expression for true.\n        long[][][] dp = new long[n][n][2];\n\n        // Filling the diagonal enteries.\n        for (int i = 0; i < n; i++) {\n            if (exp.charAt(i) == 'T') {\n                dp[i][i][1] = 1;\n            } else if (exp.charAt(i) == 'F') {\n                dp[i][i][0] = 1;\n            }\n        }\n\n        // Filling the dp array.\n        for (int gap = 2; gap < n; gap += 2) {\n            for (int j = 0; j + gap < n; j += 2) {\n                for (int k = j; k < j + gap; k += 2) {\n\n                    if(exp.charAt(k + 1) == '|') {\n                        // T|T=T, T|F=T, F|T=T , F|F=F. \n                        dp[j][j + gap][1] += ((dp[j][k][0] * dp[k + 2][j + gap][1]) + \n                            (dp[j][k][1] * dp[k + 2][j + gap][0]) + \n                            (dp[j][k][1] * dp[k + 2][j + gap][1])) % mod;\n                        dp[j][j + gap][1] %= mod;\n                        dp[j][j + gap][0] += ((dp[j][k][0] * dp[k + 2][j + gap][0])) % mod;\n                        dp[j][j + gap][0] %= mod;\n                    }\n\n                    if(exp.charAt(k + 1) == '&') {\n                        // T&T=T, T&F=F, F&T=F , F|F=F.\n                        dp[j][j + gap][1] += ((dp[j][k][1] * dp[k + 2][j + gap][1])) % mod;\n                        dp[j][j + gap][1] %= mod;\n                        dp[j][j + gap][0] += ((dp[j][k][0] * dp[k + 2][j + gap][1]) + \n                            (dp[j][k][1] * dp[k + 2][j + gap][0]) + \n                            (dp[j][k][0] * dp[k + 2][j + gap][0])) % mod;\n                        dp[j][j + gap][0] %= mod;\n                    }\n\n                    if(exp.charAt(k + 1) == '^') {\n                        // T^T=F, T^F=T, F^T=T , F^F=F\n                        dp[j][j + gap][1] += ((dp[j][k][1] * dp[k + 2][j + gap][0]) + \n                            (dp[j][k][0] * dp[k + 2][j + gap][1])) % mod;\n                        dp[j][j + gap][1] %= mod;\n                        dp[j][j + gap][0] += ((dp[j][k][0] * dp[k + 2][j + gap][0]) + \n                            (dp[j][k][1] * dp[k + 2][j + gap][1])) % mod;\n                        dp[j][j + gap][0] %= mod;\n                    }\n                }\n            }\n        }\n        \n        return (int)dp[0][n - 1][1];\n    }\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}