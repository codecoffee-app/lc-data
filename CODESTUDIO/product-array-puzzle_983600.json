{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9346,
            "title": "Product array puzzle",
            "titleSlug": "product-array-puzzle_983600",
            "content": "<h4 id=\"you-are-given-an-array-of-n-integers-you-need-to-return-another-array-product-such-that-product-i-contains-the-product-of-all-the-arrays-except-the-element-at-the-ith-position-in-the-given-array\">You are given an array of \u2018N\u2019 integers. You need to return another array \u2018product\u2019 such that \u2018product[i]\u2019 contains the product of all the arrays except the element at the ith position in the given array.</h4>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>As the product of elements can be very large you need to return the answer in mod (10^9+7).\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up</h5>\n\n<pre><code>Try to do this without using the division operator \u2018/\u2019, in constant space. The output array does not count as extra space for the purpose of space complexity analysis.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single positive integer \u2018N\u2019 denoting the number of the elements present in the array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output of each test case should contain \u2018N\u2019 space-separated integers where ith integer denotes the product of all the elements in the array except itself.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n2 &lt;= N&lt;= 10^4\n1 &lt;= A[i] &lt;= 10^9 \n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the size of the array,  \u2018A[i]\u2019 is the size of the array elements.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5 \n1 3 3 10 2\n6 \n2 4 6 3 1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>180 60 60 18 90\n72 36 24 48 144 144\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nProduct of elements except 1 = 3 * 3 * 10 * 2 = 180       \nProduct of elements except 3 = 1  * 3 * 10 * 2 = 60       \nProduct of elements except 3 = 1 * 3  * 10 * 2 = 60       \nProduct of elements except 10 = 1 * 3 * 3 * 2 = 18       \nProduct of elements except 2 = 1 * 3 * 3 * 10 = 90       \n\nTest case 2:\nProduct of elements except 2 = 4 * 6 * 3 * 1 * 1 = 72   \nProduct of elements except 4 = 2 * 6 * 3 * 1 * 1 = 36   \nProduct of elements except 6 = 2 * 4 * 3 * 1 * 1 = 24   \nProduct of elements except 3 = 2 * 4 * 6 * 1 * 1 = 48  \nProduct of elements except 1 = 2 * 4 * 6 * 1 * 1 = 144   \nProduct of elements except 1 = 2 * 4 * 6 * 3 * 1 = 144  \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 \n1 10 1 2 2\n6\n2 12 1 1 20 1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>40 4 40 20 20\n240 40 480 480 24 480\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>Test case 1:\nProduct of elements except 1 = 10 * 1 * 2 * 2 = 40      \nProduct of elements except 10 = 1  * 1 * 2 * 2 = 4      \nProduct of elements except 2 = 1 * 10 * 1 * 2 = 20\nProduct of elements except 2 = 1 * 10 * 1 * 2 = 20       \n\nTest case 2:\nProduct of elements except 2 = 12 * 1 * 1 * 20 * 1 = 240\nProduct of elements except 12 = 2 * 1 * 1 * 20 * 1 = 40 \nProduct of elements except 1 = 2 * 12 * 1 * 20 * 1 = 480   \nProduct of elements except 1 = 2 * 12 * 1 * 20 * 1 = 480\nProduct of elements except 20 = 2 * 12 * 1 * 1 * 1 = 24  \nProduct of elements except 1 = 2 * 12 * 1 * 1* 20 = 480\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 87,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of N integers, return a new array 'product' where product[i] is the product of all numbers in the original array except the number at index i. The product should be calculated modulo (10^9 + 7).\n\nFollow up: Solve this without using the division operator and with constant space complexity (the output array does not count towards extra space usage).",
                "constraints": [
                    "1 <= T <= 10^2 (T is the number of test cases)",
                    "2 <= N <= 10^4 (N is the size of the array)",
                    "1 <= A[i] <= 10^9 (A[i] is the value of an array element)"
                ],
                "testcases": [
                    {
                        "input": "5\n1 3 3 10 2",
                        "output": "180 60 60 18 90",
                        "explanation": "For the first element (1), the product of the rest is 3 * 3 * 10 * 2 = 180.\nFor the second element (3), the product of the rest is 1 * 3 * 10 * 2 = 60.\nFor the third element (3), the product of the rest is 1 * 3 * 10 * 2 = 60.\nFor the fourth element (10), the product of the rest is 1 * 3 * 3 * 2 = 18.\nFor the fifth element (2), the product of the rest is 1 * 3 * 3 * 10 = 90."
                    },
                    {
                        "input": "6\n2 4 6 3 1 1",
                        "output": "72 36 24 48 144 144",
                        "explanation": "For the first element (2), the product of the rest is 4 * 6 * 3 * 1 * 1 = 72.\nFor the second element (4), the product of the rest is 2 * 6 * 3 * 1 * 1 = 36.\nFor the third element (6), the product of the rest is 2 * 4 * 3 * 1 * 1 = 24.\nFor the fourth element (3), the product of the rest is 2 * 4 * 6 * 1 * 1 = 48.\nFor the fifth element (1), the product of the rest is 2 * 4 * 6 * 3 * 1 = 144.\nFor the sixth element (1), the product of the rest is 2 * 4 * 6 * 3 * 1 = 144."
                    },
                    {
                        "input": "5\n1 10 1 2 2",
                        "output": "40 4 40 20 20",
                        "explanation": "For the first element (1), the product of the rest is 10 * 1 * 2 * 2 = 40.\nFor the second element (10), the product of the rest is 1 * 1 * 2 * 2 = 4.\nFor the third element (1), the product of the rest is 1 * 10 * 2 * 2 = 40.\nFor the fourth element (2), the product of the rest is 1 * 10 * 1 * 2 = 20.\nFor the fifth element (2), the product of the rest is 1 * 10 * 1 * 2 = 20."
                    },
                    {
                        "input": "6\n2 12 1 1 20 1",
                        "output": "240 40 480 480 24 480",
                        "explanation": "For the first element (2), the product of the rest is 12 * 1 * 1 * 20 * 1 = 240.\nFor the second element (12), the product of the rest is 2 * 1 * 1 * 20 * 1 = 40.\nFor the third element (1), the product of the rest is 2 * 12 * 1 * 20 * 1 = 480.\nFor the fourth element (1), the product of the rest is 2 * 12 * 1 * 20 * 1 = 480.\nFor the fifth element (20), the product of the rest is 2 * 12 * 1 * 1 * 1 = 24.\nFor the sixth element (1), the product of the rest is 2 * 12 * 1 * 1 * 20 = 480."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find the product for each position separately.</p>",
            "<p>Calculate the product of the whole array to speed up the brute force.</p>",
            "<p>Use some extra space to eliminate the use of division operator.</p>",
            "<p>Use product array itself to eliminate the use of division operator</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space complexity: O(1)\r\n\r\n    Where 'N' is the number of element present in the given array.\r\n*/\r\n\r\nint mod = (int)(1e9 + 7);\r\n\r\nvector < int > productPuzzle(vector < int > & arr, int n) {\r\n\r\n    vector < int > product(n, 0);\r\n\r\n    // Calculating the prefix product.\r\n    for (int i = 0; i < n; ++i) {\r\n        if (i == 0) {\r\n            product[i] = 1;\r\n        } else {\r\n            product[i] = (int)(((long) product[i - 1] * arr[i - 1]) % mod);\r\n        }\r\n    }\r\n\r\n    // It will store the suffix product.\r\n    long suffixProduct = 1;\r\n    for (int i = n - 1; i >= 0; i--) {\r\n        // Multiply the remaining suffix product to get actual product.\r\n        product[i] = (int)((product[i] * suffixProduct) % mod);\r\n        // Update the suffix product.\r\n        suffixProduct = (suffixProduct * arr[i]) % mod;\r\n    }\r\n\r\n    return product;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N)\r\n    Space complexity: O(1)\r\n\r\n    Where 'N' is the number of element present in the given array.\r\n'''\r\n\r\nmod = 1000000007\r\n\r\ndef productPuzzle(arr):\r\n    n = len(arr)\r\n    product = [0] * n\r\n\r\n    # Calculating the prefix product.\r\n    for i in range(n):\r\n        if (i == 0):\r\n            product[i] = 1\r\n        else:\r\n            product[i] = (product[i - 1] * arr[i - 1]) % mod\r\n        \r\n    # It will store the suffix product.\r\n    suffixProduct = 1\r\n    for i in range(n - 1, -1, -1):\r\n        # Multiply the remaining suffix product to get actual product.\r\n        product[i] = (product[i] * suffixProduct) % mod\r\n        # Update the suffix product.\r\n        suffixProduct = (suffixProduct * arr[i]) % mod\r\n\r\n    return product",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space complexity: O(1)\r\n\r\n    Where 'N' is the number of element present in the given array.\r\n*/\r\n\r\npublic class Solution {\r\n\r\n  public static int mod = (int)(1e9 + 7);\r\n\r\n  public static int[] productPuzzle(int[] arr, int n) {\r\n\r\n      int[] product = new int[n];\r\n\r\n      // Calculating the prefix product.\r\n      for (int i = 0; i < n; ++i) {\r\n          if (i == 0) {\r\n              product[i] = 1;\r\n          } else {\r\n              product[i] = (int)(((long) product[i - 1] * arr[i - 1]) % mod);\r\n          }\r\n      }\r\n\r\n      // It will store the suffix product.\r\n      long suffixProduct = 1;\r\n      for (int i = n - 1; i >= 0; i--) {\r\n          // Multiply the remaining suffix product to get actual product.\r\n          product[i] = (int)((product[i] * suffixProduct) % mod);\r\n          // Update the suffix product.\r\n          suffixProduct = (suffixProduct * arr[i]) % mod;\r\n      }\r\n\r\n      return product;\r\n  }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}