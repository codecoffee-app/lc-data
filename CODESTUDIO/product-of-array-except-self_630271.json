{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7037,
            "title": "Product of Array except self",
            "titleSlug": "product-of-array-except-self_630271",
            "content": "<h4 id=\"you-have-been-given-an-integer-array-list-arr-of-size-n-you-have-to-return-an-array-list-product-such-that-product-i-is-equal-to-the-product-of-all-the-elements-of-arr-except-arr-i\">You have been given an integer array/list (ARR) of size N. You have to return an array/list PRODUCT such that PRODUCT[i] is equal to the product of all the elements of ARR except ARR[i]</h4>\n\n<h5 id=\"note\">\u00a0Note :</h5>\n\n<pre><code>Each product can cross the integer limits, so we should take modulo of the operation. \n\nTake MOD = 10^9 + 7 to always stay in the limits.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow up :</h5>\n\n<pre><code>Can you try solving the problem in O(1) space?\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case or query contains an integer &#39;N&#39; representing the size of the array/list.\n\nThe second line contains &#39;N&#39; single space-separated integers representing the elements in the array/list.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the elements of the &#39;PRODUCT&#39; array separated by a single space. \n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"important-note\">Important Note :</h4>\n\n<pre><code>You are required to return the product array and no need to print the result explicitly. It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 10^5\n0 &lt;= ARR[i] &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3\n1 2 3\n3\n5 2 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>6 3 2\n4 10 10\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1 :</h5>\n\n<pre><code> Test case 1 : Given array = {1, 2, 3] \n Required array = [2 * 3, 1 * 3, 1 * 2] = [6, 3, 2]\n Test case 2 : Given array = {5, 2, 2] \n Required array = [2 * 2, 5 * 2, 5 * 2] = [4, 10, 10]\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1\n100\n2\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n2 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 339,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array/list (ARR) of size N, return an array/list PRODUCT such that PRODUCT[i] is equal to the product of all the elements of ARR except ARR[i].  Note that each product can cross the integer limits, so take the modulo with MOD = 10^9 + 7 to stay within the limits.",
                "constraints": [
                    "1 <= T <= 100",
                    "0 <= N <= 10^5",
                    "0 <= ARR[i] <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\n1 2 3",
                        "output": "6 3 2",
                        "explanation": "Given array = {1, 2, 3}. Required array = [2 * 3, 1 * 3, 1 * 2] = [6, 3, 2]"
                    },
                    {
                        "input": "3\n5 2 2",
                        "output": "4 10 10",
                        "explanation": "Given array = {5, 2, 2}. Required array = [2 * 2, 5 * 2, 5 * 2] = [4, 10, 10]"
                    },
                    {
                        "input": "1\n100",
                        "output": "1",
                        "explanation": null
                    },
                    {
                        "input": "2\n1 2",
                        "output": "2 1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For each index, think of computing the product of all the other elements.</p>",
            "<p>Think of suffix product array and prefix product array.</p>",
            "<p>Can you solve the problem by just utilizing the output array?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space complexity : O(1)\r\n\r\n    where N is the size of the input array\r\n*/\r\n\r\nint multiply(int a, int b)\r\n{\r\n    int mod = 1e9 + 7;\r\n    long long ret = a % mod;\r\n    ret *= (b % mod);\r\n    ret = ret % mod;\r\n    return ret;\r\n}\r\n\r\nint *getProductArrayExceptSelf(int *arr, int n)\r\n{\r\n    int *output = new int[n];\r\n    int product = 1;\r\n\r\n    for (int i = 0; i < n; ++i) \r\n    {\r\n        output[i] = product;\r\n        product = multiply(product, arr[i]);\r\n    }\r\n\r\n    product = 1;\r\n\r\n    for (int i = n - 1; i >= 0; --i) \r\n    {\r\n        output[i] = multiply(product, output[i]);\r\n        product = multiply(product, arr[i]);\r\n    }\r\n\r\n    return output;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity : O(N)\r\n    Space complexity : O(1)\r\n\r\n    where N is the size of the input array\r\n'''\r\nfrom sys import stdin\r\nmod = 10 ** 9 + 7\r\ndef getProductArrayExceptSelf(arr, n) :\r\n    output = [1] * n\r\n    product = 1\r\n    for i in range(n) :\r\n        \r\n        output[i] = product\r\n        product = (product * arr[i]) % mod\r\n    \r\n    product = 1\r\n    for i in range(n - 1, -1, -1) :\r\n        \r\n        output[i] =(output[i] * product) % mod\r\n        product = (product * arr[i]) % mod\r\n\r\n    return output\r\n\r\ndef takeInput() :\r\n    n = int(stdin.readline().rstrip())\r\n\r\n    if n == 0 :\r\n        return list(), 0\r\n\r\n    arr = list(map(int, stdin.readline().rstrip().split(\" \")))\r\n    return arr, n\r\n\r\ndef printList(arr, n) :\r\n    for i in range(n) :\r\n        print(arr[i], end = \" \") \r\n    print()\r\n\r\n\r\n#main\r\nt = int(stdin.readline().rstrip())\r\n\r\nwhile t > 0 :\r\n\r\n    arr, n = takeInput()\r\n    product = getProductArrayExceptSelf(arr, n)\r\n    printList(product, n)\r\n    \r\n    t -= 1",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space complexity : O(1)\r\n\r\n    where N is the size of the input array\r\n*/\r\n\r\npublic class Solution {\r\n\r\n    private final static long MOD = 1000000000 + 7;\r\n\r\n    public static int multiply(int a, int b) {\r\n        long ans = a % MOD;\r\n        ans *= (long)(b % MOD);\r\n        return (int)(ans % MOD);\r\n    }\r\n    \r\n    public static int[] getProductArrayExceptSelf(int[] arr) {\r\n        int n = arr.length;\r\n        \r\n        int[] output = new int[n];\r\n        int product = 1;\r\n\r\n        for (int i = 0; i < n; ++i) {\r\n            output[i] = product;\r\n            product = multiply(product, arr[i]);\r\n        }\r\n\r\n        product = 1;\r\n\r\n        for (int i = n - 1; i >= 0; --i) {\r\n            output[i] = multiply(output[i], product);\r\n            product = multiply(product, arr[i]);\r\n        }\r\n\r\n        return output;\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}