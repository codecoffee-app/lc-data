{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10550,
            "title": "Product of the Last K Numbers",
            "titleSlug": "product-of-the-last-k-numbers_1232651",
            "content": "<h4 id=\"given-a-sequence-of-queries-of-insertion-and-getproduct-you-need-to-create-an-array-using-queries-of-type-0-and-answer-queries-of-type-1\">Given a sequence of queries of insertion and getProduct, you need to create an array using queries of type-0 and answer queries of type-1.</h4>\n\n<h4 id=\"in-each-query-the-input-is-of-two-types\">In each query, the input is of two types :</h4>\n\n<h4 id=\"0-x-insert-element-x-at-the-end-array\">0 X: insert element \u2018X\u2019 at the end array.</h4>\n\n<h4 id=\"1-k-find-the-product-of-the-last-k-elements-in-the-array\">1 K: find the product of the last &#39;K&#39; elements in the array</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>For the query of type 1, you can assume that the array has at least k values. And at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains \u2018Q\u2019 denoting the number of queries.\n\nIn the next Q lines input is either of the types :\n    0 X: insert element \u2018X\u2019 at the end array.\n    1 K: find the product of the last &#39;K&#39; elements in the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing space-separated integers denoting answers of queries of type - 1.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 3\n0 &lt;= X &lt;= 100\n0 &lt;= QUERIES &lt;=5000\n1 &lt;= K &lt;= 5000\n\nWhere X denotes the value to be stored in the array.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n10\n0 3\n0 0\n0 2\n0 5\n0 4\n1 2\n1 3\n1 4\n0 8\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>20 40 0 32\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>After the first 5 insertions, the array will be [3 0 2 5 4]\n\nProduct with k=2 is 5*4 = 20\nProduct with k=3 is 2*5*4 = 40\nProduct with k=4 is 0*2*5*4 = 0\n\nInsert 8 : [ 3 0 2 5 4 8]\nProduct with k=2 is 4*8 = 32\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n12\n0 24\n1 1\n0 58\n0 2\n1 3\n0 73\n1 3\n0 66\n0 0\n1 4\n0 8\n1 7\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>24 2784 8468 0 0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a sequence of queries. There are two types of queries:\n\n*   **Type 0 (Insertion):** `0 X` - Insert the integer `X` at the end of an array.\n*   **Type 1 (Product):** `1 K` - Calculate the product of the last `K` elements in the array.\n\nYour task is to process these queries. For each query of type 0, add the element to the array. For each query of type 1, calculate and store the product of the last `K` elements.  Return the list of results from queries of type 1.",
                "constraints": [
                    "1 <= T <= 3 (Number of test cases)",
                    "0 <= X <= 100 (Value to be inserted)",
                    "0 <= QUERIES <= 5000 (Number of queries)",
                    "1 <= K <= 5000 (Number of elements for product calculation)",
                    "The array will always have at least K elements for a type 1 query.",
                    "The product of any contiguous sequence of numbers will fit into a 32-bit integer without overflowing."
                ],
                "testcases": [
                    {
                        "input": "1\n10\n0 3\n0 0\n0 2\n0 5\n0 4\n1 2\n1 3\n1 4\n0 8\n1 2",
                        "output": "20 40 0 32",
                        "explanation": "Initially, the array is [3, 0, 2, 5, 4].\n\n*   Query 1 (1 2): Product of last 2 elements (5 * 4) = 20\n*   Query 2 (1 3): Product of last 3 elements (2 * 5 * 4) = 40\n*   Query 3 (1 4): Product of last 4 elements (0 * 2 * 5 * 4) = 0\n*   Insert 8: Array becomes [3, 0, 2, 5, 4, 8]\n*   Query 4 (1 2): Product of last 2 elements (4 * 8) = 32"
                    },
                    {
                        "input": "1\n12\n0 24\n1 1\n0 58\n0 2\n1 3\n0 73\n1 3\n0 66\n0 0\n1 4\n0 8\n1 7",
                        "output": "24 2784 8468 0 0",
                        "explanation": "Initially, the array is [24].\n\n*   Query 1 (1 1): Product of last 1 element (24) = 24\n*   Insert 58: Array becomes [24, 58]\n*   Insert 2: Array becomes [24, 58, 2]\n*   Query 2 (1 3): Product of last 3 elements (24 * 58 * 2) = 2784\n*   Insert 73: Array becomes [24, 58, 2, 73]\n*   Query 3 (1 3): Product of last 3 elements (58 * 2 * 73) = 8468\n*   Insert 66: Array becomes [24, 58, 2, 73, 66]\n*   Insert 0: Array becomes [24, 58, 2, 73, 66, 0]\n*   Query 4 (1 4): Product of last 4 elements (73 * 66 * 0) = 0\n*   Insert 8: Array becomes [24, 58, 2, 73, 66, 0, 8]\n*   Query 5 (1 7): Product of last 7 elements (24 * 58 * 2 * 73 * 66 * 0 * 8) = 0"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We can just append elements according to the query.</p>",
            "<p>Can prefix product array help?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}