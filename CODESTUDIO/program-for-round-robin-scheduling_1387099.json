{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11840,
            "title": "Program for Round Robin scheduling",
            "titleSlug": "program-for-round-robin-scheduling_1387099",
            "content": "<h4 id=\"in-an-operating-system-processes-are-scheduled-to-execute-using-many-algorithms-of-which-one-is-the-round-robin-algorithm-this-algorithm-ensures-democracy-in-utilizing-the-cpu-time-for-each-of-the-processes-currently-in-execution\">In an operating system, processes are scheduled to execute using many algorithms, of which one is the Round Robin Algorithm. This algorithm ensures democracy in utilizing the CPU time for each of the processes currently in execution.</h4>\n\n<h4 id=\"assuming-that-all-the-processes-start-executing-at-the-same-time-each-process-gets-a-fixed-time-slot-say-t-seconds-for-execution-after-which-it-has-to-let-the-next-process-take-the-cpu-let-there-be-5-processes-p1-p2-p3-p4-and-p5-ready-for-execution-if-p1-accesses-the-cpu-at-time-t0-it-should-give-access-to-p2-after-t0-t-seconds-and-wait-p2-executes-from-t0-t-to-t0-2t-and-so-on-once-p5-completes-its-share-of-cpu-usage-p1-gets-its-next-chance\">Assuming that all the processes start executing at the same time, each process gets a fixed time slot (say t seconds) for execution, after which it has to let the next process take the CPU. Let there be 5 processes (p1, p2, p3, p4 and p5) ready for execution. If p1 accesses the CPU at time t0, it should give access to p2 after t0+t seconds and wait. p2 executes from t0+t to t0+2t and so on. Once p5 completes its share of CPU usage, p1 gets its next chance.</h4>\n\n<h4 id=\"each-process-can-leave-this-execution-loop-when-its-own-execution-time-is-over-therefore-the-process-with-the-largest-execution-time-will-be-the-one-that-would-be-the-last-process-waiting-simulate-the-round-robin-algorithm-execution-using-the-set-of-process-burst-times-and-process-ids-are-given\">Each process can leave this execution loop when its own execution time is over. Therefore, the process with the largest execution time will be the one that would be the last process waiting. Simulate the Round Robin algorithm execution using the set of process burst times and process ids are given.</h4>\n\n<h4 id=\"the-processes-runtime-are-to-be-inserted-into-the-queue-first-and-then-decremented-by-cpu-execution-time-for-each-iteration-through-the-queue-until-their-runtime-is-over\">The processes (runtime) are to be inserted into the queue first and then decremented (by CPU execution time) for each iteration through the queue until their runtime is over.</h4>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>Input: \n# Process id&#39;s \nproc = [1, 2, 3]\nn = 3\n\n# Burst time of all processes \nburst_time = [10, 5, 8] \n\n# Time quantum \nquantum = 2;\n\nOutput:\n\nProcesses  Burst time  Waiting time  Turnaround time\n1          10          13            23\n2          5           10            15\n3          8           13            21\n\nAverage waiting time = 12\nAverage turnaround time = 19.6667\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input is the number of  test cases \u2018T\u2019 which are going to be there \n\nThe first line of each test case would be two space-separated integers majorly representing the  \u2018numberOfProcesses\u2019 and \u2018timeQuanta\u2019.\n\nThe second line of each test case contains &#39;numberOfProcesses&#39; space-separated integers denoting the elements of the array processes.\n\nThe third line of each test case contains &#39;numberOfProcesses&#39; space-separated integers denoting the burst-times of the processes given.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, print the average wait time and turn around time for the calculated set of processes given the round-robin strategy which is to be used. Print the closest integer less than or equal to a given number.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= process.length &lt;= 10^5\n1 &lt;= processId &lt;= process.length\n1 &lt;= burstTimes.length &lt;= process.length\n1 &lt;= burstTimes &lt;= 10^5\n1 &lt;= timeQuantum &lt;= burst times\n\nWhere \u2018process.length\u2019 would denote the number of process id which would be given the schedule using the round-robin algorithm, where \u2018burstTimes\u2019 are the running times of the given processes (CPU execution times) while the \u201ctimeQuantum\u201d is the time duration (slot).\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 4\n1 2 3 4\n5 3 8 9\n3 1\n1 2 3\n3 4 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>10 17\n5 8\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000380_1617759005_process_in_Ready_Queue_in_Round_Robin.PNG\" alt=\"\"></p>\n\n<pre><code>Average Waiting time = ( 11 + 4 + 12 + 16 ) / 4 = 10\nAverage Turnaround Time = ( 16 + 7 + 20 + 25 ) / 4 = 17\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000378_1617758661_round-robin-1.jpg\" alt=\"\"></p>\n\n<pre><code>Average waiting time = ( 4 + 6 + 6 ) / 3 = 5\nAverage Turnaround time = ( 7 + 10 + 9 ) / 3 = 8\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n3 2\n1 2 3\n10 5 8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>12 19\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000379_1617758674_round-2.png\" alt=\"\"></p>\n\n<pre><code>Average Waiting time = ( 13 + 10 + 13 ) / 3 = 12\nAverage Turnaround Time = ( 23 + 15 + 21 ) / 3 = 19\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Simulate the Round Robin CPU scheduling algorithm. Given a set of processes with their burst times and process IDs, calculate the average waiting time and average turnaround time. Assume all processes arrive at the same time. Each process executes for a fixed time quantum before being preempted. The processes' runtimes are decremented by the CPU execution time in each iteration until completion.",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= process.length <= 10^5 (Number of processes)",
                    "1 <= processId <= process.length (Process ID)",
                    "1 <= burstTimes.length <= process.length (Number of burst times)",
                    "1 <= burstTimes <= 10^5 (Burst time value)",
                    "1 <= timeQuantum <= burst times (Time quantum value)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n4 4\n1 2 3 4\n5 3 8 9\n3 1\n1 2 3\n3 4 3",
                        "output": "10 17\n5 8",
                        "explanation": "Test Case 1:\n\nFor the first set of processes with burst times [5, 3, 8, 9] and quantum 4:\nAverage Waiting time = ( 11 + 4 + 12 + 16 ) / 4 = 10\nAverage Turnaround Time = ( 16 + 7 + 20 + 25 ) / 4 = 17\n\nFor the second set of processes with burst times [3, 4, 3] and quantum 1:\nAverage waiting time = ( 4 + 6 + 6 ) / 3 = 5\nAverage Turnaround time = ( 7 + 10 + 9 ) / 3 = 8"
                    },
                    {
                        "input": "1\n3 2\n1 2 3\n10 5 8",
                        "output": "12 19",
                        "explanation": "Test Case 2:\n\nFor the processes with burst times [10, 5, 8] and quantum 2:\nAverage Waiting time = ( 13 + 10 + 13 ) / 3 = 12\nAverage Turnaround Time = ( 23 + 15 + 21 ) / 3 = 19"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you design an algorithm to calculate the waiting time first and then the turnaround time?</p>"
        ],
        "relatedTopics": [],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}