{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9281,
            "title": "Program to validate IP address",
            "titleSlug": "program-to-validate-ip-address_981315",
            "content": "<h4 id=\"you-are-given-the-text-ipaddress-your-task-is-to-check-if-the-given-text-ipaddress-is-a-valid-ipv4-or-not\">You are given the text \u2018IPAddress\u2019. Your task is to check if the given text \u2018IPAddress\u2019 is a valid \u2018IPv4\u2019 or not.</h4>\n\n<h4 id=\"conditions-for-a-valid-ipv4-are\">Conditions for a valid \u2018IPv4\u2019 are:</h4>\n\n<pre><code>1. Text form of \u2018IPAddress\u2019 must be \u2018a.b.c.d\u2019\n2. The values of a,b,c and d can vary from \u20180\u2019 to \u2018255\u2019 and both \u20180\u2019 and \u2018255\u2019 are inclusive.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe next \u2018T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first and only line of every test case contains a string \u2018IPAddress\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print \u2018True\u2019 if the given text \u2018IPAddress\u2019 is valid \u2018IPv4\u2019 else print \u2018False\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^4\n1 &lt;= length of given text &lt;= 50\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4\n123.111.12.k\n122.0.330.0\n1.1.1.250\n1.0.0.0.1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>False\nFalse\nTrue\nFalse\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>Test Case 1:\nGiven text \u2018IPAddress = 123.111.12.k\u2019, it is satisfying the first condition that given \u2018IPAddress\u2019 must be \u2018a.b.c.d\u2019 formed but it not satisfying the second condition that d must in a range of \u20180\u2019 to \u2018255\u2019 but the value of \u2018d\u2019 is \u2018k\u2019.\nHence return \u2018False\u2019.\n\nTest Case 2:\nGiven text \u2018IPAddress = 122.0.330.0\u2019, it is satisfying the first condition that given \u2018IPAddress\u2019 must be \u2018a.b.c.d\u2019 formed but it not satisfying the second condition that c must in a range of \u20180\u2019 to \u2018255\u2019 but the value of \u2018c\u2019 is \u2018330\u2019 and it is out of range.\nHence return \u2018False\u2019.\n\nTest Case 3:\nGiven text \u2018IPAddress = 1.1.1.250\u2019, it is satisfying the first condition that given \u2018IPAddress\u2019 must be \u2018a.b.c.d\u2019 formed as well as it satisfying the second condition that a,b,c, and d must in range of \u20180\u2019 to \u2018250\u2019.\nHence return \u2018True\u2019.\n\nTest Case 4:\nGiven text \u2018IPAddress = 1.0.0.0.1\u2019, it is not satisfying the first condition for valid \u2018IPv4\u2019, that text \u2018IPAddress\u2019 must be in form of \u2018a.b.c.d\u2019 but given text is a form of \u2018a.b.c.d.e\u2019\nHence return \u2018False\u2019.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1.90.21.1\n1.1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 76,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a string 'IPAddress'. Determine if the given string is a valid IPv4 address.\n\nA valid IPv4 address must meet the following conditions:\n\n1.  It must be in the format 'a.b.c.d'.\n2.  Each of the values a, b, c, and d must be integers between 0 and 255, inclusive.",
                "constraints": [
                    "1 <= T <= 10^4",
                    "1 <= length of given text <= 50",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "123.111.12.k",
                        "output": "False",
                        "explanation": "The IPAddress '123.111.12.k' is not valid because 'k' is not a valid integer between 0 and 255."
                    },
                    {
                        "input": "122.0.330.0",
                        "output": "False",
                        "explanation": "The IPAddress '122.0.330.0' is not valid because 330 is greater than 255."
                    },
                    {
                        "input": "1.1.1.250",
                        "output": "True",
                        "explanation": "The IPAddress '1.1.1.250' is valid because it is in the format 'a.b.c.d' and each value (1, 1, 1, 250) is between 0 and 255."
                    },
                    {
                        "input": "1.0.0.0.1",
                        "output": "False",
                        "explanation": "The IPAddress '1.0.0.0.1' is not valid because it has 5 segments separated by dots, but a valid IPv4 address must have only 4."
                    },
                    {
                        "input": "1.90.21.1",
                        "output": "True",
                        "explanation": "The IPAddress '1.90.21.1' is valid because it is in the format 'a.b.c.d' and each value (1, 90, 21, 1) is between 0 and 255."
                    },
                    {
                        "input": "1.1",
                        "output": "False",
                        "explanation": "The IPAddress '1.1' is not valid because it does not follow the 'a.b.c.d' format, it only has 2 segments."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of a recursive approach.</p>",
            "<p>Try to check every chunk of text.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}