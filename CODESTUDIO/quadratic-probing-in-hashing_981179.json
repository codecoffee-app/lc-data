{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9206,
            "title": "Quadratic Probing in Hashing",
            "titleSlug": "quadratic-probing-in-hashing_981179",
            "content": "<h4 id=\"hashing-is-a-technique-in-which-a-large-non-negative-integer-is-mapped-with-a-smaller-non-negative-integer-using-a-function-called-hash-function-and-this-smaller-integer-is-used-as-an-index-of-an-array-called-hash-table\">\u2018Hashing\u2019 is a technique in which a large non-negative integer is mapped with a smaller non-negative integer using a function called \u2018hash function\u2019 and this smaller integer is used as an index of an array called \u2018hash table\u2019.</h4>\n\n<h4 id=\"we-define-collision-as-a-situation-when-a-large-integer-is-mapped-to-the-index-in-a-hash-table-that-is-already-mapped-with-some-other-integer\">We define \u2018Collision\u2019 as a situation when a large integer is mapped to the index in a hash table that is already mapped with some other integer.</h4>\n\n<h4 id=\"quadratic-probing-is-a-collision-handling-technique-in-which-we-take-the-original-hash-value-and-successively-add-i-i-in-ith-iteration-until-an-unmapped-index-is-found-in-the-hash-table-this-technique-works-as-follows\">\u2018Quadratic Probing\u2019 is a collision handling technique in which we take the original hash value and successively add \u2018i*i\u2019 in \u2018ith\u2019 iteration until an unmapped index is found in the hash table. This technique works as follows:</h4>\n\n<pre><code>Let \u2018x\u2019  be a larger integer, \u2018n\u2019 be the size of the hash table, and \u2018h(x) = x mod n\u2019 be a hash function. Then in Quadratic Probing -:\n\n1. If we find that the index h(x), is already mapped to some other integer in the hashtable, then we try for index (h(x) + 1 * 1) mod n. \n\n2. If the index (h(x) + 1*1) mod n, is also already mapped to some other integer in the hashtable, then we try for index (h(x) + 2 * 2) mod n.\n\n3. If the index (h(x) + 2*2) mod n, is also already mapped to some other integer in the hashtable, then we try for index \u2018(h(x) + 3 * 3) mod n. \n\n4. We repeat this process until an unmapped index is found in the hashtable or index values start repeating.\n</code></pre>\n\n<h4 id=\"in-quadratic-probing-sometimes-it-is-possible-that-we-cannot-map-an-integer-with-any-index-in-the-hashtable\">In Quadratic probing, sometimes, it is possible that we cannot map an integer with any index in the hashtable.</h4>\n\n<h4 id=\"given-an-array-keys-consisting-of-n-non-negative-integers-lets-consider-the-hash-function-h-x-x-mod-n-assume-that-you-are-traversing-the-array-keys-from-left-to-right-and-you-need-to-insert-all-these-keys-in-the-hash-table-for-each-element-of-the-array-keys-your-task-is-to-determine-the-index-by-which-this-element-is-mapped-in-the-hash-table-if-quadratic-probing-technique-is-used-to-handle-the-collision-return-an-array-hashtable-of-size-n-where-the-element-at-index-i-is-the-element-from-the-given-array-keys-that-is-mapped-to-that-index-or-1-if-no-element-is-mapped-to-that-index\">Given an array \u2018keys\u2019  consisting of \u2018n\u2019 non-negative integers. Let&#39;s consider the hash function h(x) = x mod n.  Assume that you are traversing the array \u2018keys\u2019 from left to right and you need to insert all these keys in the hash table. For each element of the array \u2018keys\u2019, your task is to determine the index by which this element is mapped in the hash table if \u2018Quadratic Probing\u2019 technique is used to handle the collision. Return an array \u2018hashTable\u2019 of size \u2018n\u2019 where the element at index \u2018i\u2019 is the element from the given array \u2018keys\u2019 that is mapped to that index or -1 if no element is mapped to that index.</h4>\n\n<pre><code>For Example -:  Consider, array  \u2018keys\u2019 = {50, 49, 76, 85, 92, 73, 18},  \u2018n\u2019 = 7 and the hash function h(x) = x mod 7. Then -:\n\n1. h(50) = 50 mod 7 = 1, thus it will be mapped to index \u20181\u2019 in the hashtable.\n\n2. h(49) = 49 mod 7 = 0, thus it will be mapped to index \u20180\u2019 in hashtable.\n\n3. h(76) = 76 mod 7 = 6, thus it will be mapped to index \u20186\u2019 in the hashtable.\n\n4. h(85) = 85 mod 7 = 1, thus it should be mapped to index \u20181\u2019 in the hashtable, but index \u20181\u2019is already mapped with 50,  so we try for index (h(85) + 1*1) mod 7 = \u20182\u2019, as index \u20182\u2019 is not mapped previously, thus it will be mapped to index \u20182\u2019 in hashtable\u2019.\n\n5. h(92) = 92 mod 7 = 1,  thus it should be mapped to index \u20181\u2019 in the hashtable, but index \u20181\u2019 is already mapped with 50, so we try for index (h(92) + 1*1) mod 7 = 2,  but index \u20182\u2019 is also occupied so we try for index (h(92) + 2*2) mod 7 = \u20185\u2019, as index \u20185\u2019 is not mapped previously, thus it will be mapped to index \u20185\u2019 in hashtable\n\n6. h(73) = 73 mod 7 = 3,  thus it will be mapped to index \u20183\u2019 in the hashtable.\n\n7. h(18) = 18 mod 7 = 4,  thus it will be mapped to index \u20184\u2019 in the hashtable. \nThus the resultant array \u2018hashTable\u2019 should be {49, 50, 85, 73, 18, 92, 76}.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/qp-6598.png\" alt=\"alt text\"></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. Consider \u20180\u2019 based indexing.\n2. Don\u2019t print anything, just return the integer array \u2018hashTable\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe next \u20182*T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of each test case contains a positive integer \u2018n\u2019 representing the size of array \u2018keys\u2019.\n\nThe second line of the test case contains \u2018n\u2019 space-separated non-negative integers representing elements of the array \u2018keys\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return an array \u2018hashTable\u2019 of size \u2018n\u2019 where the element at index \u2018i\u2019 is the element from the given array \u2018keys\u2019 that is mapped to that index or -1 is no element is mapped to that index.\n\nOutput for each query is printed in a new line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= n &lt;= 100\n0 &lt;= keys[i] &lt;= 10^9\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018n\u2019 is the size of the given array \u2018keys[i]\u2019 is the elements of the given array.\n\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n7\n50 49 76 85 92 73 18\n1\n5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>49 50 85 73 18 92 76\n5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nSee the problem statement for the explanation.    \n\nTest case 2:\nHere, \u2018keys\u2019 = {5}, \u2018n\u2019 = 1 and hash function h(x) = x mod 1.\nh(5) = 5 mod 1 = 0,  thus it will be mapped to index 0 in the hashtable.\nTherefore, the resultant array \u2018hashTable\u2019 = {5}. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2\n1 2\n3\n3 6 9\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2 1\n3 6 -1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>Test case 1:\nHere, \u2018keys\u2019 = {1, 2}, \u2018n\u2019 = 2 and hash function h(x) = x mod 2.\nh(1) = 1 mod 2 = 1, thus it will be mapped to index 1 in the hashtable.\nh(2) = 2 mod 2 = 0, thus it will be mapped to index 0 in the hashtable.\nTherefore, the resultant array \u2018hashTable\u2019 = {2, 1}.\n\nTest case 2:\nHere \u2018keys\u2019 = {3, 6, 9}, \u2018n\u2019 = 3 and hash function h(x) = x mod 3.\nh(3) = 3 mod 3 = 0, thus it will be mapped to index 0 in the hashtable.\nh(6) = 6 mod 3 = 0, thus it should be mapped with index 0 in the hashtable, but 3 is already mapped with 0,so  it will be mapped with index (h(6) + 1*1) mod 3 = 1 in the hashtable.\nh(9) = 9 mod 3 = 0, thus it should be mapped with index 0 in the hashtable, but 3 is already mapped with 0, so we try to map it with index (h(9) + 1*1) mod 3 = 1 in the hashtable, but index 1 is already mapped with 6, so we try to map it with index (h(9) + 2*2) mod 3 = 1 in the hashtable which is the same as the previous value, we can observe after that value starts repeating thus we cannot map 9 with any index.\nTherefore, the resultant array \u2018hashTable\u2019 = {3, 6, -1}\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a hash table using quadratic probing for collision resolution. Given an array 'keys' of non-negative integers and a hash table size 'n', insert each key into the hash table using the hash function h(x) = x mod n. If a collision occurs, resolve it using quadratic probing: try indices (h(x) + i*i) mod n for i = 1, 2, 3,... until an empty index is found or the search starts repeating.  Return the hash table as an array of size 'n', where each element is either a key that was successfully inserted at that index, or -1 if no key is present at that index.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= n <= 100",
                    "0 <= keys[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "7\n50 49 76 85 92 73 18",
                        "output": "49 50 85 73 18 92 76",
                        "explanation": "keys = {50, 49, 76, 85, 92, 73, 18}, n = 7.  \n50 mod 7 = 1. hashtable[1] = 50.\n49 mod 7 = 0. hashtable[0] = 49.\n76 mod 7 = 6. hashtable[6] = 76.\n85 mod 7 = 1 (collision). (1 + 1*1) mod 7 = 2. hashtable[2] = 85.\n92 mod 7 = 1 (collision). (1 + 1*1) mod 7 = 2 (collision). (1 + 2*2) mod 7 = 5. hashtable[5] = 92.\n73 mod 7 = 3. hashtable[3] = 73.\n18 mod 7 = 4. hashtable[4] = 18."
                    },
                    {
                        "input": "1\n5",
                        "output": "5",
                        "explanation": "keys = {5}, n = 1.  5 mod 1 = 0. hashtable[0] = 5."
                    },
                    {
                        "input": "2\n1 2",
                        "output": "2 1",
                        "explanation": "keys = {1, 2}, n = 2.\n1 mod 2 = 1. hashtable[1] = 1\n2 mod 2 = 0. hashtable[0] = 2"
                    },
                    {
                        "input": "3\n3 6 9",
                        "output": "3 6 -1",
                        "explanation": "keys = {3, 6, 9}, n = 3.\n3 mod 3 = 0. hashtable[0] = 3.\n6 mod 3 = 0 (collision). (0 + 1*1) mod 3 = 1. hashtable[1] = 6.\n9 mod 3 = 0 (collision). (0 + 1*1) mod 3 = 1 (collision). (0 + 2*2) mod 3 = 1 (repeating). Cannot insert 9."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Probe at most&nbsp; \u2018n\u2019 times for each element.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}