{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12842,
            "title": "Queries on Stack",
            "titleSlug": "queries-on-stack_1496513",
            "content": "<h4 id=\"you-are-given-an-empty-stack-and-an-integer-limit-the-size-of-the-stack-cannot-exceed-the-limit\">You are given an empty stack and an integer \u2018LIMIT\u2019.  The size of the stack cannot exceed the \u2018LIMIT\u2019.</h4>\n\n<h4 id=\"you-are-given-q-queries-of-the-following-three-types\">You are given \u2018Q\u2019 queries of the following three types -:</h4>\n\n<h4 id=\"1-push-x-push-integer-x-at-top-of-the-if-its-size-is-less-than-x-else-do-nothing\">1. PUSH \u2018X\u2019 -:  Push integer \u2018X\u2019 at top of the if its size is less than \u2018X\u2019, else do nothing.</h4>\n\n<h4 id=\"2-pop-pops-and-returns-the-top-element-of-stack-or-1-if-the-stack-is-empty\">2. POP -:  Pops and returns the top element of stack or -1 if the stack is empty.</h4>\n\n<h4 id=\"3-inc-k-y-increments-the-bottom-k-elements-of-the-stack-by-y-if-there-are-fewer-than-x-elements-in-the-stack-just-increment-all-the-elements-in-the-stack\">3. INC \u2018K\u2019, \u2018Y\u2019-:  Increments the bottom \u2018K\u2019 elements of the stack by \u2018Y\u2019. If there are fewer than X elements in the stack, just increment all the elements in the stack.</h4>\n\n<h4 id=\"your-task-is-to-return-an-array-list-that-consists-of-all-elements-returned-by-a-query-of-type-pop-in-the-same-order-in-which-these-queries-are-executed-see-the-example-for-more-clarity\">Your task is to return an array/list, that consists of all elements returned by a query of type \u2018POP\u2019 in the same order in which these queries are executed.  See the example for more clarity.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. It is guaranteed that there is at least one query of type \u2018POP\u2019.\n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>Let there be the following 10  queries and \u2018LIMIT\u2019 be 3.\n[PUSH 3, PUSH 2, PUSH 1, INC 2 1, PUSH 1, POP, INC 3 3, POP, POP, POP].\nStack after 0th query, i.e PUSH 3,  be [3]\nStack after 1st query, i.e PUSH 2, be [3, 2] (top to bottom of the stack is represented by right to the left of list)\nStack after 2nd query, i.e PUSH 1, be [3, 2, 1].\nStack after 3rd query, i.e INC 2 1, be [4, 3, 1]. We increment the bottom 2 elements by 1.\nStack after 4th query, i.e PUSH 1, be [4, 3, 1] as the size of the stack cannot exceed 3.\nStack after 5th query, i.e POP, be [4, 3] and we should return 1 for this query.\nStack after 6th query, i.e INC 3 3, be [7, 6] as stack size is less than 3, so we every element.\nStack after the 7th query, i.e POP, be [7] and we should return 6 for this query.\nStack after 8th query, i.e POP, be [] and we should return 7 for this query.\nStack after the 9th query, i.e POP, be [] and we should return -1 for this query.\n\nThus we should return an array/list [1, 6, 7, -1].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases to be run. Then the test cases follow.\n\nThe first line of each test case will contain two space-separated integers \u2018Q\u2019 and \u2018LIMIT\u2019, representing the number of queries, and maximum size of stack respectively.\n\nThe next \u2018Q\u2019 lines of each test case consist of a string that represents the type of query and then 0 to 2 space-separated integers according to types of query.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print space-separated integers returned by a query of type \u2018POP\u2019 in the same order in which these queries are executed.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= Q &lt;= 10000\n1 &lt;= LIMIT &lt;= 10000\n1 &lt;= X &lt;= 10000\n1 &lt;= K &lt;= 10000\n1 &lt;= Y &lt;= 10000\n\nWhere \u2018T\u2019 is the number of test cases,  \u2018Q\u2019, \u2018LIMIT\u2019, representing the number of queries, and maximum size of stack respectively, and \u2018X\u2019, \u2018K\u2019, \u2018Y\u2019 are integers described in problem statements.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 1\nPOP\n10 3\nPUSH 3 \nPUSH 2 \nPUSH 1\nINC 2 1 \nPUSH 1 \nPOP\nINC 3 3\nPOP \nPOP\nPOP\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>-1\n1 6 7 -1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>In the first test case,  there is only 1 \u2018POP\u2019 query, as the stack initially is empty so we should return -1.\n\nFor the second test case, refer the problem statement for an explanation.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n5 5\nPUSH 2\nPUSH 3\nINC 1 1\nINC 2 1\nPOP\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a stack data structure with a fixed size limit. You are given a series of queries to manipulate the stack. The queries are of three types:\n\n1. **PUSH X:** Push the integer 'X' onto the top of the stack if the stack's current size is less than the 'LIMIT'. Otherwise, do nothing.\n2. **POP:** Remove and return the element at the top of the stack. If the stack is empty, return -1.\n3. **INC K Y:** Increment the bottom 'K' elements of the stack by 'Y'. If the stack contains fewer than 'K' elements, increment all elements in the stack by 'Y'.\n\nYour task is to process the given queries and return a list containing all the values returned by the 'POP' queries, in the order they were executed.",
                "constraints": [
                    "1 <= T <= 50 (Number of test cases)",
                    "1 <= Q <= 10000 (Number of queries)",
                    "1 <= LIMIT <= 10000 (Maximum stack size)",
                    "1 <= X <= 10000 (Value to push)",
                    "1 <= K <= 10000 (Number of elements to increment)",
                    "1 <= Y <= 10000 (Increment value)",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 1\nPOP",
                        "output": "-1",
                        "explanation": "The stack is initially empty. A POP query on an empty stack returns -1."
                    },
                    {
                        "input": "10 3\nPUSH 3\nPUSH 2\nPUSH 1\nINC 2 1\nPUSH 1\nPOP\nINC 3 3\nPOP\nPOP\nPOP",
                        "output": "1 6 7 -1",
                        "explanation": "This test case demonstrates the sequence of stack operations:\n\n1.  `PUSH 3`: Stack becomes [3]\n2.  `PUSH 2`: Stack becomes [3, 2]\n3.  `PUSH 1`: Stack becomes [3, 2, 1]\n4.  `INC 2 1`: Increment bottom 2 elements by 1. Stack becomes [4, 3, 1]\n5.  `PUSH 1`: Stack remains [4, 3, 1] (limit reached)\n6.  `POP`: Returns 1, stack becomes [4, 3]\n7.  `INC 3 3`: Increment all elements by 3. Stack becomes [7, 6]\n8.  `POP`: Returns 6, stack becomes [7]\n9.  `POP`: Returns 7, stack becomes []\n10. `POP`: Returns -1, stack remains []"
                    },
                    {
                        "input": "1\n5 5\nPUSH 2\nPUSH 3\nINC 1 1\nINC 2 1\nPOP",
                        "output": "4",
                        "explanation": "1. PUSH 2: Stack becomes [2]\n2. PUSH 3: Stack becomes [2,3]\n3. INC 1 1: Increment the bottom 1 elements of the stack: [3,3]\n4. INC 2 1: Increment the bottom 2 elements of the stack: [4,4]\n5. POP: Pops the top element(4) and return it. Stack: [4]"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Do as directed.</p>",
            "<p>Increment element only when needed.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}