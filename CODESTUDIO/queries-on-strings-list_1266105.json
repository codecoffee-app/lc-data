{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10849,
            "title": "Queries on Strings list",
            "titleSlug": "queries-on-strings-list_1266105",
            "content": "<h4 id=\"initially-you-have-an-empty-list-array-of-strings-you-need-to-process-n-queries-of-the-following-4-types\">Initially you have an empty list/array of strings.  You need to process \u2018N\u2019 queries of the following 4 types :</h4>\n\n<h4 id=\"1-add-key-you-have-to-append-1-occurrence-of-string-key-in-that-list-array\">1. Add \u2018KEY\u2019 :  You have to append 1 occurrence of string \u2018KEY\u2019 in that list/array.</h4>\n\n<h4 id=\"2-rem-key-you-have-to-erase-any-1-occurrence-of-string-key-from-that-list-array\">2. Rem \u2018KEY\u2019 : You have to erase any 1 occurrence of string \u2018KEY\u2019 from that list/array.</h4>\n\n<h4 id=\"3-getmaxkey-you-have-to-find-the-lexicographically-smallest-string-present-in-the-list-array-that-has-the-highest-frequency\">3.  GetMaxKey :  You have to find the lexicographically smallest string present in the list/array that has the highest frequency.</h4>\n\n<h4 id=\"4-getminkey-you-have-to-find-the-lexicographically-smallest-string-present-in-the-list-array-that-has-the-lowest-frequency\">4.  GetMinKey :  You have to find the lexicographically smallest string present in the list/array that has the lowest frequency.</h4>\n\n<h4 id=\"you-should-print-a-string-list-array-consisting-of-answers-to-all-the-queries-of-types-3-and-4-in-the-same-order-in-which-they-have-been-asked\">You should print a string list/array consisting of answers to all the queries of types 3 and 4 in the same order in which they have been asked.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. It is guaranteed that you can always process all these queries i.e there will be at least one occurrence of string \u2018KEY\u2019 in list/array when the query of type 2 is asked, and list/array is not empty when the query of type 3 or 4 is asked.\n2. It is guaranteed that there will be at least 1 query of type 3 or 4.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow up:</h5>\n\n<pre><code>1. Can you process all 4 types of queries in O(1) time? (Assume the length of string \u2018KEY\u2019 is constant)\n2. Can you process all 4 types of queries in O(1) time if you can find any string in the 3rd or 4th query that has the highest and lowest frequency respectively? (Assume the length of string \u2018KEY\u2019 is constant).\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Consider the following \u20189\u2019 queries.\nAdd \u201cabc\u201d\nAdd \u201caaa\u201d\nAdd \u201cpqrs\u201d\nRem \u201cpqrs\u201d\nAdd \u201cabc\u201d\nAdd \u201ccd\u201d\nGetMaxKey\nRem \u201cabc\u201d \nGetMinKey \n\nInitially, we have an empty string list/array i.e []\nAfter 1st query -:  [\u201cabc\u201d]\nAfter 2nd query -:  [\u201cabc\u201d, \u201caaa\u201d]\nAfter 3rd query -:  [\u201cabc\u201d, \u201caaa\u201d, \u201cpqrs\u201d]\nAfter 4th query -:  [\u201cabc\u201d, \u201caaa\u201d, \u201cpqrs\u201d]\nAfter 5th query -:   [\u201cabc\u201d, \u201caaa\u201d, \u201cpqrs\u201d, \u201cabc\u201d]\nAfter 6th query -:   [\u201cabc\u201d, \u201caaa\u201d, \u201cpqrs\u201d, \u201cabc\u201d, \u201ccd\u201d]\nThe answer to the 7th query clearly will be \u201cabc\u201d as it is the only string with the highest frequency 2.\nAfter 8th query -:   [\u201caaa\u201d, \u201cpqrs\u201d, \u201cabc\u201d, \u201ccd\u201d] (Note you can remove any occurrence of \u201cabc\u201d)\nThe answer to the 9th query will be \u201caaa\u201d as all the strings now have frequency 1 which is the smallest but the lexicographically smallest string among them is \u201caaa\u201d\n\nThus we should return list/array = [\u201cabc\u201d, \u201caaa\u201d].\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. then \u2018T\u2019 test cases follow.\n\nThe first line of each test case consists of a single integer \u2018N\u2019 representing the number of queries.\n\nThen next \u2018N\u2019 lines follow in each test case. Each of these \u2018N\u2019 lines consists of a query of one of the 4 types as described above in the problem statement.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print single space-separated outputs to the queries of type 3 and 4 in a single line.\n\nIf there are \u2018K\u2019 queries of type 3 and 4, then print a single line consisting of \u2018K\u2019 single space-separated strings representing answers of queries of type 3 and 4 in the same order they have been asked.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^4\n1 &lt;= |KEY| &lt;= 5\n\nWhere |KEY| is the length of string \u2018KEY\u2019.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\nAdd code\nGetMaxKey\nGetMinKey\n9\nAdd abc\nAdd aaa\nAdd pqrs\nRem pqrs\nAdd abc\nAdd cd\nGetMaxKey\nRem abc\nGetMinKey \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>code code\nabc aaa\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nThere will be only one string \u201ccode\u201d while processing the 2nd and the 3rd query.\n\nTest case 2:\nSee the problem statement for an explanation.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n8\nAdd code\nAdd ing\nAdd ninja\nAdd ing\nRem code\nGetMinKey\nAdd ninja\nGetMaxKey  \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>ninja ing\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2:</h5>\n\n<pre><code>Test case 1:\n&quot;ninja&quot; will be the string when GetMinKey is called and &quot;ing&quot; will be be the string when GetMaxKey is called.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -2,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a series of queries to manipulate a list of strings. Initially, the list is empty. You need to process 'N' queries of four types:\n\n1.  **Add 'KEY'**: Append one occurrence of the string 'KEY' to the list.\n2.  **Rem 'KEY'**: Remove any one occurrence of the string 'KEY' from the list. It's guaranteed that 'KEY' exists in the list when this query is made.\n3.  **GetMaxKey**: Find the lexicographically smallest string in the list that has the highest frequency. It's guaranteed that the list is not empty when this query is made.\n4.  **GetMinKey**: Find the lexicographically smallest string in the list that has the lowest frequency. It's guaranteed that the list is not empty when this query is made.\n\nYour task is to return a list of strings containing the results of all 'GetMaxKey' and 'GetMinKey' queries, in the order they appear in the input.",
                "constraints": [
                    "1 <= T <= 50 (Number of test cases)",
                    "1 <= N <= 10^4 (Number of queries)",
                    "1 <= |KEY| <= 5 (Length of string 'KEY')",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\nAdd code\nGetMaxKey\nGetMinKey",
                        "output": "code code",
                        "explanation": "Initially the list is empty. After 'Add code', the list contains ['code']. Both 'GetMaxKey' and 'GetMinKey' will return 'code' as it's the only element."
                    },
                    {
                        "input": "9\nAdd abc\nAdd aaa\nAdd pqrs\nRem pqrs\nAdd abc\nAdd cd\nGetMaxKey\nRem abc\nGetMinKey",
                        "output": "abc aaa",
                        "explanation": "The list evolves as follows:\n- Add abc: ['abc']\n- Add aaa: ['abc', 'aaa']\n- Add pqrs: ['abc', 'aaa', 'pqrs']\n- Rem pqrs: ['abc', 'aaa']\n- Add abc: ['abc', 'aaa', 'abc']\n- Add cd: ['abc', 'aaa', 'abc', 'cd']\n- GetMaxKey: 'abc' (highest frequency is 2, and 'abc' is lexicographically smaller than any other element with frequency 2).\n- Rem abc: ['aaa', 'abc', 'cd'] (one occurrence of 'abc' is removed)\n- GetMinKey: 'aaa' (all elements have frequency 1, and 'aaa' is lexicographically the smallest)."
                    },
                    {
                        "input": "8\nAdd code\nAdd ing\nAdd ninja\nAdd ing\nRem code\nGetMinKey\nAdd ninja\nGetMaxKey",
                        "output": "ninja ing",
                        "explanation": "The list evolves as follows:\n- Add code: ['code']\n- Add ing: ['code', 'ing']\n- Add ninja: ['code', 'ing', 'ninja']\n- Add ing: ['code', 'ing', 'ninja', 'ing']\n- Rem code: ['ing', 'ninja', 'ing']\n- GetMinKey: 'ninja' ('ninja' appears once, the other string 'ing' appear twice, lexicographically smallest between the elements that appears once is 'ninja').\n- Add ninja: ['ing', 'ninja', 'ing', 'ninja']\n- GetMaxKey: 'ing' ('ing' and 'ninja' have the same highest frequency 2. 'ing' is lexicographically smaller).\n"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use HashMap to track the frequency of each string in the list/array.</p>",
            "<p>Can you efficiently find strings having minimum or maximum frequency, by placing strings in different buckets based on frequency?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}