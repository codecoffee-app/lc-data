{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10849,
            "title": "Queries on Strings list",
            "titleSlug": "queries-on-strings-list_1266105",
            "content": "<h4 id=\"initially-you-have-an-empty-list-array-of-strings-you-need-to-process-n-queries-of-the-following-4-types\">Initially you have an empty list/array of strings.  You need to process \u2018N\u2019 queries of the following 4 types :</h4>\n\n<h4 id=\"1-add-key-you-have-to-append-1-occurrence-of-string-key-in-that-list-array\">1. Add \u2018KEY\u2019 :  You have to append 1 occurrence of string \u2018KEY\u2019 in that list/array.</h4>\n\n<h4 id=\"2-rem-key-you-have-to-erase-any-1-occurrence-of-string-key-from-that-list-array\">2. Rem \u2018KEY\u2019 : You have to erase any 1 occurrence of string \u2018KEY\u2019 from that list/array.</h4>\n\n<h4 id=\"3-getmaxkey-you-have-to-find-the-lexicographically-smallest-string-present-in-the-list-array-that-has-the-highest-frequency\">3.  GetMaxKey :  You have to find the lexicographically smallest string present in the list/array that has the highest frequency.</h4>\n\n<h4 id=\"4-getminkey-you-have-to-find-the-lexicographically-smallest-string-present-in-the-list-array-that-has-the-lowest-frequency\">4.  GetMinKey :  You have to find the lexicographically smallest string present in the list/array that has the lowest frequency.</h4>\n\n<h4 id=\"you-should-print-a-string-list-array-consisting-of-answers-to-all-the-queries-of-types-3-and-4-in-the-same-order-in-which-they-have-been-asked\">You should print a string list/array consisting of answers to all the queries of types 3 and 4 in the same order in which they have been asked.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. It is guaranteed that you can always process all these queries i.e there will be at least one occurrence of string \u2018KEY\u2019 in list/array when the query of type 2 is asked, and list/array is not empty when the query of type 3 or 4 is asked.\n2. It is guaranteed that there will be at least 1 query of type 3 or 4.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow up:</h5>\n\n<pre><code>1. Can you process all 4 types of queries in O(1) time? (Assume the length of string \u2018KEY\u2019 is constant)\n2. Can you process all 4 types of queries in O(1) time if you can find any string in the 3rd or 4th query that has the highest and lowest frequency respectively? (Assume the length of string \u2018KEY\u2019 is constant).\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Consider the following \u20189\u2019 queries.\nAdd \u201cabc\u201d\nAdd \u201caaa\u201d\nAdd \u201cpqrs\u201d\nRem \u201cpqrs\u201d\nAdd \u201cabc\u201d\nAdd \u201ccd\u201d\nGetMaxKey\nRem \u201cabc\u201d \nGetMinKey \n\nInitially, we have an empty string list/array i.e []\nAfter 1st query -:  [\u201cabc\u201d]\nAfter 2nd query -:  [\u201cabc\u201d, \u201caaa\u201d]\nAfter 3rd query -:  [\u201cabc\u201d, \u201caaa\u201d, \u201cpqrs\u201d]\nAfter 4th query -:  [\u201cabc\u201d, \u201caaa\u201d, \u201cpqrs\u201d]\nAfter 5th query -:   [\u201cabc\u201d, \u201caaa\u201d, \u201cpqrs\u201d, \u201cabc\u201d]\nAfter 6th query -:   [\u201cabc\u201d, \u201caaa\u201d, \u201cpqrs\u201d, \u201cabc\u201d, \u201ccd\u201d]\nThe answer to the 7th query clearly will be \u201cabc\u201d as it is the only string with the highest frequency 2.\nAfter 8th query -:   [\u201caaa\u201d, \u201cpqrs\u201d, \u201cabc\u201d, \u201ccd\u201d] (Note you can remove any occurrence of \u201cabc\u201d)\nThe answer to the 9th query will be \u201caaa\u201d as all the strings now have frequency 1 which is the smallest but the lexicographically smallest string among them is \u201caaa\u201d\n\nThus we should return list/array = [\u201cabc\u201d, \u201caaa\u201d].\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. then \u2018T\u2019 test cases follow.\n\nThe first line of each test case consists of a single integer \u2018N\u2019 representing the number of queries.\n\nThen next \u2018N\u2019 lines follow in each test case. Each of these \u2018N\u2019 lines consists of a query of one of the 4 types as described above in the problem statement.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print single space-separated outputs to the queries of type 3 and 4 in a single line.\n\nIf there are \u2018K\u2019 queries of type 3 and 4, then print a single line consisting of \u2018K\u2019 single space-separated strings representing answers of queries of type 3 and 4 in the same order they have been asked.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^4\n1 &lt;= |KEY| &lt;= 5\n\nWhere |KEY| is the length of string \u2018KEY\u2019.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\nAdd code\nGetMaxKey\nGetMinKey\n9\nAdd abc\nAdd aaa\nAdd pqrs\nRem pqrs\nAdd abc\nAdd cd\nGetMaxKey\nRem abc\nGetMinKey \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>code code\nabc aaa\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nThere will be only one string \u201ccode\u201d while processing the 2nd and the 3rd query.\n\nTest case 2:\nSee the problem statement for an explanation.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n8\nAdd code\nAdd ing\nAdd ninja\nAdd ing\nRem code\nGetMinKey\nAdd ninja\nGetMaxKey  \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>ninja ing\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2:</h5>\n\n<pre><code>Test case 1:\n&quot;ninja&quot; will be the string when GetMinKey is called and &quot;ing&quot; will be be the string when GetMaxKey is called.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a list of string-based queries to process on a dynamically changing list of strings. The initial list is empty. The queries are of four types:\n\n1.  `Add KEY`: Append one instance of the string `KEY` to the list.\n2.  `Rem KEY`: Remove a single instance of the string `KEY` from the list. It is guaranteed that `KEY` exists at least once when this query is called.\n3.  `GetMaxKey`: Find the lexicographically smallest string in the list that has the highest frequency.  The list is guaranteed to be non-empty when this query is called.\n4.  `GetMinKey`: Find the lexicographically smallest string in the list that has the lowest frequency. The list is guaranteed to be non-empty when this query is called.\n\nYour task is to implement the `stringQueries` function that takes a vector of strings representing the queries and returns a vector of strings containing the results of all `GetMaxKey` and `GetMinKey` queries, in the order they appear in the input.",
                "constraints": [
                    "1 <= T <= 50 (Number of test cases)",
                    "1 <= N <= 10^4 (Number of queries)",
                    "1 <= |KEY| <= 5 (Length of string KEY)"
                ],
                "testcases": [
                    {
                        "input": "queries = [\"Add code\", \"GetMaxKey\", \"GetMinKey\"]",
                        "output": "[\"code\", \"code\"]",
                        "explanation": "Initially, the list is empty. After \"Add code\", the list contains [\"code\"].  'GetMaxKey' returns \"code\", and 'GetMinKey' returns \"code\"."
                    },
                    {
                        "input": "queries = [\"Add abc\", \"Add aaa\", \"Add pqrs\", \"Rem pqrs\", \"Add abc\", \"Add cd\", \"GetMaxKey\", \"Rem abc\", \"GetMinKey\"]",
                        "output": "[\"abc\", \"aaa\"]",
                        "explanation": "The sequence of list states is:\n[]\n[\"abc\"]\n[\"abc\", \"aaa\"]\n[\"abc\", \"aaa\", \"pqrs\"]\n[\"abc\", \"aaa\", \"pqrs\"]\n[\"abc\", \"aaa\", \"pqrs\", \"abc\"]\n[\"abc\", \"aaa\", \"pqrs\", \"abc\", \"cd\"]\nAfter 'GetMaxKey', \"abc\" appears twice, which is the highest frequency.  The result is \"abc\".\n[\"aaa\", \"pqrs\", \"abc\", \"cd\"]\nAfter 'GetMinKey', all strings appear once.  Lexicographically smallest is \"aaa\". The result is \"aaa\"."
                    },
                    {
                        "input": "queries = [\"Add code\", \"Add ing\", \"Add ninja\", \"Add ing\", \"Rem code\", \"GetMinKey\", \"Add ninja\", \"GetMaxKey\"]",
                        "output": "[\"ninja\", \"ing\"]",
                        "explanation": "The sequence of list states is:\n[]\n[\"code\"]\n[\"code\", \"ing\"]\n[\"code\", \"ing\", \"ninja\"]\n[\"code\", \"ing\", \"ninja\", \"ing\"]\n[\"ing\", \"ninja\", \"ing\"]\nAfter 'GetMinKey', \"ninja\" appears once, \"ing\" twice. Result is \"ninja\".\n[\"ing\", \"ninja\", \"ing\", \"ninja\"]\nAfter 'GetMaxKey', \"ing\" and \"ninja\" both appear twice. Result is \"ing\" as 'ing' < 'ninja'."
                    },
                    {
                        "input": "queries = [\"Add a\", \"Add a\", \"Add b\", \"GetMaxKey\", \"Rem a\", \"Rem a\", \"GetMinKey\"]",
                        "output": "[\"a\", \"b\"]",
                        "explanation": "[\"a\", \"a\", \"b\"]\nMax frequency is 2. Result is \"a\".\n[\"b\"]\nMin Frequency is 1. Result is \"b\"."
                    },
                    {
                        "input": "queries = [\"Add abc\", \"Add def\", \"Add abc\", \"Add ghi\", \"Add def\", \"GetMaxKey\", \"Rem def\", \"GetMinKey\"]",
                        "output": "[\"abc\", \"def\"]",
                        "explanation": "After operations the array is [\"abc\", \"abc\", \"def\", \"ghi\", \"def\"].\nMaxKey is abc (appears twice, def also appears twice but abc is lexicographically smaller than def)\nAfter removing def the array is [\"abc\", \"abc\", \"ghi\", \"def\"].\nMinKey is def (appears once, ghi appears once too. def is lexicographically smaller).\n"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use HashMap to track the frequency of each string in the list/array.</p>",
            "<p>Can you efficiently find strings having minimum or maximum frequency, by placing strings in different buckets based on frequency?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}