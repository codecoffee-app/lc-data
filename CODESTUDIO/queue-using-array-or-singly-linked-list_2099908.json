{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14251,
            "title": "Queue using Array or Singly Linked List.",
            "titleSlug": "queue-using-array-or-singly-linked-list_2099908",
            "content": "<h4 id=\"implement-a-queue-data-structure-specifically-to-store-integer-data-using-a-singly-linked-list-or-an-array\">Implement a Queue Data Structure specifically to store integer data using a Singly Linked List or an array.</h4>\n\n<h4 id=\"you-need-to-implement-the-following-public-functions\">You need to implement the following public functions :</h4>\n\n<pre><code>1. Constructor: It initializes the data members as required.\n\n2. enqueue(data): This function should take one argument of type integer. It enqueues the element into the queue.\n\n3. dequeue(): It dequeues/removes the element from the front of the queue and in turn, returns the element being dequeued or removed. In case the queue is empty, it returns -1.\n\n4. front(): It returns the element being kept at the front of the queue. In case the queue is empty, it returns -1.\n\n5. isEmpty(): It returns a boolean value indicating whether the queue is empty or not.\n</code></pre>\n\n<h5 id=\"operations-performed-on-the-queue\">Operations Performed on the Queue :</h5>\n\n<pre><code>Query-1(Denoted by an integer 1): Enqueues integer data to the queue.\n\nQuery-2(Denoted by an integer 2): Dequeues the data kept at the front of the queue and returns it to the caller, return -1 if no element is present in the queue.\n\nQuery-3(Denoted by an integer 3): Fetches and returns the data being kept at the front of the queue but doesn&#39;t remove it, unlike the dequeue function, return -1 if no element is present in the queue.\n\nQuery-4(Denoted by an integer 4): Returns a boolean value denoting whether the queue is empty or not.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer \u2018t\u2019 denoting the number of test cases.\n\nFor each test case, the first line contains an integer &#39;q&#39; which denotes the number of queries to be run against each operation on the queue. \n\nEvery &#39;q&#39; lines represent an operation that needs to be performed.\n\nFor the enQueue operation, the input line will contain two integers separated by a single space, representing the type of the operation in the integer and the integer data being enqueued into the queue.\n\nFor the rest of the operations on the queue, the input line will contain only one integer value, representing the query being performed on the queue.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For Query-1, print the data being enqueued in the queue.\nFor Query-2, print the data being dequeued from the queue.\nFor Query-3, print the data kept on the front of the queue.\nFor Query-4, print &#39;true&#39; or &#39;false&#39;(without quotes).\n\nOutput for every query will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the functions.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= t &lt;= 5\n1 &lt;= q &lt;= 5000\n1 &lt;= x &lt;= 4\n1 &lt;= data &lt;= 2^31 - 1\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n7\n1 17\n1 23\n1 11\n2\n2\n2\n2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>17\n23\n11\n-1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1 :</h5>\n\n<pre><code>The first three queries are of enQueue, so we will push 17, 23, and 11 into the queue.\n\nThe next four queries are of deQueue, so we will starting removing elements from the queue, so the first element will be 17, then 23, and then 11. And after the third dequeue query, the queue is now empty so for the fourth query, we will return -1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n3\n2\n1 10\n3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>-1 \n10\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 207,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a Queue data structure to store integer data. You can use a Singly Linked List or an array as the underlying data structure. Implement the following public functions:\n\n1.  **Constructor:** Initializes the queue.\n2.  **enqueue(data):** Adds an integer 'data' to the rear of the queue.\n3.  **dequeue():** Removes and returns the integer at the front of the queue. Returns -1 if the queue is empty.\n4.  **front():** Returns the integer at the front of the queue without removing it. Returns -1 if the queue is empty.\n5.  **isEmpty():** Returns `true` if the queue is empty, `false` otherwise.\n\n\n**Operations Performed:**\n\n1.  **1 data:** Enqueue 'data' into the queue.\n2.  **2:** Dequeue an element from the queue and return it. Return -1 if the queue is empty.\n3.  **3:** Return the front element of the queue without removing it. Return -1 if the queue is empty.\n4.  **4:** Return whether the queue is empty (`true` or `false`).",
                "constraints": [
                    "1 <= t <= 5",
                    "1 <= q <= 5000",
                    "1 <= x <= 4",
                    "1 <= data <= 2^31 - 1",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n7\n1 17\n1 23\n1 11\n2\n2\n2\n2",
                        "output": "17\n23\n11\n-1",
                        "explanation": "First, 17, 23, and 11 are enqueued.  Then, the dequeue operations remove 17, 23, and 11, respectively. The final dequeue operation returns -1 because the queue is empty."
                    },
                    {
                        "input": "1\n3\n2\n1 10\n3",
                        "output": "-1\n10",
                        "explanation": "The first operation attempts to dequeue from an empty queue, returning -1. Then, 10 is enqueued.  Finally, the front operation returns 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Create a linked list and implement these functions.</p>",
            "<p>Make an array of size <strong>q</strong> and implement these functions.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(q)\r\n    Space Complexity : O(q)\r\n\r\n    Where q is the number of queries.\r\n*/\r\n\r\nclass Queue {\r\npublic:\r\n    int qfront, rear, size, queueSize;\r\n    int q[100010];\r\n    Queue() {\r\n\r\n        // Intialise the queue with 0 elements.\r\n        rear = 0;\r\n        qfront = 0;\r\n        size = 0;\r\n        queueSize = 100010;\r\n\r\n    }\r\n\r\n    // Function to check if the queue is empty.\r\n    bool isEmpty() {\r\n        if (qfront == rear) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    void enqueue(int data) {\r\n\r\n        // Push the current element in the queue.\r\n        q[rear] = data;\r\n        rear = rear + 1;\r\n\r\n        // Increase the value of size.\r\n        size++;\r\n    }\r\n\r\n    int dequeue() {\r\n\r\n        // Check if the queue is empty.\r\n        if (isEmpty()) {\r\n            return -1;\r\n        }\r\n\r\n        int ans = q[qfront];\r\n        qfront++;\r\n        size--;\r\n        if (qfront == rear) {\r\n            qfront = 0;\r\n            rear = 0;\r\n        }\r\n        return ans;\r\n    }\r\n\r\n    int front() {\r\n\r\n        // Check if the queue is empty.\r\n        if (isEmpty()) {\r\n            return -1;\r\n        }\r\n\r\n        // Return the element at front.\r\n        return q[qfront];\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(q)\r\n    Space Complexity : O(q)\r\n\r\n    Where q is the number of queries.\r\n*/\r\n\r\npublic class Queue {\r\n    int qfront, rear, size, queueSize;\r\n    int[] q;\r\n\r\n    Queue() {\r\n\r\n        // Intialise the queue with 0 elements.\r\n        rear = 0;\r\n        qfront = 0;\r\n        size = 0;\r\n        queueSize = 100010;\r\n        q = new int[100010];\r\n    }\r\n\r\n    // Function to check if the queue is empty.\r\n    boolean isEmpty() {\r\n        if (qfront == rear) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    void enqueue(int data) {\r\n\r\n        // Push the current element in the queue.\r\n        q[rear] = data;\r\n        rear = rear + 1;\r\n\r\n        // Increase the value of size.\r\n        size++;\r\n    }\r\n\r\n    int dequeue() {\r\n\r\n        // Check if the queue is empty.\r\n        if (isEmpty()) {\r\n            return -1;\r\n        }\r\n\r\n        int ans = q[qfront];\r\n        qfront++;\r\n        size--;\r\n        if (qfront == rear) {\r\n            qfront = 0;\r\n            rear = 0;\r\n        }\r\n        return ans;\r\n    }\r\n\r\n    int front() {\r\n\r\n        // Check if the queue is empty.\r\n        if (isEmpty()) {\r\n            return -1;\r\n        }\r\n\r\n        // Return the element at front.\r\n        return q[qfront];\r\n    }\r\n\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity : O(q)\n    Space Complexity : O(q)\n\n    Where q is the number of queries.\n'''\n\nclass Queue:\n    \n    def __init__(self):\n        \n        # Intialise the queue with 0 elements.\n        self.rear = 0\n        self.qfront = 0\n        self.size = 0\n        self.queueSize = 100010\n        self.q = [0 for i in range(100010)]\n        \n    # Function to check if the queue is empty.\n    def isEmpty(self):\n        \n        if self.qfront == self.rear:\n            return True\n        \n        return False\n    \n    def enqueue(self, data):\n        \n        # Push the current element in the queue.\n        self.q[self.rear] = data\n        self.rear = self.rear + 1\n        \n        # Increase the value of size.\n        self.size += 1\n        \n    def dequeue(self):\n        \n        # Check if the queue is empty.\n        if self.isEmpty():\n            return -1\n        \n        ans = self.q[self.qfront]\n        self.qfront += 1\n        self.size -= 1\n        \n        if (self.qfront == self.rear):\n            self.qfront = 0\n            self.rear = 0\n            \n        return ans\n    \n    def front(self):\n        \n        # Check if the queue is empty.\n        if (self.isEmpty()):\n            return -1\n        \n        # Return the element at front.\n        return self.q[self.qfront]\n        ",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}