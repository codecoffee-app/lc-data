{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8012,
            "title": "Queue Using Stack",
            "titleSlug": "queue-using-stack_799482",
            "content": "<h4 id=\"implement-a-queue-data-structure-which-follows-fifo-first-in-first-out-property-using-only-the-instances-of-the-stack-data-structure\">Implement a queue data structure which follows FIFO(First In First Out) property, using only the instances of the stack data structure.</h4>\n\n<p><br></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. To implement means you need to complete some predefined functions, which are supported by a normal queue such that it can efficiently handle the given input queries which are defined below.\n\n\n2. The implemented queue must support the following operations of a normal queue: \n\na. enQueue(data) : This function should take one argument of type integer and place the integer to the back of the queue.\n\nb. deQueue(): This function should remove an integer from the front of the queue and also return that integer. If the queue is empty, it should return -1.\n\nc. peek(): This function returns the element present in the front of the queue. If the queue is empty, it should return -1.\n\nd. isEmpty(): This function should return true if the queue is empty and false otherwise.\n\n\n3. You will be given q queries of 4 types:\n\na. 1 val - For this type of query, you need to insert the integer val to the back of the queue.\n\nb. 2 - For this type of query, you need to remove the element from the front of the queue, and also return it.\n\nc. 3 - For this type of query, you need to return the element present at the front of the queue(No need to remove it from the queue).\n\nd. 4 - For this type of query, you need to return true if the queue is empty and false otherwise.\n\n\n4. For every query of type:\n\na. 1, you do not need to return anything.\n\nb. 2, return the integer being deQueued from the queue.\n\nc. 3, return the integer present in the front of the queue.\n\nd. 4, return \u201ctrue\u201d if the queue is empty, \u201cfalse\u201d otherwise.\n</code></pre>\n\n<h5 id=\"example\">Example</h5>\n\n<pre><code>Operations: \n1 5\n1 10\n2\n3\n4\n\nEnqueue operation 1 5: We insert 5 at the back of the queue.\nQueue: [5]\n\nEnqueue operation 1 10: We insert 10 at the back of the queue.\nQueue: [5, 10]\n\nDequeue operation 2: We remove the element from the front of the queue, which is 5, and print it.\nOutput: 5\nQueue: [10]\n\nPeek operation 3: We return the element present at the front of the queue, which is 10, without removing it.\nOutput: 10\nQueue: [10]\n\nIsEmpty operation 4: We check if the queue is empty.\nOutput: False\nQueue: [10]\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;Q\u2019, which denotes the number of queries that will be run against the implemented queue.\n\nThen &#39;Q&#39; lines follow. The i-th line contains the i-th query in the format as in the problem statement.\n\nFor the enQueue operation, the input line will contain two integers separated by a single space, representing the type of the operation in integer and the integer data being pushed into the queue.\n\nFor the rest of the queries, the input line will contain only one integer value, representing the query being performed.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For Query-1, nothing is printed.\n\nFor Query-2, the integer returned from deQueue() is printed.\n\nFor Query-3, the integer returned from peek() is printed.\n\nFor Query-4, if isEmpty() returns true then \u201ctrue\u201d is printed, \u201cfalse\u201d otherwise.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. You are not required to print the output, It has already been taken care of. Just implement the given function.\n\n2. You can only use the instances of the stack data structure i.e you can use the standard stack operations such as push to the top, pop the element from the top, etc.\n\n3. You can also use the inbuilt stack data structure in some languages such as  C++, Java.\n\n4. You can assume that the maximum capacity of the queue may be infinite.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>7\n1 1\n1 2\n1 3\n2\n2\n2\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 \n2 \n3\n-1\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-output-1\">Explanation of the Sample Output 1:</h5>\n\n<pre><code>Here we have seven queries in total.\n\nQuery 1: Insert 1 to the back of the queue. The queue: 1 \nQuery 2: Insert 2 to the back of the queue. The queue: 1 2\nQuery 3: Insert 3 to the back of the queue. The queue: 1 2 3\nQuery 4: Remove element from the front:  The queue: 2 3\nQuery 5: Remove the element from the front:  The queue: 2 \nQuery 6: Remove the element from the front:  The queue : \nQuery 7: As the queue is empty, returned -1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 2\n4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>false\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-output-2\">Explanation of the Sample Output 2:</h5>\n\n<pre><code>Here we have two queries in total.\n\nQuery 1: Insert 2 to the back of the queue. The queue: 2 \nQuery 2: IsEmpty() function returns &#39;false&#39; as currently the queue is not empty.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= Q &lt;= 1000\n1 &lt;= type &lt;= 4\n1&lt;= data &lt;= 10^9 \n\nWhere &#39;type&#39; represents the type of query and &#39;data&#39; represents the integer to be enQueued. \n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 57,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a queue data structure using only instances of the stack data structure, adhering to the FIFO (First In First Out) principle.\n\nThe implemented queue must support the following operations:\n\n*   `enQueue(data)`: Adds an integer `data` to the back of the queue.\n*   `deQueue()`: Removes and returns the integer from the front of the queue. Returns -1 if the queue is empty.\n*   `peek()`: Returns the element at the front of the queue without removing it. Returns -1 if the queue is empty.\n*   `isEmpty()`: Returns `true` if the queue is empty, `false` otherwise.\n\nYou will be given a series of queries to perform on your queue implementation.\n\nQuery types:\n\n*   `1 val`: Enqueue the integer `val`.\n*   `2`: Dequeue an element and return it.\n*   `3`: Peek at the front element and return it.\n*   `4`: Check if the queue is empty and return \"true\" or \"false\".",
                "constraints": [
                    "1 <= Q <= 1000 (Q is the number of queries)",
                    "1 <= type <= 4 (type represents the type of query)",
                    "1 <= data <= 10^9 (data represents the integer to be enQueued)"
                ],
                "testcases": [
                    {
                        "input": "7\n1 1\n1 2\n1 3\n2\n2\n2\n3",
                        "output": "1\n2\n3\n-1",
                        "explanation": "Initially, the queue is empty. \n- Queries 1, 2, and 3 enqueue 1, 2, and 3 respectively. Queue: [1, 2, 3]\n- The first dequeue operation returns 1. Queue: [2, 3]\n- The second dequeue operation returns 2. Queue: [3]\n- The third dequeue operation returns 3. Queue: []\n- The peek operation returns -1 because the queue is empty."
                    },
                    {
                        "input": "2\n1 2\n4",
                        "output": "false",
                        "explanation": "Initially, the queue is empty.\n- The first query enqueues 2. Queue: [2]\n- The isEmpty operation returns 'false' because the queue contains 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use two stacks to ensure FIFO while inserting an element in the queue.</p>",
            "<p>Use two stacks to ensure FIFO while removing an element in the queue.</p>",
            "<p>Use only one stack?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}