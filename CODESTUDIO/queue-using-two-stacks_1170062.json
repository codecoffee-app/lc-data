{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10142,
            "title": "Queue Using Two Stacks",
            "titleSlug": "queue-using-two-stacks_1170062",
            "content": "<h4 id=\"you-will-be-given-q-queries-you-need-to-implement-a-queue-using-two-stacks-according-to-those-queries-each-query-will-belong-to-one-of-these-three-types\">You will be given \u2018Q\u2019 queries. You need to implement a queue using two stacks according to those queries. Each query will belong to one of these three types:</h4>\n\n<pre><code>1 \u2018X\u2019: Enqueue element \u2018X\u2019  into the end of the nth queue. Returns true after the element is enqueued.\n\n2: Dequeue the element at the front of the nth queue. Returns -1 if the queue is empty, otherwise, returns the dequeued element.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Enqueue means adding an element to the end of the queue, while Dequeue means removing the element from the front of the queue.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018Q\u2019 denoting the number of queries. \n\nThe next \u2018Q\u2019 lines specify the type of operation/query to be performed on the data structure.\n\nEach query contains an integer \u2018P\u2019 denoting the type of query.\n\nFor query of type 1, the integer \u2018P\u2019 is equal to 1 and it is followed by one integer \u2018X\u2019 denoting the element on which operation is to be performed.\n\nFor query of type 2, the integer \u2018P\u2019 is equal to 2 which dequeues the element.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each query, return the output returned after performing the corresponding operation on the data structure. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given functions.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= Q &lt;= 10^5 \n1 &lt;= P &lt;= 2\n1 &lt;= X &lt;= 10^5\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>7\n1 2 \n1 3 \n2 \n1 4 \n1 6 \n1 7 \n2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True \nTrue\n2\nTrue\nTrue\nTrue\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h5>\n\n<pre><code>For this input, we have the number of queries, &#39;Q&#39; = 7.\n\nOperations performed on the queue are as follows:\n\npush(2): Push element \u20182\u2019 into the queue. This returns true.\npush(3): Push element \u20183\u2019 into the queue. This returns true.\npop(): Pop the top element from the queue. This returns 2.\npush(4): Push element \u20184\u2019 into the queue. This returns true.\npush(6): Push element \u20186\u2019 into the queue. This returns true.\npush(7): Push element \u20187\u2019 into the queue. This returns true.\npop(): Pop the top element from the queue. This returns 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>7\n1 11 \n1 51 \n1 26 \n2 \n1 6\n2\n2 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>True\nTrue\nTrue\n11\nTrue\n51\n26\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h5>\n\n<pre><code>For this input, we have the number of queries, Q = 7.\n\nOperations performed on the queue are as follows:\n\npush(11): Push element \u201811\u2019 into the queue. This returns true.\npush(51): Push element \u201851\u2019 into the queue. This returns true.\npush(26): Push element \u201826\u2019 into the queue. This returns true.\npop(): Pop the top element from the queue. This returns 11.\npush(6): Push element \u20186\u2019 into the queue. This returns true.\npop(): Pop the top element from the queue. This returns 51.\npop(): Pop the top element from the queue. This returns 26.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 15,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a queue using two stacks. You will be given a series of queries to perform on the queue. The queries are of two types:\n\n1. **Enqueue (1 X):** Add the element 'X' to the end of the queue. Return `True` after the element is enqueued.\n2. **Dequeue (2):** Remove and return the element at the front of the queue. If the queue is empty, return `-1`.",
                "constraints": [
                    "1 <= Q <= 10^5",
                    "1 <= P <= 2",
                    "1 <= X <= 10^5",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "7\n1 2\n1 3\n2\n1 4\n1 6\n1 7\n2",
                        "output": "True\nTrue\n2\nTrue\nTrue\nTrue\n3",
                        "explanation": "The input consists of 7 queries. First, 2 and 3 are enqueued. Then, the front element 2 is dequeued. Next, 4, 6, and 7 are enqueued. Finally, the front element 3 is dequeued."
                    },
                    {
                        "input": "7\n1 11\n1 51\n1 26\n2\n1 6\n2\n2",
                        "output": "True\nTrue\nTrue\n11\nTrue\n51\n26",
                        "explanation": "The input consists of 7 queries. First, 11, 51, and 26 are enqueued. Then, the front element 11 is dequeued. Next, 6 is enqueued.  Then, 51 is dequeued, followed by 26."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of making the enqueue operation costly?</p>",
            "<p>Can you think of making the dequeue operation costly?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}