{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9363,
            "title": "Quick Sort",
            "titleSlug": "quick-sort_983625",
            "content": "<h4 id=\"you-are-given-an-array-of-integers-you-need-to-sort-the-array-in-ascending-order-using-quick-sort\">You are given an array of integers. You need to sort the array in ascending order using quick sort.</h4>\n\n<h4 id=\"quick-sort-is-a-divide-and-conquer-algorithm-in-which-we-choose-a-pivot-point-and-partition-the-array-into-two-parts-i-e-left-and-right-the-left-part-contains-the-numbers-smaller-than-the-pivot-element-and-the-right-part-contains-the-numbers-larger-than-the-pivot-element-then-we-recursively-sort-the-left-and-right-parts-of-the-array\">Quick sort is a divide and conquer algorithm in which we choose a pivot point and partition the array into two parts i.e, left and right. The left part contains the numbers smaller than the pivot element and the right part contains the numbers larger than the pivot element. Then we recursively sort the left and right parts of the array.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Let the array = [ 4, 2, 1, 5, 3 ]\nLet pivot to be the rightmost number.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot_2020-12-21-untitled-diagram-drawio-diagrams-net-4-6773.png\" alt=\"example\"></p>\n\n<h4 id=\"after-the-1st-level-partitioning-the-array-will-be-2-1-3-4-5-as-3-was-the-pivot-after-2nd-level-partitioning-the-array-will-be-1-2-3-4-5-as-1-was-the-pivot-for-the-left-part-and-5-was-the-pivot-for-the-right-part-now-our-array-is-sorted-and-there-is-no-need-to-divide-it-again\">After the 1st level partitioning the array will be { 2, 1, 3, 4, 5 } as 3 was the pivot. After 2nd level partitioning the array will be { 1, 2, 3, 4, 5 } as 1 was the pivot for the left part and 5 was the pivot for the right part. Now our array is sorted and there is no need to divide it again.</h4>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; denoting the number of queries or test cases. \n\nThe first line of each input consists of an integer &#39;N&#39; denoting the size of the array.\n\nThe second line of each input consists of &#39;N&#39; space-separated integers denoting the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print a single line containing space-separated integers denoting the elements of the array after sorting.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up</h5>\n\n<pre><code>Can you solve this in the worst case NlogN complexity?\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10 ^ 3\n-10 ^ 9 &lt;= ARR[i] &lt;= 10 ^ 9\n\nWhere &#39;T&#39; is the number of test cases, &#39;N&#39; is the length of the array &#39;ARR&#39;, and &#39;ARR[i]&#39; is the array element at index i.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\n4 2 5 1 3\n4     \n6 2 4 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 3 4 5\n1 2 4 6\n</code></pre>\n\n<h5 id=\"explanation-of-input-1\">Explanation of Input 1:</h5>\n\n<pre><code>Test case 1:\nGiven array =  [4, 2, 5, 1, 3]\nSorted array = [1, 2, 3, 4, 5]\n\nTest case 2:\nGiven array =  [6, 2, 4, 1]\nSorted array = [1, 2, 4, 6]\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 \n5 3 2 6 4\n4\n1 2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2 3 4 5 6\n1 2 3 4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 174,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement the quick sort algorithm to sort an array of integers in ascending order. You are given a vector of integers, and your task is to sort this vector using the quick sort algorithm.  The function should return the sorted vector.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 10^3 (Size of the array)",
                    "-10^9 <= ARR[i] <= 10^9 (Range of array elements)"
                ],
                "testcases": [
                    {
                        "input": "n = 5, nums = [4, 2, 5, 1, 3]",
                        "output": "1 2 3 4 5",
                        "explanation": "The initial array [4, 2, 5, 1, 3] is sorted to produce the array [1, 2, 3, 4, 5]."
                    },
                    {
                        "input": "n = 4, nums = [6, 2, 4, 1]",
                        "output": "1 2 4 6",
                        "explanation": "The initial array [6, 2, 4, 1] is sorted to produce the array [1, 2, 4, 6]."
                    },
                    {
                        "input": "n = 5, nums = [5, 3, 2, 6, 4]",
                        "output": "2 3 4 5 6",
                        "explanation": "The initial array [5, 3, 2, 6, 4] is sorted to produce the array [2, 3, 4, 5, 6]."
                    },
                    {
                        "input": "n = 4, nums = [1, 2, 3, 4]",
                        "output": "1 2 3 4",
                        "explanation": "The initial array [1, 2, 3, 4] is already sorted and remains unchanged."
                    },
                    {
                        "input": "n = 1, nums = [7]",
                        "output": "7",
                        "explanation": "A single-element array [7] is already sorted."
                    },
                    {
                        "input": "n = 6, nums = [7, 6, 5, 4, 3, 2]",
                        "output": "2 3 4 5 6 7",
                        "explanation": "The initial array [7, 6, 5, 4, 3, 2] (in reverse order) is sorted to produce the array [2, 3, 4, 5, 6, 7]."
                    },
                    {
                        "input": "n = 3, nums = [-1, 0, 1]",
                        "output": "-1 0 1",
                        "explanation": "The initial array [-1, 0, 1] is already sorted."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The first approach will be picking edge elements as pivot.</p>",
            "<p>The second approach will be picking a random element as pivot.</p>",
            "<p>The third approach will be picking median as pivot and applying 3 - way quick sort.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N * log N)\r\n    Space Complexity: O(log N)\r\n\r\n    Where 'N' is the size of the array.\r\n*/\r\n\r\nint median(vector<int> &arr, int l, int r) {\r\n    \r\n    // Base condition.\r\n    if(l + 1 >= r)\r\n    {\r\n        return arr[l];\r\n    }\r\n\r\n    vector<int> meds;\r\n\r\n    for(int i = l; i + 2 <= r; i += 3)\r\n    {\r\n        int m = max(arr[i], arr[i + 1]);\r\n\r\n        if(m > arr[i + 2])\r\n        {\r\n            m = max(arr[i + 2], min(arr[i], arr[i + 1]));\r\n        }\r\n\r\n        meds.push_back(m);\r\n    }\r\n\r\n    // Recursive call.\r\n    return median(meds, 0, meds.size() - 1);\r\n}\r\n\r\nvoid quickSortHelper(vector<int> &arr, int l, int r)\r\n{\r\n    if(l >= r)\r\n    {\r\n        return;\r\n    }\r\n\r\n    int mid = (r + l) / 2;\r\n\r\n    // Get median.\r\n    int pivot = median(arr, l, r);\r\n\r\n    int i = l, j = l, k = r;\r\n\r\n    while(i <= k)\r\n    {\r\n        if(arr[i] < pivot)\r\n        {\r\n            swap(arr[i], arr[j]);\r\n            j++;\r\n            i++;\r\n        }\r\n        else if(arr[i] > pivot)\r\n        {\r\n            swap(arr[k], arr[i]);\r\n            k--;\r\n        }\r\n        else\r\n        {\r\n            i++;\r\n        }\r\n    }\r\n\r\n    // Call quickSortHelper on both halves.\r\n    quickSortHelper(arr, l, j - 1);\r\n\r\n    quickSortHelper(arr, k + 1, r);\r\n}\r\n\r\nvector<int> quickSort(vector<int> arr)\r\n{\r\n    quickSortHelper(arr, 0, arr.size() - 1);\r\n\r\n    return arr;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N * log N)\r\n    Space Complexity: O(log N)\r\n\r\n    Where 'N' is the size of the array.\r\n*/\r\n\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n\r\n    public static List<Integer> quickSort(List<Integer> arr){\r\n\r\n        quickSortHelper(arr, 0, arr.size() - 1);\r\n\r\n        return arr;\r\n    }\r\n\r\n    public static void quickSortHelper(List<Integer> arr, int l, int r) {\r\n\t\t// Base case.\r\n        if(l >= r) {\r\n            return;\r\n        }\r\n\r\n        int mid = (r + l) / 2;\r\n\r\n\t\t// Find median.\r\n        int pivot = median(arr, l, r);\r\n\r\n        int i = l, j = l, k = r;\r\n\r\n        while(i <= k) {\r\n            if(arr.get(i) < pivot) {\r\n                swap(arr, i, j);\r\n                j++;\r\n                i++;\r\n            }\r\n            else if(arr.get(i) > pivot) {\r\n                swap(arr, k, i);\r\n                k--;\r\n            }\r\n            else {\r\n                i++;\r\n            }\r\n        }\r\n\r\n\t\t// Call quickSortHelper on both halves.\r\n        quickSortHelper(arr, l, j - 1);\r\n\r\n        quickSortHelper(arr, k + 1, r);\r\n    }\r\n\r\n    public static void swap(List<Integer> arr, int i, int j){\r\n        int temp = arr.get(i);\r\n        arr.set(i, arr.get(j));\r\n        arr.set(j, temp);\r\n    }\r\n\r\n    public static int median(List<Integer> arr, int l, int r) {\r\n        if(l + 1 >= r) {\r\n            return arr.get(l);\r\n        }\r\n\r\n        ArrayList<Integer> meds = new ArrayList();\r\n\r\n        for(int i = l; i + 2 <= r; i += 3) {\r\n            int m = Math.max(arr.get(i), arr.get(i + 1));\r\n\r\n            if(m > arr.get(i + 2)) {\r\n                m = Math.max(arr.get(i + 2), Math.min(arr.get(i), arr.get(i + 1)));\r\n            }\r\n\r\n            meds.add(m);\r\n        }\r\n\r\n        return median(meds, 0, meds.size() - 1);\r\n    }\r\n\r\n}\r\n\r\n\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N * log N)\r\n    Space Complexity: O(log N)\r\n\r\n    Where 'N' is the size of the array.\r\n'''\r\n\r\ndef median(arr, l, r):\r\n    # Base condition.\r\n    if l + 1 >= r:\r\n        return arr[l]\r\n    \r\n    meds = []\r\n    i = l\r\n    \r\n    while i + 2 <= r:\r\n        m = max(arr[i], arr[i + 1])\r\n        \r\n        if m > arr[i + 2]:\r\n            m = max(arr[i + 2], min(arr[i], arr[i + 1]))\r\n            \r\n        meds.append(m)\r\n        i += 3\r\n        \r\n    return median(meds, 0, len(meds) - 1)\r\n\r\ndef quickSortHelper(arr, l, r):\r\n    # Base case.\r\n    if l >= r:\r\n        return arr\r\n    \r\n    mid = (r + l) // 2\r\n    \r\n    pivot = median(arr, l, r)\r\n    i = l\r\n    j = l\r\n    k = r\r\n    \r\n    # Split the array.\r\n    while i <= k:\r\n        \r\n        if arr[i] < pivot:\r\n            arr[i], arr[j] = arr[j], arr[i]\r\n            j += 1\r\n            i += 1\r\n        elif arr[i] > pivot:\r\n            arr[i], arr[k] = arr[k], arr[i]\r\n            k -= 1\r\n        else:\r\n            i += 1\r\n    # Call quickSortHelper on both halves.\r\n    arr = quickSortHelper(arr, l, j - 1)\r\n    \r\n    arr = quickSortHelper(arr, k + 1, r)\r\n    \r\n    return arr\r\n    \r\n\r\ndef quickSort(arr):\r\n    \r\n    arr = quickSortHelper(arr, 0, len(arr) - 1)\r\n    \r\n    return arr\r\n\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}