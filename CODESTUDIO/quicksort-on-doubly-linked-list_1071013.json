{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9646,
            "title": "QuickSort on Doubly Linked List",
            "titleSlug": "quicksort-on-doubly-linked-list_1071013",
            "content": "<h4 id=\"you-are-given-the-head-of-doubly-linked-list-containing-n-nodes-each-node-will-have-an-integer-value-stored-in-it-you-need-to-return-the-head-of-the-doubly-linked-list-after-sorting-it-using-the-quicksort-algorithm\">You are given the head of Doubly Linked List containing \u2018N\u2019 nodes. Each node will have an integer value stored in it. You need to return the head of the Doubly linked list after sorting it using the QuickSort algorithm.</h4>\n\n<h4 id=\"for-example\">For example :</h4>\n\n<p><img src=\"https://files.codingninjas.in/dll-1-6966.png\" alt=\"alt text\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single positive integer \u2018N\u2019 denoting the number of the element nodes present in the doubly linked list.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the elements of the doubly linked list.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The only line of output of each test case should contain \u2018N\u2019 space-separated integer in the sorted order.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 500\n-10 ^ 9 &lt;= A[i] &lt;= 10 ^ 9\n\nWhere \u2018A[i]\u2019 is the value of &#39;ith&#39; node.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4\n4 2 -3 4\n5\n3 3 4 2 4    \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>-3 2 4 4\n2 3 3 4 4    \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>Test case 1 :\nAfter sorting the list [4,2,-3,4] will look like [-3,2,4,4].\n\nTest case 2 :\nAfter sorting the list [4,2,-3,4] will look like [-3,2,4,4].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5 \n45 -2 42 5 -11 \n6 \n-2 12 -1 1 20 1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>-11 -2 5 42 45\n-2 -1 1 1 12 20\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given the head of a doubly linked list containing 'N' nodes. Each node stores an integer value. Implement the QuickSort algorithm to sort the doubly linked list and return the head of the sorted list.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 500",
                    "-10^9 <= A[i] <= 10^9",
                    "Where \u2018A[i]\u2019 is the value of 'ith' node.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4\n4 2 -3 4",
                        "output": "-3 2 4 4",
                        "explanation": "The doubly linked list [4, 2, -3, 4] is sorted to [-3, 2, 4, 4]."
                    },
                    {
                        "input": "5\n3 3 4 2 4",
                        "output": "2 3 3 4 4",
                        "explanation": "The doubly linked list [3, 3, 4, 2, 4] is sorted to [2, 3, 3, 4, 4]."
                    },
                    {
                        "input": "5\n45 -2 42 5 -11",
                        "output": "-11 -2 5 42 45",
                        "explanation": null
                    },
                    {
                        "input": "6\n-2 12 -1 1 20 1",
                        "output": "-2 -1 1 1 12 20",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Instead of swapping nodes, you can swap values present in the node.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}