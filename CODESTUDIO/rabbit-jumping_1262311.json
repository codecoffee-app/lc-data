{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10656,
            "title": "Rabbit Jumping",
            "titleSlug": "rabbit-jumping_1262311",
            "content": "<h4 id=\"you-are-given-n-carrots-numbered-from-1-to-n-there-are-k-rabbits-rabbits-can-jump-to-carrots-only-with-the-multiples-of-aj-aj-2aj-3aj-for-all-rabbits-from-1-to-k\">You are given \u2018n\u2019 carrots numbered from 1 to \u2018n\u2019. There are k rabbits. Rabbits can jump to carrots only with the multiples of Aj(Aj,2Aj,3Aj\u2026) for all rabbits from 1 to k.</h4>\n\n<h4 id=\"whenever-rabbit-reaches-a-carrot-it-eats-a-little-carrot-all-rabbits-start-from-the-same-beginning-point-you-have-to-determine-the-remaining-carrots-i-e-carrots-which-are-not-eaten-by-any-rabbit-after-all-rabbits-reach-the-end\">Whenever Rabbit reaches a carrot it eats a little carrot. All rabbits start from the same beginning point. You have to determine the remaining carrots(i.e., carrots which are not eaten by any rabbit) after all rabbits reach the end.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; denoting the number of test cases.\n\nThe first line of the test case contains &#39;n&#39; and &#39;k&#39; denoting the number of carrots and rabbits.\n\nThe next line contains &#39;k&#39; space-separated integers denoting the jumping factor of the rabbits.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return a single integer representing the number of remaining carrots.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 50\n1 &lt;= &#39;n&#39;, &#39;k&#39; &lt;= 3000\n1 &lt;= A[ j ] &lt;= n, for all j from 1 to k\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n6 3\n2 3 4\n7 2\n2 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case:\nCarrots are eaten by the first rabbit: 2,4,6\nCarrots are eaten by the second rabbit: 3,6\nCarrots are eaten by the third rabbit: 4\n\nRemaining Carrots: 1,5\n\nFor the second case:\nCarrots are eaten by the first rabbit: 2,4,6\nCarrots are eaten by the third rabbit: 5\nRemaining Carrots: 1,3,7\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n8 4\n1 2 3 4\n7 1\n6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0\n6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'n' carrots numbered from 1 to 'n' and 'k' rabbits, determine the number of remaining carrots after all rabbits have moved. Each rabbit has a jumping factor A[j], allowing them to jump to carrots that are multiples of A[j] (A[j], 2A[j], 3A[j], ...). A rabbit eats a carrot each time it lands on one. All rabbits start from the same location (implicitly carrot 1). Find the number of carrots that are not eaten by any rabbit.",
                "constraints": [
                    "1 <= 'T' <= 50",
                    "1 <= 'n', 'k' <= 3000",
                    "1 <= A[j] <= n, for all j from 1 to k"
                ],
                "testcases": [
                    {
                        "input": "n = 6, k = 3, A = [2, 3, 4]",
                        "output": "2",
                        "explanation": "Rabbit 1 eats carrots 2, 4, and 6. Rabbit 2 eats carrots 3 and 6. Rabbit 3 eats carrot 4.  The eaten carrots are 2, 3, 4, and 6. The remaining carrots are 1 and 5. Therefore the output is 2."
                    },
                    {
                        "input": "n = 7, k = 2, A = [2, 5]",
                        "output": "3",
                        "explanation": "Rabbit 1 eats carrots 2, 4, and 6. Rabbit 2 eats carrot 5. The eaten carrots are 2, 4, 5, and 6. The remaining carrots are 1, 3, and 7. Therefore the output is 3."
                    },
                    {
                        "input": "n = 8, k = 4, A = [1, 2, 3, 4]",
                        "output": "0",
                        "explanation": "Rabbit 1 eats carrots 1, 2, 3, 4, 5, 6, 7, and 8.  Since rabbit 1 eats all of the carrots, no carrots remain, so the output is 0."
                    },
                    {
                        "input": "n = 7, k = 1, A = [6]",
                        "output": "6",
                        "explanation": "Rabbit 1 eats carrot 6.  The remaining carrots are 1, 2, 3, 4, 5, and 7. Therefore the output is 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use brute force to traverse all multiples of each carrot.</p>",
            "<p>Can we find the answer by traversing every carrot exactly once?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}