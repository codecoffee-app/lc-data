{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16658,
            "title": "Railway Management",
            "titleSlug": "railway-management_3583806",
            "content": "<h4 id=\"ninja-started-his-new-job-as-a-manager-in-railways-control-room-his-task-is-to-maintain-the-records-of-passengers-traveling-from-one-place-to-another-his-task-is-to-design-a-class-that-performs-the-following-operations\">Ninja started his new job as a manager in Railways Control Room. His task is to maintain the records of passengers traveling from one place to another. His task is to design a class that performs the following operations:</h4>\n\n<pre><code>\u2018RAILWAY_SYSTEM\u2019() is a function that initializes your data structures.\n\n\u2018CHECK_IN\u2019( \u2018PASS_ID\u2019,\u2019 STATION\u2019, TIME) represents that passenger with passenger ID \u2018PASS_ID\u2019 checks in at the station named \u2018STATION\u2019 at time \u2018TIME\u2019.\n\n A customer can only be checked into one place at a time.\n\n\u2018CHECK_OUT\u2019( \u2018PASS_ID\u2019,\u2019 STATION\u2019, TIME) represents that passenger with passenger ID \u2018PASS_ID\u2019 checks out at the station named \u2018STATION\u2019 at time \u2018TIME\u2019.\n\n\u2018GET_AVERAGE_TIME(SOURCE, DEST) returns the average time it takes to travel from SOURCE to DEST.\n\nThe average time is computed from all the previous traveling times from SOURCE to DEST  that happened directly, meaning a check-in at SOURCE followed by a check out from DEST.\n</code></pre>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>If the functions calls are as follows:\nCHECK_IN(1,\u2018Delhi\u2019,10)\nCHECK_OUT(1,\u2018Noida\u2019,20)\nGET_AVERAGE(\u2018Delhi\u2019,\u2019 Noida\u2019)\nCHECK_IN(5,\u2018Delhi\u2019,12)\nCHECK_OUT(5,\u2018Noida\u2019,17)\nGET_AVERAGE(\u2018Delhi\u2019,\u2019 Noida\u2019)\n\nSo, the answers for the GET_AVERAGE calls will be 10 and 7.5 respectively.\nFor the first call, there is only one trip between Delhi and Noida, so the average is 10.\nFor the second call, there are two between these stations, so the average is (10+5)/2 = 7.5\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer, &#39;N\u2019, denoting the number of function calls.\n\nNext \u2018N\u2019 lines of each test case contain an integer denoting the function type followed by the parameter list.\nType 1 denotes CHECK_IN().\nType 2 denotes CHECK_OUT().\nType 3 denotes GET_AVERAGE().   \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, output the values returned by the GET_AVERAGE() function.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 100000.\n1 &lt;= \u2018PASS_ID\u2019 &lt;= 1000 .\n2 &lt;= Number of Stations &lt;= 20.\n1 &lt;= \u2018TIME\u2019 &lt;= 1000. \n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n6\n1 1 Delhi 10\n2 1 Noida 20\n3 Delhi Noida\n1 5 Delhi 12\n2 5 Noida 17\n3 Delhi Noida\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>10.0  7.5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case,\nSo, the answers for the GET_AVERAGE calls will be 10 and 7.5 respectively.\nFor the first call, there is only one trip between Delhi and Noida, so the average is 10.\nFor the second call, there are two between these stations, so the average is (10+5)/2 = 7.5. Hence, the answer is [10, 7.5].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n9\n1 154 Kota 10\n2 154 Chandigarh 50\n3 Kota Chandigarh\n1 821 Agra 1\n2 821 Kota 26\n1 79 Agra 37\n3 Agra Kota\n2 79 Noida 54\n1 373 Lucknow 65\n6\n1 734 Agra 59\n2 734 Ahemdabad 69\n1 831 Kota 53\n2 831 Delhi 89\n3 Kota Delhi\n1 514 Shimla 62\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>40.0 25.0\n36.0  \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a `RAILWAY_SYSTEM` class to manage passenger travel records. Implement the following methods:\n\n*   `RAILWAY_SYSTEM()`: Initializes the data structures.\n*   `CHECK_IN(PASS_ID, STATION, TIME)`: Records passenger `PASS_ID` checking in at `STATION` at time `TIME`. Passengers can only be checked into one station at a time.\n*   `CHECK_OUT(PASS_ID, STATION, TIME)`: Records passenger `PASS_ID` checking out at `STATION` at time `TIME`.\n*   `GET_AVERAGE_TIME(SOURCE, DEST)`: Returns the average travel time between `SOURCE` and `DEST`. The average is calculated using only direct trips (check-in at SOURCE followed by check-out at DEST).",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 100000 (Number of function calls)",
                    "1 <= PASS_ID <= 1000",
                    "2 <= Number of Stations <= 20",
                    "1 <= TIME <= 1000",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n6\n1 1 Delhi 10\n2 1 Noida 20\n3 Delhi Noida\n1 5 Delhi 12\n2 5 Noida 17\n3 Delhi Noida",
                        "output": "10.0 7.5",
                        "explanation": "First call to `GET_AVERAGE('Delhi', 'Noida')`: Only one trip from Delhi to Noida exists (ID 1, time 20-10=10). Average is 10.0.\nSecond call to `GET_AVERAGE('Delhi', 'Noida')`: Two trips from Delhi to Noida exist (ID 1, time 10; ID 5, time 17-12=5). Average is (10 + 5) / 2 = 7.5."
                    },
                    {
                        "input": "2\n9\n1 154 Kota 10\n2 154 Chandigarh 50\n3 Kota Chandigarh\n1 821 Agra 1\n2 821 Kota 26\n1 79 Agra 37\n3 Agra Kota\n2 79 Noida 54\n1 373 Lucknow 65\n6\n1 734 Agra 59\n2 734 Ahemdabad 69\n1 831 Kota 53\n2 831 Delhi 89\n3 Kota Delhi\n1 514 Shimla 62",
                        "output": "40.0 25.0\n36.0",
                        "explanation": "Test case 1:\nFirst call to `GET_AVERAGE('Kota', 'Chandigarh')`: One trip (ID 154, time 50-10=40). Average is 40.0.\nSecond call to `GET_AVERAGE('Agra', 'Kota')`: One trip (ID 821, time 26-1=25). Average is 25.0.\nTest case 2:\nCall to `GET_AVERAGE('Kota', 'Delhi')`: One trip (ID 831, time 89 - 53 = 36). Average is 36.0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to store the details of each passenger ID effectively.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}