{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 23527,
            "title": "Randomly Sorted",
            "titleSlug": "randomly-sorted_6868423",
            "content": "<h4 id=\"let-us-say-you-randomly-choose-n-non-negative-integers-less-than-m-and-put-them-in-an-array-a\">Let us say you randomly choose &#39;N&#39; non-negative integers less than &#39;M&#39; and put them in an array &#39;A&#39;.</h4>\n\n<p><br></p>\n\n<h4 id=\"find-the-probability-that-a-is-sorted-in-non-decreasing-order\">Find the probability that &#39;A&#39; is sorted in non-decreasing order.</h4>\n\n<p><br></p>\n\n<h4 id=\"the-answer-should-be-found-modulo-10-9-7-formally-let-m-10-9-7-it-can-be-shown-that-the-answer-can-be-expressed-as-an-irreducible-fraction-p-q-where-p-and-q-are-integers-and-q-0-mod-m-output-the-integer-equal-to-p-q-1-mod-m-in-other-words-output-such-an-integer-x-that-0-x-m-and-x-q-p-mod-m\">The answer should be found modulo 10^9 + 7. Formally, let M = 10^9 + 7. It can be shown that the answer can be expressed as an irreducible fraction p/q, where p and q are integers and q !\u2261 0 (mod M). Output the integer equal to p * (q^-1) mod M. In other words, output such an integer x that 0 &lt;= x &lt; M and x * q \u2261 p (mod M).</h4>\n\n<p><br></p>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>Let &#39;N&#39; = 3, &#39;M&#39; = 3.\nThere are 27 possible final arrays.\n10 of them are sorted in non-decreasing order: [ &#39;0, 0, 0&#39; ], [ &#39;1, 1, 1&#39; ], [ &#39;2, 2, 2&#39; ], [ &#39;0, 1, 2&#39; ], [ &#39;0, 0, 1&#39; ], [ &#39;0, 1, 1&#39; ], [ &#39;0, 0, 2&#39; ], [ &#39;0, 2, 2&#39; ], [ &#39;1, 1, 2&#39; ], [ &#39;1, 2, 2&#39; ].\nThus the probability needed is &#39;(10 / 27) % (10^9 + 7) = 703703709&#39;.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a single integer &#39;T&#39;, which denotes the number of test cases.\nThen &#39;T&#39; test cases follow. For each test case:\n\nThe first and only line contains two integers, &#39;N&#39; and &#39;M&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the probability that &#39;A&#39; is sorted in non-decreasing order, modulo 10^9 + 7.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 10\n2 &lt;= &#39;N, M&#39; &lt;= 10^3\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 5\n2 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>960000007\n750000006\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>First test case:-\nThere are &#39;5^3 = 125&#39; possible final arrays.\nOut of the arrays with &#39;A[ 0 ] = 0&#39;, exactly &#39;15&#39; are sorted in non-decreasing order.\nFor arrays with &#39;A[ 0 ] = 1&#39;, exactly &#39;10&#39; are sorted in non-decreasing order.\nFor arrays with &#39;A[ 0 ] = 2&#39;, exactly &#39;6&#39; are sorted in non-decreasing order.\nFor arrays with &#39;A[ 0 ] = 3&#39;, exactly &#39;3&#39; are sorted in non-decreasing order.\nFor arrays with &#39;A[ 0 ] = 4&#39;, exactly &#39;1&#39; is sorted in non-decreasing order.\nThus, the answer is &#39;(35 / 125) % (10^9 + 7) = 960000007&#39;.\n\nSecond test case:-\nThere are 4 possible final arrays.\n3 of them are sorted in non-decreasing order: [ &#39;0, 0&#39; ], [ &#39;0, 1&#39; ], [ &#39;1, 1&#39; ].\nThus, the answer is &#39;(3 / 4) % (10^9 + 7) = 750000006&#39;.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n25 43\n60 29\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>43816143\n973827568\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers 'N' and 'M', you randomly choose 'N' non-negative integers less than 'M' and place them into an array 'A'. The task is to determine the probability that array 'A' is sorted in non-decreasing order. Compute this probability modulo 10^9 + 7. Specifically, represent the probability as an irreducible fraction p/q and output p * (q^-1) mod (10^9 + 7).  In other words, find an integer x such that 0 <= x < 10^9 + 7 and x * q \u2261 p (mod 10^9 + 7).",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N, M <= 10^3",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 5",
                        "output": "960000007",
                        "explanation": "In this test case, we generate an array A of size 3, where each element is between 0 and 4 (inclusive). There are 5^3 = 125 total possible arrays. Among them, 35 are sorted in non-decreasing order.  These arrays are those where: A[0] = 0, 1, 2, 3, 4 with non-decreasing properties of size 3. So, there are 15 + 10 + 6 + 3 + 1 = 35 such sorted arrays.  The probability is thus 35/125. The modular inverse of 125 modulo 10^9 + 7, when multiplied by 35, yields 960000007."
                    },
                    {
                        "input": "2 2",
                        "output": "750000006",
                        "explanation": "In this test case, we generate an array A of size 2, where each element is between 0 and 1 (inclusive).  There are 2^2 = 4 total possible arrays: [0,0], [0,1], [1,0], [1,1]. Of these, three are non-decreasing: [0, 0], [0, 1], and [1, 1]. Thus the probability is 3/4. The modular inverse of 4 modulo 10^9 + 7, when multiplied by 3, yields 750000006."
                    },
                    {
                        "input": "25 43",
                        "output": "43816143",
                        "explanation": null
                    },
                    {
                        "input": "60 29",
                        "output": "973827568",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a 2 state DP solution.</p>",
            "<p>How can you group the dp transition to reduce complexity?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}