{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15739,
            "title": "Range Minimum Query",
            "titleSlug": "range-minimum-query_2698980",
            "content": "<h4 id=\"you-are-given-an-array-arr-consisting-of-n-integers-you-have-to-process-q-queries-in-each-query-you-will-be-provided-two-integers-l-and-r-and-find-the-minimum-array-element-in-the-range-l-r\">You are given an array \u2018ARR\u2019 consisting of \u2018N\u2019 integers. You have to process \u2018Q\u2019 queries, in each query, you will be provided two integers \u2019L\u2019 and \u2018R\u2019, and find the minimum array element in the range [L, R].</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>L and R in each query follow 0-based indexing.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow up:</h5>\n\n<pre><code>For each query, do it faster than linear time.\n</code></pre>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If N = 7, ARR = {1, 2, 3, 4, 3, 2, 1}, Q = 2 and Queries = { {0, 3}, {3, 5} }\n\nFor the first query, we need to find the smallest number between the Arr[0], Arr[1], Arr[2] and Arr[3], clearly, the smallest number is Arr[0] = 1, so we will print 1.\nFor the second query, we need to find the smallest number amongst Arr[3], Arr[4] and Arr[5], clearly, the smallest number is Arr[5] = 2, so we will print 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains a single integer \u2018N\u2019, denoting the number of elements in the array.\n\nThe second line of each test case contains N integers \u2018ARR\u2019, denoting the array elements.\n\nThe third line of each test case contains a single integer \u2018Q\u2019, denoting the number of queries.\n\nThe next Q lines, each contain two integers \u2018L\u2019 and \u2018R\u2019, denoting the left end and the right end of the range.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the smallest element in the range [L, R].\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 T \u2264 10      \n1 \u2264 N \u2264 1000  \n0 \u2264 Arr[i] \u2264 10^9\n1 \u2264 Q \u2264 50\n0 \u2264 L \u2264 R &lt; N\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n7\n1 2 3 4 3 2 1\n2\n0 3\n3 5\n4\n1 3 1 2\n3\n0 3\n1 1\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n2\n1\n3\n1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For test case 1 :\nFor the first query, we need to find the smallest number between the Arr[0], Arr[1], Arr[2] and Arr[3], clearly, the smallest number is Arr[0] = 1, so we will print 1.\nFor the second query, we need to find the smallest number amongst Arr[3], Arr[4] and Arr[5], clearly, the smallest number is Arr[5] = 2, so we will print 2.\n\nFor test case 2 : \nFor the first query, we need to find the smallest number between the Arr[0], Arr[1], Arr[2] and Arr[3], clearly, the smallest number is Arr[0] = 1, so we will print 1.\nFor the second query, there is only one element in the range so the minimum element itself is Arr[1] = 3, so we will print 3.\nFor the third query, we need to find the smallest number amongst Arr[1] and Arr[2], clearly, the smallest number is Arr[2] = 1, so we will print 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1\n1\n1\n0 0\n5\n1 5 3 4 5\n1\n1 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'ARR' of 'N' integers, process 'Q' queries. Each query provides a range [L, R] (0-based indexing).  For each query, find the minimum element within the specified range in the array.",
                "constraints": [
                    "1 \u2264 T \u2264 10",
                    "1 \u2264 N \u2264 1000",
                    "0 \u2264 Arr[i] \u2264 10^9",
                    "1 \u2264 Q \u2264 50",
                    "0 \u2264 L \u2264 R < N",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "7\n1 2 3 4 3 2 1\n2\n0 3\n3 5",
                        "output": "1\n2",
                        "explanation": "Test Case 1:\n- Query 1 (0, 3): Minimum of [1, 2, 3, 4] is 1.\n- Query 2 (3, 5): Minimum of [4, 3, 2] is 2."
                    },
                    {
                        "input": "4\n1 3 1 2\n3\n0 3\n1 1\n1 2",
                        "output": "1\n3\n1",
                        "explanation": "Test Case 2:\n- Query 1 (0, 3): Minimum of [1, 3, 1, 2] is 1.\n- Query 2 (1, 1): Minimum of [3] is 3.\n- Query 3 (1, 2): Minimum of [3, 1] is 1."
                    },
                    {
                        "input": "1\n1\n1\n0 0",
                        "output": "1",
                        "explanation": "Test Case 1:\n- Query 1 (0, 0): Minimum of [1] is 1."
                    },
                    {
                        "input": "5\n1 5 3 4 5\n1\n1 3",
                        "output": "3",
                        "explanation": "Test Case 2:\n- Query 1 (1, 3): Minimum of [5, 3, 4] is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Simply process each query one at a time.</p>",
            "<p>Can you precalculate the answer for some ranges and effectively use that afterwards? Try to think of storing information in form of a full binary tree to reduce the search time of each query.</p>"
        ],
        "relatedTopics": [],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}