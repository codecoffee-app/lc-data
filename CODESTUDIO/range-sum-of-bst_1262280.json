{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10642,
            "title": "Range Sum of BST ",
            "titleSlug": "range-sum-of-bst_1262280",
            "content": "<h4 id=\"you-are-given-a-binary-search-tree-with-its-root-node-and-a-range-your-task-is-to-find-the-sum-of-all-the-values-of-the-nodes-whose-values-lie-in-the-given-range-l-r-inclusive\">You are given a Binary Search Tree with its root node and a range. Your task is to find the sum of all the values of the nodes whose values lie in the given range(L, R) inclusive.</h4>\n\n<h4 id=\"a-binary-search-tree-is-a-tree-in-which-all-the-nodes-follow-the-following-properties\">A Binary Search tree is a tree in which all the nodes follow the following properties:</h4>\n\n<h4 id=\"1-the-value-of-a-node-of-the-left-sub-tree-is-less-than-the-value-of-the-node\">1. The value of a node of the left sub-tree is less than the value of the node.</h4>\n\n<h4 id=\"2-the-value-of-a-node-of-the-right-sub-tree-is-greater-than-or-equal-to-the-value-of-the-node\">2. The value of a node of the right sub-tree is greater than or equal to the value of the node.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of every test case contains two integers &#39;L&#39; and &#39;R&#39;, denoting the range.\n\nThe second line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the sum of all the values of all nodes with a value in the given range.\n\nThe output of each test case will be printed in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n0 &lt;= L &lt;= R &lt;= 10 ^ 5\n1 &lt;= N &lt;= 10 ^ 4\n1&lt;= DATA &lt;=10 ^ 5 and DATA != -1\n\nWhere \u2018T\u2019 is the number of test cases, \u2018L\u2019 is the starting value of the Range, \u2018R\u2019 is the ending value of the Range,  and \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cDATA\u201d is the value of the binary tree node\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n18 24\n24 15 33 12 21 30 36 9 -1 18 -1 27 -1 -1 -1 -1 -1 -1 -1 -1 -1 \n19 21\n15 9 21 7 13 19 23 5 -1 11 -1 17 -1 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>63\n40\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>In the first test case, The value of the nodes are 24, 15, 33, 12, 21, 30, 36, 9, 18, and 27 and the values which lie in the range of [18, 24] are 18, 21, and 24. So, the answer is 63.\n\nIn the second test case, The value of the nodes are 15, 9, 21, 7, 13, 19, 23, 5, 11, and 17 and the values which lie in the range of [19, 21] are 21, and 19. So, the answer is 40.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n21 23\n15 9 21 7 13 19 23 5 -1 11 -1 17 -1 -1 -1 -1 -1 -1 -1 -1 -1\n31 37\n25 16 34 13 22 31 37  -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>44\n102\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a Binary Search Tree (BST) and a range defined by two integers, `low` and `high`, inclusive, determine the sum of all node values in the BST that fall within the specified range [low, high].",
                "constraints": [
                    "1 <= T <= 50",
                    "0 <= L <= R <= 10^5",
                    "1 <= N <= 10^4",
                    "1 <= DATA <= 10^5 and DATA != -1"
                ],
                "testcases": [
                    {
                        "input": "root=[24, 15, 33, 12, 21, 30, 36, 9, -1, 18, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1], low=18, high=24",
                        "output": "63",
                        "explanation": "The nodes with values within the range [18, 24] are 18, 21, and 24. Their sum is 18 + 21 + 24 = 63."
                    },
                    {
                        "input": "root=[15, 9, 21, 7, 13, 19, 23, 5, -1, 11, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1], low=19, high=21",
                        "output": "40",
                        "explanation": "The nodes with values within the range [19, 21] are 19 and 21. Their sum is 19 + 21 = 40."
                    },
                    {
                        "input": "root=[15, 9, 21, 7, 13, 19, 23, 5, -1, 11, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1], low=21, high=23",
                        "output": "44",
                        "explanation": "The nodes with values within the range [21, 23] are 21 and 23. Their sum is 21 + 23 = 44."
                    },
                    {
                        "input": "root=[25, 16, 34, 13, 22, 31, 37,  -1, -1, -1, -1, -1, -1, -1, -1], low=31, high=37",
                        "output": "102",
                        "explanation": "The nodes with values within the range [31, 37] are 31, 34, and 37. Their sum is 31 + 34 + 37 = 102."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>&nbsp;</strong>If we do an Inorder traversal, Can we add the node values to the final answer as per the given condition?</p>",
            "<p>Can we eliminate some of the redundant recursive calls?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}