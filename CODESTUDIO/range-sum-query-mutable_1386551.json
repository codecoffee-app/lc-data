{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11796,
            "title": "Range Sum Query - Mutable",
            "titleSlug": "range-sum-query-mutable_1386551",
            "content": "<h4 id=\"you-are-given-an-array-arr-you-are-supposed-to-process-two-types-of-queries-update-an-index-ind-with-value-val-in-the-array-and-find-the-sum-of-a-range-in-the-array\">You are given an array \u2018ARR\u2019. You are supposed to process two types of queries - Update an index \u2018IND\u2019 with value \u2018VAL\u2019 in the array, and find the sum of a range in the array.</h4>\n\n<h4 id=\"you-are-supposed-to-implement-the-class-which-includes-two-operations\">You are supposed to implement the class which includes two operations:</h4>\n\n<pre><code>1. UPDATE_INDEX(IND, VAL) - It updates the value of ARR[IND] to VAL.\n2. SUM\\_OF\\_RANGE(l, r) - It returns the sum of the subarray ARR[l] to ARR[r] i.e. ARR[l] + ARR[l+1] + ARR[l+1] + \u2026.. + ARR[r-1] + ARR[r].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. The test cases follow.\n\nThe first line of each test case contains integer \u2018N\u2019, which denotes the number of elements in the array.\n\nThe second line contains \u2018N\u2019 integers denoting the elements of the array \u2018ARR\u2019.\n\nThe third line of each test case contains integer \u2018Q\u2019, which denotes the number of queries for the test case.\n\nFor each query, the first line contains an integer \u2018TYPE_OF_QUERY\u2019.\n\nIf \u2018TYPE_OF_QUERY\u2019 is equal to 0, the next line contains two integers \u2018IND\u2019, and \u2018VAL\u2019, which denotes the index to be updated and the value with which the index is to be updated.\n\nIf \u2018TYPE_OF_QUERY\u2019 is equal to 1, the next line contains two integers \u2018l\u2019, and \u2018r\u2019, denoting the leftmost element of the sub-array and the rightmost element of the sub-array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, If \u2018TYPE_OF_QUERY\u2019 is equal to 1, return  the sum of the given range. Otherwise, update accordingly.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50  \n1 &lt;= Q &lt;= 10^4\n1 &lt;= N &lt;= 10^4\n-10^3 &lt;= ARR[i] &lt;= 10^3\nTYPE_OF_QUERY = {0, 1}\n0 &lt;= IND &lt;= N\n-100 &lt;= VAL &lt;= 100\n0 &lt;= l &lt;= r &lt;= N\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n6\n1 2 3 4 5 6\n3\n1\n2 5\n0\n3 5\n1\n2 5   \n5\n9 8 7 6 5\n3\n0\n4 13\n1\n3 4\n1\n0 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>18\n19\n19\n43\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>In the first test case, The initial array is [1, 2, 3, 4, 5, 6]. In the first query, the sum from index 2 to 5 is 18. In the second query, the third index is updated from 4 to 5. In the third query, the sum from index 2 to 5 is 19.\n\nIn the second test case, the given array is [9, 8, 7, 6, 5]. In the first query, index 4 is updated from 5 to 13. In the second query, the sum from index 3 to 4 is 19. In the third query, the sum from index 0 to 4 is 43.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4\n1 3 5 7 \n2\n0 1 1 \n1 1 3 \n3\n1 3 5 \n2\n0 1 1 \n1 1 2 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>13\n6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a `RangeSumQuery` class to efficiently handle update and range sum queries on an array. The class should support initializing with an array, updating an element at a given index, and calculating the sum of elements within a specified range (inclusive).",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= Q <= 10^4",
                    "1 <= N <= 10^4",
                    "-10^3 <= ARR[i] <= 10^3",
                    "0 <= IND < N",
                    "-100 <= VAL <= 100",
                    "0 <= l <= r < N"
                ],
                "testcases": [
                    {
                        "input": "n = 6, nums = [1, 2, 3, 4, 5, 6], queries = [[1, 2, 5], [0, 3, 5], [1, 2, 5]]",
                        "output": "18, 19",
                        "explanation": "Initial array: [1, 2, 3, 4, 5, 6]. Query 1 (sumOfRange(2, 5)): 3 + 4 + 5 + 6 = 18. Query 2 (update(3, 5)): Updates ARR[3] to 5. Array becomes [1, 2, 3, 5, 5, 6]. Query 3 (sumOfRange(2, 5)): 3 + 5 + 5 + 6 = 19."
                    },
                    {
                        "input": "n = 5, nums = [9, 8, 7, 6, 5], queries = [[0, 4, 13], [1, 3, 4], [1, 0, 4]]",
                        "output": "19, 43",
                        "explanation": "Initial array: [9, 8, 7, 6, 5]. Query 1 (update(4, 13)): Updates ARR[4] to 13. Array becomes [9, 8, 7, 6, 13]. Query 2 (sumOfRange(3, 4)): 6 + 13 = 19. Query 3 (sumOfRange(0, 4)): 9 + 8 + 7 + 6 + 13 = 43."
                    },
                    {
                        "input": "n = 4, nums = [1, 3, 5, 7], queries = [[0, 1, 1], [1, 1, 3]]",
                        "output": "13",
                        "explanation": "Initial array: [1, 3, 5, 7]. Query 1 (update(1, 1)): Updates ARR[1] to 1. Array becomes [1, 1, 5, 7]. Query 2 (sumOfRange(1, 3)): 1 + 5 + 7 = 13."
                    },
                    {
                        "input": "n = 3, nums = [1, 3, 5], queries = [[0, 1, 1], [1, 1, 2]]",
                        "output": "6",
                        "explanation": "Initial array: [1, 3, 5]. Query 1 (update(1, 1)): Updates ARR[1] to 1. Array becomes [1, 1, 5]. Query 2 (sumOfRange(1, 2)): 1 + 5 = 6."
                    },
                    {
                        "input": "n = 4, nums = [1, 3, 5, 7], queries = [[1, 0, 3], [0, 2, -2], [1, 0, 3]]",
                        "output": "16, 9",
                        "explanation": "Initial array: [1, 3, 5, 7]. Query 1 (sumOfRange(0,3)): 1 + 3 + 5 + 7 = 16. Query 2 (update(2, -2)): Update ARR[2] to -2. Array becomes [1, 3, -2, 7]. Query 3 (sumOfRange(0, 3)): 1 + 3 + (-2) + 7 = 9."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you traverse over the given subarray and find the sum, etc accordingly?</p>",
            "<p>Can you divide the given array into blocks and find the results accordingly?</p>",
            "<p>Can you think of a data structure that can help us to do both the queries in O(logN) time?</p>"
        ],
        "relatedTopics": [],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}