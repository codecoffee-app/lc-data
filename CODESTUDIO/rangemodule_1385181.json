{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11700,
            "title": "RangeModule",
            "titleSlug": "rangemodule_1385181",
            "content": "<h4 id=\"a-range-module-is-a-module-that-tracks-the-range-of-numbers-you-have-to-design-and-implement-the-following-interface\">A range module is a module that tracks the range of numbers. You have to design and implement the following interface.</h4>\n\n<h4 id=\"addrange-left-right-this-will-add-the-half-open-interval-left-right-tracking-every-real-number-in-that-interval-now-adding-an-interval-that-partially-overlaps-with-currently-tracked-numbers-should-add-any-numbers-in-the-interval-that-are-not-already-tracked\">addRange(left, right). This will add the half-open interval [left, right), tracking every real number in that interval. Now, adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval that are not already tracked.</h4>\n\n<h4 id=\"queryrange-left-right-this-will-return-true-when-every-real-number-in-the-interval-left-right-is-currently-being-tracked\">queryRange(left, right) . This will return true when every real number in the interval [left, right) is currently being tracked.</h4>\n\n<h4 id=\"removerange-left-right-this-will-stop-tracking-every-real-number-currently-being-tracked-in-the-interval-left-right\">removeRange(left, right), this will stop tracking every real number currently being tracked in the interval [left, right).</h4>\n\n<h4 id=\"note\">Note</h4>\n\n<pre><code>A half open interval [left, right) denotes all real number left &lt;= x &lt; right.\n</code></pre>\n\n<h4 id=\"you-will-be-given-q-queries-where\">You will be given Q queries where</h4>\n\n<pre><code>1 -&gt; addRange(left, right)\n2 -&gt; queryRange(left, right)\n3 -&gt; removeRange(left,right)\n</code></pre>\n\n<h4 id=\"your-task-is-to-find-the-answers-to-the-above-q-queries\">Your task is to find the answers to the above Q queries.</h4>\n\n<h4 id=\"example\">Example</h4>\n\n<pre><code>1 10 20\n3 14 16\n2 10 14\n2 13 15\n2 16 17\n\nHere the outputs will be -1, -1, true, false, true as - \nIn the first query range [10,20), it is being tracked. After that, in second query range [14,16) is removed. So the range being tracked becomes [10,14) U [16,20).\n\nIn the third query, we are checking if [10,14) range is being tracked so we will return true. \n\nIn the fourth query, we are checking if [13,15) is being tracked so will return false.\n\nIn the fifth query, we are checking if [16,17) is being tracked, so we will return true.\n</code></pre>\n\n<h5 id=\"input-format\">Input format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first line of each test case contains an integer \u2018Q\u2019 denoting the number of queries to be answered.\n\nThen the next &#39;Q&#39; lines contain three space-separated integers the first integer representing the type of query and two integers left and right.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, for all the call of the query of type:-\n1- add the half-open interval [left, right). We print -1 whenever this operation is called.\n2- return true or false\n3- remove the half-open interval [left,right). We print -1 whenever this operation is called.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything or take input. This already has been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n0 &lt; left &lt; right &lt; 10^9 in all calls to addRange, queryRange, removeRange.\nThe total number of calls to 1st query in a single test case is at most 1000.\nThe total number of calls to  2nd query in a single test case is at most 5000.\nThe total number of calls to  3rd query in a single test case is at most 1000.\n\nTime limit - 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1:</h5>\n\n<pre><code>2\n4\n1 10 30\n2 25 31\n3 15 20\n2 10 13\n3\n1 3 5\n3 2 5\n2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>-1\nFalse\n-1\nTrue\n-1\n-1\nFalse\n</code></pre>\n\n<h5 id=\"explanation\">Explanation</h5>\n\n<pre><code>Test Case 1:\n\nAt first, the range [10,20) is added, then we are checking if the range [25,31) is being tracked. Here clearly it is not being tracked so we will return false.\n\nThen we are removing the range [15,10)  and then we are checking if the range[10,13) is being tracked. Here clearly it is being tracked so we will return true.\n\nTest case 2:\n\nAt first range [3,5) is added, then range [2,5) is removed and at last we are checking if the range [3,4) is being tracked or not. Here after removing [2,5) from [3,5) then clearly [3,4) is not being tracked.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2</h5>\n\n<pre><code>2\n4\n1 3 7\n2 4 6\n1 7 10\n2 4 9\n3\n1 1 19\n3 9 12\n2 7 8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\nTrue\n-1\nTrue\n-1\n-1\n True\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a `RangeModule` that tracks ranges of numbers. Implement the following methods:\n\n*   `addRange(left, right)`: Adds the half-open interval `[left, right)` to the tracked ranges. If the interval partially overlaps with existing tracked ranges, the overlapping portion is added, effectively merging intervals.\n*   `queryRange(left, right)`: Returns `true` if every real number in the interval `[left, right)` is currently being tracked, and `false` otherwise.\n*   `removeRange(left, right)`: Stops tracking every real number currently being tracked in the interval `[left, right)`. This may split existing tracked ranges.\n\nNote: A half-open interval `[left, right)` includes `left` but excludes `right` (left <= x < right).\n\nYou will receive `Q` queries, where:\n\n*   `1 left right` corresponds to `addRange(left, right)`.\n*   `2 left right` corresponds to `queryRange(left, right)`.\n*   `3 left right` corresponds to `removeRange(left, right)`.\n\nFor `addRange` and `removeRange` operations, print `-1`. For `queryRange` operations, print `true` or `false`.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "0 < left < right < 10^9 in all calls to addRange, queryRange, removeRange",
                    "The total number of calls to addRange in a single test case is at most 1000.",
                    "The total number of calls to queryRange in a single test case is at most 5000.",
                    "The total number of calls to removeRange in a single test case is at most 1000.",
                    "Time limit - 1sec"
                ],
                "testcases": [
                    {
                        "input": "4\n1 10 30\n2 25 31\n3 15 20\n2 10 13",
                        "output": "-1\nFalse\n-1\nTrue",
                        "explanation": "First, the range [10, 30) is added. Then, we check if the range [25, 31) is being tracked. It's not, so we return `False`. Next, the range [15, 20) is removed. Finally, we check if the range [10, 13) is being tracked, which it is, so we return `True`."
                    },
                    {
                        "input": "3\n1 3 5\n3 2 5\n2 3 4",
                        "output": "-1\n-1\nFalse",
                        "explanation": "First, [3,5) is added. Then [2,5) is removed. This means everything from 2 upto (but not including) 5 is removed. Hence effectively [3,5) is removed. So we are left with nothing. Therefore, [3,4) is not tracked. "
                    },
                    {
                        "input": "4\n1 3 7\n2 4 6\n1 7 10\n2 4 9",
                        "output": "-1\nTrue\n-1\nTrue",
                        "explanation": "Initially, the range [3, 7) is added. Then, we check if [4, 6) is being tracked, which it is, so `True` is returned. After adding [7,10), we check if [4,9) is being tracked. As [4,7) from range [3,7) and [7,9) from range [7,10) so [4,9) is also tracked so `True` is returned. "
                    },
                    {
                        "input": "3\n1 1 19\n3 9 12\n2 7 8",
                        "output": "-1\n-1\nTrue",
                        "explanation": "The range [1, 19) is added. The range [9, 12) is removed, resulting in [1,9) U [12,19). Lastly, the interval [7, 8) is being queried, and as this is within the tracked range [1, 9), `True` is returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Because left, right &lt; 10^9, we need to deal with the coordinates abstractly. Think of maintaining some sorted structure of disjoint intervals.</p>"
        ],
        "relatedTopics": [],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}