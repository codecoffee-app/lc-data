{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14374,
            "title": "Rank Scores",
            "titleSlug": "rank-scores_2117771",
            "content": "<pre><code>Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no &quot;holes&quot; between ranks.\n\n+----+-------+\n| Id | Score |\n+----+-------+\n| 1  | 3.50  |\n| 2  | 3.65  |\n| 3  | 4.00  |\n| 4  | 3.85  |\n| 5  | 4.00  |\n| 6  | 3.65  |\n+----+-------+\nFor example, given the above Scores table, your query should generate the following report (order by highest score):\n\n+-------+---------+\n| score | Rank    |\n+-------+---------+\n| 4.00  | 1       |\n| 4.00  | 1       |\n| 3.85  | 2       |\n| 3.65  | 3       |\n| 3.65  | 3       |\n| 3.50  | 4       |\n+-------+---------+\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 30,
            "dislikes": "NA",
            "rephrased": {
                "body": "Write a SQL query to rank scores from a table named `Scores`. The ranking should adhere to the following rules:\n\n1.  Scores should be ranked in descending order (highest score gets rank 1).\n2.  If two or more scores are the same, they should receive the same rank.\n3.  After a tie, the next rank should be the next consecutive integer. There should be no gaps in the ranking sequence.\n\nFor example, if the `Scores` table contains:\n\n\n+----+-------+\n| Id | Score |\n+----+-------+\n| 1  | 3.50  |\n| 2  | 3.65  |\n| 3  | 4.00  |\n| 4  | 3.85  |\n| 5  | 4.00  |\n| 6  | 3.65  |\n+----+-------+\n\n\nThe query should produce the following result:\n\n\n+-------+------+\n| Score | Rank |\n+-------+------+\n| 4.00  | 1    |\n| 4.00  | 1    |\n| 3.85  | 2    |\n| 3.65  | 3    |\n| 3.65  | 3    |\n| 3.50  | 4    |\n+-------+------+\n",
                "constraints": [],
                "testcases": [
                    {
                        "input": "CREATE TABLE Scores (Id INT, Score DECIMAL(3,2));\nINSERT INTO Scores (Id, Score) VALUES (1, 3.50);\nINSERT INTO Scores (Id, Score) VALUES (2, 3.65);\nINSERT INTO Scores (Id, Score) VALUES (3, 4.00);\nINSERT INTO Scores (Id, Score) VALUES (4, 3.85);\nINSERT INTO Scores (Id, Score) VALUES (5, 4.00);\nINSERT INTO Scores (Id, Score) VALUES (6, 3.65);",
                        "output": "+-------+------+\n| Score | Rank |\n+-------+------+\n| 4.00  | 1    |\n| 4.00  | 1    |\n| 3.85  | 2    |\n| 3.65  | 3    |\n| 3.65  | 3    |\n| 3.50  | 4    |\n+-------+------+",
                        "explanation": "The table contains scores with ties. The ranks should be assigned correctly, handling ties and consecutive ranking."
                    },
                    {
                        "input": "CREATE TABLE Scores (Id INT, Score DECIMAL(3,2));\nINSERT INTO Scores (Id, Score) VALUES (1, 1.00);\nINSERT INTO Scores (Id, Score) VALUES (2, 2.00);\nINSERT INTO Scores (Id, Score) VALUES (3, 3.00);",
                        "output": "+-------+------+\n| Score | Rank |\n+-------+------+\n| 3.00  | 1    |\n| 2.00  | 2    |\n| 1.00  | 3    |\n+-------+------+",
                        "explanation": "The table contains scores without ties. The ranks should be assigned correctly."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}