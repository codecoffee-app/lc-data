{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14374,
            "title": "Rank Scores",
            "titleSlug": "rank-scores_2117771",
            "content": "<pre><code>Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no &quot;holes&quot; between ranks.\n\n+----+-------+\n| Id | Score |\n+----+-------+\n| 1  | 3.50  |\n| 2  | 3.65  |\n| 3  | 4.00  |\n| 4  | 3.85  |\n| 5  | 4.00  |\n| 6  | 3.65  |\n+----+-------+\nFor example, given the above Scores table, your query should generate the following report (order by highest score):\n\n+-------+---------+\n| score | Rank    |\n+-------+---------+\n| 4.00  | 1       |\n| 4.00  | 1       |\n| 3.85  | 2       |\n| 3.65  | 3       |\n| 3.65  | 3       |\n| 3.50  | 4       |\n+-------+---------+\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 30,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a table 'Scores' with columns 'Id' (INT) and 'Score' (DECIMAL), write a SQL query to determine the rank of each score.  Scores should be ranked in descending order. In case of ties, assign the same rank to the tied scores. The rank should follow consecutive integers without gaps (i.e., if two scores tie for rank 1, the next score should be ranked 2, not 3). Return the score and its corresponding rank.",
                "constraints": [
                    "The 'Scores' table contains at least one row.",
                    "The 'Score' column contains decimal values.",
                    "The ranking should be based on descending order of scores."
                ],
                "testcases": [
                    {
                        "input": "Scores = [(1, 3.50), (2, 3.65), (3, 4.00), (4, 3.85), (5, 4.00), (6, 3.65)]",
                        "output": "[(4.00, 1), (4.00, 1), (3.85, 2), (3.65, 3), (3.65, 3), (3.50, 4)]",
                        "explanation": "The score 4.00 is the highest and appears twice, so both have rank 1. The next highest is 3.85, so it has rank 2. The score 3.65 appears twice, so both have rank 3.  Finally, 3.50 has rank 4."
                    },
                    {
                        "input": "Scores = [(1, 1.0), (2, 2.0), (3, 3.0), (4, 4.0), (5, 5.0)]",
                        "output": "[(5.0, 1), (4.0, 2), (3.0, 3), (2.0, 4), (1.0, 5)]",
                        "explanation": "Each score is unique, so the ranks are consecutive from 1 to 5."
                    },
                    {
                        "input": "Scores = [(1, 1.0), (2, 1.0), (3, 1.0), (4, 1.0), (5, 1.0)]",
                        "output": "[(1.0, 1), (1.0, 1), (1.0, 1), (1.0, 1), (1.0, 1)]",
                        "explanation": "All scores are the same, so they all share the same rank which is 1."
                    },
                    {
                        "input": "Scores = [(1, 5.0), (2, 5.0), (3, 4.0), (4, 3.0), (5, 3.0), (6, 2.0), (7, 2.0), (8, 1.0)]",
                        "output": "[(5.0, 1), (5.0, 1), (4.0, 2), (3.0, 3), (3.0, 3), (2.0, 4), (2.0, 4), (1.0, 5)]",
                        "explanation": "Mixed ties and unique scores to check various scenarios. 5.0 gets Rank 1 twice, 4.0 gets Rank 2, 3.0 gets Rank 3 twice, 2.0 gets Rank 4 twice, and 1.0 gets Rank 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}