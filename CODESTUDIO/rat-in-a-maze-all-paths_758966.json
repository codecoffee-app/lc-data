{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7666,
            "title": "Rat In a Maze All Paths",
            "titleSlug": "rat-in-a-maze-all-paths_758966",
            "content": "<h4 id=\"you-are-given-a-n-n-maze-with-a-rat-placed-at-maze-0-0-find-and-print-all-paths-that-rat-can-follow-to-reach-its-destination-i-e-maze-n-1-n-1-rat-can-move-in-any-direc-tion-left-right-up-and-down\">You are given a &#39;N&#39; * &#39;N&#39; maze with a rat placed at &#39;MAZE[0][0]&#39;. Find and print all paths that rat can follow to reach its destination i.e. &#39;MAZE[&#39;N&#39; - 1][&#39;N&#39; - 1]&#39;.  Rat can move in any direc\u00adtion ( left, right, up and down).</h4>\n\n<h4 id=\"value-of-every-cell-in-the-maze-can-either-be-0-or-1-cells-with-value-0-are-blocked-means-the-rat-can-not-enter-into-those-cells-and-those-with-value-1-are-open\">Value of every cell in the &#39;MAZE&#39; can either be 0 or 1. Cells with value 0 are blocked means the rat can\u00adnot enter into those cells and those with value 1 are open.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;N&#39; representing the dimension of the maze.\n\nThe next &#39;N&#39; lines of input contain &#39;N&#39; space-separated integers representing the type of the cell.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the path from the start position to the destination position and only cells that are part of the solution path should be 1, rest all cells should be 0.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 10\n0 &lt;= MAZE[i][j] &lt;=1\n\nWhere &#39;MAZE[i][j]&#39; denotes the value in the cell of &#39;MAZE&#39;.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3\n1 0 1\n1 0 1\n1 1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 0 0 1 0 0 1 1 1 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h5>\n\n<pre><code>Only 1 path is possible which contains coordinate &lt; (1,1), (2,1), (3,1), (3,2) and (3,3) &gt;\n\nSo our path matrix will look like this:\n\n1 0 0\n1 0 0\n1 1 1\n\nWhich is returned from left to right and then top to bottom in one line.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 0\n0 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code> [Blank]\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h5>\n\n<pre><code>As no path is possible to the last cell, a blank vector will be returned and nothing is printed.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 257,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an N x N maze represented by a 2D array. A rat starts at position (0, 0) and needs to reach the destination (N-1, N-1). The maze contains cells with values 0 or 1. A value of 0 indicates a blocked cell, while a value of 1 represents an open cell where the rat can move. Find all possible paths for the rat to reach the destination. The rat can move in four directions: left, right, up, and down.",
                "constraints": [
                    "1 <= N <= 10",
                    "0 <= MAZE[i][j] <= 1, where MAZE[i][j] represents the value in the cell of the maze.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\n1 0 1\n1 0 1\n1 1 1",
                        "output": "1 0 0 1 0 0 1 1 1",
                        "explanation": "The only possible path involves cells (0,0), (1,0), (2,0), (2,1), and (2,2). The output represents the maze with the solution path marked with 1s, and other cells marked with 0s, printed in row-major order."
                    },
                    {
                        "input": "2\n1 0\n0 1",
                        "output": " ",
                        "explanation": "No path exists from (0, 0) to (1, 1) given the maze configuration. Therefore, an empty output is produced."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try every possible path using recursion and backtracking.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time complexity : O(4 ^ (N ^ 2))\n    Space complexity : O(N ^ 2)\n\n    Where 'N' is the dimension of the matrix.\n*/\n\nvoid insertCurrentState(vector<vector<int>> &solution, vector<vector<int>> &ans, int n){\n    // Insert the solution matrix element by element in ans.\n    vector<int> currentState;\n    for (int i = 0; i < n; i++){\n        for (int j = 0; j < n; j++){\n            currentState.push_back(solution[i][j]);\n        }\n    }\n    ans.push_back(currentState);\n}\n\nvoid solveMaze(vector<vector<int>> &maze, vector<vector<int>> &solution, vector<vector<int>> &ans, int x, int y, int n){\n    // Base case that we reach our destination.\n    if (x == n - 1 && y == n - 1){\n        solution[x][y] = 1;\n        // Call to add the updated solution matrix in 'ANS'.\n        insertCurrentState(solution, ans, n); \n        return;\n    }\n\n    // Condition of out of boundary of the maze.\n    if (x > n - 1 || x < 0 || y > n - 1 || y < 0){\n        return;\n    }\n\n    /*\n       Condition for 'MAZE[x][y]==0' - if that particular cell is block.\n       'SOLUTION[x][y]'' == 1 - if it is already visited or already we go through it.\n    */\n    if (maze[x][y] == 0 || solution[x][y] == 1){\n        return;\n    }\n\n    // No problem comes in visiting this cell so visit it.\n    solution[x][y] = 1;\n\n    // Recursive calls to all directions(call to function having same name with diff value of params).\n    // Up move.\n    solveMaze(maze, solution, ans, x - 1, y, n); \n    // Down move.\n    solveMaze(maze, solution, ans, x + 1, y, n); \n    // Left move.\n    solveMaze(maze, solution, ans, x, y - 1, n); \n    // Right move.\n    solveMaze(maze, solution, ans, x, y + 1, n);\n\n    // Backtracking if there is no further path exists.\n    solution[x][y] = 0;\n}\n\nvector<vector<int>> ratInAMaze(vector<vector<int>> maze, int n){\n    // Initialize the 'SOLUTION' matrix by all 0s.\n    vector<vector<int>> solution(n, vector<int>(n, 0));\n\n    // Vector used to store all the paths.\n    vector<vector<int>> ans;\n\n    // Final call to function to print the solutions.\n    solveMaze(maze, solution, ans, 0, 0, n);\n\n    // Return the updated ans.\n    return ans;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\n    Time complexity : O(4 ^ (N ^ 2))\n    Space complexity : O(N ^ 2)\n\n    Where 'N' is the dimension of the matrix.\n\"\"\"\n\nimport queue\nfrom sys import stdin\n\ndef ratInAMaze(maze , n):\n    # Initialize the 'SOLUTION' matrix by all 0s.\n    solution = [[0 for j in range(n)] for i in range (n)]\n\n    # Final call to function to print the solutions.\n    solveMaze(maze, solution, 0, 0, n)\n\ndef solveMaze(maze, solution, x, y, n):\n    # Base case that we reach our destination.\n    if(x == n-1 and y == n-1):\n        solution[x][y] = 1\n        printSolution(solution , n)\n        print(\"\")\n        return\n\n    # Condition of out of boundary of the maze.\n    if (x > n-1 or x < 0 or y > n-1 or y < 0):\n        return\n\n    \"\"\"\n       Condition for 'MAZE[x][y]==0' - if that particular cell is block.\n       'SOLUTION[x][y]'' == 1 - if it is already visited or already we go through it.\n    \"\"\"\n    if(x > n-1 or x < 0 or y > n-1 or y < 0 or maze[x][y] == 0 or solution[x][y] == 1):\n        return\n\n    # No problem comes in visiting this cell so visit it.\n    solution[x][y] = 1\n\n    # Recursive calls to all directions(call to function having same name with diff value of params).\n    # Up move.\n    solveMaze(maze, solution, x - 1, y , n)  \n    # Down move.\n    solveMaze(maze, solution, x + 1, y , n) \n    # Left move.\n    solveMaze(maze, solution, x , y - 1 , n) \n    # Right move.\n    solveMaze(maze, solution, x, y + 1 , n) \n\n    # Backtracking if there is no further path exists.\n    solution[x][y] = 0\n    \n# Function to print the matrix elements.\ndef printSolution(solution , n):\n    for i in range(0 , n):\n        for j in range(0 , n):\n            print(solution[i][j] , end = \" \")\n\n# Main.\nn = int(input())\nmaze = n*[0]\n\nfor i in range(0 , n):\n    maze[i]=input().split()\n    maze[i]=[int(j) for j in maze[i]]\n    \nratInAMaze(maze , n)                                   ",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time complexity : O(4 ^ (N ^ 2))\n    Space complexity : O(N ^ 2)\n\n    Where 'N' is the dimension of the matrix.\n*/\n\nimport java.util.ArrayList;\n\npublic class Solution {\n    private static void insertCurrentState(int[][]solution, ArrayList<ArrayList<Integer>> ans, int n){\n        // Insert the solution matrix element by element in the ans.\n        ArrayList<Integer> currentState = new ArrayList<>();\n        for (int i = 0; i < n; i++){\n            for (int j = 0; j < n; j++){\n                currentState.add(solution[i][j]);\n            }\n        }\n        ans.add(currentState);\n    }\n\n    private static void solveMaze(int[][]maze, int[][] solution, ArrayList<ArrayList<Integer>> ans, int x, int y, int n){\n        // Base case that we reach our destination.\n        if (x == n - 1 && y == n - 1){\n            solution[x][y] = 1;\n            // Call to add the updated solution matrix in 'ANS'.\n            insertCurrentState(solution, ans, n); \n            return;\n        }\n\n        // Condition of out of boundary of the maze.\n        if (x > n - 1 || x < 0 || y > n - 1 || y < 0){\n            return;\n        }\n\n        /*\n           Condition for 'MAZE[x][y]==0' - if that particular cell is block.\n           'SOLUTION[x][y]'' == 1 - if it is already visited or already we go through it.\n        */\n        if (maze[x][y] == 0 || solution[x][y] == 1){\n            return;\n        }\n\n        // No problem comes in visiting this cell so visit it.\n        solution[x][y] = 1;\n\n        // Recursive calls to all directions(call to function having same name with diff value of params).\n        // Up move.\n        solveMaze(maze, solution, ans, x - 1, y, n); \n        // Down move.\n        solveMaze(maze, solution, ans, x + 1, y, n); \n        // Left move.\n        solveMaze(maze, solution, ans, x, y - 1, n); \n        // Right move.\n        solveMaze(maze, solution, ans, x, y + 1, n); \n\n        // Backtracking if there is no further path exists.\n        solution[x][y] = 0;\n    }\n\n    public static ArrayList<ArrayList<Integer>> ratInAMaze(int[][] maze, int n) {\n        // Initialize the 'SOLUTION' matrix by all 0s.\n        int[][] solution = new int[n][n];\n\n        // Vector used to store all the paths.\n        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();\n\n        // Final call to function to print the solutions.\n        solveMaze(maze, solution, ans, 0, 0, n);\n\n        // Return the updated ans.\n        return ans;\n    }\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}