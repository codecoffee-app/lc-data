{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10437,
            "title": "Rat in a Maze",
            "titleSlug": "rat-in-a-maze_1215030",
            "content": "<h4 id=\"you-are-given-a-starting-position-for-a-rat-which-is-stuck-in-a-maze-at-an-initial-point-0-0-the-maze-can-be-thought-of-as-a-2-dimensional-plane-the-maze-would-be-given-in-the-form-of-a-square-matrix-of-order-n-n-where-the-cells-with-value-0-represent-the-maze-s-blocked-locations-while-value-1-is-the-open-available-path-that-the-rat-can-take-to-reach-its-destination-the-rats-destination-is-at-n-1-n-1-your-task-is-to-find-all-the-possible-paths-that-the-rat-can-take-to-reach-from-source-to-destination-in-the-maze-the-possible-directions-that-it-can-take-to-move-in-the-maze-are-u-up-i-e-x-y-1-d-down-i-e-x-y-1-l-left-i-e-x-1-y-r-right-i-e-x-1-y\">You are given a starting position for a rat which is stuck in a maze at an initial point (0, 0) (the maze can be thought of as a 2-dimensional plane). The maze would be given in the form of a square matrix of order &#39;N&#39; * &#39;N&#39; where the cells with value 0 represent the maze\u2019s blocked locations while value 1 is the open/available path that the rat can take to reach its destination. The rat&#39;s destination is at (&#39;N&#39; - 1, &#39;N&#39; - 1). Your task is to find all the possible paths that the rat can take to reach from source to destination in the maze. The possible directions that it can take to move in the maze are &#39;U&#39;(up) i.e. (x, y - 1) , &#39;D&#39;(down) i.e. (x, y + 1) , &#39;L&#39; (left) i.e. (x - 1, y), &#39;R&#39; (right) i.e. (x + 1, y).</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Here, sorted paths mean that the expected output should be in alphabetical order.\n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>Given a square matrix of size 4*4 (i.e. here &#39;N&#39; = 4):\n1 0 0 0\n1 1 0 0\n1 1 0 0\n0 1 1 1 \nExpected Output:\nDDRDRR DRDDRR \ni.e. Path-1: DDRDRR and Path-2: DRDDRR\n\nThe rat can reach the destination at (3, 3) from (0, 0) by two paths, i.e. DRDDRR and DDRDRR when printed in sorted order, we get DDRDRR DRDDRR.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer &#39;N&#39;, which denotes the dimensions of the square matrix (maze).\n\nThen &#39;N&#39; lines follow. Each line contains &#39;N&#39; space-separated integers denoting the values which would either be 0 denoting a blocked path or 1 denoting the available path in the maze, respectively.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For the given maze, print the vector/list of strings representing all the possible paths that the rat can take to reach from source to destination in the maze in sorted order.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>2 &lt;= N &lt;= 5\n0 &lt;= MATRIX[i][j] &lt;= 1\n\nWhere N is the size of the square matrix.\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4\n1 0 0 0 \n1 1 0 1\n1 1 0 0\n0 1 1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>DDRDRR DRDDRR\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>The rat can reach the destination at (3, 3) from (0, 0) by two paths, i.e. DRDDRR and DDRDRR when printed in sorted order, we get DDRDRR DRDDRR.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 0\n1 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>[]\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>As no valid path exists in Sample input 2 so we return an empty list.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 149,
            "dislikes": "NA",
            "rephrased": {
                "body": "A rat is placed at the starting position (0, 0) in a square maze of size N x N. The maze is represented by a 2D matrix where '1' indicates an open path and '0' indicates a blocked path. The rat's destination is at (N-1, N-1). Find all possible paths for the rat to reach the destination from the starting point. The rat can move in four directions: Up ('U'), Down ('D'), Left ('L'), and Right ('R'). The paths should be returned in alphabetical order.",
                "constraints": [
                    "2 <= N <= 5",
                    "0 <= MATRIX[i][j] <= 1",
                    "Where N is the size of the square matrix.",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "4\n1 0 0 0 \n1 1 0 1\n1 1 0 0\n0 1 1 1",
                        "output": "DDRDRR DRDDRR",
                        "explanation": "The rat can reach the destination (3, 3) from (0, 0) via two paths: DDRDRR and DRDDRR. When sorted alphabetically, the output is DDRDRR DRDDRR."
                    },
                    {
                        "input": "2\n1 0\n1 0",
                        "output": "[]",
                        "explanation": "Since there is no valid path from (0, 0) to (1, 1), the output is an empty list."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you traverse the maze in a depth-first search fashion?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time complexity: O(3^(N^2))\n    Space Complexity: O(N^2)\n\n    where N is the size of array/list ARR.\n*/\n\nbool isValidMove(int y, int x, vector < vector < int >> & arr, vector < vector < bool >> & visited) {\n\n    if (x == -1 || x == arr.size() || y == -1 || y == arr.size() || visited[y][x] || arr[y][x] == 0) {\n        return false;\n    }\n\n    return true;\n}\n\nvoid printPathUtil(vector < vector < int >> & arr, int y, int x, string path, vector < string > & pathList, vector < vector < bool >> & visited) {\n    \n    // This will check the initial point(i.e. (0, 0)) to start the paths.\n    if (x == -1 || x == arr.size() || y == -1 || y == arr.size() || visited[y][x] || arr[y][x] == 0) {\n        return;\n    }\n\n    // If reach the last cell (n-1, n-1) then store the path and return.\n    if (x == arr.size() - 1 and y == arr.size() - 1) {\n        pathList.push_back(path);\n        return;\n    }\n\n    visited[y][x] = true;\n\n    // Try for all the 4 directions (down, left, right, up) \n    // in the given order to get the paths in lexicographical order.\n\n    if (isValidMove(y + 1, x, arr, visited)) {\n        path += \"D\";\n        printPathUtil(arr, y + 1, x, path, pathList, visited);\n        path.pop_back();\n    }\n\n    if (isValidMove(y, x - 1, arr, visited)) {\n        path += \"L\";\n        printPathUtil(arr, y, x - 1, path, pathList, visited);\n        path.pop_back();\n    }\n\n    if (isValidMove(y, x + 1, arr, visited)) {\n        path += \"R\";\n        printPathUtil(arr, y, x + 1, path, pathList, visited);\n        path.pop_back();\n    }\n\n    if (isValidMove(y - 1, x, arr, visited)) {\n        path += \"U\";\n        printPathUtil(arr, y - 1, x, path, pathList, visited);\n        path.pop_back();\n    }\n\n    // Mark the cell as unvisited for other possible paths.\n    visited[y][x] = false;\n\n}\n\nvector < string > searchMaze(vector < vector < int >> & arr, int n) {\n\n    // Vector to store the answer.\n    vector < string > possiblePaths;\n    string path = \"\";\n\n    vector < vector < bool >> visited(n, vector < bool > (n, false));\n\n    printPathUtil(arr, 0, 0, path, possiblePaths, visited);\n\n    return possiblePaths;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time complexity: O(3^(N^2))\n    Space Complexity: O(N^2))\n\n    where N is the size of array/list ARR.\n*/\n\nimport java.util.ArrayList;\n\npublic class Solution {\n\n    public static boolean isValidMove(int y, int x, int[][] arr, boolean[][] visited) {\n\n        if (x == -1 || x == arr.length || y == -1 || y == arr.length || visited[y][x] || arr[y][x] == 0) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public static void printPathUtil(int[][] arr, int y, int x, String path, ArrayList< String > pathList, boolean[][] visited) {\n        \n        // This will check the initial point(i.e. (0, 0)) to start the paths.\n        if (x == -1 || x == arr.length || y == -1 || y == arr.length || visited[y][x] || arr[y][x] == 0) {\n            return;\n        }\n\n        // If reach the last cell (n-1, n-1) then store the path and return.\n        if (x == arr.length - 1 && y == arr.length - 1) {\n            pathList.add( new String(path) );\n            return;\n        }\n\n        visited[y][x] = true;\n\n        // Try for all the 4 directions (down, left, right, up) \n        // in the given order to get the paths in lexicographical order.\n\n        if (isValidMove(y + 1, x, arr, visited)) {\n            path += \"D\";\n            printPathUtil(arr, y + 1, x, path, pathList, visited);\n            path = path.substring(0, path.length() - 1);\n        }\n\n        if (isValidMove(y, x - 1, arr, visited)) {\n            path += \"L\";\n            printPathUtil(arr, y, x - 1, path, pathList, visited);\n            path = path.substring(0, path.length() - 1);\n        }\n\n        if (isValidMove(y, x + 1, arr, visited)) {\n            path += \"R\";\n            printPathUtil(arr, y, x + 1, path, pathList, visited);\n            path = path.substring(0, path.length() - 1);\n        }\n\n        if (isValidMove(y - 1, x, arr, visited)) {\n            path += \"U\";\n            printPathUtil(arr, y - 1, x, path, pathList, visited);\n            path = path.substring(0, path.length() - 1);\n        }\n\n        // Mark the cell as unvisited for other possible paths.\n        visited[y][x] = false;\n\n    }\n\n    public static ArrayList < String > findSum(int[][] arr, int n) {\n\n        // ArrayList to store the answer.\n        ArrayList < String > possiblePaths = new ArrayList < String >();\n        String path = \"\";\n\n        boolean[][] visited = new boolean[n][n];\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n                visited[i][j] = false;\n            }\n        }\n\n        printPathUtil(arr, 0, 0, path, possiblePaths, visited);\n\n        return possiblePaths;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time complexity: O(3^(N^2))\n    Space Complexity: O(N^2)\n\n    where N is the size of array/list ARR.\n'''\n\ndef isValidMove(y, x, arr, visited):\n    \n    if x == -1 or x == len(arr) or y == -1 or y == len(arr) or visited[y][x] or arr[y][x] == 0:\n        return False\n        \n    return True\n\ndef printPathUtil(arr, y, x, path, pathList, visited):\n    \n    # This will check the initial point(i.e. (0, 0)) to start the paths.\n    if x == -1 or x == len(arr) or y == -1 or y == len(arr) or visited[y][x] or arr[y][x] == 0:\n        return\n    \n    # If reach the last cell (n-1, n-1) then store the path and return.\n    if x == len(arr) - 1 and y == len(arr) - 1:\n        pathList.append(path)\n        return\n    \n    visited[y][x] = True\n    \n    # Try for all the 4 directions (down, left, right, up)\n    # in the given order to get the paths in lexicographical order.\n    \n    if isValidMove(y + 1, x, arr, visited):\n        path += 'D'\n        printPathUtil(arr, y + 1, x, path, pathList, visited)\n        path = path[:-1]\n    \n    if isValidMove(y, x - 1, arr, visited):\n        path += 'L'\n        printPathUtil(arr, y, x - 1 , path, pathList, visited)\n        path = path[:-1]\n    \n    if isValidMove(y, x + 1, arr, visited):\n        path += 'R'\n        printPathUtil(arr, y, x + 1 , path, pathList, visited)\n        path = path[:-1]\n    \n    if isValidMove(y - 1, x, arr, visited):\n        path += 'U'\n        printPathUtil(arr, y - 1, x, path, pathList, visited)\n        path = path[:-1]\n    \n    # Mark the cell as unvisited for other possible paths.\n    visited[y][x] = False\n\n\ndef searchMaze(arr, n):\n\n    # List to store all the possible paths.\n    possiblePaths = []\n    path = \"\"\n    visited = [[False for _ in range(n)]\n                      for _ in range(n)]\n\n    printPathUtil(arr, 0, 0, path, possiblePaths, visited)\n    \n    return possiblePaths\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}