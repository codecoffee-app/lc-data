{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10460,
            "title": "Re-Formating",
            "titleSlug": "re-formating_1229400",
            "content": "<h4 id=\"you-are-given-a-string-s-and-a-dictionary-of-words-drr-of-length-m-it-is-guaranteed-that-s-does-not-contain-any-space-drr-is-a-list-of-words\">You are given a string S and a dictionary of words DRR of length \u2018M\u2019. It is guaranteed that S does not contain any space. DRR is a list of words.</h4>\n\n<h4 id=\"your-task-is-to-convert-s-into-a-document-of-space-separated-words-such-that-each-word-is-present-in-the-dictionary-drr-and-the-number-of-spaces-in-between-the-word-is-minimized-you-have-to-print-the-minimum-number-of-spaces-used\">Your task is to convert S into a document of space-separated words such that each word is present in the dictionary DRR, and the number of spaces in between the word is minimized. You have to print the minimum number of spaces used.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>S = \u201diamalice\u201d, DRR = [\u201ci\u201d, \u201cam\u201d, \u201calice\u201d, \u201ciam\u201d] \n\nHere the answer is 1, as S  can be returned as \u201ciam alice\u201d which uses only 1 space. S = \u201di am alice\u201d is also valid but it uses 2 spaces.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first line of each test case contains the string S.\n\nThe second line of each test case contains \u2018M\u2019, the length of the dictionary DRR.\n\nThe third line of each test case contains \u2018M\u2019 space-separated words denoting the elements of the array/list DRR.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case print the minimum number of spaces used to convert S to a Document for which each word is present in DRR. \n\nIf there is no way to convert S into a document them print -1.\n\nOutput for each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 1000\n1 &lt;= M &lt;= 10^4\n1 &lt;= length of DRR[i] &lt;= 20      \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\nmarginissmall\n6\nsmall all mall is in margin\nabcd\n10\na b c d e f g h i j \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n3\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h4>\n\n<pre><code>For the first test case S can be written as S = \u201dmargin is small\u201d\n\nFor the second test case S can be written as S = \u201ca b c d\u201d\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\naaaaaaaa\n1\na\ncodeninjacodeninja\n3\ncode ninja codeninja\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>7\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` and a dictionary of words `DRR` of length `M`, where `S` contains no spaces. The task is to segment `S` into a sequence of words from `DRR`, minimizing the number of spaces between the words. Return the minimum number of spaces required to form such a sequence. If no such segmentation is possible, return -1.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 1000 (Likely meant to be length of S, not explicitly stated in the problem)",
                    "1 <= M <= 10^4",
                    "1 <= length of DRR[i] <= 20",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "marginissmall\n6\nsmall all mall is in margin",
                        "output": "2",
                        "explanation": "`S` can be segmented as \"margin is small\", requiring 2 spaces."
                    },
                    {
                        "input": "abcd\n10\na b c d e f g h i j",
                        "output": "3",
                        "explanation": "`S` can be segmented as \"a b c d\", requiring 3 spaces."
                    },
                    {
                        "input": "aaaaaaaa\n1\na",
                        "output": "7",
                        "explanation": "`S` can be segmented as \"a a a a a a a a\", requiring 7 spaces."
                    },
                    {
                        "input": "codeninjacodeninja\n3\ncode ninja codeninja",
                        "output": "1",
                        "explanation": "`S` can be segmented as \"codeninja codeninja\", requiring 1 space."
                    },
                    {
                        "input": "iamalice\n4\ni am alice iam",
                        "output": "1",
                        "explanation": "`S` can be segmented as \"iam alice\", requiring 1 space."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we use recursion to solve this problem?&nbsp;</p>",
            "<p>Can we use recursion to solve this problem? And memorize already computed answers?</p>",
            "<p>Can we use iterative dynamic programming to solve for a prefix?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}