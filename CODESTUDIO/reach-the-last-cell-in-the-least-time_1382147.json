{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11606,
            "title": "Reach the last cell in the least time",
            "titleSlug": "reach-the-last-cell-in-the-least-time_1382147",
            "content": "<h4 id=\"you-are-given-an-n-x-n-matrix-grid-initially-every-cell-is-locked-and-grid-i-j-represents-the-time-at-which-the-cell-at-i-j-will-unlock-you-can-move-from-one-cell-to-another-4-dimensionally-adjacent-cell-if-and-only-if-both-cells-are-unlocked-you-can-move-through-infinite-cells-in-zero-time-also-you-cannot-leave-the-boundaries-of-the-grid\">You are given an \u2018N x N\u2019 matrix \u2018GRID\u2019. Initially, every cell is locked, and \u2018GRID[i][j]\u2019 represents the time at which the cell at \u2018(i, j)\u2019 will unlock. You can move from one cell to another 4-dimensionally adjacent cell if and only if both cells are unlocked. You can move through infinite cells in zero time. Also, you cannot leave the boundaries of the grid.</h4>\n\n<h4 id=\"if-you-start-at-the-cell-0-0-what-is-the-least-time-required-to-reach-the-last-cell-n-1-n-1\">If you start at the cell \u2018(0, 0)\u2019, what is the least time required to reach the last cell \u2018(N - 1, N - 1)\u2019.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>\u2018GRID\u2019 =\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/example-8821.png\" alt=\"example\"></p>\n\n<pre><code>We cannot reach the cell \u2018(2, 2)\u2019 until the time is \u20185\u2019. When the time is \u20185\u2019, we move along the path: \n0 -&gt; 1 -&gt; 4 -&gt; 3 -&gt; 5\n\nThe cell with value \u20181\u2019 will be unlocked when the time is \u20181\u2019.\nAt time = 1: 0 -&gt; 1\n\nSimilarly, the cell with value \u20184\u2019 is unlocked when the time is \u20184\u2019. At that time the cell with value \u20183\u2019 will also be unlocked, as it unlocks at time \u20183\u2019.    \nAt time = 4: 0 -&gt; 1 -&gt; 4 -&gt; 3\n\nThe cell with value \u20185\u2019 will be unlocked when the time is \u20185\u2019.\nAt time = 5: 0 -&gt; 1 -&gt; 4 -&gt; 3 -&gt; 5\n\nSo, the least time to reach cell \u2018(2, 2)\u2019 is \u20185\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. All elements in the \u2018GRID\u2019 are unique.\n\n2. \u2018GRID[i][j]\u2019 is a permutation of [0, 1, \u2026 , (N ^ 2) - 1].\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases. Then, the \u2018T\u2019 test cases follow.\n\nEach test case\u2019s first line contains an integer \u2018N\u2019 denoting the number of rows and columns in \u2018GRID\u2019. Then, \u2018N\u2019 lines follow.\n\nEach line contains \u2018N\u2019 space-separated integers denoting the row values of \u2018GRID\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For every test case, print a single line containing a single integer denoting the least time required to reach the cell \u2018(N - 1, N - 1)\u2019.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to input or print anything, as it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 50\n0 &lt;= Value in each element of \u2018GRID\u2019 &lt;= (N ^ 2) - 1\n\nWhere \u2018T\u2019 is the number of test cases, and \u2018N\u2019 is the number of rows and columns in \u2018GRID\u2019.\n\nTime limit: 1 second\n</code></pre>\n<h4 id=\"sample-input-1\">Sample input 1:</h4>\n\n<pre><code>2\n4\n3 4 15 14 \n12 0 10 9 \n11 8 7 6 \n13 5 2 1 \n2\n0 1 \n2 3 \n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample output 1:</h4>\n\n<pre><code>8\n3\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h4>\n\n<pre><code>Test Case 1:\n\u2018grid\u2019 = \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample1-8822.png\" alt=\"sample1\"></p>\n\n<pre><code>We cannot reach the cell \u2018(3, 3)\u2019 until the time is \u20188\u2019. When the time is \u20188\u2019, we move along the path:\n3 -&gt; 4 -&gt; 0 -&gt; 8 -&gt; 5 -&gt; 2 -&gt; 1\nSo, the least time to reach \u2018(3, 3)\u2019 is \u20188\u2019.\n\nTest Case 2:\n\u2018grid\u2019 = \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample2-8823.png\" alt=\"sample2\"></p>\n\n<pre><code>We cannot reach the cell \u2018(1, 1)\u2019 until the time is \u20183\u2019. When the time is \u20183\u2019, we move along the path:\n2 -&gt; 1 -&gt; 3\nSo, the least time to reach \u2018(1, 1)\u2019 is \u20183\u2019.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample input 2:</h4>\n\n<pre><code>2\n3\n8 7 4\n0 6 5\n1 2 3\n3\n1 2 6\n7 4 8\n5 3 0\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample output 2:</h4>\n\n<pre><code>8\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an N x N grid where each cell (i, j) has a unique unlock time grid[i][j], determine the minimum time required to travel from cell (0, 0) to cell (N-1, N-1). You can only move between 4-directionally adjacent cells if both cells are unlocked. Assume travel between unlocked adjacent cells takes zero time.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 50",
                    "0 <= Value in each element of \u2018GRID\u2019 <= (N ^ 2) - 1"
                ],
                "testcases": [
                    {
                        "input": "n = 4, grid = [[3, 4, 15, 14], [12, 0, 10, 9], [11, 8, 7, 6], [13, 5, 2, 1]]",
                        "output": "8",
                        "explanation": "We cannot reach the cell \u2018(3, 3)\u2019 until the time is \u20188\u2019. When the time is \u20188\u2019, we move along the path: 3 -> 4 -> 0 -> 8 -> 5 -> 2 -> 1 So, the least time to reach \u2018(3, 3)\u2019 is \u20188\u2019."
                    },
                    {
                        "input": "n = 2, grid = [[0, 1], [2, 3]]",
                        "output": "3",
                        "explanation": "We cannot reach the cell \u2018(1, 1)\u2019 until the time is \u20183\u2019. When the time is \u20183\u2019, we move along the path: 2 -> 1 -> 3 So, the least time to reach \u2018(1, 1)\u2019 is \u20183\u2019."
                    },
                    {
                        "input": "n = 3, grid = [[8, 7, 4], [0, 6, 5], [1, 2, 3]]",
                        "output": "8",
                        "explanation": "The path that takes us to (2,2) would be through cells that unlock at 0, 1, 2, 3, 4, 5, 6, 7, 8, so the maximum among these, which is 8 is the answer."
                    },
                    {
                        "input": "n = 3, grid = [[1, 2, 6], [7, 4, 8], [5, 3, 0]]",
                        "output": "4",
                        "explanation": "The path to reach (2,2) has the maximum unlock time of 4, considering the path [1,7,5,3,0] to be (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find if we can reach the cell \u2018(N - 1, N - 1)\u2019 for all possible time values.</p>",
            "<p>Instead of searching possible time values linearly, can we use a more efficient searching algorithm?</p>",
            "<p>Basically, you need to find the shortest path. Can you do it greedily?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}