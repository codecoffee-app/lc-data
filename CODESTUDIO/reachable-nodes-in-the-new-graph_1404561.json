{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12191,
            "title": "Reachable nodes in the new graph",
            "titleSlug": "reachable-nodes-in-the-new-graph_1404561",
            "content": "<h4 id=\"you-are-given-an-undirected-graph-with-n-nodes-labeled-from-0-to-n-1-the-graph-is-given-in-as-an-array-of-edges-where-edges-i-u-v-sz-means-there-is-an-edge-between-node-u-and-v-in-the-given-graph-create-a-new-graph-by-replacing-the-edge-between-u-and-v-with-a-chain-of-size-sz\">You are given an undirected graph with \u2018n\u2019 nodes labeled from \u20180\u2019 to \u2018n - 1\u2019. The graph is given in as an array of \u2018edges\u2019, where \u2018edges[i] = [u, v, sz]\u2019 means there is an edge between node \u2018u\u2019 and \u2018v\u2019 in the given graph. Create a new graph by replacing the edge between \u2018u\u2019 and \u2018v\u2019 with a chain of size \u2018sz\u2019.</h4>\n\n<h4 id=\"to-create-a-chain-of-size-sz-between-nodes-u-v-create-sz-new-nodes-and-sz-1-new-edges-the-new-nodes-are-x1-x2-xsz-and-the-new-edges-are-u-x1-x1-x2-x2-x3-x-sz-1-xsz-xsz-v\">To create a chain of size \u2018sz\u2019 between nodes \u2018(u, v)\u2019, create \u2018sz\u2019 new nodes and \u2018sz + 1\u2019 new edges. The new nodes are \u2018X1, X2, \u2026 , Xsz\u2019 and the new edges are \u2018(u, X1), (X1, X2), (X2, X3), \u2026 , (X(sz-1), Xsz), (Xsz, v)\u2019.</h4>\n\n<h4 id=\"a-node-is-reachable-from-node-0-if-it-s-at-a-distance-of-less-than-or-equal-to-m-edges-your-task-is-to-find-the-number-of-nodes-reachable-from-node-0-in-the-new-graph\">A node is reachable from node \u20180\u2019 if it\u2019s at a distance of less than or equal to \u2018m\u2019 edges. Your task is to find the number of nodes reachable from node \u20180\u2019 in the new graph.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>\u2018n = 3\u2019, \u2018m = 4\u2019\n\u2018edges = [ [0, 2, 8], [0, 1, 1], [1, 2, 0] ]\u2019\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/example-8928.png\" alt=\"example\"></p>\n\n<pre><code>The reachable nodes are highlighted in red color. So, the answer is \u20189\u2019. Node \u20180\u2019, itself included in the answer.  \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. For an edge \u2018[u, v, sz]\u2019, if \u2018sz = 0\u2019, then there is no chain, and \u2018(u, v)\u2019 is an edge in the new graph.\n\n2. The graph doesn\u2019t contain parallel edges or self-loops.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases. Then, the \u2018T\u2019 test cases follow.\n\nThe first line of each test case contains three integers \u2018n\u2019, \u2018m\u2019, and \u2018numOfPairs\u2019, denoting the number of nodes in the graph, the maximum allowed distance from node \u20180\u2019, and the size of the \u2018edges\u2019 array. Then, \u2018numOfPairs\u2019 lines follow.\n\nEach line contains three integers representing an element in \u2018edges\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For every test case, print a single line containing a single integer denoting the number of nodes reachable from node \u20180\u2019 in the new graph.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= n &lt;= 500  \n0 &lt;= m &lt;= 10 ^ 9\n0 &lt;= numOfPairs &lt;= min(n * (n - 1) / 2, 10^3)\n0 &lt;= edges[i].u &lt; edges[i].v &lt; n\n0 &lt;= edges[i].sz &lt;= 10^5\nEach element of \u2018edges\u2019 contains exactly three integers.\n\nWhere \u2018T\u2019 is the number of test cases, \u2018n\u2019 is the number of nodes, \u2018m\u2019 is the maximum allowed distance from node \u20180\u2019, and \u2018numOfPairs\u2019 is the size of the array \u2018edges\u2019.\n\nTime limit: 1 second\n</code></pre>\n<h4 id=\"sample-input-1\">Sample input 1:</h4>\n\n<pre><code>2\n4 3 5\n0 1 4\n1 3 0\n0 3 1\n0 2 1\n2 3 4\n3 7 2\n0 1 5\n1 2 3\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample output 1:</h4>\n\n<pre><code>11\n8\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h4>\n\n<pre><code>Test Case 1:\n\u2018n = 4\u2019, \u2018m = 3\u2019\n\u2018edges = [ [0, 1, 4], [1, 3, 0], [0, 3, 1], [0, 2, 1], [2, 3, 4] ]\u2019\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample2-8930.png\" alt=\"sample1\"></p>\n\n<pre><code>The reachable nodes are highlighted in red color. So, the answer is \u201811\u2019.\n\nTest Case 2:\n\u2018n = 3\u2019, \u2018m = 7\u2019\n\u2018edges = [ [0, 1, 5], [1, 2, 3] ]\u2019\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample1-8931.png\" alt=\"sample2\"></p>\n\n<pre><code>The reachable nodes are highlighted in red color. So, the answer is \u20188\u2019.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample input 2:</h4>\n\n<pre><code>2\n5 16 5\n1 2 4\n2 3 5\n3 4 10\n1 4 6\n2 4 1\n4 8 4\n0 1 3\n0 2 6\n1 2 4\n1 3 1\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample output 2:</h4>\n\n<pre><code>1\n18\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an undirected graph with 'n' nodes labeled from 0 to n-1. The graph is represented as an array of edges, where edges[i] = [u, v, sz] indicates an edge between nodes u and v. Transform the graph by replacing each edge (u, v) with a chain of 'sz' nodes.  This chain consists of 'sz' new nodes (X1, X2, ..., Xsz) and sz+1 edges: (u, X1), (X1, X2), ..., (X(sz-1), Xsz), (Xsz, v).  Determine the number of nodes reachable from node 0 within a maximum distance of 'm' edges in the transformed graph. Note that if sz = 0, the edge (u, v) is a direct edge in the transformed graph.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= n <= 500",
                    "0 <= m <= 10^9",
                    "0 <= numOfPairs <= min(n * (n - 1) / 2, 10^3)",
                    "0 <= edges[i].u < edges[i].v < n",
                    "0 <= edges[i].sz <= 10^5",
                    "Each element of \u2018edges\u2019 contains exactly three integers."
                ],
                "testcases": [
                    {
                        "input": "4 3 5\n0 1 4\n1 3 0\n0 3 1\n0 2 1\n2 3 4",
                        "output": "11",
                        "explanation": "n = 4, m = 3, edges = [[0, 1, 4], [1, 3, 0], [0, 3, 1], [0, 2, 1], [2, 3, 4]]. After creating chains, determine the nodes reachable from node 0 within a distance of 3 edges. The count of reachable nodes is 11."
                    },
                    {
                        "input": "3 7 2\n0 1 5\n1 2 3",
                        "output": "8",
                        "explanation": "n = 3, m = 7, edges = [[0, 1, 5], [1, 2, 3]]. After creating chains, determine the nodes reachable from node 0 within a distance of 7 edges. The count of reachable nodes is 8."
                    },
                    {
                        "input": "5 16 5\n1 2 4\n2 3 5\n3 4 10\n1 4 6\n2 4 1",
                        "output": "1",
                        "explanation": null
                    },
                    {
                        "input": "4 8 4\n0 1 3\n0 2 6\n1 2 4\n1 3 1",
                        "output": "18",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to create the new graph from \u2018edges\u2019.</p>",
            "<p>Try to find the answer using the given graph instead of creating the new graph.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}