{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8907,
            "title": "Reachable Nodes",
            "titleSlug": "reachable-nodes_920511",
            "content": "<h4 id=\"you-are-given-a-graph-with-n-nodes-and-m-unidirectional-edges-your-task-is-to-find-the-number-of-nodes-reachable-from-node-i-where-0-i-n-1\">You are given a graph with \u2018N\u2019 nodes and \u2018M\u2019 unidirectional edges. Your task is to find the number of nodes reachable from node \u2018i\u2019, where 0 &lt;= \u2018i\u2019 &lt;= \u2018N\u2019 - 1.</h4>\n\n<h4 id=\"note-a-node-u-is-said-to-be-reachable-from-node-v-if-there-exists-a-path-between-node-u-and-v\">Note: A node \u2018u\u2019 is said to be reachable from node \u2018v\u2019, if there exists a path between node\u2019 u\u2019 and \u2019v\u2019.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>For given N = 4, M = 4, \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bridge1-11402.png\" alt=\"1\"></p>\n\n<pre><code>In the above example, the number of nodes reachable from nodes 0 , 1, 2 and 3 is 4.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains one positive integer \u2018T\u2019, denoting the number of test cases, then \u2018T\u2019 test cases follows.\n\nThe first line of each test case contains two integers \u2018N\u2019 and  \u2018M\u2019, denoting the number of nodes and the number of edges.\n\nThe next \u2018M\u2019 lines of each test case contains two space-separated integers \u2019u\u2019 and \u2018v\u2019, denoting the edge between \u2018u\u2019 and \u2018v\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The first line of each test case contains an \u2018N\u2019 space separated integer, denoting the number of nodes reachable from node \u2018i\u2019, where 0 &lt;= \u2018i\u2019 &lt;= \u2018N\u2019 - 1.\n\nOutput of each test case will be printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N, M &lt;= 10 ^ 3\n0 &lt;= u, v &lt;= N - 1 \n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 4\n0 1\n1 2\n1 3\n2 3\n5 3\n0 1\n1 2\n3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4 4 4 4\n3 3 3 2 2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output1\">Explanation of Sample Output1:</h5>\n\n<pre><code>In the first test case, the graph like this: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bridge1-11402.png\" alt=\"1\"></p>\n\n<pre><code>As we can observe, The number of reachable nodes from node 0 is 4, i.e 0 to {0, 1, 2, 3}. Also the graph is completely connected. Therefore, all the nodes can be reached from all the other nodes. Hence, the answer is {4, 4, 4, 4}. \n\nIn the second test case, the graph looks like this: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/disconnected-graph-11668.png\" alt=\"1\"></p>\n\n<pre><code>As we can observe, there are two disconnected graphs - {0, 1, 2} and {3, 4}. Therefore, The number of reachable nodes from nodes 0,1 and 2 is 3 and from nodes 3 and 4 is 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 4\n0 0\n0 1\n1 3\n4 2\n2 2\n0 0\n1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3 3 2 3 2\n1 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph with 'N' nodes and 'M' edges, determine the number of nodes reachable from each node 'i' in the graph, where 0 <= 'i' < 'N'. A node 'u' is considered reachable from node 'v' if there exists a path from 'v' to 'u'. Return a vector containing the number of reachable nodes for each node.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N, M <= 10 ^ 3",
                    "0 <= u, v <= N - 1"
                ],
                "testcases": [
                    {
                        "input": "n = 4, m = 4, edges = {{0, 1}, {1, 2}, {1, 3}, {2, 3}}",
                        "output": "[4, 4, 4, 4]",
                        "explanation": "From node 0, we can reach {0, 1, 2, 3}. From node 1, we can reach {0, 1, 2, 3}. From node 2, we can reach {0, 1, 2, 3}. From node 3, we can reach {0, 1, 2, 3}."
                    },
                    {
                        "input": "n = 5, m = 3, edges = {{0, 1}, {1, 2}, {3, 4}}",
                        "output": "[3, 3, 3, 2, 2]",
                        "explanation": "From node 0, we can reach {0, 1, 2}. From node 1, we can reach {0, 1, 2}. From node 2, we can reach {0, 1, 2}. From node 3, we can reach {3, 4}. From node 4, we can reach {3, 4}."
                    },
                    {
                        "input": "n = 5, m = 4, edges = {{0, 0}, {0, 1}, {1, 3}, {4, 2}}",
                        "output": "[3, 3, 2, 3, 2]",
                        "explanation": "From node 0, we can reach {0, 1, 3}. From node 1, we can reach {0, 1, 3}. From node 2, we can reach {4, 2}. From node 3, we can reach {0, 1, 3}. From node 4, we can reach {4, 2}."
                    },
                    {
                        "input": "n = 2, m = 2, edges = {{0, 0}, {1, 1}}",
                        "output": "[1, 1]",
                        "explanation": "From node 0, we can reach {0}. From node 1, we can reach {1}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you perform dfs traversal from each node to count the number of nodes reachable from each node?</p>",
            "<p>Can you keep track of components of each node it belongs to and the count of&nbsp; nodes in each component in one dfs traversal?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}