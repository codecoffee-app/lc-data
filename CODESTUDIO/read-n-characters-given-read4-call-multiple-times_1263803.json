{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10740,
            "title": "Read N Characters Given Read4 - Call multiple times",
            "titleSlug": "read-n-characters-given-read4-call-multiple-times_1263803",
            "content": "<h4 id=\"ninja-has-been-given-a-file-file-that-can-be-read-using-a-given-method-read4-ninja-has-to-implement-a-method-read-which-reads-n-characters-from-the-file-using-the-read4-method\">Ninja has been given a file \u2018FILE\u2019 that can be read using a given method, \u2018READ4\u2019. Ninja has to implement a method \u2018READ\u2019, which reads \u2019N\u2019 characters from the \u2018FILE\u2019 using the \u2018READ4\u2019 method.</h4>\n\n<h4 id=\"how-read4-and-read-method-s-work\">How \u2018READ4\u2019 and \u2018READ\u2019 method\u2019s work:</h4>\n\n<pre><code>\u2018READ4(char \u2018BUFFER[]\u2019)\u2019\n\n 1) It reads 4 characters at a time from the \u2018FILE\u2019.\n 2) The return value of the \u2018READ4\u2019 method is the actual number of characters read.\n 3) For example, if in a \u2018FILE\u2019 only three characters are remaining, then it returns 3.\n\n\u2018READ(char \u2018BUFFER[]\u2019, int \u2018N\u2019)\u2019\n\n 1) \u2018N\u2019 represents the number of characters to be read from \u2018FILE\u2019.\n 2) In this method, you have to store your result in \u2018BUFFER\u2019.\n 3) In this method, you have to return the number of characters read from \u2018FILE\u2019.\n</code></pre>\n\n<h4 id=\"note-the-method-read-may-be-called-multiple-times\">Note: The method \u2018READ\u2019 may be called multiple times.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>\u2018FILE\u2019 = \u201cabcdef\u201d\n\nInitially file pointer \u2018FP\u2019 points to \u2018a\u2019.\n\u2018READ4(BUFFER) returns 4 and \u2018BUFFER\u2019 contains \u201cabcd\u201d, Now the \u2018FP\u2019 points to \u2018e\u2019.\n\u2018READ4(BUFFER) returns 2 and \u2018BUFFER\u2019 contains \u201cef\u201d, Now the \u2018FP\u2019 points to the end of the \u2018FILE\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains a string \u2018FILE\u2019 which represents a file that Ninja has to read.\n\nThe next line of each test case contains an integer \u2018Q\u2019, representing how many times the \u2018READ\u2019 function is called.\n\nThe next lines of each test case contain \u2018Q\u2019 space-separated integers which represent how many characters are to be read from the \u2018FILE\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the number of characters and actual characters which are read by Ninja from the \u2018FILE\u2019. \n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care \nof. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 100\n1 &lt;= |\u2019FILE\u2019| &lt;= 5000\n\u2018FILE[i]\u2019 = {\u2018a\u2019 to \u2018z\u2019}\n\nWhere \u2018T\u2019 denotes the total number of test cases, \u2018FILE\u2019  represents the file that Ninja has to read, and |\u2019FILE\u2019| represents the length of the \u2018FILE\u2019.\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\nabcdefgh\n2\n6 4\nffggdd\n4\n3 4 5 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>6 abcdef\n2 gh\n3 ffg\n3 gdd\n0  \n0\n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h4>\n\n<pre><code>For sample test case 1: \n\nIn this test case, \u2018FILE\u2019 is \u201cabcdefgh\u201d and initially the file pointer \u2018FP\u2019 points to \u2018a\u2019 (0-index). First, we have to read 6 characters from the file.\n\nFirst, we call the \u2018READ4(\u2018BUFFER\u2019)\u2019 method, it returns 4 and the \u2018BUFFER\u2019 contains \u201cabcd\u201d.\nThen we again call the \u2018READ4(\u2018BUFFER\u2019)\u2019 method, it returns 4 and now the \u2018BUFFER\u2019 contains \u201cefgh\u201d. \nThen, we print the first 6 characters of the \u2018FILE\u2019 i.e. \u201cabcedef\u201d.\n\nSecond, we have to read 4 characters from the file.\nBut there are only two characters are remaining so we print only these two characters i.e. \u201cgh\u201d.\n\nFor sample test case 2: \n\nIn this test case, \u2018FILE\u2019 is \u201cffggdd\u201d and initially the file pointer \u2018FP\u2019 \npoints to \u201cf\u201d (0-index). First, we have to read 3 characters from the file.\n\nFirst, we call the \u2018READ4(\u2018BUFFER\u2019)\u2019 method, it returns 4 and the \u2018BUFFER\u2019 contains \u201cffgg\u201d.\nThen, we print the first 3 characters of the \u2018FILE\u2019 i.e. \u201cffg\u201d.\n\nSecond, we have to read 4 characters from the file.\nNow in \u2018BUFFER\u2019, we have only one character remaining. So we again call the \u2018READ4(\u2018BUFFER\u2019)\u2019 method, it returns 2 and now the \u2018BUFFER\u2019 contains \u201cdd\u201d.\nAs we know we have to print the next characters of the \u2018FILE\u2019 but only 3 characters are remaining in the \u2018FILE\u2019 so we print these 3 characters only i.e. \u201cgdd\u201d.\n\nThird, we have to read 5 characters from the file.\nAs we know we read all the characters of the \u2018FILE\u2019. \nNow the file pointer \u2018FP\u2019 points to the end of the file so we print an empty string.\n\nFourth, we have to read 2 characters from the file.\nAs we know we read all the characters of the \u2018FILE\u2019. \nNow the file pointer \u2018FP\u2019 points to the end of the file so we print an empty string.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nabcd\n1\n2\npsadas\n2 \n3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2 ab\n3 psa\n3 das\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a `READ` method that reads `N` characters from a file, `FILE`, using a provided `READ4` method. `READ4(char 'BUFFER[]')` reads up to 4 characters from `FILE` into `BUFFER` and returns the number of characters read. `READ(char 'BUFFER[]', int 'N')` should read `N` characters from `FILE`, store them in `BUFFER`, and return the number of characters actually read. The `READ` method may be called multiple times, continuing from where the previous call left off in the `FILE`.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= |FILE| <= 5000",
                    "FILE[i] = {'a' to 'z'}",
                    "Where \u2018T\u2019 denotes the total number of test cases, \u2018FILE\u2019 represents the file that Ninja has to read, and |\u2019FILE\u2019| represents the length of the \u2018FILE\u2019.",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "abcdefgh\n2\n6 4",
                        "output": "6 abcdef\n2 gh",
                        "explanation": "Initially, the file 'FILE' is \"abcdefgh\". First, READ(6) is called. READ4 is called twice, loading \"abcd\" and \"efgh\" into the buffer. The first 6 characters, \"abcdef\", are then read and returned. Next, READ(4) is called. Only \"gh\" are left, so 2 characters are read and returned."
                    },
                    {
                        "input": "ffggdd\n4\n3 4 5 2",
                        "output": "3 ffg\n3 gdd\n0 \n0 ",
                        "explanation": "Initially, the file 'FILE' is \"ffggdd\".\n1. READ(3): READ4 returns \"ffgg\". \"ffg\" is read and returned.\n2. READ(4): \"g\" remains from the previous READ4. READ4 returns \"dd\". \"gdd\" is read and returned (only 3 chars available).\n3. READ(5): No characters are left, so 0 is read and returned.\n4. READ(2): No characters are left, so 0 is read and returned."
                    },
                    {
                        "input": "abcd\n1\n2",
                        "output": "2 ab",
                        "explanation": null
                    },
                    {
                        "input": "psadas\n2 \n3 4",
                        "output": "3 psa\n3 das",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of the Brute Force Approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}