{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7799,
            "title": "Rearrange Linked List",
            "titleSlug": "rearrange-linked-list_764146",
            "content": "<h4 id=\"you-have-been-given-a-singly-linked-list-in-the-form-of-l1-l2-l3-ln-your-task-is-to-rearrange-the-nodes-of-this-list-to-make-it-in-the-form-of-l1-ln-l2-ln-1-and-so-on-you-are-not-allowed-to-alter-the-data-of-the-nodes-of-the-given-linked-list\">You have been given a singly Linked List in the form of &#39;L1&#39; -&gt; &#39;L2&#39; -&gt; &#39;L3&#39; -&gt; ... &#39;Ln&#39;. Your task is to rearrange the nodes of this list to make it in the form of &#39;L1&#39; -&gt; &#39;Ln&#39; -&gt; &#39;L2&#39; -&gt; &#39;Ln-1&#39; and so on. You are not allowed to alter the data of the nodes of the given linked list.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>If the given linked list is 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL.\n\nThen rearrange it into 1 -&gt; 5 -&gt; 2 -&gt; 4 -&gt; 3 -&gt; NULL. \n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases. Then the test case follows.\n\nThe only line of each test case contains the elements of the singly linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, Print a single line containing the linked list in the specified form. The elements of the linked list must be separated by a single space and terminated by -1.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 10\n0 &lt;= &#39;L&#39; &lt;= 1000\n1 &lt;= data &lt;= 10 ^ 9 and data != -1\n\nWhere \u2018T\u2019 is the number of test-cases and \u2018L\u2019 is the number of nodes in the Linked List, and \u2018data\u2019 is the data in each node of the list.\n\nTime Limit: 1 sec.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Try to solve this problem in O(N) time complexity and O(1) space complexity.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1 2 3 4 5 6 -1\n1 2 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 6 2 5 3 4 -1\n1 2 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for sample 1:</h5>\n\n<pre><code>For the first test case, we have 1 as the starting element followed by 6, 2, 5, 3 and 4 respectively in the linked list after rearrangement.\n\nFor the second test case, we will get the same linked list after rearrangement, Therefore 1 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2 4 6 8 10 -1\n-1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2 10 4 8 6 -1\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 42,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a singly linked list 'L1' -> 'L2' -> 'L3' -> ... 'Ln'. Rearrange the nodes of this list to form 'L1' -> 'Ln' -> 'L2' -> 'Ln-1' and so on, without altering the data of the nodes.",
                "constraints": [
                    "1 <= 'T' <= 10",
                    "0 <= 'L' <= 1000",
                    "1 <= data <= 10 ^ 9 and data != -1",
                    "Where \u2018T\u2019 is the number of test-cases and \u2018L\u2019 is the number of nodes in the Linked List, and \u2018data\u2019 is the data in each node of the list.",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 5 6 -1\n1 2 -1",
                        "output": "1 6 2 5 3 4 -1\n1 2 -1",
                        "explanation": "For the first test case, the rearranged linked list is 1 -> 6 -> 2 -> 5 -> 3 -> 4 -> NULL.  For the second test case, the rearranged linked list remains the same: 1 -> 2 -> NULL."
                    },
                    {
                        "input": "2 4 6 8 10 -1\n-1",
                        "output": "2 10 4 8 6 -1\n-1",
                        "explanation": "For the first test case, the rearranged linked list is 2 -> 10 -> 4 -> 8 -> 6 -> NULL. For the second test case, the input is an empty linked list, so the output is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Naively extract nodes from the list and rearrange them.</p>",
            "<p>As we can see the final output is an alternatively merged form of two linked lists. Can you find those two linked lists we need to merge them?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}