{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9298,
            "title": "Rearrange string",
            "titleSlug": "rearrange-string_982765",
            "content": "<h4 id=\"you-are-given-a-string-s-your-task-is-to-rearrange-the-characters-of-a-string-s-such-that-it-does-not-contain-any-two-adjacent-characters-which-are-the-same\">You are given a string \u201cS\u201d. Your task is to rearrange the characters of a string \u201cS\u201d, such that it does not contain any two adjacent characters which are the same.</h4>\n\n<h4 id=\"if-it-is-possible-to-rearrange-the-string-s-then-print-any-possible-arrangement-else-print-not-possible-without-quotes\">If it is possible to rearrange the string \u201cS\u201d, then print any possible arrangement. else, print \u201cnot possible\u201d without quotes.</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>For a string  \u201cqaacde\u201d, This string has two same adjacent characters.\nSo, one possible way to rearrange the string is \u201cqacade\u201d. Now, this string does not have two adjacent characters that are the same. \n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \n\nThen the T test cases follow.\n\nThe first line of each test case contains a string S.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, the output will be \u201cYes\u201d if you have returned the correct answer, else it will be \u201cNo\u201d.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10    \n0 &lt;= |S| &lt;= 10^5 \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2 \ncoding\nabaab\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>Yes\nYes\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>For the first test case, the given string is \u201ccoding\u201d. This string does not have two adjacent characters that are the same. So if we return \u201ccoding&quot;, then we will get an output as \u201cYes\u201d.\n\nFor the second test case, the given string is \u201cabaab\u201d. This string has two adjacent characters that are the same i.e. abaab,  So we can rearrange the string as \u201cababa\u201d.Hence we return \u201cababa\u201d, then we will get an output as &quot;Yes\u201d.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\nbbbbbb\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>Yes\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>For the first test case, the given string is \u201cbbbbbb\u201d. No matter how you rearrange characters of string , it will always remain the same as bbbbbb.So we return \u201cnot possible\u201d as an answer, then we will get an output as \u2018Yes\u201d.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 27,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S', rearrange its characters such that no two adjacent characters are the same. If a rearrangement satisfying this condition is possible, return any such arrangement. Otherwise, return \"not possible\". Implement the function `reArrangeString(string &s)` to achieve this.",
                "constraints": [
                    "1 <= T <= 10",
                    "0 <= |S| <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "s = coding",
                        "output": "coding",
                        "explanation": "The input string 'coding' already satisfies the condition, as no two adjacent characters are the same. Therefore, returning it as is is a valid solution."
                    },
                    {
                        "input": "s = abaab",
                        "output": "ababa",
                        "explanation": "The input string 'abaab' has adjacent identical characters. A valid rearrangement is 'ababa', where no two adjacent characters are the same."
                    },
                    {
                        "input": "s = bbbbbb",
                        "output": "not possible",
                        "explanation": "The input string 'bbbbbb' consists of only the character 'b'. No matter how it's rearranged, there will always be adjacent 'b's. Therefore, a valid rearrangement is not possible."
                    },
                    {
                        "input": "s = qaacde",
                        "output": "qacade",
                        "explanation": "The input string 'qaacde' has two adjacent 'a's. One possible rearrangement that satisfies the condition is 'qacade'."
                    },
                    {
                        "input": "s = aaabbc",
                        "output": "abaca",
                        "explanation": "The input string 'aaabbc' has duplicate characters in different counts. One possible output is 'abaca', where no two adjacent characters are the same."
                    },
                    {
                        "input": "s = a",
                        "output": "a",
                        "explanation": "The input string contains only one character. This satisfies the condition as there is no adjacent character."
                    },
                    {
                        "input": "s = aabb",
                        "output": "abab",
                        "explanation": "The input string 'aabb' has two adjacent characters which are the same. The rearranged String 'abab' ensures that no two adjacent characters are the same"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a solution to check all possible rearrangements</p>",
            "<p>Think of a solution using greedy with the max heap.</p>",
            "<p>Think of a solution using sorting and two pointers.</p>",
            "<p>Think of a solution using hashing.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}