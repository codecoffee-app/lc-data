{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9385,
            "title": "Rearrange String",
            "titleSlug": "rearrange-string_985247",
            "content": "<h4 id=\"you-are-given-a-string-of-lowercase-characters-your-task-is-to-rearrange-reorder-the-string-in-such-a-way-that-no-two-adjacent-characters-are-the-same\">You are given a string of lowercase characters. Your task is to rearrange (reorder)  the string in such a way that no two adjacent characters are the same.</h4>\n\n<h4 id=\"you-have-to-return-the-rearranged-string-if-there-exists-more-than-one-solution-you-can-return-any-of-them-if-there-is-no-such-string-you-have-to-return-no-solution-if-your-returned-value-is-correct-the-program-will-print-correct-else-incorrect\">You have to return the rearranged string. If there exists more than one solution you can return any of them.If there is no such string you have to return \u201cNO SOLUTION\u201d. If your returned value is correct the program will print \u2018CORRECT\u2019 else \u2018INCORRECT\u2019.</h4>\n\n<h4 id=\"for-example\">For example :</h4>\n\n<pre><code>If we are given a string &quot;aabb&quot;, then the possible solutions are:\n\n(i) abab\n(ii) baba\n\nWe can see no two adjacent characters are the same in both strings.\n\nSo both (i) and (ii) are valid solutions.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer &#39;T&#39;, representing the number of test cases.\n\nThe first and only line of each test case contains a string &#39;STR&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, return the resultant string if it is possible to rearrange string else return &quot;NO SOLUTION&quot;. Accordingly, CORRECT or INCORRECT will get printed on the screen.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^4\n\nWhere \u2018N\u2019 is the length of the string.\n\nTime limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>3\naac \nazzz\nabbc\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>aca\nNO SOLUTION\nabcb\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>In test case 1, there exists only one solution which is \u2018aca\u2019. We can see no two adjacent characters are the same.\n\nIn test case 2, For the second string there exists no solution.\n\nIn test case 3, there exists more than one solution out of which \u2018abcb\u2019 is also a possible solution.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>3\nbbb \nxyz\nyaxx\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>NO SOLUTION\nxyz\naxyx\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h4>\n\n<pre><code>In test case 1, there exists no solution.\n\nIn test case 2, there exists more than one solution out of which \u2018xyz\u2019 is a possible solution.\n\nIn test case 3, there exists more than one solution out of which \u2018axyx\u2019 is a possible solution.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 133,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string of lowercase characters, rearrange the characters such that no two adjacent characters are the same. Return the rearranged string. If multiple solutions exist, return any one of them. If no such rearrangement is possible, return \"NO SOLUTION\".",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 10^4 (Length of the string)",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "aac",
                        "output": "aca",
                        "explanation": "The string 'aac' can be rearranged as 'aca' where no two adjacent characters are the same."
                    },
                    {
                        "input": "azzz",
                        "output": "NO SOLUTION",
                        "explanation": "The string 'azzz' cannot be rearranged such that no two adjacent characters are the same. The character 'z' appears too many times."
                    },
                    {
                        "input": "abbc",
                        "output": "abcb",
                        "explanation": "The string 'abbc' can be rearranged as 'abcb' where no two adjacent characters are the same."
                    },
                    {
                        "input": "bbb",
                        "output": "NO SOLUTION",
                        "explanation": "The string 'bbb' cannot be rearranged such that no two adjacent characters are the same, as the character 'b' appears too many times."
                    },
                    {
                        "input": "xyz",
                        "output": "xyz",
                        "explanation": "The string 'xyz' already satisfies the condition that no two adjacent characters are the same."
                    },
                    {
                        "input": "yaxx",
                        "output": "axyx",
                        "explanation": "The string 'yaxx' can be rearranged as 'axyx' where no two adjacent characters are the same."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about the greedy approach like will it be helpful if we start making a new string and at each step, we know the current most frequent element.</p>",
            "<p>Think how the frequency of the most frequent element can help to find out whether a solution exists or not and even can help to find out the solution.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    Where 'N' is the number of chracters in string.\n*/\n\nstring rearrangeString(string &str) {\n    // Store the frequecy of characters.\n    vector < int > hash(26, 0);\n    int mostFreq = 0;\n    int len = str.size();\n    // To traverse in hash array.\n    int index = 0;\n    // The resultant string.   \n    char ans[len];\n    // To iterate the ans array.\n    int itrAns = 0;\n\n    for (int i = 0; i < len; i++) {\n        index = str[i] - 'a';\n        hash[index] += 1;\n        if (hash[index] > hash[mostFreq]) {\n            mostFreq = index;\n        }\n    }\n    // No soluton exist.\n    if (hash[mostFreq] > (len + 1) / 2) {\n        return \"NO SOLUTION\";\n    }\n\n    int temp = hash[mostFreq];\n    // Filling the even positions (0 Based indexing) with mostFreq Element.\n    itrAns = 0;\n    while (temp--) {\n        ans[itrAns] = 'a' + mostFreq;\n        itrAns += 2;\n        hash[mostFreq] -= 1;\n    }\n\n    // Filling the remaining positions.\n    for (int j = 0; j < 26; j++) {\n\n        while (hash[j]) {\n            // If all the even positions got filled start filling odd.\n            if (itrAns >= str.size()) {\n                itrAns = 1;\n            }\n            ans[itrAns] = ('a' + j);\n            hash[j]--;\n            itrAns += 2;\n        }\n    }\n    string finalAns;\n    for (int i = 0; i < len; i++) {\n        finalAns += ans[i];\n    }\n    return finalAns;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    Where 'N' is the number of chracters in string.\n\"\"\"\n\ndef rearrangeString(str):\n    # Store the frequecy of chracters.\n    hash = [0 for i in range(26)] \n    mostFreq = 0\n    leng = len(str)\n\n    #  To traverse in hash array.\n    index = 0         \n    #  The resultant string.\n    ans = ['a' for i in range(leng)]\n    # To iterate the ans array.\n    itrAns=0\n\n    for i in range(leng):\n        index = (ord(str[i]) - ord('a')) % 26\n        hash[index] += 1\n        if(hash[index] > hash[mostFreq]):\n            mostFreq = index\n        \n    # No soluton exist.\n    if(hash[mostFreq] > ((leng + 1) // 2)): \n            return \"NO SOLUTION\"\n        \n    temp = hash[mostFreq]\n    # Filling the even positions (0 Based indexing) with mostFreq Element.\n    itrAns = 0\n    while(temp > 0):\n        ans[itrAns] = chr(ord('a') + mostFreq)\n        itrAns += 2\n        hash[mostFreq] -= 1\n        temp -= 1\n    \n    # Filling the remaining positions.\n    for j in range(26): \n        while(hash[j] > 0): \n            if(itrAns >= len(str)): \n                # If all the even positions got filled start filling odd.\n                itrAns = 1\n            ans[itrAns] = chr(ord('a') + j)\n            hash[j] -= 1\n            itrAns += 2\n\n    finalAns = \"\"\n    for i in range(leng):\n        finalAns += ans[i]\n    \n    return finalAns\n\ndef checker(str, ans):\n    hash = [0 for i in range(26)]\n    leng = len(str)\n    mostFreq=0\n\n    if((len(ans) != leng) and (ans != \"NO SOLUTION\")):\n        return False\n\n    for i in range(leng):\n        index = (ord(str[i]) - ord('a')) % 26\n        hash[index] += 1\n        if(hash[index] > hash[mostFreq]):\n            mostFreq = index\n\n    if((hash[mostFreq] > (leng + 1) // 2) and (ans == \"NO SOLUTION\")):\n        return True\n\n    if(hash[mostFreq] > (leng + 1) // 2):\n        return False\n   \n    for i in range(leng):\n        hash[ord(ans[i]) - ord('a')] -= 1\n\n    for i in range(26):\n        if(hash[i] != 0):\n            return False\n    \n    for i in range(leng-1):\n        if(ans[i] == ans[i+1]):\n            return False\n   \n    return True\n    \n# Main.\nt = int(input())\nfor xx in range(t):\n    str = input()\n    result = rearrangeString(str)\n    if(checker(str,result)):\n        print(\"CORRECT\")\n    else:\n        print(\"INCORRECT\")\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\n\tTime Complexity: O(N)\n\tSpace Complexity: O(1)\n\n\tWhere 'N' is the number of characters in string.\n*/\n\npublic class Solution {\n\tpublic static String rearrangeString(String str) {\n\t\t// Store the frequency of characters.\n\t\tint[] hash = new int[26];\n\t\tint mostFreq = 0;\n\t\tint len = str.length();\n\t\t// To traverse in hash array.\n\t\tint index; \n\t\t// The resultant string. \n\t\tchar[] ans = new char[len]; \n\t\t// To iterate the ans array.\n\t\tint itrAns; \n\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tindex = str.charAt(i) - 'a';\n\t\t\thash[index] += 1;\n\t\t\tif (hash[index] > hash[mostFreq]) {\n\t\t\t\tmostFreq = index;\n\t\t\t}\n\t\t}\n\t\t// No solution exist.\n\t\tif (hash[mostFreq] > (len + 1) / 2) {\n\t\t\treturn \"NO SOLUTION\";\n\t\t}\n\n\t\tint temp = hash[mostFreq];\n\t\t// Filling the even positions (0 Based indexing) with mostFreq Element.\n\t\titrAns = 0;\n\t\twhile (temp-- > 0) {\n\t\t\tans[itrAns] = (char) ((int) 'a' + mostFreq);\n\t\t\titrAns += 2;\n\t\t\thash[mostFreq] -= 1;\n\t\t}\n\n\t\t// Filling the remaining positions.\n\t\tfor (int j = 0; j < 26; j++) {\n\t\t\twhile (hash[j] > 0) {\n\t\t\t\t// If all the even positions got filled start filling odd.\n\t\t\t\tif (itrAns >= str.length()) {\n\t\t\t\t\titrAns = 1;\n\t\t\t\t}\n\t\t\t\tans[itrAns] = (char) ((int) 'a' + j);\n\t\t\t\thash[j]--;\n\t\t\t\titrAns += 2;\n\t\t\t}\n\t\t}\n\t\tStringBuilder result = new StringBuilder();\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tresult.append(ans[i]);\n\t\t}\n\t\treturn result.toString();\n\t}\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}