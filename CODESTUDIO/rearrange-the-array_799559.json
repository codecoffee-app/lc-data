{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8019,
            "title": "Rearrange The Array",
            "titleSlug": "rearrange-the-array_799559",
            "content": "<h4 id=\"you-are-given-an-array-list-num-of-integers-you-are-supposed-to-rearrange-the-elements-of-the-given-num-so-that-after-rearranging-the-given-array-list-there-are-no-two-adjacent-elements-present-in-the-rearranged-num-which-will-be-the-same\">You are given an array/list &#39;NUM&#39; of integers. You are supposed to rearrange the elements of the given &#39;NUM&#39; so that after rearranging the given array/list there are no two adjacent elements present in the rearranged &#39;NUM&#39; which will be the same.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Input: NUM[] = {1,1,1,2,2,2} \nOutput: {1,2,1,2,1,2}\nNote: {2,1,2,1,2,1} is also valid because there are no two adjacent which are the same.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains an Integer &#39;N&#39; denoting the size of the array/list.\n\nThe second line of each test case contains &#39;N&#39; space-separated Integers denoting the elements of the array/list.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case/query, if it is possible to rearrange then print \u201cYES\u201d else print \u201cNO\u201d in separate lines. And if the output given by the user is wrong then print \u201cInvalid Output\u201d.\n\nIf it is possible to rearrange then return any right arrangement of the given array/list otherwise put a single integer INT_MIN in the array/list and return that.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10 ^ 4\n-10 ^ 9 &lt;= NUM[i] &lt;= 10 ^ 9\n\nWhere &#39;N&#39; is the size of the given array/list and, NUM[i] denotes the i-th element in the array/list.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5\n10 10 10 32 32\n6\n89 47 89 47 42 21\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>YES\nYES\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">Explanation to Sample Input 1 :</h5>\n\n<pre><code>For the first test case, We can put 32 in between 10 and arrangement looks like. {10,32,10,32,10}.\n\nFor the second test case, We have to arrange only 47 and 89 because the rest of the element is unique in itself. So one arrangement looks like { 89, 47, 89, 47, 42, 21}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3\n5\n10 7 21 5 1\n6\n21 21 21 12 12 21\n6\n10 10 10 20 20 20\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>YES\nNO\nYES\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-2\">Explanation to Sample Input 2 :</h5>\n\n<pre><code>For the first test case, all the elements have the same frequency, so you can return any arrangement of those elements, i.e. {1, 7, 21, 5, 10}.\n\nFor the second test case, we can not rearrange the given array/list because after rearranging {21,12,21,12}, we will be stuck with two 21. There is no way to arrange them.\n\nFor the third test case, we can put all the 10 in between 20. So there will be no such adjacent existence which will be the same.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 26,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, rearrange the elements such that no two adjacent elements are the same. Determine if such a rearrangement is possible and, if so, provide one valid rearrangement. If it is not possible to rearrange the array, return a specific indicator value.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 10^4 (Size of the array/list)",
                    "-10^9 <= NUM[i] <= 10^9 (Value of each element)",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "5\n10 10 10 32 32",
                        "output": "YES",
                        "explanation": "A possible rearrangement is {10, 32, 10, 32, 10}. The goal is to place the 32s between the 10s to avoid adjacent duplicates."
                    },
                    {
                        "input": "6\n89 47 89 47 42 21",
                        "output": "YES",
                        "explanation": "A possible rearrangement is {89, 47, 89, 47, 42, 21}. The duplicate 89 and 47 can be interleaved, while the unique 42 and 21 can be placed anywhere."
                    },
                    {
                        "input": "5\n10 7 21 5 1",
                        "output": "YES",
                        "explanation": "Since all elements have unique values, any arrangement is valid. For example: {1, 7, 21, 5, 10}."
                    },
                    {
                        "input": "6\n21 21 21 12 12 21",
                        "output": "NO",
                        "explanation": "It is impossible to rearrange this array without adjacent duplicate elements.  There are too many instances of '21'. After arranging the '12's between '21' we're still left with consecutive '21's."
                    },
                    {
                        "input": "6\n10 10 10 20 20 20",
                        "output": "YES",
                        "explanation": "A possible rearrangement is {10, 20, 10, 20, 10, 20} This arrangement alternates 10 and 20 which prevents any adjacent duplicate values."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think some greedy approach will work?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}