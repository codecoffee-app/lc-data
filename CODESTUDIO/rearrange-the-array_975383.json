{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9112,
            "title": "Rearrange The Array",
            "titleSlug": "rearrange-the-array_975383",
            "content": "<h4 id=\"you-are-given-an-array-list-num-of-integers-you-are-supposed-to-rearrange-the-elements-of-num-such-that-no-two-adjacent-elements-will-be-the-same-or-find-out-if-it-not-possible\">You are given an array/list NUM of integers. You are supposed to rearrange the elements of NUM such that no two adjacent elements will be the same or find out if it not possible.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Input: arr[] = {1,1,1,2,2,2} \nOutput: {1,2,1,2,1,2}\n\nNote: {2,1,2,1,2,1} is also valid because there are no two adjacent elements which are the same.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains an Integer &#39;N&#39; denoting the size of the array/list.\n\nThe second line of each test case contains &#39;N&#39; space-separated Integers denoting the elements of the array/list.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case/query, If it is possible to rearrange then print \u201cYES\u201d else print \u201cNO\u201d in separate lines. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n-10^9 &lt;= NUM[i] &lt;= 10^9\n\nWhere &#39;N&#39; is the size of the given array/list and, NUM[i] denotes the i-th element in the array/list.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5\n10 10 10 32 32\n6\n89 47 89 47 42 21\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>YES\nYES\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">Explanation to Sample Input 1 :</h5>\n\n<pre><code>For the first test case, We can put 32 in between 10 and arrangement looks like. {10,32,10,32,10}.\n\nFor the second test case, We have to arrange only 47 and 89 because the rest of the element is unique in itself. So one arrangement looks like { 89, 47, 89, 47, 42, 21}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3\n5\n10 7 21 5 1\n6\n21 21 21 12 12 21\n6\n10 10 10 20 20 20\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>YES\nNO\nYES\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-2\">Explanation to Sample Input 2 :</h5>\n\n<pre><code>For the first test case, all the elements have the same frequency, so you can return any arrangement of those elements, i.e. {1, 7, 21, 5, 10}.\n\nFor the second test case, we can not rearrange the given array/list because after rearranging {21,12,21,12}, we will be stuck with two 21. There is no way to arrange them.\n\nFor the third test case, we can put all the 10 in between 20. So there will be no such adjacent existence which will be the same.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, rearrange the elements such that no two adjacent elements are the same. Determine if such a rearrangement is possible.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 5000 (Size of the array)",
                    "-10^9 <= NUM[i] <= 10^9 (Value range of elements)"
                ],
                "testcases": [
                    {
                        "input": "5\n10 10 10 32 32",
                        "output": "YES",
                        "explanation": "It is possible to rearrange the array such that no two adjacent elements are the same. For example, {10, 32, 10, 32, 10} is a valid rearrangement."
                    },
                    {
                        "input": "6\n89 47 89 47 42 21",
                        "output": "YES",
                        "explanation": "It is possible to rearrange the array such that no two adjacent elements are the same. For example, {89, 47, 89, 47, 42, 21} is a valid rearrangement."
                    },
                    {
                        "input": "5\n10 7 21 5 1",
                        "output": "YES",
                        "explanation": "All elements have the same frequency, so any arrangement is valid. For example, {10, 7, 21, 5, 1}."
                    },
                    {
                        "input": "6\n21 21 21 12 12 21",
                        "output": "NO",
                        "explanation": "It is not possible to rearrange the array such that no two adjacent elements are the same. After placing the 12's, we are left with two 21's at the end that can't be separated."
                    },
                    {
                        "input": "6\n10 10 10 20 20 20",
                        "output": "YES",
                        "explanation": "It is possible to rearrange the array such that no two adjacent elements are the same. For example, {10, 20, 10, 20, 10, 20} is a valid rearrangement."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think some greedy approach will work?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}