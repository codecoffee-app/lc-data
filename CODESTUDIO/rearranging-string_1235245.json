{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10623,
            "title": "Rearranging String",
            "titleSlug": "rearranging-string_1235245",
            "content": "<h4 id=\"you-have-been-given-two-strings-s-and-w-you-need-to-rearrange-s-to-obtain-w-using-the-following-operations\">You have been given two strings \u2018S\u2019 and \u2018W\u2019. You need to rearrange \u2018S&#39; to obtain \u2018W\u2019 using the following operations:-</h4>\n\n<h4 id=\"if-the-length-of-the-string-is-greater-than-1\"><ul>If the length of the string is greater than 1:</h4>\n\n<h4 id=\"divide-the-string-into-two-non-empty-strings-x-and-y-such-that-s-x-y\"><li>Divide the string into two non-empty strings \u2018X\u2019 and \u2018Y\u2019 such that \u2018S\u2019 = \u2018X\u2019 + \u2018Y\u2019.</li></h4>\n\n<h4 id=\"you-can-either-swap-two-substrings-or-keep-them-in-the-same-order-i-e-after-this-operation-either-s-x-y-or-s-y-x\"><li>You can either swap two substrings or keep them in the same order, i.e., after this operation either S = \u2018X\u2019 + \u2018Y\u2019 or S = \u2019Y\u2019 + \u2018X\u2019. </li></h4>\n\n<h4 id=\"apply-the-first-step-recursively-on-x-and-y\"><li>Apply the first step recursively on \u2018X\u2019 and \u2018Y\u2019. </li></ul></h4>\n\n<h4 id=\"if-the-length-of-the-string-is-1-then-stop\"><ul>If the length of the string is 1 then stop.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>If \u2018S\u2019= \u201cgreat\u201d and \u2018W\u2019= \u201ctagre\u201d, \u2018S\u2019 can be rearranged to form \u2018W\u2019.\n\n\u2018S\u2019 = \u201cgre\u201d + \u201cat\u201d (We choose to swap \u2018X\u2019 &amp; \u2018Y\u2019)\n\u2018S\u2019 = \u201cat\u201d + \u201cgre\u201d \nNow letting \u201cgre\u201d as it is and applying operation on \u201cat\u201d.\n\u2018S\u2019 = \u201ca\u201d + \u201ct\u201d + \u201cgre\u201d\nSwapping \u201ca\u201d and \u201ct\u201d\n\u2018S\u2019 = \u201ct\u201d + \u201ca\u201d + \u201cgre\u201d\nTherefore \u2018S\u2019 can be rearranged into \u2018W\u2019. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Both strings are of the same length and operations can only be applied to string \u2018S\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the length of the string \u2018S\u2019 and \u2018W&#39;.\n\n The next line of the test case contains two space-separated strings \u2018S\u2019 and \u2018W\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case print \u2018True\u2019 if \u2018S\u2019 can be rearranged to form \u2018W\u2019 else print \u2018False\u2019. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 20\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\nabcde edabc\n5\ngreat bagre\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h4>\n\n<pre><code>Test case 1:\nWe can break \u201cabcde\u201d into \u201cabc\u201d and \u201cde\u201d. We swap two strings now we recursively apply the operation on \u201cabc\u201d and \u201cde\u201d. Since we want \u201cabc\u201d to be equivalent to \u201cabc\u201d we can leave it as it is. We will break \u201cde\u201d into \u201cd\u201d and \u201ce\u201d. We swap two strings because we want them to be equivalent. Finally, we have \u201cedabc\u201d.\n\nTherefore the answer is \u201cTrue\u201d.\n\nTest case 2:\n\n\u2018s\u2019 does not contain \u2018b\u2019 whereas \u2018w\u2019 contains \u2018b\u2019. Therefore it is impossible to rearrange \u2018s\u2019 to form \u2018w\u2019.\n\nTherefore the answer is \u201cFalse\u201d.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1\nb b\n2\nab bac\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2:</h4>\n\n<pre><code>Test case 1:\nThe given strings are same only and therefore the answer is \u201cTrue\u201d.\n\nTest case 2:\n\u2018s\u2019 does not contain \u2018c\u2019 whereas \u2018w\u2019 contains \u2018c\u2019. Therefore it is impossible to rearrange \u2018s\u2019 to form \u2018w\u2019. Therefore the answer is \u201cFalse\u201d.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, 'S' and 'W', of the same length, determine if 'S' can be rearranged to form 'W' using a series of operations. The allowed operations are as follows:\n\n1.  If the length of the string is greater than 1, divide the string into two non-empty substrings 'X' and 'Y' such that 'S' = 'X' + 'Y'.\n2.  You can either swap 'X' and 'Y' or keep them in the same order, resulting in 'S' = 'X' + 'Y' or 'S' = 'Y' + 'X'.\n3.  Apply steps 1 and 2 recursively on 'X' and 'Y'.\n\nIf the length of the string is 1, stop.\n\nNote: Operations can only be applied to string 'S'.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 20",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "5\nabcde edabc",
                        "output": "True",
                        "explanation": "We can break \u201cabcde\u201d into \u201cabc\u201d and \u201cde\u201d. Swapping the strings, we get \u201cdeabc\u201d. Recursively applying the operation on \u201cabc\u201d and \u201cde\u201d respectively , we can achieve the target string 'edabc'. Therefore, the answer is 'True'."
                    },
                    {
                        "input": "5\ngreat bagre",
                        "output": "False",
                        "explanation": "The string 'S' does not contain the character 'b', while the string 'W' does. Therefore, it is impossible to rearrange 'S' to form 'W'. Hence the answer is 'False'."
                    },
                    {
                        "input": "1\nb b",
                        "output": "True",
                        "explanation": "The given strings are identical, so the answer is 'True'."
                    },
                    {
                        "input": "2\nab bac",
                        "output": "False",
                        "explanation": "The string 'S' does not contain the character 'c', while the string 'W' does. Therefore, it's impossible to rearrange 'S' to form 'W', hence the answer is 'False'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to iterate all possible combinations.</p>",
            "<p>Try to store the recursive calls answer and use it when required.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}