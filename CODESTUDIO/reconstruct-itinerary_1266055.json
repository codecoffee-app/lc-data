{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10822,
            "title": "Reconstruct Itinerary",
            "titleSlug": "reconstruct-itinerary_1266055",
            "content": "<h4 id=\"you-are-given-a-matrix-of-flight-tickets-where-the-ith-row-represents-i-th-flight-ticket-tickets-i-source-destination-represents-that-there-is-a-one-way-flight-starting-from-the-city-source-and-ending-at-city-destination-all-the-flight-tickets-belong-to-a-man-who-is-initially-in-city-del\">You are given a matrix of flight &#39;TICKETS&#39;, where the &#39;i&#39;th row represents &#39;i\u2019th flight ticket. &#39;TICKETS&#39;[i] = [SOURCE, DESTINATION] represents that there is a one-way flight starting from the city &#39;SOURCE&#39; and ending at city &#39;DESTINATION&#39;. All the flight tickets belong to a man who is initially in city &quot;DEL&quot;.</h4>\n\n<h4 id=\"you-are-supposed-to-reconstruct-the-journey-satisfying-the-following-conditions\">You are supposed to reconstruct the journey satisfying the following conditions:</h4>\n\n<h4 id=\"1-he-should-begin-his-journey-from-del\">1. He should begin his journey from \u201cDEL\u201d.</h4>\n\n<h4 id=\"2-he-should-use-all-the-tickets-and-complete-the-journey\">2. He should use all the tickets and complete the journey.</h4>\n\n<h4 id=\"3-he-must-use-all-the-tickets-only-once\">3. He must use all the tickets only once.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. Journey means the order in which the cities will be visited.\n\n2. The given tickets have at least one itinerary.\n\n3. If multiple valid itineraries are possible, then return the itinerary that is a lexicographically smallest itinerary.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. \n\nThe first line of each test case contains integer \u2018N\u2019, which denotes the number of rows of the matrix \u2018TICKET\u2019.\n\nThe next &#39;N&#39; lines contain two strings, \u2018TICKET\u2019[i][0] and \u2018TICKET\u2019[i][1], denoting that there is a flight from \u2018TICKET\u2019[i][0] to \u2018TICKET\u2019[i][1].\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The output of each test case contains the order of cities that he should visit to satisfy the given conditions separated by space. \n</code></pre>\n\n<p>The output of each test case is printed in a separate line.</p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 20000\n0 &lt;= M &lt;= 20000\nTICKET[i][0] != TICKET[i][1], for any valid &#39;i&#39;.\n\nWhere &#39;M&#39; denotes the size of the given matrix \u2018TICKET\u2019.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n3\nDEL KUL\nDEL NRT\nNRT DEL\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>DEL NRT DEL KUL\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>In test case 1, there are three flight tickets.\n\nSource    -     Destination\nDEL     -       KUL\nDEL      -  NRT\nNRT    -     DEL\n\nIn order to satisfy all the conditions, he should start from \u201cDEL\u201d, as per the problem statement, use ticket 2, go to \u201cNRT\u201d. Then come back to \u201cDEL\u201d using ticket 3. And then go to \u201cKUL\u201d using ticket 1. So the Itinerary which is possible in this case is DEL -&gt; NRT -&gt; DEL -&gt; KUL.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n2\nDEL ATL\nATL DEL\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>DEL ATL DEL\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2:</h5>\n\n<pre><code>In test case 1, there are two flight tickets.\n\nSource  -   Destination\nDEL     -    ATL\nATL     -    DEL\n\nIn order to satisfy all the conditions, he should start from \u201cDEL\u201d, as per the problem statement, use ticket 1, go to \u201cATL\u201d. Then come back to \u201cDEL\u201d using ticket 2. So the Itinerary which is possible in this case is DEL -&gt; ATL -&gt; DEL.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a matrix of flight tickets, where each row represents a one-way flight from a source city to a destination city. All tickets belong to a traveler who starts in \"DEL\". Reconstruct the journey, ensuring the traveler starts from \"DEL\", uses all tickets exactly once, and completes the journey. If multiple valid itineraries exist, return the lexicographically smallest one. The journey represents the order in which cities are visited, and at least one itinerary is guaranteed to exist.",
                "constraints": [
                    "1 <= T <= 50 (Number of test cases)",
                    "1 <= N <= 20000 (Number of flight tickets per test case)",
                    "0 <= M <= 20000 (Where 'M' denotes the total size of the given matrix \u2018TICKET\u2019)",
                    "TICKET[i][0] != TICKET[i][1], for any valid 'i' (Source and destination cities for a ticket are different)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\nDEL KUL\nDEL NRT\nNRT DEL",
                        "output": "DEL NRT DEL KUL",
                        "explanation": "The traveler starts in DEL. The lexicographically smallest complete itinerary is DEL -> NRT -> DEL -> KUL, using all tickets once."
                    },
                    {
                        "input": "2\nDEL ATL\nATL DEL",
                        "output": "DEL ATL DEL",
                        "explanation": "The traveler starts in DEL. The complete itinerary is DEL -> ATL -> DEL, using all tickets once."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you solve the problem by converting it into its corresponding graph? Which data structures and algorithms would be a good fit?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}