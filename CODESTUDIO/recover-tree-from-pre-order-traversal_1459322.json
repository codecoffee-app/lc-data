{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12410,
            "title": "Recover Tree from Pre Order traversal",
            "titleSlug": "recover-tree-from-pre-order-traversal_1459322",
            "content": "<h4 id=\"ninja-has-got-a-coding-assignment-in-this-assignment-a-preorder-depth-first-search-dfs-is-run-on-the-root-of-a-binary-tree\">Ninja has got a coding assignment. In this assignment, a preorder depth-first search (DFS) is run on the root of a binary tree.</h4>\n\n<h4 id=\"at-each-node-in-this-traversal-d-dashes-is-given-where-d-is-the-depth-of-this-node-then-we-output-the-value-of-this-node-if-the-depth-of-a-node-is-d-the-depth-of-its-immediate-child-is-d-1-the-depth-of-the-root-node-is-0\">At each node in this traversal,  D dashes is given (where D is the depth of this node), then we output the value of this node.  If the depth of a node is D, the depth of its immediate child is D + 1.  The depth of the root node is 0.</h4>\n\n<h4 id=\"it-is-also-given-to-ninja-that-if-a-node-has-only-one-child-that-child-is-guaranteed-to-be-the-left-child\">It is also given to Ninja that if a node has only one child, that child is guaranteed to be the left child.</h4>\n\n<h4 id=\"the-output-s-of-this-traversal-is-given-to-ninja-your-task-is-to-help-ninja-in-recovering-the-tree-and-return-its-root\">The output S of this traversal is given to Ninja. Your task is to help Ninja in recovering the tree and return its root.</h4>\n\n<h4 id=\"example\">Example</h4>\n\n<h4 id=\"let-s-1-2-3-4-5-6-7\">Let S = &quot;1-2--3--4-5--6--7&quot;</h4>\n\n<h4 id=\"here-the-tree-for-this-preorder-traversal-will-be-like-following\">Here the tree for this preorder traversal will be like following:</h4>\n\n<p><img src=\"https://files.codingninjas.in/recover1-9037.png\" alt=\"\"></p>\n\n<h4 id=\"so-for-this-root-will-be-1-so-the-output-tree-will-be-1-2-5-3-4-6-7-1-1-1-1-1-1-1-1\">So for this root will be 1, so the output tree will be 1 2 5 3 4 6 7 -1 - 1 -1 -1 -1 -1- 1 -1</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first and the only line of each test case contains a string S representing the preorder traversal of the input tree.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, you have to return the root of the tree.\n\nNote: You do not need to take input or print anything. It already has been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= X &lt;= 5000 where,X is the number of nodes in original tree\n1 &lt;= Y &lt;= 10^9 where, Y is the value of node\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1 :</h5>\n\n<pre><code>2\n1-2--3--4-5--6--7\n1-5--3-6--4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>1 2 5 3 4 6 7 -1 - 1 -1 -1 -1 -1- 1 -1\n1 5 6 3 -1 4 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Test case 1 :\n\nThe tree for this preorder traversal will be like following:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/recover1-9037.png\" alt=\"\"></p>\n\n<pre><code>So the output tree would be 1 2 5 3 4 6 7 -1 - 1 -1 -1 -1 -1- 1 -1\n\nTest case 2 :\n\nThe tree for this preorder traversal would be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/recover2-9036.png\" alt=\"\"></p>\n\n<pre><code>So the output tree will be 1 5 6 3 -1 4 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1-2--3---4-5--6---7\n1-401--349---90--88\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 2 5 3 -1 6 -1 4 -1 7 -1 -1 -1 -1 -1\n1 401 -1 349 88 90 -1 -1 -1 -1 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Ninja",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string representation of a binary tree's preorder traversal, reconstruct the tree. The traversal encodes the tree structure using dashes to represent depth. Each node value is preceded by a number of dashes equal to its depth. A node with only one child is guaranteed to have only a left child. Return the root of the reconstructed tree.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= X <= 5000 (Number of nodes in the original tree)",
                    "1 <= Y <= 10^9 (Value of a node)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "1-2--3--4-5--6--7",
                        "output": "1 2 5 3 4 6 7 -1 -1 -1 -1 -1 -1 -1 -1",
                        "explanation": "The input string represents a tree where '1' is the root. '2' is the left child of '1', and '5' is the right child. '3' and '4' are descendants of '2', and '6' and '7' are descendants of '5'. The output shows the tree in a level-order traversal, using '-1' to indicate null nodes."
                    },
                    {
                        "input": "1-5--3-6--4",
                        "output": "1 5 6 3 -1 4 -1 -1 -1 -1 -1",
                        "explanation": "The input string represents a tree where '1' is the root. '5' is the left child of '1', and '3' is the right child. '6' and '4' are descendants of '5', respectively. The output shows the level-order traversal of the tree with -1 representing null childs."
                    },
                    {
                        "input": "1-2--3---4-5--6---7",
                        "output": "1 2 5 3 -1 6 -1 4 -1 7 -1 -1 -1 -1 -1",
                        "explanation": null
                    },
                    {
                        "input": "1-401--349---90--88",
                        "output": "1 401 -1 349 88 90 -1 -1 -1 -1 -1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of preorder traversal of a tree and how you can use \u2018-\u2019 to recover the tree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}