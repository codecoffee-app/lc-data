{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11508,
            "title": "RectangleArea",
            "titleSlug": "rectanglearea_1381855",
            "content": "<h4 id=\"you-are-given-a-list-of-rectangles-where-each-rectangle-is-represented-by-an-array-of-four-integers-i-e-rectangle-i-x1-y1-x2-y2-where-x1-y1-represents-the-bottom-left-point-of-the-rectangle-and-x2-y2-represents-the-top-right-point-of-the-rectangle-you-have-to-find-the-total-area-covered-by-all-the-rectangles-in-the-plane\">You are given a list of rectangles where each rectangle is represented by an array of four integers (i.e. Rectangle[i]=[x1, y1, x2, y2], where x1, y1 represents the bottom left point of the rectangle and x2.y2 represents the top right point of the rectangle, you have to find the total area covered by all the rectangles in the plane.</h4>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>Rectangles = [[0, 0, 2, 2], [1, 0, 2, 3],[1, 0, 3, 1]], \n\nFor the given three rectangles, you can observe that the first rectangle occupies an area of 4 units and the second rectangle has an area of 3 units, but we have to keep one thing also in mind that they have an area of 3 units common overlapping among them, so we cannot include it again, so the final area which comes out for all the rectangles is 6 units.\n\nTotal Area = 6 units\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-140-8816.png\" alt=\"\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first line of each test case contains an integer N representing the size of the Array of rectangles.\n\nThe next N lines consist of 4 integers representing the bottom left and top right coordinate points of each rectangle.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the area of all the rectangles. To avoid any overflows, return the answer Modulo 10^9+7.\n\nYou do not need to take input or print anything. This already has been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;=200\n0 &lt;= x1, y1, x2 , y2 &lt;= 10^9 where x1.y1 is the bottom left coordinate of rectangle and x2,y2 is top right corner of rectangle.\n\nTime Limit  1 second.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3\n0 0 2 2\n1 0 2 3\n1 0 3 1\n2\n0 0 2 2\n3 0 4 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>6\n8\n</code></pre>\n\n<h5 id=\"explanation\">Explanation  :</h5>\n\n<pre><code>Test Case 1\n\nThe first rectangle occupies an area of 4 units and the second rectangle has an area of 3 units but we have to keep one thing also in mind that they have an area of 3 units common overlapping among them, so we cannot include it again, so the final area which comes out for all the rectangles is 6 units.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-140-8816.png\" alt=\"\"></p>\n\n<pre><code>Test Case 2\n\nThere is no overlapping for the two rectangles hence the area is \n\n4 + 4 = 8 units\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-138-8815.png\" alt=\"\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2\n0 0 1 2\n1 1 3 6\n1\n0 0 4 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>12\n16\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Ninja",
            "likes": 11,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a list of rectangles, where each rectangle is defined by its bottom-left and top-right corner coordinates.  Your task is to calculate the total area covered by all these rectangles in a 2D plane.  Note that rectangles may overlap, and overlapping areas should only be counted once towards the total area.  To avoid integer overflow, return the area modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 200",
                    "0 <= x1, y1, x2, y2 <= 10^9, where (x1, y1) is the bottom-left and (x2, y2) is the top-right corner.",
                    "x1 < x2 and y1 < y2 for each rectangle.",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "3\n0 0 2 2\n1 0 2 3\n1 0 3 1",
                        "output": "6",
                        "explanation": "The first rectangle has an area of 4. The second has an area of 3. The third has an area of 1. The overlapping area between the first and second rectangle is 1. The overlapping area between the first and third rectangle is 0. The overlapping area between the second and third rectangle is 1. Thus the combined area is 4 + 3 + 1 - 1 -0 -1 = 6."
                    },
                    {
                        "input": "2\n0 0 2 2\n3 0 4 4",
                        "output": "8",
                        "explanation": "The first rectangle has an area of 4. The second has an area of 4. There is no overlapping area. Thus the combined area is 4 + 4 = 8."
                    },
                    {
                        "input": "2\n0 0 1 2\n1 1 3 6",
                        "output": "12",
                        "explanation": "The first rectangle has an area of 2. The second has an area of 10. The overlapping area is 1. Thus the combined area is 2+10-1=11. 11 mod (10^9+7) = 11."
                    },
                    {
                        "input": "1\n0 0 4 4",
                        "output": "16",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>As Rectangle points range to 10^9 , think of using coordinate compression with brute force.</p>",
            "<p>Imagine a set of events, each one is a vertical line at some x coordinate some of them is the start of a rectangle and some are the end of a rectangle between every two events the active rectangle are the same and a constant set of y coordinates is covered between every two consecutive events, think of a DS which can support these operations.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}