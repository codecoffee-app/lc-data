{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10240,
            "title": "Recursive Multiply",
            "titleSlug": "recursive-multiply_1172216",
            "content": "<h4 id=\"you-are-given-two-positive-integers-your-task-is-to-multiply-the-two-numbers-using-recursion-by-performing-a-minimum-number-of-operations-note-that-you-can-use-addition-subtraction-and-or-bit-shifting-but-you-cannot-use-the-multiplication-or-division-operation\">You are given two positive integers. Your task is to multiply the two numbers using recursion by performing a minimum number of operations. Note that you can use addition, subtraction, and/ or bit shifting, but you cannot use the multiplication or division operation.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The very first line of input contains an integer \u2018T\u2019 denoting the number of test cases. \n\nThe first and the only line of every test case contains two space-separated positive integers \u2018M\u2019 and \u2018N\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the result obtained after multiplying these two numbers.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The result can be very large. So, print the answer modulo 1000000007.\n\nYou do not need to print anything, it has already been taken care of. Just return the result. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= M, N &lt;= 10^8\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5 10\n3 9   \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>50\n27\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>For the first test case we have, M = 5 and N = 10. Therefore our result is M*N = 5*10 = 50.\n\nFor the second test case we have, we have M = 3 and N = 9. Therefore our result is M*N = 3*9 = 27.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3\n1 5\n3 4\n1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5 \n12\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a recursive function to multiply two positive integers, 'm' and 'n', without using the multiplication (*) or division (/) operators. You are allowed to use addition (+), subtraction (-), and bitwise shift operators. Aim to minimize the number of operations. Return the result modulo 1000000007.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= M, N <= 10^8",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "m = 5, n = 10",
                        "output": "50",
                        "explanation": "The product of 5 and 10 is 50."
                    },
                    {
                        "input": "m = 3, n = 9",
                        "output": "27",
                        "explanation": "The product of 3 and 9 is 27."
                    },
                    {
                        "input": "m = 1, n = 5",
                        "output": "5",
                        "explanation": "The product of 1 and 5 is 5."
                    },
                    {
                        "input": "m = 3, n = 4",
                        "output": "12",
                        "explanation": "The product of 3 and 4 is 12."
                    },
                    {
                        "input": "m = 1, n = 1",
                        "output": "1",
                        "explanation": "The product of 1 and 1 is 1."
                    },
                    {
                        "input": "m = 100, n = 100",
                        "output": "10000",
                        "explanation": "The product of 100 and 100 is 10000."
                    },
                    {
                        "input": "m = 10, n = 100000000",
                        "output": "1000000000",
                        "explanation": "The product of 10 and 100000000 is 1000000000."
                    },
                    {
                        "input": "m = 100000000, n = 10",
                        "output": "1000000000",
                        "explanation": "The product of 100000000 and 10 is 1000000000."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you solve the problem by recursively adding the number to itself?</p>",
            "<p>An improvement over the previous approach would be to avoid calculating the same subproblems again and again. Instead, store the result of the solved sub-problems and use it whenever required.</p>",
            "<p>If the number is being multiplied to an even number, we can calculate half of its value and just double the result. This will reduce the number of operations performed.</p>",
            "<p>Try optimising the calculation when the multiplier is odd in approach 3.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}