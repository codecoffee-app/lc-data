{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9120,
            "title": "Redundant Brackets",
            "titleSlug": "redundant-brackets_975473",
            "content": "<h4 id=\"given-valid-mathematical-expressions-in-the-form-of-a-string-you-are-supposed-to-return-true-if-the-given-expression-contains-a-pair-of-redundant-brackets-else-return-false-the-given-string-only-contains-and-lowercase-english-letters\">Given valid mathematical expressions in the form of a string. You are supposed to return true if the given expression contains a pair of redundant brackets, else return false. The given string only contains \u2018(\u2018, \u2019)\u2019, \u2018+\u2019, \u2018-\u2019, \u2018*\u2019, \u2018/\u2019 and lowercase English letters.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<h4 id=\"a-pair-of-brackets-is-said-to-be-redundant-when-a-subexpression-is-surrounded-by-needless-useless-brackets\">A pair of brackets is said to be redundant when a subexpression is surrounded by needless/ useless brackets.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>((a+b)) has a pair of redundant brackets. The pair of brackets on the first and last index is needless. \nWhile (a + (b*c)) does not have any pair of redundant brackets. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. The test cases follow.\n\nThe first line of each test case contains a string denoting the expression.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return \u201cYes\u201d if the given expression contains at least one pair of redundant brackets, else return \u201cNo\u201d.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n3 &lt;= |S| &lt;= 10^4\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n(a+b)\n(a+c*b)+(c))\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>No\nYes\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>In the first test case, there are no redundant brackets. Hence, the output is \u201cNo\u201d. \n\n\nIn the second test case, the brackets around the alphabet \u2018c\u2019( index 8 and index 10) are redundant. Hence the output is \u201cYes\u201d.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n(a*b+(c/d))\n((a/b))\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>No\nYes\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h5>\n\n<pre><code>In the first test case, there are no redundant brackets. Hence, the output is \u201cNo\u201d. \n\n\nIn the second test case, the brackets around the subexpression \u201c(a+b)\u201d ( index 0 and index 6) are redundant. Hence the output is \u201cYes\u201d.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 275,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a valid mathematical expression in the form of a string, determine if the expression contains redundant brackets. Return 'Yes' if redundant brackets exist, otherwise return 'No'. The expression consists of '(', ')', '+', '-', '*', '/', and lowercase English letters.\n\nA pair of brackets is considered redundant if a subexpression is unnecessarily enclosed within them.",
                "constraints": [
                    "1 <= T <= 50",
                    "3 <= |S| <= 10^4",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "(a+b)",
                        "output": "No",
                        "explanation": "The expression '(a+b)' does not contain any redundant brackets."
                    },
                    {
                        "input": "(a+c*b)+(c))",
                        "output": "Yes",
                        "explanation": "The expression '(a+c*b)+(c))' contains redundant brackets around the character 'c'."
                    },
                    {
                        "input": "(a*b+(c/d))",
                        "output": "No",
                        "explanation": "The expression '(a*b+(c/d))' does not contain any redundant brackets."
                    },
                    {
                        "input": "((a/b))",
                        "output": "Yes",
                        "explanation": "The expression '((a/b))' contains redundant brackets.  The outermost brackets are unnecessary."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about using a stack to find redundant brackets?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(|S|)\r\n    Space Complexity: O(|S|)\r\n\r\n    Where '|S|' is the length of the given string.\r\n*/\r\n\r\n#include <stack>\r\n\r\nbool findRedundantBrackets(string &s)\r\n{\r\n    // For keeping track of opening and closing brackets.\r\n    stack<char> brackets;\r\n\r\n    int n = s.length();\r\n\r\n    // Iterate through the string.\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        // Push the current character to the stack if it is an operator or an opening bracket.\r\n        if (s[i] == '(' || s[i] == '+' || s[i] == '-' || s[i] == '*' || s[i] == '/')\r\n        {\r\n            brackets.push(s[i]);\r\n        }\r\n\r\n        // If the current character is a closing bracket.\r\n        else if (s[i] == ')')\r\n        {\r\n            // For checking if the current bracket is redundant or not.\r\n            bool isRedundant = true;\r\n\r\n            // Keep popping from the stack till we reach an opening bracket.\r\n            while (brackets.top() != '(')\r\n            {\r\n                // If we find a operator then the current bracket is not redundant.\r\n                if (brackets.top() == '+' || brackets.top() == '-' || brackets.top() == '*' || brackets.top() == '/')\r\n                {\r\n                    isRedundant = false;\r\n                }\r\n\r\n                brackets.pop();\r\n            }\r\n\r\n            brackets.pop();\r\n\r\n            // Return true if we did not find any operator before finding the opening bracket.\r\n            if (isRedundant == true)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // If no bracket is redundant then return false.\r\n    return false;\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(|S|)\n    Space Complexity: O(|S|)\n\n    Where '|S|' is the length of the given string.\n'''\n\nfrom collections import deque\n\ndef findRedundantBrackets(s):\n    \n    # For keeping track of opening and closing brackets.\n    brackets = deque()\n    \n    n = len(s)\n    \n    # Iterate through the string.\n    for i in range(n):\n        \n        # Push the current character to the stack if it is an operator or an opening bracket.\n        if s[i] == '(' or s[i] == '+' or s[i] == '-' or s[i] == '*' or s[i] == '/':\n            \n            brackets.append(s[i])\n            \n        # If the current character is a closing bracket.\n        elif s[i] == ')':\n            # For checking if the current bracket is redundant or not.\n            isRedundant = True\n            \n            # Keep popping from the stack till we reach an opening bracket.\n            while brackets[-1] != '(':\n                \n                # If we find a operator then the current bracket is not redundant.\n                if brackets[-1] == '+' or brackets[-1] == '-' or brackets[-1] == '*' or brackets[-1] == '/':\n                    \n                    isRedundant = False\n                    \n                brackets.pop()\n            \n            brackets.pop();\n            # Return true if we did not find any operator before finding the opening bracket.\n            if isRedundant == True:\n                \n                return True\n                \n    # If no bracket is redundant then return false.\n    return False",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(|S|)\r\n    Space Complexity: O(|S|)\r\n\r\n    Where '|S|' is the length of the given string.\r\n*/\r\n\r\nimport java.util.Stack;\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution \r\n{\r\n\r\n    public static boolean findRedundantBrackets(String s) \r\n    {\r\n\r\n        // For keeping track of opening and closing brackets.\r\n        Stack<Character> brackets = new Stack<Character>();\r\n\r\n        int n = s.length();\r\n\r\n        // Iterate through the string.\r\n        for (int i = 0; i < n; i++) \r\n        {\r\n\r\n            // Push the current character to the stack if it is an operator or an opening bracket.\r\n            if (s.charAt(i) == '(' || s.charAt(i) == '+' || s.charAt(i) == '-' || s.charAt(i) == '*' || s.charAt(i) == '/') \r\n            {\r\n                brackets.push(s.charAt(i));\r\n            }\r\n\r\n            // If the current character is a closing bracket.\r\n            else if (s.charAt(i) == ')') \r\n            {\r\n                // For checking if the current bracket is redundant or not.\r\n                boolean isRedundant = true;\r\n\r\n                // Keep popping from the stack till we reach an opening bracket.\r\n                while (brackets.peek() != '(') \r\n                {\r\n                    // If we find a operator then the current bracket is not redundant.\r\n                    if (brackets.peek() == '+' || brackets.peek() == '-' || brackets.peek() == '*' || brackets.peek() == '/') \r\n                    {\r\n                        isRedundant = false;\r\n                    }\r\n\r\n                    brackets.pop();\r\n                }\r\n\r\n                brackets.pop();\r\n\r\n                // Return true if we did not find any operator before finding the opening bracket.\r\n                if (isRedundant == true) \r\n                {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        // If no bracket is redundant then return false.\r\n        return false;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}