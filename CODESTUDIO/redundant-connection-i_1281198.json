{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10970,
            "title": "Redundant Connection - I",
            "titleSlug": "redundant-connection-i_1281198",
            "content": "<h4 id=\"you-are-given-a-graph-that-started-as-a-tree-with-n-nodes-with-distinct-values-1-2-n-with-one-additional-edge-added-the-added-edge-has-two-different-vertices-chosen-from-1-to-n-and-was-not-an-edge-that-already-existed-the-resulting-graph-is-given-as-a-2d-array-of-edges-arr-of-size-nx2-each-element-of-edges-is-a-pair-u-v-with-u-v-which-represents-an-undirected-edge-connecting-nodes-u-and-v\">You are given a graph that started as a tree with \u2018N\u2019 nodes (with distinct values 1, 2, ..., N), with one additional edge added. The added edge has two different vertices chosen from 1 to N and was not an edge that already existed. The resulting graph is given as a 2D-array of edges ARR of size NX2. Each element of edges is a pair [u, v] with u &lt; v, which represents an undirected edge connecting nodes u and v.</h4>\n\n<h4 id=\"for-the-given-graph-you-are-required-to-find-an-edge-that-can-be-removed-such-that-the-graph-becomes-a-tree-of-n-nodes\">For the given graph you are required to find an edge that can be removed such that the graph becomes a tree of N nodes.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code> Let\u2019s say we have 3 edges that are {1 , 2} , {1 , 3} and {2 , 3}. So \n the resulting graph from these edges will be :\n      1\n     / \\\n    2 - 3\n\nIf we remove the edge {2, 3} then the resulting graph will be a tree with N nodes.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The very first line of input contains an integer \u2018T\u2019 denoting the number of test cases. \n\nThe first line of every test case contains an integer \u2018N\u2019 denoting the number of nodes of the graph.\n\nThe second line of every test case contains a 2d array &#39;ARR&#39; of NX2 size, which contains N edges of the graph.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, return that single edge that if removed, the resulting graph will be a tree of N nodes.\n\n\nOutput for each test case is printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just return an edge that can be removed so that the resulting graph is a tree of N nodes.\n\nIf there are multiple answers, return the answer that occurs last in the given 2D array ARR of size NX2. The answer edge [u, v] should be in the same format, with u &lt; v.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n3 &lt;= N &lt;= 10^3\n1 &lt;= ARR[i] &lt;= N\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\n1 2\n1 3\n2 3\n3\n1 2\n2 3\n1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 3\n1 3  \n</code></pre>\n\n<h5 id=\"explanation-1\">Explanation 1:</h5>\n\n<pre><code>For the first test case, \nIt is already explained above in the example.\n\nFor the second test case, \nLet\u2019s say we have 3 edges that are {1 , 2} , {2 , 3} and {1 , 3}. So \nthe resulting graph from these edges will be :\n      2\n     / \\\n    1 - 3\n\nSo here, unlike the previous example If we remove the edge {1, 3} which is the last occurring edge for the graph above only then the would resulting graph become a tree with N nodes.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n1 2\n2 3\n3 4\n1 4\n1 5\n4\n1 2\n1 3\n3 4\n1 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code> 1 4\n 1 4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a graph represented as a list of edges, where the graph initially started as a tree with 'N' nodes (numbered 1 to N) and one extra edge has been added, identify and return the redundant edge that, when removed, transforms the graph back into a tree. The graph is provided as a 2D array 'ARR' of size N x 2, where each element [u, v] represents an undirected edge connecting nodes u and v (u < v). If multiple redundant edges exist, return the edge that appears last in the input array.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "3 <= N <= 10^3 (Number of nodes)",
                    "1 <= ARR[i][0], ARR[i][1] <= N (Node values in edges)"
                ],
                "testcases": [
                    {
                        "input": "arr=[[1,2],[1,3],[2,3]]",
                        "output": "[2, 3]",
                        "explanation": "The graph has edges {1, 2}, {1, 3}, and {2, 3}. Removing the edge {2, 3} results in a tree."
                    },
                    {
                        "input": "arr=[[1,2],[2,3],[1,3]]",
                        "output": "[1, 3]",
                        "explanation": "The graph has edges {1, 2}, {2, 3}, and {1, 3}. Removing the edge {1, 3} results in a tree. Since it's the last occurring redundant edge it's chosen."
                    },
                    {
                        "input": "arr=[[1,2],[2,3],[3,4],[1,4],[1,5]]",
                        "output": "[1, 4]",
                        "explanation": "The graph has edges {1, 2}, {2, 3}, {3, 4}, {1, 4}, {1, 5}. Removing the edge {1, 4} results in a tree."
                    },
                    {
                        "input": "arr=[[1,2],[1,3],[3,4],[1,4]]",
                        "output": "[1, 4]",
                        "explanation": "The graph has edges {1, 2}, {1, 3}, {3, 4}, {1, 4}. Removing the edge {1, 4} results in a tree."
                    },
                    {
                        "input": "arr=[[1,2],[2,3],[3,1]]",
                        "output": "[3, 1]",
                        "explanation": "The graph has edges {1, 2}, {2, 3}, and {3, 1}. Removing the edge {3, 1} results in a tree."
                    },
                    {
                        "input": "arr=[[1,4],[3,4],[1,3],[1,2],[2,5]]",
                        "output": "[1,3]",
                        "explanation": "The graph has edges {1,4}, {3,4}, {1,3}, {1,2}, {2,5}. Removing the edge {1,3} results in a tree. "
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to solve the problem by depth-first search. Also, keep in mind that the tree will have only one connected component.</p>",
            "<p>Try to solve the problem by using a disjoint set union method.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}