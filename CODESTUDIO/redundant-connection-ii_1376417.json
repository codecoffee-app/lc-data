{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11006,
            "title": "Redundant Connection - II",
            "titleSlug": "redundant-connection-ii_1376417",
            "content": "<h4 id=\"you-are-given-a-directed-graph-that-starts-as-a-rooted-tree-with-n-nodes-with-distinct-values-from-1-to-n-with-one-additional-directed-edge-added-the-added-edge-has-two-different-vertices-chosen-from-1-to-n-and-was-not-an-edge-that-already-existed\">You are given a directed graph that starts as a rooted tree with &#39;N&#39; nodes (with distinct values from 1 to &#39;N&#39;), with one additional directed edge added. The added edge has two different vertices chosen from 1 to \u2018N\u2019 and was not an edge that already existed.</h4>\n\n<h4 id=\"the-resulting-graph-is-given-as-a-2d-array-of-edges-each-element-of-edges-is-a-pair-ui-vi-that-represents-a-directed-edge-connecting-nodes-ui-and-vi-where-ui-is-a-parent-of-the-child-vi\">The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [&#39;Ui&#39;, &#39;Vi&#39;] that represents a directed edge connecting nodes \u2018Ui\u2019 and \u2018Vi\u2019, where \u2018Ui\u2019 is a parent of the child \u2018Vi\u2019.</h4>\n\n<h4 id=\"your-task-is-to-find-and-return-that-single-edge-that-if-removed-the-resulting-graph-will-be-a-tree-of-n-nodes\">Your task is to find and return that single edge that if removed, the resulting graph will be a tree of &#39;N&#39; nodes.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. A rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.\n2. If there are multiple answers, return the answer that occurs last in the given 2D-array. The answer edge [u, v] should be in the same format, with u &lt; v.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Let\u2019s say we have 3 edges that are {1 , 2} , {1 , 3} and {2 , 3}. So the resulting graph from these edges will be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture1-8654.PNG\" alt=\"\"> </p>\n\n<pre><code>If we remove the edge {2, 3} then the resulting graph will be a tree \nwith &#39;N&#39; nodes.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The very first line of input contains an integer \u2018T\u2019 denoting the number of test cases. \n\nThe first line of every test case contains an integer \u2018N\u2019 denoting the number of nodes of the graph.\n\nThe second line of every test case contains a 2D array of &#39;N&#39; X 2 size which contains &#39;N&#39; edges of the graph.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, return that single edge that if removed, the resulting graph will be a tree of &#39;N&#39; nodes.\n\nOutput for each test case is printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. You do not need to print anything, it has already been taken care of. Just return an edge that can be removed so that the resulting graph is a tree of N nodes.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n3 &lt;= N &lt;= 1000\n1 &lt;= &#39;ARR[i]&#39; &lt;= N\n\nWhere \u2018ARR[i]\u2019 represents the edges of the graph.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\n1 2\n1 3\n2 3\n3\n1 2\n2 3\n1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 3\n1 3  \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>In test case 1, It is already explained above in the example.\n\nIn test case 2, Let\u2019s say we have 3 edges that are {1 , 2} , {2 , 3} and {1 , 3}. So the resulting graph from these edges will be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture2-8655.PNG\" alt=\"\">  </p>\n\n<pre><code>If we remove the edge {1, 3} then the resulting graph will be a tree with &#39;N&#39; nodes.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n1 2\n2 3\n3 4\n4 1\n1 5\n4\n1 2\n1 3\n3 4\n1 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code> 4 1\n 1 4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph represented as a 2D array of edges, where each edge [u, v] signifies a directed connection from node 'u' to node 'v', determine and return the single redundant edge that, when removed, transforms the graph into a rooted tree with 'N' nodes. The graph initially resembles a rooted tree but contains one additional directed edge that creates a cycle or violates the tree structure. If multiple redundant edges exist, return the edge that appears last in the input array. Return the edge [u, v] with u < v.",
                "constraints": [
                    "1 <= T <= 10",
                    "3 <= N <= 1000",
                    "1 <= ARR[i] <= N"
                ],
                "testcases": [
                    {
                        "input": "n = 3, arr = [[1, 2], [1, 3], [2, 3]]",
                        "output": "[2, 3]",
                        "explanation": "Removing the edge [2, 3] results in a tree structure with root node 1."
                    },
                    {
                        "input": "n = 3, arr = [[1, 2], [2, 3], [1, 3]]",
                        "output": "[1, 3]",
                        "explanation": "Removing the edge [1, 3] results in a tree structure with root node 1."
                    },
                    {
                        "input": "n = 5, arr = [[1, 2], [2, 3], [3, 4], [4, 1], [1, 5]]",
                        "output": "[4, 1]",
                        "explanation": "Removing the edge [4, 1] breaks the cycle and results in a valid tree structure with root 1."
                    },
                    {
                        "input": "n = 4, arr = [[1, 2], [1, 3], [3, 4], [1, 4]]",
                        "output": "[1, 4]",
                        "explanation": "Removing the edge [1, 4] results in a tree with root 1."
                    },
                    {
                        "input": "n = 4, arr = [[1, 2], [2, 3], [3, 4], [1, 4]]",
                        "output": "[1, 4]",
                        "explanation": "Removing the edge [1, 4] results in a tree structure with root 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to solve the problem by using a disjoint set union method.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}