{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9878,
            "title": "Regular Expression Match",
            "titleSlug": "regular-expression-match_1095630",
            "content": "<h4 id=\"given-a-string-str-and-a-string-pat-the-string-s-has-some-wildcard-characters-i-e-and\">Given a string \u2018str\u2019 and a string \u2018pat\u2019. The string s has some wildcard characters i.e \u2018?\u2019 and \u2018*\u2019.</h4>\n\n<pre><code>If any character is a \u2018?\u2019 we can replace that character with any other character. \n\nIf a character is a * we can replace * with any sequence of characters including the empty sequence.  \n</code></pre>\n\n<h4 id=\"your-task-is-to-determine-if-it-is-possible-that-we-can-make-str-pat-using-appropriate-conversions-in-str\">Your task is to determine if it is possible that we can make \u2018str&#39; = &#39;pat\u2019  using appropriate conversions in \u2018str\u2019.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Let str = \u201cabc?&quot; and pat= \u201cabcd\u201d\n\nWe return true as \u2018?\u2019 can be replaced with \u2018d\u2019 and this makes \u2018str\u2019 and \u2018pat\u2019 same.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which contains the number of test cases. \n\nThe next &#39;2 * T&#39; lines represent the &#39;T&#39; test cases.\n\nThe first line of each test case contains the string \u2018str\u2019.\n\nThe second line of each test case contains the string \u2018pat\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case return true if it is possible to modify string \u2018str\u2019 such that \u2018pat\u2019 is a substring of \u2018s\u2019 under given rules and conditions. Otherwise, return false.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of, Just implement the given function.\n\nThe words do not contain whitespace.\n\nThe string \u2018pat\u2019 contains only lowercase English alphabets.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= pat.length() &lt;= 200\n1 &lt;= str.length() &lt;= 200\n\nTime Limit: 1sec\n</code></pre>\n\n<h4 id=\"follow-up\">Follow Up:</h4>\n\n<pre><code>Try to do this problem in O(M * N).\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4\naa\na\naa\n*\ncb\n?a\nadceb\n*a*b\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>False\nTrue\nFalse\nTrue\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case, \n&quot;a&quot; does not match the entire string &quot;aa&quot;.\n\nFor the second test case:\nAs specified, &#39;*&#39; matches any sequence. Hence * is equivalent to sequence Aa and the pattern matches. So we return True.\n\nFor the third test case:\nAs specified, &#39;?&#39; matches with any single character. So we match \u2018?\u2019 with  &#39;c&#39;, but the second letter is &#39;a&#39;, which does not match with  &#39;b&#39;. So we return false\n\nFor the fourth test case:\nAs specified, &#39;*&#39; matches any sequence. Hence,the first &#39;*&#39; matches the empty sequence, while the second &#39;*&#39; matches the substring &quot;dce&quot;. So we return true\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4\nabcd\nab*\ndddd\nasc?\nasaa\n*\naaa\n???\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>True\nFalse\nTrue \nTrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `str` and a pattern string `pat` containing wildcard characters '?' and '*'. The '?' character can be replaced with any single character, and the '*' character can be replaced with any sequence of characters (including an empty sequence). Determine if it is possible to make `str` equal to `pat` by replacing the wildcard characters in `str` appropriately.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= pat.length() <= 200",
                    "1 <= str.length() <= 200",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "aa\na",
                        "output": "False",
                        "explanation": "The pattern 'a' does not fully match the string 'aa'."
                    },
                    {
                        "input": "aa\n*",
                        "output": "True",
                        "explanation": "The '*' character can match any sequence, including 'aa'."
                    },
                    {
                        "input": "cb\n?a",
                        "output": "False",
                        "explanation": "The '?' can match 'c', but the 'a' in the pattern doesn't match the 'b' in the string."
                    },
                    {
                        "input": "adceb\n*a*b",
                        "output": "True",
                        "explanation": "The first '*' can match an empty sequence, and the second '*' can match 'dce'."
                    },
                    {
                        "input": "abcd\nab*",
                        "output": "True",
                        "explanation": "The '*' matches the sequence 'cd'."
                    },
                    {
                        "input": "dddd\nasc?",
                        "output": "False",
                        "explanation": "The given pattern cannot be formed."
                    },
                    {
                        "input": "asaa\n*",
                        "output": "True",
                        "explanation": "The '*' character can match any sequence."
                    },
                    {
                        "input": "aaa\n???",
                        "output": "True",
                        "explanation": "Each question mark can represent each 'a' character."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For \u2018?\u2019 Try to match with the character needed, for \u2018*\u2019 recursively match the solution</p>",
            "<p>Can you think of using Dynamic Programming</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}