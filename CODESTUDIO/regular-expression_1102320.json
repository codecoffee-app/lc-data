{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9925,
            "title": "Regular expression",
            "titleSlug": "regular-expression_1102320",
            "content": "<h4 id=\"given-an-input-string-s-and-a-pattern-p-implement-a-regular-expression-matching-with-the-support-of-two-special-characters-dot-and-asterisk-where\">Given an input string &#39;S&#39; and a pattern &#39;P&#39;, implement a regular expression matching with the support of two special characters \u2018.\u2019 (dot) and \u2018*\u2019(asterisk) where</h4>\n\n<pre><code>1. \u2018.\u2019 matches to any single character.\n2. \u2018*\u2019 matches to zero or more of the preceding element.\n</code></pre>\n\n<h4 id=\"if-the-input-string-s-matches-the-pattern-p-then-return-true-else-return-false\">If the input string &#39;S&#39; matches the pattern &#39;P&#39;, then return true else, return false.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. You have to match the entire string with the pattern given.\n\n2. Both the strings, &#39;S&#39; and &#39;P&#39; contain only lower-case alphabets.\n\n3. Only the pattern will contain additional characters \u2018*\u2019 and \u2018.\u2019 along with alphabets.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer T representing the number of test cases.\n\nThe one and only line of each test case contains two space-separated strings &#39;S&#39; and &#39;P&#39; respectively. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single line containing \u201ctrue\u201d if the string matches the pattern, else print \u201dfalse\u201d.\n\nThe output of every test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 1000\n1 &lt;= M &lt;= 1000    \n\nWhere &#39;T&#39; is the number of test cases, \u2018N\u2019 is the length of the input string to be matched, and \u2018M\u2019 is the length of the pattern &#39;P&#39;.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\naa a\naa a*\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>false\ntrue\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample output 1</h5>\n\n<pre><code>For the first test case, it is clearly visible that \u201caa\u201d is not equal to \u201ca\u201d.\n\nFor the second test case, \u2018*\u2019 means that we can replace zero or more of the preceding element. Hence we can replace it with another \u2018a\u2019. So, the given string can be formed with the pattern.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\nab .*\naab c*a*b\nmississippi mis*is*p*\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>true\ntrue \nfalse \n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample output 2:</h5>\n\n<pre><code>For the first test case, we can replace the dot with any character so \u201c.*\u201d means zero or more (*) of any character (.). So we can replace (*) with a (.). i.e. .* --&gt; .. --&gt; ab. \n\nFor the second test case, c can be repeated zero times, a can be repeated 1 time. Therefore it matches \u201caab\u201d.\n\nFor the third test case, there is no way possible to bring an \u2018i\u2019 in the end, hence the answer is false.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 24,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement regular expression matching with support for '.' (matches any single character) and '*' (matches zero or more of the preceding element). Determine if an input string 'S' matches a pattern 'P'. The match must cover the entire input string.  'S' and 'P' contain only lowercase alphabets. 'P' may also contain '*' and '.'.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 1000 (Length of string 'S')",
                    "1 <= M <= 1000 (Length of pattern 'P')",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "aa a",
                        "output": "false",
                        "explanation": "The string \"aa\" does not match the pattern \"a\"."
                    },
                    {
                        "input": "aa a*",
                        "output": "true",
                        "explanation": "The '*' allows the preceding 'a' to be repeated zero or more times. In this case, it can be repeated once to match the string \"aa\"."
                    },
                    {
                        "input": "ab .*",
                        "output": "true",
                        "explanation": "The '.' matches any single character, and '*' means zero or more occurrences of the preceding character. Therefore, \".*\" matches any sequence of characters (including an empty sequence), and thus matches \"ab\"."
                    },
                    {
                        "input": "aab c*a*b",
                        "output": "true",
                        "explanation": "The 'c' can appear zero times and the 'a' can appear one time. This allows the pattern to match 'aab'."
                    },
                    {
                        "input": "mississippi mis*is*p*",
                        "output": "false",
                        "explanation": "There is no way to match the trailing 'i' in \"mississippi\" with the provided pattern."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>&nbsp;</strong>Can you do this recursively? Try to solve the problem by solving its subproblems first.</p>",
            "<p>Can you optimise the previous approach? Try to memoize the subproblems.&nbsp;</p>",
            "<p>Can you solve the small problem first and then reach the final answer? Try to use the bottom-up approach now.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}