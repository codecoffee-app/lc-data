{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8932,
            "title": "Remove BST keys outside the given range",
            "titleSlug": "remove-bst-keys-outside-the-given-range_920538",
            "content": "<h4 id=\"given-a-binary-search-tree-bst-and-a-range-min-max-remove-all-keys-which-are-outside-the-given-range-the-modified-tree-should-also-be-bst\">Given a Binary Search Tree (BST) and a range [min, max], remove all keys which are outside the given range. The modified tree should also be BST.</h4>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line contains the integer &#39;T&#39; denoting the number of test cases. Each test case contains:\n\nThe first line of each test case contains elements of the BST in the level order form (If any node does not have a left or right child, take -1 in its place).\n\nThe second line of each test case contains two integers, &#39;min&#39;, and &#39;max&#39; (separated by space).\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, print &#39;N&#39; space separated integers denoting the inorder traversal of modified BST.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10 ^ 5\n-10 ^ 3 &lt;= nodeVal &lt;= 10 ^ 3\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1\n1 9\n6 -13 14 -1 -8 13 15 -1 -1 7 -1 -1 -1 -1 -1\n-10 13\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 3 4 6 7 8 \n-8 6 7 13 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>Test Case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/pic1-11641.png\">\n</br></p>\n\n<pre><code>The above image shows the given BST and the range given is [-10, 13]\nAfter removing the nodes which are not in the given range. The BST will be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/pic2-11642.png\"></p>\n\n<pre><code>Test Case 2:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/pic1-11639.png\"></br></p>\n\n<pre><code>The above image shows the given BST and the range given is [1, 9]\nAfter removing the nodes which are not in the given range. The BST will be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/pic2-11640.png\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n717 473 -1 344 -1 160 -1 -51 -1 -513 -1 -542 -1 -548 -1 -669 -1 -959 -1 -1 -1 \n-712 175\n957 937 -1 434 -1 270 -1 -6 -1 -175 -1 -181 -1 -403 -1 -509 -1 -625 -1 -1 -1 \n-907 155\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-669 -548 -542 -513 -51 160 \n-625 -509 -403 -181 -175 -6 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) and a range [min, max], remove all nodes with keys outside the given range. The modified tree must also remain a BST.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10 ^ 5",
                    "-10 ^ 3 <= nodeVal <= 10 ^ 3",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1\n1 9",
                        "output": "1 3 4 6 7 8",
                        "explanation": "The initial BST contains the values [8, 3, 10, 1, 6, 14, 4, 7, 13].  The range is [1, 9].  After removing nodes outside this range, the remaining nodes are [1, 3, 4, 6, 7, 8], and the inorder traversal of the resulting BST is 1 3 4 6 7 8."
                    },
                    {
                        "input": "6 -13 14 -1 -8 13 15 -1 -1 7 -1 -1 -1 -1 -1\n-10 13",
                        "output": "-8 6 7 13",
                        "explanation": "The initial BST contains the values [6, -13, 14, -8, 13, 15, 7]. The range is [-10, 13]. After removing nodes outside this range, the remaining nodes are [-8, 6, 7, 13], and the inorder traversal of the resulting BST is -8 6 7 13."
                    },
                    {
                        "input": "717 473 -1 344 -1 160 -1 -51 -1 -513 -1 -542 -1 -548 -1 -669 -1 -959 -1 -1 -1\n-712 175",
                        "output": "-669 -548 -542 -513 -51 160",
                        "explanation": "The initial BST values are [717, 473, 344, 160, -51, -513, -542, -548, -669, -959]. The range is [-712, 175]. After removing nodes outside this range the remaining nodes are [-669, -548, -542, -513, -51, 160]. The inorder traversal of the resulting BST is -669 -548 -542 -513 -51 160."
                    },
                    {
                        "input": "957 937 -1 434 -1 270 -1 -6 -1 -175 -1 -181 -1 -403 -1 -509 -1 -625 -1 -1 -1\n-907 155",
                        "output": "-625 -509 -403 -181 -175 -6",
                        "explanation": "The initial BST values are [957, 937, 434, 270, -6, -175, -181, -403, -509, -625]. The range is [-907, 155]. After removing nodes outside this range the remaining nodes are [-625, -509, -403, -181, -175, -6]. The inorder traversal of the resulting BST is -625 -509 -403 -181 -175 -6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about using post order traversal and for each node check if the node is lying in the given range or not.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}