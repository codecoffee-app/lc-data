{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10248,
            "title": "Remove Comments",
            "titleSlug": "remove-comments_1199114",
            "content": "<h4 id=\"you-are-given-a-text-in-the-form-of-an-array-of-strings-a-string-present-at-the-i-1-th-index-can-be-assumed-to-be-separated-from-the-string-at-the-ith-index-by-a-newline-character-i-e-n\">You are given a text in the form of an array of strings. A string present at the (i+1)th index, can be assumed to be separated from the string at the ith index, by a newline character (i.e. \u2018\\n\u2019).</h4>\n\n<h4 id=\"in-the-given-text-we-have-two-types-of-comments-line-comments-and-block-comments\">In the given text, we have two types of comments: line comments and block comments.</h4>\n\n<h4 id=\"the-string-denotes-the-starting-of-a-line-comment-which-represents-that-the-rest-of-the-characters-to-the-right-of-this-string-and-present-in-the-same-line-should-be-ignored\">The string \u201c//\u201d denotes the starting of a line comment, which represents that the rest of the characters to the right of this string and present in the same line, should be ignored.</h4>\n\n<h4 id=\"and-the-strings-and-denote-the-starting-and-ending-points-of-a-block-comment-which-represents-that-all-the-characters-between-these-two-strings-must-be-ignored-note-that-block-comments-can-span-across-multiple-lines-whereas-line-comments-end-at-the-same-line\">And the strings \u201c/<em>\u201d and \u201c</em>/\u201d denote the starting and ending points of a block comment, which represents that all the characters between these two strings must be ignored. Note that block comments can span across multiple lines whereas line comments end at the same line.</h4>\n\n<h4 id=\"your-task-is-to-remove-the-comments-from-the-given-text-and-print-the-text-in-the-same-format\">Your task is to remove the comments from the given text and print the text in the same format.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The first comment is given precedence over the other i.e. if the string \u201c//\u201d occurs in a block comment, then it is ignored and/or if the string \u201c/*\u201d occurs in a line or a block comment, it is also ignored.\n\nThe starting and ending point of the block comment must be non-overlapping i.e. a string like \u201c/*/\u201d does not end the block comment, as the ending would be overlapping the beginning.\n\nEvery starting point of a block comment will have an ending point as well.\n\nThe (implicit) newline characters which may occur when a block comment spans multiple lines, must be deleted/removed.\n\nThe text doesn\u2019t contain any single or double quotes characters.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The very first line of input contains an integer \u2018N\u2019 denoting the number of lines in the given text. \n\nNow \u2018N\u2019 lines follow where the ith line contains a string that denotes the ith line of the text.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the text, in the same format, obtained after removing the comments.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>If a certain line of the text becomes empty after removing the comments, you must not output that line i.e. each string in the resulting text must be non-empty.\n\nYou do not need to print anything, it has already been taken care of. Just return the resulting text in the same format. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 100\n0 &lt;= Length of ith String &lt;= 5 * 10^3\n\nWhere  \u2018N\u2019 represents the number of lines in the given text.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>8\n/*Sample \ntest case */\nmain() {\n// Declare variables here.\nint a = 2, b = 3, sum;\nsum = a + b; // Find sum\nReturn;\n}  \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>main() {\nint a = 2, b = 3, sum;\nsum = a + b;\nReturn;\n}\n</code></pre>\n\n<h5 id=\"explanation-1\">Explanation 1:</h5>\n\n<pre><code>Remove the line and block comments and print the resulting text. On removing comments, lines 1, 2 and 4 of the text becomes empty, so we do not output those lines.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nCoding/* Block comment\nSpanning multiple lines */ Ninjas\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>Coding Ninjas\n</code></pre>\n\n<h5 id=\"explanation-2\">Explanation 2:</h5>\n\n<pre><code>Remove the block comments and print the resulting text. On removing the block comment, the implicit newline character also gets removed.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a text represented as an array of strings, where each string is a line, remove both single-line comments (starting with '//') and multi-line block comments (enclosed by '/*' and '*/'). The first comment type encountered on a line takes precedence. Block comments can span multiple lines. Eliminate any resulting empty lines from the output.",
                "constraints": [
                    "1 <= N <= 100, where N is the number of lines in the text.",
                    "0 <= Length of ith String <= 5 * 10^3",
                    "The text doesn\u2019t contain any single or double quotes characters."
                ],
                "testcases": [
                    {
                        "input": "n = 8, text = ['/*Sample ', 'test case */', 'main() {', '// Declare variables here.', 'int a = 2, b = 3, sum;', 'sum = a + b; // Find sum', 'Return;', '}  ']",
                        "output": "['main() {', 'int a = 2, b = 3, sum;', 'sum = a + b;', 'Return;', '}']",
                        "explanation": "The first block comment is removed spanning the first two lines. The line comment on the fourth line is removed. The line comment on the sixth line is removed.  The resulting lines 1,2 and 4 are then removed because they are empty."
                    },
                    {
                        "input": "n = 2, text = ['Coding/* Block comment', 'Spanning multiple lines */ Ninjas']",
                        "output": "['Coding Ninjas']",
                        "explanation": "The block comment is removed, including the newline character between the lines."
                    },
                    {
                        "input": "n = 3, text = ['int a = 10;', '/* This is a block comment', 'which spans multiple lines */']",
                        "output": "['int a = 10;']",
                        "explanation": "The complete block comment spanning across multiple lines is removed and the newline characters are also removed"
                    },
                    {
                        "input": "n = 3, text = ['// This is a line comment', 'int a = 10;', 'int b = 20; // Another comment']",
                        "output": "['int a = 10;', 'int b = 20;']",
                        "explanation": "The first and third lines both have comments at the end. All these line comments are removed, while the second line has no comment."
                    },
                    {
                        "input": "n = 4, text = ['int a = 10; // comment 1', '/* comment2 */ int b = 20;', 'int c = 30; // comment 3', '/* comment4 */']",
                        "output": "['int a = 10;', ' int b = 20;', 'int c = 30;']",
                        "explanation": "mixture of block and line comments"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to remove the comments by parsing the text line by line.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}