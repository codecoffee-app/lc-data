{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9920,
            "title": "Remove Duplicates from Sorted Array",
            "titleSlug": "remove-duplicates-from-sorted-array_1102307",
            "content": "<h4 id=\"you-are-given-a-sorted-integer-array-arr-of-size-n\">You are given a sorted integer array <em><strong>&#39;arr&#39;</strong></em> of size <em><strong>&#39;n&#39;</strong></em>.</h4>\n\n<p><Br></p>\n\n<h4 id=\"you-need-to-remove-the-duplicates-from-the-array-such-that-each-element-appears-only-once\">You need to remove the duplicates from the array such that each element appears only once.</h4>\n\n<p><Br></p>\n\n<h4 id=\"return-the-length-of-this-new-array\">Return the length of this new array.</h4>\n\n<p><Br></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Do not allocate extra space for another array. You need to do this by modifying the given input array in place with O(1) extra memory. \n</code></pre>\n\n<p><Br></p>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>&#39;n&#39; = 5, &#39;arr&#39; = [1 2 2 2 3].\nThe new array will be [1 2 3].\nSo our answer is 3.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer \u2018n\u2019 denoting the number of elements in the array. \n\nThe second line contains \u2018n\u2019 space-separated integers representing the elements of the array. \n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>Return the length of the modified array.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just Implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1:</h5>\n\n<pre><code>10\n1 2 2 3 3 3 4 4 5 5 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>The new array will be [1 2 3 4 5].\nSo our answer is 5.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample input 2:</h5>\n\n<pre><code>9\n1 1 2 3 3 4 5 5 5 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>5\n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity:</h5>\n\n<pre><code>The expected time complexity is O(n).\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10^6\n-10^9 &lt;= &#39;arr[i]&#39; &lt;=10^9\n\nWhere \u2018arr[i]\u2019 is the value of elements of the array.\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 506,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted integer array `arr` of size `n`, remove the duplicate elements from the array such that each unique element appears only once. This must be done in-place, meaning you should modify the original array and use O(1) extra memory.  Return the length of the modified array containing only unique elements.",
                "constraints": [
                    "1 <= n <= 10^6",
                    "-10^9 <= arr[i] <= 10^9",
                    "Time limit: 1 sec",
                    "Must modify the array in-place.",
                    "O(1) extra memory allowed"
                ],
                "testcases": [
                    {
                        "input": "10\n1 2 2 3 3 3 4 4 5 5",
                        "output": "5",
                        "explanation": "The input array [1 2 2 3 3 3 4 4 5 5] is modified to [1 2 3 4 5]. The length of the modified array is 5."
                    },
                    {
                        "input": "9\n1 1 2 3 3 4 5 5 5",
                        "output": "5",
                        "explanation": "The input array [1 1 2 3 3 4 5 5 5] is modified to [1 2 3 4 5]. The length of the modified array is 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Keep a pointer which will point to the index of the array where you can store the next value. Now think about how you can define another pointer to keep track of next value.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time complexity: O(N) \n    Space complexity: O(1)\n    \n    Where 'N' is the length of the array.\n*/\n\nint removeDuplicates(vector<int> &arr, int n) {\n    // First pointer.\n    int i = 0;\n\n    // Second pointer traversing from 1 to n.\n    for (int j = 1; j < n; j++) {\n        //  If not duplicates increment first pointer and check again.\n        if (arr[j] != arr[j-1]) {\n            arr[i++] = arr[j];\n        }\n    }\n    // Return length == (index of first pointer when second reaches end) + 1.\n    return i + 1;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity: O(N)\r\n    Space complexity: O(1)\r\n\r\n    Where 'N' is the length of the array.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n    public static int removeDuplicates(int[] arr, int n) {\r\n        // First pointer.\r\n        int i = 0;\r\n\r\n        // Second pointer traversing from 1 to n.\r\n        for (int j = 1; j < n; j++) {\r\n            // If not duplicates increment first pointer and check again\r\n            if (arr[j] != arr[j - 1]) {\r\n                arr[i++] = arr[j];\r\n            }\r\n        }\r\n        // Return length == (index of first pointer when second reaches end) + 1.\r\n        return i + 1;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\n\tTime complexity: O(N) \n    Space complexity: O(1)\n    \n    Where 'N' is the length of the array.\n\"\"\"\n\ndef removeDuplicates(arr, n):\n    # First pointer.\n    i = 0\n\n    # Second pointer traversing from 1 to n.\n    for j in range(1, n):\n        # If not duplicates increment first pointer and check again.\n        if (arr[j] != arr[j-1]):\n            arr[i] = arr[j]\n            i += 1\n    \n    # Return length == (index of first pointer when second reaches end) + 1.\n    return i + 1",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}