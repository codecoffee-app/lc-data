{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7238,
            "title": "Remove Duplicates from String",
            "titleSlug": "remove-duplicates-from-string_630470",
            "content": "<h4 id=\"you-are-given-a-string-str-of-length-n-consisting-of-only-the-lower-case-english-alphabet\">You are given a string (STR) of length N, consisting of only the lower case English alphabet.</h4>\n\n<h4 id=\"your-task-is-to-remove-all-the-duplicate-occurrences-of-characters-in-the-string\">Your task is to remove all the duplicate occurrences of characters in the string.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>If the given string is:\nabcadeecfb\n\nThen after deleting all duplicate occurrences, the string looks like this:\nabcdef\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The only input line contains a string (STR).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print the string after removing all the duplicate occurrences.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 4*10^5\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>abcadeecfb\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>abcdef\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>zzzzzxx\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>zx\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 25,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `str` of length `n` consisting of lowercase English alphabets, your task is to create a new string containing only the unique characters from the original string, preserving their original order of appearance. In other words, remove all duplicate occurrences of characters, leaving only the first occurrence of each character.",
                "constraints": [
                    "1 <= n <= 4 * 10^5",
                    "The input string `str` contains only lowercase English alphabets.",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "n = 10, str = abcadeecfb",
                        "output": "abcdef",
                        "explanation": "The input string 'abcadeecfb' has duplicate characters. Removing the duplicates, we get 'abcdef'."
                    },
                    {
                        "input": "n = 7, str = zzzzzxx",
                        "output": "zx",
                        "explanation": "The input string 'zzzzzxx' has repetitive 'z' and 'x'.  After removing the redundant characters, we get 'zx'."
                    },
                    {
                        "input": "n = 5, str = hello",
                        "output": "helo",
                        "explanation": "The input string 'hello' has duplicate 'l'. Removing the second 'l' , we get 'helo'."
                    },
                    {
                        "input": "n = 8, str = abcdefgh",
                        "output": "abcdefgh",
                        "explanation": "The input string 'abcdefgh' has all unique characters.  So, the output is the same as the input."
                    },
                    {
                        "input": "n = 1, str = a",
                        "output": "a",
                        "explanation": "The input string 'a' contains single character. The output is the same as input."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of the easiest method to check whether a character has previously occurred in the string.</p>",
            "<p>Instead of traversing the string again and again, can we instead store previously encountered characters in a data structure?</p>",
            "<p>Think of a better data structure to store these previously encountered characters. Make use of the fact that the string only contains lower case characters.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}