{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9619,
            "title": "Remove Duplicates From Unsorted Linked List",
            "titleSlug": "remove-duplicates-from-unsorted-linked-list_1069331",
            "content": "<h4 id=\"you-are-given-a-linked-list-of-n-nodes-your-task-is-to-remove-the-duplicate-nodes-from-the-linked-list-such-that-every-element-in-the-linked-list-occurs-only-once-i-e-in-case-an-element-occurs-more-than-once-only-keep-its-first-occurrence-in-the-list\">You are given a linked list of N nodes. Your task is to remove the duplicate nodes from the linked list such that every element in the linked list occurs only once i.e. in case an element occurs more than once, only keep its first occurrence in the list.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>Assuming the linked list is 3 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 2 -&gt; 3 -&gt; NULL.\n\nNumber \u20182\u2019 and \u20183\u2019 occurs more than once. Hence we remove the duplicates and keep only their first occurrence. So, our list becomes : 3 -&gt; 2 -&gt; 4 -&gt; NULL.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases.\n\nThe first and the only line of every test case contains the elements of the linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, the resulting linked list is printed.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>When multiple nodes have the same element, the node which appeared first is kept, all other duplicates are removed i.e. the order of the nodes should be preserved.\n\nYou don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100   \n1 &lt;= N &lt;= 10 ^ 4\n1 &lt;= data &lt;= 10 ^ 5 \n\nWhere \u2018N\u2019 is the number of nodes in the list and &#39;data&#39; is the value of list nodes.\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 2 5 4 2 2 -1\n1 2 1 2 2 2 7 7 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>4 2 5 -1\n1 2 7 -1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input1\">Explanation of Sample Input1 :</h5>\n\n<pre><code>For the first test case, the linked list is 4 -&gt; 2 -&gt; 5 -&gt; 4 -&gt; 2 -&gt; 2 -&gt; NULL. Number \u20184\u2019 and \u20182\u2019 occurs more than once. Hence, we remove the duplicates and keep only their first occurrence. So, our list becomes : 4 -&gt; 2 -&gt; 5 -&gt; NULL.\n\nFor the second test case, the linked list is 1 -&gt; 2 -&gt; 1 -&gt; 2 -&gt; 2 -&gt; 2 -&gt; 7 -&gt; 7 -&gt; NULL. Number \u20181\u2019, \u20182\u2019 and \u20187\u2019 occurs more than once. Hence, we remove the duplicates and keep only their first occurrence. So, our list becomes : 1 -&gt; 2 -&gt; 7 -&gt; NULL.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 3 3 3 3 -1\n10 20 10 20 30 10 20 30 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>3 -1\n10 20 30 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 170,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a linked list of N nodes, remove the duplicate nodes so that each element appears only once.  Keep the first occurrence of each element and remove subsequent duplicates, preserving the original order of the remaining nodes.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 10^4 (Number of nodes in the list)",
                    "1 <= data <= 10^5 (Value of list nodes)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "4 2 5 4 2 2 -1",
                        "output": "4 2 5 -1",
                        "explanation": "The linked list is 4 -> 2 -> 5 -> 4 -> 2 -> 2 -> NULL. The numbers 4 and 2 appear more than once.  After removing the duplicates, the list becomes 4 -> 2 -> 5 -> NULL."
                    },
                    {
                        "input": "1 2 1 2 2 2 7 7 -1",
                        "output": "1 2 7 -1",
                        "explanation": "The linked list is 1 -> 2 -> 1 -> 2 -> 2 -> 2 -> 7 -> 7 -> NULL. The numbers 1, 2, and 7 appear more than once. After removing the duplicates, the list becomes 1 -> 2 -> 7 -> NULL."
                    },
                    {
                        "input": "3 3 3 3 3 -1",
                        "output": "3 -1",
                        "explanation": "The linked list is 3 -> 3 -> 3 -> 3 -> 3 -> NULL. After removing the duplicates, the list becomes 3 -> NULL."
                    },
                    {
                        "input": "10 20 10 20 30 10 20 30 -1",
                        "output": "10 20 30 -1",
                        "explanation": "The linked list is 10 -> 20 -> 10 -> 20 -> 30 -> 10 -> 20 -> 30 -> NULL. After removing the duplicates, the list becomes 10 -> 20 -> 30 -> NULL."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Iteratively check for each element, whether it occurs multiple times or not.</p>",
            "<p>Use hashing to keep track of elements that have already been encountered.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n\n    Where N is the number of nodes in the Linked list.\n*/\n\n#include <unordered_map>\n\nNode *removeDuplicates(Node *head)\n{\n\n    Node *curr = head;\n\n    // Keep track of previous node.\n    Node *prev = NULL;\n\n    unordered_map<int, bool> seen;\n\n    // Iterate over the given linked list.\n    while (curr != NULL)\n    {\n        int val = curr->data;\n\n        if (seen[val])\n        {\n            // Node has been encountered before, so its a duplicate.\n            // Firstly update the next pointer of the previous node.\n            prev->next = curr->next;\n\n            // Delete the duplicate node.\n            delete curr;\n\n            // Move on to the next node.\n            curr = prev->next;\n        }\n        else\n        {\n            // Node is seen for the first time, so add it to hash table.\n            seen[val] = true;\n\n            // Move on to the next node.\n            prev = curr;\n            curr = curr->next;\n        }\n    }\n\n    return head;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n\r\n    Where N is the number of nodes in the Linked list.\r\n\"\"\"\r\n\r\n\r\ndef removeDuplicates(head):\r\n\r\n    curr = head\r\n\r\n    # Keep track of previous node.\r\n    prev = None\r\n\r\n    seen = {}\r\n    while curr != None:\r\n        seen[curr.data] = False\r\n        curr = curr.next\r\n\r\n    curr = head\r\n\r\n    # Iterate over the given linked list.\r\n    while curr != None:\r\n        val = curr.data\r\n\r\n        if seen[val]:\r\n            # Node has been encountered before, so its a duplicate.\r\n            # Firstly update the next pointer of the previous node.\r\n            prev.next = curr.next\r\n\r\n            # Delete the duplicate node.\r\n            del curr\r\n\r\n            # Move on to the next node.\r\n            curr = prev.next\r\n        else:\r\n            # Node is seen for the first time, so add it to hash table.\r\n            seen[val] = True\r\n\r\n            # Move on to the next node.\r\n            prev = curr\r\n            curr = curr.next\r\n\r\n    return head\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n\r\n    Where N is the number of nodes in the Linked list.\r\n*/\r\n\r\nimport java.util.HashMap;\r\n\r\npublic class Solution {\r\n\t\r\n\tpublic static LinkedListNode<Integer> removeDuplicates(LinkedListNode<Integer> head) {\r\n\r\n        LinkedListNode<Integer> curr = head;\r\n\r\n        // Keep track of previous node.\r\n        LinkedListNode<Integer> prev = null;\r\n\r\n        HashMap<Integer, Boolean> seen = new HashMap<>(); \r\n\r\n        // Iterate over the given linked list.\r\n        while (curr != null){\r\n            int val = curr.data;\r\n\r\n            if (seen.containsKey(val)){\r\n\r\n                // Node has been encountered before, so its a duplicate.\r\n                // Firstly update the next pointer of the previous node.\r\n                prev.next = curr.next;\r\n\r\n                // Move on to the next node.\r\n                curr = prev.next;\r\n            }\r\n            else{\r\n\r\n                // Node is seen for the first time, so add it to hash table.\r\n                seen.put(val, true);\r\n\r\n                // Move on to the next node.\r\n                prev = curr;\r\n                curr = curr.next;\r\n            }\r\n        }\r\n\r\n        return head;      \r\n    }\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}