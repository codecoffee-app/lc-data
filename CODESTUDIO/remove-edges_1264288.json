{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10756,
            "title": "Remove Edges",
            "titleSlug": "remove-edges_1264288",
            "content": "<h4 id=\"you-are-given-an-undirected-graph-with-n-vertices-and-m-edges-each-edge-has-a-particular-type-as-described-below\">You are given an undirected graph with \u2018N\u2019 vertices and \u2018M\u2019 edges. Each edge has a particular type as described below:</h4>\n\n<pre><code>An edge with type 1 can only be traversed by a person \u2018A\u2019.\n\nAn edge with type 2 can only be traversed by a person \u2018B\u2019.\n\nAn edge with type 3 can be traversed by both persons \u2018A\u2019 and \u2018B\u2019.\n</code></pre>\n\n<h4 id=\"your-task-is-to-determine-the-maximum-number-of-edges-that-can-be-removed-such-that-after-removing-these-edges-all-the-nodes-can-still-be-traversed-by-both-a-and-b\">Your task is to determine the maximum number of edges that can be removed such that after removing these edges, all the nodes can still be traversed by both \u2018A\u2019 and \u2018B\u2019.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019, which denotes the number of test cases to be run. Then, the \u2018T\u2019 test cases follow. \n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019, denoting the total number of nodes, and \u2018M\u2019, denoting the total number of edges. \n\nThen \u2018M\u2019 lines follow. Each of which has three space-separated integers, \u2018X\u2019 \u2018Y\u2019, and \u2018Z\u2019.\n\n\u2018X\u2019 denotes the type of edge. \u2018Y\u2019 and \u2018Z\u2019  denote the two nodes between which the edge is present.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the maximum number of edges that can be removed.\n\nThe output for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N,M &lt; 10 ^ 4\nedges[i].length = 3\n1 &lt;= edges[i][0] &lt;= 3\n1 &lt;= edges[i][1], edges[i][1] &lt;= N\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the total number of nodes, \u2018M\u2019 is the total number of edges and edges[i] describes the i-th edge\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n4 6\n1 3 4\n1 1 2\n2 1 3\n2 2 4\n3 1 4\n3 2 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/graph2-8392.png\" alt=\"graph_example\"> </p>\n\n<pre><code>In the first case, there are a total of 2 typeA edges. One of them can be removed as the graph will still be traversable. Similarly, one of the two typeB edges can be removed as well because even after removing an edge, B can still visit all nodes using any other path. So, a total of 2 edges can be removed, and all nodes can still be visited by both \u2018A\u2019 and \u2018B\u2019.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n4 3\n1 1 4\n2 1 2\n3 2 3 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<p><img src=\"https://files.codingninjas.in/graph2-8392.png\" alt=\"graph_example\"> </p>\n\n<pre><code>In this case, there is a path for \u2018A\u2019 between node 1 and node 4. There is also a path between node 2 and node 3. But there is no connection between these two paths. Hence \u2018A\u2019 can never visit all nodes. \nSimilarly, for \u2018B\u2019, there is a path between node 1 and node 2. There is also a path between node 2 and node 3. But there is no path to reach node 4, and thus, there is no connection between node 4 and any other node. Hence \u2018A\u2019 can never visit all nodes. \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph with 'N' vertices and 'M' edges. Each edge has a type: 1 (traversable only by person A), 2 (traversable only by person B), or 3 (traversable by both A and B).  The goal is to determine the maximum number of edges that can be removed while ensuring that both person A and person B can still traverse all the nodes in the graph.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N, M <= 10^4",
                    "edges[i].length = 3",
                    "1 <= edges[i][0] <= 3",
                    "1 <= edges[i][1], edges[i][2] <= N",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "4 6\n1 3 4\n1 1 2\n2 1 3\n2 2 4\n3 1 4\n3 2 3",
                        "output": "2",
                        "explanation": "In this case, one of the type 1 edges (e.g., edge between nodes 3 and 4 or between 1 and 2) and one of the type 2 edges (e.g., edge between nodes 1 and 3 or between nodes 2 and 4) can be removed without disconnecting the graph for either person A or B. Thus a total of 2 edges can be removed."
                    },
                    {
                        "input": "4 3\n1 1 4\n2 1 2\n3 2 3",
                        "output": "-1",
                        "explanation": "In this case, there is no path available for both A and B to traverse all nodes after edge removal. Person A can traverse between nodes 1 and 4, and Person B can traverse between nodes 1, 2, and 3, but there's no connection between the paths. Node 4 will not be connected to other nodes for person B, and node 1 will not be connected for person A."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Build the network instead of removing extra edges.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}