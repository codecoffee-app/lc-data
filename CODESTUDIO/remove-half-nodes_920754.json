{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8955,
            "title": "Remove Half Nodes",
            "titleSlug": "remove-half-nodes_920754",
            "content": "<h4 id=\"you-are-given-a-binary-tree-consisting-of-n-nodes-your-task-is-to-replace-all-the-half-nodes-present-in-the-binary-tree-with-its-child-node-half-nodes-are-those-nodes-that-have-only-one-child\">You are given a binary tree consisting of \u2018N\u2019 nodes. Your task is to replace all the half nodes present in the binary tree with its child node. Half nodes are those nodes that have only one child.</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>In this given binary tree, nodes 7, 5, and 9 are half nodes because they have only one child node. So we have to replace these nodes with their child. The inorder traversal of the updated binary tree is [1, 6, 11, 2, 4]. Hence, the answer is [1, 6, 11, 2, 4].\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000477_1627120185_image2.png\" alt=\"undirected\"></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000478_1627120524_image1.png\" alt=\"undirected\">\n    1\n    2 3\n    4 -1 5 6\n    -1 7 -1 -1 -1 -1\n    -1 -1</p>\n\n<pre><code>Explanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. \n\nThe second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019, representing the number of test cases.\n\nThe first line of each test case contains space-separated integers representing the level order traversal of the binary tree. If any node does not have a left or right child, take -1 in place of the child. \n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the inorder traversal of the updated tree in a space-separated manner.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 5\n1 &lt;= \u2018N\u2019 &lt;= 10^5\n1 &lt;= nodeVal &lt;= 10^12\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n7 12 8 2 -1 -1 -1 -1 -1\n1 2 3 -1 4 -1 7 5 6 8 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 7 8\n5 4 6 1 8\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>In test case 1: \nIn the given binary tree, node 12 is the half node because it has only one child. So we have to replace that node with their child. The inorder traversal of the updated binary tree is [2, 7, 8]. Hence, the answer is [2, 7, 8].\n\nIn test case 2: \nIn the given binary tree, nodes 2, 3, and 7 are the half nodes because they have only one child. So we have to replace these nodes with their child. The inorder traversal of the updated binary tree is [5, 4, 6, 1, 8]. Hence, the answer is [5, 4, 6, 1, 8].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 -1 5 -1 7 -1 9 -1 -1\n2 7 5 -1 9 -1 1 11 4 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>9    \n11 9 4 2 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, your task is to modify the tree by replacing each half node with its child. A half node is defined as a node that has only one child (either a left child or a right child, but not both). Return the root of the modified tree.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 5",
                    "1 <= \u2018N\u2019 <= 10^5",
                    "1 <= nodeVal <= 10^12"
                ],
                "testcases": [
                    {
                        "input": "root=createTree([7, 12, 8, 2, -1, -1, -1, -1, -1])",
                        "output": "inorderTraversal(removeHalfNodes(root)) == [2, 7, 8]",
                        "explanation": "The tree initially has a half node 12, which is replaced by its child, resulting in the inorder traversal [2, 7, 8]."
                    },
                    {
                        "input": "root=createTree([1, 2, 3, -1, 4, -1, 7, 5, 6, 8, -1, -1, -1, -1, -1, -1, -1])",
                        "output": "inorderTraversal(removeHalfNodes(root)) == [5, 4, 6, 1, 8]",
                        "explanation": "The tree initially has half nodes 2, 3 and 7, which are replaced by their respective children. The resulting inorder traversal is [5, 4, 6, 1, 8]."
                    },
                    {
                        "input": "root=createTree([1, -1, 5, -1, 7, -1, 9, -1, -1])",
                        "output": "inorderTraversal(removeHalfNodes(root)) == [9]",
                        "explanation": "The initial tree has half nodes 1, 5, and 7. Replacing them results in a single node 9."
                    },
                    {
                        "input": "root=createTree([2, 7, 5, -1, 9, -1, 1, 11, 4, -1, -1, -1, -1, -1, -1])",
                        "output": "inorderTraversal(removeHalfNodes(root)) == [11, 9, 4, 2, 1]",
                        "explanation": "Half nodes are replaced, and the inorder traversal of the modified tree is [11, 9, 4, 2, 1]."
                    },
                    {
                        "input": "root=createTree([1,2,-1,3,-1,-1,-1])",
                        "output": "inorderTraversal(removeHalfNodes(root)) == [3,1]",
                        "explanation": "The initial tree has half node 2. Replacing it results in the inorder traversal [3, 1]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of a Depth First Search approach.</p>",
            "<p>Try to think of a Breadth-First Search approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}