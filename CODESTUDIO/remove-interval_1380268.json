{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11151,
            "title": "Remove Interval",
            "titleSlug": "remove-interval_1380268",
            "content": "<h4 id=\"you-are-given-a-sorted-list-of-n-disjoint-ranges-of-integers-and-a-range-removerange-a-range-can-be-represented-as-start-end-where-end-start-and-all-the-real-numbers-x-such-that-start-x-end-belong-to-that-range\">You are given a sorted list of \u2018N\u2019 disjoint ranges of integers and a range \u2018removeRange\u2019. A range can be represented as [ \u2018start\u2019, \u2018end\u2019) where \u2018end\u2019 &gt; \u2018start\u2019 and all the real numbers \u2018x\u2019 such that ( \u2018start\u2019 &lt;= \u2018x\u2019 &lt; \u2018end\u2019 ) belong to that range.</h4>\n\n<h4 id=\"you-need-to-remove-all-intersections-between-any-range-in-the-given-list-of-ranges-and-range-removerange-then-return-a-resulting-list-of-ranges-in-sorted-order\">You need to remove all intersections between any range in the given list of ranges and range \u2018removeRange\u2019. Then return a resulting list of ranges in sorted order.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>Here, Disjoint ranges mean that no two ranges from the given list intersect each other.\n\nA list of ranges [ (X1, Y1), (X2, Y2), (X3, Y3) \u2026 (Xn, Yn) ] is sorted if and only if Xi &gt; Xi-1  and as the given ranges are disjoint, so Xi &gt; Yi-1 for each i [ 1 &lt; i &lt;= n]. \n</code></pre>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>Let \u2018N\u2019= 3, given list be [(1, 3), (4, 6), (8, 11) ], and \u2018removeRange\u2019 be (2, 8).\n\nThen after removing all intersections between ranges in the list and \u2018removeRange\u2019.The list will look like [(1, 2), (8, 11) ].\nAs we have removed, \nRange (2,3) from the first range (1,3).\nThe whole second range (4, 6) as this is fully intersecting with the given \u2018removeRange\u2019\nNothing from the third range (8, 11) as no point is in this range is intersecting with the given \u2018removeRange\u2019 (2,8).\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The resulting list after removing ranges can be empty also.\n</code></pre>\n\n<h4 id=\"input-format\">Input format :</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. The description of \u2018T\u2019 test cases follows\n\nThe first line of each test case contains an integer  \u2018N\u2019  representing the number of ranges in the given list.      \nNext \u2018N\u2019 lines of the test case contain two space-separated integers, \u2018start\u2019 and \u2018end\u2019, denoting the starting and the ending point of the i-th range.\n\nThe last line of the test cases contains two space-separated integers, \u2018start\u2019 and \u2018end\u2019, denoting the starting and the ending point of the \u2018removeRange\u2019.  \n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>For each test case, print \u2018K\u2019 lines containing two space-separated integers, \u2018start\u2019 and \u2018end\u2019, denoting the starting and the ending point of the ith range in the resulting list after removing ranges. Where \u2018K\u2019 is the size of the resulting list of ranges. If \u2018K\u2019 is 0 i.e. the resulting list does not contain any range then print \u2018-1\u2019\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. \n\nIn the given function, you need to return a 2D array \u2018arr[K][2]\u2019, where \u2018K\u2019 is the number of ranges in the resulting list after removing ranges and \u2018arr[i][0]\u2019,  \u2018arr[i][1]\u2019 are the starting and ending points in the \u2018i th\u2019 range of resulting string.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 3000\n1 &lt;= start &lt;= end &lt;= 10^9\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 is the number of ranges, and \u2018start\u2019 and \u2018end\u2019 represent the first and the last integer of a range.\n\nTime Limit : 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n4\n1 3\n4 6\n7 8\n9 10\n5 8\n1\n1 6\n2 4\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>1 3\n4 5\n9 10\n1 2\n4 6\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h4>\n\n<pre><code>Test case 1:\nThe given ranges are [ (1, 3), (4, 6), (7, 8), (9, 10)] and given \u2018removeRange\u2019 is (5, 8).\nBelow figure shows the remove operation on given ranges, \u2018removeRange\u2019 is shown in red color.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-8746.png\" alt=\"1\"></p>\n\n<pre><code>Test case 2:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/2-8747.png\" alt=\"1\"></p>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>1\n2\n5 10\n10 12\n1 15\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>-1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h4>\n\n<pre><code>The given \u2018removeRange\u2019 fully intersects with all ranges in the given list, thus we have to remove all ranges and return an empty list.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted list of disjoint integer ranges and a 'removeRange', the task is to remove all intersections between the given ranges and the 'removeRange'. Return the resulting list of ranges in sorted order. A range is represented as [start, end), where end > start, encompassing all real numbers 'x' such that start <= x < end.\n\nDisjoint ranges mean that no two ranges in the given list intersect each other. A list of ranges [(X1, Y1), (X2, Y2), ..., (Xn, Yn)] is sorted if Xi > Xi-1, and as the ranges are disjoint, Xi > Yi-1 for each i (1 < i <= n).\n\nThe resulting list after removing ranges can be empty.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 3000",
                    "1 <= start <= end <= 10^9",
                    "T is the number of test cases.",
                    "N is the number of ranges.",
                    "start and end represent the start and end points of a range.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n4\n1 3\n4 6\n7 8\n9 10\n5 8\n1\n1 6\n2 4",
                        "output": "1 3\n4 5\n9 10\n1 2\n4 6",
                        "explanation": "Test Case 1: Ranges are [(1, 3), (4, 6), (7, 8), (9, 10)], removeRange is (5, 8). The range (2,3) removed from the first range (1,3) becomes (1,2). The second range (4, 6) is partially intersected and becomes (4,5) as the right portion is removed. Removing (7,8) from (7,8)  results in an empty range, which is removed and nothing changed in the fourth range (9,10) as no intersection. \n\nTest Case 2: Range is [(1, 6)], removeRange is (2, 4). Portion (2,4) is removed and (1,6) becomes (1,2) (4,6)"
                    },
                    {
                        "input": "1\n2\n5 10\n10 12\n1 15",
                        "output": "-1",
                        "explanation": "The removeRange (1, 15) fully intersects with all ranges [(5, 10), (10, 12)], resulting in an empty list of ranges.  Therefore the resulting output will be -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check all points from minimum point to maximum point in the given range.</p>",
            "<p>Iteratively move over ranges, there are only a few cases to handle.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}