{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10731,
            "title": "Remove Invalid Parentheses",
            "titleSlug": "remove-invalid-parentheses_1263697",
            "content": "<h4 id=\"you-are-given-a-string-consisting-only-of-parentheses-and-letters-your-task-is-to-remove-the-minimum-number-of-invalid-parentheses-and-return-all-possible-unique-valid-strings-thus-obtained\">You are given a string consisting only of parentheses and letters. Your task is to remove the minimum number of invalid parentheses and return all possible unique, valid strings thus obtained.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1) A string is valid only if every left parenthesis has corresponding right parentheses in the same order.\n\nFor example Given \u2018STR\u2019 = (())()) is not a valid string, whereas \u2018STR\u2019 = (())() is a valid string.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format</h4>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first and the only line of each test case contains a single string \u2018STR\u2019 representing the parenthesis.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, return all possible unique, valid strings after removing the minimum number of parentheses. \n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= |STR| &lt;= 50\n\nTime Limit: 1 second\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n(((a))()\n)(()))\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>(((a))) ((a))()\n(())\n</code></pre>\n\n<h4 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h4>\n\n<pre><code>Test Case 1 :  \nGiven \u2018STR\u2019 = (((a))()\nFrom this string, two valid strings can be generated after removing only one parenthesis, which is minimum.\nOne way is to remove the parenthesis at index 6 to generate (((a))).\nAnother way is to remove either the first, second, or third parenthesis, which will result in the same string, i.e., ((a))().\n\nTest Case 2 : \nGiven \u2018STR\u2019 = )(()))\nThe minimum number of invalid parentheses required to be removed is 2. We have to remove the first and last parentheses to generate a valid string.\nSo the valid string is (()).\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>1\n(()(()(())\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>()()(()) ()(()()) (())(()) (()()()) (()(()))\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `str` consisting of parentheses and letters, implement the function `removeInvalidParentheses(string &str)` to find all possible valid strings by removing the minimum number of invalid parentheses. A valid string is one where every left parenthesis has a corresponding right parenthesis in the correct order. Return a vector of unique valid strings.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= |STR| <= 50",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "str = \"(((a))()\"",
                        "output": "[\"(((a)))\", \"((a))()\"]",
                        "explanation": "Removing one parenthesis from \"(((a))()\" can result in \"(((a)))\" (removing the parenthesis at index 6) or \"((a))()\" (removing the first, second, or third parenthesis). Both are valid."
                    },
                    {
                        "input": "str = \")(()))\"",
                        "output": "[\"(())\"]",
                        "explanation": "Removing the first and last parentheses from \")(()))\" results in \"(())\", which is a valid string. This requires removing the minimum number of parentheses (2)."
                    },
                    {
                        "input": "str = \"(()(()(())\"",
                        "output": "[\"()()(())\", \"()(()())\", \"(())(())\", \"(()()())\", \"(()(())\"]",
                        "explanation": "Multiple valid strings can be generated by removing invalid parentheses.  The output contains all possible unique valid strings after removing the minimum number of parentheses."
                    },
                    {
                        "input": "str = \"(a(b(c)d)\"",
                        "output": "[\"(a(b(c)d))\"]",
                        "explanation": "The input string is already a valid string so no removal is required."
                    },
                    {
                        "input": "str = \")))\"",
                        "output": "[]",
                        "explanation": "The only way to make this valid is to remove all the right parentheses. Since empty string is not a valid string, return empty list."
                    },
                    {
                        "input": "str = \"(\"",
                        "output": "[]",
                        "explanation": "Removing the only character leads to an empty string, which is not valid. Thus, returning an empty array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a similar approach that, by default, guarantees minimum removal of parentheses by considering strings level by level?</p>",
            "<p>Can you explore all the possibilities to find a unique, valid string with maximum size?</p>",
            "<p>In approach 1, do we really need to remove every parenthesis and try out the possibilities for a valid string?</p><p>We know that in output, all valid strings will have the same length. So, isn\u2019t it better to cut down the unwanted recursive calls by removing only the required number of parentheses?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}