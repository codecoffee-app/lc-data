{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12424,
            "title": "Remove K Digits",
            "titleSlug": "remove-k-digits_1461221",
            "content": "<h4 id=\"you-are-given-a-non-negative-integer-num-in-the-form-of-a-string-and-provided-with-an-integer-k\">You are given a non-negative integer <em><strong>\u2018num\u2019</strong></em> in the form of a string and provided with an integer  <em><strong>\u2018k\u2019</strong></em>.</h4>\n\n<p><br></p>\n\n<h4 id=\"you-need-to-find-the-smallest-integer-possible-by-removing-exactly-k-digits-from-num\">You need to find the smallest integer possible by removing exactly \u2018k\u2019 digits from \u2018num.\u2019</h4>\n\n<p><br></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>\u2018num\u2019 does not have leading zeros except when \u2018num\u2019 equals zero.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018num\u2019 = \u2018141\u2019 , \u2018k\u2019 = 1.\n\nOutput: \u201811\u2019\n\nExplanation: By removing only 1 digit from \u2018num\u2019, 3 numbers can be formed: 14, 11, and 41. Out of which 11 is the smallest number.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t have to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains the string &#39;num&#39;.\n\nThe second line contains the integer &#39;k&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return a string, the minimum integer that can be made by removing \u2018k\u2019 digits from \u2018num\u2019.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>123\n1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>12\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>We can remove the last digit, \u20183\u2019 to get the smallest possible answer, \u201812\u2019.\n\nOther possible answers are \u201823\u2019 and \u201813\u2019, all of which are greater than \u201812\u2019.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3214\n2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>14\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>In this case, six numbers can be formed: 32, 31, 34, 21, 24, 14.\nOut of which 14 is the smallest.\n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity:</h5>\n\n<pre><code>The expected time complexity is O(n).\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>2 &lt;= |num| &lt;= 10^6\n0 &lt;= k &lt;= |num|\n\nTime limit: 1 second\n\nWhere |num| denotes the length of the initial string \u2018num\u2019 and \u2018k\u2019 represents the number of digits to be removed. \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 30,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative integer 'num' represented as a string and an integer 'k', find the smallest possible integer that can be formed by removing exactly 'k' digits from 'num'. The resulting number should not have leading zeros unless it is zero itself.",
                "constraints": [
                    "2 <= |num| <= 10^6, where |num| is the length of the string 'num'.",
                    "0 <= k <= |num|",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "123\n1",
                        "output": "12",
                        "explanation": "Removing '3' results in '12', which is smaller than removing '1' ('23') or '2' ('13')."
                    },
                    {
                        "input": "3214\n2",
                        "output": "14",
                        "explanation": "Removing two digits optimally results in '14', which is the smallest possible number."
                    },
                    {
                        "input": "141\n1",
                        "output": "11",
                        "explanation": "Removing one digit can produce '14', '11' or '41'. The smallest of these is '11'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>If we remove \u2018k\u2019 digits from the initial number of say, length \u2018n\u2019, then the length of our answer will be \u2018n\u2019 - \u2018k'. Find all the integers you can create from \u2018num\u2019 of length \u2018n\u2019 - \u2018k\u2019&nbsp; and output the minimum amongst them.</p>",
            "<p><strong>&nbsp;</strong>Without loss of generality, suppose we have chosen (\u2018n\u2019 - \u2018k\u2019) - 1 characters till index \u2018idx\u2019 and now need to choose one digit from index \u2018idx\u2019 to \u2018n\u2019. It is easy to see that choosing the smallest digit in the range [\u2018Iidx\u2019, \u2018n\u2019] will make our answer more optimal. Similarly, it is easy to see that for any sample test case. The first digit is the smallest number in the range [0, \u2018fst\u2019)(for some index \u2018fst\u2019), the second digit is the smallest in the range [\u2018fst\u2019, \u2019snd\u2019) and the last digit is the smallest in the range [\u2018x\u2019, \u2018n\u2019)(for some index \u2018x\u2019).</p><p><br>&nbsp;</p>",
            "<p>In the previous approach we were looking into ranges and selecting the minimum character but instead we can just build a <strong>non-decreasing</strong> string(if possible) using at max \u2018k\u2019 deletions and after building that remove some of the last characters from this <strong>non-decreasing</strong> string to get a valid optimum answer.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}