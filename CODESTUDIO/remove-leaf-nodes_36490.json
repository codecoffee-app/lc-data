{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 1336,
            "title": "Remove Leaf Nodes",
            "titleSlug": "remove-leaf-nodes_36490",
            "content": "<h4 id=\"remove-all-leaf-nodes-from-a-given-generic-tree-leaf-nodes-are-those-nodes-which-dont-have-any-children\">Remove all leaf nodes from a given generic Tree. Leaf nodes are those nodes, which don&#39;t have any children.</h4>\n\n<h5 id=\"note-root-will-also-be-a-leaf-node-if-it-doesnt-have-any-child-you-dont-need-to-print-the-tree-just-remove-all-leaf-nodes-and-return-the-updated-root\">Note : Root will also be a leaf node if it doesn&#39;t have any child. You don&#39;t need to print the tree, just remove all leaf nodes and return the updated root.</h5>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>Line 1 : Elements in level order form separated by space (as per done in class). Order is - `\n\nRoot_data, n (No_Of_Child_Of_Root), n children, and so on for every element `\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Elements are printed level wise, each level in new line (separated by space)\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>10 3 20 30 40 2 40 50 0 0 0 0 \n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000001567_1687853201_PID1336_Input.jpg\" alt=\"Input Graph\" width=\"500\" height =\"300\"></p>\n\n<p><br>\n<br></p>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000001568_1687853210_PID1336_TreeOutput.jpg\" alt=\"Input Graph\" width=\"500\" height =\"400\"></p>\n\n<h5 id=\"sample-output-1-level-wise-each-level-in-new-line\">Sample Output 1 : (Level wise, each level in new line)</h5>\n\n<pre><code>10\n20\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 21,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a generic tree represented by its root node, remove all leaf nodes from the tree. A leaf node is defined as a node with no children. The root node should also be considered a leaf node if it has no children. Return the modified root of the tree after removing all leaf nodes.",
                "constraints": [
                    "The input tree can be empty (root is NULL).",
                    "The data within the tree nodes is of integer type.",
                    "You are not required to print the tree; only remove the leaf nodes and return the modified root."
                ],
                "testcases": [
                    {
                        "input": "root = TreeNode(10), root.addChild(TreeNode(20)), root.addChild(TreeNode(30)), root.addChild(TreeNode(40)), root.getChild(0)->addChild(TreeNode(40)), root.getChild(0)->addChild(TreeNode(50))",
                        "output": "10\n20",
                        "explanation": "The original tree is: 10 -> 20, 30, 40\n20 -> 40, 50\n30 -> ()\n40 -> ()\n40 -> ()\n50 -> ()\nAfter removing leaf nodes (30, 40, 40, 50), the tree becomes: 10 -> 20\n20 -> ()."
                    },
                    {
                        "input": "root = TreeNode(1)",
                        "output": "",
                        "explanation": "The tree contains only root node 1, which is a leaf node. After removing it, the tree becomes empty so there will be no output."
                    },
                    {
                        "input": "root = TreeNode(1), root.addChild(TreeNode(2)), root.addChild(TreeNode(3)), root.addChild(TreeNode(4)), root.getChild(0)->addChild(TreeNode(5))",
                        "output": "1",
                        "explanation": "The original tree is: 1 -> 2, 3, 4\n2 -> 5\n3 -> ()\n4 -> ()\n5 -> ()\nAfter removing leaf nodes (3, 4, 5), the tree becomes: 1 -> 2\n2 -> ()."
                    },
                    {
                        "input": "root = NULL",
                        "output": "",
                        "explanation": "Input is empty Tree. output will be empty."
                    },
                    {
                        "input": "root = TreeNode(10), root.addChild(TreeNode(20)), root.getChild(0)->addChild(TreeNode(30)), root.getChild(0)->getChild(0)->addChild(TreeNode(40)), root.getChild(0)->getChild(0)->getChild(0)->addChild(TreeNode(50))",
                        "output": "10\n20\n30\n40",
                        "explanation": "The original tree is: 10 -> 20\n20 -> 30\n30 -> 40\n40 -> 50\n50 -> ()\nAfter removing the leaf node (50), the tree becomes: 10 -> 20\n20 -> 30\n30 -> 40\n40 -> ()."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}