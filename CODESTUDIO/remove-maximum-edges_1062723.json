{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9599,
            "title": " Remove maximum edges",
            "titleSlug": "remove-maximum-edges_1062723",
            "content": "<h4 id=\"you-are-given-an-undirected-graph-with-n-nodes-and-m-edges-there-are-two-players-p1-and-p2-who-want-to-traverse-the-complete-graph-there-are-three-types-of-edges-in-the-graph-type-1-edges-can-be-traversed-by-player-p1-type-2-edges-can-be-traversed-by-player-p2-and-type-3-edges-can-be-traversed-by-both-p1-and-p2\">You are given an undirected graph with \u2018N\u2019 nodes and \u2018M\u2019 edges. There are two players P1 and P2, who want to traverse the complete graph. There are three types of edges in the graph, type 1 edges can be traversed by player P1, type 2 edges can be traversed by player P2, and type 3 edges can be traversed by both P1 and P2.</h4>\n\n<h4 id=\"you-are-supposed-to-find-the-maximum-number-of-edges-that-can-be-removed-from-the-graph-so-that-both-players-p1-and-p2-can-reach-any-node-of-the-graph\">You are supposed to find the maximum number of edges that can be removed from the graph so that both players P1 and P2 can reach any node of the graph.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<p><img src=\"https://files.codingninjas.in/example-6901.png\" alt=\"Example\"></p>\n\n<pre><code>In the above graph, we can remove both the edges connecting node 1 and node 2(of type 1 and type 2). The graph will be fully traversable by only type 3 edges.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. The test cases are as follows.\n\nThe first line of each test case contains two integers separated by a single space \u2018N\u2019 and \u2018M\u2019 denoting the number of the nodes and the number of edges respectively.\n\nThe next \u2018M\u2019 lines of each test case contain three integers \u201cTYPE\u201d, \u2018X\u2019 and \u2018Y\u2019 separated by a single space, here \u201cTYPE\u201d denotes the type of edge and \u2018X\u2019 and \u2019Y\u2019 denote the vertices connected by an edge.  \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the maximum number of edges that can be removed such that the graph is fully traversable by both P1 and P2 after removing the edges. If the graph cannot be fully traversed by P1 or P2 return -1.\n\nPrint the output of each test case on a new line. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10^5\n1 &lt;= M &lt;= 10^5\n1 &lt;= TYPE &lt;= 3\n1 &lt;= X,Y &lt;= N \n\nWhere \u2018T\u2019 denotes the number of test cases, \u2018N\u2019 denotes the number of nodes in the graph, \u2018M\u2019 denotes the number of edges in the graph, \u201cTYPE\u201d denotes the type of edge, \u2018X\u2019 and \u2018Y\u2019 denote the nodes of the graph.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 5\n1 1 2\n2 1 2\n3 4 1\n3 2 4\n3 3 4\n3 3\n3 1 2\n2 2 3\n1 1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>In the first test case, we can remove 2 edges connecting node 1 and node 2(refer to the example above).\n\nIn the second test case, we cannot remove any edge as removing any edge will make the graph disconnected.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4 2\n1 2 1\n3 3 4\n2 2\n3 1 2\n1 2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>-1\n1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h5>\n\n<pre><code>In the first test case, the graph is disconnected hence both the players cannot traverse all the nodes.\n\nIn the second test case, we can remove one edge of type 1.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph with 'N' nodes and 'M' edges, where edges are of three types: type 1 (traversable only by player P1), type 2 (traversable only by player P2), and type 3 (traversable by both). Determine the maximum number of edges that can be removed from the graph while ensuring that both players P1 and P2 can still reach any node in the graph. If it's impossible for both players to traverse the entire graph after any edge removals, return -1.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10^5",
                    "1 <= M <= 10^5",
                    "1 <= TYPE <= 3",
                    "1 <= X,Y <= N"
                ],
                "testcases": [
                    {
                        "input": "n = 4, m = 5, edges = {{1, 1, 2}, {2, 1, 2}, {3, 4, 1}, {3, 2, 4}, {3, 3, 4}}",
                        "output": "2",
                        "explanation": "We can remove the two edges connecting node 1 and node 2 (of type 1 and type 2). The graph will be fully traversable by only type 3 edges."
                    },
                    {
                        "input": "n = 3, m = 3, edges = {{3, 1, 2}, {2, 2, 3}, {1, 1, 3}}",
                        "output": "0",
                        "explanation": "We cannot remove any edge as removing any edge will make the graph disconnected for either player P1 or P2."
                    },
                    {
                        "input": "n = 4, m = 2, edges = {{1, 2, 1}, {3, 3, 4}}",
                        "output": "-1",
                        "explanation": "The graph is disconnected; neither player can traverse all nodes."
                    },
                    {
                        "input": "n = 2, m = 2, edges = {{3, 1, 2}, {1, 2, 1}}",
                        "output": "1",
                        "explanation": "We can remove the edge of type 1, leaving only the type 3 edge, still allowing both players to traverse the graph."
                    },
                    {
                        "input": "n = 5, m = 7, edges = {{1, 1, 2}, {2, 2, 3}, {3, 1, 3}, {3, 2, 4}, {1, 4, 5}, {2, 3, 5}, {3, 1, 5}}",
                        "output": "0",
                        "explanation": "Removing any edge disconnects either player 1 or player 2 from reaching all nodes. So the output is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about which type of edges should be traversed first?&nbsp;</p>",
            "<p>Can you try to reduce the time complexity of finding the parent by using path compression and union by size?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}