{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8865,
            "title": "Remove node in BST",
            "titleSlug": "remove-node-in-bst_920452",
            "content": "<h4 id=\"you-are-given-a-bst-binary-search-tree-with-n-number-of-nodes-and-a-node-x-which-is-definitely-present-in-the-input-the-bst-you-need-to-remove-the-node-x-and-return-the-root-of-the-updated-bst\">You are given a BST (Binary search tree) with\u2019 N\u2019 number of nodes and a node \u2018X\u2019 (which is definitely present in the input the BST). You need to remove the node \u2018X\u2019 and return the root of the updated BST.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<p><img src=\"https://files.codingninjas.in/bst-11214.png\" alt=\"1\"> \n<img src=\"https://files.codingninjas.in/bst-after-deletion-11213.png\" alt=\"1\"></p>\n\n<pre><code>Figure1 : Input BST and Figure2: Output BST\n\nIn the above example, For the given BST (Fig.1) and X = 6,  we have output( Fig. 2 ) after removing node 6.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. Then each test case follows.\n\nThe first line of each test case contains nodes in the level order form (separated by space). If any node does not have a left or right child, take -1 in its place.\n\nThe second and the last line of each test case contains \u2018X\u2019 denoting the node to remove.\n\nFor example, the input for the tree depicted in the below image. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst-11214.png\" alt=\"1\"></p>\n\n<pre><code>10\n5 15\n2 6 -1 -1\n-1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 10\n\nLevel 2 :\nLeft child of 10 = 5\nRight child of 10 = 15\n\nLevel 3 :\nLeft child of 5 = 2\nRight child of 5 = 6\nLeft child of 15 = null(-1)\nRight child of 15 =  null (-1)\n\n\nLevel 4 :\nLeft child of 2 = null (-1)\nRight child of 2 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n 10 5 15 2 6 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing \u2018N\u2019-1 single space-separated integers, which is the inorder traversal of updated BST..\n\nThe output of each test case will be printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 5 * 10 ^ 3\n1 &lt;= nodeVal[i] &lt;= 10 ^ 9\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n10 5 15 2 6 -1 -1 -1 -1 -1 -1\n6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 5 10 15\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>In the first test case, the input figure is given above in the input format explanation. \nAfter removing 6 from BST, the tree becomes as below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst-after-deletion-11213.png\" alt=\"1\"></p>\n\n<pre><code>So the inorder traversal of the updated tree is: 2 5 10 15\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n2 1 3 -1 -1 -1 -1\n2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/bstoutput2-1-11215.png\" alt=\"1\">\n<img src=\"https://files.codingninjas.in/bstoutput2-2-11216.png\" alt=\"1\"></p>\n\n<pre><code>Figure1: Input BST  and Figure2: Output BST\n\nSo the inorder traversal of the updated tree is: 1 3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) with 'N' nodes and a node 'X' that is guaranteed to be present in the BST, the task is to remove node 'X' from the tree and return the root of the modified BST.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 5 * 10^3",
                    "1 <= nodeVal[i] <= 10^9",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "10 5 15 2 6 -1 -1 -1 -1 -1 -1\n6",
                        "output": "2 5 10 15",
                        "explanation": "The initial BST contains the nodes [10, 5, 15, 2, 6]. After removing the node with value 6, the resulting BST contains nodes [10, 5, 15, 2]. The inorder traversal of this updated BST is 2 5 10 15."
                    },
                    {
                        "input": "2 1 3 -1 -1 -1 -1\n2",
                        "output": "1 3",
                        "explanation": "The initial BST contains the nodes [2, 1, 3]. After removing the node with value 2, the resulting BST contains nodes [1, 3]. The inorder traversal of this updated BST is 1 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Consider nodes to be deleted as nodes with no child, only one child and two children separately.</p>",
            "<p>Swap the value of root with the right successor value and delete the successor.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}