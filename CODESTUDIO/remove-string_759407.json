{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7702,
            "title": "Remove String",
            "titleSlug": "remove-string_759407",
            "content": "<h4 id=\"you-have-been-given-a-linked-list-where-each-node-has-a-single-character-you-have-also-been-given-a-string-str\">You have been given a linked list where each node has a single character. You have also been given a string &#39;STR&#39;.</h4>\n\n<h4 id=\"you-have-to-remove-all-the-occurrences-of-string-str-from-the-linked-list\">You have to remove all the occurrences of string STR from the linked list.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. Start checking from the end of the linked list and not from the beginning. For example, if the linked list is ( a, b, a ,b, a)  and the string is equal to \u201caba\u201d , then the answer should be (a b), not (b a).\n\n2. After removing an occurrence check again for new formations.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an Integer &#39;T&#39; which denotes the number of test cases.\n\nThe first line of each test case contains the elements of the singly linked list which are the characters not separated by a space.\n\nThe second line of each test case contains the string named &#39;STR&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, return the head of the linked list with updated character nodes after removing occurrences of the string.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print the output, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n0 &lt;= N &lt;= 10^3  \n0 &lt;= K &lt;= 10^2\n\nWhere &#39;N&#39; is the size of the singly linked list and &#39;K&#39; is the size of the string.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\nabcbcaab\nbca\nny\nnytq\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>a b \nn y\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-output-1\">Explanation of The Sample Output 1:</h5>\n\n<pre><code>In test case 1, after 1st removal of the string from the linked list: abcbcaab -&gt; abcab. Now again, after 2nd removal of the string from the linked list: abcab -&gt; ab. Thus ab is the updated linked list.\n\nIn test case 2, no occurrence of the string is present in the linked list, thus the linked list will be unchanged. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\nqcacca\ncac\nxxxxxxxxxxxxxx\nxxx\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>q c a\nx x\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-output-2\">Explanation of The Sample Output 2 :</h5>\n\n<pre><code>In test case 1, after the 1st removal of the string from the linked list: qcacca  -&gt;  qca. Thus qca is the updated linked list.\n\nIn test case 2, as we can see there are total 4 occurrences of xxx, and by removing each occurrence: xxxxxxxxxxxxxx -&gt; xxxxxxxxxxx -&gt; xxxxxxxx -&gt; xxxxx -&gt; xx. Thus no more occurrence of the string is possible and hence the updated linked list will be xx.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 14,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a singly linked list where each node contains a single character. You are also given a string 'STR'. Your task is to remove all occurrences of the string 'STR' from the linked list. It's crucial to remove occurrences from the end of the linked list and continue checking for new formations after each removal.",
                "constraints": [
                    "1 <= T <= 10",
                    "0 <= N <= 10^3  (Where 'N' is the size of the singly linked list)",
                    "0 <= K <= 10^2 (Where 'K' is the size of the string)",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "abcbcaab\nbca",
                        "output": "a b",
                        "explanation": "Initially, the linked list is 'abcbcaab'. After removing 'bca' once, we get 'abcab'. Removing 'bca' again results in 'ab'. Therefore, the final linked list is 'a b'."
                    },
                    {
                        "input": "ny\nnytq",
                        "output": "n y",
                        "explanation": "The string 'nytq' is not present in the linked list 'ny'. Thus, the linked list remains unchanged as 'n y'."
                    },
                    {
                        "input": "qcacca\ncac",
                        "output": "q c a",
                        "explanation": "Removing the string 'cac' from 'qcacca' results in 'qca'. Therefore, the output is 'q c a'."
                    },
                    {
                        "input": "xxxxxxxxxxxxxx\nxxx",
                        "output": "x x",
                        "explanation": "The string 'xxx' appears multiple times in 'xxxxxxxxxxxxxx'.  Removing each occurrence iteratively: 'xxxxxxxxxxxxxx' -> 'xxxxxxxxxxx' -> 'xxxxxxxx' -> 'xxxxx' -> 'xx'.  The final linked list is 'x x'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try using backtracking and recursion approach to find&nbsp;</p><p>the occurrence of a string in the linked list from the end.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}