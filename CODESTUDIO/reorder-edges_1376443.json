{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11028,
            "title": "Reorder edges",
            "titleSlug": "reorder-edges_1376443",
            "content": "<h4 id=\"you-are-given-a-connected-directed-acyclic-graph-of-n-nodes-and-n-1-edges-such-that-there-is-only-one-edge-between-any-two-nodes-you-can-perform-the-below-operation-on-the-given-graph-zero-or-more-times\">You are given a connected directed acyclic graph of \u2018N\u2019 nodes and \u2018N\u2019 - 1 edges, such that there is only one edge between any two nodes. You can perform the below operation on the given graph zero or more times:</h4>\n\n<h4 id=\"1-choose-two-nodes-x-and-y-such-that-there-exists-an-edge-between-x-and-y\">1) Choose two nodes, \u2018X\u2019 and \u2018Y\u2019, such that there exists an edge between \u2018X\u2019 and \u2018Y\u2019.</h4>\n\n<h4 id=\"2-change-the-direction-of-this-edge-i-e-if-this-edge-is-directed-from-x-to-y-change-the-direction-of-this-edge-to-be-directed-from-y-to-x-and-vice-versa\">2) Change the direction of this edge, i.e., if this edge is directed from \u2018X\u2019 to \u2018Y\u2019, change the direction of this edge to be directed from \u2018Y\u2019 to \u2018X\u2019 and vice versa.</h4>\n\n<h4 id=\"your-task-is-to-reorder-the-edges-of-the-given-graph-in-such-a-way-that-there-exists-a-directed-path-from-each-node-to-node-0-using-the-minimum-number-of-operations\">Your task is to reorder the edges of the given graph in such a way that there exists a directed path from each node to node 0, using the minimum number of operations.</h4>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains a single integer, \u2018N\u2019, where \u2018N\u2019 denotes the total number of nodes in the given graph.\n\nThe next \u2018N\u2019 - 1 lines contains two space-separated integers, \u2018U\u2019 and \u2018V\u2019, where \u2018U\u2019 and \u2018V\u2019 represent the nodes that share a directed edge from \u2018U\u2019 to \u2018V\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, print the minimum number of operations required to make a directed path from each node to node 0.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 3000\n0 &lt;= U, V &lt;= N - 1\n\nTime Limit : 1sec\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n4\n0 1\n0 2\n1 3\n5\n1 0\n2 0\n3 1\n4 1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>3\n0\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h4>\n\n<pre><code>Test Case 1 :  \nThe given graph is shown below. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image11-8693.png\" alt=\"1\">        </p>\n\n<pre><code>We can reverse edge 0 -&gt; 1, 1 -&gt; 3 and 0 -&gt; 2. The resulting graph will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image22-8691.png\" alt=\"1\"></p>\n\n<pre><code>Now there exists a directed path from 1, 2, and 3 to 0 i.e., 1 -&gt; 0, 2 -&gt; 0, and 3 -&gt; 1 -&gt; 0 respectively.\nSo the minimum number of operations required will be 3.\n\nTest Case 2 : \nThe given graph is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image33-8694.png\" alt=\"1\"></p>\n\n<pre><code>There is already a directed path from nodes 1, 2, 3, and 4 to 0 i.e., 1 -&gt; 0, 2 -&gt; 0, 3 -&gt; 1 -&gt; 0, and 4 -&gt; 1 -&gt; 0 respectively.\nSo the minimum number of operations required will be 0.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>1\n5\n1 0\n2 0\n1 3\n2 4\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>2\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2 :</h4>\n\n<pre><code>Test Case 1 :  \nThe given graph is shown below. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image44-8692.png\" alt=\"1\"></p>\n\n<pre><code>We can reverse edge 1 -&gt; 3,  and 2 -&gt; 4. The resulting graph will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image55-8695.png\" alt=\"1\">    </p>\n\n<pre><code>Now there exists a directed path from 1, 2, 3 and 4 to 0 i.e., 1 -&gt; 0, 2 -&gt; 0, 3 -&gt; 1 -&gt; 0, and 4 -&gt;. 2 -&gt; 0 respectively.\nSo the minimum number of operations required will be 2.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a connected directed acyclic graph with 'N' nodes and 'N-1' edges, where each edge is directed, determine the minimum number of edge reversals required to establish a directed path from every node to node 0. You are allowed to reverse the direction of any edge in the graph any number of times.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 3000",
                    "0 <= U, V <= N - 1"
                ],
                "testcases": [
                    {
                        "input": "n = 4, edgeList = [[0, 1], [0, 2], [1, 3]]",
                        "output": "3",
                        "explanation": "Reverse edges 0 -> 1, 0 -> 2 and 1 -> 3. The paths become 1 -> 0, 2 -> 0 and 3 -> 1 -> 0."
                    },
                    {
                        "input": "n = 5, edgeList = [[1, 0], [2, 0], [3, 1], [4, 1]]",
                        "output": "0",
                        "explanation": "All nodes already have a directed path to node 0: 1 -> 0, 2 -> 0, 3 -> 1 -> 0, 4 -> 1 -> 0."
                    },
                    {
                        "input": "n = 5, edgeList = [[1, 0], [2, 0], [1, 3], [2, 4]]",
                        "output": "2",
                        "explanation": "Reverse the edges 1 -> 3 and 2 -> 4. Now paths are 1 -> 0, 2 -> 0, 3 -> 1 -> 0, and 4 -> 2 -> 0."
                    },
                    {
                        "input": "n = 6, edgeList = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]",
                        "output": "5",
                        "explanation": "Reverse all edges: 0<-1<-2<-3<-4<-5. Now paths are 1->0, 2->1->0, 3->2->1->0, 4->3->2->1->0, 5->4->3->2->1->0."
                    },
                    {
                        "input": "n = 3, edgeList = [[1, 0], [2, 1]]",
                        "output": "0",
                        "explanation": "Paths are: 1 -> 0, 2 -> 1 -> 0. No need to reverse any edges."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Convert the given directed graph into a bidirectional graph by adding reverse edges.</p>",
            "<p>Do a breadth-first traversal from node 0 and count the number of non-reverse edges.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}