{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7851,
            "title": "Replace Node With Depth",
            "titleSlug": "replace-node-with-depth_794947",
            "content": "<h4 id=\"for-a-given-binary-tree-of-integers-replace-each-of-its-data-with-the-depth-of-the-tree\">For a given Binary Tree of integers, replace each of its data with the depth of the tree.</h4>\n\n<h4 id=\"root-is-at-depth-0-hence-the-root-data-is-updated-with-0-replicate-the-same-further-going-down-the-tree-in-the-depth-of-the-given-tree\">Root is at depth 0, hence the root data is updated with 0. Replicate the same further going down the tree in the depth of the given tree.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an Integer &#39;t&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of input contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the inorder traversal of the tree where each node is replaced by the depth of the current node.\n\nOutput for every test case will be denoted in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 1000\n-10^9 &lt;= data &lt;= 10^9\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n2 35 10 2 3 5 2 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2 1 2 0 2 1 2\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-1\">Explanation Of the Sample Input 1 :</h5>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/0000000000000614.PNG\" alt=\"Sample Input 1\"></p>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/0000000000000617.PNG\" alt=\"Sample Output 1\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n1 2 -1 3 -1 4 -1 5 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4 3 2 1 0\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-2\">Explanation Of the Sample Input 2 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/image3-5212.png\" alt=\"Input 2\"></p>\n\n<p><img src=\"https://files.codingninjas.in/image4-5213.png\" alt=\"Output 2\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of integers, modify the tree such that each node's data is replaced with its depth within the tree. The root node has a depth of 0, and the depth increases by 1 for each level down the tree. Return the root of the modified tree.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 1000",
                    "-10^9 <= data <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "root=1, tree=[2, 35, 10, 2, 3, 5, 2, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "inorder traversal: 2 1 2 0 2 1 2",
                        "explanation": "The input represents the binary tree: root=1, left=2, right=35. 2 has left=10, right=2. 35 has left=3, right=5.  10 has left and right null. 2, 3, and 5 have left and right null.  After replacing nodes with depth: root becomes 0, 2 becomes 1, 35 becomes 1, 10 becomes 2, 2 becomes 2, 3 becomes 2, 5 becomes 2. The inorder traversal (left, root, right) is: 2 1 2 0 2 1 2."
                    },
                    {
                        "input": "root=1, tree=[2, -1, 3, -1, 4, -1, 5, -1, -1, -1]",
                        "output": "inorder traversal: 4 3 2 1 0",
                        "explanation": "The input represents the binary tree: root=1, left=2, right=null. 2 has left=3, right=null. 3 has left=4, right=null. 4 has left=5, right=null. 5 has left and right null. After replacing nodes with depth: root becomes 0, 2 becomes 1, 3 becomes 2, 4 becomes 3, 5 becomes 4. The inorder traversal is: 4 3 2 1 0."
                    },
                    {
                        "input": "root=10, tree=[-1, -1]",
                        "output": "inorder traversal: 0",
                        "explanation": "The tree contains only the root node (10). The depth of the root is 0. So the inorder traversal is 0."
                    },
                    {
                        "input": "root=5, tree=[6, 7, -1, -1, -1, -1]",
                        "output": "inorder traversal: 1 0 1",
                        "explanation": "Root is 5 (depth 0), left child 6 (depth 1), right child 7 (depth 1). The inorder traversal is left, root, right, which gives 1 0 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Do level order traversal and update each node with its respective depth in tree.</p>",
            "<p>Do level order traversal and update the data of the current node with its current level in the tree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}