{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12172,
            "title": "Restore Array",
            "titleSlug": "restore-array_1404537",
            "content": "<h4 id=\"ninja-was-having-an-array-nums-of-size-n-having-unique-elements-but-due-to-his-fight-with-evil-he-lost-his-array\">Ninja was having an array \u2018NUMS\u2019 of size \u2018N\u2019 having unique elements, but due to his fight with Evil, he lost his array.</h4>\n\n<h4 id=\"you-are-given-a-2d-array-arr-of-size-n-1-where-arr-i-a-b-indicating-that-a-and-b-are-adjacent-in-nums-array\">You are given a 2D array \u2018ARR\u2019 of size N - 1 where ARR[ i ]=[ a, b ], indicating that a and b are adjacent in nums array.</h4>\n\n<h4 id=\"every-adjacent-pair-a-b-in-nums-array-will-exist-in-arr-array-as-either-a-b-or-b-a\">Every adjacent pair {a,b} in nums array  will exist in \u2018ARR\u2019 array as either [a,b] or [b,a].</h4>\n\n<h4 id=\"help-the-ninja-to-restore-its-num-array\">Help the ninja to restore its num array.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains \u2018T,\u2019 denoting the number of test cases.\n\nThe first line of the test case contains a single integer \u2018N\u2019 denoting the size of the \u2018NUMS\u2019 array.\n\nThe following N - 1 lines contain two space-separated integers denoting the i-th element of ARR[i].\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing &#39;N&#39; space-separated integers denoting any possible answer array elements.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2019T\u2019 &lt;= 10\n1 &lt;= \u2018N\u2019&lt;= 5000\n1 &lt;= ARR[i][0], ARR[i][1] &lt;= 10 ^ 6\n\nWhere \u2018i\u2019 varies from 1 to \u2018N\u2019 - 1 and \u2018N\u2019 is the length of the array \u2018nums\u2019.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\n1 2\n3 2\n4 3\n4 6\n4\n1 3\n3 2\n2 6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 3 4 6\n6 2 3 1\n</code></pre>\n\n<h5 id=\"sample-output-explanation\">Sample Output Explanation:</h5>\n\n<pre><code>First Test case:\n\nIf 1 is placed at the first position \nThen the next element will be 2( 2 is adjacent to 1)\nAfter 2, the next element will be 3(1 is taken .hence three will be considered as it adjacent to 2)\nAfter 3 the next element will be 4(2 is already taken. Hence 4 will be considered)\nAfter 4 the next element will be 6(3 is already taken. Hence 6 will be considered)\n\nThus one of the possible answers is 1 2 3 4 6.\n\nSecond Test case:\n\nIf 6 is placed at the first position \nThen the next element will be 2( 2 is adjacent to 6)\nAfter 2 the next element will be 3(6 is taken .hence 3 will be considered as it adjacent to 2)\nAfter 3 the next element will be 1(2 is already taken. Hence 1 will be considered)\n\nThus one of the possible answers is 6 2 3 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4\n15 13\n11 13\n15 23\n5\n11 14\n12 22\n9 22\n11 12\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>11 13 15 23\n9 22 12 11 14 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D array \u2018ARR\u2019 of size N - 1 representing adjacent pairs in a lost array \u2018NUMS\u2019 of size \u2018N\u2019 with unique elements, restore any possible \u2018NUMS\u2019 array.\n\nARR[i] = [a, b] indicates that 'a' and 'b' are adjacent in \u2018NUMS\u2019. Every adjacent pair {a, b} in \u2018NUMS\u2019 exists in \u2018ARR\u2019 as either [a, b] or [b, a].",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 5000",
                    "1 <= ARR[i][0], ARR[i][1] <= 10^6",
                    "Where \u2018i\u2019 varies from 1 to \u2018N\u2019 - 1 and \u2018N\u2019 is the length of the array \u2018nums\u2019."
                ],
                "testcases": [
                    {
                        "input": "5\n1 2\n3 2\n4 3\n4 6",
                        "output": "1 2 3 4 6",
                        "explanation": "One possible reconstructed array is [1, 2, 3, 4, 6]. Starting with 1, the next adjacent element is 2. Then, 3 is adjacent to 2. Following 3 is 4 and finally 6."
                    },
                    {
                        "input": "4\n1 3\n3 2\n2 6",
                        "output": "6 2 3 1",
                        "explanation": "One possible reconstructed array is [6, 2, 3, 1]. Starting with 6, the next adjacent element is 2. Then, 3 is adjacent to 2. Finally, 1 is adjacent to 3."
                    },
                    {
                        "input": "4\n15 13\n11 13\n15 23",
                        "output": "11 13 15 23",
                        "explanation": "One possible reconstructed array is [11, 13, 15, 23]."
                    },
                    {
                        "input": "5\n11 14\n12 22\n9 22\n11 12",
                        "output": "9 22 12 11 14",
                        "explanation": "One possible reconstructed array is [9, 22, 12, 11, 14]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Make edges between adjacent elements and do the dfs traversal from the vertex with inDegree 1.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}