{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15127,
            "title": "Restore Peace",
            "titleSlug": "restore-peace_2411007",
            "content": "<h4 id=\"there-is-a-kingdom-with-n-cities-that-are-connected-by-roads-the-cities-are-connected-to-form-a-tree-where-cities-represent-the-nodes-and-the-roads-represent-the-edges-the-cities-are-numbered-from-0-to-n-1-and-the-length-of-each-road-is-1-unit\">There is a kingdom with \u2018N\u2019 cities that are connected by roads. The cities are connected to form a tree, where cities represent the nodes, and the roads represent the edges. The cities are numbered from 0 to \u2018N-1\u2019 and the length of each road is 1 unit.</h4>\n\n<h4 id=\"a-tree-is-a-hierarchical-data-structure-defined-as-a-collection-of-nodes\">A <a href = \"https://en.wikipedia.org/wiki/Tree_(data_structure)\" > tree </a> is a hierarchical data structure defined as a collection of nodes.</h4>\n\n<h4 id=\"now-a-battle-is-going-on-in-some-cities-of-the-kingdom-where-the-king-must-visit-to-restore-peace-initially-the-king-is-at-the-0th-node-root-node-the-cities-where-battles-are-going-on-will-be-given-as-an-input-array-and-the-king-has-to-visit-in-the-same-order-as-given-in-the-input-array-battles-you-have-to-find-the-total-length-of-the-road-the-king-has-to-travel-to-restore-peace-in-all-the-cities\">Now, a battle is going on in some cities of the kingdom, where the king must visit to restore peace. Initially, the king is at the 0th node(root node). The cities where battles are going on will be given as an input array, and the king has to visit in the same order as given in the input array &#39;battles&#39;. You have to find the total length of the road the king has to travel to restore peace in all the cities.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>For the test case:\nN = 3, Q = 2\nEdge 1 connects 0 and 1\nEdge 2 connects 0 and 2\nbattles = [1, 2]\n\nThe king has to visit first city 1 and then city 2. To visit city 1, he has to travel 1 unit, and now he is in city 1. To visit city 2 from city 1, he has to travel another 2 units. So overall, he has to travel 3 units of distance.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain a single integer \u2018T\u2019 denoting the number of test cases. Then \u2018T\u2019 test cases follow.\n\nThe first line of each test case will contain two space-separated integers, \u2018N\u2019 and \u2018Q\u2019, denoting the total number of cities and the number of cities the king has to visit, respectively.\n\nThe next \u2018N - 1\u2019 line of each test case will contain two space-separated integers U[i] and V[i] denoting the two cities each road connects.\n\nThe next line of each test case will contain \u2018Q\u2019 space-separated integers denoting the cities where the king has to visit.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer denoting the total length of the road the king has to travel to restore peace in all the cities.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= Q &lt;= N &lt;= 10^5\n0 &lt;= U[i], V[i] &lt;= N - 1\n\nIt is guaranteed that the sum of \u2018N\u2019 and sum of \u2018Q\u2019 over all test cases doesn\u2019t exceed 10^5.\n\nTime Limit: 1 sec.   \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 2\n0 1\n0 2\n1 3\n1 3\n5 4\n0 1\n1 2\n2 3\n3 4\n1 2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case, to reach city 1, the king has to travel 1 unit, and to visit city 3, he has to visit another 1 unit. So, he has to travel 2 units.\nThe path would be 0 -&gt; 1 -&gt; 3\n\nFor the second test case, to reach city 1, the king has to travel 1 unit, then to visit city 2, the king has to travel another 1 unit, then to visit city 3, he has to travel another 1 unit and to visit city 4 hr has to travel another 1 unit. So he has to travel 4 units.\nThe path would be 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 4\n0 1\n0 2\n0 3\n0 4\n1 0 4 2\n8 4\n0 1\n1 2\n1 4\n0 3\n3 7\n3 6\n6 5\n5 7 6 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5\n12\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "A kingdom with 'N' cities is connected by roads forming a tree structure. Cities are numbered from 0 to 'N-1', with each road having a length of 1. The king starts at city 0 and must visit specific cities in the order provided in the 'battles' array to restore peace. The task is to calculate the total distance the king travels.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= Q <= N <= 10^5",
                    "0 <= U[i], V[i] <= N - 1",
                    "The sum of \u2018N\u2019 and sum of \u2018Q\u2019 over all test cases doesn\u2019t exceed 10^5.",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "4 2\n0 1\n0 2\n1 3\n1 3",
                        "output": "2",
                        "explanation": "The king starts at city 0. To reach city 1, the king travels 1 unit (0 -> 1). To reach city 3 from city 1, the king travels 1 unit (1 -> 3). The total distance is 1 + 1 = 2."
                    },
                    {
                        "input": "5 4\n0 1\n1 2\n2 3\n3 4\n1 2 3 4",
                        "output": "4",
                        "explanation": "The king starts at city 0. The distances are: 0 -> 1 (1 unit), 1 -> 2 (1 unit), 2 -> 3 (1 unit), 3 -> 4 (1 unit). Total distance is 1 + 1 + 1 + 1 = 4."
                    },
                    {
                        "input": "5 4\n0 1\n0 2\n0 3\n0 4\n1 0 4 2",
                        "output": "5",
                        "explanation": "The king starts at city 0. The distances are: 0 -> 1 (1 unit), 1 -> 0 (1 unit), 0 -> 4 (1 unit), 4 -> 0 (1 unit), 0->2 (1 unit). Total distance is 1+1+1+1+1 = 5."
                    },
                    {
                        "input": "8 4\n0 1\n1 2\n1 4\n0 3\n3 7\n3 6\n6 5\n5 7 6 2",
                        "output": "12",
                        "explanation": "The king starts at city 0. Distances are: 0->1 (1), 1->4 (1), 4->1 (1), 1->2 (1), 2->1 (1), 1->0 (1), 0->3 (1), 3->6 (1), 6->5 (1), 5->7 (1), 7->3 (1), 3->0 (1), 0->1 (1), 1->2 (1). 0->1(1) , 1->2(1), 2->1(1), 1->4(1), 4->1(1), 1->2(1), 2->1(1), 1->0(1), 0->3(1), 3->6(1), 6->2(1), distance is 12 "
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find the distance between the two positions each time separately.</p>",
            "<p>Try to use Lowest Common Ancestor(LCA) to find the distance between two cities efficiently.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}