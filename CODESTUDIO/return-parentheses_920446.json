{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8859,
            "title": "Return parentheses",
            "titleSlug": "return-parentheses_920446",
            "content": "<h4 id=\"given-an-integer-n-representing-the-number-of-pairs-of-parentheses-find-all-the-possible-combinations-of-balanced-parentheses-with-the-given-number-of-pairs-of-parentheses\">Given an integer \u2018N\u2019 representing the number of pairs of parentheses, Find all the possible combinations of balanced parentheses with the given number of pairs of parentheses.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>Conditions for valid parentheses:\n1. All open brackets must be closed by the closing brackets.\n\n2. Open brackets must be closed in the correct order.\n</code></pre>\n\n<h4 id=\"for-example\">For Example :</h4>\n\n<pre><code>()()()() is a valid parentheses.\n)()()( is not a valid parentheses.\n</code></pre>\n\n<h4 id=\"input-format\">Input format :</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, which denotes the number of test cases. Then each test case follows.\n\nEach line of the test case contains an integer \u2018N\u2019 denoting the pair of parentheses.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case print, all the combinations of balanced parentheses separated by a single space.\n\nThe output of each test case will be printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n\n2. You can return strings in any order.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10\nTime Limit : 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>(()) \n()()\n((())) \n(()()) \n(())()\n()(())\n()()()\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>Test Case 1: \n\nFor 2 pair of parentheses the combinations of balanced parentheses will be (()) ()()\n\nTest Case 2:\n\nFor 3 pair of parentheses the combinations of balanced parentheses will be \n((())) (()()) (())() ()(()) ()()()\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1\n4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>()\n(((()))) \n((()())) \n((())()) \n((()))() \n(()(())) \n(()()()) \n(()())() \n(())(()) \n(())()() \n()((())) \n()(()()) \n()(())() \n()()(()) \n()()()()\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 16,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, representing the number of pairs of parentheses, find all possible combinations of balanced parentheses with the given number of pairs. Balanced parentheses follow these rules:\n\n1.  All open brackets must be closed by closing brackets.\n2.  Open brackets must be closed in the correct order.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n2\n3",
                        "output": "(()) ()\n((())) (()()) (())() ()(()) ()()()",
                        "explanation": "Test Case 1: For 2 pairs of parentheses, the balanced combinations are (()) and ().\n\nTest Case 2: For 3 pairs of parentheses, the balanced combinations are ((())), (()()), (())(), ()(()), and ()()."
                    },
                    {
                        "input": "2\n1\n4",
                        "output": "()\n(((()))) (((()()))) ((())()) ((()))() (()(())) (()()()) (()())() ()(()) (())() (())() ()((())) ()(()) (())() ()()(()) ()()()()",
                        "explanation": "Test Case 1: For 1 pairs of parentheses, the balanced combinations are ().\n\nTest Case 2: For 4 pairs of parentheses, the balanced combinations are (((()))), (((()()))), ((())()), ((()))(), (()(())), (()()()), (()())(), ()(()()), ()(()()), (())() (), ()((())), ()(()), (())() (), ()()(()) () and ()()()."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think in a recursive way.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}