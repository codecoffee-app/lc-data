{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7668,
            "title": "Return Subsets Sum to K",
            "titleSlug": "return-subsets-sum-to-k_759331",
            "content": "<h4 id=\"given-an-integer-array-arr-of-size-n-and-an-integer-k-return-all-the-subsets-of-arr-which-sum-to-k\">Given an integer array &#39;ARR&#39; of size &#39;N&#39; and an integer &#39;K&#39;, return all the subsets of &#39;ARR&#39; which sum to &#39;K&#39;.</h4>\n\n<h4 id=\"subset-of-an-array-arr-is-a-tuple-that-can-be-obtained-from-arr-by-removing-some-possibly-all-elements-of-arr\">Subset of an array &#39;ARR&#39; is a tuple that can be obtained from &#39;ARR&#39; by removing some (possibly all) elements of &#39;ARR&#39;.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The order of subsets is not important. \n\nThe order of elements in a particular subset should be in increasing order of the index.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer &#39;N&#39;, which denotes the size of the array.\n\nThe second line contains &#39;N&#39; single-space separated integers representing the elements of the array.\n\nThe third line contains a single integer &#39;K&#39;, which denotes the integer to which the subsets should sum to.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print single-space separated integers of a subset of &#39;ARR&#39; having sum = &#39;K&#39;. \n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;N&#39; &lt;= 16\n- (10 ^ 6) &lt;= ARR[i] &lt;= (10 ^ 6)\n- 16 * (10 ^ 6) &lt;= &#39;K&#39; &lt;= 16 * (10 ^ 6)\n\nWhere \u2018ARR[i]\u2019 denotes the value for \u2018ith\u2019 element of the array \u2018ARR\u2019 and &#39;K&#39; is the given sum.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n2 4 6\n6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 4\n6\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h5>\n\n<pre><code>For the array&#39;ARR&#39; = {2, 4, 6}, we can have subsets {}, {2}, {4}, {6}, {2, 4}, {2, 6}, {4, 6}, {2, 4, 6}. Out of these 8 subsets, {2, 4} and {6} sum to the given &#39;K&#39; i.e. 6. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>6 \n5 -1 8 2 7 0\n7\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1 8 \n-1 8 0 \n5 2 \n5 2 0 \n7 \n7 0 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 103,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `ARR` of size `N` and an integer `K`, find all subsets of `ARR` that sum to `K`. A subset of an array `ARR` is formed by removing zero or more elements from `ARR`. The order of subsets is not important. The elements within each subset should be ordered according to their original index in `ARR` (ascending order).",
                "constraints": [
                    "1 <= N <= 16",
                    "-10^6 <= ARR[i] <= 10^6",
                    "-16 * 10^6 <= K <= 16 * 10^6",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "3\n2 4 6\n6",
                        "output": "2 4\n6",
                        "explanation": "Given the array ARR = {2, 4, 6}, the subsets that sum to K = 6 are {2, 4} and {6}."
                    },
                    {
                        "input": "6\n5 -1 8 2 7 0\n7",
                        "output": "-1 8\n-1 8 0\n5 2\n5 2 0\n7\n7 0",
                        "explanation": "Given the array ARR = {5, -1, 8, 2, 7, 0} and K = 7, the subsets that sum to 7 are {-1, 8}, {-1, 8, 0}, {5, 2}, {5, 2, 0}, {7}, and {7, 0}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to do as asked in the problem statement i.e generate all the subsets and for each subset check if it sums to \u2018K\u2019.</p>",
            "<p>Can you relate the binary representation of a positive integer with the subset?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity:  O((2^N) * N).\r\n    Space Complexity:O( 1 ).\r\n\r\n    Where 'N' is the size of the array.\r\n*/\r\n\r\nvector<vector<int>> findSubsetsThatSumToK(vector<int> &arr, int n, int k)\r\n{\r\n    // Ans vector contains all the subset which sum upto 'K'.\r\n    vector<vector<int>> ans;\r\n\r\n    for (int i = 0; i < (1 << n); i++)\r\n    {\r\n        int sum = 0;\r\n        vector<int> vec;\r\n        for (int j = 0; j < n; j++)\r\n        {\r\n            // Checking wheather the element is present the subset or not.\r\n            if ((1 << j) & i)\r\n            {\r\n                sum += arr[j];\r\n                vec.push_back(arr[j]);\r\n            }\r\n        }\r\n\r\n        // If sum is 'K'.\r\n        if (sum == k)\r\n        {\r\n            ans.push_back(vec);\r\n        }\r\n    }\r\n\r\n    // Return ans.\r\n    return ans;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N * (2 ^ N))\r\n    Space Complexity :  O(1)\r\n\r\n    Where 'N' denotes the number of elements in the array.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n\r\n    public static ArrayList<ArrayList<Integer>> findSubsetsThatSumToK(ArrayList<Integer>arr, int n, int k) {\r\n\r\n        // Ans vector contains all the subset which sum upto 'K'.\r\n        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();\r\n\r\n        for (int i = 0; i < (1 << n); i++) {\r\n            int sum = 0;\r\n            ArrayList<Integer> vec = new ArrayList<>();\r\n            for (int j = 0; j < n; j++) {\r\n                // Checking whether the element is present the subset or not.\r\n                if(((1 << j) & i)!=0) {\r\n                    sum += arr.get(j);\r\n                    vec.add(arr.get(j));\r\n                }\r\n            }\r\n\r\n            // If sum is 'K'.\r\n            if (sum == k) {\r\n                ans.add(vec);\r\n            }\r\n        }\r\n\r\n        // Return ans.\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O((2^N) * N).\r\n    Space Complexity: O( 1 ).\r\n\r\n    Where 'N' is the size of the array.\r\n'''\r\n\r\ndef findSubsetsThatSumToK(arr, n, k):\r\n    # Ans vector contains all the subset which sum upto 'K'.\r\n    ans = [[]]\r\n    \r\n    for i in range(0, 1 << n):\r\n        sum = 0\r\n        vec = []\r\n        for j in range(n):\r\n            # Checking wheather the element is present the subset or not.\r\n            if ((1 << j) & i):\r\n                sum += arr[j]\r\n                vec.append(arr[j])\r\n\r\n        # If sum is 'K'.\r\n        if (sum == k):\r\n            ans.append(vec)\r\n\r\n    # Return ans.\r\n    return ans",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}