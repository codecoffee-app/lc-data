{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10032,
            "title": "Reverse a Doubly Linked List",
            "titleSlug": "reverse-a-doubly-linked-list_1116098",
            "content": "<h4 id=\"you-are-given-a-doubly-linked-list-of-size-n-consisting-of-positive-integers-now-your-task-is-to-reverse-it-and-return-the-head-of-the-modified-list\">You are given a doubly-linked list of size <em><strong>&#39;N&#39;</strong></em>, consisting of positive integers. Now your task is to reverse it and return the head of the modified list.</h4>\n\n<p><br></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>A doubly linked list is a kind of linked list that is bidirectional, meaning it can be traversed in both forward and backward directions.\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Input: \n4\n4 3 2 1\n\nThis means you have been given doubly linked list of size 4 = 4 &lt;-&gt; 3 &lt;-&gt; 2 &lt;-&gt; 1.\n\nOutput: \n1 2 3 4\n\nThis means after reversing the doubly linked list it becomes 1 &lt;-&gt; 2 &lt;-&gt; 3 &lt;-&gt; 4.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer &#39;N&#39;, the size of the linked list.\nThe second line contains &#39;N&#39; space-separated integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>The output contains all the integers of the reversed doubly linked list.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>8\n1 2 3 4 5 6 7 8 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>8 7 6 5 4 3 2 1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for sample output 1</h5>\n\n<pre><code>Input: 1 &lt;-&gt; 2 &lt;-&gt; 3 &lt;-&gt; 4 &lt;-&gt; 5 &lt;-&gt; 6 &lt;-&gt; 7 &lt;-&gt; 8\nOutput: 8 &lt;-&gt; 7 &lt;-&gt; 6 &lt;-&gt; 5 &lt;-&gt; 4 &lt;-&gt; 3 &lt;-&gt; 2 &lt;-&gt; 1\nExplanation: It&#39;s self explanatory.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>5\n5 8 4 9 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 9 4 8 5\n</code></pre>\n\n<h6 id=\"constraints\">Constraints :</h6>\n\n<pre><code>1 &lt;= &#39;N&#39; &lt;= 10^3\n0 &lt;= &#39;data&#39; &lt;= 10^3 \n\nWhere &#39;N&#39; is the size of the doubly linked list.\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 143,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a doubly linked list of size 'N', consisting of positive integers, reverse the list and return the head of the reversed list.",
                "constraints": [
                    "1 <= 'N' <= 10^3",
                    "0 <= 'data' <= 10^3",
                    "'N' is the size of the doubly linked list."
                ],
                "testcases": [
                    {
                        "input": "n = 4, nums=[4,3,2,1]",
                        "output": "1 2 3 4",
                        "explanation": "Input: 4 <-> 3 <-> 2 <-> 1\nOutput: 1 <-> 2 <-> 3 <-> 4"
                    },
                    {
                        "input": "n = 8, nums=[1,2,3,4,5,6,7,8]",
                        "output": "8 7 6 5 4 3 2 1",
                        "explanation": "Input: 1 <-> 2 <-> 3 <-> 4 <-> 5 <-> 6 <-> 7 <-> 8\nOutput: 8 <-> 7 <-> 6 <-> 5 <-> 4 <-> 3 <-> 2 <-> 1"
                    },
                    {
                        "input": "n = 5, nums=[5,8,4,9,1]",
                        "output": "1 9 4 8 5",
                        "explanation": "Input: 5 <-> 8 <-> 4 <-> 9 <-> 1\nOutput: 1 <-> 9 <-> 4 <-> 8 <-> 5"
                    },
                    {
                        "input": "n = 1, nums=[10]",
                        "output": "10",
                        "explanation": "Input: 10\nOutput: 10"
                    },
                    {
                        "input": "n = 6, nums=[1,1,1,1,1,1]",
                        "output": "1 1 1 1 1 1",
                        "explanation": "Input: 1 <-> 1 <-> 1 <-> 1 <-> 1 <-> 1\nOutput: 1 <-> 1 <-> 1 <-> 1 <-> 1 <-> 1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We need to swap next and prev pointers between every two consecutive nodes.</p>",
            "<p>We need to swap next and prev pointers between every two consecutive nodes.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1),\r\n\r\n    Where N is the number of nodes in the doubly linked list\r\n*/\r\nNode* reverseDLL(Node* head)\r\n{\r\n    if(head->next==NULL)\r\n    {\r\n        return head;\r\n    }\r\n    \r\n    Node * curr = head;\r\n    Node * temp = NULL;\r\n\r\n    // Traverse the linked list to the end\r\n    while (curr != NULL)\r\n    {\r\n        temp = curr->prev;\r\n        curr->prev = curr->next;\r\n        curr->next = temp;\r\n        curr = curr->prev ;\r\n    }\r\n\r\n    head = temp->prev ;\r\n\r\n    // New head of the modified list is returned\r\n    return head;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1),\r\n\r\n    Where N is the number of nodes in the doubly linked list\r\n*/\r\n\r\npublic class Solution\r\n{\r\n\r\n    public static Node reverseDLL(Node head)\r\n    {\r\n        if(head.next == null)\r\n        {\r\n            return head;\r\n        }\r\n\r\n        Node curr = head;\r\n        Node temp = null;\r\n\r\n        // Traverse the linked list to the end\r\n        while (curr != null)\r\n        {\r\n            temp = curr.prev;\r\n            curr.prev = curr.next;\r\n            curr.next = temp;\r\n            curr = curr.prev;\r\n        }\r\n\r\n        head = temp.prev;\r\n\r\n        // New head of the modified list is returned\r\n        return head;\r\n    }\r\n\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1),\r\n\r\n    Where N is the number of nodes in the doubly linked list\r\n'''\r\n\r\ndef reverseDLL(head):\r\n\r\n    if head.next is None:\r\n        return head\r\n\r\n    curr = head\r\n    temp = None\r\n\r\n    # Traverse the linked list to the end\r\n    while (curr != None):\r\n\r\n        temp = curr.prev\r\n        curr.prev = curr.next\r\n        curr.next = temp\r\n        curr = curr.prev \r\n\r\n    # Update head with the previous node of temp\r\n    head = temp.prev \r\n\r\n    # New head of the modified list is returned\r\n    return head\r\n\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}