{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7802,
            "title": "Reverse Alternate Nodes",
            "titleSlug": "reverse-alternate-nodes_764353",
            "content": "<h4 id=\"you-have-been-given-a-perfect-binary-tree-of-n-nodes-your-task-is-to-reverse-alternate-levels-of-the-given-binary-tree-that-is-reverse-level-2-level-4-level-6-and-so-on-the-root-is-at-level-1\">You have been given a perfect binary tree of &#39;N&#39; nodes. Your task is to reverse alternate levels of the given binary tree. That is reverse level 2, level 4, level 6, and so on. The root is at level 1.</h4>\n\n<h4 id=\"a-perfect-binary-tree-is-a-binary-tree-in-which-all-the-interior-nodes-have-two-children-and-all-leaves-have-the-same-depth-or-same-level\">A perfect binary tree is a binary tree in which all the interior nodes have two children, and all leaves have the same depth or same level.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Given binary tree :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/invert-5087.png\" alt=\"Invert\"></p>\n\n<pre><code>After the reversal of alternate nodes, the tree will be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/afterinverted-5086.jpg\" alt=\"afterInvert\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains elements of the given binary tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/invert-5085.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 5 6 7\n-1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = 5\nLeft child of 3 = 6\nRight child of 3 = 7\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = null (-1)\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as :\n\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print in a single line &#39;N&#39; single space-separated integers denoting the inorder traversal of the modified tree.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of, just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>0 &lt;= N &lt;= 5*10^5\n0 &lt;= node.data &lt;= 10^7 and node.data != -1\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>4 3 5 1 6 2 7\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>We don\u2019t reverse the first level, but we will reverse the second level. So the value of the second level becomes {3, 2}, and we also don\u2019t reverse the third level.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>15 4 14 3 13 5 12 1 11 6 10 2 9 7 8\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h5>\n\n<pre><code>We will reverse the second level, so values at the second level become {3, 2}, then we will reverse the fourth level, so values at the fourth level become {15, 14, 13, 12, 11, 10, 9, 8}.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a perfect binary tree, reverse the nodes at alternate levels (level 2, 4, 6, etc.). The root is considered level 1.  Implement the `reverseAlternateLevels` function which takes the root node of the binary tree as input and modifies the tree in-place. Return the root of the modified tree.",
                "constraints": [
                    "0 <= N <= 5*10^5 (where N is the number of nodes in the tree)",
                    "0 <= node.val <= 10^7 and node.val != -1",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "root = [1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "Inorder traversal: 4 3 5 1 6 2 7",
                        "explanation": "We don\u2019t reverse the first level, but we will reverse the second level. So the value of the second level becomes {3, 2}, and we also don\u2019t reverse the third level. The inorder traversal of the modified tree is 4 3 5 1 6 2 7."
                    },
                    {
                        "input": "root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "Inorder traversal: 15 4 14 3 13 5 12 1 11 6 10 2 9 7 8",
                        "explanation": "We will reverse the second level, so values at the second level become {3, 2}, then we will reverse the fourth level, so values at the fourth level become {15, 14, 13, 12, 11, 10, 9, 8}. The inorder traversal of the modified tree is 15 4 14 3 13 5 12 1 11 6 10 2 9 7 8."
                    },
                    {
                        "input": "root = [1, -1, -1]",
                        "output": "Inorder traversal: 1",
                        "explanation": "A tree with only root node, no levels to reverse. The inorder traversal is simply the root value: 1"
                    },
                    {
                        "input": "root = [1, 2, -1, -1, -1]",
                        "output": "Inorder traversal: 2 1",
                        "explanation": "Second level has only one node. Inorder traversal is 2 1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of some modifications of the level order traversal that will work?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}