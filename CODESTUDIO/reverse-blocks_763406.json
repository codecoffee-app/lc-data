{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7767,
            "title": "Reverse Blocks",
            "titleSlug": "reverse-blocks_763406",
            "content": "<h4 id=\"you-are-given-a-singly-linked-list-of-integers-and-an-integer-array-b-of-size-n-each-element-in-the-array-b-represents-a-block-size-modify-the-linked-list-by-reversing-the-nodes-in-each-block-whose-sizes-are-given-by-the-array-b\">You are given a Singly Linked List of integers and an integer array &#39;B&#39; of size &#39;N&#39;. Each element in the array &#39;B&#39; represents a block size. Modify the linked list by reversing the nodes in each block whose sizes are given by the array &#39;B&#39;.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. If you encounter a situation when &#39;B[i]&#39; is greater than the number of remaining nodes in the list, then simply reverse the remaining nodes as a block and ignore all the block sizes from &#39;B[i]&#39;. \n\n2. All block sizes are contiguous i.e. suppose that block &#39;B[i]&#39; ends at a node cur, then the block &#39;B[i+1]&#39; starts from the node just after the node cur.\n</code></pre>\n\n<h5 id=\"example\">Example</h5>\n\n<pre><code>Linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5\nArray B: 3 3 5\n\nOutput: 3-&gt;2-&gt;1-&gt;5-&gt;4\n\nWe reverse the first block of size 3 and then move to block 2. Now, since the number of nodes remaining in the list (2) is less than the block size (3), we reverse the remaining nodes (4 and 5) as a block and ignore all the block sizes that follow.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains the elements of the singly linked list separated by a single space and terminated by -1. Hence, -1 would not be a list element.\n\nThe second line contains a single integer &#39;N&#39;, denoting the size of the block array &#39;B&#39;.\n\nThe third line contains &#39;N&#39; single space-separated elements of the block array &#39;B&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>You should return the modified linked list where elements should be single-space separated, terminated by -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print the output, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>0 &lt;= L &lt;= 5 * 10^5\n-10^9 &lt;= data &lt;= 10^9 and data != -1\n1 &lt;= N &lt;= 5 * 10^5\n0 &lt;= B[i] &lt;= 5 * 10^5\n\nWhere &#39;L&#39; is the number of nodes in the linked list and &#39;data&#39; is the value of a node in the linked list. \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1 2 3 4 5 6 7 8 9 10 11 -1\n3\n2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 1 5 4 3 9 8 7 6 10 11 -1\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-output-1\">Explanation of the Sample Output 1:</h5>\n\n<pre><code>For the given input, the block sizes are 2, 3 and 4 respectively. First, we reverse 2 elements (1-&gt;2 becomes 2-&gt;1), then the next 3 elements (3-&gt;4-&gt;5 becomes 5-&gt;4-&gt;3) and lastly the next 4 elements (6-&gt;7-&gt;8-&gt;9 becomes 9-&gt;8-&gt;7-&gt;6). Thus, the final modified list becomes 2-&gt;1-&gt;5-&gt;4-&gt;3-&gt;9-&gt;8-&gt;7-&gt;6-&gt;10-&gt;11. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>0 6 1 5 -1\n2\n2 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>6 0 5 1 -1\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-output-2\">Explanation of the Sample Output 2:</h5>\n\n<pre><code>For the given input, the block sizes are 2 and 3 . First, we reverse 2 elements (0-&gt;6 becomes 6-&gt;0), then we need to change next 3 elements but we are left with only 2 elements (1-&gt;5) and thus it becomes (5-&gt;1). Thus, the final modified list becomes 6-&gt;0-&gt;5-&gt;1.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 405,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list of integers and an integer array 'B' of size 'N', where each element in 'B' represents a block size. Modify the linked list by reversing the nodes in each block whose sizes are given by the array 'B'.\n\n**Note:**\n\n1.  If a block size 'B[i]' is larger than the number of remaining nodes in the list, reverse only the remaining nodes as a block and ignore the subsequent block sizes.\n2.  Blocks are contiguous. That is, if block 'B[i]' ends at node 'cur', then block 'B[i+1]' starts at the node immediately after 'cur'.",
                "constraints": [
                    "0 <= L <= 5 * 10^5 (where 'L' is the number of nodes in the linked list)",
                    "-10^9 <= data <= 10^9 and data != -1 (where 'data' is the value of a node in the linked list)",
                    "1 <= N <= 5 * 10^5",
                    "0 <= B[i] <= 5 * 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 5 6 7 8 9 10 11 -1\n3\n2 3 4",
                        "output": "2 1 5 4 3 9 8 7 6 10 11 -1",
                        "explanation": "The block sizes are 2, 3, and 4. The first 2 elements (1 -> 2) are reversed to become (2 -> 1). Then, the next 3 elements (3 -> 4 -> 5) are reversed to become (5 -> 4 -> 3). Finally, the next 4 elements (6 -> 7 -> 8 -> 9) are reversed to become (9 -> 8 -> 7 -> 6). The resulting list is 2 -> 1 -> 5 -> 4 -> 3 -> 9 -> 8 -> 7 -> 6 -> 10 -> 11."
                    },
                    {
                        "input": "0 6 1 5 -1\n2\n2 3",
                        "output": "6 0 5 1 -1",
                        "explanation": "The block sizes are 2 and 3.  First, the first 2 elements (0 -> 6) are reversed to become (6 -> 0). Then, the next 3 elements should be reversed, but only 2 elements (1 -> 5) remain.  So these are reversed to become (5 -> 1). Thus, the final list becomes 6 -> 0 -> 5 -> 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you solve this problem by dividing it into subproblems?</p>",
            "<p>Can you solve this problem by traversing through the list and reversing one block at a time?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*  \n\n    Time Complexity : O(L)\n    Space Complexity : O(1)\n    \n    Where L is the number of nodes in the Linked-List.\n\n*/\n\nNode *getListAfterReverseOperation(Node *head, int n, int b[]) {\n    // If linked list is empty, return head of the linked list.\n    if (head == NULL) {\n        return NULL;\n    }\n\n    // Variable to keep track of the current index in the block array.\n    int idx = 0;\n\n    Node *prev = NULL, *cur = head, *temp = NULL;\n    Node *tail = NULL, *join = NULL;\n    bool isHeadUpdated = false;\n\n    // Reverse nodes until the list is empty or entire block array has been considered.\n    while (cur != NULL && idx < n) {\n\n        // K represents the size of the current block\n        int K = b[idx];\n\n        // Just move to the next block if size of the current block is zero\n        if (K == 0) {\n            idx++;\n            continue;\n        }\n\n        join = cur;\n        prev = NULL;\n\n        // Reverse nodes until end of list is reached or current block has been reversed\n        while (cur != NULL && K--) {\n            temp = cur->next;\n            cur->next = prev;\n            prev = cur;\n            cur = temp;\n        }\n\n        // Update the head pointer when reversing the first block.\n        if (isHeadUpdated == false) {\n            head = prev;\n            isHeadUpdated = true;\n        }\n\n        // Tail pointer keeps track of the last node before the current K-reversed linked list. \n        // We join the tail pointer with the current K-reversed linked list's head. \n        if (tail != NULL) {\n            tail->next = prev;\n        }\n\n        // The tail is then updated to the last node of the current K-reversed linked list.\n        tail = join;\n        idx++;\n    }\n\n    // If entire block is iterated and reached at end, then we append the remaining nodes to the tail of the partial modified linked list.\n    if (tail != NULL) {\n        tail->next = cur;\n    }\n\n    // Return the head of the linked list.\n    return head;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*  \n\n    Time Complexity : O(L)\n    Space Complexity : O(1)\n\n    Where L is the number of nodes in the Linked-List.\n\n */\n\npublic class Solution {\n\tpublic static Node getListAfterReverseOperation(Node head, int n, int b[]) {\n\t\t// If linked list is empty, return head of the linked list.\n\t\tif (head == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Variable to keep track of the current index in the block array.\n\t\tint idx = 0;\n\n\t\tNode prev = null, cur = head, temp = null;\n\t\tNode tail = null, join = null;\n\t\tboolean isHeadUpdated = false;\n\n\t\t// Reverse nodes until the list is empty or entire block array has been considered.\n\t\twhile (cur != null && idx < n) {\n\n\t\t\t// K represents the size of the current block.\n\t\t\tint K = b[idx];\n\n\t\t\t// Just move to the next block if size of the current block is zero.\n\t\t\tif (K == 0) {\n\t\t\t\tidx++;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tjoin = cur;\n\t\t\tprev = null;\n\n\t\t\t// Reverse nodes until end of list is reached or current block has been reversed.\n\t\t\twhile (cur != null && K-- > 0) {\n\t\t\t\ttemp = cur.next;\n\t\t\t\tcur.next = prev;\n\t\t\t\tprev = cur;\n\t\t\t\tcur = temp;\n\t\t\t}\n\n\t\t\t// Update the head pointer when reversing the first block.\n\t\t\tif (isHeadUpdated == false) {\n\t\t\t\thead = prev;\n\t\t\t\tisHeadUpdated = true;\n\t\t\t}\n\n\t\t\t// Tail pointer keeps track of the last node before the current K-reversed linked list. \n        \t// We join the tail pointer with the current K-reversed linked list's head. \n\t\t\tif (tail != null) {\n\t\t\t\ttail.next = prev;\n\t\t\t}\n\n\t\t\t// The tail is then updated to the last node of the current K-reversed linked list.\n\t\t\ttail = join;\n\t\t\tidx++;\n\t\t}\n\n\t\t// If entire block is iterated and reached at end, then we append the remaining nodes to the tail of the partial modified linked list.\n\t\tif (tail != null) {\n\t\t\ttail.next = cur;\n\t\t}\n\n\t\t// Return the head of the linked list.\n\t\treturn head;\n\t}\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "''' \n\n    Time Complexity : O(L)\n    Space Complexity : O(1)\n    \n    Where L is the number of nodes in the Linked-List.\n\n'''\n\n# List Node Class\nclass Node:\n    def __init__(self, data):\n\n        self.data = data\n        self.next = None\n\n\ndef getListAfterReverseOperation(head, n, b):\n    # If linked list is empty, return head of the linked list.\n    if (head == None):\n        return None\n\n    # Variable to keep track of the current index in the block array.\n    idx = 0\n\n    cur, prev, temp = head, None, None\n    tail, join = None, None\n    isHeadUpdated = False\n\n    # Reverse nodes until the list is empty or entire block array has been considered.\n    while (cur != None and idx < n):\n\n        # K represents the size of the current block.\n        k = b[idx]\n\n        # Just move to the next block if size of the current block is zero.\n        if (k == 0):\n            idx += 1\n            continue\n\n        join = cur\n        prev = None\n\n        # Reverse nodes until end of list is reached or current block has been reversed.\n        while (cur != None and k > 0):\n            k -= 1\n            temp = cur.next\n            cur.next = prev\n            prev = cur\n            cur = temp\n\n        # Update the head pointer when reversing the first block.\n        if (isHeadUpdated == False):\n            head = prev\n            isHeadUpdated = True\n\n        # Tail pointer keeps track of the last node before the current k-reversed linked list.\n        # We join the tail pointer with the current k-reversed linked list's head.\n        if (tail != None):\n            tail.next = prev\n\n        # The tail is then updated to the last node of the current k-reversed linked list.\n        tail = join\n        idx += 1\n\n    # If entire block is iterated and reached at end, then we append the remaining nodes to the tail of the partial modified linked list.\n    if (tail != None):\n        tail.next = cur\n\n    # Return the head of the linked list.\n    return head",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}