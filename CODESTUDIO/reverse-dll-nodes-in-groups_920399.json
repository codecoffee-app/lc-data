{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8848,
            "title": "Reverse DLL nodes in groups ",
            "titleSlug": "reverse-dll-nodes-in-groups_920399",
            "content": "<h4 id=\"you-are-given-a-doubly-linked-list-of-integers-and-a-positive-integer-k-representing-the-group-size-modify-the-linked-list-by-reversing-every-group-of-k-nodes-in-the-linked-list\">You are given a Doubly Linked List of integers and a positive integer &#39;K&#39; representing the group size. Modify the linked list by reversing every group of &#39;K&#39; nodes in the linked list.</h4>\n\n<pre><code>A doubly linked list is a type of linked list that is bidirectional, that is, it can be traversed in both directions, forward and backward. \n</code></pre>\n\n<h6 id=\"note\">Note:</h6>\n\n<pre><code>If the number of nodes in the list or in the last group is less than K, just reverse the remaining nodes. \n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Linked list: 8 9 10 11 12\nK: 3 \n\nOutput: 10 9 8 12 11\n\nWe reverse the first K (3) nodes. Now, since the number of nodes remaining in the list (2) is less than K, we just reverse the remaining nodes (11 and 12).  \n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer T, the number of test cases.\n\nThe first line of every test case contains the elements of the singly linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n\nThe second line of every test case contains the positive integer \u2018K\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, print the modified linked list. The elements of the modified list should be single-space separated, terminated by -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10    \n1 &lt;= N &lt;= 5 * 10^4\n1 &lt;= K &lt;=  10^5\n-10^3 &lt;= data &lt;= 10^3 and data != -1\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1 \n1 2 3 4 5 6 7 -1\n2  \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 1 4 3 6 5 7 -1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>In the given linked list, we have to reverse the first two nodes, then reverse the next two nodes, and so on\u2026 until all the nodes are processed in the same way.\nThe modified linked list after the above process is 2 1 4 3 6 5 7 -1\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 10 -6 4 7 -1 \n3 \n10 20 30 40 50 -1\n1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-6 10 5 7 4 -1\n10 20 30 40 50 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 15,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a doubly linked list of integers and a positive integer 'K', reverse every group of 'K' nodes in the list. If the number of nodes in the list or in the last group is less than K, reverse the remaining nodes as well. Implement the `reverseDLLInGroups` function, which takes the head of the doubly linked list and the group size K as input, and modifies the list in place.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 5 * 10^4 (where N is the number of nodes in the list)",
                    "1 <= K <= 10^5",
                    "-10^3 <= data <= 10^3 (where data is the value of a node)"
                ],
                "testcases": [
                    {
                        "input": "head = (1 <-> 2 <-> 3 <-> 4 <-> 5 <-> 6 <-> 7 <-> NULL), k = 2",
                        "output": "2 1 4 3 6 5 7",
                        "explanation": "The linked list is reversed in groups of 2. (1 <-> 2) becomes (2 <-> 1), (3 <-> 4) becomes (4 <-> 3), (5 <-> 6) becomes (6 <-> 5), and the last element 7 remains as it is."
                    },
                    {
                        "input": "head = (5 <-> 10 <-> -6 <-> 4 <-> 7 <-> NULL), k = 3",
                        "output": "-6 10 5 7 4",
                        "explanation": "The first group of 3 is reversed. (5 <-> 10 <-> -6) becomes (-6 <-> 10 <-> 5). The remaining nodes (4 <-> 7) are fewer than k=3, so they are reversed as well to (7 <-> 4)."
                    },
                    {
                        "input": "head = (10 <-> 20 <-> 30 <-> 40 <-> 50 <-> NULL), k = 1",
                        "output": "10 20 30 40 50",
                        "explanation": "Reversing groups of size 1 leaves the linked list unchanged."
                    },
                    {
                        "input": "head = (1 <-> 2 <-> 3 <-> 4 <-> 5 <-> NULL), k = 5",
                        "output": "5 4 3 2 1",
                        "explanation": "The entire list is reversed since the group size is equal to the number of elements in the list."
                    },
                    {
                        "input": "head = (1 <-> 2 <-> 3 <-> NULL), k = 4",
                        "output": "3 2 1",
                        "explanation": "Since k (4) is greater than list size (3), we reverse whole list: 1 <-> 2 <-> 3 becomes 3 <-> 2 <-> 1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we use recursion to solve this problem?</p>",
            "<p>Is it possible to solve this problem iteratively?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}