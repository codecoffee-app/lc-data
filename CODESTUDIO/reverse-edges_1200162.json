{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10284,
            "title": "Reverse Edges",
            "titleSlug": "reverse-edges_1200162",
            "content": "<h4 id=\"you-are-given-a-directed-graph-of-n-nodes-and-m-edges-also-you-have-two-nodes-a-and-b-your-task-is-to-make-at-least-one-valid-path-from-a-to-b-by-doing-the-below-operations-a-minimum-number-of-times\">You are given a directed graph of \u2018N\u2019 nodes and \u2018M\u2019 edges. Also, you have two nodes \u2018A\u2019 and \u2018B\u2019. Your task is to make at least one valid path from \u2018A\u2019 to \u2018B\u2019 by doing the below operations a minimum number of times.</h4>\n\n<pre><code>Choose two nodes \u2018X\u2019 and \u2018Y\u2019, such that there exists an edge from \u2018X\u2019 to \u2018Y\u2019.\n\nDelete edge \u2018X\u2019 to \u2018Y\u2019.\n\nAdd edge \u2018Y\u2019 to \u2018X\u2019.\n</code></pre>\n\n<h4 id=\"you-need-to-print-the-minimum-operations-that-you-have-done\">You need to print the minimum operations that you have done.</h4>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018M\u2019 where \u2018N\u2019 denotes the total number of nodes and \u2018M\u2019 denotes the total number of edges in the graph.\n\nThe second line of each test case contains two space-separated integers \u2018X\u2019 and \u2018Y\u2019 where \u2018X\u2019 denotes the starting node of the path and \u2018Y\u2019 denotes the ending node of the path.\n\nThe next \u2018M\u2019 lines contain two space-separated integers \u2018U\u2019 and \u2018V\u2019 where \u2018U\u2019 and \u2018V\u2019 represent the nodes that share an edge from \u2018U\u2019 to \u2018V\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the minimum number of operations required to make at least one valid path from \u2018A\u2019 to \u2018B\u2019.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 3000\n1 &lt;= M &lt;= min(3000, N*(N-1)/2)\n0 &lt;= X, Y, U, V &lt;= N - 1\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 3\n0 3\n0 1\n0 2\n3 2\n5 4\n0 4\n0 1\n1 3\n4 1\n2 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 \n1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>Test Case 1 :  \nThe given graph is shown below. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-8062.jpg\" alt=\"1\"></p>\n\n<pre><code>Starting node = 0 and Ending node = 3. \nWe can reverse edge 3 -&gt; 2 to make a valid path of 0 -&gt; 2 -&gt; 3. \nSo, the minimum number of operations required will be 1.\n\nTest Case 2 : \nThe given graph is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/2-8063.jpg\" alt=\"2\"></p>\n\n<pre><code>Starting node = 0 and Ending node = 4. \nWe can reverse edge 4 -&gt; 1 to make a valid path of 0 -&gt; 1 -&gt; 4. \nSo the minimum number of operations required will be 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 4\n0 4\n0 1\n0 2\n2 3\n4 3\n6 6\n0 5\n0 1\n0 2\n2 3\n2 4\n4 5\n5 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a directed graph with N nodes and M edges. Your goal is to find the minimum number of edge reversals needed to create at least one path from a starting node A to an ending node B. You can perform the following operation:  \n\n*   Choose an edge from node X to node Y. \n*   Delete the edge X -> Y. \n*   Add the edge Y -> X (reversing the direction). \n\nDetermine the minimum number of such operations required to establish a path from A to B.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 3000",
                    "1 <= M <= min(3000, N*(N-1)/2)",
                    "0 <= X, Y, U, V <= N - 1",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 3\n0 3\n0 1\n0 2\n3 2",
                        "output": "1",
                        "explanation": "The graph initially doesn't have a path from 0 to 3. Reversing the edge 3 -> 2 creates a path 0 -> 2 -> 3. Thus, one operation is sufficient."
                    },
                    {
                        "input": "5 4\n0 4\n0 1\n1 3\n4 1\n2 0",
                        "output": "1",
                        "explanation": "The graph initially doesn't have a path from 0 to 4. Reversing the edge 4 -> 1 creates a path from 0 -> 1 -> 4, so only one operation is required."
                    },
                    {
                        "input": "5 4\n0 4\n0 1\n0 2\n2 3\n4 3",
                        "output": "1",
                        "explanation": "Initially there is no path from node 0 to node 4. By reversing the edge 4 -> 3 we can make a path of length 3,  0 -> 2 -> 3 -> 4 by further reversing the edge 4->3"
                    },
                    {
                        "input": "6 6\n0 5\n0 1\n0 2\n2 3\n2 4\n4 5\n5 3",
                        "output": "0",
                        "explanation": "There is already a path from node 0 to node 5: 0 -> 2 -> 4 -> 5.  Therefore, no operations are required."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Assign weight 1 to all edges which you have reversed and calculate the shortest path from starting node to ending node.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}