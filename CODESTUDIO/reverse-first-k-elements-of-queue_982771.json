{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9304,
            "title": "Reverse First K elements of Queue",
            "titleSlug": "reverse-first-k-elements-of-queue_982771",
            "content": "<h4 id=\"you-are-given-a-queue-containing-n-integers-and-an-integer-k-you-need-to-reverse-the-order-of-the-first-k-elements-of-the-queue-leaving-the-other-elements-in-the-same-relative-order\">You are given a QUEUE containing \u2018N\u2019 integers and an integer \u2018K\u2019. You need to reverse the order of the first \u2018K\u2019 elements of the queue, leaving the other elements in the same relative order.</h4>\n\n<h4 id=\"you-can-only-use-the-standard-operations-of-the-queue-stl\">You can only use the standard operations of the QUEUE STL:</h4>\n\n<pre><code>1. enqueue(x) : Adds an item x to rear of the queue\n2. dequeue() : Removes an item from front of the queue\n3. size() : Returns number of elements in the queue.\n4. front() : Finds the front element.\n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>Let the given queue be { 1, 2, 3, 4, 5 } and K be 3.\nYou need to reverse the first K integers of Queue which are 1, 2, and 3.\nThus, the final response will be { 3, 2, 1, 4, 5 }.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of queries or test cases. \n\nThe first line of each input consists of 2 space-separated integers \u2018N\u2019 and \u2018K\u2019 denoting the size of the queue and the number of elements to be reversed from the front.\n\nThe second line of each input consists of \u2018N\u2019 space-separated integers denoting the elements of the queue.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the elements of the queue after reversing the order of first \u2018K\u2019 elements in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up</h5>\n\n<pre><code>Can you solve this without using arrays?\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10 ^ 5\n0 &lt;= K &lt;= N\n-10 ^ 9 &lt;= queue elements &lt;= 10 ^ 9\n\n  Time limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5 3\n1 2 3 4 5\n4 2\n6 2 4 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3 2 1 4 5\n2 6 4 1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For test case 1: Refer to the example explained above.\n\nFor test case 2:\nThe queue after reversing the first 2 elements i.e., 6 and 2 will be { 2, 6, 4, 1 }.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 2\n5 3 2 6 4\n4 4\n1 2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3 5 2 6 4\n4 3 2 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 261,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a queue 'q' containing 'N' integers and an integer 'K', reverse the order of the first 'K' elements of the queue, leaving the remaining elements in their original order. You are restricted to using only the standard queue STL operations: enqueue(x), dequeue(), size(), and front().",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "0 <= K <= N",
                    "-10^9 <= queue elements <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 5, nums = [1, 2, 3, 4, 5], k = 3",
                        "output": "3 2 1 4 5",
                        "explanation": "The first 3 elements (1, 2, and 3) are reversed to become (3, 2, 1), and the rest remain unchanged."
                    },
                    {
                        "input": "n = 4, nums = [6, 2, 4, 1], k = 2",
                        "output": "2 6 4 1",
                        "explanation": "The first 2 elements (6 and 2) are reversed to become (2, 6), and the rest remain unchanged."
                    },
                    {
                        "input": "n = 5, nums = [5, 3, 2, 6, 4], k = 2",
                        "output": "3 5 2 6 4",
                        "explanation": "The first 2 elements (5 and 3) are reversed to become (3, 5), and the rest remain unchanged."
                    },
                    {
                        "input": "n = 4, nums = [1, 2, 3, 4], k = 4",
                        "output": "4 3 2 1",
                        "explanation": "All 4 elements (1, 2, 3, and 4) are reversed to become (4, 3, 2, 1)."
                    },
                    {
                        "input": "n = 5, nums = [10, 20, 30, 40, 50], k = 0",
                        "output": "10 20 30 40 50",
                        "explanation": "K is 0, so no elements are reversed.  The queue remains the same."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We can use an array to reverse the elements.</p>",
            "<p>Another approach can be using a stack to reverse the elements as the stack has a property of reversing the order of elements being pushed into it.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(K)\r\n\r\n    Where N is the size of the queue and\r\n    K is the number of elements whose order must be reversed.\r\n*/\r\n\r\n#include <stack>\r\n\r\nqueue<int> reverseElements(queue<int> q, int k)\r\n{\r\n    int n = q.size();\r\n    \r\n    // Maintain a stack\r\n    stack<int> s;\r\n\t\r\n    // Insert K front elements from queue into stack\r\n    for (int i = 0; i < k; i++)\r\n    {\r\n        s.push(q.front());\r\n        q.pop();\r\n    }\r\n\t\r\n    // Iterate till size of stack is more than 0\r\n    while (s.size() > 0)\r\n    {\r\n        q.push(s.top());\r\n        s.pop();\r\n    }\r\n\r\n    for (int i = 0; i < n - k; i++)\r\n    {\r\n        q.push(q.front());\r\n        q.pop();\r\n    }\r\n\t\r\n    // Return the queue\r\n    return q;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(K)\r\n\r\n    Where N is the size of the queue and\r\n    K is the number of elements whose order must be reversed.\r\n*/\r\n\r\nimport java.util.Queue;\r\nimport java.util.Stack;\r\n\r\npublic class Solution \r\n{\r\n    public static Queue<Integer> reverseElements(Queue<Integer> q, int k) \r\n    {\r\n        int n = q.size();\r\n\t\t\r\n        // Maintain a stack \r\n        Stack<Integer> s = new Stack<Integer> ();\r\n\t\t\r\n        // Insert K front elements from queue into stack    \r\n        for (int i = 0; i < k; i++) \r\n        {\r\n            s.push(q.peek());\r\n            q.remove();\r\n        }\r\n\t\t\r\n        // Iterate till size of stack is more than 0\r\n        while (s.size() > 0) \r\n        {\r\n            q.add(s.peek());\r\n            s.pop();\r\n        }\r\n\r\n        for (int i = 0; i < n - k; i++) \r\n        {\r\n            q.add(q.peek());\r\n            q.remove();\r\n        }\r\n\t\t\r\n        // Return the queue\r\n        return q;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(K)\r\n\r\n    Where N is the size of the queue and\r\n    K is the number of elements whose order must be reversed.\r\n'''\r\n\r\nfrom queue import LifoQueue\r\n\r\ndef reverseElements(q, k):\r\n\r\n    n = q.qsize()\r\n\r\n    # Maintain a stack\r\n    s = LifoQueue()\r\n\r\n    # Insert K front elements from queue into stack\r\n    for i in range(k):\r\n        s.put(q.get())\r\n\r\n    # Iterate till size of stack is more than 0\r\n    while s.qsize() > 0:\r\n        q.put(s.get())\r\n\r\n    for i in range(n - k):\r\n        q.put(q.get())\r\n\r\n    # Return the queue\r\n    return q\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}