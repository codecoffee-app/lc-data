{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10753,
            "title": "Reverse Integer",
            "titleSlug": "reverse-integer_1263846",
            "content": "<h4 id=\"you-are-given-a-32-bit-signed-integer-n-so-the-integer-will-lie-in-the-range-2-31-2-31-1-your-task-is-to-return-the-reverse-of-the-given-integer-if-reversing-causes-overflow-then-return-1\">You are given a 32-bit signed integer \u2018N\u2019. So, the integer will lie in the range [-2^31, 2^31 - 1]. Your task is to return the reverse of the given integer. If reversing causes overflow, then return -1.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>(1) Do not use data types with the capacity of more than 32-bit like \u2018long int\u2019 or \u2018long long int\u2019 in C++. The problem is meant to reverse the integer using a 32-bit data type only.\n\n(2) You should assume that the environment does not allow storing signed or unsigned 64-bit integers.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first and the only line of each test case contains a 32-bit signed integer \u2018N\u2019 representing the integer to be reversed.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, return the reverse of integer, \u2019N\u2019. \n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n-2^31 &lt;= N &lt;= 2^31 - 1   \n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n8596396\n1253489646\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>6936958\n-1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h5>\n\n<pre><code>In test case 1, Given \u2018N\u2019 = 8596396\n\nOn reversing the digits of \u2018N\u2019, we will get 6936958. So the output is 6936958.\n\nIn test case 2, Given \u2018N\u2019 = 1253489646\n\nOn reversing the digits of \u2018N\u2019, we will get 6469843521 which is greater than 2^31 - 1. Thus, it will cause an overflow. So the output is -1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n-803\n-1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-308\n-1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h5>\n\n<pre><code>In test case 1, Given \u2018N\u2019 = -803\n\nOn reversing the digits of \u2018N\u2019, we will get -308. So the output is -308.\n\nIn test case 2, Given \u2018N\u2019 = -1\n\nOn reversing the digits of \u2018N\u2019, we will get -1. So the output is -1.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 32-bit signed integer `n`, reverse the digits of `n`. If reversing `n` causes an integer overflow (i.e., the reversed number is outside the range [-2^31, 2^31 - 1]), return -1. Otherwise, return the reversed integer.",
                "constraints": [
                    "1 <= T <= 5",
                    "-2^31 <= N <= 2^31 - 1",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 8596396",
                        "output": "6936958",
                        "explanation": "Reversing the digits of 8596396 yields 6936958, which is within the valid 32-bit signed integer range."
                    },
                    {
                        "input": "n = 1253489646",
                        "output": "-1",
                        "explanation": "Reversing the digits of 1253489646 yields 6469843521, which is greater than 2^31 - 1, causing an overflow.  Therefore, the output is -1."
                    },
                    {
                        "input": "n = -803",
                        "output": "-308",
                        "explanation": "Reversing the digits of -803 yields -308, which is within the valid 32-bit signed integer range."
                    },
                    {
                        "input": "n = -1",
                        "output": "-1",
                        "explanation": "Reversing the digits of -1 results in -1, which is within the valid 32-bit signed integer range."
                    },
                    {
                        "input": "n = 1534236469",
                        "output": "-1",
                        "explanation": "Reversing the digits of 1534236469 gives 9646324351, which exceeds the limit of a 32-bit integer. Hence -1 is returned."
                    },
                    {
                        "input": "n = -2147483648",
                        "output": "-1",
                        "explanation": "Reversing the digits of -2147483648 yields a number outside the representable range of a 32-bit signed integer. Therefore, the output is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you exploit the fact that the given number is a 32 bit signed integer?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}