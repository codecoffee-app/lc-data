{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14211,
            "title": "Reverse Level Order Traversal",
            "titleSlug": "reverse-level-order-traversal_2090379",
            "content": "<h4 id=\"ninja-was-practicing-some-questions-on-binary-trees-he-is-just-recently-done-with-level-order-traversal-of-binary-trees-now-curious-ninja-wants-to-print-the-reverse-level-order-traversal\">Ninja was practicing some questions on Binary Trees. He is just recently done with level order traversal of Binary Trees. Now curious Ninja wants to print the reverse level order traversal.</h4>\n\n<h4 id=\"ninja-wants-you-to-help-him-for-that-help-ninja\">Ninja wants you to help him for that. Help Ninja!</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Level order traversal from bottom to top is the traversal from the bottom of the tree and printing the nodes level by level from right to left.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>For the given binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<pre><code>The reverse level order traversal will be {7,6,5,4,3,2,1}.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print all the nodes in reverse level order traversal separated by a single space.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>0 &lt;= N &lt;= 5 * 10^5\n0 &lt;= data &lt;= 10^5 and data != -1\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>7 6 2 10 5 8\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/new_tree-11821.png\">\n</br></p>\n\n<pre><code>Level Order Traversal of the binary tree is 8 5 10 2 6 7\nNow, start with the bottom of the tree, i.e. 7, and traverse in the tree in the reverse direction of level order, i.e., bottom to top and right to left. So, the reverse level order traversal will be {7,6,2,10,5,8}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2 7 5 2 6 -1 9 -1 -1 5 11 4 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4 11 5 9 6 2 5 7 2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>Traverse the tree in the reverse direction of level order, i.e., bottom to top and right to left. So reverse level order traversal will be {4,11,5,9,6,2,5,7,2}.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, your task is to implement a function to print its reverse level order traversal. Reverse level order traversal means visiting nodes level by level from the bottom of the tree upwards, and within each level, nodes are processed from right to left.",
                "constraints": [
                    "0 <= N <= 5 * 10^5, where N is the number of nodes in the binary tree.",
                    "0 <= data <= 10^5 and data != -1, where data represents the value of a node. -1 indicates a null node.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "root = [8, 5, 10, 2, 6, -1, -1, -1, -1, -1, 7, -1, -1]",
                        "output": "7 6 2 10 5 8",
                        "explanation": "The tree is constructed from the input array. Level Order Traversal of the binary tree is 8 5 10 2 6 7. The reverse level order traversal will be {7,6,2,10,5,8}."
                    },
                    {
                        "input": "root = [2, 7, 5, 2, 6, -1, 9, -1, -1, 5, 11, 4, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "4 11 5 9 6 2 5 7 2",
                        "explanation": "The tree is constructed from the input array. The reverse level order traversal will be {4,11,5,9,6,2,5,7,2}."
                    },
                    {
                        "input": "root = [1, 2, 3, 4, 5, 6, 7]",
                        "output": "4 5 6 7 2 3 1",
                        "explanation": "Standard complete binary tree. Reverse level order traversal: {4, 5, 6, 7, 2, 3, 1}."
                    },
                    {
                        "input": "root = [1]",
                        "output": "1",
                        "explanation": "Single node tree. Reverse level order traversal: {1}."
                    },
                    {
                        "input": "root = [1, 2, -1]",
                        "output": "2 1",
                        "explanation": "A tree with only left child of root. Reverse Level Order Traversal: {2, 1}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}