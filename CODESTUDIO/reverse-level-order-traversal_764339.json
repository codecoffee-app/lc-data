{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7801,
            "title": "Reverse Level Order Traversal",
            "titleSlug": "reverse-level-order-traversal_764339",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-integers-you-are-supposed-to-return-the-reverse-of-the-level-order-traversal\">You have been given a Binary Tree of integers. You are supposed to return the reverse of the level order traversal.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>For the given binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<pre><code>The reverse level order traversal will be {7,6,5,4,3,2,1}.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print all the nodes in reverse level order traversal separated by a single space.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>0 &lt;= N &lt;= 5 * 10^5\n0 &lt;= data &lt;= 10^5 and data != -1\n\nWhere \u2018N\u2019 is the total number of nodes in the binary tree, and &#39;data&#39; is the value of the binary tree node.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>7 6 5 4 3 2 1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Start with the bottom of the tree, i.e. 7, and traverse in the tree in the reverse direction of level order, i.e., bottom to top and right to left. So, the reverse level order traversal will be {7,6,5,4,3,2,1}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2 7 5 2 6 -1 9 -1 -1 5 11 4 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4 11 5 9 6 2 5 7 2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>Traverse the tree in the reverse direction of level order, i.e., bottom to top and right to left. So reverse level order traversal will be {4,11,5,9,6,2,5,7,2}.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 50,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of integers, return the reverse level order traversal of the tree. The reverse level order traversal visits nodes level by level, starting from the bottom-most level and proceeding upwards, processing nodes from right to left within each level.",
                "constraints": [
                    "0 <= N <= 5 * 10^5, where \u2018N\u2019 is the total number of nodes in the binary tree.",
                    "0 <= data <= 10^5 and data != -1, where 'data' is the value of the binary tree node.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "root = [1,2,3,4,-1,5,6,-1,7,-1,-1,-1,-1,-1,-1]",
                        "output": "7 6 5 4 3 2 1",
                        "explanation": "The tree is constructed as shown in the example. The reverse level order traversal starts from the last level, which contains only '7'. Then it moves to the previous level and adds '6' and '5', and so on, until reaching the root. The result is {7,6,5,4,3,2,1}."
                    },
                    {
                        "input": "root = [2,7,5,2,6,-1,9,-1,-1,5,11,4,-1,-1,-1,-1,-1,-1,-1]",
                        "output": "4 11 5 9 6 2 5 7 2",
                        "explanation": "The reverse level order traversal visits the nodes level by level, right to left, starting from the bottom: {4,11,5,9,6,2,5,7,2}."
                    },
                    {
                        "input": "root = [1]",
                        "output": "1",
                        "explanation": "A single node tree results in simply the root's value in reverse level order."
                    },
                    {
                        "input": "root = []",
                        "output": "",
                        "explanation": "An empty tree results in an empty traversal."
                    },
                    {
                        "input": "root = [1,2,-1]",
                        "output": "2 1",
                        "explanation": "The reverse level order traversal visits the nodes level by level, right to left, starting from the bottom: {2, 1}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about exploring the property of the level order traversal?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}