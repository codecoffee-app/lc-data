{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8909,
            "title": "Reverse Linked List",
            "titleSlug": "reverse-linked-list_920513",
            "content": "<h4 id=\"you-are-given-a-singly-linked-list-of-integers-you-need-to-reverse-the-linked-list-by-changing-the-links-between-nodes\">You are given a Singly Linked List of integers. You need to reverse the Linked List by changing the links between nodes.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, just return the head of the reversed linked list. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains the elements of the singly linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print the reversed linked list. The elements of the reversed list should be single-space separated, terminated by -1.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;N&#39; &lt;= 10^4\n0 &lt;= &#39;data&#39; &lt;= 10^9\n\nWhere &#39;N&#39; is the number of nodes in the linked list.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1 2 4 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>4 2 1 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>1-&gt;2-&gt;4 is the initial linked list. If we reverse this, we get 4-&gt;2-&gt;1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n1 1 1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 1 1 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 196,
            "dislikes": "NA",
            "rephrased": {
                "body": "Reverse a given singly linked list of integers. You are required to modify the links between the nodes to achieve this reversal. Return the head of the reversed linked list.",
                "constraints": [
                    "1 <= N <= 10^4",
                    "0 <= data <= 10^9",
                    "Where 'N' is the number of nodes in the linked list.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 4 -1",
                        "output": "4 2 1 -1",
                        "explanation": "The original linked list is 1 -> 2 -> 4. Reversing it results in 4 -> 2 -> 1."
                    },
                    {
                        "input": "1 1 1 -1",
                        "output": "1 1 1 -1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use recursion to reverse the linked list.</p>",
            "<p>Reverse the link of each node.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space complexity: O(1)\r\n    \r\n    Where 'N' is the number of nodes in the list.\r\n\r\n*/\r\n\r\nNode* reverseLinkedList(Node *head)\r\n{\r\n\t// If list is empty or has just one node return it\r\n\tif(head == NULL || head->next == NULL){\r\n\t\treturn head;\r\n\t}\r\n\t\r\n\t// Pointer to the previous node of current node\r\n\tNode *prev = NULL; \r\n\t\r\n\t// Pointer to the current node\r\n\tNode *curr = head; \r\n\t\r\n\twhile(curr != NULL){\r\n\t\t\r\n\t\t// Pointer to the next node of the current node\r\n\t\tNode *ahead = curr->next;\r\n\t\t\r\n\t\t// Inverting the links of linked list\r\n\t\tcurr->next = prev;\r\n\t\t\r\n\t\t// Forwarding prev to its next node\r\n\t\tprev = curr;\r\n\t\t\r\n\t\t// Forwarding curr to its next node\r\n\t\tcurr = ahead;\r\n\t}\r\n\t\r\n\treturn prev;   \r\n}\r\n\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space complexity: O(1)\r\n\r\n    Where 'N' is the number of nodes in the list.\r\n\r\n*/\r\n\r\npublic class Solution\r\n{\r\n    public static Node reverseLinkedList(Node head)\r\n    {\r\n        // If list is empty or has just one node return it\r\n        if (head == null || head.next == null)\r\n        {\r\n            return head;\r\n        }\r\n\r\n        // Pointer to the previous node of current node\r\n        Node prev = null;\r\n\r\n        // Pointer to next node\r\n        Node next = null;\r\n\r\n        // Pointer to the current node\r\n        Node curr = head;\r\n\r\n        while (curr != null)\r\n        {\r\n\r\n            // Pointer to the next node of the current node\r\n            next = curr.next;\r\n\r\n            // Inverting the links of linked list\r\n            curr.next = prev;\r\n\r\n            // Forwarding prev to its next node\r\n            prev = curr;\r\n\r\n            // Forwarding curr to its next node\r\n            curr = next;\r\n        }\r\n\r\n        return prev;\r\n    }\r\n}\r\n\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N)\r\n    Space complexity: O(1)\r\n    \r\n    Where N are the number of nodes in the list.\r\n\r\n'''\r\n\r\n\r\ndef reverseLinkedList(head):\r\n\r\n    # If list is empty or has just one node return it\r\n    if(head == None or head.next == None):\r\n        return head\r\n\r\n    # Pointer to the previous node of current node\r\n    prev = None\r\n\r\n    # Pointer to the current node\r\n    curr = head\r\n\r\n    while(curr != None):\r\n\r\n        # Pointer to the next node of the current node\r\n        ahead = curr.next\r\n\r\n        # Inverting the links of linked list\r\n        curr.next = prev\r\n\r\n        # Forwarding prev to its next node\r\n        prev = curr\r\n\r\n        # Forwarding curr to its next node\r\n        curr = ahead\r\n\r\n    return prev\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}