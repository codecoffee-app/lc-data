{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9379,
            "title": "Reverse List in K groups",
            "titleSlug": "reverse-list-in-k-groups_983644",
            "content": "<h4 id=\"you-are-given-a-linked-list-of-n-nodes-and-an-integer-k-where-k-is-less-than-or-equal-to-n\">You are given a linked list of <strong><em>&#39;n&#39;</em></strong> nodes and an integer <strong><em>&#39;k&#39;</em></strong>, where &#39;k&#39; is less than or equal to &#39;n&#39;.</h4>\n\n<p><br/></p>\n\n<h4 id=\"your-task-is-to-reverse-the-order-of-each-group-of-k-consecutive-nodes-if-n-is-not-divisible-by-k-then-the-last-group-of-nodes-should-remain-unchanged\">Your task is to reverse the order of each group of &#39;k&#39; consecutive nodes, if &#39;n&#39; is not divisible by &#39;k&#39;, then the last group of nodes should remain unchanged.</h4>\n\n<p><br/></p>\n\n<h4 id=\"for-example-if-the-linked-list-is-1-2-3-4-5-and-k-is-3-we-have-to-reverse-the-first-three-elements-and-leave-the-last-two-elements-unchanged-thus-the-final-linked-list-being-3-2-1-4-5\">For example, if the linked list is 1-&gt;2-&gt;3-&gt;4-&gt;5, and &#39;k&#39; is 3, we have to reverse the first three elements, and leave the last two elements unchanged. Thus, the final linked list being 3-&gt;2-&gt;1-&gt;4-&gt;5.</h4>\n\n<p><br/></p>\n\n<h4 id=\"implement-a-function-that-performs-this-reversal-and-returns-the-head-of-the-modified-linked-list\">Implement a function that performs this reversal, and returns the head of the modified linked list.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: &#39;list&#39; = [1, 2, 3, 4], &#39;k&#39; = 2\n\nOutput: 2 1 4 3\n\nExplanation:\nWe have to reverse the given list &#39;k&#39; at a time, which is 2 in this case. So we reverse the first 2 elements then the next 2 elements, giving us 2-&gt;1-&gt;4-&gt;3.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>All the node values will be distinct.\n</code></pre>\n\n<p><br/>        </p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains a single integer &#39;n&#39;, denoting the number of nodes in the linked list.\n\nThe second line contains &#39;n&#39; space-separated integers, denoting the elements of the linked list.\n\nThe third line of input contains an integer &#39;k&#39;.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return the head of the modified linked list.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print anything, just implement the given function. Contents of your returned linked list will be printed in a single line.\n</code></pre>\n\n<p><br/></p>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>6\n5 4 3 7 9 2\n4 \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>7 3 4 5 9 2\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h5>\n\n<pre><code>For the given test case, we reverse the nodes in groups of four. But for the last 2 elements, we cannot form a group of four, so leave them as they are. The linked list becomes 7-&gt;3-&gt;4-&gt;5-&gt;9-&gt;2. Hence the output is 7 3 4 5 9 2\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4\n4 3 2 8\n4 \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>8 2 3 4\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to solve this in O(n). \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-space-complexity\">Expected Space Complexity:</h5>\n\n<pre><code>Try to solve this using O(1) extra space.    \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= n &lt;= 10^4\n1 &lt;= k &lt;= n\n\nTime Limit: 1 sec\n</code></pre>\n\n<p><br/></p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 380,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a linked list of 'n' nodes and an integer 'k' (where 'k' <= 'n'), reverse each group of 'k' consecutive nodes. If 'n' is not divisible by 'k', the last group of nodes should remain unchanged.\n\nFor example, with the linked list 1->2->3->4->5 and 'k' = 3, reverse the first three elements, leaving the last two unchanged, resulting in 3->2->1->4->5.\n\nImplement a function that reverses the linked list in groups of 'k' and returns the head of the modified list. All node values will be distinct.",
                "constraints": [
                    "1 <= n <= 10^4",
                    "1 <= k <= n"
                ],
                "testcases": [
                    {
                        "input": "6\n5 4 3 7 9 2\n4",
                        "output": "7 3 4 5 9 2",
                        "explanation": "The nodes are reversed in groups of four. The last two elements cannot form a group of four, so they remain unchanged. The resulting linked list is 7->3->4->5->9->2."
                    },
                    {
                        "input": "4\n4 3 2 8\n4",
                        "output": "8 2 3 4",
                        "explanation": null
                    },
                    {
                        "input": "4\n1 2 3 4\n2",
                        "output": "2 1 4 3",
                        "explanation": "Reverse the given list 'k' at a time, which is 2 in this case. So we reverse the first 2 elements then the next 2 elements, giving us 2->1->4->3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try the simplest possible way.</p>",
            "<p>Try to optimize space.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n        Time Complexity: O(n)\r\n        Space Complexity: O(1)\r\n\r\n        Where 'n' is the number of nodes in the Linked list.\r\n*/\r\n\r\n/**\r\n * Definition for singly-linked list.\r\n * class Node {\r\n * public:\r\n *     int data;\r\n *     Node *next;\r\n *     Node() : data(0), next(nullptr) {}\r\n *     Node(int x) : data(x), next(nullptr) {}\r\n *     Node(int x, Node *next) : data(x), next(next) {}\r\n * };\r\n */\r\n\r\nNode *kReverse(Node *head, int k)\r\n{\r\n\r\n    Node *prev = NULL;\r\n    Node *curr = head;\r\n    Node *next = NULL;\r\n    Node *tail = NULL;\r\n    Node *newHead = NULL;\r\n    Node *join = NULL;\r\n\r\n    // Reversing the list until we have nodes in the list.\r\n    while (curr)\r\n    {\r\n        int cnt = 0;\r\n        join = curr;\r\n        prev = NULL;\r\n\r\n        // Reversing the nodes in group of k.\r\n        while (curr && cnt < k)\r\n        {\r\n            next = curr->next;\r\n            curr->next = prev;\r\n            prev = curr;\r\n            curr = next;\r\n            cnt++;\r\n        }\r\n\r\n\r\n        // If the last group has < k nodes, reversing it again to get the previous order.\r\n        if (cnt < k)\r\n        {\r\n            curr = prev;\r\n            prev = NULL;\r\n            join = curr;\r\n            cnt=0;\r\n            while (curr && cnt < k)\r\n            {\r\n               \r\n                next = curr->next;\r\n                curr->next = prev;\r\n                prev = curr;\r\n                curr = next;\r\n                cnt++;\r\n            }\r\n        }\r\n\r\n        // If the newHead is not yet assigned, then assign it\r\n        if (newHead == NULL)\r\n        {\r\n            newHead = prev;\r\n        }\r\n\r\n        if (tail != NULL)\r\n        {\r\n            tail->next = prev;\r\n        }\r\n\r\n        tail = join;\r\n    }\r\n  \r\n    return newHead;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "# Time Complexity: O(n)\r\n# Space Complexity: O(1)\r\n# Where 'n' is the number of nodes in the Linked list.\r\n\r\ndef kReverse(head, k):\r\n    prev = None\r\n    curr = head\r\n    next = None\r\n    tail = None\r\n    newHead = None\r\n    join = None\r\n\r\n    # Reversing the list until we have nodes in the list.\r\n    while curr:\r\n        cnt = 0\r\n        join = curr\r\n        prev = None\r\n\r\n        # Reversing the nodes in group of k.\r\n        while curr and cnt < k:\r\n            next = curr.next\r\n            curr.next = prev\r\n            prev = curr\r\n            curr = next\r\n            cnt += 1\r\n\r\n        # If the last group has < k nodes, reversing it again to get the previous order.\r\n        if cnt < k:\r\n            curr = prev\r\n            prev = None\r\n            join = curr\r\n            cnt = 0\r\n            while curr and cnt < k:\r\n                next = curr.next\r\n                curr.next = prev\r\n                prev = curr\r\n                curr = next\r\n                cnt += 1\r\n\r\n        # If the newHead is not yet assigned, then assign it\r\n        if newHead == None:\r\n            newHead = prev\r\n\r\n        if tail != None:\r\n            tail.next = prev\r\n\r\n        tail = join\r\n\r\n    return newHead\r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n        Time Complexity: O(N)\r\n        Space Complexity: O(1)\r\n\r\n        Where 'N' is the number of nodes in the Linked list.\r\n*/\r\n\r\npublic class Solution\r\n{\r\n\r\n    public static Node kReverse(Node head, int k)\r\n    {\r\n\r\n        Node prev = null;\r\n        Node curr = head;\r\n        Node next = null;\r\n        Node tail = null;\r\n        Node newHead = null;\r\n        Node join = null;\r\n\r\n        // Reversing the list until we have nodes in the list\r\n        while (curr != null)\r\n        {\r\n            int cnt = 0;\r\n            join = curr;\r\n            prev = null;\r\n\r\n            // Reversing the nodes in group of K\r\n            while (curr != null && cnt < k)\r\n            {\r\n                next = curr.next;\r\n                curr.next = prev;\r\n                prev = curr;\r\n                curr = next;\r\n                cnt++;\r\n            }\r\n\r\n            // If the last group has < k nodes, reversing it again to get the previous order.\r\n            if (cnt < k)\r\n            {\r\n                curr = prev;\r\n                prev = null;\r\n                join = curr;\r\n                cnt=0;\r\n                while (curr != null && cnt < k)\r\n                {\r\n\r\n                    next = curr.next;\r\n                    curr.next = prev;\r\n                    prev = curr;\r\n                    curr = next;\r\n                    cnt++;\r\n                }\r\n            }\r\n\r\n\r\n            // If the newHead is not yet assigned, then assign it\r\n            if (newHead == null)\r\n            {\r\n                newHead = prev;\r\n            }\r\n\r\n            if (tail != null)\r\n            {\r\n                tail.next = prev;\r\n            }\r\n\r\n            tail = join;\r\n        }\r\n\r\n        return newHead;\r\n\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}