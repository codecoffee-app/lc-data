{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9971,
            "title": "Reverse Pairs",
            "titleSlug": "reverse-pairs_1112652",
            "content": "<h4 id=\"you-are-given-an-array-list-say-arr-of-size-n-we-call-pair-i-j-a-reverse-pair-when-i-j-and-arr-i-2-arr-j\">You are given an array/list say \u2018ARR\u2019 of size \u2018N\u2019. We call pair (i, j) a Reverse Pair when i &lt; j and &#39;ARR[i]&#39; &gt; 2 * &#39;ARR[j]&#39;.</h4>\n\n<h4 id=\"your-task-is-to-find-the-number-of-reverse-pairs-present-in-given-arr\">Your task is to find the number of Reverse Pairs present in given &#39;ARR&#39;.</h4>\n\n<h4 id=\"for-example\">For example :</h4>\n\n<pre><code>For the array [50, 21, 9], if we follow 1-based indexing, the Reverse Pairs are (1, 2), (1, 3) and (2, 3). Thus, the total count i.e. the answer becomes 3.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>A single index of the pair (i, j) can be used multiple times.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of every test case contains an integer \u2018N\u2019 denoting the size of the array/list. \n\nThe second line of every test case contains \u2018N\u2019 space-separated integers denoting the elements of array/list &#39;ARR&#39;.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, print the number of distinct pairs.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5    \n2 &lt;= N &lt;= 3000\n1 &lt;= ARR[i] &lt;= 10^5\n\nWhere &#39;ARR[i]&#39; denotes the i-th elements in the array/list. \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n6\n1 2 3 2 3 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>Test case 1: \nGiven that we follow 1-based indexing, for the array {1, 2, 3, 2, 1}, the pairs satisfying the conditions of Reverse Pairs are \nFor i = 3, arr[i] = 3 and for j = 6, arr[j] = 1.\nFor i = 5, arr[i] = 3 and for j = 6, arr[j] = 1.\nHence there are two possible pairs.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n6\n6 4 8 2 1 3\n5\n2 4 3 5 1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>6\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2 :</h5>\n\n<pre><code>Test case 1: \nGiven that we follow 1-based indexing,The possible pairs satisfying the conditions of Reverse Pairs are (1, 4), (1, 5), (2, 5), (3, 4), (3, 5), (3, 6). Thus, the answer is 6.\n\nTest case 2: \nGiven that we follow 1-based indexing, The possible pair of indices satisfying the above condition are (2, 5), (3, 5), (4, 5). Thus, the answer is 3.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 98,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'ARR' of size 'N', find the number of reverse pairs. A reverse pair (i, j) is defined as a pair of indices where i < j and ARR[i] > 2 * ARR[j].",
                "constraints": [
                    "1 <= T <= 5",
                    "2 <= N <= 3000",
                    "1 <= ARR[i] <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n6\n1 2 3 2 3 1",
                        "output": "2",
                        "explanation": "In the array {1, 2, 3, 2, 3, 1}, the reverse pairs are (3, 6) because 3 > 2 * 1, and (5, 6) because 3 > 2 * 1. Therefore, the total count is 2."
                    },
                    {
                        "input": "2\n6\n6 4 8 2 1 3\n5\n2 4 3 5 1",
                        "output": "6\n3",
                        "explanation": "Test case 1: In the array {6, 4, 8, 2, 1, 3}, the reverse pairs are (1, 4), (1, 5), (2, 5), (3, 4), (3, 5), and (3, 6). Thus, the answer is 6.\nTest case 2: In the array {2, 4, 3, 5, 1}, the reverse pairs are (2, 5), (3, 5), and (4, 5). Thus, the answer is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about the simplest possible solution?</p>",
            "<p>Can you think of optimising the above approach ?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n        Time Complexity: O(N * log(N))\r\n        Space Complexity: O(N)\r\n\r\n        Where N is the size of the array.\r\n*/\r\n\r\nvoid merge(vector<int>& arr, int start, int mid, int end)\r\n{\r\n    // Merging the arrays using helper arrays\r\n    int n1 = (mid - start + 1);\r\n    int n2 = (end - mid);\r\n    int left[n1], right[n2];\r\n\r\n    for (int i = 0; i < n1; i++) \r\n    {\r\n        left[i] = arr[start + i];\r\n    }\r\n\r\n    for (int j = 0; j < n2; j++) \r\n    {\r\n        right[j] = arr[mid + 1 + j];\r\n    }\r\n\r\n    int i = 0, j = 0;\r\n    for (int k = start; k <= end; k++) \r\n    {\r\n        if (j >= n2 || (i < n1 && left[i] <= right[j])) \r\n        {\r\n            arr[k] = left[i++];\r\n        }\r\n\r\n        else \r\n        {\r\n            arr[k] = right[j++];\r\n        }\r\n    }\r\n}\r\n\r\nint mergeSort(vector<int>& arr, int start, int end)\r\n{\r\n    if (start < end) \r\n    {\r\n        int mid = (start + end) / 2;\r\n\r\n        // Counting the pairs in the left and right arrays.\r\n        int count = mergeSort(arr, start, mid) + mergeSort(arr, mid + 1, end);\r\n        int j = mid + 1;\r\n        for (int i = start; i <= mid; i++) \r\n        {\r\n            while (j <= end && arr[i] > arr[j] * 2LL) \r\n            {\r\n                j++;\r\n            }\r\n            count += j - (mid + 1);\r\n        }\r\n\r\n        // Merging the arrays.\r\n        merge(arr, start, mid, end);\r\n        return count;\r\n    }\r\n    \r\n    else\r\n    {\r\n        return 0;\r\n    }\r\n}\r\n\r\n\r\nint reversePairs(vector<int>& arr, int n)\r\n{\r\n    return mergeSort(arr, 0, n - 1);\r\n}\r\n\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n\r\n    Time Complexity: O(N * log(N))\r\n    Space Complexity: O(N)\r\n    \r\n    Where N is the size of the array.\r\n    \r\n'''\r\n\r\ndef merge(arr, start, mid, end):\r\n    \r\n    # Merging the arrays using helper arrays\r\n    n1 = (mid - start) + 1\r\n    n2 = end - mid\r\n    left = [0] * n1\r\n    right = [0] * n2\r\n    \r\n    for i in range(n1):\r\n        left[i] = arr[start + i]\r\n        \r\n    for j in range(n2):\r\n        right[j] = arr[mid + 1 + j]\r\n        \r\n    i, j = 0, 0\r\n    \r\n    for k in range(start, end + 1):\r\n        if j >= n2 or (i < n1 and left[i] <= right[j]):\r\n            arr[k] = left[i]\r\n            i += 1\r\n        else:\r\n            arr[k] = right[j]\r\n            j += 1\r\n\r\ndef mergeSort(arr, start, end):\r\n    if start < end:\r\n        mid = (start + end)//2\r\n        \r\n        # Counting the pairs in the left and right subarrays.\r\n        count = mergeSort(arr, start, mid) + mergeSort(arr, mid + 1, end)\r\n        j = mid + 1\r\n        \r\n        for i in range(start, mid + 1):\r\n            while j <= end and arr[i] > arr[j] * 2:\r\n                j += 1\r\n            count += j - (mid + 1)\r\n        \r\n        # Merging the arrays.\r\n        merge(arr, start, mid, end)\r\n        return count \r\n    \r\n    else:\r\n        return 0\r\n\r\ndef reversePairs(arr, n):\r\n    return mergeSort(arr, 0, n - 1)",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N*(logN))\r\n    Space Complexity: O(N)\r\n\r\n    Where N is the size of the array.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution \r\n{\r\n    public static void merge(ArrayList<Integer> arr, int start, int mid, int end)\r\n    {\r\n\t    // Merging the arrays using helper arrays\r\n\t    int n1 = (mid - start + 1);\r\n\t    int n2 = (end - mid);\r\n\t    ArrayList<Integer> left = new ArrayList<>(n1); \r\n        ArrayList<Integer> right = new ArrayList<>(n2);\r\n\r\n        for(int i=0 ; i<n1 ; i++)\r\n        {\r\n            left.add(0);\r\n        }\r\n        for(int i=0 ; i<n2 ; i++)\r\n        {\r\n            right.add(0);\r\n        }\r\n        \r\n\t    for (int i = 0; i < n1; i++) \r\n\t    {\r\n\t\t    left.set(i, arr.get(start + i));\r\n\t    }\r\n\r\n\t    for (int j = 0; j < n2; j++) \r\n\t    {\r\n\t\t    right.set(j, arr.get(mid + 1 + j));\r\n\t    }\r\n\r\n\t    int i = 0, j = 0;\r\n\t    for (int k = start; k <= end; k++) \r\n\t    {\r\n\t\t    if (j >= n2 || (i < n1 && left.get(i) <= right.get(j))) \r\n\t\t    {\r\n\t\t\t   arr.set(k , left.get(i));\r\n               i++;\r\n\t\t    }\r\n            else \r\n\t\t    {\r\n\t\t\t   arr.set(k , right.get(j));\r\n               j++;\r\n\t\t    }\r\n\t    }\r\n    }\r\n\r\n    public static int mergeSort(ArrayList<Integer> arr, int start, int end) \r\n    {\r\n        if (start < end) \r\n        {\r\n            int mid = (start + end) / 2;\r\n\r\n            // Counting the pairs in the left and right arrays.\r\n            int count = mergeSort(arr, start, mid) + mergeSort(arr, mid + 1, end);\r\n\r\n            int j = mid + 1;\r\n            for (int i = start; i <= mid; i++) \r\n            {\r\n                while (j <= end && arr.get(i) > arr.get(j) * 2) \r\n                {\r\n                    j++;\r\n                }\r\n                count += j - (mid + 1);\r\n            }\r\n\r\n            // Merging the arrays.\r\n            merge(arr, start, mid, end);\r\n            return count;\r\n        } \r\n        else \r\n        {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    public static int reversePairs(ArrayList<Integer> arr) \r\n    {\r\n        int n = arr.size();\r\n\r\n        return mergeSort(arr, 0, n - 1);\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}