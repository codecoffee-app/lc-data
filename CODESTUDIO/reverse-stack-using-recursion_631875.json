{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7357,
            "title": "Reverse Stack Using Recursion",
            "titleSlug": "reverse-stack-using-recursion_631875",
            "content": "<h4 id=\"reverse-a-given-stack-of-n-integers-using-recursion-you-are-required-to-make-changes-in-the-input-parameter-itself\">Reverse a given stack of <strong><em>&#39;N&#39;</strong></em> integers using recursion. You are required to make changes in the input parameter itself.</h4>\n\n<p><br></p>\n\n<h4 id=\"note-you-are-not-allowed-to-use-any-extra-space-other-than-the-internal-stack-space-used-due-to-recursion\">Note: You are not allowed to use any extra space other than the internal stack space used due to recursion.</h4>\n\n<p><br></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: [1,2,3,4,5] \nOutput: [5,4,3,2,1]\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-19-28242.jpg\" alt=\"add image\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer value &#39;N&#39;, denoting the size of the input Stack.\n\nThe second line contains &#39;N&#39; single space-separated integers, denoting the stack elements, where the leftmost integer denotes the TOP element of Stack.    \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>&#39;N&#39; single space-separated integers in a single line, where the leftmost integer denotes the TOP element of the reversed stack.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3\n2 1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3 1 2\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">Explanation to Sample Input 1 :</h5>\n\n<pre><code>Reverse of a give stack is 3 1 2 where first element becomes last and last becomes first.                   \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2 3\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>0 &lt;= N &lt;= 10^3\nWhere &#39;N&#39; is the number of elements in the given stack.\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 360,
            "dislikes": "NA",
            "rephrased": {
                "body": "Reverse a stack of 'N' integers using recursion. Modify the input stack directly; do not use extra space beyond the recursion stack.",
                "constraints": [
                    "0 <= N <= 10^3",
                    "N is the number of elements in the stack.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\n2 1 3",
                        "output": "3 1 2",
                        "explanation": "The reversed stack has the elements in the opposite order: [2, 1, 3] becomes [3, 1, 2]."
                    },
                    {
                        "input": "2\n3 2",
                        "output": "2 3",
                        "explanation": "The reversed stack has the elements in the opposite order: [3, 2] becomes [2, 3]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the recursion call stack to store the elements of the stack and reverse it.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N^2)\r\n    Space Complexity: O(N)\r\n\r\n    where 'N' is the total number of elements in the given stack.\r\n*/\r\n\r\n\r\n// Function to insert an element at the bottom of the stack\r\nvoid insertAtBottom(stack<int> &stack, int ele) {\r\n    if (stack.empty()) {\r\n        // If the stack is empty, simply push the element\r\n        stack.push(ele);\r\n        return;\r\n    }\r\n\r\n    // If the stack is not empty, remove the top element\r\n    int top = stack.top();\r\n    stack.pop();\r\n\r\n    // Recursively call insertAtBottom to insert the element at the bottom\r\n    insertAtBottom(stack, ele);\r\n\r\n    // Push the removed top element back onto the stack\r\n    stack.push(top);\r\n}\r\n\r\n// Function to reverse the elements of the stack\r\nvoid reverseStack(stack<int> &stack) {\r\n    if (stack.empty()) {\r\n        // Base case: If the stack is empty, no elements to reverse\r\n        return;\r\n    }\r\n\r\n    // If the stack is not empty, remove the top element\r\n    int top = stack.top();\r\n    stack.pop();\r\n\r\n    // Recursively call reverseStack to reverse the remaining elements\r\n    reverseStack(stack);\r\n\r\n    // After reversing the remaining elements, insert the removed top element at the bottom\r\n    insertAtBottom(stack, top);\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\n    Time Complexity: O(N^2)\n    Space Complexity: O(N)\n\n    where 'N' is the total number of elements in the given stack.\n\"\"\"\n\nfrom typing import List\n\ndef insertAtBottom(stack: List[int], ele: int) -> None:\n    \"\"\"\n    Recursive function to insert an element at the bottom of the stack.\n    \"\"\"\n    if not stack:\n        # If the stack is empty, simply push the element.\n        stack.append(ele)\n        return\n\n    # If the stack is not empty, remove the top element.\n    top = stack.pop()\n\n    # Recursively call insertAtBottom to insert the element at the bottom.\n    insertAtBottom(stack, ele)\n\n    # Push the removed top element back onto the stack.\n    stack.append(top)\n\ndef reverseStack(stack: List[int]) -> None:\n    \"\"\"\n    Function to reverse the elements of the stack.\n    \"\"\"\n    if not stack:\n        # Base case: If the stack is empty, no elements to reverse.\n        return\n\n    # If the stack is not empty, remove the top element.\n    top = stack.pop()\n\n    # Recursively call reverseStack to reverse the remaining elements.\n    reverseStack(stack)\n\n    # After reversing the remaining elements, insert the removed top element at the bottom.\n    insertAtBottom(stack, top)\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N ^ 2)\r\n    Space Complexity: O(N)\r\n\r\n    Where N is the number of elements in Stack.\r\n*/\r\nimport java.util.Stack;\r\n\r\npublic class Solution {\r\n\r\n    // Function to insert an element at the bottom of the stack\r\n    static void insertAtBottom(Stack<Integer> stack, int ele) {\r\n        if (stack.isEmpty()) {\r\n            // If the stack is empty, simply push the element\r\n            stack.add(ele);\r\n            return;\r\n        }\r\n\r\n        // If the stack is not empty, remove the top element\r\n        int top = stack.pop();\r\n\r\n        // Recursively call insertAtBottom to insert the element at the bottom\r\n        insertAtBottom(stack, ele);\r\n\r\n        // Push the removed top element back onto the stack\r\n        stack.add(top);\r\n    }\r\n\r\n    // Function to reverse the elements of the stack\r\n    static void reverseStack(Stack<Integer> stack) {\r\n        if (stack.isEmpty()) {\r\n            // Base case: If the stack is empty, no elements to reverse\r\n            return;\r\n        }\r\n\r\n        // If the stack is not empty, remove the top element\r\n        int top = stack.pop();\r\n\r\n        // Recursively call reverseStack to reverse the remaining elements\r\n        reverseStack(stack);\r\n\r\n        // After reversing the remaining elements, insert the removed top element at the bottom\r\n        insertAtBottom(stack, top);\r\n    }\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}