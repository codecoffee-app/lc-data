{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12745,
            "title": "Reverse Substrings Between Each Pair of Parentheses",
            "titleSlug": "reverse-substrings-between-each-pair-of-parentheses_1473865",
            "content": "<h4 id=\"you-are-given-a-string-s-that-consists-of-lower-case-english-letters-and-brackets\">You are given a string \u2018S\u2019 that consists of lower case English letters and brackets.</h4>\n\n<h4 id=\"reverse-the-strings-in-each-pair-of-matching-parentheses-starting-from-the-innermost-one\">Reverse the strings in each pair of matching parentheses, starting from the innermost one.</h4>\n\n<h4 id=\"your-result-should-not-contain-any-brackets\">Your result should not contain any brackets.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Suppose the given string \u2018S\u2019 is \u2018((ng)ipm(ca))\u2019 then the resultant reversed string on removing the parentheses here is \u2018camping\u2019 which can be done in the following steps:\n\n-&gt; ((ng)ipm(ca))\n-&gt; (gnipmac)\n-&gt; camping\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a single integer \u2018T\u2019 denoting the number of test cases given. Then next \u2018T\u2019 lines follow:\n\nThe first line of each test case input contains the length \u2018N\u2019 of the given string input \u2018S\u2019.\n\nThe second line of each test case input contains the given string input with matching parentheses \u2018S\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For every test case, return the final reversed string after reversing successive strings in each pair of matching parentheses, starting from the innermost one without any brackets.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just Implement the given function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 100\n1 &lt;= \u2018N\u2019 &lt;= 1000\n\u2018S\u2019 contains only lowercase alphabets, \u2018(\u2018 and \u2018)\u2019.\n\nWhere \u2018T\u2019 is the number of test cases given for the problem,  \u2018N\u2019 is the length (\u2018S\u2019.length) of the given string \u2018S\u2019. It&#39;s guaranteed that all parentheses are balanced.\n\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n10\n(u(love)i)\n18\n(sajn(i(gn)ni)doc)\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>iloveu\ncodingninjas\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Test Case 1 :\n\nThe output \u201ciloveu\u201d is the required reversed string \u2018S\u2019 after removing the given set of parentheses in the string. Here, the substring &quot;love&quot; is reversed first, then the whole string is reversed, \n-&gt; (u(love)i) \n-&gt; (uevoli)\n-&gt; iloveu\n\n\nTest Case 2 :\n\nThe output \u201ccodingninjas\u201d is the required string \u2018S\u2019 after removing the given set of parentheses in the string. Here, the substring &quot;gn&quot; is reversed first, then \u201cingni\u201d, and finally, the whole string is reversed, \n\n-&gt; (sajn(i(gn)ni)doc) \n-&gt; (sajn(ingni)doc) \n-&gt; codingninjas\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n21\na(bcdefghijkl(mno)p)q\n13\n((ng)ipm(ca))\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>apmnolkjihgfedcbq\ncamping\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S' consisting of lowercase English letters and balanced parentheses, reverse the substrings enclosed within each pair of matching parentheses, starting from the innermost pair. Return the final string without any parentheses.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 1000 (Length of string 'S')",
                    "'S' contains only lowercase alphabets, '(' and ')'."
                ],
                "testcases": [
                    {
                        "input": "n = 10, s = \"(u(love)i)\"",
                        "output": "iloveu",
                        "explanation": "The substring \"love\" is reversed first, then the whole string is reversed. (u(love)i) -> (u evol) -> iloveu"
                    },
                    {
                        "input": "n = 18, s = \"(sajn(i(gn)ni)doc)\"",
                        "output": "codingninjas",
                        "explanation": "The substring \"gn\" is reversed first, then \"ingni\", and finally, the whole string is reversed. (sajn(i(gn)ni)doc) -> (sajn(ingni)doc) -> codingninjas"
                    },
                    {
                        "input": "n = 21, s = \"a(bcdefghijkl(mno)p)q\"",
                        "output": "apmnolkjihgfedcbq",
                        "explanation": "The substring \"mno\" is reversed first to \"onm\", then \"bcdefghijklonmp\" is reversed to \"pmnolkjihgfedcb\". a(pmnolkjihgfedcb)q becomes apmnolkjihgfedcbq"
                    },
                    {
                        "input": "n = 13, s = \"((ng)ipm(ca))\"",
                        "output": "camping",
                        "explanation": "The substring \"ng\" is reversed to \"gn\", \"ca\" is reversed to \"ac\". Then \"(gn)ipm(ac)\" becomes \"(gnipmac)\", finally reversing the string within the remaining parentheses yields \"camping\"."
                    },
                    {
                        "input": "n = 4, s = \"abcd\"",
                        "output": "abcd",
                        "explanation": "No parentheses, so the string remains unchanged."
                    },
                    {
                        "input": "n = 2, s = \"()\"",
                        "output": "",
                        "explanation": "Empty parentheses.  Reversing an empty string yields an empty string."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use strings to save different substrings in a pair of matched brackets and a stack to save those strings.</p>",
            "<p>Try to use a stack to keep track of the strings between parentheses that are to be reversed.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}