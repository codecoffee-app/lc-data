{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10648,
            "title": "Reverse The Array",
            "titleSlug": "reverse-the-array_1262298",
            "content": "<h4 id=\"given-an-array-list-arr-of-integers-and-a-position-m-you-have-to-reverse-the-array-after-that-position\">Given an array/list &#39;ARR&#39; of integers and a position \u2018M\u2019. You have to reverse the array after that position.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>We have an array ARR = {1, 2, 3, 4, 5, 6} and M = 3 , considering 0 \nbased indexing so the subarray {5, 6} will be reversed and our \noutput array will be {1, 2, 3, 4, 6, 5}.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The very first line of input contains an integer \u2018T\u2019 denoting the number of test cases. \n\nThe first line of every test case contains one integer \u2018N\u2019 where \u2018N\u2019 denotes the number of elements and an integer \u2018M\u2019 which denotes after which position the array has to be reversed.\n\nThe second line of every test case contains \u2018N\u2019 space-separated integers which denote the elements of input of array/list.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, return the required array.\n\nOutput for each test case is printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n\nConsider 0-based indexing of the array.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n0 &lt;= M &lt;= N &lt;= 5*10^4\n-10^9 &lt;= ARR[i] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n6 3\n1 2 3 4 5 6\n5 2\n10 9 8 7 6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 3 4 6 5\n10 9 8 6 7\n</code></pre>\n\n<h5 id=\"explanation-1\">Explanation 1:</h5>\n\n<pre><code>For the first test case, \nConsidering 0-based indexing we have M = 3 so the \nsubarray[M+1 \u2026 N-1] has to be reversed.\nTherefore the required output will be {1, 2, 3, 4, 6, 5}.\n\nFor the second test case, \nConsidering 0-based indexing we have M = 2 so the \nsubarray[M+1 \u2026 N-1] has to be reversed.\nTherefore the required output will be {10, 9, 8, 6, 7}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n7 3\n1 4 5 6 6 7 7 \n9 3\n10 4 5 2 3 6 1 3 6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code> 1 4 5 6 7 7 6\n 10 4 5 2 6 3 1 6 3 \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"hints\">Hints:</h5>\n\n<pre><code>1. Try to think by creating another array\n2. Try to think which elements are beign swapped.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2160,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array/list 'ARR' of integers and a position 'M', reverse the array after that position (0-based indexing). For example, if ARR = {1, 2, 3, 4, 5, 6} and M = 3, the subarray {5, 6} will be reversed, resulting in ARR = {1, 2, 3, 4, 6, 5}.",
                "constraints": [
                    "1 <= T <= 10",
                    "0 <= M <= N <= 5*10^4",
                    "-10^9 <= ARR[i] <= 10^9",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "6 3\n1 2 3 4 5 6",
                        "output": "1 2 3 4 6 5",
                        "explanation": "With M = 3, the subarray [M+1, ..., N-1] i.e., [4, 5] needs to be reversed. This results in swapping 5 and 6, producing the output {1, 2, 3, 4, 6, 5}."
                    },
                    {
                        "input": "5 2\n10 9 8 7 6",
                        "output": "10 9 8 6 7",
                        "explanation": "With M = 2, the subarray [M+1, ..., N-1] i.e., [3, 4] needs to be reversed. This results in swapping 7 and 6, producing the output {10, 9, 8, 6, 7}."
                    },
                    {
                        "input": "7 3\n1 4 5 6 6 7 7",
                        "output": "1 4 5 6 7 7 6",
                        "explanation": "With M = 3, the subarray [M+1, ..., N-1] i.e., [4, 5, 6] needs to be reversed. This results in reversing the portion {6, 6, 7, 7} to become {7, 7, 6} producing the output {1, 4, 5, 6, 7, 7, 6}."
                    },
                    {
                        "input": "9 3\n10 4 5 2 3 6 1 3 6",
                        "output": "10 4 5 2 6 3 1 6 3",
                        "explanation": "With M = 3, the subarray [M+1, ..., N-1] i.e., [4, 5, 6, 7, 8] needs to be reversed. Reversing elements starting from the 5th element i.e., index 4 results in the subarray {2, 3, 6, 1, 3, 6} reversed to {6, 3, 1, 6, 3, 2} producing the array {10, 4, 5, 2, 6, 3, 1, 6, 3}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity: O(N)\r\n    Space Complexity: O(1)\r\n\r\n    Where N is the number of elements in the array.\r\n*/\r\n\r\nvoid reverseArray(vector<int> &arr , int m) {\r\n\r\n\tint n = arr.size();\r\n\r\n\t// Declare two pointers.\r\n\tint i = m + 1;\r\n\tint j = n - 1;\r\n\r\n\t// Till the i<j condition holds swap the elements.\r\n\twhile (i < j) {\r\n\t\tswap(arr[i] , arr[j]);\r\n\t\ti++;\r\n\t\tj--;\r\n\t}\r\n\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time complexity: O(N)\n    Space Complexity: O(1)\n\n    Where N is the number of elements in the array.\n'''\n\ndef reverseArray(arr, m):\n    \n    n = len(arr)\n    \n    # Declare and initialize ArrayList named 'brr'.\n    i = m + 1\n    j = n - 1\n    \n    # Till the i<j condition holds swap the elements.\n    while i < j:\n        arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n        \n    return arr",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time complexity: O(N)\n    Space Complexity: O(1)\n\n    Where N is the number of elements in the array.\n*/\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Solution {\n\tpublic static void reverseArray(ArrayList<Integer> arr, int m) {\n\n\t\tint n = arr.size();\n\n\t\t// Declare two pointers.\n\t\tint i = m + 1;\n\t\tint j = n - 1;\n\n\t\t// Till the i<j condition holds swap the elements.\n\t\twhile (i < j) {\n\t\t\tCollections.swap(arr, i, j);\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\n\t}\n}\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}