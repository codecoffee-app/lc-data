{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10099,
            "title": "Reverse the first \u201cK\u201d elements of a queue",
            "titleSlug": "reverse-the-first-k-elements-of-a-queue_1164269",
            "content": "<h4 id=\"you-have-been-given-a-queue-and-an-integer-k-you-need-to-reverse-the-order-of-the-first-k-elements-of-the-queue\">You have been given a queue and an integer \u2018K\u2019. You need to reverse the order of the first \u2018K\u2019 elements of the queue.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The relative order of other elements should be maintained.\n</code></pre>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>If Q = [ 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 ]\nand \u2018K\u2019 = 4 \nthen the output will be\nQ = [ 40, 30, 20, 10, 50, 60, 70, 80, 90, 100]\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases are as follows.\n\nThe first line of each test case contains an integer \u2018N\u2019 which denotes the size of the queue.\n\nThe second line of each test case contains elements of the queue. The line consists of values of elements of the queue separated by a single space.\n\nThe third line of each test case contains an integer \u2018K\u2019 which denotes the number of elements to be reversed in the queue.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing space-separated integers denoting elements of the queue after reversing the first \u2018K\u2019 elements.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print anything, It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 100\n0 &lt;= DATA &lt;= 10 ^ 4\n0 &lt;= K &lt;= N\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the size of the queue, \u201cDATA\u201d is the value of the element of the queue and \u2018K\u2019 is the number of elements to be reversed.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n10\n10 20 30 40 50 60 70 80 90 100\n4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>40 30 20 10 50 60 70 80 90 100\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n10\n10 20 30 40 50 60 70 80 90 100\n3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>30 20 10 40 50 60 70 80 90 100 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a queue and an integer K, reverse the order of the first K elements of the queue. The relative order of the remaining elements should be maintained.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 100 (Size of the queue)",
                    "0 <= DATA <= 10^4 (Value of the element of the queue)",
                    "0 <= K <= N (Number of elements to be reversed)",
                    "Time limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "1\n10\n10 20 30 40 50 60 70 80 90 100\n4",
                        "output": "40 30 20 10 50 60 70 80 90 100",
                        "explanation": "The first 4 elements (10, 20, 30, 40) are reversed, resulting in (40, 30, 20, 10). The rest of the queue remains the same."
                    },
                    {
                        "input": "1\n10\n10 20 30 40 50 60 70 80 90 100\n3",
                        "output": "30 20 10 40 50 60 70 80 90 100",
                        "explanation": "The first 3 elements (10, 20, 30) are reversed, resulting in (30, 20, 10). The rest of the queue remains the same."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we use some data structure to reverse the order?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}