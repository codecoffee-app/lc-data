{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8040,
            "title": "Reverse the singly linked list",
            "titleSlug": "reverse-the-singly-linked-list_799897",
            "content": "<h4 id=\"given-a-singly-linked-list-of-integers-your-task-is-to-return-the-head-of-the-reversed-linked-list\">Given a singly linked list of integers. Your task is to return the head of the reversed linked list.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>The given linked list is 1 -&gt; 2 -&gt; 3 -&gt; 4-&gt; NULL. Then the reverse linked list is 4 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; NULL and the head of the reversed linked list will be 4.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up :</h5>\n\n<pre><code>Can you solve this problem in O(N) time and O(1) space complexity?\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases or queries to be processed. Then the test case follows.\n\nThe only line of each test case contains the elements of the singly linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the given linked list in reverse order in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n0 &lt;= L &lt;= 10^5\n1 &lt;= data &lt;= 10^9 and data != -1\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n1 2 3 4 5 6 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>6 5 4 3 2 1 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For the first test case,  After changing the next pointer of each node to the previous node, The given linked list is reversed.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n10 21 3 2 4 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4 2 3 21 10 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 506,
            "dislikes": "NA",
            "rephrased": {
                "body": "Reverse a singly linked list of integers and return the head of the reversed list. For example, if the input list is 1 -> 2 -> 3 -> 4 -> NULL, the reversed list should be 4 -> 3 -> 2 -> 1 -> NULL, and the returned head should be 4. Solve this problem in O(N) time and O(1) space complexity.",
                "constraints": [
                    "1 <= T <= 5 (where T is the number of test cases)",
                    "0 <= L <= 10^5 (where L is the length of the linked list)",
                    "1 <= data <= 10^9 and data != -1 (where data is the value of a node in the linked list)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 5 6 -1",
                        "output": "6 5 4 3 2 1 -1",
                        "explanation": "The input list 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> NULL is reversed to become 6 -> 5 -> 4 -> 3 -> 2 -> 1 -> NULL."
                    },
                    {
                        "input": "10 21 3 2 4 -1",
                        "output": "4 2 3 21 10 -1",
                        "explanation": "The input list 10 -> 21 -> 3 -> 2 -> 4 -> NULL is reversed to become 4 -> 2 -> 3 -> 21 -> 10 -> NULL."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to reverse the Linked List node using recursion by finding the last node.</p>",
            "<p>Try to store the Linked List node in the data structure.</p>",
            "<p>Think of a solution to optimise the brute force approach by finding the last node in each recursion call in constant time.</p>",
            "<p>Think of to change the next pointer while iterating the Linked List</p>",
            "<p>Think how to change pointers which will reverse the direction of linked list.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity:O(N)\r\n    Space Complexity:O(1)\r\n\r\n    Where N is the total nodes in Linked List\r\n*/\r\n\r\nLinkedListNode<int> *reverseLinkedList(LinkedListNode<int> *head) {\r\n\r\n    if (head == NULL || head->next == NULL) {\r\n        return head;\r\n    }\r\n\r\n    LinkedListNode<int> *pre = NULL;\r\n    while (head != 0) {\r\n\r\n        pre = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head->next);\r\n        head->next = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head->next); \r\n        pre = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head->next);       \r\n \r\n        pre = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head);\r\n        head = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head);\r\n        pre = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head);\r\n\r\n    }\r\n\r\n    return pre;\r\n\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity:O(N)\r\n    Space Complexity:O(1)\r\n\r\n    Where N is the total nodes in Linked List\r\n*/\r\n\r\nLinkedListNode<int> *reverseLinkedList(LinkedListNode<int> *head) {\r\n\r\n    if (head == NULL || head->next == NULL) {\r\n        return head;\r\n    }\r\n\r\n    LinkedListNode<int> *pre = NULL;\r\n    while (head != 0) {\r\n\r\n        pre = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head->next);\r\n        head->next = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head->next); \r\n        pre = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head->next);       \r\n \r\n        pre = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head);\r\n        head = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head);\r\n        pre = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head);\r\n\r\n    }\r\n\r\n    return pre;\r\n\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "/*\r\n    Time Complexity:O(N)\r\n    Space Complexity:O(1)\r\n\r\n    Where N is the total nodes in Linked List\r\n*/\r\n\r\nLinkedListNode<int> *reverseLinkedList(LinkedListNode<int> *head) {\r\n\r\n    if (head == NULL || head->next == NULL) {\r\n        return head;\r\n    }\r\n\r\n    LinkedListNode<int> *pre = NULL;\r\n    while (head != 0) {\r\n\r\n        pre = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head->next);\r\n        head->next = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head->next); \r\n        pre = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head->next);       \r\n \r\n        pre = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head);\r\n        head = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head);\r\n        pre = (LinkedListNode<int>*) ((uintptr_t) pre ^ (uintptr_t) head);\r\n\r\n    }\r\n\r\n    return pre;\r\n\r\n}",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}