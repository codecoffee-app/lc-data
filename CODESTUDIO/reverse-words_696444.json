{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7540,
            "title": "Reverse Words",
            "titleSlug": "reverse-words_696444",
            "content": "<h4 id=\"you-are-given-a-string-str-of-length-n\">You are given a string <em><strong>&#39;str&#39;</strong></em> of length <em><strong>&#39;N&#39;</strong></em>.</h4>\n\n<p><br></p>\n\n<h4 id=\"your-task-is-to-reverse-the-original-string-word-by-word\">Your task is to reverse the original string word by word.</h4>\n\n<p><br></p>\n\n<h4 id=\"there-can-be-multiple-spaces-between-two-words-and-there-can-be-leading-or-trailing-spaces-but-in-the-output-reversed-string-you-need-to-put-a-single-space-between-two-words-and-your-reversed-string-should-not-contain-leading-or-trailing-spaces\">There can be multiple spaces between two words and there can be leading or trailing spaces but in the output reversed string you need to put a single space between two words, and your reversed string should not contain leading or trailing spaces.</h4>\n\n<p><br></p>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>If the given input string is &quot;Welcome to Coding Ninjas&quot;, then you should return &quot;Ninjas Coding to Welcome&quot; as the reversed string has only a single space between two words and there is no leading or trailing space.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a string that you need to reverse word by word.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print the reversed string such that there should be only one space between two strings and there should not be any trailing space.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Do not print anything. It has already been taken care of.\n\nIf the string data type is immutable in your language, consider using a mutable data type as an alternative.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>Welcome to Coding Ninjas\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>Ninjas Coding to Welcome\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>You need to reduce multiple spaces between two words to a single space in the reversed string and observe how the multiple spaces, leading and trailing spaces have been removed.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>I am a star\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>star a am I\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>Your reversed string should not contain leading or trailing spaces.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>0 &lt;= N &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"follow-up\">Follow-up:</h5>\n\n<pre><code>If the string data type is mutable in your language, can you solve it in place with O(1) extra space?\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 429,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'str' of length 'N', reverse the order of words in the string. The reversed string should have the following properties:\n\n*   Only a single space should separate any two words.\n*   There should be no leading or trailing spaces.",
                "constraints": [
                    "0 <= N <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "Welcome to Coding Ninjas",
                        "output": "Ninjas Coding to Welcome",
                        "explanation": "The input string 'Welcome to Coding Ninjas' is reversed word by word.  Multiple spaces between words are reduced to a single space, and any leading or trailing spaces are removed."
                    },
                    {
                        "input": "I am a star",
                        "output": "star a am I",
                        "explanation": "The input string 'I am a star' is reversed word by word, ensuring no leading or trailing spaces are present in the output."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Reverse the string word by word and add it in the front of the answer string.</p>",
            "<p>Try to simulate the process in reverse order.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity  = O(N)\r\n    Space Complexity = O(N)\r\n\r\n    Where N is the length of the string.\r\n*/\r\n\r\nstring reverseString(string &str)\r\n{\r\n    \r\n    // If the string is \" \" then return \"\".\r\n    if(str == \"\" || str == \" \")\r\n    {\r\n        return \"\";\r\n    }\r\n\r\n    string ans;\r\n\r\n    int start = str.length() - 1;\r\n\r\n    while(start >= 0)\r\n    {\r\n        \r\n        // Skip multiple spaces.\r\n        if(str[start] == ' ')\r\n        {\r\n            start--;\r\n        }\r\n        else\r\n        {\r\n            \r\n            // Add space between words.\r\n            if(ans.length() > 0)\r\n            {\r\n                ans.push_back(' ');\r\n            }\r\n\r\n            int j = start;\r\n\r\n            while(j >= 0 && str[j] != ' ')\r\n            {\r\n                j--;\r\n            }\r\n\r\n            // Add current word to ans.\r\n            ans.append(str.substr(j+1, start-j));\r\n            start = j;\r\n        }\r\n    }\r\n\r\n    return ans;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity  = O(N)\n    Space Complexity = O(N)\n\n    Where N is the length of the string.\n'''\n\ndef reverseString(str: str) -> str:\n    \n    # if the string is \" \" then return \"\".\n    if(str == \"\" or str == \" \"):\n        return \"\"\n    ans = ''\n\n    start = len(str) - 1\n\n    while(start >= 0):\n        \n        # Skip multiple spaces.\n        if(str[start] == ' '):\n            start-=1\n        else:\n            \n            # Add space between words.\n            if(len(ans) > 0):\n                ans += (' ')\n\n            j = start\n\n            while(j >= 0 and str[j] != ' '):\n                j-=1\n\n            # add current word to ans.\n            ans +=  (str[j+1: j+1+start-j])\n            start = j\n\n    return ans",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity  = O(N)\r\n    Space Complexity = O(N)\r\n   \r\n    Where N is the length of the string\r\n*/\r\n\r\npublic class Solution \r\n{\r\n\r\n\tpublic static String reverseString(String str) \r\n\t{\r\n\r\n\t\tif (str == null || str.length() == 0) \r\n\t\t{\r\n\t\t\treturn str;\r\n\t\t}\r\n\r\n\t\tStringBuilder ans = new StringBuilder();\r\n\r\n\t\t// if the string is \" \" then return \"\"\r\n\t\tif (str.length() == 1 && str.charAt(0) == ' ') \r\n\t\t{\r\n\t\t\treturn ans.toString();\r\n\t\t}\r\n\r\n\t\tint start = str.length() - 1;\r\n\r\n\t\twhile (start >= 0) \r\n\t\t{\r\n\r\n\t\t\t// Skip multiple spaces\r\n\t\t\tif (str.charAt(start) == ' ') \r\n\t\t\t{\r\n\t\t\t\tstart--;\r\n\t\t\t}\r\n\r\n\t\t\telse \r\n\t\t\t{\r\n\r\n\t\t\t\t// Add space between words\r\n\t\t\t\tif (ans.length() > 0) \r\n\t\t\t\t{\r\n\t\t\t\t\tans.append(\" \");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tint j = start;\r\n\r\n\t\t\t\t// Loop for extracting word\r\n\t\t\t\twhile (j >= 0 && str.charAt(j) != ' ') \r\n\t\t\t\t{\r\n\t\t\t\t\tj--;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// add current word to ans\r\n\t\t\t\tans.append(str.substring(j + 1, start + 1));\r\n\t\t\t\tstart = j;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn ans.toString();\r\n\t}\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}