{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7840,
            "title": "Right View",
            "titleSlug": "right-view_764605",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-integers\">You have been given a Binary Tree of integers.</h4>\n\n<h4 id=\"your-task-is-to-print-the-right-view-of-it\">Your task is to print the Right view of it.</h4>\n\n<h4 id=\"the-right-view-of-a-binary-tree-is-a-set-of-nodes-visible-when-the-tree-is-viewed-from-the-right-side-and-the-nodes-are-printed-from-top-to-bottom-order\">The right view of a Binary Tree is a set of nodes visible when the tree is viewed from the Right side and the nodes are printed from top to bottom order.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe only line of input contains the elements of the tree in the level order form separated by a single space.\n\nIf any node does not have left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case,  print the right view of the tree.\n\nOutput for every test case will be in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^5\n-10^9 &lt;= data &lt;= 10^9\n\nWhere &#39;N&#39; is the number of nodes in the tree and &#39;data&#39; is the value of a node in the given tree.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n2 35 10 2 3 5 2 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2 10 2\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-1\">Explanation of The Sample Input 1:</h5>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/0000000000000614.PNG\" alt=\"Sample Input 1\"></p>\n\n<pre><code>The right view of the tree contains all the extreme-right elements in each level of the tree, including the head of the tree.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n1 2 -1 3 -1 4 -1 5 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 2 3 4 5\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-2\">Explanation of The Sample Input 2 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/image3-5212.png\" alt=\"Sample Input 2\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 51,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of integers, your task is to print its right view. The right view of a binary tree consists of the nodes visible when the tree is viewed from the right side, ordered from top to bottom.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^5",
                    "-10^9 <= data <= 10^9",
                    "Where 'N' is the number of nodes in the tree and 'data' is the value of a node in the given tree.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n2 35 10 2 3 5 2 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "2 10 2",
                        "explanation": "The right view of the tree includes the rightmost node at each level. For the given input tree, these nodes are 2 (root), 10 (right child of 35), and 2 (right child of 5)."
                    },
                    {
                        "input": "1\n1 2 -1 3 -1 4 -1 5 -1 -1 -1",
                        "output": "1 2 3 4 5",
                        "explanation": "In this case, the right view consists of all the nodes as each level has only one rightmost node."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Do level order traversal and print the last node in every level.</p>",
            "<p>Do level order traversal and print the rightmost node at every level.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}