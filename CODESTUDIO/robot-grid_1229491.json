{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10475,
            "title": "Robot Grid",
            "titleSlug": "robot-grid_1229491",
            "content": "<h4 id=\"consider-a-grid-consisting-of-n-rows-and-m-columns-rows-are-numbered-from-0-to-n-1-and-columns-are-numbered-from-0-to-m-1-the-cell-at-the-intersection-of-the-ith-row-and-the-jth-column-is-represented-as-i-j\">Consider a grid consisting of \u2018N\u2019 rows and \u2018M\u2019 columns. Rows are numbered from 0 to \u2018N\u2019-1 and columns are numbered from 0 to \u2018M\u2019-1.  The cell at the intersection of the ith row and the jth column is represented as (i, j).</h4>\n\n<h4 id=\"initially-a-robot-is-standing-at-0-0-the-robot-can-only-move-in-two-directions-right-and-down-i-e-if-the-robot-is-at-r-c-then-it-can-move-to-r-c-1-or-r-1-c-some-cells-in-the-grid-are-blocked-i-e-robot-cannot-step-on-them\">Initially a robot is standing at (0, 0). The robot can only move in two directions, \u2018Right\u2019 and \u2018Down\u2019. I.e if the robot is at  (r, c), then it can move to (r, c+1) or (r+1, c).  Some cells in the grid are blocked i.e robot cannot step on them.</h4>\n\n<h4 id=\"you-are-given-a-matrix-grid-of-size-n-m-where-grid-i-j-1-if-cell-i-j-is-blocked-otherwise-cell-i-j-0-your-task-is-to-find-the-lexicographically-smallest-path-for-the-robot-from-0-0-to-n-1-m-1-a-path-is-represented-as-a-list-of-cells-in-the-same-order-in-which-the-robot-should-visit-see-the-example-for-more-clarity\">You are given a matrix \u2018GRID[][]\u2019 of size N*M,  where GRID[i][j] = 1 if cell (i, j) is blocked otherwise cell (i, j) = 0. Your task is to find the lexicographically smallest path for the robot from (0, 0) to (N-1, M-1).  A path is represented as a list of cells in the same order in which the robot should visit.  See the example for more clarity.</h4>\n\n<h4 id=\"note\">Note</h4>\n\n<pre><code>1. In lexicographical order cell (r1, c1) comes before cell (r2, c2) if either r1 &lt; r2 or (r1 = r2 and c1 &lt; c2).\n\n2. If there is no possible path,  then return a list with a single element [-1, -1].\n\n3. It is guaranteed that cell (0, 0) is not blocked.  \n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Consider the following  3*4 grid -:\n       [ \n         [0 0 0 0]\n         [1 1 0 0]\n         [0 1 1 0]\n       ] \nThere are two possible paths to reach cell (2, 3) from (0, 0).\nPath-1 -&gt;  [[0, 0], [0, 1], [0, 2], [0, 3], [1, 3], [2, 3]]\nPath-2 -&gt;  [[0, 0], [0, 1], [0, 2], [1, 2], [1, 3], [2, 3]]\nClearly, Path-1 is lexicographically smaller than Path-2.\nThus  we should return list  [[0, 0], [0, 1], [0, 2], [0, 3], [1, 3], [2, 3]]\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. then \u2018T\u2019 test cases follow.\n\nThe first line contains two space-separated integers \u2018N\u2019, \u2018M\u2019 representing the number of rows and columns respectively.\n\nThen next \u2018N\u2019 lines follow in each case, Each of these \u2018N\u2019 lines consists of \u2018M\u2019 space-separated integers. These \u2018N\u2019 lines represent the \u2018grid\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, if there exists a path, then return a 2d array of N+M-1 rows which has two integers, representing the row and column of cells in the lexicographically smallest path. \nOtherwise, return a 2d array consisting of -1 -1.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^2\n1 &lt;= M &lt;= 10^2\n0 &lt;= GRID[i][j] &lt;= 1\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 2\n0 1\n1 1\n3 4\n0 0 0 0\n1 1 0 0 \n0 1 1 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>-1 -1\n 0 0\n 0 1\n 0 2\n 0 3\n 1 3\n 2 3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nAll cells except (0, 0) are blocked, so it is not possible for the robot to reach the cell (1, 1).    \n\nTest case 2:\nSee the problem statement for an explanation.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 1\n0\n2 3\n0 0 1\n1 0 1\n1 1 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0 0\n-1 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Consider a grid of N rows and M columns, indexed from 0. A robot starts at (0, 0) and can only move right (r, c+1) or down (r+1, c). Given a grid where GRID[i][j] = 1 if the cell (i, j) is blocked and 0 otherwise, find the lexicographically smallest path from (0, 0) to (N-1, M-1). The path is a list of cells in the order visited. Note that lexicographical order means (r1, c1) comes before (r2, c2) if r1 < r2 or (r1 == r2 and c1 < c2).",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 100",
                    "1 <= M <= 100",
                    "0 <= GRID[i][j] <= 1",
                    "Time limit: 1 sec",
                    "It is guaranteed that cell (0, 0) is not blocked."
                ],
                "testcases": [
                    {
                        "input": "2\n2 2\n0 1\n1 1\n3 4\n0 0 0 0\n1 1 0 0\n0 1 1 0",
                        "output": "-1 -1\n0 0\n0 1\n0 2\n0 3\n1 3\n2 3",
                        "explanation": "Test case 1: All cells except (0, 0) are blocked, making it impossible to reach (1, 1).\nTest case 2: The lexicographically smallest path in the provided 3x4 grid is [[0, 0], [0, 1], [0, 2], [0, 3], [1, 3], [2, 3]]."
                    },
                    {
                        "input": "2\n1 1\n0\n2 3\n0 0 1\n1 0 1",
                        "output": "0 0\n-1 -1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Incrementally find the next possible move of the robot that can lead to a valid path, if no such move exists then backtrack to previous moves.</p>",
            "<p>Use memoization to avoid repeated work.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}