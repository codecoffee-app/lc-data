{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8057,
            "title": "Rod cutting problem",
            "titleSlug": "rod-cutting-problem_800284",
            "content": "<h4 id=\"given-a-rod-of-length-n-units-the-rod-can-be-cut-into-different-sizes-and-each-size-has-a-cost-associated-with-it-determine-the-maximum-cost-obtained-by-cutting-the-rod-and-selling-its-pieces\">Given a rod of length \u2018N\u2019 units. The rod can be cut into different sizes and each size has a cost associated with it. Determine the maximum cost obtained by cutting the rod and selling its pieces.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The sizes will range from 1 to \u2018N\u2019 and will be integers.\n\n2. The sum of the pieces cut should be equal to \u2018N\u2019.\n\n3. Consider 1-based indexing.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe next 2 * T lines represent the \u2018T\u2019 test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the length of the rod.\n\nThe second line of each test case contains a vector \u2019A\u2019, of size \u2018N\u2019 representing the cost of different lengths, where each index of the array is the sub-length and the element at that index is the cost for that sub-length.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Since 1-based indexing is considered, the 0th index of the vector will represent sub-length 1 of the rod. Hence the (N - 1)th index would represent the cost for the length \u2018N\u2019. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, print a single line that contains a single integer which is the maximum cost obtained by selling the pieces.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 100\n1 &lt;= A[i] &lt;= 100\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 denotes the length of the rod, and A[i] is the cost of sub-length.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\n2 5 7 8 10\n8\n3 5 8 9 10 17 17 20\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>12\n24\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>Test case 1:\n\nAll possible partitions are:\n1,1,1,1,1           max_cost=(2+2+2+2+2)=10\n1,1,1,2             max_cost=(2+2+2+5)=11\n1,1,3               max_cost=(2+2+7)=11\n1,4                 max_cost=(2+8)=10\n5                   max_cost=(10)=10\n2,3                 max_cost=(5+7)=12\n1,2,2               max _cost=(1+5+5)=12    \n\nClearly, if we cut the rod into lengths 1,2,2, or 2,3, we get the maximum cost which is 12.\n\n\nTest case 2:\n\nPossible partitions are:\n1,1,1,1,1,1,1,1         max_cost=(3+3+3+3+3+3+3+3)=24\n1,1,1,1,1,1,2           max_cost=(3+3+3+3+3+3+5)=23\n1,1,1,1,2,2             max_cost=(3+3+3+3+5+5)=22\nand so on\u2026.\n\nIf we cut the rod into 8 pieces of length 1, for each piece 3 adds up to the cost. Hence for 8 pieces, we get 8*3 = 24.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n6\n3 5 6 7 10 12\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>18\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 327,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a rod of length 'n', determine the maximum cost that can be obtained by cutting the rod into smaller pieces and selling them. You are provided with an array 'price' where price[i] represents the cost of a piece of length (i+1).  The sum of the lengths of the cut pieces must equal 'n'.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 100",
                    "1 <= A[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "n = 5, price = [2, 5, 7, 8, 10]",
                        "output": "12",
                        "explanation": "The optimal way to cut the rod is into lengths 2 and 3, resulting in a maximum cost of 5 + 7 = 12."
                    },
                    {
                        "input": "n = 8, price = [3, 5, 8, 9, 10, 17, 17, 20]",
                        "output": "24",
                        "explanation": "The optimal way to cut the rod is into 8 pieces of length 1, resulting in a maximum cost of 8 * 3 = 24."
                    },
                    {
                        "input": "n = 6, price = [3, 5, 6, 7, 10, 12]",
                        "output": "18",
                        "explanation": "The optimal way to cut the rod is into 6 pieces of length 1, resulting in 6 * 3 = 18. Alternatively 3 pieces of length 2, resulting in 3 * 5 = 15. Cutting one length of 6 results in 12. Lastly, Two pieces of length 3 result in 6 + 6 = 12. And if we cut one length of 2 and a length of 4, we have 5 + 7 = 12. Now, if we cut it into pieces of length 2 (x2) and length 1 (x2) then we have 5 + 5 + 3 + 3 = 16. Two pieces of length 3 result in 12.  Cut into length 1 (x4) and length 2(x1), which results in 3 + 3 + 3 + 3 + 5 = 17. Cut into length 1(x6), which results in 3 + 3 + 3 + 3 + 3 + 3 = 18."
                    },
                    {
                        "input": "n = 4, price = [1, 5, 8, 9]",
                        "output": "20",
                        "explanation": "Optimal is to cut it into four pieces of length 1 i.e. 1*4 = 4. Then one of length 1 and the other of length 3 gives 1+8 = 9. Length 2 x2 gives 5*2 = 10. Length 1 x2 and Length 2 x1 gives 1 + 1 + 5 = 7. Length 4 gives 9. If Length is cut into one Length 2 and two Length 1, 5 + 1+ 1= 7. if Length is cut into one Length 3 and one Length 1, 8+1 = 9. Length can be cut into four pieces of length 1, and each gives 5, 4*5 = 20"
                    },
                    {
                        "input": "n = 1, price = [1]",
                        "output": "1",
                        "explanation": "Only one way to cut the rod, which is no cutting and sell the whole rod."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find all the possible partitioning of the rod.</p>",
            "<p>Can we think of the knapsack problem and optimize the recursive solution using extra space?.</p>",
            "<p>Optimize the recursive solution by using extra space.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity = O(N ^ 2)\r\n    Space complexity = O(N)\r\n\r\n    Where 'N' is the length of the rod.\r\n*/\r\n\r\nint cutRod(vector<int> &price, int n)\r\n{\r\n    int cost[n + 1];\r\n    cost[0] = 0;\r\n    int i, j;\r\n\r\n    for (i = 1; i <= n; i++)\r\n    {\r\n        int maxCost = INT_MIN;\r\n\r\n        // Build the table in bottom up manner.\r\n        for (j = 0; j < i; j++)\r\n        {\r\n            maxCost = max(maxCost, price[j] + cost[i - j - 1]);\r\n        }\r\n\r\n        // Contains maximum cost obtained from the rod of length 'i'.\r\n        cost[i] = maxCost;\r\n    }\r\n\r\n    // Last entry conatins maximum cost obtained from the rod of length 'n'.\r\n    return cost[n];\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time complexity = O(N ^ 2)\n    Space complexity = O(N)\n\n    Where 'N' is the length of the rod.\n*/\n\npublic class Solution {\n\tpublic static int cutRod(int price[], int n) {\n\n\t\tint cost[] = new int[n + 1];\n\t\tcost[0] = 0;\n\t\tint i, j;\n\n\t\tfor (i = 1; i <= n; i++) {\n\t\t\tint maxCost = Integer.MIN_VALUE;\n\n\t\t\tfor (j = 0; j < i; j++) {\n\t\t\t\t\n\t\t\t\t// Build the table in bottom up manner.\n\t\t\t\tmaxCost = Math.max(maxCost, price[j] + cost[i - j - 1]);\n\t\t\t}\n\n\t\t\t// Contains maximum cost obtained from the rod of length 'i'.\n\t\t\tcost[i] = maxCost;\n\t\t}\n\n\t\t// Last entry contains maximum cost obtained from the rod of length 'n'.\n\t\treturn cost[n];\n\t}\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity : O(N ^ 2)\r\n    Space Complexity : O(N)\r\n\r\n    Where 'N' is the length of the rod.\r\n'''\r\n\r\nfrom sys import stdin\r\nimport sys\r\n\r\ndef cutRod(price, n):\r\n\r\n    cost = [0 for x in range(n+1)]\r\n    cost[0] = 0\r\n\r\n    # Build the table in bottom up manner.\r\n    for i in range(1, n+1):\r\n        maxCost = -sys.maxsize-1\r\n\r\n        for j in range(i):\r\n            maxCost = max(maxCost, price[j] + cost[i - j - 1])\r\n\r\n        # Contains maximum cost obtained from the rod of length 'i'.\r\n        cost[i] = maxCost\r\n\r\n    # Last entry conatins maximum cost obtained from the rod of length 'n'.\r\n    return cost[n]\r\n\r\n\r\n# Taking input using fast I/O.\r\ndef takeInput():\r\n    n = int(input())\r\n\r\n    price = list(map(int, input().strip().split(\" \")))\r\n\r\n    return price, n\r\n\r\n# Main.\r\nt = int(input())\r\nwhile t:\r\n    price, n = takeInput()\r\n    print(cutRod(price, n))\r\n    t = t-1",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}