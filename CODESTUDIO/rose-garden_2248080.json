{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14780,
            "title": "Rose Garden",
            "titleSlug": "rose-garden_2248080",
            "content": "<h4 id=\"you-are-given-n-roses-and-you-are-also-given-an-array-arr-where-arr-i-denotes-that-the-ith-rose-will-bloom-on-the-arr-i-th-day\">You are given <em><strong>&#39;n&#39;</strong></em>  roses and you are also given an array <em><strong>&#39;arr&#39;</strong></em>  where <em><strong>&#39;arr[i]&#39;</strong></em>  denotes that the <em><strong>&#39;i<sup>th</sup>&#39;</strong></em>  rose will bloom on the &#39;arr[i]<sup>th</sup>&#39; day.</h4>\n\n<p><br></p>\n\n<h4 id=\"you-can-only-pick-already-bloomed-roses-that-are-adjacent-to-make-a-bouquet-you-are-also-told-that-you-require-exactly-k-adjacent-bloomed-roses-to-make-a-single-bouquet\">You can only pick already bloomed roses that are adjacent to make a bouquet. You are also told that you require exactly <em><strong>&#39;k&#39;</strong></em> adjacent bloomed roses to make a single bouquet.</h4>\n\n<p><br></p>\n\n<h4 id=\"find-the-minimum-number-of-days-required-to-make-at-least-m-bouquets-each-containing-k-roses-return-1-if-it-is-not-possible\">Find the minimum number of days required to make at least <em><strong>&#39;m&#39;</strong></em> bouquets each containing &#39;k&#39; roses. Return <em><strong>-1</strong></em> if it is not possible.</h4>\n\n<p><br></p>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Input: n = 9,  arr = [ 1, 2, 1, 2, 7, 2, 2, 3, 1 ], k = 3, m = 2\n\nOutput: 3. \n\nExplanation: This is because on the 3rd day: all the roses with &#39;arr[i]&#39; less than equal to 3 have already bloomed, this means every rose except the 5th rose has bloomed. Now we can form the first bouquet from the first three roses and the second bouquet from the last three roses.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018n\u2019 denoting the roses.\n\nThe second line contains the n integers \u2018arr[i]\u2019 denoting the number of days required by the ith rose to bloom.\n\nThe third line contains two integers \u2018k\u2019 and \u2018m\u2019 denoting the number on the number of roses in a bouquet and the number of bouquets required respectively.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print a single integer denoting the minimum number of days required.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>9\n1 2 1 2 7 2 2 3 1\n3 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>We will return 3, because:\nAll the roses with &#39;arr[i]&#39; less than equal to 3 have already bloomed after 3 days, this means every rose except the 5th rose has bloomed. Now we can form the first bouquet from the first three roses and the second bouquet from the last three roses.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>4\n1 1 1 1\n1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= n &lt;= 10^5\n1 &lt;= arr[i] &lt;= 10^9\n1 &lt;= k &lt;= n\n1 &lt;= m &lt;= 10^6\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 186,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'n' roses and an array 'arr' where arr[i] represents the day the i-th rose blooms, determine the minimum number of days required to form 'm' bouquets. Each bouquet must consist of 'k' adjacent, already-bloomed roses. Return -1 if forming the required bouquets is impossible.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= arr[i] <= 10^9",
                    "1 <= k <= n",
                    "1 <= m <= 10^6",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "9\n1 2 1 2 7 2 2 3 1\n3 2",
                        "output": "3",
                        "explanation": "After 3 days, the roses that bloom on or before day 3 have bloomed (1, 2, 1, 2, 2, 2, 3, 1). We can form one bouquet with the first three roses and another with the last three roses."
                    },
                    {
                        "input": "4\n1 1 1 1\n1 1",
                        "output": "1",
                        "explanation": "All roses bloom on day 1. We need 1 bouquet of size 1, and we have 4 roses, so we can form it on day 1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Constraints are small, greedily find the minimum number of days required.</p>",
            "<p>Try to think if there exists a monotonic function so that we can calculate the minimum number of days efficiently?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O( n * log ( d ) )\r\n    Space Complexity: O( 1 )\r\n\r\n    where n denotes the number of roses and d denotes the maximum value of the array.\r\n*/\r\n\r\nint roseGarden(vector<int> arr, int k, int m)\r\n{\r\n    int n = arr.size();\r\n    if (1ll * k * m > n)\r\n    {\r\n        return -1;\r\n    }\r\n    int low = 0, high = 1000000000, days;\r\n    while (low <= high)\r\n    {\r\n        int mid = (low + high) / 2;\r\n        int cntR = 0, cntB = 0;\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            if (arr[i] <= mid)\r\n            {\r\n                cntR++;\r\n            }\r\n            else\r\n            {\r\n                cntR = 0;\r\n            }\r\n            if (cntR == k)\r\n            {\r\n                cntB++;\r\n                cntR = 0;\r\n            }\r\n        }\r\n        if (cntB >= m)\r\n        {\r\n            days = mid;\r\n            high = mid - 1;\r\n        }\r\n        else\r\n        {\r\n            low = mid + 1;\r\n        }\r\n    }\r\n    return days;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n\tTime complexity: O(N)\r\n\tSpace complexity: O(N)\r\n\r\n\twhere N is the number of nodes in the given binary trees\r\n\r\n */\r\n\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\n\r\npublic class Solution {\r\n\r\n\t// Given two trees, return true if they are mirror of each other\r\n\tpublic static boolean areMirror(BinaryTreeNode root1, BinaryTreeNode root2) {\r\n\t\t// If both are null, then are mirror\r\n\t\tif (root1 == null && root2 == null) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// If only one is null, then not mirror\r\n\t\tif (root1 == null || root2 == null) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tQueue<BinaryTreeNode> q = new LinkedList<>();\r\n\r\n\t\t// Push root of both trees in queue\r\n\t\tq.add(root1);\r\n\t\tq.add(root2);\r\n\r\n\t\twhile (q.size() > 0) {\r\n\r\n\t\t\t// Remove two nodes from queue, to\r\n\t\t\t// check if they are identical\r\n\t\t\troot1 = q.peek();\r\n\t\t\tq.remove();\r\n\r\n\t\t\troot2 = q.peek();\r\n\t\t\tq.remove();\r\n\r\n\t\t\t// If data value of both nodes is not same, then not mirror\r\n\t\t\tif (root1.data != root2.data) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Push left child of root1 node and right child\r\n\t\t\t// of root2 node into queue if both are not null\r\n\t\t\tif (root1.left != null && root2.right != null) {\r\n\t\t\t\tq.add(root1.left);\r\n\t\t\t\tq.add(root2.right);\r\n\t\t\t}\r\n\r\n\t\t\t// If any one of the nodes is null, then not mirror\r\n\t\t\telse if (root1.left != null || root2.right != null) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Push right child of root1 node and left child\r\n\t\t\t// of root2 node into queue if both are not null\r\n\t\t\tif (root1.right != null && root2.left != null) {\r\n\t\t\t\tq.add(root1.right);\r\n\t\t\t\tq.add(root2.left);\r\n\t\t\t}\r\n\r\n\t\t\t// If any one of the nodes is null, then not mirror\r\n\t\t\telse if (root1.right != null || root2.left != null) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\nTime Complexity: O(N)\r\nSpace Complexity: O(1)\r\n\r\nwhere N denote the size of the array to be returned\r\n'''\r\n\r\n\r\ndef roseGarden(arr, r, b):\r\n    n=len(arr)\r\n    \r\n    if r * b > n:\r\n        return -1\r\n\r\n    low = 0\r\n    high = 1000000000\r\n    days = 0\r\n\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        cntR, cntB = 0, 0\r\n        for i in range(n):\r\n            if arr[i] <= mid:\r\n                cntR += 1\r\n            else:\r\n                cntR = 0\r\n\r\n            if cntR == r:\r\n                cntB += 1\r\n                cntR = 0\r\n\r\n        if cntB >= b:\r\n            days = mid\r\n            high = mid - 1\r\n\r\n        else:\r\n            low = mid + 1\r\n\r\n    return days",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}