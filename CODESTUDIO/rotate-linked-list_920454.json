{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8867,
            "title": "Rotate Linked List",
            "titleSlug": "rotate-linked-list_920454",
            "content": "<h4 id=\"you-are-given-a-linked-list-having-n-nodes-and-an-integer-k\">You are given a linked list having <strong><em>\u2018n\u2019</em></strong> nodes and an integer <strong><em>\u2018k\u2019</em></strong>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"you-have-to-rotate-the-linked-list-to-the-right-by-k-positions\">You have to rotate the linked list to the right by \u2018k\u2019 positions .</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Input: linked list = [1 2 3 4] , k = 2\n\nOutput: 3 4 1 2\n\nExplanation:\nWe have to rotate the given linked list to the right 2 times. After rotating it to the right once it becomes 4-&gt;1-&gt;2-&gt;3. After rotating it to the right again, it becomes 3-&gt;4-&gt;1-&gt;2. \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains a single integer &#39;n&#39;, denoting the number of nodes in the linked list.\n\nThe next line contains &#39;n&#39; space-separated integers, denoting the elements of the linked list.\n\nThe next line contains an integer \u2018k\u2019, representing the number of positions up to the given linked list that has to rotate.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Return the head of the linked list after rotating it.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. Elements of your returned linked list will be printed in a single line.\n</code></pre>\n\n<p><br/></p>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>6\n1 2 3 4 5 6\n2\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>5 6 1 2 3 4\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For the first test case, after 1st clockwise rotation the modified linked list will be : 6-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5\nAfter, 2nd clockwise rotated the modified linked list will be : 5-&gt;6-&gt;1-&gt;2-&gt;3-&gt;4.\nThus the output is: 5 6 1 2 3 4.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3\n3 6 9 \n0\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3 6 9\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h5>\n\n<pre><code>In this test case, \u2018k\u2019 is 0 therefore there will be no rotation, so the linked list remains unchanged.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to do this in O(n).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= n &lt;= 10^5\n0 &lt;= Node.data &lt;= 10^9 \n0 &lt;= k &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n\n<p><br/></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 98,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list of 'n' nodes and an integer 'k', rotate the linked list to the right by 'k' positions.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "0 <= Node.data <= 10^9",
                    "0 <= k <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "6\n1 2 3 4 5 6\n2",
                        "output": "5 6 1 2 3 4",
                        "explanation": "After rotating the linked list to the right twice, the elements become 5, 6, 1, 2, 3, and 4, respectively."
                    },
                    {
                        "input": "3\n3 6 9\n0",
                        "output": "3 6 9",
                        "explanation": "Since 'k' is 0, no rotation is performed, and the linked list remains unchanged."
                    },
                    {
                        "input": "4\n1 2 3 4\n2",
                        "output": "3 4 1 2",
                        "explanation": "After rotating the linked list to the right twice, the elements become 3, 4, 1, and 2, respectively."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Do the changes at (K+1)th node from last.</p>",
            "<p>Try converting the linked list to circular linked list then changing pointers of (K+1)th node from end.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity : O(n) \n    Space Complexity: O(1)\n    \n    Where n denotes the size of the linked list.\n*/\n\n/**\n * Definition for singly-linked list.\n * class Node {\n * public:\n *     int data;\n *     Node *next;\n *     Node() : data(0), next(nullptr) {}\n *     Node(int x) : data(x), next(nullptr) {}\n *     Node(int x, Node *next) : data(x), next(next) {}\n * };\n */\n\nNode *rotate(Node *head, int k) {\n    \n    // Base condition.\n    if(head == NULL) {\n        return head;\n    }\n    \n    int len = 1;\n    Node *temp = head;\n        \n    // Calculate length of the linked list.\n    while(temp->next != NULL) {\n        temp = temp->next;\n        len += 1;\n    }\n    \n    k = k % len;\n    \n    // Number of rotations are same as len so no change in LL.\n    if(k == len || k == 0) {\n        return head;\n    }\n\n    // To make a circular linked list.\n    temp->next = head;\n\n    temp = head;\n    \n    for(int i = 0; i < abs(len - k - 1); i++) {\n        temp = temp->next;\n    }\n\n    // Changing pointers.\n    head = temp->next;\n    temp->next = NULL;\n\n    return head;\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time Complexity : O(n) \r\n    Space Complexity: O(1)\r\n    \r\n    Where n denotes the size of the linked list.\r\n\"\"\"\r\n\r\n\r\nclass Node:\r\n    def __init__(self, val, next=None):\r\n        self.data = val\r\n        self.next = next\r\n\r\n\r\ndef rotate(head: Node, k: int) -> Node:\r\n\r\n    # Base condition.\r\n    if head == None:\r\n        return head\r\n\r\n    len = 1\r\n    temp = head\r\n\r\n    # Calculate length of the linked list.\r\n    while temp.next != None:\r\n        temp = temp.next\r\n        len += 1\r\n\r\n    k = int(k % len)\r\n\r\n    # Number of rotations are same as len so no change in LL.\r\n    if k == len or k == 0:\r\n        return head\r\n\r\n    # To make a circular linked list.\r\n    temp.next = head\r\n\r\n    temp = head\r\n    for i in range(abs(len - k - 1)):\r\n        temp = temp.next\r\n\r\n    # Changing pointers.\r\n    head = temp.next\r\n    temp.next = None\r\n    return head\r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space Complexity : O(1)\r\n\r\n    Where, N is the size of the Linked List.\r\n*/\r\n\r\nimport java.lang.Math;\r\npublic class Solution {\r\n    public static Node rotate(Node head, int k) {\r\n\r\n        // Base condition.\r\n        if(head == null) {\r\n            return head;\r\n        }\r\n\r\n        int len = 1;\r\n        Node temp = head;\r\n\r\n        // Calculate length of the linked list.\r\n        while(temp.next != null) {\r\n            temp = temp.next;\r\n            len += 1;\r\n        }\r\n\r\n        k = k % len;\r\n\r\n        // Number of rotations are same as len so no change in LL.\r\n        if(k == len || k == 0) {\r\n            return head;\r\n        }\r\n\r\n        // To make a circular linked list.\r\n        temp.next = head;\r\n\r\n        temp = head;\r\n\r\n        for(int i = 0; i < Math.abs(len - k - 1); i++) {\r\n            temp = temp.next;\r\n        }\r\n\r\n        // Changing pointers.\r\n        head = temp.next;\r\n        temp.next = null;\r\n\r\n        return head;\r\n\r\n    }\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}