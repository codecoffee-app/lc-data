{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9232,
            "title": "Rotate Matrix",
            "titleSlug": "rotate-matrix_981260",
            "content": "<h4 id=\"given-a-2-dimensional-matrix-of-size-n-x-m-rotate-the-elements-of-the-matrix-clockwise\">Given a 2-dimensional matrix of size \u2018N\u2019 x \u2018M\u2019, rotate the elements of the matrix clockwise.</h4>\n\n<pre><code>For example: \nInput Matrix: [ [ 1, 2, 3 ] \n                [ 4, 5, 6 ] \n                [ 7, 8, 9 ] ]\n\nOutput Matrix: [ [ 4, 1, 2 ] \n                 [ 7, 5, 3 ] \n                 [ 8, 9, 6 ] ]\n\nThe output matrix is generated by rotating the elements of the input matrix in a clockwise direction. Note that every element is rotated only once. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Also, update the given matrix in-place.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains two single-spaced integers N and M, representing the number of rows and columns of the matrix, respectively.\n\nThe next N line contains M single-spaced integers denoting the matrix elements. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, the modified matrix is printed.\n\nThe output for each test case is in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N, M &lt;= 100\n-10^5 &lt;= data &lt;= 10^5,\n\nwhere \u2018T\u2019 is the number of test cases,  \u2018N\u2019 and \u2018M\u2019 are the numbers of rows and columns respectively and \u2018data\u2019 is the value of the elements of the matrix.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n4 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>5 1 2 3\n9 10 6 4\n13 11 7 8\n14 15 16 12\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/family-6635.png\" alt=\"\"></p>\n\n<pre><code>The resulting matrix after rotating the given matrix clockwise is shown above. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2 2\n1 3\n4 5\n3 3\n3 4 5\n5 6 7\n8 10 20\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4 1\n5 3\n5 3 4\n8 6 5\n10 20 7 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 315,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2-dimensional matrix of size \u2018N\u2019 x \u2018M\u2019, rotate the elements of the matrix clockwise by one position. The rotation should be done in-place, meaning you should modify the original matrix directly without creating a new one.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N, M <= 100 (Dimensions of the matrix)",
                    "-10^5 <= data <= 10^5 (Value of the elements of the matrix)"
                ],
                "testcases": [
                    {
                        "input": "4 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16",
                        "output": "5 1 2 3\n9 10 6 4\n13 11 7 8\n14 15 16 12",
                        "explanation": "The elements of the 4x4 matrix are rotated clockwise by one position. For example, the element at (0,0) which is 1 moves to (0,1), the element at (0,1) which is 2 moves to (0,2), and so on around the outer layer and the inner layers."
                    },
                    {
                        "input": "2 2\n1 3\n4 5",
                        "output": "4 1\n5 3",
                        "explanation": "The elements of the 2x2 matrix are rotated clockwise by one position."
                    },
                    {
                        "input": "3 3\n3 4 5\n5 6 7\n8 10 20",
                        "output": "5 3 4\n8 6 5\n10 20 7",
                        "explanation": "The elements of the 3x3 matrix are rotated clockwise by one position."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;Can you solve this recursively?</p>",
            "<p>Try to rotate the boundaries/squares individually, without recursion.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n\r\n    Time Complexity: O(N * M)\r\n    Space Complexity: O(1)\r\n\r\n    Where N, M are the number of rowStarts and the number of colStartumns of the matrix, \r\n    respectively. \r\n\r\n*/\r\n\r\n\r\nvoid rotateMatrix(vector<vector<int>> &mat, int n, int m)\r\n{\r\n    // Index of starting row and column\r\n    int rowStart = 0, colStart = 0; \r\n    \r\n    int previous, current; \r\n\r\n    while (rowStart < n && colStart < m) \r\n    { \r\n        // If we have rotated the whole matrix\r\n        if (rowStart == n - 1 || colStart == m - 1)\r\n        { \r\n            break; \r\n        }\r\n        // Store the first element of next rown as this element will replace the first element of current row\r\n        previous = mat[rowStart + 1][colStart]; \r\n        \r\n        // Move elements of first row from the remaining rows\r\n        for (int i = colStart; i < m; i++) \r\n        { \r\n            current = mat[rowStart][i]; \r\n            mat[rowStart][i] = previous; \r\n            previous = current; \r\n        } \r\n        rowStart++; \r\n  \r\n        // Move elements of last column from the remaining columns \r\n        for (int i = rowStart; i < n; i++) \r\n        { \r\n            current = mat[i][m-1]; \r\n            mat[i][m-1] = previous; \r\n            previous = current; \r\n        } \r\n        m--; \r\n  \r\n        // Move elements of last rowStart from the remaining rows \r\n        if (rowStart < n) \r\n        { \r\n            for (int i = m-1; i >= colStart; i--) \r\n            { \r\n                current = mat[n-1][i]; \r\n                mat[n-1][i] = previous; \r\n                previous = current; \r\n            } \r\n        } \r\n        n--; \r\n  \r\n        // Move elements of first column from the remaining rows \r\n        if (colStart < m) \r\n        { \r\n            for (int i = n-1; i >= rowStart; i--) \r\n            { \r\n                current = mat[i][colStart]; \r\n                mat[i][colStart] = previous; \r\n                previous = current; \r\n            } \r\n        } \r\n        colStart++; \r\n    } \r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n\r\n\tTime Complexity: O(N * M)\r\n\tSpace Complexity: O(1)\r\n\r\n\tWhere N, M are the number of rows and the number of columns of the matrix, respectively.\r\n\r\n'''\r\n\r\n\r\ndef rotateMatrix(mat, n, m):\r\n\r\n    row = 0\r\n    col = 0\r\n\r\n    ''' \r\n       row - Staring row index \r\n       m - ending row index \r\n       col - starting column index \r\n       n - ending column index  \r\n    '''\r\n\r\n    while (row < n and col < m):\r\n\r\n        # If we have rotated the whole matrix\r\n        if (row == n - 1 or col == m - 1):\r\n            break\r\n\r\n        # Store the first element of next row as this element will replace first element of current row\r\n        previous = mat[row + 1][col]\r\n\r\n        # Move elements of first row from the remaining rows\r\n        for i in range(col, m):\r\n            current = mat[row][i]\r\n            mat[row][i] = previous\r\n            previous = current\r\n\r\n        row += 1\r\n\r\n        # Move elements of last column from the remaining columns\r\n        for i in range(row, n):\r\n            current = mat[i][m-1]\r\n            mat[i][m-1] = previous\r\n            previous = current\r\n\r\n        m -= 1\r\n\r\n        # Move elements of last row from the remaining rows\r\n        if (row < n):\r\n            for i in range(m-1, col-1, -1):\r\n                current = mat[n-1][i]\r\n                mat[n-1][i] = previous\r\n                previous = current\r\n\r\n        n -= 1\r\n\r\n        # Move elements of first column from the remaining rows\r\n        if (col < m):\r\n            for i in range(n-1, row-1, -1):\r\n                current = mat[i][col]\r\n                mat[i][col] = previous\r\n                previous = current\r\n\r\n        col += 1\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n\r\n    Time Complexity: O(N * M)\r\n    Space Complexity: O(1)\r\n\r\n    Where N, M are the number of rowStarts and the number of colStartumns of the matrix, \r\n    respectively. \r\n\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n\r\n    public static void rotateMatrix(ArrayList<ArrayList<Integer>> mat, int n, int m) {\r\n        // Index of starting row and column\r\n        int rowStart = 0, colStart = 0;\r\n\r\n        int previous, current;\r\n\r\n        while (rowStart < n && colStart < m) {\r\n\r\n            // If we have rotated the whole matrix\r\n            if (rowStart == n - 1 || colStart == m - 1) {\r\n                break;\r\n            }\r\n            previous = mat.get(rowStart + 1).get(colStart);\r\n\r\n            // Move elements of first row from the remaining rows\r\n            for (int i = colStart; i < m; i++) {\r\n\r\n                current = mat.get(rowStart).get(i);\r\n                mat.get(rowStart).set(i, previous);\r\n                previous = current;\r\n            }\r\n\r\n            rowStart++;\r\n\r\n            // Move elements of last column from the remaining columns\r\n            for (int i = rowStart; i < n; i++) {\r\n\r\n                current = mat.get(i).get(m - 1);\r\n                mat.get(i).set(m - 1, previous);\r\n                previous = current;\r\n            }\r\n            m--;\r\n\r\n            // Move elements of last row from the remaining rows\r\n            if (rowStart < n) {\r\n                for (int i = m - 1; i >= colStart; i--) {\r\n                    current = mat.get(n - 1).get(i);\r\n                    mat.get(n - 1).set(i, previous);\r\n                    previous = current;\r\n                }\r\n            }\r\n            n--;\r\n\r\n            // Move elements of first column from the remaining rows\r\n            if (colStart < m) {\r\n                for (int i = n - 1; i >= rowStart; i--) {\r\n                    current = mat.get(i).get(colStart);\r\n                    mat.get(i).set(colStart, previous);\r\n                    previous = current;\r\n                }\r\n            }\r\n            colStart++;\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}