{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9826,
            "title": "Rotated Array",
            "titleSlug": "rotated-array_1093219",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-size-n-having-unique-elements-that-has-been-sorted-in-ascending-order-and-rotated-between-1-and-n-times-which-is-unknown\">You are given an array <em><strong>&#39;arr&#39;</strong></em> of size <em><strong>&#39;n&#39;</strong></em> having unique elements that has been sorted in ascending order and rotated between 1 and &#39;n&#39; times which is unknown.</h4>\n\n<p><br></p>\n\n<h4 id=\"the-rotation-involves-shifting-every-element-to-the-right-with-the-last-element-moving-to-the-first-position-for-example-if-arr-1-2-3-4-was-rotated-one-time-it-would-become-4-1-2-3\">The rotation involves shifting every element to the right, with the last element moving to the first position. For example, if &#39;arr&#39; = [1, 2, 3, 4] was rotated one time, it would become [4, 1, 2, 3].</h4>\n\n<p><br></p>\n\n<h4 id=\"your-task-is-to-find-the-minimum-number-in-this-array\">Your task is to find the minimum number in this array.</h4>\n\n<p><br></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>All the elements in the array are distinct. \n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Input: arr = [3,4,5,1,2]\n\nOutput: 1\n\nExplanation: The original array was [1,2,3,4,5] and it was rotated 3 times.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;n&#39;, the size of the array.\nThe second line contains &#39;n&#39; space-separated integers.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The only line contains the minimum number in the given array. \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>4\n3 4 1 2   \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>The original array was [1, 2, 3, 4] and it was rotated 2 times.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>6\n25 30 5 10 15 20\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h5>\n\n<pre><code>The original array was [5, 10, 15, 20, 25, 30] and it was rotated 2 times.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to solve this with O(log(n)) time complexity.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= n &lt;= 10^5\n1 &lt;= arr[i] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 154,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr` of size `n` with unique elements that has been rotated between 1 and `n` times, find the minimum element in the array. The array was initially sorted in ascending order before rotation. Rotation involves shifting elements to the right, with the last element moving to the first position.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= arr[i] <= 10^9",
                    "All elements in the array are distinct."
                ],
                "testcases": [
                    {
                        "input": "n = 4, arr=[3, 4, 1, 2]",
                        "output": "1",
                        "explanation": "The original array was [1, 2, 3, 4] and it was rotated 2 times. The minimum element is 1."
                    },
                    {
                        "input": "n = 6, arr=[25, 30, 5, 10, 15, 20]",
                        "output": "5",
                        "explanation": "The original array was [5, 10, 15, 20, 25, 30] and it was rotated 2 times. The minimum element is 5."
                    },
                    {
                        "input": "n = 5, arr=[1, 2, 3, 4, 5]",
                        "output": "1",
                        "explanation": "The array is sorted and not rotated (or rotated n times). The minimum element is 1."
                    },
                    {
                        "input": "n = 1, arr=[7]",
                        "output": "7",
                        "explanation": "The array contains only one element, which is the minimum."
                    },
                    {
                        "input": "n = 7, arr=[4, 5, 6, 7, 0, 1, 2]",
                        "output": "0",
                        "explanation": "The array [0, 1, 2, 4, 5, 6, 7] was rotated 4 times.  The minimum value is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of a brute approach to solve the problem.</p>",
            "<p>Think about how to decrease the search space while finding the minimum element.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(log(N))\n    Space Complexity: O(1),\n\n    where 'N' is the number of elements in the array.\n*/\n\nint findMin(vector<int>& arr)\n{\n    int n = arr.size();\n    int low = 0;\n    int high = n - 1;\n\n    // Iterate till low is less than or equal to high.\n    while (low <= high)\n    {\n        // Case 1 - when element at low is less than or equal to element at high.\n        if (arr[low] <= arr[high])\n        {\n            return arr[low];\n        }\n\n        int mid = (low + high) / 2;\n        int next = (mid + 1) % n;\n        int previous = (mid + n - 1) % n;\n\n        // Case 2 - when element at mid is less than or equal to element at next and previous.\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[previous])\n        {\n            return arr[mid];\n        }\n\n        // Case 3 - when element at mid is less than or equal to element at high.\n        else if (arr[mid] <= arr[high])\n        {\n            high = mid - 1; // Case 3\n        }\n\n        // Case 4 - when element at low is less than or equal to element at mid.\n        else if (arr[mid] >= arr[low])\n        {\n            low = mid + 1;\n        }\n    }\n\n    return -1;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(log(N))\r\n    Space Complexity: O(1),\r\n\r\n    where 'N' is the number of elements in the array.\r\n*/\r\npublic class Solution {\r\n    public static int findMin(int []arr) {\r\n        int n = arr.length;\r\n        int low = 0;\r\n        int high = n - 1;\r\n\r\n        // Iterate till low is less than or equal to high.\r\n        while (low <= high)\r\n        {\r\n            // Case 1 - when element at low is less than or equal to element at high.\r\n            if (arr[low] <= arr[high])\r\n            {\r\n                return arr[low];\r\n            }\r\n\r\n            int mid = (low + high) / 2;\r\n            int next = (mid + 1) % n;\r\n            int previous = (mid + n - 1) % n;\r\n\r\n            // Case 2 - when element at mid is less than or equal to element at next and previous.\r\n            if (arr[mid] <= arr[next] && arr[mid] <= arr[previous])\r\n            {\r\n                return arr[mid];\r\n            }\r\n\r\n            // Case 3 - when element at mid is less than or equal to element at high.\r\n            else if (arr[mid] <= arr[high])\r\n            {\r\n                high = mid - 1; // Case 3\r\n            }\r\n\r\n            // Case 4 - when element at low is less than or equal to element at mid.\r\n            else if (arr[mid] >= arr[low])\r\n            {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time Complexity: O(log(N))\r\n    Space Complexity: O(1),\r\n\r\n    where 'N' is the number of elements in the array.\r\n\"\"\"\r\n\r\n\r\ndef findMin(arr: [int]):\r\n\r\n    n = len(arr)\r\n    low = 0\r\n    high = n - 1\r\n\r\n    # Iterate till low is less than or equal to high.\r\n    while low <= high:\r\n\r\n        # Case 1 - when element at low is less than or equal to element at high.\r\n        if arr[low] <= arr[high]:\r\n            return arr[low]\r\n\r\n        mid = (low + high) // 2\r\n        next = (mid + 1) % n\r\n        previous = (mid + n - 1) % n\r\n\r\n        # Case 2 - when element at mid is less than or equal to element at next and previous.\r\n        if arr[mid] <= arr[next] and arr[mid] <= arr[previous]:\r\n            return arr[mid]\r\n\r\n        # Case 3 - when element at mid is less than or equal to element at high.\r\n        elif arr[mid] <= arr[high]:\r\n            high = mid - 1\r\n\r\n        # Case 4 - when element at low is less than or equal to element at mid.\r\n        elif arr[mid] >= arr[low]:\r\n            low = mid + 1\r\n\r\n    return -1\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}