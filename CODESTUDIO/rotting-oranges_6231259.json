{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22981,
            "title": "Rotting Oranges",
            "titleSlug": "rotting-oranges_6231259",
            "content": "<h5 id=\"you-are-given-an-integer-grid-of-size-n-x-m-and-the-cell-of-the-grid-contains-either-of-the-three-values\">You are given an integer grid of size \u2018N\u2019x\u2019M\u2019, and the cell of the grid contains either of the three values:</h5>\n\n<h4 id=\"0-an-empty-cell\"><li> 0 - An empty cell. </li></h4>\n\n<h4 id=\"1-a-fresh-orange\"><li> 1 - A fresh orange. </li></h4>\n\n<h4 id=\"2-a-rotten-orange\"><li> 2 - A rotten orange. </li></h4>\n\n<h4 id=\"every-minute-any-fresh-orange-adjacent-4-directionally-to-a-rotten-orange-becomes-rotten\">Every minute, any fresh orange adjacent(4-directionally) to a rotten orange becomes rotten.</h4>\n\n<h4 id=\"you-must-return-the-minimum-time-after-which-no-fresh-oranges-are-left-return-1-if-its-impossible-to-rot-all-the-fresh-oranges\">You must return the minimum time after which no fresh oranges are left. Return -1 if it&#39;s impossible to rot all the fresh oranges.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: [[2,1,1],[1,1,0],[0,0,0]]\n\nOutput: 2\n\nAt T=0, only orange at (0,0) is rotten.\nAt T=1, oranges at (0,0),(0,1) and (1,0) are rotten.\nAt T=2, oranges at (0,0),(0,1),(1,0),(0,2) and (1,1) are rotten. \nNo fresh oranges are left after T=2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line will contain the integer &#39;T&#39;, denoting the number of test cases.\n\nThe first line of each test case contains two single space-separated integers, &#39;N&#39; and &#39;M&#39;, representing the grid&#39;s number of rows and columns, respectively.\n\nThe next &#39;N&#39; lines contain &#39;M&#39; single space-separated integers, each representing the rows of the grid.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output contains a single integer, i.e., The minimum time after which no cell has a fresh orange. \n\nIf it&#39;s impossible to rot all oranges, print -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N*M &lt;= 10^5\n0 &lt;= grid[i][j] &lt;= 2\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 3 \n2 1 0\n1 1 0 \n0 0 0\n2 2 \n2 1\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 \n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first case:\n\nInput: [[2,1,1],[1,1,0],[0,0,0]]\n\nOutput: 2\n\nAt T=0, only orange at (0,0) is rotten.\nAt T=1, oranges at (0,0),(0,1) and (1,0) are rotten.\nAt T=2, oranges at (0,0),(0,1),(1,0),(0,2) and (1,1) are rotten. \nNo fresh oranges are left after T=2.\n\nFor the second case:\n\nInput: [[2,1],[1,2]]\n\nOutput: 1\n\nAt T=0, only oranges at (0,0) and (1,1) are rotten.\nAt T=1, oranges at (0,0),(0,1),(1,0) and (1,1) are rotten. \nNo fresh oranges are left after T=1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 3\n2 1 1\n1 1 0\n0 1 1\n3 3\n2 1 0\n0 1 1\n1 0 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4 \n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer grid of size N x M, where each cell contains one of the following values:\n\n0: An empty cell.\n1: A fresh orange.\n2: A rotten orange.\n\nEvery minute, any fresh orange adjacent (4-directionally) to a rotten orange becomes rotten.\n\nDetermine the minimum time after which no fresh oranges are left. If it's impossible to rot all the fresh oranges, return -1.",
                "constraints": [
                    "1 <= N*M <= 10^5",
                    "0 <= grid[i][j] <= 2",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 3\n2 1 0\n1 1 0\n0 0 0",
                        "output": "2",
                        "explanation": "Initially, the orange at (0,0) is rotten. At T=1, oranges at (0,0), (0,1), and (1,0) are rotten. At T=2, oranges at (0,0), (0,1), (1,0), (0,2), and (1,1) are rotten. No fresh oranges remain after T=2."
                    },
                    {
                        "input": "2 2\n2 1\n1 2",
                        "output": "1",
                        "explanation": "Initially, oranges at (0,0) and (1,1) are rotten. At T=1, oranges at (0,0), (0,1), (1,0), and (1,1) are rotten. No fresh oranges remain after T=1."
                    },
                    {
                        "input": "3 3\n2 1 1\n1 1 0\n0 1 1",
                        "output": "4",
                        "explanation": null
                    },
                    {
                        "input": "3 3\n2 1 0\n0 1 1\n1 0 1",
                        "output": "-1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>&nbsp;</strong>Try the brute force approach. Every second, rot all fresh oranges adjacent to the rotten oranges.</p>",
            "<p>Use Breadth-First-Search to explore the last fresh orange that will rot.</p><p>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}