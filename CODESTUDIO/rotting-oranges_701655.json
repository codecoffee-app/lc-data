{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7596,
            "title": "Rotting Oranges",
            "titleSlug": "rotting-oranges_701655",
            "content": "<h4 id=\"you-have-been-given-a-grid-containing-some-oranges-each-cell-of-this-grid-has-one-of-the-three-integers-values\">You have been given a grid containing some oranges. Each cell of this grid has one of the three integers values:</h4>\n\n<h4 id=\"value-0-representing-an-empty-cell\"><li> Value 0 -  representing an empty cell. </li></h4>\n\n<h4 id=\"value-1-representing-a-fresh-orange\"><li> Value 1 - representing a fresh orange. </li></h4>\n\n<h4 id=\"value-2-representing-a-rotten-orange\"><li> Value 2 - representing a rotten orange. </li></h4>\n\n<h4 id=\"every-second-any-fresh-orange-that-is-adjacent-4-directionally-to-a-rotten-orange-becomes-rotten\">Every second, any fresh orange that is adjacent(4-directionally) to a rotten orange becomes rotten.</h4>\n\n<h4 id=\"your-task-is-to-find-out-the-minimum-time-after-which-no-cell-has-a-fresh-orange-if-its-impossible-to-rot-all-the-fresh-oranges-then-print-1\">Your task is to find out the minimum time after which no cell has a fresh orange. If it&#39;s impossible to rot all the fresh oranges then print -1.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The grid has 0-based indexing.\n2. A rotten orange can affect the adjacent oranges 4 directionally i.e. Up, Down, Left, Right.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains two single space-separated integers &#39;N&#39; and &#39;M&#39; representing the number of rows and columns of the grid respectively.\n\nThe next &#39;N&#39; lines contain &#39;M&#39; single space-separated integers each representing the rows of the grid.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output contains a single integer i.e. The minimum time after which no cell has a fresh orange. \n\nIf it&#39;s impossible to rot all oranges, print -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 500\n1 &lt;= M &lt;= 500\n0 &lt;= grid[i][j] &lt;= 2\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3 3\n2 1 1\n1 1 0\n0 1 1 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Minimum 4 seconds are required to rot all the oranges in the grid as shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture-4859.JPG\" alt=\"alt text\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3 3\n2 1 0\n0 1 1\n1 0 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>The bottom left corner fresh orange (row 2, column 0) has no adjacent oranges. Hence, it&#39;s impossible to rot it.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 116,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a grid of oranges represented by a 2D vector, where 0 represents an empty cell, 1 represents a fresh orange, and 2 represents a rotten orange, determine the minimum time required to rot all fresh oranges.  Each minute, any fresh orange adjacent (up, down, left, or right) to a rotten orange becomes rotten. If it's impossible to rot all fresh oranges, return -1.",
                "constraints": [
                    "1 <= N <= 500",
                    "1 <= M <= 500",
                    "0 <= grid[i][j] <= 2"
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 3, grid = [[2, 1, 1], [1, 1, 0], [0, 1, 1]]",
                        "output": "4",
                        "explanation": "Minimum 4 seconds are required to rot all the oranges in the grid. The rotten orange spreads to its neighbors each second."
                    },
                    {
                        "input": "n = 3, m = 3, grid = [[2, 1, 0], [0, 1, 1], [1, 0, 1]]",
                        "output": "-1",
                        "explanation": "The fresh orange at the bottom-left corner (row 2, column 0) cannot be reached by any rotten orange, so it's impossible to rot all oranges."
                    },
                    {
                        "input": "n = 1, m = 1, grid = [[0]]",
                        "output": "0",
                        "explanation": "There are no fresh oranges, so no time is needed."
                    },
                    {
                        "input": "n = 1, m = 1, grid = [[1]]",
                        "output": "-1",
                        "explanation": "There are no rotten oranges, so the fresh orange cannot be rotten."
                    },
                    {
                        "input": "n = 1, m = 1, grid = [[2]]",
                        "output": "0",
                        "explanation": "There are no fresh oranges, and at least one rotten orange exists, so all oranges (none in this case) can be rotten in 0 minutes."
                    },
                    {
                        "input": "n = 2, m = 2, grid = [[2, 1], [1, 1]]",
                        "output": "2",
                        "explanation": "It takes two minutes to rot all the fresh oranges."
                    },
                    {
                        "input": "n = 4, m = 5, grid = [[0,2,2,1,1],[0,0,2,0,1],[1,1,0,1,2],[0,1,2,0,1]]",
                        "output": "4",
                        "explanation": "It takes four minutes to rot all the fresh oranges in the given grid."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try the brute force approach. Every second, rot all fresh oranges adjacent to the rotten oranges.</p>",
            "<p>Use Breadth-First-Search to explore the last fresh orange that will rot.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity - O(N * M)\r\n    Space Complexity - O(N * M)\r\n\r\n    where N and M are the number of rows and columns of\r\n    the grid respectively.\r\n*/\r\n\r\n\r\n#include <queue>\r\n\r\n\r\nint isValid(vector<vector<bool>>& visited, int i, int j, int n, int m)\r\n{\r\n    return i >= 0 && i < n && j >= 0 && j < m && visited[i][j] == false;\r\n}\r\n\r\n// BFS solution.\r\nint minTimeToRot(vector<vector<int>>& grid, int n, int m)\r\n{\r\n    int time = 0;\r\n\r\n    // 2D array to mark visited cells.\r\n    vector<vector<bool>> visited(n, vector<bool>(m, false));\r\n    \r\n    // Queue for BFS.\r\n    queue<pair<int, int>> q;\r\n\r\n    // Push all the rotten oranges into the queue as level 0.\r\n    for(int i = 0; i < n; i++)\r\n    {\r\n        for(int j = 0; j < m; j++)\r\n        {\r\n            if(grid[i][j] == 2)\r\n            {\r\n                q.push({i, j});\r\n                visited[i][j] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    int i, j;\r\n\r\n    // Array for exploring all 4 directions.\r\n    int dx[] = {0, 0, 1, -1};\r\n    int dy[] = {1, -1, 0, 0};\r\n\r\n    while(q.size() > 0)\r\n    {\r\n        // Current level size.\r\n        int levelSize = q.size();\r\n\r\n        while(levelSize--)\r\n        {\r\n            pair<int,int> currCell = q.front();\r\n            q.pop();\r\n\r\n            i = currCell.first;\r\n            j = currCell.second;\r\n            \r\n            // Check all adjacent cells and push them in queue, if fresh and valid.\r\n            for(int k = 0; k < 4; k++)\r\n            {\r\n                int nextI = i + dx[k];\r\n                int nextJ = j + dy[k];\r\n\r\n                if(isValid(visited, nextI, nextJ, n, m) && grid[nextI][nextJ] == 1)\r\n                {\r\n                    q.push({nextI, nextJ});\r\n                    visited[nextI][nextJ] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Increment time for next level.\r\n        time++;\r\n    }\r\n\r\n    // If a fresh orange is still present, return -1.\r\n    for(int i = 0; i < n; i++)\r\n    {\r\n        for(int j = 0; j < m; j++)\r\n        {\r\n            if(grid[i][j] == 1 && visited[i][j] == false)\r\n            {\r\n                return -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Return time elapsed.\r\n    return max(0, time - 1);\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n\tTime Complexity - O(N * M)\r\n\tSpace Complexity - O(N * M)\r\n\r\n\twhere N and M are the number of rows and columns of\r\n\tthe grid respectively.\r\n*/\r\n\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\n\r\nclass Pair {\r\n\tint first, second;\r\n\r\n\tPair(int first, int second) {\r\n\t\tthis.first = first;\r\n\t\tthis.second = second;\r\n\t}\r\n}\r\n\r\npublic class Solution {\r\n\r\n\tstatic boolean isValid(boolean visited[][], int i, int j, int n, int m) {\r\n\t\treturn i >= 0 && i < n && j >= 0 && j < m && visited[i][j] == false;\r\n\t}\r\n\r\n\t// BFS solution.\r\n\tpublic static int minTimeToRot(int[][] grid, int n, int m) {\r\n\r\n\t\tint time = 0;\r\n\r\n\t\t// 2D array to mark visited cells.\r\n\t\tboolean visited[][] = new boolean[n][m];\r\n\r\n\t\t// Queue for BFS.\r\n\t\tQueue<Pair> queue = new LinkedList<>();\r\n\r\n\t\t// Push all the rotten oranges into the queue as level 0.\r\n\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\tfor (int j = 0; j < m; j++) {\r\n\r\n\t\t\t\tif (grid[i][j] == 2) {\r\n\t\t\t\t\tqueue.add(new Pair(i, j));\r\n\t\t\t\t\tvisited[i][j] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tint i, j;\r\n\r\n\t\t// Array for exploring all 4 directions.\r\n\t\tint dx[] = { 0, 0, 1, -1 };\r\n\t\tint dy[] = { 1, -1, 0, 0 };\r\n\r\n\t\twhile (queue.size() > 0) {\r\n\r\n\t\t\t// Current level size.\r\n\t\t\tint levelSize = queue.size();\r\n\r\n\t\t\twhile (levelSize > 0) {\r\n\r\n\t\t\t\tPair currCell = queue.remove();\r\n\t\t\t\ti = currCell.first;\r\n\t\t\t\tj = currCell.second;\r\n\r\n\t\t\t\t// Check all adjacent cells and push them in queue, if fresh and valid.\r\n\t\t\t\tfor (int k = 0; k < 4; k++) {\r\n\t\t\t\t\tint nextI = i + dx[k];\r\n\t\t\t\t\tint nextJ = j + dy[k];\r\n\r\n\t\t\t\t\tif (isValid(visited, nextI, nextJ, n, m) && grid[nextI][nextJ] == 1) {\r\n\t\t\t\t\t\tqueue.offer(new Pair(nextI, nextJ));\r\n\t\t\t\t\t\tvisited[nextI][nextJ] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlevelSize--;\r\n\t\t\t}\r\n\r\n\t\t\t// Increment time for next level.\r\n\t\t\ttime++;\r\n\t\t}\r\n\r\n\t\t// If a fresh orange is still present, return -1.\r\n\t\tfor (i = 0; i < n; i++) {\r\n\t\t\tfor (j = 0; j < m; j++) {\r\n\t\t\t\t\r\n\t\t\t\tif (grid[i][j] == 1 && visited[i][j] == false) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Math.max(0, time - 1);\r\n\r\n\t}\r\n\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "''' \r\n    Time Complexity - O(N * M)\r\n    Space Complexity - O(N * M)\r\n\r\n    where N and M are the number of rows and columns of\r\n    the grid respectively.\r\n'''\r\n\r\nfrom queue import Queue\r\n\r\n\r\ndef isValid(visited, i, j, n, m):\r\n    return i >= 0 and i < n and j >= 0 and j < m and visited[i][j] == False\r\n\r\ndef minTimeToRot(grid, n, m):\r\n\r\n    time = 0\r\n\r\n    # 2D array to mark visited cells.\r\n    visited = [[False for i in range(m)] for j in range(n)]\r\n\r\n    # Queue for BFS.\r\n    Q = Queue()\r\n\r\n    # Push all the rotten oranges into the queue as level 0.\r\n    for i in range(n):\r\n        for j in range(m):\r\n\r\n            if(grid[i][j] == 2):\r\n                Q.put((i, j))\r\n                visited[i][j] = True\r\n\r\n    # List for exploring all 4 directions.\r\n    dx = [0, 0, 1, -1]\r\n    dy = [1, -1, 0, 0]\r\n\r\n    # Search till queue is not empty.\r\n    while (Q.qsize() > 0):\r\n\r\n        levelSize = Q.qsize()\r\n\r\n        while(levelSize > 0):\r\n            levelSize -= 1\r\n            (i, j) = Q.get()\r\n\r\n            # Check all adjacent cells and push them in queue, if fresh and valid.\r\n            for k in range(4):\r\n                nextI = i+dx[k]\r\n                nextJ = j+dy[k]\r\n\r\n                if(isValid(visited, nextI, nextJ, n, m) and grid[nextI][nextJ] == 1):\r\n                    Q.put((nextI, nextJ))\r\n                    visited[nextI][nextJ] = True\r\n\r\n        # Increment time for next level.\r\n        time += 1\r\n\r\n    # If a fresh orange is still present, return -1.\r\n    for i in range(n):\r\n        for j in range(m):\r\n\r\n            if(grid[i][j] == 1 and visited[i][j] == False):\r\n                return -1\r\n\r\n    #   Return time elapsed.\r\n    return max(0, time - 1)\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}