{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12046,
            "title": "Round Robin Scheduling with different arrival times",
            "titleSlug": "round-robin-scheduling-with-different-arrival-times_1402875",
            "content": "<h4 id=\"you-have-been-given-the-n-process-with-process-id-s-from-1-to-n-for-each-process-you-are-given-the-arrival-time-and-burst-time-you-are-also-provided-with-the-time-quantum-now-you-are-supposed-to-execute-a-round-robin-scheduling-algorithm-and-find-the-completion-time-for-each-given-process\">You have been given the \u2018N\u2019 process with process id\u2019s from 1 to \u2018N\u2019. For each process, you are given the arrival time and burst time. You are also provided with the time quantum. Now you are supposed to execute a round-robin scheduling algorithm and find the completion time for each given process.</h4>\n\n<h4 id=\"please-refer-to-round-robin_scheduling-for-more-detailed-information\">Please refer to <a href = https://en.wikipedia.org/wiki/Round-robin_scheduling about the round-robin scheduling algorithm.>Round-robin_scheduling </a>for more detailed information .</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>A time quantum is associated with the algorithm. Each process gets CPU for some units of time, which are decided by time quantum value, and then again enter the ready queue if they have burst time remaining.\n\nArrival Time - The time when the process enters the system and is ready for execution.\n\nBurst Time - The total time taken by the process for execution.\n\nCompletion Time - The time when the process completes its execution and leaves the system.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>If two processes are having the same arrival time, then a process with a lower ID will be executed first.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019 denoting the number of test cases. Then each test case follows.\n\nThe first input line of each test case contains two integers \u2018N\u2019 and \u2018M\u2019, denoting the number of processes and the quantum time, respectively.\n\nEach of the next \u2018N\u2019 lines contains two space integers denoting the arrival time and burst time of the ith process.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single line containing \u2018N\u2019 space-separated integers denoting the complete time of each process.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 1000\n1 &lt;= M &lt;= 1000\n1 &lt;= ARRIVALTIME[i], BURSTTIME[i] &lt;= 1000\n\nWhere \u2018N\u2019 and \u2018M\u2019 denotes the number of processes and the quantum time, respectively.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 2\n0 5\n1 4\n2 2\n3 1\n1 4\n3 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>12 11 6 9 \n8\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample output 1  :</h5>\n\n<pre><code>For the first test case,\nAssume {a, (l : r)} denotes a pair of integers where \u2018a\u2019 denotes the process index and (l : r) denotes the start time ( l ) and end time ( r ) of a particular instance of execution. Basically it means process \u2018a\u2019 got executed from lth to rth unit of time. Following round robin scheduling the execution order will be  {0, (0 : 2)} -&gt; {1, (2 : 4)} -&gt; {2, (4 : 6)} -&gt; {0, (6 : 8)} -&gt; {4, (8 : 9)} -&gt; {1, (9: 11)} -&gt; {0, (11: 12)}. \n\nFor the second test case, there is only one process. Its completion time will be 8.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2 10\n0 3\n0 5\n2 1\n1 1\n2 1  \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>3 8\n2 3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample output 2 :</h5>\n\n<pre><code>For the first test case, the completion time of processes will be [3, 8].\n\nFor the second test case, the completion time of processes will be [2, 3].\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'N' processes with IDs from 1 to 'N', their respective arrival times and burst times, and a time quantum 'M', implement the Round Robin scheduling algorithm to determine the completion time for each process.  If processes have the same arrival time, the process with the lower ID should be executed first.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 1000",
                    "1 <= M <= 1000",
                    "1 <= arrivalTime[i], burstTime[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "n = 4, m = 2, arrivalTime = [0, 1, 2, 3], burstTime = [5, 4, 2, 1]",
                        "output": "12 11 6 9",
                        "explanation": "Process 0: {0, (0 : 2)} -> {0, (6 : 8)} -> {0, (11: 12)}. Completion time: 12.\nProcess 1: {1, (2 : 4)} -> {1, (9: 11)}. Completion time: 11.\nProcess 2: {2, (4 : 6)}. Completion time: 6.\nProcess 3: {3, (8 : 9)}. Completion time: 9."
                    },
                    {
                        "input": "n = 1, m = 4, arrivalTime = [3], burstTime = [5]",
                        "output": "8",
                        "explanation": "Only one process. Starts at time 3 and has burst time 5. Completion time is 3 + 5 = 8."
                    },
                    {
                        "input": "n = 2, m = 10, arrivalTime = [0, 0], burstTime = [3, 5]",
                        "output": "3 8",
                        "explanation": "Process 0 arrives first, so it runs for 3 time units and completes at time 3. Process 1 then runs for 5 time units and completes at time 8."
                    },
                    {
                        "input": "n = 2, m = 1, arrivalTime = [1, 1], burstTime = [2, 1]",
                        "output": "2 3",
                        "explanation": "Process 0 arrives first (lower ID), runs for 1 unit at t=1. Remaining burst time 1.  Process 1 runs for 1 unit at t=2 and completes. Process 0 runs for 1 unit at t=2 and completes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of using a queue?</p>"
        ],
        "relatedTopics": [],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}