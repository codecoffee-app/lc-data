{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11091,
            "title": "Safe Nodes In The Graph",
            "titleSlug": "safe-nodes-in-the-graph_1376703",
            "content": "<h4 id=\"ninja-has-been-given-a-matrix-list-edges-denoting-e-edges-of-a-directed-graph-having-n-nodes-ninja-starts-walking-from-some-node-say-start-in-the-graph-along-a-directed-edge-of-the-graph-if-ninja-reaches-an-end-node-say-end-a-node-that-has-no-outgoing-directed-edges-ninja-stops-walking\">Ninja has been given a matrix/list &#39;EDGES&#39; denoting &#39;E&#39; edges of a directed graph having \u2018N\u2019 nodes. Ninja starts walking from some node (say \u2018START\u2019) in the graph along a directed edge of the graph. If Ninja reaches an end node (say \u2018END\u2019) (a node that has no outgoing directed edges), Ninja stops walking.</h4>\n\n<h4 id=\"now-a-starting-node-start-is-a-safe-node-only-if-ninja-must-eventually-walk-to-an-end-node-end-more-specifically-there-must-be-a-natural-number-k-so-that-ninja-must-have-stopped-at-an-end-node-in-less-than-k-steps-for-any-choice-of-where-to-walk\">Now a starting node \u2018START\u2019 is a safe node only if Ninja must eventually walk to an end node \u2018END\u2019. More specifically, there must be a natural number \u2018K\u2019, so that Ninja must have stopped at an end node in less than \u2018K\u2019 steps for any choice of where to walk.</h4>\n\n<h4 id=\"for-example-for-the-graph-as-shown-in-the-picture-below-2-4-are-the-only-safe-nodes\">For Example: For the graph, as shown in the picture below, [2, 4] are the only safe nodes.</h4>\n\n<p><img src=\"https://files.codingninjas.in/example-8715.png\" alt=\"img\"></p>\n\n<h4 id=\"ninja-wants-to-know-all-the-safe-nodes-in-the-graph-in-sorted-order-can-you-help-ninja-to-find-out-all-the-safe-nodes\">Ninja wants to know all the safe nodes in the graph in sorted order. Can you help Ninja to find out all the safe nodes?</h4>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains an integer \u2018N\u2019 and \u2018E\u2019 representing the number of nodes and edges in the graph.\n\nThe next \u2018E\u2019 lines of each test case contain two single space-separated integers denoting \u2018EDGES[i][0]\u2019 and \u2018EDGES[i][1]\u2019 which is a directed edge from node \u2018EDGES[i][0]\u2019 to \u2018EDGE[i][1]\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the safe nodes in sorted order.\n\nThe output for each test case is printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10 ^ 4\n1 &lt;= E &lt;= 10 ^ 4\n0 &lt;= EDGE[i][0] and EDGE[i][1] &lt; N\n\nWhere \u2018EDGE[i][0]\u2019 and \u2018EDGE[i][1]\u2019 represents the directed edge.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 2\n1 2\n2 0\n2 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0 1 2\n0 1\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>For the first test case:\n[0, 1, 2] are the safe nodes. See the picture below for your reference:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/st11-8716.png\" alt=\"img\"></p>\n\n<pre><code>For the second case:\n[0, 1] are the safe nodes. Because there is no edge between nodes so each node is a starting and an ending node.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5 3\n0 1\n1 0\n0 2\n2 2\n0 1\n1 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2 3 4\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>For the first test case:\n[2, 3, 4] are the safe nodes. See the picture below for your reference:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/st21-8718.png\" alt=\"img\"></p>\n\n<pre><code>For the second test case:\nThere are no safe nodes. So we return an empty array/list.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph with 'N' nodes and 'E' edges represented by a matrix/list 'EDGES', determine the safe nodes. A safe node is a node from which any path eventually leads to an end node (a node with no outgoing edges) within a finite number of steps. Return a sorted list of all safe nodes in the graph.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^4",
                    "1 <= E <= 10^4",
                    "0 <= EDGE[i][0] and EDGE[i][1] < N",
                    "'EDGE[i][0]' and 'EDGE[i][1]' represent a directed edge."
                ],
                "testcases": [
                    {
                        "input": "3 2\n1 2\n2 0\n2 0",
                        "output": "0 1 2",
                        "explanation": "Nodes 0, 1, and 2 are safe nodes. All paths from these nodes eventually lead to end nodes."
                    },
                    {
                        "input": "2 0",
                        "output": "0 1",
                        "explanation": "Nodes 0 and 1 are safe nodes because there are no edges in the graph and each node is both a starting and ending node."
                    },
                    {
                        "input": "5 3\n0 1\n1 0\n0 2\n2 2\n0 1\n1 0",
                        "output": "2 3 4",
                        "explanation": "Nodes 2, 3 and 4 are the safe nodes.  Starting from node 2 leads to node 2, but 3 and 4 are end nodes and safe."
                    },
                    {
                        "input": "2 2\n0 1\n1 0",
                        "output": null,
                        "explanation": "There are no safe nodes.  Following the edges leads to cycles that never reach an end node."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to solve this problem iteratively.</p>",
            "<p>Try to solve this problem recursively<strong>.</strong></p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}