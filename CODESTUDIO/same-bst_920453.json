{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8866,
            "title": "Same BST",
            "titleSlug": "same-bst_920453",
            "content": "<h4 id=\"you-are-given-two-binary-search-trees-your-task-is-to-check-whether-the-two-bsts-contains-the-same-set-of-elements-or-not\">You are given two binary search trees. Your task is to check whether the two BSTs contains the same set of elements or not.</h4>\n\n<h4 id=\"the-structure-of-the-two-given-bsts-can-be-different\">The structure of the two given BSTs can be different.</h4>\n\n<h4 id=\"note-all-elements-in-a-given-bst-are-unique\">Note: All elements in a given BST are unique.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/0000000000000743.PNG\" alt=\"alttext\"></p>\n\n<pre><code>The above two BSTs contain the same set of elements, hence the answer is True.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases to be run. \nThen the test cases follow.\n\nThe first line of each test case contains the elements of the first binary tree in the level order form separated by a single space.\n\nThe Second line of each test case contains the elements of the second binary tree in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-4-11453.png\" alt=\"\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n\nNote: The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, You have to return \u2018true\u2019 if BSTs contain the same set of elements or \u2018false\u2019 if BSTs don\u2019t contain the same set of elements.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100 \n1 &lt;= N &lt;= 1000\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n10 5 -1 -1 2 8 -1 -1 6 -1 -1 \n26 -1 52 -1 78 -1 -1 \n26 -1 52 -1 78 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>false\ntrue \n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>In test case 1:\nThe  first binary tree will be like the following:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-11456.png\" alt=\"\"></p>\n\n<pre><code>The elements in the first tree are 8, 5, 10, 2, 6, 7.\n\nThe second tree will be like the following:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-1-11455.png\" alt=\"\"></p>\n\n<pre><code>The element in the second tree are 10, 5, 2, 8, 6\n\nHere the elements are not the same in both the trees, hence the output will be \u201cfalse\u201d.\n\nTest Case 2:\n\nIn the second case both trees are identical, and look like this:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-2-11454.png\" alt=\"\"></p>\n\n<pre><code>Hence the output will be \u201ctrue\u201d.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n40 20 60 -1 -1 -1 80 -1 -1 \n40 20 60 -1 -1 -1 80 -1 -1 \n9 5 12 2 6 10 15 -1 -1 -1 -1 -1 -1 -1 -1\n12 9 15 5 10 -1 -1 2  -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two binary search trees, determine if they contain the same set of elements. The structure of the two trees can be different. All elements within a given BST are unique.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 1000",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n10 5 -1 -1 2 8 -1 -1 6 -1 -1",
                        "output": "false",
                        "explanation": "The first tree contains elements [8, 5, 10, 2, 6, 7]. The second tree contains [10, 5, 2, 8, 6]. The sets of elements are not equal."
                    },
                    {
                        "input": "26 -1 52 -1 78 -1 -1\n26 -1 52 -1 78 -1 -1",
                        "output": "true",
                        "explanation": "Both trees contain the same elements [26, 52, 78]."
                    },
                    {
                        "input": "40 20 60 -1 -1 -1 80 -1 -1\n40 20 60 -1 -1 -1 80 -1 -1",
                        "output": "true",
                        "explanation": "Both trees contain the same elements [40, 20, 60, 80]."
                    },
                    {
                        "input": "9 5 12 2 6 10 15 -1 -1 -1 -1 -1 -1 -1 -1\n12 9 15 5 10 -1 -1 2  -1 -1 -1 -1 -1",
                        "output": "false",
                        "explanation": "The first tree contains elements [9, 5, 12, 2, 6, 10, 15]. The second tree contains [12, 9, 15, 5, 10, 2]. Even though some elements are common, the element 6 is only present in the first tree. The sets of elements are not equal."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Inorder traversal of Binary Search tree gives nodes in non-decreasing order.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}