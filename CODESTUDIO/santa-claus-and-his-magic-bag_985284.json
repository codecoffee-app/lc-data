{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9421,
            "title": "Santa Claus and His Magic Bag",
            "titleSlug": "santa-claus-and-his-magic-bag_985284",
            "content": "<h4 id=\"this-year-santa-claus-got-a-magic-bag-for-bringing-gifts-for-children-so-magical-thing-about-this-magic-bag-is-that-whenever-the-number-of-gifts-inside-the-bag-becomes-strictly-less-than-k-gifts-it-automatically-refills-back-to-its-full-capacity-say-its-capacity-is-of-n-gifts-now-a-child-can-ask-for-m-some-positive-integer-less-than-n-gifts-from-santa-this-reduces-the-number-of-gifts-in-the-bag-by-m\">This year Santa Claus got a magic bag for bringing gifts for children. So magical thing about this magic bag is that, whenever the number of gifts inside the bag becomes strictly less than &#39;K&#39; gifts, it automatically refills back to its full capacity(say its capacity is of &#39;N&#39; gifts). Now a child can ask for &#39;M&#39; (some positive integer less than &#39;N&#39;) gifts from Santa. This reduces the number of gifts in the bag by &#39;M&#39;.</h4>\n\n<h4 id=\"on-the-occasion-of-christmas-when-santa-claus-arrived-children-of-your-locality-made-a-queue-for-taking-gifts-from-santa-claus-but-some-greedy-kids-can-ask-for-more-gifts-than-the-current-number-of-gifts-in-the-bag-which-is-regarded-as-invalid-demand-and-that-kid-doesnt-get-any-gift\">On the occasion of Christmas, when Santa Claus arrived, children of your locality made a queue for taking gifts from Santa Claus. But some greedy kids can ask for more gifts than the current number of gifts in the bag which is regarded as invalid demand and that kid doesn&#39;t get any gift.</h4>\n\n<h4 id=\"you-are-watching-this-distribution-of-gifts-and-become-curious-about-knowing-the-number-of-gifts-remaining-in-santas-bag-after-giving-gifts-to-a-kid-you-get-the-ordered-list-of-demands-of-kids-as-demands-can-you-tell-which-are-invalid-demands-and-how-many-gifts-left-in-the-bag-if-the-demand-is-valid\">You are watching this distribution of gifts, and become curious about knowing the number of gifts remaining in Santa&#39;s bag after giving gifts to a kid. You get the ordered list of demands of kids as &#39;DEMANDS&#39;, can you tell which are invalid demands and how many gifts left in the bag if the demand is valid?</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. You can assume Magic Bag is completely filled initially.\n\n2. If the demand by a kid is invalid print -1 which will denote this invalid demand.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of the input contains three space-separated integers N, K, and Q, denoting the capacity of Magic Bag, the minimum number of gifts in the bag below which it refills itself, and the size of the demand list.\n\nThe next &#39;Q&#39; lines contain an Integer one per line, denoting the number of gifts demanded by i\u2019th kid, DEMANDS[i].\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print a single line containing a single integer that denotes the number of gifts present after giving gifts to i\u2019th kid. In case of invalid demand from kid print -1.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t have to print anything. It has already been taken care of. Just Implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= K &lt;= N &lt;= 10 ^ 9\n1 &lt;= Q &lt;= 10 ^ 6\n1 &lt;= DEMANDS[i] &lt;= 2 ^ 31 \n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>10 4 3\n4\n2\n2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>6\n4\n10\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>After the 1st demand, Bag contains 10 - 4 = 6 gifts.\nAfter the 2nd demand, Bag contains 6 - 2 = 4 gifts.\nAfter the 3rd operation, Bag contains 4 - 2 = 2 gifts, but now the number of gifts in the bag is less than K, hence magic happens and bag refills back to N gifts.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>7 6 2\n3\n8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>7\n-1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>After the 1st operation, Bag contains 7 - 3 = 4 gifts which is less than K(which is 6), hence Bag refills and contains 7 gifts.\nAfter the 2nd operation, Bag contains 7 gifts, but demand is of 8 gifts from the kid, which is impossible to be fulfilled, hence this demand is invalid.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Santa has a magical bag with a capacity of 'N' gifts.  Whenever the number of gifts in the bag drops below 'K', the bag automatically refills to its full capacity 'N'. Children line up to ask for gifts ('M'). If a child asks for more gifts than are currently in the bag, the request is invalid and the child gets nothing. Given the initial capacity 'N', the refill threshold 'K', a list of gift requests 'DEMANDS', determine the number of gifts remaining in the bag after each child's request. If a request is invalid, record -1.",
                "constraints": [
                    "1 <= K <= N <= 10 ^ 9",
                    "1 <= Q <= 10 ^ 6",
                    "1 <= DEMANDS[i] <= 2 ^ 31"
                ],
                "testcases": [
                    {
                        "input": "n = 10, k = 4, q = 3, demands = [4, 2, 2]",
                        "output": "vector<int> output = {6, 4, 10};",
                        "explanation": "Initially, the bag has 10 gifts.\n1st demand (4): 10 - 4 = 6 gifts remain.\n2nd demand (2): 6 - 2 = 4 gifts remain.\n3rd demand (2): 4 - 2 = 2 gifts remain. Since 2 < 4 (K), the bag refills to 10 gifts."
                    },
                    {
                        "input": "n = 7, k = 6, q = 2, demands = [3, 8]",
                        "output": "vector<int> output = {4, -1};",
                        "explanation": "Initially, the bag has 7 gifts.\n1st demand (3): 7 - 3 = 4 gifts remain. Since 4 < 6 (K), the bag refills to 7 gifts.\n2nd demand (8):  The bag has 7 gifts, but the child wants 8, which is an invalid demand. Output -1."
                    },
                    {
                        "input": "n = 5, k = 2, q = 4, demands = [1, 1, 1, 5]",
                        "output": "vector<int> output = {4, 3, 2, 5};",
                        "explanation": "Initially, the bag has 5 gifts.\n1st demand (1): 5 - 1 = 4 gifts remain.\n2nd demand (1): 4 - 1 = 3 gifts remain.\n3rd demand (1): 3 - 1 = 2 gifts remain. Since 2 >= 2 (K), bag doesn't refill.\n4th demand (5): No refill as 2 is not strictly less than k=2. Then, 2 - 1 = 1 gift remain. As, 1 < 2 bag refills to 5 gifts."
                    },
                    {
                        "input": "n = 100, k = 10, q = 1, demands = [105]",
                        "output": "vector<int> output = {-1};",
                        "explanation": "Initially, the bag has 100 gifts. The child demands 105 gifts, which is more than the bag's capacity. The demand is invalid."
                    },
                    {
                        "input": "n = 12, k = 5, q = 5, demands = [2, 3, 1, 7, 4]",
                        "output": "vector<int> output = {10, 7, 6, 12, 8};",
                        "explanation": "Initially the bag has 12 gifts.\n1st demand (2): 12 - 2 = 10 gifts remain.\n2nd demand (3): 10 - 3 = 7 gifts remain.\n3rd demand (1): 7 - 1 = 6 gifts remain.\n4th demand (7): 6 - 7 = -1, thus bag refills to N and we have 12 gifts remain.\n5th demand (4): 12 - 4 = 8 gifts remain."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you keep a count of the previous demands to check the gifts left?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}