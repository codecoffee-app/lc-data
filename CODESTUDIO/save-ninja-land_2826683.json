{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15924,
            "title": " Save Ninja Land",
            "titleSlug": "save-ninja-land_2826683",
            "content": "<h4 id=\"unfortunately-ninja-land-is-facing-an-epidemic-there-are-n-unique-virus-variants-spread-across-ninja-land-the-ninja-land-is-an-infinite-2d-grid-you-are-in-charge-of-creating-a-vaccine-to-stop-the-spread-of-the-epidemic-your-research-team-provides-you-with-a-2d-array-points-where-points-i-xi-yi-represent-a-virus-originating-at-point-xi-yi-and-an-integer-k\">Unfortunately, Ninja Land is facing an epidemic. There are \u2018N\u2019 unique virus variants spread across Ninja Land. The Ninja Land is an infinite 2D grid. You are in charge of creating a vaccine to stop the spread of the epidemic. Your research team provides you with a 2D array \u2018POINTS\u2019, where POINTS[i] = [Xi, Yi] represent a virus originating at point  (Xi, Yi) and an integer \u2018K\u2019.</h4>\n\n<h4 id=\"every-day-each-cell-infected-with-a-virus-variant-will-spread-the-virus-to-all-neighboring-points-in-the-four-cardinal-directions-i-e-up-down-left-and-right-if-a-cell-has-multiple-variants-all-the-variants-will-spread-without-interfering-with-each-other\">Every day, each cell infected with a virus variant will spread the virus to all neighboring points in the four cardinal directions (i.e., up, down, left, and right). If a cell has multiple variants, all the variants will spread without interfering with each other.</h4>\n\n<h4 id=\"to-create-the-vaccine-you-must-find-the-minimum-number-of-days-for-any-point-to-contain-at-least-k-of-the-unique-virus-variants-can-you-save-the-ninja-land\">To create the vaccine, you must find the minimum number of days for any point to contain at least k of the unique virus variants. Can you save the Ninja Land?</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>You are given \u2018POINTS\u2019 = [[1, 1], [3, 1]] and \u2018K\u2019 = 2. The answer will be 1. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-13190.png\" alt=\"\"></p>\n\n<pre><code>On day 2, the point (2, 1) will have K = 2 variants(V1, V2).\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019 and \u2018K\u2019, representing the number of unique viruses and integer \u2018K\u2019, respectively.\n\nThe next \u2018N\u2019 lines contain two-space separated integers \u2018X\u2019 and \u2018Y\u2019 representing the originating point of the i-th virus variant.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer, denoting the minimum number of days for any point to contain at least k of the unique virus variants.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 \n2 &lt;= N &lt;= 100\n2 &lt;= K &lt;= N\nPOINTS[i].length == 2\n1 &lt;= POINTS[i][j] &lt;= 10^7\n\nTime limit: 2 sec\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to input or print anything, as it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 2\n1 3\n3 3\n3 2\n1 1\n2 3\n4 5 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code> 1\n 2\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For the first test case, the answer is 1. It will take at least one day for any point to have two unique virus variants.\nFor the second test case, the answer is 2. It will take at least two days for any point to have two unique virus variants.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2 2\n1 2\n3 3\n3 3\n2 1\n2 3\n3 5 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja Land is facing a viral epidemic with 'N' unique virus variants spreading across an infinite 2D grid. Your task is to determine the minimum number of days required for any point on the grid to be infected with at least 'K' unique virus variants.  Each day, a virus spreads from an infected cell to its four cardinal neighbors (up, down, left, right). Determine the minimum number of days to contain the viruses by creating a vaccine.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 100",
                    "2 <= K <= N",
                    "POINTS[i].length == 2",
                    "1 <= POINTS[i][j] <= 10^7",
                    "Time limit: 2 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n2 2\n1 3\n3 3\n3 2\n1 1\n2 3\n4 5",
                        "output": "1\n2",
                        "explanation": "Test Case 1: The answer is 1. After one day, some point will have two unique virus variants.\nTest Case 2: The answer is 2. After two days, some point will have two unique virus variants."
                    },
                    {
                        "input": "2\n2 2\n1 2\n3 3\n3 3\n2 1\n2 3\n3 5",
                        "output": "2\n3",
                        "explanation": "Test Case 1: The answer is 2.\nTest Case 2: The answer is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find the intersection of areas affected by virus variants.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Computational Geometry",
                "slug": "computational-geometry"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}