{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9193,
            "title": "Search in a 2D matrix",
            "titleSlug": "search-in-a-2d-matrix_980531",
            "content": "<h4 id=\"you-have-been-given-a-2-d-array-mat-of-size-m-x-n-where-m-and-n-denote-the-number-of-rows-and-columns-respectively-the-elements-of-each-row-are-sorted-in-non-decreasing-order\">You have been given a 2-D array <strong><em>&#39;mat&#39;</strong></em> of size <strong><em>&#39;M x N&#39;</strong></em> where &#39;M&#39; and &#39;N&#39; denote the number of rows and columns, respectively. The elements of each row are sorted in non-decreasing order.</h4>\n\n<p><br></p>\n\n<h4 id=\"moreover-the-first-element-of-a-row-is-greater-than-the-last-element-of-the-previous-row-if-it-exists\">Moreover, the first element of a row is greater than the last element of the previous row (if it exists).</h4>\n\n<p><br></p>\n\n<h4 id=\"you-are-given-an-integer-target-and-your-task-is-to-find-if-it-exists-in-the-given-mat-or-not\">You are given an integer <strong><em>\u2018target\u2019</strong></em>, and your task is to find if it exists in the given &#39;mat&#39; or not.</h4>\n\n<p><br></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018M\u2019 = 3, &#39;N&#39; = 4, \u2018mat\u2019 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], \u2018target\u2019 = 8\n\nOutput: true\n\nExplanation: The output should be true as &#39;8&#39; exists in the matrix.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains three space-separated integers &#39;M&#39;, &#39;N&#39;, and \u2018target\u2019 where &#39;M&#39; and &#39;N&#39; denote the number of rows and columns of the &#39;mat&#39;, respectively, and \u2018target\u2019 is the integer to be found.\n\nFrom the second line, the next &#39;M&#39; lines represent the rows of the &#39;mat&#39;. Every row contains &#39;N&#39; single space-separated integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Return &#39;true&#39; if \u2018target\u2019 is present in the &#39;mat&#39;; else, return &#39;false&#39;.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow-Up:</h5>\n\n<pre><code>Can you solve this problem in less than O(M*N) time complexity?\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3 4 8\n1 2 3 4\n5 6 7 8\n9 10 11 12\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>true\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>The \u2018target\u2019  = 8 exists in the &#39;mat&#39; at index (1, 3).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3 3 78\n1 2 4 \n6 7 8\n9 10 34\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>false\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h5>\n\n<pre><code>The \u2018target&#39; = 78 does not exist in the &#39;mat&#39;. Therefore in the output, we see &#39;false&#39;.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;= 50\n1 &lt;= M &lt;= 50\n-10^5 &lt;= mat[i], target &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 164,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D array `mat` of size M x N, where each row is sorted in non-decreasing order and the first element of a row is greater than the last element of the previous row (if it exists), determine if a given integer `target` exists within the `mat`.",
                "constraints": [
                    "1 <= N <= 50",
                    "1 <= M <= 50",
                    "-10^5 <= mat[i], target <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "mat = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], target = 8",
                        "output": "true",
                        "explanation": "The target value 8 is present in the matrix at index (1, 3)."
                    },
                    {
                        "input": "mat = [[1, 2, 4], [6, 7, 8], [9, 10, 34]], target = 78",
                        "output": "false",
                        "explanation": "The target value 78 is not present in the matrix."
                    },
                    {
                        "input": "mat = [[1]], target = 1",
                        "output": "true",
                        "explanation": "The target value 1 is present in the matrix at index (0, 0)."
                    },
                    {
                        "input": "mat = [[1]], target = 2",
                        "output": "false",
                        "explanation": "The target value 2 is not present in the matrix."
                    },
                    {
                        "input": "mat = [[1, 3, 5], [7, 9, 11], [13, 15, 17]], target = 13",
                        "output": "true",
                        "explanation": "The target value 13 is present in the matrix at index (2, 0)."
                    },
                    {
                        "input": "mat = [[1, 3, 5], [7, 9, 11], [13, 15, 17]], target = 6",
                        "output": "false",
                        "explanation": "The target value 6 is not present in the matrix."
                    },
                    {
                        "input": "mat = [[1, 3, 5], [7, 9, 11], [13, 15, 17]], target = 17",
                        "output": "true",
                        "explanation": "The target value 17 is present in the matrix at index (2, 2)."
                    },
                    {
                        "input": "mat = [[1, 3, 5], [7, 9, 11], [13, 15, 17]], target = 0",
                        "output": "false",
                        "explanation": "The target value 0 is not present in the matrix."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Naively search the MAT to find the TARGET.</p>",
            "<p>Think of the matrix as a 1D array with M*N elements.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity : O(log(M*N))\n    Space Complexity : O(1)\n\n    Where M and N denote the number of rows and columns \n*/\nbool searchMatrix(vector<vector<int>>& mat, int target) {\n    // Declare variables 'm' and 'n',\n    // and initially assigned to \n    // number of rows and number of columns respectively.\n    int m = mat.size(), n = mat[0].size();\n    \n    // Declare two variables 'start' and 'end'.\n    int start = 0, end = m * n - 1;\n\n    // Binary search.\n    while (start <= end) {\n        \n        // Declare a variable 'mid'\n        // which is assigned to the middle value of\n        // 'start' and 'end'\n        int mid = start + (end - start) / 2;\n        \n        // Get the value at 'mid'\n        int val = mat[mid / n][mid % n];\n\n        if (target < val) {\n            // If current value is greater than 'target'\n            // we will decrease 'end'\n            end = mid - 1;\n        } else if (target > val) {\n            // If current value is smaller than 'target'\n            // we will increase 'start'\n            start = mid + 1;\n        } else {\n            return true;\n        }\n    }\n    \n    // If we didn't found anything,\n    // we will return 'false'\n    return false;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "\r\n/*\r\n    Time Complexity : O(log(M*N))\r\n    Space Complexity : O(1)\r\n\r\n    Where M and N denote the number of rows and columns \r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n    static boolean searchMatrix(ArrayList<ArrayList<Integer>> mat, int target) {\r\n        // Declare variables 'm' and 'n',\r\n        // and initially assigned to\r\n        // number of rows and number of columns respectively.\r\n        int m = mat.size(), n = mat.get(0).size();\r\n\r\n        // Declare two variables 'start' and 'end'.\r\n        int start = 0, end = m * n - 1;\r\n\r\n        // Binary search.\r\n        while (start <= end) {\r\n\r\n            // Declare a variable 'mid'\r\n            // which is assigned to the middle value of\r\n            // 'start' and 'end'\r\n            int mid = start + (end - start) / 2;\r\n\r\n            // Get the value at 'mid'\r\n            int val = mat.get(mid / n).get(mid % n);\r\n\r\n            if (target < val) {\r\n                // If current value is greater than 'target'\r\n                // we will decrease 'end'\r\n                end = mid - 1;\r\n            } else if (target > val) {\r\n                // If current value is smaller than 'target'\r\n                // we will increase 'start'\r\n                start = mid + 1;\r\n            } else {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        // If we didn't found anything,\r\n        // we will return 'false'\r\n        return false;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time Complexity: O(log(M*N))\r\n    Space Complexity: O(1)\r\n\r\n    Where M and N are the number of rows and columns.\r\n\"\"\"\r\n\r\n\r\ndef searchMatrix(mat: [[int]], target: int) -> bool:\r\n    m = len(mat)\r\n    n = len(mat[0])\r\n    start, end = 0, m * n - 1\r\n\r\n    # Binary search.\r\n    while start <= end:\r\n\r\n        mid = start + (end - start) // 2\r\n        val = mat[mid // n][mid % n]\r\n\r\n        if target < val:\r\n            end = mid - 1\r\n\r\n        elif target > val:\r\n            start = mid + 1\r\n\r\n        else:\r\n            return True\r\n\r\n    return False\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}