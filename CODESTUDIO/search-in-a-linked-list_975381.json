{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9110,
            "title": "Search in a Linked List",
            "titleSlug": "search-in-a-linked-list_975381",
            "content": "<h4 id=\"you-are-given-a-singly-linked-list-of-integers-with-a-head-pointer-every-node-of-the-linked-list-has-a-value-written-on-it\">You are given a Singly Linked List of integers with a head pointer. Every node of the Linked List has a value written on it.</h4>\n\n<p><br/></p>\n\n<h4 id=\"a-sample-linked-list\">A sample Linked List:</h4>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-6494.png\" alt=\"Sample Linked List\">\n<br/>        </p>\n\n<h4 id=\"now-you-have-been-given-an-integer-value-k-your-task-is-to-check-whether-a-node-with-a-value-equal-to-k-exists-in-the-given-linked-list-return-1-if-node-exists-else-return-0\">Now you have been given an integer value, <em><strong>&#39;K&#39;</strong></em>. Your task is to check whether a node with a value equal to &#39;K&#39; exists in the given linked list. Return 1 if node exists else return 0.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains space-separated integers denoting the values of nodes of the Linked List. \n\nThe Linked List is terminated with -1. Hence, -1 is never a node value of the Linked List.\n\nThe second line contains a single integer &#39;K&#39;, which is desired to be checked in the Linked List.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line contains 1 if the desired value &#39;K&#39; exists in the Linked List, otherwise, print 0.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been handled. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3 6 2 7 9 -1\n2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>As value 2 exists in the given linked list. So we will return 1 in this case.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-2-6492.png\" alt=\"alt img\">   </p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1 2 3 7 -1\n7\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2:</h5>\n\n<pre><code>As the value 7 exists in the Linked List, our answer is 1.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/untitled-diagram-3-6491.png\" alt=\"alt img\"></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try solving this in O(L).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;L&#39; &lt;= 10^5\n1 &lt;= &#39;data&#39; &lt;= 10^9 and &#39;data&#39; != -1\n1 &lt;= &#39;K&#39; &lt;= 10^9   \n\nWhere &#39;L&#39; represents the total number of nodes in the Linked List, &#39;data&#39; represents the value at each node, and &#39;K&#39; is the given integer.\n\nTime Limit: 1 sec.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 98,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the head of a singly linked list of integers and an integer 'k', determine if a node with the value 'k' exists in the linked list. Return 1 if a node with value 'k' exists; otherwise, return 0.",
                "constraints": [
                    "1 <= 'L' <= 10^5, where 'L' is the number of nodes in the linked list.",
                    "1 <= 'data' <= 10^9 and 'data' != -1, where 'data' is the value of each node.",
                    "1 <= 'K' <= 10^9, where 'K' is the integer to search for."
                ],
                "testcases": [
                    {
                        "input": "head = [3, 6, 2, 7, 9, -1], k = 2",
                        "output": "1",
                        "explanation": "The linked list contains the value 2, so the output is 1."
                    },
                    {
                        "input": "head = [1, 2, 3, 7, -1], k = 7",
                        "output": "1",
                        "explanation": "The linked list contains the value 7, so the output is 1."
                    },
                    {
                        "input": "head = [1, 2, 3, 4, 5, -1], k = 6",
                        "output": "0",
                        "explanation": "The linked list does not contain the value 6, so the output is 0."
                    },
                    {
                        "input": "head = [10, 20, 30, -1], k = 10",
                        "output": "1",
                        "explanation": "The linked list contains the value 10, which is at the head, so the output is 1."
                    },
                    {
                        "input": "head = [5, 5, 5, 5, -1], k = 5",
                        "output": "1",
                        "explanation": "The linked list contains the value 5, so the output is 1."
                    },
                    {
                        "input": "head = [-1], k = 5",
                        "output": "0",
                        "explanation": "The linked list is empty or invalid, thus does not contain the value 5, so the output is 0."
                    },
                    {
                        "input": "head = [999999999, -1], k = 999999999",
                        "output": "1",
                        "explanation": "The linked list contains the value 999999999, so the output is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a solution to traverse the Linked List recursively and then check.</p>",
            "<p>Think of a solution to traverse the Linked List iteratively and then check.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Compexity: O(1)\r\n\r\n    Where 'N' is the total nodes in Linked List.\r\n*/\r\n\r\nint searchInLinkedList(Node<int> *head, int k)\r\n{\r\n\r\n    // Check if the Linked List is empty.\r\n    if (head == NULL)\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    // Initialising a pointer pointing to head.\r\n    Node<int> *ptr = head;\r\n\r\n    while (ptr)\r\n    {\r\n\r\n        // If value is found we end our search.\r\n        if (ptr->data == k)\r\n        {\r\n            return 1;\r\n        }\r\n\r\n        // Moving the pointer to the next node.\r\n        ptr = ptr->next;\r\n    }\r\n\r\n    // As we reached the end of Linked List without finding value so will return 0.\r\n    return 0;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Compexity: O(1)\r\n\r\n    Where 'N' is the total nodes in Linked List.\r\n*/\r\npublic class Solution\r\n{\r\n    public static int searchInLinkedList(Node head, int k)\r\n    {\r\n\r\n        // Check if the Linked List is empty.\r\n        if (head == null) {\r\n            return 0;\r\n        }\r\n\r\n        // Initialising a pointer pointing to head.\r\n        Node ptr = head;\r\n\r\n        while (ptr != null) {\r\n\r\n            // If value is found we end our search.\r\n            if (ptr.data == k) {\r\n                return 1;\r\n            }\r\n\r\n            // Moving the pointer to the next node.\r\n            ptr = ptr.next;\r\n        }\r\n\r\n        // As we reached the end of Linked List without finding value so will return 0.\r\n        return 0;\r\n\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(N)\n    Space Compexity: O(1)\n\n    Where 'N' is the total nodes in Linked List.\n'''\n\nclass Node:\n    \n    def __init__(self,data):\n        self.data = data\n        self.next = None\n\ndef searchInLinkedList(head,k):\n    \n    # Check if the Linked List is empty.\n    if head is None:\n        return 0\n    \n    # Initialising a pointer pointing to head.\n    ptr = head\n    \n    while ptr != None:\n        \n        # If value is found we end our search.\n        if ptr.data == k:\n            return 1\n        \n        # Moving the pointer to the next node.\n        ptr = ptr.next\n        \n    # As we reached the end of Linked List without finding value so will return 0.   \n    return 0\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}