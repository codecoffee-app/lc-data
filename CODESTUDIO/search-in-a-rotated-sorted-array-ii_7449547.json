{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 24526,
            "title": "Search In A Rotated Sorted Array II",
            "titleSlug": "search-in-a-rotated-sorted-array-ii_7449547",
            "content": "<h4 id=\"you-are-given-a-rotated-sorted-array-a-of-length-n-and-a-key-you-need-to-determine-if-the-key-exists-in-the-array-a\">You are given a rotated sorted array <em><strong>&#39;a&#39;</strong></em> of length <em><strong>&#39;n&#39;</strong></em> and a <em><strong>&#39;key&#39;</strong></em>. You need to determine if the &#39;key&#39; exists in the array &#39;a&#39;.</h4>\n\n<p><br></p>\n\n<h4 id=\"the-given-sorted-array-is-rotated-from-an-unknown-index-x-such-that-after-rotation-the-array-became-a-x-a-x-1-a-n-1-a-1-a-x-1-0-based-indexing-for-example-if-the-array-is-1-2-3-4-5-and-x-2-then-the-rotated-array-will-be-3-4-5-1-2-3\">The given sorted array is rotated from an unknown index &#39;x&#39;. Such that after rotation the array became [a[x], a[x+1]...., a[n-1], a[1]..., a[x-1]], (0-based indexing). For example, if the array is [1, 2, 3, 4, 5] and x = 2 then the rotated array will be [3, 4, 5, 1, 2, 3].</h4>\n\n<p><br/></p>\n\n<h4 id=\"return-true-if-the-key-is-found-in-a-otherwise-return-false\">Return True if the &#39;key&#39; is found in &#39;a&#39;. Otherwise, return False.</h4>\n\n<p><br/></p>\n\n<h4 id=\"note-array-a-may-contain-duplicate-elements\">Note: Array \u2018a\u2019 may contain duplicate elements.</h4>\n\n<p><br/></p>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Input: a = [6, 10, 1, 3, 5], key = 3\n\nOutput: True\n\nExplanation: The array &#39;a&#39; contains the &#39;key&#39; = 3, so we return True.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains two integers, &#39;n&#39; and &#39;key&#39;, separated by a space.\nThe next line contains &#39;n&#39; space-separated integers representing the elements of the array &#39;n&#39;.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return a boolean &#39;true&#39; or &#39;false&#39; as stated in the problem statement. &#39;True&#39; is printed for a returned value of &#39;true&#39; and &#39;False&#39; otherwise.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>7 4\n3 4 5 0 0 1 2\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>Input: a = [3, 4, 5, 0, 0, 1, 2], key = 4\n\nOutput: True\n\nExplanation: The array &#39;a&#39; contains the &#39;key&#39; = 3, so we return True.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>6 47\n31 44 56 0 10 13\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>False\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to solve this with average time complexity O(log(n)).\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10^5\n0 &lt;= &#39;a[i]&#39;, &#39;key&#39; &lt;= 10^9\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 158,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a rotated sorted array 'a' of length 'n' and a 'key', determine if the 'key' exists in the array 'a'. The array 'a' is rotated at an unknown index 'x'. This means that the array may have been shifted such that a portion of the array appears at the beginning and another portion at the end. Note that the array may contain duplicate elements.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "0 <= a[i], key <= 10^9",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "7 4\n3 4 5 0 0 1 2",
                        "output": "True",
                        "explanation": "The array [3, 4, 5, 0, 0, 1, 2] contains the key 4, so the output is True."
                    },
                    {
                        "input": "6 47\n31 44 56 0 10 13",
                        "output": "False",
                        "explanation": "The array [31, 44, 56, 0, 10, 13] does not contain the key 47, so the output is False."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We can linearly iterate over the array to find the \u2018key\u2019.</p>",
            "<p>Even after rotation, the array is sorted but divided into two parts.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O( N )\r\n    Space Complexity: O( 1 )\r\n\r\n    Where 'N' is the length of array 'A'.\r\n*/\r\n\r\nbool searchInARotatedSortedArrayII(vector<int>&A, int key) {\r\n    int n = A.size();\r\n\r\n    // Initial 'low' and 'high' for binary search.\r\n    int low = 0, high = n - 1;\r\n\r\n    while (low <= high) {\r\n\r\n        // Calculate the 'mid'.\r\n        int mid = (high - low) / 2 + low;\r\n\r\n        // If 'key' is found, return True.\r\n        if (A[mid] == key) {\r\n            return true;\r\n        }\r\n\r\n        // Left part is sorted.\r\n        else if (A[mid] > A[high]) {\r\n            if (A[low] <= key and key < A[mid]) {\r\n                high = mid - 1;\r\n            }\r\n            else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        // Right part is sorted.\r\n        else if (A[mid] < A[high]) {\r\n            if (A[mid] < key and key <= A[high]) {\r\n                low = mid + 1;\r\n            }\r\n            else {\r\n                high = mid - 1;\r\n            }\r\n        }\r\n\r\n        // Found duplicate element.\r\n        else {\r\n            high = high - 1;\r\n        }\r\n    }\r\n\r\n    // 'key' not found in the array, hence return False.\r\n    return false;\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\n    Time Complexity: O( N )\n    Space Complexity: O( 1 )\n\n    Where 'N' is the length of array 'A'.\n\"\"\"\nfrom typing import *\n\ndef searchInARotatedSortedArrayII(A : List[int], key : int) -> bool:\n\n    n = len(A)\n\n    # Initial 'low' and 'high' for binary search.\n    low, high = 0, n - 1\n\n    while low <= high:\n\n        # Calculate the 'mid'.\n        mid = (high - low) // 2 + low\n\n        # If 'key' is found, return True.\n        if A[mid] == key:\n            return True\n        elif A[mid] > A[high]:\n            # Left part is sorted.\n            if A[low] <= key and key < A[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        elif A[mid] < A[high]:\n            # Right part is sorted.\n            if A[mid] < key and key <= A[high]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        else:\n            # Found duplicate element.\n            high = high - 1\n\n    # 'key' not found in the array, hence return False.\n    return False",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O( N )\r\n    Space Complexity: O( 1 )\r\n\r\n    Where 'N' is the length of array 'A'.\r\n*/\r\n\r\npublic class Solution {\r\n    public static boolean searchInARotatedSortedArrayII(int []A, int key) {\r\n        int n = A.length;\r\n\r\n        // Initial 'low' and 'high' for binary search.\r\n        int low = 0, high = n - 1;\r\n\r\n        while (low <= high) {\r\n\r\n            // Calculate the 'mid'.\r\n            int mid = (high - low) / 2 + low;\r\n\r\n            // If 'key' is found, return True.\r\n            if (A[mid] == key) {\r\n                return true;\r\n            }\r\n\r\n            // Left part is sorted.\r\n            else if (A[mid] > A[high]) {\r\n                if (A[low] <= key && key < A[mid]) {\r\n                    high = mid - 1;\r\n                }\r\n                else {\r\n                    low = mid + 1;\r\n                }\r\n            }\r\n\r\n            // Right part is sorted.\r\n            else if (A[mid] < A[high]) {\r\n                if (A[mid] < key && key <= A[high]) {\r\n                    low = mid + 1;\r\n                }\r\n                else {\r\n                    high = mid - 1;\r\n                }\r\n            }\r\n\r\n            // Found duplicate element.\r\n            else {\r\n                high = high - 1;\r\n            }\r\n        }\r\n\r\n        // 'key' not found in the array, hence return False.\r\n        return false;\r\n    }\r\n} ",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}