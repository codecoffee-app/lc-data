{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12049,
            "title": "Search In BST.",
            "titleSlug": "search-in-bst_1402878",
            "content": "<h4 id=\"there-is-a-binary-search-tree-bst-consisting-of-n-nodes-each-node-of-this-bst-has-some-integer-data\">There is a Binary Search Tree (BST) consisting of <em><strong>\u2018N\u2019</strong></em> nodes. Each node of this BST has some integer data.</h4>\n\n<p><br></p>\n\n<h4 id=\"you-are-given-the-root-node-of-this-bst-and-an-integer-x-return-true-if-there-is-a-node-in-bst-having-data-equal-to-x-otherwise-return-false\">You are given the root node of this BST, and an integer <em><strong>\u2018X\u2019</strong></em>.  Return true if there is a node in BST having data equal to \u2018X\u2019, otherwise return false.</h4>\n\n<p><br></p>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-that-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure that has the following properties:</h4>\n\n<pre><code>1. The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\n2. The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\n3. The left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>It is guaranteed that all nodes have distinct data.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains two positive integers \u2018N and \u2018X\u2019, denoting the number of nodes in the BST and a given integer.\n\nThe second line contains the tree elements separated by a single space in the level order form. If any node has no left or right child, we take -1 in its place. Refer to the example below for further clarification.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bsttominheap-6482.jpg\" alt=\"image\"></p>\n\n<pre><code>4\n2 6\n1 3 5 7\n-1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 4\n\nLevel 2 :\nLeft child of 4 = 2\nRight child of 4 = 6\n\nLevel 3 :\nLeft child of 2 = 1\nRight child of 2 = 3\nLeft child of 6 = 5\nRight child of 6 = 7\n\nLevel 4 :\nLeft child of 1 = null (-1)\nRight child of 1 = null (-1)\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The above format was to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print \u201cTrue\u201d if there is a node in BST having data equal to \u2018X\u2019, otherwise, print \u201cFalse\u201d.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been handled. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>7 8\n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>False\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>There is no node having data 8. See the problem statement for the picture of this BST.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4 1\n3 1 5 -1 2 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>True\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>There is a left node, and it has data 1. Thus, we should print \u2018True\u2019. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 10000\n0 &lt;= X &lt;= 10^9\n0 &lt;= DATA &lt;=10^9\n\nWhere \u2018N\u2019 is the number of nodes in the BST, \u2018X\u2019 is a given integer and \u2018DATA\u2019 is the data contained in each node of BST.\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 74,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a Binary Search Tree (BST) and an integer 'X', determine if a node with data equal to 'X' exists within the BST. Return true if such a node exists, and false otherwise.",
                "constraints": [
                    "1 <= N <= 10000, where N is the number of nodes in the BST.",
                    "0 <= X <= 10^9, where X is the integer to search for.",
                    "0 <= DATA <= 10^9, where DATA is the value contained in each node of the BST."
                ],
                "testcases": [
                    {
                        "input": "root = [4, 2, 6, 1, 3, 5, 7], x = 8",
                        "output": "False",
                        "explanation": "The BST contains the values [1, 2, 3, 4, 5, 6, 7]. Since 8 is not present in the BST, the function should return False."
                    },
                    {
                        "input": "root = [3, 1, 5, -1, 2, -1, -1], x = 1",
                        "output": "True",
                        "explanation": "The BST contains the values [1, 2, 3, 5]. The node with data 1 is present, so the function should return True."
                    },
                    {
                        "input": "root = [5, 3, 7, 2, 4, 6, 8], x = 6",
                        "output": "True",
                        "explanation": "The BST contains node with value 6, the function should return True."
                    },
                    {
                        "input": "root = [5, 3, 7, 2, 4, 6, 8], x = 9",
                        "output": "False",
                        "explanation": "The BST does not contain node with value 9, the function should return False."
                    },
                    {
                        "input": "root = [1], x = 1",
                        "output": "True",
                        "explanation": "The BST contains only root with value 1, the function should return True."
                    },
                    {
                        "input": "root = [1], x = 2",
                        "output": "False",
                        "explanation": "The BST contains only root with value 1, the function should return False."
                    },
                    {
                        "input": "root = [10, 5, 15, 2, 7, 12, 17], x = 12",
                        "output": "True",
                        "explanation": "The BST contains 12, function returns True"
                    },
                    {
                        "input": "root = [10, 5, 15, 2, 7, 12, 17], x = 13",
                        "output": "False",
                        "explanation": "The BST does not contain 13, function returns False"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you use the property of the binary search tree to solve this problem ?</p>",
            "<p>Can you implement the previous approach iteratively ?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}