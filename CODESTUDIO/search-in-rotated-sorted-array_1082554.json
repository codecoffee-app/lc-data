{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9733,
            "title": "Search In Rotated Sorted Array",
            "titleSlug": "search-in-rotated-sorted-array_1082554",
            "content": "<h4 id=\"you-have-been-given-a-sorted-array-list-arr-consisting-of-n-elements-you-are-also-given-an-integer-k\">You have been given a sorted array/list <em><strong>&#39;arr&#39;</strong></em> consisting of <em><strong>\u2018n\u2019</strong></em> elements. You are also given an integer <em><strong>\u2018k\u2019</strong></em>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"now-the-array-is-rotated-at-some-pivot-point-unknown-to-you\">Now the array is rotated at some pivot point unknown to you.</h4>\n\n<p><br/></p>\n\n<h4 id=\"for-example-if-arr-1-3-5-7-8-then-after-rotating-arr-at-index-3-the-array-will-be-arr-7-8-1-3-5\">For example, if &#39;arr&#39; = [ 1, 3, 5, 7, 8], then after rotating &#39;arr&#39; at index 3, the array will be &#39;arr&#39; = [7, 8, 1, 3, 5].</h4>\n\n<p><br/></p>\n\n<h4 id=\"now-your-task-is-to-find-the-index-at-which-k-is-present-in-arr\">Now, your task is to find the index at which \u2018k\u2019 is present in &#39;arr&#39;.</h4>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. If \u2018k\u2019 is not present in &#39;arr&#39;, then print -1.\n2. There are no duplicate elements present in &#39;arr&#39;. \n3. &#39;arr&#39; can be rotated only in the right direction.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: &#39;arr&#39; = [12, 15, 18, 2, 4] , &#39;k&#39; = 2\n\nOutput: 3\n\nExplanation:\nIf &#39;arr&#39; = [12, 15, 18, 2, 4] and &#39;k&#39; = 2, then the position at which &#39;k&#39; is present in the array is 3 (0-indexed).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>In the first line, two single-space separated integers \u2018n\u2019 and \u2018k\u2019, respectively.\nThe second line, \u2018n\u2019 single space-separated integers, denotes the array/list &#39;arr&#39; elements.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The only line contains the index at which &#39;k&#39; is present in &#39;arr&#39;.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been handled. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4 3\n8 9 4 5\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>-1 \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h5>\n\n<pre><code>For the test case, 3 is not present in the array. Hence the output will be -1.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4 3\n2 3 5 8\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to do this in O(log(n)). \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= n &lt;= 10^5\n0 &lt;= k &lt;= 10^9\n0 &lt;= arr[i] &lt;= 10^9\n\nTime Limit: 1 second\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 627,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a sorted array 'arr' of 'n' elements that has been rotated at an unknown pivot point. You are also given an integer 'k'. Your task is to find the index of 'k' in the rotated array. If 'k' is not present in 'arr', return -1. There are no duplicate elements in 'arr', and the array is rotated only in the right direction.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "0 <= k <= 10^9",
                    "0 <= arr[i] <= 10^9",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "4 3\n8 9 4 5",
                        "output": "-1",
                        "explanation": "'k' (3) is not present in the array, so the output is -1."
                    },
                    {
                        "input": "4 3\n2 3 5 8",
                        "output": "1",
                        "explanation": "'k' (3) is present at index 1 in the array."
                    },
                    {
                        "input": "5 2\n12 15 18 2 4",
                        "output": "3",
                        "explanation": "'k' (2) is present at index 3 in the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Naively traverse the array and find if \u2018k\u2019 is present or not.</p>",
            "<p>Try to use binary search to solve the problem.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(log(N))\r\n    Space Complexity : O(1)\r\n\r\n    where N is the length of array.\r\n*/\r\n\r\n\r\nint binarySearch(vector<int>& arr, int si, int ei, int k)\r\n{\r\n    while(si <= ei)\r\n    {\r\n        int mid = si + (ei - si) / 2;\r\n\r\n        if(arr[mid] == k)\r\n        {\r\n            return mid;\r\n        }\r\n\r\n        if(arr[mid] > k)\r\n        {\r\n            ei = mid - 1;\r\n        }\r\n        else\r\n        {\r\n            si = mid + 1;\r\n        }\r\n    }\r\n\r\n    return -1;\r\n}\r\n\r\n\r\nint search(vector<int>& arr, int n, int k)\r\n{\r\n    int si = 0, ei = n - 1;\r\n\r\n    int pivot = 0, index;\r\n\r\n    while(si <= ei)\r\n    {\r\n        int mid = si + (ei - si) / 2;\r\n\r\n        if(arr[mid] < arr[0])\r\n        {\r\n            pivot = mid;\r\n            ei = mid - 1;\r\n        }\r\n        else\r\n        {\r\n            si = mid + 1;\r\n        }\r\n    }\r\n\r\n    if(pivot == 0 || (k <= arr[n - 1] && k >= arr[pivot]))\r\n    {\r\n        index = binarySearch(arr, pivot, n - 1, k);\r\n    }\r\n    else\r\n    {\r\n        index = binarySearch(arr, 0, pivot - 1, k);\r\n    }\r\n\r\n    return index;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(log2(N))\r\n    Space Complexity : O(1)\r\n\r\n    where N is the length of array.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n    public static int binarySearch(ArrayList<Integer> arr, int si, int ei, int k) {\r\n        while (si <= ei) {\r\n            int mid = si + (ei - si) / 2;\r\n\r\n            if (arr.get(mid) == k) {\r\n                return mid;\r\n            }\r\n\r\n            if (arr.get(mid) > k) {\r\n                ei = mid - 1;\r\n            } else {\r\n                si = mid + 1;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n\r\n    }\r\n\r\n    public static int search(ArrayList<Integer> arr, int n, int k) {\r\n        int si = 0, ei = n - 1;\r\n\r\n        int pivot = 0, index;\r\n        // Finding the pivot element.\r\n        while (si <= ei) {\r\n            int mid = si + (ei - si) / 2;\r\n\r\n            if (arr.get(mid) < arr.get(0)) {\r\n                pivot = mid;\r\n                ei = mid - 1;\r\n            } else {\r\n                si = mid + 1;\r\n            }\r\n        }\r\n        // Searching for element in two half using binary search.\r\n        if (pivot == 0 || (k <= arr.get(n - 1) && k >= arr.get(pivot))) {\r\n            index = binarySearch(arr, pivot, n - 1, k);\r\n        } else {\r\n            index = binarySearch(arr, 0, pivot - 1, k);\r\n        }\r\n\r\n        return index;\r\n\r\n    }\r\n\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity : O(log(N))\r\n    Space Complexity : O(1)\r\n\r\n    where N is the length of array.\r\n'''\r\n\r\n\r\ndef binarySearch(arr, si, ei, k):\r\n\r\n    while(si <= ei):\r\n    \r\n        mid = si + (ei - si) // 2\r\n\r\n        if(arr[mid] == k):\r\n            return mid\r\n\r\n        if(arr[mid] > k):\r\n            ei = mid - 1\r\n        else:\r\n            si = mid + 1\r\n\r\n    return -1\r\n\r\n\r\ndef search(arr, n, k):\r\n\r\n    si = 0\r\n    ei = n - 1\r\n\r\n    pivot = 0\r\n\r\n    while(si <= ei):\r\n    \r\n        mid = si + (ei - si) // 2\r\n\r\n        if(arr[mid] < arr[0]):\r\n            pivot = mid\r\n            ei = mid - 1\r\n        else:\r\n            si = mid + 1\r\n\r\n    if(pivot == 0 or (k <= arr[n - 1] and k >= arr[pivot])):\r\n        index = binarySearch(arr, pivot, n - 1, k)\r\n    else:\r\n        index = binarySearch(arr, 0, pivot - 1, k)\r\n\r\n    return index\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}