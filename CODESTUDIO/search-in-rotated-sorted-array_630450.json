{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7216,
            "title": "Search In Rotated Sorted Array",
            "titleSlug": "search-in-rotated-sorted-array_630450",
            "content": "<h4 id=\"aahad-and-harshit-always-have-fun-by-solving-problems-harshit-took-a-sorted-array-consisting-of-distinct-integers-and-rotated-it-clockwise-by-an-unknown-amount-for-example-he-took-a-sorted-array-1-2-3-4-5-and-if-he-rotates-it-by-2-then-the-array-becomes-4-5-1-2-3\">Aahad and Harshit always have fun by solving problems. Harshit took a sorted array consisting of distinct integers and rotated it clockwise by an unknown amount. For example, he took a sorted array = [1, 2, 3, 4, 5] and if he rotates it by 2, then the array becomes: [4, 5, 1, 2, 3].</h4>\n\n<h4 id=\"after-rotating-a-sorted-array-aahad-needs-to-answer-q-queries-asked-by-harshit-each-of-them-is-described-by-one-integer-q-i-which-harshit-wanted-him-to-search-in-the-array-for-each-query-if-he-found-it-he-had-to-shout-the-index-of-the-number-otherwise-he-had-to-shout-1\">After rotating a sorted array, Aahad needs to answer Q queries asked by Harshit, each of them is described by one integer Q[i]. which Harshit wanted him to search in the array. For each query, if he found it, he had to shout the index of the number, otherwise, he had to shout -1.</h4>\n\n<h4 id=\"for-each-query-you-have-to-complete-the-given-method-where-key-denotes-q-i-if-the-key-exists-in-the-array-return-the-index-of-the-key-otherwise-return-1\">For each query, you have to complete the given method where &#39;key&#39; denotes Q[i]. If the key exists in the array, return the index of the &#39;key&#39;, otherwise, return -1.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Can you solve each query in O(logN) ?\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains the size of the array: N\n\nThe second line contains N single space-separated integers: A[i].\n\nThe third line of input contains the number of queries: Q\n\nThe next Q lines of input contain: the number which Harshit wants Aahad to search: Q[i]\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the index of the number if found, otherwise -1.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to explicitly print the expected output, just return it and printing has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^6\n-10^9 &lt;= A[i] &lt;= 10^9\n1 &lt;= Q &lt;= 10^5\n-10^9 &lt;= Q[i] &lt;= 10^9\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4\n2 5 -3 0\n2\n5\n1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n-1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>In the 1st test case, 5 is found at index 1\n\nIn the 2nd test case, 1 is not found in the array, hence return -1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5\n100 -2 6 10 11\n2\n100\n6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 366,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a clockwise rotated sorted array of distinct integers, implement a function to search for a given key (query) in the array. If the key is found, return its index; otherwise, return -1. Optimize for O(log N) time complexity per query.",
                "constraints": [
                    "1 <= N <= 10^6 (where N is the size of the array)",
                    "-10^9 <= A[i] <= 10^9 (where A[i] is an element of the array)",
                    "1 <= Q <= 10^5 (where Q is the number of queries)",
                    "-10^9 <= Q[i] <= 10^9 (where Q[i] is the query value)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "4\n2 5 -3 0\n2\n5\n1",
                        "output": "1\n-1",
                        "explanation": "For the first query, 5 is found at index 1. For the second query, 1 is not found in the array."
                    },
                    {
                        "input": "5\n100 -2 6 10 11\n2\n100\n6",
                        "output": "0\n2",
                        "explanation": "100 is at index 0, and 6 is at index 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>What about visiting all the elements?</p>",
            "<p>Since the array is rotated and sorted, shall we consider the binary search approach in a modified way?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity : O(log(N))\r\n    Space complextiy : O(1)\r\n\r\n    where N is the size of the input array\r\n*/\r\n\r\nint search(int* arr, int n, int key)\r\n{\r\n    \r\n    // Initialize start and end\r\n    int st = 0, end = n - 1;\r\n\r\n    // Performing binary search\r\n    while (st <= end)\r\n    {\r\n        \r\n        // Get the middle element\r\n        int mid = st + (end - st) / 2;\r\n\r\n        // The middle element is the one we are searching for\r\n        if (arr[mid] == key)\r\n        {\r\n            return mid;\r\n        }\r\n        else if (arr[mid] >= arr[st])\r\n        {\r\n            \r\n            // Element lies towards left of mid\r\n            if (arr[st] <= key && key <= arr[mid])\r\n            {\r\n                end = mid - 1;\r\n            }\r\n            \r\n            // Element lies towards right of mid    \r\n            else\r\n            {\r\n                st = mid + 1;\r\n            }\r\n        }\r\n        \r\n        else\r\n        {\r\n            \r\n            // Element lies towards right of mid\r\n            if (arr[end] >= key && key >= arr[mid])\r\n            {\r\n                st = mid + 1;\r\n            }\r\n            \r\n            // Element lies towards left of mid\r\n            else\r\n            {\r\n                end = mid - 1;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Element not found\r\n    return -1;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time complexity : O(log(N))\n    Space complexity : O(1)\n\n    Where N is the size of array\n'''\n\ndef search(arr, target) :\n    \n    # Initialize start and end\n    st = 0\n    end = len(arr) - 1\n        \n    # Performing binary search\n    while(st <= end) :\n\n        # Get the middle element\n        mid = st + (end - st) // 2\n        \n        # The middle element is the one we are searching for\n        if(arr[mid] == target) :\n            return mid\n        \n        elif(arr[mid] >= arr[st]) :\n\n            # Element lies towards left of mid\n            if(arr[st] <= target and target <= arr[mid]):\n                end = mid - 1\n            \n            # Element lies towards right of mid    \n            else :\n                st = mid + 1\n            \n        else :\n            \n            # Element lies towards right of mid\n            if(arr[end] >= target and target >= arr[mid]) :\n                st = mid + 1\n            \n            # Element lies towards left of mid\n            else :\n                end = mid - 1\n    \n    # Element not found\n    return -1   ",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity : O(log(N))\r\n    Space complextiy : O(1)\r\n\r\n    where N is the size of the input array\r\n */\r\n\r\npublic class Solution {\r\n\r\n    public static int search(int arr[], int key) {\r\n \r\n \t\t// Initialize start and end\r\n        int st = 0, end = arr.length - 1;\r\n\r\n        // Performing binary search\r\n        while (st <= end) {\r\n        \t\r\n        \t// Get the middle element\r\n            int mid = st + (end - st) / 2;\r\n\r\n            // The middle element is the one we are searching for\r\n            if (arr[mid] == key) {\r\n                return mid;\r\n            }\r\n            else if (arr[mid] >= arr[st]) {\r\n            \t\r\n            \t// Element lies towards left of mid\r\n                if (arr[st] <= key && key <= arr[mid]) {\r\n                    end = mid - 1;\r\n                }\r\n                \r\n                // Element lies towards right of mid     \r\n                else {\r\n                    st = mid + 1;\r\n                }\r\n            } \r\n            else {\r\n            \t\r\n            \t// Element lies towards right of mid\r\n                if (arr[end] >= key && key >= arr[mid]) {\r\n                    st = mid + 1;\r\n                } \r\n                \r\n                // Element lies towards left of mid\r\n                else {\r\n                    end = mid - 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Element not found\r\n        return -1;\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}