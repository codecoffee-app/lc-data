{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14390,
            "title": "Second Degree Follower",
            "titleSlug": "second-degree-follower_2119337",
            "content": "<pre><code>In facebook, there is a follow table with two columns: followee, follower.\n\nPlease write a sql query to get the amount of each follower\u2019s follower if he/she has one.\n\nFor example:\n\n+-------------+------------+\n| followee    | follower   |\n+-------------+------------+\n|     A       |     B      |\n|     B       |     C      |\n|     B       |     D      |\n|     D       |     E      |\n+-------------+------------+\nShould output:\n+-------------+------------+\n| follower    | num        |\n+-------------+------------+\n|     B       |  2         |\n|     D       |  1         |\n+-------------+------------+\nExplanation:\nBoth B and D exist in the follower list, when as a followee, B&#39;s follower is C and D, and D&#39;s follower is E. A does not exist in follower list.\nNote:\nFollowee would not follow himself/herself in all cases.\nPlease display the result in follower&#39;s alphabet order.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a table `follow` with columns `followee` and `follower`, write a SQL query to determine the number of followers each follower has, but only include followers who are also followees. Order the result alphabetically by follower.",
                "constraints": [
                    "Followee would not follow himself/herself in all cases.",
                    "Display the result in follower's alphabet order.",
                    "The table name is 'follow' and has columns 'followee' and 'follower'."
                ],
                "testcases": [
                    {
                        "input": "follow=[('A', 'B'), ('B', 'C'), ('B', 'D'), ('D', 'E')]",
                        "output": "+-------------+------------+\n| follower    | num        |\n+-------------+------------+\n|     B       |  2         |\n|     D       |  1         |\n+-------------+------------+",
                        "explanation": "B is a follower and also a followee. B has two followers (C and D).\nD is a follower and also a followee. D has one follower (E).\nA is a followee but not a follower.\nC and E are followers but not followees."
                    },
                    {
                        "input": "follow=[('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'A'), ('E', 'F')]",
                        "output": "+-------------+------------+\n| follower    | num        |\n+-------------+------------+\n|     A       |  1         |\n|     B       |  1         |\n|     C       |  1         |\n|     D       |  1         |\n+-------------+------------+",
                        "explanation": "A, B, C, and D are both followers and followees.  Each has one follower (A follows B, B follows C, C follows D, D follows A).  E and F are not both followers and followees."
                    },
                    {
                        "input": "follow=[('A', 'B'), ('C', 'D'), ('E', 'F')]",
                        "output": "+-------------+------------+\n| follower    | num        |\n+-------------+------------+\n+-------------+------------+",
                        "explanation": "None of the followers are also followees, so the result is an empty set."
                    },
                    {
                        "input": "follow=[('A', 'A')]",
                        "output": "+-------------+------------+\n| follower    | num        |\n+-------------+------------+\n+-------------+------------+",
                        "explanation": "A follows A, which is against the rule given followee would not follow himself/herself in all cases."
                    },
                    {
                        "input": "follow=[('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'E'), ('D', 'F'), ('E', 'G'), ('F', 'H'), ('G', 'I'), ('H', 'J'), ('I', 'K'), ('J', 'L'), ('L', 'M'), ('M', 'N')]",
                        "output": "+-------------+------------+\n| follower    | num        |\n+-------------+------------+\n|     B       |  1         |\n|     C       |  1         |\n|     D       |  1         |\n|     E       |  1         |\n|     F       |  1         |\n|     G       |  1         |\n|     H       |  1         |\n|     I       |  1         |\n|     J       |  1         |\n|     L       |  1         |\n+-------------+------------+",
                        "explanation": "A follows B and C. B follows D, C follows E and so on. The output contains all followers that are also followees, and lists the number of their followers."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}