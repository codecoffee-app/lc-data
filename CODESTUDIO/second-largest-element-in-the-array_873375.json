{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8417,
            "title": "Second largest element in the array",
            "titleSlug": "second-largest-element-in-the-array_873375",
            "content": "<h4 id=\"you-have-been-given-an-array-list-arr-of-integers-your-task-is-to-find-the-second-largest-element-present-in-the-arr\">You have been given an array/list &#39;ARR&#39; of integers. Your task is to find the second largest element present in the &#39;ARR&#39;.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>a) Duplicate elements may be present.\n\nb) If no such element is present return -1.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: Given a sequence of five numbers 2, 4, 5, 6, 8.\n\nOutput:  6\n\nExplanation:\nIn the given sequence of numbers, number 8 is the largest element, followed by number 6 which is the second-largest element. Hence we return number 6 which is the second-largest element in the sequence.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. \n\nThe next \u20182*T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the number of elements in the array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the elements in the array. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the second largest element in the array.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of, Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n-10 ^ 9 &lt;= &#39;SIZE&#39; &lt;= 10 ^ 9 \n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 denotes the number of elements in the array and \u2018SIZE\u2019 denotes the range of the elements in the array.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n6\n12 1 35 10 34 1\n5\n10 10 10 10 10\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>34\n-1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>Test case 1: In the given sequence of numbers, number 35 is the largest element, followed by number 34 which is the second-largest element. Hence we return number 34 which is the second-largest element in the sequence.\n\nTest case 2: In the given sequence of numbers, number 10 is the largest element. However, since all the elements are the same, the second largest element does not exist. So, we return -1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n6\n7 8 8 1 4 3 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>7\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2:</h5>\n\n<pre><code>In the given sequence of numbers, 8 exists two times and is the largest element, followed by 7 which is the second-largest element. Hence we return the number 7 as the second-largest element.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"hints\">Hints:</h5>\n\n<pre><code>Think about how the sorting of the array can help.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 238,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the second largest element present in the array. If the second largest element does not exist, return -1. Duplicate elements may be present.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 5000",
                    "-10 ^ 9 <= Element <= 10 ^ 9",
                    "T is the total number of test cases.",
                    "N denotes the number of elements in the array.",
                    "Element denotes the range of the elements in the array.",
                    "Time limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "6\n12 1 35 10 34 1",
                        "output": "34",
                        "explanation": "The largest element is 35, and the second largest is 34."
                    },
                    {
                        "input": "5\n10 10 10 10 10",
                        "output": "-1",
                        "explanation": "All elements are the same; therefore, no second largest element exists."
                    },
                    {
                        "input": "6\n7 8 8 1 4 3",
                        "output": "7",
                        "explanation": "The largest element is 8 (appearing twice), and the second largest is 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about how to use the largest element of the array to find the second-largest element.</p>",
            "<p>Think about finding the second-largest element along with the largest element in a single traversal of the array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity: O(N)\r\n    Space complexity: O(1)\r\n\r\n    Where 'N' is the total number of elements in the array.\r\n*/\r\n\r\nint findSecondLargest(int n, vector<int> &arr)\r\n{\r\n    int largest = INT_MIN, secondLargest = INT_MIN;\r\n\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        // Find largest and second largest element simultaneously.\r\n        if (arr[i] > largest)\r\n        {\r\n            secondLargest = largest;\r\n            largest = arr[i];\r\n        }\r\n\r\n        // If an element is smaller than largest and smaller than second largest.\r\n        else if (arr[i] > secondLargest && arr[i] != largest)\r\n        {\r\n            secondLargest = arr[i];\r\n        }\r\n    }\r\n\r\n    if (secondLargest != INT_MIN)\r\n    {\r\n        return secondLargest;\r\n    }\r\n    else\r\n    {\r\n        return -1;\r\n    }\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n\tTime complexity: O(N)\r\n\tSpace complexity: O(1)\r\n\r\n\tWhere 'N' is the total number of elements in the array.\r\n*/\r\n\r\npublic class Solution {\r\n\tpublic static int findSecondLargest(int n, int[] arr) {\r\n\r\n\t\tint largest = Integer.MIN_VALUE, secondLargest = Integer.MIN_VALUE;\r\n\r\n\t\tfor (int i = 0; i < n; i++) {\r\n\r\n\t\t\t// Find largest and second largest element simultaneously.\r\n\t\t\tif (arr[i] > largest) {\r\n\t\t\t\tsecondLargest = largest;\r\n\t\t\t\tlargest = arr[i];\r\n\t\t\t}\r\n\r\n\t\t\t// If an element is smaller than largest and larger than second largest.\r\n\t\t\telse if (arr[i] > secondLargest && arr[i] != largest) {\r\n\t\t\t\tsecondLargest = arr[i];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (secondLargest != Integer.MIN_VALUE) {\r\n\t\t\treturn secondLargest;\r\n\t\t} else {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t}\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time complexity: O(N)\r\n    Space complexity: O(1)\r\n\r\n    Where 'N' is the total number of elements in the array.\r\n'''\r\n\r\nfrom sys import stdin\r\nimport sys\r\n\r\ndef findSecondLargest(sequenceOfNumbers):\r\n    n = len(sequenceOfNumbers)\r\n    largest = -sys.maxsize + 1\r\n    secondLargest = -sys.maxsize + 1\r\n\r\n    # Find largest and second largest element simultaneously.\r\n    for i in range(0, n):\r\n        if sequenceOfNumbers[i] > largest:\r\n            secondLargest = largest\r\n            largest = sequenceOfNumbers[i]\r\n\r\n        # If an element is smaller than largest and smaller than second largest.\r\n        elif sequenceOfNumbers[i] > secondLargest and sequenceOfNumbers[i] != largest:\r\n            secondLargest = sequenceOfNumbers[i]\r\n\r\n    if(secondLargest == -sys.maxsize+1):\r\n        return -1\r\n\r\n    return secondLargest\r\n\r\n# Taking input using fast I/O.\r\ndef takeInput():\r\n    n = int(input())\r\n\r\n    sequenceOfNumbers = list(map(int, input().strip().split(\" \")))\r\n\r\n    return sequenceOfNumbers, n\r\n\r\n\r\n# Main.\r\nt = int(input())\r\nwhile t:\r\n    sequenceOfNumbers, n = takeInput()\r\n    print(findSecondLargest(sequenceOfNumbers))\r\n    t = t-1\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}