{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11077,
            "title": "Second Minimum Node In a Binary Tree",
            "titleSlug": "second-minimum-node-in-a-binary-tree_1376617",
            "content": "<h4 id=\"you-are-given-a-binary-tree-with-its-root-node-the-binary-tree-holds-the-following-property\">You are given a Binary Tree with its root node. The Binary Tree holds the following property:</h4>\n\n<h4 id=\"1-each-node-has-exactly-zero-or-two-children\">1. Each node has exactly zero or two children.</h4>\n\n<h4 id=\"2-if-a-node-has-two-children-then-the-value-of-the-node-is-the-smaller-value-among-its-two-children-or-node-val-min-node-left-val-node-right-val\">2. If a node has two children, then the value of the node is the smaller value among its two children or node.-&gt;val = min( node.left.val, node.right.val).</h4>\n\n<h4 id=\"your-task-is-to-find-the-second-minimum-node-value-of-the-tree\">Your task is to find the second minimum node value of the tree.</h4>\n\n<h4 id=\"if-the-second-minimum-value-doesn-t-exist-print-1\">If the second minimum value doesn\u2019t exist, print -1.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the second minimum value of a node in the binary tree.\n\nPrint the answer of each test case in a new line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n1&lt;= data &lt;=10^5 and data!=-1\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 4 5 4 6 5 6 -1 -1 -1 -1 -1 -1 -1 -1\n1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>5\n-1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>In the first test case, \nLevel   -   Nodes\n0       -   4\n1       -   4, 5\n2       -   4, 6, 5, 6\nThe minimum node value is 4, and the second minimum node value is 5.\nIn the second test case, \nLevel   -   Nodes\n0       -   5\nThe minimum node value is 5 and there is only one node in the tree, So, the second minimum node value doesn\u2019t exist. So, the answer is -1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 1 2 1 3 5 2 -1 -1 -1 -1 -1 -1 -1 -1\n5 6 5 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a special binary tree where:\n\n1.  Each node has either zero or two children.\n2.  If a node has two children, its value is the minimum of its children's values (node.val = min(node.left.val, node.right.val)).\n\nYour task is to find the second smallest value among all the nodes in the tree. If no second smallest value exists, return -1.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3000",
                    "1 <= data <= 10^5 and data != -1",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 4 5 4 6 5 6 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "5",
                        "explanation": "The smallest node value is 4. The next smallest value in the tree is 5."
                    },
                    {
                        "input": "1 -1 -1",
                        "output": "-1",
                        "explanation": "There is only one node in the tree, so a second smallest value does not exist."
                    },
                    {
                        "input": "1 1 2 1 3 5 2 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "2",
                        "explanation": "The smallest node value is 1. The next smallest value in the tree is 2."
                    },
                    {
                        "input": "5 6 5 -1 -1 -1 -1",
                        "output": "6",
                        "explanation": "The smallest node value is 5. The next smallest value in the tree is 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>If we do an Inorder traversal, Can we store all the values and find accordingly?</p>",
            "<p>Is there a way to store only minimum and second minimum node values?</p>",
            "<p>Can you avoid some redundant function calls?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}