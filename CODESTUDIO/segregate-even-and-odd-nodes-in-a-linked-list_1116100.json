{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10034,
            "title": "Segregate even and odd nodes in a Linked List",
            "titleSlug": "segregate-even-and-odd-nodes-in-a-linked-list_1116100",
            "content": "<h4 id=\"you-are-given-the-head-node-of-a-singly-linked-list-head-your-task-is-to-modify-the-linked-list-in-such-a-way-that-all-the-even-valued-nodes-appear-before-the-all-odd-valued-node-and-order-of-nodes-remain-the-same\">You are given the head node of a singly linked list <em><strong>&#39;head&#39;</strong></em>. Your task is to modify the linked list in such a way that all the even valued nodes appear before the all odd valued node and order of nodes remain the same.</h4>\n\n<p><br></p>\n\n<h5 id=\"example\">Example :-</h5>\n\n<pre><code>The given singly linked list is  6 -&gt; 5 -&gt; 3 -&gt; 4 -&gt; 7 -&gt; 1 -&gt; 2 \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-185-7838.png\" alt=\"subsequence\"></p>\n\n<pre><code>The modified linked list should have all even values in starting and odd values in the end.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :-</h5>\n\n<pre><code>The first line contains space-separated integers denoting the values of nodes of the Linked List. The Linked List is terminated with -1. Hence, -1 is never a node value of the Linked List.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :-</h5>\n\n<pre><code>Print space-separated integers denoting the elements of the modified linked list.\n</code></pre>\n\n<h5 id=\"note\">Note :-</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1</h5>\n\n<pre><code>2 1 3 5 6 4 7 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code>2 6 4 1 3 5 7\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1</h5>\n\n<pre><code>Given singly linked list 2 -&gt; 1 -&gt; 3 -&gt; 5 -&gt; 6 -&gt; 4 -&gt; 7.\n\nArrange all the even values in the starting and odd values at the end of the linked list.\n\nSo \u20182, 6, 4\u2019 must appear in the starting and \u20181, 3, 5, 7\u2019 must appear at the end of linked list \n\nSo return 2 -&gt; 6 -&gt; 4 -&gt; 1 -&gt; 3 -&gt; 5 -&gt; 7\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2</h5>\n\n<pre><code>6 5 4 3 2 1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>6 4 2 5 3 1\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :-</h5>\n\n<pre><code>1 &lt;= &#39;N&#39; &lt;= 5000\n0 &lt;= node value &lt;= 10^9  \n\nWhere \u2018N\u2019 is the number of nodes in the linked list.\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 80,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the head of a singly linked list, rearrange the list such that all even-valued nodes precede all odd-valued nodes, maintaining the original order within each group (even and odd).",
                "constraints": [
                    "1 <= N <= 5000, where N is the number of nodes in the linked list.",
                    "0 <= node value <= 10^9",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2 1 3 5 6 4 7 -1",
                        "output": "2 6 4 1 3 5 7",
                        "explanation": "The even numbers (2, 6, 4) are moved to the front while preserving their original order. Similarly, the odd numbers (1, 3, 5, 7) are moved to the end, maintaining their initial sequence."
                    },
                    {
                        "input": "6 5 4 3 2 1 -1",
                        "output": "6 4 2 5 3 1",
                        "explanation": "The even numbers (6, 4, 2) are moved to the front while preserving their original order. Similarly, the odd numbers (5, 3, 1) are moved to the end, maintaining their initial sequence."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to divide the linked list into two parts.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}