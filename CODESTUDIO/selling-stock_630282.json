{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7048,
            "title": "Selling Stock",
            "titleSlug": "selling-stock_630282",
            "content": "<h4 id=\"you-have-been-given-stock-values-prices-for-n-number-of-days-every-i-th-day-signifies-the-price-of-a-stock-on-that-day-your-task-is-to-find-the-maximum-profit-which-you-can-make-by-buying-and-selling-the-stocks\">You have been given stock values/prices for N number of days.  Every i-th day signifies the price of a stock on that day. Your task is to find the maximum profit which you can make by buying and selling the stocks.</h4>\n\n<h5 id=\"note\">\u00a0Note :</h5>\n\n<pre><code>You may make as many transactions as you want but can not have more than one transaction at a time i.e, if you have the stock, you need to sell it first, and then only you can buy it again.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer &#39;t&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case or query contains an integer &#39;N&#39; representing the total number of days for which you have stock prices.\n\nThe second line contains &#39;N&#39; single space-separated integers representing the price of the stock on i-th day.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the maximum profit that you can earn.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything explicitly. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= t &lt;= 10^2\n0 &lt;= N &lt;= 10^5\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n7\n1 2 3 4 5 6 7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>6\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>We can make the maximum profit by buying the stock on the first day and selling it on the last day.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n7\n7 6 5 4 3 2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>We can make the maximum profit by not buying the stock.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 163,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given stock prices for N days, where the i-th day's price represents the stock price on that day, determine the maximum profit achievable through buying and selling stocks. You can make multiple transactions, but only one transaction can be active at a time. That is, you must sell a stock before buying another.",
                "constraints": [
                    "1 <= t <= 10^2",
                    "0 <= N <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n7\n1 2 3 4 5 6 7",
                        "output": "6",
                        "explanation": "The maximum profit is achieved by buying on day 1 (price 1) and selling on day 7 (price 7), resulting in a profit of 7 - 1 = 6."
                    },
                    {
                        "input": "1\n7\n7 6 5 4 3 2 1",
                        "output": "0",
                        "explanation": "Since the stock prices are decreasing every day, it's best to avoid buying any stocks.  Therefore, the maximum profit is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to consider all possibilities of buying and selling stocks and see which one gives you the maximum profit.</p>",
            "<p>Do you need to check all possibilities? If you fix the day where you can buy the stock, wouldn't you simply sell it on the day on which its price was the maximum?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space Complexity : O(1)\r\n    \r\n    where N is the total number of days.\r\n*/\r\n\r\nlong getMaximumProfit(long *values, int n)\r\n{\r\n    // If the data is only for one day, we simply return 0 because we can't sell if we buy on day 0\r\n    if (n <= 1)\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    long profit = 0L;\r\n    int buyingDay = 0, sellingDay = 1;\r\n    int totalDays = n;\r\n\r\n    while (sellingDay < totalDays)\r\n    {\r\n        // If the value of the stock is greater than the buying day, sell the stock\r\n        if (values[sellingDay] > values[buyingDay])\r\n        {\r\n            // Add the profit earned by selling the stock.\r\n            profit += (values[sellingDay] - values[buyingDay]);\r\n        }\r\n        buyingDay++;\r\n        sellingDay++;\r\n    }\r\n\r\n    return profit;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity : O(N)\n    Space Complexity : O(1)\n\n    Where N is the total number of days.\n'''\n\nfrom sys import stdin\n\n\ndef getMaximumProfit(values, n) :\n    \n    #If the data is only for one day, we simply return 0 because we can't sell if we buy on day 0\n    if n <= 1 :\n            return 0\n\n    profit = 0\n    buyingDay = 0\n    sellingDay = 1\n    totalDays = n\n\n    while sellingDay < totalDays :\n        #If the value of the stock is greater than the buying day, sell the stock\n        if values[sellingDay] > values[buyingDay] :\n            #Add the profit earned by selling the stock.\n            profit += (values[sellingDay] - values[buyingDay])\n    \n        buyingDay += 1\n        sellingDay += 1\n\n    return profit\n\n\n#taking input using fast I/O\ndef takeInput() :\n    n = int(stdin.readline().rstrip())\n\n    if n == 0 :\n        return list(), 0\n\n    values = list(map(int, stdin.readline().rstrip().split(\" \")))\n    return values, n\n\n\n#main\nt = int(stdin.readline().rstrip())\n\nwhile t > 0 :\n    values, n = takeInput()\n    print(getMaximumProfit(values, n))\n    t -= 1\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity - O(N)\r\n    Space Complexity - O(1)\r\n    where N is the total number of days.\r\n*/\r\n\r\npublic class Solution {\r\n    public static long getMaximumProfit (int n, long[] values) {\r\n        // If the data is only for one day, we simply return 0 because we can't sell if we buy on day 0\r\n        if(n <= 1) {\r\n            return 0;\r\n        }\r\n\r\n        long profit = 0L;\r\n        int buyingDay = 0, sellingDay = 1;\r\n        int totalDays = n;\r\n\r\n        while(sellingDay < totalDays){\r\n            // If the value of the stock is greater than the buying day, sell the stock\r\n            if(values[sellingDay] > values[buyingDay]) {\r\n                // Add the profit earned by selling the stock.\r\n                profit += (values[sellingDay] - values[buyingDay]);\r\n            }\r\n            buyingDay++;\r\n            sellingDay++;\r\n        }\r\n\r\n        return profit;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}