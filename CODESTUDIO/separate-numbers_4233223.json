{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 18734,
            "title": "Separate Numbers",
            "titleSlug": "separate-numbers_4233223",
            "content": "<h4 id=\"you-are-given-a-string-num-the-string-is-made-up-of-digits-0-9-your-task-is-to-find-the-number-of-ways-to-split-the-string-of-digits-into-a-list-of-non-decreasing-positive-integers-and-no-integer-should-have-leading-zeros\">You are given a string \u2018NUM\u2019, the string is made up of digits (0-9),. Your task is to find the number of ways to split the string of digits into a list of <strong>non-decreasing positive integers</strong> and no integer should have leading zeros.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The answer may be very large so return it modulo \u201810^9 + 7\u2019.\n</code></pre>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>You are given \u2018NUM\u2019 = \u201c329\u201d, Here you can split the string as [3, 29] and [329]. Since there are 2 ways the answer will be 2.\nNote that a split [32, 9] is invalid because the list is not in non-decreasing order.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe first and only line of each test case contains a string \u2018NUM\u2019 representing the string given in the problem.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case print a single integer representing the number of ways you can split the string with the given conditions.\n\nPrint a separate line for each test case.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1  &lt;= T &lt;= 10\n1 &lt;= NUM.size &lt;= 500\nNUM[i] is a digit from 0 to 9\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n329\n4256\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>For the first test case, \u2018NUM\u2019 = \u201c329\u201d, Here you can split the string as [3, 29] and [329]. Since there are 2 ways to split the string the answer will be 2.\n\nFor the second test case \u2018NUM\u2019 = \u201c4256\u201d, Here you can split the string as [4, 256], [42, 56], [4256]. Since there are 3 ways to split the string the answer will be 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n901\n023\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'nums' consisting of digits (0-9), determine the number of ways to split the string into a list of non-decreasing positive integers. Each integer in the split list must be greater than zero and must not have leading zeros. Since the answer may be very large, return it modulo 10^9 + 7.",
                "constraints": [
                    "1 <= nums.size() <= 500",
                    "nums[i] is a digit from 0 to 9",
                    "1 <= T <= 10"
                ],
                "testcases": [
                    {
                        "input": "nums = \"329\"",
                        "output": "2",
                        "explanation": "The string \"329\" can be split as [3, 29] and [329]. The split [32, 9] is invalid because 32 > 9 violates the non-decreasing order. Therefore, there are 2 valid ways."
                    },
                    {
                        "input": "nums = \"4256\"",
                        "output": "3",
                        "explanation": "The string \"4256\" can be split as [4, 256], [42, 56], and [4256]. Thus, there are 3 valid ways."
                    },
                    {
                        "input": "nums = \"901\"",
                        "output": "1",
                        "explanation": "The string \"901\" can only be split as [901]. Splits like [9, 01] are invalid because '01' has leading zeros."
                    },
                    {
                        "input": "nums = \"023\"",
                        "output": "0",
                        "explanation": "It's impossible to split \"023\" into non-decreasing positive integers because any number that starts with zero is either zero or has leading zeros if considered as a multi-digit number."
                    },
                    {
                        "input": "nums = \"1111\"",
                        "output": "5",
                        "explanation": "The string \"1111\" can be split as [1,1,1,1], [1,1,11], [1,11,1], [11,1,1], [1,111], [111,1], [11,11], [1111]. Valid splits (non-decreasing and positive integers): [1, 1, 1, 1], [1, 1, 11], [1, 11, 11111111], [11, 11],[1111]. Result is 5 since [1,1,1,1],[1,1,11],[1,11],[11,11],[1111] are valid solutions."
                    },
                    {
                        "input": "nums = \"12345\"",
                        "output": "1",
                        "explanation": "Splits such as [1,2,3,4,5], [12,345]... [12345]. The test expects the count of splits where the numbers are sorted non-decreasingly. [12345] is the only valid result. Result should be 1"
                    },
                    {
                        "input": "nums = \"1\"",
                        "output": "1",
                        "explanation": "Only one way to split the given string '1' which is '[1]'"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try the naive approach to the solution</p>",
            "<p>Try to do some precomputations to improve the time complexity.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}