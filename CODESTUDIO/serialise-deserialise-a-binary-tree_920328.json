{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8820,
            "title": "Serialise/Deserialise a Binary Tree",
            "titleSlug": "serialise-deserialise-a-binary-tree_920328",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-integers-you-are-supposed-to-serialize-and-deserialize-refer-to-notes-the-given-binary-tree\">You have been given a binary tree of integers. You are supposed to serialize and deserialize (refer to notes) the given binary tree.</h4>\n\n<p><br></p>\n\n<h4 id=\"you-can-choose-any-algorithm-to-serialize-deserialize-the-given-binary-tree-you-only-have-to-ensure-that-the-serialized-string-can-be-deserialized-to-the-original-binary-tree\">You can choose any algorithm to serialize/deserialize the given binary tree. You only have to ensure that the serialized string can be deserialized to the original binary tree.</h4>\n\n<p><br></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Serialization is the process of translating a data structure or object state into a format that can be stored or transmitted (for example, across a computer network) and reconstructed later. The opposite operation, that is, extracting a data structure from stored information, is deserialization.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The only line of input contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place. So -1 would not be a part of the tree nodes.\n</code></pre>\n\n<h5 id=\"input-format-explanation\">Input format explanation:</h5>\n\n<pre><code>The level order input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation:\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level, and so on.\nThe input ends when all nodes at the last level are null(-1).\n\nThe above sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print the level order traversal of the deserialized binary tree separated by single spaces. For NULL nodes, print -1.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1 -1 3 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 -1 3 -1 -1 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>The given tree looks as follows:\n               1\n                \\\n                 3\nThe level order traversal of the given tree will be \u201c1 -1 3 -1 -1\u201d where -1 denotes the null nodes.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1 2 3 -1 4 5 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 2 3 -1 4 5 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>The given tree looks as follows:\n                1\n               / \\\n              2   3\n              \\   / \n               4 5\n\nThe level order traversal of the given tree will be \u201c1 2 3 -1 4 5 -1 -1 -1 -1 -1&quot; where -1 denotes the null nodes.\n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity:</h5>\n\n<pre><code>The expected time complexity is O(n).\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>0 &lt;= &#39;n&#39; &lt;= 10^6\n1 &lt;= &#39;data&#39; &lt;= 10^8 and data != -1,\n Where &#39;n&#39; is the number of nodes and &#39;data&#39; is the value at the nodes.\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 59,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement the `serializeTree` and `deserializeTree` functions to serialize a given binary tree into a string representation and deserialize the string back into the original binary tree structure. You can choose any serialization/deserialization algorithm. Ensure the deserialized tree is identical to the original tree.",
                "constraints": [
                    "0 <= n <= 10^6, where 'n' is the number of nodes in the tree.",
                    "1 <= 'data' <= 10^8 and data != -1, where 'data' is the value at the nodes.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "root=TreeNode(1), levelOrder=[1,-1,3,-1,-1]",
                        "output": "1 -1 3 -1 -1",
                        "explanation": "The given tree looks as follows:\n               1\n                \\\n                 3\nThe level order traversal of the given tree will be \u201c1 -1 3 -1 -1\u201d where -1 denotes the null nodes."
                    },
                    {
                        "input": "root=TreeNode(1), levelOrder=[1,2,3,-1,4,5,-1,-1,-1,-1,-1]",
                        "output": "1 2 3 -1 4 5 -1 -1 -1 -1 -1",
                        "explanation": "The given tree looks as follows:\n                1\n               / \\\n              2   3\n              \\   /\n               4 5\n\nThe level order traversal of the given tree will be \u201c1 2 3 -1 4 5 -1 -1 -1 -1 -1\" where -1 denotes the null nodes."
                    },
                    {
                        "input": "root=TreeNode(1), levelOrder=[1,2,3,4,5,6,7,-1,-1,-1,-1,-1,-1,-1,-1]",
                        "output": "1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1",
                        "explanation": "A complete binary tree with values from 1 to 7.  Verifies that serialization and deserialization work for a more complex structure."
                    },
                    {
                        "input": "root=None, levelOrder=[]",
                        "output": "-1",
                        "explanation": "Test case for an empty tree. Serialization and deserialization should handle null roots gracefully."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about using any traversal method that can uniquely determine the structure of the binary tree?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}