{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11072,
            "title": "Serialize and Deserialize BST",
            "titleSlug": "serialize-and-deserialize-bst_1376612",
            "content": "<h4 id=\"you-are-given-a-binary-search-tree-with-its-root-node-you-are-supposed-to-serialize-a-binary-search-tree-into-a-string-and-deserialize-the-string-into-a-binary-search-tree\">You are given a Binary Search Tree with its root node. You are supposed to serialize a binary search tree into a string and deserialize the string into a binary search tree.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>Serialization is the process of converting an object into a stream of bytes.\n\nDeserialization is the opposite process of creating an object from a stream of bytes.\n\nYou can apply your own serialization and deserialization algorithms.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print the level order traversal of the Binary Search Tree after Deserialization separated by spaces. It should match with the level order traversal of the initially given tree.\n\nPrint the answer of each test case in a new line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>None of the pointers in the new tree should point to nodes in the original tree, otherwise, the expected output can be different.\n\nYou don\u2019t have to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt; 10^4\n0 &lt;= data &lt; 10^4 and data!=-1\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n24 15 33 12 21 30 36 9 -1 18 -1 27 -1 -1 -1 -1 -1 -1 -1 -1 -1\n15 9 21 7 13 19 23 5 -1 11 -1 17 -1 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>24 15 33 12 21 30 36 9 18 27\n15 9 21 7 13 19 23 5 11 17\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>In the first test case, The values of the nodes are 24, 15, 33, 12, 21, 30, 36, 9, 18, and 27. After performing Serialization and Deserialization, the tree should remain the same. So, the level order traversal of the tree is 24, 15, 33, 12, 21, 30, 36, 9, 18, and 27.\n\nIn the second test case, The values of the nodes are 15, 9, 21, 7, 13, 19, 23, 5, 11, and 17. After performing Serialization and Deserialization, the tree should remain the same. So, the level order traversal of the tree is 15, 9, 21, 7, 13, 19, 23, 5, 11, and 17.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 2 3 -1 -1 -1 -1\n25 16 34 13 22 31 37  -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 2 3\n25 16 34 13 22 31 37\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement the `serializeTree` and `deserializeTree` functions for a Binary Search Tree (BST). `serializeTree` should convert a given BST into a string representation. `deserializeTree` should reconstruct the original BST from the serialized string. You can choose any serialization and deserialization algorithm.  The deserialized tree must be structurally identical to the original tree and contain the same data. You are provided with the root of the BST represented by a `TreeNode<int>*`.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N < 10^4",
                    "0 <= data < 10^4 and data != -1"
                ],
                "testcases": [
                    {
                        "input": "root = [24, 15, 33, 12, 21, 30, 36, 9, -1, 18, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "24 15 33 12 21 30 36 9 18 27",
                        "explanation": "The initial BST has the level order traversal 24, 15, 33, 12, 21, 30, 36, 9, 18, and 27. After serialization and deserialization, the level order traversal should remain the same."
                    },
                    {
                        "input": "root = [15, 9, 21, 7, 13, 19, 23, 5, -1, 11, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "15 9 21 7 13 19 23 5 11 17",
                        "explanation": "The initial BST has the level order traversal 15, 9, 21, 7, 13, 19, 23, 5, 11, and 17. After serialization and deserialization, the level order traversal should remain the same."
                    },
                    {
                        "input": "root = [1, 2, 3, -1, -1, -1, -1]",
                        "output": "1 2 3",
                        "explanation": "A simple BST with root 1, left child 2, and right child 3.  Serialization and deserialization should preserve this structure."
                    },
                    {
                        "input": "root = [25, 16, 34, 13, 22, 31, 37, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "25 16 34 13 22 31 37",
                        "explanation": "A BST with root 25 and several children.  Serialization and deserialization should maintain the original structure and values."
                    },
                    {
                        "input": "root = [5,3,6,2,4,-1,-1,1]",
                        "output": "5 3 6 2 4 1",
                        "explanation": "A larger BST example, testing the ability to serialize and deserialize deeper trees"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we separate the node values with space for serialization and separate those for deserialization?</p>",
            "<p>Can we apply the same technique without using delimiters?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}