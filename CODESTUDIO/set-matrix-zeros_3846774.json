{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 17344,
            "title": "Set Matrix Zeros",
            "titleSlug": "set-matrix-zeros_3846774",
            "content": "<h4 id=\"you-are-given-an-n-x-m-integer-matrix-your-task-is-to-modify-this-matrix-in-place-so-that-if-any-cell-contains-the-value-0-then-all-cells-in-the-same-row-and-column-as-that-cell-should-also-be-set-to-0\">You are given an N x M integer matrix. Your task is to modify this matrix in place so that if any cell contains the value 0, then all cells in the same row and column as that cell should also be set to 0.</h4>\n\n<h4 id=\"requirements\">Requirements:</h4>\n\n<ul>\n<li>If a cell in the matrix has the value 0, set all other cells in that cell&#39;s row and column to 0.</li>\n<li>You should perform this modification in place (without using additional matrices).</li>\n</ul>\n\n<h4 id=\"you-must-do-it-in-place\">You must do it in place.</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>If the given grid is this:\n[7, 19, 3]\n[4, 21, 0]\n\nThen the modified grid will be:\n[7, 19, 0]\n[0, 0,  0]\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of the input contains a single integer \u2018T\u2019 representing the no. of test cases.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018M\u2019, denoting the no. of the rows and columns of the matrix.\n\nThe next &#39;N&#39; lines will contain \u2018M\u2019 space separated integers representing the elements of the matrix.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, print the modified grid.\n\nPrint output of each test case in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function and return the answer.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 \u2264 T \u2264 1000\n1 \u2264 m, n \u2264 1000\n\u03a3(m * n) \u2264 2000000\n-2^(31) \u2264 matrix[i][j] \u2264 2^(31)-1, for all (1 \u2264 i \u2264 n and 1 \u2264 j \u2264 m).\n\nTime Limit: 1 sec\n</code></pre>\n\n<h4 id=\"follow-up\">Follow up:</h4>\n\n<pre><code>Can we do better than O(m * n) space?\nUsing O(m + n) space is an improvement but we can still do better.\nWe can do it using constant memory. Can you do it?\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2 3\n7 19 3\n4 21 0\n3 3\n1 2 3\n4 0 6\n7 8 9\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>7 19 0\n0 0 0\n1 0 3\n0 0 0\n7 0 9\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For First Case - Similar to the example explained above. \n\nFor Second Case - \nOnly the cell (2,2) has zero. So all the elements of the second row and second column are changed to zeros.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4 2\n1 0\n2 7\n3 0\n4 8\n3 3\n0 2 3\n1 0 3\n1 2 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0 0\n2 0\n0 0\n4 0\n0 0 0\n0 0 0\n0 0 0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1414,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an N x M integer matrix, modify it in-place such that if any cell contains the value 0, all cells in the same row and column as that cell are also set to 0.",
                "constraints": [
                    "1 \u2264 T \u2264 1000",
                    "1 \u2264 m, n \u2264 1000",
                    "\u03a3(m * n) \u2264 2000000",
                    "-2^(31) \u2264 matrix[i][j] \u2264 2^(31)-1, for all (1 \u2264 i \u2264 n and 1 \u2264 j \u2264 m)."
                ],
                "testcases": [
                    {
                        "input": "matrix = [[7, 19, 3], [4, 21, 0]]",
                        "output": "[[7, 19, 0], [0, 0, 0]]",
                        "explanation": "The cell (1, 2) has a value of 0. Therefore, all cells in row 1 and column 2 are set to 0."
                    },
                    {
                        "input": "matrix = [[1, 2, 3], [4, 0, 6], [7, 8, 9]]",
                        "output": "[[1, 0, 3], [0, 0, 0], [7, 0, 9]]",
                        "explanation": "The cell (1, 1) has a value of 0. Therefore, all cells in row 1 and column 1 are set to 0."
                    },
                    {
                        "input": "matrix = [[1, 0], [2, 7], [3, 0], [4, 8]]",
                        "output": "[[0, 0], [2, 0], [0, 0], [4, 0]]",
                        "explanation": "The cells (0, 1) and (2, 1) have a value of 0. Therefore, all cells in column 1 and rows 0 & 2 are set to 0."
                    },
                    {
                        "input": "matrix = [[0, 2, 3], [1, 0, 3], [1, 2, 0]]",
                        "output": "[[0, 0, 0], [0, 0, 0], [0, 0, 0]]",
                        "explanation": "Since multiple cells contain zeros and their rows/cols are made zero in-place, the whole matrix becomes zero."
                    },
                    {
                        "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
                        "output": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
                        "explanation": "The matrix contains no zeros. Therefore the input matrix remains unchanged."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We can simulate the process described in the statement naively.</p>",
            "<p>Make an indicator row and column arrays to check whether that row or column contains some \u20180\u2019 element.</p>",
            "<p>Try to use a single row and column of the matrix as a flag.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N * M) \n    Space Complexity:O(1) \n\n    Where N & M are dimensions of the given matrix.\n*/\n\nvoid setZeros(vector<vector<int>> &matrix)\n{\n\t// Storing dimensions of matrix in n and m.\n\tint n = matrix.size();\n\tint m = matrix[0].size();\n\t\n\t// Declaring two boolean variables firstColZero and firstRowZero.\n\tbool firstColZero = false, firstRowZero = false;\n\t\n\t// Setting firstColZero to true if any element in first column is zero.\n\tfor(int i = 0; i < n; i++) {\n\t\tif(matrix[i][0] == 0) {\n\t\t\tfirstColZero = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t// Setting firstRowZero to true if any element in first row is zero.\n\tfor(int j = 0; j < m; j++) {\n\t\tif(matrix[0][j] == 0) {\n\t\t\tfirstRowZero = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t// Setting values for each row and column to be zero or not.\n\tfor(int i = 1; i < n; i++) {\n\t\tfor(int j = 1; j < m; j++) {\n\t\t\tif(matrix[i][j] == 0) {\n\t\t\t\tmatrix[i][0] = matrix[0][j] = 0;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// If any element of first row is zero then that complete column should be zero and vice-versa.\n\tfor(int i = 1; i < n; i++) {\n\t\tfor(int j = 1; j < m; j++) {\n\t\t\tif(matrix[i][0] == 0 || matrix[0][j] == 0) {\n\t\t\t\tmatrix[i][j] = 0;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Setting first row to zero if firstRowZero is true.\n\tif(firstColZero) {\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tmatrix[i][0] = 0;\n\t\t}\n\t}\n\t\n\t// Setting first column to zero if firstColZero is true.\n\tif(firstRowZero) {\n\t\tfor(int j = 0; j < m; j++) {\n\t\t\tmatrix[0][j] = 0;\n\t\t}\n\t}\n}\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N * M) \n    Space Complexity:O(1) \n\n    Where N & M are dimensions of the given matrix.\n*/\n\npublic class Solution {\n\n    public static void setZeros(int matrix[][]) {\n\n        // Storing dimensions of matrix in n and m.\n        int n = matrix.length;\n        int m = matrix[0].length;\n\n        // Declaring two boolean variables firstColZero and firstRowZero.\n        Boolean firstColZero = false, firstRowZero = false;\n\n        // Setting firstColZero to true if any element in first column is zero.\n        for (int i = 0; i < n; i++) {\n            if (matrix[i][0] == 0) {\n                firstColZero = true;\n                break;\n            }\n        }\n\n        // Setting firstRowZero to true if any element in first row is zero.\n        for (int j = 0; j < m; j++) {\n            if (matrix[0][j] == 0) {\n                firstRowZero = true;\n                break;\n            }\n        }\n\n        // Setting values for each row and column to be zero or not.\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                if (matrix[i][j] == 0) {\n                    matrix[i][0] = matrix[0][j] = 0;\n                }\n            }\n        }\n\n        // If any element of first row is zero then that complete column should be zero\n        // and vice-versa.\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                if (matrix[i][0] == 0 || matrix[0][j] == 0) {\n                    matrix[i][j] = 0;\n                }\n            }\n        }\n\n        // Setting first row to zero if firstRowZero is true.\n        if (firstColZero) {\n            for (int i = 0; i < n; i++) {\n                matrix[i][0] = 0;\n            }\n        }\n\n        // Setting first column to zero if firstColZero is true.\n        if (firstRowZero) {\n            for (int j = 0; j < m; j++) {\n                matrix[0][j] = 0;\n            }\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(N * M) \n    Space Complexity:O(1) \n\n    Where N & M are dimensions of the given matrix.\n'''\n\nfrom typing import List\n\ndef setZeros(matrix: List[List[int]]) -> None:\n\n\t# Storing dimensions of matrix in n and m.\n    n = len(matrix)\n    m = len(matrix[0])\n\t\n    # Declaring two boolean variables firstColZero and firstRowZero.\n    firstColZero = False\n    firstRowZero = False\n\t\n\t# Setting firstColZero to true if any element in first column is zero.\n    for i in range(n):\n        if matrix[i][0] == 0:\n            firstColZero = True\n            break\n\t\n\t# Setting firstRowZero to true if any element in first row is zero.\n    for j in range(m):\n        if matrix[0][j] == 0:\n            firstRowZero = True\n            break\n\t\n\t# Setting values for each row and column to be zero or not.\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][j] == 0:\n                matrix[i][0] = 0\n                matrix[0][j] = 0\n\t\n\t# If any element of first row is zero then that complete column should be zero and vice-versa.\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][0] == 0 or matrix[0][j] == 0:\n                matrix[i][j] = 0\n\t\n\t# Setting first row to zero if firstRowZero is true.\n    if firstColZero:\n        for i in range(n):\n            matrix[i][0] = 0\n\t\n\t# Setting first column to zero if firstColZero is true.\n    if firstRowZero:\n        for j in range(m):\n            matrix[0][j] = 0\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}