{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13039,
            "title": "Shopping Options",
            "titleSlug": "shopping-options_1538511",
            "content": "<h4 id=\"you-are-given-the-list-of-costs-of-pants-in-an-array-pants-shirts-in-an-array-shirts-shoes-in-an-array-shoes-and-skirts-in-an-array-skirts-you-are-also-given-a-budget-amount-x-to-spend-you-want-to-buy-exactly-1-item-from-each-list-your-task-is-to-determine-the-total-number-of-possible-combinations-that-you-can-buy-given-that-the-total-amount-of-your-purchase-does-not-exceed-your-budget-amount\">You are given the list of costs of pants in an array \u201cpants\u201d, shirts in an array \u201cshirts\u201d, shoes in an array \u201cshoes\u201d, and skirts in an array \u201cskirts\u201d. You are also given a budget amount \u2018X\u2019 to spend. You want to buy exactly 1 item from each list. Your task is to determine the total number of possible combinations that you can buy, given that the total amount of your purchase does not exceed your budget amount.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first line of each test case contains five integers \u2018P\u2019, \u2018Q\u2019, \u2018R\u2019, \u2018S\u2019 and, \u2018X\u2019. Denotes the number of pants, shirts, shoes, skirts, and budget amount respectively.\n\nThe second line of each test case contains exactly \u2018P\u2019 integers. Denotes the cost of each pant.\n\nThe third line of each test case contains exactly \u2018Q\u2019 integers. Denotes the cost of each shirt.\n\nThe fourth line of each test case contains exactly \u2018R\u2019 integers. Denotes the cost of each shoe.\n\nThe fifth line of each test case contains exactly \u2018S\u2019 integers. Denotes the cost of each skirt.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return an integer that represents the total number of combinations to buy that are valid according to the above conditions.\n\nOutput for each test case will be printed in a new line. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given functions.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= \u2018P\u2019, \u2018Q\u2019, \u2018R\u2019, \u2018S\u2019  &lt;= 10\n1 &lt;= \u2018X\u2019 &lt;= 10^9\n1 &lt;= pants[i], shirts[i], shoes[i], skirts[i] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 2 1 1 10\n3 4\n2 4\n2\n1\n3 2 2 1 15\n3 4 6\n1 4\n2 3\n8\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n3\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h4>\n\n<pre><code>In the first case, \nThere are a total of four ways to buy. Only valid purchases are [3, 2, 2, 1], [3, 4, 2, 1], [4, 2, 2, 1] because the sum of the cost of each item of each valid purchase is less than the budget amount.\n\nIn the second case, \nThere are a total of four ways to buy. Only valid purchases are [3, 1, 2, 8], [3, 1, 3, 8], [4, 1, 2, 8] because the sum of the cost of each item of each valid purchase is less than the budget amount.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 3 3 3 14\n3 4 7\n1 3 5 \n6 8 10\n1 2 3\n4 3 2 2 20\n2 8 7 10\n5 5 5\n6 3\n4 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>12\n21\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 21,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the costs of pants, shirts, shoes, and skirts, along with a budget, determine the number of combinations of one item from each category that can be purchased without exceeding the budget.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= \u2018P\u2019, \u2018Q\u2019, \u2018R\u2019, \u2018S\u2019  <= 10",
                    "1 <= \u2018X\u2019 <= 10^9",
                    "1 <= pants[i], shirts[i], shoes[i], skirts[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "pants = [3, 4], shirts = [2, 4], shoes = [2], skirts = [1], budget = 10",
                        "output": "3",
                        "explanation": "The valid combinations are [3, 2, 2, 1], [3, 4, 2, 1], and [4, 2, 2, 1]. Their costs are 8, 10, and 9, respectively, all within the budget of 10."
                    },
                    {
                        "input": "pants = [3, 4, 6], shirts = [1, 4], shoes = [2, 3], skirts = [8], budget = 15",
                        "output": "3",
                        "explanation": "The valid combinations are [3, 1, 2, 8], [3, 1, 3, 8], and [4, 1, 2, 8]. Their costs are 14, 15, and 15, respectively, and all within the budget of 15."
                    },
                    {
                        "input": "pants = [3, 4, 7], shirts = [1, 3, 5], shoes = [6, 8, 10], skirts = [1, 2, 3], budget = 14",
                        "output": "12",
                        "explanation": "There are 3*3*3*3 = 81 combinations, but only 12 result in costs less than or equal to 14."
                    },
                    {
                        "input": "pants = [2, 8, 7, 10], shirts = [5, 5, 5], shoes = [6, 3], skirts = [4, 5], budget = 20",
                        "output": "21",
                        "explanation": "There are 4*3*2*2 = 48 total combinations. 21 of those combinations have a total cost that is less than or equal to 20."
                    },
                    {
                        "input": "pants = [1000000000], shirts = [1000000000], shoes = [1000000000], skirts = [1000000000], budget = 4000000000",
                        "output": "1",
                        "explanation": "Each item costs 10^9, so the only combination (one of each item) costs exactly 4 * 10^9, fitting the budget of 4 * 10^9."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Do constraints allow us to try all possibilities?</p>",
            "<p>Can you solve the problem using binary search?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}