{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10978,
            "title": "Shortest alternate colored path",
            "titleSlug": "shortest-alternate-colored-path_1281318",
            "content": "<h4 id=\"consider-a-directed-graph-of-n-nodes-where-each-node-is-labeled-from-0-to-n-1-each-edge-of-the-graph-is-either-red-or-blue-colored-the-graph-may-contain-self-edges-or-parallel-edges-you-are-given-two-arrays-rededges-and-blueedges-whose-each-element-is-of-the-form-i-j-denoting-an-edge-from-node-i-to-node-j-of-the-respective-color\">Consider a directed graph of \u2018N\u2019 nodes where each node is labeled from \u20180\u2019 to \u2018N - 1\u2019. Each edge of the graph is either \u2018red\u2019 or \u2018blue\u2019 colored. The graph may contain self-edges or parallel edges. You are given two arrays, \u2018redEdges\u2019 and \u2018blueEdges\u2019, whose each element is of the form [i, j], denoting an edge from node \u2018i\u2019 to node \u2018j\u2019 of the respective color.</h4>\n\n<h4 id=\"your-task-is-to-compute-an-array-answer-of-size-n-where-answer-i-stores-the-length-of-the-shortest-path-from-node-0-to-node-i-such-that-the-edges-along-the-path-have-alternate-colors-if-there-is-no-such-path-from-node-0-to-i-then-answer-i-1\">Your task is to compute an array \u2018answer\u2019 of size \u2018N\u2019, where \u2018answer[i]\u2019 stores the length of the shortest path from node \u20180\u2019 to node \u2018i\u2019 such that the edges along the path have alternate colors. If there is no such path from node \u20180\u2019 to \u2018i\u2019, then \u2018answer[i] = -1\u2019.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>N = 4, redEdges = [[0, 1], [2, 3]], blueEdges = [[1, 2], [1, 3]]\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/example-8584.png\" alt=\"example\"></p>\n\n<pre><code>The shortest paths for each node from node \u20180\u2019 are:\n1: 0-&gt;1         Length: 1\n2: 0-&gt;1-&gt;2      Length: 2\n3: 0-&gt;1-&gt;3      Length: 2\nSo, the \u2018answer\u2019 array will be: [0, 1, 2, 2].\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The given graph could be a disconnected graph.\n\n2. Any two nodes \u2018i\u2019 and \u2018j\u2019 can have at most one red edge from \u2018i\u2019 to \u2018j\u2019 and at most one blue edge from \u2018i\u2019 to \u2018j\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases. Then, the \u2018T\u2019 test cases follow.\n\nThe first line of each test case contains three space-separated integers \u2018N\u2019, \u2018rlen\u2019, and \u2018blen\u2019 denoting the number of nodes in the graph, the size of array \u2018redEdges\u2019, and the size of array \u2018blueEdges\u2019.\n\nThe next &#39;rlen&#39; lines of each test case contain two space-separated integers, \u2018i\u2019 and \u2018j\u2019 denoting a \u2018red\u2019 edge from node \u2018i\u2019 to node \u2018j\u2019.\n\nThe next &#39;blen&#39; lines of each test case contain two space-separated integers, \u2018i\u2019 and \u2018j\u2019 denoting a \u2018blue\u2019 edge from node \u2018i\u2019 to node \u2018j\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For every test case, print a single line containing N space-separated integers denoting array \u2018answer\u2019, where \u2018answer[i]\u2019 contains the valid shortest path length from node \u20180\u2019 to node \u2018i\u2019. \n\nThe output for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 200\n0 &lt;= rlen + blen &lt;= 1000\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the number of nodes in the graph, \u2018rlen\u2019 is the size of array \u2018redEdges\u2019, and \u2018blen\u2019 is the size of array \u2018blueEdges\u2019.\n\nTime limit: 1 second\n</code></pre>\n<h4 id=\"sample-input-1\">Sample input 1:</h4>\n\n<pre><code>2\n4 2 2\n0 1\n1 3\n1 1\n1 2\n4 2 2\n0 1\n1 3\n0 2\n2 3\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample output 1:</h4>\n\n<pre><code>0 1 2 3\n0 1 1 -1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h4>\n\n<pre><code>Test Case 1:\n\nn = 4, redEdges = [[0,1], [1, 3]], blueEdges = [[1, 1], [1, 2]]\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample1-8585.png\" alt=\"Sample1\"></p>\n\n<pre><code>The shortest paths for each node from node \u20180\u2019 are:\n1: 0-&gt;1          Length: 1\n2: 0-&gt;1-&gt;2      Length: 2\n3: 0-&gt;1-&gt;1-&gt;3   Length: 3\nSo, the \u2018answer\u2019 array will be: [0, 1, 2, 3].\n\n\nTest Case 2:\n\nn = 4, redEdges = [[0, 1], [1, 3]], blueEdges = [[0, 2], [2, 3]]\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample2-8586.png\" alt=\"Sample2\"></p>\n\n<pre><code>The shortest paths for each node from node \u20180\u2019 are:\n1: 0-&gt;1     Length: 1\n2: 0-&gt;2     Length: 1\n3: No valid path available.\nSo, the \u2018answer\u2019 array will be: [0, 1, 1, -1].\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample input 2:</h4>\n\n<pre><code>2\n3 1 1\n2 1\n1 0\n3 1 2\n1 0\n0 1\n0 2\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample output 2:</h4>\n\n<pre><code>0 -1 -1\n0 1 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph with 'N' nodes (labeled 0 to N-1) and edges colored red or blue, find the shortest alternating-color paths from node 0 to each node. You are provided with two arrays, 'redEdges' and 'blueEdges', where each element [i, j] represents an edge from node i to node j with the corresponding color.  The graph can contain self-edges and parallel edges.  Your task is to determine the shortest path length from node 0 to each node 'i' such that the colors of the edges alternate along the path. If no such path exists, the length should be -1.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 200",
                    "0 <= rlen + blen <= 1000",
                    "Where \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the number of nodes in the graph, \u2018rlen\u2019 is the size of array \u2018redEdges\u2019, and \u2018blen\u2019 is the size of array \u2018blueEdges.\u2019",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "4 2 2\n0 1\n1 3\n1 1\n1 2",
                        "output": "0 1 2 3",
                        "explanation": "The shortest paths from node 0 are:\nNode 1: 0 -> 1 (Length: 1)\nNode 2: 0 -> 1 -> 2 (Length: 2)\nNode 3: 0 -> 1 -> 1 -> 3 (Length: 3)"
                    },
                    {
                        "input": "4 2 2\n0 1\n1 3\n0 2\n2 3",
                        "output": "0 1 1 -1",
                        "explanation": "The shortest paths from node 0 are:\nNode 1: 0 -> 1 (Length: 1)\nNode 2: 0 -> 2 (Length: 1)\nNode 3: No valid alternating-color path exists."
                    },
                    {
                        "input": "3 1 1\n2 1\n1 0",
                        "output": "0 -1 -1",
                        "explanation": "In this case since no path exist from node 0 to node 1 and node 2, so answer for them is -1."
                    },
                    {
                        "input": "3 1 2\n1 0\n0 1\n0 2",
                        "output": "0 1 1",
                        "explanation": "The shortest paths from node 0 are:\nNode 1: 0 -> 1 (Length: 1)\nNode 2: 0 -> 2 (Length: 1)"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a modified Dijkstra\u2019s algorithm.</p>",
            "<p>As the graph is unweighted, do we need to use Dijkstra\u2019s algorithm?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}