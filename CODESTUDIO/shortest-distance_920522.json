{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8917,
            "title": "Shortest Distance",
            "titleSlug": "shortest-distance_920522",
            "content": "<h4 id=\"you-have-been-given-a-binary-search-tree-and-two-keys-node1-and-node2-in-it\">You have been given a Binary Search Tree and two keys &#39;NODE1&#39; and &#39;Node2&#39; in it.</h4>\n\n<h4 id=\"your-task-is-to-find-the-shortest-distance-between-two-nodes-with-the-given-two-keys-it-may-be-assumed-that-both-keys-exist-in-bst\">Your task is to find the shortest distance between two nodes with the given two keys. It may be assumed that both keys exist in BST.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/0000000000000742.PNG\" alt=\"alttext\"></p>\n\n<pre><code>For the above BST:\n\u2018NODE1\u2019 = 6, \u2018NODE2\u2019 = 14\n\nDistance between 6 and 14 = (Number of nodes in the path from 6 to 14) + 1.\nSo the path from 6 to 14 is : ( 6 -&gt; 3 -&gt; 8 -&gt; 10 -&gt; 14).\n\nDistance between 6 and 14 = 3 ( i.e. 3, 8, 10 are in path) + 1 = 4.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. Then each test case follows.\n\nThe first line of input contains the elements of the tree in the level order form separated by a single space. \nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nThe second line of each test case contains two space-separated integers, \u2018NODE1\u2019 and \u2018NODE2\u2019, denoting the keys of the two given nodes.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree (not a BST) depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/input-9867.bmp\" alt=\"input\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return an integer denoting the distance between two keys, i.e., \u2018NODE1\u2019 and \u2018NODE2\u2019 in the given BST.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n1 &lt;= N &lt;= 10^3 \n1 &lt;= Node.data &lt;= 10^9\n\nWhere &#39;N&#39; denotes the number of nodes in the BST and &#39;Node.data&#39; represents the keys of nodes in BST.\nThe keys \u2018NODE1\u2019 and \u2018NODE2\u2019 are present in the given BST.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n6 10\n5 2 12 1 -1 -1 16 -1 -1 -1 -1\n1 16\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample1-9868.png\" alt=\"sample1\"></p>\n\n<pre><code>For the above BST:\n\u2018NODE1\u2019 = 6, \u2018NODE2\u2019 = 10   \nDistance between 6 and 10 = (Number of nodes in the path from 6 to 10) + 1.\nSo the path from 6 to 10 is : ( 6 -&gt; 5 -&gt; 8 -&gt; 10).\n\nDistance between 6 and 10 = 2 ( i.e. 5, 8 are in path) + 1 = 3.\n\nFor the second test case :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/sample2-9869.png\" alt=\"sample2\"></p>\n\n<pre><code>For the above BST:\n\u2018NODE1\u2019 = 1, \u2018NODE2\u2019 = 16    \nDistance between 1 and 16 = (Number of nodes in the path from 1 to 16) + 1.\nSo the path from 1 to 16 is : ( 1 -&gt; 2 -&gt; 5 -&gt; 12 -&gt; 16).\n\nDistance between 1 and 16 = 3 ( i.e. 2, 5, 12 are in path) + 1 = 4.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 3 8 1 -1 -1 -1 -1 2 -1 -1\n2 8\n8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1\n2 7\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) represented by its root node, and two integer keys, `node1` and `node2`, determine the shortest distance between the nodes containing these keys. The distance is defined as the number of edges in the path between the two nodes plus 1.  It is guaranteed that both `node1` and `node2` exist in the BST.",
                "constraints": [
                    "1 <= T <= 10^2",
                    "1 <= N <= 10^3",
                    "1 <= Node.data <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "root = [8, 5, 10, 2, 6, -1, -1, -1, -1, -1, 7, -1, -1], node1 = 6, node2 = 10",
                        "output": "3",
                        "explanation": "The path from 6 to 10 is 6 -> 5 -> 8 -> 10. The number of nodes in the path between 6 and 10 are 5, 8.  Distance is 2 + 1 = 3."
                    },
                    {
                        "input": "root = [5, 2, 12, 1, -1, -1, 16, -1, -1, -1, -1], node1 = 1, node2 = 16",
                        "output": "4",
                        "explanation": "The path from 1 to 16 is 1 -> 2 -> 5 -> 12 -> 16. The number of nodes in the path between 1 and 16 are 2, 5, 12. Distance is 3 + 1 = 4."
                    },
                    {
                        "input": "root = [5, 3, 8, 1, -1, -1, -1, -1, 2, -1, -1], node1 = 2, node2 = 8",
                        "output": "4",
                        "explanation": "The path from 2 to 8 is 2 -> 1 -> 3 -> 5 -> 8.  The number of nodes in the path between 2 and 8 are 1, 3, 5. Distance is 3 + 1 = 4."
                    },
                    {
                        "input": "root = [8, 5, 10, 2, 6, -1, -1, -1, -1, -1, 7, -1, -1], node1 = 2, node2 = 7",
                        "output": "3",
                        "explanation": "The path from 2 to 7 is 2 -> 5 -> 6 -> 7. The number of nodes between 2 and 7 are 5, 6. Distance is 2 + 1 = 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find the lowest common ancestor (LCA) of \u2018NODE1\u2019 and \u2018NODE2\u2019.</p>",
            "<p>Can we find the lowest common ancestor (LCA) of \u2018NODE1\u2019 and \u2018NODE2\u2019 using the BST property.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}