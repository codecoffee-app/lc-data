{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11863,
            "title": "Shortest Job First(Non - preemptive)",
            "titleSlug": "shortest-job-first-non-preemptive_1387147",
            "content": "<h4 id=\"you-are-given-n-processes-with-their-respective-process-id-arrival-time-and-burst-time-your-task-is-to-schedule-the-given-n-processes-using-the-shortest-job-first-scheduling-algorithm-and-find-their-respective-waiting-time-and-turnaround-time\">You are given \u2018N\u2019 processes with their respective process id, arrival time, and burst time. Your task is to schedule the given \u2018N\u2019 processes using the shortest job first scheduling algorithm and find their respective waiting time and turnaround time.</h4>\n\n<h4 id=\"shortest-job-first-is-a-scheduling-algorithm-in-which-the-process-having-the-shortest-execution-time-is-chosen-for-the-subsequent-execution-here-you-will-implement-a-non-preemptive-version-non-preemptive-scheduling-is-a-cpu-scheduling-technique-in-which-the-process-takes-the-resource-cpu-time-and-holds-it-till-the-process-gets-terminated-or-is-pushed-to-the-waiting-state-no-process-is-interrupted-until-it-is-completed-and-after-that-processor-switches-to-another-process-it-significantly-reduces-the-average-waiting-time-for-other-processes-awaiting-execution\">Shortest Job First is a scheduling algorithm in which the process having the shortest execution time is chosen for the subsequent execution. Here, you will implement a non - preemptive version (Non-preemptive Scheduling is a CPU scheduling technique in which the process takes the resource (CPU time) and holds it till the process gets terminated or is pushed to the waiting state. No process is interrupted until it is completed, and after that processor switches to another process). It significantly reduces the average waiting time for other processes awaiting execution.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<p><img src=\"https://files.codingninjas.in/image11-8883.png\" alt=\"1\"></p>\n\n<h4 id=\"we-have-four-processes-in-our-ready-queue-as-we-discussed-sjf-will-select-the-waiting-process-with-the-shortest-execution-time-to-execute-next-so-for-the-above-example-the-sjf-scheduling-of-the-processes-along-with-their-completion-time-waiting-time-and-turnaround-time-will-be\">We have four processes in our ready queue. As we discussed, SJF will select the waiting process with the shortest execution time to execute next. So for the above example, the SJF scheduling of the processes along with their completion time, waiting time, and turnaround time will be,</h4>\n\n<p><img src=\"https://files.codingninjas.in/image22-8884.png\" alt=\"1\"></p>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1) Completion Time: Time at which process completes its execution.\n2) Turn Around Time: Time difference between completion time and arrival time. Turn Around Time = Completion Time \u2013 Arrival Time.\n3) Waiting Time(W.T.): Time difference between turn around time and the burst time. Waiting Time = Turn Around Time \u2013 Burst Time.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains a single integer, \u2018N\u2019, where \u2018N\u2019 represents the number of processes.\n\nThe next \u2018N\u2019 lines of each test case containing three space-separated integers, \u2018processId\u2019, \u2018arrivalTime\u2019 and \u2018burstTime\u2019, where \u2018processId\u2019, \u2018arrivalTime\u2019 and \u2018burstTime\u2019 represents the process id, arrival time, and burst time for the processes, respectively.\n\nNote: It is guaranteed that each process has a unique process id.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, print \u2018N\u2019 lines, each having five space-separated integers, process id, arrival time, burst time, waiting time, and turnaround time.\n\nPrint the processes according to SJF scheduling. If multiple processes have the same execution time, schedule the process with a lower process id first.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 100\n1 &lt;= processId &lt;= N\n0 &lt;= arrivalTime &lt;= 10 ^ 7\n1 &lt;= burstTime &lt;= 10 ^ 7\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 denotes the number of processes,  \u2018processId\u2019, \u2018arrivalTime\u2019, and \u2018burstTime\u2019 represents the process id, arrival time, and burst time of any process, respectively.\n\nTime Limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n3\n1 3 2\n3 1 5\n2 4 1\n4\n1 2 7\n3 2 3\n2 0 4\n4 0 1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>3 1 5 0 5\n2 4 1 2 3\n1 3 2 4 6\n4 0 1 0 1\n2 0 4 1 5\n3 2 3 3 6\n1 2 7 6 13\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h4>\n\n<pre><code>Test Case 1 :  \nThe process given is,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image33-8890.png\" alt=\"1\"></p>\n\n<pre><code>We have three processes in our ready queue. SJF will select the waiting process with the shortest execution time to execute next. The SJF scheduling of the processes along with their completion time, waiting time, and turnaround time will be,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image44-8889.png\" alt=\"1\"></p>\n\n<pre><code>Test Case 2 : \nThe process given is,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image55-8886.png\" alt=\"1\">    </p>\n\n<pre><code>We have four processes in our ready queue. SJF will select the waiting process with the shortest execution time to execute next. The SJF scheduling of the processes along with their completion time, waiting time, and turnaround time will be,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image66-8888.png\" alt=\"1\">    </p>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>1\n4\n1 4 1\n4 3 2\n2 2 3\n3 1 4\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>3 1 4 0 4\n1 4 1 1 2\n4 3 2 3 5\n2 2 3 6 9\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h4>\n\n<pre><code>Test Case 1 :  \nThe process given is,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image77-8887.png\" alt=\"1\">    </p>\n\n<pre><code>We have four processes in our ready queue. SJF will select the waiting process with the shortest execution time to execute next. The SJF scheduling of the processes along with their completion time, waiting time, and turnaround time will be,\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image88-8885.png\" alt=\"1\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement the Shortest Job First (SJF) scheduling algorithm (non-preemptive) for a given set of processes.  Each process is defined by its process ID, arrival time, and burst time. Calculate and output the waiting time and turnaround time for each process according to SJF scheduling.\n\nSJF selects the process with the shortest burst time for execution. In the non-preemptive version, once a process starts, it runs until completion.  If multiple processes have the same burst time, schedule the process with the smaller process ID first.\n\n* **Completion Time:** The time at which a process finishes execution.\n* **Turnaround Time:** Completion Time - Arrival Time.\n* **Waiting Time:** Turnaround Time - Burst Time.",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= N <= 100 (Number of processes)",
                    "1 <= processId <= N",
                    "0 <= arrivalTime <= 10^7",
                    "1 <= burstTime <= 10^7",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\n1 3 2\n3 1 5\n2 4 1",
                        "output": "3 1 5 0 5\n2 4 1 2 3\n1 3 2 4 6",
                        "explanation": "The processes are scheduled based on shortest burst time, resolving ties with process ID. Process 3 arrives first, so it runs first. Then Process 2 with burst time 1. Lastly, Process 1."
                    },
                    {
                        "input": "4\n1 2 7\n3 2 3\n2 0 4\n4 0 1",
                        "output": "4 0 1 0 1\n2 0 4 1 5\n3 2 3 3 6\n1 2 7 6 13",
                        "explanation": "Process 4 arrives first and has the shortest burst time of 1. Then process 2 arrives and has a burst time of 4, process 3 arrives with burst time 3, so it runs first. Finally process 1 is scheduled."
                    },
                    {
                        "input": "4\n1 4 1\n4 3 2\n2 2 3\n3 1 4",
                        "output": "3 1 4 0 4\n1 4 1 1 2\n4 3 2 3 5\n2 2 3 6 9",
                        "explanation": "Process 3 arrives first and has a burst time of 4 so, it is scheduled first with wt =0, tat = 4. Then process 1 arrives and has burst time of 1. So, it runs first. After that process 4 runs with burst time of 2 and after that process 2 runs with burst time 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to build a constructive algorithm.</p>"
        ],
        "relatedTopics": [],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}