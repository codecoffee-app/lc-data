{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7566,
            "title": "Shortest Path in a Binary Matrix",
            "titleSlug": "shortest-path-in-a-binary-matrix_699835",
            "content": "<h4 id=\"you-have-been-given-a-binary-matrix-of-size-n-m-where-each-element-is-either-0-or-1-you-are-also-given-a-source-and-a-destination-cell-both-of-them-lie-within-the-matrix\">You have been given a binary matrix of size &#39;N&#39; * &#39;M&#39; where each element is either 0 or 1. You are also given a source and a destination cell, both of them lie within the matrix.</h4>\n\n<h4 id=\"your-task-is-to-find-the-length-of-the-shortest-path-from-the-source-cell-to-the-destination-cell-only-consisting-of-1s-if-there-is-no-path-from-source-to-destination-cell-return-1\">Your task is to find the length of the shortest path from the source cell to the destination cell only consisting of 1s. If there is no path from source to destination cell, return -1.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. Coordinates of the cells are given in 0-based indexing.\n2. You can move in 4 directions (Up, Down, Left, Right) from a cell.\n3. The length of the path is the number of 1s lying in the path.\n4. The source cell is always filled with 1.\n</code></pre>\n\n<h5 id=\"for-example\">For example -</h5>\n\n<pre><code>1 0 1\n1 1 1\n1 1 1\nFor the given binary matrix and source cell(0,0) and destination cell(0,2). Few valid paths consisting of only 1s are\n\nX 0 X     X 0 X \nX X X     X 1 X \n1 1 1     X X X \nThe length of the shortest path is 5.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains two integers &#39;N&#39; and &#39;M&#39; separated by a single space representing the number of rows and columns in the binary matrix respectively.\n\nThe next &#39;N&#39; lines of the input contain &#39;M&#39; single space-separated integers each representing the &#39;i&#39;-th row of the Binary Matrix.\n\nThe next line of input contains two single space-separated integers &#39;SOURCEX&#39; and &#39;SOURCEY&#39; representing the coordinates of the source cell.\n\nThe next line of input contains two single space-separated integers &#39;DESTX&#39; and &#39;DESTY&#39; representing the coordinates of the destination cell.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;= 500\n1 &lt;= M &lt;= 500\nMAT[i] = {0, 1}\n\n0 &lt;= SOURCEX &lt;= N - 1\n0 &lt;= SOURCEY &lt;= M - 1\n0 &lt;= DESTX &lt;= N - 1\n0 &lt;= DESTY &lt;= M - 1\nMAT[SOURCEX][SOURCEY] = 1\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single line that contains a single integer i.e. length of the shortest path from the source cell to the destination cell.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3 3\n0 1 0 \n0 0 1 \n1 1 1 \n2 0\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>The shortest path is composed of the cells (2,0) -&gt; (2,1) -&gt; (2,2) -&gt; (1,2). Length of this path is 4.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4 4\n1 0 1 0 \n0 1 0 1 \n1 0 1 0 \n0 0 1 0 \n0 0\n3 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 24,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary matrix represented as a 2D vector of booleans (`mat`) of size `n x m`, find the length of the shortest path from the source cell (`sourceX`, `sourceY`) to the destination cell (`destX`, `destY`). The path can only consist of cells with value `true` (represented as 1 in the original problem), and movement is allowed in four directions (Up, Down, Left, Right). The length of the path is the number of cells (with value `true`) in the shortest path. If no such path exists, return -1.",
                "constraints": [
                    "1 <= N <= 500",
                    "1 <= M <= 500",
                    "MAT[i][j] is either 0 or 1 (converted to bool)",
                    "0 <= SOURCEX <= N - 1",
                    "0 <= SOURCEY <= M - 1",
                    "0 <= DESTX <= N - 1",
                    "0 <= DESTY <= M - 1",
                    "MAT[SOURCEX][SOURCEY] = 1 (converted to bool)"
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 3, mat = [[false, true, false], [false, false, true], [true, true, true]], sourceX = 2, sourceY = 0, destX = 1, destY = 2",
                        "output": "4",
                        "explanation": "The shortest path is (2,0) -> (2,1) -> (2,2) -> (1,2), with a length of 4."
                    },
                    {
                        "input": "n = 4, m = 4, mat = [[true, false, true, false], [false, true, false, true], [true, false, true, false], [false, false, true, false]], sourceX = 0, sourceY = 0, destX = 3, destY = 2",
                        "output": "-1",
                        "explanation": "There is no path from (0,0) to (3,2) consisting only of 'true' cells."
                    },
                    {
                        "input": "n = 2, m = 2, mat = [[true, true], [true, true]], sourceX = 0, sourceY = 0, destX = 1, destY = 1",
                        "output": "2",
                        "explanation": "The shortest path is (0,0) -> (1,1) (or (0,0) -> (0,1) -> (1,1) or (0,0) -> (1,0) -> (1,1)) with a length of 2."
                    },
                    {
                        "input": "n = 1, m = 5, mat = [[true, true, true, true, true]], sourceX = 0, sourceY = 0, destX = 0, destY = 4",
                        "output": "5",
                        "explanation": "The only path is from (0,0) to (0,4), length 5."
                    },
                    {
                        "input": "n = 5, m = 1, mat = [[true], [true], [true], [true], [true]], sourceX = 0, sourceY = 0, destX = 4, destY = 0",
                        "output": "5",
                        "explanation": "The only path is from (0,0) to (4,0), length 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use backtracking to reach the destination cell.</p>",
            "<p>Breadth-First-Search is always associated with the shortest path. Try to use it.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}