{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8573,
            "title": "Shortest Path in a Binary Maze",
            "titleSlug": "shortest-path-in-a-binary-maze_893065",
            "content": "<h4 id=\"given-a-maze-in-the-form-of-a-binary-rectangular-matrix-of-size-m-n-where-each-element-can-either-be-0-or-1-the-task-is-to-find-the-length-of-the-shortest-path-in-a-maze-from-a-given-source-cell-to-a-destination-cell\">Given a maze in the form of a binary rectangular matrix of size M*N, where each element can either be 0 or 1, the task is to find the length of the shortest path in a maze from a given source cell to a destination cell.</h4>\n\n<h4 id=\"the-path-can-only-be-created-out-of-a-cell-if-its-value-is-1-and-at-any-given-moment-we-can-only-move-one-step-in-one-of-the-four-directions-the-valid-moves-are\">The path can only be created out of a cell if its value is 1 and at any given moment, we can only move one step in one of the four directions. The valid moves are:</h4>\n\n<pre><code>Up: (x, y) -&gt; (x - 1, y)\nLeft: (x, y) -&gt; (x, y - 1)\nDown: (x, y) -&gt; (x + 1, y)\nRight: (x, y) -&gt; (x, y + 1)\n</code></pre>\n\n<h4 id=\"if-there-is-no-path-from-a-given-source-cell-to-a-destination-cell-return-1\">If there is no path from a given source cell to a destination cell, return -1.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>consider the binary matrix below. If source = (0, 0) and destination = (3, 4), the shortest path from source to destination has length 11.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binary-matrix-5821.png\" alt=\"example\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains two space-separated integers M and N, representing the number of rows and columns respectively.\n\nEach of the next M lines contains N space-separated integers representing the matrix.\n\nThe last second line of each test case contains two space-separated integers denoting the coordinates of the source cell.\n\nThe last line of each test case contains two space-separated integers denoting the coordinates of the destination cell.\n\nFor example, the input for the binary matrix depicted in the below image would be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binary-matrix-2-5835.png\" alt=\"example\"></p>\n\n<pre><code>3 4\n1 1 1 1\n0 1 1 0\n0 0 1 1\n0 0\n2 3\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>The first line represents that the given matrix has 3 rows and 4 columns.\nEach of the next 3 lines contains 4 space-separated integers representing a row.\nLast second line contains two space-separated integers representing coordinates of the source cell, i.e. (0, 0).\nThe last line contains two space-separated integers representing coordinates of the destination cell, i.e. (2, 3).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer denoting the length of the shortest path between a given source cell to a destination cell. If such a path does not exist, print -1.\n\nThe output for each test case is in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= M, N &lt;= 100\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 4\n1 1 1 1\n0 1 1 0\n0 0 1 1\n0 0\n2 3\n2 2\n1 1\n0 1\n0 0\n1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>5\n2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>For the first test case, the shortest path between the source cell (0, 0) and destination cell (2,3) is highlighted in the figure below, having a length of 5.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binary-matrix-2-5835.png\" alt=\"example\"></p>\n\n<pre><code>For the second test case, the only path from the source cell to the destination cell has a length of 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2 2\n1 1\n1 1\n0 1\n1 1\n2 2\n1 0\n0 1\n0 0\n1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 13,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary rectangular matrix of size M*N, where each element is either 0 or 1, find the length of the shortest path from a given source cell to a destination cell. A path can only be formed through cells with a value of 1.  You can move one step at a time in the four cardinal directions (Up, Down, Left, Right). If no path exists, return -1.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= M, N <= 100",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "3 4\n1 1 1 1\n0 1 1 0\n0 0 1 1\n0 0\n2 3\n2 2\n1 1\n0 1\n0 0\n1 1",
                        "output": "5\n2",
                        "explanation": "In the first test case, the shortest path between (0, 0) and (2, 3) has length 5. In the second test case, the only path from (0, 0) to (1, 1) has length 2."
                    },
                    {
                        "input": "2 2\n1 1\n1 1\n0 1\n1 1\n2 2\n1 0\n0 1\n0 0\n1 1",
                        "output": "1\n-1",
                        "explanation": "In the first test case, the shortest path between (0, 1) and (1, 1) has length 1. In the second test case, there is no possible path between (0,0) and (1,1) because the value at (1,0) is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Consider all the possible paths from the source cell to the destination cell with the help of backtracking.</p>",
            "<p>The Lee algorithm is one possible solution for maze routing problems based on BFS (Breadth-first search).</p>",
            "<p>Can you think about using level order traversal to get the level of the destination cell?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}