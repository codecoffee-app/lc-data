{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9266,
            "title": "Shortest path in an unweighted graph",
            "titleSlug": "shortest-path-in-an-unweighted-graph_981297",
            "content": "<h4 id=\"the-city-of-ninjaland-is-analogous-to-the-unweighted-graph-the-city-has-n-houses-numbered-from-1-to-n-respectively-and-are-connected-by-m-bidirectional-roads-if-a-road-is-connecting-two-houses-x-and-y-which-means-you-can-go-from-x-to-y-or-y-to-x-it-is-guaranteed-that-you-can-reach-any-house-from-any-other-house-via-some-combination-of-roads-two-houses-are-directly-connected-by-at-max-one-road\">The city of Ninjaland is analogous to the unweighted graph. The city has \u2018N\u2019 houses numbered from 1 to \u2018N\u2019 respectively and are connected by M bidirectional roads. If a road is connecting two houses \u2018X\u2019 and \u2018Y\u2019 which means you can go from \u2018X\u2019 to \u2018Y\u2019 or \u2018Y\u2019 to \u2018X\u2019. It is guaranteed that you can reach any house from any other house via some combination of roads. Two houses are directly connected by at max one road.</h4>\n\n<h4 id=\"a-path-between-house-s-to-house-t-is-defined-as-a-sequence-of-vertices-from-s-to-t-where-starting-house-is-s-and-the-ending-house-is-t-and-there-is-a-road-connecting-two-consecutive-houses-basically-the-path-looks-like-this-s-h1-h2-h3-t-you-have-to-find-the-shortest-path-from-s-to-t\">A path between house \u2018S\u2019 to house \u2018T\u2019 is defined as a sequence of vertices from \u2018S\u2019 to \u2018T\u2019. Where starting house is \u2018S\u2019 and the ending house is \u2018T\u2019 and there is a road connecting two consecutive houses. Basically, the path looks like this: (S , h1 , h2 , h3 , ... T). you have to find the shortest path from \u2018S\u2019 to \u2018T\u2019.</h4>\n\n<h5 id=\"for-example\">For example</h5>\n\n<pre><code>In the below map of Ninjaland let say you want to go from S=1 to T=8, the shortest path is (1, 3, 8). You can also go from S=1 to T=8  via (1, 2, 5, 8)  or (1, 4, 6, 7, 8) but these paths are not shortest.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/pic1-6747.png\" alt=\"altImage\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input will have a single positive integer \u2018T\u2019, denoting the number of test cases. \n\nThe first line of each test case has two positive integers \u2018N\u2019 and \u2018M\u2019 denoting the number of houses and the number of roads in the ninja land.\n\nThe second line contains two integers \u2018S\u2019 and \u2018T\u2019 denoting the starting and ending house in the path.\n\nNext M lines each contain two integers \u2018X\u2019 and \u2018Y\u2019. Which denotes a road between house \u2018X\u2019 and house \u2018Y\u2019.   \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>You have to return a vector of nodes denoting the shortest path starting from \u2018S\u2019 and ending in \u2018T\u2019.\n\nIf there is more than one shortest path you can return any one of them.\n\nThe output of each test case will be &quot;Correct&quot; if you have returned the correct answer, else it will be &quot;Incorrect&quot;.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n2 &lt;= N &lt;= 10 ^ 3\n1 &lt;= M &lt;= min( N *(N - 1) / 2 , 1000 )\n1 &lt;= S, T &lt;= N\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1 :</h5>\n\n<pre><code>1\n4 4\n1 4\n1 2\n2 3\n3 4\n1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>( 1 , 3 , 4 )\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample input 1 :</h5>\n\n<pre><code>In the above graph there are two ways to go from 1 to 4 ,\n( 1 , 2 , 3 , 4 ) and ( 1 , 3 , 4 ) but the second path is the shortest path.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/pic2-6748.png\" alt=\"altImage\"></p>\n\n<h5 id=\"sample-input-2\">Sample input 2 :</h5>\n\n<pre><code>1\n8 9\n1 8\n1 2\n1 3\n1 4\n2 5\n5 8 \n3 8\n4 6\n6 7\n7 8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>( 1 , 3 , 8 )\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 135,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an unweighted, undirected graph representing a city with 'N' houses (numbered 1 to N) and 'M' bidirectional roads. You are guaranteed that any house can be reached from any other.  The task is to find one of the shortest paths between a starting house 'S' and an ending house 'T'. Return a vector representing the sequence of houses in the shortest path.",
                "constraints": [
                    "1 <= T <= 100",
                    "2 <= N <= 1000",
                    "1 <= M <= min( N * (N - 1) / 2 , 1000 )",
                    "1 <= S, T <= N",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 4\n1 4\n1 2\n2 3\n3 4\n1 3",
                        "output": "( 1 , 3 , 4 )",
                        "explanation": "There are two possible paths from house 1 to house 4: (1, 2, 3, 4) and (1, 3, 4).  The shortest path is (1, 3, 4)."
                    },
                    {
                        "input": "8 9\n1 8\n1 2\n1 3\n1 4\n2 5\n5 8\n3 8\n4 6\n6 7\n7 8",
                        "output": "( 1 , 3 , 8 )",
                        "explanation": "The shortest path from house 1 to house 8 is (1, 3, 8)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you use the fact: the graph has unweighted edges?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n\t\tTime Complexity : O(N + M)\t\t\r\n\t\tSpace Complexity : O( N + M ),\r\n\r\n\t\twhere N is the number of nodes and M is number of edges.\r\n\r\n*/\r\n\r\nvector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t)\r\n{\t\r\n\t// We will store graph in an adjecency list.\r\n\tvector<int> ADJ[n+1];\t\r\n\t\r\n    // Making adjacency list ADJ from edges.\r\n\tfor(int i = 0 ; i < m ; i++ )\r\n    {\r\n\t\tint X , Y;\r\n\t\tX=edges[i].first;\r\n\t\tY=edges[i].second;\r\n\t\tADJ[X].push_back(Y);\r\n\t\tADJ[Y].push_back(X);\r\n\t}\r\n\r\n\t/* \r\n    \tDeclaring visited array and parent array , visited will be used in dfs. \r\n\t    And parent will be use to recreate the path.\r\n\t*/\r\n    vector<int> visited(n+1,-1);\r\n\tvector<int> parent(n+1,-1);\r\n\tvisited[s]=1;\r\n\tqueue<int> Q;\r\n\t\r\n\t/* \r\n    \tStarting BFS from node S.\r\n\t\tQ is the queue used in bfs.\r\n\t*/\r\n    Q.push(s);\r\n\t\r\n    while(Q.size()>0) \r\n    {\r\n\t\t// Selecting a node and traversing all its neighbours.\r\n\t\tint currentNode = Q.front();\r\n\t\tQ.pop();\r\n\t\t\r\n        for(int nextNode : ADJ[currentNode] ) \r\n        {\r\n\t\t\t/* \r\n            \tIf the node is not already visited we will add it to the Q.\r\n\t\t\t\tAnd we will set the currentNode the parent of nextNode.\r\n\t\t\t*/\r\n            if( visited[nextNode]==-1 ) \r\n            {\r\n\t\t\t\tvisited[nextNode]=1;\r\n\t\t\t\tQ.push(nextNode);\r\n\t\t\t\tparent[nextNode]=currentNode;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Now we will backtrack and recreate the path from S to T using visited array.\r\n\tvector<int> path;\r\n\tint currentNode =  t;\r\n\t\r\n    // We will start from T and try to go back from here until we reaches S.\r\n\tpath.push_back(t);\r\n\t\r\n    while(currentNode != s) \r\n    {\r\n\t\t/* \r\n        \tFrom current node we will find a neighbour who has distance equal to\r\n\t\t\tdistance of current node - 1 , that node will be the parent of currentNode.\r\n\t\t*/\r\n        currentNode = parent[currentNode];\r\n\t\tpath.push_back(currentNode);\t\r\n\t}\r\n\r\n\t// We got path in from T to S , so we will reverse it and return it.\r\n\treverse(path.begin() , path.end());\r\n\r\n\treturn path;\r\n}\r\n\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\r\n\tTime Complexity : O(N + M)\r\n\tSpace Complexity : O( N + M ),\r\n\r\n\twhere N is the number of nodes and M is number of edges.\r\n\"\"\"\r\n\r\nfrom queue import Queue\r\n\r\ndef shortestPath(edges, n, m, s, t):\r\n\r\n    # We will store graph in an adjecency list.\r\n    ADJ = [[] for _ in range(n + 1)]\r\n\r\n    # Making adjacency list ADJ from edges.\r\n    for i in range(m):\r\n        X = edges[i][0]\r\n        Y = edges[i][1]\r\n        ADJ[X].append(Y)\r\n        ADJ[Y].append(X)\r\n\r\n    \"\"\"\r\n       Declaring visited array and parent array , visited will be used in dfs.\r\n\t   And parent will be use to recreate the path.\r\n    \"\"\"\r\n    visited = [-1] * (n + 1)\r\n    parent = [-1] * (n + 1)\r\n    visited[s] = 1\r\n\r\n    \"\"\" \r\n        Starting BFS from node S.\r\n\t    Q is the queue used in bfs.\r\n    \"\"\"\r\n    Q = Queue()\r\n    Q.put(s)\r\n\r\n    while (Q.qsize() > 0):\r\n\r\n        # Selecting a node and traversing all its neighbours.\r\n        currentNode = Q.get()\r\n\r\n        for nextNode in ADJ[currentNode]:\r\n\r\n            \"\"\"\r\n            \tIf the node is not already visited we will add it to the Q.\r\n            \tAnd we will set the currentNode the parent of nextNode.\r\n            \"\"\"\r\n            if visited[nextNode] == -1:\r\n                visited[nextNode] = 1\r\n                Q.put(nextNode)\r\n                parent[nextNode] = currentNode\r\n\r\n    # Now we will backtrack and recreate the path from S to T using visited array.\r\n    path = []\r\n    currentNode = t\r\n\r\n    # We will start from T and try to go back from here until we reaches S.\r\n    path.append(t)\r\n\r\n    while (currentNode != s):\r\n\r\n        \"\"\"\r\n        \tFrom current node we will find a neighbour who has distance equal to\r\n            distance of current node - 1 , that node will be the parent of currentNode.\r\n        \"\"\"\r\n        currentNode = parent[currentNode]\r\n        path.append(currentNode)\r\n\r\n    # We got path in from T to S , so we will reverse it and return it.\r\n    path.reverse()\r\n    return path\r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n        Time Complexity : O(N + M)      \r\n        Space Complexity : O( N + M ),\r\n\r\n        where N is the number of nodes and M is number of edges.\r\n\r\n*/\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\nimport java.util.LinkedList;\r\nimport java.util.Collections;\r\n\r\npublic class Solution \r\n{\r\n    public static LinkedList<Integer> shortestPath(int[][] edges, int n, int m, int s, int t) \r\n    {    \r\n        // We will store graph in an adjecency list.\r\n        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>(n + 1);\r\n        \r\n        for (int i = 0; i <= n; i++) \r\n        {\r\n            adj.add(new ArrayList<Integer>());\r\n        }\r\n\r\n        // Making adjacency list ADJ from edges.\r\n        for (int i = 0; i < m; i++) \r\n        {\r\n            int x, y;\r\n            x = edges[i][0];\r\n            y = edges[i][1];\r\n            adj.get(x).add(y);\r\n            adj.get(y).add(x);\r\n        }\r\n\r\n        /* \r\n        \tDeclaring visited array and parent array , visited will be used in dfs.\r\n        \tAnd parent will be use to recreate the path.\r\n        */\r\n        int visited[] = new int[n + 1];\r\n        int parent[] = new int[n + 1];\r\n        for (int i = 1; i <= n; i++) {\r\n            visited[i] = 0;\r\n            parent[i] = -1;\r\n        }\r\n\r\n        /* \r\n        \tStarting BFS from node S.\r\n        \tQ is the queue used in bfs.\r\n        */\r\n        LinkedList<Integer> q = new LinkedList<Integer>();\r\n        visited[s] = 1;\r\n        parent[s] = -1;\r\n        q.add(s);\r\n        \r\n        while (!q.isEmpty()) \r\n        {\r\n            // Selecting a node and traversing all its neighbours.\r\n            int currentNode = q.remove();\r\n            \r\n            for (int i = 0; i < adj.get(currentNode).size(); i++) \r\n            {\r\n                // If the node is not already visited we will add it to the Q.\r\n                if (visited[adj.get(currentNode).get(i)] == 0) \r\n                {\r\n                    visited[adj.get(currentNode).get(i)] = 1;\r\n                    q.add(adj.get(currentNode).get(i));\r\n                    parent[adj.get(currentNode).get(i)] = currentNode;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Now we will backtrack and recreate the path from S to T using parent array.\r\n        LinkedList<Integer> path = new LinkedList<Integer>();\r\n        int currentNode = t;\r\n        \r\n        // We will start from T and try to go back from here until we reach S.\r\n        path.add(currentNode);\r\n        \r\n        while (parent[currentNode] != -1) \r\n        {    \r\n            /* \r\n            \tFrom current node we will find a neighbour who has distance equal to\r\n            \tdistance of current node - 1 , that node will be the parent of currentNode.\r\n            */\r\n            currentNode = parent[currentNode];\r\n            path.add(currentNode);\r\n        }\r\n\r\n        // We got path in from T to S , so we will reverse it and return it.\r\n        Collections.reverse(path);\r\n        return path;\r\n    }\r\n\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}