{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8923,
            "title": "Shortest Path",
            "titleSlug": "shortest-path_920528",
            "content": "<h4 id=\"you-are-given-a-connected-undirected-graph-with-v-vertices-and-e-edges\">You are given a connected, undirected graph with \u2018V\u2019 vertices and \u2018E\u2019 edges.</h4>\n\n<h4 id=\"you-are-provided-with-two-vertices-src-and-dest-your-task-is-to-return-the-shortest-distance-between-the-given-vertices-src-and-dest\">You are provided with two vertices, \u2018src\u2019 and \u2018dest\u2019. Your task is to return the shortest distance between the given vertices \u2018src\u2019 and \u2018dest\u2019.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000467_1625648108_3_Node_graph.png\" alt=\"altImage\"></p>\n\n<pre><code>For the given graph,\nThe shortest distance between 1 and 3 is 2 (via 1 &lt;-&gt; 2 &lt;-&gt; 3). Hence, the answer is 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018V\u2019 and \u2018E\u2019, denoting the number of vertices and the number of edges in the graph.\n\nThe next \u2018E\u2019 lines of each test case contain two space-separated integers, \u2018vertex1\u2019 and \u2018vertex2\u2019, corresponding to \u2018vertex1\u2019 and \u2018vertex2\u2019 are connected with a bidirectional edge.\n\nThe last line of each test case contains two space-separated integers, \u2018src\u2019 and \u2019dest\u2019, representing two vertices whose minimum distance should be calculated.     \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer representing the shortest distance between the given two vertices, \u2018src\u2019 and \u2018dest\u2019.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= V &lt;= 10^5\nV - 1 &lt;= E &lt;= 10^5\n1 &lt;= vertex1 , vertex2 &lt;= V\n1 &lt;= src, dest &lt;= V\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 3 \n1 2 \n2 3 \n1 3\n2 3 \n4 3 \n1 2 \n2 3 \n3 4 \n4 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n0 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case, \nThe shortest distance between 2 and 3 is 1 (via 2 &lt;-&gt; 3). Hence, the answer is 1.\n\nFor the second test case,\nThe distance between the same vertices is always zero. Hence, the answer is 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4 3 \n1 2 \n2 3 \n4 1 \n2 4\n4 3 \n1 3 \n1 2 \n1 4\n2 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a connected, undirected graph with 'V' vertices and 'E' edges, determine the shortest distance between a source vertex 'src' and a destination vertex 'dest'. The graph is represented by a list of edges.  Return the shortest distance between 'src' and 'dest'.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= V <= 10^5",
                    "V - 1 <= E <= 10^5",
                    "1 <= vertex1, vertex2 <= V",
                    "1 <= src, dest <= V"
                ],
                "testcases": [
                    {
                        "input": "v = 3, e = 3, edges = [[1, 2], [2, 3], [1, 3]], src = 2, dest = 3",
                        "output": "1",
                        "explanation": "The shortest distance between 2 and 3 is 1 (via 2 <-> 3)."
                    },
                    {
                        "input": "v = 4, e = 3, edges = [[1, 2], [2, 3], [3, 4]], src = 1, dest = 4",
                        "output": "3",
                        "explanation": "The shortest path is 1 -> 2 -> 3 -> 4, so the distance is 3."
                    },
                    {
                        "input": "v = 4, e = 3, edges = [[1, 2], [2, 3], [3, 4]], src = 4, dest = 4",
                        "output": "0",
                        "explanation": "The distance between the same vertices is always zero."
                    },
                    {
                        "input": "v = 4, e = 3, edges = [[1, 2], [2, 3], [4, 1]], src = 2, dest = 4",
                        "output": "2",
                        "explanation": "The shortest path is 2 -> 1 -> 4, so the distance is 2."
                    },
                    {
                        "input": "v = 4, e = 3, edges = [[1, 3], [1, 2], [1, 4]], src = 2, dest = 4",
                        "output": "2",
                        "explanation": "The shortest path is 2 -> 1 -> 4, so the distance is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you use any all-pairs Shortest Path algorithm?</p>",
            "<p>Can you use any algorithm for a single-source shortest path?</p>",
            "<p>Can you find the shortest path between two vertices just by traversing the graph?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}