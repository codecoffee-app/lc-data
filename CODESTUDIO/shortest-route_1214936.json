{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10390,
            "title": "Shortest Route",
            "titleSlug": "shortest-route_1214936",
            "content": "<h4 id=\"you-want-to-visit-your-friend-s-house-who-lives-at-some-location-in-an-infinite-grid-you-are-initially-at-the-origin-of-the-infinite-grid-and-can-move-only-in-four-directions-i-e-east-west-north-south\">You want to visit your friend\u2019s house who lives at some location in an infinite grid. You are initially at the origin of the infinite grid and can move only in four directions (i.e East, West, North, South).</h4>\n\n<h4 id=\"for-example-if-you-are-at-cell-x-y-then-you-can-move-to-east-i-e-at-cell-x-1-y-or-west-i-e-at-cell-x-1-y-or-north-i-e-at-cell-x-y-1-or-south-i-e-at-cell-x-y-1\">For Example, If you are at cell (X, Y) then you can move to East i.e at cell (X+1, Y), or West i.e at cell (X-1, Y), or North i.e at cell (X, Y+1), or South i.e at cell (X, Y-1).</h4>\n\n<h4 id=\"your-friend-gives-you-a-string-str-of-length-n-that-represents-the-route-to-his-house-from-the-origin-the-string-str-has-only-four-different-characters-i-e-e-w-n-s-which-represent-direction-east-west-north-south-respectively\">Your friend gives you a string \u2018STR\u2019 of length \u2018N\u2019  that represents the route to his house from the origin. The string \u2018STR\u2019 has only four different characters, i.e \u2018E\u2019, \u2018W\u2019, \u2018N\u2019, \u2018S\u2019. which represent direction East, West, North, South, respectively.</h4>\n\n<h4 id=\"you-find-out-that-the-route-given-by-your-friend-is-very-long-and-a-shorter-route-is-also-possible-your-task-is-to-find-the-smallest-route-to-reach-your-friend-s-house-see-the-example-for-better-clarity\">You find out that the route given by your friend is very long, and a shorter route is also possible. Your task is to find the smallest route to reach your friend\u2019s house. See the example for better clarity.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. There can be more than one shortest route, you should return the one which is lexicographically smallest among them.\n</code></pre>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Consider that your friend\u2019s house is in the cell (2, 1) in the grid. And the route given by your friend is represented by the string \u2018STR\u2019= \u201cNNSEWEE\u201d.\n\nOne of the smallest route to reach cell (2, 1) from origin i.e cell (0, 0) is given by string  \u201cEEN\u201d  i.e you start from the cell (0, 0), then move East, i.e at cell (1, 0), then again move East, i.e at cell (2, 0), and then finally move North i.e at cell (2, 1).\n\nNote, there are some other smallest routes such as \u201cNEE\u201d,  \u201cENE\u201d etc, but \u201cEEN\u201d is the lexicographically smallest among them, so you should return it.  \n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases, then \u2018T\u2019 test cases follow.\n\nThe first line and only line of each test case consist of a string \u2018STR\u2019 of length \u2018N\u2019 representing the route given by your friend.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a single line containing a lexicographically smallest string representing the smallest route to reach your friend\u2019s house from the origin. \n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10 ^ 4\n\u2018STR\u2019 has only characters \u2018E\u2019, \u2018W\u2019, \u2018N\u2019 and \u2018S\u2019. \n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 is the length of the given string \u2018STR\u2019\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\nS\nNNSEWEE   \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>S\nEEN\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nThe given string \u2018STR\u2019 has a single character \u2018S\u2019, which means, friend\u2019s house is at cell (0, -1). There is only one shortest route to reach at cell (0, -1) from the cell (0, 0), and that route is represented by the string  \u2018S\u2019. i.e your friends already give you the shortest route.\n\nTest case 2:\nSee the problem statement for an explanation.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nSSWWNNE\nSENWWN\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>W\nNW\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 24,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'STR' representing a route on an infinite grid from the origin (0, 0) to a friend's house, find the lexicographically smallest shortest route to the same destination. The route 'STR' consists of 'E' (East), 'W' (West), 'N' (North), and 'S' (South) characters.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^4",
                    "'STR' has only characters 'E', 'W', 'N', and 'S'."
                ],
                "testcases": [
                    {
                        "input": "str = \"S\"",
                        "output": "S",
                        "explanation": "The given string 'STR' has a single character 'S', which means the friend\u2019s house is at cell (0, -1). There is only one shortest route to reach at cell (0, -1) from the cell (0, 0), and that route is represented by the string \u2018S\u2019. i.e., your friend already gave you the shortest route."
                    },
                    {
                        "input": "str = \"NNSEWEE\"",
                        "output": "EEN",
                        "explanation": "The route 'NNSEWEE' can be simplified to 'EEN'.  The final position is (2, 1). Other shortest routes like 'NEE' and 'ENE' exist, but 'EEN' is lexicographically smallest."
                    },
                    {
                        "input": "str = \"SSWWNNE\"",
                        "output": "W",
                        "explanation": "The movements can be simplified: SS (South 2), WW (West 2), NN (North 2), E (East 1). Net: West 1. Output is 'W'."
                    },
                    {
                        "input": "str = \"SENWWN\"",
                        "output": "NW",
                        "explanation": "S (South), E (East), N (North - cancels out S), WW (West 2), N (North). Net: West 2 North 1. Simplified lexicographically smallest path 'NW'."
                    },
                    {
                        "input": "str = \"EEEE\"",
                        "output": "EEEE",
                        "explanation": "The string represents the shortest path, so it's returned as is."
                    },
                    {
                        "input": "str = \"SSSSS\"",
                        "output": "SSSSS",
                        "explanation": "The string represents the shortest path, so it's returned as is."
                    },
                    {
                        "input": "str = \"NNNNN\"",
                        "output": "NNNNN",
                        "explanation": "The string represents the shortest path, so it's returned as is."
                    },
                    {
                        "input": "str = \"WWWWW\"",
                        "output": "WWWWW",
                        "explanation": "The string represents the shortest path, so it's returned as is."
                    },
                    {
                        "input": "str = \"NESW\"",
                        "output": "",
                        "explanation": "All movements cancel each other out, resulting in an empty path (back to origin)."
                    },
                    {
                        "input": "str = \"NWSE\"",
                        "output": "",
                        "explanation": "All movements cancel each other out, resulting in an empty path (back to origin)."
                    },
                    {
                        "input": "str = \"SWNE\"",
                        "output": "",
                        "explanation": "All movements cancel each other out, resulting in an empty path (back to origin)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Observe that \u2018South\u2019 and \u2018North\u2019,&nbsp; \u2018East\u2019 and \u2018West\u2019&nbsp; both are opposite pairs of directions and they can cancel each other's effect.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}