{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10094,
            "title": "Shortest Safe Route In A Field With Landmines",
            "titleSlug": "shortest-safe-route-in-a-field-with-landmines_1164264",
            "content": "<h4 id=\"recently-ninja-has-been-learning-about-a-new-ninja-technique-to-cross-a-field-with-landmines-the-field-is-in-the-form-of-a-rectangular-matrix-of-size-m-x-n-having-few-landmines-which-are-placed-arbitrarily-the-landmine-gets-triggered-if-a-person-is-any-closer-than-one-cell-from-the-position-where-it-is-placed-so-ninja-must-avoid-the-landmines-and-any-of-the-four-adjacent-cells-left-right-above-and-below-as-they-are-also-unsafe\">Recently Ninja has been learning about a new Ninja Technique to cross a field with landmines. The field is in the form of a rectangular matrix of size M x N, having few landmines, which are placed arbitrarily. The landmine gets triggered if a person is any closer than one cell from the position where it is placed. So Ninja must avoid the landmines and any of the four adjacent cells (left, right, above and below), as they are also unsafe.</h4>\n\n<h4 id=\"initially-ninja-is-on-one-side-of-the-field-and-has-to-move-to-the-other-side-you-need-to-help-ninja-apply-the-new-ninja-technique-by-providing-him-with-the-length-of-the-shortest-safe-route-possible-from-any-cell-in-the-first-column-to-any-cell-in-the-last-column-of-the-field\">Initially Ninja is on one side of the field and has to move to the other side. You need to help Ninja apply the new Ninja Technique by providing him with the length of the shortest safe route possible from any cell in the first column to any cell in the last column of the field.</h4>\n\n<h4 id=\"note-that-ninja-is-only-allowed-to-move-only-in-the-direction-left-right-above-and-below-i-e-he-cannot-move-diagonally-to-the-next-cell\">Note that Ninja is only allowed to move only in the direction left, right, above and below i.e., he cannot move diagonally to the next cell.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The length of the path is the number of steps required to reach from the first column of the field to the last column i.e., one less than the number of cells in the path.\n</code></pre>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>Consider the field of size 4*4, shown below. The cells containing landmine are marked with 0 and red colour. The cells near the landmine which are unsafe are marked with a light red colour. \n\nThe shortest safe route for Ninja, starting from any cell in the first column to any cell in the last column of the field is marked with green colour. The length of the path is 3.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/10094-sample-1-testcase-1-7914.PNG\" alt=\"Example Matrix\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The very first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of every test case contains two space-separated integers \u2018M\u2019 and \u2018N\u2019 denoting the number of rows and columns, respectively, in the field matrix.\n\nThe next &#39;M&#39; lines of the input contain &#39;N&#39; space-separated integers - 0 or 1, where 0 denotes the presence of landmine at that cell and 1 denotes the absence of landmine.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the length of the shortest safe route possible from any cell in the first column to any cell in the last column of the field. In case no such path exists, print -1.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just return the length of the shortest path.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 \n1 &lt;= N, M &lt;= 1000\n0 &lt;= Field[i][j] &lt;= 1\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 4\n1 1 1 1 \n1 1 1 1 \n1 1 0 1\n0 1 1 1\n6 5\n1 1 1 0 1 \n1 1 1 1 0\n0 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 0 1 1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n7\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>For the first test case, refer to the example explained above.\n\nFor the second test case, we have a field of size 5*6, as shown below. The cells containing landmine are marked with 0 and red colour. The cells near the landmine which are unsafe are marked with a light red colour. \nThe shortest safe route for Ninja, starting from any cell in the first column to any cell in the last column of the field is marked with green colour. The length of the path is 7.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/10094-sample-1-testcase-2-7915.PNG\" alt=\"Testcase 2 Matrix\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 1\n1\n2 2\n1 0\n1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "A ninja must navigate a rectangular field of size M x N to reach the other side. The field contains landmines. The ninja must avoid the landmines and any cells directly adjacent to them (left, right, above, and below).  Determine the length of the shortest safe path from any cell in the first column to any cell in the last column. The path can only move in the four cardinal directions (up, down, left, right).  The length of the path is the number of steps required to reach the last column.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N, M <= 1000",
                    "0 <= Field[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "field = [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 0, 1], [0, 1, 1, 1]]",
                        "output": "3",
                        "explanation": "The shortest safe route starts at (0,0), goes to (0,1), then (0,2), finally (0,3). This path has length 3."
                    },
                    {
                        "input": "field = [[1, 1, 1, 0, 1], [1, 1, 1, 1, 0], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 1, 1, 1]]",
                        "output": "7",
                        "explanation": "One possible shortest safe route is of length 7."
                    },
                    {
                        "input": "field = [[1]]",
                        "output": "0",
                        "explanation": "The ninja starts and ends in the same column, so no steps are required."
                    },
                    {
                        "input": "field = [[1, 0], [1, 1]]",
                        "output": "-1",
                        "explanation": "No safe path exists from the first column to the last column. The landmine at (0,1) blocks access."
                    },
                    {
                        "input": "field = [[0]]",
                        "output": "-1",
                        "explanation": "The start cell is a mine so it is impossible."
                    },
                    {
                        "input": "field = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]",
                        "output": "2",
                        "explanation": "The ninja can go from [0][0] -> [0][1] -> [0][2] for a path length of 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try generating all the possible paths from the first column of the field to the last column and store the length of the shortest path.</p>",
            "<p>Instead of generating all the possible paths using recursion, try using BFS. The first valid path generated using BFS is the shortest path.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}