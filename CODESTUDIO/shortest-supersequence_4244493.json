{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 18794,
            "title": "Shortest Supersequence",
            "titleSlug": "shortest-supersequence_4244493",
            "content": "<h4 id=\"given-two-strings-a-and-b-return-the-shortest-supersequence-string-s-containing-both-a-and-b-as-its-subsequences-if-there-are-multiple-answers-return-any-of-them\">Given two strings, \u2018A\u2019 and \u2018B\u2019. Return the shortest supersequence string \u2018S\u2019, containing both \u2018A\u2019 and \u2018B\u2019 as its subsequences. If there are multiple answers, return any of them.</h4>\n\n<h4 id=\"note-a-string-s-is-a-subsequence-of-string-t-if-deleting-some-number-of-characters-from-t-possibly-0-results-in-the-string-s\">Note: A string &#39;s&#39; is a subsequence of string &#39;t&#39; if deleting some number of characters from &#39;t&#39; (possibly 0) results in the string &#39;s&#39;.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Suppose \u2018A\u2019 = \u201cbrute\u201d, and \u2018B\u2019 = \u201cgroot\u201d\n\nThe shortest supersequence will be \u201cbgruoote\u201d. As shown below, it contains both \u2018A\u2019 and \u2018B\u2019 as subsequences.\n\nA   A A     A A\nb g r u o o t e\n  B B   B B B  \n\nIt can be proved that the length of supersequence for this input cannot be less than 8. So the output will be bgruoote.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of the input contains a single integer \u2018T\u2019 representing the no. of test cases.\n\nThe first line of each test case contains a single string \u2018A\u2019, denoting the first string described in the problem.\n\nThe second line of each test case contains a single string, \u2018B\u2019, denoting the second string described in the problem.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, print the shortest string \u2018S\u2019, which contains \u2018A\u2019 and \u2018B\u2019 as its subsequences.\n\nPrint a separate line for each test case.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function and return the answer.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 \u2264 T \u2264 100\n1 \u2264 |A|, |B| \u2264 1000\nBoth strings consist of only lowercase English letters.\n1 \u2264 \u03a3(|A|+|B|) \u2264 3000\n\nTime limit: 1 Sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\nbrute\ngroot\nbleed\nblue\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>bgruoote\nbleued\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For First Case - Same as explained in above example.\n\nFor the second case - \n\n\u2018A\u2019 = \u201cbleed\u201d, and \u2018B\u2019 = \u201cblue\u201d\n\nThe shortest supersequence will be \u201cbleued\u201d. As shown below, it contains both \u2018A\u2019 and \u2018B\u2019 as subsequences.\n\nA A A   A A\nb l e u e d\nB B   B B\n\nIt can be proved that the length of supersequence for this input cannot be less than 6. So the output will be bleued.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\ncoding\nninjas\nblinding\nlights\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>codningjas\nblindinghts\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 159,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, 'a' and 'b', determine the shortest string 's' that contains both 'a' and 'b' as subsequences. If multiple shortest supersequences exist, return any one of them.",
                "constraints": [
                    "1 \u2264 |a|, |b| \u2264 1000",
                    "Both strings consist of only lowercase English letters.",
                    "1 \u2264 \u03a3(|a|+|b|) \u2264 3000"
                ],
                "testcases": [
                    {
                        "input": "a = \"brute\", b = \"groot\"",
                        "output": "bgruoote",
                        "explanation": "The shortest supersequence containing both 'brute' and 'groot' as subsequences is 'bgruoote'."
                    },
                    {
                        "input": "a = \"bleed\", b = \"blue\"",
                        "output": "bleued",
                        "explanation": "The shortest supersequence containing both 'bleed' and 'blue' as subsequences is 'bleued'."
                    },
                    {
                        "input": "a = \"coding\", b = \"ninjas\"",
                        "output": "codningjas",
                        "explanation": "The shortest supersequence containing both 'coding' and 'ninjas' as subsequences is 'codningjas'."
                    },
                    {
                        "input": "a = \"blinding\", b = \"lights\"",
                        "output": "blindinghts",
                        "explanation": "The shortest supersequence containing both 'blinding' and 'lights' as subsequences is 'blindinghts'."
                    },
                    {
                        "input": "a = \"abcde\", b = \"ace\"",
                        "output": "abcde",
                        "explanation": "The shortest supersequence containing both 'abcde' and 'ace' as subsequences is 'abcde'."
                    },
                    {
                        "input": "a = \"efgh\", b = \"abcdefgh\"",
                        "output": "abcdefgh",
                        "explanation": "The shortest supersequence containing both 'efgh' and 'abcdefgh' as subsequences is 'abcdefgh'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we do something recursively?</p>",
            "<p>We can improve on time if we eliminate duplicate calculations.</p>",
            "<p>We can improve on time if we eliminate duplicate calculations.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(M * N) \n    Space Complexity: O(M * N) \n\n    Where 'N' and 'M' are length of given strings.\n*/\n\n#include <algorithm>\n\n// Function to backtrack characters included in supersequence.\nstring backtrack(vector<vector<int>> &dp, string &a, string &b) {\n\t\n\tstring ans = \"\";\n\tint n = a.size(), m = b.size();\n\n\t// Bactracking by traversing from state dp[n][m] to dp[0][0].\n\twhile(n > 0 && m > 0) {\n\t\t\n\t\tif(a[n-1] == b[m-1]) {\n\t\t\tans += a[n-1];\n\t\t\tn--, m--;\n\t\t}\n\n\t\telse if(dp[n-1][m] < dp[n][m-1]) {\n\t\t\tans += a[n-1];\n\t\t\tn--;\n\t\t}\n\t\t\n\t\telse {\n\t\t\tans += b[m-1];\n\t\t\tm--;\n\t\t}\n\t}\n\n\twhile(n > 0) {\n\t\tans += a[n-1];\n\t\tn--;\n\t}\n\n\twhile(m > 0) {\n\t\tans += b[m-1];\n\t\tm--;\n\t}\n\n\t// As we retrieved characters in reverse we need to reverse it before returning.\n\treverse(ans.begin(), ans.end());\n\treturn ans;\n}\n\n// Given Function.\nstring shortestSupersequence(string a, string b) {\n\t\n\t// Get lenghts of a and b in n and m.\n\tint n = a.size(), m = b.size();\n\n\t// Declare DP table and dpChar.\n\tvector<vector<int>> dp(n+1, vector<int>(m+1));\n\n\t// Initialize the first column.\n\tfor(int i = 0; i <= n; i++) {\n\t\tdp[i][0] = i;\n\t}\n\n\t// Initialize the first row.\n\tfor(int i = 0; i <= m; i++) {\n\t\tdp[0][i] = i;\n\t}\n\n\t// Fill dp table with increasing order of rows and columns.\n\tfor(int i = 1; i <= n; i++) {\n\t\tfor(int j = 1; j <= m; j++) {\n\n\t\t\t// If the last characters of prefixes are equal.\n\t\t\tif(a[i-1] == b[j-1]) {\n\t\t\t\tdp[i][j] = dp[i-1][j-1] + 1;\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tdp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Using the dp table backtrack the characters used in supersequence.\n\treturn backtrack(dp, a, b);\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(M * N) \n    Space Complexity: O(M * N) \n\n    Where 'N' and 'M' are length of given strings.\n*/\n\npublic class Solution {\n\n    private static String backtrack(int[][] dp, String a, String b) {\n        String ans = \"\";\n        int n = a.length(), m = b.length();\n\n        // Bactracking by traversing from state dp[n][m] to dp[0][0].\n        while(n > 0 && m > 0) {\n            \n            if(a.charAt(n - 1) == b.charAt(m - 1)) {\n                ans += a.charAt(n - 1);\n                n--;\n                m--;\n            }\n\n            else if(dp[n-1][m] < dp[n][m-1]) {\n                ans += a.charAt(n-1);\n                n--;\n            }\n            \n            else {\n                ans += b.charAt(m-1);\n                m--;\n            }\n        }\n\n        while(n > 0) {\n            ans += a.charAt(n-1);\n            n--;\n        }\n\n        while(m > 0) {\n            ans += b.charAt(m-1);\n            m--;\n        }\n\n        // As we retrieved characters in reverse we need to reverse it before returning.\n        String answer = \"\";\n        for (int i = 0; i < ans.length(); i++) {\n            answer = ans.charAt(i) + answer;\n        }\n        return answer;\n    }\n\n    public static String shortestSupersequence(String a, String b) {\n        // Get lenghts of a and b in n and m.\n        int n = a.length(), m = b.length();\n\n        // Declare DP table and dpChar.\n        int dp[][] = new int[n + 1][m + 1];\n\n        // Initialize the first column.\n        for (int i = 0; i <= n; i++) {\n            dp[i][0] = i;\n        }\n\n        // Initialize the first row.\n        for (int i = 0; i <= m; i++) {\n            dp[0][i] = i;\n        }\n\n        // Fill dp table with increasing order of rows and columns.\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n\n                // If the last characters of prefixes are equal.\n                if (a.charAt(i - 1) == b.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                }\n\n                else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1;\n                }\n            }\n        }\n\n        // Using the dp table backtrack the characters used in supersequence.\n        return backtrack(dp, a, b);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(M * N) \n    Space Complexity: O(M * N) \n\n    Where 'N' and 'M' are length of given strings.\n'''\n\nfrom typing import List\n\n# Function to backtrack characters included in supersequence.\ndef backtrack(dp: List[List[int]], a: str, b: str) -> str:\n\t\n    ans = \"\"\n    n = len(a)\n    m = len(b)\n\n    # Bactracking by traversing from state dp[n][m] to dp[0][0].\n    while n > 0 and m > 0:\n        \n        if a[n-1] == b[m-1]:\n            ans += a[n-1]\n            n -= 1\n            m -= 1\n\n        elif dp[n-1][m] < dp[n][m-1]:\n            ans += a[n-1]\n            n -= 1\n        \n        else:\n            ans += b[m-1]\n            m -= 1\n\n    while n > 0:\n        ans += a[n-1]\n        n -= 1\n\n    while m > 0:\n        ans += b[m-1]\n        m -= 1\n\n    # As we retrieved characters in reverse we need to reverse it before returning.\n    ans = list(ans)\n    ans.reverse()\n    return \"\".join(ans)\n\n\n# Given Function.\ndef shortestSupersequence(a: str, b: str) -> str:\n\t\n    # Get lenghts of a and b in n and m.\n    n = len(a)\n    m = len(b)\n\n    # Declare DP table and dpChar.\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    # Initialize the first column.\n    for i in range(n + 1):\n        dp[i][0] = i\n\n    # Initialize the first row.\n    for i in range(m + 1):\n        dp[0][i] = i\n\n    # Fill dp table with increasing order of rows and columns.\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n\n            # If the last characters of prefixes are equal.\n            if a[i-1] == b[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n\n    # Using the dp table backtrack the characters used in supersequence.\n    return backtrack(dp, a, b)\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}