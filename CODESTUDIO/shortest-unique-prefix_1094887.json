{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9831,
            "title": "Shortest unique prefix",
            "titleSlug": "shortest-unique-prefix_1094887",
            "content": "<h4 id=\"you-are-given-an-array-containing-n-words-for-each-word-you-need-to-find-its-shortest-prefix-which-can-uniquely-identify-it-for-example-abcd-and-abdc-both-have-the-prefix-ab-in-common-so-we-can-t-uniquely-find-a-word-using-the-prefix-ab-to-uniquely-identify-both-the-words-we-need-the-prefix-abc-from-abcd-and-abd-from-abdc\">You are given an array containing \u2018N\u2019 words. For each word, you need to find its shortest prefix which can uniquely identify it. For example \u201cabcd\u201d and \u201cabdc\u201d both have the prefix \u201cab\u201d in common so we can\u2019t uniquely find a word using the prefix \u201cab\u201d. To uniquely identify both the words we need the prefix \u201cabc\u201d from \u201cabcd\u201d and \u201cabd\u201d from \u201cabdc\u201d.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You can assume that the words are unique. It means that it is always possible to find a unique prefix for each word.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u20182*T\u2019 lines describe the \u2018T\u2019 test cases.\n\nThe first line of each test case contains single positive integers \u2018N\u2019 denoting the number of words.\nThe next \u2018N\u2019 lines contain a string of lower case characters.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The output of each test case should contain &#39;N&#39; lines, in the ith line you need to print the shortest unique prefix for ith word.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^4  \n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the number of words and, the sum of the lengths of all the words in a test case is less than 10^4.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\nabcd\nacdb\n3\nmany\nmango\nmad\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>ab\nac\nmany\nmang\nmad\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>Test case 1:\nThe string \u201cabcd\u201d and \u201cacbd\u201d have a common prefix \u201ca\u201d which can\u2019t be used as a unique prefix so to make a unique prefix we will add one more character to \u201ca\u201d from each word. The \u201cab\u201d for \u201cabcd\u201d and prefix \u201cac\u201d for \u201cacbd\u201d is now the shortest and unique prefix.\n\n\nTest case 2:\nFor string \u201cmany\u201d the prefix \u201cm\u201d and \u201cma\u201d is common in\u201cmango\u201d and \u201cmad\u201d. Similarly \u201cman\u201d is again common in \u201cmango\u201d. \u201cMany\u201d itself will be the unique shortest prefix.\n\nFor string \u201cmango\u201d we have the string \u201dmany\u201d such that \u201cman\u201d is common in both of them so for \u201cmango\u201d the prefix \u201cmang\u201d will the unique shorted prefix.\n\nFor string \u201cmad\u201d we have strings \u201cmany\u201d and \u201cmango\u201d such that   \u201cma\u201d is common in all of them. \u201cMad\u201d itself will be a unique shortest prefix.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3\nsample\nsame\nsort\n2\nquick\nmerge\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>samp\nsame\nso\nq\nm\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 14,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of 'N' unique words, find the shortest unique prefix for each word. A prefix is unique if it does not appear as a prefix of any other word in the array. For example, given \"abcd\" and \"abdc\", the prefix \"ab\" is common, so the shortest unique prefixes would be \"abc\" and \"abd\", respectively.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^4",
                    "The sum of the lengths of all words in a test case is less than 10^4.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n2\nabcd\nacdb\n3\nmany\nmango\nmad",
                        "output": "ab\nac\nmany\nmang\nmad",
                        "explanation": "Test Case 1:\nFor 'abcd' and 'acdb', 'a' is a common prefix. 'ab' uniquely identifies 'abcd' and 'ac' uniquely identifies 'acdb'.\n\nTest Case 2:\n'many' has 'm' and 'ma' in common with 'mango' and 'mad'. Therefore 'many' is the shortest unique prefix. 'mango' and 'many' share 'man' , so 'mang' is the shortest unique prefix for mango. 'mad' shares 'ma' with 'many' and 'mango', so 'mad' is the shortest unique prefix."
                    },
                    {
                        "input": "2\n3\nsample\nsame\nsort\n2\nquick\nmerge",
                        "output": "samp\nsame\nso\nq\nm",
                        "explanation": "Test Case 1:\nFor 'sample', 'samp' is the shortest unique prefix.\nFor 'same', 'same' is the shortest unique prefix, since 'sam' is shared by 'sample'.\nFor 'sort', 'so' is the shortest unique prefix since there are no other words starting with s or so.\n\nTest Case 2:\nFor 'quick', 'q' is the shortest unique prefix.\nFor 'merge', 'm' is the shortest unique prefix."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try all prefixes for each word</p>",
            "<p>Sort the array to reduce the number of comparisons</p>",
            "<p>Use Trie to directly compare a string with similar strings</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}