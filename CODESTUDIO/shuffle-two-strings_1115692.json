{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10010,
            "title": "Shuffle Two Strings",
            "titleSlug": "shuffle-two-strings_1115692",
            "content": "<h4 id=\"you-are-given-three-strings-a-b-and-c-your-task-is-to-check-whether-c-is-formed-by-an-interleaving-of-a-and-b-c-is-said-to-be-interleaving-a-and-b-if-the-length-of-c-is-equal-to-the-sum-of-the-length-of-a-and-length-of-b-all-the-characters-of-a-and-b-are-present-in-c-and-the-order-of-all-these-characters-remains-the-same-in-all-three-strings\">You are given three strings \u201cA\u201d, \u201cB\u201d and \u201cC\u201d. Your task is to check whether \u201cC\u201d is formed by an interleaving of A and B. C is said to be interleaving \u201cA\u201d and \u201cB\u201d, if the length of \u201cC\u201d is equal to the sum of the length of A and length of B, all the characters of \u201cA\u201d and \u201cB\u201d are present in \u201cC\u201d, and the order of all these characters remains the same in all three strings.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>If A = \u201caab\u201d, B = \u201cabc\u201d, C = \u201caaabbc\u201d\nHere C is an interleaving string of A and B. Because C contains all the characters of A and B and the order of all these characters is also the same in all three strings.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/interleave-img-6874.png\" alt=\"interleaving\"></p>\n\n<pre><code>If A = \u201cabc\u201d, B = \u201cdef\u201d, C = \u201cabcdefg\u201d\nHere C is not an interleaving string of A and B as neither A nor B contains the character \u2018g\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then, the T test cases follow.\n\nThe first and only line of each test case contains three strings A, B, and C each separated by a single space.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test, print True, if C is an interleaving string of A and B, otherwise print False \n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= |A|, |B| &lt;= 1000\n1 &lt;= |C| &lt;= 2000\nwhere |A|, |B|, |C| denotes the length of string A, B and C respectively.   \nAll the characters of the strings A, B, and C contain lowercase English letters only.\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\nabdd fef abfddef\naab abc aabbc\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for sample 1:</h5>\n\n<pre><code>For the first test case, all the characters of A and B are present in C, and All the characters of A are present in C in the same order as \u201cabfddef\u201d, and All the characters of B are present in C in the same order as \u201cabfddef\u201d.\nFor the second case, length of C &lt; (length of A + length of B).\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nzxry qwr qwzxxryr\na a aa\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>False\nTrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 25,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given three strings, `a`, `b`, and `c`, determine if `c` is formed by interleaving `a` and `b`. A string `c` is an interleaving of `a` and `b` if it satisfies the following conditions:\n\n1.  The length of `c` is equal to the sum of the lengths of `a` and `b`.\n2.  All characters of `a` and `b` are present in `c`.\n3.  The order of characters in `a` and `b` is preserved in `c`.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= |A|, |B| <= 1000",
                    "1 <= |C| <= 2000, where |A|, |B|, |C| denotes the length of string A, B and C respectively. All the characters of the strings A, B, and C contain lowercase English letters only."
                ],
                "testcases": [
                    {
                        "input": "a = \"abdd\", b = \"fef\", c = \"abfddef\"",
                        "output": "True",
                        "explanation": "All characters of 'abdd' and 'fef' are present in 'abfddef' and the order of characters from both strings is preserved."
                    },
                    {
                        "input": "a = \"aab\", b = \"abc\", c = \"aabbc\"",
                        "output": "False",
                        "explanation": "The length of c is equal to the sum of the length of a and b. The characters of A and B are present in C. But the order of A is not maintained. so it's wrong"
                    },
                    {
                        "input": "a = \"abc\", b = \"def\", c = \"abcdefg\"",
                        "output": "False",
                        "explanation": "The string 'abcdefg' contains 'g' which is not present in either 'abc' or 'def'."
                    },
                    {
                        "input": "a = \"zxry\", b = \"qwr\", c = \"qwzxxryr\"",
                        "output": "False",
                        "explanation": "All characters of 'zxry' and 'qwr' are present in 'qwzxxryr', but the order is incorrect"
                    },
                    {
                        "input": "a = \"a\", b = \"a\", c = \"aa\"",
                        "output": "True",
                        "explanation": "The string \"aa\" is an interleaving of \"a\" and \"a\"."
                    },
                    {
                        "input": "a = \"\", b = \"\", c = \"\"",
                        "output": "True",
                        "explanation": "Empty strings interleaved form an empty string."
                    },
                    {
                        "input": "a = \"abc\", b = \"\", c = \"abc\"",
                        "output": "True",
                        "explanation": "String c is same as a, and b is an empty string."
                    },
                    {
                        "input": "a = \"\", b = \"abc\", c = \"abc\"",
                        "output": "True",
                        "explanation": "String c is same as b, and a is an empty string."
                    },
                    {
                        "input": "a = \"abc\", b = \"def\", c = \"adbecf\"",
                        "output": "True",
                        "explanation": "The string adbecf is an interleaved string of abc and def"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a brute force solution using recursion.</p>",
            "<p>Think of a solution to optimize the previous approach by using memoization.</p>",
            "<p>Think of a solution to use bottom-up dynamic programming.</p>",
            "<p>Think of reducing the space complexity by using 1D Dynamic Programming Approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}