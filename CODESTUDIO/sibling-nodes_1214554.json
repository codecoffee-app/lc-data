{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10323,
            "title": "Sibling Nodes",
            "titleSlug": "sibling-nodes_1214554",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-n-nodes-where-the-nodes-have-integer-values-your-task-is-to-print-all-nodes-that-don-t-have-a-sibling-node\">You have been given a Binary Tree of \u2018N\u2019 nodes, where the nodes have integer values. Your task is to print all nodes that don\u2019t have a sibling node.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. Node \u2018U\u2019 is said to be a sibling of node \u2018V\u2019 if and only if both \u2018U\u2019 and \u2018V\u2019 have the same parent.\n2. Root 1 is a sibling node.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run.\n\nThe first line of each test case contains elements of the tree in the level order form. \nThe line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree is depicted in the below image. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-8106.jpg\" alt=\"1\"></p>\n\n<pre><code>1\n3 8\n5 2 7 -1\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 3\nRight child of 1 = 8\n\nLevel 3 :\nLeft child of 3 = 5\nRight child of 3 = 2\nLeft child of 8 =7\nRight child of 8 =  null (-1)\n\n\nLevel 4 :\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 2 = null (-1)\nRight child of 2 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n1 3 8 5 2 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing space-separated integers denoting all the node\u2019s values that don\u2019t have a sibling node in sorted order.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n0 &lt;= N &lt;= 3000\n0 &lt;= node data &lt;= 10 ^ 9 \n\nWhere &#39;T&#39; is the number of test cases and &#39;N&#39; is the number of nodes in the tree.   \n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 -1 -1 -1 6 -1 -1\n1 2 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>6\n2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, the given binary tree is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/2-8107.jpg\" alt=\"2\"></p>\n\n<pre><code>Nodes that don\u2019t have sibling nodes = [6]\n\nFor the second test case, the given binary tree is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/3-8108.jpg\" alt=\"3\"></p>\n\n<pre><code>Nodes that don\u2019t have sibling nodes = [ 2 ]\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n1 3 8 5 -1 7 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5 7\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>For the first test case, the given binary tree is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/4-8109.jpg\" alt=\"4\">                     </p>\n\n<pre><code>Nodes that don\u2019t have sibling nodes = [5, 7] \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of 'N' nodes with integer values, identify and return all nodes that do not have a sibling. A sibling is defined as a node that shares the same parent. Root nodes are not considered to have siblings.",
                "constraints": [
                    "1 <= T <= 5",
                    "0 <= N <= 3000",
                    "0 <= node data <= 10 ^ 9",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 -1 -1 -1 6 -1 -1",
                        "output": "6",
                        "explanation": "The binary tree can be visualized as follows:\n\n      1\n     / \\\n    2   3\n         \\\n          6\n\nNode 6 is the only node that does not have a sibling."
                    },
                    {
                        "input": "1 2 -1 -1 -1",
                        "output": "2",
                        "explanation": "The binary tree can be visualized as follows:\n\n      1\n     /\n    2\n\nNode 2 is the only node that does not have a sibling."
                    },
                    {
                        "input": "1 3 8 5 -1 7 -1 -1 -1 -1 -1",
                        "output": "5 7",
                        "explanation": "The binary tree can be visualized as follows:\n\n      1\n     / \\\n    3   8\n   /   /\n  5   7\n\nNodes 5 and 7 are the only nodes that do not have a sibling. The output needs to be sorted in ascending order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the fact that if a node has two child nodes, then both the child nodes are sibling nodes.</p>",
            "<p>Can we calculate all single-child nodes using BFS?&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}