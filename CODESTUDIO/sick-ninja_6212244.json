{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22900,
            "title": "SICK NINJA",
            "titleSlug": "sick-ninja_6212244",
            "content": "<h4 id=\"ninja-is-having-some-health-issues-so-he-decided-to-buy-fruits-to-get-nutrition-there-are-n-number-of-fruits-each-fruit-has-some-amount-of-nutrition-and-a-specific-cost\">Ninja is having some health issues. So he decided to buy fruits to get nutrition. There are \u2018N\u2019 number of fruits. Each fruit has some amount of nutrition and a specific cost.</h4>\n\n<h4 id=\"ninja-has-m-units-of-money-you-need-to-find-the-maximum-amount-of-nutrition-ninja-can-get-and-the-total-cost-to-get-maximum-nutrition-the-ninja-can-buy-any-number-of-fruits-but-he-can-spend-only-at-most-m-units-of-money\">Ninja has \u2018M\u2019 units of money. You need to find the maximum amount of nutrition Ninja can get and the total cost to get maximum nutrition. The ninja can buy any number of fruits, but he can spend only at most \u2018M\u2019 units of money.</h4>\n\n<h4 id=\"note-if-there-are-multiple-values-of-costs-possible-for-maximum-nutrition-you-need-to-find-the-minimum-one\">Note: If there are multiple values of costs possible for maximum nutrition, you need to find the minimum one.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Suppose there are 3 fruits with costs 1, 2, 3 and nutrition  2, 2, 3 units respectively. Ninja has 3 units of money. Then, the ninja can take fruits with costs 1 and 2, having the maximum nutritional value of  4 units for a cost of 3 units.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains \u2018T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018M\u2019 and \u2018N\u2019, denoting the amount of money ninja has and the total number of fruits.\n\nThe next \u2018N\u2019 line contains two space-separated integers, \u2018X\u2019 and \u2018Y\u2019, denoting each fruit&#39;s cost and nutrition value.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print two space-separated integers the maximum amount of nutrition Ninja can get and the total cost to get maximum nutrition.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1  &lt;= N &lt;= 1000\n1 &lt; = M &lt;=1000\n0 &lt; = X &lt;= 1000\n0 &lt; = Y &lt;= 1000\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n9 4\n1 2\n2 3\n4 5\n5 7\n6 3\n7 4\n9 2\n11 12\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>12 8\n 0 0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>For the first test case:-\nThe ninja can select the fruits at indices ( 0 - based ) 0, 1, and 3, which constitutes 12 units of nutrition and 8 units of cost.\n\nFor the second test case:-\nThe Ninja can not buy any of these fruits so he will have his nutrition as 0 and cost also 0 as well\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n50 10\n12 3\n15 8\n16 9\n16 6\n10 2\n21 9\n18 4\n12 4\n17 8\n18 9 \n50 10\n13 8\n19 10\n16 8\n12 9\n10 2\n12 8\n13 5\n15 5\n11 7\n16 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>26 49\n32 48\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja needs to buy fruits to improve his health. There are 'N' fruits available, each with a cost and nutrition value. Ninja has 'M' units of money. The task is to determine the maximum amount of nutrition Ninja can obtain within his budget, along with the minimum cost required to achieve that maximum nutrition. Ninja can buy any number of each fruit.",
                "constraints": [
                    "1 <= N <= 1000",
                    "1 <= M <= 1000",
                    "0 <= X <= 1000 (X is cost)",
                    "0 <= Y <= 1000 (Y is nutrition)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "9 4\n1 2\n2 3\n4 5\n5 7\n6 3\n7 4\n9 2\n11 12",
                        "output": "12 8",
                        "explanation": "The ninja can select the fruits with costs 1, 2, and 5 (indices 0, 1, and 3), providing a total nutrition of 2 + 3 + 7 = 12 units at a total cost of 1 + 2 + 5 = 8 units."
                    },
                    {
                        "input": "6 3\n7 4\n9 2\n11 12",
                        "output": "0 0",
                        "explanation": "The Ninja cannot afford any of the fruits with the given amount so he gets 0 nutrition at a cost of 0."
                    },
                    {
                        "input": "50 10\n12 3\n15 8\n16 9\n16 6\n10 2\n21 9\n18 4\n12 4\n17 8\n18 9",
                        "output": "26 49",
                        "explanation": null
                    },
                    {
                        "input": "50 10\n13 8\n19 10\n16 8\n12 9\n10 2\n12 8\n13 5\n15 5\n11 7\n16 2",
                        "output": "32 48",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>&nbsp;</strong>Try all the sets of fruits possible.</p>",
            "<p>Can you optimise the recursive approach with the help of memoization?</p>",
            "<p><strong>&nbsp;</strong>Can you think of a way to optimise the recursive approach using tabulation?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}