{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7473,
            "title": "Simplify the Directory",
            "titleSlug": "simplify-the-directory_668400",
            "content": "<h4 id=\"you-are-given-a-path-to-a-file-directory-in-unix-style-of-length-n-in-a-unix-style-file-system-a-dot-refers-to-the-current-directory-a-double-dot-refers-to-the-previous-directory-in-reference-to-the-current-directory-if-there-are-multiple-slashes-between-two-directories-you-should-consider-it-as-a-single-slash\">You are given a path to a file/directory in Unix-style of length N, In a Unix-style file system, a dot(.) refers to the current directory. A double dot(..) refers to the previous directory in reference to the current directory. If there are multiple slashes between two directories you should consider it as a single slash.</h4>\n\n<h4 id=\"now-for-a-given-directory-path-as-a-string-you-are-required-to-simplify-the-same-and-tell-the-final-destination-in-the-directory-structure-or-the-path\">Now, for a given directory path as a string, you are required to simplify the same and tell the final destination in the directory structure or the path.</h4>\n\n<h4 id=\"the-simplified-path-should-always-begin-with-a-slash-and-there-must-be-a-single-slash-between-two-directory-names-there-should-not-be-a-trailing-slash\">The simplified path should always begin with a slash(/) and there must be a single slash between two directory names. There should not be a trailing slash.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer T which denotes the number of test cases to be run. \n\nThe first and only line of each testcase contains a single string denoting the path .\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a string representing a simplified path to the resulting file or directory.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 10^5\nWhere N is the length of the input path.\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n/a/\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>/a\n</code></pre>\n\n<h5 id=\"explanation-for-input-1\">Explanation for input 1:</h5>\n\n<pre><code>Directory should always start with a slash and there should not be a trailing slash.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n/a/b/../\n/a/./b/../../c/\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>/a\n/c\n</code></pre>\n\n<h5 id=\"explanation-for-input-2\">Explanation for input 2:</h5>\n\n<pre><code>For test case one, as double dot represents the previous directory so going one step back from the current directory(b) is a. \n\nFor the second test case, at first we are at \u2018a\u2019, then we encounter a dot(.) then we move to \u2018b\u2019, then we have a double dot(..) so double dot means we have to go one step back, so now we will be at \u2018a\u2019, then again we have a double dot so going one step back again,  we are at empty directory then we encounter c, so the final answer would be /c.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Unix-style file path string, simplify it by applying the following rules:\n\n*   A single dot (.) refers to the current directory.\n*   A double dot (..) refers to the parent directory.\n*   Multiple consecutive slashes should be treated as a single slash.\n*   The simplified path must start with a slash (/).\n*   There should be no trailing slash.\n\nThe goal is to determine the final absolute path after processing the given path string.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "0 <= N <= 10^5 (Length of the input path)"
                ],
                "testcases": [
                    {
                        "input": "/a/",
                        "output": "/a",
                        "explanation": "The simplified path should remove the trailing slash."
                    },
                    {
                        "input": "/a/b/../",
                        "output": "/a",
                        "explanation": "Moving up one directory from 'b' using '..' leads to 'a'.  Trailing slash is removed."
                    },
                    {
                        "input": "/a/./b/../../c/",
                        "output": "/c",
                        "explanation": "Starting at /a, '.' moves to a. Then '/b' moves to b.  '../' moves back to 'a'. Another '../' moves to the root. Finally, '/c' adds 'c' to the root. Trailing slash is removed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of using a stack.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}