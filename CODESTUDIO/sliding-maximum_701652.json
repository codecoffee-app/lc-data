{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7594,
            "title": "Sliding Maximum ",
            "titleSlug": "sliding-maximum_701652",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-integers-of-length-n-and-a-positive-integer-k-you-need-to-find-the-maximum-elements-for-each-and-every-contiguous-subarray-of-size-k-of-the-array\">You are given an array &#39;ARR&#39; of integers of length &#39;N&#39; and a positive integer &#39;K&#39;. You need to find the maximum elements for each and every contiguous subarray of size K of the array.</h4>\n\n<h5 id=\"for-example\">For example</h5>\n\n<pre><code>&#39;ARR&#39; =  [3, 4, -1, 1, 5] and &#39;K&#39; = 3\nOutput =  [4, 4, 5]\n\nSince the maximum element of the first subarray of length three ([3, 4, -1]) is 4, the maximum element of the second subarray of length three ([4, -1, 1]) is also 4 and the maximum element of the last subarray of length three ([-1, 1, 5]) is 5, so you need to return [4, 4, 5]. \n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains a single integer &#39;T&#39;, representing the number of test cases or queries to be run. Then the &#39;T&#39; test cases follow.\n\nThe first line of each test case contains two positive integers &#39;N&#39; and &#39;K&#39; which represent the length of the array and length of the subarray respectively.\n\nThe Second line of each test case contains &#39;N&#39; space-separated integers representing the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print &#39;X&#39; space-separated integer denoting maximum elements for each and every contiguous subarray of size &#39;K&#39; of the array. Where &#39;X&#39; is the number of subarray of size &#39;K&#39; in array &#39;arr&#39;.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n-10^5 &lt;= arr[i] &lt;= 10^5\n1 &lt;= K &lt;= N\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n5 3\n3 2 -6 1 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3 2 1\n</code></pre>\n\n<h5 id=\"explanation-for-input-1\">Explanation for Input 1:</h5>\n\n<pre><code>The subarray of length &#39;K&#39;      maximum element of the subarray.\n3 2 -6                                    3\n2 -6 1                                    2\n-6 1 0                                    1\n\nThus, you need to return &quot;3 2 1&quot;.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n9 3\n1 2 3 1 4 5 2 3 6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3 3 4 5 5 5 6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 52,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the maximum element in each contiguous subarray of a specified size.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "-10^5 <= arr[i] <= 10^5",
                    "1 <= K <= N"
                ],
                "testcases": [
                    {
                        "input": "n = 5, arr=[3, 2, -6, 1, 0], k = 3",
                        "output": "3 2 1",
                        "explanation": "The subarrays of length 3 are [3, 2, -6], [2, -6, 1], and [-6, 1, 0]. The maximum elements are 3, 2, and 1 respectively."
                    },
                    {
                        "input": "n = 9, arr=[1, 2, 3, 1, 4, 5, 2, 3, 6], k = 3",
                        "output": "3 3 4 5 5 5 6",
                        "explanation": "The subarrays of length 3 and their corresponding maximum elements are: [1, 2, 3] -> 3, [2, 3, 1] -> 3, [3, 1, 4] -> 4, [1, 4, 5] -> 5, [4, 5, 2] -> 5, [5, 2, 3] -> 5, [2, 3, 6] -> 6."
                    },
                    {
                        "input": "n = 5, arr=[3, 4, -1, 1, 5], k = 3",
                        "output": "4 4 5",
                        "explanation": "The subarrays of length 3 are [3, 4, -1], [4, -1, 1], and [-1, 1, 5].  The maximum elements are 4, 4, and 5."
                    },
                    {
                        "input": "n = 4, arr=[1, 3, -1, -3], k = 2",
                        "output": "3 -1 -1",
                        "explanation": "The subarrays of length 2 are [1, 3], [3, -1], and [-1, -3]. The maximum elements are 3, -1, and -1."
                    },
                    {
                        "input": "n = 7, arr=[1, 3, -1, -3, 5, 3, 6, 7], k = 3",
                        "output": "3 3 5 5 5 7",
                        "explanation": "Subarrays and maximums: [1, 3, -1]->3, [3, -1, -3]->3, [-1, -3, 5]->5, [-3, 5, 3]->5, [5, 3, 6]->6, [3,6,7]->7"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of calculating the maximum element of each subarray of size \u2018K\u2019.</p>",
            "<p>Can you think of a solution using maxheap?</p>",
            "<p>Think of using a deque of size K which will only add the elements which are in the current window.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}