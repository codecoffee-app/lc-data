{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13619,
            "title": "Smallest divisor with the given limit",
            "titleSlug": "smallest-divisor-with-the-given-limit_1755882",
            "content": "<h4 id=\"you-are-given-an-array-of-integers-arr-and-an-integer-limit\">You are given an array of integers <em><strong>&#39;arr&#39;</strong></em> and an integer <em><strong>&#39;limit&#39;</strong></em>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"your-task-is-to-find-the-smallest-positive-integer-divisor-such-that-upon-dividing-all-the-elements-of-the-given-array-by-it-the-sum-of-the-divisions-result-is-less-than-or-equal-to-the-given-integers-limit\">Your task is to find the smallest positive integer divisor, such that upon dividing all the elements of the given array by it, the sum of the division&#39;s result is less than or equal to the given integer&#39;s limit.</h4>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Each result of the division is rounded to the nearest integer greater than or equal to that element. For Example, 7/3 = 3.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer \u2018n\u2019 denoting the number of elements in the array.\n\nThe second line contains \u2018n\u2019 Space-separated integers denoting the elements of the array.\n\nThe third line contains an integer \u2018limit\u2019 denoting the given &#39;limit&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Print an integer denoting the minimum divisor.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>5\n1 2 3 4 5\n8  \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>We can get a sum of 15(1 + 2 + 3 + 4 + 5) if we choose 1 as a divisor. \nThe sum is 9(1 + 1 + 2 + 2 + 3)  if we choose 2 as a divisor, and the sum is 7(1 + 1 + 1 + 2 + 2) if we choose 3 as a divisor, which is less than the &#39;limit&#39;.\nHence we return 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>4\n8 4 2 3 \n10\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2:</h5>\n\n<pre><code>We can get a sum of 17(8 + 4 + 2 + 3) if we choose 1 as a divisor. \nThe sum is 9(4 + 2 + 1 + 2) if we choose 2 as a divisor, which is less than the &#39;limit&#39;.\nHence, we return 2.\n</code></pre>\n\n<h5 id=\"sample-input-3\">Sample Input 3:</h5>\n\n<pre><code>5\n2 3 5 7 11\n11\n</code></pre>\n\n<h5 id=\"sample-output-3\">Sample Output 3 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= n &lt;= 10 ^ 5\n1 &lt;= arr[i] &lt;= 10 ^ 6\nN &lt;= limit &lt;= 10 ^ 4\n\nTime Limit: 1 sec.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 98,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr` and an integer `limit`, find the smallest positive integer divisor such that when each element of `arr` is divided by the divisor (rounded up to the nearest integer), the sum of the results is less than or equal to `limit`.",
                "constraints": [
                    "1 <= n <= 10 ^ 5",
                    "1 <= arr[i] <= 10 ^ 6",
                    "N <= limit <= 10 ^ 4",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "5\n1 2 3 4 5\n8",
                        "output": "3",
                        "explanation": "If we choose 1 as the divisor, the sum is 15 (1 + 2 + 3 + 4 + 5). If we choose 2, the sum is 9 (1 + 1 + 2 + 2 + 3). If we choose 3, the sum is 7 (1 + 1 + 1 + 2 + 2), which is less than or equal to the limit of 8. Thus, the smallest divisor is 3."
                    },
                    {
                        "input": "4\n8 4 2 3\n10",
                        "output": "2",
                        "explanation": "If we choose 1 as the divisor, the sum is 17 (8 + 4 + 2 + 3). If we choose 2, the sum is 9 (4 + 2 + 1 + 2), which is less than or equal to the limit of 10. Thus, the smallest divisor is 2."
                    },
                    {
                        "input": "5\n2 3 5 7 11\n11",
                        "output": "3",
                        "explanation": "With divisor 1: sum = 2 + 3 + 5 + 7 + 11 = 28.\nWith divisor 2: sum = 1 + 2 + 3 + 4 + 6 = 16.\nWith divisor 3: sum = 1 + 1 + 2 + 3 + 4 = 11. This is <= limit. Hence 3"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find every possible solution and choose the largest of them.</p>",
            "<p>Try to think of using Binary Search to optimise Time Complexity.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity : O(N * log(M))\n    Space Complexity : O(1)\n\n    Where 'N' denotes the number of elements int the given array,\n    'M' denotes the value of the maximum element in the array.\n*/\n\nint smallestDivisor(vector<int>& arr, int limit)\n{\n\n    int n = arr.size();\n\n    // Minimum possible divisor.\n    int minDiv = 1;\n\n    // Maximum possible divisor.\n    int maxDiv = INT_MIN;\n\n    for (int i = 0; i < n; i++)\n    {\n        maxDiv = max(maxDiv, arr[i]);\n    }\n\n    int divisor = - 1;\n    int sum = 0;\n\n    while (minDiv <= maxDiv)\n    {\n\n        // Check for mid can be divisor.\n        int mid = (minDiv + maxDiv) / 2;\n\n        sum = 0;\n\n        for (int i = 0; i < n; i++)\n        {\n\n            // Sum after division.\n            sum = sum + (ceil)((double)arr[i] / mid);\n        }\n\n        // If sum is greater than limit then we have to increase mid so that we can reduce the sum to limit.\n        if (sum > limit)\n        {\n            minDiv = mid + 1;\n        }\n\n        else\n        {\n            maxDiv = mid - 1;\n            divisor = mid;\n        }\n    }\n\n    return divisor;\n}\n\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity : O(N * log(M))\r\n    Space Complexity : O(1)\r\n\r\n    Where 'N' denotes the number of elements int the given array,\r\n    'M' denotes the value of the maximum element in the array.\r\n'''\r\nimport math\r\n\r\ndef smallestDivisor(arr, limit):\r\n\t\r\n\tn = len(arr)\r\n\t\r\n\t# Minimum possible divisor.\r\n\tminDiv = 1\r\n\t\r\n\t# Maximum possible divisor.\r\n\tmaxDiv = 10 ** 9 + 1 \r\n\r\n\r\n\tfor i in range(n):\r\n\t\tmaxDiv = max(maxDiv, arr[i])\r\n\t\t\r\n\tdivisor = - 1\r\n\tsum = 0\r\n\r\n\twhile(minDiv <= maxDiv):\r\n\t\t\r\n\t\t# Check for mid can be divisor. \r\n\t\tmid = (minDiv + maxDiv) // 2 \r\n\t\tsum = 0\r\n\r\n\t\tfor i in range(n):\r\n            # Sum after division.\r\n\t\t\tsum = sum + math.ceil(arr[i] / mid)\r\n\t\t\t\r\n\t\t# If sum is greater than limit then we have to increase mid so that we can reduce the sum to limit.\r\n\t\tif(sum > limit):\r\n\t\t\tminDiv = mid + 1\r\n\t\telse:\r\n\t\t\tmaxDiv = mid - 1\r\n\t\t\tdivisor = mid\r\n\t\t\t\r\n\treturn divisor\r\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "\n/*\n\tTime Complexity : O(N * log(M))\n\tSpace Complexity : O(1)\n\t\n\tWhere 'N' denotes the number of elements int the given array,\n\t'M' denotes the value of the maximum element in the array.\n*/\n\npublic class Solution {\n\tpublic static int smallestDivisor(int arr[], int limit) {\n\n\t\tint n = arr.length;\n\n\t\t// Minimum possible divisor.\n\t\tint minDiv = 1;\n\n\t\t// Maximum possible divisor.\n\t\tint maxDiv = Integer.MIN_VALUE;\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tmaxDiv = Math.max(maxDiv, arr[i]);\n\t\t}\n\n\t\tint divisor = -1;\n\t\tint sum = 0;\n\n\t\twhile (minDiv <= maxDiv) {\n\n\t\t\t// Check for mid can be divisor.\n\t\t\tint mid = (minDiv + maxDiv) / 2;\n\n\t\t\tsum = 0;\n\n\t\t\tfor (int i = 0; i < n; i++) {\n\n\t\t\t\t// Sum after division.\n\t\t\t\tsum = (int) (sum + Math.ceil(((double) arr[i] / mid)));\n\t\t\t}\n\n\t\t\t// If sum is greater than limit then we have to increase mid so that we can\n\t\t\t// reduce the sum to limit.\n\t\t\tif (sum > limit) {\n\t\t\t\tminDiv = mid + 1;\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tmaxDiv = mid - 1;\n\t\t\t\tdivisor = mid;\n\t\t\t}\n\t\t}\n\n\t\treturn divisor;\n\n\t}\n\n}\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}