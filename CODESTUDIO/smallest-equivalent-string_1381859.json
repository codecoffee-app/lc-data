{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11512,
            "title": "smallest equivalent string",
            "titleSlug": "smallest-equivalent-string_1381859",
            "content": "<h4 id=\"ninja-has-two-strings-s-and-t-of-same-length-he-knows-that-both-strings-are-equivalent-strings-which-means-s-i-t-i-will-follow-all-rules-of-any-equivalence-relation-that-are\">Ninja has two strings \u2018s\u2019 and \u2018t\u2019 of same length, he knows that both strings are equivalent strings which means s[i], t[i] will follow all rules of any equivalence relation that are:</h4>\n\n<h4 id=\"reflexive-s-i-t-i\"><li>Reflexive : s[i] = t[i] </li></h4>\n\n<h4 id=\"symmetric-s-i-t-i-t-i-s-i\"><li>Symmetric: s[i] = t[i] =&gt; t[i] = s[i]</li></h4>\n\n<h4 id=\"transitive-if-s-i-t-i-and-t-i-s-j-then-s-i-s-j\"><li>Transitive: if s[i] = t[i] and  t[i] = s[j] then s[i] = s[j] </li></h4>\n\n<h4 id=\"ninja-wants-your-help-to-find-the-lexicographically-smallest-equivalent-string-of-a-given-string-str\">Ninja wants your help to find the lexicographically smallest equivalent string of a given string \u2018str\u2019.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. String \u2018s\u2019, \u2018t\u2019 and \u2018str\u2019 consist of only lowercase English letters from \u2018a\u2019 \u2013 \u2018z\u2019.\n2. String \u2018s\u2019 and \u2018t\u2019 are of same length.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Let s = \u201cabc\u201d , t = \u201cxyz\u201d and str = \u201cxbc\u201d then all strings that we can generate are \u201cabc\u201d, \u201cabz\u201d, \u201cayc\u201d,\u201dayz\u201d, \u201cxbc\u201d, \u201cxbz\u201d, \u201cxyc\u201d, \u201cxyz\u201d and smallest of all these is \u201cabc\u201d. \n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first and the only line of each test case contains three space-separated strings \u2018s\u2019, \u2018t\u2019 and \u2018str\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single line containing a single string denoting the smallest equivalent string of \u2018str\u2019.\n\nThe output for each test case is printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N, M &lt;= 5000\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the length of string \u2018s\u2019 and \u2018t\u2019 and \u2018M\u2019 is the length of \u2018str\u2019.\n\nTime limit: 1 second\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\ncoding ninjaa nijng\nsuper aaaaa super\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>aiiaa\naaaaa \n</code></pre>\n\n<h4 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h4>\n\n<pre><code>Test Case 1 : The smallest string that can be formed is:\n\u2018n\u2019 = \u2018a\u2019\n\u2018i\u2019 = \u2018i\u2019\n\u2018j\u2019 = \u2018i\u2019\n\u2018g\u2019 = \u2019a\u2019\nSo, \u201caiiaa\u201d\n\nTest Case 2:  The smallest string that can be formed is:\n\u2018s\u2019 = \u2018u\u2019 = \u2018p\u2019 = \u2018e\u2019 = \u2018r\u2019 = \u2018a\u2019\nSo \u201caaaaa\u201d is shortest string\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\nprogram awesome wqgmin\nabcedf fdecba fanbfa\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>aqgain\naanbaa\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, 's' and 't', of the same length, where s[i] and t[i] are considered equivalent based on the properties of an equivalence relation (reflexive, symmetric, and transitive).  The task is to find the lexicographically smallest equivalent string of a third string, 'str'. String \u2018s\u2019, \u2018t\u2019 and \u2018str\u2019 consist of only lowercase English letters from \u2018a\u2019 \u2013 \u2018z\u2019 and String \u2018s\u2019 and \u2018t\u2019 are of same length.",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= N, M <= 5000 (N is the length of strings 's' and 't', and M is the length of string 'str')",
                    "Strings 's', 't', and 'str' consist only of lowercase English letters ('a' to 'z')",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "coding ninjaa nijng",
                        "output": "aiiaa",
                        "explanation": "Equivalence relations are established such that 'n' is equivalent to 'a', 'i' is equivalent to 'i', 'j' is equivalent to 'i', and 'g' is equivalent to 'a'. Applying these equivalences to the string 'nijng' results in 'aiiaa', which is the lexicographically smallest equivalent string."
                    },
                    {
                        "input": "super aaaaa super",
                        "output": "aaaaa",
                        "explanation": "All characters in 'super' are equivalent to 'a'. Therefore, the lexicographically smallest equivalent string of 'super' is 'aaaaa'."
                    },
                    {
                        "input": "program awesome wqgmin",
                        "output": "aqgain",
                        "explanation": null
                    },
                    {
                        "input": "abcedf fdecba fanbfa",
                        "output": "aanbaa",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use union-find to merge the strings by prefix and get the lexicographically smallest equivalent string.</p>"
        ],
        "relatedTopics": [],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}