{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7291,
            "title": "Smallest Subarray with K Distinct Elements",
            "titleSlug": "smallest-subarray-with-k-distinct-elements_630523",
            "content": "<h4 id=\"given-an-array-a-consisting-of-n-integers-find-the-smallest-subarray-of-a-containing-exactly-k-distinct-integers\">Given an array &#39;A&#39; consisting of &#39;N&#39; integers, find the smallest subarray of &#39;A&#39; containing exactly &#39;K&#39; distinct integers.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>If more than one such contiguous subarrays exist, consider the subarray having the smallest leftmost index.\n\nFor example - if A is [1, 2, 2, 3, 1, 3 ] and k = 2 then the subarrays: [1,2], [2,3], [3,1], [1,3] are the smallest subarrays containing 2 distinct elements. In this case, we will consider the starting and ending index of subarray [1,2] i.e. 0 and 1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains two integers &#39;N&#39; and &#39;K&#39; denoting the total number of integers and number of distinct integers respectively. \n\nThe second line contains &#39;N&#39; space-separated integers describing elements of the array &#39;A&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print two space-separated integers denoting the starting and ending index of the subarray if it exists, otherwise print -1.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\nAssume array starts with 0 index.\nIf more than one solution is possible then print the subarray with smaller left index.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N, K &lt;= 10^6\n-10^5 &lt;= A[i] &lt;= 10^5\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>4 3\n1 1 2 1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>-1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>The value of k = 3 and there are only two distinct elements in the given array i.e 2 and 3. Therefore there exist no subarray with 3 distinct elements.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>8 3\n4 2 2 2 3 4 4 3 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>3 5\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 91,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'A' of 'N' integers, find the smallest subarray of 'A' containing exactly 'K' distinct integers. If multiple such subarrays exist, return the one with the smallest leftmost index (starting index). Return -1 if no such subarray exists.",
                "constraints": [
                    "1 <= N, K <= 10^6",
                    "-10^5 <= A[i] <= 10^5",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 3\n1 1 2 1 2",
                        "output": "-1",
                        "explanation": "The array contains only two distinct elements (1 and 2), while the required number of distinct elements in the subarray is 3. Therefore, no such subarray exists."
                    },
                    {
                        "input": "8 3\n4 2 2 2 3 4 4 3",
                        "output": "3 5",
                        "explanation": "The subarray [2, 3, 4] starting at index 3 and ending at index 5 is the smallest subarray containing exactly 3 distinct integers (2, 3, and 4). Other subarrays with 3 distinct elements might exist, but this one has the smallest starting index."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Explore all subarrays and find the smallest one containing \u2018k\u2019 distinct elements.</p>",
            "<p>Avoid reconsidering left most elements from the resultant subarray.(Sliding window technique)</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n\r\n    where 'N' is the size of input array\r\n*/\r\n\r\n#include <unordered_map>\r\n\r\nvector<int> smallestSubarrayWithKDistinct(vector<int> &arr, int k)\r\n{\r\n\t\r\n\tint n = arr.size();\r\n\t\r\n    /*\r\n    start := start index of resultant subarray\r\n    end  := end index of resultant subarray\r\n    */\r\n    int start = 0, end = n;\r\n\r\n    unordered_map<int, int> map;\r\n\r\n    /*\r\n    i := start index of current subarray\r\n    j := next index to the end of current subarray\r\n    */\r\n    int i = 0, j = 0;\r\n    while (j < n)\r\n    {\r\n        //Add the current element to the map\r\n        map[arr[j]]++;\r\n        j++;\r\n        \r\n        /*\r\n        If set contains exactly k elements, \r\n        consider subarray[i, j - 1], if it is smaller in size than the current resultant subarray \r\n        and keep removing left most elements\r\n        */\r\n        \r\n        while (map.size() == k)\r\n        {\r\n            if (j - 1 - i < end - start)\r\n            {\r\n                start = i;\r\n                end = j - 1;\r\n            }\r\n\r\n            //Remove elements from left\r\n            if (map[arr[i]] == 1)\r\n            {\r\n                map.erase(arr[i]);\r\n            }\r\n            else\r\n            {\r\n                map[arr[i]]--;\r\n            }\r\n\r\n            i++;\r\n        }\r\n    }\r\n    \r\n    // Initialize array to store result\r\n    vector<int> ans;\r\n\r\n    // There is no subarray with K distinct elements\r\n    if (end == n)\r\n    {\r\n        ans.push_back(-1);\r\n    }\r\n    else\r\n    {\r\n        //Subarray found\r\n        ans.push_back(start);\r\n        ans.push_back(end);\r\n    }\r\n    \r\n    return ans;\r\n}\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(K)\r\n\r\n    where N is the total number of integers,\r\n    and K in the length of required array\r\n\"\"\"\r\n\r\n\r\ndef smallestSubarrayWithKDistinct(arr, k):\r\n    # start -> start index of resultant subarray\r\n    # end -> end index of resultant subarray\r\n    n = len(arr)\r\n    start = 0\r\n    end = n\r\n\r\n    Dict = {}\r\n\r\n    # i -> start index of current subarray\r\n    # j -> next index to the end of current subarray\r\n    i = 0\r\n    j = 0\r\n\r\n    while j < n:\r\n\r\n        # add the current element to the map/dict\r\n        if arr[j] in Dict:\r\n\r\n            Dict[arr[j]] += 1\r\n        else:\r\n            Dict[arr[j]] = 1\r\n\r\n        j += 1\r\n\r\n        # if set contains exactly k elements,\r\n        # consider subarray[i, j - 1], if it is smaller in size than the current resultant subarray\r\n        # and keep removing left most elements\r\n\r\n        while len(Dict) == k:\r\n            if j - 1 - i < end - start:\r\n                start = i\r\n                end = j - 1\r\n\r\n            # remove elements from left\r\n            if Dict[arr[i]] == 1:\r\n                Dict.pop(arr[i])\r\n            else:\r\n                Dict[arr[i]] -= 1\r\n            i += 1\r\n\r\n    # there is no subarray with K distinct elements\r\n    if end == n:\r\n        return [-1]\r\n    else:\r\n        # subarray found\r\n        return [start, end]\r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n\r\n    where 'N' is the total number of integers.\r\n*/\r\n\r\nimport java.util.HashMap;\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution\r\n{\r\npublic static ArrayList<Integer> smallestSubarrayWithKDistinct(ArrayList<Integer> arr, int K)\r\n    {\r\n        // start -> start index of resultant subarray\r\n        // end   -> end index of resultant subarray\r\n        int n = arr.size();\r\n        int start = 0;\r\n        int end = n;\r\n\r\n        HashMap<Integer, Integer> map = new HashMap();\r\n\r\n        // i -> start index of current subarray\r\n        // j -> next index to the end of current subarray\r\n        int i = 0, j = 0;\r\n        while (j < n)\r\n        {\r\n            // Add the current element to the map\r\n            map.put(arr.get(j), map.getOrDefault(arr.get(j), 0) + 1);\r\n            j++;\r\n\r\n            /* \r\n\t\t\tIf set contains exactly k elements,Consider subarray[i, j - 1],\r\n            if it is smaller in size than the current resultant subarray\r\n            and keep removing left most elements.\r\n            */\r\n            while (map.size() == K)\r\n            {\r\n                if (j - 1 - i < end - start)\r\n                {\r\n                    start = i;\r\n                    end = j - 1;\r\n                }\r\n\r\n                // Remove elements from left\r\n                if (map.get(arr.get(i)) == 1)\r\n                {\r\n                    map.remove(arr.get(i));\r\n                }\r\n                else\r\n                {\r\n                    map.put(arr.get(i), map.get(arr.get(i)) - 1);\r\n                }\r\n                i++;\r\n            }\r\n        }\r\n        \r\n        // Array to store result.\r\n        ArrayList<Integer> ans = new ArrayList<Integer>();\r\n        \r\n        // There is no subarray with K distinct elements\r\n        if (end == n)\r\n        {\r\n            ans.add(-1);\r\n        }\r\n        else\r\n        {\r\n            // Subarray found\r\n            ans.add(start);\r\n            ans.add(end);\r\n        }\r\n        \r\n        return ans;\r\n    }\r\n}\r\n\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}