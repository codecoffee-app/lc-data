{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8690,
            "title": "Smallest subarray with required sum",
            "titleSlug": "smallest-subarray-with-required-sum_893307",
            "content": "<h4 id=\"alex-is-taking-part-in-a-chocolate-eating-competition-there-are-n-boxes-of-chocolate-numbered-0-to-n-1-each-box-contains-some-chocolates-the-boxes-are-arranged-in-a-line-with-the-box-0-being-the-nearest-to-alex-to-win-alex-has-to-eat-more-than-x-number-of-chocolates-using-minimum-boxes-alex-can-only-eat-chocolates-from-contiguous-boxes-that-is-he-can-choose-some-i-and-j-i-j-and-eat-all-the-chocolates-from-box-i-box-i-1-box-j-alex-is-lazy-so-if-there-are-many-optimal-choices-he-will-choose-the-boxes-nearest-to-him\">Alex is taking part in a chocolate eating competition. There are \u2018N\u2019 boxes of chocolate numbered \u20180\u2019 to \u2018N - 1\u2019. Each box contains some chocolates. The boxes are arranged in a line, with the box \u20180\u2019 being the nearest to Alex. To win, Alex has to eat more than \u2018X\u2019 number of chocolates using minimum boxes. Alex can only eat chocolates from contiguous boxes. That is, he can choose some i and j (i &lt;= j) and eat all the chocolates from box i, box i + 1, ..., box j. Alex is lazy, so if there are many optimal choices, he will choose the boxes nearest to him.</h4>\n\n<h4 id=\"given-an-array-choco-containing-the-number-of-chocolates-in-each-box-predict-the-boxes-that-alex-will-choose-it-is-guaranteed-that-one-such-choice-always-exists\">Given an array \u2018choco\u2019 containing the number of chocolates in each box, predict the boxes that Alex will choose. It is guaranteed that one such choice always exists.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains \u2018T\u2019, denoting the number of test cases.\n\nThe first line of each test case contains two integers, \u2018N\u2019 and \u2018X\u2019, denoting the number of boxes and the target, respectively.\n\nThe second line of each test case contains an array \u2018choco\u2019 of \u2018N\u2019 space separated integers, denoting the number of chocolates in each box.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an array of integers denoting the number of chocolates in the boxes that Alex will pick.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10^5\n1 &lt;= X &lt;= 10^9\n1&lt;= choco[i] &lt;= 10^4\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the number of boxes, \u2018X\u2019 is the target, and \u2018choco[i]\u2019 is the number of chocolates in the box \u2018i\u2019, where 0 &lt;= i &lt;= N - 1.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n6 9\n1 3 5 6 4 3\n3 10\n11 2 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>5 6\n11\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>In the first test case, the number of chocolates is [1, 3, 5, 6, 4, 3]. We can see, Alex can eat more than 9 chocolates using a minimum of two boxes. Alex can use more boxes, but according to the question, he must use minimum boxes. So, he has the choice of picking boxes (2,3), (3,4). But since box two is nearest to him, he chooses box 2 and box 3. Thus the result is the chocolates in these boxes, this is, 5 and 6.\n\nIn the second test case, the number of chocolates is [11, 2, 5]. So Alex can eat more than 10 chocolates using one box only. He picks box 0. So the answer is 11.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 12\n5 7 11 3 5\n3 20\n20 19 21\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>7 11\n21\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 21,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'choco' representing the number of chocolates in each of 'N' boxes arranged in a line, and a target number 'X', determine the contiguous boxes Alex should choose to eat more than 'X' chocolates using the minimum number of boxes. If multiple such choices exist, select the contiguous boxes nearest to Alex (i.e., starting at the smallest index). Return a vector containing the chocolates in the chosen boxes.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10^5",
                    "1 <= X <= 10^9",
                    "1 <= choco[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "choco=[1, 3, 5, 6, 4, 3], x=9",
                        "output": "[5, 6]",
                        "explanation": "Alex needs to eat more than 9 chocolates. The optimal choice is boxes 2 and 3 (5+6=11), which uses the minimum number of boxes (2) and is the nearest solution compared to boxes 3 and 4 (6+4=10)."
                    },
                    {
                        "input": "choco=[11, 2, 5], x=10",
                        "output": "[11]",
                        "explanation": "Alex needs to eat more than 10 chocolates. The optimal choice is box 0 (11), which uses only one box."
                    },
                    {
                        "input": "choco=[5, 7, 11, 3, 5], x=12",
                        "output": "[7, 11]",
                        "explanation": "Alex needs to eat more than 12 chocolates. The optimal choice is boxes 1 and 2 (7+11=18), which uses the minimum number of boxes (2) and is the nearest solution."
                    },
                    {
                        "input": "choco=[20, 19, 21], x=20",
                        "output": "[21]",
                        "explanation": "Alex needs to eat more than 20 chocolates. The optimal choice is box 2 (21), as it's the only single box exceeding 20 and the problem guarantees a solution always exists."
                    },
                    {
                        "input": "choco=[1, 2, 3, 4, 5], x=10",
                        "output": "[1, 2, 3, 4, 5]",
                        "explanation": "The target X is 10. Summing up all the chocolates satisfies the condition. So, return the entire vector as it gives minimal boxes and fulfills the target."
                    },
                    {
                        "input": "choco=[1,1,1,1,1,1,1,1,1,1], x=5",
                        "output": "[1, 1, 1, 1, 1, 1]",
                        "explanation": "The target X is 5. Contiguous sum 1+1+1+1+1+1=6 is the first contiguous sum > 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you check all the ways to choose boxes and find the optimal one?</p>",
            "<p>Can we optimize the above approach using a sliding window technique?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}