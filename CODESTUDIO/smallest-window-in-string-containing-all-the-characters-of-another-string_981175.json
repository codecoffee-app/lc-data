{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9202,
            "title": "Smallest Window In String Containing All The Characters Of Another String",
            "titleSlug": "smallest-window-in-string-containing-all-the-characters-of-another-string_981175",
            "content": "<h4 id=\"you-are-given-two-strings-s-and-x-containing-random-characters-your-task-is-to-find-the-smallest-substring-in-s-which-contains-all-the-characters-present-in-x\">You are given two strings S and X containing random characters. Your task is to find the smallest substring in S which contains all the characters present in X.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Let S = \u201cabdd\u201d and X = \u201cbd\u201d.\n\nThe windows in S which contain all the characters in X are: &#39;abdd&#39;, &#39;abd&#39;, &#39;bdd&#39;, &#39;bd&#39;. \nOut of these, the smallest substring in S which contains all the characters present in X is &#39;bd&#39;. \nAll the other substring have a length larger than &#39;bd&#39;.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The very first line of input contains an integer T denoting the number of test cases. \n\nThe first line of every test case contains the string S.\n\nThe second line of every test case contains the string X.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the smallest window in S which contains all the characters present in X, in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>There is always a valid window in S which contains all the characters of X.  \n\nYou do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>In case of multiple answers, print only the substring that occurs first.\n\nFor example: for the string S = &#39;cbbbc&#39; and X = &#39;bc&#39;, there are 2 possible answers i.e. &#39;cb&#39; and &#39;bc&#39;, your code should print &#39;cb&#39;.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 \n1 &lt;= |S|, |X| &lt;= 10^5\n\nHere, |S| denotes the length of string S and |X| denotes the length of string X.\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\ncn\nc\nkmmdnj\nmj\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>c\nmdnj\n</code></pre>\n\n<h5 id=\"explanation-1\">Explanation 1:</h5>\n\n<pre><code>For the first test case when S = &#39;cn&#39; and X = &#39;c&#39;. \nThe substrings in S which contain all the characters present in X are: &#39;cn&#39; and &#39;n&#39;. Out of these, the smallest substring is &#39;c&#39;.\n\nFor the second test case when S = &#39;kmmdnj&#39; and X = &#39;mj&#39;. \nThe substrings in S which contain all the characters present in X are: &#39;kmmdnj&#39;, &#39;mmdnj&#39;, &#39;mdnj&#39;. Out of these, the smallest substring is &#39;mdnj&#39;.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\nilovecodingninjas\noiln\naabaac\naba\nAbbaBxA\nBA\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>lovecodin\naab\nBxA\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 27,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, S and X, find the smallest substring in S that contains all the characters present in X. If multiple substrings of the same minimum length satisfy the condition, return the first one encountered in S.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |S|, |X| <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "cn\nc",
                        "output": "c",
                        "explanation": "S = 'cn', X = 'c'. The substrings in S containing 'c' are 'cn' and 'c'. The smallest is 'c'."
                    },
                    {
                        "input": "kmmdnj\nmj",
                        "output": "mdnj",
                        "explanation": "S = 'kmmdnj', X = 'mj'. The substrings containing both 'm' and 'j' are 'kmmdnj', 'mmdnj', and 'mdnj'. The shortest is 'mdnj'."
                    },
                    {
                        "input": "ilovecodingninjas\noiln",
                        "output": "lovecodin",
                        "explanation": "S = 'ilovecodingninjas', X = 'oiln'. The smallest substring containing 'o', 'i', 'l', and 'n' is 'lovecodin'."
                    },
                    {
                        "input": "aabaac\naba",
                        "output": "aab",
                        "explanation": "S = 'aabaac', X = 'aba'. The smallest substring containing 'a', 'b' and 'a' is 'aab'."
                    },
                    {
                        "input": "AbbaBxA\nBA",
                        "output": "BxA",
                        "explanation": "S = 'AbbaBxA', X = 'BA'. The smallest substring containing 'B' and 'A' is 'BxA'."
                    },
                    {
                        "input": "abdd\nbd",
                        "output": "bd",
                        "explanation": "S = 'abdd', X = 'bd'. The substrings containing 'b' and 'd' are 'abdd', 'abd', 'bdd', and 'bd'. The smallest is 'bd'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>A simple and intuitive approach could be to generate all the possible substrings of string S and choose the smallest substring which contains all the characters present in X.</p>",
            "<p>Instead of generating all the possible substrings, we could use the concept of two pointers along with a hashtable. The two pointers - start and end, represent the current substring&nbsp; (window) which is in consideration. We move the end pointer to increase the size of the window and move the start pointer to decrease the size of the window. When a valid window is found, shrink the window if possible, then record its width. The smallest valid window gives us the answer to the problem.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}