{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8852,
            "title": "Smart Linked List",
            "titleSlug": "smart-linked-list_920439",
            "content": "<h4 id=\"you-are-given-a-singly-linked-list-of-integers-the-linked-list-is-called-a-smart-linked-list-if-no-node-in-the-list-has-a-greater-valued-node-on-its-right-side-convert-the-given-linked-list-into-a-smart-linked-list\">You are given a Singly Linked List of integers. The linked list is called a smart linked list if no node in the list has a greater valued node on its right side. Convert the given linked list into a smart linked list.</h4>\n\n<pre><code>A singly linked list is a type of linked list that is unidirectional; that is, it can be traversed in only one direction from head to the last node (tail).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>If the given linked list is already a smart linked list, you don\u2019t have to do anything.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer T, the number of test cases.\n\nThe first and the only line of every test case contains the elements of the singly linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, return the modified linked list. The elements of the modified list should be single-space separated, terminated by -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10    \n1 &lt;= N &lt;= 5 * 10^4\n-10^3 &lt;= data &lt;= 10^3 and data != -1\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1 \n6 10 7 8 5 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>10 8 5 -1 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>The given linked list is not a smart linked list. We can see that there are two nodes, 6 and 7 which have a greater valued node to their right ( Node with value 6 has nodes with values 10, 7 and 8 and node with value 7 has a node with value 8 on the right side respectively ). So, we will remove these nodes in order to make the linked list smart. \nThe modified linked list after the above process is 10 8 5 -1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n5 10 -6 4 7 -1\n10 20 30 40 50 -1\n-10 -20 -30 -40 -50 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>10 7 -1\n50 -1\n-10 -20 -30 -40 -50 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list of integers, transform it into a 'smart linked list'. A smart linked list is defined as a list where no node has a value greater than any node that appears later in the list.  Remove nodes to achieve this property. If the original list is already smart, no changes are necessary.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 5 * 10^4 (where N is the number of nodes in the linked list)",
                    "-10^3 <= data <= 10^3 (where data is the value of a node) and data != -1"
                ],
                "testcases": [
                    {
                        "input": "head = [6, 10, 7, 8, 5]",
                        "output": "[10, 8, 5]",
                        "explanation": "The original list contains 6, 10, 7, 8, and 5.  6 is removed because 10, 7, and 8 are greater. 7 is removed because 8 is greater. The resulting smart list is 10, 8, and 5."
                    },
                    {
                        "input": "head = [5, 10, -6, 4, 7]",
                        "output": "[10, 7]",
                        "explanation": "The original list contains 5, 10, -6, 4, and 7. 5 is removed because 10, 4, and 7 are greater. -6 and 4 are removed because 7 is greater. The result is the smart list 10, 7."
                    },
                    {
                        "input": "head = [10, 20, 30, 40, 50]",
                        "output": "[50]",
                        "explanation": "The original list contains 10, 20, 30, 40, and 50. All elements except the last are removed because there exists a greater element on the right."
                    },
                    {
                        "input": "head = [-10, -20, -30, -40, -50]",
                        "output": "[-10, -20, -30, -40, -50]",
                        "explanation": "The original list is already a smart linked list because each node's value is less than or equal to all nodes to its right. Therefore, no changes are needed."
                    },
                    {
                        "input": "head = [1, 2, 3, 2, 1]",
                        "output": "[3, 2, 1]",
                        "explanation": "The original list contains 1, 2, 3, 2, 1. 1 is removed because there exists a 2 and 3 on its right. Also the other 2 is removed due to 3 on right."
                    },
                    {
                        "input": "head = [1, 1, 1, 1, 1]",
                        "output": "[1, 1, 1, 1, 1]",
                        "explanation": "All elements are the same. So no element is greater than its right neighbor. Therefore, no changes are needed."
                    },
                    {
                        "input": "head = [5, 4, 3, 2, 1]",
                        "output": "[5, 4, 3, 2, 1]",
                        "explanation": "The list is already a smart list. No changes required."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For every node, check if there exists a greater valued node on the right side.&nbsp;</p>",
            "<p>Can you solve this problem using recursion?</p>",
            "<p>Is it possible to solve this problem by reversing the linked list?&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}