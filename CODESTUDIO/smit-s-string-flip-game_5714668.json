{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22481,
            "title": "Smit\u2019s String Flip Game.",
            "titleSlug": "smit-s-string-flip-game_5714668",
            "content": "<h4 id=\"smit-has-been-given-a-string-str-of-length-n-which-only-consists-of-0-and-1-and-an-operation-to-be-performed-k-times-on-the-string\">Smit has been given a string \u2018STR\u2019 of length \u2018N\u2019, which only consists of \u20180\u2019 and \u20181\u2019 and an operation to be performed \u2018K\u2019 times on the string.</h4>\n\n<h4 id=\"the-operation-description-is-as-follows\">The operation description is as follows:</h4>\n\n<h4 id=\"for-every-i-from-0-i-n-if-there-exist-indices-i-1-and-i-1-such-that-str-i-1-str-i-1-then-set-the-value-of-str-i-to-1-if-i-1-or-i-1-is-out-of-the-index-range-or-str-i-1-str-i-1-then-set-str-i-to-0\">For every \u2018i\u2019 from \u20180\u2019 &lt;= \u2018i\u2019 &lt; \u2018N\u2019, if there exist indices \u2018(i-1)\u2019 and \u2018(i+1)\u2019 such that \u2018STR[i-1] = STR[i+1]\u2019 then set the value of \u2018STR[i]\u2019 to \u20181\u2019. If \u2018(i-1)\u2019 or \u2018(i+1)\u2019 is out of the index range or \u2018STR[i-1]\u2019 != \u2018STR[i+1]\u2019 then set \u2018STR[i]\u2019 to \u20180\u2019.</h4>\n\n<h4 id=\"for-e-g-if-str-0000-then-after-the-operation-the-string-str-will-be-transformed-to-0110-because-for-i-1-and-i-2-the-condition-mentioned-above-is-satisfied\">For e.g. if \u2018STR\u2019 = \u201c0000\u201d, then after the operation the string \u2018STR\u2019 will be transformed to \u201c0110\u201d because for \u2018i\u2019 = \u20181\u2019 and \u2018i\u2019 = \u20182\u2019 the condition mentioned above is satisfied.</h4>\n\n<h4 id=\"note-when-transforming-we-take-into-account-the-values-of-the-old-string-given-in-the-problem-or-we-received-after-the-application-of-the-last-operation-not-the-newly-transformed-string-in-the-current-operation\"><b> Note: When transforming we take into account the values of the old string given in the problem or we received after the application of the last operation not the newly transformed string in the current operation. </b></h4>\n\n<h4 id=\"he-has-got-an-answer-but-is-not-completely-sure-if-it-is-correct-so-being-his-friend-he-asked-you-to-help-him-verify-if-his-answer-is-correct-or-not-can-you-help-smit-to-determine-the-correct-string-str-after-k-above-mentioned-operations\">He has got an answer but is not completely sure if it is correct. So being, his friend he asked you to help him verify if his answer is correct or not. Can you help Smit to determine the correct string \u2018STR\u2019 after \u2018K\u2019 above-mentioned operations?.</h4>\n\n<h5 id=\"example\">EXAMPLE :</h5>\n\n<pre><code>Input: \u2018N\u2019 = 5, \u2018K\u2019 = 1, \u2018STR\u2019 = \u201c10101\u201d\n\nOutput: 01110\nIn this case, the indices satisfying the condition of \u2018STR[i-1] = STR[i+1]\u2019 are \u20181\u2019, \u20182\u2019, and \u20183\u2019. Hence the string \u2018STR\u2019 after applying the given operation for \u2018K(=1)\u2019 times will be \u201c01110\u201d.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain the integer \u2018T\u2019, the number of test cases.\n\nEach test case consists of two lines.\n\nThe first line of input contains three integers, \u2018N\u2019 and \u2018K\u2019, denoting the length of the given string \u2018STR\u2019 and the number of times the given operation is to be performed.\n\nFollowed by a line containing a string of length \u2018N\u2019 denoting the string \u2018STR\u2019, consisting of only \u20180\u2019 and \u20181\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print the final string after applying \u2018K\u2019 operations.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= \u2018N\u2019 &lt;= 10\n0 &lt;= \u2018K\u2019 &lt;= 10^9\nIt is guaranteed that the string \u2018STR\u2019 only consists of the character \u20180\u2019 and \u20181\u2019.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2 10\n11\n8 4\n01011001\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>00\n00000100\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first test case, there doesn\u2019t exist index \u2018i-1\u2019 for \u20180\u2019th index and similarly, there doesn\u2019t exist index \u2018i+1\u2019 for \u20181\u2019st index. Hence after applying the operation once the string will remain the same after any number of operations.\n\nHence, the output will be: 00\n\nFor the second test case, the different states of string \u2018STR\u2019 after applying the operations one by one are as follows:\nOperation 1: \u2018STR\u2019 = \u201c01100000\u201d.\nOperation 2: \u2018STR\u2019 = \u201c00001110\u201d.\nOperation 3: \u2018STR\u2019 = \u201c01100100\u201d.\nOperation 4: \u2018STR\u2019 = \u201c00000100\u201d.\n\nHence, the output will be: 00000100\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 10000\n1\n5 1000000\n10110\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n00100\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary string 'STR' of length 'N' consisting of only '0's and '1's, perform a specific operation 'K' times. In each operation, for every index 'i' from 0 to N-1, if 'STR[i-1]' equals 'STR[i+1]' (considering boundary conditions), then 'STR[i]' becomes '1'; otherwise, it becomes '0'. Determine the final string 'STR' after applying this operation 'K' times.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 10",
                    "1 <= \u2018N\u2019 <= 10",
                    "0 <= \u2018K\u2019 <= 10^9",
                    "The string \u2018STR\u2019 only consists of the character \u20180\u2019 and \u20181\u2019."
                ],
                "testcases": [
                    {
                        "input": "n = 5, k = 1, str = \"10101\"",
                        "output": "01110",
                        "explanation": "Indices 1, 2, and 3 satisfy the condition STR[i-1] == STR[i+1]. Hence, the string becomes \"01110\"."
                    },
                    {
                        "input": "n = 2, k = 10, str = \"11\"",
                        "output": "00",
                        "explanation": "Since there are no valid i-1 and i+1 indices for the first and last element, they become 0."
                    },
                    {
                        "input": "n = 8, k = 4, str = \"01011001\"",
                        "output": "00000100",
                        "explanation": "The string evolves as follows:\nOperation 1: \"01100000\"\nOperation 2: \"00001110\"\nOperation 3: \"01100100\"\nOperation 4: \"00000100\""
                    },
                    {
                        "input": "n = 1, k = 10000, str = \"1\"",
                        "output": "0",
                        "explanation": "Since there are no neighboring elements, the single element becomes 0."
                    },
                    {
                        "input": "n = 5, k = 1000000, str = \"10110\"",
                        "output": "00100",
                        "explanation": "After many iterations, the string converges to \"00100\"."
                    },
                    {
                        "input": "n = 3, k = 2, str = \"010\"",
                        "output": "101",
                        "explanation": "Operation 1: 101\nOperation 2: 010"
                    },
                    {
                        "input": "n = 4, k = 1, str = \"0000\"",
                        "output": "0110",
                        "explanation": "Indices i=1 and i=2 satisfy the condition. So, only those indices change to 1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>Can we try to apply the given operations one by one?.</strong></p>",
            "<p><strong>Can the same string appear again after applying some number of operations?.</strong></p>"
        ],
        "relatedTopics": [
            {
                "name": "Ad-Hoc",
                "slug": "ad-hoc"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}