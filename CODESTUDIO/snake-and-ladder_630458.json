{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7225,
            "title": "Snake and Ladder",
            "titleSlug": "snake-and-ladder_630458",
            "content": "<h4 id=\"you-have-been-given-a-snake-and-ladder-board-with-n-rows-and-n-columns-with-the-numbers-written-from-1-to-n-n-starting-from-the-bottom-left-of-the-board-and-alternating-direction-each-row\">You have been given a Snake and Ladder Board with &#39;N&#39; rows and &#39;N&#39; columns with the numbers written from 1 to (N*N) starting from the bottom left of the board, and alternating direction each row.</h4>\n\n<h4 id=\"for-example\">For example</h4>\n\n<pre><code>For a (6 x 6) board, the numbers are written as follows:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004252.png\" alt=\"6*6 Board\"></p>\n\n<pre><code>You start from square 1 of the board (which is always in the last row and first column). On each square say &#39;X&#39;, you can throw a dice which can have six outcomes and you have total control over the outcome of dice throw and you want to find out the minimum number of throws required to reach the last cell.\nSome of the squares contain Snakes and Ladders, and these are possibilities of a throw at square &#39;X&#39;:\nYou choose a destination square &#39;S&#39; with number &#39;X+1&#39;, &#39;X+2&#39;, &#39;X+3&#39;, &#39;X+4&#39;, &#39;X+5&#39;, or &#39;X+6&#39;, provided this number is &lt;= N*N.\nIf &#39;S&#39; has a snake or ladder, you move to the destination of that snake or ladder.  Otherwise, you move to S.\nA board square on row &#39;i&#39; and column &#39;j&#39; has a &quot;Snake or Ladder&quot; if board[i][j] != -1. The destination of that snake or ladder is board[i][j].\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You can only take a snake or ladder at most once per move: if the destination to a snake or ladder is the start of another snake or ladder, you do not continue moving - you have to ignore the snake or ladder present on that square.\n\nFor example, if the board is:\n-1 1 -1\n-1 -1 9\n-1 4 -1\nLet&#39;s say on the first move your destination square is 2  [at row 2, column 1], then you finish your first move at 4 [at row 1, column 2] because you do not continue moving to 9 [at row 0, column 0] by taking the ladder from 4.\n\nA square can also have a Snake or Ladder which will end at the same cell.\nFor example, if the board is:\n-1 3 -1\n-1 5 -1\n-1 -1 9\nHere we can see Snake/Ladder on square 5 [at row 1, column 1] will end on the same square 5.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of each test case or query contains a single integer value, &#39;N&#39; representing the &#39;rows&#39; and &#39;columns&#39; for the two-dimensional square matrix.\n\nThe Second line onwards, the next &#39;N&#39; lines or rows represent the ith row values.\n\nEach of the i-th row constitutes &#39;N&#39; column values separated by a single space.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>&#39;-1&#39; denotes the square doesn&#39;t contain any Snake or Ladder.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>The only line of output prints the minimum number of throws required to reach the last cell of the board. If it is impossible to reach the last cell of the board, then print -1.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;= 10 ^ 2\n1 &lt;= board[i][j] &lt;= N*N or board[i][j] = -1\n\nWhere (NxN) is the size of the board.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3\n-1 1 -1\n-1 -1 9\n-1 4 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">\u00a0Explanation to Sample Input 1 :</h5>\n\n<pre><code>In the beginning, you start at square 1 [at row 2, column 0]. The optimal path will be:\n1. You decided to move to 4 [at row 1, column 2] and must take the ladder to square 9 [at row 0, column 0].\nYou finished at last cell of the board in 1 dice throw.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>6\n-1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1\n-1 35 -1 -1 13 -1\n-1 -1 -1 -1 -1 -1\n-1 15 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-2\">\u00a0Explanation to Sample Input 2 :</h5>\n\n<pre><code>In the beginning, you start at square 1 [at row 5, column 0]. The optimal path will be:\n1. You decide to move to square 2 [at row 5, column 1] and must take the ladder to square 15 [at row 5, column 1].\n2. You then decide to move to square 17 [at row 3, column 5] and must take the snake to square 13 [at row 3, column 0].\n3. You then decide to move to square 14 [at row 5, column 1] and must take the ladder to square 35 [at row 0, column 1].\n4. You then decide to move to square 36 [at row 5, column 1].\nYou finished at last cell of the board in 4 dice throw.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 17,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a Snake and Ladder board represented by an N x N matrix. The board is numbered from 1 to N*N, starting from the bottom left cell (row N-1, column 0) and alternating direction in each row (like a boustrophedon style). You start at cell 1 and want to reach cell N*N with the minimum number of dice throws. On each turn, you can roll a dice (1-6) and move that many squares. If a square has a snake or ladder, you move to the destination of that snake or ladder. Find the minimum number of dice throws to reach the last cell. A square (i, j) has a snake or ladder if board[i][j] != -1, and the destination is board[i][j]. You can only take a snake or ladder at most once per move.",
                "constraints": [
                    "1 <= N <= 10^2",
                    "1 <= board[i][j] <= N*N or board[i][j] = -1",
                    "Where (NxN) is the size of the board."
                ],
                "testcases": [
                    {
                        "input": "n = 3, board = [-1, 1, -1, -1, -1, 9, -1, 4, -1]",
                        "output": "1",
                        "explanation": "Start at square 1. Move to 4 (dice roll of 3), then take the ladder to 9. Requires 1 dice throw."
                    },
                    {
                        "input": "n = 6, board = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1]",
                        "output": "4",
                        "explanation": "1 -> 2 (ladder to 15) -> 17 (snake to 13) -> 14 (ladder to 35) -> 36. Requires 4 dice throws."
                    },
                    {
                        "input": "n = 2, board = [-1, 4, -1, -1]",
                        "output": "1",
                        "explanation": "Move from 1 to 2 and then take ladder at 2 to reach 4"
                    },
                    {
                        "input": "n = 2, board = [-1, -1, -1, -1]",
                        "output": "1",
                        "explanation": "Move from 1 to 4 with one dice throw"
                    },
                    {
                        "input": "n = 4, board = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "4",
                        "explanation": "We need 4 throws to reach 16."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try considering the given Snake and Ladder board as a directed graph with the number of vertices equal to the number of cells in the board. The problem reduces to finding the shortest path in a graph.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}