{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7303,
            "title": "Sort 0 1 2",
            "titleSlug": "sort-0-1-2_631055",
            "content": "<h4 id=\"you-have-been-given-an-integer-array-list-arr-of-size-n-it-only-contains-0s-1s-and-2s-write-a-solution-to-sort-this-array-list\">You have been given an integer array/list(ARR) of size &#39;N&#39;. It only contains 0s, 1s and 2s. Write a solution to sort this array/list.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Try to solve the problem in &#39;Single Scan&#39;. &#39; Single Scan&#39; refers to iterating over the array/list just once or to put it in other words, you will be visiting each element in the array/list just once.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains an Integer &#39;N&#39; denoting the size of the array/list.\n\nThe second line of each test case contains &#39;N&#39; space-separated Integers denoting the array/list.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case/query, print the sorted array/list(ARR) as space-separated Integers.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You need to change in the given array/list itself. Hence, no need to return or print anything.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= (5 * (10 ^ 5))\n0 &lt;= ARR[i] &lt;= 2\n\nWhere &#39;N&#39; is the size of the given array/list.\nAnd, ARR[i] denotes the i-th element in the array/list.\n\nTime Limit: 1sec \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n6\n0 1 2 2 1 0\n7\n0 1 2 1 2 1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>0 0 1 1 2 2\n0 1 1 1 2 2 2\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n7\n2 2 2 1 1 1 0\n6\n2 1 2 0 1 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0 1 1 1 2 2 2\n0 0 1 1 2 2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1269,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array (ARR) of size N containing only 0s, 1s, and 2s, sort the array in a single scan (i.e., iterate through the array only once). Modify the input array directly without creating a new one.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 5 * 10^5 (Size of the array)",
                    "0 <= ARR[i] <= 2 (Values in the array)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "6\n0 1 2 2 1 0",
                        "output": "0 0 1 1 2 2",
                        "explanation": null
                    },
                    {
                        "input": "7\n0 1 2 1 2 1 2",
                        "output": "0 1 1 1 2 2 2",
                        "explanation": null
                    },
                    {
                        "input": "7\n2 2 2 1 1 1 0",
                        "output": "0 1 1 1 2 2 2",
                        "explanation": null
                    },
                    {
                        "input": "6\n2 1 2 0 1 0",
                        "output": "0 0 1 1 2 2",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can try to find the sorting algorithm of best time Complexity.</p>",
            "<p>Can you use frequency of 0s, 1s and 2s to find the solution?</p>",
            "<p>Can you think of a solution using swap and three-pointers?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space Complexity : O(1)\r\n\r\n    Where N is the size of the array.\r\n*/\r\n\r\n#include <algorithm>\r\n\r\nvoid sort012(int *arr, int n)\r\n{\r\n    int i = 0;\r\n    int nextZero = 0;\r\n    int nextTwo = n - 1;\r\n\r\n    while (i <= nextTwo)\r\n    {\r\n        if (arr[i] == 0)\r\n        {\r\n            swap(arr[i], arr[nextZero]);\r\n            i++;\r\n            nextZero++;\r\n        }\r\n        else if (arr[i] == 2)\r\n        {\r\n            swap(arr[i], arr[nextTwo]);\r\n            nextTwo--;\r\n        }\r\n        else\r\n        {\r\n            i++;\r\n        }\r\n    }\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity : O(N)\n    Space Complexity : O(1)\n\n    Where N is the size of the array.\n'''\n\nfrom sys import stdin,setrecursionlimit\nsetrecursionlimit(10**7)\n\ndef sort012(arr, n) :\n\n    i = 0\n    nextZero = 0\n    nextTwo = n - 1\n\n    while (i <= nextTwo) :\n\n        if (arr[i] == 0) :\n            \n            temp = arr[i]\n            arr[i] = arr[nextZero]\n            arr[nextZero] = temp\n            i += 1\n            nextZero += 1\n        \n        elif (arr[i] == 2) :\n            \n            temp = arr[i]\n            arr[i] = arr[nextTwo]\n            arr[nextTwo] = temp\n            nextTwo -= 1\n        \n        else :\n            i += 1\n\n\n#taking inpit using fast I/O\ndef takeInput() :\n\tn = int(input().strip())\n\n\tif n == 0 :\n\t\treturn list(), 0\n\n\tarr = list(map(int, stdin.readline().strip().split(\" \")))\n\n\treturn arr, n\n\n\n\ndef printAnswer(arr, n) :\n    \n    for i in range(n) :\n        \n        print(arr[i],end=\" \")\n        \n    print()\n    \n#main\n\nt = int(input().strip())\nfor i in range(t) :\n\n    arr, n= takeInput()\n    sort012(arr, n)\n    printAnswer(arr, n)",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity : O(N)\r\n    Space complexity : O(1)\r\n\r\n    Where N is the size of input array\r\n*/\r\n\r\npublic class Solution {\r\n\r\n    public static void sort012(int[] arr) {\r\n        int nextZero = 0;\r\n        int nextTwo = arr.length - 1;\r\n        int i = 0;\r\n\r\n        while (i <= nextTwo) {\r\n\r\n            // If current element is 0, place it at the 'nextZero' pointer.\r\n            if (arr[i] == 0) {\r\n\r\n                int temp = arr[nextZero];\r\n                arr[nextZero] = arr[i];\r\n                arr[i] = temp;\r\n                i++;\r\n                nextZero++;\r\n\r\n            } \r\n            // Else if element = 2, place it at the 'nextTwo' pointer.\r\n            else if (arr[i] == 2) {\r\n\r\n                int temp = arr[nextTwo];\r\n                arr[nextTwo] = arr[i];\r\n                arr[i] = temp;\r\n                nextTwo--;\r\n\r\n            } \r\n            // Else, if element = 1, let it remain in mid position.\r\n            else {\r\n                i++;\r\n            }\r\n\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}