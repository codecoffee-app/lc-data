{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10044,
            "title": "Sort a \u201cK\u201d Sorted Doubly Linked List",
            "titleSlug": "sort-a-k-sorted-doubly-linked-list_1118118",
            "content": "<h4 id=\"you-re-given-a-doubly-linked-list-with-n-nodes-where-each-node-deviates-at-max-k-position-from-its-position-in-the-sorted-list-your-task-is-to-sort-this-given-doubly-linked-list\">You\u2019re given a doubly-linked list with N nodes, where each node deviates at max K position from its position in the sorted list. Your task is to sort this given doubly linked list.</h4>\n\n<h5 id=\"for-example\">For example :</h5>\n\n<pre><code>Let us consider K is 3, an element at position 4 in the sorted doubly linked list, can be at positions 1, 2, 3, 4, 5, 6, 7 in the given linked list because the absolute difference of all these indices with 4 is at most 3.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>All elements are distinct.\n\nA doubly linked list is a type of linked list that is bidirectional, that is, it can be traversed in both directions, forward and backward. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains T, the number of test cases.\n\nThe first line of each test case contains an integer K, as specified in the problem statement.\n\nThe second line contains the elements of the doubly linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case print in a new line the sorted linked list, the elements of the sorted list should be single-space separated, terminated by -1.  \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10000\n1 &lt;= K &lt; N\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n4 \n6 5 3 2 8 10 9 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2 3 5 6 8 9 10 -1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>We could move 6 from position 1 to as far as position 5(as K=4) and we moved it to position 4 and it can be seen that after that all elements to the left(i.e position 1 to 3) are less than 6, hence 10 is at its best position now. Similarly, we do this for all the elements, to reach our answer. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n4\n10 9 8 7 4 70 60 50 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4 7 8 9 10 50 60 70 -1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 22,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a doubly-linked list with N nodes. Each node's value is at most K positions away from its correct position in the sorted list. Sort the given doubly linked list in ascending order.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10000",
                    "1 <= K < N",
                    "All elements are distinct."
                ],
                "testcases": [
                    {
                        "input": "4\n6 5 3 2 8 10 9 -1",
                        "output": "2 3 5 6 8 9 10 -1",
                        "explanation": "Given K=4, the element '6' can be at most 4 positions away from its correct position in the sorted list.  The algorithm iteratively places each element in its correct sorted position by considering the K constraint, resulting in the sorted doubly linked list: 2 3 5 6 8 9 10 -1."
                    },
                    {
                        "input": "4\n10 9 8 7 4 70 60 50 -1",
                        "output": "4 7 8 9 10 50 60 70 -1",
                        "explanation": "Given K=4, the algorithm uses the constraint that each element is at most K positions away from its correct position. The sorting process leads to the sorted doubly linked list: 4 7 8 9 10 50 60 70 -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}