{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 317,
            "title": "Sort a Stack",
            "titleSlug": "sort-a-stack_537",
            "content": "<h4 id=\"given-a-stack-sort-the-elements-inside-that-stack-in-ascending-order-using-only-push-and-pop-operation-you-can-use-one-additional-stack-only\">Given a stack, sort the elements inside that stack in ascending order using only push and pop operation. You can use one additional stack only.</h4>\n\n<blockquote>\n<p>For eg. </p>\n</blockquote>\n\n<pre><code>Input Stack :  5 (top)\n               4\n               3\n               2\n               1\nOutput Stack : 1 (top)\n               2\n               3\n               4\n               5\n</code></pre>\n\n<h5 id=\"input-format\">Input format</h5>\n\n<pre><code>First line of input consists of an integer representing the size of the stack, N\nSecond line of input consistes of N space-separated integers representing the elements of the stack\n</code></pre>\n\n<h5 id=\"output-format\">Output format</h5>\n\n<pre><code>The only line of output consists of the elements of the stack in sorted order (space-separated)\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>0 &lt;= N &lt;= 1000\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input\">Sample Input</h5>\n\n<pre><code>5\n1 2 3 4 5\n</code></pre>\n\n<h5 id=\"sample-output\">Sample Output</h5>\n\n<pre><code>1 2 3 4 5\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a function `sortStack` that sorts the elements of a given stack in ascending order. You are allowed to use only push and pop operations, and one additional stack for temporary storage.",
                "constraints": [
                    "0 <= N <= 1000, where N is the size of the stack",
                    "Time limit: 1 sec",
                    "Only push and pop operations are allowed on the stacks."
                ],
                "testcases": [
                    {
                        "input": "n = 5, nums=[5, 4, 3, 2, 1], s = \"randomstring\"",
                        "output": "1 2 3 4 5",
                        "explanation": "The input stack contains elements 5, 4, 3, 2, and 1 (5 being the top). The output stack should contain the sorted elements 1, 2, 3, 4, and 5 (1 being the top)."
                    },
                    {
                        "input": "n = 5, nums=[1, 2, 3, 4, 5], s = \"randomstring\"",
                        "output": "1 2 3 4 5",
                        "explanation": "The input stack is already sorted in ascending order, so the output should be the same."
                    },
                    {
                        "input": "n = 3, nums=[3, 1, 2], s = \"randomstring\"",
                        "output": "1 2 3",
                        "explanation": "The input stack contains elements 3, 1, and 2 (3 being the top). The output stack should contain the sorted elements 1, 2, and 3 (1 being the top)."
                    },
                    {
                        "input": "n = 1, nums=[7], s = \"randomstring\"",
                        "output": "7",
                        "explanation": "The input stack contains only one element, 7. The output stack should contain the same element."
                    },
                    {
                        "input": "n = 0, nums=[], s = \"randomstring\"",
                        "output": "",
                        "explanation": "The input stack is empty, so the output should be empty."
                    },
                    {
                        "input": "n = 4, nums=[2, 2, 1, 1], s = \"randomstring\"",
                        "output": "1 1 2 2",
                        "explanation": "The input stack contains duplicate elements. The output stack should contain the sorted elements including duplicates."
                    },
                    {
                        "input": "n = 6, nums=[5, 2, 8, 1, 9, 4], s = \"randomstring\"",
                        "output": "1 2 4 5 8 9",
                        "explanation": "Input stack [5, 2, 8, 1, 9, 4] sorted ascending gives [1 2 4 5 8 9]"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}