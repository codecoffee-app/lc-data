{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9413,
            "title": "Sort a stack",
            "titleSlug": "sort-a-stack_985275",
            "content": "<h4 id=\"you-re-given-a-stack-consisting-of-n-integers-your-task-is-to-sort-this-stack-in-descending-order-using-recursion\">You\u2019re given a stack consisting of &#39;N&#39; integers. Your task is to sort this stack in descending order using recursion.</h4>\n\n<h4 id=\"we-can-only-use-the-following-functions-on-this-stack-s\">We can only use the following functions on this stack S.</h4>\n\n<pre><code>is_empty(S) : Tests whether stack is empty or not.\npush(S) : Adds a new element to the stack.\npop(S) : Removes top element from the stack.\ntop(S) : Returns value of the top element. Note that this function does not remove elements from the stack.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1) Use of any loop constructs like while, for..etc is not allowed. \n2) The stack may contain duplicate integers.\n3) The stack may contain any integer i.e it may either be negative, positive or zero.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer &#39;T&#39; denoting the number of test cases. Then &#39;T&#39; test cases follow.\n\nThe first line of each test case contains an integer &#39;N&#39;, the number of elements in the stack.\n\nThe second line of each test contains &#39;N&#39; space separated integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output of each test case should contain &#39;N&#39; space separated integers denoting the stack in a sorted order.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 100\n1 &lt;=  &#39;N&#39; &lt;= 100\n1 &lt;= |&#39;V&#39;| &lt;= 10^9\n\nWhere |V| denotes the absolute value of any stack element.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n5\n5 -2 9 -7 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>9 5 3 -2 -7\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>9 Is the largest element, hence it\u2019s present at the top. Similarly 5&gt;3, 3&gt;-2 and -7 being the smallest element is present at the last. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n5\n-3 14 18 -5 30\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>30 18 14 -3 -5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>30 is the largest element, hence it\u2019s present at the top. Similarly, 18&gt;14, 14&gt;-3 and -5 being the smallest element is present at the last. \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 464,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a stack of 'N' integers, sort the stack in descending order using recursion. You are restricted to using only the following stack operations: `is_empty(S)`, `push(S)`, `pop(S)`, and `top(S)`. Avoid using any loop constructs.",
                "constraints": [
                    "1 <= 'T' <= 100",
                    "1 <= 'N' <= 100",
                    "1 <= |'V'| <= 10^9, where |V| is the absolute value of any stack element."
                ],
                "testcases": [
                    {
                        "input": "n = 5, nums=[5, -2, 9, -7, 3]",
                        "output": "9 5 3 -2 -7",
                        "explanation": "9 is the largest element, hence it's at the top. Similarly, 5 > 3, 3 > -2, and -7, being the smallest, is at the bottom."
                    },
                    {
                        "input": "n = 5, nums=[-3, 14, 18, -5, 30]",
                        "output": "30 18 14 -3 -5",
                        "explanation": "30 is the largest element, hence it's at the top. Similarly, 18 > 14, 14 > -3, and -5, being the smallest, is at the bottom."
                    },
                    {
                        "input": "n = 3, nums=[1, 1, 1]",
                        "output": "1 1 1",
                        "explanation": "The stack contains duplicate elements, but the output is still sorted in descending order."
                    },
                    {
                        "input": "n = 4, nums=[-1, -2, -3, -4]",
                        "output": "-1 -2 -3 -4",
                        "explanation": "The stack contains only negative numbers, sorted in descending order."
                    },
                    {
                        "input": "n = 1, nums=[0]",
                        "output": "0",
                        "explanation": "A stack with a single zero element is already sorted."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think how you can sort the stack considering you can only access the top element of the stack.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N^2)\n    Space Complexity: O(N),\n\n    where N is the number of elements in the stack.\n*/\n\nvoid sortedInsert(stack<int> &stack, int current)\n{\n\tif (stack.empty() || current > stack.top())\n\t{\n\t\tstack.push(current);\n\t\treturn;\n\t}\n\n\t// Remove the top element\n\tint top = stack.top();\n\tstack.pop();\n\t// Recursion for the remaining elements in the stack\n\tsortedInsert(stack, current);\n\t// Insert the popped element back in the stack\n\tstack.push(top);\n}\n\n// Recursive method to sort a stack\nvoid sortStack(stack<int> &stack)\n{\n\t// Base case: stack is empty\n\tif (stack.empty())\n\t{\n\t\treturn;\n\t}\n\n\t// Remove the top element\n\tint top = stack.top();\n\tstack.pop();\n\t// Recursion for the remaining elements in the stack\n\tsortStack(stack);\n\t// Insert the popped element back in the sorted stack\n\tsortedInsert(stack, top);\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O(N^2)\n    Space Complexity: O(N),\n\n    where N is the number of elements in the stack.\n*/\nimport java.util.Stack;\n\npublic class Solution {\n\tpublic static void sortedInsert(Stack<Integer> stack, int current) {\n\t\tif (stack.empty() == true || current > stack.peek()) {\n\t\t\tstack.push(current);\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove the top element\n\t\tint top = stack.peek();\n\t\tstack.pop();\n\t\t// Recursion for the remaining elements in the stack\n\t\tsortedInsert(stack, current);\n\t\t// Insert the popped element back in the stack\n\t\tstack.push(top);\n\t}\n\n\t// Recursive method to sort a stack\n\tpublic static void sortStack(Stack<Integer> stack) {\n\t\t// Base case: stack is empty\n\t\tif (stack.empty() == true) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove the top element\n\t\tint top = stack.peek();\n\t\tstack.pop();\n\t\t// Recursion for the remaining elements in the stack\n\t\tsortStack(stack);\n\t\t// Insert the popped element back in the sorted stack\n\t\tsortedInsert(stack, top);\n\t}\n\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(N^2)\n    Space Complexity: O(N),\n\n    where N is the number of elements in the stack.\n'''\n\n\ndef sortedInsert(stack, current):\n    if len(stack) == 0 or current > stack[-1]:\n        stack.append(current)\n        return\n\n    # Remove the top element\n    top = stack[-1]\n    del stack[-1]\n\n    # Recursion for the remaining elements in the stack\n    sortedInsert(stack, current)\n\n    # Insert the popped element back in the stack.\n    stack.append(top)\n\n\ndef sortStack(stack):\n    # Base Case : If the stack is empty.\n    if len(stack) == 0:\n        return\n\n    # Remove the top element\n    top = stack[-1]\n    del stack[-1]\n\n    # Recursion for the remaining elements in the stack\n    sortStack(stack)\n\n    # Insert the popped element back in the stack.\n    sortedInsert(stack, top)\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}