{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 22587,
            "title": "Sort an Array According to the Relative Order of Another Array",
            "titleSlug": "sort-an-array-according-to-the-relative-order-of-another-array_5815822",
            "content": "<h4 id=\"you-are-given-two-arrays-p-and-q-of-length-n-and-m-sort-p-so-that-the-relative-order-of-the-elements-is-the-same-as-it-is-in-q-append-the-elements-that-are-missing-from-q-at-last-sorted-in-non-decreasing-order\">You are given two arrays, \u2018P\u2019  and \u2018Q\u2019 of length \u2018N\u2019 and \u2018M\u2019, sort \u2018P\u2019 so that the relative order of the elements is the same as it is in \u2018Q\u2019. Append the elements that are missing from \u2018Q\u2019 at last, sorted in non-decreasing order.</h4>\n\n<h4 id=\"note-if-elements-are-repeated-in-the-second-array-consider-their-first-occurrence-only\">Note: If elements are repeated in the second array, consider their first occurrence only.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018N\u2019 = 5, \u2018M\u2019 = 3,  \u2018P\u2019 = {1, 2, 4, 5, 3} \u2018Q\u2019 = {2, 1, 3}.\n\nOutput: {2, 1, 3, 4, 5}.\n\nSince the array \u2018P\u2019 should be sorted such that the relative order of \u2018Q\u2019  is maintained so, 2 comes before 1 in \u2018P\u2019, then 1 comes before 3 and after 2 and then 3 comes before 1 and 2. Finally, all the remaining elements are appended at last in sorted order.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line will contain the integer &#39;T&#39;, denoting the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 and \u2018M\u2019 denoting the length of the array \u2018P\u2019 and array \u2018Q\u2019. \n\nThe second line of each test case contains \u2018N\u2019 space-separated integers.\n\nThe third line of each test case contains \u2018M\u2019 space-separated integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, you don\u2019t need to print anything just rearrange the array \u2018P\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n1 &lt;= M &lt;= 10^5\n\nSum of N Over all the Test cases &lt;= 10^5\nSum of M Over all the Test cases &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n11 4\n20 10 20 50 70 10 90 30 60 80 80\n20 10 80 30\n11 4\n20 10 20 50 70 10 90 30 60 80 80 \n99 22 444 56\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>20 20 10 10 80 80 30 50 60 70 90\n10 10 20 20 30 50 60 70 80 80 90\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first case:\nSince the array \u2018P\u2019 should be sorted such that the relative order of \u2018Q\u2019  is maintained so, 20, 10, 80, and 30 are placed before then all the elements are appended at last in sorted order.\n\n\nFor the second case:\n92, 22, 444, and 56 are not present in array \u2018P\u2019 so all the elements are appending in non-decreasing order.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4 2\n10 12 7 19\n1 12\n5 3\n19 17 12 11 1\n1 2 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>12 7 10 19\n1 11 12 17 19\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, 'P' of size 'N' and 'Q' of size 'M', rearrange 'P' such that the elements present in 'Q' appear in the same relative order as in 'Q'. After placing these elements, append the remaining elements from 'P' (those not present in 'Q') to the end of the array in non-decreasing order.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "1 <= M <= 10^5",
                    "Sum of N Over all the Test cases <= 10^5",
                    "Sum of M Over all the Test cases <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 5, m = 3, P = [1, 2, 4, 5, 3], Q = [2, 1, 3]",
                        "output": "[2, 1, 3, 4, 5]",
                        "explanation": "The array 'P' is sorted according to the order of elements in 'Q' (2, 1, 3).  The remaining elements (4, 5) are then appended in sorted order."
                    },
                    {
                        "input": "n = 11, m = 4, P = [20, 10, 20, 50, 70, 10, 90, 30, 60, 80, 80], Q = [20, 10, 80, 30]",
                        "output": "[20, 20, 10, 10, 80, 80, 30, 50, 60, 70, 90]",
                        "explanation": "The array 'P' is rearranged so that 20, 10, 80, and 30 appear in the order specified by 'Q'. The remaining elements 50, 70, 90, and 60 are appended at the end in sorted order."
                    },
                    {
                        "input": "n = 11, m = 4, P = [20, 10, 20, 50, 70, 10, 90, 30, 60, 80, 80], Q = [99, 22, 444, 56]",
                        "output": "[10, 10, 20, 20, 30, 50, 60, 70, 80, 80, 90]",
                        "explanation": "None of the elements in Q are present in P. So, all the elements of P are sorted and returned."
                    },
                    {
                        "input": "n = 4, m = 2, P = [10, 12, 7, 19], Q = [1, 12]",
                        "output": "[12, 7, 10, 19]",
                        "explanation": "12 is the only element from Q that exists in P. It's placed first. Then remaining elements of P, 7, 10, and 19, are appended in sorted order."
                    },
                    {
                        "input": "n = 5, m = 3, P = [19, 17, 12, 11, 1], Q = [1, 2, 3]",
                        "output": "[1, 11, 12, 17, 19]",
                        "explanation": "1 is present in both P and Q. So 1 comes first. The other elements in P are 11, 12, 17 and 19. Appending these sorted results in [11, 12, 17, 19]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a way to solve this problem using binary search?</p>",
            "<p>Can you think of a way to solve it with Hash Table?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}