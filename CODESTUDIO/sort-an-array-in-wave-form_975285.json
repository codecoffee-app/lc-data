{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9086,
            "title": "Sort an array in wave form",
            "titleSlug": "sort-an-array-in-wave-form_975285",
            "content": "<h4 id=\"you-have-been-given-an-unsorted-array-arr\">You have been given an unsorted array \u2018ARR\u2019.</h4>\n\n<h4 id=\"your-task-is-to-sort-the-array-in-such-a-way-that-the-array-looks-like-a-wave-array\">Your task is to sort the array in such a way that the array looks like a wave array.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>If the given sequence \u2018ARR\u2019 has \u2018N\u2019 elements then the sorted wave array looks like - \n\u2018ARR[0] &gt;= ARR[1]\u2019 and \u2018ARR[1] &lt;= ARR[2]\u2019\n\u2018ARR[2] &gt;= ARR[3]\u2019 and \u2018ARR[3] &lt;= ARR[4]\u2019\n\u2018ARR[4] &gt;= ARR[5]\u2019 and \u2018ARR[5] &lt;= ARR[6]\u2019  And so on.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. \u2018ARR[0]\u2019 must be greater than or equal to \u2018ARR[1]\u2019.\n\n2. There can be multiple arrays that look like a wave array but you have to return only one.\n\n3. We have an internal function that will check your solution and return &#39;True&#39; in case your array is one of the solutions otherwise return &#39;False&#39;.\n</code></pre>\n\n<h4 id=\"explanation\">Explanation</h4>\n\n<pre><code>The given array \u2018 ARR = { 4, 3, 5, 2, 3, 1, 2 } \u2019\nThe below figure is a visual representation of the given \u2018ARR\u2019 and you can see we can express \u2018ARR\u2019 in a waveform array because \n4&gt;3 and 3&lt;5 \n5&gt;2 and 2&lt;3\n3&gt;1 and 1&lt;2\nAnd it follows the condition of wave array.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-98-6474.png\" alt=\"subsequence\"></p>\n\n<h5 id=\"follow-up\">Follow up:</h5>\n\n<pre><code>Try to solve this problem in linear time complexity.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u20182*T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of each test case contains the single integer \u2018N\u2019 and \u2018N\u2019 is denoting the number elements in the given \u2018ARR\u2019.\n\nThe second line of each test case contains \u2018N\u2019 space-separated elements of \u2018ARR\u2019. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print in a single line space-separated integers that represent the elements of a wave array.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the output explicitly, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N&lt;= 10^4\n-10^9 &lt;= ARR[i] &lt;= 10^9\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5 \n2 3 1 4 2\n6\n4 3 2 5 4 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 1 3 2 4\n4 3 5 2 4 1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>Test Case 1:\nFor given &#39;ARR&#39; = { 2, 3, 1, 4, 2 } one possible sorted wave form array is { 2, 1, 3, 2, 4 }\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-101-6475.png\" alt=\"subsequence\"></p>\n\n<pre><code>2&gt;1 and 1&lt;3 \n3&gt;2 and 2&lt;4\n4&gt;2 \nAnd it follows the condition of wave array form.\n\nSome other possible sorted array in wave form -\n3 1 2 2 4\n4 1 2 2 3\n4 2 3 1 2\n\n\nTest case 2:\n\nFor given &#39;ARR&#39; = { 4, 3, 2, 5, 4, 1 } one possible sorted wave form array is { 4, 3, 5, 2, 4, 1 }\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-102-6476.png\" alt=\"subsequence\"></p>\n\n<pre><code>4&gt;3 and 3&lt;5 \n5&gt;3 and 2&lt;4\n4&gt;2 and 1&lt;4\nAnd it follows the condition of wave array form.\n\nSome other possible sorted array in wave form -\n4 2 3 1 5 4\n4 2 3 4 5 1\n3 2 4 1 5 4\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3\n3 2 1\n9\n3 2 1 3 2 1 3 2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2 1 3\n3 1 2 1 3 2 2 1 3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 35,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an unsorted array 'ARR' of N elements, sort it in a wave-like manner.  A wave array satisfies the condition: ARR[0] >= ARR[1] <= ARR[2] >= ARR[3] <= ARR[4] ... and so on.  Specifically, ARR[i] >= ARR[i+1] for even i, and ARR[i] <= ARR[i+1] for odd i. ARR[0] must be greater than or equal to ARR[1]. You need to return one possible wave array.  An internal function will verify if your solution is a valid wave array.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^4",
                    "-10^9 <= ARR[i] <= 10^9",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "5\n2 3 1 4 2",
                        "output": "2 1 3 2 4",
                        "explanation": "For ARR = { 2, 3, 1, 4, 2 }, a possible wave array is { 2, 1, 3, 2, 4 } where 2>=1, 1<=3, 3>=2, 2<=4. Other valid wave arrays exist, such as {3 1 2 2 4}, {4 1 2 2 3}, and {4 2 3 1 2}."
                    },
                    {
                        "input": "6\n4 3 2 5 4 1",
                        "output": "4 3 5 2 4 1",
                        "explanation": "For ARR = { 4, 3, 2, 5, 4, 1 }, a possible wave array is { 4, 3, 5, 2, 4, 1 } where 4>=3, 3<=5, 5>=2, 2<=4, 4>=1. Other valid wave arrays include {4 2 3 1 5 4}, {4 2 3 4 5 1}, and {3 2 4 1 5 4}."
                    },
                    {
                        "input": "3\n3 2 1",
                        "output": "2 1 3",
                        "explanation": null
                    },
                    {
                        "input": "9\n3 2 1 3 2 1 3 2 1",
                        "output": "3 1 2 1 3 2 2 1 3",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to place elements position wise.</p>",
            "<p>Try to use sorting.</p>",
            "<p>Try to change the position of neighbour elements.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}