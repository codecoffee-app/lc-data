{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9039,
            "title": "Sort by Kth bit",
            "titleSlug": "sort-by-kth-bit_973086",
            "content": "<h4 id=\"you-are-given-an-array-list-arr-of-n-positive-integers-and-an-integer-k-your-task-is-to-group-all-the-array-elements-with-k-th-bit-rightmost-bit-is-1st-bit-equal-to-0-followed-by-all-the-elements-with-k-th-bit-equal-to-1\">You are given an array/list \u2018ARR\u2019 of \u2018N\u2019 positive integers and an integer \u2018K\u2019. Your task is to group all the array elements with \u2018K-th\u2019 bit (rightmost bit is \u20181st\u2019 bit) equal to 0 followed by all the elements with \u2018K-th\u2019 bit equal to 1.</h4>\n\n<h4 id=\"note-1-the-relative-order-inside-both-the-groups-should-remain-as-it-was-in-the-input\">Note 1: The relative order inside both the groups should remain as it was in the input.</h4>\n\n<h4 id=\"note-2-you-have-to-return-the-modified-array-list\">Note 2: You have to return the modified array/list..</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If \u2018ARR\u2019 is {1,2,3,4} and \u2018K\u2019 = 1, then after modification, \u2018ARR\u2019 should be {2,4,1,3} because \u2018K-th\u2019 (\u2018K\u2019 = 1) of {2,4} is 0 and \u2018K-th\u2019 bit of {1,3} is 1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer T representing the number of test cases.\n\nThe first line of each test case contains two single space-separated integers \u2018N\u2019 and \u2018K\u2019 representing size of the input \u2018ARR\u2019 and the \u2018Kth\u2019 bit as discussed above.\n\nThe next line of each test case contains \u2018N\u2019 single space-separated integers that represents the elements of the \u2018ARR\u2019.    \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the modified array as discussed above.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you do it in linear time?\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^4\n1 &lt;= ARR[i] &lt;= 10^9\n1 &lt;= K &lt;= 31\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 1\n4 3 2 1\n5 2\n2 5 1 6 7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4 2 3 1\n5 1 2 6 7\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>In example 1, the original \u2018ARR\u2019 is {4,3,2,1} and \u2018K\u2019 = 1. After modification, the \u2018ARR\u2019 should be {4,2,3,1} because {4,2} will come first as their 1st bit is 0 and {3,1} will come after that as their 1st bit is 1.\n\nIn example 2, the original \u2018ARR\u2019 is {2,5,1,6,7} and \u2018K\u2019 = 2. After modification the \u2018ARR\u2019 should be {5,1,2,6,7} because {5,1} will come first as their 2nd bit is 0 and {2,6,7} will come after that as their 2nd bit is 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 1\n3 6 2 1 4\n5 3\n7 6 2 9 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>6 2 4 3 1\n2 9 3 7 6\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>In example 1, the original \u2018ARR\u2019 is {3,6,2,1,4} and \u2018K\u2019 = 1. After modification the \u2018ARR\u2019 should be {6,2,4,3,1} because {6,2,4} will come first as their 1st bit is 0 and {3,1} will come after that as their 1st bit is 1.\n\nIn example 2, the original \u2018ARR\u2019 is {7,6,2,9,3} and \u2018K\u2019 = 3. After modification the \u2018ARR\u2019 should be {2,9,3,7,6} because {2,9,3} will come first as their 3rd bit is 0 and {7,6} will come after that as their 3rd bit is 1.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 28,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers, rearrange the elements such that elements with the K-th bit (rightmost bit is 1st bit) equal to 0 appear before elements with the K-th bit equal to 1, while preserving the relative order within each group.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^4",
                    "1 <= ARR[i] <= 10^9",
                    "1 <= K <= 31"
                ],
                "testcases": [
                    {
                        "input": "n = 4, k = 1, arr = [4, 3, 2, 1]",
                        "output": "[4, 2, 3, 1]",
                        "explanation": "The 1st bit of {4, 2} is 0, and the 1st bit of {3, 1} is 1. The array is rearranged as {4, 2, 3, 1}."
                    },
                    {
                        "input": "n = 5, k = 2, arr = [2, 5, 1, 6, 7]",
                        "output": "[5, 1, 2, 6, 7]",
                        "explanation": "The 2nd bit of {5, 1} is 0, and the 2nd bit of {2, 6, 7} is 1. The array is rearranged as {5, 1, 2, 6, 7}."
                    },
                    {
                        "input": "n = 5, k = 1, arr = [3, 6, 2, 1, 4]",
                        "output": "[6, 2, 4, 3, 1]",
                        "explanation": "The 1st bit of {6, 2, 4} is 0, and the 1st bit of {3, 1} is 1. The array is rearranged as {6, 2, 4, 3, 1}."
                    },
                    {
                        "input": "n = 5, k = 3, arr = [7, 6, 2, 9, 3]",
                        "output": "[2, 9, 3, 7, 6]",
                        "explanation": "The 3rd bit of {2, 9, 3} is 0, and the 3rd bit of {7, 6} is 1. The array is rearranged as {2, 9, 3, 7, 6}."
                    },
                    {
                        "input": "n = 3, k = 2, arr = [1, 2, 3]",
                        "output": "[1, 3, 2]",
                        "explanation": "The 2nd bit of {1, 3} is 0, and the 2nd bit of {2} is 1.  The array is rearranged as {1, 3, 2}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you iterate through the \u2018ARR\u2019 and check which elements belong to which group?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}