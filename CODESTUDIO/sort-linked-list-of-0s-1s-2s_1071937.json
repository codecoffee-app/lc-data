{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9652,
            "title": "Sort linked list of 0s 1s 2s",
            "titleSlug": "sort-linked-list-of-0s-1s-2s_1071937",
            "content": "<h4 id=\"given-a-linked-list-of-n-nodes-where-each-node-has-an-integer-value-that-can-be-0-1-or-2-you-need-to-sort-the-linked-list-in-non-decreasing-order-and-the-return-the-head-of-the-sorted-list\">Given a linked list of <em><strong>&#39;N&#39;</strong></em> nodes, where each node has an integer value that can be 0, 1, or 2. You need to sort the linked list in non-decreasing order and the return the head of the sorted list.</h4>\n\n<p><br></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Given linked list is 1 -&gt; 0 -&gt; 2 -&gt; 1 -&gt; 2. \nThe sorted list for the given linked list will be 0 -&gt; 1 -&gt; 1 -&gt; 2 -&gt; 2.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;N&#39;, the size of the linked list.\nThe second line contains &#39;N&#39; space-separated integers containing 0, 1 and 2 only.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The output contains all the integers in non-decreasing order.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>7\n1 0 2 1 0 2 1\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0 0 1 1 1 2 2\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>Input: 1 -&gt; 0 -&gt; 2 -&gt; 1 -&gt; 0 -&gt; 2 -&gt; 1\n\nOutput: 0 -&gt; 0 -&gt; 1 -&gt; 1 -&gt; 1 -&gt; 2 -&gt; 2\n\nExplanation: \nIn this example, the original linked list contains two 0s, three 1s, and two 2s. The sorted linked list has all the 0s at the beginning, followed by all the 1s, and finally, all the 2s at the end.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>8\n2 1 0 2 1 0 0 2\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0 0 0 1 1 2 2 2\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve this without updating the Nodes of the given linked list?\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^3\n0 &lt;= data &lt;= 2 \n\nWhere &#39;N&#39; is the length of the linked list.\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 245,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a linked list of 'N' nodes, where each node contains an integer value (0, 1, or 2), sort the list in non-decreasing order and return the head of the sorted list.",
                "constraints": [
                    "1 <= N <= 10^3",
                    "0 <= data <= 2",
                    "Where 'N' is the length of the linked list.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "7\n1 0 2 1 0 2 1",
                        "output": "0 0 1 1 1 2 2",
                        "explanation": "The input list is 1 -> 0 -> 2 -> 1 -> 0 -> 2 -> 1.  The sorted list is 0 -> 0 -> 1 -> 1 -> 1 -> 2 -> 2, with all 0s preceding 1s, and all 1s preceding 2s."
                    },
                    {
                        "input": "8\n2 1 0 2 1 0 0 2",
                        "output": "0 0 0 1 1 2 2 2",
                        "explanation": "null"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Count the number of occurrences, then update the linked list.</p>",
            "<p>Separate each node and reconnect.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1)\r\n\r\n    Where N is number of nodes in the linked list.\r\n*/\r\n\r\nNode* sortList(Node *head)\r\n{\r\n    Node* lists[3] = {}, *tails[3] = {};\r\n\r\n    // Iterate while head is not empty node\r\n    while(head)\r\n    {\r\n        Node *next = head->next;\r\n        head->next = lists[head->data];\r\n        lists[head->data] = head;\r\n\r\n        if(tails[head->data] == NULL)\r\n        {\r\n            tails[head->data] = head;\r\n        }\r\n        \r\n        head = next;\r\n    }\r\n\r\n    // Reconnecting\r\n    if(lists[0])\r\n    {\r\n        if(lists[1])\r\n        {\r\n            tails[0]->next = lists[1];\r\n            tails[1]->next = lists[2];\r\n        }\r\n        else\r\n        {\r\n            tails[0]->next = lists[2];\r\n        }\r\n\r\n        return lists[0];\r\n    }\r\n\r\n    // If lists[1] is not an empty node\r\n    if(lists[1])\r\n    {\r\n        tails[1]->next = lists[2];\r\n        return lists[1];\r\n    }\r\n    \r\n    return lists[2];\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1)\r\n\r\n    Where N is number of nodes in the linked list.\r\n*/\r\n\r\npublic class Solution\r\n{\r\n    public static Node sortList(Node head)\r\n    {\r\n        Node []lists = new Node[3];\r\n        Node []tails = new Node[3];\r\n\r\n        // Iterate i from 0 to 2\r\n        for(int i = 0; i < 3 ; i++)\r\n        {\r\n            lists[i] = new Node(0);\r\n            tails[i] = new Node(0);\r\n        }\r\n\r\n        lists[0] = lists[1] = lists[2] = null;\r\n        tails[0] = tails[1] = tails[2] = null;\r\n\r\n        // Iterate while head is not empty node\r\n        while(head != null)\r\n        {\r\n            Node next = head.next;\r\n            head.next = lists[head.data];\r\n            lists[head.data] = head;\r\n\r\n            if(tails[head.data] == null)\r\n            {\r\n                tails[head.data] = head;\r\n            }\r\n\r\n            head = next;\r\n        }\r\n\r\n        // Reconnecting\r\n        if(lists[0] != null)\r\n        {\r\n            if(lists[1] != null)\r\n            {\r\n                tails[0].next = lists[1];\r\n                tails[1].next = lists[2];\r\n            }\r\n            else\r\n            {\r\n                tails[0].next = lists[2];\r\n            }\r\n\r\n            return lists[0];\r\n        }\r\n\r\n        // If lists[1] is not an empty node\r\n        if(lists[1] != null)\r\n        {\r\n            tails[1].next = lists[2];\r\n            return lists[1];\r\n        }\r\n\r\n        return lists[2];\r\n    }\r\n\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N):\r\n    Space Complexity: O(1):\r\n\r\n    Where N is number of nodes in the linked list.\r\n'''\r\n\r\ndef sortList(head):\r\n\r\n    lists = [None] * 3\r\n    tails = [None] * 3\r\n\r\n    # Iterate while head is not empty node\r\n    while(head != None):\r\n\r\n        next = head.next\r\n        head.next = lists[head.data]\r\n        lists[head.data] = head\r\n        \r\n        if(tails[head.data] == None):\r\n            tails[head.data] = head\r\n        \r\n        head = next\r\n    \r\n    # Reconnecting\r\n    if(lists[0]):\r\n    \r\n        if(lists[1]):\r\n            tails[0].next = lists[1]\r\n            tails[1].next = lists[2]\r\n        \r\n        else:\r\n            tails[0].next = lists[2]\r\n        \r\n        return lists[0]\r\n    \r\n    # If lists[1] is not an empty node\r\n    if(lists[1]):\r\n        tails[1].next = lists[2]\r\n        return lists[1]\r\n    \r\n    return lists[2]\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}