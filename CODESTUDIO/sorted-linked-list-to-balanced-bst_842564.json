{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8286,
            "title": "Sorted Linked List to Balanced BST",
            "titleSlug": "sorted-linked-list-to-balanced-bst_842564",
            "content": "<h4 id=\"you-have-been-given-a-singly-linked-list-in-which-nodes-are-present-in-increasing-order-your-task-is-to-construct-a-balanced-binary-search-tree-with-the-same-data-elements-as-the-given-linked-list\">You have been given a singly linked list in which nodes are present in increasing order. Your task is to construct a Balanced Binary Search Tree with the same data elements as the given Linked List.</h4>\n\n<h4 id=\"a-balanced-bst-is-defined-as-a-bst-in-which-the-height-of-two-subtrees-of-every-node-differs-no-more-than-1\">A Balanced BST is defined as a BST in which the height of two subtrees of every node differs no more than 1.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe only line of each test case contains the elements of the singly linked list separated by a single space and terminated by -1. Hence, -1 would never be a list element.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the nodes of the tree in the level order form separated by single spaces (Print -1 for NULL nodes). Refer to the below example for further clarification.\n\nPrint the output for every test case in a separate line.\n</code></pre>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>Consider the Binary Search Tree-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image2-5640.png\" alt=\"alt text\">   </p>\n\n<pre><code>The above BST will be printed as-\n12 10 14 -1 -1 -1 16 -1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 12\n\nLevel 2 :\nLeft child of 12 = 10\nRight child of 12 = 14\n\nLevel 3 :\nLeft child of 10 = null(-1)\nRight child of 10 = null (-1)\nLeft child of 14 = null(-1)\nRight child of 16 = 16\n\nLevel 4 :\nLeft child of 16 = null (-1)\nRight child of 16 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe output for each test case ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 1000\n1 &lt;= Data &lt;= 10^9\nData != -1\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1 2 3 4 5 -1\n5 7 8 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3 2 5 1 -1 4 -1 -1 -1 -1 -1 \n7 5 8 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>Test Case 1: The balanced BST corresponding to the linked list is-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-3-10407.png\" alt=\"alt text\"></p>\n\n<pre><code>Level order traversal of above BST is 3 2 5 1 -1 4 -1 -1 -1 -1 -1 \n\nTest Case 2: The balanced BST corresponding to the linked list is-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-2-10408.png\" alt=\"alt text\"></p>\n\n<pre><code>Level order traversal of above BST is 7 5 8 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n10 12 14 16 -1\n-1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>12 10 14 -1 -1 -1 16 -1 -1\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 22,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a singly linked list `head` where nodes are sorted in increasing order, construct a balanced Binary Search Tree (BST) with the same data elements. A balanced BST is defined as a BST in which the height of the two subtrees of every node differs by no more than 1.",
                "constraints": [
                    "1 <= T <= 100",
                    "0 <= N <= 1000",
                    "1 <= Data <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 5, nums=[1, 2, 3, 4, 5]",
                        "output": "3 2 5 1 -1 4 -1 -1 -1 -1 -1",
                        "explanation": "The balanced BST corresponding to the linked list [1, 2, 3, 4, 5] has root 3, left child 2, right child 5. The left child of 2 is 1, and the right child of 4 is null. Level order traversal gives 3 2 5 1 -1 4 -1 -1 -1 -1 -1"
                    },
                    {
                        "input": "n = 3, nums=[5, 7, 8]",
                        "output": "7 5 8 -1 -1 -1 -1",
                        "explanation": "The balanced BST corresponding to the linked list [5, 7, 8] has root 7, left child 5, right child 8. All children of 5 and 8 are null. Level order traversal is 7 5 8 -1 -1 -1 -1"
                    },
                    {
                        "input": "n = 4, nums=[10, 12, 14, 16]",
                        "output": "12 10 14 -1 -1 -1 16 -1 -1",
                        "explanation": "The balanced BST corresponding to the linked list [10, 12, 14, 16] has root 12, left child 10, right child 14. The right child of 14 is 16. The rest are null. Level order traversal is 12 10 14 -1 -1 -1 16 -1 -1"
                    },
                    {
                        "input": "n = 0, nums=[]",
                        "output": "-1",
                        "explanation": "Empty linked list results in a null BST, which is represented by -1 in level order traversal."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>As the binary tree would be balanced, think about finding the root of the BST, and then compute recursively.</p>",
            "<p>Try to make use of Inorder Traversal of BST.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}