{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9577,
            "title": "Sorted Subsequence of Size 3",
            "titleSlug": "sorted-subsequence-of-size-3_1062669",
            "content": "<h4 id=\"you-are-given-an-array-consisting-of-n-elements-and-you-need-to-find-a-subsequence-consisting-of-three-elements-such-that-the-elements-in-the-subsequence-are-in-strictly-increasing-order\">You are given an array consisting of N elements and you need to find a subsequence consisting of three elements such that the elements, in the subsequence, are in strictly increasing order.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>There may be multiple such subsequences, so return any one of them.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Let the array be [100, 22, 13, 45, 59, 26]. The possible subsequences of size 3, whose elements follow increasing order are {22, 45, 59}, {13, 45, 59}.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The very first line of input contains an integer \u2018T\u2019 denoting the number of test cases. \n\nThe first line of every test case contains an integer \u2018N\u2019 denoting the number of elements present in the array.\n\nThe second line of every test case contains \u2018N\u2019 space-separated integers denoting the elements present in the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print \u201cYes\u201d if such a subsequence exists otherwise, print \u201cNo\u201d.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. \n\nThe function returns any one of the possible subsequences. If no such subsequence exists, return an empty sequence.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve the problem using constant extra space i.e. O(1) space complexity?\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100 \n3 &lt;= N &lt;= 10^4\n-10^5 &lt;= Array[i] &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\n7 8 6 1 -2\n6\n10 0 2 1 2 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>No \nYes\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case, we have an array: [7, 8, 6, 1, 2] for the first test case.\n\nThere exists no subsequence of size 3, whose elements are in increasing order. Hence, we print \u201cNo\u201d.\n\nFor the second test case, we have, array: [10, 0, 2, 1, 2, 4].\n\nThe possible subsequences of size 3, whose elements follow increasing order are {0, 2, 4}, {0, 1, 2}, {0, 1, 4}, {1, 2, 4}. So, print \u201cYes\u201d.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n6\n10 20 30 40 50 60\n4\n10 15 22 31    \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>Yes\nYes\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of N elements, determine if there exists a subsequence of three elements such that the elements are in strictly increasing order. If such a subsequence exists, return \"Yes\". Otherwise, return \"No\".",
                "constraints": [
                    "1 <= T <= 100",
                    "3 <= N <= 10^4",
                    "-10^5 <= Array[i] <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n7 8 6 1 -2",
                        "output": "No",
                        "explanation": "The array is [7, 8, 6, 1, -2]. There is no subsequence of length 3 in strictly increasing order."
                    },
                    {
                        "input": "6\n10 0 2 1 2 4",
                        "output": "Yes",
                        "explanation": "The array is [10, 0, 2, 1, 2, 4]. Possible subsequences are {0, 2, 4}, {0, 1, 2}, {0, 1, 4}, {1, 2, 4}."
                    },
                    {
                        "input": "6\n10 20 30 40 50 60",
                        "output": "Yes",
                        "explanation": "The array is [10, 20, 30, 40, 50, 60]. The subsequence {10, 20, 30} is in increasing order."
                    },
                    {
                        "input": "4\n10 15 22 31",
                        "output": "Yes",
                        "explanation": "The array is [10, 15, 22, 31]. The subsequence {10, 15, 22} is in increasing order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>A brute force approach could be to run three nested loops to find a subsequence which satisfies the given condition.</p>",
            "<p>A simple and intuitive approach could be to find an element such that, there exists one element smaller than itself on the left side of the array and another element greater than itself on the right side of the array.</p>",
            "<p>Instead of running two nested loops, we can precompute the results for larger and smaller elements for every element in the array and store them some temporary array.</p>",
            "<p>First, try to find a pair of elements which will form the first two elements of the required subsequence. Then search for the third element.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}