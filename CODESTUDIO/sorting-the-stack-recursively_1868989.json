{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14048,
            "title": "Sorting the stack recursively",
            "titleSlug": "sorting-the-stack-recursively_1868989",
            "content": "<h4 id=\"ritik-is-stuck-on-a-problem-for-the-past-few-days-he-has-a-stack-s-of-integers-and-his-friend-told-him-to-sort-the-stack-recursively\">Ritik is stuck on a problem for the past few days. He has a stack &#39;S&#39; of integers and his friend told him to sort the stack recursively.</h4>\n\n<h4 id=\"help-ritik-to-solve-his-problem-so-that-he-can-show-it-off-to-his-friend\">Help Ritik to solve his problem so that he can show it off to his friend.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. Looping through the stack is not allowed.\n2. You need to return a stack that is sorted in descending order.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Given stack &#39;S&#39; = 1 3 2 \nThe output will be 3 2 1 since it is the sorted order.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe second line of each test case contains a single integer \u2018N\u2019, denoting the stack size.\n\nThe next line contains \u2018N\u2019 space-separated integers denoting the elements of the stack, the last element of the input being the top of the stack.\n\nIf the input is 1 3 2 then the input stack will look like this :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/autodraw-3_17_2021-8367.png\" alt=\"\"></p>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a single line containing space-separated integers denoting the stack elements in descending sorted order.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;=  N &lt;= 2000\n0 &lt;= S[i] &lt;= 1000\n\nWhere \u2018T\u2019 is the total number of test cases, and &#39;N\u2019 is the size of the stack, and &#39;S[i]&#39; is the element of the stack.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4\n8 5 9 7\n5 \n33 2 5 1 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>9 7 8 5\n33 5 4 2 1\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h5>\n\n<pre><code>For the first test case:\nFor the given stack, the resultant sorted stack would be 5 8 7 9.  \n\nFor the second test case:\nFor the given stack, the resulting sorted stack would be 1 2 4 5 33.   \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4\n1 2 3 4     \n3    \n5 1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4 3 2 1 \n5 2 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ritik needs help to sort a stack of integers recursively in descending order. You are not allowed to use loops. Return the sorted stack. The last element of the input represents the top of the stack.",
                "constraints": [
                    "1 <= T <= 5 (where T is the number of test cases)",
                    "1 <= N <= 2000 (where N is the size of the stack)",
                    "0 <= S[i] <= 1000 (where S[i] is the element of the stack)",
                    "Looping through the stack is not allowed.",
                    "Time limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "4\n8 5 9 7",
                        "output": "9 8 7 5",
                        "explanation": "The input stack is [8, 5, 9, 7] with 7 being the top. The sorted stack in descending order is [9, 8, 7, 5]."
                    },
                    {
                        "input": "5\n33 2 5 1 4",
                        "output": "33 5 4 2 1",
                        "explanation": "The input stack is [33, 2, 5, 1, 4] with 4 being the top. The sorted stack in descending order is [33, 5, 4, 2, 1]."
                    },
                    {
                        "input": "4\n1 2 3 4",
                        "output": "4 3 2 1",
                        "explanation": "The input stack is [1, 2, 3, 4] with 4 being the top. The sorted stack in descending order is [4, 3, 2, 1]."
                    },
                    {
                        "input": "3\n5 1 2",
                        "output": "5 2 1",
                        "explanation": "The input stack is [5, 1, 2] with 2 being the top. The sorted stack in descending order is [5, 2, 1]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use recursion?&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}