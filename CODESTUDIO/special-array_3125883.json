{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16320,
            "title": "Special Array",
            "titleSlug": "special-array_3125883",
            "content": "<h4 id=\"your-task-is-to-design-a-special-type-of-array-that-will-store-integers-duplicate-values-possible-you-have-to-define-a-class-having-the-following-functions\">Your task is to design a special type of array that will store integers(duplicate values possible). You have to define a class having the following  functions:</h4>\n\n<pre><code>\u2018SPECIAL_ARRAY\u2019() is a function that initializes your array.\n\u2018INSERT\u2019( \u2018VAL\u2019 ) inserts the \u2018VAL\u2019 into the array and returns a boolean value. If \u2018VAL\u2019 is not present in the array before insertion, return \u2018TRUE\u2019, else return \u2018FALSE\u2019.\n\u2018REMOVE\u2019(\u2018VAL\u2019) removes the \u2018VAL \u2019from the array if present. This function would return a boolean value \u2018TRUE\u2019 if \u2018VAL\u2019 was present in the array before the deletion, else returns \u2018FALSE\u2019. If multiple occurrences of \u2018VAL\u2019 are present in the array, delete only one occurrence.\n\u2018GET_RANDOM\u2019( ) returns any random value of the array.\n</code></pre>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>If the functions calls are as follows:\n\u2018INSERT\u2019(10).\n\u2018INSERT\u2019(20)\u2019.\n\u2018INSERT\u2019(20)\n\u2018REMOVE\u2019(20).\n\u2018GET_RANDOM()\u2019\nSo, the answers for the calls are [\u2018TRUE\u2019, \u2019TRUE\u2019, \u2019FALSE\u2019, \u2019TRUE\u2019,10]. Another valid output of the \n\u2018GET_RANDOM()\u2019 function call is 20.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer, &#39;N\u2019, denoting the number of function calls.\n\nThe second line contains a list of \u2018N\u2019 function names.\nThe third line of each test case contains \u2018N\u2019 integers denoting the parameters passed in each function call. (Parameter value corresponding to  any \u2018GET_FUNCTION\u2019() function is -1.)\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, output the values returned by function calls as \u2018TRUE\u2019, \u2019FALSE\u2019 or the returned number.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10000.\n0 &lt;= \u2018VAL\u2019 &lt;= 10^6 .  \n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\ninsert insert insert remove getRandom\n10 20 20 20 -1\n4\ninsert remove remove getRandom \n10 20 20 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>true true false true 20\ntrue false false 10\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case,\nInitially, the array is empty.[]\ninsert(10), the array will be become [10], and the function will return \u2018TRUE\u2019 as 10 was not initially present in the array.\ninsert(20), the array will be become [20, 10], and the function will return \u2018TRUE\u2019 as 20 was not initially present in the array.\ninsert(20), the array will be become [20, 20, 10], and the function will return \u2018FALSE\u2019 as 20 was initially present in the array.\nremove(20), the array will become [20,10], and the function will return \u2018TRUE\u2019 as 20 was present in the array before the deletion.\ngetRandom(), returns a random value among the values present in the array.\n\nSo,the answers are [true,true,false,true,20 ].\n\nFor the second test case:\nInitially, the array is empty.[]\ninsert(10), the array will be become [10], and the function will return \u2018TRUE\u2019 as 10 was not initially present in the array.\nremove(20), the array will become [10] and the function will return \u2018FALSE\u2019 as 20 was present in the array before the deletion.\nremove(20), the array will become [10] and the function will return \u2018FALSE\u2019 as 20 was present in the array before the deletion.\ngetRandom(), returns a random value among the values present in the array.\n\nSo,the answers are [true,false,false,10].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n6\ninsert getRandom insert remove getRandom insert \n7 -1 4 10 -1 8\n5\nremove remove insert insert getRandom \n9 1 4 9 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>true 7 true false 4 true \nfalse false true true 9 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a class named `specialQueue` to implement a special type of array for storing integers, allowing duplicate values. The class should support the following operations:\n\n*   `specialQueue()`: Initializes the array.\n*   `insert(int val)`: Inserts `val` into the array. Returns `true` if `val` was not present before insertion, and `false` otherwise.\n*   `remove(int val)`: Removes one occurrence of `val` from the array, if present. Returns `true` if `val` was present before removal, and `false` otherwise.\n*   `getRandom()`: Returns a random value from the array.  If the array is empty, return -1.\n",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10000",
                    "0 <= VAL <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "n = 5, operations = ['insert', 'insert', 'insert', 'remove', 'getRandom'], values = [10, 20, 20, 20, -1]",
                        "output": "true, true, false, true, 10 (or 20)",
                        "explanation": "Initially, the array is empty [].\ninsert(10) makes the array [10]. Returns true.\ninsert(20) makes the array [10, 20]. Returns true.\ninsert(20) makes the array [10, 20, 20]. Returns false.\nremove(20) makes the array [10, 20]. Returns true.\ngetRandom() can return 10 or 20."
                    },
                    {
                        "input": "n = 4, operations = ['insert', 'remove', 'remove', 'getRandom'], values = [10, 20, 20, -1]",
                        "output": "true, false, false, 10",
                        "explanation": "Initially, the array is empty [].\ninsert(10) makes the array [10]. Returns true.\nremove(20) doesn't find 20. Returns false.\nremove(20) still doesn't find 20. Returns false.\ngetRandom() returns 10."
                    },
                    {
                        "input": "n = 6, operations = ['insert', 'getRandom', 'insert', 'remove', 'getRandom', 'insert'], values = [7, -1, 4, 10, -1, 8]",
                        "output": "true, 7, true, false, 7 (or 4), true",
                        "explanation": "Initially, the array is empty [].\ninsert(7) makes the array [7]. Returns true.\ngetRandom() returns 7.\ninsert(4) makes the array [7, 4]. Returns true.\nremove(10) doesn't find 10. Returns false.\ngetRandom() returns 7 or 4.\ninsert(8) makes array [7,4,8], Returns true."
                    },
                    {
                        "input": "n = 5, operations = ['remove', 'remove', 'insert', 'insert', 'getRandom'], values = [9, 1, 4, 9, -1]",
                        "output": "false, false, true, true, 4 (or 9)",
                        "explanation": "Initially, the array is empty [].\nremove(9) doesn't find 9. Returns false.\nremove(1) doesn't find 1. Returns false.\ninsert(4) makes the array [4]. Returns true.\ninsert(9) makes the array [4, 9]. Returns true.\ngetRandom() returns 4 or 9."
                    },
                    {
                        "input": "n=3, operations=['insert', 'insert', 'remove'], values=[5,5,5]",
                        "output": "true, false, true",
                        "explanation": "Initially, the array is empty [].\ninsert(5) makes the array [5]. Returns true.\ninsert(5) makes the array [5,5]. Returns false.\nremove(5) makes array [5]. Returns true"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to implement the special array using a simple array.</p>",
            "<p>Try to store the indices of each value efficiently.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}