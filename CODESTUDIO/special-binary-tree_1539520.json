{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13070,
            "title": "Special Binary Tree",
            "titleSlug": "special-binary-tree_1539520",
            "content": "<h4 id=\"you-are-given-an-arbitrary-binary-tree-a-binary-tree-is-called-special-if-every-node-of-this-tree-has-either-zero-or-two-children-you-have-to-determine-if-the-given-binary-tree-is-special-or-not\">You are given an arbitrary binary tree. A binary tree is called special if every node of this tree has either zero or two children. You have to determine if the given binary tree is special or not.</h4>\n\n<h4 id=\"if-the-given-binary-tree-is-special-return-true-else-return-false-to-the-given-function\">If the given binary tree is special, return True. Else, return False to the given function.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. A binary tree is a tree in which each node can have at most two children. \n2. The given tree will be non-empty i.e the number of non-NULL nodes will always be greater than or equal to 1.\n3. Multiple nodes in the tree can have the same values, all values in the tree will be positive.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer \u2018T\u2019, denoting the number of test cases. \n\nThe first line of every test case will contain the values of the nodes of the binary tree in the level order form ( -1 for NULL node).  Refer to the example below for further explanation.\n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>Consider the binary tree:\n</code></pre>\n\n<p><img src=https://files.codingninjas.in/screenshot-from-2020-11-03-14-34-55-5635-9898.png /></p>\n\n<pre><code>The input for the tree depicted in the above image would be :\n\n3\n5 1\n6 2 0 8\n-1 -1 7 4 -1 -1 -1 -1\n-1 -1 -1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 3\n\nLevel 2 :\nLeft child of 3 = 5\nRight child of 3 = 1\n\nLevel 3 :\nLeft child of 5 = 6\nRight child of 5 = 2\nLeft child of 1 = 0\nRight child of 1 = 8\n\nLevel 4 :\nLeft child of 6 = null (-1)\nRight child of 6 = null(-1)\nLeft child of 2 = 7\nRight child of 2 = 4\nLeft child of 0 = null (-1)\nRight child of 0 = null (-1)\nLeft child of 8 = null (-1)\nRight child of 8 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\nLeft child of 4 = null (-1)\nRight child of 4 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code> For each test case, print a single line containing \u201ctrue\u201d or \u201cfalse\u201d.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5    \n1 &lt;= N &lt;= 10 ^ 3\n0 &lt;= DATA &lt;= 10 ^ 9\n\nWhere \u2018DATA\u2019 denotes the value of each node in the given tree.\n\u2018N\u2019 denotes the number of nodes in BinaryTree.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 5 1 6 2 0 8 -1 -1 7 4 -1 -1 -1 -1 -1 -1 -1 -1\n1 2 3 4 5 -1 -1 6 -1 -1 -1 -1 -1    \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<p><img src=https://files.codingninjas.in/screenshot-from-2020-11-03-14-34-55-5635-9898.png /></p>\n\n<pre><code>Test Case1: \n\nThe tree given in Test Case 1, is shown in the image above. Note that nodes with the values 6, 7, 4, 0, 8, are leaf nodes and have no children, other nodes in the tree have two children each. So the given binary tree is special.\n</code></pre>\n\n<p><img src=https://files.codingninjas.in/screenshot-from-2020-11-03-15-04-33-5636-9899.png /></p>\n\n<pre><code>Test Case 2:\n\nThe tree given in Test Case 2, is shown in the image above. Note that node with the value 4, has only one child, thus the given binary tree is not special.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 2 3 8 1 -1 -1 7 9 -1 -1 5 6 -1 -1 -1 -1 -1 -1\n1 5 7 -1 -1 6 3 9 8 -1 -1 -1 -1 13 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree represented by its root node, determine if it is a special binary tree. A special binary tree is defined as a tree where every node has either zero or two children. Return `true` if the given binary tree is special, and `false` otherwise.",
                "constraints": [
                    "1 <= N <= 10^3, where 'N' is the number of nodes in the binary tree.",
                    "0 <= DATA <= 10^9, where 'DATA' denotes the value of each node in the given tree.",
                    "The given tree will be non-empty i.e. the number of non-NULL nodes will always be greater than or equal to 1."
                ],
                "testcases": [
                    {
                        "input": "root=[3, 5, 1, 6, 2, 0, 8, -1, -1, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "True",
                        "explanation": "The tree represented by the input is a special binary tree because each node has either 0 or 2 children."
                    },
                    {
                        "input": "root=[1, 2, 3, 4, 5, -1, -1, 6, -1, -1, -1, -1, -1]",
                        "output": "False",
                        "explanation": "The tree represented by the input is not a special binary tree because the node with value 4 has only one child."
                    },
                    {
                        "input": "root=[5, 2, 3, 8, 1, -1, -1, 7, 9, -1, -1, 5, 6, -1, -1, -1, -1, -1, -1]",
                        "output": "True",
                        "explanation": "All internal nodes have 2 children, the tree is special."
                    },
                    {
                        "input": "root=[1, 5, 7, -1, -1, 6, 3, 9, 8, -1, -1, -1, -1, 13, -1, -1, -1]",
                        "output": "False",
                        "explanation": "The node 6 has only one child, the tree is not special."
                    },
                    {
                        "input": "root=[1]",
                        "output": "True",
                        "explanation": "A single node is considered a special binary tree."
                    },
                    {
                        "input": "root=[1,2,3]",
                        "output": "True",
                        "explanation": "The root node has 2 children. The leaves have 0 children. Tree is special."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of a recursive solution.</p>",
            "<p>Try thinking of Breadth-First-Search Algorithm.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}