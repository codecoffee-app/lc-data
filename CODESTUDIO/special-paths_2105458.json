{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14300,
            "title": "Special Paths",
            "titleSlug": "special-paths_2105458",
            "content": "<h4 id=\"ninjaland-is-a-country-consisting-of-n-states-and-m-paths-there-are-two-types-of-paths-that-connect-any-two-states-one-is-the-normal-path-and-the-other-is-a-special-path-both-paths-have-their-respective-lengths-you-can-use-either-of-the-paths-to-travel-between-two-states-your-task-is-to-determine-the-shortest-distance-between-the-two-given-states-such-that-at-most-one-possibly-zero-special-path-is-included-in-this-path\">Ninjaland is a country consisting of \u2018N\u2019 states and \u2018M\u2019 paths. There are two types of paths that connect any two states. One is the normal path, and the other is a special path. Both paths have their respective lengths. You can use either of the paths to travel between two states. Your task is to determine the shortest distance between the two given states such that at most, one(possibly zero) special path is included in this path.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. All the paths are directed.\n\n2. Multiple paths can be present between two states.\n\n3. All the states are connected with each other.\n\n4. It does not have any self-loop.\n\n5. At least one path always exists between the two given states.\n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>If \u2018N\u2019 = 3, \u2018M\u2019 = 2, and given values of paths are \n[ [1, 2, 2, 3],\n  [2, 3, 4, 2] ]\nYou have to calculate the shortest distance between \u2018X\u2019 = 1 and \u2018Y\u2019 = 3\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000486_1627798774_untitled-diagram-3-1-8847.png\" alt=\"diagram\"> </p>\n\n<pre><code>In the diagram, we can observe no direct edge from state 1 to state, 3 but we can go from state 1 to state 2 using the normal path of length 2 and then from state 2 to state 3 using the special path of length 2. So the total length will be 4, and we can clearly see that no other path can be smaller than this. Hence, the answer is 4.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019, which denotes the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019 and \u2018M\u2019, denoting the number of states and the number of paths, respectively.\n\nThe next \u2018M\u2019 lines contain four space-separated integers, \u2018A\u2019, \u2018B\u2019, \u2018W1\u2019, \u2018W2\u2019, denoting a normal path from \u2018A\u2019 to \u2018B\u2019 having a length \u2018W1\u2019 and a special path having a length \u2018W2\u2019.\n\nThe last line of each test case contains two space-separated integers, \u2018X\u2019 and \u2018Y\u2019, denoting the states between which the shortest distance has to be calculated.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an integer denoting the shortest path length between the two given states. \n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt; 10^3\nN-1 &lt;= M &lt;= 10^3\n1 &lt;= A,B,X,Y &lt;= N\n1 &lt;= W1,W2 &lt;= 10^6\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 1\n1 2 2 1\n1 2\n3 3\n1 2 4 3\n2 3 5 2\n1 3 2 4\n1 3  \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n2\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For test case 1:\nA direct path exists from state 1 to state 2. The length will be 2 when we traverse from state 1 to state 2 using the normal path, but when we traverse using the special path, the length will be 1, which is less. Hence our answer is 1.\n\nFor test case 2:\nA direct path exists from state 1 to state 3. The length will be 2 when we traverse from state 1 to state 3 using the normal path, but when we traverse using the special path, the length will be 4, which is more. Hence our answer is 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n3 3\n1 2 3 2\n2 3 4 2\n1 3 7 8\n1 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a country with 'N' states and 'M' directed paths between them, where each path has a normal length and a special length, find the shortest distance between a source state 'X' and a destination state 'Y'. You can use at most one special path in your route. If no path exists between the two states, return -1.",
                "constraints": [
                    "1 <= N <= 10^3",
                    "N-1 <= M <= 10^3",
                    "1 <= A, B, X, Y <= N",
                    "1 <= W1, W2 <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "n = 2, edges = [[1, 2, 2, 1]], src = 1, dst = 2",
                        "output": "1",
                        "explanation": "A direct path exists from state 1 to state 2. The length will be 2 when we traverse from state 1 to state 2 using the normal path, but when we traverse using the special path, the length will be 1, which is less. Hence our answer is 1."
                    },
                    {
                        "input": "n = 3, edges = [[1, 2, 4, 3], [2, 3, 5, 2], [1, 3, 2, 4]], src = 1, dst = 3",
                        "output": "2",
                        "explanation": "A direct path exists from state 1 to state 3. The length will be 2 when we traverse from state 1 to state 3 using the normal path, but when we traverse using the special path, the length will be 4, which is more. Hence our answer is 2."
                    },
                    {
                        "input": "n = 3, edges = [[1, 2, 3, 2], [2, 3, 4, 2], [1, 3, 7, 8]], src = 1, dst = 3",
                        "output": "5",
                        "explanation": "The shortest path is 1 -> 2 -> 3.  Using the normal path from 1 to 2 (length 3) and the special path from 2 to 3 (length 2), the total length is 5. The direct path from 1 to 3 is longer (length 7 using the normal path and 8 using the special path). 1->2->3 using normal paths is 3+4=7. 1->3 using normal path is 7. 1->2 (normal)+2->3(special) is 3+2=5. 1->2 (special) + 2->3 (normal) = 2+4=6.  So the shortest is 5."
                    },
                    {
                        "input": "n = 4, edges = [[1, 2, 1, 5], [2, 3, 2, 6], [3, 4, 3, 7], [1, 4, 10, 11]], src = 1, dst = 4",
                        "output": "6",
                        "explanation": "The shortest path is 1->2->3->4. Using normal paths: 1+2+3 = 6.  Using 1->4: normal:10 special:11. Using 1 special edge: 1->2 special 5 + 2+3 = 10. 1+ 2->3 special 6 + 3 = 10. 1+2+ 3->4 special = 1+2+7 = 10"
                    },
                    {
                        "input": "n = 3, edges = [[1, 2, 1, 2], [2, 3, 3, 4], [1, 3, 5, 6]], src = 1, dst = 3",
                        "output": "4",
                        "explanation": "1->2->3 using special path 1->2 gives 2+3 = 5, using special path 2->3 gives 1+4 = 5, using no special path 1+3 = 4"
                    },
                    {
                        "input": "n = 4, edges = [[1, 2, 10, 5], [2, 3, 20, 15], [3, 4, 30, 25], [1, 4, 70, 60]], src = 1, dst = 4",
                        "output": "60",
                        "explanation": "Compare direct path 1->4 (60) to 1->2->3->4.  Direct is best."
                    },
                    {
                        "input": "n=5, edges=[[1,2,5,6],[2,3,4,5],[3,4,2,3],[4,5,1,2],[1,5,12,13]], src=1, dst=5",
                        "output": "12",
                        "explanation": "The path 1 -> 5 using normal path is 12, 1->2->3->4->5 is 5+4+2+1 = 12. "
                    },
                    {
                        "input": "n=2, edges=[[1,2,10,5]], src=1, dst=2",
                        "output": "5",
                        "explanation": "Using the special path results in the shortest path 1->2"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}