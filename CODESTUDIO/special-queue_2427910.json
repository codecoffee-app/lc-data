{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15249,
            "title": "Special Queue",
            "titleSlug": "special-queue_2427910",
            "content": "<h4 id=\"your-task-is-to-design-a-special-type-of-queue-having-three-positions-front-middle-and-back-to-push-or-pop-the-element-you-have-to-define-a-class-having-the-following-functions\">Your task is to design a special type of Queue having three positions front, middle, and back to push or pop the element. You have to define a class having the following  functions:</h4>\n\n<pre><code>1. SPECIAL_QUEUE() is a function that initializes your queue.\n\n2. PUSH_FRONT(VAL) inserts the VAL in the front of the queue.\n\n3. PUSH_BACK(VAL) inserts the VAL at the back of the queue.\n\n4. PUSH_MIDDLE(VAL) inserts the VAL at the middle position of the queue.\n\n5. POP_FRONT(VAL) removes the first element from the queue and returns the value of the removed element.\n\n6. POP_BACK(VAL) removes the last element from the queue and returns the value of the removed element.\n\n7. POP_MIDDLE(VAL) removes the middle element from the queue and returns the value of the removed element.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>If the queue is empty and any type of \u2018POP\u2019 function is called, return -1.\nIf there are two middle positions available, operate on the position close to the front of the queue. \n</code></pre>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>If the functions calls are as follows:\n\u2018PUSH_FRONT\u2019(10).\n\u2018PUSH_FRONT\u2019(20)\u2019.\n\u2018PUSH_MIDDLE\u2019(30)\n\u2018POP_BACK\u2019().\n So after each operation queue will changes like [ ] -&gt; [10] -&gt; [20, 10] -&gt; [20, 30, 10] -&gt;[20,30].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer, &#39;N\u2019, denoting the number of function calls.\n\nThe second line contains a list of \u2018N\u2019 function names.\n\nThe third line of each test case contains \u2018N\u2019 integers denoting the parameters passed in each function call. (Parameter value corresponding to  any pop() function is -1.)\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, output the value of the popped element for each pop() function call in a separate line.\nFor push() function ,do not print anything.  \n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10000.\n0 &lt;= \u2018VAL\u2019 &lt;= 10^6 .  \n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\npushFront pushFront pushMiddle popBack\n10 20 30 -1\n4\npushMiddle pushMiddle popFront popFront \n10 100 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>10\n100\n10 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case,\nInitially, the queue is empty.[]\npushFront(10) ,the queue will be become [10].\npushFront(20) ,the queue will be become [20, 10].\npushMiddle(30) ,the queue will be become [20, 30, 10].\npopFront() ,the queue will be become [20,30].10 will be popped out and will be printed.\n\nHence, 10 will be printed.\n\nFor the second test case:\nInitially, the queue is empty.[]\npushMiddle(10) ,the queue will be become [10].\npushMiddle(100) ,the queue will be become [100, 10].\npopFront(), the queue will be become [10].100 will be popped out and will be printed.\npopFront(), the queue will be become [ ].10 will be popped out and will be printed.\n\n\nHence, 100 and 10 will be printed.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n6\npushBack pushBack pushBack popMiddle popMiddle popMiddle\n10 20 30 -1 -1 -1\n3\npopBack pushMiddle popFront\n-1 100 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>20\n10\n30\n-1\n100\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a special queue data structure that supports pushing and popping elements from the front, back, and middle. Implement a class with the following methods:\n\n*   `init()`: Initializes the queue.\n*   `pushFront(val)`: Inserts `val` at the front of the queue.\n*   `pushBack(val)`: Inserts `val` at the back of the queue.\n*   `pushMiddle(val)`: Inserts `val` at the middle position of the queue. If the queue has an even number of elements, insert at the position closest to the front.\n*   `popFront()`: Removes and returns the element at the front of the queue. Returns -1 if the queue is empty.\n*   `popBack()`: Removes and returns the element at the back of the queue. Returns -1 if the queue is empty.\n*   `popMiddle()`: Removes and returns the element at the middle position of the queue. If the queue has an even number of elements, remove the element closest to the front. Returns -1 if the queue is empty.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10000",
                    "0 <= VAL <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "n = 4, operations = ['pushFront', 'pushFront', 'pushMiddle', 'popBack'], values = [10, 20, 30, -1]",
                        "output": "10",
                        "explanation": "Initially, the queue is empty [].\npushFront(10) -> [10]\npushFront(20) -> [20, 10]\npushMiddle(30) -> [20, 30, 10]\npopBack() -> removes 10, returns 10, queue becomes [20, 30]"
                    },
                    {
                        "input": "n = 4, operations = ['pushMiddle', 'pushMiddle', 'popFront', 'popFront'], values = [10, 100, -1, -1]",
                        "output": "100\n10",
                        "explanation": "Initially, the queue is empty [].\npushMiddle(10) -> [10]\npushMiddle(100) -> [100, 10]\npopFront() -> removes 100, returns 100, queue becomes [10]\npopFront() -> removes 10, returns 10, queue becomes []"
                    },
                    {
                        "input": "n = 6, operations = ['pushBack', 'pushBack', 'pushBack', 'popMiddle', 'popMiddle', 'popMiddle'], values = [10, 20, 30, -1, -1, -1]",
                        "output": "20\n10\n30",
                        "explanation": "Initially, the queue is empty [].\npushBack(10) -> [10]\npushBack(20) -> [10, 20]\npushBack(30) -> [10, 20, 30]\npopMiddle() -> removes 20, returns 20, queue becomes [10, 30]\npopMiddle() -> removes 10, returns 10, queue becomes [30]\npopMiddle() -> removes 30, returns 30, queue becomes []"
                    },
                    {
                        "input": "n = 3, operations = ['popBack', 'pushMiddle', 'popFront'], values = [-1, 100, -1]",
                        "output": "-1\n100",
                        "explanation": "Initially, the queue is empty [].\npopBack() -> returns -1, queue remains []\npushMiddle(100) -> [100]\npopFront() -> removes 100, returns 100, queue becomes []"
                    },
                    {
                        "input": "n = 5, operations = ['pushFront', 'pushBack', 'pushMiddle', 'popMiddle', 'popMiddle'], values = [1, 2, 3, -1, -1]",
                        "output": "3\n1",
                        "explanation": "Initially, the queue is empty [].\npushFront(1) -> [1]\npushBack(2) -> [1, 2]\npushMiddle(3) -> [1, 3, 2]\npopMiddle() -> removes 3, returns 3, queue becomes [1, 2]\npopMiddle() -> removes 1, returns 1, queue becomes [2]"
                    },
                    {
                        "input": "n = 4, operations = ['pushFront', 'pushFront', 'pushFront', 'popMiddle'], values = [1, 2, 3, -1]",
                        "output": "2",
                        "explanation": "Initially, the queue is empty [].\npushFront(1) -> [1]\npushFront(2) -> [2, 1]\npushFront(3) -> [3, 2, 1]\npopMiddle() -> removes 2, returns 2, queue becomes [3, 1]"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to implement the special queue using a dynamic array.</p>",
            "<p>ry to implement two queues, one for each half.</p>",
            "<p>Try to implement this using a linked list.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}