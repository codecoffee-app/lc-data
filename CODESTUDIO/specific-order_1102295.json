{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9917,
            "title": "Specific Order",
            "titleSlug": "specific-order_1102295",
            "content": "<h4 id=\"you-are-provided-with-the-two-strings-named-x-and-y-respectively-y-has-its-own-specific-order-and-has-no-repeating-characters-your-task-is-to-arrange-the-characters-of-the-first-string-i-e-x-in-such-a-way-that-the-order-of-characters-in-x-is-exactly-the-same-as-in-y-which-means-if-d-occurs-after-c-in-y-then-it-should-also-occur-after-c-in-x-obviously-if-x-has-d-and-c-as-characters-in-it-all-you-have-to-do-is-convert-string-x-in-the-specific-order-with-respect-to-string-y\">You are provided with the two strings named X and Y respectively. Y has its own specific order and has no repeating characters. Your task is to arrange the characters of the first string i.e. X in such a way that the order of characters in X is exactly the same as in Y, which means if \u2018d\u2019 occurs after \u2018c\u2019 in Y then it should also occur after \u2018c\u2019 in X ( obviously if X has \u2018d\u2019 and \u2018c\u2019 as characters in it ). All you have to do is, convert string X in the specific order with respect to string Y.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>Both the strings have only lowercase English alphabets. \nThere may be more than one correct solution, you have to return any one of the possible solutions.\n</code></pre>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThen the T test cases follow.\n\nThe first line of each test case contains the string X.\nThe second line of each test case contains the string Y.\n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>For each test case, print the string X after converting string X in the specific order with respect to string Y.\n\nThe output of each test case is printed in a separate line. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= |X| &lt;= 10000\n1 &lt;= |Y| &lt;= 26\nwhere \u2018T\u2019 is the number of test cases, |X| is the length of the first string and |Y| is the length of the second string.\nTime Limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>1\nacabd\nabc\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>aabcd\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h4>\n\n<pre><code>String Y has \u2018a\u2019 first then \u2018b\u2019 and then \u2018c\u2019 and therefore string X must be ordered as \u2018aabcd\u2019 to keep the respective order of characters same as in string Y.\nOther possible answers are: \u2018daabc\u2019 , \u2018adabc\u2019 , \u2018aadbc\u2019, \u2018aabdc\u2019.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>4\ndfhfgk\nh\naabbb\ngd\nabababab\nab\ncag\nabcdef\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>hdffgk\naabbb\naaaabbbb\nacg\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, X and Y, where Y has a specific order of unique lowercase English alphabet characters. Re-arrange the characters of X such that the order of characters in X matches the order in Y. For example, if 'd' appears after 'c' in Y, then 'd' must also appear after 'c' in the re-arranged X (assuming X contains both 'c' and 'd'). Return any one possible arrangement of X.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |X| <= 10000",
                    "1 <= |Y| <= 26",
                    "Both strings contain only lowercase English alphabets.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "acabd\nabc",
                        "output": "aabcd",
                        "explanation": "Y defines the order as 'a' then 'b' then 'c'. X must be re-arranged to maintain this order, resulting in a string where all 'a's come before all 'b's, and all 'b's come before all 'c's.  'd' is placed arbitrarily. Valid outputs include 'aabcd', 'daabc', 'adabc', 'aadbc', 'aabdc'."
                    },
                    {
                        "input": "dfhfgk\nh",
                        "output": "hdffgk",
                        "explanation": null
                    },
                    {
                        "input": "aabbb\ngd",
                        "output": "aabbb",
                        "explanation": null
                    },
                    {
                        "input": "abababab\nab",
                        "output": "aaaabbbb",
                        "explanation": null
                    },
                    {
                        "input": "cag\nabcdef",
                        "output": "acg",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Follow the order of characters in Y.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}