{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11016,
            "title": "Spell Checker",
            "titleSlug": "spell-checker_1376427",
            "content": "<h4 id=\"you-are-given-a-list-of-strings-dictionary-that-represents-the-correct-spelling-of-words-and-a-query-string-query-that-may-have-incorrect-spelling-you-have-to-check-whether-the-spelling-of-the-string-query-is-correct-or-not-if-not-then-return-the-list-of-suggestions-from-the-list-dictionary-otherwise-return-an-empty-list-which-will-be-internally-interpreted-as-the-correct-string\">You are given a list of strings, \u2018DICTIONARY[]\u2019 that represents the correct spelling of words and a query string \u2018QUERY\u2019 that may have incorrect spelling. You have to check whether the spelling of the string \u2018QUERY\u2019 is correct or not. If not, then return the list of suggestions from the list \u2018DICTIONARY\u2019. Otherwise, return an empty list which will be internally interpreted as the correct string.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1) The suggested correct strings for the string  \u2018QUERY\u2019 will be all those strings present in the \u2018DICTIONARY[]\u2019 that have the prefix same as the longest prefix of string \u2018QUERY\u2019.\n\n2) The \u2018DICTIONARY[]\u2019 contains only distinct strings.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Given &#39;DICTIONARY[]&#39; = {\u201cninja\u201d, \u201cninjas\u201d, \u201cnineteen\u201d, \u201cninny\u201d} and query = \u201cninjk\u201d. Since \u201cninjk\u201d is not present in the \u2018DICTIONARY[]\u2019, it is an incorrect string. The suggested current spellings for \u201cninjk\u201d are \u201cninja\u201d and \u201cninjas\u201d. It is because \u201cninj\u201d is the longest prefix of \u201cninjk\u201d which is present as the prefix in \u2018DICTIONARY\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 representing the number of strings in the list, \u2018DICTIONARY[].\u2019\n\nThe second line of each test case contains \u2018N\u2019 space separated strings present in the list, \u2018DICTIONARY[]\u2019.\n\nThe last line of each test case contains the \u2018QUERY\u2019 string.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return a list of strings containing all suggested correct spellings from the list, \u2018DICTIONARY[]\u2019, if the spelling of the \u2018query\u2019 string is incorrect. Otherwise, return an empty list that will be internally interpreted as the correct string and will print \u201cCORRECT\u201d.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 100\n1 &lt;= |DICTIONARY[i]| &lt;= 100\n1 &lt;= |QUERY| &lt;= 100\n\u2018DICTIONARY[i]\u2019 and \u2018QUERY\u2019 contains only lowercase english letters.\n\nWhere \u2018|DICTIONARY[i]|\u2019 is the length of the string in the list \u2018DICTIONARY&#39; and \u2018|QUERY|\u2019 is the length of the \u2018QUERY\u2019 string.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\nclass coder coding college ninjas\nspell\n4\ncode with coding ninjas\nninjas\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>class coder coding college ninjas \nCORRECT\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h5>\n\n<pre><code>In test case 1, Given &#39;DICTIONARY[]&#39; = {&quot;class&quot;, &quot;coder&quot;, &quot;coding&quot;, &quot;college&quot;, &quot;ninjas&quot;} and &#39;QUERY&#39; = \u201cspell\u201d. \u2018QUERY\u2019 string is incorrect as it is not present in the \u2018DICTIONARY[]\u2019. The longest prefix which is also present as the prefix in \u2018DICTIONARY\u2019 is \u201c\u201d, i.e., empty string.\n\nSo, all the strings of \u2018DICTIONARY\u2019 will be considered as the correct suggested spellings. \n\nTherefore, the output is &quot;class&quot;, &quot;coder&quot;, &quot;coding&quot;, &quot;college&quot; and &quot;ninjas&quot;.\n\nIn test case 2, Given &#39;DICTIONARY[]&#39; = {\u201ccode\u201d, \u201cwith\u201d, \u201ccoding\u201d, \u201cninjas\u201d} and &#39;QUERY&#39; = \u201cninjas\u201d. Since the \u2018QUERY\u2019 string is present in the dictionary, its spelling is correct. Thus, at the output, \u2018CORRECT\u2019 is printed.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n6\nabcde abfd abcxyp mnbs aaaa pkl\nabc\n5\nabc def ghi jkl mnop\npqr\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>abcde abcxyp\nabc def ghi jkl mnop\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h5>\n\n<pre><code>In test case 1, Given &#39;DICTIONARY[]&#39; = {&quot;abcde &quot;, &quot;abfd&quot;, &quot;abcxyp&quot;, &quot;mnbs&quot;, &quot;aaaa&quot;, &quot;pkl&quot;} and &#39;QUERY&#39; = \u201cabc\u201d. \u2018QUERY\u2019 string is matched with &quot;abcde&quot; and &quot;abcxyp&quot; present in the \u2018DICTIONARY[]\u2019. \n\nSo, &quot;abcde&quot; and &quot;abcxyp&quot; strings of \u2018DICTIONARY\u2019 will be considered as the correct suggested spellings. \n\nTherefore, the output is  &quot;abcde&quot; and &quot;abcxyp&quot;.\n\nIn test case 2, Given &#39;DICTIONARY[]&#39; = {&quot;abc&quot;, &quot;def&quot;, &quot;ghi&quot;, &quot;jkl&quot;, &quot;mnop&quot;} and &#39;QUERY&#39; = \u201cpqr\u201d. \u2018QUERY\u2019 string is incorrect as it is not present in the \u2018DICTIONARY[]\u2019. The longest prefix which is also present as the prefix in \u2018DICTIONARY\u2019 is \u201c\u201d, i.e., empty string.\n\nSo, all the strings of \u2018DICTIONARY\u2019 will be considered as the correct suggested spellings. \n\nTherefore, the output is &quot;abc&quot;, &quot;def&quot;, &quot;ghi&quot;, &quot;jkl&quot;, &quot;mnop&quot;.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a dictionary of correctly spelled words and a query string, determine if the query is spelled correctly. If not, return a list of suggested correct spellings from the dictionary based on the longest common prefix. If the query is correctly spelled, return an empty list.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 100",
                    "1 <= |DICTIONARY[i]| <= 100",
                    "1 <= |QUERY| <= 100",
                    "DICTIONARY[i] and QUERY contains only lowercase english letters."
                ],
                "testcases": [
                    {
                        "input": "n = 5, dictionary = [\"class\", \"coder\", \"coding\", \"college\", \"ninjas\"], query = \"spell\"",
                        "output": "[\"class\", \"coder\", \"coding\", \"college\", \"ninjas\"]",
                        "explanation": "The query \"spell\" is not in the dictionary. The longest common prefix between \"spell\" and words in the dictionary is an empty string. Therefore, all words in the dictionary are returned."
                    },
                    {
                        "input": "n = 4, dictionary = [\"code\", \"with\", \"coding\", \"ninjas\"], query = \"ninjas\"",
                        "output": "[]",
                        "explanation": "The query \"ninjas\" is present in the dictionary. Therefore, an empty list is returned, indicating a correct spelling."
                    },
                    {
                        "input": "n = 6, dictionary = [\"abcde\", \"abfd\", \"abcxyp\", \"mnbs\", \"aaaa\", \"pkl\"], query = \"abc\"",
                        "output": "[\"abcde\", \"abcxyp\"]",
                        "explanation": "The query \"abc\" is not in the dictionary. The longest common prefix between \"abc\" and words in the dictionary is \"abc\". Therefore, only words with \"abc\" as a prefix are returned, which are \"abcde\" and \"abcxyp\"."
                    },
                    {
                        "input": "n = 5, dictionary = [\"abc\", \"def\", \"ghi\", \"jkl\", \"mnop\"], query = \"pqr\"",
                        "output": "[\"abc\", \"def\", \"ghi\", \"jkl\", \"mnop\"]",
                        "explanation": "The query \"pqr\" is not in the dictionary. The longest common prefix between \"pqr\" and words in the dictionary is an empty string. Therefore, all words in the dictionary are returned."
                    },
                    {
                        "input": "n = 4, dictionary = [\"ninja\", \"ninjas\", \"nineteen\", \"ninny\"], query = \"ninjk\"",
                        "output": "[\"ninja\", \"ninjas\"]",
                        "explanation": "The query \"ninjk\" is not in the dictionary. The longest common prefix between \"ninjk\" and words in the dictionary is \"ninj\". The words with \"ninj\" as a prefix are \"ninja\" and \"ninjas\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>This is a typical search problem where you have to check whether the \u2018QUERY\u2019 string matches with any other string in the \u2018DICTIONARY\u2019 or prefix of the string in the \u2018DICTIONARY\u2019 using TRIE.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Tries",
                "slug": "tries"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}