{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12585,
            "title": "Spiral Matrix",
            "titleSlug": "spiral-matrix_1466963",
            "content": "<h4 id=\"you-are-given-a-2d-matrix-with-n-rows-and-m-columns-the-top-left-cell-has-coordinates-0-0-and-the-bottom-right-cell-has-coordinates-n-1-m-1\">You are given a 2D matrix with \u2018N\u2019 rows and \u2018M\u2019 columns. The top-left cell has coordinates (0, 0), and the bottom-right cell has coordinates (N - 1, M - 1).</h4>\n\n<h4 id=\"ninja-is-initially-at-the-cell-with-coordinates-r-c-and-facing-towards-the-east-he-starts-walking-in-a-clockwise-spiral-shape-and-stops-once-he-has-covered-each-cell-in-our-matrix\">Ninja is initially at the cell with coordinates (R, C) and facing towards the east. He starts walking in a clockwise spiral shape and stops once he has covered each cell in our matrix.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Ninja continues to walk even if he steps outside the matrix in a clockwise spiral direction. \n</code></pre>\n\n<h4 id=\"you-have-to-find-the-list-of-coordinates-present-on-the-matrix-in-the-order-that-ninja-visited-them\">You have to find the list of coordinates present on the matrix in the order that Ninja visited them.</h4>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018M\u2019, denoting the number of rows and columns of the matrix.\n\nThe second line of each test case contains two space-separated integers, \u2018R\u2019 and \u2018C\u2019, denoting the initial coordinates of Ninja.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the list of coordinates present on the matrix in the order Ninja visited them. \n\nOutput for each test case will be printed in a new line. \n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 1000\n1 &lt;= M &lt;= 1000  \n0 &lt;= R &lt; N\n0 &lt;= C &lt; M\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2 4\n1 1\n2 1\n0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 1\n1 2\n1 0\n0 0\n0 1\n0 2\n0 3\n1 3\n0 0\n1 0\n</code></pre>\n\n<h4 id=\"explanation-for-sample-1\">Explanation for Sample 1:</h4>\n\n<pre><code> For the 1st test case:\n The path followed is illustrated below.\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000426_1618820406_Spiral%20Matrix%20III.jpg\"/></p>\n\n<pre><code>Ninja initially starts from position (1, 1) and moves from (1,1) -&gt; (1,2) -&gt; (2,2) -&gt; (2,1) -&gt; (2,0) -&gt; (1,0) -&gt; (0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (0,3) -&gt; (1,3) -&gt; (2,3). \nNote that even though (2, 0), (2, 1), (2, 2) and (2, 3) are not in the matrix, Ninja visits those cells, but they should not be included in our result.\n\nFor the second test case:\nThe path followed is: (0,0) -&gt; (0,1) -&gt; (1,1) -&gt; (1,0). Similarly we don\u2019t append coordinates (0, 1) and (1, 1) in the result as they lie outside the matrix.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 4\n1 3\n2 2\n1 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 3\n2 3\n2 2\n1 2\n0 2\n0 3\n2 1\n1 1\n0 1\n2 0\n1 0\n0 0\n1 0\n1 1\n0 0\n0 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a 2D matrix of size N x M. Imagine a Ninja starts at cell (R, C) facing East. The Ninja walks in a clockwise spiral, visiting each cell until all cells within the matrix have been covered. Determine the order in which the Ninja visits the cells present within the matrix.\n\nImportant: The Ninja continues spiraling even when stepping outside the matrix boundaries. Only record the coordinates of cells that are within the N x M matrix.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 1000",
                    "1 <= M <= 1000",
                    "0 <= R < N",
                    "0 <= C < M",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "2\n2 4\n1 1\n2 1\n0 0",
                        "output": "1 1\n1 2\n1 0\n0 0\n0 1\n0 2\n0 3\n1 3\n0 0\n1 0",
                        "explanation": "Test Case 1: The Ninja starts at (1,1). The spiral path covers (1,1), (1,2), (2,2), (2,1), (2,0), (1,0), (0,0), (0,1), (0,2), (0,3), (1,3), (2,3). Only the cells within the 2x4 matrix are recorded.\n\nTest Case 2: The Ninja starts at (0,0). The spiral path covers (0,0), (0,1), (1,1), (1,0). Only the cells within the 2x1 matrix are recorded."
                    },
                    {
                        "input": "2\n3 4\n1 3\n2 2\n1 0",
                        "output": "1 3\n2 3\n2 2\n1 2\n0 2\n0 3\n2 1\n1 1\n0 1\n2 0\n1 0\n0 0\n1 0\n1 1\n0 0\n0 1",
                        "explanation": "Test Case 1: The Ninja starts at (1, 3). The spiral path covers (1,3), (2,3), (2,2), (1,2), (0,2), (0,3), (2,1), (1,1), (0,1), (2,0), (1,0), (0,0).\n\nTest Case 2: The Ninja starts at (1, 0). The spiral path covers (1,0), (1,1), (0,1), (0,0)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we simulate the position of Ninja at each point in time?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}