{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8214,
            "title": "Spiral Matrix",
            "titleSlug": "spiral-matrix_840698",
            "content": "<h4 id=\"you-are-given-a-2-d-array-matrix-of-dimensions-n-x-m-of-integers-you-need-to-return-the-spiral-path-of-the-matrix\">You are given a 2-D array &#39;MATRIX&#39; of dimensions N x M, of integers. You need to return the spiral path of the matrix.</h4>\n\n<h4 id=\"example-of-spiral-path\">Example Of Spiral Path:</h4>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004006.jpeg\" alt=\"Spiral path of a matrix\"></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains two single space-separated integers &#39;N&#39; and &#39;M&#39;, denoting the number of rows and columns respectively.\n\nThe next &#39;N&#39; lines, each contains &#39;M&#39; single space-separated integers representing the elements in a row of the matrix.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case/query, print the spiral path of the given matrix.\n\nThe output for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N  &lt;= 10 ^ 2\n1 &lt;= M &lt;= 10 ^ 2\n-10 ^ 9 &lt;= MATRIX[ i ][ j ] &lt;= 10 ^ 9\n\nTime Limit: 1sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 4\n1 2 3 4 \n5 6 7 8 \n9 10 11 12 \n13 14 15 16\n3 6\n1 2 3 4 5 6 \n7 8 9 10 11 12 \n13 14 15 16 17 18\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10\n1 2 3 4 5 6 12 18 17 16 15 14 13 7 8 9 10 11\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1 :</h5>\n\n<pre><code>The spiral path for the test case 2 is as shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image2-5403.png\" alt=\"Test Case 2\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 1\n4\n1 5\n1 2 3 4 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>4\n1 2 3 4 5\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-2\">Explanation of the Sample Input 2:</h5>\n\n<pre><code>In the first test case, there is only one element in the matrix, so the spiral path is only that element.\n\nIn the second test case, there is only one row or 1-D matrix, so the spiral path is only the single traversal of the matrix.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 209,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a 2-D array 'MATRIX' of dimensions N x M, containing integers. Your task is to traverse the matrix in a spiral manner and return the sequence of elements encountered.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10 ^ 2",
                    "1 <= M <= 10 ^ 2",
                    "-10 ^ 9 <= MATRIX[ i ][ j ] <= 10 ^ 9",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "4 4\n1 2 3 4 \n5 6 7 8 \n9 10 11 12 \n13 14 15 16\n3 6\n1 2 3 4 5 6 \n7 8 9 10 11 12 \n13 14 15 16 17 18",
                        "output": "1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10\n1 2 3 4 5 6 12 18 17 16 15 14 13 7 8 9 10 11",
                        "explanation": "For the first test case (4x4 matrix), the spiral path starts from 1, goes right to 4, down to 16, left to 13, up to 5, right to 7, down to 11, and left to 10.\n\nFor the second test case (3x6 matrix), the spiral path starts from 1, goes right to 6, down to 18, left to 13, up to 7, right to 11."
                    },
                    {
                        "input": "1 1\n4\n1 5\n1 2 3 4 5",
                        "output": "4\n1 2 3 4 5",
                        "explanation": "In the first test case, the matrix has only one element, so the spiral path contains only that element.\n\nIn the second test case, the matrix has only one row, so the spiral path is the row itself."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we print the boundary of the Matrix recursively?</p>",
            "<p>Can we try to traverse the matrix with the help of loops?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N * M)\r\n    Space Complexity : O(1)\r\n\r\n    Where N is the number of rows in the matrix,\r\n    and M is the number of columns in the matrix.\r\n*/\r\n\r\nvector<int> spiralPathMatrix(vector<vector<int> > matrix, int n, int m)\r\n{\r\n     int i;\r\n     int r = 0;\r\n     int rows = n;\r\n     int c = 0;\r\n     int cols = m;\r\n \r\n    /*  \r\n        r - starting row index,\r\n        rows - ending row index,\r\n        c - starting column index,\r\n        cols - ending column index,\r\n        i - iterator.\r\n    */\r\n \r\n    // Make vector to store the path.\r\n    vector<int> path;\r\n\r\n    while (r < rows && c < cols) \r\n    {\r\n        // Push the first row from the remaining rows .\r\n        for (i = c; i < cols; ++i) \r\n        {\r\n            path.push_back(matrix[r][i]);\r\n        }\r\n        r = r + 1;\r\n \r\n        // Push the last column from the remaining columns.\r\n        for (i = r; i < rows; ++i) \r\n        {\r\n            path.push_back(matrix[i][cols - 1]);\r\n        }\r\n        cols = cols - 1;\r\n \r\n        // Push the last row from the remaining rows. \r\n        if (r < rows)\r\n        {\r\n            for (i = cols - 1; i >= c; --i) \r\n            {\r\n                path.push_back(matrix[rows - 1][i]);\r\n            }\r\n            rows = rows - 1;\r\n        }\r\n \r\n        // Push the first column from the remaining columns. \r\n        if (c < cols) \r\n        {\r\n            for (i = rows - 1; i >= r; --i) \r\n            {\r\n                path.push_back(matrix[i][c]);\r\n            }\r\n            c = c + 1;\r\n        }\r\n    }\r\n\r\n    return path;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N * M)\r\n    Space Complexity : O(1)\r\n\r\n    Where N is the number of rows in the matrix,\r\n    and M is the number of columns in the matrix.\r\n*/\r\n\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n    public static List<Integer> spiralPathMatrix(int[][] matrix, int n, int m) {\r\n\r\n        int i;\r\n        int r = 0;\r\n\t\tint rows = n;\r\n        int c = 0;\r\n\t\tint cols = m;\r\n     \r\n        /*  \r\n            r - starting row index,\r\n            rows - ending row index,\r\n            c - starting column index,\r\n            cols - ending column index,\r\n            i - iterator.\r\n        */\r\n     \r\n        // Make vector to store the path.\r\n        List<Integer> path = new ArrayList();\r\n\r\n        while (r < rows && c < cols) {\r\n            // Push the first row from the remaining rows.\r\n            for (i = c; i < cols; ++i) {\r\n                path.add(matrix[r][i]);\r\n            }\r\n            r = r + 1;\r\n     \r\n            // Push the last column from the remaining columns.\r\n            for (i = r; i < rows; ++i) {\r\n                path.add(matrix[i][cols - 1]);\r\n            }\r\n            cols = cols - 1;\r\n     \r\n            // Push the last row from the remaining rows.\r\n            if (r < rows) {\r\n                for (i = cols - 1; i >= c; --i) {\r\n                    path.add(matrix[rows - 1][i]);\r\n                }\r\n                rows = rows - 1;\r\n            }\r\n     \r\n            // Push the first column from the remaining columns. \r\n            if (c < cols) {\r\n                for (i = rows - 1; i >= r; --i) {\r\n                    path.add(matrix[i][c]);\r\n                }\r\n                c = c + 1;\r\n            }\r\n        }\r\n\r\n        return path;\r\n\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity : O(N * M)\r\n    Space Complexity : O(1)\r\n\r\n    Where N is the number of rows in the matrix,\r\n    and M is the number of columns in the matrix.\r\n'''\r\n\r\nimport sys\r\nfrom sys import stdin\r\n\r\ndef spiralPathMatrix(matrix, n, m):\r\n    \r\n    r = 0\r\n    rows = n\r\n    c = 0\r\n    cols = m\r\n    \r\n    '''\r\n        r - starting row index,\r\n        rows - ending row index,\r\n        c - starting column index,\r\n        cols - ending column index,\r\n        i - iterator.\r\n    '''\r\n    \r\n    # Make array to store path.\r\n    path =[]\r\n    \r\n    while r < rows and c < cols:\r\n        \r\n        # Push the first row from the remaining rows.\r\n        for i in range (c, cols):\r\n            path.append(matrix[r][i])\r\n        r += 1\r\n        \r\n        # Push the last column from the remaining columns. \r\n        for i in range (r, rows):\r\n            path.append(matrix[i][cols - 1])\r\n        cols -= 1\r\n        \r\n        # Push the last row from the remaining rows. \r\n        if r < rows:\r\n            \r\n            for i in range (cols - 1, c - 1, -1):\r\n                path.append(matrix[rows - 1][i])\r\n            rows -= 1\r\n        \r\n        # Push the first column from the remaining columns. \r\n        if c < cols:\r\n            \r\n            for i in range (rows - 1, r - 1, -1):\r\n                path.append(matrix[i][c])\r\n            c += 1\r\n            \r\n    return path\r\n\r\n\r\n\r\nt = int(input().strip())\r\n\r\nfor j in range(t):\r\n    \r\n    n,m = list(map(int, stdin.readline().strip().split(\" \")))\r\n    \r\n    arr = []\r\n    \r\n    for i in range(n):\r\n        \r\n        a = list(map(int, stdin.readline().strip().split(\" \")))\r\n        arr.append(a)\r\n            \r\n    \r\n    for i in spiralPathMatrix(arr, n, m):\r\n        print(i, end = \" \")\r\n        \r\n    print()\r\n    \r\n    \r\n\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}