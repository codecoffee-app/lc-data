{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7289,
            "title": "Spiral order traversal of a binary tree",
            "titleSlug": "spiral-order-traversal-of-a-binary-tree_630521",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-n-nodes-print-the-spiral-order-traversal-of-this-binary-tree\">You have been given a binary tree of &#39;N&#39; nodes. Print the Spiral Order traversal of this binary tree.</h4>\n\n<h5 id=\"for-example\">For example</h5>\n\n<pre><code>For the given binary tree [1, 2, 3, -1, -1, 4, 5, -1, -1, -1, -1]\n    1\n   / \\\n  2   3\n     / \\\n    4   5\n\nOutput: 1 3 2 4 5\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The only line of input contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-input-format-2-8282.png\" alt=\"tree\"></p>\n\n<pre><code>For example, the input for the tree depicted in the above image would be :\n\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print &#39;N&#39; single space-separated integers representing the spiral order traversal of the binary tree.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function and return the list of elements containing the spiral order of the given input tree.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>0 &lt;= N &lt;= 10 ^ 4\n\nWhere &#39;N&#39; is the total number of nodes in the binary tree\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1</h5>\n\n<pre><code>1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 3 2 4 5 6 7 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/graph-input-format-2-8282.png\" alt=\"tree\"></p>\n\n<pre><code>From the above-depicted representation of the input tree,\n\nLevel-0: 1(taken in the left to right fashion)\nLevel-1: 3 2(taken in the right to left fashion)\nLevel-2: 4 5 6(taken in the left to right fashion)\nLevel-3: 7(taken in the right to left fashion)\n\nWhen taken all the sequences linearly from levels 0 to 3, we get [1, 3, 2, 4, 5, 6, 7] and hence the desired output.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2</h5>\n\n<pre><code>1 2 3 -1 4 5 6 7 8 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>1 3 2 4 5 6 8 7\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of 'N' nodes, implement an algorithm to print the spiral order traversal of the tree. The spiral order traversal visits nodes level by level, alternating the direction of traversal in each level (left-to-right, then right-to-left, then left-to-right, and so on).",
                "constraints": [
                    "0 <= N <= 10^4",
                    "Where 'N' is the total number of nodes in the binary tree",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1",
                        "output": "1 3 2 4 5 6 7",
                        "explanation": "The tree is traversed in a spiral manner. Level 0: 1 (left to right). Level 1: 3, 2 (right to left). Level 2: 4, 5, 6 (left to right). Level 3: 7 (right to left).  The concatenation of these traversals yields the output: 1 3 2 4 5 6 7."
                    },
                    {
                        "input": "1 2 3 -1 4 5 6 7 8 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "1 3 2 4 5 6 8 7",
                        "explanation": "The tree is traversed in a spiral manner. Level 0: 1 (left to right). Level 1: 3, 2 (right to left). Level 2: 4, 5, 6 (left to right). Level 3: 8, 7 (right to left). The concatenation of these traversals yields the output: 1 3 2 4 5 6 8 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use level order traversal to explore the binary tree in spiral order.</p>",
            "<p>Is there any Data Structure that follows First in, Last out strategy ?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}