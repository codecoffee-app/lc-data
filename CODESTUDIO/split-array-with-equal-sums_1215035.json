{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10439,
            "title": "Split Array with equal sums",
            "titleSlug": "split-array-with-equal-sums_1215035",
            "content": "<h4 id=\"you-are-given-an-array-list-arr-of-size-n-you-task-is-to-find-if-there-exists-a-triplet-i-j-k-such-that-0-i-i-1-j-j-1-k-and-k-n-1-and-the-sum-of-the-subarrays-0-i-1-i-1-j-1-j-1-k-1-k-1-n-1-are-equal\">You are given an array/list &#39;ARR&#39; of size &#39;N&#39;. You task is  to find if there exists a triplet (i, j, k) such that 0 &lt; i , i + 1 &lt; j , j + 1 &lt; k and  k &lt; &#39;N&#39; - 1  and the sum of the subarrays [0, i - 1],[i + 1, j - 1], [j + 1, k - 1], [k + 1, N - 1] are equal.</h4>\n\n<h5 id=\"an-array-c-is-a-subarray-of-array-d-if-c-can-be-obtained-from-d-by-deletion-of-several-elements-from-the-beginning-and-several-elements-from-the-end\">An array c is a subarray of array d if c can be obtained from d by deletion of several elements from the beginning and several elements from the end.</h5>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>let &#39;ARR&#39; = [1, 2, 3] then the possible subarrays of &#39;ARR&#39; will be - {1}, {2}, {3}, {1, 2}, {2, 3}, {1, 2, 3}.\n</code></pre>\n\n<h5 id=\"note-assume-that-the-array-has-zero-based-indexing\">Note: Assume That the Array has  Zero-based indexing.</h5>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first line of each test case contains an integer  \u2018N\u2019 representing the array\u2019s size.\n\nThe second line of each test case contains &#39;N&#39; space-separated integers representing the array\u2019s elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print \u2018True\u2019 if such a triplet exists; else print \u2018False\u2019.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don\u2019t have to take any input or print anything; it already has been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10 ^ 3\n-10 ^ 6 &lt;= ARR[i] &lt;= 10 ^ 6\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n7\n1 2 1 2 1 2 1 \n5\n1 2 3 1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>In first test case, If we take i = 1, j = 3 and k =5 we get - sum[0,i-1]  -&gt; sum[0,0]=1, sum[i+1, j-1] -&gt; sum[2,2]=1, sum[j+1, k-1] -&gt; sum[4,4]=1, sum[k+1,N-1] -&gt; sum[6,6]=1. Here the sum of all subarrays formed is 1, So, &quot;True&quot; will be printed.\n\nIn second test case, here N = 5, the first condition i.e 0 &lt; i, i - 1&lt; j, j - 1 &lt; k, k - 1 &lt; n doesn\u2019t satisfy for any triplet. So &quot;False&quot; will be printed.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n6\n1 2 1 2 1 2\n9\n1 2 3 -5 8 1 3 2 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>False\nTrue\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>In first test case, we cannot get any triplet as equal sum is not possible. So, &quot;False&quot; is printed.\n\nIn second test case, we can get any triplet as equal sum is possible which is 3 by taking i = 2, j = 5 and j = 7. So, &quot;True&quot; is printed.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'ARR' of size 'N', determine if there exists a triplet (i, j, k) such that 0 < i, i + 1 < j, j + 1 < k, and k < N - 1, where the sums of the subarrays [0, i - 1], [i + 1, j - 1], [j + 1, k - 1], and [k + 1, N - 1] are equal.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10 ^ 3",
                    "-10 ^ 6 <= ARR[i] <= 10 ^ 6",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "7\n1 2 1 2 1 2 1",
                        "output": "True",
                        "explanation": "For i = 1, j = 3, and k = 5, the sums of the subarrays are:\nsum[0, i-1] = sum[0, 0] = 1\nsum[i+1, j-1] = sum[2, 2] = 1\nsum[j+1, k-1] = sum[4, 4] = 1\nsum[k+1, N-1] = sum[6, 6] = 1\nSince all subarray sums are equal (1), the output is True."
                    },
                    {
                        "input": "5\n1 2 3 1 2",
                        "output": "False",
                        "explanation": "No triplet (i, j, k) exists that satisfies the given conditions and results in equal sums for all four subarrays.  Specifically, the condition 0 < i, i + 1 < j, j + 1 < k, and k < N - 1 cannot be simultaneously satisfied for the provided input."
                    },
                    {
                        "input": "6\n1 2 1 2 1 2",
                        "output": "False",
                        "explanation": "No triplet (i, j, k) exists that satisfies the given conditions and results in equal sums for all four subarrays."
                    },
                    {
                        "input": "9\n1 2 3 -5 8 1 3 2 3",
                        "output": "True",
                        "explanation": "For i = 2, j = 5, and k = 7, the sums of the subarrays are:\nsum[0, i-1] = sum[0, 1] = 1+2 = 3\nsum[i+1, j-1] = sum[3, 4] = -5 + 8 = 3\nsum[j+1, k-1] = sum[6, 6] = 3\nsum[k+1, N-1] = sum[8, 8] = 3\nSince all subarray sums are equal (3), the output is True."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think this by traversing over every subarray of the given array and checking whether these cuts we are making out of our indices i, j, k&nbsp; satisfy the given conditions.</p>",
            "<p>Can you try, Other than calculating the sum every time, think of storing the cumulative sum?</p>",
            "<p>Can you imagine this of a problem of cutting a paper in 4 equal parts without using any scalar measure?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}