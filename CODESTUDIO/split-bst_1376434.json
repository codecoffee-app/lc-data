{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11020,
            "title": "Split BST",
            "titleSlug": "split-bst_1376434",
            "content": "<h4 id=\"you-have-been-given-a-root-node-of-a-binary-search-tree-and-a-positive-integer-k-you-need-to-split-the-given-bst-into-two-bst-such-that-first-bst-has-all-nodes-with-values-less-than-or-equal-to-the-given-value-k-and-second-tree-has-all-nodes-with-values-greater-than-the-given-value-k\">You have been given a root node of a binary search tree and a positive integer \u2018K\u2019. You need to split the given BST into two BST such that first BST has all nodes with values less than or equal to the given value \u2018K\u2019, and second tree has all nodes with values greater than the given value \u2018K\u2019.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. A binary search tree is a binary tree data structure, with the following properties\n    a. The left subtree of any node contains nodes with the value less than the node\u2019s value.\n    b. The right subtree of any node contains nodes with the value equal to or greater than the node\u2019s value.\n    c. Right, and left subtrees are also binary search trees.\n2. It is guaranteed that all nodes in the given tree will have distinct positive integral values .\n3. The given tree may or may not contain a node of value equal to the given value \u2018K\u2019.\n</code></pre>\n\n<h4 id=\"example-below-the-tree-is-a-binary-search-tree\">Example, below the tree, is a binary search tree.</h4>\n\n<p><img src=\"https://files.codingninjas.in/1-8677.png\" alt=\"1\"></p>\n\n<h4 id=\"below-the-tree-is-not-a-bst-as-node-2-is-less-than-node-3-but-2-is-the-right-child-of-3-and-node-6-is-greater-than-node-5-but-it-is-in-the-left-subtree-of-node-5\">Below the tree is not a BST as node \u20182\u2019 is less than node \u20183\u2019 but \u20182\u2019 is the right child of \u20183\u2019, and node \u20186\u2019 is greater than node \u20185\u2019 but it is in the left subtree of node \u20185\u2019.</h4>\n\n<p><img src=\"https://files.codingninjas.in/2-8678.png\" alt=\"1\"></p>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. You have to split the given tree in such a way that the structure of both returned trees is similar to the originally given tree, i.e. if a parent node \u2018P\u2019 and child node \u2018C\u2019 lies on the same tree after splitting, then \u2018C must be the same child of \u2018P\u2019.\n2. If there is no valid tree, then return \u2018NULL\u2019 node in its place.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nThe second line of each test case contains a positive integer value \u2018K\u2019, denoting the value for splitting the given tree.\n\nFor example, the level order input for the tree depicted in the below image.     \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/3-8679.png\" alt=\"1\"></p>\n\n<pre><code>50\n13 72\n3 25 66 -1\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 50\n\nLevel 2 :\nLeft child of 50 = 13\nRight child of 50 = 72\n\nLevel 3 :\nLeft child of 13 = 3\nRight child of 13 = 25\nLeft child of 72 = 66\nRight child of 72 =  \u2018Null\u2019\n\n\nLevel 4 :\nAll children are \u2018Null\u2019\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n50 13 72 3 25 66 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, the output will be \u201c1\u201d if you have returned the correct answer, else it will be \u201c0\u201d.\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to input or print anything, and it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 3000\n1 &lt;= data &lt;= 10 ^ 9\n1 &lt;= K &lt;= 10 ^ 9\nWhere \u2018T\u2019 denotes the number of test cases, \u2018N\u2019 is the total number of nodes in the given binary tree, \u2018data\u2019 is the value of the nodes of the given binary tree, and \u2018K\u2019 represents the given value for splitting the tree. \n\nFor a single test case, all given \u2018data\u2019 are distinct from each other.\n</code></pre>\n\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n7 5 10 3 6 8 11 2 -1 -1 -1 -1 -1 -1 -1 -1 -1\n5\n5 4 6 -1 -1 -1 -1\n3\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>1\n1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h4>\n\n<pre><code>For the first test case, the given tree is.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/4-8680.png\" alt=\"1\"></p>\n\n<pre><code>All nodes less than or equal to \u20185\u2019 will be part of the first tree and all remaining nodes will be part of the second tree. The tree after the split will look like the one below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/5-8681.png\" alt=\"1\"></p>\n\n<pre><code>The given tree in the second test case is -\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/6-8682.png\" alt=\"1\"></p>\n\n<pre><code>All nodes in the tree are greater than the given value, thus we will return \u2018NULL\u2019 node in the first tree and the original tree as the second tree.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>1\n10 2 12 1 3 -1 13 -1 -1 -1 -1 -1 -1\n11\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h4>\n\n<pre><code>For the first test case, the given tree is\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/7-8683.png\" alt=\"1\"></p>\n\n<pre><code>The output trees are below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/8-8684.png\" alt=\"1\"></p>\n\n<pre><code>Note that the below output tree is not correct because the structure is not maintained as node \u201812\u2019 and \u201813\u2019 lies on the same tree and \u201812\u2019 is a child of \u201813\u2019 in the output tree, but in the original tree \u201813\u2019 is a child of \u201812\u2019.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/9-8685.png\" alt=\"1\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a Binary Search Tree (BST) and an integer 'K', split the BST into two BSTs. The first BST should contain all nodes with values less than or equal to 'K', and the second BST should contain all nodes with values greater than 'K'. The structure of the resulting BSTs must mimic the original BST's structure where possible. If a valid BST cannot be created, return 'NULL' for that BST.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 3000",
                    "1 <= data <= 10^9",
                    "1 <= K <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "root = TreeNode(7), value = 5, root.left = TreeNode(5), root.right = TreeNode(10), root.left.left = TreeNode(3), root.left.right = TreeNode(6), root.right.left = TreeNode(8), root.right.right = TreeNode(11), root.left.left.left = TreeNode(2)",
                        "output": "First BST: TreeNode(5) with structure containing 2, 3, 5, 6. Second BST: TreeNode(10) with structure containing 7, 8, 10, 11.",
                        "explanation": "Nodes with values less than or equal to 5 are 2, 3, 5, and 6.  Nodes with values greater than 5 are 7, 8, 10, and 11. The original BST structure is maintained in the split trees."
                    },
                    {
                        "input": "root = TreeNode(5), value = 3, root.left = TreeNode(4), root.right = TreeNode(6)",
                        "output": "First BST: NULL. Second BST: TreeNode(5) with structure containing 4, 5, 6.",
                        "explanation": "All nodes in the tree (4, 5, and 6) are greater than 3. Thus, the first tree is NULL, and the second tree is the original tree."
                    },
                    {
                        "input": "root = TreeNode(10), value = 11, root.left = TreeNode(2), root.right = TreeNode(12), root.left.left = TreeNode(1), root.left.right = TreeNode(3), root.right.right = TreeNode(13)",
                        "output": "First BST: TreeNode(10) with structure containing 1, 2, 3, 10. Second BST: TreeNode(12) with structure containing 12, 13.",
                        "explanation": "Nodes less than or equal to 11 are 1, 2, 3, and 10. The nodes greater than 11 are 12 and 13. The output demonstrates that the original tree structure is maintained after the split."
                    },
                    {
                        "input": "root = TreeNode(1), value = 1",
                        "output": "First BST: TreeNode(1). Second BST: NULL",
                        "explanation": "The node has the same value as K, thus only one BST will be created with TreeNode(1) and the other is NULL."
                    },
                    {
                        "input": "root = TreeNode(4), value = 4, root.left = TreeNode(2), root.right = TreeNode(6), root.left.left = TreeNode(1), root.left.right = TreeNode(3), root.right.left = TreeNode(5), root.right.right = TreeNode(7)",
                        "output": "First BST: TreeNode(4) with structure containing 1, 2, 3, 4. Second BST: TreeNode(6) with structure containing 5, 6, 7",
                        "explanation": "Demonstrates a more complex split, with multiple nodes in each resulting BST."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about how to solve this problem recursively using the properties of BST.</p>",
            "<p>Iteratively check root nodes and use properties of BST.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}