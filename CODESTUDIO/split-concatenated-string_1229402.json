{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10462,
            "title": "Split Concatenated String",
            "titleSlug": "split-concatenated-string_1229402",
            "content": "<h4 id=\"you-are-given-n-strings-you-could-concatenate-these-strings-into-one-where-for-each-string-you-could-reverse-it-or-not-among-all-the-possible-strings-you-need-to-find-a-lexicographically-largest-string-by-cutting-and-making-one-point-in-any-part-of-the-string-which-will-make-the-looped-string-into-a-regular-one-starting-from-the-breakpoint-character\">You are given \u2018N\u2019 strings. You could concatenate these strings into one where for each string you could reverse it or not. Among all the possible strings you need to find a lexicographically largest string by cutting and making one point in any part of the string which will make the looped string into a regular one starting from the breakpoint character.</h4>\n\n<h4 id=\"string-x-x1x2-x-x-is-lexicographically-larger-than-string-y-y1y2-y-y-if-either-x-y-and-x1-y1-x2-y2-x-y-y-y-or-exists-such-number-r-r-x-r-y-that-x1-y1-x2-y2-xr-yr-and-xr-1-yr-1\">String x\u2009=\u2009x1x2... x|x| is lexicographically larger than string y\u2009=\u2009y1y2... y|y|, if either |x|\u2009&gt;\u2009|y| and x1\u2009=\u2009y1,\u2009x2\u2009=\u2009y2,\u2009...,\u2009x|y|\u2009=\u2009y|y|, or exists such number r (r\u2009&lt;\u2009|x|,\u2009r\u2009&lt;\u2009|y|), that x1\u2009=\u2009y1,\u2009x2\u2009=\u2009y2,\u2009...,\u2009xr\u2009=\u2009yr and xr\u2009+\u20091\u2009&gt;\u2009yr\u2009+\u20091.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe next \u20182T\u2019 lines represent the \u2018T\u2019 test cases. \n\nThe first line of each test case contains one integers \u2018N\u2019 denoting the number of strings.\n\nThe second line contains N space-separated strings.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case print the lexicographically biggest string.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 100\n1 &lt;= length of string(si) &lt;= 100  for all  1 &lt;= i &lt; = n \n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n2\nabc def\n1\naab\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>fedcba\nbaa\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>In the first case\nThe possible strings after looping:-\n-abcdef-, -abcfed-, -cbadef-, -cbafed-, where - represents the loop.\nFrom 4th string =cbafed\nOn cutting the string about f\nfed+cba=fedcba\nThe lexicographically biggest possible string is fedcba.\n\nIn the second case\nThe possible strings are:-\naab baa\nThe lexicographically biggest possible string is baa.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n3\naaa ccc ddd\n2\nazy bom\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>dddaaaccc\nzamoby\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of strings, you can concatenate them in any order. For each string, you have the option to either use it as is or reverse it. The goal is to find the lexicographically largest string that can be formed by concatenating these strings and then cutting and joining the resulting string at some point to create a regular, non-cyclic string.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 100",
                    "1 <= length of string(si) <= 100  for all  1 <= i <= n"
                ],
                "testcases": [
                    {
                        "input": "n = 2, str = [\"abc\", \"def\"]",
                        "output": "fedcba",
                        "explanation": "The possible strings after considering reversals and concatenations are: abcdef, abcfed, cbadef, cbafed. Among these, we also consider cyclic permutations. For example, from 'cbafed', we can cut at 'f' to obtain 'fedcba'. The lexicographically largest string among all possible combinations is 'fedcba'."
                    },
                    {
                        "input": "n = 1, str = [\"aab\"]",
                        "output": "baa",
                        "explanation": "The possible strings are 'aab' and 'baa'. The lexicographically largest is 'baa'."
                    },
                    {
                        "input": "n = 3, str = [\"aaa\", \"ccc\", \"ddd\"]",
                        "output": "dddaaaccc",
                        "explanation": "The optimal concatenation is 'dddaaaccc'.  Reversing the individual strings does not improve the result. Also, all permutations of string order doesn't produce better result."
                    },
                    {
                        "input": "n = 2, str = [\"azy\", \"bom\"]",
                        "output": "zamoby",
                        "explanation": "Concatenating 'bom' and reversed 'azy' which is 'yza' creates 'bomyza', cutting before 'yza' gives 'yzabom'. Doing the other way 'azy' and reversed 'bom' which is 'mob', so concatenating gives 'azymob' and reversing the order reversing bom and azy gives 'mobazy', reversing individual strings gives 'za' and 'mob' respectively. Doing all combinations give 'zamoby', 'azybom' and so on. 'zamoby' is the largest."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For all strings from i = 1 to n if str[i] &lt; reverse(str[i]).Then replace str[i] by reverse(str[i]).</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}