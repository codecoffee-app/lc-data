{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10434,
            "title": "Split the given array into K sub-arrays",
            "titleSlug": "split-the-given-array-into-k-sub-arrays_1215015",
            "content": "<h4 id=\"you-re-given-an-array-arr-of-size-n-and-an-integer-k\">You\u2019re given an array <em><strong>&#39;arr&#39;</strong></em> of size <em><strong>&#39;n&#39;</strong></em> and an integer <em><strong>&#39;k&#39;</strong></em>.</h4>\n\n<h4 id=\"your-task-is-to-split-arr-into-k-sub-arrays-such-that-the-maximum-sum-achieved-from-the-k-subarrays-formed-must-be-the-minimum-possible\">Your task is to split &#39;arr&#39; into &#39;k&#39; sub-arrays such that the maximum sum achieved from the &#39;k&#39; subarrays formed must be the minimum possible.</h4>\n\n<h4 id=\"a-subarray-is-a-contiguous-part-of-the-array\">A subarray is a contiguous part of the array.</h4>\n\n<h4 id=\"return-the-minimum-possible-value-of-the-maximum-sum-obtained-after-splitting-the-array-into-k-partitions\">Return the minimum possible value of the maximum sum obtained after splitting the array into &#39;k&#39; partitions.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018arr\u2019 = [1, 1, 2] and \u2018k\u2019 = 2 \n\nOutput: 2\n\nExplanation: If we want to make two subarrays, there are two possibilities: [[1], [1, 2]] and [[1, 1], [2]]. We can see that the maximum sum of any subarray is minimized in the second case. Hence, the answer is 2, which is the maximum sum of any subarray in [[1, 1], [2]].\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains two integers denoting &#39;n&#39; and &#39;k&#39;, representing the number of array elements and the number of sub-arrays we need to split the array into.\n\nThe second line contains &#39;n&#39; space-separated integers denoting the elements of the array.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return the minimum possible value of the maximum sum obtained after splitting the array into &#39;k&#39; partitions.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function and return the sum. \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10^4\n1 &lt;= &#39;k&#39; &lt;= N\n1 &lt;= &#39;arr[i]&#39; &lt;= 10^4\n\nTime limit: 1 sec\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity:</h5>\n\n<pre><code>The expected time complexity is O(n * log(sum)), where &#39;n&#39; is the number of elements in the array and &#39;sum&#39; is the sum of elements of the array.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3 2\n1 1 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000272_1614853945_WhatsApp%20Image%202021-03-04%20at%2012.58.35%20PM.jpeg\" alt=\"Alt text\"></p>\n\n<pre><code>If we want to make two subarrays, there are two possibilities: [[1], [1, 2]] and [[1, 1], [2]]. We can see that the maximum sum of any subarray is minimized in the second case. Hence, the answer is 2, which is the maximum sum of any subarray in [[1, 1], [2]].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4 3\n1 2 3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000271_1614853938_WhatsApp%20Image%202021-03-04%20at%2012.58.35%20PM%20(1).jpeg\" alt=\"Alt text\"></p>\n\n<pre><code>If we want to make three subarrays, there are three possibilities: [[1], [2], [3, 4]], [[1], [2, 3], [4]], and [[1, 2], [3], [4]]. We can see that the maximum sum of any subarray is minimized in the third case. Hence, the answer is 4, which is the maximum sum of any subarray in [[1, 2], [3], [4]].\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 15,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of size `n` and an integer `k`, the task is to split `arr` into `k` sub-arrays such that the maximum sum of any of the `k` sub-arrays is minimized. Return the minimum possible value of this maximum sum.",
                "constraints": [
                    "1 <= 'n' <= 10^4",
                    "1 <= 'k' <= N",
                    "1 <= 'arr[i]' <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "n = 3, arr = [1, 1, 2], k = 2",
                        "output": "2",
                        "explanation": "If we want to make two subarrays, there are two possibilities: [[1], [1, 2]] and [[1, 1], [2]]. We can see that the maximum sum of any subarray is minimized in the second case. Hence, the answer is 2, which is the maximum sum of any subarray in [[1, 1], [2]]."
                    },
                    {
                        "input": "n = 4, arr = [1, 2, 3, 4], k = 3",
                        "output": "4",
                        "explanation": "If we want to make three subarrays, there are three possibilities: [[1], [2], [3, 4]], [[1], [2, 3], [4]], and [[1, 2], [3], [4]]. We can see that the maximum sum of any subarray is minimized in the third case. Hence, the answer is 4, which is the maximum sum of any subarray in [[1, 2], [3], [4]]."
                    },
                    {
                        "input": "n = 5, arr = [1, 2, 3, 4, 5], k = 1",
                        "output": "15",
                        "explanation": "When k is 1, there is only one subarray, which is the entire array. The sum of the array is 1+2+3+4+5 = 15."
                    },
                    {
                        "input": "n = 5, arr = [1, 2, 3, 4, 5], k = 5",
                        "output": "5",
                        "explanation": "When k equals n, each subarray contains a single element. Therefore, the maximum sum will be the largest element in the array, which is 5."
                    },
                    {
                        "input": "n = 6, arr = [10, 5, 7, 4, 9, 6], k = 3",
                        "output": "19",
                        "explanation": "One possible optimal splitting is [[10,5],[7,4],[9,6]].  The max of subarray sums is max(15, 11, 15)=15. Other splitting is [[10],[5,7,4],[9,6]]. The max of subarray sums is max(10, 16, 15) =16. A better optimal slitting is [[10,5,4],[7],[9,6]]. The max of subarray sums is max(19,7,15) = 19. Another splitting is [[10],[5,7],[4,9,6]]. The max of subarray sums is max(10,12,19)=19. Another optimal splitting is [[10,5],[7,4,6],[9]]. The max of subarray sums is max(15,17,9)=17. The right answer is 19, corresponding to this [[10,5,4],[7],[9,6]]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check all possible ways of partitioning the given array into \u2018k\u2019 subarrays.</p>",
            "<p>Can you think of applying binary search?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}