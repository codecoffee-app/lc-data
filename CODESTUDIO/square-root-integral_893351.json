{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8732,
            "title": "Square Root (Integral)",
            "titleSlug": "square-root-integral_893351",
            "content": "<h4 id=\"you-are-given-a-positive-integer-n\">You are given a positive integer <strong><em>\u2018n\u2019</em></strong>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"your-task-is-to-find-and-return-its-square-root-if-n-is-not-a-perfect-square-then-return-the-floor-value-of-sqrt-n\">Your task is to find and return its square root. If \u2018n\u2019 is not a perfect square, then return the floor value of sqrt(n).</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018n\u2019 = 7\n\nOutput: 2\n\nExplanation:\nThe square root of the number 7 lies between 2 and 3, so the floor value is 2.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains the Integer \u2018n\u2019.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The output contains an integer denoting the square root of \u2018n\u2019.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>The square root of the given number 6 lies between 2 and 3, so the floor value is 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>100\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>10\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2:</h5>\n\n<pre><code>The square root of the given number 100 is 10.\n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try solving this in O(log(n)).\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>0 &lt;= n &lt;= 10 ^ 9\n\nTime Limit: 1 sec.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 377,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a positive integer 'n', determine its square root. If 'n' is a perfect square, return the square root. Otherwise, return the floor of the square root.",
                "constraints": [
                    "0 <= n <= 10 ^ 9",
                    "Expected Time Complexity: O(log(n))",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "n = 6",
                        "output": "2",
                        "explanation": "The square root of 6 is approximately 2.449. The floor of 2.449 is 2."
                    },
                    {
                        "input": "n = 100",
                        "output": "10",
                        "explanation": "The square root of 100 is 10."
                    },
                    {
                        "input": "n = 7",
                        "output": "2",
                        "explanation": "The square root of 7 is approximately 2.645. The floor of 2.645 is 2."
                    },
                    {
                        "input": "n = 0",
                        "output": "0",
                        "explanation": "The square root of 0 is 0."
                    },
                    {
                        "input": "n = 1",
                        "output": "1",
                        "explanation": "The square root of 1 is 1."
                    },
                    {
                        "input": "n = 25",
                        "output": "5",
                        "explanation": "The square root of 25 is 5."
                    },
                    {
                        "input": "n = 99",
                        "output": "9",
                        "explanation": "The square root of 99 is approximately 9.95. The floor of 9.95 is 9."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Continue incrementing the number until the square of that number is greater than the given number.</p>",
            "<p>&nbsp;\u2018a\u2019 * \u2018a\u2019 &lt;= \u2018N\u2019 is a monotonically increasing function, where \u2018a\u2019 is greater than equal 0 and \u2018N\u2019 is a given number.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n\n    Where 'n' is the given number.\n*/\n\n// Function to find the square root of 'n'\nint floorSqrt(int n){\n\n    // Handle corner case\n    if(n == 0 || n == 1)\n    {\n        return n;\n    }\n\n    // Initialize variable 'low' and 'high' with lower and upper bound of answer\n    int low = 2;\n    int high = n;\n\n    // To store mid of 'low' and 'high'\n    int mid;\n\n    // Loop while 'low' is less than 'high'\n    while(low < high)\n    {\n        // Calculating 'mid'\n        mid = low + (high - low) / 2;\n\n        /*\n            If square of 'mid' is less than 'n' update 'low' else update 'high'\n            To avoid overflow we have nOT used the condition as ('mid' * 'mid' <= n)\n        */\n        if(mid <= (n / mid))\n        {\n            low = mid + 1;\n        }\n        else\n        {\n            high = mid;\n        }\n    }\n\n    // Return 'low' - 1\n    return low - 1;\n}\n\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "\n/*\n\tTime Complexity: O(log(N))\n\tSpace Complexity: O(1)\n\t\n\tWhere 'N' is the given number.\n*/\npublic class Solution {\n\tpublic static int sqrtN(long N) {\n\n\t\t// Handle corner case\n\t\tif (N == 0 || N == 1) {\n\t\t\treturn (int) N;\n\t\t}\n\n\t\t// Initialize variable 'low' and 'high' with lower and upper bound of answer\n\t\tlong low = 2;\n\t\tlong high = N;\n\n\t\t// To store mid of 'low' and 'high'\n\t\tlong mid;\n\n\t\t// Loop while 'low' is less than 'high'\n\t\twhile (low < high) {\n\t\t\t// Calculating 'mid'\n\t\t\tmid = low + (high - low) / 2;\n\n\t\t\t/*\n\t\t\t * If square of 'mid' is less than 'N' update 'low' else update 'high' To avoid\n\t\t\t * overflow we have NOT used the condition as ('mid' * 'mid' <= N)\n\t\t\t */\n\t\t\tif (mid <= (N / mid)) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else {\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\n\t\t// Return 'low' - 1\n\t\treturn (int) low - 1;\n\t}\n\n}\n\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time Complexity: O(log(n))\r\n    Space Complexity: O(1)\r\n\r\n    Where 'n' is the given number.\r\n\"\"\"\r\n\r\n# Function to find the square root of 'n'\r\ndef floorSqrt(n: int) -> int:\r\n\r\n    # Handle corner case\r\n    if n == 0 or n == 1:\r\n        return n\r\n\r\n    # Initialize variable 'low' and 'high' with lower and upper bound of answer\r\n    low = 2\r\n    high = n\r\n\r\n    # To store mid of 'low' and 'high'\r\n    mid = 0\r\n\r\n    # Loop while 'low' is less than 'high'\r\n    while low < high:\r\n\r\n        # Calculating 'mid'\r\n        mid = low + (high - low) // 2\r\n\r\n        \"\"\"\r\n            If square of 'mid' is less than 'n' update 'low' else update 'high'\r\n            To avoid overflow we have NOT used the condition as ('mid' * 'mid' <= n)\r\n        \"\"\"\r\n        if mid <= (n // mid):\r\n            low = mid + 1\r\n        else:\r\n            high = mid\r\n\r\n    # Return 'low' - 1\r\n    return int(low - 1)\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}