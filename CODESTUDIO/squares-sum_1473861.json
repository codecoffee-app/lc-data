{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12742,
            "title": "Squares Sum",
            "titleSlug": "squares-sum_1473861",
            "content": "<h4 id=\"given-an-array-of-n-integers-and-q-queries-the-query-is-defined-as-below\">Given an array of \u2018N\u2019 integers and \u2018q\u2019 queries. The query is defined as below:-</h4>\n\n<h4 id=\"given-two-integers-l-and-r-l-0-and-r-n-find-the-sum-of-squares-of-all-elements-of-the-array-with-index-in-the-range-l-and-r-inclusive\">Given two integers \u2018l\u2019 and \u2018r\u2019  ( \u2018l\u2019 &gt;=0 and \u2018r\u2019 &lt;= \u2018N\u2019) Find the sum of squares of all elements of the array with index in the range \u2018l\u2019 and \u2018r\u2019 (Inclusive).</h4>\n\n<h4 id=\"given-three-integers-l-r-and-x-l-0-and-r-n-update-the-elements-of-the-array-by-incrementing-x-to-all-array-elements-with-index-in-the-range-l-and-r\">Given three integers \u2018l\u2019 ,\u2019r\u2019 and \u2018x\u2019 ( \u2018l\u2019 &gt;=0 and \u2018r\u2019 &lt;= \u2018N\u2019) .Update the elements of the array by incrementing \u2018x\u2019 to all array elements with index in the range \u2018l\u2019 and \u2018r\u2019.</h4>\n\n<h4 id=\"given-three-integers-l-r-and-x-l-0-and-r-n-update-the-elements-of-the-array-by-setting-x-to-all-array-elements-with-index-in-the-range-l-and-r\">Given three integers \u2018l\u2019 ,\u2019r\u2019 and \u2018x\u2019 ( \u2018l\u2019 &gt;=0 and \u2018r\u2019 &lt;= \u2018N\u2019) .Update the elements of the array by setting  \u2018x\u2019 to all array elements with index in the range \u2018l\u2019 and \u2018r\u2019.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains \u2018T,\u2019 denoting the number of test cases.\n\nThe first line of the test case contains a single integer \u2018N\u2019  denoting the size of the \u2018arr\u2019 array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the array \u2018arr\u2019.\n\nThe third line of each test case contains an integer \u2018q\u2019 denoting the number of queries.\n\nThe next \u2018q\u2019  lines of each test case contain 3 or 4 space-separated integers denoting the following:\n\n1 The first integer denotes the type of query.It can be either \u20180\u2019 , \u20181\u2019 , \u20182\u2019.  \u20180\u2019 denotes the range update query by adding \u2018x\u2019 to all array elements within the index range. \u20181\u2019 denotes the range update query by setting \u2018x\u2019 to all array elements within the index range. \u20182\u2019 denotes sum of squares type query. \n\n2 If the query is of \u20180\u2019 and \u20181\u2019 type then second, third and fourth integers in the same line denotes  \u2018l\u2019 ,\u2019r\u2019 and \u2018x\u2019 denotes the range for which to update the values.\n\n3 If the query is of \u20182\u2019 type then second and third integers in the same line denote \u2018l\u2019 and \u2018r\u2019  denotes the range for which to calculate the sum of squares.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each query of type \u20182\u2019  print the sum of squares .in the range of \u2018l\u2019 and \u2018r\u2019. For update query do not print anything just update the values in an array.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= \u2019T\u2019 &lt;= 10\n1 &lt;= \u2018N\u2019 &lt;= 1000\n1 &lt;= q &lt;= 1000\n1 &lt;= arr[i] &lt;= 1000\n1 &lt;= \u2018x\u2019 &lt;= 1000\n\nWhere \u2018i\u2019 varies from 0 to \u2018n\u2019 -1  where \u2018n\u2019 is the length of the array \u2018arr\u2019,q is the number of queries \u2018arr[i]\u2019 is the value of the element at index \u2018i\u2019. \u2018x\u2019 is the number for updating the range. \n\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n5\n1 2 3 4 5\n5\n2 0 2\n0 0 2 1\n2 0 3\n1 0 2 2\n2 0 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>14\n45\n53\n</code></pre>\n\n<h5 id=\"sample-output-explanation\">Sample Output Explanation :</h5>\n\n<pre><code>The first line has a single integer which means it\u2019s a single test case.\nThe next line has an integer 5 denoting that there are 5 integers in the array.\nThen the 5 space-separated integers in the third line represent the elements in the array.\nThen the fourth line has \u2018q\u2019 which is the number of queries. In this case, we have 5 queries.\n\nThe 5 queries are as follow:-\n\nIn first query type = 2   \u2018l\u2019 = 0 and \u2018r\u2019 = 2\nThe sum of squares is  arr[0]^2 + arr[1]^2 + arr[2]^2 = 1^2 + 2^2 + 3^2 = 14\n\nIn second query type = 0  \u2018l\u2019 = 0 and \u2018r\u2019 = 2 and \u2018x\u2019 = 1.\nIncrementing \u2018x\u2019 from 0 to 2 in an array. Thus array becomes [ 2,3,4,4,5].\n\nIn third query type = 2 \u2018l\u2019 = 0 and \u2018r\u2019 = 3.\nThe sum of squares is arr[0]^2 + arr[1]^2 + arr[2]^2 + arr[3]^3 = 2^2 + 3^2 + 4^2 + 4^2 = 45\n\nIn fourth query type = 1  \u2018l\u2019 = 0 and \u2018r\u2019 = 2 and \u2018x\u2019 = 2.\nSetting \u2018x\u2019 from 0 to 2 in an array. Thus array becomes [2,2,2,4,5].\n\nIn fifth query type = 2   \u2018l\u2019 = 0 and \u2018r\u2019 = 4\nThe sum of squares is arr[0]^2 + arr[1]^2 + arr[2]^2 + arr[3]^3 + arr[3]^2  = 53\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5\n1 10 5 1 3 \n4\n0 1 1 10\n1 2 2 6\n0 1 4 6\n2 0 4 \n6\n6 2 8 3 5 2 \n3\n0 1 2 2\n2 1 1 \n2 0 2  \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>951\n16\n152\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of N integers, process Q queries. There are three query types:\n\n*   **Type 0 (Increment):** Given L, R, and X, increment each element in the array within the index range [L, R] (inclusive) by X.\n*   **Type 1 (Set):** Given L, R, and X, set each element in the array within the index range [L, R] (inclusive) to X.\n*   **Type 2 (Sum of Squares):** Given L and R, calculate the sum of squares of all elements in the array within the index range [L, R] (inclusive).\n\nFor queries of type 2, output the calculated sum of squares. Update queries (types 0 and 1) do not produce output.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 1000",
                    "1 <= Q <= 1000",
                    "1 <= arr[i] <= 1000",
                    "1 <= X <= 1000",
                    "0 <= L <= N - 1",
                    "0 <= R <= N - 1"
                ],
                "testcases": [
                    {
                        "input": "1\n5\n1 2 3 4 5\n5\n2 0 2\n0 0 2 1\n2 0 3\n1 0 2 2\n2 0 4",
                        "output": "14\n45\n53",
                        "explanation": "Test case 1:\n\nInitial array: [1, 2, 3, 4, 5]\n\nQuery 1 (2 0 2): Calculate sum of squares from index 0 to 2. 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14\n\nQuery 2 (0 0 2 1): Increment elements from index 0 to 2 by 1. Array becomes [2, 3, 4, 4, 5]\n\nQuery 3 (2 0 3): Calculate sum of squares from index 0 to 3. 2^2 + 3^2 + 4^2 + 4^2 = 4 + 9 + 16 + 16 = 45\n\nQuery 4 (1 0 2 2): Set elements from index 0 to 2 to 2. Array becomes [2, 2, 2, 4, 5]\n\nQuery 5 (2 0 4): Calculate sum of squares from index 0 to 4. 2^2 + 2^2 + 2^2 + 4^2 + 5^2 = 4 + 4 + 4 + 16 + 25 = 53"
                    },
                    {
                        "input": "2\n5\n1 10 5 1 3 \n4\n0 1 1 10\n1 2 2 6\n0 1 4 6\n2 0 4 \n6\n6 2 8 3 5 2 \n3\n0 1 2 2\n2 1 1 \n2 0 2",
                        "output": "951\n16\n152",
                        "explanation": "Test case 2:\n\nFirst sub-case:\nInitial array: [1, 10, 5, 1, 3]\nQuery 1 (0 1 1 10): Increment array[1] by 10.  Array: [1, 20, 5, 1, 3]\nQuery 2 (1 2 2 6): Set array[2] to 6. Array: [1, 20, 6, 1, 3]\nQuery 3 (0 1 4 6): Increment array[1], array[2], array[3], and array[4] by 6. Array: [1, 26, 12, 7, 9]\nQuery 4 (2 0 4): Sum of squares from index 0 to 4: 1^2 + 26^2 + 12^2 + 7^2 + 9^2 = 1 + 676 + 144 + 49 + 81 = 951\n\nSecond sub-case:\nInitial array: [6, 2, 8, 3, 5, 2]\nQuery 1 (0 1 2 2): Increment array[1] and array[2] by 2.  Array: [6, 4, 10, 3, 5, 2]\nQuery 2 (2 1 1): Sum of squares of array[1] which is 4^2 = 16\nQuery 3 (2 0 2): Sum of squares from index 0 to 2: 6^2 + 4^2 + 10^2 = 36 + 16 + 100 = 152"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we simply iterate over the array for each query?</p>",
            "<p>Use the segment tree with lazy propagation.</p>"
        ],
        "relatedTopics": [],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}