{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16565,
            "title": "Stack Implementation Using Array",
            "titleSlug": "stack-implementation-using-array_3210209",
            "content": "<h4 id=\"stack-is-a-data-structure-that-follows-the-lifo-last-in-first-out-principle-design-and-implement-a-stack-to-implement-the-following-functions\">Stack is a data structure that follows the LIFO (Last in First out) principle. Design and implement a stack to implement the following functions:</h4>\n\n<pre><code>1. Push(num): Push the given number in the stack if the stack is not full.\n\n2. Pop: Remove and print the top element from the stack if present, else print -1.\n\n3. Top: Print the top element of the stack if present, else print -1.\n\n4. isEmpty: Print 1 if the stack is empty, else print 0.\n\n5. isFull: Print 1 if the stack is full, else print 0.\n</code></pre>\n\n<p><br></p>\n\n<h4 id=\"you-have-been-given-m-operations-which-you-need-to-perform-in-the-stack-your-task-is-to-implement-all-the-functions-of-the-stack\">You have been given \u2018m\u2019 operations which you need to perform in the stack. Your task is to implement all the functions of the stack.</h4>\n\n<p><br></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>We perform the following operations on an empty stack which has capacity 2:\n\nWhen operation 1 1 is performed, we insert 1 in the stack.\n\nWhen operation 1 2  is performed, we insert 2 in the stack. \n\nWhen operation 2 is performed, we remove the top element from the stack and print 2.\n\nWhen operation 3 is performed, we print the top element of the stack, i.e., 3.\n\nWhen operation 4 is performed, we print 0 because the stack is not empty.\n\nWhen operation 5 is performed, we print 0 because the stack is size 1, which is not equal to its capacity.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains two single space-separated integers, \u2018n\u2019 and \u2018M\u2019, representing the size of the stack and number of operations, respectively.\n\nThe next \u2018m\u2019 lines contain operations that have to be performed on the stack. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print output of each query in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function. \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2 6\n1 1\n1 2\n2\n3\n4\n5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2 \n1\n0\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<pre><code>We perform the following operations on an empty stack which has capacity 2:\n\nWhen operation 1 1 is performed, we insert 1 in the stack.\n\nWhen operation 1 2  is performed, we insert 2 in the stack. \n\nWhen operation 2 is performed, we remove the top element from the stack and print 2.\n\nWhen operation 3 is performed, we print the top element of the stack, i.e., 1.\n\nWhen operation 4 is performed, we print 0 because the stack is not empty.\n\nWhen operation 5 is performed, we print 0 because the stack is size 1, which is not equal to its capacity.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>5 5\n1 2\n2\n2 \n1 1\n3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2 \n-1\n1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation For Sample Output 2 :</h5>\n\n<pre><code>We perform the following operations on an empty stack which has a capacity of 5:\n\nWhen operation 1 2 is performed, we insert 2 in the stack.\n\nWhen operation 2 is performed, we remove the top element from the stack and print 2.\n\nWhen operation 2 is performed, as the stack is empty, we print -1.\n\nWhen operation 1 1 is performed, we insert 1 in the stack.\n\nWhen operation 3 is performed, we print the top element of the stack, i.e., 1.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;n&#39;, &#39;m&#39; &lt;= 10^3\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 165,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design and implement a stack data structure that follows the LIFO (Last In, First Out) principle. The stack should support the following operations:\n\n1.  **Push(num):** Add the given number to the top of the stack, provided the stack is not full.\n2.  **Pop():** Remove and print the top element of the stack. If the stack is empty, print -1.\n3.  **Top():** Print the top element of the stack without removing it. If the stack is empty, print -1.\n4.  **isEmpty():** Print 1 if the stack is empty, and 0 otherwise.\n5.  **isFull():** Print 1 if the stack is full (at capacity), and 0 otherwise.\n\nYou are given a series of 'm' operations to perform on the stack. Implement these operations in the order they are provided.",
                "constraints": [
                    "1 <= n, m <= 10^3",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2 6\n1 1\n1 2\n2\n3\n4\n5",
                        "output": "2\n1\n0\n0",
                        "explanation": "The stack has a capacity of 2.  '1 1' pushes 1, '1 2' pushes 2. '2' pops 2. '3' prints the top element, which is 1. '4' prints 0 because the stack is not empty. '5' prints 0 because the current size (1) is not equal to the capacity (2)."
                    },
                    {
                        "input": "5 5\n1 2\n2\n2\n1 1\n3",
                        "output": "2\n-1\n1",
                        "explanation": "The stack has a capacity of 5. '1 2' pushes 2. '2' pops 2. '2' is called again, but the stack is now empty, so -1 is printed. '1 1' pushes 1. '3' prints the top element, which is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to store the current size of the stack.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity: O(1)\r\n    Space complexity: O(N)\r\n    \r\n    Where 'N' is the capacity of the stack.\r\n*/\r\n\r\n// Stack class.\r\nclass Stack {\r\n    \r\npublic:\r\n    \r\n    // Declare array.\r\n    vector<int> myStack;\r\n    \r\n    // Stack size.\r\n    int stackSize;\r\n    \r\n    // Maximum size.\r\n    int n;\r\n    \r\n    // Constructor function.\r\n    Stack(int n) {\r\n    \r\n        // Initialize class objects.\r\n        this -> myStack.resize(n);\r\n        this -> stackSize = -1;\r\n        this -> n = n;\r\n    }\r\n\r\n    // Push function.\r\n    void push(int num) {\r\n        \r\n        // Check if stack is not full.\r\n        if(stackSize != n - 1) {\r\n            \r\n            // Increment stack size and update array.\r\n            ++stackSize;\r\n            myStack[stackSize] = num;\r\n        }\r\n    }\r\n\r\n    // Pop function.\r\n    int pop() {\r\n\r\n        // Check if stack is not empty.\r\n        if(stackSize != -1) {\r\n            \r\n            // Decrease size and return element.\r\n            --stackSize;\r\n            return myStack[stackSize + 1];\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n    \r\n    // Top function.\r\n    int top() {\r\n        \r\n        // Check if stack is not empty.\r\n        if(stackSize != -1) {\r\n            \r\n            // Return element.\r\n            return myStack[stackSize];\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n    \r\n    // To check whether stack is empty or not.\r\n    int isEmpty() {\r\n        \r\n        // Check if stack is not empty.\r\n        if(stackSize != -1) {\r\n            \r\n            // Return element.\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }        \r\n    }\r\n    \r\n    // To check whether stack is full or not.\r\n    int isFull() {\r\n        \r\n        // Check if stack is not empty.\r\n        if(stackSize != n - 1) {\r\n            \r\n            // Return element.\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }        \r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "from typing import List\r\n\r\nclass Stack:\r\n    def __init__(self, n: int):\r\n        self.myStack = [0] * n\r\n        self.stackSize = -1\r\n        self.n = n\r\n    \r\n    def push(self, num: int):\r\n        if self.stackSize != self.n - 1:\r\n            self.stackSize += 1\r\n            self.myStack[self.stackSize] = num\r\n    \r\n    def pop(self) -> int:\r\n        if self.stackSize != -1:\r\n            self.stackSize -= 1\r\n            return self.myStack[self.stackSize + 1]\r\n        else:\r\n            return -1\r\n    \r\n    def top(self) -> int:\r\n        if self.stackSize != -1:\r\n            return self.myStack[self.stackSize]\r\n        else:\r\n            return -1\r\n    \r\n    def isEmpty(self) -> int:\r\n        if self.stackSize != -1:\r\n            return 0\r\n        else:\r\n            return 1\r\n    \r\n    def isFull(self) -> int:\r\n        if self.stackSize != self.n - 1:\r\n            return 0\r\n        else:\r\n            return 1    ",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity: O(1)\r\n    Space complexity: O(N)\r\n\r\n    Where 'N' is the capacity of the stack.\r\n*/\r\nimport java.util.ArrayList;\r\npublic class Solution{\r\n    static class Stack {\r\n        // Declare array.\r\n        ArrayList<Integer> myStack;\r\n\r\n        // Stack size.\r\n        int stackSize;\r\n\r\n        // Maximum size.\r\n        int n;\r\n\r\n        // Constructor function.\r\n        Stack(int n) {\r\n\r\n            // Initialize class objects.\r\n            myStack = new ArrayList<Integer>(n);\r\n            for (int i = 0; i < n; i++) {\r\n                myStack.add(0);\r\n            }\r\n            stackSize = -1;\r\n            this.n = n;\r\n        }\r\n\r\n        // Push function.\r\n        public void push(int num) {\r\n\r\n            // Check if stack is not full.\r\n            if (stackSize != n - 1) {\r\n\r\n                // Increment stack size and update array.\r\n                ++stackSize;\r\n                myStack.set(stackSize, num);\r\n            }\r\n        }\r\n\r\n        // Pop function.\r\n        public int pop() {\r\n\r\n            // Check if stack is not empty.\r\n            if (stackSize != -1) {\r\n\r\n                // Decrease size and return element.\r\n                --stackSize;\r\n                return myStack.get(stackSize + 1);\r\n            } else {\r\n                return -1;\r\n            }\r\n        }\r\n\r\n        // Top function.\r\n        public int top() {\r\n\r\n            // Check if stack is not empty.\r\n            if (stackSize != -1) {\r\n\r\n                // Return element.\r\n                return myStack.get(stackSize);\r\n            } else {\r\n                return -1;\r\n            }\r\n        }\r\n\r\n        // To check whether stack is empty or not.\r\n        public int isEmpty() {\r\n\r\n            // Check if stack is not empty.\r\n            if (stackSize != -1) {\r\n\r\n                // Return element.\r\n                return 0;\r\n            } else {\r\n                return 1;\r\n            }\r\n        }\r\n\r\n        // To check whether stack is full or not.\r\n        public int isFull() {\r\n\r\n            // Check if stack is not empty.\r\n            if (stackSize != n - 1) {\r\n\r\n                // Return element.\r\n                return 0;\r\n            } else {\r\n                return 1;\r\n            }\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}