{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10149,
            "title": "Stack Using Deque",
            "titleSlug": "stack-using-deque_1170512",
            "content": "<h4 id=\"design-a-data-structure-to-implement-a-stack-using-only-deque-double-ended-queue-it-should-support-the-following-operations\">Design a data structure to implement a stack, using only deque (double-ended queue). It should support the following operations :</h4>\n\n<pre><code>push(X): Pushes an element X into the stack. Returns true if the element is pushed into the stack, otherwise false.\n\npop(): Pops the top element from the stack. Returns -1 if the stack is empty, otherwise, returns the popped element.\n\ntop(): Returns the topmost element of the stack. In case the stack is empty, it returns -1.\n\nisEmpty() : Returns true if the stack is empty, otherwise false.\n\nsize(): Returns the number of elements currently present in the stack.\n</code></pre>\n\n<h4 id=\"following-type-of-queries-denote-these-operations\">Following type of queries denote these operations :</h4>\n\n<pre><code>Type 1 : for push(X) operation.\n\nType 2 : for pop() operation.\n\nType 3 : for top() operation.\n\nType 4 : for isEmpty() operation.\n\nType 5 : for size() operation.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018Q\u2019 number of queries to be performed. \n\nThe next \u2018Q\u2019 lines specify the type of operation/query to be performed on the data structure.\n\nEach query contains an integer \u2018P\u2019 denoting the type of query.\n\nFor the query of type 1, the integer \u2018P\u2019 is equal to 1, and it is followed by a single integer \u2018X\u2019 denoting the element on which operation is to be performed.\n\nFor the queries of type 2 to 5, a single integer \u2018P\u2019 is given, denoting the type of query.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each query, print the output returned after performing the corresponding operation on the data structure. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given functions.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= Q &lt;= 10^5 \n1 &lt;= P &lt;= 5\n1 &lt;= X &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>6\n4\n1 10\n1 20\n5\n2\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>True \nTrue\nTrue\n2\n20\n10\n</code></pre>\n\n<h5 id=\"explanation-1\">Explanation 1 :</h5>\n\n<pre><code>For the given input, we have the number of queries, Q = 6.\nOperations performed on the stack are as follows:\n\nisEmpty() : Stack is initially empty. So, this returns true.\npush(10) : Push element \u201810\u2019 into the stack. This returns true.\npush(20) : Push element \u201820\u2019 into the stack. This returns true.\nsize() : Stack has two elements in it. So, this returns 2.\npop() : Pop the top element from the stack. This returns 20.\ntop() : Return the topmost element of the stack i.e 10.\n\nThe following image shows the snapshots of the stack (implement using deque) after each operation:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/10149-sample-1-7971.PNG\" alt=\"Sample Testcase 1\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>5\n1 15\n1 25\n4\n1 30\n5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>True\nTrue\nFalse\nTrue\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 36,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a data structure to implement a stack using only a deque (double-ended queue). The stack should support the following operations:\n\n*   `push(X)`: Pushes element `X` onto the stack. Returns `true` if successful, `false` otherwise.\n*   `pop()`: Removes and returns the top element of the stack. Returns `-1` if the stack is empty.\n*   `top()`: Returns the top element of the stack without removing it. Returns `-1` if the stack is empty.\n*   `isEmpty()`: Returns `true` if the stack is empty, `false` otherwise.\n*   `size()`: Returns the number of elements currently in the stack.\n\nThe operations are represented by the following query types:\n\n*   Type 1: `push(X)`\n*   Type 2: `pop()`\n*   Type 3: `top()`\n*   Type 4: `isEmpty()`\n*   Type 5: `size()`",
                "constraints": [
                    "1 <= Q <= 10^5",
                    "1 <= P <= 5",
                    "1 <= X <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "6\n4\n1 10\n1 20\n5\n2\n3",
                        "output": "True\nTrue\nTrue\n2\n20\n10",
                        "explanation": "Initially, the stack is empty, so `isEmpty()` returns `True`. Then, `push(10)` and `push(20)` are performed, both returning `True`. The size becomes 2. Then `pop()` is called removing 20 and returns it. Finally, `top()` returns the current top element, which is 10."
                    },
                    {
                        "input": "5\n1 15\n1 25\n4\n1 30\n5",
                        "output": "True\nTrue\nFalse\nTrue\n3",
                        "explanation": "First, `push(15)` and `push(25)` are executed. Then `isEmpty()` which returns `False` because stack is not empty. The `push(30)` adds one more element to the stack. Lastly, `size()` returns the count of elements in the stack, which is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try using the operations of deque such that it works like a stack.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}