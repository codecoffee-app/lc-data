{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7919,
            "title": "Stack using queue",
            "titleSlug": "stack-using-queue_795152",
            "content": "<h4 id=\"implement-a-stack-data-structure-specifically-to-store-integer-data-using-two-queues\">Implement a Stack Data Structure specifically to store integer data using two Queues.</h4>\n\n<p><br></p>\n\n<h4 id=\"there-should-be-two-data-members-both-being-queues-to-store-the-data-internally-you-may-use-the-inbuilt-queue\">There should be two data members, both being Queues to store the data internally. You may use the inbuilt Queue.</h4>\n\n<p><br></p>\n\n<h4 id=\"implement-the-following-public-functions\">Implement the following public functions :</h4>\n\n<pre><code>1. Constructor:\nIt initializes the data members(queues) as required.\n\n2. push(data) :\nThis function should take one argument of type integer. It pushes the element into the stack and returns nothing.\n\n3. pop() :\nIt pops the element from the top of the stack and, in turn, returns the element being popped or deleted. In case the stack is empty, it returns -1.\n\n4. top :\nIt returns the element being kept at the top of the stack. In case the stack is empty, it returns -1.\n\n5. size() :\nIt returns the size of the stack at any given instance of time.\n\n6. isEmpty() :\nIt returns a boolean value indicating whether the stack is empty or not.\n</code></pre>\n\n<h5 id=\"operations-performed-on-the-stack\">Operations Performed on the Stack:</h5>\n\n<pre><code>Query-1(Denoted by an integer 1): Pushes an integer data to the stack. (push function)\n\nQuery-2(Denoted by an integer 2): Pops the data kept at the top of the stack and returns it to the caller. (pop function)\n\nQuery-3(Denoted by an integer 3): Fetches and returns the data being kept at the top of the stack but doesn&#39;t remove it, unlike the pop function. (top function)\n\nQuery-4(Denoted by an integer 4): Returns the current size of the stack. (size function)\n\nQuery-5(Denoted by an integer 5): Returns a boolean value denoting whether the stack is empty or not. (isEmpty function)\n</code></pre>\n\n<h5 id=\"example\">Example</h5>\n\n<pre><code>Operations: \n1 5\n1 10\n2\n3\n4\n\nEnqueue operation 1 5: We insert 5 at the back of the queue.\n  Queue: [5]\n\nEnqueue operation 1 10: We insert 10 at the back of the queue.\n  Queue: [5, 10]\n\nDequeue operation 2: We remove the element from the front of the queue, which is 5, and print it.\n  Output: 5\n  Queue: [10]\n\nPeek operation 3: We return the element present at the front of the queue, which is 10, without removing it.\n  Output: 10\n  Queue: [10]\n\nIsEmpty operation 4: We check if the queue is empty.\n  Output: False\n  Queue: [10]\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;Q\u2019, which denotes the number of queries to be run against each operation in the stack. \n\nThe next &#39;Q&#39; lines represent an operation that needs to be performed.\n\nFor the push operation, the input line will contain two integers separated by a single space, representing the type of the operation in integer and the integer data being pushed into the stack.\n\nFor the rest of the operations on the stack, the input line will contain only one integer value, representing the query being performed on the stack.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For Query-1, you do not need to return anything.\n\nFor Query-2, prints the data being popped from the stack.\n\nFor Query-3, print the data kept on the top of the stack.\n\nFor Query-4, print the current size of the stack.\n\nFor Query-5, print &#39;true&#39; or &#39;false&#39;(without quotes).\n\nOutput for every query will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>6\n1 13\n1 47\n4\n5\n2\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\nfalse\n47\n13\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h5>\n\n<pre><code>Here we have six queries in total.\n\nQuery 1: Integer 1 represents the push function. Hence we push element \u201813\u2019 onto the stack.\n\nQuery 2: Integer 1 represents the push function. Hence we push element \u201847\u2019 onto the stack.\n\nQuery 3: Integer 4 represents the size function. Hence we print the size of the stack that is 2.\n\nQuery 4: Integer 5 represents the isEmpty function. Hence here, we print false because the stack is not empty.\n\nQuery 5: Integer 2 represents the pop function. The stack contains element \u201847\u2019 at the top. We remove/pop \u201847\u2019 from the stack and print \u201847\u2019 on the new line.\n\nQuery 6: Integer 3 represents the top function. Because we have element \u201813\u2019 at the top of the stack, we print \u201813\u2019 on the new line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= Q &lt;= 1000\n1 &lt;= query type &lt;= 5\n-10^9 &lt;= data &lt;= 10^9 and data != -1\n\nWhere &#39;Q&#39; is the total number of queries being performed on the stack and data represents the integer pushed into the stack. \n\nTime Limit: 1 second\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 89,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a Stack data structure using two Queues.  The stack should store integer data. Use the built-in Queue data structure for internal storage. Implement the following functions:\n\n*   **Constructor:** Initializes the two internal Queues.\n*   **push(data):** Pushes an integer `data` onto the stack.\n*   **pop():** Pops and returns the top element of the stack. Returns -1 if the stack is empty.\n*   **top():** Returns the top element of the stack without removing it. Returns -1 if the stack is empty.\n*   **size():** Returns the number of elements in the stack.\n*   **isEmpty():** Returns `true` if the stack is empty, `false` otherwise.\n\n**Stack Operations:**\n\n*   `1 data`: Push `data` onto the stack.\n*   `2`: Pop the top element and print it.\n*   `3`: Print the top element.\n*   `4`: Print the size of the stack.\n*   `5`: Print 'true' if the stack is empty, 'false' otherwise.",
                "constraints": [
                    "1 <= Q <= 1000 (Q is the number of queries)",
                    "1 <= query type <= 5",
                    "-10^9 <= data <= 10^9 and data != -1"
                ],
                "testcases": [
                    {
                        "input": "6\n1 13\n1 47\n4\n5\n2\n3",
                        "output": "2\nfalse\n47\n13",
                        "explanation": "The sequence of operations is as follows:\n1. Push 13: Stack becomes [13]\n2. Push 47: Stack becomes [13, 47] (47 is on top)\n3. Size: Stack size is 2.\n4. isEmpty: Stack is not empty, so print false.\n5. Pop: Pop 47, print 47, Stack becomes [13]\n6. Top: Top element is 13, print 13."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try alternatively swapping elements between the two queues and make push operation costly.</p>",
            "<p>Try alternatively swapping elements between the two queues and make pop operation costly.</p>",
            "<p>Can we solve using a single queue?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity: O(Q*N)\r\n    For each push operation O(N); O(1) for all other operations.\r\n\r\n    Space complexity: O(N)\r\n\r\n    where Q is the number of queries, N denotes the maximum number of elements in the queue.\r\n*/\r\n\r\n#include <queue>\r\n\r\nclass Stack {\r\n   public:\r\n    queue<int> *q1;\r\n\r\n    // Constructor.\r\n    Stack() {  \r\n        q1 = new queue<int>();\r\n    }\r\n\r\n    int getSize() {\r\n        // Return the size of the queue 'q1'.\r\n        return q1->size();  \r\n    }\r\n\r\n    bool isEmpty() {\r\n        return getSize() == 0;\r\n    }\r\n\r\n    void push(int data) {\r\n        // Get the size of the queue.\r\n        int size = q1->size();  \r\n        // Enqueue the  new data to the queue.\r\n        q1->push(data);         \r\n\r\n        // Make the new data front of the queue.\r\n        for (int i = 0; i < size; i++)  \r\n        {\r\n            q1->push(q1->front());\r\n            q1->pop();\r\n        }\r\n    }\r\n\r\n    int pop() {\r\n        // If empty, return -1.\r\n        if (isEmpty()) {  \r\n            return -1;\r\n        }\r\n\r\n        // Simply dequeue from the queue q1.\r\n        int ans = q1->front();  \r\n        q1->pop();\r\n        return ans;\r\n    }\r\n\r\n    int top() {\r\n        if (isEmpty()) {\r\n            return -1;\r\n        }\r\n\r\n        int ans = q1->front();\r\n\r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n\tTime complexity: O(Q*N)\r\n\tFor each push operation O(N); O(1) for all other operations.\r\n\r\n\tSpace complexity: O(N)\r\n\r\n\twhere Q is the number of queries, N denotes the maximum number of elements in the queue.\r\n*/\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\npublic class Solution{\r\n    static class Stack {\r\n        public Queue<Integer> q1;\r\n\r\n        public Stack() {\r\n            this.q1 = new LinkedList<>();\r\n        }\r\n\r\n        public int getSize() {\r\n            // Return the size of the queue 'q1'.\r\n            return this.q1.size();\r\n        }\r\n\r\n        public boolean isEmpty() {\r\n            return this.getSize() == 0;\r\n        }\r\n\r\n        public void push(int data) {\r\n            int size = this.getSize();\r\n            this.q1.add(data);\r\n            // Make the new data front of the queue.\r\n            for (int i = 0; i < size; i++)\r\n            {\r\n                this.q1.add(this.q1.peek());\r\n                this.q1.poll();\r\n            }\r\n\r\n        }\r\n\r\n        public int pop() {\r\n            // If empty, return -1.\r\n            if (isEmpty()) {\r\n                return -1;\r\n            }\r\n            // Simply dequeue from the queue q1.\r\n            int ans = this.q1.peek();\r\n            this.q1.poll();\r\n            return ans;\r\n        }\r\n\r\n        int top() {\r\n            if (isEmpty()) {\r\n                return -1;\r\n            }\r\n\r\n            int ans = this.q1.peek();\r\n\r\n            return ans;\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time complexity: O(Q*N)\n    For each push operation O(N); O(1) for all other operations.\n\n    Space complexity: O(N)\n\n    where Q is the number of queries, N denotes the maximum number of elements in the queue.\n'''\n\nfrom collections import deque\n\nclass Stack:\n    def __init__(self):\n        self.q = deque()\n\n    def getSize(self) -> int:\n        # Return the size of the queue 'q1'.\n        return len(self.q)\n\n    def isEmpty(self) -> bool:\n        return self.getSize() == 0\n\n    def push(self, element: int) -> None:\n        size = len(self.q)\n        # Enqueue the  new data to the queue.\n        self.q.append(element)\n        for i in range(size):\n            # Make the new data front of the queue.\n            self.q.append(self.q[0])\n            self.q.popleft()\n\n    def pop(self) -> int:\n        if self.isEmpty():\n            return -1\n\n        ans = self.q[0]\n        # Simply dequeue from the queue q1.\n        self.q.popleft()\n        return ans\n\n    def top(self) -> int:\n        if self.isEmpty():\n            return -1\n\n        ans = self.q[0]\n        return ans\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}