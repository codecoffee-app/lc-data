{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7717,
            "title": "State Diagram",
            "titleSlug": "state-diagram_762942",
            "content": "<h4 id=\"given-a-state-diagram-in-the-form-of-a-linked-list-where-each-node-represents-a-unique-character-and-has-two-pointers-next-and-random-and-a-string-str-find-if-this-string-is-acceptable-by-the-state-diagram-or-not\">Given a state diagram in the form of a linked list, where each node represents a unique character and has two pointers(&#39;next&#39; and &#39;random&#39;), and a string &#39;str&#39;, find if this string is acceptable by the state diagram or not.</h4>\n\n<h4 id=\"the-state-diagram-looks-something-like-this\">The state diagram looks something like this:</h4>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-10-03-18-26-09-5036.png\" alt=\"image\">   </p>\n\n<h4 id=\"a-string-is-said-to-be-acceptable-if-and-only-if-it-matches-the-flow-of-states-character-by-character-and-ends-at-final-state-i-e-state-with-next-equal-to-null-for-the-below-diagram-c-is-the-final-state\">A string is said to be acceptable if and only if it matches the flow of states character by character and ends at final state i.e. state with next equal to &#39;null&#39;. For the below diagram &#39;c&#39; is the final state.</h4>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code> 1. The random pointer of a node may point to NULL or to itself.\n 2. All the nodes will represent unique characters.\n 3. All the characters will be the lowercase alphabets.\n 4. You can assume that the first state is the first character of the string. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer &#39;T&#39; that represents the number of test cases.\n\nThe first line of each test case will contain an integer \u2018N\u2019 denoting the number of states(nodes) in the state diagram.\n\nThe second line contains a string of length \u2018N\u2019 where the ith state represents the ith character of the string.\n\nThe third line contains &#39;N&#39; integers a1, a2,....,an, where ai denotes the position to which the ith node\u2019s random pointer points to. If the ith pointer points to NULL, then ai = -1.\n\nThe fourth line contains the string &#39;STR&#39;, which needs to be checked for the given state diagram.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print \u201cyes\u201d in a single line if the string is acceptable by the given state diagram, \u201cno\u201d otherwise. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt; =T &lt;= 10\n1 &lt;= N &lt;= 26\n1 &lt;= ai &lt;= N, or ai = -1(if pointing to NULL)\n1 &lt;= len(str) &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n4\nabcd\n1 4 2 4\nabcbddd\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>yes\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input1\">Explanation of the Sample Input1:</h5>\n\n<pre><code>Notice that the state with character \u2018b\u2019 has its random pointer pointing to the state with the character \u2018d\u2019, and the state with the character \u2018d\u2019 (which is also the final state) has its random pointer pointing to itself.\n\nThe transitions will be as follows:\n\n (next)  (next) (random) (random) (random) (random)\na -----&gt;b-----&gt;c-------&gt;b------&gt;d ------&gt;d ------&gt;d(final state)\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n3\nabc\n3 2 -1\nabcc\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>no\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a state diagram represented as a linked list where each node has a character, a 'next' pointer, and a 'random' pointer, determine if a given string 'str' is accepted by the state diagram. The string is acceptable if it matches the sequence of states, character by character, and ends at the final state (where 'next' is NULL).",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 26",
                    "1 <= ai <= N, or ai = -1 (if pointing to NULL)",
                    "1 <= len(str) <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 4, chars = \"abcd\", random_pointers = \"1 4 2 4\", s = \"abcbddd\"",
                        "output": "yes",
                        "explanation": "The state diagram allows the following transitions for the string 'abcbddd': a -> b -> c -> b -> d -> d -> d. The final state 'd' is reached, and 'd' is a final state (next pointer is NULL if we implemented according to the prompt)."
                    },
                    {
                        "input": "n = 3, chars = \"abc\", random_pointers = \"3 2 -1\", s = \"abcc\"",
                        "output": "no",
                        "explanation": "The state diagram allows the following transitions for the string 'abcc': a -> b -> c.  However, the last character 'c' is not repeated. Also since c is the final character according to the node creation, if the transition was a->b->c , the string should have stopped at 'abc'. Therefore the given input 'abcc' is invalid."
                    },
                    {
                        "input": "n = 1, chars = \"a\", random_pointers = \"-1\", s = \"a\"",
                        "output": "yes",
                        "explanation": "The state diagram consists of a single state 'a', which is also the final state since its 'next' pointer is NULL. The input string 'a' matches the starting and ending state."
                    },
                    {
                        "input": "n = 2, chars = \"ab\", random_pointers = \"2 -1\", s = \"ab\"",
                        "output": "yes",
                        "explanation": "The state diagram has two states, 'a' and 'b'. The string 'ab' transitions from a->b. 'b' is the final state."
                    },
                    {
                        "input": "n = 2, chars = \"ab\", random_pointers = \"2 -1\", s = \"a\"",
                        "output": "no",
                        "explanation": "The state diagram has two states, 'a' and 'b'. The string 'a' transitions from a-> which should lead to b.  'a' itself is not the final state"
                    },
                    {
                        "input": "n = 3, chars = \"abc\", random_pointers = \"2 3 1\", s = \"abcabc\"",
                        "output": "no",
                        "explanation": "The diagram goes like a->b->c (repeat). c is not the final, so the string is not accepted."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Implementation, try to do exactly as the problem statement says.</p>",
            "<p>Try to implement iteratively in linear time complexity.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}