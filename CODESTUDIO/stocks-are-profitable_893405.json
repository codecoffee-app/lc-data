{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8784,
            "title": "Stocks are profitable",
            "titleSlug": "stocks-are-profitable_893405",
            "content": "<h4 id=\"you-are-given-an-array-list-prices-where-the-elements-of-the-array-represent-the-prices-of-the-stock-as-they-were-yesterday-and-indices-of-the-array-represent-minutes-your-task-is-to-find-and-return-the-maximum-profit-you-can-make-by-buying-and-selling-the-stock-you-can-buy-and-sell-the-stock-only-once\">You are given an array/list &#39;prices&#39; where the elements of the array represent the prices of the stock as they were yesterday and indices of the array represent minutes. Your task is to find and return the maximum profit you can make by buying and selling the stock. You can buy and sell the stock only once.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You can\u2019t sell without buying first.\n</code></pre>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>For the given array [ 2, 100, 150, 120],\nThe maximum profit can be achieved by buying the stock at minute 0 when its price is Rs. 2 and selling it at minute 2 when its price is Rs. 150.\nSo, the output will be 148.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases to be run. Then the test cases follow.\n\nThe first line of each test case contains a single integer \u2018N\u2019, representing the size of the array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers representing the elements of the given array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer representing the maximum profit you can achieve. If the maximum profit is negative, print 0.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 10^4\n1 &lt;= ARR[i] &lt;= 10^9\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\n1 2 3 4\n4\n2 2 2 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case, it\u2019s optimal to buy the stock at minute 0 and sell it at minute 3 to get a maximum profit of 3.\n\nFor the second test case, the maximum profit will be 0 for all possible ways of buying and selling stock.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n6\n17 20 11 9 12 6\n4\n98 101 66 72\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n6\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 412,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of stock prices representing the prices at different minutes of yesterday, find the maximum profit you can make by buying and selling the stock *only once*. You must buy before you sell. Return 0 if no profit can be made.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 10^4",
                    "1 <= ARR[i] <= 10^9",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "4\n1 2 3 4",
                        "output": "3",
                        "explanation": "Buy at minute 0 (price 1) and sell at minute 3 (price 4) to get a profit of 3."
                    },
                    {
                        "input": "4\n2 2 2 2",
                        "output": "0",
                        "explanation": "No profit can be made in this case as all the prices are the same."
                    },
                    {
                        "input": "6\n17 20 11 9 12 6",
                        "output": "3",
                        "explanation": "Buy at minute 3 (price 9) and sell at minute 4 (price 12) to get a profit of 3."
                    },
                    {
                        "input": "4\n98 101 66 72",
                        "output": "6",
                        "explanation": "Buy at minute 2 (price 66) and sell at minute 3 (price 72) to get a profit of 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to check all the possible ways of buying and selling stocks.</p>",
            "<p>Can we calculate the maximum profit in a single iteration?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    Where N is the size of the array.\n*/\n\nint maximumProfit(vector<int> &prices){\n\n    // Variables to store the buying price and maximum profit\n    int buy = prices[0],maxProfit = 0;\n    int n = prices.size();\n\n    // Iterating over the array\n    for(int i = 1; i < n; i++){\n\n        /*\n            If current price is less than buying price\n            we will update buying price as the current price.\n        */\n        if(prices[i] < buy){\n            buy = prices[i];\n        }\n\n        /*\n            Else if selling at this price is more profitable,\n            then we will update out maximum profit.\n        */\n        else if( (prices[i] - buy) > maxProfit){\n            maxProfit = prices[i] - buy;\n        }\n    }\n    return maxProfit;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n\n    Where N is the size of the array.\n'''\n\ndef maximumProfit(prices):\n    \n    # Variables to store the buying price and maximum profit.\n    buy = prices[0]\n    maxProfit = 0\n    n = len(prices)\n    \n    # Iterating over the array.\n    for i in range(1, n):\n        \n        '''\n                If current price is less than buying price\n                we will update buying price as the current price.\n        '''\n        if prices[i] < buy:\n            buy = prices[i]\n            \n        \n        # Else if selling at this price is more profitable,\n        # then we will update out maximum profit.\n\n        elif prices[i]-buy > maxProfit:\n            maxProfit = prices[i] - buy\n        \n    \n    return maxProfit\n            \n        \n        \n        \n       \n            \n    ",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(1)\r\n\r\n    Where N is the size of the array.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n    public static int maximumProfit(ArrayList<Integer> prices){\r\n        \r\n        // Variables to store the buying price and maximum profit\r\n        int buy = prices.get(0),maxProfit = 0;\r\n        int n = prices.size();\r\n\r\n        // Iterating over the array\r\n        for(int i = 1; i < n; i++){\r\n\r\n            /*\r\n                If current price is less than buying price\r\n                we will update buying price as the current price.\r\n            */\r\n            if(prices.get(i) < buy){\r\n                buy = prices.get(i);\r\n            }\r\n            \r\n            /*\r\n                Else if selling at this price is more profitable,\r\n                then we will update out maximum profit.\r\n            */\r\n            else if( (prices.get(i) - buy) > maxProfit){\r\n                maxProfit = prices.get(i) - buy;\r\n            }\r\n        }\r\n        return maxProfit;\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}