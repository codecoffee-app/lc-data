{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12285,
            "title": "Stream of Characters",
            "titleSlug": "stream-of-characters_1459117",
            "content": "<h4 id=\"you-are-given-a-list-dictionary-containing-a-list-of-words-and-a-stream-of-characters-queries-your-task-is-to-choose-a-suitable-data-structure-to-implement-characterstreamchecker-class-described-as-follows\">You are given a list, \u2018DICTIONARY[]\u2019 containing a list of words and a stream of characters (queries). Your task is to choose a suitable data structure to implement \u2018CharacterStreamChecker\u2019 class described as follows:</h4>\n\n<h4 id=\"1-characterstreamchecker-dictionary-constructor-to-initialize-the-data-structure-with-given-words-present-in-dictionary\">1) \u2018CharacterStreamChecker(dictionary)\u2019: Constructor to initialize the data structure with given words present in \u2018DICTIONARY[]\u2019.</h4>\n\n<h4 id=\"2-solvequery-character-function-to-check-whether-the-string-formed-by-last-c-c-1-queried-characters-in-order-from-oldest-to-newest-including-the-character-just-queried-is-present-in-the-dictionary-if-yes-return-true-otherwise-return-false\">2) \u2018solveQuery(character)\u2019: Function to check whether the string formed by last \u2018C\u2019 (C &gt;= 1) queried characters (in order from oldest to newest, including the character just queried) is present in the \u2018DICTIONARY[]\u2019. If yes, return true. Otherwise, return false.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The \u2018DICTIONARY[]\u2019 contains only distinct strings.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 representing the number of strings in the list, \u2018DICTIONARY[]\u2019.\n\nThe second line of each test case contains \u2018N\u2019 space-separated strings present in the list, \u2018DICTIONARY[]\u2019.\n\nThe third line of each test case contains an integer \u2018Q\u2019 representing the number of queries (or characters in the stream).\n\nThe last line of each test case contains \u2018Q\u2019 space-separated characters.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each query in a test case, return true if the string formed by the last \u2018C\u2019 characters (C &gt;= 1) is present in the \u2018DICTIONARY[]\u2019. Otherwise, return false.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 200\n1 &lt;= |DICTIONARY[i]| &lt;= 200\n1 &lt;= Q &lt;= 400\n\u2018DICTIONARY[i]\u2019 and \u2018QUERY\u2019 contains only lowercase english letters.\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4\ni am a ninja\n9\na a m n i n j a m\n3\nmn p qrs \n7\nm n o p q r s\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>true true true false true false false true true\nfalse true false true false false true\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1 :</h5>\n\n<pre><code>Test Case 1 :  \nStream: \u2018a\u2019. String \u201ca\u201d is present in the \u2018DICTIONARY\u2019. Therefore, the output is true.\nStream: \u2018a\u2019, \u2018a\u2019. String \u201ca\u201d is present in the \u2018DICTIONARY\u2019. Therefore, the output is true.\nStream: \u2018a\u2019, \u2018a\u2019, \u2018m\u2019. String \u201cam\u201d is present in the \u2018DICTIONARY\u2019. Therefore, the output is true.\nStream: \u2018a\u2019, \u2018a\u2019, \u2018m\u2019, \u2018n\u2019. No string out of \u201cn\u201d, \u201cmn\u201d, \u201camn\u201d and \u201caamn\u201d is present in the \u2018DICTIONARY\u2019. Therefore, the output is false.\nStream: \u2018a\u2019, \u2018a\u2019, \u2018m\u2019, \u2018n\u2019, \u2018i\u2019. String \u201ci\u201d is present in the \u2018DICTIONARY\u2019. Therefore, the output is true.\nStream: \u2018a\u2019, \u2018a\u2019, \u2018m\u2019, \u2018n\u2019, \u2018i\u2019, \u2018n\u2019. No string out of \u201cn\u201d, \u201cin\u201d, \u201cnin\u201d, \u201cmnin\u201d, \u201camnin\u201d and \u201caamnin\u201d is present in the \u2018DICTIONARY\u2019. Therefore, the output is false.\nStream: \u2018a\u2019, \u2018a\u2019, \u2018m\u2019, \u2018n\u2019, \u2018i\u2019, \u2018n\u2019, \u2018j\u2019. No string out of \u201cj\u201d, \u201cnj\u201d, \u201cinj\u201d, \u201cninj\u201d, \u201cmninj\u201d, \u201camninj\u201d and \u201caamninj\u201d is present in the \u2018DICTIONARY\u2019. Therefore, the output is false.\n Stream: \u2018a\u2019, \u2018a\u2019, \u2018m\u2019, \u2018n\u2019, \u2018i\u2019, \u2018n\u2019, \u2018j\u2019, \u2018a\u2019. String \u201cninja\u201d is present in the \u2018DICTIONARY\u2019. Therefore, the output is true.\nStream: \u2018a\u2019, \u2018a\u2019, \u2018m\u2019, \u2018n\u2019, \u2018i\u2019, \u2018n\u2019, \u2018j\u2019, \u2018a\u2019, \u2018m\u2019. String \u201cam\u201d is present in the \u2018DICTIONARY\u2019. Therefore, the output is true.\n\n\nTest Case 2 : \nStream: \u2018m\u2019. String \u201cm\u201d is not present in the \u2018DICTIONARY\u2019. Therefore, the output is false.\nStream: \u2018m\u2019, \u2018n\u2019. String \u201cmn\u201d is present in the \u2018DICTIONARY\u2019. Therefore, the output is true.\nStream: \u2018m\u2019, \u2018n\u2019, \u2018o\u2019. No string out of \u201co\u201d, \u201cno\u201d, and \u201cmno\u201d is present in the \u2018DICTIONARY\u2019. Therefore, the output is false.\nStream: \u2018m\u2019, \u2018n\u2019, \u2018o\u2019, \u2018p\u2019. String \u201cp\u201d is present in the \u2018DICTIONARY\u2019. Therefore, the output is true.\nStream: \u2018m\u2019, \u2018n\u2019, \u2018o\u2019, \u2018p\u2019, \u2018q\u2019. No string out of \u201cq\u201d, \u201cpq\u201d, \u201copq\u201d, \u201cnopq\u201d and \u201cmnopq\u201d is present in the \u2018DICTIONARY\u2019. Therefore, the output is false.\nStream: \u2018m\u2019, \u2018n\u2019, \u2018o\u2019, \u2018p\u2019, \u2018q\u2019, \u2018r\u2019. No string out of \u201cr\u201d, \u201cqr\u201d, \u201cpqr\u201d, \u201copqr\u201d, \u201cnopqr\u201d and \u201cmnopqr\u201d is present in the \u2018DICTIONARY\u2019. Therefore, the output is false.\nStream: \u2018m\u2019, \u2018n\u2019, \u2018o\u2019, \u2018p\u2019, \u2018q\u2019, \u2018r\u2019, \u2018s\u2019. String \u201cqrs\u201d is present in the \u2018DICTIONARY\u2019. Therefore, the output is true.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5\nmnn nn nnnn nmmmm nmn\n7\nn n n m n m n\n4\na aa ab abc\n5\nc a b c a\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>false true true false true false true\nfalse true true true true\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of words (DICTIONARY) and a stream of characters (queries), implement the CharacterStreamChecker class. The class should have the following functionalities:\n\n1.  `CharacterStreamChecker(dictionary)`: Constructor to initialize the data structure with the given words in `DICTIONARY`.\n2.  `solveQuery(character)`:  This function processes each character from the input stream. For each character, it checks if any suffix of the current stream (formed by the last 'C' characters, where C >= 1) exists in the `DICTIONARY`. It should return `true` if any suffix of the current stream is present in the `DICTIONARY`, and `false` otherwise. The stream is formed by appending characters from oldest to newest.\n\nNote that the `DICTIONARY` contains distinct strings.",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= N <= 200 (Number of words in DICTIONARY)",
                    "1 <= |DICTIONARY[i]| <= 200 (Length of each word in DICTIONARY)",
                    "1 <= Q <= 400 (Number of queries/characters in the stream)",
                    "DICTIONARY[i] and QUERY contain only lowercase English letters.",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "4\ni am a ninja\n9\na a m n i n j a m",
                        "output": "true true true false true false false true true",
                        "explanation": "The stream is processed character by character. The output indicates whether the current suffix of the stream exists in the dictionary:\n\n- 'a': \"a\" is in the dictionary.\n- 'aa': \"a\" is in the dictionary.\n- 'aam': \"am\" is in the dictionary.\n- 'aamn': No suffix is in the dictionary.\n- 'aamni': \"i\" is in the dictionary.\n- 'aamnin': No suffix is in the dictionary.\n- 'aamninj': No suffix is in the dictionary.\n- 'aamninja': \"ninja\" is in the dictionary.\n- 'aamninjam': \"am\" is in the dictionary."
                    },
                    {
                        "input": "3\nmn p qrs\n7\nm n o p q r s",
                        "output": "false true false true false false true",
                        "explanation": "The stream is processed character by character. The output indicates whether the current suffix of the stream exists in the dictionary:\n\n- 'm': \"m\" is not in the dictionary.\n- 'mn': \"mn\" is in the dictionary.\n- 'mno': No suffix is in the dictionary.\n- 'mnop': \"p\" is in the dictionary.\n- 'mnopq': No suffix is in the dictionary.\n- 'mnopqr': No suffix is in the dictionary.\n- 'mnopqrs': \"qrs\" is in the dictionary."
                    },
                    {
                        "input": "5\nmnn nn nnnn nmmmm nmn\n7\nn n n m n m n",
                        "output": "false true true false true false true",
                        "explanation": "The stream is processed character by character. The output indicates whether the current suffix of the stream exists in the dictionary:\n\n- 'n': \"n\" is not in the dictionary.\n- 'nn': \"nn\" is in the dictionary.\n- 'nnn': \"nn\" is in the dictionary.\n- 'nnnm': No suffix is in the dictionary.\n- 'nnnmn': \"nmn\" is in the dictionary.\n- 'nnnmnm': No suffix is in the dictionary.\n- 'nnnmnmn': \"nmn\" is in the dictionary."
                    },
                    {
                        "input": "4\na aa ab abc\n5\nc a b c a",
                        "output": "false true true true true",
                        "explanation": "The stream is processed character by character. The output indicates whether the current suffix of the stream exists in the dictionary:\n\n- 'c': \"c\" is not in the dictionary.\n- 'ca': \"a\" is in the dictionary.\n- 'cab': \"ab\" is in the dictionary.\n- 'cabc': \"abc\" is in the dictionary.\n- 'cabca': \"a\" is in the dictionary."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use brute force to check for every string formed from the current character (in the backward direction) is present in the dictionary or not.</p>",
            "<p>This problem can be reduced to a prefix matching problem.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tries",
                "slug": "tries"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}