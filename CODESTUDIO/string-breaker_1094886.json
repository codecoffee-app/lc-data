{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9830,
            "title": "String Breaker",
            "titleSlug": "string-breaker_1094886",
            "content": "<h4 id=\"you-are-given-a-string-s-and-a-set-of-words-named-dictionary-you-can-perform-the-operation-of-breaking-the-given-string-s-in-any-possible-way-and-divide-the-given-string-into-any-number-of-subparts-your-task-is-to-break-the-given-string-s-such-that-all-the-subparts-are-present-in-the-dictionary-you-just-need-to-tell-the-minimum-number-of-times-you-need-to-break-the-string-s-in-order-to-accomplish-the-above-task\">You are given a string \u2018S\u2019 and a set of words named \u2018Dictionary\u2019. You can perform the operation of breaking the given string &#39;S&#39;, in any possible way and divide the given string into any number of subparts. Your task is to break the given string &#39;S&#39;, such that all the subparts are present in the Dictionary. You just need to tell the minimum number of times you need to break the string &#39;S&#39; in order to accomplish the above task.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. If string &#39;S&#39; is already present in the dictionary, then you don\u2019t need to break the string and you can print 0 in such cases.\n2. If it is impossible to complete the given task, then print -1.\n3. All the characters of string &#39;S&#39; and words inside the Dictionary only contain Uppercased English Alphabets.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of the input contains an integer &#39;T&#39;, denoting the number of test cases.\n\nThe first line of each test case contains a string &#39;S&#39;, denoting the given string.\nThe second line of each test case contains an integer &#39;N&#39;, denoting the size of the given set of words.\nThe next &#39;N&#39; lines contain a string denoting the ith word in the dictionary.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case print, the minimum number of times given string &#39;S&#39; need to be broken in such a way that all the subparts are present in the Dictionary. In cases, when it is impossible to break string S, print -1.\n\nPrint the output of each testcase in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^4\n1 &lt;= |S| &lt;= 50\n1 &lt;= |word[i]| &lt;= 50\n\u2018A\u2019 &lt;= S[i] &lt;= \u2018Z\u2019\n\nWhere |S| denotes the length of the given string, |word[i]| denotes the length of the ith word in the Dictionary.\nIt is guaranteed that all the words in the dictionary consist of only uppercase English alphabets from \u2018A\u2019 to \u2018Z\u2019.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\nCODESTUDIO\n5\nCOD\nCODE\nESTU\nDIO\nSTUDIO\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>We can break \u201cCODESTUDIO\u201d once and get subparts as \u201cCODE\u201d and \u201cSTUDIO\u201d.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\nBREAKME\n3\nBROKE\nME\nBREAKM\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2:</h5>\n\n<pre><code>Since there is no way by which we can break the given string and their subparts will be present in the Dictionary.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 35,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S' and a dictionary of words, determine the minimum number of breaks needed to split 'S' into subparts, such that each subpart is present in the dictionary. If 'S' is already in the dictionary, the answer is 0. If it's impossible to break 'S' into valid subparts, the answer is -1.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^4",
                    "1 <= |S| <= 50",
                    "1 <= |word[i]| <= 50",
                    "All characters in 'S' and words in the dictionary are uppercase English alphabets."
                ],
                "testcases": [
                    {
                        "input": "s = \"CODESTUDIO\", n = 5, dictionary = [\"COD\", \"CODE\", \"ESTU\", \"DIO\", \"STUDIO\"]",
                        "output": "1",
                        "explanation": "We can break \u201cCODESTUDIO\u201d once and get subparts as \u201cCODE\u201d and \u201cSTUDIO\u201d. Both these words exist in the dictionary."
                    },
                    {
                        "input": "s = \"BREAKME\", n = 3, dictionary = [\"BROKE\", \"ME\", \"BREAKM\"]",
                        "output": "-1",
                        "explanation": "There is no way to break \u201cBREAKME\u201d into subparts that are all present in the given dictionary."
                    },
                    {
                        "input": "s = \"ABCD\", n = 4, dictionary = [\"A\", \"B\", \"C\", \"D\"]",
                        "output": "3",
                        "explanation": "We need to break the string 3 times to get the subparts \"A\", \"B\", \"C\", and \"D\"."
                    },
                    {
                        "input": "s = \"ABC\", n = 1, dictionary = [\"ABC\"]",
                        "output": "0",
                        "explanation": "The string \"ABC\" is already present in the dictionary, so no breaks are needed."
                    },
                    {
                        "input": "s = \"ABAB\", n = 2, dictionary = [\"A\", \"B\"]",
                        "output": "3",
                        "explanation": "We can break the string into \"A\", \"B\", \"A\", and \"B\", requiring 3 breaks."
                    },
                    {
                        "input": "s = \"AAAAAAA\", n = 2, dictionary = [\"A\", \"AA\"]",
                        "output": "3",
                        "explanation": "We can break the string into 'AA', 'AA', 'AA', 'A', requiring 3 breaks. Other combinations may require more breaks, but we need to find the minimum. AAAA AAA (1 break).  AAA AAAA (1 break).  AA AA AA A (3 breaks) . A AA AA AA (3 breaks).  AAAA AAA (1 break). A A A A A A A (6 breaks).  A A AA A AA A. (5 breaks)"
                    },
                    {
                        "input": "s = \"LEETCODE\", n = 5, dictionary = [\"LEET\", \"CODE\", \"LEE\", \"TCODE\", \"E\"]",
                        "output": "1",
                        "explanation": "Breaking LEETCODE into LEET and CODE requires only one break and both are in the dictionary."
                    },
                    {
                        "input": "s = \"APPLEPENAPPLE\", n = 3, dictionary = [\"APPLE\", \"PEN\", \"APPLEPEN\"]",
                        "output": "1",
                        "explanation": "Breaking APPLEPENAPPLE into APPLEPEN and APPLE requires one break, and both words are in the dictionary."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try all possible ways to break the string.</p>",
            "<p>Store the minimum breaks required for each substring of S.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}