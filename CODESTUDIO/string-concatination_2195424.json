{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14588,
            "title": "String Concatination",
            "titleSlug": "string-concatination_2195424",
            "content": "<h4 id=\"you-are-given-an-array-of-string-arr-of-size-n-your-task-is-to-find-the-maximum-possible-length-of-string-with-unique-characters-formed-by-the-concatenation-of-sub-sequences-of-arr\">You are given an array of string \u2018arr\u2019 of size \u2018N\u2019. Your task is to find the maximum possible length of string, with unique characters formed by the concatenation of sub-sequences of \u2018arr\u2019.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>Consider \u2018arr\u2019 = [\u2018cha\u2019, \u2018r\u2019, \u2018act\u2019, \u2018ers\u2019], the strings formed with unique characters, [\u2018cha\u2019, \u2018r\u2019, \u2018act\u2019, \u2018ers\u2019, \u2018char\u2019, \u2018ract\u2019, \u2018chaers\u2019, \u2018acters\u2019]. The string with maximum length is \u2018chaers\u2019 and \u2018acters\u2019 with length 6. Hence the answer is 6.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code> The first line of input contains the integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains \u2018N\u2019 space-separated strings representing the element of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single integer representing the maximum length of the string of unique characters formed by the concatenation of sub-sequences of the array \u2018arr\u2019.\n\nPrint a separate line for each test case\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 26\n1 &lt;= |arr[i]| &lt;= 26\n\narr[i] contains only lowercase letters.\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\ncha r act ers\nabcdefghijklmnopqrstuvwxyz\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>6\n26\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For the first test case, arr = [\u2018cha\u2019, \u2018r\u2019, \u2018act\u2019, \u2018ers\u2019], the strings formed with unique characters, [\u2018cha\u2019, \u2018r\u2019, \u2018act\u2019, \u2018ers\u2019, \u2018char\u2019, \u2018ract\u2019, \u2018chaers\u2019, \u2018acters\u2019]. The string with maximum length is \u2018chaers\u2019 and \u2018acters\u2019 with length 6. Hence the answer is 6.\n\nFor the second test case, arr = [\u2018abcdefghijklmnopqrstuvwxyz\u2019], there is only one string in the array, and the string contains unique characters. The length of the string is 26. Hence the answer is 26.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nabc def f\nyy bkhwmpbiisbldzknpm\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>6   \n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of strings `arr`, find the maximum possible length of a string formed by concatenating a subsequence of strings from `arr`, such that the resulting concatenated string contains only unique characters.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 26",
                    "1 <= |arr[i]| <= 26",
                    "arr[i] contains only lowercase letters."
                ],
                "testcases": [
                    {
                        "input": "arr=['cha', 'r', 'act', 'ers']",
                        "output": "6",
                        "explanation": "The strings formed with unique characters include 'cha', 'r', 'act', 'ers', 'char', 'ract', 'chaers', and 'acters'. The string with the maximum length is 'chaers' or 'acters' with a length of 6."
                    },
                    {
                        "input": "arr=['abcdefghijklmnopqrstuvwxyz']",
                        "output": "26",
                        "explanation": "The input array contains a single string with all 26 lowercase letters, each appearing once. The length of this string is 26, which is the maximum possible length with unique characters."
                    },
                    {
                        "input": "arr=['abc', 'def', 'f']",
                        "output": "6",
                        "explanation": "The concatenation 'abcdef' results in a string of length 6 with all unique characters. Concatenating 'abc' and 'def' gives length 6, which is the maximum possible."
                    },
                    {
                        "input": "arr=['yy', 'bkhwmpbiisbldzknpm']",
                        "output": "0",
                        "explanation": "The string 'yy' does not have unique characters. The string 'bkhwmpbiisbldzknpm' does not have unique characters.  Therefore, the maximum length of the unique characters will be 0."
                    },
                    {
                        "input": "arr=['a', 'ab', 'abc', 'd', 'def', 'defg']",
                        "output": "10",
                        "explanation": "The combination of 'abc', 'd', and 'efg' gives the maximal length 10."
                    },
                    {
                        "input": "arr=['un','iq','ue']",
                        "output": "6",
                        "explanation": "The concatenation 'unique' forms a string of length 6 with all unique characters."
                    },
                    {
                        "input": "arr=['co','dil','ity']",
                        "output": "8",
                        "explanation": "The concatenation of 'codility' contains repeated character 'i'. 'co' + 'dil' gives the maximal valid length which is 5. But the length of codil is 5 as well. Hence the concatenation of 'dil' + 'ity' gives a length of 6 while 'co' and 'ity' gives a length of 5. However the solution is 'codil' which is length of 5 since we can't select overlapping arrays."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try all configurations of the strings.</p>",
            "<p>&nbsp;Try to optimise by using bitsets.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}