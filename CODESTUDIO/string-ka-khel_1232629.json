{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10540,
            "title": "STRING KA KHEL",
            "titleSlug": "string-ka-khel_1232629",
            "content": "<h4 id=\"ninja-started-a-gaming-shop-and-for-that-shop-he-is-planning-to-make-a-new-game-string-ka-khel-in-that-game-user-is-provided-with-n-number-of-strings-and-he-has-to-find-out-the-maximum-length-of-strings-he-can-form-by-joining-these-n-strings-for-joining-two-strings-there-is-a-condition-that-two-strings-will-only-join-if-the-last-character-of-the-first-string-is-same-as-the-last-character-of-the-second-string-if-the-user-will-find-out-the-correct-answer-he-will-be-given-coding-ninja-goodies-by-the-ninja\">Ninja started a gaming shop and for that shop, he is planning to make a new game \u2018String Ka Khel\u2019. In that game user is provided with \u2018N\u2019 number of strings and he has to find out the maximum length of strings he can form by joining these \u2018N\u2019 strings. For joining two strings there is a condition that two strings will only join if the last character of the first string is same as the last character of the second string. If the user will find out the correct answer he will be given Coding Ninja goodies by the Ninja.</h4>\n\n<h4 id=\"so-your-task-is-to-find-the-maximum-length-of-string-which-can-be-formed-by-joining-strings-according-to-the-given-condition-if-no-such-combination-exists-return-0-strings-only-contain-the-letter-b-and-r\">So your task is to find the maximum length of string which can be formed by joining strings according to the given condition. If no such combination exists return \u20180\u2019. Strings only contain the letter \u2018B\u2019 and \u2018R\u2019.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>The string is \u2018RR\u2019, \u2018RB\u2019 so we can combine \u2018RR\u2019 and \u2018RB\u2019 as the last character of \u2018RR\u2019 i.e \u2018R\u2019 matches with the first character of \u2018RB\u2019. But we cant combine \u2018RB\u2019 and \u2018RR\u2019 as the last character of \u2018RB\u2019 i.e \u2018B\u2019 doesn&#39;t matches with the first character of \u2018RR\u2019 i.e \u2018R\u2019 so our answer is &#39;4&#39;.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the number of strings.\n\nThe second line of each test case contains \u2018N\u2019 space-separated strings.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the maximum length of string which can be formed. In case no two strings can add simply print \u20180\u2019.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 100\n2 &lt;= N &lt;= 1000\n1 &lt;= | ST | &lt;= 1000    \n\nWhere \u2018T\u2019 represents the number of test cases and \u2018N\u2019 represents the total number of strings and &#39;|ST|&#39; represents the length of each of the \u2018N\u2019 strings.\n\nTime Limit: 1 second    \n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n3\nRBR BBR RRR\n2\nRRR BBB\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>9\n0\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h4>\n\n<pre><code>Test Case 1:\n\nSo according to this test case \u20183\u2019 strings are given \u2018RBR\u2019, \u2018BBR\u2019, \u2018RRR\u2019 so possible combinations are:\n\n\u2018RBR\u2019 + \u2018RRR\u2019 length is  6.\n\u2018RRR\u2019 + \u2018RBR\u2019 length is  6.\n\u2018BBR\u2019 + \u2018RBR\u2019 length is  6.\n\u2018BBR\u2019 + \u2018RRR\u2019 length is  6.\n\u2018BBR\u2019 + \u2018RBR\u2019 + \u2018RRR\u2019 length is  9.\n\u2018BBR\u2019 + \u2018RRR\u2019 + \u2018RBR\u2019 length is  9.\nSo we can choose between any two strings which have a length of \u20189\u2019, hence \u20189\u2019 is the maximum length possible.\n\nTest Case 2:\n\nThere are two possible ways : \n\u2018RRR\u2019,  \u2018BBB\u2019 can&#39;t be possible because the last char is first(\u2018R\u2019) != first char is second(\u2018B\u2019). \n&#39;BBB\u2019, \u2018RRR\u2019   can&#39;t be possible because the last char of the first string (\u2018B\u2019) != first char of the second string(\u2018R\u2019).\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n3\nBBR BBR BRB\n2\nB B\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>6\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of strings containing only the characters 'B' and 'R', find the maximum possible length of a string formed by concatenating the strings in the list, such that the last character of each string is the same as the first character of the string immediately following it. If no such combination exists, return 0.",
                "constraints": [
                    "1 <= T <= 100",
                    "2 <= N <= 1000",
                    "1 <= |ST| <= 1000"
                ],
                "testcases": [
                    {
                        "input": "n = 3, arr = [RBR, BBR, RRR]",
                        "output": "9",
                        "explanation": "Possible combinations include 'BBR' + 'RBR' + 'RRR' and 'BBR' + 'RRR' + 'RBR', both resulting in a total length of 9."
                    },
                    {
                        "input": "n = 2, arr = [RRR, BBB]",
                        "output": "0",
                        "explanation": "No combination is possible since the last character of 'RRR' (R) is not the same as the first character of 'BBB' (B), and vice versa."
                    },
                    {
                        "input": "n = 3, arr = [BBR, BBR, BRB]",
                        "output": "6",
                        "explanation": "The optimal combinations are BBR + BRB, or BRB + BBR resulting in length of 6"
                    },
                    {
                        "input": "n = 2, arr = [B, B]",
                        "output": "2",
                        "explanation": "The only possible combination is B+B, giving length 2."
                    },
                    {
                        "input": "n = 4, arr = [BR, RB, BR, RB]",
                        "output": "8",
                        "explanation": "Possible combination: BR + RB + BR + RB = length 8. Any permutation yields the same result"
                    },
                    {
                        "input": "n = 5, arr = [BBBB, RRRR, BBBB, RRRR, BBBB]",
                        "output": "0",
                        "explanation": "You can join BBBB with BBBB and RRRR with RRRR, but you can't connect BBBB with RRRR. Maximum length will be 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>Try to think of all possible permutations of the string array.</strong></p>",
            "<p><strong>Only four types of strings can be made \u2018RR\u2019, \u2018RB\u2019, \u2018BB\u2019, \u2018BR\u2019.</strong></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}