{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9102,
            "title": "String Maker",
            "titleSlug": "string-maker_975373",
            "content": "<h4 id=\"according-to-ancient-ninjas-string-making-is-a-form-of-art-there-are-various-methods-of-string-making-one-of-them-uses-previously-generated-strings-to-make-the-new-one-suppose-you-have-two-strings-a-and-b-to-generate-a-new-string-c-you-can-pick-a-subsequence-of-characters-from-a-and-a-subsequence-of-characters-from-b-and-then-merge-these-two-subsequences-to-form-the-new-string\">According to Ancient Ninjas, string making is a form of art. There are various methods of string making, one of them uses previously generated strings to make the new one. Suppose you have two strings A and B, to generate a new string C, you can pick a subsequence of characters from A and a subsequence of characters from B and then merge these two subsequences to form the new string.</h4>\n\n<h4 id=\"though-while-merging-the-two-subsequences-you-cannot-change-the-relative-order-of-individual-subsequences-what-this-means-is-suppose-there-are-two-characters-ai-and-aj-in-the-subsequence-chosen-from-a-where-i-j-then-after-merging-if-i-acquires-position-k-and-j-acquires-p-then-k-p-should-be-true-and-the-same-apply-for-subsequence-from-b\">Though while merging the two subsequences you cannot change the relative order of individual subsequences. What this means is - suppose there are two characters \u2018Ai\u2019 and \u2018Aj\u2019 in the subsequence chosen from \u2018A\u2019, where i &lt; j, then after merging, if i acquires position k and j acquires p then k &lt; p should be true and the same apply for subsequence from B.</h4>\n\n<h4 id=\"given-strings-a-b-c-can-you-count-the-number-of-ways-to-form-string-c-from-the-two-strings-a-and-b-by-the-method-described-above-two-ways-are-different-if-any-of-the-chosen-subsequences-is-different\">Given strings \u2018A\u2019, \u2018B\u2019, \u2018C\u2019 can you count the number of ways to form string \u2018C\u2019 from the two strings \u2018A\u2019 and \u2018B\u2019 by the method described above? Two ways are different if any of the chosen subsequences is different.</h4>\n\n<h4 id=\"as-the-answer-could-be-large-so-return-it-after-modulo-10-9-7\">As the answer could be large so return it after modulo 10 ^ 9 + 7.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>let A = a, B = ac, C = ac.\n\nNow In this example, we can take whole string B to form C or take substring {a} and substring {c} from A and B, respectively to make C. Hence the answer is 2.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases to be run. Then each test cases follow.\n\nThe first line of each test case contains a string \u2018A\u2019.\n\nThe Second line of the test case contains the string \u2018B\u2019.\n\nThe third line of the test case contains the string \u2018C\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer \u2018ANS\u2019 representing the number of ways.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function and return the answer.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= |A|, |B|, |C| &lt;= 100, where |S| represents the length of the String S.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\nab\nab\nab\nxy\nwz\nwxzy\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case, \nA = {ab}, B = {}\nA = {a}, B = {b}\nA = {b}, B = {a}\nA = {}, B = {ab}\nThese are the four possible combinations. Hence the answer is 4.\n\nFor the second test case, there is only one way possible i.e. A = {xy}, B = {wz}. Hence the answer is 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nabc\nabc\nabc\ntx\nqs\nxt\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>8\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given strings A, B, and C, determine the number of ways to form string C by merging a subsequence of A and a subsequence of B. The relative order of characters within each subsequence must be maintained during the merge. Return the count modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= |A|, |B|, |C| <= 100, where |S| represents the length of the String S.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "ab\nab\nab",
                        "output": "4",
                        "explanation": "The possible combinations are:\nA = {ab}, B = {}\nA = {a}, B = {b}\nA = {b}, B = {a}\nA = {}, B = {ab}"
                    },
                    {
                        "input": "xy\nwz\nwxzy",
                        "output": "1",
                        "explanation": "There is only one possible combination: A = {xy}, B = {wz}"
                    },
                    {
                        "input": "abc\nabc\nabc",
                        "output": "8",
                        "explanation": null
                    },
                    {
                        "input": "tx\nqs\nxt",
                        "output": "0",
                        "explanation": null
                    },
                    {
                        "input": "a\nac\nac",
                        "output": "2",
                        "explanation": "We can take the whole string B to form C or take substring {a} and substring {c} from A and B, respectively to make C."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try every possible way to form string <strong>C</strong>.</p>",
            "<p>Try to store the results in a list to avoid repetition.</p>",
            "<p>Store all the computed values in an array <strong>dp</strong>.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}