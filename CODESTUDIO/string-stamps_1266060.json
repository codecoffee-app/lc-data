{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10823,
            "title": "String Stamps",
            "titleSlug": "string-stamps_1266060",
            "content": "<h4 id=\"you-are-given-two-strings-s-and-target-of-length-n-and-a-string-stamp-of-length-m-s-is-initially-made-up-of-only-character-your-goal-is-to-convert-s-into-target-by-stamping-s-with-stamp-no-more-than-5-n-times\">You are given two strings &#39;S&#39;, and &#39;TARGET&#39; of length &#39;N&#39;, and a string &#39;STAMP&#39; of length &#39;M&#39;. &#39;S&#39; is initially made up of only character \u2018#\u2019. Your goal is to convert &#39;S&#39; into &#39;TARGET&#39; by stamping &#39;S&#39; with &#39;STAMP&#39; no more than 5 * &#39;N&#39; times.</h4>\n\n<h4 id=\"stamping-means-takes-a-substring-of-s-of-length-m-and-replace-it-with-stamp\">Stamping means takes a substring of &#39;S&#39; of length &#39;M&#39; and replace it with &#39;STAMP&#39;.</h4>\n\n<h4 id=\"return-the-sequence-of-moves-to-convert-s-into-target-each-move-represents-the-starting-index-of-the-substring-we-want-to-replace-if-it-is-not-possible-to-convert-s-into-target-return-an-array-containing-only-one-element-1\">Return the sequence of moves to convert &#39;S&#39; into &#39;TARGET&#39;. Each move represents the starting index of the substring we want to replace. If it is not possible to convert &#39;S&#39; into &#39;TARGET&#39; return an array containing only one element -1.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>&#39;S&#39;= \u201c#####\u201d &#39;TARGET&#39; = \u201cababbb\u201d &#39;STAMP&#39; = \u201cab\u201d\nStamping substring starting at 4 , &#39;S&#39; = \u201c####ab\u201d\nStamping substring starting at 3 , &#39;S&#39; = \u201c###abb\u201d\nStamping substring starting at 2 , &#39;S&#39; = \u201c##abbb\u201d  \nStamping substring starting at 0 , &#39;S&#39; = \u201cababbb\u201d\n\nAnswer = [4, 3, 2, 0]\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer T\u2019 denoting the number of test cases to run.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018M\u2019 denoting the length of &#39;TARGET&#39; and &#39;STAMP&#39; respectively.\n\nThe second line of each test case contains the string &#39;TARGET&#39;.\n\nThe third line of each test case contains the string &#39;STAMP&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the moves of size not greater than 5 * &#39;N&#39;, to convert &#39;S&#39; into &#39;TARGET&#39;.\n\nOutput for each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N, M &lt;= 1000 \nM &lt;= N\n\nTARGET and stamp have only lower case English characters.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n6 4\naabcaa\nabca\n1 1\nb\nz\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0 2 1\n-1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>In test case 1, after the first stamp, &#39;S&#39; = \u201cabca##\u201d.\n\nAfter the second stamp, &#39;S&#39; = \u201cababca\u201d.\n\nAfter the third test stamp, &#39;S&#39; = \u201caabcaa\u201d.\n\nIn test case 2, it is not possible to convert &#39;S&#39; into &#39;TARGET&#39;.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 2\nPqr\npq\n2 2\nmn\nmn\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>In test case 1, it is not possible to convert &#39;S&#39; into &#39;TARGET&#39;.\n\nIn test case 2, after the first stamp, &#39;S&#39; = \u201cmn\u201d.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a target string of length N and a stamp string of length M. Initially, you have a string S of length N consisting only of '#' characters. The goal is to transform S into the target string by repeatedly stamping S with the stamp string. Each stamp replaces a substring of S of length M with the stamp. Return a list of the starting indices of the stamps used to transform S into the target string. If it is impossible to transform S into the target string, return a list containing only the element -1. The number of stamps should not exceed 5 * N.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N, M <= 1000",
                    "M <= N",
                    "TARGET and stamp have only lowercase English characters."
                ],
                "testcases": [
                    {
                        "input": "n = 6, m = 2, target = \"ababbb\", stamp = \"ab\"",
                        "output": "[4, 3, 2, 0]",
                        "explanation": "S initially is '######'. Stamping at index 4: '####ab'. Stamping at index 3: '###abb'. Stamping at index 2: '##abbb'. Stamping at index 0: 'ababbb'."
                    },
                    {
                        "input": "n = 6, m = 4, target = \"aabcaa\", stamp = \"abca\"",
                        "output": "[0,2,1]",
                        "explanation": "S initially is '######'. Stamping at index 0: 'abca##'. Stamping at index 2: 'abcaabca'. Stamping at index 1 : aabcaa"
                    },
                    {
                        "input": "n = 1, m = 1, target = \"b\", stamp = \"z\"",
                        "output": "[-1]",
                        "explanation": "It is impossible to transform '#' into 'b' using 'z'."
                    },
                    {
                        "input": "n = 3, m = 2, target = \"Pqr\", stamp = \"pq\"",
                        "output": "[-1]",
                        "explanation": "It is impossible to transform '###' into 'Pqr' using 'pq' because of the case difference."
                    },
                    {
                        "input": "n = 2, m = 2, target = \"mn\", stamp = \"mn\"",
                        "output": "[0]",
                        "explanation": "Stamping at index 0 transforms '##' into 'mn'."
                    },
                    {
                        "input": "n = 5, m = 3, target = \"xyxyz\", stamp = \"xyz\"",
                        "output": "[2, 0]",
                        "explanation": "Stamping at index 2 transforms '#####' into '##xyz'. Stamping at index 0 transforms '##xyz' into 'xyxyz'."
                    },
                    {
                        "input": "n = 4, m = 2, target = \"aabb\", stamp = \"ab\"",
                        "output": "[2, 0]",
                        "explanation": "Stamping at index 2 transforms '####' into '##ab'. Stamping at index 0 transforms '##ab' into 'aabb'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we do all the stamps in reverse order to convert \u2018TARGET\u2019 into a string of all \u2018#\u2019?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}