{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7187,
            "title": "String Transformation",
            "titleSlug": "string-transformation_630421",
            "content": "<h4 id=\"given-a-string-str-of-length-n-you-have-to-create-a-new-string-by-performing-the-following-operation\">Given a string (STR) of length N, you have to create a new string by performing the following operation:</h4>\n\n<h4 id=\"take-the-smallest-character-from-the-first-k-characters-of-str-remove-it-from-str-and-append-it-to-the-new-string\">Take the smallest character from the first &#39;K&#39; characters of STR, remove it from STR and append it to the new string.</h4>\n\n<h4 id=\"you-have-to-perform-this-operation-until-str-is-empty\">You have to perform this operation until STR is empty.</h4>\n\n<h5 id=\"note\">\u00a0Note:</h5>\n\n<pre><code>The input string(STR) will not contain any spaces.\n\nAssume that all characters in STR are lower case letters.\n\nIf characters less than &#39;K&#39; remain, then append them in a sorted way to the new string.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Let the input string be &quot;edcba&quot; with K = 4.\n\nLet the new string to be formed is initially empty, newString = &quot;&quot;.\nThe first set of 4 characters are, (&#39;e&#39;, &#39;d&#39;, &#39;c&#39;, &#39;b&#39;)\nOut of these 4 characters, the smallest one is &#39;b&#39; and hence we add it to the newString and it becomes, \nnewString = &quot;b&quot;\n\nThe next set of 4 characters are, (&#39;e&#39;, &#39;d&#39;, &#39;c&#39;, &#39;a&#39;)\nOut of these 4 characters, the smallest one is &#39;a&#39; and hence we add it to the newString and it becomes, \nnewString = &quot;ba&quot;\n\nNow we are left with &quot;edc&quot; and since we can&#39;t get a window of size 4, we sort them in the increasing order and append them to the newString.\n\nHence, newString thus formed will be &quot;bacde&quot;.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first and the only line of each test case or query contains a string(STR) and an integer(K) separated by a single space.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the new string formed by applying the operations.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given functions.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= t &lt;= 100\n0 &lt;= N &lt;= 10^5\n1 &lt;= K &lt;= 10^5\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\nbadce 2\nabe 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>abcde\nabe\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the 1st test case:\nThe smallest character of the string is &#39;a&#39;, followed by &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, and &#39;e&#39; respectively. Hence the output string is &quot;abcde&quot;.\n\nFor the 2st test case:\nThe smallest character of the string is &#39;a&#39;, followed by &#39;b&#39;, and &#39;e&#39; respectively. Hence the output string is &quot;abe&quot;.    \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\ncodingninjas 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>cdigninjanos\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string (STR) of length N, create a new string by repeatedly taking the smallest character from the first K characters of STR, removing it from STR, and appending it to the new string. Repeat this process until STR is empty. If fewer than K characters remain in STR, sort the remaining characters and append them to the new string. The input string will not contain spaces, and all characters will be lowercase letters.",
                "constraints": [
                    "1 <= t <= 100",
                    "0 <= N <= 10^5",
                    "1 <= K <= 10^5",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "badce 2",
                        "output": "abcde",
                        "explanation": "The smallest character of the string is 'a', followed by 'b', 'c', 'd', and 'e' respectively. Hence the output string is \"abcde\"."
                    },
                    {
                        "input": "abe 2",
                        "output": "abe",
                        "explanation": "The smallest character of the string is 'a', followed by 'b', and 'e' respectively. Hence the output string is \"abe\"."
                    },
                    {
                        "input": "codingninjas 3",
                        "output": "cdigninjanos",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try exploring every window of K elements and try to pick the smallest character.</p>",
            "<p>Think of a Data Structure that can tell you the smallest character from the current pool of K characters faster</p>"
        ],
        "relatedTopics": [
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}