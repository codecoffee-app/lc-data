{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16461,
            "title": "Strings Sum",
            "titleSlug": "strings-sum_3161877",
            "content": "<h4 id=\"you-are-given-two-non-negative-integers-num1-and-num2-in-the-form-of-strings-return-the-sum-of-both-strings\">You are given two non-negative integers, \u2018NUM1\u2019 and \u2018NUM2\u2019, in the form of strings. Return the sum of both strings.</h4>\n\n<p><br></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Let \u2018NUM1\u2019 be: \u201c5\u201d\nLet \u2018NUM2\u2019 be: \u201c21\u201d\nThe sum of both numbers will be: \u201c26\u201d.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T\u2019, denoting the number of test cases.\n\nThe first line of each test case contains two strings, \u2018NUM1\u2019 and \u2018NUM2\u2019, representing the two non-negative integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the sum of both the strings.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= |NUM1|, |NUM2| &lt;= 10^5\n\nNUM1 and NUM2 don\u2019t have leading zeroes.\nWhere |NUM1| and |NUM2| denote the length of the respective strings.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5 21\n10 9\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>26\n19\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<pre><code>For the first test case:\nThe sum of both numbers will be: \u201c26\u201d.\n\nFor the second test case:\nThe sum of both numbers will be: \u201c19\u201d.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n9 9\n21 10\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>18\n31\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 97,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two non-negative integers, NUM1 and NUM2, represented as strings, calculate and return their sum, also as a string.  Ensure that NUM1 and NUM2 do not have leading zeroes.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |NUM1|, |NUM2| <= 10^5",
                    "NUM1 and NUM2 don't have leading zeroes.",
                    "|NUM1| and |NUM2| denote the length of the respective strings.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 21",
                        "output": "26",
                        "explanation": "The sum of 5 and 21 is 26."
                    },
                    {
                        "input": "10 9",
                        "output": "19",
                        "explanation": "The sum of 10 and 9 is 19."
                    },
                    {
                        "input": "9 9",
                        "output": "18",
                        "explanation": "The sum of 9 and 9 is 18."
                    },
                    {
                        "input": "21 10",
                        "output": "31",
                        "explanation": "The sum of 21 and 10 is 31."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to add the characters of the strings individually.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity: O(|NUM1| + |NUM2|)\r\n    Space complexity: O(1)\r\n    \r\n    Where |NUM1| and |NUM2| are the length of the strings.\r\n*/\r\n\r\n#include <algorithm>\r\n\r\nstring stringSum(string &num1, string &num2) {\r\n    \r\n    // Indices to traverse the strings.\r\n    int idx1 = num1.size() - 1;\r\n    int idx2 = num2.size() - 1;\r\n    \r\n    // To store the sum.\r\n    string res = \"\";\r\n    \r\n    // To store the carry.\r\n    int carry = 0;\r\n    \r\n    // Add characters individually,\r\n    while(idx1 >= 0 || idx2 >= 0) {\r\n        \r\n        // To store sum of current character.\r\n        int localSum = 0;\r\n        \r\n        // Check if num1 is present.\r\n        if(idx1 >= 0) {\r\n            \r\n            // Add current character.\r\n            localSum += num1[idx1] - '0';\r\n            --idx1;\r\n        }\r\n        \r\n        // Check if num2 is present.\r\n        if(idx2 >= 0) {\r\n            \r\n            // Add current character.\r\n            localSum += num2[idx2] - '0';\r\n            --idx2;\r\n        }\r\n        \r\n        // Add carry to the sum.\r\n        localSum += carry;\r\n        \r\n        carry = 0;\r\n        \r\n        // Check if sum is greater than 9.\r\n        if(localSum > 9) {\r\n            \r\n            // Update sum and carry.\r\n            localSum %= 10;\r\n            carry = 1;\r\n        }\r\n        \r\n        // Update the result.\r\n        res += (localSum % 10) + '0';\r\n    }\r\n    \r\n    // If carry is present.\r\n    if(carry) {\r\n        res += '1';\r\n    }\r\n    \r\n    // Reverse the string.\r\n    reverse(res.begin(), res.end());\r\n    \r\n    return res;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "\n/*\n\tTime complexity: O(|NUM1| + |NUM2|)\n\tSpace complexity: O(1)\n\t\n\tWhere |NUM1| and |NUM2| are the length of the strings.\n*/\n\npublic class Solution {\n\n\tpublic static String reverseString(String str) {\n\n\t\tif (str.length() == 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tString newStr = \"\";\n\t\tnewStr += str.charAt(str.length() - 1) + reverseString(str.substring(0, str.length() - 1));\n\t\treturn newStr;\n\t}\n\n\tpublic static String stringConcatenation(String num1, String num2) {\n\n\t\t// Indices to traverse the strings.\n\t\tint idx1 = num1.length() - 1;\n\t\tint idx2 = num2.length() - 1;\n\n\t\t// To store the sum.\n\t\tString res = \"\";\n\n\t\t// To store the carry.\n\t\tint carry = 0;\n\n\t\t// Add characters individually,\n\t\twhile (idx1 >= 0 || idx2 >= 0) {\n\n\t\t\t// To store sum of current character.\n\t\t\tint localSum = 0;\n\n\t\t\t// Check if num1 is present.\n\t\t\tif (idx1 >= 0) {\n\n\t\t\t\t// Add current character.\n\t\t\t\tlocalSum += num1.charAt(idx1) - '0';\n\t\t\t\t--idx1;\n\t\t\t}\n\n\t\t\t// Check if num2 is present.\n\t\t\tif (idx2 >= 0) {\n\n\t\t\t\t// Add current character.\n\t\t\t\tlocalSum += num2.charAt(idx2) - '0';\n\t\t\t\t--idx2;\n\t\t\t}\n\n\t\t\t// Add carry to the sum.\n\t\t\tlocalSum += carry;\n\n\t\t\tcarry = 0;\n\n\t\t\t// Check if sum is greater than 9.\n\t\t\tif (localSum > 9) {\n\n\t\t\t\t// Update sum and carry.\n\t\t\t\tlocalSum %= 10;\n\t\t\t\tcarry = 1;\n\t\t\t}\n\n\t\t\t// Update the result.\n\t\t\tres += (localSum % 10);\n\t\t}\n\n\t\t// If carry is present.\n\t\tif (carry == 1) {\n\t\t\tres += '1';\n\t\t}\n\n\t\t// Reverse the string.\n\n\t\treturn reverseString(res);\n\t}\n\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time complexity: O(|NUM1| + |NUM2|)\n    Space complexity: O(1)\n    \n    Where |NUM1| and |NUM2| are the length of the strings.\n'''\n\ndef stringSum(num1: str, num2: str) -> str:\n    \n    # Indices to traverse the strings.\n    idx1 = len(num1) - 1\n    idx2 = len(num2) - 1\n    \n    # To store the sum.\n    res = \"\"\n    \n    # To store the carry.\n    carry = 0\n    \n    # Add characters individually,\n    while idx1 >= 0 or idx2 >= 0:\n        \n        # To store sum of current character.\n        localSum = 0\n        \n        # Check if num1 is present.\n        if idx1 >= 0:\n            \n            # Add current character.\n            localSum += int(num1[idx1])\n            idx1 -= 1\n        \n        # Check if num2 is present.\n        if idx2 >= 0:\n            \n            # Add current character.\n            localSum += int(num2[idx2])\n            idx2 -= 1\n        \n        # Add carry to the sum.\n        localSum += carry\n        \n        carry = 0\n        \n        # Check if sum is greater than 9.\n        if localSum > 9:\n            \n            # Update sum and carry.\n            localSum %= 10\n            carry = 1\n        \n        # Update the result.\n        res += str(localSum % 10)\n    \n    # If carry is present.\n    if carry:\n        res += '1'\n    \n    # Reverse the string.\n    res = \"\".join(reversed(res))\n    \n    return res\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}