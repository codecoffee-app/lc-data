{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14532,
            "title": "Strong Friendship",
            "titleSlug": "strong-friendship_2188787",
            "content": "<pre><code>Table: Friendship\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| user1_id    | int  |\n| user2_id    | int  |\n+-------------+------+\n(user1_id, user2_id) is the primary key for this table.\nEach row of this table indicates that the users user1_id and user2_id are friends.\nNote that user1_id &lt; user2_id.\n\n\nA friendship between a pair of friends x and y is strong if x and y have at least three common friends.\n\nWrite an SQL query to find all the strong friendships.\n\nNote that the result table should not contain duplicates with user1_id &lt; user2_id.\n\nReturn the result table in any order.\n\nThe query result format is in the following example:\n\n\n\nFriendship table:\n+----------+----------+\n| user1_id | user2_id |\n+----------+----------+\n| 1        | 2        |\n| 1        | 3        |\n| 2        | 3        |\n| 1        | 4        |\n| 2        | 4        |\n| 1        | 5        |\n| 2        | 5        |\n| 1        | 7        |\n| 3        | 7        |\n| 1        | 6        |\n| 3        | 6        |\n| 2        | 6        |\n+----------+----------+\n\nResult table:\n+----------+----------+---------------+\n| user1_id | user2_id | common_friend |\n+----------+----------+---------------+\n| 1        | 2        | 4             |\n| 1        | 3        | 3             |\n+----------+----------+---------------+\nUsers 1 and 2 have 4 common friends (3, 4, 5, and 6).\nUsers 1 and 3 have 3 common friends (2, 6, and 7).\nWe did not include the friendship of users 2 and 3 because they only have two common friends (1 and 6).\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -5,
            "dislikes": "NA",
            "rephrased": {
                "body": "The `Friendship` table represents friendships between users, where `user1_id` and `user2_id` form the primary key and `user1_id` is always less than `user2_id`. A friendship is considered 'strong' if the two users involved share at least three common friends.  Write an SQL query to find all strong friendships. The result should not contain duplicate pairs (where `user1_id` < `user2_id`).",
                "constraints": [],
                "testcases": [
                    {
                        "input": "Friendship table:\n+----------+----------+\n| user1_id | user2_id |\n+----------+----------+\n| 1        | 2        |\n| 1        | 3        |\n| 2        | 3        |\n| 1        | 4        |\n| 2        | 4        |\n| 1        | 5        |\n| 2        | 5        |\n| 1        | 7        |\n| 3        | 7        |\n| 1        | 6        |\n| 3        | 6        |\n| 2        | 6        |\n+----------+----------+",
                        "output": "+----------+----------+---------------+\n| user1_id | user2_id | common_friend |\n+----------+----------+---------------+\n| 1        | 2        | 4             |\n| 1        | 3        | 3             |\n+----------+----------+---------------+",
                        "explanation": "Users 1 and 2 have 4 common friends (3, 4, 5, and 6).\nUsers 1 and 3 have 3 common friends (2, 6, and 7).\nThe friendship of users 2 and 3 is not included because they only have two common friends (1 and 6)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}