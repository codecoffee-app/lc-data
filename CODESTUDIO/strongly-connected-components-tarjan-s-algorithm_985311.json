{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9441,
            "title": "Strongly Connected Components (Tarjan\u2019s Algorithm)",
            "titleSlug": "strongly-connected-components-tarjan-s-algorithm_985311",
            "content": "<h4 id=\"you-are-given-an-unweighted-directed-graph-of-v-vertices-and-e-edges-your-task-is-to-print-all-the-strongly-connected-components-sccs-present-in-the-graph\">You are given an unweighted directed graph of &#39;V&#39; vertices and &#39;E&#39; edges. Your task is to print all the strongly connected components (SCCs) present in the graph.</h4>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The very first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of every test case contains two space-separated integers \u2018V\u2019 and \u2018E\u2019 denoting the number of vertices and the number of edges present in the graph. \n\nThe next \u2018E\u2019 lines contain two space-separated integers \u2018a\u2019 and \u2018b\u2019 denoting a directed edge from vertex \u2018a\u2019 to \u2018b\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Use zero-based indexing for the vertices.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print space-separated vertices present in the strongly connected components of the graph, print the output for one SCC on each line.\n\nThe order of sequence does not matter.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 300 \n1 &lt;= &#39;V&#39; &lt;= 2000\n&#39;V&#39; - 1 &lt;= &#39;E&#39; &lt;= 2000\n0 &lt;= &#39;a, b&#39; &lt; &#39;V&#39;\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n5 6\n0 1\n1 2\n1 4\n2 3\n3 2\n4 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0 1 4 \n2 3 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>For the first test case, the graph is shown below. There are two SCCs in the graph, which are enclosed in the boxes as shown in the image below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/9441-sample-testcase1-graph1-6819.jpg\" alt=\"sample graph 1\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 0\n4 4\n0 1\n1 2\n2 3\n3 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0\n0\n1 2 3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2:</h5>\n\n<pre><code>For the first test case, the graph has 1 node(0) but there are no edges, therefore only 1 SCC exists and that is {0}.\n\nFor the second test case, one SCC is {0} and the other is {1, 2, 3}. Therefore the answer is 0, 1 2 3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 34,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed graph represented by the number of vertices 'V' and a list of directed edges 'E', identify and return all the strongly connected components (SCCs) present in the graph. A strongly connected component is a subgraph where every vertex is reachable from every other vertex within the subgraph.",
                "constraints": [
                    "1 <= 'T' <= 300 (Number of test cases)",
                    "1 <= 'V' <= 2000 (Number of vertices)",
                    "'V' - 1 <= 'E' <= 2000 (Number of edges)",
                    "0 <= 'a, b' < 'V' (Edge endpoints, using zero-based indexing)"
                ],
                "testcases": [
                    {
                        "input": "n = 5, edges = [[0, 1], [1, 2], [1, 4], [2, 3], [3, 2], [4, 0]]",
                        "output": "[[0, 1, 4], [2, 3]]",
                        "explanation": "The graph contains two strongly connected components: {0, 1, 4} and {2, 3}.  The order within the SCCs and the order of the SCCs themselves do not matter."
                    },
                    {
                        "input": "n = 1, edges = []",
                        "output": "[[0]]",
                        "explanation": "A single node with no edges forms a strongly connected component by itself."
                    },
                    {
                        "input": "n = 4, edges = [[0, 1], [1, 2], [2, 3], [3, 1]]",
                        "output": "[[0], [1, 2, 3]]",
                        "explanation": "The graph contains one single node SCC {0}, and a cycle {1,2,3} which forms another SCC."
                    },
                    {
                        "input": "n = 3, edges = [[0,1],[1,2],[2,0]]",
                        "output": "[[0,1,2]]",
                        "explanation": "The graph represents a cycle amongst all nodes, so they all constitute a single SCC."
                    },
                    {
                        "input": "n = 5, edges = [[0, 1], [1, 2], [2, 3], [3, 4]]",
                        "output": "[[0], [1], [2], [3], [4]]",
                        "explanation": "Each node is only connected one way. Hence, they are all individual SCCs."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>In order to find the strongly connected components, Tarjan\u2019s Algorithm can be used.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}