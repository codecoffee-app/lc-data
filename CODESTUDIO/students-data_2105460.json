{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14302,
            "title": "Students Data",
            "titleSlug": "students-data_2105460",
            "content": "<p>Insert below student details in students table and print all data of table. <br></p>\n\n<pre><code>+---------+--------+-------+\n| ID  |  Name       | Gender|\n+---------+--------+-------+\n|   3     |  Kim    |   F   |\n|   4     | Molina  |   F   |\n|   5     | Dev     |   M   |\n+---------+--------+-------+\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 248,
            "dislikes": "NA",
            "rephrased": {
                "body": "Populate a `students` table with the provided student data (ID, Name, Gender) and then retrieve and display all records from the table.",
                "constraints": [
                    "The `students` table should have columns for ID (integer), Name (string), and Gender (character).",
                    "Ensure that the data types for each column are appropriate for the data being inserted.",
                    "The ID column should be unique."
                ],
                "testcases": [
                    {
                        "input": "table_name = 'students', data = [{'ID': 3, 'Name': 'Kim', 'Gender': 'F'}, {'ID': 4, 'Name': 'Molina', 'Gender': 'F'}, {'ID': 5, 'Name': 'Dev', 'Gender': 'M'}]",
                        "output": "+---------+--------+-------+\n| ID  |  Name       | Gender|\n+---------+--------+-------+\n|   3     |  Kim    |   F   |\n|   4     |  Molina  |   F   |\n|   5     |  Dev     |   M   |\n+---------+--------+-------+",
                        "explanation": "Inserts the given student data into the 'students' table and then retrieves and prints all the records, demonstrating successful insertion and retrieval."
                    },
                    {
                        "input": "table_name = 'students', data = [{'ID': 1, 'Name': 'Alice', 'Gender': 'F'}, {'ID': 2, 'Name': 'Bob', 'Gender': 'M'}], additional_data = [{'ID': 3, 'Name': 'Kim', 'Gender': 'F'}, {'ID': 4, 'Name': 'Molina', 'Gender': 'F'}, {'ID': 5, 'Name': 'Dev', 'Gender': 'M'}]",
                        "output": "+---------+--------+-------+\n| ID  |  Name       | Gender|\n+---------+--------+-------+\n|   1     |  Alice  |   F   |\n|   2     |  Bob    |   M   |\n|   3     |  Kim    |   F   |\n|   4     |  Molina  |   F   |\n|   5     |  Dev     |   M   |\n+---------+--------+-------+",
                        "explanation": "This test case first assumes there already exists some initial data in the 'students' table. It then inserts additional student data. Finally, it outputs all the combined data currently in the table."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n   Time Complexity: O(N*S)\n   Space Complexity: O(N*S)\n\n   Where \u2018N\u2019 is the number of persons on the island and \u2018S\u2019 is the total seating capacity of the plane.\n*/\n\n\nbool escape(int n, int s, int w, vector<int> arrs, vector<int> arrw)\n{\n    vector<vector<int>> dp(n + 1, vector<int>(s + 1, 0));\n    int total = 0;\n    for (int i = 1; i < n + 1; i++)\n    {\n        total += arrw[i - 1];\n        for (int j = 1; j < s + 1; j++)\n        {\n            // Calculating the dp transition states, where dp[i][j] represents \n            // the maximum weight that can be carried using i persons and j seating space\n            dp[i][j] = dp[i - 1][j];\n            if (j >= arrs[i - 1])\n            {\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - arrs[i - 1]] + arrw[i - 1]);\n            }\n        }\n    }\n\n    for (int i = 0; i < s + 1; i++)\n    {\n        // If the weight left is less than eqaul to w,\n        // Return True\n        if (total - dp[n][i] <= w)\n        {\n            return true;\n        }\n    }\n    \n    return false;\n}\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n   Time Complexity: O(N*S)\r\n   Space Complexity: O(N*S)\r\n\r\n   Where N is the number of persons on the island and S is the total seating capacity of the plane.\r\n*/\r\n\r\npublic class Solution {\r\n    static boolean escape(int n, int s, int w, int[] arrs, int[] arrw) {\r\n\r\n        int[][] dp = new int[n + 1][s + 1];\r\n        int total = 0;\r\n        for (int i = 1; i < n + 1; i++) {\r\n            total += arrw[i - 1];\r\n            for (int j = 1; j < s + 1; j++) {\r\n                // Calculating the dp transition states, where dp[i][j] represents\r\n                // the maximum weight that can be carried using i persons and j seating space\r\n                dp[i][j] = dp[i - 1][j];\r\n                if (j >= arrs[i - 1]) {\r\n                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - arrs[i - 1]] + arrw[i - 1]);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < s + 1; i++) {\r\n            // If the weight left is less than eqaul to w,\r\n            // Return True\r\n            if (total - dp[n][i] <= w) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n   Time Complexity: O(N*S)\r\n   Space Complexity: O(N*S)\r\n\r\n   Where N is the number of persons on the island and S is the total seating capacity of the plane.\r\n'''\r\nfrom typing import *\r\n\r\ndef escape(n: int, s: int, w: int, arrs: List[int], arrw: List[int])-> bool:\r\n    \r\n    dp = [[0 for i in range(s + 1)] for i in range(n + 1)]\r\n    total = 0\r\n\r\n    for i in range(1, n + 1):\r\n\r\n        total += arrw[i - 1]\r\n        for j in range(1, s + 1):\r\n\r\n            # Calculating the dp transition states, where dp[i][j] represents \r\n            # the maximum weight that can be carried using i persons and j seating space\r\n            dp[i][j] = dp[i - 1][j]\r\n\r\n            if j >= arrs[i - 1]:\r\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - arrs[i - 1]] +arrw[i - 1])\r\n    \r\n    for i in range(s + 1):\r\n        # If the weight left is less than eqaul to w,\r\n        # Return True\r\n        if total - dp[n][i] <= w:\r\n            return True\r\n    \r\n    return False",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}