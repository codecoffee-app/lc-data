{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16489,
            "title": "Subarray maximum",
            "titleSlug": "subarray-maximum_3164686",
            "content": "<h4 id=\"you-are-given-an-array-arr-and-an-integer-k-your-task-is-to-split-the-array-into-exactly-k-subarrays-you-have-to-find-the-minimum-possible-sum-of-the-maximum-value-of-each-subarray-of-arr\">You are given an array \u2018ARR\u2019 and an integer \u2018K\u2019, Your task is to split the array into exactly \u2018K\u2019 subarrays. You have to find the minimum possible sum of the maximum value of each subarray of \u2018ARR\u2019.</h4>\n\n<h4 id=\"note-each-subarray-should-contain-at-least-one-element\">Note: Each subarray should contain at least one element.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>You are given \u2018ARR\u2019 = [3, 4, 6, 7, 2] and \u2018K\u2019 = 3. Here you can divide the array into the subarrays [3], [4, 6, 7] and [2]. Here the sum of maximum values of all subarrays is 3 + 7 + 2 = 12.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each input contains two space-separated integers \u2018N\u2019 and \u2018K\u2019, representing the size of the array and the given integer \u2018K\u2019.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers representing the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test print a single integer representing the minimum possible sum of maximum values of \u2018K\u2019 subarrays of the given array.\n\nPrint a separate line for each test case.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 1000\n1 &lt;= K &lt;= N\n1 &lt;= |ARR[i]| &lt;= 10^6\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5 3\n3 4 6 7 2\n3 3\n1 2 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>12\n6\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For the first test case, \u2018ARR\u2019 = [3, 4, 6, 7, 2] and \u2018K\u2019 = 3. Here you can divide the array into the subarrays [3], [4, 6, 7] and [2]. Here the sum of maximum values of all subarrays is 3 + 7 + 2 = 12.\n\nFor the second test case, \u2018ARR\u2019 = [1, 2, 3] and \u2018K\u2019 = 3. Here you can only divide the array as [1], [2], and [3]. Here the sum of maximum values of all subarrays in 1 + 2 + 3 = 6.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5 1\n5 6 8 1 10\n4 3\n1 1 1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>10\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, divide it into exactly 'K' contiguous subarrays. The goal is to minimize the sum of the maximum values of each subarray. Each subarray must contain at least one element.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 1000",
                    "1 <= K <= N",
                    "1 <= |ARR[i]| <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "n = 5, arr = [3, 4, 6, 7, 2], k = 3",
                        "output": "12",
                        "explanation": "The array [3, 4, 6, 7, 2] can be split into [3], [4, 6, 7], and [2]. The maximum values are 3, 7, and 2, respectively. The sum is 3 + 7 + 2 = 12."
                    },
                    {
                        "input": "n = 3, arr = [1, 2, 3], k = 3",
                        "output": "6",
                        "explanation": "The array [1, 2, 3] can only be split into [1], [2], and [3]. The maximum values are 1, 2, and 3, respectively. The sum is 1 + 2 + 3 = 6."
                    },
                    {
                        "input": "n = 5, arr = [5, 6, 8, 1, 10], k = 1",
                        "output": "10",
                        "explanation": "The array [5, 6, 8, 1, 10] must be kept as a single subarray [5, 6, 8, 1, 10]. The maximum value is 10, and the sum is 10."
                    },
                    {
                        "input": "n = 4, arr = [1, 1, 1, 1], k = 3",
                        "output": "3",
                        "explanation": "The array [1, 1, 1, 1] can be split into [1], [1], and [1,1]. The maximum values are 1,1 and 1, respectively. The sum is 1+1+1 = 3"
                    },
                    {
                        "input": "n = 4, arr = [1, 1, 1, 1], k = 4",
                        "output": "4",
                        "explanation": "The array [1, 1, 1, 1] can only be split into [1], [1], [1], [1]. The maximum values are 1, 1, 1, and 1, respectively. The sum is 1 + 1 + 1 + 1 = 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to recurse over every possible solution in the array.</p>",
            "<p>Try to memoize the previous approach.</p>",
            "<p>Try to optimize the approach further.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}