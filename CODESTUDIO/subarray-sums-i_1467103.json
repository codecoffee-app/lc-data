{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12600,
            "title": "Subarray Sums I",
            "titleSlug": "subarray-sums-i_1467103",
            "content": "<h4 id=\"you-are-given-an-integer-array-arr-of-size-n-and-an-integer-k\">You are given an integer array &#39;arr&#39; of size &#39;N&#39; and an integer &#39;K&#39;.</h4>\n\n<h4 id=\"your-task-is-to-find-the-total-number-of-subarrays-of-the-given-array-whose-sum-of-elements-is-equal-to-k\">Your task is to find the total number of subarrays of the given array whose sum of elements is equal to k.</h4>\n\n<h4 id=\"a-subarray-is-defined-as-a-contiguous-block-of-elements-in-the-array\">A subarray is defined as a contiguous block of elements in the array.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018N\u2019 = 4, \u2018arr\u2019 = [3, 1, 2, 4], &#39;K&#39; = 6\n\nOutput: 2\n\nExplanation: The subarrays that sum up to &#39;6&#39; are: [3, 1, 2], and [2, 4].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first input line contains a single integer \u2018T\u2019, denoting the number of test cases.\n\nFor each Test case:\n\nThe first line of each test case input contains two space-separated integers, where the first integer represents the length of the array &#39;N&#39;, and the second integer is the value \u2018K\u2019.\n\nThe next line of each test contains \u2018N\u2019 space-separated integers, which are the elements of the \u2018arr\u2019 array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, return the count of all subarrays that sum up to the integer &#39;K&#39;.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just Implement the given function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N&lt;= 10^3\n1 &lt;= arr[i] &lt;= 10^9\n1 &lt;= K &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 6\n3 1 2 4\n\n3 3\n1 2 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>2\n2\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>Test Case 1:\n\nInput: \u2018N\u2019 = 4, \u2018arr\u2019 = [3, 1, 2, 4], &#39;K&#39; = 6\n\nOutput: 2\n\nExplanation: The subarrays that sum up to &#39;6&#39; are: [3, 1, 2], and [2, 4].\n\nTest Case 2:\n\nInput: \u2018N\u2019 = 3, \u2018arr\u2019 = [1, 2, 3], &#39;K&#39; = 3\n\nOutput: 2\n\nExplanation: The subarrays that sum up to &#39;7&#39; are: [1, 2], and [3].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 7\n1 2 3\n\n4 9\n6 3 5 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>0\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 201,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array 'arr' of size 'N' and an integer 'K', find the total number of contiguous subarrays of 'arr' whose sum of elements is equal to 'K'.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^3",
                    "1 <= arr[i] <= 10^9",
                    "1 <= K <= 10^9",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 6\n3 1 2 4",
                        "output": "2",
                        "explanation": "The subarrays that sum up to 6 are: [3, 1, 2] and [2, 4]. Therefore, the count is 2."
                    },
                    {
                        "input": "3 3\n1 2 3",
                        "output": "2",
                        "explanation": "The subarrays that sum up to 3 are: [1, 2] and [3]. Therefore, the count is 2."
                    },
                    {
                        "input": "3 7\n1 2 3",
                        "output": "0",
                        "explanation": "There are no subarrays that sum up to 7."
                    },
                    {
                        "input": "4 9\n6 3 5 2",
                        "output": "1",
                        "explanation": "The subarray that sums up to 9 is: [6, 3]. Therefore, the count is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use the brute-force approach iterating over different subarrays and checking whether they sum up to the required value \u2018k\u2019.</p>",
            "<p>Can you use precomputation to count all the subarrays that have the sum equal to \u2018k\u2019?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n\n    Where 'N' is the number of elements in the array/list 'ARR'.\n*/\n#include <unordered_map>\nint findAllSubarraysWithGivenSum(vector < int > & arr, int k) {\n\n    // Used to store number of subarrays starting from \n    // index zero having particular value of sum.\n    unordered_map < int, int > prevSum;\n    int n = arr.size();\n    int res = 0;\n\n    // To keep track of sum of elements so far.\n    int currSum = 0;\n\n    for (int i = 0; i < n; i++) {\n\n        // Add current element to sum so far.\n        currSum += arr[i];\n\n        // If current sum is equal to desired sum, then a new \n        // subarray is found. So, increase count of subarrays.\n        if (currSum == k) {\n            res += 1;\n        }\n\n        // If current sum exceeds k by \n        // current sum - k then\n        // find the number of subarrays having this sum in \n        // our map and exclude these subarrays.\n        if (prevSum.find(currSum - k) != prevSum.end()) {\n\n            res += prevSum[currSum - k];\n        }\n\n        // Add current sum value to count of different values of sum.\n        prevSum[currSum] += 1;\n    }\n\n    return res;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n\r\n    Where 'N' is the number of elements in the array/list 'ARR'.\r\n*/\r\n\r\nimport java.util.HashMap;\r\n\r\npublic class Solution {\r\n    public static int findAllSubarraysWithGivenSum(int arr[], int s) {\r\n        // Used to store number of subarrays starting from index zero having particular value of sum.\r\n        HashMap < Integer, Integer > prevSum = new HashMap<Integer , Integer>();\r\n        int n = arr.length;\r\n        int res = 0;\r\n\r\n        // To keep track of sum of elements so far.\r\n        int currsum = 0;\r\n\r\n        for (int i = 0; i < n; i++) {\r\n\r\n            // Add current element to sum so far.\r\n            currsum += arr[i];\r\n\r\n            // If current sum is equal to desired sum, then a new subarray is found. So, increase count of subarrays.\r\n            if (currsum == s) {\r\n                res += 1;\r\n            }\r\n            \r\n            /*\r\n                If current sum exceeds given sum by current sum  - sum. \r\n                Find number of subarrays having this sum in our map and exclude these subarrays.\r\n            */\r\n            if (prevSum.containsKey(currsum - s)) {\r\n\r\n                res += prevSum.get(currsum - s);\r\n            }\r\n\r\n            // Add current sum value to count of different values of sum.\r\n            if(prevSum.containsKey(currsum)) {\r\n                prevSum.put(currsum, prevSum.get(currsum) + 1);\r\n            } else {\r\n                prevSum.put(currsum, 1);\r\n            }\r\n        }\r\n\r\n        return res;\r\n    } \r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(N)\r\n\r\n    Where \u2018N\u2019 is the number of elements in the array/list \u2018ARR\u2019.\r\n'''\r\n\r\nfrom collections import defaultdict\r\n\r\ndef findAllSubarraysWithGivenSum(arr, s):\r\n    # Used to store number of subarrays starting from index zero having particular value of sum.\r\n    prevSum = defaultdict(lambda : 0)\r\n    n = len(arr)\r\n    res = 0\r\n   \r\n    # To keep track of sum of elements so far.\r\n    currsum = 0\r\n   \r\n    for i in range(0, n): \r\n   \r\n        # Add current element to sum so far.\r\n        currsum += arr[i]\r\n   \r\n        # If current sum is equal to desired sum, then a new subarray is found. So, increase count of subarrays.\r\n        if currsum == s: \r\n            res += 1        \r\n\r\n        '''\r\n            If current sum exceeds given sum by current sum  - sum. \r\n            Find number of subarrays having this sum in our map/dictionary and exclude these subarrays.\r\n        '''\r\n        if (currsum - s) in prevSum:\r\n            res += prevSum[currsum - s]\r\n           \r\n   \r\n        # Add current sum value to count of different values of sum.\r\n        prevSum[currsum] += 1\r\n      \r\n    return res",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}