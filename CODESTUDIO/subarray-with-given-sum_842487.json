{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8272,
            "title": "Subarray With Given Sum",
            "titleSlug": "subarray-with-given-sum_842487",
            "content": "<h4 id=\"given-an-array-arr-of-n-integers-and-an-integer-s-the-task-is-to-find-whether-there-exists-a-subarray-positive-length-of-the-given-array-such-that-the-sum-of-elements-of-the-subarray-equals-to-s-or-not-if-any-subarray-is-found-return-the-start-and-end-index-0-based-index-of-the-subarray-otherwise-consider-both-the-start-and-end-indexes-as-1\">Given an array ARR of N integers and an integer S. The task is to find whether there exists a subarray(positive length) of the given array such that the sum of elements of the subarray equals to S or not. If any subarray is found, return the start and end index (0 based index) of the subarray. Otherwise, consider both the START and END indexes as -1.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>If two or more such subarrays exist, return any subarray.\n</code></pre>\n\n<h4 id=\"for-example-if-the-given-array-is-1-2-3-4-and-the-value-of-s-is-equal-to-7-then-there-are-two-possible-subarrays-having-sums-equal-to-s-are-1-2-3-and-3-4\">For Example: If the given array is [1,2,3,4] and the value of S is equal to 7. Then there are two possible subarrays having sums equal to S are [1,2,3] and [3,4].</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer T, representing the number of test cases. Each test case consists of 2 lines as follows:\n\nThe first line of each test case contains two single space-separated integers N, and S, representing the size of the array and the required sum respectively.\n\nThe second line of each test case will contain N single space-separated integers, representing the elements in the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return any two (pair) integers representing the starting and ending index of the subarray in an array/list which sum up to the given target sum or [-1, -1] instead if there is no such pair for the given input.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5\n-10^14 &lt;= S &lt;= 10^14\n-10^9 &lt;= ARR[i] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 5\n1 3 2 4\n8 9\n1 2 3 4 0 4 5 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>Correct\nCorrect\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-1\">Explanation Of the Sample Input 1 :</h5>\n\n<pre><code>In the second test case, the elements of the array which make the sum as required are [(2,3,4), (4,5), (2,3,4,0), (4,5,0)] that are continuous. So subarray [2, 3, 4] is returned which is one of the possible subarrays which is why the required output obtained is &#39;Correct&#39;.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4 4\n1 2 3 4\n5 0\n1 2 3 4 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>Correct\n-1 -1\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-2\">Explanation Of the Sample Input 2 :</h5>\n\n<pre><code>In the first test case, the possible subarrays are [ [1, 2] , [3] ] . So subarray [3] is returned which is one of the possible subarrays which is why the required output obtained is &#39;Correct&#39;.\n\nIn the second test case, the elements of the array which make the sum as required are not formed by taking any elements as it is even less than the smallest element of the array. Therefore the output here is -1 -1.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 16,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers and a target sum, find a contiguous subarray whose elements sum up to the target sum. Return the starting and ending indices (0-based) of the subarray. If no such subarray exists, return [-1, -1]. If multiple such subarrays exist, return any one of them.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "-10^14 <= S <= 10^14",
                    "-10^9 <= ARR[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 4, nums = [1, 3, 2, 4], sum = 5",
                        "output": "[0, 1]",
                        "explanation": "The subarray [1, 3] sums to 5.  Indices 0 and 1 are returned."
                    },
                    {
                        "input": "n = 8, nums = [1, 2, 3, 4, 0, 4, 5, 0], sum = 9",
                        "output": "[1, 3]",
                        "explanation": "The subarray [2, 3, 4] sums to 9. Indices 1 and 3 are returned. Other valid solutions such as [5,6] = [4,5] would also be acceptable"
                    },
                    {
                        "input": "n = 4, nums = [1, 2, 3, 4], sum = 4",
                        "output": "[2, 2]",
                        "explanation": "The subarray [3] sums to 4. Indices 2 and 2 are returned. Alternatively, a subarray consisting of index [3] = [4] could have been valid if the array was [1,2,0,4]"
                    },
                    {
                        "input": "n = 5, nums = [1, 2, 3, 4, 5], sum = 0",
                        "output": "[-1, -1]",
                        "explanation": "There is no subarray that sums to 0."
                    },
                    {
                        "input": "n = 5, nums = [1, 2, 3, -2, 5], sum = 6",
                        "output": "[0, 2]",
                        "explanation": "The subarray [1, 2, 3] sums to 6. Indices 0 and 2 are returned. [3,4] and [1,2,3,-2] can also be returned."
                    },
                    {
                        "input": "n = 1, nums = [5], sum = 5",
                        "output": "[0, 0]",
                        "explanation": "The subarray [5] sums to 5. Indices 0 and 0 are returned."
                    },
                    {
                        "input": "n = 3, nums = [-1, -2, -3], sum = -3",
                        "output": "[2, 2]",
                        "explanation": "The subarray [-3] sums to -3.  Index 2 to index 2"
                    },
                    {
                        "input": "n = 5, nums = [1, 4, 20, 3, 10], sum = 33",
                        "output": "[2, 4]",
                        "explanation": "The subarray [20, 3, 10] sums to 33. Indices 2 and 4 are returned."
                    },
                    {
                        "input": "n = 5, nums = [1, 4, 0, 0, 3, 10, 5], sum = 7",
                        "output": "[1, 3]",
                        "explanation": "The subarray [4, 0, 0, 3] sums to 7. Indices 1 and 4 are returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check sum of all possible subarrays.</p>",
            "<p>Try to store the sum of elements of every prefix of the array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}