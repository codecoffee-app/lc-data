{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9381,
            "title": "Subsequences of String",
            "titleSlug": "subsequences-of-string_985087",
            "content": "<h4 id=\"you-are-given-a-string-str-containing-lowercase-english-letters-from-a-to-z-inclusive-your-task-is-to-find-all-non-empty-possible-subsequences-of-str\">You are given a string &#39;STR&#39; containing lowercase English letters from a to z inclusive. Your task is to find all non-empty possible subsequences of &#39;STR&#39;.</h4>\n\n<pre><code>A Subsequence of a string is the one which is generated by deleting 0 or more letters from the string and keeping the rest of the letters in the same order.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. Then T test cases follow.\n\nThe first and only line of each test case contains string &#39;STR&#39;. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>For each test case, print the subsequences of the string &#39;STR&#39; separated by space.\n\nThe output of each test case is printed in a separate line.\n\nThe output strings can be returned in any order.\n</code></pre>\n\n<h4 id=\"note\">Note</h4>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 \n1 &lt;=  |STR| &lt;= 16\n\nWhere |STR| represents the length of the string &#39;STR&#39;.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1 \nabc\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>a ab abc ac b bc c\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>All possible subsequences of abc are :  \n\u201ca\u201d , \u201cb\u201d , \u201cc\u201d , \u201cab\u201d , \u201cbc\u201d , \u201cac\u201d, \u201cabc\u201d\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\nbbb\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>b b b bb bb bb bbb\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 246,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'STR' containing lowercase English letters (a-z), find all non-empty possible subsequences of 'STR'. A subsequence is formed by deleting zero or more characters from the original string while maintaining the relative order of the remaining characters.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |STR| <= 16",
                    "|STR| represents the length of the string 'STR'.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "abc",
                        "output": "a ab abc ac b bc c",
                        "explanation": "The subsequences of 'abc' are 'a', 'b', 'c', 'ab', 'ac', 'bc', and 'abc'."
                    },
                    {
                        "input": "bbb",
                        "output": "b b b bb bb bb bbb",
                        "explanation": "The subsequences of 'bbb' are 'b', 'b', 'b', 'bb', 'bb', 'bb', and 'bbb'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the concept of Power Set.</p>",
            "<p>Create all possible subsequences once taking the current character and then leaving it.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n\r\n    Time complexity: O(2^N)\r\n    Space complexity: O(N^2)\r\n\r\n    where 'N' is the number of letters in the string 'STR'.\r\n\r\n\r\n*/\r\n\r\nvoid subsequencesHelper(string s, int index, string temp, vector<string> &ans) {\r\n\r\n    // Push the subsequence in ans\r\n    if (index == s.length()) {\r\n\r\n        // If the current subsequence is not empty\r\n        if (temp.length() != 0) {\r\n            ans.push_back(temp);\r\n        }\r\n\r\n        return;\r\n    }\r\n    // Not including the current letter in subsequence\r\n    subsequencesHelper(s, index + 1, temp, ans);\r\n\r\n    temp.push_back(s[index]);\r\n    // Including the current letter in subsequence\r\n    subsequencesHelper(s, index + 1, temp, ans);\r\n\r\n}\r\n\r\nvector<string> subsequences(string str) {\r\n\r\n    // Stores length of input string\r\n    int n = str.length();\r\n\r\n    // To store all the subsequences of s\r\n    vector<string> ans;\r\n\r\n    string temp = \"\";\r\n\r\n    // Finds all possible non empty subsequences of s\r\n    subsequencesHelper(str, 0 , temp, ans);\r\n\r\n    return ans;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "import java.util.ArrayList;\r\n\r\n/*\r\n\tTime Complexity: O(2^N) \r\n\tSpace Complexity: O(N^2)\r\n\t\r\n\tWhere 'N' is the number of letters in the string 'STR'\r\n*/\r\n\r\nclass Solution \r\n{\r\n    public static void subsequencesHelper(String s, int index, String temp, ArrayList<String> ans)\r\n    {\r\n\t\r\n        // Push the subsequence in ans\r\n        if(index == s.length())\r\n        {\r\n            // If the current subsequence is not empty\r\n            if(temp.length() != 0)\r\n            {\r\n                ans.add(temp);\r\n            }\r\n            \r\n            return;\r\n        }\r\n\r\n        // Not including the current letter in subsequence\r\n        subsequencesHelper(s, index + 1, temp, ans);\r\n        \r\n        temp += s.charAt(index);\r\n\r\n        // Including the current letter in subsequence \r\n        subsequencesHelper(s, index + 1, temp, ans);\r\n        \r\n    }\r\n\r\n    public static ArrayList<String> subsequences(String str) \r\n    {\r\n        // Stores length of input string\r\n        int n = str.length();\r\n\r\n        // To store all the subsequences of s\r\n        ArrayList<String> ans = new ArrayList<>();\r\n\r\n        String temp = \"\";\r\n\r\n        // Finds all possible non empty subsequences of s\r\n        subsequencesHelper(str, 0, temp, ans);\r\n\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n\tTime complexity: O(2^N) \r\n\tSpace complexity: O(N^2)\r\n\t\r\n\twhere 'N' is the number of letters in the string 'STR'.\r\n \r\n'''\r\n\r\n\r\ndef subsequencesHelper(s, index, temp, ans):\r\n\r\n    # Push the subsequence in ans\r\n    if(index == len(s)):\r\n\r\n        # If the current subsequence is not empty\r\n        if(len(temp) != 0):\r\n            ans.append(temp)\r\n\r\n        return\r\n\r\n    # Not including the current letter in subsequence\r\n    subsequencesHelper(s, index + 1, temp, ans)\r\n\r\n    temp += s[index]\r\n    # Including the current letter in subsequence\r\n    subsequencesHelper(s, index + 1, temp, ans)\r\n\r\n\r\ndef subsequences(str):\r\n\r\n    # Stores length of input string\r\n    n = len(str)\r\n\r\n    # To store all the subsequences of str\r\n    ans = []\r\n\r\n    temp = \"\"\r\n\r\n    # Finds all possible non empty subsequences of str\r\n    subsequencesHelper(str, 0, temp, ans)\r\n\r\n    return ans\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}