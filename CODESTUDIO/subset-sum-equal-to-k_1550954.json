{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13279,
            "title": "Subset sum equal to K",
            "titleSlug": "subset-sum-equal-to-k_1550954",
            "content": "<h4 id=\"you-are-given-an-array-list-arr-of-n-positive-integers-and-an-integer-k-your-task-is-to-check-if-there-exists-a-subset-in-arr-with-a-sum-equal-to-k\">You are given an array/list \u2018ARR\u2019 of \u2018N\u2019 positive integers and an integer \u2018K\u2019. Your task is to check if there exists a subset in \u2018ARR\u2019 with a sum equal to \u2018K\u2019.</h4>\n\n<h4 id=\"note-return-true-if-there-exists-a-subset-with-sum-equal-to-k-otherwise-return-false\">Note: Return true if there exists a subset with sum equal to \u2018K\u2019. Otherwise, return false.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If \u2018ARR\u2019 is {1,2,3,4} and \u2018K\u2019 = 4, then there exists 2 subsets with sum = 4. These are {1,3} and {4}. Hence, return true.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer T representing the number of test cases.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018K\u2019 representing the size of the input \u2018ARR\u2019 and the required sum as discussed above.\n\nThe next line of each test case contains \u2018N\u2019 single space-separated integers that represent the elements of the \u2018ARR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return true or false as discussed above.\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10^3\n0 &lt;= ARR[i] &lt;= 10^9\n0 &lt;= K &lt;= 10^3\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 5\n4 3 2 1\n5 4\n2 5 1 6 7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>In example 1, \u2018ARR\u2019 is {4,3,2,1} and \u2018K\u2019 = 5. There exist 2 subsets with sum = 5. These are {4,1} and {3,2}. Hence, return true.\nIn example 2, \u2018ARR\u2019 is {2,5,1,6,7} and \u2018K\u2019 = 4. There are no subsets with sum = 4. Hence, return false.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4 4\n6 1 2 1\n5 6\n1 7 2 9 10\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>In example 1, \u2018ARR\u2019 is {6,1,2,1} and \u2018K\u2019 = 4. There exist 1 subset with sum = 4. That is {1,2,1}. Hence, return true.\nIn example 2, \u2018ARR\u2019 is {1,7,2,9,10} and \u2018K\u2019 = 6. There are no subsets with sum = 6. Hence, return false.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"hints\">Hints:</h5>\n\n<pre><code>1. Can you find every possible subset of \u2018ARR\u2019 and check if its sum is equal to \u2018K\u2019?\n2. Can you use dynamic programming and use the previously calculated result to calculate the new result?\n3. Try to use a recursive approach followed by memoization by including both index and sum we can form. \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 522,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers `ARR` of size `N` and an integer `K`, determine if there exists a subset of `ARR` whose elements sum up to `K`. Return `true` if such a subset exists, and `false` otherwise.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10^3",
                    "0 <= ARR[i] <= 10^9",
                    "0 <= K <= 10^3",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 5\n4 3 2 1",
                        "output": "true",
                        "explanation": "The array is {4, 3, 2, 1} and K = 5. The subsets {4, 1} and {3, 2} sum up to 5. Therefore, the output is true."
                    },
                    {
                        "input": "5 4\n2 5 1 6 7",
                        "output": "false",
                        "explanation": "The array is {2, 5, 1, 6, 7} and K = 4. There is no subset that sums up to 4. Therefore, the output is false."
                    },
                    {
                        "input": "4 4\n6 1 2 1",
                        "output": "true",
                        "explanation": "The array is {6, 1, 2, 1} and K = 4. The subset {1, 2, 1} sums up to 4. Therefore, the output is true."
                    },
                    {
                        "input": "5 6\n1 7 2 9 10",
                        "output": "false",
                        "explanation": "The array is {1, 7, 2, 9, 10} and K = 6. There is no subset that sums up to 6. Therefore, the output is false."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n\n    Time Complexity : O(N * K)\n    Space Complexity : O(N * K)\n\n    Where N is the number of elements in the array and\n    K is the target sum. \n    \n\n*/\n\nint helper(vector < int > & arr, int n, int k, vector < vector < int >> & memo) {\n    // Base condition.\n    if (n <= 0) {\n        // If k = 0, we reached target sum.\n        if (k == 0) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    // If memo[n][k] not equal to -1\n    // then result of n,k already calculated.\n    if (memo[n][k] != -1) {\n        return memo[n][k];\n    }\n\n\n    // arr[n-1] not taken in considertion.   \n    int x = helper(arr, n - 1, k, memo);\n    int y = 0;\n    if(k - arr[n-1] >= 0){\n        // arr[n-1] taken in considertion.\n        y = helper(arr, n - 1, k - arr[n-1], memo);    \n    }\n\n    // Store current result in memo.\n    memo[n][k] = x || y;\n    // Return current result.\n    return memo[n][k];\n}\n\nbool subsetSumToK(int n, int k, vector < int > & arr) {\n    // Declaring memo array and storing -1 in it:\n    vector < vector < int >> memo(n+1, vector < int > (k+1, -1));\n    // Calling recursive function.\n    int ans = helper(arr, n, k, memo);\n\n    if (ans == 1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''    \n    Time Complexity : O(N * K)\n    Space Complexity : O(N * K)\n\n    Where N is the number of elements in the array and\n    K is the target sum. \n'''    \n\ndef helper(arr, n, k, memo):\n    \n    # Base condition.\n    if n <= 0:\n        \n        # If k = 0, we reached target sum\n        if k == 0:\n            return 1\n        \n        else:\n            return 0\n        \n        \n    # If memo[n][k] not equal to -1\n    # then result of n,k already calculated\n    \n    if (memo[n][k] != -1):\n        return memo[n][k]\n    \n    # arr[n - 1] not taken in considertion\n    x = helper(arr, n - 1, k, memo)\n    y = 0\n    \n    if(k - arr[n - 1] >= 0):\n        \n        # arr[n - 1] taken in considertion\n        y = helper(arr, n - 1, k - arr[n - 1], memo)\n        \n    # Store current result in memo\n    if(x == 1 or y == 1):\n        memo[n][k] = 1\n        \n    else:\n        memo[n][k] = 0\n        \n    return memo[n][k]\n\n\ndef subsetSumToK(n, k, arr):\n    \n    # Declaring memo array and storing -1 in it\n    memo = [[-1 for i in range(k + 1)] for j in range(n + 1)]\n    \n    \n    # Calling recursive function.\n    ans = helper(arr, n, k, memo)\n    \n    if ans == 1:\n        return True\n    \n    else:\n        return False\n    \n    \n        \n        \n    \n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\n\n    Time Complexity : O(N * K)\n    Space Complexity : O(N * K)\n\n    Where N is the number of elements in the array and\n    K is the target sum. \n    \n\n*/\n\n\nimport java.util.Arrays;\n\npublic class Solution {\n    \n    public static int helper(int arr[], int n, int k, int[][] memo) {\n        \n         // Base condition.\n        if (n <= 0) {\n            // If k = 0, we reached target sum.\n            if (k == 0) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n    \n        // If memo[n][k] not equal to -1\n        // then result of n,k already calculated.\n        if (memo[n][k] != -1) {\n            return memo[n][k];\n        }\n    \n    \n        // arr[n-1] not taken in considertion.   \n        int x = helper(arr, n - 1, k, memo);\n        int y = 0;\n        if(k - arr[n-1] >= 0){\n            // arr[n-1] taken in considertion.\n            y = helper(arr, n - 1, k - arr[n-1], memo);    \n        }\n    \n        // Store current result in memo.\n        if(x == 1 || y == 1){\n            memo[n][k] = 1;\n        }else{\n            memo[n][k] = 0;\n        }\n        \n        // Return current result.\n        return memo[n][k];\n    }\n\n    public static boolean subsetSumToK(int n, int k, int arr[]){\n       \n        // Declaring memo array and storing -1 in it:\n        int memo[][] = new int[n+1][k+1];\n        \n        for(int i = 0;i < memo.length; i++){\n            Arrays.fill(memo[i], -1);\n        }\n        \n        // Calling recursive function.\n        int ans = helper(arr, n, k, memo);\n    \n        if (ans == 1) {\n            return true;\n        } else {\n            return false;\n        }\n        \n    }\n}\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}