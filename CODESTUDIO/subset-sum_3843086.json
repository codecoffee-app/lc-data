{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 17234,
            "title": "Subset Sum",
            "titleSlug": "subset-sum_3843086",
            "content": "<h4 id=\"you-are-given-an-array-nums-of-n-integers\">You are given an array <em><strong>&#39;nums&#39;</strong></em> of <em><strong>\u2018n\u2019</strong></em>  integers.</h4>\n\n<p><br/></p>\n\n<h4 id=\"return-all-subset-sums-of-nums-in-a-non-decreasing-order\">Return all subset sums of &#39;nums&#39; in a non-decreasing order.</h4>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Here subset sum means sum of all elements of a subset of &#39;nums&#39;. A subset of &#39;nums&#39; is an array formed by removing some (possibly zero or all) elements of &#39;nums&#39;.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"for-example\">For example</h5>\n\n<pre><code>Input: &#39;nums&#39; = [1,2]\n\nOutput: 0 1 2 3\n\nExplanation:\nFollowing are the subset sums:\n0 (by considering empty subset)\n1 \n2\n1+2 = 3\nSo, subset sum are [0,1,2,3].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a single integer \u2018n\u2019, denoting the size of the array &#39;nums&#39;.\n\nThe second line of input contains \u2018n\u2019 space-separated integers denoting elements of the array &#39;nums&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Return the sum of all the subsets of &#39;nums&#39; in non-decreasing order.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3\n1 2 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>0 1 2 3 3 4 5 6\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case,\nFollowing are the subset sums:\n0 (by considering empty subset)\n1\n2\n1+2 = 3\n3\n1+3 = 4\n2+3 = 5\n1+2+3 = 6\nSo, subset-sums are [0,1,2,3,3,4,5,6]\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2 \n4 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2 :</h5>\n\n<pre><code>0 4 5 9\n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to do this in O(n*2^n). \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= n &lt;= 15\n0 &lt;= nums[i] &lt;= 5000\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 123,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `nums` of `n` integers, find and return all possible subset sums of `nums` in non-decreasing order.\n\nA subset sum is the sum of all elements in a subset of `nums`. A subset is formed by removing zero or more elements from `nums`.",
                "constraints": [
                    "1 <= n <= 15",
                    "0 <= nums[i] <= 5000",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\n1 2 3",
                        "output": "0 1 2 3 3 4 5 6",
                        "explanation": "The subsets and their sums are:\n- Empty set: 0\n- {1}: 1\n- {2}: 2\n- {1, 2}: 3\n- {3}: 3\n- {1, 3}: 4\n- {2, 3}: 5\n- {1, 2, 3}: 6\n\nSorted, these sums are [0, 1, 2, 3, 3, 4, 5, 6]."
                    },
                    {
                        "input": "2\n4 5",
                        "output": "0 4 5 9",
                        "explanation": "The subsets and their sums are:\n- Empty set: 0\n- {4}: 4\n- {5}: 5\n- {4, 5}: 9\n\nSorted, these sums are [0, 4, 5, 9]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Calculate the sum for every possible subset.</p>",
            "<p>Can you relate the binary representation of a positive integer with the subset?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity:  O( (2^N)*N ).\r\n    Space Complexity:O( 1 ).\r\n\r\n    Where 'N' is the size of the array.\r\n*/\r\n\r\nvector<int> subsetSum(vector<int> &num)\r\n{\r\n    int n = num.size();\r\n    // Ans vector contains all the subset sums.\r\n    vector<int> ans;\r\n\r\n    for (int i = 0; i < (1 << n); i++)\r\n    {\r\n        int sum = 0;\r\n        for (int j = 0; j < n; j++)\r\n        {\r\n            // Checking wheather the element is present the subset or not.\r\n            if ((1 << j) & i)\r\n            {\r\n                sum += num[j];\r\n            }\r\n        }\r\n        ans.push_back(sum);\r\n    }\r\n    // Sort the vector and finally return it.\r\n    sort(ans.begin(), ans.end());\r\n    return ans;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity: O((2^N)*N).\n    Space Complexity: O(1).\n\n    Where 'N' is the size of the array.\n*/\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Solution {\n\n    public static ArrayList<Integer> subsetSum(int num[]) {\n\n        int n = num.length;\n        // Ans array contains all the subset sums.\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n\n        for (int i = 0; i < (1 << n); i++) {\n            int sum = 0;\n            for (int j = 0; j < n; j++) {\n                // Checking wheather the element is present the subset or not.\n                if (((1 << j) & i) != 0) {\n                    sum += num[j];\n                }\n            }\n            ans.add(sum);\n        }\n        // Sort the vector and finally return it.\n        Collections.sort(ans);\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity:  O((2^N) * N)\n    Space Complexity:O(1)\n\n    Where 'N' is the size of the array.\n'''\n\nfrom typing import List\n\ndef subsetSum(num: List[int]) -> List[int]:\n\n    n = len(num)\n    \n    # Ans vector contains all the subset sums.\n    ans = []\n\n    for i in range(2 ** n):\n    \n        sum = 0\n        for j in range(n):\n        \n            # Checking wheather the element is present the subset or not.\n            if (2 **  j) & i:\n                sum += num[j]\n    \n        ans.append(sum)\n    \n    # Sort the vector and finally return it.\n    ans.sort()\n    return ans\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}