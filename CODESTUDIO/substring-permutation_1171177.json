{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10204,
            "title": "Substring Permutation",
            "titleSlug": "substring-permutation_1171177",
            "content": "<h4 id=\"you-are-given-a-string-s-of-length-n-and-an-array-of-strings-arr-all-the-strings-in-arr-are-of-the-same-length-k-your-task-is-to-find-the-number-of-such-sub-strings-in-the-string-s-that-is-the-concatenation-of-all-the-strings-of-arr-in-some-order\">You are given a string S of length N and an array of strings ARR. All the strings in ARR are of the same length K. Your task is to find the number of such sub-strings in the string &#39;S&#39; that is the concatenation of all the strings of ARR in some order.</h4>\n\n<h4 id=\"for-example\">For example :</h4>\n\n<pre><code>Let ARR = [hot, dog] and S = &quot;hotdoghot&quot;, there are two sub-strings that can be obtained by permutation of ARR starting from index 0 -&gt; \u2018hotdog\u2019 and starting from the index 3 -&gt; \u2018doghot\u2019.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>1. An string C is a substring of string S if it can be obtained by deletion of several characters(possibly zero) from the beginning and the end from a string S.\n2. The substring must contain all the strings in ARR only once and without any extra intervening character.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer T\u2019 denoting the number of test cases. Then the test case follows.\n\nThe first line of each test case contains three single space-separated integers \u2018N\u2019, \u2018M\u2019, \u2018K\u2019 denoting the size of the string S, length of the array/list ARR and length of each string in ARR. \n\nThe second line of each test case contains string S.\n\nThe third line of each test case contains \u2018M\u2019 space-separated strings, denoting the elements of the array ARR.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case print the number of substrings that can be formed by some permutation of ARR. \n\nOutput for each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 1000\n1 &lt;= M &lt;= 10\n1 &lt;= K &lt;= 100      \nString S and all the strings in ARR contain only lowercase English letters.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n9 2 2 \naaabbbbaa \naa bb\n5 1 2\naaaaa\naa\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>All good substrings in test case 1 are starting at index 1, \u2018aabbb\u2019 and starting at index 5, \u2018bbaa\u2019 \nAll good substring in test case 2 are starting at index 0,1,2,3 \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n8 2 3\nabcaabca    \nabc bca \n6 6 1\naaaaaa\na a a a a a\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 's' of length 'n' and an array of strings 'arr', where all strings in 'arr' have the same length 'k', find the number of substrings in 's' that are formed by concatenating all strings from 'arr' in some order. The substring must contain each string from 'arr' exactly once without any intervening characters.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 1000",
                    "1 <= M <= 10",
                    "1 <= K <= 100",
                    "String S and all the strings in ARR contain only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "n = 9, m = 2, k = 2, s = \"aaabbbbaa\", arr = [\"aa\", \"bb\"]",
                        "output": "2",
                        "explanation": "The substrings \"aabb\" (starting at index 1) and \"bbaa\" (starting at index 5) can be formed by concatenating \"aa\" and \"bb\" in some order."
                    },
                    {
                        "input": "n = 5, m = 1, k = 2, s = \"aaaaa\", arr = [\"aa\"]",
                        "output": "4",
                        "explanation": "The substrings \"aa\", \"aa\", \"aa\", \"aa\" can be formed at indices 0, 1, 2, 3. Since arr only has one string the permutation is same as the string itself."
                    },
                    {
                        "input": "n = 8, m = 2, k = 3, s = \"abcaabca\", arr = [\"abc\", \"bca\"]",
                        "output": "1",
                        "explanation": "The substring \"abcabc\" (starting at index 0 or 2) or \"bcabca\" (starting at index 1 or 3)  can be found with substring 'abcaabca'. Only the substring at index 0, 'abc' followed by 'bca', results in a complete concatenation of ARR elements."
                    },
                    {
                        "input": "n = 6, m = 6, k = 1, s = \"aaaaaa\", arr = [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]",
                        "output": "1",
                        "explanation": "The substring 'aaaaaa' can be formed by joining all the 'a' from the input array."
                    },
                    {
                        "input": "n = 7, m = 2, k = 2, s = \"abcdefg\", arr = [\"ab\", \"cd\"]",
                        "output": "0",
                        "explanation": "No substrings of length 4 can be formed by permuting and concatenating 'ab' and 'cd' within 'abcdefg'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Create a set of all the permutations of ARR. for each substring of length K*M in S check if it is present in set.</p>",
            "<p>Hash ARR to do so hash all the strings in ARR using polynomial hashing and add them. &nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}