{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15573,
            "title": "Subtree Count",
            "titleSlug": "subtree-count_2569271",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-the-size-n-the-array-is-formed-using-a-tree-with-the-generator-function-you-have-to-obtain-the-tree-which-was-used-to-generate-the-array-and-return-the-number-of-nodes-in-subtree-of-each-node\">You are given an array \u2018arr\u2019 of the size \u2018N\u2019. The array is formed using a tree with the generator function. You have to obtain the tree which was used to generate the array and return the number of nodes in subtree of each node.</h4>\n\n<h4 id=\"below-is-the-code-given-used-to-create-the-array\">Below is the code given used to create the array - :</h4>\n\n<pre><code>Function generate(node):\n\n    arr.Add(node.id)\n    visited[node.id] = True\n\n    for childNode in node.children:\n\n        if childNode is not visited:\n            generate(childNode)\n\n   arr.Add(node.id)\n</code></pre>\n\n<h4 id=\"the-function-is-called-on-the-root-node-of-the-graph-which-is-1\">The function is called on the root node of the graph, which is 1.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>You are given N = 4, \u2018arr\u2019 = [1, 2, 2, 1].The resulting graph will be\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000519_1634976205_graph.png\" alt=\"altTExt\"></p>\n\n<pre><code>For node 1, the subtree count is 2, while for node 2 the subtree count is 1. Hence the answer is [2, 1].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 representing the size of the array.\n\nThe second line of input contains \u2018N\u2019 space-separated integers representing the given array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print space-separated integers, representing the number of nodes in each subtree. \n\nPrint a separate line for each test case.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 10^6\n0 &lt;= arr[i] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\n1 2 2 1\n6\n1 2 2 3 3 1\n</code></pre>\n\n<h5 id=\"sample-ouput-1\">Sample Ouput 1</h5>\n\n<pre><code>2 1\n3 1 1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation:</h5>\n\n<pre><code>For the first test case, N = 4, \u2018arr\u2019 = [1, 2, 2, 1].The resulting graph will be\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000519_1634976205_graph.png\" alt=\"altTExt\"></p>\n\n<pre><code>For node 1, the subtree count is 2, while for node 2 the subtree count is 1. Hence the answer is [2, 1].\n\nFor the second test case, N = 6, \u2018arr\u2019 = [1, 2, 2, 3, 3, 1]. The resulting graph will be\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000518_1634976190_graph2.png\" alt=\"altTExt\"></p>\n\n<pre><code> For node 1, the subtree count is 3, while for node 2 and node 3  the subtree count is 1. Hence the answer is [3, 1, 1].\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n6\n1 2 3 3 2 1\n8\n1 2 3 3 2 4 4 1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3 2 1\n4 2 1 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'arr' of size 'N' generated by a specific tree traversal (described in the code snippet), reconstruct the implicit tree structure and determine the number of nodes within the subtree rooted at each distinct node present in the array. The tree traversal function 'generate(node)' first adds the node's ID to the array, marks it as visited, then recursively traverses each unvisited child node. Finally, it adds the node's ID again to the array.\n\nThe root node is assumed to be 1. The goal is to calculate and return an array where each element represents the subtree size for a distinct node identified from 'arr', maintaining the order of first appearance of these nodes in 'arr'.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 10^6",
                    "0 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "arr=[1, 2, 2, 1]",
                        "output": "[2, 1]",
                        "explanation": "The resulting graph has nodes 1 and 2. Node 1 has node 2 as a child.  The subtree of node 1 contains nodes 1 and 2 (size 2). The subtree of node 2 contains only node 2 (size 1)."
                    },
                    {
                        "input": "arr=[1, 2, 2, 3, 3, 1]",
                        "output": "[3, 1, 1]",
                        "explanation": "The resulting graph has nodes 1, 2, and 3. Node 1 has nodes 2 and 3 as children. Node 2 and 3 are leaf nodes. The subtree of node 1 contains nodes 1, 2, and 3 (size 3). The subtree of node 2 contains only node 2 (size 1). The subtree of node 3 contains only node 3 (size 1)."
                    },
                    {
                        "input": "arr=[1, 2, 3, 3, 2, 1]",
                        "output": "[3, 2, 1]",
                        "explanation": "The resulting graph has nodes 1, 2, and 3. Node 1 has node 2 as a child, and node 2 has node 3 as a child.  The subtree of node 1 contains nodes 1, 2, and 3 (size 3). The subtree of node 2 contains nodes 2 and 3 (size 2). The subtree of node 3 contains only node 3 (size 1)."
                    },
                    {
                        "input": "arr=[1, 2, 3, 3, 2, 4, 4, 1]",
                        "output": "[4, 2, 1, 1]",
                        "explanation": "The resulting graph has nodes 1, 2, 3, and 4. Node 1 has node 2 as a child, and node 2 has node 3 as a child. Node 1 also has 4 as a child which is not connected to 2. The subtree of node 1 contains nodes 1, 2, 3, and 4 (size 4). The subtree of node 2 contains nodes 2 and 3 (size 2). The subtree of node 3 contains only node 3 (size 1). The subtree of node 4 contains only node 4 (size 1)."
                    },
                    {
                        "input": "arr=[1, 1]",
                        "output": "[1]",
                        "explanation": "The resulting graph has only node 1. The subtree of node 1 contains only node 1 (size 1)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to build the tree from the array.</p>",
            "<p>Count the distance between the occurrence of a number in the array</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}