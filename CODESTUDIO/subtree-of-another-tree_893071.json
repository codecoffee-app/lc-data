{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8579,
            "title": "Subtree of Another Tree",
            "titleSlug": "subtree-of-another-tree_893071",
            "content": "<h4 id=\"given-two-binary-trees-t-and-s-check-whether-tree-s-has-exactly-the-same-structure-and-node-values-with-a-subtree-of-t-i-e-check-if-tree-s-is-a-subtree-of-the-tree-t\">Given two binary trees T and S, check whether tree S has exactly the same structure and node values with a subtree of T, i.e., check if tree S is a subtree of the tree T.</h4>\n\n<h4 id=\"a-subtree-of-a-tree-t-is-a-tree-s-consisting-of-a-node-in-t-and-all-of-its-descendants-in-t-the-subtree-corresponding-to-the-root-node-is-the-entire-tree-the-subtree-corresponding-to-any-other-node-is-called-a-proper-subtree\">A subtree of a tree T is a tree S consisting of a node in T and all of its descendants in T. The subtree corresponding to the root node is the entire tree; the subtree corresponding to any other node is called a proper subtree.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 representing the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains elements of the first tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nThe second line of each test case contains elements of the second tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binary-tree-2-5399.png\" alt=\"example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation:</h4>\n\n<pre><code>Level 1:\nThe root node of the tree is 1\n\nLevel 2:\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3:\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4:\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5:\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree.\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the only line of output prints true if tree S is a subtree of the tree T else prints false.\n\nThe output for each test case is in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N, M &lt;= 1000\n0 &lt;= data &lt;= 10^6 and data != -1\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 and \u2018M\u2019 are the number of nodes in the given binary trees\u2019, and \u201cdata\u201d is the value of the binary tree node.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n3 6 7 -1 -1 -1 -1\n3 4 5 1 2 -1 -1 -1 -1 0 -1 -1 -1\n4 1 2 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/two-binary-trees-5944.png\" alt=\"Sample Input 1\"></p>\n\n<pre><code>For the first test case, the second tree is a subtree of the first tree as the second tree has exactly the same structure and node values with a subtree of the first tree.\n\nFor the second test case, the second tree is not a subtree of the first tree because node 2 in the first tree has 1 child having a value 0, whereas node 2 in the second tree doesn\u2019t have any child.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n26 10 3 4 6 -1 3 -1 30 -1 -1 -1 -1 -1 -1\n10 4 6 -1 30 -1 -1 -1 -1\n3 4 5 1 2 -1 -1 -1 -1 -1 -1\n4 1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 31,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two binary trees, T and S, determine if tree S is a subtree of tree T. A subtree of T is a tree consisting of a node in T and all of its descendants. The subtree corresponding to the root node is the entire tree.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N, M <= 1000 (Number of nodes in trees T and S respectively)",
                    "0 <= data <= 10^6 and data != -1 (Value of a binary tree node)"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1\n3 6 7 -1 -1 -1 -1",
                        "output": "true",
                        "explanation": "Tree S (3 6 7 -1 -1 -1 -1) is a subtree of tree T (1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1) as it has the same structure and node values as a part of T."
                    },
                    {
                        "input": "3 4 5 1 2 -1 -1 -1 -1 0 -1 -1 -1\n4 1 2 -1 -1 -1 -1",
                        "output": "false",
                        "explanation": "Tree S (4 1 2 -1 -1 -1 -1) is not a subtree of tree T (3 4 5 1 2 -1 -1 -1 -1 0 -1 -1 -1) because node 2 in T has one child with value 0, while node 2 in S has no children."
                    },
                    {
                        "input": "26 10 3 4 6 -1 3 -1 30 -1 -1 -1 -1 -1 -1\n10 4 6 -1 30 -1 -1 -1 -1",
                        "output": "true",
                        "explanation": "Tree S (10 4 6 -1 30 -1 -1 -1 -1) is a subtree of tree T (26 10 3 4 6 -1 3 -1 30 -1 -1 -1 -1 -1 -1) as it matches a sub-structure within T."
                    },
                    {
                        "input": "3 4 5 1 2 -1 -1 -1 -1 -1 -1\n4 1 -1 -1 -1",
                        "output": "false",
                        "explanation": "Tree S (4 1 -1 -1 -1) is not a subtree of T (3 4 5 1 2 -1 -1 -1 -1 -1 -1) due to structural or value differences."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For every visited node in the traversal of tree \u2018T\u2019, see if the subtree rooted with this node is identical to S.</p>",
            "<p>Inorder and preorder/postorder traversal identify a tree uniquely.</p>",
            "<p>Use the KMP algorithm to check if one string is a substring of another one.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}