{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7573,
            "title": "Sudoku Solver",
            "titleSlug": "sudoku-solver_699919",
            "content": "<h4 id=\"you-have-been-given-a-9x9-2d-integer-matrix-mat-representing-a-sudoku-puzzle-the-empty-cells-of-the-sudoku-are-filled-with-zeros-and-the-rest-of-the-cells-are-filled-with-integers-from-1-to-9-your-task-is-to-fill-all-the-empty-cells-such-that-the-final-matrix-represents-a-sudoku-solution\">You have been given a 9x9 2d integer matrix &#39;MAT&#39; representing a Sudoku puzzle. The empty cells of the Sudoku are filled with zeros, and the rest of the cells are filled with integers from 1 to 9. Your task is to fill all the empty cells such that the final matrix represents a Sudoku solution.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>A Sudoku solution must satisfy all the following conditions-\n1. Each of the digits 1-9 must occur exactly once in each row.\n2. Each of the digits 1-9 must occur exactly once in each column.\n3. Each of the digits 1-9 must occur exactly once in each of the 9, 3x3 sub-grids of the grid.\n\nYou can also assume that there will be only one sudoku solution for the given matrix.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The input consists of 9 lines. Each line contains 9 single space-separated integers representing a row of the matrix. An empty cell is represented by 0.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>Size of MAT is 9x9\n0 &lt;= MAT[i][j] &lt;= 9\n\nwhere an empty cell is given by 0 in the matrix.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The output is consists of 9 lines. Each line contains 9 single space-separated integers where the empty cells from the input matrix are replaced by some integers.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You are not required to print anything, and it has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1</h5>\n\n<pre><code>3 0 6 5 0 8 4 0 0\n5 2 0 0 0 0 0 0 0\n0 8 7 0 0 0 0 3 1\n0 0 3 0 1 0 0 8 0\n9 0 0 8 6 3 0 0 5\n0 5 0 0 9 0 6 0 0\n1 3 0 0 0 0 2 5 0\n0 0 0 0 0 0 0 7 4\n0 0 5 2 0 6 3 0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code>3 1 6 5 7 8 4 9 2\n5 2 9 1 3 4 7 6 8\n4 8 7 6 2 9 5 3 1\n2 6 3 4 1 5 9 8 7\n9 7 4 8 6 3 1 2 5\n8 5 1 7 9 2 6 4 3\n1 3 8 9 4 7 2 5 6\n6 9 2 3 5 1 8 7 4\n7 4 5 2 8 6 3 1 9\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1</h5>\n\n<pre><code>In the output:\nIn each row, each of the digits 1-9 is occurring exactly once.\nIn each column, each of the digits 1-9 is occurring exactly once.\nIn each 3x3 sub-grids of the grid, each of the digits is occurring exactly once.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 125,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 9x9 2D integer matrix 'MAT' representing a Sudoku puzzle, where empty cells are filled with zeros and other cells contain integers from 1 to 9, complete the empty cells so that the final matrix represents a valid Sudoku solution. A valid Sudoku solution must satisfy the following conditions:\n\n1. Each of the digits 1-9 must occur exactly once in each row.\n2. Each of the digits 1-9 must occur exactly once in each column.\n3. Each of the digits 1-9 must occur exactly once in each of the 9, 3x3 sub-grids of the grid.\n\nYou can assume that there is only one solution for the given Sudoku puzzle.",
                "constraints": [
                    "Size of MAT is 9x9",
                    "0 <= MAT[i][j] <= 9, where an empty cell is given by 0 in the matrix."
                ],
                "testcases": [
                    {
                        "input": "3 0 6 5 0 8 4 0 0\n5 2 0 0 0 0 0 0 0\n0 8 7 0 0 0 0 3 1\n0 0 3 0 1 0 0 8 0\n9 0 0 8 6 3 0 0 5\n0 5 0 0 9 0 6 0 0\n1 3 0 0 0 0 2 5 0\n0 0 0 0 0 0 0 7 4\n0 0 5 2 0 6 3 0 0",
                        "output": "3 1 6 5 7 8 4 9 2\n5 2 9 1 3 4 7 6 8\n4 8 7 6 2 9 5 3 1\n2 6 3 4 1 5 9 8 7\n9 7 4 8 6 3 1 2 5\n8 5 1 7 9 2 6 4 3\n1 3 8 9 4 7 2 5 6\n6 9 2 3 5 1 8 7 4\n7 4 5 2 8 6 3 1 9",
                        "explanation": "The output matrix represents a valid Sudoku solution.  Each row, each column, and each 3x3 subgrid contains the digits 1-9 exactly once."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try every possible value, i.e., 1 to 9, for each of the empty cells.</p>",
            "<p>Try BackTracking. We don\u2019t need to try every number for 1 to 9 for each empty cell. We just need to try candidate numbers (which don\u2019t violate the rules).</p>"
        ],
        "relatedTopics": [
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity - O(9^K)\n    Space Complexity - O(1)\n\n    where K is the number of empty cells in the sudoku.\n*/\n\n// Function to check whether we can put a particular value\n// to a particular position or not.\nbool canPut(vector<vector<int>> &sudoku, int row, int col, int num)\n{\n    for (int i = 0; i < 9; i++)\n    {\n        if (sudoku[i][col] == num || sudoku[row][i] == num)\n        {\n            return false;\n        }\n        if (sudoku[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == num)\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// Function to check all the valid way to solve the sudoku.\nbool backTrack(vector<vector<int>> &sudoku, int i, int j)\n{\n    if (j == 9)\n    {\n        if (i == 8)\n        {\n            return true;\n        }\n\n        j = 0;\n        i++;\n    }\n\n    if (sudoku[i][j] != 0)\n    {\n        return backTrack(sudoku, i, j + 1);\n    }\n\n    // Trying all possible values.\n    for (int put = 1; put <= 9; put++)\n    {\n        if (canPut(sudoku, i, j, put))\n        {\n            sudoku[i][j] = put;\n\n            if (backTrack(sudoku, i, j + 1))\n            {\n                return true;\n            }\n\n            sudoku[i][j] = 0;\n        }\n    }\n\n    return false;\n}\n\nvoid solveSudoku(vector<vector<int>> &sudoku)\n{\n    backTrack(sudoku, 0, 0);\n    return;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time Complexity - O(9^K)\n    Space Complexity - O(1)\n\n    where K is the number of empty cells in the sudoku.\n*/\n\npublic class Solution {\n\n\tpublic static void solveSudoku(int[][] sudoku) {\n\t\tbackTrack(sudoku, 0, 0);\n\t\treturn;\n\n\t}\n\n    // Function to check all the valid way to solve the sudoku.\n\tprivate static boolean backTrack(int[][] sudoku, int i, int j) {\n\t\t\n        if (j == 9) {\n\t\t\t\n            if (i == 8) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tj = 0;\n\t\t\ti++;\n\t\t}\n\t\t\n        if (sudoku[i][j] != 0) {\n\t\t\treturn backTrack(sudoku, i, j + 1);\n\t\t}\n\t\t\n        // Trying all possible values.\n        for (int put = 1; put <= 9; put++) {\n\n\t\t\tif (canPut(sudoku, i, j, put)) {\n\t\t\t\n                sudoku[i][j] = put;\n\t\t\t\n                if (backTrack(sudoku, i, j + 1)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\n                sudoku[i][j] = 0;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\n\t}\n\n\tprivate static boolean canPut(int[][] sudoku, int row, int col, int num) {\n\t\t\n        for (int i = 0; i < 9; i++) {\n\t\t\n            if (sudoku[i][col] == num || sudoku[row][i] == num) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\n            if (sudoku[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == num) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n        return true;\n\t}\n\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "''' \n    Time Complexity - O(9^K)\n    Space Complexity - O(1)\n\n    where K is the number of empty cells in the sudoku.\n'''\n\nfrom sys import stdin, setrecursionlimit\nsetrecursionlimit(10**7)\n\n# Function to check whether we can put a particular value\n# to a particular position or not.\ndef canPut(sudoku, row, col, num):\n\n    for i in range(9):\n\n        if(sudoku[i][col] == num or sudoku[row][i] == num):\n            return False\n\n        if(sudoku[3 * (row // 3) + i // 3][3 * (col // 3) + i % 3] == num):\n            return False\n\n    return True\n\n\n# Function to check all the valid way to solve the sudoku.\ndef backTrack(sudoku, i, j):\n\n    if (j == 9):\n        if (i == 8):\n            return True\n\n        j = 0\n        i += 1\n\n    if (sudoku[i][j] != 0):\n        return backTrack(sudoku, i, j + 1)\n\n    # Trying all possible values.\n    for put in range(1, 10):\n\n        if (canPut(sudoku, i, j, put)):\n            sudoku[i][j] = put\n            if (backTrack(sudoku, i, j + 1)):\n                return True\n\n            sudoku[i][j] = 0\n\n    return False\n\n\ndef solveSudoku(sudoku):\n    backTrack(sudoku, 0, 0)\n\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}