{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7661,
            "title": "Sudoku?",
            "titleSlug": "sudoku_758961",
            "content": "<h4 id=\"you-have-been-given-a-9-x-9-2d-matrix-matrix-with-some-cells-filled-with-digits-1-9-and-some-empty-cells-denoted-by-0\">You have been given a 9 X 9 2D matrix &#39;MATRIX&#39; with some cells filled with digits(1 - 9), and some empty cells (denoted by 0).</h4>\n\n<h4 id=\"you-need-to-find-whether-there-exists-a-way-to-fill-all-the-empty-cells-with-some-digit-1-9-such-that-the-final-matrix-is-a-valid-sudoku-solution\">You need to find whether there exists a way to fill all the empty cells with some digit(1 - 9) such that the final matrix is a valid Sudoku solution.</h4>\n\n<h4 id=\"a-sudoku-solution-must-satisfy-all-the-following-conditions\">A Sudoku solution must satisfy all the following conditions-</h4>\n\n<pre><code>1. Each of the digits 1 - 9 must occur exactly once in each row.\n2. Each of the digits 1 - 9 must occur exactly once in each column.\n3. Each of the digits 1 - 9 must occur exactly once in each of the 9, 3 x 3 sub-matrices of the matrix.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>1. There will always be a cell in the matrix which is empty.\n2. The given initial matrix will always be consistent according to the rules mentioned in the problem statement.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains a single integer &#39;T&#39; denoting the number of test cases.\nThen &#39;T&#39; test cases follow.\n\nEvery test case contains 9 lines, with each line containing 9 single space-separated digits (0, if the cell is empty or a digit (1 - 9) otherwise).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing \u201cyes\u201d(without quotes), if there exists a Sudoku solution or \u201cno\u201d (without quotes) otherwise. Note the lowercase format of the output.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 5\nN = 9\n0 &lt;= MATRIX[i][j] &lt;= 9\n\nWhere &#39;N&#39; denotes the size of the given square matrix.\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n9 0 0 0 2 0 7 5 0 \n6 0 0 0 5 0 0 4 0 \n0 2 0 4 0 0 0 1 0 \n2 0 8 0 0 0 0 0 0 \n0 7 0 5 0 9 0 6 0 \n0 0 0 0 0 0 4 0 1 \n0 1 0 0 0 5 0 8 0 \n0 9 0 0 7 0 0 0 4 \n0 8 2 0 4 0 0 0 6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>yes\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input1\">Explanation of the Sample Input1:</h5>\n\n<pre><code>One of the possible solutions is:\n9 4 1 3 2 6 7 5 8\n6 3 7 1 5 8 2 4 9\n8 2 5 4 9 7 6 1 3\n2 6 8 7 1 4 3 9 5\n1 7 4 5 3 9 8 6 2\n3 5 9 6 8 2 4 7 1\n4 1 3 2 6 5 9 8 7\n5 9 6 8 7 3 1 2 4\n7 8 2 9 4 1 5 3 6\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n1 5 9 0 0 6 0 3 2\n2 7 4 0 0 0 0 0 0\n3 8 6 2 0 0 0 0 5\n4 9 2 5 0 1 0 8 0\n6 3 7 0 4 0 0 0 0\n5 1 0 8 2 0 0 0 0\n8 2 1 0 0 0 0 0 0\n7 6 0 1 0 0 4 2 0\n9 4 3 0 7 0 0 6 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>no\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input2\">Explanation of the Sample Input2:</h5>\n\n<pre><code>In the third column from the left, there are two empty cells out of which one has to be filled with \u20188\u2019, but we can\u2019t put 8 in any of those two cells.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 303,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 9x9 2D matrix (MATRIX) representing a Sudoku puzzle, with some cells filled with digits from 1 to 9 and empty cells denoted by 0, determine if there exists a valid Sudoku solution by filling the empty cells with digits from 1 to 9.  A valid Sudoku solution adheres to the following rules:\n\n1.  Each digit from 1 to 9 must appear exactly once in each row.\n2.  Each digit from 1 to 9 must appear exactly once in each column.\n3.  Each digit from 1 to 9 must appear exactly once in each of the nine 3x3 sub-matrices of the matrix.\n\nThe initial matrix is guaranteed to be consistent with the Sudoku rules. There will always be at least one empty cell in the input matrix.",
                "constraints": [
                    "1 <= T <= 5",
                    "N = 9",
                    "0 <= MATRIX[i][j] <= 9",
                    "Where 'N' denotes the size of the given square matrix.",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "9 0 0 0 2 0 7 5 0 \n6 0 0 0 5 0 0 4 0 \n0 2 0 4 0 0 0 1 0 \n2 0 8 0 0 0 0 0 0 \n0 7 0 5 0 9 0 6 0 \n0 0 0 0 0 0 4 0 1 \n0 1 0 0 0 5 0 8 0 \n0 9 0 0 7 0 0 0 4 \n0 8 2 0 4 0 0 0 6",
                        "output": "yes",
                        "explanation": "One possible solution is:\n9 4 1 3 2 6 7 5 8\n6 3 7 1 5 8 2 4 9\n8 2 5 4 9 7 6 1 3\n2 6 8 7 1 4 3 9 5\n1 7 4 5 3 9 8 6 2\n3 5 9 6 8 2 4 7 1\n4 1 3 2 6 5 9 8 7\n5 9 6 8 7 3 1 2 4\n7 8 2 9 4 1 5 3 6"
                    },
                    {
                        "input": "1 5 9 0 0 6 0 3 2\n2 7 4 0 0 0 0 0 0\n3 8 6 2 0 0 0 0 5\n4 9 2 5 0 1 0 8 0\n6 3 7 0 4 0 0 0 0\n5 1 0 8 2 0 0 0 0\n8 2 1 0 0 0 0 0 0\n7 6 0 1 0 0 4 2 0\n9 4 3 0 7 0 0 6 1",
                        "output": "no",
                        "explanation": "In the third column from the left, placing an '8' to complete the column constraints is impossible due to existing numbers in the relevant row or 3x3 subgrid. This demonstrates a scenario where no valid digit can be placed, leading to no possible solution."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a brute force approach, try all configurations.</p>",
            "<p>Use some intelligent brute force (try only valid digits in each empty cell), use backtracking.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity : O(9 ^ K)\r\n    Space complexity : O(K)\r\n\r\n    where 'K' denotes the number of empty cells in the matrix.\r\n*/\r\n\r\n#include <unordered_map>\r\n\r\n#define n 9\r\n\r\nbool isValid(int matrix[n][n]) {\r\n    unordered_map<int, int> row[n], column[n], subMatrix[3][3];\r\n\r\n    for (int r = 0; r < n; r++) {\r\n        for (int c = 0; c < n; c++) {\r\n            if (matrix[r][c] == 0) {\r\n                continue;\r\n            }\r\n\r\n            row[r][matrix[r][c]] += 1;\r\n            column[c][matrix[r][c]] += 1;\r\n            subMatrix[r / 3][c / 3][matrix[r][c]] += 1;\r\n\r\n            if (subMatrix[r / 3][c / 3][matrix[r][c]] > 1 || column[c][matrix[r][c]] > 1 ||\r\n                row[r][matrix[r][c]] > 1) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nbool solve(int matrix[n][n], int i, int j) {\r\n\r\n    if (i == n - 1 && j == n) {\r\n        return true;\r\n    }\r\n\r\n    if (j == n) {\r\n        i++;\r\n        j = 0;\r\n    }\r\n\r\n    if (matrix[i][j] != 0) {\r\n        return solve(matrix, i, j + 1);\r\n    }\r\n\r\n    for (int digit = 1; digit <= n; digit++) {\r\n        matrix[i][j] = digit;\r\n\r\n        if (isValid(matrix)) {\r\n            if (solve(matrix, i, j + 1)) {\r\n            \treturn true;\r\n            }\r\n        }\r\n\r\n        matrix[i][j] = 0;\r\n    }\r\n    return false;\r\n}\r\n\r\nbool isItSudoku(int matrix[9][9]) {\r\n\r\n    return solve(matrix, 0, 0);\r\n}\r\n\r\n\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time complexity : O(9 ^ K)\r\n    Space complexity : O(K)\r\n\r\n    where 'K' denotes the number of empty cells in the matrix.\r\n*/\r\n\r\npublic class Solution {\r\n\r\n    static private boolean isValid(int matrix[][]) {\r\n        int n = matrix.length;\r\n        int[][] row = new int[n][n + 1];\r\n        int[][] column = new int[n][n + 1];\r\n        int[][][] subMatrix = new int[3][3][n + 1];\r\n\r\n        for (int r = 0; r < n; r++) {\r\n            for (int c = 0; c < n; c++) {\r\n                if (matrix[r][c] == 0) {\r\n                    continue;\r\n                }\r\n                row[r][matrix[r][c]] += 1;\r\n                column[c][matrix[r][c]] += 1;\r\n                subMatrix[r / 3][c / 3][matrix[r][c]] += 1;\r\n                if (subMatrix[r / 3][c / 3][matrix[r][c]] > 1 || column[c][matrix[r][c]] > 1 ||\r\n                        row[r][matrix[r][c]] > 1) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    static private boolean solve(int matrix[][], int i, int j) {\r\n\r\n        int n = matrix.length;\r\n        if (i == n - 1 && j == n) {\r\n            return true;\r\n        }\r\n\r\n        if (j == n) {\r\n            i++;\r\n            j = 0;\r\n        }\r\n\r\n        if (matrix[i][j] != 0) {\r\n            return solve(matrix, i, j + 1);\r\n        }\r\n\r\n        for (int digit = 1; digit <= n; digit++) {\r\n            matrix[i][j] = digit;\r\n\r\n            if (isValid(matrix)) {\r\n                if (solve(matrix, i, j + 1)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            matrix[i][j] = 0;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static boolean isItSudoku(int matrix[][]) {\r\n\r\n        return solve(matrix, 0, 0);\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time complexity : O(9 ^ K)\r\n    Space complexity : O(K)\r\n\r\n    where 'K' denotes the number of empty cells in the matrix.\r\n'''\r\n\r\ndef isValid(matrix):\r\n\r\n    n = len(matrix)\r\n    row = [[0 for j in range(n + 1)] for i in range(n)]\r\n    column = [[0 for j in range(n + 1)] for i in range(n)]\r\n    subMatrix = [[[0 for k in range(n + 1)] for j in range(3)] for i in range(3)]\r\n\r\n    for r in range(n):\r\n        for c in range(n):\r\n            if (matrix[r][c] == 0):\r\n                continue\r\n\r\n            row[r][matrix[r][c]] += 1\r\n            column[c][matrix[r][c]] += 1\r\n            subMatrix[r // 3][c // 3][matrix[r][c]] += 1\r\n\r\n            if (subMatrix[r // 3][c // 3][matrix[r][c]] > 1 or column[c][matrix[r][c]] > 1 or\r\n                    row[r][matrix[r][c]] > 1):\r\n                return False\r\n\r\n    return True\r\n\r\ndef solve(matrix, i, j):\r\n     n = len(matrix)\r\n\r\n     if (i == n - 1 and j == n):\r\n         return True\r\n\r\n     if j == n:\r\n         i = i + 1\r\n         j = 0\r\n\r\n     if (matrix[i][j] != 0):\r\n         return solve(matrix, i, j + 1)\r\n\r\n     for digit in range(1, n + 1):\r\n         matrix[i][j] = digit\r\n\r\n         if (isValid(matrix)):\r\n             if (solve(matrix, i, j + 1)):\r\n                 return True\r\n\r\n         matrix[i][j] = 0\r\n\r\n     return False\r\n\r\n\r\ndef isItSudoku(matrix):\r\n\r\n    return solve(matrix, 0, 0)",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}