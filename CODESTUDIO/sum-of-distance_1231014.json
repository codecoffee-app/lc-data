{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10527,
            "title": "Sum of Distance",
            "titleSlug": "sum-of-distance_1231014",
            "content": "<h4 id=\"you-are-given-an-undirected-unweighted-graph-such-that-there-are-no-loops-in-this-graph-and-it-is-strongly-connected-and-there-are-always-vertices-1-edges-in-the-graph-for-each-node-you-need-to-find-the-sum-of-the-distance-of-all-other-nodes-from-the-given-node\">You are given an undirected unweighted graph such that there are no loops in this graph and it is strongly connected and there are always (vertices-1) edges in the graph. For each node, you need to find the sum of the distance of all other nodes from the given node.</h4>\n\n<h4 id=\"distance-between-any-two-nodes-is-the-number-of-edges-between-the-two-given-nodes\">Distance between any two nodes is the number of edges between the two given nodes.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39;, the number of test cases.\n\nThe first line of the test case contains a single integer \u2018N\u2019.\n\nFrom the second line onwards next &#39;N-1&#39; lines denote the edges of the graph.\n\nEach edge is characterized by two integers  &#39;A&#39; and &#39;B&#39; where &#39;A&#39; and &#39;B&#39; denote the endpoints of the edge. The edges[i][0], edges[i][1] contains the endpoints of edges.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the list where the ith element denotes the distance of the ith vertex from all others vertices.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^3\n0 &lt;= edges[i][0], edges[i][1] &lt;= N-1  \nTotal number of edges = N-1\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1</h5>\n\n<pre><code>2\n5\n0 4\n3 1\n3 2\n0 3\n3\n0 1\n0 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1</h5>\n\n<pre><code>6 8 8 5 9\n2 3 3\n\nFor first test-case the graph will be :-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-8261.PNG\" alt=\"\"></p>\n\n<pre><code>The distance between 0 and 1 is 2\nDistance between 0 and 2 is 2\nDistance between 0 and 4 and 0 and 3 is 1\nSo ans[0]=2+2+1+1=6\nSimilarly, it can be calculated for others.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2</h5>\n\n<pre><code>2\n6\n0 4\n3 1\n3 2\n0 3\n3 5\n2\n0 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2</h5>\n\n<pre><code>8 10 10 6 12 10 \n1 1 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected, unweighted, and strongly connected graph with no self-loops and exactly (vertices - 1) edges. For each node in the graph, calculate the sum of the distances to all other nodes. The distance between two nodes is defined as the number of edges in the shortest path between them.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^3",
                    "0 <= edges[i][0], edges[i][1] <= N-1",
                    "Total number of edges = N-1",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n5\n0 4\n3 1\n3 2\n0 3\n3\n0 1\n0 2",
                        "output": "6 8 8 5 9\n2 3 3",
                        "explanation": "For the first test case with N=5, the graph's adjacency list can be derived from the given edges.  ans[0] = distance(0,1) + distance(0,2) + distance(0,3) + distance(0,4) = 2 + 2 + 1 + 1 = 6. Similarly, the sum of distances from each node to all other nodes is calculated and the result is [6, 8, 8, 5, 9]. For the second test case with N=3, the process is repeated, leading to the output [2, 3, 3]."
                    },
                    {
                        "input": "2\n6\n0 4\n3 1\n3 2\n0 3\n3 5\n2\n0 1",
                        "output": "8 10 10 6 12 10\n1 1",
                        "explanation": "For the first test case with N=6, the graph's adjacency list can be derived from the given edges. For the second test case with N=2, the process is repeated, leading to the output [1, 1]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use bfs/dfs from each vertex to find the distance from all vertices.</p>",
            "<p>Use two dfs traversal first to find the distance between parent and its all childs and its number of children. Then in the second dfs we can find the answer for child using parent\u2019s answer.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}