{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8391,
            "title": "Sum of infinite array",
            "titleSlug": "sum-of-infinite-array_873335",
            "content": "<h4 id=\"given-an-array-a-of-n-integers-and-you-have-also-defined-the-new-array-b-as-a-concatenation-of-array-a-for-an-infinite-number-of-times\">Given an array \u201cA\u201d of N integers and you have also defined the new array \u201cB\u201d as a concatenation of array \u201cA\u201d for an infinite number of times.</h4>\n\n<h4 id=\"for-example-if-the-given-array-a-is-1-2-3-then-infinite-array-b-is-1-2-3-1-2-3-1-2-3\">For example, if the given array \u201cA\u201d is [1,2,3] then, infinite array \u201cB\u201d is [1,2,3,1,2,3,1,2,3,.......].</h4>\n\n<h4 id=\"now-you-are-given-q-queries-each-query-consists-of-two-integers-l-and-r-1-based-indexing-your-task-is-to-find-the-sum-of-the-subarray-from-index-l-to-r-both-inclusive-in-the-infinite-array-b-for-each-query\">Now you are given Q queries, each query consists of two integers  \u201cL\u201c and \u201cR\u201d(1-based indexing). Your task is to find the sum of the subarray from index \u201cL\u201d to \u201cR\u201d (both inclusive) in the infinite array \u201cB\u201d  for each query.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The value of the sum can be very large, return the answer as modulus 10^9+7.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run.\n\nThen the T test cases follow. \n\nThe first line of each test case contains a single integer N, denoting the size of the array \u201cA\u201d.\n\nThe second line of each test case contains N single space-separated integers, elements of the array \u201cA\u201d.\n\nThe third line of each test case contains a single integer Q, denoting the number of queries.\n\nThen each of the Q lines of each test case contains two single space-separated integers L, and R denoting the left and the  right index of the infinite array \u201cB\u201d whose sum is to be returned. \n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print Q space-separated integers that denote the answers of the given Q queries. \nPrint the answer to each test case in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^4   \n1 &lt;= A[i] &lt;= 10^9\n1 &lt;= Q &lt;= 10^4\n1 &lt;= L &lt;= R &lt;= 10^18\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n3\n1 2 3\n2\n1 3\n1 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>6 9\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">Explanation to Sample Input 1 :</h5>\n\n<pre><code>For the first test case, the given array A is [1,2,3] therefore the infinite array \u201cB\u201d will be [1,2,3,1,2,3,1,2,3,.......]. So the answer for the given first query is 6 because the sum of the subarray from index 1 to 3 of infinite array \u201cB\u201d i.e. (B[1]+B[2]+B[3]) is 6.\n\nFor the given second query is 9 because the sum of the subarray from index 1 to 5 of array \u201cB\u201d .ie (B[1]+B[2]+B[3]+B[4]+B[5]) is 9.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n4\n5 2 6 9\n3\n1 5\n10 13\n7 11\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>27 22 28\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3457,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'A' of N integers, construct an infinite array 'B' by repeatedly concatenating 'A'.  You are given Q queries, each specified by a left index 'L' and a right index 'R' (1-based indexing) within the infinite array 'B'. For each query, calculate the sum of the subarray from index 'L' to 'R' (inclusive) in 'B', modulo 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^4",
                    "1 <= A[i] <= 10^9",
                    "1 <= Q <= 10^4",
                    "1 <= L <= R <= 10^18"
                ],
                "testcases": [
                    {
                        "input": "n = 3, arr=[1, 2, 3], q = 2, queries=[[1, 3], [1, 5]]",
                        "output": "[6, 9]",
                        "explanation": "Array A is [1, 2, 3]. Infinite array B is [1, 2, 3, 1, 2, 3, ...].\nQuery 1: Sum from index 1 to 3 is 1 + 2 + 3 = 6.\nQuery 2: Sum from index 1 to 5 is 1 + 2 + 3 + 1 + 2 = 9."
                    },
                    {
                        "input": "n = 4, arr=[5, 2, 6, 9], q = 3, queries=[[1, 5], [10, 13], [7, 11]]",
                        "output": "[27, 22, 28]",
                        "explanation": "Array A is [5, 2, 6, 9]. Infinite array B is [5, 2, 6, 9, 5, 2, 6, 9, ...].\nQuery 1: Sum from index 1 to 5 is 5 + 2 + 6 + 9 + 5 = 27.\nQuery 2: Sum from index 10 to 13 is 2 + 6 + 9 + 5 = 22.\nQuery 3: Sum from index 7 to 11 is 6 + 9 + 5 + 2 + 6 = 28."
                    },
                    {
                        "input": "n = 2, arr=[1000000000, 1000000000], q = 1, queries=[[1, 3]]",
                        "output": "[3000000000]",
                        "explanation": "Array A is [1000000000, 1000000000]. Infinite array B is [1000000000, 1000000000, 1000000000, 1000000000, ...].\nQuery 1: Sum from index 1 to 3 is 1000000000 + 1000000000 + 1000000000 = 3000000000. Which can overflow if not modded properly."
                    },
                    {
                        "input": "n = 1, arr=[7], q = 1, queries=[[1, 1000000000000]]",
                        "output": "[7000000000000]",
                        "explanation": "Array A is [7]. Infinite array B is [7, 7, 7, 7, 7, ...].  Query 1: Sum from 1 to 10^12 is 7 * 10^12 = 7000000000000"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a solution to iterate the given array again and again instead of creating a new infinite array.</p>",
            "<p>Think of a solution not to reiterate an array instead use a prefix sum array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity:O(Q+N).\r\n    Space Complexity:O(N).\r\n\r\n    Where N is the size of the given array, and Q is the number of queries given.\r\n*/\r\n\r\nint mod = 1000000007;\r\n\r\n// Function to calculate prefix sum upto index x of the infite array.\r\nlong long func(vector<long long> &sumArray, long long x, long long n) {\r\n\r\n    // Number of times the given array comes completely upto index x.\r\n    long long count = (x / n) % mod;\r\n\r\n    long long res = (count * sumArray[(int) n]) % mod;\r\n\r\n    // Adding the remaining elements sum.\r\n    res = (res + sumArray[(int) (x % n)]) % mod;\r\n\r\n    return res;\r\n}\r\n\r\nvector<int> sumInRanges(vector<int> &arr, int n, vector<vector<long long>> &queries, int q) {\r\n\r\n    // It stores answer for each query.\r\n    vector<int> ans;\r\n\r\n    // It store cumulative sum where sumArray[i] = sum(A[0]+..A[i]).\r\n    vector<long long> sumArray(n + 1);\r\n\r\n    for (int i = 1; i <= n; i++) {\r\n        sumArray[i] = (sumArray[i - 1] + arr[i - 1]) % mod;\r\n    }\r\n\r\n    // Traversing the given queries.\r\n    for (int i = 0; i < queries.size(); i++) {\r\n        vector<long long> range = queries[i];\r\n        long long l = range[0];\r\n        long long r = range[1];\r\n\r\n        // It stores the prefix sum from index 0 to index r in an infinite array.\r\n        long long rsum = func(sumArray, r, n);\r\n\r\n        // It stores the prefix sum from index 0 to index l-1 in an infinite array.\r\n        long long lsum = func(sumArray, l - 1, n);\r\n\r\n        // Add answer for each query.\r\n        ans.push_back((int) ((rsum - lsum + mod) % mod));\r\n\r\n    }\r\n\r\n    return ans;\r\n    \r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity:O(Q+N).\r\n    Space Complexity:O(N).\r\n    Where N is the size of the given array, and Q is the number of queries given.\r\n\r\n*/\r\n\r\nimport java.util.List;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n\r\n    private static int mod = (int) 1e9 + 7;\r\n\r\n    public static List<Integer> sumInRanges(int[] arr, int n, List<List<Long>> queries, int q) {\r\n\r\n        // It stores answer for each query.\r\n        List<Integer> ans = new ArrayList<>();\r\n\r\n        // It store cumulative sum where sumArray[i] = sum(A[0]+..A[i]).\r\n        long sumArray[] = new long[n + 1];\r\n\r\n        for (int i = 1; i <= n; i++) {\r\n            sumArray[i] = (sumArray[i - 1] + arr[i - 1]) % mod;\r\n        }\r\n\r\n        // Traversing the given queries.\r\n        for (List<Long> range : queries) {\r\n\r\n            long l = range.get(0);\r\n            long r = range.get(1);\r\n\r\n            // It stores the prefix sum from index 0 to index r in an infinite array.\r\n            long rsum = func(sumArray, r, n);\r\n\r\n            // It stores the prefix sum from index 0 to index l-1 in an infinite array.\r\n            long lsum = func(sumArray, l - 1, n);\r\n\r\n            // Add answer for each query.\r\n            ans.add((int) ((rsum - lsum + mod) % mod));\r\n\r\n        }\r\n\r\n        return ans;\r\n    }\r\n\r\n    // Function to calculate prefix sum upto index x of the infite array.\r\n    private static long func(long sumArray[], long x, long n) {\r\n\r\n        // Number of times the given array comes completely upto index x.\r\n        long count = (x / n) % mod;\r\n\r\n        long res = (count * sumArray[(int) n]) % mod;\r\n\r\n        // Adding the remaining elements sum.\r\n        res = (res + sumArray[(int) (x % n)]) % mod;\r\n\r\n        return res;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity:O(Q+N).\r\n    Space Complexity:O(N).\r\n    Where N is the size of the given array, and Q is the number of quer\r\n'''\r\n\r\n# Function to calculate prefix sum upto index x of the infite array.\r\ndef func(sumArray, x, n):\r\n\r\n    mod = 10 ** 9 + 7\r\n\r\n    # Number of times the given array comes completely upto index x.\r\n    count = (x // n) % mod\r\n\r\n    res = (count * sumArray[n]) % mod\r\n\r\n    # Adding the remaining elements sum.\r\n    res = (res + sumArray[(x % n)]) % mod\r\n\r\n    return res\r\n\r\n\r\ndef sumInRanges(arr, n, queries, q):\r\n    mod = 10 ** 9 + 7\r\n\r\n    #  It stores answer for each query.\r\n    ans = []\r\n\r\n    # It store cumulative sum where sumArray[i] = sum(A[0]+..A[i]).\r\n    sumArray = [0 for i in range(n + 1)]\r\n\r\n    for i in range(1, n + 1):\r\n        sumArray[i] = (sumArray[i - 1] + arr[i - 1]) % mod\r\n\r\n    # Traversing the given queries.\r\n    for ranges in queries:\r\n\r\n        l = ranges[0]\r\n        r = ranges[1]\r\n\r\n        #  It stores the prefix sum from index 0 to index r in an infinite array.\r\n        rsum = func(sumArray, r, n)\r\n\r\n        # It stores the prefix sum from index 0 to index l-1 in an infinite array.\r\n        lsum = func(sumArray, l - 1, n)\r\n\r\n        # Add answer for each query.\r\n        ans.append((rsum - lsum + mod) % mod)\r\n\r\n    return ans\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}