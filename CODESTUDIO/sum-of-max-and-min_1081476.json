{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9684,
            "title": "Sum of Max and Min",
            "titleSlug": "sum-of-max-and-min_1081476",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-size-n-your-task-is-to-find-out-the-sum-of-maximum-and-minimum-elements-in-the-array\">You are given an array \u201cARR\u201d of size N. Your task is to find out the sum of maximum and minimum elements in the array.</h4>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you do the above task in a minimum number of comparisons?\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases.\nThen the T test cases follow. \n\nThe first line of each test case contains a single integer N representing the size of the array &#39;ARR&#39;.\n\nThe second line of each test case contains N space separated integers representing the elements of the array \u201carr\u201d.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the sum of the maximum and minimum element of the array &#39;ARR&#39;.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^5 \n-10^9 &lt;= ARR[i] &lt;= 10^9\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n7\n1 2 4 5 6 6 6 \n6\n-1 -4 5 8 9 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>7\n5\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case, the maximum element in the array is 6 and the minimum element in the array is 1.\n\nFor the second test case, the maximum element in the array is 9 and the minimum element in the array is -4.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n3 3 3 3 3 \n1\n-1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>6\n-2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 467,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the sum of the maximum and minimum elements within the array.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^5",
                    "-10^9 <= ARR[i] <= 10^9",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "7\n1 2 4 5 6 6 6",
                        "output": "7",
                        "explanation": "The maximum element in the array is 6, and the minimum element is 1. Therefore, their sum is 6 + 1 = 7."
                    },
                    {
                        "input": "6\n-1 -4 5 8 9 3",
                        "output": "5",
                        "explanation": "The maximum element in the array is 9, and the minimum element is -4. Therefore, their sum is 9 + (-4) = 5."
                    },
                    {
                        "input": "5\n3 3 3 3 3",
                        "output": "6",
                        "explanation": "The maximum element in the array is 3, and the minimum element is 3. Therefore, their sum is 3 + 3 = 6."
                    },
                    {
                        "input": "1\n-1",
                        "output": "-2",
                        "explanation": "The maximum element in the array is -1, and the minimum element is -1. Therefore, their sum is -1 + (-1) = -2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about how to pick the maximum and minimum values.</p>",
            "<p>Think of a brute force solution, think about when the distance will be largest.</p>",
            "<p>Think of a solution using divide and conquer approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N). \r\n    Space Complexity: O(1).\r\n\r\n    Where N is the size of the array \"arr\".\r\n*/\r\n\r\nint sumOfMaxMin(int arr[], int n) {\r\n\r\n    int maximum, minimum;\r\n\r\n    maximum = minimum = arr[0];\r\n\r\n    for (int i = 1; i < n; i++) {\r\n\r\n        // If arr[i] > maximum, then make maximum = arr[i].\r\n        if (arr[i] > maximum) {\r\n            maximum = arr[i];\r\n        }\r\n\r\n        // Else If arr[i] < minimum, then make minimum = arr[i].\r\n        else if (arr[i] < minimum) {\r\n            minimum = arr[i];\r\n        }\r\n    }\r\n\r\n    return maximum + minimum;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N). \r\n    Space Complexity: O(1).\r\n\r\n    Where N is the size of the array \"arr\".\r\n'''\r\n\r\ndef sumOfMaxMin(arr):\r\n\r\n    maximum = arr[0]\r\n    minimum = arr[0]\r\n\r\n    for i in range(1, len(arr)):\r\n\r\n        # If arr[i] > maximum, then make maximum = arr[i].\r\n        if arr[i] > maximum:\r\n            maximum = arr[i]\r\n    \r\n\r\n        # Else If arr[i] < minimum, then make minimum = arr[i].\r\n        elif arr[i] < minimum:\r\n            minimum = arr[i]\r\n    \r\n    return maximum + minimum",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N). \r\n    Space Complexity: O(log N).\r\n\r\n    Where N is the size of the array \"arr\".\r\n*/\r\n\r\nclass Pair < T1, T2 > {\r\n    T1 first;\r\n    T2 second;\r\n\r\n    Pair(T1 a, T2 b) {\r\n        first = a;\r\n        second = b;\r\n    }\r\n}\r\n\r\npublic class Solution {\r\n    public static int sumOfMaxMin(int[] arr, int n) {\r\n\r\n        /* \r\n            Create a pair of integers maxMin. The first \r\n            integer stores the maximum and the second \r\n            integer stores the minimum element.\r\n        */\r\n        Pair < Integer, Integer > maxMin;\r\n\r\n        // Call the recursive function to get the result.\r\n        maxMin = findMaxMin(arr, 0, n - 1);\r\n\r\n        // Return the sum of maximum and minimum.\r\n        return maxMin.first + maxMin.second;\r\n    }\r\n\r\n    private static Pair < Integer, Integer > findMaxMin(int[] arr, int left, int right) {\r\n\r\n        // Base case.\r\n        if (left == right) {\r\n            return new Pair(arr[left], arr[right]);\r\n        }\r\n\r\n        /* \r\n            If only two elements are present in the array \"arr\",\r\n            then compare arr[left] with arr[right] directly.\r\n        */\r\n        else if (right == left + 1) {\r\n\r\n            /* \r\n            \tIf arr[left] > arr[right], then \r\n                return {arr[left], arr[right]}.\r\n            */\r\n            if (arr[left] > arr[right]) {\r\n                return new Pair(arr[left], arr[right]);\r\n            }\r\n\r\n            // Else, return {arr[right], arr[left]}.\r\n            else {\r\n                return new Pair(arr[right], arr[left]);\r\n            }\r\n        }\r\n\r\n        int mid = (left + right) / 2;\r\n\r\n        /* \r\n        \tCall the function recursively in the left helf \r\n            and right half of the array.\r\n        */\r\n        Pair < Integer, Integer > leftAns = findMaxMin(arr, left, mid);\r\n        Pair < Integer, Integer > rightAns = findMaxMin(arr, mid + 1, right);\r\n\r\n        /* \r\n            Finally, return the maximum among the maximum of leftAns \r\n            and rightAns and minimum among the minimum of \r\n            leftAns and rightAns.\r\n        */\r\n        return new Pair(Math.max(leftAns.first, rightAns.first), Math.min(leftAns.second, rightAns.second));\r\n    }\r\n\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}