{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8629,
            "title": "Sum of Two Arrays",
            "titleSlug": "sum-of-two-arrays_893186",
            "content": "<h4 id=\"you-are-given-two-numbers-a-and-b-in-the-form-of-two-arrays-a-and-b-of-lengths-n-and-m-respectively-where-each-array-element-represents-a-digit-you-need-to-find-the-sum-of-these-two-numbers-and-return-this-sum-in-the-form-of-an-array\">You are given two numbers &#39;A&#39; and &#39;B&#39; in the form of two arrays (A[] and B[]) of lengths &#39;N&#39; and &#39;M&#39; respectively, where each array element represents a digit. You need to find the sum of these two numbers and return this sum in the form of an array.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. The length of each array is greater than zero.\n\n2. The first index of each array is the most significant digit of the number. For example, if the array A[] = {4, 5, 1}, then the integer represented by this array is 451 and array B[] = {3, 4, 5} so the sum will be 451 + 345 = 796. So you need to return {7, 9, 6}.\n\n3. Both numbers do not have any leading zeros in them. And subsequently, the sum should not contain any leading zeros.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer T, denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers &#39;N&#39; and &#39;M&#39;, denoting the size of the two arrays.\n\nThe second line of each test case contains &#39;N&#39; space-separated integers denoting the elements of the first array.\n\nThe third line of each test case contains &#39;M&#39; space-separated integers denoting the elements of the second array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of output of each test case contains space-separated digits which correspond to the sum of the two numbers &#39;A&#39; and &#39;B&#39;.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10^2\n1 &lt;= N, M &lt;= 10^4\n0 &lt;= A[i], B[i] &lt;= 9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4 1 \n1 2 3 4\n6\n3 2\n1 2 3\n9 9    \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 2 4 0\n2 2 2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case, the integer represented by the first array is 1234 and the second array is 6, so the sum is 1234 + 6 =  1240.\n\nFor the second test case, the integer represented by the first array is 123 and the second array is 99, so the sum is 123 + 99 = 222.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 3 \n4 5 1\n3 4 5\n2 2\n1 1\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>7 9 6\n2 3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 349,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, `a` and `b`, representing two numbers where each element in the array is a digit, determine the array representing the sum of the two numbers. You are given `a` of length `n` and `b` of length `m`. The arrays are indexed from most significant to least significant digit.",
                "constraints": [
                    "1 <= T <= 10^2",
                    "1 <= N, M <= 10^4",
                    "0 <= A[i], B[i] <= 9"
                ],
                "testcases": [
                    {
                        "input": "n = 4, a=[1, 2, 3, 4], m = 1, b=[6]",
                        "output": "1 2 4 0",
                        "explanation": "The integer represented by the first array is 1234 and the second array is 6, so the sum is 1234 + 6 =  1240."
                    },
                    {
                        "input": "n = 3, a=[1, 2, 3], m = 2, b=[9, 9]",
                        "output": "2 2 2",
                        "explanation": "The integer represented by the first array is 123 and the second array is 99, so the sum is 123 + 99 = 222."
                    },
                    {
                        "input": "n = 3, a=[4, 5, 1], m = 3, b=[3, 4, 5]",
                        "output": "7 9 6",
                        "explanation": "The integer represented by the first array is 451 and the second array is 345, so the sum is 451 + 345 = 796."
                    },
                    {
                        "input": "n = 2, a=[1, 1], m = 2, b=[1, 2]",
                        "output": "2 3",
                        "explanation": "The integer represented by the first array is 11 and the second array is 12, so the sum is 11 + 12 = 23."
                    },
                    {
                        "input": "n = 1, a=[9], m = 1, b=[9]",
                        "output": "1 8",
                        "explanation": "The integer represented by the first array is 9 and the second array is 9, so the sum is 9 + 9 = 18."
                    },
                    {
                        "input": "n = 5, a=[9,9,9,9,9], m=1, b=[1]",
                        "output": "1 0 0 0 0 0",
                        "explanation": "The integer represented by the first array is 99999 and the second array is 1, so the sum is 99999 + 1 = 100000"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of using two-pointers?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Math",
                "slug": "math"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n        Time Complexity: O(max(N, M))\n        Space Complexity: O(1)\n\n        Where N is the size of the first array and M is the size of the second array.\n */\n\nvector<int> findArraySum(vector<int>a, int n, vector<int>b, int m) {\n    \n\tvector<int>ans;\n\tint carry = 0;\n\tint sum = 0;\n\tint i = n - 1;\n    int j = m - 1;\n    \n\twhile (i >= 0 || j >= 0) {\n\t\tsum = 0;\n        // If we have some elements left in the first array, then add it to the sum.\n\t\tif (i >= 0) {\n\t\t\tsum += a[i];\n\t\t\ti--;\n\t\t}\n        \n        // If we have some elements left in the second array, then add it to the sum.\n\t\tif (j >= 0) {\n\t\t\tsum += b[j];\n\t\t\tj--;\n\t\t}\n        \n\t\tsum += carry;\n\t\tint lastDigit = sum % 10;\n\t\tcarry = sum / 10;\n\t\tans.push_back(lastDigit);\n\t}\n    \n    // If still some carry is left, then push it to the answer.\n\tif (carry) {\n\t\tans.push_back(carry);\n\t}\n    \n\treverse(ans.begin(), ans.end());\n\treturn ans;\n}\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n        Time Complexity: O(max(N, M))\n        Space Complexity: O(1)\n\n        Where N is the size of the first array and M is the size of the second array.\n */\n\npublic class Solution {\n\tpublic static int[] findArraySum(int[] a, int n, int[] b, int m) {\n\t\tint ans[] = new int[Math.max(n, m)];\n\t\tint carry = 0;\n\t\tint sum = 0;\n\t\tint k = ans.length - 1;\n\t\tint i = n - 1;\n        int j = m - 1;\n        \n\t\twhile (i >= 0 || j >= 0) {\n\t\t\tsum = 0;\n            \n            // If we have some elements left in the first array, then add it to the sum.\n\t\t\tif (i >= 0) {\n\t\t\t\tsum += a[i];\n\t\t\t\ti--;\n\t\t\t}\n            \n            // If we have some elements left in the second array, then add it to the sum.\n\t\t\tif (j >= 0) {\n\t\t\t\tsum += b[j];\n\t\t\t\tj--;\n\t\t\t}\n            \n\t\t\tsum += carry;\n\t\t\tint lastDigit = sum % 10;\n\t\t\tcarry = sum / 10;\n\t\t\tans[k--] = lastDigit;\n\t\t}\n        \n        // If still some carry is left, then push it to the answer.\n\t\tif (carry != 0) {\n\t\t\tint[] newAns = new int[ans.length + 1];\n\t\t\tnewAns[0] = carry;\n            \n\t\t\tfor (int p = 1; p < newAns.length; p++) {\n\t\t\t\tnewAns[p] = ans[p - 1];\n\t\t\t}\n\t\t\treturn newAns;\n\t\t}\n\t\treturn ans;\n\t}\n\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n\t\tTime Complexity: O(max(N, M)))\n\t\tSpace Complexity: O(1)\n\n\t\tWhere N is the size of the first array and M is the size of the second array.\n'''\n\ndef findArraySum(a, n, b, m):\n    ans = list()\n    carry = 0\n    sum = 0\n    i = n - 1\n    j = m - 1\n \n    while i >= 0 or j >= 0:\n        sum = 0\n        # If we have some elements left in the first array, then add it to the sum.\n        if i >= 0:\n            sum += a[i]\n            i -= 1\n\n        # If we have some elements left in the second array, then add it to the sum.\n        if j >= 0:\n            sum += b[j]\n            j -= 1\n\n        sum += carry\n        lastDigit = sum % 10\n        carry = sum // 10\n        ans.append(lastDigit)\n\n    # If still some carry is left, then push it to the answer.\n    if carry:\n        ans.append(carry)\n\n    ans = reversed(ans)\n    return ans\n\n\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}