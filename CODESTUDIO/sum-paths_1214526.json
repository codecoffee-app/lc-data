{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10296,
            "title": "Sum Paths",
            "titleSlug": "sum-paths_1214526",
            "content": "<h4 id=\"you-are-given-a-binary-tree-with-n-nodes-each-node-has-an-integer-value-associated-with-it-you-are-also-given-an-integer-target-your-task-is-to-determine-the-total-number-of-different-paths-such-that-the-sum-of-values-of-nodes-in-each-path-equals-target\">You are given a binary tree with &#39;N&#39; nodes. Each node has an integer value associated with it. You are also given an integer &#39;Target&#39;. Your task is to determine the total number of different paths such that the sum of values of nodes in each path equals &#39;Target&#39;.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>A path may or may not start at the root of the tree. A path may or may not end on a leaf node. You are allowed to travel only downwards. This means after visiting any node, you are allowed to visit only its children.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line contains an integer &#39;T&#39;, which denotes the number of test cases or queries to be run. Then, the &#39;T&#39; test cases follow. \n\nThe first line of each test case contains a single integer, &#39;Target&#39;, as described in the problem statement.\n\nThe second line of each test case contains elements of the binary tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<h4 id=\"for-example-the-input-for-the-tree-depicted-in-the-below-image-would-be\">For example, the input for the tree depicted in the below image would be :</h4>\n\n<p><img src=\"https://files.codingninjas.in/pathsum1-8238.png\" alt=\"binarytree_example\"> </p>\n\n<pre><code>6 \n-3 3\n -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 6\n\nLevel 2 :\nLeft child of 6 = -3\nRight child of 6 = 3\n\nLevel 3 :\nLeft child of -3 = null (-1)\nRight child of -3 = null (-1)\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as: \n\n6 -3 3  -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, print an integer, denoting the number of different paths such that the sum of values of nodes in each path equals K.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n1 &lt;= Target &lt;= 10^9\n-10^9 &lt;= node data &lt;= 10^9, , (where node data != -1).\n\nTime Limit: 1sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>1\n3\n6 -3 3 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1 :</h5>\n\n<pre><code>For the first test case, the given binary tree is depicted below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/pathsum1-8238.png\" alt=\"binarytree_example\"> </p>\n\n<pre><code>In the given tree, one of the paths that can sum up to K is the path from the node having a value of 6 to the node having a value of -3, so the total path sum will be 3. The other path can be the node having a value of 3 alone. So the total number of different paths having a sum equal to 3 is 2.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>1\n2\n1 2 1 -1 -1 -1 -1 \n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2 :</h5>\n\n<pre><code>For the first test case, the given binary tree is depicted below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/pathsum2-8239.png\" alt=\"binarytree_example\"></p>\n\n<pre><code>In the given tree, one of the paths that can sum up to K is the path from the node having a value of 1 to its right child having a value of 1, so the total path sum will be 2. The other path can be the node having a value of 2 alone. So the total number of different paths having a sum equal to 2 is 2.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree where each node contains an integer value, determine the number of paths within the tree whose sum equals a given target value. The paths can start and end at any node, and must travel downwards (parent to child).",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 5000",
                    "1 <= Target <= 10^9",
                    "-10^9 <= node data <= 10^9, (where node data != -1)"
                ],
                "testcases": [
                    {
                        "input": "target = 3, tree = [6, -3, 3, -1, -1, -1, -1]",
                        "output": "2",
                        "explanation": "There are two paths that sum to 3: (6 -> -3) and (3)."
                    },
                    {
                        "input": "target = 2, tree = [1, 2, 1, -1, -1, -1, -1]",
                        "output": "2",
                        "explanation": "There are two paths that sum to 2: (1 -> 1) and (2)."
                    },
                    {
                        "input": "target = 8, tree = [10, 5, -3, 3, 2, -1, 11, 3, -2, -1, 1]",
                        "output": "3",
                        "explanation": "There are three paths that sum to 8: (5 -> 3), (5 -> 2 -> 1) and (-3 -> 11)"
                    },
                    {
                        "input": "target = 5, tree = [5, 4, 8, 11, -1, 13, 4, 7, 2, -1, -1, 5, 1]",
                        "output": "4",
                        "explanation": "There are four paths that sum to 5: (5), (4 -> 1), (5->0), and (8 -> -3 ) where -3 is created through recursion"
                    },
                    {
                        "input": "target = 0, tree = [0, 1, -1]",
                        "output": "3",
                        "explanation": "There are three paths that sum to 0: (0), (1 -> -1), and recursive path from -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><i>Think of a solution using Depth First Traversal.</i></p>",
            "<p>Use Prefix Sum</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}