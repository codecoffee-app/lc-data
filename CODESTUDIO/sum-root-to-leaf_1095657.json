{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9905,
            "title": "Sum root to leaf",
            "titleSlug": "sum-root-to-leaf_1095657",
            "content": "<h4 id=\"you-are-given-an-arbitrary-binary-tree-consisting-of-n-nodes-where-each-node-is-associated-with-a-certain-integer-value-from-1-to-9-consider-each-root-to-leaf-path-as-a-number\">You are given an arbitrary binary tree consisting of N nodes where each node is associated with a certain integer value from 1 to 9. Consider each root to leaf path as a number.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>       1\n      /  \\\n     2    3\n\nThe root to leaf path 1-&gt;2 represents the number 12.\nThe root to leaf path 1-&gt;3 represents the number 13.\n</code></pre>\n\n<h4 id=\"your-task-is-to-find-the-total-sum-of-all-the-possible-root-to-leaf-paths\">Your task is to find the total sum of all the possible root to leaf paths.</h4>\n\n<h4 id=\"in-the-above-example\">In the above example,</h4>\n\n<pre><code>The total sum of all the possible root to leaf paths is 12+13 = 25\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The output may be very large, return the answer after taking modulus with (10^9+7).\n</code></pre>\n\n<h5 id=\"input-format\">Input format</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u2018T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe only line of each test case contains the elements of the tree in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code> 1\n 2 3\n 4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, return the total sum of all the possible root to leaf paths.\n\nOutput for each test case must be in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 3000\n1 &lt;= nodeValue &lt;= 9\n\nWhere \u2018N\u2019 is the number of nodes in the tree and nodeValue denotes data contained in the node of a binary tree.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1:</h5>\n\n<pre><code>2\n9 5 3 3 2 -1 1 3 2 -1 -1 -1 -1 -1 -1 -1 -1\n1 3 2 2 1 4 5 -1 -1 1 -1 1 2 -1 6 -1 -1 -1 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>20948\n5182\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>Test case 1:\nThe above tree looks like:-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-7468.png\" alt=\"alt text\"></p>\n\n<pre><code>All possible paths from root to leaf are:\n9-&gt;5-&gt;3-&gt;3 giving number 9533\n9-&gt;5-&gt;3-&gt;2 giving number 9532\n9-&gt;5-&gt;2 giving number 952\n9-&gt;3-&gt;1 giving number 931\n\nThe total sum of all possible root to leaf paths numbers is 9533+9532+952+931 = 20948 and 20948 mod 10^9 + 7 = 20948\n\nTest case 2:\nAll possible paths from root to leaf are:\n1-&gt;3-&gt;2 giving number 132\n1-&gt;3-&gt;1-&gt;1 giving number 1311\n1-&gt;2-&gt;4-&gt;1 giving number 1241\n1-&gt;2-&gt;4-&gt;2 giving number 1242\n1-&gt;2-&gt;5-&gt;6 giving number 1256\nThe total sum of all possible root to leaf paths numbers is 132+1311+1241+1242+1256 = 5182\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample input 2:</h5>\n\n<pre><code>2\n1 3 4 1 2 -1 6 -1 -1 -1 -1 -1 -1 \n1 2 2 5 3 -1 1 -1 -1 3 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>409\n1479\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 41,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with N nodes, where each node has an integer value from 1 to 9, treat each root-to-leaf path as a number.  Calculate the sum of all possible root-to-leaf path numbers. Return the sum modulo (10^9 + 7).",
                "constraints": [
                    "1 <= T <= 50 (Number of test cases)",
                    "1 <= N <= 3000 (Number of nodes in the tree)",
                    "1 <= nodeValue <= 9 (Value of each node)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "9 5 3 3 2 -1 1 3 2 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "20948",
                        "explanation": "The tree has root-to-leaf paths: 9->5->3->3 (9533), 9->5->3->2 (9532), 9->5->2 (952), and 9->3->1 (931). The sum is 9533 + 9532 + 952 + 931 = 20948."
                    },
                    {
                        "input": "1 3 2 2 1 4 5 -1 -1 1 -1 1 2 -1 6 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "5182",
                        "explanation": "The tree has root-to-leaf paths: 1->3->2 (132), 1->3->1->1 (1311), 1->2->4->1 (1241), 1->2->4->2 (1242), and 1->2->5->6 (1256). The sum is 132 + 1311 + 1241 + 1242 + 1256 = 5182."
                    },
                    {
                        "input": "1 3 4 1 2 -1 6 -1 -1 -1 -1 -1 -1",
                        "output": "409",
                        "explanation": "The tree has root-to-leaf paths: 1->3->1 (131), 1->3->2 (132), 1->4->6 (146). The sum is 131 + 132 + 146 = 409."
                    },
                    {
                        "input": "1 2 2 5 3 -1 1 -1 -1 3 -1 -1 -1 -1 -1",
                        "output": "1479",
                        "explanation": "The tree has root-to-leaf paths: 1->2->5->3 (1253), 1->2->3->1 (1231). The sum is 1253 + 226 = 1479."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse through the tree and keep calculating the number formed at each node.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}