{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 795,
            "title": "Sum Tree",
            "titleSlug": "sum-tree_10373",
            "content": "<h4 id=\"for-a-given-binary-tree-convert-it-to-its-sum-tree-that-is-replace-every-node-data-with-sum-of-its-immediate-children-keeping-leaf-nodes-0-finally-return-its-preorder\">For a given binary tree, convert it to its sum tree. That is, replace every node data with sum of its immediate children, keeping leaf nodes 0. Finally, return its preorder.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>The input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n In the input, each value of the sequence will be present on a separate line.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>Elements are in the level order form. The input consists of values of nodes, each value is present on a separate line. In case a node is null, we take -1 in its place.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>Print the updated preorder form of the binary tree.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are required to return the preorder form of the given tree and hence not required to print anything explicitly.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>0 &lt;= Number of nodes &lt;= 10 ^ 7\n0 &lt;= Value of node &lt;= 10 ^ 8\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n1\n2 \n-1\n-1\n-1 \n-1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n0\n0 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for Sample 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004506.png\" alt=\"sum_tree1\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1 \n2 \n3 \n4 \n-1 \n5 \n6 \n-1 \n-1 \n-1 \n-1 \n-1 \n-1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5\n4\n0\n11\n0\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-2\">Explanation for Sample 2:</h5>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004507.png\" alt=\"sum_tree2\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 16,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, convert it to its sum tree.  In a sum tree, each node's data is replaced by the sum of its immediate children. Leaf nodes are replaced with 0. Return the preorder traversal of the modified tree.",
                "constraints": [
                    "0 <= Number of nodes <= 10^7",
                    "0 <= Value of node <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "3\n1\n2\n-1\n-1\n-1\n-1",
                        "output": "3\n0\n0",
                        "explanation": "The root 1 has children 2 and -1.  The sum of children is 2 + (-1) = 1.  The value of the root node will be the level1 node value =1 . Replacing root node will give it value = 0.  The nodes 2 and -1 becomes 0 because they are treated as leaf nodes.  So preorder traversal becomes 3, 0, 0."
                    },
                    {
                        "input": "1\n2\n3\n4\n-1\n5\n6\n-1\n-1\n-1\n-1\n-1\n-1",
                        "output": "5\n4\n0\n11\n0\n0",
                        "explanation": "The root is initially 1.\nThe children of the root are 2 and 3.  Sum = 2 + 3 = 5.  Root becomes 5.\nThe children of 2 are 4 and -1. Sum = 4 + (-1) = 3. 2 becomes 3.\nThe children of 3 are 5 and 6. Sum = 5 + 6 = 11. 3 becomes 11.\nThe children of 4, 5, and 6 are all -1, so they become 0 since are considered as leaf nodes\nThe children of -1 are -1. It will also become to 0.Thus, preorder traversal: 5, 3, 0, 11, 0, 0"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to divide the tasks into two.</p><ol><li>Build the Sum Tree</li><li>Build the preorder from the resultant tree</li></ol>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}