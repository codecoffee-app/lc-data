{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15612,
            "title": "sweets and ants",
            "titleSlug": "sweets-and-ants_2656185",
            "content": "<h4 id=\"you-like-sweets-so-much-that-you-decided-to-make-sweets-at-your-home-little-do-you-know-that-ants-living-in-your-house-love-sweets-too-there-will-be-t-times-when-you-decide-to-make-sweets-each-time-you-will-make-n-types-of-sweets-numbered-from-1-to-n-once-you-cook-ith-sweet-it-has-a-freshness-value-n-and-all-the-previous-sweet-s-freshness-values-decreases-by-1-after-cooking-each-sweet-you-will-store-it-in-the-fridge-to-cool-down-and-leave-the-moment-you-leave-the-fridge-ants-will-steal-some-of-the-sweets-might-be-0-as-well-since-they-love-fresh-sweets-they-will-steal-all-the-sweets-with-a-freshness-value-greater-than-n-s-i\">You like sweets so much that you decided to make sweets at your home, little do you know that ants living in your house love sweets too. There will be \u2018T\u2019 times when you decide to make sweets. Each time you will make \u2018N\u2019 types of sweets numbered from \u20181\u2019 to \u2018N\u2019. Once you cook \u2018ith\u2019 sweet it has a freshness value \u2018N\u2019 and all the previous sweet\u2019s freshness values decreases by 1. After cooking each sweet, you will store it in the fridge to cool down and leave. The moment you leave the fridge, ants will steal some of the sweets(might be 0 as well). Since they love fresh sweets, they will steal all the sweets with a freshness value greater than \u2018N - S[i]\u2019.</h4>\n\n<h4 id=\"after-you-cooked-all-the-n-sweets-you-went-to-the-fridge-and-found-that-some-might-be-0-as-well-of-the-sweets-were-missing-you-have-to-print-an-array-of-length-n-containing-1-and-0-where-the-ith-value-will-be-1-if-ants-stole-that-sweet-else-it-will-be-0\">After you cooked all the \u2018N\u2019 sweets, you went to the fridge and found that some(might be 0 as well) of the sweets were missing. You have to print an array of length \u2018N\u2019 containing 1 and 0, where the \u2018ith\u2019 value will be 1 if ants stole that sweet else, it will be 0.</h4>\n\n<h4 id=\"note-in-each-test-case-the-first-sweet-has-id-1-the-second-sweet-has-id-2-and-so-on\">Note: In each test case, the first sweet has id \u20181\u2019, the second sweet has id \u20182\u2019 and so on.</h4>\n\n<h4 id=\"note-ants-will-come-to-steal-every-time-you-cook-a-sweet\">Note:  Ants will come to steal every time you cook a sweet.</h4>\n\n<h5 id=\"input-format\">Input Format-</h5>\n\n<pre><code>First-line contains \u2018T\u2019, denoting the number of Test cases.\nFor each Test case:\nThe first line contains an integer \u2018N\u2019, denoting the number of sweets you will cook.\nThe second line contains an array \u2018S\u2019 of length \u2018N\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format-</h5>\n\n<pre><code>For each Test case:\nPrint an array of length \u2018N\u2019 containing 1 and 0, where the \u2018ith\u2019 value will be 1 if ants stole the sweet with id \u2018i\u2019 else, it will 0.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints -</h5>\n\n<pre><code>1&lt;= \u2018T\u2019 &lt;= 5\n1&lt;= \u2018N\u2019 &lt;= 10^5\n0&lt;= S[i] &lt;=\u2018N\u2019  i \u2208  (1,N)\n\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input-1</h5>\n\n<pre><code>3\n6\n0 3 0 0 1 3\n10\n0 0 0 1 0 5 0 0 0 2\n3\n0 0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output-1</h5>\n\n<pre><code>1 1 0 1 1 1 \n0 1 1 1 1 1 0 0 1 1 \n0 0 0 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>For test case 1:\n    After you cooked the first sweet, ants did not steal any sweet.\n    After you cooked the second sweet, ants stole both the sweets.\n    After you cooked the third and fourth sweets, ants did not steal any sweets.\n    After you cooked the fifth sweet, ants stole the fifth sweet.\n    After you cooked the sixth sweet, ants stole the sixth and fourth sweet.\n    Hence the third sweet is remaining.\nFor test case 3:\n    Since ants did not steal any sweets, Thus all the sweets were left.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input -2</h5>\n\n<pre><code>2\n5\n0 0 3 0 5\n4\n1 0 0 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output -2</h5>\n\n<pre><code>1 1 1 1 1\n1 0 1 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 19,
            "dislikes": "NA",
            "rephrased": {
                "body": "You're a confectioner facing a sticky situation: ants! You plan to bake 'N' types of sweets. Each sweet, when freshly baked, has a freshness value of 'N'. After baking the i-th sweet, all previously baked sweets' freshness decreases by 1.  Immediately after each sweet is cooked, you place it in the fridge, but mischievous ants sneak in and steal sweets with freshness values greater than 'N - S[i]'. After baking all 'N' sweets, you need to determine which sweets the ants stole. Return an array of 'N' integers, where the i-th element is 1 if the i-th sweet was stolen and 0 if it remains.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10^5",
                    "0 <= S[i] <= N for all i in range(1, N)"
                ],
                "testcases": [
                    {
                        "input": "n = 6, S = [0, 3, 0, 0, 1, 3]",
                        "output": "[1, 1, 0, 1, 1, 1]",
                        "explanation": "After cooking the first sweet, ants didn't steal anything. After the second, they stole the first two. The third and fourth caused no thefts. The fifth resulted in the fifth sweet stolen. The sixth led to the fourth and sixth sweets being stolen. Only the third sweet remains."
                    },
                    {
                        "input": "n = 10, S = [0, 0, 0, 1, 0, 5, 0, 0, 0, 2]",
                        "output": "[0, 1, 1, 1, 1, 1, 0, 0, 1, 1]",
                        "explanation": "The thefts occur after cooking the 2nd, 3rd, 4th, 5th, 6th, 9th and 10th sweets, following the rule that ants take sweets with freshness > N - S[i] after the i-th sweet is cooked."
                    },
                    {
                        "input": "n = 3, S = [0, 0, 0]",
                        "output": "[0, 0, 0]",
                        "explanation": "Since all S[i] are 0, the ants never steal any sweets."
                    },
                    {
                        "input": "n = 5, S = [0, 0, 3, 0, 5]",
                        "output": "[1, 1, 1, 1, 1]",
                        "explanation": "The ants progressively steal more and more sweets until all have been taken."
                    },
                    {
                        "input": "n = 4, S = [1, 0, 0, 2]",
                        "output": "[1, 0, 1, 1]",
                        "explanation": "Initially, the first sweet stolen. Then, no sweets are stolen twice. Finally, the fourth sweet causes steals of the first, third and fourth."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><strong>&nbsp;</strong>How can you store the remaining freshness at each step?</p>",
            "<p>Do you need to maintain freshness value?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}