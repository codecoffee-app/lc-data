{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10874,
            "title": "Tag Validator",
            "titleSlug": "tag-validator_1279650",
            "content": "<h4 id=\"you-are-given-a-string-s-representing-a-code-file-you-have-to-check-whether-it-is-a-valid-code-file-or-not\">You are given a string &#39;S&#39; representing a code file. You have to check whether it is a valid code file or not.</h4>\n\n<h5 id=\"the-file-is-valid-if\">The File Is Valid If-</h5>\n\n<pre><code>1) The file can be represented as \\&lt;TAG&gt; CONTENT \\&lt;/TAG&gt;\n\n2) TAG is an uppercase English letter word of length 1 to 9.\n\n3) CONTENT may contain other valid closed tags, CDATA, letters, digits, \u2018&gt;\u2019, \u2018/\u2019, \u2018]\u2019, \u2018[\u2019, \u2018!\u2019  and \u2018 \u2019.\n\n4) CONTENT does not contain any unmatched \u2018&lt;\u2019.\n\n5) Each start tag must have a matching end-tag. And they must be balanced.\n\n6) CDATA can be represented as \\&lt;![CDATA[DATA\\_CONTENT]]&gt; where, DATA\\_CONTENT can be any string. \n\n7) DATA\\_CONTENT is ignored and not parsed even if it contains a valid tag it is considered as a string and not as a tag. \n</code></pre>\n\n<h4 id=\"for-example\">For Example :</h4>\n\n<pre><code>S = \u201d&lt;SPAN&gt;Hello &lt;B&gt;Ninja &lt;/B&gt; &lt;/SPAN&gt;\u201d\nS = start_tag | CONTENT | end_tag\nstart_tag=&lt;SPAN&gt;\nCONTENT=Hello &lt;B&gt; Ninja&lt;/B&gt;\nend_tag=&lt;/SPAN&gt;\n\nCONTENT also have a closed &lt;B&gt; tag. \n\nAnswer is True\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first line of each test case contains a non-empty string &#39;S&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case print \u201cTrue\u201d if it is a valid code file, else print \u201cFalse\u201d without quotes.\n\nOutput for each query is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10^5 \n\nWhere \u2018N\u2019, is the size of String &#39;S&#39; and the given string &#39;S&#39; contains only letters, digits, \u2018&lt;\u2019, \u2018&gt;\u2019, \u2018/\u2019, \u2018]\u2019, \u2018[\u2019, \u2018!\u2019  and \u2018 \u2019.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n&lt;A&gt;&lt;![CDATA[&lt;&lt;&lt;/B&gt;&lt;/C&gt;]]&gt;&lt;/A&gt;\n&lt;A&gt;&lt;B&gt;&lt;/A&gt;&lt;/B&gt;\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>True\nFalse\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>For the first test case,  \u201c&lt;&lt; &lt;/B&gt; &lt;/C&gt; \u201d is ignored as it is present in CDATA block. And &lt;A&gt; tag has a matching end-tag.\n\nFor the second case both the tags have ending tag but they are mismatched.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n&lt;X&gt;&lt;/X&gt;&lt;Z&gt;&lt;/Z&gt;\n&lt;![CDATA[&lt;&lt;&lt;/B&gt;&lt;/C&gt;]]&gt; \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>False\nFalse\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -8,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a string 'S' representing a code file. Determine if the code file is valid based on the following rules:\n\n1.  The file must be in the format `<TAG> CONTENT </TAG>`.\n2.  `TAG` must be an uppercase English letter word of length 1 to 9.\n3.  `CONTENT` can contain other valid closed tags, CDATA, letters, digits, '>', '/', ']', '[', '!', and ' '.\n4.  `CONTENT` cannot contain any unmatched '<'.\n5.  Every start tag must have a matching and balanced end tag.\n6.  CDATA is represented as `<![CDATA[DATA_CONTENT]]>`, where `DATA_CONTENT` can be any string.\n7.  `DATA_CONTENT` is ignored and not parsed, even if it contains valid tags. It is treated as a string.",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= N <= 10^5 (Length of the string 'S')",
                    "The given string 'S' contains only letters, digits, '<', '>', '/', ']', '[', '!', and ' '."
                ],
                "testcases": [
                    {
                        "input": "<A><![CDATA[<<<B></B></C>]]></A>",
                        "output": "True",
                        "explanation": "The CDATA block's content is ignored. The outer <A> tag has a matching closing tag, making the file valid."
                    },
                    {
                        "input": "<A><B></A></B>",
                        "output": "False",
                        "explanation": "The tags are mismatched, as the closing </A> appears before the closing </B>."
                    },
                    {
                        "input": "<X></X><Z></Z>",
                        "output": "False",
                        "explanation": "The file contains two separate valid tag pairs, but the problem requires the entire file to be enclosed in a single outer tag.  Therefore it's invalid."
                    },
                    {
                        "input": "<![CDATA[<<<B></B></C>]]>",
                        "output": "False",
                        "explanation": "The file consists only of a CDATA section without any outer tags, making it invalid."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we use the stack to store all the start tags? And iterate through String and ignore all the CDATA blocks ??</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}