{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14469,
            "title": "Take away the bottle",
            "titleSlug": "take-away-the-bottle_2179745",
            "content": "<h4 id=\"there-is-a-row-of-numbered-bottles-and-now-you-need-to-take-them-all-away-you-can-only-take-several-consecutive-bottles-at-a-time-and-you-need-to-make-sure-that-the-bottle-number-is-a-palindrome-string\">There is a row of numbered bottles, and now you need to take them all away. You can only take several consecutive bottles at a time, and you need to make sure that the bottle number is a palindrome string.</h4>\n\n<h4 id=\"palindrome-string-refers-to-the-same-string-read-in-both-forward-and-reverse-directions\">Palindrome string refers to the same string read in both forward and reverse directions</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>\u201c4664\u201d when read forward and backward will give the same result. Hence it is a palindrome.\n</code></pre>\n\n<h4 id=\"your-task-is-to-find-the-minimum-number-of-times-it-takes-to-remove-all-bottles\">Your task is to find the minimum number of times it takes to remove all bottles.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows.\n\nThe first line of each test case contains an integer \u2018N\u2019, denoting the number of bottles.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code> For each test case, print the minimum number of times it takes to remove all bottles.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;= 500   \n1&lt;= bottles[i] &lt;= 1000\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5\n1 3 4 1 5\n3\n4 6 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n1     \n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<pre><code>For test case 1 :\nWe can take bottle number 4, then the bottle array will be: 1 3 1 5\n\nThen we can take 1 3 1 at the same time since it is a palindrome and the array will be: 5\nThen we will take bottle number 5\n\nFor test case 2 :\nWe can take all the bottles at once since they form a palindrome\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n6\n1 2 3 5 3 1\n6\n1 1 2 3 1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a row of numbered bottles, you need to remove all of them. You can only remove consecutive bottles at a time, and the numbers on the removed bottles must form a palindrome string (reads the same forwards and backward). Determine the minimum number of removals required to clear all bottles.",
                "constraints": [
                    "1 <= N <= 500, where N is the number of bottles.",
                    "1 <= bottles[i] <= 1000, where bottles[i] is the number on the i-th bottle.",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "5\n1 3 4 1 5",
                        "output": "3",
                        "explanation": "One possible solution is to remove '4', leaving '1 3 1 5'. Next, remove the palindrome '1 3 1', leaving '5'. Finally, remove '5'. This requires 3 removals."
                    },
                    {
                        "input": "3\n4 6 4",
                        "output": "1",
                        "explanation": "The entire sequence '4 6 4' is a palindrome, so it can be removed in a single step."
                    },
                    {
                        "input": "6\n1 2 3 5 3 1",
                        "output": "2",
                        "explanation": "One optimal solution: Remove the palindrome '3 5 3' leaving '1 2 1'. Then remove the palindrome '1 2 1'. Total removals are 2."
                    },
                    {
                        "input": "6\n1 1 2 3 1 1",
                        "output": "2",
                        "explanation": "One optimal solution: Remove the palindrome '1 1' at the beginning, leaving '2 3 1 1'. Then remove the palindrome '1 1' at the end, leaving '2 3'. Finally remove '2' and '3' seperately. In total there are 2 removal"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find all possible combinations of what will happen if a particular bottle gets removed.</p>",
            "<p>Try to find the redundancy, we are definitely doing some redundant calls which are making our time complexity exponential.</p><p>&nbsp;</p><p>Try to use some extra space and save the answers.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}