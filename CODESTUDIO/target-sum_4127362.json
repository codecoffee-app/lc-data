{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 17869,
            "title": "Target Sum",
            "titleSlug": "target-sum_4127362",
            "content": "<h4 id=\"you-are-given-an-array-arr-of-n-integers-and-a-target-number-target-your-task-is-to-build-an-expression-out-of-an-array-by-adding-one-of-the-symbols-and-before-each-integer-in-an-array-and-then-by-concatenating-all-the-integers-you-want-to-achieve-a-target-you-have-to-return-the-number-of-ways-the-target-can-be-achieved\">You are given an array \u2018ARR\u2019 of \u2018N\u2019 integers and a target number, \u2018TARGET\u2019. Your task is to build an expression out of an array by adding one of the symbols &#39;+&#39; and &#39;-&#39; before each integer in an array, and then by concatenating all the integers, you want to achieve a target. You have to return the number of ways the target can be achieved.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>You are given the array \u2018ARR\u2019 = [1, 1, 1, 1, 1], \u2018TARGET\u2019 = 3. The number of ways this target can be achieved is:\n1. -1 + 1 + 1 + 1 + 1 = 3\n2. +1 - 1 + 1 + 1 + 1 = 3\n3. +1 + 1 - 1 + 1 + 1 = 3\n4. +1 + 1 + 1 - 1 + 1 = 3\n5. +1 + 1 + 1 + 1 - 1 = 3\nThese are the 5 ways to make. Hence the answer is 5.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018TARGET\u2019 representing the size of the given array and the target.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers representing the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer representing the number of ways to form a target.\n\nPrint a separate line for each test case.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 25\n-1000 &lt;= TARGET &lt;= 1000\n0 &lt;= ARR[i] &lt;= 1000\n\nTime Limit: 1 sec\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample input 1 :</h5>\n\n<pre><code>2\n5 3\n1 1 1 1 1\n4 3\n1 2 3 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5\n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For the first test case, \u2018ARR\u2019 = [1, 1, 1, 1, 1], \u2018TARGET\u2019 = 3. The number of ways this target can be achieved is:\n1. -1 + 1 + 1 + 1 + 1 = 3\n2. +1 - 1 + 1 + 1 + 1 = 3\n3. +1 + 1 - 1 + 1 + 1 = 3\n4. +1 + 1 + 1 - 1 + 1 = 3\n5. +1 + 1 + 1 + 1 - 1 = 3\nThese are the 5 ways to get the target. Hence the answer is 5.\n\nFor the second test case, \u2018ARR\u2019 = [1, 2, 3, 1]. \u2018TARGET\u2019 = 3, The number of ways this target can be achieved is:\n1. +1 - 2 + 1 + 3 = 3\n2. -1 + 2 - 1 + 3 = 3\nThese are the 3 ways to get the target. Hence the answer is 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n3 2\n1 2 3\n2 0\n1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 153,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find the number of ways to achieve a target sum by adding either '+' or '-' before each integer in the array. Concatenate all integers after applying signs.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 25",
                    "-1000 <= TARGET <= 1000",
                    "0 <= ARR[i] <= 1000",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 3\n1 1 1 1 1",
                        "output": "5",
                        "explanation": "For the array [1, 1, 1, 1, 1] and target 3, there are 5 possible ways to achieve the target:\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3"
                    },
                    {
                        "input": "4 3\n1 2 3 1",
                        "output": "2",
                        "explanation": "For the array [1, 2, 3, 1] and target 3, there are 2 possible ways to achieve the target:\n+1 - 2 + 3 + 1 = 3\n-1 + 2 + 3 - 1 =3 or +1 + 2 + 3 - 3 = 3"
                    },
                    {
                        "input": "3 2\n1 2 3",
                        "output": "1",
                        "explanation": "For the array [1, 2, 3] and target 2, there is 1 way which is 1 + 2 - 1 = 2"
                    },
                    {
                        "input": "2 0\n1 1",
                        "output": "2",
                        "explanation": "For the array [1, 1] and target 0, there are 2 possible ways to achieve the target:\n+1 - 1 = 0\n-1 + 1 = 0"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try the brute force appoach</p>",
            "<p>Try to memoise the recursive approach</p>",
            "<p>Try to do the previous approach iteratively.</p>",
            "<p>We can optimize the iterative approach for better space complexity.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O( N * T )\r\n    Space Complexity: O( T )\r\n\r\n    Where N is size of the array and T is the target.\r\n*/\r\n\r\nint targetSum(int n, int target, vector<int>& arr) {\r\n\r\n    // Store sums possible upto previous index.   \r\n    unordered_map < int, int > dp;\r\n\r\n    // Store sums possible upto current index.\r\n    unordered_map < int, int > next;\r\n\r\n    // Insert the possible sums using only first element.\r\n    dp[arr[0]]++;\r\n    dp[-arr[0]]++;\r\n\r\n    // Iterate over the remaining elements in the array.\r\n    for (int i = 1; i < n; i++) {\r\n\r\n        // Make 'next' equal to an empty hash-map.\r\n        next.clear();\r\n\r\n        // Iterate 'DP' to get sums possible upto previous index.\r\n        for (auto it: dp) {\r\n\r\n            // Current 'Key' and 'Value' pair.\r\n            int key = it.first;\r\n            int val = it.second;\r\n\r\n            // If we add positive sign to current element.\r\n            next[key + arr[i]] += val;\r\n\r\n            // If we add negative sign to current element.\r\n            next[key - arr[i]] += val;\r\n        }\r\n\r\n        // To calculate for the next day we can use 'DP',\r\n        // as will store values for the previous day.\r\n        dp = next;\r\n    }\r\n\r\n    // Finally, return the answer.\r\n    return dp[target];\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O( N * T )\r\n    Space Complexity: O( T )\r\n\r\n    Where N is size of the array and T is the target.\r\n*/\r\n\r\nimport java.util.Map;\r\nimport java.util.HashMap;\r\n\r\npublic class Solution {\r\n    public static int targetSum(int n, int target, int[] arr) {\r\n    \t// Store sums possible upto previous index.    \r\n\t    Map < Integer, Integer > dp = new HashMap<Integer, Integer>();\r\n\r\n\t    // Store sums possible upto current index.\r\n\t    Map < Integer, Integer > next = new HashMap<Integer, Integer>();\r\n\r\n\t    // Insert the possible sums using only first element.\r\n\t    int v = (dp.containsKey(arr[0]))?dp.get(arr[0]):0;\r\n\t    dp.put(arr[0], v+1);\r\n\r\n\t    v = (dp.containsKey(-arr[0]))?dp.get(-arr[0]):0;\r\n\t   \tdp.put(-arr[0], v+1);\r\n\r\n\t    // Iterate over the remaining elements in the array.\r\n\t    for (int i = 1; i < n; i++) {\r\n\r\n\t        // Make 'next' equal to an empty hash-map.\r\n\t        next.clear();\r\n\r\n\t        // Iterate 'DP' to get sums possible upto previous index.\r\n\t        for (Map.Entry it: dp.entrySet()) {\r\n\r\n\t            // Current 'Key' and 'Value' pair.\r\n\t            int key = (int)it.getKey();\r\n\t            int val = (int)it.getValue();\r\n\r\n\t            // If we add positive sign to current element.\r\n\t            int c = (next.containsKey(key + arr[i]))?next.get(key + arr[i]):0;\r\n\t            next.put(key + arr[i], c + val);\r\n\r\n\t            // If we add negative sign to current element.\r\n\t            c = (next.containsKey(key - arr[i]))?next.get(key - arr[i]):0;\r\n\t            next.put(key - arr[i], c + val);\r\n\t        }\r\n\r\n\t        // While calculation for the next day,\r\n\t        // 'DP' now stores value for the previous day.\r\n            dp.clear();\r\n\t        dp.putAll(next);\r\n\t    }\r\n\r\n\t    // Finally, return the answer.\r\n\t    return (dp.containsKey(target))?dp.get(target):0;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O( N * T )\n    Space Complexity: O( T )\n\n    Where N is the size of the array and T is the target.\n'''\nfrom typing import List\nfrom collections import defaultdict\n\ndef targetSum(arr: List[int], target: int) -> int:\n\n    # Current and next dictionary.\n    dp = defaultdict(int)\n    next = defaultdict(int)\n\n    # Insert the possible sums using only first element.\n    dp[arr[0]] += 1\n    dp[-arr[0]] += 1\n\n    # Iterate over the remaining elements in the array.\n    for i in range(1, len(arr)):\n\n        # Create an empty default hashmap.\n        next = defaultdict(int)\n\n        for key, val in dp.items():\n\n            # Set the next value of in the hashmap.\n            next[key + arr[i]] += val\n            next[key - arr[i]] += val\n        \n        # Set next as current day's hashmap.\n        dp = next\n\n    # Return the target.\n    return dp[target]\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}