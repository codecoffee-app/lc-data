{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12598,
            "title": "TEMP",
            "titleSlug": "temp_1467101",
            "content": "<h4 id=\"you-are-given-n-cubes-in-an-array-arr-in-a-certain-order-and-your-task-is-to-build-towers-using-them-whenever-two-cubes-are-on-top-of-the-other-the-upper-cube-must-be-smaller-than-the-lower-cube\">You are given \u2018N\u2019 cubes in an array \u2018ARR\u2019 in a certain order, and your task is to build towers using them. Whenever two cubes are on top of the other, the upper cube must be smaller than the lower cube.</h4>\n\n<h4 id=\"you-must-process-the-cubes-in-the-given-order-you-can-always-either-place-the-cube-on-top-of-an-existing-tower-or-begin-a-new-tower-what-is-the-minimum-possible-number-of-towers\">You must process the cubes in the given order. You can always either place the cube on top of an existing tower or begin a new tower. What is the minimum possible number of towers?</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Given \u2018N\u2019 = 3, \u2018ARR\u2019[] = 3, 2, 1.\nThe answer will be one because you can stack one over two over 3. Therefore only these can be inserted in the same tower.\n</code></pre>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019, where \u2018N\u2019 is the number of elements of the array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers, denoting the array elements.\n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the minimum possible number of towers.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 2000\n1 &lt;= ARR[ i ] &lt;= 2000\n\nWhere \u2018T\u2019 is the total number of test cases, and &#39;N\u2019 is the length of the array, and \u2018ARR[ i ]\u2019 is the array element at index \u2018i\u2019.\n\nTime limit: 1 second.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n3\n3 2 1 \n3\n1 2 3 \n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>1\n3\n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>For the first test case:\nThe answer will be one because you can stack one over two over 3. Therefore only these can be inserted in the same tower.\n\n\nFor the second test case:\nThe answer will be three because the array is in ascending order, and since we can only stack smaller values, three towers will have to be made.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n5\n7 9 8 7 6\n6\n5 4 5 4 6 5\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>2\n3\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'arr' of 'n' cubes, determine the minimum number of towers that can be built following these rules:\n\n1.  Cubes must be processed in the order they appear in 'arr'.\n2.  A cube can either be placed on top of an existing tower (if the cube is smaller than the top cube of that tower) or start a new tower.\n\nFind the minimum number of towers required to place all the cubes.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 2000",
                    "1 <= ARR[i] <= 2000"
                ],
                "testcases": [
                    {
                        "input": "n = 3, arr=[3, 2, 1]",
                        "output": "1",
                        "explanation": "We can build a single tower by placing 1 on top of 2, and 2 on top of 3."
                    },
                    {
                        "input": "n = 3, arr=[1, 2, 3]",
                        "output": "3",
                        "explanation": "Since the array is in ascending order, we need to start a new tower for each cube because no cube can be placed on top of any other cube."
                    },
                    {
                        "input": "n = 5, arr=[7, 9, 8, 7, 6]",
                        "output": "2",
                        "explanation": "We can build two towers as follows:\nTower 1: 7, 6\nTower 2: 9, 8, 7"
                    },
                    {
                        "input": "n = 6, arr=[5, 4, 5, 4, 6, 5]",
                        "output": "3",
                        "explanation": "We can build three towers as follows:\nTower 1: 5, 4\nTower 2: 5, 4\nTower 3: 6, 5"
                    },
                    {
                        "input": "n = 4, arr=[4, 3, 2, 1]",
                        "output": "1",
                        "explanation": "We can build single tower as follows:\nTower 1: 4, 3, 2, 1"
                    },
                    {
                        "input": "n = 4, arr=[1,5,2,6]",
                        "output": "2",
                        "explanation": "We can build two towers as follows:\nTower 1: 1\nTower 2: 5, 2\nTower 3: 6"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For a given cube, can you find the best existing base cube in logarithmic time complexity?&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}