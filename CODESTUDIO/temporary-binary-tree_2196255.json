{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14676,
            "title": "Temporary Binary Tree",
            "titleSlug": "temporary-binary-tree_2196255",
            "content": "<h4 id=\"you-are-gifted-a-tree-consisting-of-n-vertices-there-are-two-types-of-edges-each-with-a-weight-val-and-denoted-by-a-type-value-that-is-either-0-or-1\">You are gifted a tree consisting of &#39;N&#39; vertices. There are two types of edges each with a weight &#39;VAL&#39; and denoted by a \u2018TYPE\u2019 value that is either 0 or 1.</h4>\n\n<h4 id=\"a-pair-i-j-where-i-j-is-called-good-if-while-traversing-from-vertice-i-to-vertice-j-we-never-pass-through-an-edge-of-type-0\">A pair (i, j), where \u2018i\u2019 &lt; \u2018j&#39; is called GOOD if, while traversing from vertice &#39;i&#39; to vertice &#39;j&#39;, we never pass through an edge of \u2018TYPE\u2019 0.</h4>\n\n<h4 id=\"your-task-is-to-calculate-the-sum-of-the-path-s-weight-of-all-the-good-pairs-present-in-the-tree-return-the-final-answer-modulo-10-9-7\">Your task is to calculate the sum of the path\u2019s weight of all the GOOD pairs present in the tree. Return the final answer modulo 10^9 + 7.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018N\u2019 = 3 and edges are [{1, 2, 0, 5}, {2, 3, 1, 3}] and edges are given in format {u, v, type, weight}.\nOutput: 3\nExplanation: There is only one GOOD pair, i.e. {2, 3} and the weight of the edge is 3.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. \n\nThe first line of each test case contains the integer \u2018N\u2019.\n\nThe next \u2018N\u2019 - 1 line contains four integers \u2018A\u2019, \u2018B\u2019, TYPE\u2019 and \u2018VAL\u2019 where \u2018A\u2019 and \u2018B\u2019 represents the vertices of the tree, \u2018TYPE\u2019 represent the type of the edge and \u2018VAL\u2019 define the edge weight.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print an integer denoting the sum of the weight of all the paths of all the GOOD pairs.\n\nPrint the output of each test case in a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 5\n1\u2009&lt;= \u2018N\u2019 &lt;= 10^5\n1 &lt;= \u2018U\u2019, \u2018V\u2019 &lt;= \u2018N\u2019\n0 &lt;= \u2018VAL\u2019 &lt;= 10^3\n\nIt is guaranteed that the input graph forms a tree.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n3 \n1 2 1 5\n1 3 1 7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>24\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>In the first test case, the GOOD pairs are (1, 2), (1, 3), and (2, 3), and the sum of weights for all the three paths are 5, 7, and 12. Thus, the output is 24.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2\n1 2 0 10\n2\n1 2 1 10\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n10\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a tree with 'N' vertices and weighted edges of type 0 or 1, determine the sum of the weights of all 'GOOD' pairs (i, j), where i < j. A pair (i, j) is 'GOOD' if the path from vertex 'i' to vertex 'j' does not include any edge of type 0. Return the sum modulo 10^9 + 7.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 5",
                    "1 <= \u2018N\u2019 <= 10^5",
                    "0 <= \u2018VAL\u2019 <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "n = 3, edges = [[1, 2, 1, 5], [1, 3, 1, 7]]",
                        "output": "24",
                        "explanation": "The GOOD pairs are (1, 2), (1, 3), and (2, 3).  Path (1,2) weight is 5. Path (1,3) weight is 7. Path (2,3) weight is 5 + 7 = 12.  Total weight is 5 + 7 + 12 = 24."
                    },
                    {
                        "input": "n = 3, edges = [[1, 2, 0, 5], [2, 3, 1, 3]]",
                        "output": "3",
                        "explanation": "The only GOOD pair is (2, 3) with a weight of 3."
                    },
                    {
                        "input": "n = 2, edges = [[1, 2, 0, 10]]",
                        "output": "0",
                        "explanation": "There are no GOOD pairs since the edge between 1 and 2 is of type 0."
                    },
                    {
                        "input": "n = 2, edges = [[1, 2, 1, 10]]",
                        "output": "10",
                        "explanation": "The GOOD pair is (1, 2) with a weight of 10."
                    },
                    {
                        "input": "n = 4, edges = [[1, 2, 1, 5], [2, 3, 1, 7], [3, 4, 1, 2]]",
                        "output": "36",
                        "explanation": "The GOOD pairs are (1,2), (2,3), (3,4), (1,3), (2,4), (1,4). Path (1,2) is 5. Path (2,3) is 7. Path (3,4) is 2. Path (1,3) is 5+7 = 12. Path (2,4) is 7+2 = 9. Path (1,4) is 5+7+2 = 14. Sum = 5 + 7 + 2 + 12 + 9 + 14 = 49"
                    },
                    {
                        "input": "n = 4, edges = [[1, 2, 0, 5], [2, 3, 0, 7], [3, 4, 0, 2]]",
                        "output": "0",
                        "explanation": "All edges are type 0, hence no good pairs are possible"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to check all the pairs, include the pairs that satisfy the given condition, and add them to the answer.</p>",
            "<p>Try to reduce the time complexity by calculating all the pairs of fixed \u2018i\u2019 by forming a tree.</p>",
            "<p>Try to reduce the time complexity by calculating the edge weight of each connected component present in the tree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}