{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9919,
            "title": "Ternarytotree",
            "titleSlug": "ternarytotree_1102306",
            "content": "<h4 id=\"you-are-given-a-ternary-expression-in-the-form-of-a-string-your-task-is-to-convert-this-expression-into-a-binary-tree\">You are given a ternary expression in the form of a string. Your task is to convert this expression into a binary tree.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The string is made up of lowercase English alphabets,  \u2018?\u2019 and \u2018:\u2019 special characters.\n\n2. The alphabets may be repeated in the string.\n\n3. The expression which uses \u2018?:\u2019 is known as ternary expression and the expression will be evaluated as (condition ? value_if_true : value_if_false).\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer &#39;T&#39;, representing the number of test cases.\n\nThe first and the only line of each test case contains a string &#39;STR&#39; representing the ternary expression.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, return the level order traversal of the resultant binary tree in a space separated elements in a single line . If a node is NULL then # will be considered at its place.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1&lt;= N &lt;= 10^4\n\nWhere \u2018N\u2019 is the length of the string.\n\nTime limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\na?b:c\na?b?c:d\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>a b c # # # #\na b # c d # # # #\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<pre><code>In test case 1, The tree for the string will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/abc-2-7638.png\" alt=\"altImage\"></p>\n\n<pre><code>In test case 2, The tree for the string will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/abcd-1-7639.png\" alt=\"altImage\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nj?k:l?m:o\nm?n?p:o?o\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>j k l # # m o # # # #\nm n # p o # # o # # #\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h5>\n\n<pre><code>In test case 1, The tree for the string will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/jklmo-1-7640.png\" alt=\"altImage\"></p>\n\n<pre><code> In test case 2,The tree for the string will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/mnopq-1-7641.png\" alt=\"altImage\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a ternary expression string consisting of lowercase English alphabets, '?', and ':' characters, construct a binary tree representing the expression. The ternary expression follows the format (condition ? value_if_true : value_if_false). Return the level order traversal of the constructed binary tree, where '#' represents a NULL node.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^4, where N is the length of the string",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "a?b:c",
                        "output": "a b c # # # #",
                        "explanation": "The ternary expression 'a?b:c' translates to the following tree structure:\n\n       a\n     /   \\\n    b     c\n\nThe level order traversal is: a b c # # # #.  'a' is the root, 'b' is the left child, and 'c' is the right child. The remaining '#' represent the null children of 'b' and 'c'."
                    },
                    {
                        "input": "a?b?c:d",
                        "output": "a b # c d # # # #",
                        "explanation": "The ternary expression 'a?b?c:d' translates to the following tree structure:\n\n       a\n     /   \\\n    b     #\n   / \\\n  c   d\n\nThe level order traversal is: a b # c d # # # #.  'a' is the root, 'b' is its left child and '#' is the right. The left child 'b' has 'c' and 'd' as children and the remaining '#' represents the null children."
                    },
                    {
                        "input": "j?k:l?m:o",
                        "output": "j k l # # m o # # # #",
                        "explanation": "The ternary expression 'j?k:l?m:o' translates to the following tree structure:\n\n       j\n     /   \\\n    k     l\n         / \\\n        m   o\n\nThe level order traversal is: j k l # # m o # # # #. The '#' characters denote null nodes, indicating the absence of children for specific nodes in the tree."
                    },
                    {
                        "input": "m?n?p:o?o",
                        "output": "m n # p o # # o # # #",
                        "explanation": "The ternary expression 'm?n?p:o?o' translates to the following tree structure:\n\n       m\n     /   \\\n    n     #\n   / \\\n  p   o\n     / \\\n    o   #\n\nThe level order traversal is: m n # p o # # o # # #. The '#' characters denote null nodes, indicating the absence of children for specific nodes in the tree."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think about recursion.</p>",
            "<p>As the associativity of the ternary operator is from right to left, will stack help?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}