{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13625,
            "title": "Testingg - SQL",
            "titleSlug": "testingg-sql_1755903",
            "content": "<h4 id=\"retrieve-the-title-and-rating-of-movies-from-the-imdb-dataset-that-were-released-in-2014-belong-to-a-genre-starting-with-c-and-had-a-budget-exceeding-4-crore\">Retrieve the title and rating of movies from the IMDb dataset that were released in 2014, belong to a genre starting with &#39;C&#39;, and had a budget exceeding 4 Crore.</h4>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 696,
            "dislikes": "NA",
            "rephrased": {
                "body": "Extract the movie title and IMDb rating from the dataset for films released in the year 2014, categorized under a genre beginning with the letter 'C', and produced with a budget greater than 40 million (4 Crore) Indian Rupees.",
                "constraints": [
                    "Year of release must be 2014.",
                    "Genre must start with the letter 'C'.",
                    "Budget must be greater than 4 Crore (40,000,000)."
                ],
                "testcases": [
                    {
                        "input": "movies=[{'title': 'Comedy Film A', 'year': 2014, 'genre': 'Comedy', 'rating': 7.8, 'budget': 50000000}, {'title': 'Action Movie B', 'year': 2015, 'genre': 'Action', 'rating': 6.5, 'budget': 30000000}, {'title': 'Crime Drama C', 'year': 2014, 'genre': 'Crime', 'rating': 8.2, 'budget': 45000000}, {'title': 'Comedy Romance D', 'year': 2014, 'genre': 'Comedy', 'rating': 7.0, 'budget': 35000000}, {'title': 'Thriller E', 'year': 2013, 'genre': 'Thriller', 'rating': 7.5, 'budget': 60000000}, {'title': 'Crime Thriller F', 'year': 2014, 'genre': 'Crime', 'rating': 6.8, 'budget': 40000000}]",
                        "output": "[('Comedy Film A', 7.8), ('Crime Drama C', 8.2), ('Crime Thriller F', 6.8)]",
                        "explanation": "The movies 'Comedy Film A', 'Crime Drama C', and 'Crime Thriller F' meet all the criteria: released in 2014, genre starts with 'C', and budget is greater than 4 Crore. Note: Crime Thriller F is included because it's budget equal to 4 crore"
                    },
                    {
                        "input": "movies=[{'title': 'Classical Movie A', 'year': 2014, 'genre': 'Classical', 'rating': 9.0, 'budget': 60000000}, {'title': 'Western Film B', 'year': 2014, 'genre': 'Western', 'rating': 5.0, 'budget': 50000000}, {'title': 'Comedy Caper C', 'year': 2015, 'genre': 'Comedy', 'rating': 7.5, 'budget': 70000000}, {'title': 'Crime Family D', 'year': 2014, 'genre': 'Crime', 'rating': 8.5, 'budget': 35000000}, {'title': 'Cult Film E', 'year': 2014, 'genre': 'Cult', 'rating': 7.2, 'budget': 41000000}]",
                        "output": "[('Classical Movie A', 9.0), ('Cult Film E', 7.2)]",
                        "explanation": "The movies 'Classical Movie A' and 'Cult Film E' meet all the criteria. 'Crime Family D' is skipped because the budget is less than 4 Crore. Comedy Caper is not 2014 release."
                    },
                    {
                        "input": "movies=[{'title': 'Action Movie A', 'year': 2013, 'genre': 'Comedy', 'rating': 7.0, 'budget': 45000000}, {'title': 'Comedy B', 'year': 2015, 'genre': 'Crime', 'rating': 8.0, 'budget': 50000000}, {'title': 'Comedy C', 'year': 2014, 'genre': 'Comedy', 'rating': 6.5, 'budget': 30000000}, {'title': 'Crime D', 'year': 2014, 'genre': 'Crime', 'rating': 9.0, 'budget': 60000000}, {'title': 'Drama E', 'year': 2014, 'genre': 'Drama', 'rating': 7.5, 'budget': 55000000}]",
                        "output": "[('Crime D', 9.0)]",
                        "explanation": "Only 'Crime D' satisfies all conditions: year is 2014, genre starts with 'C', and budget exceeds 4 Crore."
                    },
                    {
                        "input": "movies=[]",
                        "output": "[]",
                        "explanation": "If the movie dataset is empty, there are no results to return."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n   Time Complexity: O(N*S)\n   Space Complexity: O(N*S)\n\n   Where \u2018N\u2019 is the number of persons on the island and \u2018S\u2019 is the total seating capacity of the plane.\n*/\n\n\nbool escape(int n, int s, int w, vector<int> arrs, vector<int> arrw)\n{\n    vector<vector<int>> dp(n + 1, vector<int>(s + 1, 0));\n    int total = 0;\n    for (int i = 1; i < n + 1; i++)\n    {\n        total += arrw[i - 1];\n        for (int j = 1; j < s + 1; j++)\n        {\n            // Calculating the dp transition states, where dp[i][j] represents \n            // the maximum weight that can be carried using i persons and j seating space\n            dp[i][j] = dp[i - 1][j];\n            if (j >= arrs[i - 1])\n            {\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - arrs[i - 1]] + arrw[i - 1]);\n            }\n        }\n    }\n\n    for (int i = 0; i < s + 1; i++)\n    {\n        // If the weight left is less than eqaul to w,\n        // Return True\n        if (total - dp[n][i] <= w)\n        {\n            return true;\n        }\n    }\n    \n    return false;\n}\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n   Time Complexity: O(N*S)\r\n   Space Complexity: O(N*S)\r\n\r\n   Where N is the number of persons on the island and S is the total seating capacity of the plane.\r\n*/\r\n\r\npublic class Solution {\r\n    static boolean escape(int n, int s, int w, int[] arrs, int[] arrw) {\r\n\r\n        int[][] dp = new int[n + 1][s + 1];\r\n        int total = 0;\r\n        for (int i = 1; i < n + 1; i++) {\r\n            total += arrw[i - 1];\r\n            for (int j = 1; j < s + 1; j++) {\r\n                // Calculating the dp transition states, where dp[i][j] represents\r\n                // the maximum weight that can be carried using i persons and j seating space\r\n                dp[i][j] = dp[i - 1][j];\r\n                if (j >= arrs[i - 1]) {\r\n                    dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - arrs[i - 1]] + arrw[i - 1]);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < s + 1; i++) {\r\n            // If the weight left is less than eqaul to w,\r\n            // Return True\r\n            if (total - dp[n][i] <= w) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n   Time Complexity: O(N*S)\r\n   Space Complexity: O(N*S)\r\n\r\n   Where N is the number of persons on the island and S is the total seating capacity of the plane.\r\n'''\r\nfrom typing import *\r\n\r\ndef escape(n: int, s: int, w: int, arrs: List[int], arrw: List[int])-> bool:\r\n    \r\n    dp = [[0 for i in range(s + 1)] for i in range(n + 1)]\r\n    total = 0\r\n\r\n    for i in range(1, n + 1):\r\n\r\n        total += arrw[i - 1]\r\n        for j in range(1, s + 1):\r\n\r\n            # Calculating the dp transition states, where dp[i][j] represents \r\n            # the maximum weight that can be carried using i persons and j seating space\r\n            dp[i][j] = dp[i - 1][j]\r\n\r\n            if j >= arrs[i - 1]:\r\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - arrs[i - 1]] +arrw[i - 1])\r\n    \r\n    for i in range(s + 1):\r\n        # If the weight left is less than eqaul to w,\r\n        # Return True\r\n        if total - dp[n][i] <= w:\r\n            return True\r\n    \r\n    return False",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}