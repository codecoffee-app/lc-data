{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9302,
            "title": "The Celebrity Problem",
            "titleSlug": "the-celebrity-problem_982769",
            "content": "<h4 id=\"there-are-n-people-at-a-party-each-person-has-been-assigned-a-unique-id-between-0-to-n-1-both-inclusive-a-celebrity-is-a-person-who-is-known-to-everyone-but-does-not-know-anyone-at-the-party\">There are \u2018N\u2019 people at a party. Each person has been assigned a unique id between 0 to &#39;N&#39; - 1(both inclusive).  A celebrity is a person who is known to everyone but does not know anyone at the party.</h4>\n\n<h4 id=\"given-a-helper-function-knows-a-b-it-will-returns-true-if-the-person-having-id-a-know-the-person-having-id-b-in-the-party-false-otherwise-your-task-is-to-find-out-the-celebrity-at-the-party-print-the-id-of-the-celebrity-if-there-is-no-celebrity-at-the-party-then-print-1\">Given a helper function \u2018knows(A, B)\u2019, It will returns &quot;true&quot; if the person having id \u2018A\u2019 know the person having id \u2018B\u2019 in the party, &quot;false&quot; otherwise. Your task is to find out the celebrity at the party. Print the id of the celebrity, if there is no celebrity at the party then print -1.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. The helper function \u2018knows\u2019 is already implemented for you.\n2. \u2018knows(A, B)\u2019 returns &quot;false&quot;, if A doesn&#39;t know B.\n3. You should not implement helper function \u2018knows\u2019, or speculate about its implementation.\n4. You should minimize the number of calls to function \u2018knows(A, B)\u2019.\n5. There are at least 2 people at the party.\n6. At most one celebrity will exist.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. The description of  \u2018T\u2019 test cases follows.\n\nThe first line of each test case contains an integer \u2018N\u2019, representing the number of people in the party.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print an integer representing the id of the celebrity. If there is no celebrity at the party then print -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n2 &lt;= N &lt;= 10^4\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 is the number of people at the party.\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n2\nCall function \u2018knows(0, 1)\u2019 // returns false\nCall function \u2018knows(1, 0)\u2019 // returns true\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>In the first test case, there are 2 people at the party. When we call function knows(0,1), it returns false. That means the person having id \u20180\u2019 does not know a person having id \u20181&#39;. Similarly, the person having id \u20181\u2019  knows a person having id \u20180\u2019 as knows(1,0) returns true. Thus a person having id \u20180\u2019 is a celebrity because he is known to everyone at the party but doesn&#39;t know anyone.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n2\nCall \u2018knows(0, 1)\u2019 // returns true\nCall \u2018knows(1, 0)\u2019 // returns true\n2\nCall \u2018knows(0, 1)\u2019 // returns false\nCall \u2018knows(1, 0)\u2019 // returns false\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n-1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>In first test case, there are 2 people at the party. The person having id \u20180\u2019  knows a person having id \u20181\u2019. The person having id \u20181\u2019  knows a person having id \u20180\u2019. Thus there is no celebrity at the party, because both know each other. \nIn second test case, there are 2 people at the party. The person having id \u20180\u2019 does not knows a person having id \u20181\u2019. The person having id \u20181\u2019  also does not knows a person having id \u20180\u2019. Thus there is no celebrity at the party, because both does not know each other. \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 194,
            "dislikes": "NA",
            "rephrased": {
                "body": "There are N people at a party, each with a unique ID from 0 to N-1. A celebrity is defined as someone who is known by everyone else at the party but does not know anyone themselves. Given a helper function `knows(A, B)` that returns true if person A knows person B, and false otherwise, find the ID of the celebrity at the party. If no celebrity exists, return -1.\n\n**Note:**\n\n1.  The `knows` function is already implemented.\n2.  Minimize calls to `knows(A, B)`.\n3.  There are at least two people at the party.\n4.  At most one celebrity exists.",
                "constraints": [
                    "1 <= T <= 50 (T: Number of test cases)",
                    "2 <= N <= 10^4 (N: Number of people at the party)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "1\n2\nCall function \u2018knows(0, 1)\u2019 // returns false\nCall function \u2018knows(1, 0)\u2019 // returns true",
                        "output": "0",
                        "explanation": "There are two people. Person 0 does not know person 1 (knows(0, 1) returns false), and person 1 knows person 0 (knows(1, 0) returns true). Therefore, person 0 is known by person 1 and does not know anyone, making them the celebrity."
                    },
                    {
                        "input": "1\n2\nCall \u2018knows(0, 1)\u2019 // returns true\nCall \u2018knows(1, 0)\u2019 // returns true",
                        "output": "-1",
                        "explanation": "There are two people. Person 0 knows person 1, and person 1 knows person 0. Neither satisfies the condition of not knowing anyone, so there is no celebrity."
                    },
                    {
                        "input": "2\n2\nCall \u2018knows(0, 1)\u2019 // returns false\nCall \u2018knows(1, 0)\u2019 // returns false",
                        "output": "-1",
                        "explanation": "There are two people. Person 0 does not know person 1, and person 1 does not know person 0. Neither satisfies the condition of being known by everyone, so there is no celebrity."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you model the problem as a graph problem by considering each person as a node in the graph?</p>",
            "<p>Can you check one by one whether the person is a celebrity or not?</p>",
            "<p>Can you push all the ids in the stack, and try to pop out those that cannot be the id of the celebrity.</p>",
            "<p>Can you try reducing the search space?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            },
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time complexity: O(N)\n    Space complexity: O(1)\n    \n    Where 'N' is the number of people at the party.\n*/\n\nint findCelebrity(int n) {\n    \n    // Two pointers pointing at start and end of search space.\n    int p = 0, q = n-1; \n\n    // Finding celebrity.\n    while(p < q) {\n        if(knows(p, q)) {\n            // This means p cannot be celebrity.\n            p++;  \n        }\n        else {\n            // This means q cannot be celebrity.\n            q--; \n        }\n    }\n\n    int celebrity = p;\n    bool knowAny = false, knownToAll = true;\n\n    // Verify whether the celebrity knows any other person.\n    for(int i = 0; i < n; i++) {\n        if(knows(celebrity, i)) {\n            knowAny = true;\n            break;\n        }\n    }\n\n    // Verify whether the celebrity is known to all the other person.\n    for(int i = 0; i < n; i++) {\n        if(i != celebrity and !knows(i, celebrity)) {\n            knownToAll = false;\n            break;\n        }\n    }\n\n    if(knowAny or !knownToAll) {\n        // If verificatin failed, then it means there is no celebrity at the party.\n        celebrity = -1;\n    }\n\n    return celebrity;\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\n    Time complexity: O(N)\n    Space complexity: O(1)\n    \n    Where 'N' is the number of people at the party.\n*/\n\npublic class Solution {\n\tpublic static int findCelebrity(int n) {\n\n        // Two pointers pointing at start and end of search space.\n\t    int p = 0, q = n - 1; \n\n\t    // Finding celebrity.\n\t    while(p < q) {\n\t        if(Runner.knows(p, q)) {\n\t            // This means p cannot be celebrity.\n\t            p++;  \n\t        }\n\t        else {\n\t            // This means q cannot be celebrity.\n\t            q--; \n\t        }\n\t    }\n\n\t    int celebrity = p;\n\t    boolean knowAny = false, knownToAll = true;\n\n\t    // Verify whether the celebrity knows any other person.\n\t    for(int i = 0; i < n; i++) {\n\t        if(Runner.knows(celebrity, i)) {\n\t            knowAny = true;\n\t            break;\n\t        }\n\t    }\n\n\t    // Verify whether the celebrity is known to all the other person.\n\t    for(int i = 0; i < n; i++) {\n\t        if(i != celebrity && !Runner.knows(i, celebrity)) {\n\t            knownToAll = false;\n\t            break;\n\t        }\n\t    }\n\n\t    if(knowAny || !knownToAll) {\n\t        // If verificatin failed, then it means there is no celebrity at the party.\n\t        celebrity = -1;\n\t    }\n\n\t    return celebrity;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time complexity: O(N)\r\n    Space complexity: O(1)\r\n    \r\n    Where \u2018N\u2019 is the number of people at the party.\r\n\"\"\"\r\n\r\ndef findCelebrity(n, knows):\r\n    # Two pointers pointing at start and end of search space.\r\n    p = 0\r\n    q = n-1\r\n    while(p < q):\r\n        # This means p cannot be celebrity.\r\n        if knows(p, q) == True:\r\n            p +=1 \r\n        # This means q cannot be celebrity.\r\n        else:\r\n            q -= 1\r\n\r\n    celebrity = p\r\n    knowAny = False\r\n    knownToAll = True\r\n    # Verify whether the celebrity knows any other person.\r\n    for i in range(0, n):\r\n        if knows(celebrity, i) == True:\r\n            knowAny = True\r\n            break\r\n    # Verify whether the celebrity is known to all the other person.\r\n    for i in range(0, n):\r\n        if i != celebrity and knows(i, celebrity) == False:\r\n            knownToAll = False\r\n            break\r\n\r\n    if knowAny != False or knownToAll == False:\r\n        # If verificatin failed, then it means there is no celebrity at the party.\r\n        celebrity = -1\r\n\r\n    return celebrity\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}