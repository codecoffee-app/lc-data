{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11064,
            "title": "The Earliest Moment When Everyone Become Friends",
            "titleSlug": "the-earliest-moment-when-everyone-become-friends_1376604",
            "content": "<h4 id=\"in-a-social-group-there-are-n-people-with-unique-integer-ids-from-0-to-n-1-we-have-an-array-of-logs-where-each-logs-i-timestamp-ida-idb-contains-a-non-negative-integer-timestamp-and-the-ids-of-two-different-people\">In a social group, there are \u2018N\u2019 people, with unique integer ids from 0 to (N - 1). We have an array of \u2018logs\u2019, where each logs[i] = [timestamp, idA, idB] contains a non-negative integer \u2018timestamp\u2019 and the \u2018ids\u2019 of two different people.</h4>\n\n<h4 id=\"each-log-represents-the-time-in-which-two-different-people-became-friends\">Each log represents the time in which two different people became friends.</h4>\n\n<h4 id=\"let-s-say-that-person-a-is-acquainted-with-person-b-if-a-is-friends-with-b-or-a-is-a-friend-of-someone-acquainted-with-b-your-task-is-to-return-the-earliest-time-every-person-became-acquainted-with-every-other-person\">Let\u2019s say that person A is acquainted with person B if A is friends with B, or A is a friend of someone acquainted with B. Your task is to return the earliest time every person became acquainted with every other person.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1) The ids are 0-indexed.\n\n2) Friendship is symmetric here. That is, if A is friends with B, then B is friends with A.\n\n3) Return -1 if there is no such earliest time.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Given \u2018logs\u2019 =[[2, 0, 1],[3, 1, 2],[4, 2, 3]].\n\nThe answer here would be 4 : \nWhen the people with id 2 and 3 become friends, then the circle gets completed, and the time among them is 4, and because 4 is the largest time among all, the time for the circle to get completed is 4.\n</code></pre>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; denoting the number of test cases.\n\nThe first line of each test case contains two integers, \u2018N\u2019, representing the number of \u2018ids\u2019 people, and \u2018M\u2019 which denotes the number of \u2018logs\u2019.\n\nThe following \u2018M\u2019 lines of each test case contain exactly three integers, denoting the &#39;time&#39;, &#39;idA&#39;, and &#39;idB&#39;.\n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the minimum time for the connection to get complete. \n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You don&#39;t have to print anything. It&#39;s been already taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 150\n1 &lt;= M &lt;= 300\n\nWhere \u2018T\u2019 is the number of test-cases and, \u2018N\u2019 is the number of people, and \u2018M\u2019 is the number of logs.\n\nTime limit: 1 second\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n4 3\n2 0 1\n3 1 2\n4 2 3\n4 2\n2 0 1\n3 1 2\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>4\n-1\n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>For the first test case:\nThe answer here would be 4 : \nWhen the people with id 2 and 3 become friends, then the circle gets completed, and the time among them is 4, and because 4 is the largest time among all, the time for the circle to get completed is 4.\n\n\nFor the second test case:\nThe answer will be -1 : \nThis is because there is no possible way such that the circle get completed because there no connection of the person with \u2018id\u2019 = 3.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n4 4\n2 0 1\n3 1 2\n1 2 3\n1 0 3\n4 3\n2 0 1\n1 1 2\n1 2 3\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>2\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "In a social group of 'N' people with unique IDs from 0 to (N - 1), friendship is established over time. An array 'logs' contains entries in the format [timestamp, idA, idB], indicating when two people (idA and idB) became friends.  Person A is considered acquainted with person B if they are directly friends, or if A is friends with someone who is acquainted with B. The goal is to find the earliest timestamp when every person is acquainted with every other person.",
                "constraints": [
                    "1 <= T <= 10  (Number of test cases)",
                    "1 <= N <= 150 (Number of people)",
                    "1 <= M <= 300 (Number of logs)",
                    "Friendship is symmetric (A friends with B implies B friends with A)",
                    "IDs are 0-indexed"
                ],
                "testcases": [
                    {
                        "input": "4 3\n2 0 1\n3 1 2\n4 2 3",
                        "output": "4",
                        "explanation": "The earliest time everyone is acquainted is 4. When persons 2 and 3 become friends, everyone is connected. The latest timestamp required for full connectivity is 4."
                    },
                    {
                        "input": "4 2\n2 0 1\n3 1 2",
                        "output": "-1",
                        "explanation": "It is impossible for all to be acquainted as Person 3 never establishes a connection."
                    },
                    {
                        "input": "4 4\n2 0 1\n3 1 2\n1 2 3\n1 0 3",
                        "output": "1",
                        "explanation": "The earliest time everyone is acquainted is 1. The logs [1 2 3] and [1 0 3] create full connectivity among 0,1,2 and 3. Thus the time is 1 (the max value of these)."
                    },
                    {
                        "input": "4 3\n2 0 1\n1 1 2\n1 2 3",
                        "output": "2",
                        "explanation": "The earliest time everyone is acquainted is 2.  After log [2 0 1], and after log [1 1 2], and after [1 2 3], everyone is finally acquainted with everyone else at timestamp 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you use DSU to find when two groups become friends?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}