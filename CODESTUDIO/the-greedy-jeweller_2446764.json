{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15402,
            "title": "The Greedy Jeweller",
            "titleSlug": "the-greedy-jeweller_2446764",
            "content": "<h5 id=\"a-jeweler-was-stuck-in-a-2d-maze-the-maze-is-in-the-form-of-a-2d-matrix-of-size-n-n-each-cell-in-the-maze-had-three-possibilities-0-1-1-0-means-that-the-cell-is-empty-1-means-that-the-cell-has-a-piece-of-gold-and-1-means-that-the-cell-is-blocked-the-jeweler-wants-to-travel-from-the-upper-left-corner-0-0-to-the-lower-right-corner-n-1-n-1-and-return-back-again-to-0-0-help-the-jeweler-to-collect-the-maximum-amount-of-gold\">A jeweler was stuck in a 2D maze. The maze is in the form of a 2D matrix of size \u2018N\u2019 * \u2018N\u2019. Each cell in the maze had three possibilities, 0, 1, -1. 0 means that the cell is empty, 1 means that the cell has a piece of gold, and -1 means that the cell is blocked. The jeweler wants to travel from the upper left corner (0, 0) to the lower right corner(N -1, N - 1)  and return back again to (0, 0). Help the jeweler to collect the maximum amount of gold.</h5>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>While moving towards the lower right corner, he can only go in two directions, i.e., right and down and while returning, he can only move in the directions left and up.\n\nIf there is no valid path, he cannot collect any gold.\n</code></pre>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>N = 3, mat = {{1, 1, 1}, {0, -1, 0,}, {1, 1, 1}}\n</code></pre>\n\n<p><img src = \"    https://files.codingninjas.in/the_greedy_jeweler_example-13030.png\"/> </p>\n\n<pre><code>In this example, the jeweler will first follow the path: (0, 0) -&gt; (0, 1) -&gt; (0, 2) -&gt; (1, 2)  -&gt; (2, 2) and then return from the path (2, 2) -&gt; (2, 1) -&gt; (2, 0) -&gt; (1, 0) -&gt; (0, 0). Hence the total gold collected will be 6.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the size of the square matrix.\n\nThe next \u2018N\u2019 lines contain \u2018N\u2019 integers, each containing 0, 1, -1, denoting the matrix\u2019s values.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer denoting the total gold collected by the jeweler.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10    \n1 &lt;= N &lt;= 100\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3\n0 1 0\n1 0 1\n1 0 1\n2\n1 1\n-1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>5\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>In the first test case, the most optimal path will be (0, 0) -&gt; (0, 1) -&gt; (0, 2) -&gt; (1, 2) -&gt; (2, 2) -&gt; (2, 1) -&gt; (2, 0) -&gt; (1, 0) -&gt; (0, 0). Hence the total gold collected is 5.\n\nIn the second test case, the one and only path will be (0, 0) -&gt; (0, 1) -&gt; (1, 1) -&gt; (0, 1) -&gt; (0, 0). Hence the total gold collected is 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1\n0\n2\n1 -1\n-1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "A jeweler is navigating an N x N maze represented by a 2D matrix. Each cell contains either 0 (empty), 1 (gold), or -1 (blocked). The jeweler needs to travel from the top-left corner (0, 0) to the bottom-right corner (N-1, N-1) and then return to (0, 0). The jeweler can only move down or right while going towards the bottom-right corner and up or left while returning to the starting point. The goal is to determine the maximum amount of gold the jeweler can collect during the round trip. If there is no valid path from (0,0) to (N-1, N-1), the jeweler cannot collect any gold.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 100",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 3, mat = [[0, 1, 0], [1, 0, 1], [1, 0, 1]]",
                        "output": "5",
                        "explanation": "The optimal path is (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (2, 1) -> (2, 0) -> (1, 0) -> (0, 0).  The total gold collected is 5."
                    },
                    {
                        "input": "n = 2, mat = [[1, 1], [-1, 1]]",
                        "output": "3",
                        "explanation": "The path is (0, 0) -> (0, 1) -> (1, 1) -> (0, 1) -> (0, 0). The total gold collected is 3."
                    },
                    {
                        "input": "n = 1, mat = [[0]]",
                        "output": "0",
                        "explanation": "The jeweler starts at (0,0) and returns to (0,0), no gold is collected."
                    },
                    {
                        "input": "n = 2, mat = [[1, -1], [-1, 1]]",
                        "output": "0",
                        "explanation": "There is no path from (0,0) to (1,1), thus no gold is collected."
                    },
                    {
                        "input": "n = 3, mat = [[1, 1, 1], [0, -1, 0], [1, 1, 1]]",
                        "output": "6",
                        "explanation": "The jeweler will first follow the path: (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) and then return from the path (2, 2) -> (2, 1) -> (2, 0) -> (1, 0) -> (0, 0). Hence the total gold collected will be 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Recursively check for all the possible paths and return the max answer.</p>",
            "<p>There can be many repetitive calculations in the recursive solution, which can be skipped by storing them while computing for the first time</p>",
            "<p>We need only the last step of dp. Hence we can reduce the array \u2018dp\u2019 size in the Bottom-Up approach.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}