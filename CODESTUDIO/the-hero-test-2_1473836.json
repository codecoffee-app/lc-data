{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12717,
            "title": "The hero test-2",
            "titleSlug": "the-hero-test-2_1473836",
            "content": "<h4 id=\"after-passing-hero-test-1-with-flying-colours-now-ninja-gets-a-different-exam-to-get-promoted-to-the-hero-class-s\">After passing hero test 1 with flying colours, now Ninja gets a different exam to get promoted to the hero class S.</h4>\n\n<h4 id=\"here-also-the-pattern-is-the-same-as-the-previous-exam-ninja-will-get-n-questions-from-1-to-n-but-this-time-ninja-comes-with-a-new-technique-to-order-the-questions-he-will-solve-a-question-after-skipping-k-questions-assume-that-after-n-th-question-he-will-come-back-to-the-first-question-until-he-completes-all-questions\">Here also the pattern is the same as the previous exam, Ninja will get \u2018N\u2019 questions from 1 to \u2018N\u2019 but this time Ninja comes with a new technique to order the questions, he will solve a question after skipping \u2018K\u2019 questions (assume that after \u2018N\u2019th question he will come back to the first question) until he completes all questions.</h4>\n\n<h4 id=\"help-ninja-by-telling-him-the-order-of-questions-that-is-always-a-permutation-of-1-to-n\">Help Ninja by telling him the order of questions that is always a permutation of 1 to \u2018N\u2019.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>If the number of questions is \u20185\u2019 and \u2018K\u2019 = 3 \nThen the order will be\n \u201c4 3 5 2 1\u201d\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019 and \u2018K\u2019, denoting the number of questions and number of questions that he wants to skip.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the order of the questions separated by space.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N, K &lt;= 3000\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the number of questions, and \u2018K\u2019 is the number of questions that Ninja will skip after solving one question.\n\nTime limit: 1 second.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n6 3\n4 1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>4 2 1 3 6 5\n2 4 3 1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h4>\n\n<pre><code>Test Case 1:   There are 6 questions,the  and ninja will start solving the questions as shown in image below: 4 2 1 3 6 5\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2021-04-26-08-39-56-9480.png\" alt=\"\"></p>\n\n<pre><code>Test Case 2:   There are 4 questions, and ninja will start solving the questions as shown in the image below: 2, 4, 3, 1\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2021-04-24-22-58-33-9463.png\" alt=\"\"></p>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n5 4\n1 10\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code>5 1 3 4 2\n1  \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja faces a new exam to advance to Hero Class S. Similar to the previous exam, he receives 'N' questions numbered from 1 to 'N'. However, this time, Ninja employs a unique approach to tackle the questions. He solves a question, skips 'K' questions, and then solves the next. This process continues cyclically, returning to the first question after reaching the 'N'th, until all questions are completed. Your task is to determine the order in which Ninja solves the questions, resulting in a permutation of the numbers from 1 to 'N'.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N, K <= 3000",
                    "Where \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the number of questions, and \u2018K\u2019 is the number of questions that Ninja will skip after solving one question.",
                    "Time limit: 1 second."
                ],
                "testcases": [
                    {
                        "input": "6 3",
                        "output": "4 2 1 3 6 5",
                        "explanation": "With 6 questions and skipping 3, Ninja solves them in the order: 4, 2, 1, 3, 6, 5."
                    },
                    {
                        "input": "4 1",
                        "output": "2 4 3 1",
                        "explanation": "With 4 questions and skipping 1, Ninja solves them in the order: 2, 4, 3, 1."
                    },
                    {
                        "input": "5 4",
                        "output": "5 1 3 4 2",
                        "explanation": "With 5 questions and skipping 4, Ninja solves them in the order: 5, 1, 3, 4, 2."
                    },
                    {
                        "input": "1 10",
                        "output": "1",
                        "explanation": "With 1 question and skipping 10, Ninja solves only the first question, 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Delete the element present at the Kth position.</p>",
            "<p>Try to optimise the brute force using a tree data structure.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}