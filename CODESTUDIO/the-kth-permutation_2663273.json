{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15638,
            "title": "The kth Permutation",
            "titleSlug": "the-kth-permutation_2663273",
            "content": "<h4 id=\"you-are-given-a-permutation-of-n-integers-from-1-to-n-you-have-to-count-the-number-of-index-k-such-that-on-sorting-these-first-k-indexes-you-will-get-a-subarray-of-k-integers-having-values-from-1-to-k\">You are given a permutation of \u2018N\u2019 integers from 1 to \u2018N\u2019. You have to count the number of index \u2018k\u2019 such that on sorting these first \u2018k\u2019 indexes, you will get a subarray of \u2018k\u2019 integers having values from 1 to \u2018k\u2019.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>\u2018N\u2019 = 5, \u2018ARR\u2019 = {3, 1, 2, 4, 5}.\n\nNow in this example, There are three indexes 3, 4, 5(indexing starting from 1):\nSorted subarray(1, 3): 1, 2, 3.\nSorted subarray(1, 4): 1, 2, 3, 4.\nSorted subarray(1, 5): 1, 2, 3, 5.\nHence the answer is 3.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input format contains \u2018T\u2019, denoting the number of test cases. Then each test case follows.\n\nThe first line of each test case contains an integer \u2018N\u2019, denoting the number of elements in the array.\n\nThe second line of the test case contains an array of \u2018N\u2019 integers denoting the array \u2018ARR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single integer denoting the total number of index \u2018k\u2019.\n\nOutput for every query will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the functions.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= \u2018N\u2019 &lt;= 1000\n1 &lt;= \u2018ARR[i]\u2019 &lt;= N\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5\n1 5 2 3 4\n3\n1 2 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<pre><code>In the first test case, there are two indexes, 1 and 5, such that the subarray (1, 1) and (1, 5) have all the \u2018k\u2019 numbers.\n\nIn the second test case, as the array is already sorted so every index will give a subarray having all the values between 1 to k. Hence the answer is 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4\n4 3 2 1\n4\n4 1 2 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a permutation of 'N' integers from 1 to 'N', determine the count of indices 'k' such that sorting the subarray consisting of the first 'k' elements results in a subarray containing all integers from 1 to 'k'.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= \u2018N\u2019 <= 1000",
                    "1 <= \u2018ARR[i]\u2019 <= N"
                ],
                "testcases": [
                    {
                        "input": "n = 5, arr = [3, 1, 2, 4, 5]",
                        "output": "3",
                        "explanation": "For k = 3, the first 3 elements are [3, 1, 2]. Sorting them gives [1, 2, 3]. This is a subarray of length 3 containing values from 1 to 3.\nFor k = 4, the first 4 elements are [3, 1, 2, 4]. Sorting them gives [1, 2, 3, 4]. This is a subarray of length 4 containing values from 1 to 4.\nFor k = 5, the first 5 elements are [3, 1, 2, 4, 5]. Sorting them gives [1, 2, 3, 4, 5]. This is a subarray of length 5 containing values from 1 to 5. Therefore there are 3 such indices"
                    },
                    {
                        "input": "n = 3, arr = [1, 2, 3]",
                        "output": "3",
                        "explanation": "For k = 1, the first element is [1]. Sorting it gives [1]. This is a subarray of length 1 containing values from 1 to 1.\nFor k = 2, the first 2 elements are [1, 2]. Sorting them gives [1, 2]. This is a subarray of length 2 containing values from 1 to 2.\nFor k = 3, the first 3 elements are [1, 2, 3]. Sorting them gives [1, 2, 3]. This is a subarray of length 3 containing values from 1 to 3."
                    },
                    {
                        "input": "n = 4, arr = [4, 3, 2, 1]",
                        "output": "1",
                        "explanation": "For k = 4, the first 4 elements are [4, 3, 2, 1]. Sorting it gives [1, 2, 3, 4]. This is a subarray of length 4 containing values from 1 to 4."
                    },
                    {
                        "input": "n = 4, arr = [4, 1, 2, 3]",
                        "output": "1",
                        "explanation": "For k = 4, the first 4 elements are [4, 1, 2, 3]. Sorting it gives [1, 2, 3, 4]. This is a subarray of length 4 containing values from 1 to 4."
                    },
                    {
                        "input": "n = 5, arr = [1, 5, 2, 3, 4]",
                        "output": "2",
                        "explanation": "For k = 1, the first element is [1]. Sorting it gives [1]. This is a subarray of length 1 containing values from 1 to 1.\nFor k = 5, the first 5 elements are [1, 5, 2, 3, 4]. Sorting them gives [1, 2, 3, 4, 5]. This is a subarray of length 5 containing values from 1 to 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Check for every index from 1 to \u2018N\u2019, and for the current index \u2018i\u2019, check if the first \u2018i\u2019 values are present or not.</p>",
            "<p>We just need to check the highest value we obtained till the current index.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}