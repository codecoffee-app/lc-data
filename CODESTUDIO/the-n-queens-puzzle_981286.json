{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9255,
            "title": "The N - Queens Puzzle",
            "titleSlug": "the-n-queens-puzzle_981286",
            "content": "<h4 id=\"the-n-queens-puzzle-is-the-problem-of-placing-n-chess-queens-on-an-n-n-chessboard-such-that-no-two-queens-attack-each-other\">The N Queens puzzle is the problem of placing N chess queens on an N * N chessboard such that no two queens attack each other.</h4>\n\n<h4 id=\"given-an-integer-n-print-all-distinct-solutions-to-the-n-queen-puzzle\">Given an integer \u2018N\u2019, print all distinct solutions to the \u2018N\u2019 queen puzzle.</h4>\n\n<pre><code>Two queens on the same chessboard can attack each other if any of the below condition satisfies:  \n1. They share a row. \n2. They share a column. \n3. They share a diagonal. \n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases. Then the test cases follow.\n\nThe first and the only line of each test case contains an integer \u2018N\u2019 denoting the size of the chessboard. \n</code></pre>\n\n<h4 id=\"output-format\">Output Format</h4>\n\n<pre><code>For each test case, print all the possible solutions, each in a new line. \n\nEach line would be representing a single configuration.\n\nEach configuration would contain N * N elements printed row-wise separated by spaces. The position where we can place the queen will have the value 1, rest will have the value 0.\n\nThe sequence of the configurations returned does not matter. \n\nThe output of each test case is printed in a separate line. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.  \n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10\n\nTime Limit : 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>1\n4   \n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0\n0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 \n</code></pre>\n\n<h4 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h4>\n\n<pre><code>The 4 queens can be placed in two ways in a 4*4 chessboard. Both the configurations are shown in the below figure. \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/queens-6663.png\" alt=\"\"></p>\n\n<pre><code>The chessboard matrix for the first configuration looks as follows:-\n0 0 1 0\n1 0 0 0\n0 0 0 1\n0 1 0 0\nQueen contained cell is depicted by 1. As we can see, No queen is in the same row, column or diagonal of the other queens. Hence this is a valid configuration.\n\nSimilarly, the chessboard matrix for the second configuration looks as follows:-\n0 1 0 0\n0 0 0 1\n1 0 0 0\n0 0 1 0\nQueen contained cell is depicted by 1. As we can see, No queen is in the same row, column or diagonal of the other queens. Hence this is also a valid configuration.\n\nThese are the only two valid configurations for 4-Queens. \n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>1\n3\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2:</h4>\n\n<pre><code></code></pre>\n\n<h4 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h4>\n\n<pre><code>Since no possible configuration exists for 3 Queen&#39;s, the output remains empty. \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 59,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer \u2018N\u2019, representing the size of an N x N chessboard, find all distinct solutions to the N-Queens puzzle. The N-Queens puzzle requires placing N chess queens on the board such that no two queens attack each other. This means no two queens can share the same row, column, or diagonal.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10",
                    "Time Limit : 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 4",
                        "output": "0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 0\n0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0",
                        "explanation": "For a 4x4 board, there are two possible solutions where no two queens attack each other. The output represents these two solutions, where '1' indicates the presence of a queen and '0' indicates an empty cell. Each solution is printed row by row."
                    },
                    {
                        "input": "n = 3",
                        "output": "",
                        "explanation": "For a 3x3 board, it is impossible to place three queens such that none of them attack each other. Therefore, the output is empty as no valid solutions exist."
                    },
                    {
                        "input": "n = 1",
                        "output": "1",
                        "explanation": "For a 1x1 board, there is only one possible position, so we place the queen there. Thus the output is '1'."
                    },
                    {
                        "input": "n = 2",
                        "output": "",
                        "explanation": "For a 2x2 board, we cannot place two queens such that they don't attack each other. Thus, there are no solutions."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;Generate all configurations by placing N queens in N different rows/columns and check for the valid configurations.&nbsp;</p>",
            "<p>Can we use backtracking to generate all the possible configurations?</p>",
            "<p>Try to use linear arrays instead to check if placing the queen in a cell is safe or not.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}