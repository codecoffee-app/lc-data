{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10800,
            "title": "The Skyline Problem",
            "titleSlug": "the-skyline-problem_1264952",
            "content": "<h4 id=\"you-are-given-n-rectangular-buildings-in-a-2-dimensional-city-your-task-is-to-compute-the-skyline-of-these-buildings-eliminating-hidden-lines-return-the-skyline-formed-by-these-buildings-collectively-a-citys-skyline-is-the-outer-contour-of-the-silhouette-formed-by-all-the-buildings-in-that-city-when-viewed-from-a-distance-the-geometric-information-of-each-building-is-given-in-the-array-of-buildings-where-buildings-i-left_i-right_i-height_i\">You are given &#39;N&#39; rectangular buildings in a 2-dimensional city. Your task is to compute the skyline of these buildings, eliminating hidden lines return the skyline formed by these buildings collectively. A city&#39;s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. The geometric information of each building is given in the array of buildings where BUILDINGS[i] = [LEFT_i, RIGHT_i, HEIGHT_i]:</h4>\n\n<h4 id=\"left_i-is-the-x-coordinate-of-the-left-edge-of-the-ith-building\">-&gt; LEFT_i is the x coordinate of the left edge of the ith building.</h4>\n\n<h4 id=\"right_i-is-the-x-coordinate-of-the-right-edge-of-the-ith-building\">-&gt; RIGHT_i is the x coordinate of the right edge of the ith building.</h4>\n\n<h4 id=\"height_i-is-the-height-of-the-ith-building\">-&gt; HEIGHT_i is the height of the ith building.</h4>\n\n<h4 id=\"you-may-assume-all-buildings-are-perfect-rectangles-grounded-on-an-absolutely-flat-surface-at-height-0\">You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.</h4>\n\n<h4 id=\"the-skyline-should-be-represented-as-a-list-of-key-points-sorted-by-their-x-coordinate-in-the-form-x1-y1-x2-y2-each-key-point-is-the-left-endpoint-of-some-horizontal-segment-in-the-skyline-except-the-last-point-in-the-list-which-always-has-a-y-coordinate-0-and-is-used-to-mark-the-skylines-termination-where-the-rightmost-building-ends-any-ground-between-the-leftmost-and-rightmost-buildings-should-be-part-of-the-skylines-contour\">The skyline should be represented as a list of &quot;key points&quot; sorted by their x-coordinate in the form [[x1, y1], [x2, y2], ...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline&#39;s termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline&#39;s contour.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3], [4 5], [7 5], [11 5], [12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output.\n\nAs such: [..., [2 3], [4 5], [12 7],...]. \n\nAlso, the buildings are sorted by a non-decreasing order.\n\nFor more clarification see sample case 1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains a single integer \u2018N\u2019 denoting the number of buildings that would be given.\n\nAnd the rest of the \u2018N\u2019 lines contain three space-separated integers: Left and right Indices of the vertical edges of the building while the last integer represents the height of the building \u2018H\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Return the list of skylines formed by these buildings collectively.\n\nThe skyline should be represented as a list of &quot;key points&quot; sorted by their x-coordinate in the form [[x1, y1], [x2, y2],...]. Each key point is on the left.\n\nThe endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark.\n\nThe skyline&#39;s termination is where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline&#39;s contour.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= | BUILDINGS | &lt;= 10^4\n0 &lt;= LEFT_i &lt; RIGHT_i &lt;= 2^31 - 1\n1 &lt;= HEIGHT_i &lt;= 2^31 - 1\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>5\n2 9 10\n3 7 15\n5 12 12\n12 20 10\n19 24 8\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 10\n3 15\n7 12\n12 0\n15 10\n20 8\n24 0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for Sample 1:</h5>\n\n<pre><code>Figure A shows the buildings of the input. Figure B shows the skyline formed by those buildings. \n\nThe red points in figure B represent the key points in the output list.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image2-8474.png\" alt=\"\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n0 2 3\n2 5 3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0 3\n5 0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'N' rectangular buildings in a 2D city, compute the skyline formed by these buildings. The skyline represents the outer contour of the silhouette formed by all buildings when viewed from a distance. Each building is defined by its left edge (LEFT_i), right edge (RIGHT_i), and height (HEIGHT_i). The buildings are assumed to be perfect rectangles grounded on a flat surface at height 0. The skyline should be represented as a list of key points sorted by x-coordinate, in the form [[x1, y1], [x2, y2], ...], where each key point is the left endpoint of a horizontal segment. The last point in the list always has a y-coordinate of 0, indicating the skyline's termination at the rightmost building's end. Ensure there are no consecutive horizontal lines of equal height in the output. The buildings are sorted by non-decreasing order.",
                "constraints": [
                    "1 <= | BUILDINGS | <= 10^4",
                    "0 <= LEFT_i < RIGHT_i <= 2^31 - 1",
                    "1 <= HEIGHT_i <= 2^31 - 1",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n2 9 10\n3 7 15\n5 12 12\n12 20 10\n19 24 8",
                        "output": "[[2, 10], [3, 15], [7, 12], [12, 0], [15, 10], [20, 8], [24, 0]]",
                        "explanation": "The input represents five buildings. The output skyline traces the outline of these buildings, noting the key points where the height changes. The final point [24, 0] indicates the end of the skyline."
                    },
                    {
                        "input": "2\n0 2 3\n2 5 3",
                        "output": "[[0, 3], [5, 0]]",
                        "explanation": "The input contains two adjacent buildings of the same height. The skyline rises to height 3 at x=0 and terminates at x=5 with height 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to sort the buildings w.r.t their heights from left to right in ascending order, store the coordinate height pair in the following manner:</p><p>(X1, X2, H) for a building would be paired up and stored in the following format:</p><p>(X1, -H), (X2, H)</p>",
            "<p>Try to sort the buildings w.r.t their positions from left to right, small to large and when positions overlap, sort the height from high to low, large to small.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Computational Geometry",
                "slug": "computational-geometry"
            },
            {
                "name": "Heap",
                "slug": "heap"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}