{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15154,
            "title": "Thomas and Friends",
            "titleSlug": "thomas-and-friends_2420288",
            "content": "<h4 id=\"thomas-is-a-tank-engine-on-the-island-of-sodor-there-are-total-n-cities-on-this-island-connected-with-m-tracks-all-the-cities-on-this-island-are-connected-to-each-other-directly-or-indirectly-thomas-and-all-his-engine-friends-travel-from-city-a-to-city-b-daily-but-might-use-different-routes-some-of-these-tracks-are-present-on-all-the-paths-from-the-city-a-to-b-due-to-excessive-load-on-these-tracks-all-of-these-tracks-are-not-in-good-condition-so-one-day-thomas-asks-the-fat-controller-to-repair-all-the-tracks-that-are-present-on-all-the-paths-from-a-to-b-help-the-fat-controller-to-count-all-these-tracks\">Thomas is a Tank engine on the island of Sodor. There are total \u2018N\u2019 cities on this island connected with \u2018m\u2019 tracks. All the cities on this island are connected to each other, directly or indirectly. Thomas and all his engine friends travel from city \u2018a\u2019 to city \u2018b\u2019 daily but might use different routes. Some of these tracks are present on all the paths from the city \u2018a\u2019 to \u2018b\u2019. Due to excessive load on these tracks, all of these tracks are not in good condition, so one day Thomas asks The Fat Controller to repair all the tracks that are present on all the paths from \u2018a\u2019 to \u2018b\u2019. Help the Fat controller to count all these tracks.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>n = 5, m = 5, a = 1, b = 0\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/thomas_and_friends_example-12826.png\"/> </p>\n\n<pre><code>Now in this example, all the paths from \u20181\u2019 to \u20180\u2019 are:\n1 -&gt; 4 -&gt; 0\n1 -&gt; 5 -&gt; 4 -&gt; 0\nThe track 4 -&gt; 0 is present in both of these paths. Hence the answer is 1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. Then each test case follows:\n\nThe first line of each test case contains two integers, \u2018N\u2019 and \u2018M\u2019, denoting the number of cities and tracks, respectively.\n\nThe next \u2018M\u2019 lines of the test case contain two space-separated integers, \u2018x\u2019 and \u2018y\u2019, denoting a track between \u2018x\u2019 and \u2018y\u2019.\n\nThe last line of the test case contains two space-separated integers, \u2018a\u2019 and \u2018b\u2019, denoting the starting and ending city of Thomas and his friends.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the total number of common tracks between all the paths from \u2018a\u2019 to \u2018b\u2019.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function and return the answer.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 1000\nN-1 &lt;= M &lt;= (V * (V - 1)) / 2\n0 &lt;= a, b &lt;= V - 1\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4 4\n0 1\n0 3\n1 2\n2 3\n1 3\n6 6\n1 2\n2 3\n2 4\n4 5\n3 5\n5 0\n1 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>0\n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/thomas_and_friends_st1-12827.png\"/> </p>\n\n<pre><code>In the first test case, there are two paths from 1 to 3. I.e. 1 -&gt; 2 -&gt; 3 or 1 -&gt; 0 -&gt; 3 and both these paths have no common track.\nHence the answer is 0.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/thomas_and_friends_st2-12828.png\"/> </p>\n\n<pre><code>In the second test case, there are two different paths from 1 to 0. i.e. , 1 -&gt; 2 -&gt; 3 -&gt; 6 -&gt; 0 and 1 -&gt; 2 -&gt; 4 -&gt; 6 -&gt; 0. Having two common tracks, 1 -&gt; 2 and 6 -&gt; 0.\nHence the answer is 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2 1\n0 1\n1 0\n5 4\n0 1\n1 2\n2 3\n3 4\n0 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a network of cities on the island of Sodor, where Thomas and his engine friends travel between two cities, find the number of tracks (edges) that are present in *all* possible paths between a starting city 'a' and an ending city 'b'.  The island has 'N' cities connected by 'M' tracks. All cities are reachable from each other. The goal is to help The Fat Controller determine how many tracks need repair, as these are the common tracks used in every route between 'a' and 'b'.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 1000",
                    "N-1 <= M <= (V * (V - 1)) / 2",
                    "0 <= a, b <= V - 1",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "4 4\n0 1\n0 3\n1 2\n2 3\n1 3",
                        "output": "0",
                        "explanation": "There are two paths from 1 to 3: 1 -> 2 -> 3 and 1 -> 0 -> 3. These paths have no common tracks. Therefore, the answer is 0."
                    },
                    {
                        "input": "6 6\n1 2\n2 3\n2 4\n4 5\n3 5\n5 0\n1 0",
                        "output": "2",
                        "explanation": "There are two paths from 1 to 0: 1 -> 2 -> 3 -> 5 -> 0 and 1 -> 2 -> 4 -> 5 -> 0. The common tracks are 1 -> 2 and 5 -> 0. Therefore, the answer is 2."
                    },
                    {
                        "input": "2 1\n0 1\n1 0",
                        "output": "1",
                        "explanation": null
                    },
                    {
                        "input": "5 4\n0 1\n1 2\n2 3\n3 4\n0 4",
                        "output": "4",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Iterate through the graph using DFS and count all the common paths using the concept of bridges.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}