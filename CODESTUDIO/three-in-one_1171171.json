{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10201,
            "title": "Three in one",
            "titleSlug": "three-in-one_1171171",
            "content": "<h4 id=\"given-a-sequence-of-queries-of-insertion-and-deletion-from-3-stacks-you-need-to-implement-three-stacks-using-a-single-array-such-that-the-size-of-the-array-doesn-t-exceed-the-number-of-queries\">Given a sequence of queries of insertion and deletion from 3 stacks, you need to implement three stacks using a single array such that the size of the array doesn\u2019t exceed the number of queries.</h4>\n\n<h4 id=\"in-each-query-the-input-is-of-two-types\">In each query, the input is of two types :</h4>\n\n<h4 id=\"id-0-where-id-is-the-index-of-the-stack-out-of-the-three-in-which-we-have-to-work-on-0-means-we-have-to-pop-a-top-element-from-the-stack\">Id 0: where \u2018id\u2019 is the index of the stack ( out of the three ) in which we have to work on, 0 means we have to pop a top element from the stack.</h4>\n\n<h4 id=\"id-1-ele-where-id-is-the-index-of-the-stack-out-of-the-three-in-which-we-have-to-work-on-1-means-we-have-to-push-ele-element-on-top-of-the-stack\">Id 1 ele: where \u2018id\u2019 is the index of the stack ( out of the three ) in which we have to work on, 1 means we have to push \u2018ele\u2019 element on top of the stack.</h4>\n\n<h4 id=\"after-each-pop-operation-you-have-to-print-the-element-which-is-removed\">After each pop operation, you have to print the element which is removed.</h4>\n\n<pre><code>Note: If a pop operation is used in an empty stack nothing happens to the stack, but you have to print -1.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of the input contains \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains \u2018Q\u2019 denoting the number of queries.\n\nIn the next Q lines input is either of the types :\n\n    Id 0: where \u2018id\u2019 is the index of the stack ( out of the three ) in which we have to work on, 0 means we have to pop a top element from the stack. \n\n    Id 1 ele: where \u2018id\u2019 is the index of the stack ( out of the three ) in which we have to work on, 1 means we have to push \u2018ele\u2019 element on top of the stack.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each query of type 0, If the stack is non-empty print the removed element.\n\nIf a stack is empty print -1.\n\nPrint each element in the new line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 3\n0 &lt;= Q, ele  &lt;= 10^5\n0 &lt;= id &lt;= 2  , denoting one of the three stack\n\nTime Limit : 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n6\n0 0\n0 1 5\n0 1 4\n1 1 9\n1 0\n0 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>-1\n9\n4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>Initially stack_0= {} , stack_1 ={} , stack_2={} , i.e. all are empty\n\n1st query: pop  from stack 0\nSince stack 0 is empty : print -1\nstack_0= {} , stack_1 ={} , stack_2={}\n\n2st query: push 5 in stack 0\nstack_0= {5} , stack_1 ={} , stack_2={}\n\n3st query: push 4 in stack 0\nstack_0= {5,4} , stack_1 ={} , stack_2={}\n\n4st query: push 9 in stack 1\nstack_0= {5,4} , stack_1 ={9} , stack_2={}\n\n5st query: pop from stack 1\nTos of stack_1 is 9 : print 9\nstack_0= {5,4} , stack_1 ={)  , stack_2={}\n\n6st query: pop from stack 0\nTos of stack_0 is 4 : print 4\nstack_0= {5} , stack_1 ={} , stack_2={}\n\nTherefore the output is: -1, 9, 4\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n3\n0 0\n1 0\n2 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>-1\n-1\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement three stacks using a single array. You are given a sequence of queries to either push an element onto one of the stacks or pop an element from one of the stacks. The array's size should not exceed the total number of queries. For each pop operation, print the popped element. If a pop operation is performed on an empty stack, print -1.",
                "constraints": [
                    "1 <= T <= 3",
                    "0 <= Q, ele <= 10^5",
                    "0 <= id <= 2 , denoting one of the three stack"
                ],
                "testcases": [
                    {
                        "input": "q = 6, queries = [[0, 0], [0, 1, 5], [0, 1, 4], [1, 1, 9], [0, 1, 0], [0, 0]]",
                        "output": "-1\n9\n4",
                        "explanation": "Initially stack_0= {} , stack_1 ={} , stack_2={} , i.e. all are empty\n\n1st query: pop  from stack 0\nSince stack 0 is empty : print -1\nstack_0= {} , stack_1 ={} , stack_2={}\n\n2st query: push 5 in stack 0\nstack_0= {5} , stack_1 ={} , stack_2={}\n\n3st query: push 4 in stack 0\nstack_0= {5,4} , stack_1 ={} , stack_2={}\n\n4st query: push 9 in stack 1\nstack_0= {5,4} , stack_1 ={9} , stack_2={}\n\n5st query: pop from stack 1\nTos of stack_1 is 9 : print 9\nstack_0= {5,4} , stack_1 ={)  , stack_2={}\n\n6st query: pop from stack 0\nTos of stack_0 is 4 : print 4\nstack_0= {5} , stack_1 ={} , stack_2={}\n\nTherefore the output is: -1, 9, 4"
                    },
                    {
                        "input": "q = 3, queries = [[0, 0], [0, 0], [0, 0]]",
                        "output": "-1\n-1\n-1",
                        "explanation": "All stacks are initially empty. Each pop operation results in -1 being printed."
                    },
                    {
                        "input": "q = 3, queries = [[0, 1, 5], [0, 1, 10], [0, 0]]",
                        "output": "10",
                        "explanation": "First, 5 is pushed onto stack 0, then 10 is pushed onto stack 0.  The pop operation removes and prints 10."
                    },
                    {
                        "input": "q = 4, queries = [[1, 0, 5], [1, 1, 10], [1, 2, 15], [0, 1, 0]]",
                        "output": "-1",
                        "explanation": "5 pushed to stack 0, 10 pushed to stack 1, 15 pushed to stack 2. Pop operation tries to pop from stack 1, which has 10. so prints 10."
                    },
                    {
                        "input": "q = 7, queries = [[1, 0, 1], [1, 0, 2], [1, 0, 3], [0, 0], [0, 0], [0, 0], [0, 0]]",
                        "output": "3\n2\n1\n-1",
                        "explanation": "Push 1, 2, and 3 onto stack 0. Pop three times, getting 3, 2, and 1. The fourth pop is on an empty stack, so print -1."
                    },
                    {
                        "input": "q = 1, queries = [[0, 2]]",
                        "output": "-1",
                        "explanation": "Stack 2 is initially empty. A pop operation on an empty stack prints -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>create a prev array that keeps tracks of the previous position of the element in the stack</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}