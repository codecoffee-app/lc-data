{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 23635,
            "title": "Three Sum",
            "titleSlug": "three-sum_6922132",
            "content": "<h4 id=\"you-are-given-an-array-arr-containing-n-integers\">You are given an array  <em><strong>\u2018ARR\u2019</strong></em> containing  <em><strong>\u2018N\u2019</strong></em> integers.</h4>\n\n<p><br></p>\n\n<h4 id=\"return-all-the-unique-triplets-arr-i-arr-j-arr-k-such-that-i-j-j-k-and-k-i-and-their-sum-is-equal-to-zero\">Return all the unique triplets [ARR[i], ARR[j], ARR[k]] such that i != j, j != k and k != i and their sum is equal to zero.</h4>\n\n<p><br></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018N\u2019 = 5 \n&#39;ARR&#39; =  [-1, -1, 2, 0, 1] \n\nOutput: \n-1 -1 2\n-1 0 1\n\nExplanation:\n(-1 -1 +2) = (-1 +0 +1) = 0.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer, \u2018N\u2019, representing the number of elements in the array.\n\nThe next line contains \u2018N\u2019 space-separated integers representing the elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>Return an integer, the number of all the unique triplets with zero-sum.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>5 \n-1 -1 2 0 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>-1 -1 2\n-1 0 1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>(-1 -1 +2) = (-1 +0 +1) = 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>4 \n0 0 0 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0 0 0\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1  &lt;= N &lt;= 1000\n1 &lt;= ARR[i] &lt;= 1000\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 180,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'ARR' of 'N' integers, find all unique triplets [ARR[i], ARR[j], ARR[k]] such that i != j, j != k, k != i, and their sum is equal to zero.",
                "constraints": [
                    "1 <= N <= 1000",
                    "1 <= ARR[i] <= 1000",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n-1 -1 2 0 1",
                        "output": "-1 -1 2\n-1 0 1",
                        "explanation": "The triplets [-1, -1, 2] and [-1, 0, 1] sum to zero.  Specifically, (-1 + -1 + 2) = 0 and (-1 + 0 + 1) = 0."
                    },
                    {
                        "input": "4\n0 0 0 0",
                        "output": "0 0 0",
                        "explanation": "The triplet [0, 0, 0] sums to zero."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try the problem after sorting the given array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O( N * N )\r\n    Space complexity: O( K * 3 )\r\n\r\n    Where N is the size of array and\r\n    K is the number of unique triplets.\r\n*/\r\n\r\nvector<vector<int>> triplet(int n, vector<int> &arr)\r\n{\r\n    // Sort the array.\r\n    sort(arr.begin(), arr.end()) ;\r\n\r\n    // Create 2D vector for storing answer.\r\n    vector<vector<int>> ans ;\r\n\r\n    // For loop from 0 to N-3.\r\n    for(int idx = 0; idx < (n-2); idx++)\r\n    {\r\n        // if arr[idx] not equal to arr[idx-1].\r\n        if(idx == 0 or (idx and arr[idx] != arr[idx-1]))\r\n        {\r\n            // create left, right and sum.\r\n            int left = idx+1, right = n-1, sum = -arr[idx] ;\r\n            while(left < right)\r\n            {\r\n                // if arr at left and right sums to sum.\r\n                if((arr[left] + arr[right]) == sum)\r\n                {\r\n                    // Update ans.\r\n                    ans.push_back({arr[idx], arr[left], arr[right]}) ;\r\n                    // skip the same elements.\r\n                    while(left < right and arr[left] == arr[left+1])\r\n                    {\r\n                        left++ ;\r\n                    }\r\n                    while(left < right and arr[right] == arr[right-1])\r\n                    {\r\n                        right-- ;\r\n                    }\r\n                    // Increase left and decrease right.\r\n                    left++ ;\r\n                    right-- ;\r\n                }\r\n                // If arr at left and right sums less than sum.\r\n                else if((arr[left] + arr[right]) < sum)\r\n                {\r\n                    // Increase left.\r\n                    left++ ;\r\n                }\r\n                // Otherwise decrease right.\r\n                else\r\n                {\r\n                    right-- ;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return ans ;\r\n}\r\n\r\n\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time Complexity : O( N * N )\r\n    Space complexity: O( K * 3 )\r\n\r\n    Where N is the size of array and\r\n    K is the number of unique triplets.\r\n\"\"\"\r\nfrom copy import deepcopy\r\n\r\n\r\ndef triplet(n: int, arr: [int]) -> [[int]]:\r\n    # Sort the array.\r\n    arr.sort()\r\n\r\n    # Create 2D vector for storing answer.\r\n    ans = []\r\n\r\n    # For loop from 0 to N-3.\r\n    for idx in range(n - 2):\r\n        # if arr[idx] not equal to arr[idx-1].\r\n        if idx == 0 or (idx and arr[idx] != arr[idx - 1]):\r\n            # create left, right and sum.\r\n            left = idx + 1\r\n            right = n - 1\r\n            sum = -arr[idx]\r\n            while left < right:\r\n                # if arr at left and right sums to sum.\r\n                if (arr[left] + arr[right]) == sum:\r\n                    # Update ans.\r\n                    ans.append([arr[idx], arr[left], arr[right]])\r\n                    # skip the same elements.\r\n                    while left < right and arr[left] == arr[left + 1]:\r\n                        left += 1\r\n                    while left < right and arr[right] == arr[right - 1]:\r\n                        right -= 1\r\n                    # Increase left and decrease right.\r\n                    left += 1\r\n                    right -= 1\r\n                # If arr at left and right sums less than sum.\r\n                elif (arr[left] + arr[right]) < sum:\r\n                    # Increase left.\r\n                    left += 1\r\n                # Otherwise decrease right.\r\n                else:\r\n                    right -= 1\r\n    return ans\r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O( N * N )\r\n    Space complexity: O( K * 3 )\r\n\r\n    Where N is the size of array and\r\n    K is the number of unique triplets.\r\n*/\r\nimport java.util.*;\r\npublic class Solution {\r\n    public static List< List < Integer > > triplet(int n, int []arr) {\r\n        // Sort the array.\r\n        Arrays.sort(arr) ;\r\n\r\n        // Create 2D vector for storing answer.\r\n        List< List < Integer > > ans = new ArrayList<>();\r\n\r\n        // For loop from 0 to N-3.\r\n        for(int idx = 0; idx < (n-2); idx++)\r\n        {\r\n            // if arr[idx] not equal to arr[idx-1].\r\n            if(idx == 0 || (arr[idx] != arr[idx-1]))\r\n            {\r\n                // create left, right and sum.\r\n                int left = idx+1, right = n-1, sum = -arr[idx] ;\r\n                while(left < right)\r\n                {\r\n                    // if arr at left and right sums to sum.\r\n                    if((arr[left] + arr[right]) == sum)\r\n                    {\r\n                        // Update ans.\r\n                        ans.add(Arrays.asList(arr[idx], arr[left], arr[right])) ;\r\n                        // skip the same elements.\r\n                        while(left < right && arr[left] == arr[left+1])\r\n                        {\r\n                            left++ ;\r\n                        }\r\n                        while(left < right && arr[right] == arr[right-1])\r\n                        {\r\n                            right-- ;\r\n                        }\r\n                        // Increase left and decrease right.\r\n                        left++ ;\r\n                        right-- ;\r\n                    }\r\n                    // If arr at left and right sums less than sum.\r\n                    else if((arr[left] + arr[right]) < sum)\r\n                    {\r\n                        // Increase left.\r\n                        left++ ;\r\n                    }\r\n                    // Otherwise decrease right.\r\n                    else\r\n                    {\r\n                        right-- ;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return ans ;\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}