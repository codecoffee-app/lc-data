{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12894,
            "title": "TIme-Based Key Value Store",
            "titleSlug": "time-based-key-value-store_1530638",
            "content": "<h4 id=\"you-are-given-a-stream-of-tuples-which-constitute-three-things-key-val-and-the-timestamp\">You are given a stream of tuples which constitute three things \u2018Key\u2019, \u2018Val\u2019, and the \u2018Timestamp\u2019.</h4>\n\n<h4 id=\"your-task-is-to-implement-the-timebased-class-having-the-two-functions\">Your task is to implement the \u2018TimeBased\u2019 class having the two functions:</h4>\n\n<pre><code>1) The first function is \u2018setKey(string Key, string Val, int Timestamp)\u2019, which stores the \u2018Key\u2019 and the \u2018Val\u2019 along with the \u2018Timestamp\u2019.\n\n2) The second function is \u2018getValue(string TargetKey, int TargetTimestamp)\u2019, which returns the value of \u2018Val\u2019 associated with the \u2018TargetKey\u2019 such that its \u2018Timestamp\u2019 value is less than or equal to the \u2018TargetTimestamp\u2019. If there are multiple values of \u2018Val\u2019, return the value of \u2018Val\u2019 with the highest value of \u2018Timestamp\u2019 among the valid ones. If there is no valid value of \u2018Val\u2019 return \u201c-1\u201d as a string.\n</code></pre>\n\n<h4 id=\"timestamps-will-always-be-in-strictly-increasing-order\">\u2018Timestamps\u2019 will always be in strictly increasing order.</h4>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, denoting the number of test cases. \n\nThe first line of each test case contains an integer \u2018N\u2019, representing the total number of queries.\n\nThen the next \u2018N\u2019 lines contain \u2018N\u2019 queries. A query can be of two types:\n1 Key Val Timestamp  \u2192 stores the Key and the Val along with the Timestamp\n2 TargetKey TargetTimestamp \u2192 returns the value of \u2018Val\u2019\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print the value of \u2018Val\u2019 for each query of type 2 only, output the answer to the query in a single line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given functions.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 3 * 10^4\n1 &lt;= | Val |, | Key | &lt;= 10\n1 &lt;= Timestamp &lt;= 10^7\n\nWhere \u2018T\u2019 represents the number of test cases, \u2018N\u2019 represents the number of queries, \u2018Val\u2019, \u2018Key\u2019 and \u2018Timestamp\u2019 are added to the stream.\n\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code> 2\n 4\n 1 abc def 10\n 1 abc ghi 20\n 2 abc 10\n 2 abc 5\n 3\n 1 bbb ccc 5\n 1 ddd ccc 5\n 2 ddd 6 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code> def  -1\n ccc\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For sample Input 1:</h5>\n\n<pre><code>For the first test case, \nFirst, \u201cabc\u201d is added as a key and \u201cdef\u201d as a value, and 10 as a timestamp. So at this moment, we have a single data, i.e. {\u201cabc\u201d, \u201cdef\u201d, 10}. Then again, \u201cabc\u201d is added as a key along with \u201cghi\u201d as a value and 20 as the timestamp. Now we have two records, i.e. {\u201cabc\u201d, \u201cghi\u201d, 20} and {\u201cabc\u201d, \u201cdef\u201d, 10}. Now query of type 2 is called, and we have to find the value of \u2018Val\u2019 such that its key is \u201cabc\u201d and its timestamp value should be less than or equal to the target timestamp \u2018TargetTimestamp\u2019 i.e 10. So the output for this query is \u201cdef\u201d. Now again, the query of type 2 is called, and we have to find the value of \u2018Val\u2019 such that its key is \u201cabc\u201d and its timestamp value should be less than or equal to the target timestamp \u2018TargetTimestamp\u2019 i.e 5. So the output for this query is \u201c-1\u201d as there exists no value of timestamp, which is less than or equal to 5. \n\nFor the second test case, \nFirst, \u201cbbb\u201d is added as a key along with \u201cccc\u201d as a value and 5 as a timestamp. So at this moment, we have a single data, i.e. {\u201cbbb\u201d, \u201cccc\u201d, 5}. Then again, the query of type 1 is executed, and \u201cddd\u201d is added as a key along with \u201cccc\u201d as value and 5 as a timestamp. Now we have two records, i.e. {\u201cbbb\u201d, \u201cccc\u201d, 5} and {\u201cddd\u201d, \u201cccc\u201d, 5}. Now query of type 2 is called, and we have to find the value of \u2018Val\u2019 such that its key is \u201cddd\u201d and its timestamp value should be less than or equal to target timestamp \u2018TargetTimestamp\u2019 i.e 6. So the output for this query is \u201cccc\u201d. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3\n1 yyy zzz 3\n1 yyy xxx 4\n2 yyy 4\n4\n2 fff 13\n1 fff ggg 13\n1 fff hhh 14\n2 fff 14 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>xxx\n-1 hhh\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>For the first test case, \nFirst, \u201cyyy\u201d is added as a key and \u201czzz\u201d as a value, and 3 as a timestamp. So at this moment, we have a single data, i.e. {\u201cyyy\u201d, \u201czzz\u201d, 3}. Then again, \u201cyyy\u201d is added as a key along with \u201cxxx\u201d as a value and 4 as the timestamp. Now we have two records, i.e. {\u201cyyy\u201d, \u201czzz\u201d, 3} and {\u201cyyy\u201d, \u201cxxx\u201d, 4}. Now query of type 2 is called, and we have to find the value of \u2018yyy\u2019 such that its key is \u201cyyy\u201d and its timestamp value should be less than or equal to the target timestamp \u2018TargetTimestamp\u2019 i.e 4. So the output for this query is \u201cxxx\u201d.\n\nFor the second test case, \nInitially, no data is present so for query 2, the output will be -1. First, \u201cfff\u201d is added as a key along with \u201cggg\u201d as a value and 13 as a timestamp. So at this moment, we have a single data, i.e. {\u201cfff\u201d, \u201cggg\u201d, 13}. Then again, the query of type 1 is executed, and \u201cfff\u201d is added as a key along with \u201chhh\u201d as value and 14 as a timestamp. Now we have two records, i.e. {\u201cfff\u201d, \u201cggg\u201d, 13} and {\u201cfff\u201d, \u201chhh\u201d, 14}. Now query of type 2 is called, and we have to find the value of \u2018fff\u2019 such that its key is \u201cfff\u201d and its timestamp value should be less than or equal to target timestamp \u2018TargetTimestamp\u2019 i.e 14. So the output for this query is \u201chhh\u201d. \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a `TimeBased` class to store and retrieve values associated with keys and timestamps. The class should have the following two methods:\n\n*   `setKey(string Key, string Val, int Timestamp)`: Stores the `Key`, `Val`, and `Timestamp`.\n*   `getValue(string TargetKey, int TargetTimestamp)`: Returns the `Val` associated with `TargetKey` such that its `Timestamp` is less than or equal to `TargetTimestamp`. If multiple values exist, return the `Val` with the highest `Timestamp` among the valid ones. If no valid value exists, return \"-1\".\n\nTimestamps are strictly increasing for each key.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 3 * 10^4 (Number of queries)",
                    "1 <= |Val|, |Key| <= 10 (Length of value and key strings)",
                    "1 <= Timestamp <= 10^7",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4\n1 abc def 10\n1 abc ghi 20\n2 abc 10\n2 abc 5",
                        "output": "def\n-1",
                        "explanation": "First, key 'abc' is set to 'def' at timestamp 10. Then, key 'abc' is set to 'ghi' at timestamp 20.  The first query requests the value for 'abc' at timestamp 10. The value 'def' at timestamp 10 matches, and since it is the latest value at or before time 10, it is returned.  The second query requests the value for 'abc' at timestamp 5. There are no entries for 'abc' with timestamps at or before 5, so '-1' is returned."
                    },
                    {
                        "input": "3\n1 bbb ccc 5\n1 ddd ccc 5\n2 ddd 6",
                        "output": "ccc",
                        "explanation": "First, key 'bbb' is set to 'ccc' at timestamp 5. Then, key 'ddd' is set to 'ccc' at timestamp 5. The query requests the value for 'ddd' at timestamp 6. The value 'ccc' at timestamp 5 matches the key 'ddd' and falls within the requested timeframe, and since it is the latest value at or before time 6, it is returned."
                    },
                    {
                        "input": "3\n1 yyy zzz 3\n1 yyy xxx 4\n2 yyy 4",
                        "output": "xxx",
                        "explanation": "First, key 'yyy' is set to 'zzz' at timestamp 3. Then, key 'yyy' is set to 'xxx' at timestamp 4. The query requests the value for 'yyy' at timestamp 4. Both timestamps 3 and 4 are <= 4. Since timestamp 4 is the largest, value 'xxx' is returned."
                    },
                    {
                        "input": "4\n2 fff 13\n1 fff ggg 13\n1 fff hhh 14\n2 fff 14",
                        "output": "-1\nhhh",
                        "explanation": "Initially, no data is present, so the first getValue call returns -1. Then 'fff' is set to 'ggg' at timestamp 13, and then 'fff' is set to 'hhh' at timestamp 14. The last getValue call requests the value for 'fff' at timestamp 14. Since 14 >= 14, hhh is returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you try to store the given input in an array and perform a linear search to find the required value of Val?</p>",
            "<p>Can you try to store the input data in a HashMap and perform a search in best time complexity to get the required value of val?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}