{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7299,
            "title": "Time to Burn Tree",
            "titleSlug": "time-to-burn-tree_630563",
            "content": "<h4 id=\"you-have-a-binary-tree-of-n-unique-nodes-and-a-start-node-from-where-the-tree-will-start-to-burn-given-that-the-start-node-will-always-exist-in-the-tree-your-task-is-to-print-the-time-in-minutes-that-it-will-take-to-burn-the-whole-tree\">You have a binary tree of <em><strong>&#39;N&#39;</strong></em> unique nodes and a <em><strong>Start</strong></em> node from where the tree will start to burn. Given that the Start node will always exist in the tree, your task is to print the time (in minutes) that it will take to burn the whole tree.</h4>\n\n<p><br></p>\n\n<h4 id=\"it-is-given-that-it-takes-1-minute-for-the-fire-to-travel-from-the-burning-node-to-its-adjacent-node-and-burn-down-the-adjacent-node\">It is given that it takes 1 minute for the fire to travel from the burning node to its adjacent node and burn down the adjacent node.</h4>\n\n<p><br></p>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>For the given binary tree: [1, 2, 3, -1, -1, 4, 5, -1, -1, -1, -1]\nStart Node: 3\n\n    1\n   / \\\n  2   3\n     / \\\n    4   5\n\nOutput: 2\n\nExplanation :\nIn the zeroth minute, Node 3 will start to burn.\n\nAfter one minute, Nodes (1, 4, 5) that are adjacent to 3 will burn completely.\n\nAfter two minutes, the only remaining Node 2 will be burnt and there will be no nodes remaining in the binary tree. \n\nSo, the whole tree will burn in 2 minutes.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nThe second line of input contains the value of the start node.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/graph-input-format-2-8282.png\" alt=\"tree\"></p>\n\n<pre><code>For example, the input for the tree depicted in the above image would be :\n\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h5 id=\"explanation\">Explanation :</h5>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format</h5>\n\n<pre><code>Print a single integer denoting the time in minutes that will be taken to burn the whole tree.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1 2 3 4 -1 -1 5 -1 -1 -1 -1\n2    \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1 :</h5>\n\n<pre><code>The given binary tree will look as - \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/burntree-10540.png\" alt=\"\"></p>\n\n<pre><code>The Start node is 2.\n\nIn the zeroth minute, Node 2 will start to burn.\n\nAfter one minute, Nodes 1 and 4 that are adjacent to 2 will burn completely.\n\nAfter two minutes, Node 3 that is adjacent to node 1 will burn completely.\n\nAfter three minutes, the only remaining Node 5 will be burnt and there will be no nodes remaining in the binary tree i.e the whole tree will burn in 3 minutes.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3 1 2 5 6 -1 -1 -1 -1 -1 -1\n3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= N &lt;= 10^5\n1 &lt;= Value of Tree Node &lt;= 10^9\n1 &lt;= Value of Start Node &lt;= 10^9\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 183,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with 'N' unique nodes and a designated 'Start' node, determine the minimum time (in minutes) required to burn the entire tree. Fire spreads from a burning node to its adjacent nodes in 1 minute.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= Value of Tree Node <= 10^9",
                    "1 <= Value of Start Node <= 10^9",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 -1 -1 5 -1 -1 -1 -1\n2",
                        "output": "3",
                        "explanation": "The tree structure is as follows:\n\n      1\n     / \\\n    2   3\n   /   \\\n  4    5\n\nBurning starts at node 2 (time 0). At time 1, nodes 1 and 4 are burnt. At time 2, node 3 is burnt. Finally, at time 3, node 5 is burnt. Therefore, the total time taken is 3 minutes."
                    },
                    {
                        "input": "3 1 2 5 6 -1 -1 -1 -1 -1 -1\n3",
                        "output": "2",
                        "explanation": "The tree structure is as follows:\n\n      3\n     / \\\n    1   2\n   / \\\n  5   6\n\nBurning starts at node 3 (time 0). At time 1, nodes 1 and 2 are burnt. At time 2, nodes 5 and 6 are burnt. Thus, the total time taken is 2 minutes."
                    },
                    {
                        "input": "1 2 3 -1 -1 4 5 -1 -1 -1 -1\n3",
                        "output": "2",
                        "explanation": "The tree structure is as follows:\n\n    1\n   / \\\n  2   3\n     / \\\n    4   5\n\nBurning starts at node 3 (time 0). At time 1, nodes 1, 4 and 5 are burnt. At time 2, the last remaining node 2 is burnt."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of creating an undirected graph and using BFS traversal?</p>",
            "<p>If the fire starts from a particular node, what will be the last node that burns?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity : O(N)\r\n    Space complexity : O(H)\r\n\r\n    where 'N' is the number of nodes in the tree \r\n    and 'H' is the height of the tree.\r\n\r\n*/\r\n\r\nclass Triplet\r\n{\r\npublic:\r\n    int max, above, below;\r\n\r\n    Triplet(int max, int above, int below)\r\n    {\r\n        this->max = max;\r\n        this->above = above;\r\n        this->below = below;\r\n    }\r\n};\r\n\r\nTriplet timeToBurnTreeHelper(BinaryTreeNode<int> *root, int start)\r\n{\r\n    if (root == NULL)\r\n    {\r\n        return Triplet(-1, -1, 0);\r\n    }\r\n\r\n    Triplet left = timeToBurnTreeHelper(root->left, start);\r\n    Triplet right = timeToBurnTreeHelper(root->right, start);\r\n\r\n    Triplet ans = Triplet(-1, -1, 0);\r\n\r\n    // Node is the starting node\r\n    if (root->data == start)\r\n    {\r\n        int below = max(left.below, right.below);\r\n        ans.max = below;\r\n        ans.above = 0;\r\n        ans.below = below;\r\n    }\r\n    \r\n    // Starting Node is in left subtree\r\n    else if (left.above != -1)\r\n    {\r\n        ans.max = max(left.max, max(left.below, left.above + right.below + 1));\r\n        ans.above = left.above + 1;\r\n        ans.below = left.below;\r\n    }\r\n    \r\n    // Starting Node is in right subtree\r\n    else if (right.above != -1)\r\n    {\r\n        ans.max = max(right.max, max(right.below, right.above + left.below + 1));\r\n        ans.above = right.above + 1;\r\n        ans.below = right.below;\r\n    }\r\n    \r\n    // Starting Node doesn't exist in the subtree\r\n    else\r\n    {\r\n        ans.max = -1;\r\n        ans.above = -1;\r\n        ans.below = max(left.below, right.below) + 1;\r\n    }\r\n\r\n    return ans;\r\n}\r\n\r\nint timeToBurnTree(BinaryTreeNode<int> *root, int start)\r\n{\r\n    Triplet ans = timeToBurnTreeHelper(root, start);\r\n    return ans.max;\r\n}\r\n\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N)\r\n    Space Complexity: O(H)\r\n\r\n    where 'N' is the total number of nodes and \r\n    'H' is the height of the given tree.\r\n*/\r\n\r\n// Following is the representation of Triplet Class\r\nclass Triplet\r\n{\r\n    int max, above, below;\r\n\r\n    Triplet(int max, int above, int below)\r\n    {\r\n        this.max = max;\r\n        this.above = above;\r\n        this.below = below;\r\n    }\r\n}\r\n\r\npublic class Solution\r\n{\r\npublic static int timeToBurnTree(BinaryTreeNode<Integer> root, int start)\r\n    {\r\n        Triplet ans = fun(root, start);\r\n\r\n        return ans.max;\r\n    }\r\n\r\npublic static Triplet fun(BinaryTreeNode<Integer> root, int start)\r\n    {\r\n        if (root == null)\r\n        {\r\n            return new Triplet(-1, -1, 0);\r\n        }\r\n\r\n        Triplet left = fun(root.left, start);\r\n        Triplet right = fun(root.right, start);\r\n\r\n        Triplet ans = new Triplet(-1, -1, 0);\r\n\r\n        // Node is the starting node\r\n        if (root.data == start)\r\n        {\r\n            int below = Math.max(left.below, right.below);\r\n            ans.max = below;\r\n            ans.above = 0;\r\n            ans.below = below;\r\n        }\r\n        \r\n        // Starting Node is in left subtree\r\n        else if (left.above != -1)\r\n        {\r\n            ans.max = Math.max(left.max, Math.max(left.below, left.above + right.below + 1));\r\n            ans.above = left.above + 1;\r\n            ans.below = left.below;\r\n        }\r\n        \r\n        // Starting Node is in right subtree\r\n        else if (right.above != -1)\r\n        {\r\n            ans.max = Math.max(right.max, Math.max(right.below, right.above + left.below + 1));\r\n            ans.above = right.above + 1;\r\n            ans.below = right.below;\r\n        }\r\n        \r\n        // Starting Node doesn't exist in the subtree\r\n        else\r\n        {\r\n            ans.max = -1;\r\n            ans.above = -1;\r\n            ans.below = Math.max(left.below, right.below) + 1;\r\n        }\r\n\r\n        return ans;\r\n    }\r\n}\r\n\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time complexity : O(N)\n    Space complexity : O(H)\n\n    where N is the number of nodes in the tree \n    and H is the height of the tree.\n\n    H is equal to log(N) for a balanced tree\n'''\nfrom sys import stdin,setrecursionlimit\nfrom queue import Queue\n\nsetrecursionlimit(10**7)\n\n# Binary tree node class for reference \nclass BinaryTreeNode :\n\tdef __init__(self, data) :\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\n\n\nclass Triplet :\n\n    def __init__(self, max, above, below) :\n\n        self.max = max\n        self.above = above\n        self.below = below\n    \n\ndef fun( root,start) :\n\n    if(root == None) :\n        \n        return Triplet(-1, -1, 0)\n    \n    \n    left = fun(root.left, start)\n    right = fun(root.right, start)\n\t\t\n    ans = Triplet(-1, -1, 0)\n\t\t\n    # Node is the starting node\n    if(root.data == start) :\n\n        below = max(left.below, right.below)\n        ans.max = below\n        ans.above = 0\n        ans.below = below\n\t\n    \n    # Starting Node is in left subtree\n    elif(left.above != -1) :\n\n        ans.max = max(left.max, max(left.below, left.above + right.below + 1))\n        ans.above = left.above + 1\n        ans.below = left.below\n    \n    # Starting Node is in right subtree\n    elif(right.above != -1) :\n\n        ans.max = max(right.max, max(right.below, right.above + left.below + 1))\n        ans.above = right.above + 1\n        ans.below = right.below\n    \n    # Starting Node doesn't exist in the subtree\n    else :\n        ans.max = -1\n        ans.above = -1\n        ans.below = max(left.below, right.below) + 1\n    \n    return ans\n\t\ndef timeToBurnTree(root, start):\n\n    ans = fun(root, start)\n        \n    return ans.max\n\n\n# Fast input\ndef takeInput() :\n\t\n    arr = list(map(int, stdin.readline().strip().split(\" \")))\n\n    rootData = arr[0]\n\n    n = len(arr)\n\n    if(rootData == -1) :\n        start = int(input().strip())\n        return None, start\n\n    root = BinaryTreeNode(rootData)\n    q = Queue()\n    q.put(root)\n    index = 1\n    while(q.qsize() > 0) :\n        currentNode = q.get()  \n        \n        leftChild = arr[index]\n        \n        if(leftChild != -1) :\n            leftNode =  BinaryTreeNode(leftChild)  \n            currentNode.left = leftNode  \n            q.put(leftNode)  \n        \n        index += 1\n        rightChild = arr[index]\n        \n        if(rightChild != -1) :\n            rightNode = BinaryTreeNode(rightChild)\n            currentNode .right = rightNode  \n            q.put(rightNode)  \n\n        index += 1\n\n    start = int(input().strip())\n\n    return root, start\n\n#main\n\nroot, start = takeInput()\n\nprint(timeToBurnTree(root, start))",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}