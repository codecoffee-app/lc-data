{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10125,
            "title": "Tom and Jerry",
            "titleSlug": "tom-and-jerry_1169964",
            "content": "<h4 id=\"tom-and-jerry-are-playing-a-game-in-this-game-they-are-given-an-undirected-graph-of-n-vertices-labelled-from-0-to-n-1-and-m-edges-they-will-take-alternate-turns-starting-with-jerry\">Tom and Jerry are playing a game. In this game, they are given an undirected graph of \u2018N\u2019 vertices labelled from 0 to &#39;N&#39; - 1 and \u2018M\u2019 edges. They will take alternate turns starting with Jerry.</h4>\n\n<h4 id=\"at-the-beginning-jerry-is-at-node-1-tom-is-at-node-2-and-there-is-a-hole-at-node-0-in-each-turn-a-player-can-move-to-any-other-node-which-has-a-direct-edge-with-the-node-in-which-they-are-currently-present-with-a-condition-that-tom-cannot-move-to-node-0\">At the beginning, Jerry is at node 1, Tom is at node 2 and there is a hole at node 0. In each turn, a player can move to any other node which has a direct edge with the node in which they are currently present, with a condition that Tom cannot move to node 0.</h4>\n\n<pre><code>Now the game can end in three ways :\n\n1) If ever Tom occupies the same node as Jerry, Tom wins.\n\n2) If ever Jerry reaches the Hole, Jerry wins.\n\n3) If ever a position is repeated, the game is a draw.\n</code></pre>\n\n<h4 id=\"your-task-is-to-find-who-wins-the-game-or-is-there-a-draw-between-the-two-if-both-the-players-play-optimally\">Your task is to find who wins the game or is there a draw between the two if both the players play optimally.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000233_1613364709_Untitled%20Diagram(2).png\" alt=\"Example\"></p>\n\n<pre><code>In the above graph, Tom has only one choice to go to node 3. Jerry also has only one option to go to node 0. And the first turn will be taken by Jerry so it will go to node 0 and hence win the game. So we will return 1.\n</code></pre>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018M\u2019 denoting the number of vertices and the number of edges in the undirected graph.\n\nThe next \u2018M\u2019 lines each contain two space-separated integers \u2018u\u2019 and \u2018v\u2019, denoting an edge from vertex \u2018u\u2019 to vertex \u2018v\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output format:</h4>\n\n<pre><code>For each test case, return 0 if the game draws, 1 if Jerry wins the game, or 2 if Tom wins the game.\n\nOutput for each test case should be in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 50\n1 &lt;= M &lt;= 300\n1 &lt;= u, v &lt;= N\n\nTime Limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>1\n5 5\n0 3\n3 2\n3 1\n4 1 \n4 2\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>TOM\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h4>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000232_1613364531_cat_wins.png\" alt=\"Example\"></p>\n\n<pre><code>So we can see from the graph, in the first step Jerry has two options, node 4 and 3. But at the same time in the first step, Tom also has two options node 4 and 3, so whatever node Jerry chooses, Tom will always catch him.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n6 6\n5 3\n1 5\n5 4\n4 2\n2 3\n3 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>DRAW\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-2\">Explanation for Sample Output 2:</h4>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/asset_0000000000000230_1613364452_cat_mouse_draw.png\" alt=\"Example\"></p>\n\n<pre><code>So we can see from the graph, in the first step Jerry has only one option node 5. Now Tom has two options node 4 and node 3 so playing optimally Tom will choose node 3 because if Tom chooses node 4 then in the next two turns Jerry will reach node 0. So now Tom will keep on walking between node 2 and node 3 and at the same time Jerry will keep on walking between node 5 and node 4. Hence game will result in a draw.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Tom and Jerry are playing a game on an undirected graph. Jerry starts at node 1, Tom starts at node 2, and there's a hole at node 0. Players alternate turns, with Jerry going first. In each turn, a player moves to a neighboring node. Tom cannot move to node 0. Tom wins if he catches Jerry (occupies the same node). Jerry wins if he reaches the hole (node 0). The game draws if a position (Jerry's node, Tom's node) is repeated. Given the graph's adjacency list, number of vertices and edges, determine the winner assuming both players play optimally. Return 0 for a draw, 1 for Jerry's win, and 2 for Tom's win.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 50",
                    "1 <= M <= 300"
                ],
                "testcases": [
                    {
                        "input": "graph=[[3],[3,4],[3,4],[0,1,2],[1,2]], vertices=5, edges=5",
                        "output": "2",
                        "explanation": "So we can see from the graph, in the first step Jerry has two options, node 4 and 3. But at the same time in the first step, Tom also has two options node 4 and 3, so whatever node Jerry chooses, Tom will always catch him."
                    },
                    {
                        "input": "graph=[[3],[5],[4,3],[5,2,0],[5,2],[3,1,4]], vertices=6, edges=6",
                        "output": "0",
                        "explanation": "So we can see from the graph, in the first step Jerry has only one option node 5. Now Tom has two options node 4 and node 3 so playing optimally Tom will choose node 3 because if Tom chooses node 4 then in the next two turns Jerry will reach node 0. So now Tom will keep on walking between node 2 and node 3 and at the same time Jerry will keep on walking between node 5 and node 4. Hence game will result in a draw."
                    },
                    {
                        "input": "graph=[[1,2],[0],[0]], vertices=3, edges=2",
                        "output": "1",
                        "explanation": "Jerry moves to 0 in first move and wins."
                    },
                    {
                        "input": "graph=[[1],[0,2],[1]], vertices=3, edges=3",
                        "output": "2",
                        "explanation": "Jerry goes to 2, Tom goes to 1. Jerry goes to 0, Tom goes to 0. Tom Wins."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about dynamic programming by storing the previously obtained results and saving extra time?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}