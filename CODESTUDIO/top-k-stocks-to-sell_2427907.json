{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15246,
            "title": "Top K Stocks to Sell",
            "titleSlug": "top-k-stocks-to-sell_2427907",
            "content": "<h4 id=\"it-was-a-busy-day-at-ninjas-stock-exchange-as-stock-prices-fluctuated-throughout-the-day-trading-isnt-ninjas-cup-of-tea-so-he-appointed-you-to-help-him\">It was a busy day at Ninja&#39;s Stock Exchange as stock prices fluctuated throughout the day. Trading isn&#39;t Ninja&#39;s cup of tea, so he appointed you to help him.</h4>\n\n<h4 id=\"you-are-given-q-queries-each-query-of-type-1-is-an-update-query-in-which-you-are-given-name-price-denoting-the-name-of-the-stock-that-needs-to-be-updated-with-the-given-price-for-every-query-of-type-2-you-need-to-find-the-maximum-money-that-can-be-collected-by-selling-the-top-k-stocks-at-that-particular-moment-of-time\">You are given &#39;Q&#39; queries, each query of type-1 is an update query in which you are given \u2018{Name, Price}\u2019 denoting the name of the stock that needs to be updated with the given price, for every query of type-2 you need to find the maximum money that can be collected by selling the top &#39;K&#39; stocks at that particular moment of time.</h4>\n\n<h4 id=\"the-closing-price-of-a-particular-stock-is-equal-to-its-last-updated-price-find-the-total-money-that-can-be-collected-after-selling-at-most-k-stocks-for-every-query-of-type-2\">The closing price of a particular stock is equal to its last updated price. Find the total money that can be collected after selling at most \u2018K\u2019 stocks for every query of type-2.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Then given queries are in the form of a stream (they are sequential), so they should be processed in the given order. That is: you should not solve them offline by iterating through the back or by iterating in any other order.\n</code></pre>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If N = 4 , K = 2 and Queries = { 1, \u201ca,\u201d 30 }, { 1, \u201cb,\u201d 20 } , { 1, \u201ca,\u201d 10 } , { 1, \u201cc,\u201d 100 } , { 2 }\n\nThere is a query of type-2 after processing four queries of type-1.\nThen we can sell in the possible ways: \nSell \u201ca\u201d and \u201cb\u201d and collect 10 + 20 = 30.\nSell \u201cb\u201d and \u201cc\u201d and collect 20 + 100 = 120.\nSell \u201ca\u201d and \u201cc\u201d and collect 10 + 100 = 110.\n\nTherefore we can collect a maximum of 120. Note that \u201ca\u201d is being sold at 10 and not 30 because the last updated price in the stream for \u201ca\u201d was 10.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains two integers \u2018Q\u2019 and \u2018K\u2019 denoting the number of queries and the maximum number of stocks that can be sold respectively.\n\nThe next Q lines each contain one integer &quot;QT&quot; denoting the query type, each query of type-1 is followed by a string \u2018Name\u2019 and an integer \u2018Price\u2019 denoting the stock name and its updated price\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the maximum money that can be collected for each query of type-2 in separate lines.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 T \u2264 10      \n1 \u2264 Q, K \u2264 100\n1 \u2264 Name.length \u2264 10, Name contains only lowercase English alphabets\n1 \u2264 Price \u2264 10^6\nThere is at least one query of type-2\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5 2\n1 a 30\n1 b 20\n1 a 10 \n1 c 100\n2\n6 5\n1 code 10\n2\n1 sleep 10\n2\n1 repeat 10\n2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>120\n10\n20\n30\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For test case 1 : \nWe will return 120 because there is a query of type-2 after processing four queries of type-1, we can sell in the possible ways: \nSell \u201ca\u201d and \u201cb\u201d and collect 10 + 20 = 30.\nSell \u201cb\u201d and \u201cc\u201d and collect 20 + 100 = 120.\nSell \u201ca\u201d and \u201cc\u201d and collect 10 + 100 = 110.\nClearly selling \u201cb\u201d and \u201cc\u201d yields us 120 amount of money.\n\n\nFor test case 2 : \nWe will return {10, 20, 30} because:\nAfter making one stock price is updated, we have a query of type-2 and we can only sell one stock for a total price equal to 10, further price of another stock is updated and again we have a query of type-2, now we can sell both the stocks for a total cost of 10 + 10 = 20, we again have a stock price update for another stock and finally have a query of type-2, in the final query we can sell all the three stocks for a total amount equal to 10 + 10 + 10 = 30.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n7 3 \n2\n1 cat 100\n1 bh 200\n1 bh 300\n1 cat 500\n1 bh 100\n2\n2 1\n1 cn 100\n2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0\n600\n100\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja wants your help with stock trading! You'll receive a series of queries to process in order.  Each query will be one of two types:\n\n*   **Type 1 (Update):** Given a stock name and a price, update the closing price of that stock to the given price.\n*   **Type 2 (Calculate):** Given a value 'K', find the maximum amount of money Ninja can collect by selling at most 'K' of the stocks at their current closing prices.",
                "constraints": [
                    "1 \u2264 T \u2264 10",
                    "1 \u2264 Q, K \u2264 100",
                    "1 \u2264 Name.length \u2264 10 (Name contains only lowercase English alphabets)",
                    "1 \u2264 Price \u2264 10^6",
                    "There is at least one query of type-2",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5 2\n1 a 30\n1 b 20\n1 a 10 \n1 c 100\n2",
                        "output": "120",
                        "explanation": "After the updates, the stock prices are a=10, b=20, and c=100. We want to sell at most K=2 stocks.  The possible combinations are:\n- a and b: 10 + 20 = 30\n- b and c: 20 + 100 = 120\n- a and c: 10 + 100 = 110\nThe maximum is 120."
                    },
                    {
                        "input": "6 5\n1 code 10\n2\n1 sleep 10\n2\n1 repeat 10\n2",
                        "output": "10\n20\n30",
                        "explanation": "Initially, the stock 'code' is updated to 10.  The first query of type 2 asks for the max money with K=5.  Only 'code' exists, so the max money is 10.\nNext, 'sleep' is updated to 10.  The second query of type 2 asks for the max money with K=5. Now 'code' and 'sleep' exist with prices 10 and 10. Max money is 10+10 = 20.\nFinally, 'repeat' is updated to 10. The third query of type 2 asks for the max money with K=5. Now 'code', 'sleep', and 'repeat' exist with prices 10, 10, and 10. Max money is 10+10+10 = 30."
                    },
                    {
                        "input": "7 3 \n2\n1 cat 100\n1 bh 200\n1 bh 300\n1 cat 500\n1 bh 100\n2\n2 1\n1 cn 100\n2",
                        "output": "0\n600\n100",
                        "explanation": "The first query of type 2 occurs before any stock prices have been set. Thus the maximum collectable money is 0.\nAfter the updates, the stock prices are cat = 500 and bh = 100. We want to sell at most K=3 stocks, but we only have 2. 500 + 100 = 600.\nStocks are cat = 500 and bh = 100. Selling at most K=1 stocks will give max 500\ncat=500 bh=100 cn=100. selling at most k=1, will give cat=500 cn=100 bh=100. The highest is cat=500, but the provided answer is 100. This seems incorrect according to the description"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>You will need at least two data structures to easily stimulate the stock-updates, just a single hash-map won't be sufficient!</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}