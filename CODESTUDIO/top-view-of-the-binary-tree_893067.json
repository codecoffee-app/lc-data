{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8575,
            "title": "Top View of the Binary Tree",
            "titleSlug": "top-view-of-the-binary-tree_893067",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-integers-you-are-supposed-to-return-the-top-view-of-the-given-binary-tree\">You have been given a Binary Tree of integers. You are supposed to return the top view of the given binary tree.</h4>\n\n<h4 id=\"top-view-of-the-binary-tree-is-the-set-of-nodes-which-are-visible-when-we-see-the-tree-from-the-top\">Top view of the binary tree is the set of nodes which are visible when we see the tree from the top.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>For the given binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/top_view-5246.jpg\" alt=\"Example\"></p>\n\n<pre><code>The top view of the tree will be {10, 4, 2, 1, 3, 6}.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases are as follows.\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/btree-5038.png\" alt=\"Example\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Print all the elements of the top view of the given tree separated by a single space. And the top view nodes should be printed from left to right. \n\nFor each test case, print the output in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n0 &lt;= N &lt;= 3000\n0 &lt;= data &lt;= 10^6 and data != -1\n\nWhere \u2018T\u2019 is the number of test cases, and \u2018N\u2019 is the total number of nodes in the binary tree, and \u201cdata\u201d is the value of the binary tree node.\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n1 2 3 4 5 6 7 8 9 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n1 2 3 -1 -1 -1 -1\n1 3 -1 2 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>8 4 2 1 3 7\n2 1 3\n2 3 1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code> For the first test case, \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/topview-5245.jpg\" alt=\"Example\"></p>\n\n<pre><code>From left to right, the top view of the tree will be {8,4,2,1,3,7}. Where 9,5 and 6 will be hidden when we see from the top of the tree.\n\nFor the second test case, from left to right, the top view of the tree will be {2,1,3}. There is nothing to hide.\n\nFor the third test case, from left to right, the top view of the tree will be {3,2,1}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n2 7 5 2 6 -1 9 -1 -1 5 11 4 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4 2 1 3 6\n2 7 2 5 9\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code> For the first test case,  from left to right, the top view of the tree will be {4,2,1,3,6}. Where 7 and 5 will be hidden when we see from the top of the tree.\n\nFor the second test case, from left to right, the top view of the tree will be {2,7,2,5,9}. Where 5,6,11 and 4 will be hidden when we see from the top of the tree.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of integers, return its top view. The top view of a binary tree consists of the nodes visible when the tree is viewed from directly above. Nodes are considered visible if they are the first node encountered at their horizontal distance from the root.  The top view nodes should be printed from left to right.",
                "constraints": [
                    "1 <= T <= 100 (T is the number of test cases)",
                    "0 <= N <= 3000 (N is the total number of nodes in the binary tree)",
                    "0 <= data <= 10^6 and data != -1 (data is the value of the binary tree node)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 4 5 6 7 8 9 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n1 2 3 -1 -1 -1 -1\n1 3 -1 2 -1 -1 -1",
                        "output": "8 4 2 1 3 7\n2 1 3\n2 3 1",
                        "explanation": "Test Case 1: The top view is {8, 4, 2, 1, 3, 7}. Nodes 9, 5, and 6 are hidden.\nTest Case 2: The top view is {2, 1, 3}. No nodes are hidden.\nTest Case 3: The top view is {2, 3, 1}."
                    },
                    {
                        "input": "2\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n2 7 5 2 6 -1 9 -1 -1 5 11 4 -1 -1 -1 -1 -1 -1 -1",
                        "output": "4 2 1 3 6\n2 7 2 5 9",
                        "explanation": "Test Case 1: The top view is {4, 2, 1, 3, 6}. Nodes 7 and 5 are hidden.\nTest Case 2: The top view is {2, 7, 2, 5, 9}. Nodes 5, 6, 11 and 4 are hidden."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>How will a node be hidden by another node?</p>",
            "<p>Can you think about using level order traversal?</p>",
            "<p>Can you think about a more time-efficient approach?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}