{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9340,
            "title": "Topological Sort",
            "titleSlug": "topological-sort_982938",
            "content": "<h4 id=\"a-directed-acyclic-graph-dag-is-a-directed-graph-that-contains-no-cycles\">A Directed Acyclic Graph (DAG) is a directed graph that contains no cycles.</h4>\n\n<h4 id=\"topological-sorting-of-dag-is-a-linear-ordering-of-vertices-such-that-for-every-directed-edge-from-vertex-u-to-vertex-v-vertex-u-comes-before-v-in-the-ordering-topological-sorting-for-a-graph-is-not-possible-if-the-graph-is-not-a-dag\">Topological Sorting of  DAG is a linear ordering of vertices such that for every directed edge from vertex \u2018u\u2019 to vertex \u2018v\u2019, vertex \u2018u\u2019 comes before \u2018v\u2019 in the ordering. Topological Sorting for a graph is not possible if the graph is not a DAG.</h4>\n\n<h4 id=\"given-a-dag-consisting-of-v-vertices-and-e-edges-you-need-to-find-out-any-topological-sorting-of-this-dag-return-an-array-of-size-v-representing-the-topological-sort-of-the-vertices-of-the-given-dag\">Given a DAG consisting of \u2018V\u2019 vertices and \u2018E\u2019 edges, you need to find out any topological sorting of this DAG.  Return an array of size \u2018V\u2019  representing the topological sort of the vertices of the given DAG.</h4>\n\n<h4 id=\"for-example-consider-the-dag-shown-in-the-picture\">For example,  Consider the DAG shown in the picture.</h4>\n\n<p><img src=\"https://files.codingninjas.in/eg-6753.png\" alt=\"alt tex\"></p>\n\n<h4 id=\"in-this-graph-there-are-directed-edges-from-0-to-1-and-0-to-3-so-0-should-come-before-1-and-3-also-there-are-directed-edges-from-1-to-2-and-3-to-2-so-1-and-3-should-come-before-2\">In this graph, there are directed edges from 0 to 1 and 0 to 3, so 0 should come before 1 and 3. Also, there are directed edges from 1 to 2 and 3 to 2 so 1 and 3 should come before 2.</h4>\n\n<h4 id=\"so-the-topological-sorting-of-this-dag-is-0-1-3-2\">So, The topological sorting of this DAG is  {0 1 3 2}.</h4>\n\n<h4 id=\"note-that-there-are-multiple-topological-sortings-possible-for-a-dag-for-the-graph-given-above-one-another-topological-sorting-is-0-3-1-2\">Note that there are multiple topological sortings possible for a DAG. For the graph given above one another topological sorting is: {0, 3, 1, 2}</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. It is guaranteed that the given graph is DAG.\n2. There will be no multiple edges and self-loops in the given DAG.\n3. There can be multiple correct solutions, you can find any one of them. \n4. Don\u2019t print anything, just return an array representing the topological sort of the vertices of the given DAG.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. The description of  \u2018T\u2019 test cases follows.\n\nThe first line of each test case contains two space-separated integers \u2018V\u2019, \u2018E\u2019, representing the number vertices and edges in the graph respectively.\n\nThen \u2018E\u2019 lines follow,  each containing 2 space-separated integers \u2018u\u2019, \u2018v\u2019 representing that there is a directed edge from vertex \u2018u\u2019 to vertex \u2018v\u2019\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return an array representing the topological sort of the vertices of the given DAG.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= V &lt;= 10^4\n0 &lt;= E &lt;= 10^4\n0 &lt;= u, v &lt; V \n\nWhere \u2018T\u2019 is the total number of test cases, \u2018V\u2019 is the number of vertices, \u2018E\u2019 is the number of edges, and \u2018u\u2019 and \u2018v\u2019 both represent the vertex of a given graph.\n\nTime limit: 2 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 1\n1 0\n3 2\n0 1\n0 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 0\n0 2 1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nThe number of vertices \u2018V\u2019 = 2 and number of edges \u2018E\u2019 = 1.\nThe graph is shown in the picture: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/eg1-6752.png\" alt=\"alt text\"> </p>\n\n<pre><code>The topological sorting of this graph should be {1, 0}  as there is a directed edge from vertex 1 to vertex 0, thus 1 should come before 0 according to the given definition of topological sorting.\n\nTest case 2:\nThe number of vertices \u2018V\u2019 = 3 and number of edges \u2018E\u2019 = 2.\nThe graph is shown in the picture:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/eg2-6751.png\" alt=\"alt text\"></p>\n\n<pre><code>As there are two directed edges starting from 0, so 0 should come before 1 and 2 in topological sorting. \nThus the topological sorting of this graph should be {0, 2, 1} or {0, 1, 2}\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1 0\n4 4\n0 1\n0 3\n1 2\n3 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0\n0 1 3 2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>Test case 1:   \nThere is only a single vertex in the graph that is 0, so its topological sort will be {0}.\n\nTest case 2:\nSee problem statement for its explanation\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 177,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Directed Acyclic Graph (DAG) with \u2018V\u2019 vertices and \u2018E\u2019 edges, find a topological sort of the vertices. A topological sort is a linear ordering of vertices such that for every directed edge from vertex \u2018u\u2019 to vertex \u2018v\u2019, vertex \u2018u\u2019 appears before \u2018v\u2019 in the ordering. Return an array of size \u2018V\u2019 representing the topological sort of the vertices.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= V <= 10^4",
                    "0 <= E <= 10^4",
                    "0 <= u, v < V",
                    "The given graph is a DAG.",
                    "There are no multiple edges and self-loops in the graph.",
                    "There can be multiple correct solutions, return any one of them."
                ],
                "testcases": [
                    {
                        "input": "2\n2 1\n1 0\n3 2\n0 1\n0 2",
                        "output": "1 0\n0 2 1",
                        "explanation": "Test case 1: A DAG with 2 vertices and 1 edge (1 -> 0).  A valid topological sort is {1, 0}.\nTest case 2: A DAG with 3 vertices and 2 edges (0 -> 1, 0 -> 2). A valid topological sort is {0, 2, 1} or {0, 1, 2}."
                    },
                    {
                        "input": "2\n1 0\n4 4\n0 1\n0 3\n1 2\n3 2",
                        "output": "0\n0 1 3 2",
                        "explanation": "Test case 1: A DAG with 1 vertex and no edges. The topological sort is {0}.\nTest case 2: A DAG with 4 vertices and 4 edges (0 -> 1, 0 -> 3, 1 -> 2, 3 -> 2). A valid topological sort is {0, 1, 3, 2}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you modify the Depth First Search Algorithm to find topological sorting of DAG?</p>",
            "<p>A DAG has at least one vertex with the in-degree 0 and one vertex with the out-degree 0.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity: O(V+E)\r\n    Space complexity: O(V)\r\n    \r\n    Where V is the number of vertices and E is the number of edges.\r\n*/\r\n\r\n#include <queue>\r\n\r\nvector<int> topologicalSort(vector<vector<int>> &edges, int v, int e) {\r\n    // Creating adjacency list.\r\n    vector<vector<int>> adj(v);\r\n    for(int i = 0; i < e; i++) {\r\n        adj[edges[i][0]].push_back(edges[i][1]);\r\n    } \r\n    // Calculaing indegree of each vertex.\r\n    vector<int> indegree(v);\r\n    for(auto edge : edges) {\r\n        indegree[edge[1]]++;\r\n    }\r\n    // Push all vertices of indegree 0 in queue.\r\n    queue<int> que;\r\n    for(int i = 0; i < v; i++) {\r\n        if(indegree[i] == 0) {\r\n            que.push(i);\r\n        }\r\n    }\r\n    vector<int> result; // It will store topological sort of the given graph.\r\n    // Finding topologial sorting\r\n    while(!que.empty()) {\r\n        int src = que.front();\r\n        que.pop();\r\n        result.push_back(src);\r\n        for(int node : adj[src]) {\r\n            indegree[node]--;\r\n            if(indegree[node] == 0) {\r\n                que.push(node);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time complexity: O(V+E)\r\n    Space complexity: O(V)\r\n    \r\n    Where \u2018V\u2019 is the number of vertices and \u2018E\u2019 is the number of edges.\r\n\r\n\"\"\"\r\n\r\nfrom collections import defaultdict\r\n\r\ndef topologicalSort(edges, v, e):\r\n    adj = defaultdict(list)\r\n    for i in range(0, e):\r\n        adj[edges[i][0]].append(edges[i][1])\r\n    # Calculaing indegree of each vertex.\r\n    indegree = [0] * v\r\n    for i in range(0, e):\r\n            indegree[edges[i][1]] += 1\r\n    # Push all vertices of indegree 0 in queue.\r\n    que = []\r\n\r\n    for i in range(0, v):\r\n        if indegree[i] == 0:\r\n            que.append(i)\r\n    # It will store topological sort of the given graph.\r\n    result = []\r\n    # Finding topologial sorting\r\n    while(len(que) != 0):\r\n        src = que.pop(0)\r\n        result.append(src)\r\n        for node in adj[src]:\r\n            indegree[node] -= 1\r\n            if indegree[node] == 0:\r\n                que.append(node)\r\n\r\n    return result",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(V+E)\r\n    Space Complexity: O(V)\r\n    \r\n    Where 'V' is the number of vertices and 'E' is the number of edges\r\n*/\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Solution \r\n{\r\n    public static ArrayList<Integer> topologicalSort(ArrayList<ArrayList<Integer>> edges, int v, int e) \r\n    {\r\n        // Creating adjacency list\r\n        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();\r\n        for(int i = 0; i < v; i++) \r\n        {\r\n            adj.add(new ArrayList<Integer>());\r\n        }\r\n        for(int i=0 ; i<edges.size() ; i++)\r\n        {\r\n            adj.get(edges.get(i).get(0)).add(edges.get(i).get(1));\r\n        }\r\n\r\n        // Calculaing indegree of each vertex\r\n        int [] indegree = new int[v];\r\n        for (int i = 0; i < v; i++) \r\n        {\r\n            ArrayList<Integer> temp = (ArrayList<Integer>)adj.get(i);\r\n            for (int node : temp) \r\n            {\r\n                indegree[node]++;\r\n            }\r\n        }\r\n        \r\n        // Push all vertices of indegree 0 in queue\r\n        Queue<Integer> que= new LinkedList<Integer>();\r\n        for(int i = 0; i < v; i++) \r\n        {\r\n            if(indegree[i] == 0) \r\n            {\r\n               que.add(i);\r\n            }\r\n        }\r\n        \r\n        // It will store topological sort of the given graph\r\n        ArrayList<Integer> result = new ArrayList<>();\r\n    \r\n        // Finding topologial sorting\r\n        while(!que.isEmpty()) \r\n        {\r\n            int src = que.poll();\r\n            result.add(src);\r\n        \r\n            for(int node : adj.get(src)) \r\n            {\r\n               indegree[node]--;\r\n               if(indegree[node] == 0) \r\n                {\r\n                   que.add(node);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}