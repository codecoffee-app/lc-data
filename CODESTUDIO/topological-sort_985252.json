{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9390,
            "title": "Topological Sort",
            "titleSlug": "topological-sort_985252",
            "content": "<h4 id=\"you-are-given-a-directed-acyclic-graph-your-task-is-to-find-any-topological-sorting-of-the-graph\">You are given a directed acyclic graph. Your task is to find any topological sorting of the graph.</h4>\n\n<h4 id=\"a-directed-acyclic-graph-is-a-directed-graph-with-no-directed-cycles\">A directed acyclic graph is a directed graph with no directed cycles.</h4>\n\n<h4 id=\"topological-sorting-for-directed-acyclic-graph-dag-is-a-linear-ordering-of-vertices-such-that-for-every-directed-edge-from-u-to-v-vertex-u-comes-before-v-in-the-ordering\">Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge from u to v, vertex u comes before v in the ordering.</h4>\n\n<h4 id=\"for-example\">For example-</h4>\n\n<pre><code>For the given DAG-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image2-6800.png\" alt=\"\"></p>\n\n<pre><code>One of the possible topological sort will be-\n1  2  3\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first line of each test case contains two single space-separated integers \u2018N\u2019, \u2018M\u2019, denoting the number of nodes and the number of edges respectively.\n\nThe next \u2018M\u2019 lines of each test case contain two single space-separated integers \u2018U\u2019, \u2018V\u2019 each denoting there is a directed edge from node \u2018U\u2019 to node \u2018V\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line of each test case will contain N single space-separated integers representing the topological sorting of the graph. You can print any valid sorting.\n\nPrint the output of each test case in a separate line.\n\nNote:\nYou are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n0 &lt;= M &lt;= min(5000, (N*(N-1))/2)\n1 &lt;= U, V &lt;= N and U != V \n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 1\n1 2\n4 5\n1 2\n1 3\n2 4\n3 4\n1 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 2 3\n1 2 3 4\n</code></pre>\n\n<h4 id=\"explanation-for-sample-1\">Explanation for Sample 1:</h4>\n\n<pre><code>The DAG corresponding to the first test case will be-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image1-6801.png\" alt=\"\"></p>\n\n<pre><code>We can clearly see that one of the possible topological sorting will be 1 2 3.\n\nThe DAG corresponding to the second test case will be-\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/image3-6799.png\" alt=\"\"></p>\n\n<pre><code>We can clearly see that one of the possible topological sorting will be 1 2 3 4.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n5 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5 4 3 2 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed acyclic graph (DAG), find any topological sorting of the graph. A topological sorting for a DAG is a linear ordering of vertices such that for every directed edge from u to v, vertex u comes before v in the ordering.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 5000",
                    "0 <= M <= min(5000, (N*(N-1))/2)",
                    "1 <= U, V <= N and U != V",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "3 1\n1 2\n4 5\n1 2\n1 3\n2 4\n3 4\n1 4",
                        "output": "1 2 3\n1 2 3 4",
                        "explanation": "For the first test case, the graph has 3 nodes and one edge from 1 to 2. A possible topological sort is 1 2 3.  For the second test case, the graph has 4 nodes and 5 edges. A possible topological sort is 1 2 3 4."
                    },
                    {
                        "input": "5 0",
                        "output": "5 4 3 2 1",
                        "explanation": "In this test case, the graph has 5 nodes and no edges. Any reverse ordering of the nodes is a valid topological sort."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we use DFS traversal to get the topological sort?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}