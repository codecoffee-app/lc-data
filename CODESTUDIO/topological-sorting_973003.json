{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8987,
            "title": "Topological Sorting",
            "titleSlug": "topological-sorting_973003",
            "content": "<h4 id=\"given-a-dag-direct-acyclic-graph-return-the-topological-sorting-of-a-given-graph\">Given a DAG(direct acyclic graph), return the Topological Sorting of a given graph.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer T, the number of test cases.\nThe first line of each test case contains two single space-separated integers V, and E.\nFrom the second line onwards of each test case, the next &#39;E&#39; lines will denote the edges of the graph where every edge is defined by two single space-separated integers &#39;a&#39; and &#39;b&#39;, which signifies an edge from vertex &#39;a\u2019 to vertex &#39;b&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, the output will be &quot;Correct&quot; if the topological sorting returned is correct else it will be &quot;Incorrect&quot;.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= V &lt;= 1000\n0 &lt;= E &lt;= 3000\n0 &lt;= U, V &lt;= V-1\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n5 4\n0 2\n1 2\n3 1\n0 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>Correct\n</code></pre>\n\n<h5 id=\"sample-output-1-explanation\">Sample Output 1 Explanation:</h5>\n\n<pre><code>One correct sort order is : 3 1 0 4 2.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 48,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a directed acyclic graph (DAG) represented by an adjacency list, determine a topological ordering of the vertices. A topological ordering is a linear ordering of vertices such that for every directed edge from vertex 'a' to vertex 'b', vertex 'a' comes before vertex 'b' in the ordering.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= V <= 1000",
                    "0 <= E <= 3000"
                ],
                "testcases": [
                    {
                        "input": "nodes = 5, edges = 4, graph = [[0, 2], [1, 2], [3, 1], [0, 4]]",
                        "output": "Correct",
                        "explanation": "One possible correct topological sort is: 3 1 0 4 2.  The important thing is that for each edge (u, v), u appears before v in the output."
                    },
                    {
                        "input": "nodes = 6, edges = 6, graph = [[5, 2], [5, 0], [4, 0], [4, 1], [2, 3], [3, 1]]",
                        "output": "Correct",
                        "explanation": "A valid topological sort could be: 5 4 2 3 1 0.  Note that other orderings are also possible as long as dependency constraints are maintained."
                    },
                    {
                        "input": "nodes = 3, edges = 3, graph = [[0, 1], [1, 2], [0, 2]]",
                        "output": "Correct",
                        "explanation": "One valid topological sort is 0 1 2."
                    },
                    {
                        "input": "nodes = 4, edges = 0, graph = []",
                        "output": "Correct",
                        "explanation": "With no edges, any permutation of nodes is a valid topological sort.  For example, 0 1 2 3 is correct."
                    },
                    {
                        "input": "nodes = 7, edges = 7, graph = [[0, 1], [0, 2], [1, 3], [2, 3], [3, 4], [3, 5], [4, 6]]",
                        "output": "Correct",
                        "explanation": "One valid topological sort could be: 0 1 2 3 5 4 6. Note that 5 can come before 4 and vice-versa since there is no edge linking them. "
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}