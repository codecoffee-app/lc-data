{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8572,
            "title": "Total Number of BSTs using array elements as root node",
            "titleSlug": "total-number-of-bsts-using-array-elements-as-root-node_893064",
            "content": "<h4 id=\"you-are-given-a-sequence-array-arr-of-n-integers-for-each-arr-i-where-0-i-n-your-task-is-to-find-the-number-of-binary-search-trees-bst-possible-with-elements-of-sequence-arr-as-nodes-and-arr-i-as-the-root-node\">You are given a sequence array &#39;ARR&#39; of \u2018N\u2019 integers. For each ARR[i] where 0 &lt;= \u2018i\u2019 &lt; &#39;N&#39; , your task is to find the number of Binary search trees(BST) possible with elements of sequence ARR as nodes and ARR[i] as the root node.</h4>\n\n<h4 id=\"the-answer-could-be-very-large-so-output-your-answer-modulo-10-9-7-also-use-modular-division-when-required\">The answer could be very large,so output your answer modulo (10 ^ 9 + 7). Also, use modular division when required.</h4>\n\n<h4 id=\"for-example\">For Example:</h4>\n\n<pre><code>Let the sequence be 1, 4, 5, 6, 7 then return 14 5 4 5 14 i.e when 1 is the root node the number of BSTs possible is 14. Similarly, when 4 is the root node the number of BST\u2019s possible is 5. In a similar way, we calculate the number of BST\u2019s possible for the remaining elements of the sequence.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. Consider 0 based Indexing.\n\n2. A Binary Search Tree is a special kind of tree in which each node of the tree has at most 2 children and for every node, the value of nodes of the left subtree of any node is less than the current node and value of nodes of the right subtree are greater than the current node. \n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the number of elements in the given sequence. \n\nThe next line contains \u2018N\u2019 space-separated integers denoting the sequence \u2018ARR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing &#39;N&#39; space-separated which represents the number of BST\u2019s that can be formed using each element of the given sequence as the root node. \n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10 ^ 3\n- 10 ^ 9 &lt;= ARR[i] &lt;= 10 ^ 9\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 denotes the number of elements in the sequence.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3\n1 2 3\n3\n20 30 10\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 1 2\n1 2 2\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for sample output 1:</h4>\n\n<pre><code>Test case 1:\n\nWe will have the following trees :\n\nWith 1 as root node:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tc1-5941.jpg\" alt=\"TC-1\"></p>\n\n<pre><code>The above 2 BST are possible.\n\nWith 2 as the  root node :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tc2-5942.jpg\" alt=\"TC-2\"></p>\n\n<pre><code>Only this one BST is possible.\n\nWith 3 as the root node:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tc3-5943.jpg\" alt=\"TC-3\"></p>\n\n<pre><code>The above 2 BSTs are possible.\n\nHence we return the sequence &#39;2 1 2&#39;.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n1 2 3 4 5\n6\n2 6 7 3 8 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>14 5 4 5 14\n42 10 14 14 42 10\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2:</h5>\n\n<pre><code>Test Case 1: For the first test case, with 1 as the root node we will have 14 unique BSTs. Similarly for 2,3,4,5 as root nodes, we will have 5,4,5,14 unique BSTs respectively.\n\nTest Case 2: For the second test case, with 2 as the root node we will have 42 unique BSTs. Similarly for 6,7,3,8,5 as root nodes, we will have 10,14,14,42,10 unique BSTs respectively.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'ARR' of 'N' integers, for each element ARR[i], determine the number of Binary Search Trees (BSTs) that can be constructed using the elements of ARR as nodes, with ARR[i] as the root.  The answer should be calculated modulo (10^9 + 7). A Binary Search Tree follows the property that for any node, all nodes in its left subtree have values less than the node's value, and all nodes in its right subtree have values greater than the node's value.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^3",
                    "-10^9 <= ARR[i] <= 10^9",
                    "T is the total number of test cases.",
                    "N is the number of elements in the sequence."
                ],
                "testcases": [
                    {
                        "input": "3\n1 2 3",
                        "output": "2 1 2",
                        "explanation": "When 1 is the root, two BSTs are possible. When 2 is the root, one BST is possible. When 3 is the root, two BSTs are possible. This is achieved by counting the number of elements in the array less than and greater than the root, which contribute to the left and right subtrees respectively."
                    },
                    {
                        "input": "3\n20 30 10",
                        "output": "1 2 2",
                        "explanation": "When 20 is the root, one BST is possible. When 30 is the root, two BSTs are possible. When 10 is the root, two BSTs are possible. Similarly, we count the elements less than and greater than the current root."
                    },
                    {
                        "input": "5\n1 2 3 4 5",
                        "output": "14 5 4 5 14",
                        "explanation": "When 1 is the root, 14 unique BSTs can be formed. Similarly, with 2, 3, 4, and 5 as roots, 5, 4, 5, and 14 BSTs can be created, respectively.  The specific arrangement of left and right subtrees dictates the number of BSTs possible."
                    },
                    {
                        "input": "6\n2 6 7 3 8 5",
                        "output": "42 10 14 14 42 10",
                        "explanation": "With 2 as the root, 42 unique BSTs can be formed. For 6, 7, 3, 8, and 5 as root nodes, we can have 10, 14, 14, 42, and 10 unique BSTs respectively. The total number of BSTs that can be formed with a number x as root depends on the number of elements greater than x and number of elements lesser than x. catalan number is applied."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find all possible Binary Search trees for each element using Catalan Number.</p>",
            "<p>Can we find the elements lesser than the current element efficiently?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Number Theory",
                "slug": "number-theory"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}