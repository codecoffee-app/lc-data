{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9678,
            "title": "Total unique paths",
            "titleSlug": "total-unique-paths_1081470",
            "content": "<h4 id=\"you-are-present-at-point-a-which-is-the-top-left-cell-of-an-m-x-n-matrix-your-destination-is-point-b-which-is-the-bottom-right-cell-of-the-same-matrix-your-task-is-to-find-the-total-number-of-unique-paths-from-point-a-to-point-b-in-other-words-you-will-be-given-the-dimensions-of-the-matrix-as-integers-m-and-n-your-task-is-to-find-the-total-number-of-unique-paths-from-the-cell-matrix-0-0-to-matrix-m-1-n-1\">You are present at point \u2018A\u2019 which is the top-left cell of an M X N matrix, your destination is point \u2018B\u2019, which is the bottom-right cell of the same matrix. Your task is to find the total number of unique paths from point \u2018A\u2019 to point \u2018B\u2019.In other words, you will be given the dimensions of the matrix as integers \u2018M\u2019 and \u2018N\u2019, your task is to find the total number of unique paths from the cell MATRIX[0][0] to MATRIX[&#39;M&#39; - 1][&#39;N&#39; - 1].</h4>\n\n<h4 id=\"to-traverse-in-the-matrix-you-can-either-move-right-or-down-at-each-step-for-example-in-a-given-point-matrix-i-j-you-can-move-to-either-matrix-i-1-j-or-matrix-i-j-1\">To traverse in the matrix, you can either move Right or Down at each step. For example in a given point MATRIX[i] [j], you can move to either MATRIX[i + 1][j] or MATRIX[i][j + 1].</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of the test case. \n\nThe first and the only line of each test case contains two space-separated integers \u2018M\u2019 and \u2018N\u2019, denoting the number of rows and number of columns of the matrix respectively. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For every test case, return a single integer, which is the total number of unique paths for traveling from top-left to bottom-right cells of the matrix.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 \u2264 T \u2264 100\n1 \u2264 M \u2264 15\n1 \u2264 N \u2264 15\n\nWhere \u2018M\u2019 is the number of rows and \u2018N\u2019 is the number of columns in the matrix. \n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 2\n1 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample Output 1:</h5>\n\n<pre><code>In test case 1, we are given a 2 x 2 matrix, to move from matrix[0][0] to matrix[1][1] we have the following possible paths.\n\nPath 1 = (0, 0) -&gt; (0, 1) -&gt; (1, 1)\nPath 2 = (0, 0) -&gt; (1, 0) -&gt; (1, 1)\n\nHence a total of 2 paths are available, so the output is 2.\n\nIn test case 2, we are given a 1 x 1 matrix, hence we just have a single cell which is both the starting and ending point. Hence the output is 1.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 2\n1 6\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>3\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-2\">Explanation of Sample Output 2:</h5>\n\n<pre><code>In test case 1, we are given a 3 x 2 matrix, to move from matrix[0][0] to matrix[2][1] we have the following possible paths.\n\nPath 1 = (0, 0) -&gt; (0, 1) -&gt; (1, 1) -&gt; (2, 1)\nPath 2 = (0, 0) -&gt; (1, 0) -&gt; (2, 0) -&gt; (2, 1)\nPath 3 =  (0, 0) -&gt; (1, 0) -&gt; (1, 1) -&gt; (2, 1)\n\nHence a total of 3 paths are available, so the output is 3.\n\nIn test case 2, we are given a 1 x 6 matrix, hence we just have a single row to traverse and thus total path will be 1.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 280,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are located at the top-left cell (0, 0) of an M x N matrix and need to reach the bottom-right cell (M-1, N-1). You can only move either down or right at each step. Determine the total number of unique paths to reach the destination.",
                "constraints": [
                    "1 \u2264 T \u2264 100",
                    "1 \u2264 M \u2264 15",
                    "1 \u2264 N \u2264 15",
                    "Where \u2018M\u2019 is the number of rows and \u2018N\u2019 is the number of columns in the matrix.",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2 2",
                        "output": "2",
                        "explanation": "For a 2x2 matrix, two unique paths exist: (0,0) -> (0,1) -> (1,1) and (0,0) -> (1,0) -> (1,1)."
                    },
                    {
                        "input": "1 1",
                        "output": "1",
                        "explanation": "For a 1x1 matrix, there is only one path since the start and end points are the same."
                    },
                    {
                        "input": "3 2",
                        "output": "3",
                        "explanation": "For a 3x2 matrix, three unique paths exist: (0, 0) -> (0, 1) -> (1, 1) -> (2, 1), (0, 0) -> (1, 0) -> (2, 0) -> (2, 1), and (0, 0) -> (1, 0) -> (1, 1) -> (2, 1)."
                    },
                    {
                        "input": "1 6",
                        "output": "1",
                        "explanation": "For a 1x6 matrix, there's only a single row to traverse, resulting in one unique path."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of a recursive algorithm to count all the paths?</p>",
            "<p>Can we avoid the overlapping subproblems?</p>",
            "<p>Can we try the bottom-up approach and build our solution by combining sub-problems?</p>",
            "<p>Can we optimize the space complexity more?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity  : O(M * N) \r\n    Space Complexity : O(N)\r\n    \r\n    Where 'M' is the number of rows and 'N' is the number of columns of the matrix.  \r\n*/\r\n\r\nint uniquePaths(int m,int n)\r\n{\r\n    // Reference array to store subproblems.\r\n\tint dp[n] = {1};                   \r\n\r\n    // Bottom up approach.\r\n    dp[0] = 1;\r\n\r\n    for (int i = 0; i < m; i++) \r\n    {      \r\n        for (int j = 1; j < n; j++) \r\n        { \r\n            dp[j] += dp[j - 1];  \r\n        }\r\n    } \r\n    \r\n    //Returning answer. \r\n    return dp[n - 1];                  \r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\r\n    Time Complexity  : O(M * N) \r\n    Space Complexity : O(N)\r\n    \r\n    Where 'M' is the number of rows and 'N' is the number of columns of the matrix.   \r\n\"\"\"\r\n\r\ndef uniquePaths(m, n):\r\n\r\n    # Reference array to store subproblems.\r\n    dp = [0 for i in range(n)]                  \r\n\r\n    dp[0] = 1\r\n\r\n    # Bottom up approach.\r\n    for i in range(m): \r\n\r\n        for j in range(1, n):\r\n            dp[j] += dp[j - 1]\r\n        \r\n    # Returning answer.\r\n    return dp[n - 1]                  \r\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\n    Time Complexity  : O(M * N) \n    Space Complexity : O(N)\n    \n    Where 'M' is the number of rows and 'N' is the number of columns of the matrix.    \n*/\n\npublic class Solution {\n\tpublic static int uniquePaths(int m, int n) {\n\t\t// Reference array to store subproblems.\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 1;\n\n\t\t// Bottom up approach.\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 1; j < n; j++) {\n\t\t\t\tdp[j] += dp[j - 1];\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Returning answer.\n\t\treturn dp[n - 1];\n\t}\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}