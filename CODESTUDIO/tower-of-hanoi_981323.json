{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9288,
            "title": "Tower of Hanoi",
            "titleSlug": "tower-of-hanoi_981323",
            "content": "<h4 id=\"you-are-given-three-rods-numbered-1-to-3-and-n-disks-initially-placed-on-the-first-rod-one-on-top-of-each-other-in-increasing-order-of-size-the-largest-disk-is-at-the-bottom-you-are-supposed-to-move-the-n-disks-to-another-rod-either-rod-2-or-rod-3-using-the-following-rules-and-in-less-than-2-n-moves\">You are given three rods (numbered 1 to 3), and \u2018N\u2019 disks initially placed on the first rod, one on top of each other in increasing order of size ( the largest disk is at the bottom). You are supposed to move the \u2018N\u2019 disks to another rod(either rod 2 or rod 3) using the following rules and in less than 2 ^ (N) moves.</h4>\n\n<pre><code>1. You can only move one disk in one move. \n2. You can not place a larger disk on top of a smaller disk.\n3. You can only move the disk at the top of any rod.    \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You may assume that initially, the size of the \u2018i\u2019th disk from the top of the stack is equal to \u2018i\u2019, i.e. the disk at the bottom has size \u2018N\u2019, the disk above that has size \u2018N - 1\u2019, and so on. The disk at the top has size 1.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<p><img src=\"https://files.codingninjas.in/tower_of_hanoi-6667.jpg\" alt=\"Example\"></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. The test cases follow.\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the number disks.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return a 2-D array/list, where each row of the array should contain exactly two integers. The first integer should be the number of the rod from where the topmost disk is to be removed and the second integer should denote the number of the rod where the removed disk is to be placed. If you have correctly moved all the disks from rod 1 to either rod 2 or rod 3 the output will be \u20181\u2019 otherwise the output will be \u20180\u2019.\n\nThe output of every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 12\n\nWhere \u2018T\u2019 denotes the number of test cases, \u2018N\u2019 denotes the number of disks.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n1\n2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>In the first test case, \nyou can move the only disk to either rod 2 or rod 3. The matrix to be returned should be either { { 1, 2 } } or { {1, 3 } }.\n\nIn the second test case, \nyou can move the topmost disk from rod 1 to rod 2. Then move the remaining disk from rod1 to rod 3. Now move the disk in rod 2 to rod 3. . One of the correct ways to return the output is { { 1, 2 }, { 1, 3 }, { 2, 3 } }.  \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n3\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h5>\n\n<pre><code>One of the correct matrices is { { 1, 2 }, { 1, 3 }, { 2, 3 }, { 1, 2 }, { 3, 1 }, { 3, 2 }, { 1, 2 } }.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 277,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement the Tower of Hanoi algorithm to move 'N' disks from rod 1 to either rod 2 or rod 3, adhering to the standard rules: only one disk can be moved at a time, a larger disk cannot be placed on a smaller disk, and only the top disk of a rod can be moved. Return a list of moves representing the solution.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 12",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 1",
                        "output": "1",
                        "explanation": "Move the only disk to either rod 2 or rod 3.  Return either { { 1, 2 } } or { {1, 3 } }."
                    },
                    {
                        "input": "n = 2",
                        "output": "1",
                        "explanation": "Move the topmost disk from rod 1 to rod 2. Then move the remaining disk from rod 1 to rod 3. Now move the disk in rod 2 to rod 3. One of the correct ways to return the output is { { 1, 2 }, { 1, 3 }, { 2, 3 } }."
                    },
                    {
                        "input": "n = 3",
                        "output": "1",
                        "explanation": "One of the correct matrices is { { 1, 2 }, { 1, 3 }, { 2, 3 }, { 1, 2 }, { 3, 1 }, { 3, 2 }, { 1, 2 } }."
                    },
                    {
                        "input": "n = 4",
                        "output": "1",
                        "explanation": "Valid sequence of moves following the Tower of Hanoi rules, leading to all disks moved to either rod 2 or rod 3."
                    },
                    {
                        "input": "n = 5",
                        "output": "1",
                        "explanation": "Valid sequence of moves following the Tower of Hanoi rules, leading to all disks moved to either rod 2 or rod 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you try to solve this problem for N = 1 and then use recursion to solve for N &gt; 1?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(2 ^ N)\r\n    Space Complexity: O(N)\r\n\r\n    Where 'N' is the number of disks.\r\n*/\r\n\r\nvoid moveDisks(int n, int toRod, int fromRod, vector<vector<int>> &moves)\r\n{\r\n    //    If there is only one disk move that disk\r\n    if (n == 1)\r\n    {\r\n        moves.push_back({fromRod, toRod});\r\n        return;\r\n    }\r\n\r\n    //    Value of rem rod can be calculated by simply xoring number of each rod and toRod and fromRod.\r\n    int rem = 1 ^ 2 ^ 3 ^ toRod ^ fromRod;\r\n\r\n    //    Move the top n-1 to the rem rod.\r\n    moveDisks(n - 1, rem, fromRod, moves);\r\n\r\n    //    Move the n'th disk to toRod.\r\n    moves.push_back({fromRod, toRod});\r\n\r\n    //    Move the n-1 disks from rem rod to toRod.\r\n    moveDisks(n - 1, toRod, rem, moves);\r\n}\r\n\r\nvector<vector<int>> towerOfHanoi(int n)\r\n{\r\n    //    For storing the moves.\r\n    vector<vector<int>> moves;\r\n\r\n    moveDisks(n, 2, 1, moves);\r\n\r\n    //    Return the stored moves.\r\n    return moves;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(2 ^ N)\r\n    Space Complexity: O(N)\r\n\r\n    Where 'N' is the number of disks.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution \r\n{\r\n    private static void moveDisks(int n, int toRod, int fromRod, ArrayList < ArrayList<Integer>> moves) \r\n    {\r\n        \r\n        //    If there is only one disk move that disk\r\n        if (n == 1) \r\n        {\r\n            ArrayList<Integer> ans = new ArrayList<Integer>();\r\n            ans.add(fromRod);\r\n            ans.add(toRod);\r\n            moves.add(ans);\r\n            return;\r\n        }\r\n\r\n        //    Value of rem rod can be calculated by simply xoring number of each rod and toRod and fromRod.\r\n        int rem = 1 ^ 2 ^ 3 ^ toRod ^ fromRod;\r\n\r\n        //    Move the top n-1 to the rem rod.\r\n        moveDisks(n - 1, rem, fromRod, moves);\r\n\r\n        //    Move the n'th disk to toRod.\r\n        ArrayList<Integer> ans = new ArrayList<Integer>();\r\n        ans.add(fromRod);\r\n        ans.add(toRod);\r\n        moves.add(ans);\r\n\r\n        //    Move the n-1 disks from rem rod to toRod.\r\n        moveDisks(n - 1, toRod, rem, moves);\r\n    }\r\n\r\n    public static ArrayList < ArrayList<Integer>> towerOfHanoi(int n) \r\n    {\r\n        //    For storing the moves.\r\n        ArrayList < ArrayList<Integer>> moves = new ArrayList<ArrayList<Integer>>();\r\n\r\n        moveDisks(n, 2, 1, moves);\r\n\r\n        //    Return the stored moves.\r\n        return moves;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(2 ^ N)\r\n    Space Complexity: O(N)\r\n\r\n    Where 'N' is the number of disks.\r\n'''\r\n\r\ndef moveDisks(n, toRod, fromRod, moves):\r\n\r\n    #    If there is only one disk move that disk\r\n    if (n == 1):\r\n        moves.append([fromRod, toRod])\r\n        return\r\n\r\n    #    Value of rem rod can be calculated by simply xoring number of each rod and toRod and fromRod.\r\n    rem = 1 ^ 2 ^ 3 ^ toRod ^ fromRod\r\n\r\n    #    Move the top n-1 to the rem rod.\r\n    moveDisks(n - 1, rem, fromRod, moves)\r\n\r\n    #    Move the n'th disk to toRod.\r\n    moves.append([fromRod, toRod])\r\n\r\n    #    Move the n-1 disks from rem rod to toRod.\r\n    moveDisks(n - 1, toRod, rem, moves)\r\n\r\ndef towerOfHanoi(n):\r\n\r\n    #    For storing the moves.\r\n    moves = []\r\n\r\n    moveDisks(n, 2, 1, moves)\r\n\r\n    #    Return the stored moves.\r\n    return moves\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}