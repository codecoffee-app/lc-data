{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12756,
            "title": "Town Planning",
            "titleSlug": "town-planning_1474889",
            "content": "<h4 id=\"town-planner-ninja-is-assigned-to-build-new-houses-in-the-ninja-town-for-its-citizens-the-town-is-in-the-form-of-a-rectangular-grid-town-of-m-n-dimensions-where-m-is-the-number-of-rows-and-n-is-the-number-of-columns-each-cell-of-the-grid-can-be-an-empty-location-that-can-be-used-for-house-denoted-by-or-tree-denoted-by-t\">Town planner Ninja is assigned to build new houses in the ninja town for its citizens. The town is in the form of a rectangular grid \u2018TOWN[][]\u2019 of (\u2018M\u2019 * \u2018N\u2019) dimensions where &#39;M&#39; is the number of rows and &#39;N&#39; is the number of columns. Each cell of the grid can be an &#39;empty location&#39; (that can be used for house) denoted by &#39;.&#39; or &#39;Tree&#39; denoted by &#39;T&#39;.</h4>\n\n<h4 id=\"ninja-wants-to-meet-the-demands-of-the-citizens-without-cutting-any-of-the-trees\">Ninja wants to meet the demands of the citizens without cutting any of the trees.</h4>\n\n<h5 id=\"following-are-the-conditions-asked-by-citizens-for-their-house-locations\">Following are the conditions asked by citizens for their house locations :</h5>\n\n<pre><code>House should not have a house on its left cell\nHouse should not have a house on its right cell\nHouse should not have a house on its upper-left cell\nHouse should not have a house on its upper-right cell\n</code></pre>\n\n<h5 id=\"town-planner-ninja-needs-your-help-return-the-maximum-number-of-houses-that-can-be-built-while-meeting-the-citizens-demands-and-not-cutting-any-of-the-trees\">Town planner Ninja needs your help. Return the maximum number of houses that can be built while meeting the citizens&#39; demands and not cutting any of the trees.</h5>\n\n<h4 id=\"for-example\">For Example :</h4>\n\n<pre><code>Input  :\nM = 3 , N = 5\nGrid :\n. . . T .\n. T . . .\nT . . T .\n\nIn the example above, the maximum number of houses that be built is 8.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then \u2018T\u2019 test cases follow:\n\nThe first line in each test case contains two space-separated positive integers \u2018M\u2019 and \u2018N\u2019, where &#39;M\u2019 is the number of rows and \u2018N\u2019 is the number of columns in the grid.\n\nThe next \u2018M\u2019 lines contain a string of length \u2018N\u2019 containing \u2018.\u2019 or \u2018T\u2019 representing empty space or a Tree, respectively. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print an integer denoting the maximum number of houses that can build following the conditions stated above.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 8\n1 &lt;= M &lt;= 8\n\u2018TOWN\u2019 = { \u201c.\u201d,&quot;T&quot;}\n\nWhere &#39;TOWN\u2019 denotes the 2-D grid represents whether a cell is empty or not.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n3 5\n. . . T .\n. T . . .\nT . . T .\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>8\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>The following diagram represents the above input grid :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-9518.JPG\" alt=\"\"></p>\n\n<pre><code>The possible optimal arrangement of houses is shown below: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/2-9519.JPG\" alt=\"\"></p>\n\n<pre><code>Hence, a maximum 8 number of houses can be built if demands of citizens are to met and no tree is removed.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n3 5\nT . . . .\nT . T T .\n. T . . T\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>5\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2 :</h5>\n\n<pre><code>The following diagram represents the above input grid :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/3-9520.JPG\" alt=\"\"></p>\n\n<pre><code>The possible optimal arrangement of houses is shown below:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/4-9521.JPG\" alt=\"\"> </p>\n\n<pre><code>Hence, a maximum 5 number of houses can be built if the demands of citizens are met and no tree is removed.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Town planner Ninja needs to build houses in a rectangular grid town. The grid consists of empty locations ('.') and trees ('T'). The goal is to maximize the number of houses built while adhering to the following citizen demands:\n\n*   No house can be built to the left of another house.\n*   No house can be built to the right of another house.\n*   No house can be built diagonally above and to the left of another house.\n*   No house can be built diagonally above and to the right of another house.\n\nEssentially, houses can only be placed in cells marked '.' such that no two houses are adjacent horizontally or diagonally above each other. You cannot cut down any trees. Return the maximum number of houses that can be built.",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= N <= 8 (Number of columns)",
                    "1 <= M <= 8 (Number of rows)",
                    "TOWN elements can only be '.' or 'T'"
                ],
                "testcases": [
                    {
                        "input": "3 5\n. . . T .\n. T . . .\nT . . T .",
                        "output": "8",
                        "explanation": "Given a 3x5 grid with trees as shown, an optimal arrangement allows for a maximum of 8 houses.  The houses are placed such that no two are horizontally or diagonally adjacent, maximizing the number of houses possible."
                    },
                    {
                        "input": "3 5\nT . . . .\nT . T T .\n. T . . T",
                        "output": "5",
                        "explanation": "Given a 3x5 grid with trees as shown, an optimal arrangement allows for a maximum of 5 houses. The houses are placed according to the constraints (no horizontal or diagonal adjacency) and in available spots ('.')"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you find all valid combinations of houses in a row and call recursion to solve for other rows?</p>",
            "<p>Can you optimise above approach by using memoization?</p>",
            "<p>Can you do the previous approach without making recursive calls?&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}