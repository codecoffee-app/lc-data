{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7287,
            "title": "Trapping Rainwater",
            "titleSlug": "trapping-rainwater_630519",
            "content": "<h4 id=\"you-have-been-given-a-long-type-array-list-arr-of-size-n\">You have been given a long type array/list <em><strong>&#39;arr\u2019</strong></em> of size <em><strong>&#39;n\u2019</strong></em>.</h4>\n\n<p><br/> </p>\n\n<h4 id=\"it-represents-an-elevation-map-wherein-arr-i-denotes-the-elevation-of-the-ith-bar\">It represents an elevation map wherein <em><strong>&#39;arr[i]\u2019</strong></em> denotes the elevation of the &#39;ith&#39; bar.</h4>\n\n<p><br/> </p>\n\n<h4 id=\"print-the-total-amount-of-rainwater-that-can-be-trapped-in-these-elevations\">Print the total amount of rainwater that can be trapped in these elevations.</h4>\n\n<p><br></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The width of each bar is the same and is equal to 1.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \u2018n\u2019 = 6, \u2018arr\u2019 = [3, 0, 0, 2, 0, 4].\n\nOutput: 10\n\nExplanation: Refer to the image for better comprehension:\n</code></pre>\n\n<p><img src=\"https://ninjasfiles.s3.amazonaws.com/0000000000001829.png\" alt=\"Alt Text\"></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don&#39;t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of each test case contains an integer &#39;n&#39; representing the size of the array/list.\n\nThe second line contains &#39;n&#39; single space-separated integers representing the elevation of the bars.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Return an integer denoting the amount of water that can be trapped.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>4\n2 1 1 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>Water trapped by:\n     block of height 2 is 0 units.\n     block of height 1 is 1 unit.\n     block of height 1 is 3 1 unit. \n     block of height 4 is 3 0 units.\n\nHence the total is 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>5\n8 1 8 2 4 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>9\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation Of Sample Input 2:</h5>\n\n<pre><code>Water trapped by:\n     block of height 8 is 0 units.\n     block of height 1 is 7 units.\n     block of height 8 is 0 units. \n     block of height 2 is 2 units.\n     block of height 4 is 0 units.\n\nHence the total is 9.\n</code></pre>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>The expected time complexity is O(n).\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>0 &lt;= n &lt;= 10^6\n0 &lt;= arr[i] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 190,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'arr' of 'n' non-negative integers representing an elevation map where the width of each bar is 1, calculate the total amount of rainwater that can be trapped between the bars after rain.",
                "constraints": [
                    "0 <= n <= 10^6",
                    "0 <= arr[i] <= 10^9",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 4, arr = [2, 1, 1, 4]",
                        "output": "2",
                        "explanation": "Water trapped by: block of height 2 is 0 units, block of height 1 is 1 unit, block of height 1 is 1 unit, block of height 4 is 0 units. Hence, the total is 2."
                    },
                    {
                        "input": "n = 5, arr = [8, 1, 8, 2, 4]",
                        "output": "9",
                        "explanation": "Water trapped by: block of height 8 is 0 units, block of height 1 is 7 units, block of height 8 is 0 units, block of height 2 is 2 units, block of height 4 is 0 units. Hence, the total is 9."
                    },
                    {
                        "input": "n = 6, arr = [3, 0, 0, 2, 0, 4]",
                        "output": "10",
                        "explanation": "The array represents an elevation map where rainwater can be trapped between the bars. The total amount of trapped rainwater is 10 units."
                    },
                    {
                        "input": "n = 2, arr = [4, 2]",
                        "output": "0",
                        "explanation": "No water can be trapped as the height is monotonically decreasing."
                    },
                    {
                        "input": "n = 2, arr = [2, 4]",
                        "output": "0",
                        "explanation": "No water can be trapped as the height is monotonically increasing."
                    },
                    {
                        "input": "n = 5, arr = [4, 2, 0, 3, 2, 5]",
                        "output": "9",
                        "explanation": "The total amount of trapped water is 9."
                    },
                    {
                        "input": "n = 0, arr = []",
                        "output": "0",
                        "explanation": "Empty array, so no water can be trapped."
                    },
                    {
                        "input": "n = 1, arr = [5]",
                        "output": "0",
                        "explanation": "Single element array, no water can be trapped."
                    },
                    {
                        "input": "n = 7, arr = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]",
                        "output": "6",
                        "explanation": "The total amount of trapped water is 6."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Figure a way to calculate the units of water that can be stored at every elevation in the map.</p>",
            "<p>What if we can find the left max height and right max height for every elevation in the map in constant time? Can you have a way to pre-compute this information?</p>",
            "<p>What if you had the information of the maximum elevation in the map?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space Complexity : O(1)\r\n\r\n    Where N is the total number of elevations.\r\n*/\r\n\r\n#include <climits>\r\n\r\nlong long getTrappedWater(long long *arr, int n){\r\n\r\n    //Reference point.\r\n    long long peak = 0;\r\n\r\n    // Result.\r\n    long long ans = 0L;\r\n\r\n\r\n    if (n == 0) {\r\n        return 0LL;\r\n    }\r\n\r\n    long long peakVal = arr[0];\r\n\r\n    // Moving left to right.\r\n    for (int i = 0; i < n; i++) {\r\n        if (arr[i] >= peakVal) {\r\n            peak = i;\r\n            peakVal = arr[i];\r\n        }\r\n    }\r\n\r\n    // Initialising a min value.\r\n    long long maxSoFar = LONG_LONG_MIN;\r\n    long long countSubmerged = 0LL;\r\n    long long submergedArea = 0LL;\r\n\r\n    // Traversing over a peak.\r\n    for (int i = 0; i <= peak; i++) {\r\n        if (arr[i] >= maxSoFar) {\r\n\r\n            // Calculation.\r\n            ans += (countSubmerged * maxSoFar - submergedArea);\r\n            maxSoFar = arr[i];\r\n            countSubmerged = 0LL;\r\n            submergedArea = 0LL;\r\n        }\r\n\r\n        else {\r\n            submergedArea += arr[i];\r\n            countSubmerged++;\r\n        }\r\n    }\r\n\r\n    // Initialising a min value.\r\n    maxSoFar = LONG_LONG_MIN;\r\n    countSubmerged = 0LL;\r\n    submergedArea = 0LL;\r\n\r\n    // Moving right to left.\r\n    for (int i = n - 1; i >= peak; i--) {\r\n        if (arr[i] >= maxSoFar) {\r\n\r\n            // Calculation.\r\n            ans += (countSubmerged * maxSoFar - submergedArea);\r\n            maxSoFar = arr[i];\r\n            countSubmerged = 0LL;\r\n            submergedArea = 0LL;\r\n        }\r\n\r\n        else {\r\n            submergedArea += arr[i];\r\n            countSubmerged++;\r\n        }\r\n    }\r\n\r\n    return ans;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N)\r\n    Space Complexity : O(1)\r\n\r\n    Where N is the total number of elevations.\r\n*/\r\n\r\npublic class Solution {\r\n    public static long getTrappedWater(long[] arr, int n) {\r\n\r\n        // Reference point.\r\n        long peak = 0;\r\n\r\n        // Result.\r\n        long ans = 0;\r\n\r\n\r\n        if (n == 0) {\r\n            return 0;\r\n        }\r\n\r\n        long peakVal = arr[0];\r\n\r\n        // Moving left to right.\r\n        for (int i = 0; i < n; i++) {\r\n            if (arr[i] >= peakVal) {\r\n                peak = i;\r\n                peakVal = arr[i];\r\n            }\r\n        }\r\n\r\n        // Initializing a min value.\r\n        long maxSoFar = Long.MIN_VALUE;\r\n        long countSubmerged = 0;\r\n        long submergedArea = 0;\r\n\r\n        // Traversing over a peak.\r\n        for (int i = 0; i <= peak; i++) {\r\n            if (arr[i] >= maxSoFar) {\r\n\r\n                // Calculation.\r\n                ans += (countSubmerged * maxSoFar - submergedArea);\r\n                maxSoFar = arr[i];\r\n                countSubmerged = 0;\r\n                submergedArea = 0;\r\n            } else {\r\n                submergedArea += arr[i];\r\n                countSubmerged++;\r\n            }\r\n        }\r\n\r\n        // Initializing a min value.\r\n        maxSoFar = Long.MIN_VALUE;\r\n        countSubmerged = 0;\r\n        submergedArea = 0;\r\n\r\n        // Moving right to left.\r\n        for (int i = n - 1; i >= peak; i--) {\r\n            if (arr[i] >= maxSoFar) {\r\n\r\n                // Calculation.\r\n                ans += (countSubmerged * maxSoFar - submergedArea);\r\n                maxSoFar = arr[i];\r\n                countSubmerged = 0;\r\n                submergedArea = 0;\r\n            } else {\r\n                submergedArea += arr[i];\r\n                countSubmerged++;\r\n            }\r\n        }\r\n\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n    Time Complexity : O(N)\n    Space Complexity : O(1)\n\n    Where N is the total number of elevations.\n'''\n\nfrom typing import List\n\ndef getTrappedWater(arr: List[int], n: int) -> int:\n    # Reference point.\n    peak = 0\n\n    # Result.\n    ans = 0\n\n    if len(arr) == 0:\n        return 0\n\n    peak_val = arr[0]\n\n    # Moving left to right.\n    for i in range(len(arr)):\n        if arr[i] >= peak_val:\n            peak = i\n            peak_val = arr[i]\n\n    # Initializing a minimum value.\n    max_so_far = 0\n    count_submerged = 0\n    submerged_area = 0\n\n    # Traversing over a peak.\n    for i in range(peak + 1):\n        if arr[i] >= max_so_far:\n            # Calculation\n            ans += ((count_submerged * max_so_far) - submerged_area)\n            max_so_far = arr[i]\n            count_submerged = 0\n            submerged_area = 0\n        else:\n            submerged_area += arr[i]\n            count_submerged += 1\n\n    # Initializing a minimum value.\n    max_so_far = 0\n    count_submerged = 0\n    submerged_area = 0\n\n    # Moving right to left.\n    for i in range(len(arr) - 1, peak-1, -1):\n        if arr[i] >= max_so_far:\n            # Calculation\n            ans += ((count_submerged * max_so_far) - submerged_area)\n            max_so_far = arr[i]\n            count_submerged = 0\n            submerged_area = 0\n        else:\n            submerged_area += arr[i]\n            count_submerged += 1\n\n    return ans\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}