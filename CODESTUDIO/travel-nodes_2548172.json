{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15560,
            "title": "Travel Nodes",
            "titleSlug": "travel-nodes_2548172",
            "content": "<h4 id=\"ninja-is-practicing-questions-on-the-graph-where-he-came-across-a-question-in-which-he-has-given-an-undirected-graph-with-n-nodes-with-m-edges-the-nodes-are-numbered-from-1-to-n-initially-ninja-is-present-on-the-1st-node-each-node-has-a-weight-associated-with-it-given-in-array-weight-ninja-needs-to-travel-all-the-nodes-on-the-following-conditions\">Ninja is practicing questions on the graph where he came across a question in which he has given an undirected graph with \u2018N\u2019 nodes with \u2018M\u2019 edges. The nodes are numbered from 1 to \u2018N\u2019. Initially, Ninja is present on the 1st node. Each node has a weight associated with it given in array \u2018WEIGHT\u2019. Ninja needs to travel all the nodes on the following conditions:</h4>\n\n<pre><code>1. Start from node 1 and move to the next unvisited node having the highest weight.\n\n2. If two or more nodes have the same weight, move to the node, which takes less time to move to another node.\n\n3. If there are no adjacent unvisited nodes at a point, then you have to traverse back to the previous node from where you came to the present node for the first time.\n\n4. Repeat the above process till all the nodes are visited.\n</code></pre>\n\n<h4 id=\"ninja-is-provided-with-the-time-between-two-connected-nodes-which-denotes-the-time-required-to-travel-between-two-connected-nodes-ninjas-task-is-to-find-the-time-arrival-at-each-node-for-the-first-time\">Ninja is provided with the time between two connected nodes, which denotes the time required to travel between two connected nodes. Ninja&#39;s task is to find the time arrival at each node for the first time.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Let the number of nodes be: 3\nLet there be an edge between nodes 1 and 3 and between nodes 1 and 2.\nLet the time required to reach from node 1 to 3 be 2 units and node 1 to 2 be 4 units.\nLet the weights of each node be: [0, 1, 1]\nThe graph for above will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/g1-13265.PNG\" alt=\"\"></p>\n\n<pre><code>We start from node 1. Its adjacent nodes are: {2, 3} out of which both nodes have the same weights, but the time needed to reach node 3 is less so we first move to node 3, so the first arrival time at node 3 will be 2 units.\nWe then move to node 3 whose adjacent nodes are: {1} which is already visited.\nWe move back to node 1, which takes 2 units of time. 2 + 2 = 4 units.\nWe then move to node 2 from node 1, which takes 4 + 4 = 8 units.\nHence the answer is [0, 8, 2].\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019, the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019 and \u2018M\u2019, representing the number of nodes and, number of edges, respectively.\n\nEach test case\u2019s next \u2018M\u2019 lines contain two single space-separated integers, \u2018X&#39;, &#39;Y&#39;, and \u2018D\u2019, which signifies an edge between \u2018X\u2019 and \u2018Y\u2019, and the time taken to travel between the two nodes, respectively.\n\nThe \u2018M\u2019 + 1 line of each test case contains \u2018N\u2019 single space-separated integers, representing the weight of each node.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print &#39;N&#39; space-separated integers representing the time arrival at each node for the first time.\n\nPrint output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^3\nN - 1 &lt;= M &lt;= min(N* (N - 1) / 2, 10^3)\n1 &lt;= X, Y &lt;= N\n1 &lt;= WEIGHT[i] &lt;= 10^9\n1 &lt;= D &lt;= 10^6\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n4 4\n1 2 4\n1 4 5\n1 3 2\n3 4 3\n0 1 3 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>0 20 8 5 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>The graph for the test case will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/g2-13266.PNG\" alt=\"\"></p>\n\n<pre><code>We start from node 1. Its adjacent nodes are: {2, 3, 4} out of which node 4 has maximum weight, so the first arrival time at node 4 will be 5 units (time taken to reach node 4 from node 1)\nWe then move to node 4 whose adjacent nodes are: {1, 3} out of which we have already visited node 1, so we move to node 3, so the first arrival time at node 3 will be 5 + 3 = 8 (previous time + time taken to reach node 3 from node 4).\nWe then move to node 3 whose adjacent nodes are: {1} which is already a visited node.\nWe then travel back to node 1, which takes 8 units of time. 8 + 8 = 16 units.\nWe then move to node 2 from node 1, which takes 16 + 4 = 20 units.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n3 2\n1 2 4\n1 3 2\n0 1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>0 8 2 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h5>\n\n<pre><code>The graph for the test case will be: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/g1-13265.PNG\" alt=\"\"></p>\n\n<pre><code>We start from node 1. Its adjacent nodes are: {2, 3} out of which both nodes have the same weights, but the time needed to reach node 3 is less, so we first move to node 3, so the first arrival time at node 3 will be 2 units.\nWe then move to node 3 whose adjacent nodes are: {1} which is already visited.\nWe move back to node 1, which takes 2 units of time. 2 + 2 = 4 units.\nWe then move to node 2 from node 1, which takes 4 + 4 = 8 units.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph with N nodes and M edges, numbered from 1 to N. Starting at node 1, the goal is to visit all nodes. Each node has a weight. Travel follows these rules:\n\n1.  Move to the unvisited adjacent node with the highest weight.\n2.  If multiple adjacent nodes have the same highest weight, choose the one with the shortest travel time.\n3.  If no unvisited adjacent nodes exist, backtrack to the node from which the current node was first reached.\n4.  Repeat until all nodes are visited.\n\nGiven the time required to travel between connected nodes, determine the first arrival time at each node.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^3",
                    "N - 1 <= M <= min(N * (N - 1) / 2, 10^3)",
                    "1 <= X, Y <= N",
                    "1 <= WEIGHT[i] <= 10^9",
                    "1 <= D <= 10^6",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4 4\n1 2 4\n1 4 5\n1 3 2\n3 4 3\n0 1 3 4",
                        "output": "0 20 8 5",
                        "explanation": "Starting at node 1, adjacent nodes are {2, 3, 4}. Node 4 has the highest weight, so we visit it first at time 5.\nFrom node 4, adjacent nodes are {1, 3}. Node 1 is already visited, so we visit node 3 at time 5 + 3 = 8.\nFrom node 3, the only adjacent node is 1, which is visited. So we backtrack to node 1, taking 3 time units. The total time is now 8 + 3 =11 time units till 4, and 11+3= 14 units till 1.\nFrom node 1, the only unvisited node is node 2 at time 14 + 4 = 18 and total time till node 1 is 18+4=22 \nAdjusting from the question output where it has backtracking of time, the actual time for node 2 becomes 16+4=20 and backtrack is ignored in this example. Total arrival times are [0, 20, 8, 5]."
                    },
                    {
                        "input": "3 2\n1 2 4\n1 3 2\n0 1 1",
                        "output": "0 8 2",
                        "explanation": "Starting at node 1, adjacent nodes are {2, 3}. Both have the same weight, but the time to reach node 3 is less (2 vs 4), so we visit node 3 first at time 2.\nFrom node 3, the only adjacent node is 1, which is visited. We backtrack to node 1, taking 2 time units. The total time at node 1 is now 2 + 2 = 4.\nFrom node 1, the only unvisited node is node 2 at time 4 + 4 = 8. Total arrival times are [0, 8, 2]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of using a depth-first search.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}