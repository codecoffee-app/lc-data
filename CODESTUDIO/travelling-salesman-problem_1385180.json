{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11699,
            "title": "Travelling Salesman Problem",
            "titleSlug": "travelling-salesman-problem_1385180",
            "content": "<h4 id=\"given-a-list-of-cities-numbered-from-0-to-n-1-and-a-matrix-distance-consisting-of-n-rows-and-n-columns-denoting-the-distances-between-each-pair-of-cities-what-is-the-shortest-possible-route-that-visits-each-city-exactly-once-and-returns-to-the-starting-city\">Given a list of cities numbered from 0 to N-1 and a matrix &#39;DISTANCE&#39; consisting of &#39;N&#39; rows and &#39;N&#39; columns denoting the distances between each pair of cities, what is the shortest possible route that visits each city exactly once and returns to the starting city?</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. The test cases are as follows.\n\nThe first line of each test case contains an integer \u2018N\u2019, where \u2018N\u2019 denoting the number of the cities.\n\nThe next \u2018N\u2019 lines of each test case contain \u2018N\u2019 space-separated integers \u201cDISTANCE[i][j]\u201d, where DISTANCE[i][j] denotes the distance to jth city from the ith city. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the minimum distance of the shortest possible route which visits each city exactly once and returns to the starting city.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n2 &lt;= N &lt;= 16\n0 &lt;= DISTANCE[i][j] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4\n0 20 42 25\n20 0 30 34\n42 30 0 10\n25 34 10 0\n3\n0 3 2\n3 0 1\n2 1 0\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>85\n6\n</code></pre>\n\n<h5 id=\"explanation-of-sample-output-1\">Explanation of Sample output 1:</h5>\n\n<pre><code>For the first test case, \nThe shortest possible route is 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 0 = 20 + 30 + 10 + 25 = 85. \n\nFor the second test case,\nThe shortest possible route is 0 -&gt; 1 -&gt; 2 -&gt; 0 = 3 + 1 + 2 = 6.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n1\n5\n2\n0 2\n2 0\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>5\n4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 31,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a distance matrix representing the distances between N cities, find the shortest possible route that visits each city exactly once and returns to the starting city (city 0).",
                "constraints": [
                    "1 <= T <= 5",
                    "2 <= N <= 16",
                    "0 <= DISTANCE[i][j] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "distance=[[0, 20, 42, 25], [20, 0, 30, 34], [42, 30, 0, 10], [25, 34, 10, 0]]",
                        "output": "85",
                        "explanation": "The shortest possible route is 0 -> 1 -> 2 -> 3 -> 0 with a total distance of 20 + 30 + 10 + 25 = 85."
                    },
                    {
                        "input": "distance=[[0, 3, 2], [3, 0, 1], [2, 1, 0]]",
                        "output": "6",
                        "explanation": "The shortest possible route is 0 -> 1 -> 2 -> 0 with a total distance of 3 + 1 + 2 = 6."
                    },
                    {
                        "input": "distance=[[0, 2], [2, 0]]",
                        "output": "4",
                        "explanation": "The shortest possible route is 0 -> 1 -> 0 with a total distance of 2 + 2 = 4."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of some brute force solution?</p>",
            "<p>Can you think of some optimization to the above approach?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}