{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14387,
            "title": "Tree Node",
            "titleSlug": "tree-node_2119334",
            "content": "<pre><code>Given a table tree, id is identifier of the tree node and p_id is its parent node&#39;s id.\n\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n| 2  | 1    |\n| 3  | 1    |\n| 4  | 2    |\n| 5  | 2    |\n+----+------+\nEach node in the tree can be one of three types:\nLeaf: if the node is a leaf node.\nRoot: if the node is the root of the tree.\nInner: If the node is neither a leaf node nor a root node.\n\n\nWrite a query to print the node id and the type of the node. Sort your output by the node id. The result for the above sample is:\n\n\n+----+------+\n| id | Type |\n+----+------+\n| 1  | Root |\n| 2  | Inner|\n| 3  | Leaf |\n| 4  | Leaf |\n| 5  | Leaf |\n+----+------+\n\n\nExplanation\n\nNode &#39;1&#39; is root node, because its parent node is NULL and it has child node &#39;2&#39; and &#39;3&#39;.\nNode &#39;2&#39; is inner node, because it has parent node &#39;1&#39; and child node &#39;4&#39; and &#39;5&#39;.\nNode &#39;3&#39;, &#39;4&#39; and &#39;5&#39; is Leaf node, because they have parent node and they don&#39;t have child node.\n\nAnd here is the image of the sample tree as below:\n\n\n                       1\n                     /   \\\n                    2       3\n                  /   \\\n                4       5\nNote\n\nIf there is only one node on the tree, you only need to output its root attributes.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Ninja",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a table representing a tree structure, determine the type of each node. Each node has an 'id' and a 'p_id' (parent id). Classify each node as 'Root', 'Inner', or 'Leaf' based on its position in the tree. A 'Root' node has a NULL 'p_id'. An 'Inner' node has both a 'p_id' and child nodes. A 'Leaf' node has a 'p_id' but no child nodes. Return the node id and its corresponding type, sorted by node id.",
                "constraints": [
                    "The table is named 'tree'.",
                    "'id' is the identifier of the tree node.",
                    "'p_id' is the identifier of the parent node."
                ],
                "testcases": [
                    {
                        "input": "tree_data = [[1, None], [2, 1], [3, 1], [4, 2], [5, 2]]",
                        "output": "[[1, 'Root'], [2, 'Inner'], [3, 'Leaf'], [4, 'Leaf'], [5, 'Leaf']]",
                        "explanation": "Node 1 is the root (p_id is NULL) and has children. Node 2 has a parent and children, thus is inner. Nodes 3, 4, and 5 have a parent but are leaf nodes."
                    },
                    {
                        "input": "tree_data = [[1, None]]",
                        "output": "[[1, 'Root']]",
                        "explanation": "When there's only one node, it's the root."
                    },
                    {
                        "input": "tree_data = [[1, None], [2, 1]]",
                        "output": "[[1, 'Root'], [2, 'Leaf']]",
                        "explanation": "Node 1 is root and has a child, Node 2 has parent and no child"
                    },
                    {
                        "input": "tree_data = [[2, None], [3, 2], [4, 3]]",
                        "output": "[[2, 'Root'], [3, 'Inner'], [4, 'Leaf']]",
                        "explanation": "Node 2 is root and has a child, Node 3 has parent and a child , Node 4 has parent and no child."
                    },
                    {
                        "input": "tree_data = [[6, None], [8, 6], [9, 8], [10, 8], [11, 8], [15, 6]]",
                        "output": "[[6, 'Root'], [8, 'Inner'], [9, 'Leaf'], [10, 'Leaf'], [11, 'Leaf'], [15, 'Leaf']]",
                        "explanation": "Node 6 is root and has a child, Node 8 has parent and multiple children , Node 9,10,11 and 15 have parent and no child."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}