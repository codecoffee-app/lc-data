{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14387,
            "title": "Tree Node",
            "titleSlug": "tree-node_2119334",
            "content": "<pre><code>Given a table tree, id is identifier of the tree node and p_id is its parent node&#39;s id.\n\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n| 2  | 1    |\n| 3  | 1    |\n| 4  | 2    |\n| 5  | 2    |\n+----+------+\nEach node in the tree can be one of three types:\nLeaf: if the node is a leaf node.\nRoot: if the node is the root of the tree.\nInner: If the node is neither a leaf node nor a root node.\n\n\nWrite a query to print the node id and the type of the node. Sort your output by the node id. The result for the above sample is:\n\n\n+----+------+\n| id | Type |\n+----+------+\n| 1  | Root |\n| 2  | Inner|\n| 3  | Leaf |\n| 4  | Leaf |\n| 5  | Leaf |\n+----+------+\n\n\nExplanation\n\nNode &#39;1&#39; is root node, because its parent node is NULL and it has child node &#39;2&#39; and &#39;3&#39;.\nNode &#39;2&#39; is inner node, because it has parent node &#39;1&#39; and child node &#39;4&#39; and &#39;5&#39;.\nNode &#39;3&#39;, &#39;4&#39; and &#39;5&#39; is Leaf node, because they have parent node and they don&#39;t have child node.\n\nAnd here is the image of the sample tree as below:\n\n\n                       1\n                     /   \\\n                    2       3\n                  /   \\\n                4       5\nNote\n\nIf there is only one node on the tree, you only need to output its root attributes.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Ninja",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a table representing a tree structure, where `id` is the unique identifier of a node and `p_id` is the `id` of its parent node, determine the type of each node.  The table `tree` has the following structure:\n\n\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n| 2  | 1    |\n| 3  | 1    |\n| 4  | 2    |\n| 5  | 2    |\n+----+------+\n\n\nClassify each node as one of the following types:\n\n*   **Root:**  A node with a `null` parent.\n*   **Inner:** A node that has both a parent and at least one child (represented as another node with this node's `id` as its `p_id`).\n*   **Leaf:** A node that has a parent but no children in the table.\n\nWrite a query to output the `id` of each node and its corresponding `Type`. Sort the output by node `id` in ascending order.",
                "constraints": [],
                "testcases": [
                    {
                        "input": "\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n| 2  | 1    |\n| 3  | 1    |\n| 4  | 2    |\n| 5  | 2    |\n+----+------+\n",
                        "output": "\n+----+-------+\n| id | Type  |\n+----+-------+\n| 1  | Root  |\n| 2  | Inner |\n| 3  | Leaf  |\n| 4  | Leaf  |\n| 5  | Leaf  |\n+----+-------+\n",
                        "explanation": "Node 1 is the root because its parent (p_id) is NULL. Node 2 is an inner node because it has a parent (1) and children (4 and 5). Nodes 3, 4, and 5 are leaf nodes because they each have a parent, but no other node references them as a parent."
                    },
                    {
                        "input": "\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n+----+------+\n",
                        "output": "\n+----+-------+\n| id | Type  |\n+----+-------+\n| 1  | Root  |\n+----+-------+\n",
                        "explanation": "When there is only one node in the tree, it's considered the root node."
                    },
                    {
                        "input": "\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n| 2  | 1    |\n+----+------+\n",
                        "output": "\n+----+-------+\n| id | Type  |\n+----+-------+\n| 1  | Root  |\n| 2  | Leaf  |\n+----+-------+\n",
                        "explanation": "Node 1 is root , Node 2 is Leaf"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}