{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16307,
            "title": "Tree ordering",
            "titleSlug": "tree-ordering_3119013",
            "content": "<h4 id=\"you-were-jogging-in-the-morning-and-found-a-binary-tree-t-containing-n-nodes-numbered-from-1-to-n-you-have-just-learned-the-pre-order-traversal-so-you-quickly-performed-the-pre-order-traversal-on-the-binary-tree-but-you-did-not-like-the-outcome-so-you-decided-to-flip-a-minimum-number-of-the-nodes-so-that-the-pre-order-traversal-of-the-new-binary-tree-matches-the-array-a-a-binary-tree-is-a-tree-data-structure-in-which-each-node-has-at-most-two-children-which-are-referred-to-as-the-left-child-and-the-right-child\">You were jogging in the morning and found a Binary Tree \u2018T\u2019 containing \u2018N\u2019 nodes numbered from \u20181\u2019 to \u2018N\u2019. You have just learned the Pre-Order Traversal, so you quickly performed the Pre-Order Traversal on the Binary Tree, but you did not like the outcome. So you decided to flip a minimum number of the nodes so that the Pre-Order Traversal of the new Binary tree matches the array \u2018A\u2019. A binary tree is a tree data structure in which each node has at most two children, which are referred to as the left child and the right child.</h4>\n\n<h4 id=\"note-any-node-in-the-binary-tree-can-be-flipped-by-swapping-its-left-and-right-subtrees-for-example-flipping-node-1-will-have-the-following-effect\">Note: Any node in the binary tree can be flipped by swapping its left and right subtrees. For example, flipping node \u20181\u2019 will have the following effect:</h4>\n\n<p><img src=\"https://files.codingninjas.in/tree-ordering-1-13675.PNG\" alt=\"\"></p>\n\n<h5 id=\"input-format\">Input Format-</h5>\n\n<pre><code>First-line contains \u2018T\u2019, denoting the number of Test cases.\nFor each Test case:\nThe first line contains an integer \u2018N\u2019, denoting the number of nodes in the BT.\nThe following line will contain the values of the tree\u2019s nodes in the level order form ( -1 for &#39;NULL&#39; node). Refer to the example for further clarification.\nThe next line contains &#39;N&#39; space-separated integers denoting the array &#39;A&#39;.\n</code></pre>\n\n<h4 id=\"the-input-of-the-tree-depicted-in-the-image-above-will-be-like\">The input of the tree depicted in the image above will be like :</h4>\n\n<pre><code>5 \u2192 represents the total number of nodes.\n1 2 3 -1 -1 4 5 -1 -1 -1 -1 \u2192 represents the level order of Tree.\nExplanation :\nLevel 1 :\nThe root node of the tree is 1.\n\nLevel 2 :\nThe left child of 1 = 2.\nThe right child of 1 = 3.\n\nLevel 3 :\nThe left child of 2 = null (-1)\nThe right child of 2 = null (-1)\nThe left child of 3 = 4\nThe right child of 3 = 5\n\nLevel 4:\nThe left child of 4 = null (-1)\nThe right child of 4 = null (-1)\nThe left child of 5 = null (-1)\nThe right child of 5 = null (-1)\n</code></pre>\n\n<h5 id=\"output-format\">Output Format-</h5>\n\n<pre><code>For each test case, print all the nodes you want to flip. You can print the nodes in any order. The total number of nodes must be minimum. If it is impossible to flip the nodes in the tree to make the pre-order traversal match A, Print -1.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints -</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 5\n1 &lt;= \u2018N\u2019 &lt;= 10^5\nNote- the sum of \u2018N\u2019 over all test cases does not exceed 10^5.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input-1</h5>\n\n<pre><code>2\n3\n1 3 2 -1 -1 -1 -1\n1 2 3\n3\n2 1 3 -1 -1 -1 -1\n1 2 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output-1</h5>\n\n<pre><code>1\n-1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>For test case 1:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-ordering-eg1-13676.PNG\" alt=\"\"></p>\n\n<pre><code>From the image, we can see that if we flip at node 1, we will get the desired Pre-Order Traversal.\n\nFor test case 2:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-ordering-eg2-13677.PNG\" alt=\"\"></p>\n\n<pre><code>From the image, we can see that we will never get the desired Pre-Order Traversal no matter which node we select.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input -2</h5>\n\n<pre><code>2\n4\n1 3 2 4 -1 -1 -1 -1 -1\n1 2 3 4\n2\n2 1 -1 -1 -1\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output -2</h5>\n\n<pre><code>1\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 9,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree 'T' with 'N' nodes (numbered 1 to N), you are given its level order representation. You also have an array 'A' of size 'N'. You need to determine the minimum number of nodes to flip in 'T' such that the pre-order traversal of the resulting tree matches array 'A'. Flipping a node means swapping its left and right subtrees. Return a list of nodes to flip. If it's impossible to achieve the pre-order traversal 'A' by flipping nodes, return -1.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10^5",
                    "The sum of N over all test cases does not exceed 10^5.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3\n1 3 2 -1 -1 -1 -1\n1 2 3",
                        "output": "1",
                        "explanation": "Flipping node 1 results in the pre-order traversal matching the array [1, 2, 3]."
                    },
                    {
                        "input": "3\n2 1 3 -1 -1 -1 -1\n1 2 3",
                        "output": "-1",
                        "explanation": "It is impossible to obtain the pre-order traversal [1, 2, 3] by flipping any nodes in the given tree."
                    },
                    {
                        "input": "4\n1 3 2 4 -1 -1 -1 -1 -1\n1 2 3 4",
                        "output": "1",
                        "explanation": "Flipping node 1 will make the pre-order traversal equal to [1,2,3,4]"
                    },
                    {
                        "input": "2\n2 1 -1 -1 -1\n1 2",
                        "output": "-1",
                        "explanation": "It is impossible to obtain the pre-order traversal [1, 2] by flipping any nodes in the given tree."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>when should you flip at node \u2018i\u2019?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}