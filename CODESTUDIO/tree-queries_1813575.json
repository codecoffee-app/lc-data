{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13904,
            "title": "Tree Queries",
            "titleSlug": "tree-queries_1813575",
            "content": "<h4 id=\"you-are-given-a-tree-with-n-vertices-where-each-vertex-has-an-assigned-integer-you-are-given-q-queries-where-each-query-can-be-of-two-types\">You are given a tree with &#39;N&#39; vertices, where each vertex has an assigned integer. You are given &#39;Q&#39; queries where each query can be of two types:</h4>\n\n<pre><code>1 &#39;U&#39; &#39;V&#39;: Reverse the order of all the integers on the path between &#39;U&#39; and &#39;V&#39;.\n2 &#39;U&#39; &#39;V&#39;: Print the sum of all the integers on the path between &#39;U&#39; and &#39;V&#39;.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains two space-separated integers, \u2018N\u2019 and \u2018Q\u2019, denoting the number of vertices of the tree and the number of queries.\n\nThe next N-1 lines will contain two space-separated integers u and v, denoting an undirected edge between city u and city v.\n\nThe next line contains \u2018N\u2019 space-separated integers denoting the value associated with each node.\n\nThe next q lines contain three space-separated integers representing the queries of both types.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Output for each query of type two only, whether the path between the two cities of that query is alternating or not.\n\nOutput for each query will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N,Q &lt;= 10^4\n1 &lt;= u,v &lt;= N\n1 &lt;= value[i] &lt;= 10^4\n\nWhere value[i] represents the value associated with the node.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>12 3\n1 2\n2 3\n3 4\n1 5\n5 6\n5 7\n1 8\n8 9\n9 10\n9 11\n9 12\n10 8 5 9 12 16 8 18 21 11 19 20\n2 4 7\n1 1 6\n2 4 7\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>52\n58\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/hld_1-11438.png\" alt=\"\"></p>\n\n<pre><code>In the first query, we have to find the sum of the values of the path between node 4 and node 7. The path between 4 and 7 is 4, 3, 2, 1, 5, 7, and their corresponding height is 9, 5, 8, 10, 12, 8. \nTheir sum is 52. So the output is 52.\n\nIn the second query, we have to reverse the order of the values on the path between 1 and 6. The path is 1 5 6, and their corresponding values are 10 12 16. After reversing, their values will be 16 12 10. So, the final array will be 16 8 5 9 12 10 8 18 21 11 19 20.\n\nIn the third query, we have to find the sum of the values of the path between node 4 and node 7. The path between 4 and 7 is 4, 3, 2, 1, 5, 7, and their corresponding height is 9, 5, 8, 16, 12, 8. \nTheir sum is 58. So the output is 58.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>6 4\n1 5\n2 1\n3 2\n4 3\n4 6\n2 5 4 1 6 3\n2 3 3\n1 2 6\n2 5 6\n2 5 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>4\n21\n8\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Ninja",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a tree with N vertices, where each vertex has an assigned integer. You are also given Q queries. Each query can be one of the following two types:\n\n1.  Reverse the order of all the integers on the path between vertices U and V.\n2.  Calculate and print the sum of all the integers on the path between vertices U and V.",
                "constraints": [
                    "1 <= N, Q <= 10^4",
                    "1 <= u, v <= N",
                    "1 <= value[i] <= 10^4, where value[i] represents the value associated with the node.",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "12 3\n1 2\n2 3\n3 4\n1 5\n5 6\n5 7\n1 8\n8 9\n9 10\n9 11\n9 12\n10 8 5 9 12 16 8 18 21 11 19 20\n2 4 7\n1 1 6\n2 4 7",
                        "output": "52\n58",
                        "explanation": "Query 1: Calculate the sum of the values on the path between node 4 and node 7. The path is 4, 3, 2, 1, 5, 7, and their corresponding values are 9, 5, 8, 10, 12, 8. The sum is 52.\n\nQuery 2: Reverse the order of the values on the path between node 1 and node 6. The path is 1, 5, 6, and their corresponding values are 10, 12, 16. After reversing, their values will be 16, 12, 10. The array becomes: 16 8 5 9 12 10 8 18 21 11 19 20.\n\nQuery 3: Calculate the sum of the values on the path between node 4 and node 7. The path is 4, 3, 2, 1, 5, 7, and their corresponding values are 9, 5, 8, 16, 12, 8. The sum is 58."
                    },
                    {
                        "input": "6 4\n1 5\n2 1\n3 2\n4 3\n4 6\n2 5 4 1 6 3\n2 3 3\n1 2 6\n2 5 6\n2 5 1",
                        "output": "4\n21\n8",
                        "explanation": "Query 1: Find the sum of nodes in path from 3 to 3 which is just the value of Node 3 which is 4.\nQuery 2: Reverse the path between node 2 and node 6 and their respective values. \nPath : [2,1,5,4,6] , Values : [5,4,2,1,3] will become [3,1,2,4,5]\nArray: [2,3,4,1,6,5]\nQuery 3: The Sum between path from 5 to 6 from array above is [6,1,3,2,5,4] and the path: [5,4,6] has values [6,1,3] which sum to 10\nQuery 4: The Sum between path from 5 to 1 from array above is [2,3,4,1,6,5] and the path: [5,1] has values [2,5] which sum to 7"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to use heavy-light decomposition.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}