{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10458,
            "title": "Triangle",
            "titleSlug": "triangle_1229398",
            "content": "<h4 id=\"you-are-given-a-triangular-array-list-triangle-your-task-is-to-return-the-minimum-path-sum-to-reach-from-the-top-to-the-bottom-row\">You are given a triangular array/list &#39;TRIANGLE&#39;. Your task is to return the minimum path sum to reach from the top to the bottom row.</h4>\n\n<h4 id=\"the-triangle-array-will-have-n-rows-and-the-i-th-row-where-0-i-n-will-have-i-1-elements\">The triangle array will have N rows and the i-th row, where 0 &lt;= i  &lt; N will have i + 1 elements.</h4>\n\n<h4 id=\"you-can-move-only-to-the-adjacent-number-of-row-below-each-step-for-example-if-you-are-at-index-j-in-row-i-then-you-can-move-to-i-or-i-1-index-in-row-j-1-in-each-step\">You can move only to the adjacent number of row below each step. For example, if you are at index j in row i, then you can move to i or i + 1 index in row j + 1 in each step.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If the array given is &#39;TRIANGLE&#39; = [[1], [2,3], [3,6,7], [8,9,6,1]] the triangle array will look like:\n\n1\n2,3\n3,6,7\n8,9,6,10\n\nFor the given triangle array the minimum sum path would be 1-&gt;2-&gt;3-&gt;8. Hence the answer would be 14.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first line of each test case contains an integer \u2018N\u2019  representing the length of the array/list triangle.\n\nThen N lines follow. Each of the ith row contains i + 1 space-separated integers denoting the elements of the array/list &#39;TRIANGLE&#39;.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format :</h4>\n\n<pre><code>For each test case, print an integer X representing the minimum path sum.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to take input or print anything, it already has been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10^3 \n-10^6 &lt;= TRIANGLE[i][pos] &lt;= 10^6 ,                \n\nWhere &#39;TRIANGLE[i][pos]&#39; is the element at row = &#39;i&#39; &amp; position = &#39;pos&#39; in triangle array.  \n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4\n2 \n3 4\n6 5 7\n4 1 8 3\n1\n-10 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1 :</h5>\n\n<pre><code>11\n-10\n</code></pre>\n\n<h5 id=\"sample-input-explanation\">Sample Input explanation:</h5>\n\n<pre><code>Test case 1:\nHere our triangle array is:\n\n2\n3 4\n6 5 7 \n4 1 8 3\n\nIn this array, the minimum path will be 2-&gt;3-&gt;5-&gt;1, so the minimum sum path would be 2+3+5+1=11\n\nTest case 2:\nIn this case, there is one row. Thus, the minimum path will be -10, and the minimum sum path=-10.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample input 2 :</h5>\n\n<pre><code>2\n4\n1\n2 3\n4 5 6\n7 8 9 10\n3\n5\n-1 3\n22 1 -9\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>14\n-1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 227,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a triangular array/list 'TRIANGLE' with N rows, find the minimum path sum from the top to the bottom row. You can only move to the adjacent number in the row below. That is, from index j in row i, you can move to index j or j+1 in row i+1.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10^3",
                    "-10^6 <= TRIANGLE[i][pos] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "4\n2\n3 4\n6 5 7\n4 1 8 3\n1\n-10",
                        "output": "11\n-10",
                        "explanation": "Test case 1:\nTriangle: [[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]]\nMinimum path: 2 -> 3 -> 5 -> 1. Sum = 11\n\nTest case 2:\nTriangle: [[-10]]\nMinimum path: -10. Sum = -10"
                    },
                    {
                        "input": "4\n1\n2 3\n4 5 6\n7 8 9 10\n3\n5\n-1 3\n22 1 -9",
                        "output": "14\n-1",
                        "explanation": "Test case 1:\nTriangle: [[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]\nMinimum path: 1 -> 2 -> 4 -> 7. Sum = 14\n\nTest case 2:\nTriangle: [[5], [-1, 3], [22, 1, -9]]\nMinimum path: 5 -> -1 -> -9. Sum = -1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>&nbsp;Go through all the possible path sums from top to bottom.</p>",
            "<p>In this problem, there are some repeating sub-problems. Use that to reduce complexity.</p>",
            "<p>Think of converting your top-down dp to bottom-up dp solution.</p>",
            "<p>Think of reducing space.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/* \r\n    Time Complexity: O(N * N)\r\n    Space Complexity: O(N)\r\n\r\n    Where 'N' is the number of row in triangle array.\r\n*/\r\n\r\nint minimumPathSum(vector<vector<int>> &triangle, int n)\r\n{\r\n    vector<int> dp(n, 0);\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        dp[i] = triangle[n - 1][i];\r\n    }\r\n    for (int i = n - 2; i >= 0; i--)\r\n    {\r\n        for (int j = 0; j <=i ; j++)\r\n        {\r\n            dp[j] = triangle[i][j] + min(dp[j], dp[j + 1]);\r\n        }\r\n    }\r\n    return dp[0];\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N * N)\r\n    Space Complexity: O(N)\r\n\r\n    Where 'N' is the number of row in triangle array.\r\n'''\r\n\r\ndef minimumPathSum(triangle, n):\r\n\r\n    dp = [0]*n\r\n\r\n    for i in range(0, n):\r\n        dp[i] = triangle[n - 1][i]\r\n\r\n    for i in range(n - 2, -1, -1):\r\n        for j in range(i + 1):\r\n            dp[j] = triangle[i][j] + min(dp[j], dp[j + 1])\r\n\r\n    return dp[0]",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/* \r\n    Time Complexity: O(N * N)\r\n    Space Complexity: O(N)\r\n\r\n    Where 'N' is the number of row in triangle array.\r\n*/\r\n\r\npublic class Solution {\r\n    public static int minimumPathSum(int[][] triangle, int n) {\r\n        int[] dp = new int[n];\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            dp[i] = triangle[n - 1][i];\r\n        }\r\n        for (int i = n - 2; i >= 0; i--)\r\n        {\r\n            for (int j = 0; j <= i ; j++)\r\n            {\r\n                dp[j] = triangle[i][j] + Math.min(dp[j], dp[j + 1]);\r\n            }\r\n        }\r\n        return dp[0];\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}