{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9571,
            "title": "Trie delete operation",
            "titleSlug": "trie-delete-operation_1062663",
            "content": "<h4 id=\"you-are-given-a-trie-data-structure-which-stores-words-or-strings-and-a-string-word-your-task-is-to-perform-the-delete-operation-on-the-trie-to-delete-an-input-string-word-from-it\">You are given a Trie data structure which stores words or strings and a string &#39;WORD&#39;. Your task is to perform the delete operation on the Trie to delete an input string &#39;WORD&#39; from it.</h4>\n\n<h4 id=\"you-have-to-complete-the-function-deleteword-which-takes-the-root-of-input-trie-root-and-a-string-word-as-parameters-and-returns-a-trienode-pointer-if-the-string-word-exists-in-the-trie-it-must-be-deleted-and-the-root-of-new-trie-should-be-returned-if-the-correct-word-is-deleted-the-output-will-be-true-else-it-will-be-false\">You have to complete the function deleteWord() which takes the root of input Trie &#39;ROOT&#39; and a string &#39;WORD&#39; as parameters and returns a TrieNode pointer. If the string &#39;WORD&#39; exists in the trie, it must be deleted, and the root of new Trie should be returned. If the correct word is deleted, the output will be \u201cTRUE\u201d else it will be \u201cFALSE\u201d.</h4>\n\n<h4 id=\"if-the-string-word-doesn-t-exist-in-the-trie-then-no-delete-operation-will-take-place-and-the-output-will-be-true-if-for-any-query-the-output-is-false-then-the-answer-is-wrong\">If the string \u201cword\u201d doesn\u2019t exist in the Trie, then no delete operation will take place, and the output will be \u201cTRUE\u201d. If for any query, the output is \u201cFALSE\u201d, then the answer is wrong.</h4>\n\n<h4 id=\"trie-is-a-data-structure-which-is-like-a-tree-data-structure-in-its-organization-it-consists-of-nodes-that-store-letters-or-alphabets-of-words-which-can-be-added-retrieved-and-deleted-from-the-trie-in-a-very-efficient-way-in-other-words-trie-is-an-information-retrieval-data-structure-which-can-beat-naive-data-structures-like-hashmaps-trees-etc-in-time-complexities-of-its-operations\">Trie is a data structure which is like a tree data structure in its organization. It consists of nodes that store letters or alphabets of words, which can be added, retrieved, and deleted from the trie in a very efficient way. In other words, Trie is an information retrieval data structure, which can beat naive data structures like Hashmaps, Trees etc. in time complexities of its operations.</h4>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-129-6868.png\" alt=\"\"></p>\n\n<h4 id=\"above-figure-is-the-representation-of-a-trie-new-words-that-are-added-are-inserted-as-the-children-of-the-root-node-alphabets-are-added-in-the-top-to-bottom-fashion-in-parent-to-children-hierarchy-alphabets-that-are-highlighted-with-blue-circles-are-the-end-nodes-which-mark-the-ending-of-a-word-in-the-trie\">Above figure is the representation of a Trie. New words that are added are inserted as the children of the root node. Alphabets are added in the top to bottom fashion in parent to children hierarchy. Alphabets that are highlighted with blue circles are the end nodes which mark the ending of a word in the Trie.</h4>\n\n<h4 id=\"to-define-this-problem-we-perform-operations-with-the-following-two-types-of-queries\">To define this problem, we perform operations with the following two types of queries.</h4>\n\n<pre><code>To insert a string WORD in the Trie, we use \u2018\u2019Type 1\u2019\u2019 query.\n\nExample: 1 WORD \n\nWe will put the integer 1 before the input string WORD to insert it into the Trie.\n\nTo delete the string  WORD from the Trie, we use the \u201cType 2\u201d query.\n\nExample: 2 WORD\n\nWe will put integer 2 before the input string WORD to delete the string WORD from the Trie.\n</code></pre>\n\n<h4 id=\"example\">Example:-</h4>\n\n<pre><code>Query A - 1 coding\nThis query will add the string \u201ccoding\u201d in the trie.\n\nQuery B - 2 coding\nThis query will delete the string \u201ccoding\u201d from the Trie. After deleting the string, it will produce \u201cTRUE\u201d as it\u2019s output.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>If anywhere in the output, the word \u201cFALSE\u201d is printed, it means that the given string is not deleted successfully from the Trie, and hence it will lead to a Wrong Answer.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format</h4>\n\n<pre><code>The first line of input contains an integer &#39;Q&#39; representing the number of queries. Then the &#39;Q&#39; queries follow.\n\nThe first and the only line of each query contains an integer \u2018T\u2019 denoting the type of query and a string &#39;WORD&#39; denoting the query string both separated by a single space\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each query of Type 2 print &quot;TRUE&quot; if the string WORD is deleted from the Trie or &quot;FALSE&quot; if it is not deleted.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= &#39;Q&#39; &lt;= 10000\n1 &lt;= &#39;T&#39; &lt;= 2\n1 &lt;= |WORD| &lt;= 20\n\nWhere |WORD| is the length of the input string\nEach input string &#39;WORD&#39; will consist of lower case alphabets (a-z) only.\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>5\n1 coding\n1 ninjas\n2 coding\n2 code\n2 ninjas \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>TRUE\nTRUE \nTRUE\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">Explanation to Sample Input 1 :</h5>\n\n<pre><code>Query 1: &quot;coding&quot; is inserted in the Trie\nQuery 2: &quot;ninjas&quot; is inserted in the Trie\nQuery 3: &quot;TRUE&quot; is printed as &quot;coding&quot; is deleted from the Trie\nQuery 4: &quot;TRUE&quot; is printed as &quot;code&quot; is not present in the Trie\nQuery 5: &quot;TRUE&quot; is printed as &quot;ninjas&quot; is deleted from the Trie\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>10\n1 facebook\n1 google\n1 amazon\n2 facebook\n1 face\n2 google\n2 face\n2 amaze\n1 apple\n2 amazon\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>TRUE\nTRUE\nTRUE\nTRUE\nTRUE\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement the `deleteWord` function that removes a given string `word` from a Trie data structure. The function takes the root of the Trie (`root`) and the string to be deleted (`word`) as input. If the word exists in the Trie, it should be deleted, and the modified root of the Trie should be returned. If the word does not exist, the Trie should remain unchanged. The function should return the Trie's root node.",
                "constraints": [
                    "1 <= Q <= 10000 (Number of queries)",
                    "1 <= T <= 2 (Type of query: 1 for insert, 2 for delete)",
                    "1 <= |WORD| <= 20 (Length of the input string)",
                    "Each input string 'WORD' will consist of lowercase alphabets (a-z) only.",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "Q = 5, queries = ['1 coding', '1 ninjas', '2 coding', '2 code', '2 ninjas']",
                        "output": "TRUE, TRUE, TRUE",
                        "explanation": "Query 1: 'coding' is inserted. Query 2: 'ninjas' is inserted. Query 3: 'coding' is deleted. Query 4: 'code' is not present, so no deletion occurs (but TRUE is still expected as it's a no-op). Query 5: 'ninjas' is deleted."
                    },
                    {
                        "input": "Q = 10, queries = ['1 facebook', '1 google', '1 amazon', '2 facebook', '1 face', '2 google', '2 face', '2 amaze', '1 apple', '2 amazon']",
                        "output": "TRUE, TRUE, TRUE, TRUE, TRUE",
                        "explanation": "Multiple insertions and deletions, including cases where deletion is attempted on a non-existent word ('amaze'). Note 'face' is inserted *after* 'facebook' is deleted, so deleting 'face' after that insert returns TRUE."
                    },
                    {
                        "input": "Q = 3, queries = ['1 apple', '2 apple', '2 apple']",
                        "output": "TRUE, TRUE",
                        "explanation": "Insert 'apple', delete 'apple' (first delete is TRUE). Deleting it again should also return TRUE because the operation succeeded (nothing to delete, returns 'no changes' which equates to a successful deletion for purposes of this problem)."
                    },
                    {
                        "input": "Q = 2, queries = ['1 app', '2 apple']",
                        "output": "TRUE",
                        "explanation": "Insert 'app', then try to delete 'apple'. Should return TRUE because there was nothing to delete."
                    },
                    {
                        "input": "Q = 2, queries = ['1 apple', '2 app']",
                        "output": "TRUE",
                        "explanation": "Insert 'apple', then try to delete 'app'. Should return TRUE because there was nothing to delete."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we do it with the help of recursion in the bottom-up approach?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tries",
                "slug": "tries"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}