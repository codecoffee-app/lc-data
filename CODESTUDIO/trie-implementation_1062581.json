{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9505,
            "title": "Trie Implementation",
            "titleSlug": "trie-implementation_1062581",
            "content": "<h4 id=\"implement-a-trie-data-structure-which-supports-the-following-three-operations\">Implement a Trie Data Structure which supports the following three operations:</h4>\n\n<pre><code>Operation 1 - insert(word) - To insert a string WORD in the Trie.\n\nOperation 2-  search(word) - To check if a string WORD is present in Trie or not.\n\nOperation 3-  startsWith(word) - To check if there is a string that has the prefix WORD.\n</code></pre>\n\n<p><Br></p>\n\n<h4 id=\"trie-is-a-data-structure-that-is-like-a-tree-data-structure-in-its-organisation-it-consists-of-nodes-that-store-letters-or-alphabets-of-words-which-can-be-added-retrieved-and-deleted-from-the-trie-in-a-very-efficient-way\">Trie is a data structure that is like a tree data structure in its organisation. It consists of nodes that store letters or alphabets of words, which can be added, retrieved, and deleted from the trie in a very efficient way.</h4>\n\n<p><br></p>\n\n<h4 id=\"in-other-words-trie-is-an-information-retrieval-data-structure-which-can-beat-naive-data-structures-like-hashmap-tree-etc-in-the-time-complexities-of-its-operations\">In other words, Trie is an information retrieval data structure, which can beat naive data structures like Hashmap, Tree, etc in the time complexities of its operations.</h4>\n\n<p><br></p>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-129-6868.png\" alt=\"\"></p>\n\n<pre><code>The above figure is the representation of a Trie. New words that are added are inserted as the children of the root node. \n\nAlphabets are added in the top to bottom fashion in parent to children hierarchy. Alphabets that are highlighted with blue circles are the end nodes that mark the ending of a word in the Trie.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"for-example\">For Example:-</h5>\n\n<pre><code>Type = [&quot;insert&quot;, &quot;search&quot;], Query = [&quot;coding&quot;, &quot;coding].\nWe return [&quot;null&quot;, &quot;true&quot;] as coding is present in the trie after 1st operation.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first input line contains an integer &#39;Q&#39; representing the number of queries.\n\nThe next line contains an array that defines the type of the query.\n\nThe next line contains the words on which we have to perform operations.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The only line contains an array that contains the answer to the query that is &quot;true&quot; or &quot;false&quot; for 2nd and 3rd type of operation and &quot;null&quot; for 1st operation.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>5\ninsert insert search search startWith\ncoding ninjas coding ninja ninja\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>null null true false true\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">Explanation to Sample Input 1 :</h5>\n\n<pre><code>Query 1: &quot;coding&quot; is inserted\n\nQuery 2: &quot;ninjas&quot; is inserted\n\nQuery 3: &quot;true&quot; is printed as &quot;coding&quot; is present\n\nQuery 4: &quot;false&quot; is printed as &quot;ninja&quot; is not present, but &quot;ninjas&quot; is present.\n\nQuery 5: &quot;true&quot; is printed as there is a word &quot;ninjas&quot; that starts with &quot;ninja&quot;.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3\ninsert search startWith\nbook books b\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>null false true\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;Q&#39; &lt;= 10^4\n1 &lt;= | WORD | &lt;= 2000\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 14,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a Trie data structure that supports insertion, searching for a word, and checking if any word in the Trie starts with a given prefix. Implement the `insert`, `search`, and `startsWith` methods within the provided `solution` class.",
                "constraints": [
                    "1 <= 'Q' <= 10^4",
                    "1 <= | WORD | <= 2000"
                ],
                "testcases": [
                    {
                        "input": "Q = 5, types = [\"insert\", \"insert\", \"search\", \"search\", \"startsWith\"], words = [\"coding\", \"ninjas\", \"coding\", \"ninja\", \"ninja\"]",
                        "output": "null null true false true",
                        "explanation": "First, \"coding\" and \"ninjas\" are inserted into the Trie. Then, the search for \"coding\" returns true, the search for \"ninja\" returns false, and the startsWith \"ninja\" returns true because \"ninjas\" exists."
                    },
                    {
                        "input": "Q = 3, types = [\"insert\", \"search\", \"startsWith\"], words = [\"book\", \"books\", \"b\"]",
                        "output": "null false true",
                        "explanation": "\"book\" is inserted. Searching for \"books\" returns false. startsWith \"b\" returns true as \"book\" is present"
                    },
                    {
                        "input": "Q = 4, types = [\"insert\", \"insert\", \"search\", \"search\"], words = [\"apple\", \"app\", \"apple\", \"app\"]",
                        "output": "null null true false",
                        "explanation": "\"apple\" and \"app\" are inserted. Searching for \"apple\" returns true. Searching for \"app\" returns false."
                    },
                    {
                        "input": "Q = 4, types = [\"insert\", \"startsWith\", \"insert\", \"startsWith\"], words = [\"a\", \"a\", \"ab\", \"ab\"]",
                        "output": "null true null true",
                        "explanation": "\"a\" is inserted. startsWith \"a\" returns true because \"a\" is present. \"ab\" is inserted. startsWith \"ab\" returns true because \"ab\" is present"
                    },
                    {
                        "input": "Q = 4, types = [\"insert\", \"insert\", \"startsWith\", \"search\"], words = [\"the\", \"a\", \"th\", \"th\"]",
                        "output": "null null true false",
                        "explanation": "inserts \"the\", inserts \"a\".  startsWith \"th\" returns true since \"the\" starts with \"th\".  search \"th\" returns false since \"th\" isn't a complete word in the trie"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we implement it with the help of arrays?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tries",
                "slug": "tries"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}