{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9184,
            "title": "Triple Sum",
            "titleSlug": "triple-sum_980479",
            "content": "<h4 id=\"it-was-todd-s-birthday-so-bojack-decided-to-give-todd-a-binary-tree-with-n-nodes-but-the-binary-tree-was-too-big-to-keep-in-his-house-so-bojack-decided-to-give-exactly-three-nodes-from-that-tree-such-that-the-sum-of-these-three-numbers-equals-x-can-you-help-bojack-determine-if-it-is-possible-to-make-a-sum-equal-to-x\">It was Todd\u2019s Birthday, So Bojack decided to give Todd a Binary tree with \u2018N\u2019 nodes. But the binary tree was too big to keep in his house, so Bojack decided to give exactly three nodes from that tree such that the sum of these three numbers equals \u2018X\u2019. Can you help Bojack determine if it is possible to make a sum equal to \u2018X\u2019?</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>X = 11\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/triple_sum_example-11664.png\"/> </p>\n\n<pre><code>The sum of nodes 7, 3, 1 is 11. So we will return True.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains the elements of the binary tree in the level order form separated by a single space.\n\nThe second line of the test case contains an integer denoting \u2018X\u2019.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/triple_sum_input_format-11667.png\"/> </p>\n\n<pre><code>1\n2 3\n-1 4 -1 -1\n5 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = null (-1)\nRight child of 2 = 4\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\n\nLevel 4 :\nLeft child of 4 = 5\nRight child of 4 = null (-1)\n\nLevel 5 :\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n\nNote: The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 -1 4 -1 -1 5 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a boolean True or False.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function and return the answer.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n1 &lt;= NodeVal &lt;= 1000\n1 &lt;= X &lt;= 1000\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 1 2 -1 -1 -1 -1\n6\n1 2 3 4 -1 -1 -1 -1 -1\n3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>True\nFalse \n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/triple_sum_st1-11665.png\"/> </p>\n\n<pre><code>For the First Test Case, The three nodes 1, 2, 3 have a sum equal to 6. Hence, the answer is true.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/triple_sum_st2-11666.png\"/></p>\n\n<pre><code>For the second Test Case, No combination of any three nodes results in a sum equal to 3. Hence, the answer is False.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 8 1 3 4 -1 -1 -1 -1 -1 -1\n8\n1 1 1 -1 -1 -1 -1\n2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>True\nFalse \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with 'N' nodes, determine if there exist three distinct nodes in the tree whose sum equals a target value 'X'. The binary tree is provided in level order format, where -1 represents a null node.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3000",
                    "1 <= NodeVal <= 1000",
                    "1 <= X <= 1000",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "3 1 2 -1 -1 -1 -1\n6",
                        "output": "True",
                        "explanation": "The nodes 1, 2, and 3 sum up to 6, which is the target value X."
                    },
                    {
                        "input": "1 2 3 4 -1 -1 -1 -1 -1\n3",
                        "output": "False",
                        "explanation": "No combination of three distinct nodes in the tree sums up to 3."
                    },
                    {
                        "input": "1 8 1 3 4 -1 -1 -1 -1 -1 -1\n8",
                        "output": "True",
                        "explanation": "The nodes 1, 3, and 4 sum up to 8, which is the target value X."
                    },
                    {
                        "input": "1 1 1 -1 -1 -1 -1\n2",
                        "output": "False",
                        "explanation": "No combination of three distinct nodes in the tree sums up to 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find the value of every node and check if the sum of any three nodes is equal to <strong>X</strong>.</p>",
            "<p>Try to find the value of the third node using vector count.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}