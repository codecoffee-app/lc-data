{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7479,
            "title": "Triplets in Binary Tree",
            "titleSlug": "triplets-in-binary-tree_668907",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-integers-and-an-integer-x-find-all-the-triplets-in-the-tree-whose-sum-is-strictly-greater-than-x-the-nodes-in-the-triplet-must-hold-the-relationship-of-grandparent-parent-child\">You have been given a Binary Tree of integers and an integer &#39;X&#39;. Find all the triplets in the tree whose sum is strictly greater than &#39;X&#39;. The nodes in the triplet must hold the relationship of grandparent-parent-child.</h4>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>For the given binary tree and X = 9\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bt-4728.JPG\" alt=\"alt text\"></p>\n\n<pre><code>{1, 3, 6} is a valid triplet because 6 is a node whose parent is 3 and grand-parent is 1. Also, the sum of these nodes is 1 + 3 + 6 = 10 which is strictly greater than X = 9.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains a single integer &#39;X&#39;.\n\nThe second line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 on its place.\n\nFor example, the input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing three space-separated integers denoting all the triplets.\n\nTriplets must be in (grand-parent, parent, child) fashion, each separated by a single space.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. Return the triplets in any order but each triplet must follow (grand-parent, parent, child) fashion.\n\n2. You are not required to print the expected output, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 ^ 2\n0 &lt;= X &lt;= 10 ^ 9\n0 &lt;= N &lt;= 10 ^ 3 \n-10^9 &lt;= NODE.DATA &lt;= 10^9\n\nWhere &#39;N&#39; is the total number of nodes in the binary tree, and &#39;NODE.DATA&#39; is the value of a node.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n9\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n5\n1 2 3 -1 -1 -1 -1\n2\n1 2 -1 3 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 3 6\n2 4 7 \n1 2 3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, 6 is a node whose parent is 3 and grand-parent is 1.  is a valid triplet with sum 1 + 3 + 6 = 10 which is greater than 9. Similarly (2,4,7) is also a valid triplet.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>For the second test case, there are no valid triplets so don&#39;t print anything.\n\nFor the third test case, (1, 2, 3) is a valid triplet.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n234\n90 84 88 37 87 69 28 -1 -1 -1 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>90 88 69\n90 84 87 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 12,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of integers and an integer 'X', identify all triplets of nodes (grandparent, parent, child) where the sum of their values is strictly greater than 'X'.  The function should return a vector of vectors, where each inner vector represents a valid triplet.",
                "constraints": [
                    "1 <= T <= 10 ^ 2",
                    "0 <= X <= 10 ^ 9",
                    "0 <= N <= 10 ^ 3, where 'N' is the total number of nodes in the binary tree, and '-10^9 <= NODE.DATA <= 10^9' is the value of a node."
                ],
                "testcases": [
                    {
                        "input": "x = 9, root = [1, 2, 3, 4, -1, 5, 6, -1, 7, -1, -1, -1, -1, -1, -1]",
                        "output": "[[1, 3, 6], [2, 4, 7]]",
                        "explanation": "Triplet (1, 3, 6) has a sum of 10, which is greater than 9. Triplet (2, 4, 7) has a sum of 13, which is greater than 9."
                    },
                    {
                        "input": "x = 5, root = [1, 2, 3, -1, -1, -1, -1]",
                        "output": "[[1, 2, 3]]",
                        "explanation": "Triplet (1,2,3) has a sum of 6 which is greater than 5."
                    },
                    {
                        "input": "x = 2, root = [1, 2, -1, 3, -1, -1, -1]",
                        "output": "[[1, 2, 3]]",
                        "explanation": "Triplet (1, 2, 3) has a sum of 6, which is greater than 2."
                    },
                    {
                        "input": "x = 234, root = [90, 84, 88, 37, 87, 69, 28, -1, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "[[90, 88, 69], [90, 84, 87]]",
                        "explanation": "Triplet (90, 88, 69) has a sum of 247, which is greater than 234. Triplet (90, 84, 87) has a sum of 261 which is greater than 234."
                    },
                    {
                        "input": "x = 10, root = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]",
                        "output": "[[1, 2, 4], [1, 2, 5], [1, 3, 6], [1, 3, 7], [2, 4, 8], [2, 4, 9], [2, 5, 10], [2, 5, 11], [3, 6, 12], [3, 6, 13], [3, 7, 14], [3, 7, 15]]",
                        "explanation": "Multiple triplets exist where the sum of grandparent, parent and child is greater than 10."
                    },
                    {
                        "input": "x = 100, root = [1, 2, 3, 4, -1, 5, 6, -1, 7, -1, -1, -1, -1, -1, -1]",
                        "output": "[]",
                        "explanation": "No triplets sum to a value strictly greater than 100."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to keep track of the grand-parent, parent, and child while traversing in the tree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}