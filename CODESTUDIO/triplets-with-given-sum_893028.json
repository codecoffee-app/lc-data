{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8549,
            "title": "Triplets with Given Sum",
            "titleSlug": "triplets-with-given-sum_893028",
            "content": "<h4 id=\"you-are-given-an-array-list-arr-consisting-of-n-integers-your-task-is-to-find-all-the-distinct-triplets-present-in-the-array-which-adds-up-to-a-given-number-k\">You are given an array/list ARR consisting of N integers. Your task is to find all the distinct triplets present in the array which adds up to a given number K.</h4>\n\n<h4 id=\"an-array-is-said-to-have-a-triplet-arr-i-arr-j-arr-k-with-sum-k-if-there-exists-three-indices-i-j-and-k-such-that-i-j-j-k-and-i-j-and-arr-i-arr-j-arr-k-k\">An array is said to have a triplet {ARR[i], ARR[j], ARR[k]} with sum = &#39;K&#39; if there exists three indices i, j and k such that i!=j, j!=k and i!=j and ARR[i] + ARR[j] + ARR[k] = &#39;K&#39;.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. You can return the list of values in any order. For example, if a valid triplet is {1, 2, -3}, then {2, -3, 1}, {-3, 2, 1} etc is also valid triplet. Also, the ordering of different triplets can be random i.e if there are more than one valid triplets, you can return them in any order.\n2. The elements in the array need not be distinct.\n3. If no such triplet is present in the array, then return an empty list, and the output printed for such a test case will be &quot;-1&quot;.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer T, denoting the number of test cases.\n\nThe first line of each test case contains the integer N, denoting the size of the array.\n\nThe second line of each test case contains N space-separated integers denoting the array elements.\n\nThe third line of each test case contains the integer K, denoting the required sum for each triplet.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, every line of output contains three spaced integers denoting a valid triplet as described in the statement. Refer to sample input 2 for more clarification.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;=  50\n1 &lt;= N &lt;= 10^3  \n-10^6 &lt;= ARR[i] &lt;= 10^6\n-10^9 &lt;= K &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n5\n10 5 5 5 2\n12\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>5 5 2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1:</h5>\n\n<pre><code>5 5 2 is the only triplet that adds up to 12. Note that the order of the output doesn\u2019t matter, so 5 2 5 or 2 5 5 is also acceptable.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3\n6\n1 2 3 1 2 3\n6\n4\n1 2 3 4 \n11\n6\n1 1 2 2 1 1\n4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 2 3\n-1\n1 1 2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for Sample Input 2:</h5>\n\n<pre><code>In the first input, (1, 2, 3) is the only unique triplet that adds up to six.\n\nIn the second input, since there are no such triplets, we print -1.\n\nFor the third input, the only distinct triplet is (1, 1, 2), so just print 1 1 2.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 498,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, find all distinct triplets within the array that sum up to a specified target value.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^3",
                    "-10^6 <= ARR[i] <= 10^6",
                    "-10^9 <= K <= 10^9",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 5, arr = [10, 5, 5, 5, 2], K = 12",
                        "output": "5 5 2",
                        "explanation": "The only triplet in the array that sums up to 12 is {5, 5, 2}."
                    },
                    {
                        "input": "n = 6, arr = [1, 2, 3, 1, 2, 3], K = 6",
                        "output": "1 2 3",
                        "explanation": "The only distinct triplet summing up to 6 is {1, 2, 3}."
                    },
                    {
                        "input": "n = 4, arr = [1, 2, 3, 4], K = 11",
                        "output": "-1",
                        "explanation": "There are no triplets in the array that sum up to 11."
                    },
                    {
                        "input": "n = 6, arr = [1, 1, 2, 2, 1, 1], K = 4",
                        "output": "1 1 2",
                        "explanation": "The distinct triplet summing up to 4 is {1, 1, 2}."
                    },
                    {
                        "input": "n = 3, arr = [-1, 0, 1], K = 0",
                        "output": "-1 0 1",
                        "explanation": "The triplet {-1, 0, 1} sums up to 0."
                    },
                    {
                        "input": "n = 4, arr = [0, 0, 0, 0], K = 0",
                        "output": "0 0 0",
                        "explanation": "The triplet {0, 0, 0} sums to 0."
                    },
                    {
                        "input": "n = 5, arr = [-1, 0, 1, 2, -1], K = -1",
                        "output": "-1 -1 1\n-1 0 0",
                        "explanation": "Triplets that sum to -1 are {-1, -1, 1} and {-1, 0, 0}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try all possible combinations.</p>",
            "<p>Sorting and Two pointers.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n\r\n    Time Complexity: O(N^2)\r\n    Space Complexity: O(1)\r\n\r\n    Where N is the number of elements in the array.\r\n\r\n*/\r\n\r\nvector<vector<int>> findTriplets(vector<int>arr, int n, int K) {\r\n    vector<vector<int>>ans;\r\n    // Sorting the vector.\r\n    sort(arr.begin(), arr.end());\r\n\r\n    for (int i = 0; i < n; i++) {\r\n        int target = K - arr[i];\r\n        int front = i + 1;\r\n        int back = n - 1;\r\n\r\n        while (front < back) {\r\n            int sum = arr[front] + arr[back];\r\n\r\n            // Finding answer which starts from arr[i].\r\n            if (sum < target) {\r\n                front++;\r\n            }\r\n\r\n            else if (sum > target) {\r\n                back--;\r\n            }\r\n\r\n            else {\r\n                int x = arr[front];\r\n                int y = arr[back];\r\n                ans.push_back({arr[i], arr[front], arr[back]});\r\n\r\n                // Incrementing front pointer until we reach a different number.\r\n                while (front < back && arr[front] == x) {\r\n                    front++;\r\n                }\r\n                // Decrementing last pointer until we reach a different number.\r\n                while (front < back && arr[back] == y) {\r\n                    back--;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Ensuring that we don't encounter duplicate values for arr[i].\r\n        while (i + 1 < n && arr[i] == arr[i + 1]) {\r\n            i++;\r\n        }\r\n    }\r\n    return ans;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n\r\n    Time Complexity: O(N^2)\r\n    Space Complexity: O(1)\r\n\r\n    Where N is the number of elements in the array.\r\n\r\n */\r\n \r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\n\r\npublic class Solution {\r\n\tpublic static ArrayList<ArrayList<Integer>> findTriplets(int[] arr, int n, int k) {\r\n\t\tArrayList <ArrayList<Integer>> ans = new ArrayList<>();\r\n\t\t// Sorting the arraylist.\r\n\t\tArrays.sort(arr);\r\n\r\n\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\tint target = k-arr[i];\r\n\t\t\tint front = i + 1;\r\n\t\t\tint back = n - 1;\r\n\r\n\t\t\twhile (front < back) {\r\n\t\t\t\tint sum = arr[front] + arr[back];\r\n\r\n\t\t\t\t// Finding answer which starts from arr[i].\r\n\t\t\t\tif (sum < target) {\r\n\t\t\t\t\tfront++;\r\n\t\t\t\t}\r\n\t\t\t\telse if (sum > target) {\r\n\t\t\t\t\tback--;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tint x = arr[front];\r\n\t\t\t\t\tint y = arr[back];\r\n\r\n\t\t\t\t\tArrayList<Integer> list = new ArrayList<>();\r\n\r\n\t\t\t\t\tlist.add(arr[i]);\r\n\t\t\t\t\tlist.add(arr[front]);\r\n\t\t\t\t\tlist.add(arr[back]);\r\n\t\t\t\t\tans.add(list);\r\n\r\n\t\t\t\t\t// Incrementing front pointer until we reach a different number.\r\n\t\t\t\t\twhile (front < back && arr[front] == x) {\r\n\t\t\t\t\t\tfront++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Decrementing last pointer until we reach a different number.\r\n\t\t\t\t\twhile (front < back && arr[back] == y) {\r\n\t\t\t\t\t\tback--;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Ensuring that we don't encounter duplicate values for arr[i].\r\n\t\t\twhile (i + 1 < n && arr[i] == arr[i + 1]) {\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ans;\r\n\t}\r\n\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\n\n\tTime Complexity: O(N^2)\n\tSpace Complexity: O(1)\n\n\tWhere N is the number of elements in the array.\n\t\n'''\n\nfrom sys import stdin, stdout, setrecursionlimit\n\ndef findTriplets(arr, n, k):\n    ans = list()\n    # Sorting the arraylist.\n    arr = sorted(arr)\n\n    i = 0\n    while i < n:\n        target = k-arr[i]\n        front, back = i + 1, n - 1\n        while front < back:\n            sum = arr[front] + arr[back]\n            # Finding answer which starts from arr[i].\n            if sum < target:\n                front += 1\n\n            elif sum > target:\n                back -= 1\n\n            else:\n                x, y = arr[front], arr[back]\n                ans.append([arr[i], x, y])\n                # Incrementing front pointer until we reach a different number.\n                while front < back and arr[front] == x:\n                    front += 1\n                # Decrementing last pointer until we reach a different number.\n                while front < back and arr[back] == y:\n                    back -= 1\n                    \n\t# Ensuring that we don't encounter duplicate values for arr[i].\n        while i + 1 < n and arr[i] == arr[i + 1]:\n            i += 1\n\n        i += 1\n    return ans\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Taking input using fast I/0.\ndef takeInput():\n    N = int(stdin.readline())\n    arr = list(map(int, stdin.readline().strip().split(\" \")))\n    K = int(stdin.readline())\n    return N, arr,K\n\n\ntc = int(input())\nwhile tc > 0:\n    N, arr,K = takeInput()\n    ans = findTriplets(arr, N,K)\n\n    if len(ans) == 0:\n        stdout.write(\"-1\\n\")\n\n    else:\n        for i in ans:\n            i.sort()\n            stdout.write(str(i[0]) + \" \" + str(i[1]) + \" \" + str(i[2]) + \"\\n\")\n\n    tc -= 1\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}