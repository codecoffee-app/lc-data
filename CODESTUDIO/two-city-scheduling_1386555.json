{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11798,
            "title": "Two City Scheduling",
            "titleSlug": "two-city-scheduling_1386555",
            "content": "<h4 id=\"ninja-is-planning-to-organize-an-exhibition-in-which-2n-peoples-are-coming-the-hall-s-capacity-in-which-the-exhibition-is-going-to-take-place-is-only-n-so-ninja-thinks-of-organizing-two-exhibitions-in-2-different-cities-city_a-and-city_b-each-of-capacity-n-all-2n-people-will-come-to-the-exhibition-but-in-the-group-of-n-in-two-different-cities-ninja-wants-your-help-in-organizing-this-event\">Ninja is planning to organize an exhibition in which \u20182N\u2019 peoples are coming. The hall\u2019s capacity in which the exhibition is going to take place is only \u2018N\u2019. So, ninja thinks of organizing two exhibitions in 2 different cities, \u2018CITY_A\u2019 and \u2018CITY_B\u2019, each of capacity \u2018N\u2019. All \u20182N\u2019 people will come to the exhibition but in the group of \u2018N\u2019 in two different cities. Ninja wants your help in organizing this event.</h4>\n\n<h4 id=\"you-are-given-an-array-cost-where-cost-i-cost_to_ai-cost_to_bi-in-which-cost_to_ai-is-the-cost-of-the-ith-person-to-fly-to-the-city-a-and-cost_to_bi-is-the-cost-of-the-ith-person-to-fly-to-the-city-b-your-task-is-to-find-the-minimum-cost-of-organizing-the-exhibition-in-which-every-person-flies-to-a-city-such-that-exactly-n-people-arrive-in-each-city\">You are given an array \u2018COST\u2019 where \u201cCOST[i] = [COST_TO_Ai, COST_TO_Bi]\u201d, in which \u2018COST_TO_Ai\u2019 is the cost of the ith person to fly to the city A, and \u2018COST_TO_Bi\u2019 is the cost of the ith person to fly to the city B. Your task is to find the minimum cost of organizing the exhibition in which every person flies to a city such that exactly \u2018N\u2019 people arrive in each city.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The intersection of the set of the persons who go to \u2018CITY_A\u2019 to those going to \u2018CITY_B\u2019 is to be disjoint set, whereas the union must be the \u20182N\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019, which denotes the number of test cases to be run. Then, the &#39;T&#39; test cases follow. \n\nThe first line of each test case contains a positive integer, \u2018N\u2019,  such that \u20182N\u2019 is the number of people coming to the exhibition.\n\nThe next \u20182N\u2019 lines of each test case contain two integers, \u2018COST_TO_Ai\u2019, and \u2018COST_TO_Bi\u2019, as described in the problem statement.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The \u2018COST\u2019 will be passed to the function as an array of arrays. Each array will contain two integers, \u2018COST_TO_Ai\u2019, and \u2018COST_TO_Bi\u2019 in that order.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the minimum cost of organizing the exhibition, as described in the problem statement.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 50\nCOST.length == 2*N\n1 &lt;= CostToAi, CostToBi &lt;= 10^4\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n2\n5 100\n50 10\n10 200\n100 20\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>45\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>The first person will go to City \u2018A\u2019 at the cost of 5.\n\nThe second person will go to City \u2018B\u2019 at the cost of 10.\n\nThe third person will go to City \u2018A\u2019 at the cost of 10.\nThe last person will go to City \u2018B\u2019 at the cost of 20.\nSo, the total minimum cost will be = 5 + 10 + 10 + 20 = 45. There is no other way to get the cost less than 45.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n1\n200 200\n100 200\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>300\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>The first person will go to City \u2018B\u2019 at the cost of 200.\n\nThe second person will go to City \u2018A\u2019 at the cost of 100.\nSo, the total minimum cost will be = 200 + 100 = 300. There is no other way to get the cost less than 300.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 2D array 'COST' of size 2N x 2, where COST[i] = [COST_TO_Ai, COST_TO_Bi], representing the cost for the ith person to fly to city A and city B respectively, determine the minimum total cost to fly exactly N people to city A and N people to city B. Each person must fly to exactly one city.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 50",
                    "COST.length == 2*N",
                    "1 <= CostToAi, CostToBi <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "n = 2, cost = [[5, 100], [50, 10], [10, 200], [100, 20]]",
                        "output": "45",
                        "explanation": "The first person goes to City A (cost 5), the second goes to City B (cost 10), the third goes to City A (cost 10), and the fourth goes to City B (cost 20). Total cost: 5 + 10 + 10 + 20 = 45."
                    },
                    {
                        "input": "n = 1, cost = [[200, 200], [100, 200]]",
                        "output": "300",
                        "explanation": "The first person goes to City B (cost 200), and the second goes to City A (cost 100). Total cost: 200 + 100 = 300."
                    },
                    {
                        "input": "n = 3, cost = [[10, 20], [30, 200], [400, 50], [30, 20], [100, 30], [20, 10]]",
                        "output": "110",
                        "explanation": "Person 1 to A (10), Person 2 to A (30), Person 6 to B (10), Person 4 to A(30). then one person should go to B out of 3 and 5. minimum will be 5's B. Total cost: 10 + 30 + 10 + 30 + 30 + 0 = 110"
                    },
                    {
                        "input": "n = 2, cost = [[10,20],[30,200],[400,50],[30,20]]",
                        "output": "90",
                        "explanation": "Person 1 goes to A(10), Person 4 goes to A(30), Person 2 goes to A(30), Person 3 goes to B(50), Now n value is greater than 2 for A then 30-200=-170 and 50-400=-350 So the optimum solution is, Person 1 goes to A(10), Person 4 goes to A(30), Person 2 goes to B(200), Person 3 goes to A(400). Total is greater than n so this solution is not suitable , so the answer should be Person 1 goes to A(10), Person 4 goes to A(30), Person 2 goes to A(30), Person 3 goes to B(50) =120 but here A is grater than 2 so Person 2 should fly to B so the total cost is Person 1 goes to A(10), Person 4 goes to A(30), Person 2 goes to B(200), Person 3 goes to B(50)  A = n and B = n condition satisfied hence the total cost is equal to 10+30+50 + 200"
                    },
                    {
                        "input": "n = 1, cost = [[10, 20], [30, 40]]",
                        "output": "50",
                        "explanation": "Person 1 goes to A (10), Person 2 goes to B (40). Total cost = 10 + 40 = 50"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><i>Think of a recursive solution with memoization.</i></p>",
            "<p><i>Think of a greedy solution.</i></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}