{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9372,
            "title": "Two Stacks",
            "titleSlug": "two-stacks_983634",
            "content": "<h4 id=\"design-a-data-structure-which-represents-two-stacks-using-only-one-array-common-for-both-stacks-the-data-structure-should-support-the-following-operations\">Design a data structure, which represents two <a href=\"https://en.wikipedia.org/wiki/Stack_(abstract_data_type)\" target=\u201d_blank\u201d>stacks</a> using only one array common for both stacks. The data structure should support the following operations:</h4>\n\n<pre><code>push1(NUM) - Push \u2018NUM\u2019 into stack1.\npush2(NUM) - Push \u2018NUM\u2019 into stack2.\npop1() - Pop out a top element from stack1 and return popped element, in case of underflow return -1.\npop2() - Pop out a top element from stack2 and return popped element, in case of underflow return -1.\n</code></pre>\n\n<h4 id=\"there-are-2-types-of-queries-in-the-input\">There are 2 types of queries in the input</h4>\n\n<pre><code>Type 1 - These queries correspond to Push operation.\nType 2 - These queries correspond to Pop operation.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. You are given the size of the array.\n\n2. You need to perform push and pop operations in such a way that we are able to push elements in the stack until there is some empty space available in the array.\n\n3. While performing Push operations, do nothing in the situation of the overflow of the stack.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of the input contains two space-separated integers &#39;S&#39; and &#39;Q&#39;, denoting the size of the array and number of operations to be performed respectively.\n\nThe next &#39;Q&#39; lines contain operations, one per line. Each line begins with two integers \u2018type\u2019 and \u2018stackNo\u2019, denoting the type of query as mentioned above and the stack number on which this operation is going to be performed.\n\nIf the \u2018type\u2019 is 1 then it will be followed by one more integer \u2018NUM\u2019 denoting the element needed to be pushed to stack \u2018stackNo\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each operation of Type 2, print an integer on a single line - popped element from the stack, if the stack is already empty print -1.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>0 &lt;= S &lt;= 10^5\n1 &lt;= Q &lt;= 5*10^5\n1 &lt;= type, stackNo &lt;= 2\n0 &lt;= NUM &lt;= 10^9\n\nTime Limit: 1 sec.   \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3 5\n1 1 3\n1 2 4\n1 1 5\n2 1\n2 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample output 1:</h5>\n\n<pre><code>5\n4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/2stackssampl21-6787.png\" alt=\"alt-text\"></p>\n\n<pre><code>Here every step shows a snapshot of 2 stacks after each operation.\n\nInitialising the size of the array to 3, twoStack = new TwoStack(3).\nThen operation on two stacks occurs as follows:\ntwoStack.push1(3) // pushing 3 in stack1.\ntwoStack.push2(4) // pushing 4 in stack2.\ntwoStack.push1(5) // pushing 5 in stack1.\ntwoStack.pop1() // popping out from stack2, it returns 5.\ntwoStack.pop2() // popping out from stack2, it returns 4.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>3 10\n1 1 2\n1 1 4\n1 1 3\n1 2 5\n2 2\n2 1\n1 2 6\n2 2\n2 1\n1 2 7\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>-1\n3\n6\n4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2:</h5>\n\n<p><img src=\"https://files.codingninjas.in/2stackssample2-6788.png\" alt=\"alt-text\"></p>\n\n<pre><code>Here every step shows a snapshot of 2 stacks after each operation.\n\nInitialising the size of the array to 3, twoStack = new TwoStack(3).\nThen operation on two stacks occurs as follows:\ntwoStack.push1(2) // pushing 2 in stack1.\ntwoStack.push1(4) // pushing 4 in stack1.\ntwoStack.push1(3) // pushing 3 in stack1.\ntwoStack.push2(5) // pushing 5 in stack2, but 3 elements are already in the array and there is no empty space hence it cannot be added.\ntwoStack.pop2() // popping out from stack2, it is already empty hence returns -1.\ntwoStack.pop1() // popping out from stack1, it returns 3.\ntwoStack.push2(6) // pushing 6 in stack2.\ntwoStack.pop2() // popping out from stack2, it returns 6.\ntwoStack.pop1() // popping out from stack1, it returns 4.\ntwoStack.push2(7) // pushing 7 in stack2.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 228,
            "dislikes": "NA",
            "rephrased": {
                "body": "Design a data structure that implements two stacks using a single array. The data structure should support the following operations:\n\n*   `push1(NUM)`: Push `NUM` onto the top of stack 1.\n*   `push2(NUM)`: Push `NUM` onto the top of stack 2.\n*   `pop1()`: Pop the top element from stack 1. Return the popped element. If stack 1 is empty, return -1.\n*   `pop2()`: Pop the top element from stack 2. Return the popped element. If stack 2 is empty, return -1.\n\nConsider two types of queries:\n\n*   Type 1: Push operation.\n*   Type 2: Pop operation.\n\n**Note:**\n\n1.  You are given the size of the array.\n2.  Push and pop operations should be performed such that elements can be pushed until the array is full.\n3.  In case of overflow during push operations, do nothing.",
                "constraints": [
                    "0 <= S <= 10^5",
                    "1 <= Q <= 5 * 10^5",
                    "1 <= type, stackNo <= 2",
                    "0 <= NUM <= 10^9",
                    "Time Limit: 1 sec."
                ],
                "testcases": [
                    {
                        "input": "3 5\n1 1 3\n1 2 4\n1 1 5\n2 1\n2 2",
                        "output": "5\n4",
                        "explanation": "Initially, an array of size 3 is allocated. `push1(3)` adds 3 to stack 1. `push2(4)` adds 4 to stack 2. `push1(5)` adds 5 to stack 1. `pop1()` removes and returns 5 from stack 1. `pop2()` removes and returns 4 from stack 2."
                    },
                    {
                        "input": "3 10\n1 1 2\n1 1 4\n1 1 3\n1 2 5\n2 2\n2 1\n1 2 6\n2 2\n2 1\n1 2 7",
                        "output": "-1\n3\n6\n4",
                        "explanation": "Initially, an array of size 3 is allocated. `push1(2)` adds 2 to stack 1. `push1(4)` adds 4 to stack 1. `push1(3)` adds 3 to stack 1. `push2(5)` attempts to add 5 to stack 2, but the array is full, so nothing happens. `pop2()` returns -1 because stack 2 is empty. `pop1()` removes and returns 3 from stack 1. `push2(6)` adds 6 to stack 2. `pop2()` removes and returns 6 from stack 2. `pop1()` removes and returns 4 from stack 1. `push2(7)` adds 7 to stack 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Start top of the two stacks from the two extremes of the array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(1) per operation\r\n    Space Complexity : O(N),\r\n        \r\n     where N is the given size of the array.\r\n*/\r\n\r\nclass TwoStack {\r\n\r\npublic:\r\n    \r\n    // Declaring the pointer to the array, size and top of the two stacks.\r\n    int * arr, size, top1, top2;\r\n    \r\n    // Initializing array size and start the top of two stacks from extremes of the array.\r\n    TwoStack(int s) {\r\n        size = s;\r\n        arr = new int[size];\r\n        top1 = -1, top2 = size;\r\n    }\r\n\r\n    // Push in stack 1.\r\n    void push1(int num) {\r\n        // In case of overflow do nothing and return.\r\n        if (top1 + 1 == top2) {\r\n            return;\r\n        }\r\n\r\n        // Increment top of stack 1.\r\n        top1 += 1;\r\n\r\n        // Assign 'num' to the updated top index of stack 1.\r\n        arr[top1] = num;\r\n    }\r\n\r\n    // Push in stack 2.\r\n    void push2(int num) {\r\n        // In case of overflow do nothing and return.\r\n        if (top2 - 1 == top1) {\r\n            return;\r\n        }\r\n\r\n        // Decrement top of stack 2.\r\n        top2 -= 1;\r\n\r\n        // Assign 'num' to the updated top index of stack 2.\r\n        arr[top2] = num;\r\n    }\r\n\r\n    // Pop from stack 1 and return popped element.\r\n    int pop1() {\r\n        // In case of underflow return -1.\r\n        if (top1 == -1) {\r\n            return -1;\r\n        }\r\n\r\n        // Drcrement top of stack 1.\r\n        top1 -= 1;\r\n\r\n        // Return the value from the (top + 1)'th element of stack 1.\r\n        return arr[top1 + 1];\r\n    }\r\n\r\n    // Pop from stack 2 and return popped element.\r\n    int pop2() {\r\n        // In case of underflow return -1.\r\n        if (top2 == size) {\r\n            return -1;\r\n        }\r\n\r\n        // Increment top of stack 2.\r\n        top2 += 1;\r\n\r\n        // Return the value from the (top - 1)'th element of stack 2.\r\n        return arr[top2 - 1];\r\n    }\r\n\r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n    Time Complexity: O(1)\n    Space Complexity: O(N)\n\n    Where N is the size of the stack given by user.\n'''\n\n\nclass TwoStack:\n    def __init__(self, s):\n        self.size = s\n        self.arr = [0] * self.size\n        self.top1 = -1\n        self.top2 = self.size\n\n    # Push function for the first stack\n    def push1(self, val):\n        # If overflow exists, return\n        if self.top1 + 1 == self.top2:\n            return\n        self.top1 += 1\n        self.arr[self.top1] = val\n\n    # Push function for the second stack\n    def push2(self, val):\n        # If overflow exists, return\n        if self.top2 - 1 == self.top1:\n            return\n        self.top2 -= 1\n        self.arr[self.top2] = val\n\n    # Pop function for the first stack\n    def pop1(self):\n        # If underflow exists, return -1\n        if self.top1 == -1:\n            return -1\n\n        self.top1 -= 1\n        return self.arr[self.top1 + 1]\n\n    # Pop function for the second stack\n    def pop2(self):\n        # If underflow exists, return -1\n        if self.top2 == self.size:\n            return -1\n\n        self.top2 += 1\n        return self.arr[self.top2 - 1]\n",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n\t\tTime Complexity : O(1) per operation\r\n\t\tSpace Complexity : O(N),\r\n\r\n\t\twhere N is the given size of the array.\r\n*/\r\n\r\npublic class TwoStack {\r\n\t// Declaring the array, size and top of the two stacks.\r\n\tint[] arr;\r\n\tint size, top1, top2;\r\n\t// Initializing array size and start the top of two\r\n\tpublic TwoStack(int s) {\r\n\t\tsize = s;\r\n\t\tarr = new int[size];\r\n\t\ttop1 = -1;\r\n\t\ttop2 = size;\r\n\t}\r\n\r\n\t// Push in stack 1.\r\n\tpublic void push1(int num) {\r\n\t\t// In case of overflow do nothing and return.\r\n\t\tif (top1 + 1 == top2) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Increment top of stack 1.\r\n\t\ttop1 += 1;\r\n\t\t// Assign 'num' to the updated top index of stack 1.\r\n\t\tarr[top1] = num;\r\n\t}\r\n\r\n\t// Push in stack 2.\r\n\tpublic void push2(int num) {\r\n\t\t// In case of overflow do nothing and return.\r\n\t\tif (top2 - 1 == top1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Decrement top of stack 2.\r\n\t\ttop2 -= 1;\r\n\t\t// Assign 'num' to the updated top index of stack 2.\r\n\t\tarr[top2] = num;\r\n\t}\r\n\r\n\t// Pop from stack 1 and return popped element.\r\n\tpublic int pop1() {\r\n\t\t// In case of underflow return -1.\r\n\t\tif (top1 == -1) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\r\n\t\t// Decrement top of stack 1.\r\n\t\ttop1 -= 1;\r\n\t\t// Return the value from the (top + 1)'th element of stack 1.\r\n\t\treturn arr[top1 + 1];\r\n\t}\r\n\r\n\t// Pop from stack 2 and return popped element.\r\n\tpublic int pop2() {\r\n\t\t// In case of underflow return -1\r\n\t\tif (top2 == size) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\r\n\t\t// Increment top of stack 2.\r\n\t\ttop2 += 1;\r\n\t\t// Return the value from the (top - 1)'th element of stack 2.\r\n\t\treturn arr[top2 - 1];\r\n\t}\r\n\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}