{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9551,
            "title": "Two Sum In A BST",
            "titleSlug": "two-sum-in-a-bst_1062631",
            "content": "<h4 id=\"you-have-been-given-a-binary-search-tree-and-a-target-value-you-need-to-find-out-whether-there-exists-a-pair-of-node-values-in-the-bst-such-that-their-sum-is-equal-to-the-target-value\">You have been given a Binary Search Tree and a target value. You need to find out whether there exists a pair of node values in the BST, such that their sum is equal to the target value.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-also-called-an-ordered-or-sorted-binary-tree-is-a-rooted-binary-tree-whose-internal-nodes-each-store-a-value-greater-than-all-the-values-keys-in-the-nodes-left-subtree-and-less-than-those-in-its-right-subtree\">A binary search tree (BST), also called an ordered or sorted binary tree, is a rooted binary tree whose internal nodes each store a value greater than all the values keys in the node&#39;s left subtree and less than those in its right subtree.</h4>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve this in O(N) time, and O(H) space complexity?\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \n\nThen the T test cases follow. \n\nThe first line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place. \n\nThe second line of each test case contains a single integer representing the target value.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst_example-6878.png\" alt=\"bst_example\"> </p>\n\n<h4 id=\"part-17c7fa466\"><be></h4>\n\n<pre><code>4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 4\n\nLevel 2 :\nLeft child of 4 = 2\nRight child of 4 = 6\n\nLevel 3 :\nLeft child of 2 = 1\nRight child of 2 = 3\nLeft child of 6 = 5\nRight child of 6 = 7\n\nLevel 4 :\nLeft child of 1 = null (-1)\nRight child of 1 = null (-1)\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:    \n4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print True or False in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n-10^9 &lt;= node data &lt;= 10^9, (where node data != -1)\n-10^9 &lt;= target value &lt;= 10^9\n\nWhere N denotes is the number of nodes in the given tree.\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n10 6 12 2 8 11 15 -1 -1 -1 -1 -1 -1 -1 -1\n14\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for sample 1:</h5>\n\n<pre><code>For the first test case, the sum of the nodes with values 2 and 12 equals the target value.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bstinput1-6879.png\" alt=\"bst_input1\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n5 3 7 -1 -1 6 8 -1 -1 -1 -1\n20\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>False\n</code></pre>\n\n<h5 id=\"explanation-for-sample-2\">Explanation for sample 2:</h5>\n\n<pre><code>For the first test case, there is no such pair of nodes, the sum of which equals the target value.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bstinput2-6880.png\" alt=\"bst_input2\"></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 43,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) and a target value, determine if there exists a pair of nodes within the BST whose values sum up to the target value. A BST is a binary tree where each node's value is greater than all values in its left subtree and less than all values in its right subtree.\n\nSolve this problem with O(N) time complexity and O(H) space complexity, where N is the number of nodes and H is the height of the tree.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 3000 (Number of nodes in the tree)",
                    "-10^9 <= node data <= 10^9 (where node data != -1)",
                    "-10^9 <= target value <= 10^9",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "10 6 12 2 8 11 15 -1 -1 -1 -1 -1 -1 -1 -1\n14",
                        "output": "True",
                        "explanation": "The BST contains the values 2 and 12, whose sum is equal to the target value of 14."
                    },
                    {
                        "input": "5 3 7 -1 -1 6 8 -1 -1 -1 -1\n20",
                        "output": "False",
                        "explanation": "There is no pair of nodes in the BST whose values sum to the target value of 20."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a brute-force solution to search a node with <strong>target-node value </strong>by<strong> </strong>using the property of BST.</p>",
            "<p>Think of a solution to store the value of nodes in a Data Structure.</p>",
            "<p>Think of a solution to use the property that the inorder traversal of a BST is always sorted.</p>",
            "<p>Think of a solution using Inorder and <a href=\"https://en.wikipedia.org/wiki/Tree_traversal#Reverse_in-order_(RNL)\">Reverse Inorder Traversal</a>.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}