{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12057,
            "title": "Umbrella",
            "titleSlug": "umbrella_1402895",
            "content": "<h4 id=\"you-are-given-n-types-of-umbrellas-where-each-umbrella-can-shelter-some-number-of-people-given-the-number-of-people-each-umbrella-can-shelter-in-the-array-umbrella-you-need-to-determine-the-minimum-number-of-umbrellas-required-to-cover-exactly-m-people-with-umbrellas\">You are given \u2018N\u2019 types of umbrellas, where each umbrella can shelter some number of people. Given the number of people each umbrella can shelter in the array \u201cUMBRELLA\u201d, you need to determine the minimum number of umbrellas required to cover exactly \u2018M\u2019 people with umbrellas.</h4>\n\n<h4 id=\"note\">Note -</h4>\n\n<pre><code>You have an infinite number of umbrellas of each type.\nIf it is not possible to shelter exactly \u2018M\u2019 people then print -1. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases.\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 denoting the number of elements in the array \u201cUMBRELLA\u201d and \u2018M\u2019 denoting the number of people required to cover with umbrellas.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the elements of the array \u201cUMBRELLA\u201d.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the minimum number of required umbrellas.\n\nPrint the output of each test case on a new line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10^3\n1 &lt;= UMBRELLA[i] &lt;= 10^9\n1 &lt;= M &lt;= 10^3\n\nWhere \u2018T\u2019 represents the number of test cases, \u2018N\u2019 represents the number of types of umbrellas, \u201cUMBRELLA[i]\u201d represents the number of people it can cover, and \u2018M\u2019 denotes the number of people to cover with umbrellas.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 30\n5 10 25\n4 11\n1 5 6 9\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample output 1:</h5>\n\n<pre><code>For the first test case, we can use one umbrella of 25 people and one of 5 people.\n\nFor the second test case, we can use one umbrella of 6 people and one of 5 people.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2:</h4>\n\n<pre><code>2\n2 3\n2 4\n5 15\n5 1 3 2 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>-1\n5\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation For Sample output 2:</h5>\n\n<pre><code>For the first test case, we cannot cover exactly 3 people using any subarray of given umbrella.\n\nFor the second test case, we can use all umbrellas and cover all 15 peoples.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given N types of umbrellas, each capable of sheltering a specific number of people. Given an array UMBRELLA representing the capacity of each umbrella type, determine the minimum number of umbrellas needed to shelter exactly M people. You have an unlimited supply of each type of umbrella. If it's impossible to shelter exactly M people, return -1.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10^3",
                    "1 <= UMBRELLA[i] <= 10^9",
                    "1 <= M <= 10^3",
                    "Where \u2018T\u2019 represents the number of test cases, \u2018N\u2019 represents the number of types of umbrellas, \u201cUMBRELLA[i]\u201d represents the number of people it can cover, and \u2018M\u2019 denotes the number of people to cover with umbrellas.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 30\n5 10 25",
                        "output": "2",
                        "explanation": "We can use one umbrella that covers 25 people and another that covers 5 people. This requires a total of 2 umbrellas."
                    },
                    {
                        "input": "4 11\n1 5 6 9",
                        "output": "2",
                        "explanation": "We can use one umbrella that covers 6 people and another that covers 5 people. This requires a total of 2 umbrellas."
                    },
                    {
                        "input": "2 3\n2 4",
                        "output": "-1",
                        "explanation": "It is impossible to shelter exactly 3 people using the available umbrellas."
                    },
                    {
                        "input": "5 15\n5 1 3 2 4",
                        "output": "5",
                        "explanation": "We can use one of each type of umbrella 5 + 1 + 3 + 2 + 4 = 15."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of trying all possible options?</p>",
            "<p>Can you think of some optimization to the above approach?</p>",
            "<p>Can you try to solve this problem iteratively?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}