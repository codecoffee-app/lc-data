{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10436,
            "title": "Unbounded Knapsack",
            "titleSlug": "unbounded-knapsack_1215029",
            "content": "<h4 id=\"you-are-given-n-items-with-certain-profit-and-weight-and-a-knapsack-with-weight-capacity-w\">You are given <em><strong>\u2018n\u2019</strong></em> items with certain <em><strong>\u2018profit\u2019</strong></em> and <em><strong>\u2018weight\u2019</strong></em> and a knapsack with weight capacity <em><strong>\u2018w\u2019</strong></em>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"you-need-to-fill-the-knapsack-with-the-items-in-such-a-way-that-you-get-the-maximum-profit-you-are-allowed-to-take-one-item-multiple-times\">You need to fill the knapsack with the items in such a way that you get the maximum profit. You are allowed to take one item multiple times.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: \n&#39;n&#39; = 3, &#39;w&#39; = 10, \n&#39;profit&#39; = [5, 11, 13]\n&#39;weight&#39; = [2, 4, 6]\n\nOutput: 27\n\nExplanation:\nWe can fill the knapsack as:\n\n1 item of weight 6 and 1 item of weight 4.\n1 item of weight 6 and 2 items of weight 2.\n2 items of weight 4 and 1 item of weight 2.\n5 items of weight 2.\n\nThe maximum profit will be from case 3 = 11 + 11 + 5 = 27. Therefore maximum profit = 27.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains two integers \u2018n\u2019 and \u2018w\u2019 - number of items and weight capacity of the knapsack.\n\nThe second line of each test case contains &#39;n&#39; integers - elements of &#39;profit&#39; array.\n\nThe third line of each test case contains &#39;n&#39; integers - elements of &#39;weight&#39; array.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>Return an integer denoting the maximum profit that can be obtained by filling the knapsack.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3 15\n7 2 4\n5 10 20\n</code></pre>\n\n<p><br/> </p>\n\n<h5 id=\"expected-answer\">Expected Answer:</h5>\n\n<pre><code>21\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-on-console\">Output on console:</h5>\n\n<pre><code>21\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1</h5>\n\n<pre><code>The given knapsack capacity is 15. We can fill the knapsack as [1, 1, 1] giving us profit 21 and as [1,2] giving us profit 9. Thus maximum profit will be 21.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2</h5>\n\n<pre><code>2 3\n6 12\n4 17\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-answer\">Expected Answer:</h5>\n\n<pre><code>0\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-on-console\">Output on console:</h5>\n\n<pre><code>0\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>We can clearly see that no item has weight less than knapsack capacity. Therefore we can not fill knapsack with any item.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to solve this in O(n*w).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints</h5>\n\n<pre><code>1 &lt;= n &lt;= 10^3\n1 &lt;= w &lt;= 10^3\n1 &lt;= profit[i] , weight[i] &lt;= 10^8\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 149,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given 'n' items, each with a 'profit' and 'weight', and a knapsack with a weight capacity 'w', determine the maximum profit that can be obtained by filling the knapsack. You are allowed to take multiple instances of the same item. This is the unbounded knapsack problem.",
                "constraints": [
                    "1 <= n <= 10^3",
                    "1 <= w <= 10^3",
                    "1 <= profit[i] <= 10^8",
                    "1 <= weight[i] <= 10^8",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "3 10\n5 11 13\n2 4 6",
                        "output": "27",
                        "explanation": "The knapsack can be filled with different combinations of items. One optimal solution involves taking two items of weight 4 (profit 11 each) and one item of weight 2 (profit 5), resulting in a total weight of 10 and a total profit of 27 (11 + 11 + 5)."
                    },
                    {
                        "input": "3 15\n7 2 4\n5 10 20",
                        "output": "21",
                        "explanation": "One optimal way to fill the knapsack is by taking three items with weight 5 and profit 7, which results in weight 15 and profit 21 (7 * 3)"
                    },
                    {
                        "input": "2 3\n6 12\n4 17",
                        "output": "0",
                        "explanation": "Since the weight of each item (4 and 17) exceeds the knapsack's capacity (3), it is impossible to include any item. Therefore, the maximum profit is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find all possible sequences of items using recursion.</p>",
            "<p>Think of overlapping sub problems</p>",
            "<p>As the size of \u2018W\u2019 is less so think of a DP solution using this constraint.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity : O(n*w)\n    Space Complexity : O(n)\n\n    where 'n' is total number of items, w is knapsack capacity.\n*/\n\nint unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)\n{\n    //Initialize 1-D array\n    int dp[w + 1];\n\n    //Set all values to 0.\n    memset(dp, 0, sizeof(dp));\n\n    /*Computr result for all values of knapsack capacinty\n\tfrom 0 to 'w' */\n    for (int i = 0; i <= w; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n            if (weight[j] <= i)\n                dp[i] = max(dp[i], profit[j] + dp[i - weight[j]]);\n        }\n    }\n\n    /*dp[w] stores the maximum profit when knapsack\n\tcapacity is 'w'*/\n    return dp[w];\n}\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n\tTime Complexity : O(n*w)\r\n\tSpace Complexity : O(w)\r\n\r\n\twhere 'n' is total number of items, 'w' is knapsack capacity.\r\n*/\r\n\r\npublic class Solution {\r\n    public static int unboundedKnapsack(int n, int w, int[] profit, int[] weight) {\r\n        // Initialize 1-D array.\r\n        int[] dp = new int[w + 1];\r\n\r\n    /*\r\n\t    Compute result for all values of knapsack capacity\r\n\t\tfrom 0 to 'w'. \r\n\t*/\r\n        for (int i = 0; i <= w; i++) {\r\n            for (int j = 0; j < n; j++) {\r\n                if (weight[j] <= i) {\r\n                    dp[i] = Math.max(dp[i], profit[j] + dp[i - weight[j]]);\r\n                }\r\n            }\r\n        }\r\n\r\n    /*\r\n\t    dp[w] stores the maximum profit when knapsack\r\n\t\tcapacity is 'w'.\r\n\t*/\r\n        return dp[w];\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "\"\"\"\n    Time Complexity : O(n*w)\n    Space Complexity : O(n)\n\n    where 'n' is total number of items, w is knapsack capacity.\n\"\"\"\nfrom typing import List\n\ndef unboundedKnapsack(n: int, w: int, profit: List[int], weight: List[int]) -> int:\n    # Initialize 1-D array.\n    dp = [0] * (w + 1)\n\n    # Compute result for all values of knapsack capacity from 0 to 'w'.\n    for i in range(0, w + 1):\n        for j in range(0, n):\n            if weight[j] <= i:\n                dp[i] = max(dp[i], profit[j] + dp[i - weight[j]])\n\n    # dp[w] stores the maximum profit when knapsack capacity is 'w'.\n    return dp[w]",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}