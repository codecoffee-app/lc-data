{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7915,
            "title": "Uncommon Characters",
            "titleSlug": "uncommon-characters_795133",
            "content": "<h4 id=\"given-two-strings-s1-and-s2-of-lowercase-alphabets-find-the-list-of-uncommon-characters-for-the-two-strings\">Given two strings S1 and S2 of lowercase alphabets, find the list of uncommon characters for the two strings.</h4>\n\n<h4 id=\"a-character-is-uncommon-if-it-is-present-only-in-one-of-the-strings-i-e-it-is-either-present-in-s1-or-s2-but-not-in-both\">A character is uncommon if it is present only in one of the strings i.e. it is either present in S1 or S2, but not in both.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. Both the strings contain only lowercase alphabets and can contain duplicates.\n\n2. Return the uncommon characters in lexicographically sorted order. \n</code></pre>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases. Then the test cases follow.\n\nThe only line of each test case contains two strings, S1 and S2, separated by a single space.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the uncommon characters are printed in sorted order.\n\nThe output for each test case is in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= |S1|, |S2| &lt;= 50000\n\nWhere |S1| and |S2| are the lengths of the strings S1 and S2 respectively.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\ncoding ninjas\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>acdgjos\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h5>\n\n<pre><code>For the given two strings, {c, o, d, g} are the characters that are present only in the first string and {j, s} are characters that are present only in the second string. Thus, {c, o, d, g, j, s} are the uncommon characters for the given two strings and are printed in the sorted order.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nstudy dusty\nuncommon common    \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>u\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2</h5>\n\n<pre><code>For the first test case, there are no uncommon letters for the two strings. Thus, the output for the first test case is \u201c\u201d. \n\nFor the second test case, \u2018u\u2019 is the only uncommon letter.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, `s1` and `s2`, consisting of lowercase alphabets, identify and return a lexicographically sorted string containing only the characters that appear in either `s1` or `s2`, but not in both.  A character is considered uncommon if it exists exclusively in one of the strings. The input strings may contain duplicate characters.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= |S1|, |S2| <= 50000",
                    "Both strings contain only lowercase alphabets and can contain duplicates."
                ],
                "testcases": [
                    {
                        "input": "s1 = \"coding\", s2 = \"ninjas\"",
                        "output": "acdgjos",
                        "explanation": "The characters 'a', 'c', 'd', 'g', 'j', 'o', and 's' appear in either 'coding' or 'ninjas' but not in both.  Sorting these characters lexicographically results in 'acdgjos'."
                    },
                    {
                        "input": "s1 = \"study\", s2 = \"dusty\"",
                        "output": "",
                        "explanation": "All characters in 'study' also appear in 'dusty', and vice-versa, so there are no uncommon characters. Therefore, the result is an empty string."
                    },
                    {
                        "input": "s1 = \"uncommon\", s2 = \"common\"",
                        "output": "u",
                        "explanation": "The character 'u' is the only character present in 'uncommon' but not in 'common'."
                    },
                    {
                        "input": "s1 = \"aabbcc\", s2 = \"abcddd\"",
                        "output": "d",
                        "explanation": "The character 'd' is the only character present in 'abcddd' but not in 'aabbcc'."
                    },
                    {
                        "input": "s1 = \"xyz\", s2 = \"abc\"",
                        "output": "abcxyz",
                        "explanation": "All characters are uncommon. Sorted alphabetically 'abcxyz'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For each alphabet (a-z), try to check if it exists in only one of the strings.</p>",
            "<p>Try to optimize the solution using hashing.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}