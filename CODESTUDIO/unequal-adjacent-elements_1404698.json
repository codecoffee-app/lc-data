{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12271,
            "title": "Unequal adjacent elements. ",
            "titleSlug": "unequal-adjacent-elements_1404698",
            "content": "<h4 id=\"you-have-been-given-an-array-list-arr-of-integers-consisting-of-n-integers-you-need-to-rearrange-arr-so-that-no-two-adjacent-elements-are-equal-you-may-return-any-valid-rearrangement-and-it-is-guaranteed-the-answer-exists\">You have been given an array/list \u2018ARR\u2019 of integers consisting of \u2018N&#39; integers. You need to rearrange \u2018ARR\u2019 so that no two adjacent elements are equal. You may return any valid rearrangement and it is guaranteed the answer exists.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Let\u2019s say you have an array/list \u2018ARR = [1,1,2,2]\u2019. \n\nThen a valid rearrangement can be [1,2,1,2] or [2,1,2,1] such that no two adjacent elements are equal. [2,1,1,2] is an invalid arrangement because two adjacent elements are equal.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 representing the number of test cases.\n\nThe first line of each test case contains a single integer \u2018N\u2019 representing the size of the array/list \u2018ARR\u2019.\n\nThe second line and the last line of input contain \u2018N\u2019 single space-separated integers representing the array/list elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the rearranged list/array. If it is a valid rearranged list then the code will output \u2018True\u2019 otherwise \u2018False\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. You do not need to print anything; it has already been taken care of. Just implement the function. \n2. You will need to return the rearranged array/list. If the rearranged list is a valid rearrangement then we will display \u2018True\u2019 as an output otherwise \u2018False\u2019 as output. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 1000\n1 &lt;= \u2018ARR[i]\u2019 &lt;= 10^3\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n4\n1 3 3 4  \n4 \n1 1 2 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>True\nTrue\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1 :</h5>\n\n<pre><code>Test case 1:\n\nOne of the possible rearrangements is [3,1,4,3].\n\nTherefore the answer is \u2018True\u2019. But you have to return a rearranged array.\n\nTest case 2:\n\nOne of the possible rearrangements is [1,2,1,2].\n\nTherefore the answer is \u2018True\u2019.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n4\n1 2 3 4\n7\n1 1 2 2 3 3 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>True\nTrue\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, rearrange it such that no two adjacent elements are equal. Return any valid rearrangement if one exists. It's guaranteed that a valid rearrangement exists for all test cases.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 1000",
                    "1 <= ARR[i] <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "n = 4, arr = [1, 3, 3, 4]",
                        "output": "True",
                        "explanation": "One possible rearrangement is [3, 1, 4, 3], where no two adjacent elements are equal."
                    },
                    {
                        "input": "n = 4, arr = [1, 1, 2, 2]",
                        "output": "True",
                        "explanation": "One possible rearrangement is [1, 2, 1, 2], where no two adjacent elements are equal."
                    },
                    {
                        "input": "n = 4, arr = [1, 2, 3, 4]",
                        "output": "True",
                        "explanation": "The array is already in a valid arrangement as no adjacent elements are equal."
                    },
                    {
                        "input": "n = 7, arr = [1, 1, 2, 2, 3, 3, 4]",
                        "output": "True",
                        "explanation": "One possible rearrangement is [1, 2, 1, 3, 2, 4, 3], where no two adjacent elements are equal."
                    },
                    {
                        "input": "n = 5, arr = [1, 1, 1, 2, 2]",
                        "output": "True",
                        "explanation": "One possible rearrangment is [1, 2, 1, 2, 1]"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Naively iterate over all permutations of the array.&nbsp;</p>",
            "<p>Maintain set to find the highest frequency element from remaining elements.</p>",
            "<p>Maintain priority queue to find the highest frequency element from remaining elements.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}