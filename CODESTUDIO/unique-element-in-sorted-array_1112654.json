{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9973,
            "title": "Unique element in sorted array",
            "titleSlug": "unique-element-in-sorted-array_1112654",
            "content": "<h4 id=\"you-are-given-a-sorted-array-arr-of-n-numbers-such-that-every-number-occurred-twice-in-the-array-except-one-which-appears-only-once\">You are given a sorted array <em><strong>\u2018arr\u2019</strong></em> of <em><strong>\u2018n\u2019</strong></em> numbers such that every number occurred twice in the array except one, which appears only once.</h4>\n\n<p><br/></p>\n\n<h4 id=\"return-the-number-that-appears-once\">Return the number that appears once.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Input: &#39;arr&#39; = [1,1,2,2,4,5,5]\n\nOutput: 4 \n\nExplanation: \nNumber 4 only appears once the array.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>Exactly one number in the array &#39;arr&#39; appears once.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018n\u2019, representing the total number of elements present in the array &#39;arr&#39;.\nThe next line contains \u2018n\u2019 single-spaced elements, representing the elements of the array &#39;arr&#39;.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>The only line contains the integer denoting the number that appears once in the array.\n</code></pre>\n\n<p><br/></p>\n\n<p>##### Note :\n    You do not need to print anything, it has already been taken care of. Just implement the given function.</p>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>5 \n1 1 3 5 5 \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3 \n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1 :</h5>\n\n<pre><code>Given array is [1, 1, 3, 5, 5]    \nHere, 3 occurs once in the array. So, the answer is 3.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>5\n1 1 4 4 15\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>15\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2 :</h5>\n\n<pre><code>The array is [1, 1, 4, 4, 15].    \nHere, 15 occurs once in the array. So, the answer is 15.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected Time Complexity:</h5>\n\n<pre><code>Try to solve this in O(log(n)).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= n &lt;= 10^5\n0 &lt;= arr[i] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 285,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a sorted array 'arr' of 'n' numbers where every number appears exactly twice, except for one number that appears only once. Your task is to find and return the number that occurs only once in the array.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "0 <= arr[i] <= 10^9",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n1 1 3 5 5",
                        "output": "3",
                        "explanation": "The array is [1, 1, 3, 5, 5]. The number 3 appears only once in the array."
                    },
                    {
                        "input": "5\n1 1 4 4 15",
                        "output": "15",
                        "explanation": "The array is [1, 1, 4, 4, 15]. The number 15 appears only once in the array."
                    },
                    {
                        "input": "7\n1 1 2 2 4 5 5",
                        "output": "4",
                        "explanation": "The array is [1, 1, 2, 2, 4, 5, 5]. The number 4 appears only once in the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the fact that the array is sorted and for each element of the array, check if it is Shizuka\u2019s lucky number.</p>",
            "<p>Think of a solution using hashMap.</p>",
            "<p>Think of a solution using bit manipulation.</p>",
            "<p>Think of a solution using Binary search.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\n    Time Complexity  : O(log(N))\n    Space Complexity : O(1)\n\n    Where N is the total number of elements in the given array.\n*/\n\nint singleNonDuplicate(vector<int>& arr)\n{\n    int n = arr.size();\n    int low = 0, high = n - 1, mid;\n\n    // Do binary search\n    while (low < high) {\n\n        // Calculate mid\n        mid = low + (high-low) / 2;\n\n        // Update low and high\n        if ((mid % 2 == 1 && arr[mid] == arr[mid - 1]) || (mid % 2 == 0 && arr[mid] == arr[mid + 1]))\n        {\n            low = mid + 1;\n        }\n        else\n        {\n            high = mid;\n        }\n    }\n\n    return arr[low];\n}\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "\"\"\"\r\n\tTime Complexity  : O(log(N))\r\n\tSpace Complexity : O(1)\r\n\r\n\tWhere N is the total number of elements in the given array.\r\n\"\"\"\r\n\r\n\r\ndef singleNonDuplicate(arr):\r\n    low = 0\r\n    n = len(arr)\r\n    high = n - 1\r\n\r\n    # Do binary search\r\n    while low < high:\r\n\r\n        # Calculate mid\r\n        mid = (low + high) // 2\r\n\r\n        # Update low and high\r\n        if (mid % 2 == 1 and arr[mid] == arr[mid - 1]) or (mid % 2 == 0 and arr[mid] == arr[mid + 1]):\r\n            low = mid + 1\r\n        else:\r\n            high = mid\r\n\r\n    return arr[low]\r\n\r\n    pass",
                "lang_text": "python"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n\tTime Complexity  : O(log(N))\r\n\tSpace Complexity : O(1)\r\n\r\n\tWhere N is the total number of elements in the given array.\r\n*/\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n    public static int singleNonDuplicate(ArrayList < Integer > arr) {\r\n        int n = arr.size();\r\n        int low = 0, high = n - 1, mid;\r\n\r\n        // Do binary search\r\n        while (low < high) {\r\n\r\n            // Calculate mid\r\n            mid = (low + high) / 2;\r\n\r\n            // Update low and high.\r\n            if (mid % 2 == 1) {\r\n\r\n                int a = arr.get(mid);\r\n                int b = arr.get(mid - 1);\r\n\r\n                if (a == b) {\r\n                    low = mid + 1;\r\n                }\r\n                else {\r\n                    high = mid;\r\n                }\r\n            }\r\n            else if (mid % 2 == 0) {\r\n\r\n                int a = arr.get(mid);\r\n                int b = arr.get(mid + 1);\r\n\r\n                if (a == b) {\r\n                    low = mid + 1;\r\n                }\r\n                else {\r\n                    high = mid;\r\n                }\r\n            }\r\n        }\r\n\r\n        return arr.get(low);\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}