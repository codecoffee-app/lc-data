{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16877,
            "title": "Unique Robot Paths",
            "titleSlug": "unique-robot-paths_3657116",
            "content": "<h4 id=\"robot-is-given-a-task-to-clean-a-room-the-room-can-be-visualized-as-a-matrix-arr-containing-n-rows-and-m-columns-the-cells-of-the-room-are-denoted-as\">Robot is given a task to clean a room. The room can be visualized as a matrix \u2018ARR\u2019 containing \u2018N\u2019 rows and \u2018M\u2019 columns. The cells of the room are denoted as:</h4>\n\n<pre><code>1) Cells with a value of 0 indicate empty space in the room.\n2) Cells with a value of -1 indicate an obstacle in the room.\n3) Cell with a value of 1 indicates the starting position of the robot.\n4) Cell with a value of 2 indicates the ending position of the robot.\n</code></pre>\n\n<h4 id=\"in-each-move-the-robot-is-only-allowed-to-move-to-one-of-the-four-adjacent-cells-if-it-exists-and-is-not-occupied-by-an-obstacle-robot-has-to-clean-this-room-entirely-to-complete-this-task-his-path-must-start-from-his-starting-cell-and-should-visit-all-the-empty-cells-denoted-by-value-0-exactly-once-and-he-should-finally-arrive-at-the-ending-cell-you-have-to-find-the-number-of-all-possible-paths-using-which-the-robot-can-clean-the-room\">In each move, the robot is only allowed to move to one of the four adjacent cells if it exists and is not occupied by an obstacle. Robot has to clean this room entirely. To complete this task his path must start from his starting cell and should visit all the empty cells (denoted by value 0) exactly once, and he should finally arrive at the ending cell. You have to find the number of all possible paths using which the robot can clean the room.</h4>\n\n<h4 id=\"note-that-the-cells-corresponding-to-the-starting-and-ending-position-of-the-robot-are-never-occupied-by-an-obstacle-and-starting-and-ending-positions-will-always-be-in-different-cells\">Note that the cells corresponding to the starting and ending position of the robot are never occupied by an obstacle. And starting and ending positions will always be in different cells.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>If \u2018N\u2019 = 3, \u2018M\u2019 = 3 and \u2018ARR\u2019 = [ [1, 0, 0], [0, 0, 0], [0, 0, 2] ]\n\nThen the room is represented as:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/uniquepath_img-14244.png\" alt=\"\"></p>\n\n<pre><code>The 2 unique paths are marked in the image above.\nThe first path is: (0, 0) -&gt; (0, 1) -&gt; (0, 2) -&gt; (1, 2) -&gt; (1, 1) -&gt; (1, 0) -&gt; (2, 0) -&gt; (2, 1) -&gt; (2, 2).\n\nThe second path is: (0, 0) -&gt; (1, 0) -&gt; (2, 0) -&gt; (2, 1) -&gt; (1, 1) -&gt; (0, 1) -&gt; (0, 2) -&gt; (1, 2) -&gt; (2, 2).\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains two space-separated integers \u2018N\u2019 and \u2018M\u2019, denoting the number of rows and columns respectively.\n\nThe next N lines each contain M space-separated integers \u2018ARR\u2019, denoting each cell of the room.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, find the number of unique paths using which the robot can clean the room.\n\nOutput for each test case will be printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 T \u2264 10      \n2 \u2264 N, M \u2264 5\nARR[i] = { -1, 0, 1, 2 }\nThe robot will always have valid starting and ending positions.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 3\n1 0 0\n0 0 0\n0 0 2\n3 3\n1 0 0\n0 -1 0\n0 0 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>2\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For test case 1 :\nWe will print 2 because there are two unique paths possible:\nThe first path is: (0, 0) -&gt; (0, 1) -&gt; (0, 2) -&gt; (1, 2) -&gt; (1, 1) -&gt; (1, 0) -&gt; (2, 0) -&gt; (2, 1) -&gt; (2, 2).\nThe second path is: (0, 0) -&gt; (1, 0) -&gt; (2, 0) -&gt; (2, 1) -&gt; (1, 1) -&gt; (0, 1) -&gt; (0, 2) -&gt; (1, 2) -&gt; (2, 2).\n\nFor test case 2 : \nWe will print 0 because:\nThere exists no path in which we can clean all the empty cells while visiting them exactly once.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n2 2\n1 2\n0 0\n2 2\n1 0\n0 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "A robot is tasked with cleaning a room represented as a matrix 'ARR' of size N x M. Cells in 'ARR' have the following meanings:\n\n- 0: Empty space\n- -1: Obstacle\n- 1: Robot's starting position\n- 2: Robot's ending position\n\nThe robot can move to adjacent cells (up, down, left, right) if they exist and are not obstacles. The goal is to find the number of unique paths the robot can take, starting from its initial position, visiting each empty cell (value 0) exactly once, and ending at the designated ending cell (value 2). The starting and ending cells are guaranteed to be distinct and not obstacles.",
                "constraints": [
                    "1 \u2264 T \u2264 10",
                    "2 \u2264 N, M \u2264 5",
                    "ARR[i][j] \u2208 {-1, 0, 1, 2}",
                    "The robot will always have valid starting and ending positions.",
                    "Starting and ending positions will always be in different cells."
                ],
                "testcases": [
                    {
                        "input": "n = 3, m = 3, arr = [[1, 0, 0], [0, 0, 0], [0, 0, 2]]",
                        "output": "2",
                        "explanation": "Two unique paths are possible:\n1. (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (1, 1) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2)\n2. (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (1, 1) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2)"
                    },
                    {
                        "input": "n = 3, m = 3, arr = [[1, 0, 0], [0, -1, 0], [0, 0, 2]]",
                        "output": "0",
                        "explanation": "No path exists where the robot can visit all empty cells exactly once and end at the destination because of the obstacle."
                    },
                    {
                        "input": "n = 2, m = 2, arr = [[1, 2], [0, 0]]",
                        "output": "1",
                        "explanation": "One possible path: (0,0) -> (1,0) -> (1,1) -> (0,1)"
                    },
                    {
                        "input": "n = 2, m = 2, arr = [[1, 0], [0, 2]]",
                        "output": "0",
                        "explanation": "No possible path."
                    },
                    {
                        "input": "n = 4, m = 2, arr = [[1,0],[0,0],[0,0],[0,2]]",
                        "output": "2",
                        "explanation": "There are two paths possible, one going down and the other going up initially."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Backtrack to explore all possible paths.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}