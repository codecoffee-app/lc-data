{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15153,
            "title": "Unique Sorted List",
            "titleSlug": "unique-sorted-list_2420283",
            "content": "<h4 id=\"a-doubly-linked-list-is-a-data-structure-that-consists-of-sequentially-linked-nodes-and-the-nodes-have-reference-to-both-the-previous-and-the-next-nodes-in-the-sequence-of-nodes\">A doubly-linked list is a data structure that consists of sequentially linked nodes, and the nodes have reference to both the previous and the next nodes in the sequence of nodes.</h4>\n\n<p><br/></p>\n\n<h4 id=\"you-are-given-a-sorted-doubly-linked-list-of-size-n\">You are given a sorted doubly linked list of size <em><strong>&#39;n&#39;</strong></em>.</h4>\n\n<p><br/></p>\n\n<h4 id=\"remove-all-the-duplicate-nodes-present-in-the-linked-list\">Remove all the duplicate nodes present in the linked list.</h4>\n\n<p><br/></p>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>Input: Linked List: 1 &lt;-&gt; 2 &lt;-&gt; 2 &lt;-&gt; 2 &lt;-&gt; 3\n\nOutput: Modified Linked List: 1 &lt;-&gt; 2 &lt;-&gt; 3\n\nExplanation: We will delete the duplicate values \u20182\u2019 present in the linked list.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;n&#39;, the number of elements in the linked list.\nThe second line contains &#39;n&#39; integers, the elements of the linked list separated by a single space.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>Print a single line, the final linked list.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>5\n1 2 2 2 3\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 2 3\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>We will delete the duplicate values \u20182\u2019 present in the linked list.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>4\n1 2 3 4\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 2 3 4\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2 :</h5>\n\n<pre><code>The list contains no duplicates, so the final list is unchanged.\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"expected-time-complexity\">Expected time complexity :</h5>\n\n<pre><code>The expected time complexity is O(&#39;n&#39;).\n</code></pre>\n\n<p><br/></p>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= &#39;n&#39; &lt;= 10^5\n1 &lt;= &#39;data&#39; in any node &lt;= 10^6\n\nTime limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 246,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted doubly linked list of size 'n', remove all duplicate nodes from the list. The resulting list should contain only unique values, preserving the original order.",
                "constraints": [
                    "1 <= 'n' <= 10^5",
                    "1 <= 'data' in any node <= 10^6",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n1 2 2 2 3",
                        "output": "1 2 3",
                        "explanation": "The doubly linked list initially contains the sequence 1 <-> 2 <-> 2 <-> 2 <-> 3. The duplicate '2' values are removed, resulting in the list 1 <-> 2 <-> 3."
                    },
                    {
                        "input": "4\n1 2 3 4",
                        "output": "1 2 3 4",
                        "explanation": "The doubly linked list initially contains the sequence 1 <-> 2 <-> 3 <-> 4. There are no duplicate values in the list, so the list remains unchanged."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>If the next element is the same as the current one, try adjusting the links to remove the next element!</p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time complexity: O(n)\r\n    Space complexity: O(1)\r\n\r\n    Where 'n' is the size of the linked list.\r\n*/\r\n\r\n/**\r\n * Definition of doubly linked list:\r\n * class Node {\r\n * public:\r\n *      int data;\r\n *      Node *prev;\r\n *      Node *next;\r\n *      Node() {\r\n *          this->data = 0;\r\n *          this->prev = NULL;\r\n *          this->next = NULL;\r\n *      }\r\n *      Node(int data) {\r\n *          this->data = data;\r\n *          this->prev = NULL;\r\n *          this->next = NULL;\r\n *      }\r\n *      Node (int data, Node *next, Node *prev) {\r\n *          this->data = data;\r\n *          this->prev = prev;\r\n *          this->next = next;\r\n *      }\r\n * };\r\n *\r\n *************************************************************************/\r\n\r\nNode * removeDuplicates(Node *head)\r\n{\r\n\r\n    // Initialize 'cur' to store head\r\n    Node * cur = head;\r\n\r\n    // Run a while loop\r\n    while (cur != NULL && cur -> next != NULL) {\r\n\r\n        // Next element has same value as the current element\r\n        if (cur -> next -> data == cur -> data) {\r\n            // Adjust links to remove the next element\r\n            cur -> next = cur -> next -> next;\r\n        }\r\n\r\n        // Next element is different from the current element\r\n        else {\r\n            cur = cur -> next;\r\n        }\r\n    }\r\n\r\n    return head;\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O( L )\r\n    Space Complexity: O( 1 )\r\n\r\n    where L denotes the length of the linked list\r\n*/\r\n\r\n/********************************************************\r\n\r\n    Following is the class structure of the Node class:\r\n    \r\n    class Node\r\n    {\r\n        public:\r\n            int data;\r\n            Node next;\r\n            Node(int data)\r\n            {\r\n                this.data = data;\r\n                this.next = null;\r\n            }\r\n    };\r\n\r\n********************************************************/\r\n\r\npublic class Solution {\r\n    public static Node uniqueSortedList(Node head) {\r\n        // Initialize 'cur' to store head\r\n        Node cur = new Node(0);\r\n        cur.next = head;\r\n        Node prev = cur;\r\n\r\n        // Run a while loop\r\n        while (head != null && cur.next != null) {\r\n\r\n            // Next element has same value as the current element\r\n            if (cur.next.data == cur.data) {\r\n                \r\n                // Adjust links to remove the next element\r\n                cur.next = cur.next.next;\r\n            }\r\n\r\n            // Next element is different from the current element\r\n            else {\r\n                cur = cur.next;\r\n            }\r\n        }\r\n\r\n        return head;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "class Node:\r\n    def __init__(self, data=0, next=None, prev=None):\r\n        self.data = data\r\n        self.next = next\r\n        self.prev = prev\r\n\r\n\r\n'''\r\n    Time Complexity: O( n )\r\n    Space Complexity: O( 1 )\r\n\r\n    where n denotes the length of the linked list\r\n'''\r\n\r\n\r\ndef removeDuplicates(head: Node) -> Node:\r\n\r\n    # Initialize 'cur' to store head\r\n    cur = head\r\n\r\n    # Run a while loop\r\n    while cur != None and cur.next != None:\r\n\r\n        # Next element has same value as the current element\r\n        if (cur.next.data == cur.data):\r\n\r\n            # Adjust links to remove the next element\r\n            cur.next = cur.next.next\r\n\r\n        # Next element is different from the current element\r\n        else:\r\n            cur = cur.next\r\n\r\n    return head\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}