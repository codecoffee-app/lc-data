{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9491,
            "title": "Unlock Briefcase",
            "titleSlug": "unlock-briefcase_1060190",
            "content": "<h4 id=\"there-is-a-briefcase-protected-by-a-lock-with-4-circular-wheels-the-password-is-a-sequence-of-4-digits\">There is a briefcase protected by a lock with 4 circular wheels. The password is a sequence of 4 digits.</h4>\n\n<pre><code>1. Each wheel has 10 slots: \u20180\u2019, \u20181\u2019, \u20182\u2019, \u20183\u2019, \u20184\u2019, \u20185\u2019, \u20186\u2019, \u20187\u2019, \u20188\u2019, \u20199\u2019.\n\n2. The wheels can rotate freely and wrap around, \u20189\u2019 can be left rotated to \u20188\u2019 and right rotated to \u20180\u2019, similarly \u20180\u2019 can be right rotated to \u20181\u2019 and left rotated to \u20189\u2019. Rotation of one wheel counts to one rotation.\n\n3. Initially, the lock starts at \u201c0000\u201d, a string representing the state of four wheels. \n</code></pre>\n\n<h4 id=\"you-are-given-a-list-of-dead-ends-codes-of-4-digits-meaning-if-at-any-point-the-lock-displays-any-of-these-codes-the-wheels-of-the-lock-will-stop-turning-and-you-will-be-unable-to-open-it\">You are given a list of dead ends (codes of 4 digits), meaning if at any point the lock displays any of these codes, the wheels of the lock will stop turning, and you will be unable to open it.</h4>\n\n<h4 id=\"given-a-target-representing-the-code-that-will-unlock-the-briefcase-return-the-minimum-total-number-of-turns-required-to-open-the-lock-or-1-if-it-is-not-possible\">Given a target representing the code that will unlock the briefcase, return the minimum total number of turns required to open the lock, or -1 if it is not possible.</h4>\n\n<h4 id=\"input-format\">Input format:</h4>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the number of dead-end codes.\n\nThe second line of each test case contains the \u2018N\u2019 single-space separated dead-end codes.  \n\nThe third line of each test case contains a string \u2018target\u2019 representing the unlocking code.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the minimum number of rotations will be printed.\n\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don\u2019t have to print anything, it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 10 \n1 &lt;=  N &lt;= 5 * 10 ^ 4\n|TARGET| = 4\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 represents the number of dead-end codes, and \u2018|TARGET|\u2019  represents the length of the target.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1 \n5\n0201 0101 0102 1212 2002\n0202\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>6\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>A sequence of valid moves would be \u201c0000\u201d =&gt; \u201c1000\u201d =&gt; \u201c1100\u201d =&gt; \u201c1200\u201d =&gt; \u201c1201\u201d =&gt; \u201c1202\u201d =&gt; \u201c0202\u201d\nNote that a sequence like \u201c0000\u201d =&gt; \u201c0100\u201d =&gt; \u201c0200\u201d =&gt; \u201c0201\u201d =&gt; \u201c0202\u201d would be invalid as these moves lead to a dead end \u201c0201\u201d after which the lock gets stuck and can\u2019t be changed any further. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n1\n0000 \n8888\n1\n8888\n0009\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -6,
            "dislikes": "NA",
            "rephrased": {
                "body": "You have a briefcase secured by a 4-wheel combination lock. Each wheel has digits 0-9.  You can rotate each wheel forward or backward. Rotating a wheel once counts as one turn.  Starting from '0000', determine the minimum number of turns to reach a given target combination, avoiding a list of 'dead ends' where the lock becomes unusable. If the target is unreachable, return -1.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= N <= 5 * 10^4 (Number of dead-end codes)",
                    "|TARGET| = 4 (Length of the target combination)"
                ],
                "testcases": [
                    {
                        "input": "1\n5\n0201 0101 0102 1212 2002\n0202",
                        "output": "6",
                        "explanation": "The shortest sequence to reach '0202' from '0000' without hitting a dead end requires 6 turns. For instance, '0000' -> '1000' -> '1100' -> '1200' -> '1201' -> '1202' -> '0202' is a valid sequence. A sequence going through a dead end like '0201' would be invalid."
                    },
                    {
                        "input": "2\n1\n0000\n8888",
                        "output": "-1",
                        "explanation": "Since '0000' is a dead end, the lock cannot be opened from its initial state. Thus, target 8888 is unreachable."
                    },
                    {
                        "input": "1\n8888\n0009",
                        "output": "1",
                        "explanation": "It requires only one rotation to achieve target '0009' from initial combination '0000'"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Breadth First Search.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}