{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10997,
            "title": "Upside Down Binary Tree",
            "titleSlug": "upside-down-binary-tree_1281853",
            "content": "<h4 id=\"you-are-given-a-rooted-binary-tree-in-this-binary-tree-all-the-right-nodes-are-either-a-leaf-node-with-a-sibling-left-node-sharing-the-same-parent-node-or-empty-your-task-is-to-flip-this-tree-upside-down-such-that-all-right-nodes-turn-into-left-leaf-nodes\">You are given a rooted binary tree. In this binary tree, all the right nodes are either a leaf node with a sibling (left node sharing the same parent node) or empty. Your task is to flip this tree upside down such that all right nodes turn into left leaf nodes.</h4>\n\n<h4 id=\"you-are-given-the-root-of-the-binary-tree-your-task-is-to-return-the-new-root-after-turning-the-tree-upside-down\">You are given the &#39;ROOT&#39; of the binary tree. Your task is to return the new &#39;ROOT&#39; after turning the tree upside down.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>Tree = [5, 4, 3, 1, 2, -1, -1, -1, -1, -1, -1]\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/ud_eg_ip-8622.png\" alt=\"sample_image\"></p>\n\n<pre><code> Upside down Tree :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/ud_eg_op-8623.png\" alt=\"sample_output\"></p>\n\n<pre><code>ANS = [1, 2, 4, -1, -1, 3, 5, -1, -1, -1, -1]\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an Integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the samples below.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, output the upside-down binary tree. \nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000 \n1 &lt;= node.values &lt;= 10 ^ 9\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 6 7 -1 -1 -1 -1 \n6 9 10 4 13 -1 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>6 7 1 -1 -1 -1 -1\n4 13 9 -1 -1 10 6 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>For the first test case:\n\nOriginal tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/ud_sample1_ip-8624.png\" alt=\"alt\"></p>\n\n<pre><code>After turning upside down:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/ud_sample1_op-8625.png\" alt=\"alt\"></p>\n\n<pre><code>For second test case:\n\nOrignal Tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/ud-sample2_in-8627.png\" alt=\"alt\"></p>\n\n<pre><code>After turning upside down:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/ud_sample2_op-8626.png\" alt=\"alt\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n10 -1 -1 \n1 2 3 4 5 -1 -1 6 7 -1 -1 -1 -1 -1 -1 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>10 -1 -1\n6 7 4 -1 -1 5 2 -1 -1 3 1 -1 -1 -1 -1 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a rooted binary tree where all right nodes are either leaf nodes with a sibling (left node sharing the same parent) or empty. Your task is to flip this tree upside down such that all right nodes become left leaf nodes.  Return the new root of the flipped tree.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 5000",
                    "1 <= node.values <= 10^9",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "1 6 7 -1 -1 -1 -1",
                        "output": "6 7 1 -1 -1 -1 -1",
                        "explanation": "The original tree has root 1, left child 6, and right child 7. Flipping it results in a tree with root 6, left child 7, and right child 1, with all subsequent nodes being null."
                    },
                    {
                        "input": "6 9 10 4 13 -1 -1 -1 -1 -1 -1",
                        "output": "4 13 9 -1 -1 10 6 -1 -1 -1 -1",
                        "explanation": "The original tree has root 6, left child 9, and right child 10.  9 has children 4 and 13, while 10 has no children. Flipping it leads to the tree described in the output."
                    },
                    {
                        "input": "10 -1 -1",
                        "output": "10 -1 -1",
                        "explanation": "In this test case, the tree only has root 10 without any children so after upside down it remains same."
                    },
                    {
                        "input": "1 2 3 4 5 -1 -1 6 7 -1 -1 -1 -1 -1 -1",
                        "output": "6 7 4 -1 -1 5 2 -1 -1 3 1 -1 -1 -1 -1",
                        "explanation": "The original tree has root 1, left child 2, and right child 3. 2 has children 4 and 5, and 4 has children 6 and 7.  After the flip, the resulting tree is as described in the output."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we solve this problem recursively? Every time going to the left child?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}