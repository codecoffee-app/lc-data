{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10598,
            "title": "UTF-8",
            "titleSlug": "utf-8_1235195",
            "content": "<h4 id=\"a-character-in-utf-8-can-be-from-1-to-4-bytes-long-subjected-to-the-following-rules\">A character in UTF-8 can be from 1 to 4 bytes long, subjected to the following rules:</h4>\n\n<h4 id=\"1-for-a-1-byte-character-the-first-bit-is-a-0-followed-by-its-unicode-code\">1. For a 1-byte character, the first bit is a 0, followed by its Unicode code.</h4>\n\n<h4 id=\"2-for-n-bytes-characters-the-first-n-bits-are-all-one-s-and-the-n-1-bit-is-0-followed-by-n-1-bytes-with-the-most-significant-2-bits-being-10\">2. For n-bytes characters, the first n-bits are all one\u2019s, and the n + 1 bit is 0, followed by n - 1 bytes, with the most significant 2 bits being 10.</h4>\n\n<h4 id=\"you-are-given-an-array-data-of-integers-representing-the-data-your-task-is-to-find-out-whether-the-given-array-is-a-valid-utf-8-encoding\">You are given an array &#39;DATA&#39; of integers representing the data, Your task is to find out whether the given array is a valid UTF-8 encoding.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>The given input contains only integers, and only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Given data = [196, 128, 1], which represents the octet sequence: 11000101 10000010 00000001.\n\nReturn true because this is a valid UTF-8 sequence for a 2-byte character followed by a 1-byte character.\n</code></pre>\n\n<h4 id=\"input-format\">Input format :</h4>\n\n<pre><code>The first line of input contains an integer T denoting the number of test cases.\n\nThe first line of each test case contains a single integer &#39;N&#39;, where \u2018N\u2019 is the number of elements of the array.\n\nThe second line of each test case contains &#39;N&#39; space-separated integers, denoting the array/list &#39;DATA&#39;.\n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>For each test case, return whether the array denotes a correct UTF-8 sequence or not.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You don\u2019t need to print anything, it has been already taken care of. You just need to implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 4\n1 &lt;= DATA[ i ] &lt; 256\n\nWhere \u2018DATA[ i ]\u2019 is array element at index \u2018i\u2019.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3\n232 136 4\n3\n196 128 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>false\ntrue\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-output-1\">Explanation of the Sample Output 1:</h5>\n\n<pre><code>In test case 1,The array which represented the octet sequence: 11101000 10001100 00000100.\n\nThe first 3 bits are all ones, and the 4th bit is 0 means it is a 3-byte character.\n\nThe next byte is a continuation byte that starts with 10, and that\u2019s correct, but the second continuation byte does not start with 10, so it is invalid and hence we return false.\n\nIn test case 2, The array which represented the octet sequence: which represents the octet sequence: 11000100 10000000 00000001.\n\nIt is a valid UTF-8 encoding for a 2-byte character followed by a 1-byte character, therefore we return true.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1 \n1\n1\n255\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>true\nfalse\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers representing byte data, determine if it represents a valid UTF-8 encoding. Each integer represents a single byte (least significant 8 bits). A UTF-8 character can be 1 to 4 bytes long, following specific bit patterns for the first byte and continuation bytes. Return true if the array is a valid UTF-8 sequence, false otherwise.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 4",
                    "1 <= DATA[ i ] < 256"
                ],
                "testcases": [
                    {
                        "input": "n = 3, data = [232, 136, 4]",
                        "output": "false",
                        "explanation": "The first byte 232 (11101000) indicates a 3-byte character. The second byte 136 (10001100) is a valid continuation byte. However, the third byte 4 (00000100) is not a valid continuation byte (it doesn't start with '10'). Therefore, the sequence is invalid."
                    },
                    {
                        "input": "n = 3, data = [196, 128, 1]",
                        "output": "true",
                        "explanation": "The first byte 196 (11000100) indicates a 2-byte character. The second byte 128 (10000000) is a valid continuation byte. The third byte 1 (00000001) indicates a 1-byte character. This is a valid sequence."
                    },
                    {
                        "input": "n = 1, data = [1]",
                        "output": "true",
                        "explanation": "The byte 1 (00000001) indicates a 1-byte character, which is valid."
                    },
                    {
                        "input": "n = 1, data = [255]",
                        "output": "false",
                        "explanation": "The byte 255 (11111111) is invalid as the first byte of a UTF-8 character because it has more than 4 leading 1's."
                    },
                    {
                        "input": "n = 4, data = [240, 159, 145, 138]",
                        "output": "true",
                        "explanation": "The byte 240 (11110000) indicates a 4-byte character. The following bytes 159 (10011111), 145 (10010001), and 138 (10001010) are all valid continuation bytes (start with '10'). Thus, it's a valid sequence."
                    },
                    {
                        "input": "n = 2, data = [197, 130]",
                        "output": "true",
                        "explanation": "197 (11000101) indicates 2 byte sequence, 130 (10000010) is a valid continuation byte. "
                    },
                    {
                        "input": "n = 2, data = [237,135]",
                        "output": "false",
                        "explanation": "237(11101101) indicates 3 byte sequence, array has size 2 which is invalid"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you check for validity by determining the types of the bytes?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}