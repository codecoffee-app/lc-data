{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7891,
            "title": "Valid Parenthesis",
            "titleSlug": "valid-parenthesis_795104",
            "content": "<h4 id=\"youre-given-a-string-s-consisting-of-and\">You&#39;re given a string <strong><em>&#39;S&#39;</em></strong> consisting of &quot;{&quot;, &quot;}&quot;, &quot;(&quot;, &quot;)&quot;, &quot;[&quot; and  &quot;]&quot; .</h4>\n\n<p><br></p>\n\n<h4 id=\"return-true-if-the-given-string-s-is-balanced-else-return-false\">Return true if the given string &#39;S&#39; is balanced, else return false.</h4>\n\n<p><Br></p>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>&#39;S&#39; = &quot;{}()&quot;.\n\nThere is always an opening brace before a closing brace i.e. &#39;{&#39; before &#39;}&#39;, &#39;(&#39; before &#39;).\nSo the &#39;S&#39; is Balanced.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first and only input line contains a string &#39;S&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>The only line of output contains &#39;Balanced&#39; or &#39;Not Balanced&#39;.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the given function.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>[()]{}{[()()]()}\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>Balanced\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input-1\">Explanation Of the Sample Input 1 :</h5>\n\n<pre><code>There is always an opening brace before a closing brace i.e. &#39;{&#39; before &#39;}&#39;, &#39;(&#39; before &#39;), &#39;[&#39; before &#39;]&#39;.\nSo the &#39;S&#39; is Balanced.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>[[}[\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>Not Balanced\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;N&#39; &lt;= 10^5\n\nWhere &#39;N&#39; is the length of the input string &#39;S&#39;.\nTime Limit: 1 sec\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 398,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S' consisting of the characters '{', '}', '(', ')', '[', and ']', determine if the string is balanced. A string is considered balanced if each opening brace has a corresponding closing brace of the same type in the correct order.",
                "constraints": [
                    "1 <= N <= 10^5, where N is the length of the input string 'S'.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "[()]{}{[()()]()}",
                        "output": "Balanced",
                        "explanation": "The input string has matching pairs of braces in the correct order. For every opening brace, there is a corresponding closing brace of the same type. Therefore, the string is balanced."
                    },
                    {
                        "input": "[[}[",
                        "output": "Not Balanced",
                        "explanation": "The input string is not balanced because the closing brace '}' does not match the opening brace '[' and the braces are not in the correct order."
                    },
                    {
                        "input": "{}()",
                        "output": "Balanced",
                        "explanation": "The input string has matching pairs of braces in the correct order. For every opening brace, there is a corresponding closing brace of the same type. Therefore, the string is balanced."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Last-in-First-Out (LIFO) data structure and check the opening brace for every closing brace.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n\tTime Complexity : O(N)\r\n\tSpace Complexity : O(N)\r\n\r\n\tWhere 'N' is the length of the string.\r\n*/\r\n\r\nbool isValidParenthesis(string s) \r\n{   \r\n    // Make an inbuilt stack.\r\n    stack<char> st; \r\n    char x; \r\n  \r\n    // Traversing int 's'.\r\n    for (int i = 0; i < s.length(); i++)  \r\n    { \r\n        if (s[i] == '(' || s[i] == '[' || s[i] == '{')  \r\n        { \r\n            // Push the element in the stack .\r\n            st.push(s[i]); \r\n            continue; \r\n        } \r\n  \r\n        /* \r\n            If current current character is not opening \r\n            bracket, then it must be closing. So stack \r\n            cannot be empty at this point. \r\n        */\r\n\r\n        if (st.empty()) \r\n        {\r\n            return false; \r\n        }\r\n  \t\t\r\n        // Store the top element.\r\n        x = st.top(); \r\n        st.pop(); \r\n        \r\n        // Check for opening braces in stack of corresponding closing braces.\r\n        switch (s[i]) { \r\n        case ')': \r\n            \r\n            if (x == '{' || x == '[') \r\n            {\r\n                return false; \r\n            }\r\n            break; \r\n  \r\n        case '}': \r\n  \r\n            if (x == '(' || x == '[') \r\n            {\r\n                return false; \r\n            }\r\n            break; \r\n  \r\n        case ']': \r\n            \r\n            if (x == '(' || x == '{')\r\n            {\r\n                return false;\r\n            }\r\n            break; \r\n        } \r\n    } \r\n  \r\n    // Check Empty Stack.\r\n    return (st.empty()); \r\n} \r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\n\tTime Complexity : O(N)\n\tSpace Complexity : O(N)\n\n\tWhere 'N' is the length of the string.\n'''\n\ndef isValidParenthesis(s: str) -> bool:\n    # Make an inbuilt stack to store opening brackets.\n    stack = []\n    \n    # Traversing the input string 's'.\n    for char in s:\n        if char in '([{':\n            # Push the opening bracket into the stack.\n            stack.append(char)\n        else:\n            if not stack:\n                # If the stack is empty and we encounter a closing bracket, return False.\n                return False\n            \n            # Pop the top element from the stack.\n            top = stack.pop()\n            # Check if the closing bracket matches with the last opened bracket.\n            if char == ')' and top != '(':\n                return False\n            elif char == '}' and top != '{':\n                return False\n            elif char == ']' and top != '[':\n                return False\n    \n    # Check if the stack is empty after traversal.\n    return len(stack) == 0\n",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n\tTime Complexity : O(N)\r\n\tSpace Complexity : O(N)\r\n\r\n\tWhere N is the length of the string.\r\n*/\r\n\r\nimport java.util.Stack;\r\n\r\npublic class Solution {\r\n    public static boolean isValidParenthesis(String s) {\r\n        // Make an inbuilt stack.\r\n        Stack<Character> st = new Stack<>();\r\n        char x;\r\n\r\n        // Traversing the Expression.\r\n        for (int i = 0; i < s.length(); i++) {\r\n            if (s.charAt(i) == '(' || s.charAt(i) == '[' || s.charAt(i) == '{') {\r\n                // Push the element in the stack.\r\n                st.add(s.charAt(i));\r\n                continue;\r\n            }\r\n\r\n        /* \r\n            If current current character is not opening \r\n            bracket, then it must be closing. So stack \r\n            cannot be empty at this point. \r\n        */\r\n\r\n            if (st.isEmpty()) {\r\n                return false;\r\n            }\r\n\r\n            // Store the top element.\r\n            x = st.pop();\r\n\r\n            // Check for opening braces in stack of corresponding closing braces.\r\n            switch (s.charAt(i)) {\r\n                case ')':\r\n\r\n                    if (x == '{' || x == '[') {\r\n                        return false;\r\n                    }\r\n                    break;\r\n\r\n                case '}':\r\n\r\n                    if (x == '(' || x == '[') {\r\n                        return false;\r\n                    }\r\n                    break;\r\n\r\n                case ']':\r\n\r\n                    if (x == '(' || x == '{') {\r\n                        return false;\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Check Empty Stack.\r\n        return (st.isEmpty());\r\n    }\r\n}",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}