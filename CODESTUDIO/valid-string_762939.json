{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7714,
            "title": "Valid String",
            "titleSlug": "valid-string_762939",
            "content": "<h4 id=\"you-have-been-given-a-string-s-containing-only-three-types-of-characters-i-e-and\">You have been given a string &#39;S&#39; containing only three types of characters, i.e. &#39;(&#39;, &#39;)&#39; and &#39;*&#39;.</h4>\n\n<h4 id=\"a-valid-string-is-defined-as-follows\">A Valid String is defined as follows:</h4>\n\n<pre><code>1. Any left parenthesis &#39;(&#39; must have a corresponding right parenthesis &#39;)&#39;.\n2. Any right parenthesis &#39;)&#39; must have a corresponding left parenthesis &#39;(&#39;.\n3. Left parenthesis &#39;(&#39; must go before the corresponding right parenthesis &#39;)&#39;.\n4. &#39;*&#39; could be treated as a single right parenthesis &#39;)&#39; or a single left parenthesis &#39;(&#39; or an empty string.\n5. An empty string is also valid.\n</code></pre>\n\n<h4 id=\"your-task-is-to-find-out-whether-the-given-string-is-a-valid-string-or-not\">Your task is to find out whether the given string is a Valid String or not.</h4>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of test cases or queries to run. Then the test case follows.\n\nThe only line of each test case contains a string &#39;S&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case print &#39;Yes&#39; if the string &#39;S&#39; is a valid string otherwise print &#39;No&#39; otherwise.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n\nWhere &#39;N&#39; is the length of the string &#39;S&#39;.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3    \n*())\n(*)\n())*\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>Yes\nYes\nNo\n</code></pre>\n\n<h5 id=\"explanation-of-sample-1\">Explanation of Sample 1:</h5>\n\n<pre><code>In the first test case, we can replace &#39;*&#39; with &#39;(&#39; so that the string becomes &quot;(())&quot;\n\nIn the second test case, we can replace &#39;*&#39; with an empty string so that the string becomes &quot;()&quot;\n\nIn the third test case, there is no way to make the string a valid string.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n((***\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>Yes\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 53,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'S' consisting of '(', ')', and '*', determine if it's a valid string. A valid string adheres to these rules:\n\n1.  Every '(' must have a corresponding ')'.\n2.  Every ')' must have a corresponding '('.\n3.  '(' must precede its corresponding ')'.\n4.  '*' can act as a single '(', a single ')', or an empty string.\n5.  An empty string is also valid.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 5000, where 'N' is the length of the string 'S'.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "*())",
                        "output": "Yes",
                        "explanation": "The '*' can be replaced with '(' to form the valid string '(())'."
                    },
                    {
                        "input": "(*)",
                        "output": "Yes",
                        "explanation": "The '*' can be replaced with an empty string to form the valid string '()'."
                    },
                    {
                        "input": "())*",
                        "output": "No",
                        "explanation": "There is no way to make this string valid."
                    },
                    {
                        "input": "((***",
                        "output": "Yes",
                        "explanation": "Two of the '*' characters can be used as ')' to balance the '(' characters, and the remaining '*' can be considered an empty string."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try each of the three possibilities for every asterisk in the string.</p>",
            "<p>The problems can be broken down into sub-problems. Can you think of any approach to solve those sub-problems first?</p>",
            "<p>Can you think of some basic requirements for a Valid String and greedily check if asterisks can suffice the need of those requirements?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}