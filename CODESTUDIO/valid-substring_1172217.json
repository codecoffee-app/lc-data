{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10241,
            "title": "Valid substring",
            "titleSlug": "valid-substring_1172217",
            "content": "<h4 id=\"you-are-given-a-string-str-consisting-only-of-opening-and-closing-parenthesis-i-e-and-your-task-is-to-find-out-the-length-of-the-longest-valid-parentheses-substring\">You are given a string &#39;STR&#39; consisting only of opening and closing parenthesis i.e.  &#39;(&#39;  and &#39;)&#39;, your task is to find out the length of the longest valid parentheses substring.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The length of the smallest valid substring &#39;()&#39; is 2.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>&#39;STR&#39; = \u201c()()())\u201d here we can see that except the last parentheses all the brackets are making a valid parenthesis. Therefore, the answer for this will be 6.\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; denoting the number of test cases.\n\nThe first and the only line of each test case contains a string \u2018str\u2019 of which you have to tell the longest valid parentheses substring.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return a single integer which is the length of the longest valid substring.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t have to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= |STR| &lt;= 3000\n\nwhere |STR| is the length of the given string.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n()))((())\n))((\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>4\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case:\nGiven &#39;STR&#39; =\u201d()))((())\u201d, we can see that from index 5 to the last, the whole substring is valid. Therefore, the length of the longest valid parentheses substring is 4.\n\n\nFor the second test case:\nGiven &#39;STR&#39; =\u201d))((\u201d, we can see that there is no valid substring present in the string. o, the answer will be 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n()))((((()))))) \n)(()\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>10\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string 'STR' consisting only of opening '(' and closing ')' parentheses, determine the length of the longest valid (well-formed) parentheses substring. A valid parentheses substring contains correctly matched and balanced parentheses. The minimum length of a valid substring is 2 (e.g., '()').",
                "constraints": [
                    "1 <= T <= 5 (Number of test cases)",
                    "1 <= |STR| <= 3000 (Length of the string)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "()))((())",
                        "output": "4",
                        "explanation": "The longest valid parentheses substring in '()))((())' is '(()))' starting from the 5th index, which has a length of 4."
                    },
                    {
                        "input": "))((",
                        "output": "0",
                        "explanation": "There are no valid parentheses substrings in '))((', so the answer is 0."
                    },
                    {
                        "input": "()))((((())))))",
                        "output": "10",
                        "explanation": "The longest valid parentheses substring in '()))((((())))))' is '((((()))))' which has a length of 10."
                    },
                    {
                        "input": ")(()",
                        "output": "2",
                        "explanation": "The longest valid parentheses substring in ')(()' is '()' which has a length of 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you check for all the possible substrings?</p>",
            "<p>Can you calculate the length with the help of indices?&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}