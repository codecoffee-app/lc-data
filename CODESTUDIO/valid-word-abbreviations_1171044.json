{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10180,
            "title": "Valid Word Abbreviations",
            "titleSlug": "valid-word-abbreviations_1171044",
            "content": "<h4 id=\"you-are-given-a-string-str-consisting-of-english-lowercase-letters-you-are-also-provided-another-string-abbr-consisting-of-lowercase-letters-and-digits\">You are given a string \u2018STR\u2019 consisting of English lowercase letters. You are also provided another string \u2018ABBR\u2019 consisting of lowercase letters and digits.</h4>\n\n<h4 id=\"we-say-abbr-matches-str-if-it-fulfils-the-following-condition\">We say \u2018ABBR\u2019 matches \u2018STR\u2019 if it fulfils the following condition:</h4>\n\n<h4 id=\"1-while-matching-if-we-encounter-a-number-x-in-abbr-then-we-have-to-skip-x-characters-in-str-and-keep-on-matching\">1) While matching, if we encounter a number \u2018X\u2019 in \u2018ABBR\u2019, then we have to skip \u2018X\u2019 characters in \u2018STR\u2019 and keep on matching.</h4>\n\n<pre><code>For example: For \u2018STR\u2019 = \u201cabc\u201d, all valid matching \u2018ABBR\u2019 are: [\u201cabc\u201d, \u201c1bc\u201d, \u201c1b1\u201d, \u201c2c\u201d, \u201c3\u201d, \u201ca1c\u201d, \u201ca2\u201d, \u201cab1\u201d].\n</code></pre>\n\n<h4 id=\"your-task-is-to-check-whether-str-matches-with-the-given-abbr-or-not-return-true-if-str-matches-with-abbr-else-return-false\">Your task is to check whether \u2018STR\u2019 matches with the given \u2018ABBR\u2019 or not. Return TRUE if \u2018STR\u2019 matches with \u2018ABBR\u2019 else return FALSE.</h4>\n\n<h4 id=\"for-example\">For example :</h4>\n\n<pre><code>If \u2018STR\u2019 = \u201chello\u201d and \u2018ABBR\u2019= \u201c1e2o\u201d.\n1. As \u2018STR[0]\u2019=\u2019h\u2019 but \u2018ABBR[0]\u2019=1 which means we can skip 1 character from \u2018STR\u2019 so continue matching.\n2. \u2018STR[1]\u2019=\u2019e\u2019 and \u2018ABBR[1]\u2019=\u2019e\u2019 (matches) so continue matching.\n3.\u2018STR[2]\u2019=\u2019l\u2019 and \u2018ABBR[2]\u2019=2 which means we can skip 2 characters from \u2018STR\u2019 so continue matching.\n4. We will not match the 3rd index as skipped in the earlier step.   \n4.\u2018STR[4]\u2019=\u2019o\u2019 and \u2018ABBR[4]\u2019=\u2019o\u2019 (matches). \nSo we can say \u2018STR\u2019 matches with \u2018ABBR\u2019 and return TRUE.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format :</h4>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases.\nThen the T test cases follow.\nFirst and the only line of each test case contains two single space-separated strings representing \u2018STR\u2019 and \u2018ABBR\u2019 respectively.\n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>For every test case, print \u2018YES\u2019 if \u2018STR\u2019 matches \u2018ABBR\u2019 else print \u2018NO\u2019.\nThe output of each test case is printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You don\u2019t have to print anything. It has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1&lt;= T &lt;=100\n1&lt;= |STR| and |ABBR| &lt;=10^4\n\nTime limit: 1 second\n</code></pre>\n<h4 id=\"sample-input-1\">Sample input 1 :</h4>\n\n<pre><code>1\nabbreviations a11s\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample output 1 :</h4>\n\n<pre><code>YES\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-1\">Explanation for sample output 1 :</h4>\n\n<pre><code>For the given \u2018STR\u2019 = \u201cabbreviations\u201d and \u2018ABBR\u2019 = \u201ca11s\u201d, the character at the 0th index of both the strings matches, so we can continue matching for next indices.\nFor the next step, we encounter a number 11 in \u2018ABBR\u2019, which means we have to skip 11 characters from \u2018STR\u2019 and continue matching.\nAfter skipping 11 indices, we move to the 12th index of \u2018STR\u2019. Now,  both \u2018STR[12]\u2019 = \u2018s\u2019 and \u2018ABBR[3]\u2019 = \u2018s\u2019 and match.\nFinally, we reach the end of both strings. So we print YES as an answer.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample input 2 :</h4>\n\n<pre><code>2\nxyzzy 4\nninja 8inja\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample output 2 :</h4>\n\n<pre><code>NO\nNO\n</code></pre>\n\n<h4 id=\"explanation-for-sample-output-2\">Explanation for sample output 2 :</h4>\n\n<pre><code>(i) For the first test case, \u2018ABBR\u2019 has only one digit that is 4 which means we have to skip 4 characters in \u2018STR\u2019 from the starting. And after skipping 4 characters, we are still left with one character in \u2018STR\u2019 and zero characters in \u2018ABBR\u2019. So, we can say that \u2018STR\u2019 does not match with \u2018ABBR\u2019.\n\n(ii) For the second test case, the 0th index of \u2018ABBR\u2019 has a digit that is 8 which means we have to skip 8 characters in \u2018STR\u2019 from the starting. But the length of \u2018STR\u2019 is less than 8 which means we can not skip 8 characters. So, we can say that \u2018STR\u2019 does not match with \u2018ABBR\u2019.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `str` consisting of lowercase English letters and another string `abbr` consisting of lowercase letters and digits, determine if `abbr` is a valid abbreviation of `str`.  An abbreviation is valid if, while traversing `abbr`, encountering a digit `X` means skipping the next `X` characters in `str`. For example, with `str` = \"abc\", valid abbreviations are [\"abc\", \"1bc\", \"1b1\", \"2c\", \"3\", \"a1c\", \"a2\", \"ab1\"]. Implement the function `validAbbreviation (string &str, string &abbr)` that returns `true` if `abbr` matches `str`, and `false` otherwise.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= |str| and |abbr| <= 10^4",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "str = \"abbreviations\", abbr = \"a11s\"",
                        "output": "YES",
                        "explanation": "The character at index 0 ('a') matches in both strings. Then '11' in abbr means skipping 11 characters in 'str'. After skipping, 'str[12]' ('s') matches 'abbr[3]' ('s'). The end of both strings is reached, thus it's a match."
                    },
                    {
                        "input": "str = \"xyzzy\", abbr = \"4\"",
                        "output": "NO",
                        "explanation": "'abbr' has only one digit '4', meaning skip 4 characters from 'str'. This leaves one character in 'str' but nothing in 'abbr', so it doesn't match."
                    },
                    {
                        "input": "str = \"ninja\", abbr = \"8inja\"",
                        "output": "NO",
                        "explanation": "The first character in 'abbr' is '8', so we need to skip 8 characters in 'str'. But the length of 'str' is less than 8, so we can't skip that many characters and the strings can't match."
                    },
                    {
                        "input": "str = \"hello\", abbr = \"1e2o\"",
                        "output": "YES",
                        "explanation": "Skip 1 character in str. 'e' matches 'e'. Skip 2 characters in str. 'o' matches 'o'."
                    },
                    {
                        "input": "str = \"apple\", abbr = \"a3e\"",
                        "output": "YES",
                        "explanation": "'a' matches 'a'. Skip 3 characters in str. 'e' matches 'e'."
                    },
                    {
                        "input": "str = \"leetcode\", abbr = \"l2code\"",
                        "output": "YES",
                        "explanation": "'l' matches 'l'. Skip 2 character in str. 'code' matches 'code'."
                    },
                    {
                        "input": "str = \"internationalization\", abbr = \"i12iz4n\"",
                        "output": "YES",
                        "explanation": "'i' matches 'i'. skip 12 characters, 'i' matches 'i'. skip 4 characters, 'n' matches 'n'."
                    },
                    {
                        "input": "str = \"apple\", abbr = \"a2e\"",
                        "output": "NO",
                        "explanation": "'a' matches 'a'. Skip 2 characters in str. The next character should be 'p', but it is not, so it fails"
                    },
                    {
                        "input": "str = \"abc\", abbr = \"12\"",
                        "output": "NO",
                        "explanation": "Skip 1 character, skip 2 characters. we are left with 0 characters in abbr and 0 characters in str but still have index which is greater than length of string"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Will converting the digits into a number help us?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}