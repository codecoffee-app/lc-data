{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10967,
            "title": "Validate Binary Tree Nodes",
            "titleSlug": "validate-binary-tree-nodes_1281195",
            "content": "<h4 id=\"you-are-given-n-binary-tree-nodes-numbered-from-0-to-n-1-where-node-i-has-two-children-leftchild-i-and-rightcode-i-return-true-if-and-only-if-all-the-given-nodes-form-exactly-one-valid-binary-tree-if-node-i-has-no-left-child-then-left_child-i-will-equal-1-similarly-for-the-right-child\">You are given \u2018N\u2019 binary tree nodes numbered from 0 to N - 1 where node \u2018i\u2019 has two children LEFT&#x5f;CHILD[i] and RIGHT&#x5f;CODE[i]. Return \u2018True\u2019 if and only if all the given nodes form exactly one valid binary tree. If node \u2018i\u2019 has no left child then &#39;LEFT_CHILD[i]&#39; will equal -1, similarly for the right child.</h4>\n\n<h4 id=\"example\">Example:</h4>\n\n<pre><code>Let\u2019s say we have n=4 nodes, &#39;LEFT_CHILD&#39; = {1, -1, 3, -1} and \nRIGHT_CHILD = {2, -1, -1, -1}. So the resulting tree will look like this:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture1-8551.PNG\" alt=\"\">    </p>\n\n<pre><code>It will return True as there is only one valid binary tree and each node has only one parent and there is only one root.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The very first line of input contains an integer \u2018T\u2019 denoting the \nnumber of test cases. \n\nThe first line of every test case contains an integer \u2018N\u2019 denoting \nthe number of nodes of the tree.\n\nThe next two lines of every test case contain the &#39;LEFT_CHILD&#39; array and \n&#39;RIGHT_CHILD&#39; array respectively.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, return either \u2018Yes\u2019 or \u2018No\u2019 that whether from given nodes, we can form exactly one valid binary tree or not. \n\n\nOutput for each test case is printed on a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just return \u2018True\u2019 or \u2018False\u2019 that whether from given nodes we can form exactly one valid binary tree or not. \n\n\nThe nodes have no values and that we only use the node numbers in this problem.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 10^4\nLEFT_CHILD.length == RIGHT_CHILD.length == N\n-1 &lt;= LEFT_CHILD[i], RIGHT_CHILD[i] &lt;= N - 1\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\n1 -1 3 -1\n2 -1 -1 -1\n4\n1 -1 3 -1\n2 3 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>Yes\nNo\n</code></pre>\n\n<h5 id=\"explanation-1\">Explanation 1:</h5>\n\n<pre><code>For the first test case, \nIt is already explained above in the example.\n\nFor the second test case, \nThe resulting tree from the given input will be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/capture2-8552.PNG\" alt=\"\">     </p>\n\n<pre><code>So the output will be \u2018False\u2019 because node 3 has two parents 1 \nand 2.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2\n1 0\n-1 -1\n6\n1 -1 -1 4 -1 -1\n2 -1 -1 5 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code> No\n No\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given 'N' binary tree nodes numbered from 0 to N - 1. Node 'i' has two children, LEFT_CHILD[i] and RIGHT_CHILD[i]. Determine if all the given nodes form exactly one valid binary tree. If node 'i' has no left child, LEFT_CHILD[i] will equal -1. The same applies to the right child.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 10^4",
                    "LEFT_CHILD.length == RIGHT_CHILD.length == N",
                    "-1 <= LEFT_CHILD[i], RIGHT_CHILD[i] <= N - 1",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "4\n1 -1 3 -1\n2 -1 -1 -1",
                        "output": "Yes",
                        "explanation": "The input represents a valid binary tree where node 0 has left child 1 and right child 2, and node 2 has left child 3.  Each node has only one parent and there is only one root."
                    },
                    {
                        "input": "4\n1 -1 3 -1\n2 3 -1 -1",
                        "output": "No",
                        "explanation": "The input represents a graph where node 3 has two parents, 1 and 2. This violates the binary tree property that each node can have at most one parent."
                    },
                    {
                        "input": "2\n1 0\n-1 -1",
                        "output": "No",
                        "explanation": "Here the children are creating a cycle and there is no root."
                    },
                    {
                        "input": "6\n1 -1 -1 4 -1 -1\n2 -1 -1 5 -1 -1",
                        "output": "No",
                        "explanation": "Multiple disconnected components are created, therefore not a valid single binary tree"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to solve the problem by using a disjoint set union method. Also, keep in mind that a tree will have one root and it is one whole connected component.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}