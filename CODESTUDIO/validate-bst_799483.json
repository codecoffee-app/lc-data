{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8013,
            "title": "Validate BST",
            "titleSlug": "validate-bst_799483",
            "content": "<h4 id=\"given-a-binary-tree-with-n-number-of-nodes-check-if-that-input-tree-is-partial-bst-binary-search-tree-or-not-if-yes-return-true-return-false-otherwise\">Given a binary tree with N number of nodes, check if that input tree is Partial BST (Binary Search Tree) or not. If yes, return true, return false otherwise.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-said-to-be-a-partial-bst-if-it-follows-the-following-properties\">A binary search tree (BST) is said to be a Partial BST if it follows the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than and equal to the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than and equal to the node\u2019s data.\n\u2022 Both the left and right subtrees must also be partial binary search trees.\n</code></pre>\n\n<h5 id=\"example\">Example:</h5>\n\n<h4 id=\"input\">Input:</h4>\n\n<p><img src=\"https://files.codingninjas.in/validate-bst-5327.png\" alt=\"BST1\"></p>\n\n<h4 id=\"answer\">Answer:</h4>\n\n<pre><code>Level 1: \n\nAll the nodes in the left subtree of 4 (2, 1, 3) are smaller \nthan 4, all the nodes in the right subtree of the 4 (5) are \nlarger than 4.\n\nLevel 2 :\n\nFor node 2:\nAll the nodes in the left subtree of 2 (1) are smaller than \n2, all the nodes in the right subtree of the 2 (3) are larger than 2.\nFor node 5:\nThe left and right subtree for node 5 is empty.\n\nLevel 3:\n\nFor node 1:\nThe left and right subtree for node 1 are empty.\nFor node 3:\nThe left and right subtree for node 3 are empty.\nBecause all the nodes follow the property of a Partial binary \nsearch tree, the above tree is a Partial binary search tree.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an Integer &#39;t&#39;, which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of input contains the elements of the tree in the level order form separated by a single space.\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample:\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Image1\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return true if the binary tree is a Partial BST, else return false.\n\nOutput for every test case will be denoted in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraint\">Constraint :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 1000\n-10^9 &lt;= data &lt;= 10^9\nwhere N is the number of nodes in the tree, T represents the number of test cases, and data denotes data contained in the node of the binary tree.\n\nDuplicate elements can be in the right subtree or left subtree.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n3 1 5 -1 2 -1 -1 -1 -1\n3 2 5 1 4 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code> true\n false\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input1\">Explanation of the Sample Input1:</h5>\n\n<pre><code>Here we have 2 test cases, hence there are 2 binary trees\n\nTest Case 1: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst1-5335.png\" alt=\"Test1\"></p>\n\n<pre><code> Level 1: \nFor node 3 all the nodes in the left subtree (1,2) are \nless than 3 and all the nodes in the right subtree (5) \nare greater than 3. \n\nLevel 2:\nFor node 1:\nThe left subtree is empty and all the nodes in the right \nsubtree (2) are greater than 1.  \nFor node 5:\nBoth right and left subtrees are empty.\n\nLevel 3:\nFor node 2, both right and left subtrees are empty.\nBecause all the nodes follow the property of a Partial binary \nsearch tree, the function should return true.\n\nTest Case 2: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/validate1-5328.png\" alt=\"Test2\"></p>\n\n<pre><code>For the root node, all the nodes in the right subtree (5) are greater than 3. But node with data 4 in the left subtree of node 3 is greater than 3, this does not satisfy the condition for the Partial binary search tree. Hence, the function should return false. \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 69,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, determine if it is a partial Binary Search Tree (BST). A partial BST satisfies the following conditions: the value of every node in the left subtree is less than or equal to the node's value, the value of every node in the right subtree is greater than or equal to the node's value, and both the left and right subtrees are also partial BSTs.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 1000 (Number of nodes in the tree)",
                    "-10^9 <= data <= 10^9 (Data in the node)"
                ],
                "testcases": [
                    {
                        "input": "root = [3,1,5,null,2,null,null,null,null]",
                        "output": "true",
                        "explanation": "The tree is structured as follows:\n\n      3\n     / \\\n    1   5\n     \\ \n      2\n\n3's left subtree (1, 2) has nodes <= 3, right subtree (5) has nodes >= 3.\n1's right subtree (2) has nodes >= 1.\n5's subtrees are empty.\nAll BST properties are maintained, hence true."
                    },
                    {
                        "input": "root = [3,2,5,1,4,null,null,null,null,null,null]",
                        "output": "false",
                        "explanation": "The tree is structured as follows:\n\n      3\n     / \\\n    2   5\n   / \\   \n  1   4\n\nWhile the right subtree of 3 (5) is >= 3, the left subtree contains 2, 1 and 4.\n4 in the left subtree of 3 is greater than 3, violating BST property, hence false."
                    },
                    {
                        "input": "root = [1,null,2,null,null]",
                        "output": "true",
                        "explanation": "The tree is structured as follows:\n\n      1\n       \\\n        2\n\n1's right subtree is 2 which is >= 1\nThe left subtree is null.\nHence, it is a partial BST, so true."
                    },
                    {
                        "input": "root = [5,1,4,null,null,3,6,null,null,null,null]",
                        "output": "false",
                        "explanation": "The tree is structured as follows:\n\n      5\n     / \\\n    1   4\n       / \\\n      3   6\n\nWhile the left subtree of 5 (1) is <= 5 and the right subtree contains 4, 3 and 6,\nthe node 3 is in the right subtree of 5 but smaller than 5, it should have been bigger or equal.\nHence false."
                    },
                    {
                        "input": "root = [2,1,2,null,null,null,null]",
                        "output": "true",
                        "explanation": "The tree is structured as follows:\n\n      2\n     / \\\n    1   2\n         \n \nEach sub tree satisfies the BST property.\nHence true."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to narrow down the minimum and maximum values for each node.</p>",
            "<p>Try using inorder traversal.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            },
            {
                "name": "Trees",
                "slug": "trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}