{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9244,
            "title": "Validate BST",
            "titleSlug": "validate-bst_981275",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-integers-with-n-number-of-nodes-your-task-is-to-check-if-that-input-tree-is-a-bst-binary-search-tree-or-not\">You have been given a binary tree of integers with N number of nodes. Your task is to check if that input tree is a BST (Binary Search Tree) or not.</h4>\n\n<h4 id=\"a-binary-search-tree-bst-is-a-binary-tree-data-structure-which-has-the-following-properties\">A binary search tree (BST) is a binary tree data structure which has the following properties.</h4>\n\n<pre><code>\u2022 The left subtree of a node contains only nodes with data less than the node\u2019s data.\n\u2022 The right subtree of a node contains only nodes with data greater than the node\u2019s data.\n\u2022 Both the left and right subtrees must also be binary search trees.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<p><img src=\"https://files.codingninjas.in/validate-bst-5327.png\" alt=\"BST1\"></p>\n\n<h4 id=\"answer\">Answer :</h4>\n\n<pre><code>Level 1: \n\nAll the nodes in the left subtree of 4 (2, 1, 3) are smaller \nthan 4, all the nodes in the right subtree of the 4 (5) are \nlarger than 4.\n\nLevel 2 :\n\nFor node 2:\nAll the nodes in the left subtree of 2 (1) are smaller than \n2, all the nodes in the right subtree of the 2 (3) are larger than 2.\nFor node 5:\nThe left and right subtrees for node 5 are empty.\n\nLevel 3:\n\nFor node 1:\nThe left and right subtrees for node 1 are empty.\nFor node 3:\nThe left and right subtrees for node 3 are empty.\n\nBecause all the nodes follow the property of a binary search tree, the above tree is a binary search tree.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39;, which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of input contains the elements of the tree in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n\nExample :\n\nElements are in the level order form. The input consists of values of nodes separated by a single space in a single line. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree2-5139.png\" alt=\"Image1\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print \u2018true\u2019 if the binary tree is a BST, else print \u2018false\u2019.\n\nOutput for every test case will be denoted in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 5000\n-10^6 &lt;= data &lt;= 10^6 and data != -1\n\nwhere N is the number of nodes in the tree, T represents the number of test cases, and \u2018data\u2019 denotes data contained in the node of the binary tree.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n3 1 5 -1 2 -1 -1 -1 -1\n3 2 5 1 4 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code> true\n false\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input1\">Explanation of the Sample Input1 :</h5>\n\n<pre><code>Here we have 2 test cases, hence there are 2 binary trees\n\nTest Case 1: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/bst1-5335.png\" alt=\"Test1\"></p>\n\n<pre><code> Level 1: \nFor node 3 all the nodes in the left subtree (1,2) are less than 3 and all the nodes in the right subtree (5) are greater than 3. \n\nLevel 2:\nFor node 1:\nThe left subtree is empty and all the nodes in the right subtree (2) are greater than 1.  \nFor node 5:\nBoth right and left subtrees are empty.\n\nLevel 3:\nFor node 2, both the right and left subtrees are empty. Because all the nodes follow the property of a binary search tree, the function should return true.\n\nTest Case 2: \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/validate1-5328.png\" alt=\"Test2\"></p>\n\n<pre><code>For the root node, all the nodes in the right subtree (5) are greater than 3. But node with data 4 in the left subtree of node 3 is greater than 3, this does not satisfy the condition for the binary search tree. Hence, the function should return false. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n1 1 2 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>false\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input1\">Explanation of the Sample Input1 :</h5>\n\n<pre><code>As we can see the left child of root is equal to root which violates the property of BST as the left child should be lesser than root.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 29,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the root of a binary tree, determine if it is a valid Binary Search Tree (BST). A valid BST is defined as follows:\n\n*   The left subtree of a node contains only nodes with data less than the node's data.\n*   The right subtree of a node contains only nodes with data greater than the node's data.\n*   Both the left and right subtrees must also be binary search trees.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 5000",
                    "-10^6 <= data <= 10^6 and data != -1",
                    "N is the number of nodes in the tree",
                    "T represents the number of test cases",
                    "data denotes data contained in the node of the binary tree"
                ],
                "testcases": [
                    {
                        "input": "root = [3, 1, 5, -1, 2, -1, -1, -1, -1]",
                        "output": "true",
                        "explanation": "The given tree represents a BST where for node 3, the left subtree (1,2) are less than 3 and right subtree (5) is greater than 3. For node 1, left is empty and right child (2) is greater than 1. Node 5 is a leaf. Therefore, the tree is a BST."
                    },
                    {
                        "input": "root = [3, 2, 5, 1, 4, -1, -1, -1, -1, -1, -1]",
                        "output": "false",
                        "explanation": "The given tree is not a BST. While the right subtree of the root (3) contains nodes greater than 3, the left subtree contains a node (4) which is greater than 3, violating the BST property."
                    },
                    {
                        "input": "root = [1, 1, 2, -1, -1, -1, -1]",
                        "output": "false",
                        "explanation": "The given tree is not a BST because the left child of root is equal to the root, violating the property of BST as the left child should be lesser than the root."
                    },
                    {
                        "input": "root = [2, 1, 3]",
                        "output": "true",
                        "explanation": "A simple BST example. 2 is the root. 1 is the left child (less than 2), and 3 is the right child (greater than 2)."
                    },
                    {
                        "input": "root = [5,1,4,-1,-1,3,6]",
                        "output": "false",
                        "explanation": "Root is 5, left is 1, right is 4. 4's left is 3, and right is 6. Although 6>4, its root 4 is less than grand root 5, which follows the rule of BST. So the tree is not a BST"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to narrow down the minimum and maximum values for each node.</p>",
            "<p>Try using inorder traversal.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}