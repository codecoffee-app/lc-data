{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10974,
            "title": "Verify Preorder Sequence in Binary Search Tree",
            "titleSlug": "verify-preorder-sequence-in-binary-search-tree_1281309",
            "content": "<h4 id=\"you-are-given-an-array-list-arr-consisting-of-n-distinct-integers-you-need-to-check-whether-arr-can-represent-the-preorder-traversal-of-a-binary-search-tree\">You are given an array/list \u2018ARR\u2019 consisting of \u2018N\u2019 distinct integers. You need to check whether \u2018ARR\u2019 can represent the Preorder Traversal of a Binary Search Tree.</h4>\n\n<h4 id=\"you-should-return-true-if-arr-can-represent-preorder-traversal-of-a-binary-search-tree-otherwise-return-false\">You should return true if \u2018ARR\u2019 can represent Preorder Traversal of a Binary Search Tree, otherwise return false.</h4>\n\n<p><img src=\"https://files.codingninjas.in/bst-8576.png\" alt=\"alt text\"></p>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Consider \u2018ARR\u2019 = [40, 30, 35, 80, 100]. You can see that it is the preorder traversal of the Binary Search Tree shown above.\n\nThus, we should return true in this case.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. then \u2018T\u2019 test cases follow.\n\nThe first line of each test case consists of a single integer \u2018N\u2019 representing the size of the list/array \u2018ARR\u2019.\n\nThe second line of each test case consists of \u2018N\u2019 single space-separated integers representing list/ array \u2018ARR\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a single line containing a string \u2018True\u2019 if  \u2018ARR\u2019 can represent Preorder Traversal of a Binary Search Tree, otherwise print \u2018False\u2019.  \n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10 ^ 4\n1 &lt;= ARR[i] &lt;= 10 ^ 9\n\nWhere \u2018ARR[i]\u2019 is the element of the given array \u2018ARR\u2019 at index \u2018i\u2019.   \n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1\n1\n5\n40 30 35 80 100\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\nTrue\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nThere is only one element is \u2018ARR\u2019, and it is the preorder traversal of a Binary Search tree having a single node with value 1.\n\nTest case 2:\nSee the problem statement for an explanation.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3\n2 4 1\n6\n5 2 3 1 7 8\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>False\nFalse\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of distinct integers, determine if it represents the preorder traversal of a valid Binary Search Tree (BST). A valid preorder traversal means there exists a BST such that traversing it in preorder results in the given array.",
                "constraints": [
                    "1 <= T <= 50 (Number of test cases)",
                    "1 <= N <= 10^4 (Size of the array)",
                    "1 <= ARR[i] <= 10^9 (Value of array elements)"
                ],
                "testcases": [
                    {
                        "input": "arr = [1]",
                        "output": "True",
                        "explanation": "A single element array represents a BST with a single node."
                    },
                    {
                        "input": "arr = [40, 30, 35, 80, 100]",
                        "output": "True",
                        "explanation": "The given array is the preorder traversal of a BST with root 40, left subtree with root 30 (and child 35), and right subtree with root 80 (and child 100)."
                    },
                    {
                        "input": "arr = [2, 4, 1]",
                        "output": "False",
                        "explanation": "The array cannot represent a valid BST preorder traversal. After visiting 2, 4 can be a right child of 2. However, 1 should either be a left child of 2 or in the left subtree of 4. This violates BST properties."
                    },
                    {
                        "input": "arr = [5, 2, 3, 1, 7, 8]",
                        "output": "False",
                        "explanation": "Similar to the previous case, this sequence violates the BST property. After 5, 2 goes to the left, then 3 can be a right child of 2. 1 should be to the left of 2, 3. Then 7 and 8 will be to the right of 5 but the left side is messed up."
                    },
                    {
                        "input": "arr = [1,2,3,4,5]",
                        "output": "True",
                        "explanation": "This array can represent the preorder traversal of a BST where each element is the right child of the previous element. Effectively a right-skewed tree."
                    },
                    {
                        "input": "arr = [5,4,3,2,1]",
                        "output": "True",
                        "explanation": "This array can represent the preorder traversal of a BST where each element is the left child of the previous element. Effectively a left-skewed tree."
                    },
                    {
                        "input": "arr = [50, 30, 20, 40, 70, 60, 80]",
                        "output": "True",
                        "explanation": "A valid BST preorder traversal."
                    },
                    {
                        "input": "arr = [50, 30, 20, 40, 70, 60, 55, 80]",
                        "output": "False",
                        "explanation": "The value 55 cannot be the right child of 60, as it should be greater than 50."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use stack to&nbsp; track the closest node for each \u2018i\u2019 for which this \u2018i\u2019th node is on the right subtree using stack</p>",
            "<p>Can you optimize the space complexity of the previous approach (based on the stack)?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Binary Search Trees",
                "slug": "binary-search-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}