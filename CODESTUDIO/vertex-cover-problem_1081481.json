{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9687,
            "title": "Vertex Cover Problem",
            "titleSlug": "vertex-cover-problem_1081481",
            "content": "<h4 id=\"you-have-been-given-an-undirected-graph-having-n-nodes-a-matrix-e-of-size-m-x-2-is-given-which-represents-the-m-edges-such-that-there-is-an-edge-directed-from-node-e-i-0-to-node-e-i-1-you-are-supposed-to-return-the-size-of-the-set-of-the-minimum-number-of-nodes-from-which-all-the-other-nodes-are-reachable-set-of-nodes-vertices-which-contains-at-least-one-point-of-every-edge-in-the-given-graph\">You have been given an undirected graph having \u2018N\u2019 nodes. A matrix \u2018E\u2019 of size &#39;M&#39; x 2 is given which represents the \u2018M\u2019 edges such that there is an edge directed from node &#39;E[i][0]&#39; to node &#39;E[i][1]&#39;. You are supposed to return the size of the set of the minimum number of nodes from which all the other nodes are reachable (set of nodes/ vertices which contains at least one point of every edge in the given graph).</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>In the graph given below:\n\n2 ---- 4 ---- 6\n|      |\n|      |\n|      |\n3 ---- 5\n\nHere, the minimum vertex cover involves vertices 3 and 4. All the edges of the graphs are incident on either 3 or 4 vertex of the graph.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. Nodes are numbered from 1 to &#39;N&#39;.\n\n2. Your solution will run on multiple test cases. If you are using global variables make sure to clear them.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T&#39; representing the number of the test case. \n\nThe first line of each test case argument given is an integer \u2018N\u2019 representing the number of nodes in the graph.\n\nThe second line of each test case contains a given integer \u2018M\u2019 representing the number of edges. \n\nThe next \u2018M\u2019 lines in each test case contain a matrix \u2018E\u2019 of size &#39;M&#39; x 2 which represents the \u2018M\u2019 edges such that there is an edge directed from node &#39;E[i][0]&#39; to node &#39;E[i][1]&#39;.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an integer denoting the size of the set of the minimum number of nodes from which all the other nodes are reachable.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t need to print the output, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n2 &lt;= N &lt;= 31\n1 &lt;= M &lt;= N * (N - 1) / 2\n1 &lt;= E[i][0], E[i][1] &lt;= N\n\nWhere \u2018E[i][0]\u2019 and &#39;E[i][1]&#39; denotes the node numbers of the edge.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5\n6\n1 2\n4 1\n2 4\n3 4\n5 2\n1 3\n3\n2\n1 3\n2 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>3\n1\n</code></pre>\n\n<h5 id=\"explanation-of-output-1\">Explanation of Output 1:</h5>\n\n<pre><code>In test case 1, \n\n2 -- 1 -- 3\n|  \\ |  /\n5     4\n\nThe minimum set of nodes from which all the nodes are reachable can be {2, 3, 4} so the output is 3.\n\nIn test case 2, there are 3 nodes and 2 edges and 1 is connected with both the edges and thus the minimum set will be {1}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n5\n4\n1 2\n2 3\n3 4\n4 5\n2\n1\n1 2\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>2\n1\n</code></pre>\n\n<h5 id=\"explanation-of-output-2\">Explanation of Output 2:</h5>\n\n<pre><code>In test case 1, \n\n1 -- 2 -- 3 -- 4 -- 5\n\nThe minimum set of nodes from which all the nodes are reachable can be {2, 4} so the output is 2.\n\n\nIn test case 2, the minimum set of nodes from which all the nodes are reachable can be {1} or {2} so the output is 1.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph with 'N' nodes and 'M' edges represented by a matrix 'E' (M x 2), where each row 'E[i]' represents an edge between nodes 'E[i][0]' and 'E[i][1]', determine the size of the smallest set of nodes from which all other nodes in the graph are reachable.  This set is also known as the minimum vertex cover.",
                "constraints": [
                    "1 <= T <= 5",
                    "2 <= N <= 31",
                    "1 <= M <= N * (N - 1) / 2",
                    "1 <= E[i][0], E[i][1] <= N",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n6\n1 2\n4 1\n2 4\n3 4\n5 2\n1 3\n3\n2\n1 3\n2 1",
                        "output": "3\n1",
                        "explanation": "Test case 1: The graph has edges 1-2, 4-1, 2-4, 3-4, 5-2, and 1-3. A minimum vertex cover could be {2, 3, 4}, hence size 3.  Test case 2: The graph has edges 1-3 and 2-1. A minimum vertex cover is {1}, hence size 1."
                    },
                    {
                        "input": "5\n4\n1 2\n2 3\n3 4\n4 5\n2\n1\n1 2",
                        "output": "2\n1",
                        "explanation": "Test case 1: The graph has edges 1-2, 2-3, 3-4, and 4-5. A minimum vertex cover could be {2, 4}, hence size 2. Test case 2: The graph has edge 1-2. A minimum vertex cover is {1} or {2}, hence size 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to look for a minimum size set such that all others are directly connected to one of the nodes of our selected set.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}