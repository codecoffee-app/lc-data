{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9312,
            "title": "Vertical Binary Tree",
            "titleSlug": "vertical-binary-tree_982801",
            "content": "<h4 id=\"you-are-given-an-arbitrary-binary-tree-consisting-of-n-nodes-numbered-from-1-to-n-your-task-is-to-print-the-nodes-of-this-tree-in-the-vertical-order\">You are given an arbitrary binary tree consisting of N nodes numbered from 1 to N, your task is to print the nodes of this tree in the vertical order.</h4>\n\n<p><img src=\"https://files.codingninjas.in/ex41-6763.PNG\" alt=\"altImage\"></p>\n\n<h4 id=\"v1-v2-v3-v4-and-v5-in-the-above-figure-denotes-the-vertical-levels-of-the-given-binary-tree-now-if-we-want-to-print-the-tree-in-the-vertical-order-then-we-will-start-printing-the-node-values-on-the-segment-v1-and-will-continue-the-same-procedure-till-the-segment-v5-and-while-printing-the-node-values-for-any-vertical-level-we-will-check-if-there-is-any-node-to-the-left-of-the-current-level-which-does-not-lie-on-any-of-the-line-segment-then-we-will-include-that-node-also-in-the-current-level-for-instance-node-with-value-7-can-be-included-in-the-level-v3-and-the-node-with-value-8-can-be-included-in-the-level-v4\">V1, V2, V3, V4 and V5 in the above figure denotes the vertical levels of the given binary tree. Now, if we want to print the tree in the vertical order, then we will start printing the node values on the segment V1 and will continue the same procedure till the segment V5, and while printing the node values for any vertical level, we will check if there is any node to the left of the current level which does not lie on any of the line segment then we will include that node also in the current level. For instance node with value 7 can be included in the level V3, and the node with value 8 can be included in the level V4.</h4>\n\n<h4 id=\"the-vertical-traversal-for-the-above-binary-tree-would-be-6-4-2-7-8-3-9\">The vertical traversal for the above binary tree would be 6 4 2 7 8 3 9.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1) The root node will be fixed and will be provided in the function.\n2) Two nodes in the tree can have the same values, all values in the tree will be positive.\n3) While printing the nodes for any particular vertical level print them in sorted order, i.e. in the above example nodes in the level 3 are 2,7 and 8 so it will be printed as 2 7 8.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains a single integer T, representing the number of test cases.\n\nThe first line of each test case contains a single integer N denoting the number of nodes in the tree. \n\nThe second line contains the values of the nodes of the tree in the level order form ( -1 for NULL node) Refer to the example for further clarification.\n</code></pre>\n\n<p>Example: \n    Consider the binary tree</p>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2020-10-09-12-55-45-5134.png\" alt=\"altImage\"></p>\n\n<h5 id=\"the-input-of-the-tree-depicted-in-the-image-above-will-be-like\">The input of the tree depicted in the image above will be like:</h5>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print X space-separated integers, denoting the node values in the order as described in the problem statement.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 10^4\n1 &lt;= nodeVal &lt;= 10^9\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n3\n1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2 1 3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<p><img src=\"https://files.codingninjas.in/ex42-6734.PNG\" alt=\"altImage\"></p>\n\n<pre><code>Vertical level V1 will cover the node with value 2 only, then vertical level V2 covers node with value 1, and vertical level 3 will cover the nodes with value 3. So the final answer will be 2 1 3\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n4\n5 6 7 8 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>8 6 5 7\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<p><img src=\"https://files.codingninjas.in/ex43-6735.PNG\" alt=\"altImage\"></p>\n\n<pre><code>The vertical level V1 will cover the node with value 8, level V2 will cover node with value 6, level V3 will cover the node with value 8 and the level V4 will cover the node with value 7.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree with N nodes numbered from 1 to N, print the nodes in vertical order. The vertical order traversal prints nodes level by level from left to right. For each level, nodes should be printed in sorted order.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 10^4",
                    "1 <= nodeVal <= 10^9",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "3\n1 2 3 -1 -1 -1 -1",
                        "output": "2 1 3",
                        "explanation": "Vertical level 1 contains node 2, level 2 contains node 1, and level 3 contains node 3. Therefore, the output is 2 1 3."
                    },
                    {
                        "input": "4\n5 6 7 8 -1 -1 -1 -1 -1",
                        "output": "8 6 5 7",
                        "explanation": "Vertical level 1 contains node 8, level 2 contains node 6, level 3 contains node 5, and level 4 contains node 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Level- Order Traversal.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}