{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14193,
            "title": "Vertical Order Traversal",
            "titleSlug": "vertical-order-traversal_2041990",
            "content": "<h4 id=\"the-ultimate-ninja-ankush-is-a-straightforward-no-nonsense-guy-and-loves-binary-trees-and-he-has-given-you-a-binary-tree-and-you-have-to-return-the-vertical-order-traversal-of-the-values-of-the-nodes-of-the-given-tree\">The Ultimate Ninja Ankush is a straightforward, no-nonsense guy and loves binary Trees, and he has given you a binary tree, and you have to return the vertical order traversal of the values of the nodes of the given tree.</h4>\n\n<h4 id=\"for-each-node-at-position-x-y-x-1-y-1-will-be-its-left-child-position-while-x-1-y-1-will-be-the-right-child-position\">For each node at position (\u2018X\u2019, \u2018Y\u2019), (\u2018X\u2019-1, \u2018Y\u2019-1) will be its left child position while (\u2018X\u2019+1, \u2018Y\u2019-1) will be the right child position.</h4>\n\n<h4 id=\"running-a-vertical-line-from-x-infinity-to-x-infinity-now-whenever-this-vertical-line-touches-some-nodes-we-need-to-add-those-values-of-the-nodes-in-order-starting-from-top-to-bottom-with-the-decreasing-y-coordinates\">Running a vertical line from X = -infinity to X = +infinity, now whenever this vertical line touches some nodes, we need to add those values of the nodes in order starting from top to bottom with the decreasing \u2018Y\u2019 coordinates.</h4>\n\n<h4 id=\"print-the-vertical-order-of-the-tree-to-make-the-ultimate-ninja-happy\">Print the vertical order of the tree, to make the Ultimate Ninja Happy.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>If two nodes have the same position, then the value of the node that is added first will be the value that is on the left side.\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>For the binary tree in the image below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/binarytree-5037.png\" alt=\"alt text\"></p>\n\n<pre><code>The vertical order traversal will be {2, 7, 5, 2, 6, 5, 11, 4, 9}.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the test cases are as follows.\n\nThe only line of each test case contains elements in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place. So -1 would not be a part of the tree nodes.\n\nFor example, the input for the tree depicted in the below image will be:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>For example taking a tree:\n\n1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print the vertical order traversal of the given binary tree separated by single spaces.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 100\n0 &lt;= &#39;N&#39; &lt;= 3000\n0 &lt;= &#39;VAL&#39; &lt;= 10^5\n\nWhere &#39;VAL&#39; is the value of any binary tree node.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 4 -1 -1 -1 -1 -1\n1 2 -1 3 -1 4 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4 2 1 3 \n4 3 2 1 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, the vertical order traversal of the given binary tree will be {{4}, {2}, {1}, {3}}.\n\nFor the second test case, the vertical order traversal of the given binary tree will be {{4}, {3}, {2}, {1}}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2 1 -1 -1 -1\n0 1 2 4 5 3 6 -1 -1 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 2\n4 1 7 0 5 3 2 6 \n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>For the first test case, the vertical order traversal of the given binary tree will be {{1}, {2}}.\n\nFor the second test case, the vertical order traversal of the given binary tree will be {{4}, {1, 7}, {0, 5, 3}, {2}, {6}}.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, return the vertical order traversal of the values of its nodes. For each node at position (X, Y), its left child will be at (X-1, Y-1) and its right child at (X+1, Y-1). The vertical order traversal is obtained by running a vertical line from X = -infinity to X = +infinity and adding the node values encountered, from top to bottom (decreasing Y coordinates). If two nodes have the same position, the node that appears on the left side should be added first.",
                "constraints": [
                    "1 <= 'T' <= 100",
                    "0 <= 'N' <= 3000",
                    "0 <= 'VAL' <= 10^5, where 'VAL' is the value of any binary tree node."
                ],
                "testcases": [
                    {
                        "input": "root = [1, 2, 3, 4, -1, -1, -1, -1, -1]",
                        "output": "4 2 1 3",
                        "explanation": "The vertical order traversal of the given binary tree will be {{4}, {2}, {1}, {3}}."
                    },
                    {
                        "input": "root = [1, 2, -1, 3, -1, 4, -1, -1, -1]",
                        "output": "4 3 2 1",
                        "explanation": "The vertical order traversal of the given binary tree will be {{4}, {3}, {2}, {1}}."
                    },
                    {
                        "input": "root = [2, 1, -1, -1, -1]",
                        "output": "1 2",
                        "explanation": "The vertical order traversal of the given binary tree will be {{1}, {2}}."
                    },
                    {
                        "input": "root = [0, 1, 2, 4, 5, 3, 6, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1]",
                        "output": "4 1 7 0 5 3 2 6",
                        "explanation": "The vertical order traversal of the given binary tree will be {{4}, {1, 7}, {0, 5, 3}, {2}, {6}}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about a more time efficient approach?</p><p><br>&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}