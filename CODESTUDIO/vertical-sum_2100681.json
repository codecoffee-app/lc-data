{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14255,
            "title": "Vertical Sum",
            "titleSlug": "vertical-sum_2100681",
            "content": "<h4 id=\"given-a-binary-tree-having-a-positive-integer-written-on-each-of-its-nodes-your-task-is-to-find-the-vertical-sum-of-node-values-i-e-the-sum-of-nodes-that-can-be-connected-by-a-vertical-line\">Given a binary tree having a positive integer written on each of its nodes. Your task is to find the vertical sum of node values i.e. the sum of nodes that can be connected by a vertical line.</h4>\n\n<h4 id=\"a-binary-tree-is-a-tree-in-which-each-parent-node-has-at-most-two-children\">A binary tree is a tree in which each parent node has at most two children.</h4>\n\n<h4 id=\"you-are-required-to-print-the-sum-along-vertical-lines-from-the-leftmost-node-and-moving-to-the-rightmost-node\">You are required to print the sum along vertical lines from the leftmost node and moving to the rightmost node.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>Consider the following Binary Tree:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/copy-of-untitled-diagram-3-6659.png\" alt=\"sample-tree\"></p>\n\n<pre><code>So the final answer is\n12 9 11 6\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\nThe next \u2018T\u2019 lines represent the \u2018T\u2019 test cases.\n\nThe first line of each test case contains the elements of the tree in the level order form separated by a single space. If any node does not have a left or right child, take -1 in its place.\nFor example, the input for the tree depicted in the below image would be :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/0000000000004189.png\" alt=\"alt text\"></p>\n\n<pre><code>1\n2 3\n4 -1 5 6\n-1 7 -1 -1 -1 -1\n-1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = 4\nRight child of 2 = null (-1)\nLeft child of 3 = 5\nRight child of 3 = 6\n\nLevel 4 :\nLeft child of 4 = null (-1)\nRight child of 4 = 7\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 6 = null (-1)\nRight child of 6 = null (-1)\n\nLevel 5 :\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null (-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 4 -1 5 6 -1 7 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print the vertical sum of node values separated by a space in a separate line.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 3000\n1 &lt;= node data &lt;= 10^9\n\nTime Limit: 1sec     \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample input 1:</h4>\n\n<pre><code>2\n1 2 3 -1 10 5 6 -1 -1 -1 8 -1 -1 -1 -1\n20 8 22 5 3 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample output 1:</h4>\n\n<pre><code>2 16 11 6\n5 8 23 22\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h4>\n\n<pre><code>For the first test case:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/copy-of-untitled-diagram-2-6660.png\" alt=\"sample-input\"></p>\n\n<pre><code>As shown in the above figure,\nNodes connected by Line 1 = 2, Sum=  2   \nNodes connected by Line 2= 1,5,10 Sum = 16  (1+5+10)\nNodes connected by Line 3=  3,8, Sum =11  (3+8)\nNodes connected by Line 4= 6, Sum= 6 \n\nSo Our answer is\n2 16 11 6\n\nFor the second test case :\n\nNodes connected by Line 1 = 5 Sum=  5  \nNodes connected by Line 2 = 8 Sum = 8   \nNodes connected by Line 3 =20,3 Sum =23 (20+3)\nNodes connected by Line 4 =  22  Sum= 22\n\nSo Our answer is\n5 8 23 22\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample input 2:</h4>\n\n<pre><code>2 \n1 2 3 4 -1 6 7 -1 -1 -1 8 -1 -1 -1 -1 \n1 5 -1 6 -1 7 -1 -1 -1 \n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample output 2:</h4>\n\n<pre><code>4 2 7 11 7\n7 6 5 1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree where each node contains a positive integer, compute the sum of node values along each vertical line. Return a vector containing these sums, ordered from the leftmost to the rightmost vertical line.  A vertical line connects nodes at the same horizontal distance from the root. You are provided the root node of the tree as input.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 3000 (Number of nodes in the tree)",
                    "1 <= node data <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "root=createTree([1, 2, 3, -1, 10, 5, 6, -1, -1, -1, 8, -1, -1, -1, -1])",
                        "output": "2 16 11 6",
                        "explanation": "The vertical sums are calculated as follows:\n- Line 1: 2\n- Line 2: 1 + 5 + 10 = 16\n- Line 3: 3 + 8 = 11\n- Line 4: 6"
                    },
                    {
                        "input": "root=createTree([20, 8, 22, 5, 3, -1, -1, -1, -1, -1, -1])",
                        "output": "5 8 23 22",
                        "explanation": "The vertical sums are calculated as follows:\n- Line 1: 5\n- Line 2: 8\n- Line 3: 20 + 3 = 23\n- Line 4: 22"
                    },
                    {
                        "input": "root=createTree([1, 2, 3, 4, -1, 6, 7, -1, -1, -1, 8, -1, -1, -1, -1])",
                        "output": "4 2 7 11 7",
                        "explanation": "The vertical sums are calculated as follows:\n- Line 1: 4\n- Line 2: 2\n- Line 3: 1 + 6 = 7\n- Line 4: 3 + 8 = 11\n- Line 5: 7"
                    },
                    {
                        "input": "root=createTree([1, 5, -1, 6, -1, 7, -1, -1, -1])",
                        "output": "7 6 5 1",
                        "explanation": "The vertical sums are calculated as follows:\n- Line 1: 7\n- Line 2: 6\n- Line 3: 5\n- Line 4: 1"
                    },
                    {
                        "input": "root=createTree([10, -1, 11, -1, 12, -1,13])",
                        "output": "10 11 12 13",
                        "explanation": "The vertical sums are calculated as follows:\n- Line 1: 10\n- Line 2: 11\n- Line 3: 12\n- Line 4: 13"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think of a data structure which can store the sum of nodes at the same horizontal distance from the root.</p>",
            "<p>Try to think of a linear data structure in which we can store the sum of nodes.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            },
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}