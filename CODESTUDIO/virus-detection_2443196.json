{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15370,
            "title": "Virus Detection",
            "titleSlug": "virus-detection_2443196",
            "content": "<h4 id=\"in-a-database-each-stored-file-is-named-by-a-string-of-size-n-but-due-to-some-error-in-the-security-some-of-the-files-got-infected-by-a-virus-given-two-strings-a-and-b-and-a-virus-string-c-your-task-is-to-tell-the-number-of-files-that-are-not-affected-by-the-virus-an-unaffected-file-follows-the-given-conditions\">In a database, each stored file is named by a string of size \u2018N\u2019. But due to some error in the security, some of the files got infected by a virus. Given two strings \u2018A\u2019 and \u2018B\u2019 and a virus string \u2018C\u2019, Your task is to tell the number of files that are not affected by the virus. An unaffected file follows the given conditions:</h4>\n\n<pre><code>The name of the file should be greater than or equal to the string \u2018A\u2019.\nThe name of the file should be less than or equal to string \u2018B\u2019.\nThe name of the file should not contain the virus string as a substring \u2018C\u2019.\nSince the answer can be very large, print answer % (10^9 + 7).\n</code></pre>\n\n<h5 id=\"for-example\">For Example</h5>\n\n<pre><code>If N=2 and string \u2018A\u2019 = \u201cbc\u201d and string \u2018B\u2019 = \u201cbm\u201d and virus string \u2018C\u2019 = \u201dg\u201d.So the files that are not affected are \u201cbc\u201d, \u201cbd\u201d, \u201cbe\u201d, \u201cbf\u201d, \u201cbh\u201d, \u201cbi\u201d, \u201cbj\u201d, \u201cbk\u201d, \u201cbl\u201d.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer, &#39;N\u2019, denoting the length of the file\u2019s name.\n\nThe second line contains three strings corresponding to \u2018A\u2019, \u2019B\u2019 and \u2018C\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an integer corresponding to the number of unaffected files  % (10^9 +7).  \n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= N &lt;= 500.\nlength of \u2018A\u2019 and \u2018B\u2019 == N.\n1 &lt;= length of string \u2018C\u2019 &lt;= N .  \n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\nbc bl g\n1\nb f c\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>9\n4\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For the first test case,\n\nThe name of the unaffected files that satisfies the given conditions are:\n\u201cbc\u201d, \u201cbd\u201d, \u201cbe\u201d, \u201cbf\u201d, \u201cbh\u201d, \u201cbi\u201d, \u201cbj\u201d, \u201cbk\u201d, \u201cbl\u201d.\n\nHence, the answer is 9. \n\nFor the second test case:\n\nThe name of the unaffected files that satisfies the given conditions are:\n\u201cb\u201d, \u201cd\u201d, \u201ce\u201d, \u201cf\u201d.\n\nHence, the answer is 4.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2\nac cd x\n2\ncd da d\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>52\n22\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 3,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings 'A' and 'B' of length 'N', and a virus string 'C', determine the number of strings of length 'N' that are lexicographically greater than or equal to 'A', less than or equal to 'B', and do not contain 'C' as a substring.  Return the result modulo (10^9 + 7).",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 500",
                    "1 <= length of string \u2018C\u2019 <= N"
                ],
                "testcases": [
                    {
                        "input": "n = 2, a = \"bc\", b = \"bl\", c = \"g\"",
                        "output": "9",
                        "explanation": "The unaffected files are \"bc\", \"bd\", \"be\", \"bf\", \"bh\", \"bi\", \"bj\", \"bk\", \"bl\"."
                    },
                    {
                        "input": "n = 1, a = \"b\", b = \"f\", c = \"c\"",
                        "output": "4",
                        "explanation": "The unaffected files are \"b\", \"d\", \"e\", \"f\"."
                    },
                    {
                        "input": "n = 2, a = \"ac\", b = \"cd\", c = \"x\"",
                        "output": "52",
                        "explanation": "All strings from \"ac\" to \"cd\" are valid since none contain 'x'."
                    },
                    {
                        "input": "n = 2, a = \"cd\", b = \"da\", c = \"d\"",
                        "output": "22",
                        "explanation": "The valid strings are those between \"cd\" and \"da\" that do not contain \"d\" as a substring. This excludes \"cd\", \"da\", and a few other strings that contain 'd'."
                    },
                    {
                        "input": "n = 3, a = \"aaa\", b = \"ccc\", c = \"ab\"",
                        "output": "27",
                        "explanation": "All combinations from aaa to ccc, removing those that contain ab"
                    },
                    {
                        "input": "n = 4, a = \"aaaa\", b = \"bbbb\", c = \"aab\"",
                        "output": "405",
                        "explanation": "Strings of length 4 between aaaa and bbbb which do not contain aab"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to find each possible file name and check if it is affected or not.</p>",
            "<p>Try to check the virus string while forming the file name recursively.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}