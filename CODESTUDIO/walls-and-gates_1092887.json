{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9819,
            "title": "Walls and gates",
            "titleSlug": "walls-and-gates_1092887",
            "content": "<h4 id=\"you-are-given-a-matrix-having-n-rows-and-m-columns-each-cell-of-the-matrix-can-only-contain-three-values-as-given-below\">You are given a matrix having \u2018N\u2019 rows and \u2018M\u2019 columns. Each cell of the matrix can only contain three values as given below:</h4>\n\n<pre><code>-1 -&gt; It denotes a wall or an obstacle\n\n0  -&gt; It denotes a gate\n\n2^31 - 1 =  2147483647 ( INF ) -&gt; An infinitely large value  denotes the empty room.\n\nFor each empty room (denoted by INF), you have to refill it with the distance to its nearest gate. If none of the gates is reachable from an empty room then the value \u2018INF\u2019 will remain as it is.\n</code></pre>\n\n<h5 id=\"example\">Example</h5>\n\n<pre><code>For the matrix [[0,-1],[0,2147483647]] the updated matrix will be [[0,-1],[0,1]].\n</code></pre>\n\n<h5 id=\"note\">Note</h5>\n\n<pre><code>The distance between two cells having their coordinates (x1,y1) and (x2,y2) are abs(x2-x1) + abs(y2-y1).\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe next 2*T lines describe the \u2018T\u2019 test cases.\n\nThe first line of each test case contains two space-separated positive integers \u2018N\u2019 and \u2018M\u2019 denoting the number of the rows and columns in a matrix respectively. \n\nThe next \u2018N\u2019 lines of each test case contain \u2018M\u2019 space-separated integers among -1, 0, and 2^31 - 1.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>The output of each test case should contain a matrix of size N x M where each empty cell will contain the distance to its nearest gate.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n1 &lt;= N &lt;= 10^4  \n1 &lt;= M &lt;= 10^4\n1 &lt;= N*M &lt;= 10^4 \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2 2\n2147483647 -1\n-1 0\n4 4\n2147483647 -1 0 2147483647\n2147483647 2147483647 2147483647 -1\n2147483647 -1 2147483647 -1\n0 -1 2147483647 2147483647\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2147483647 -1\n-1 0\n3 -1 0 1\n2 2 1 -1\n1 -1 2 -1\n0 -1 3 4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>Test case 1:\n\nThere is no path from the empty cell at [0.0] to the only gate at [1,1] .\n\nTest case 2:\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/screenshot-from-2021-01-14-22-57-07-7324.png\" alt=\"alt text\"></p>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2 3\n-1 0 2147483647\n-1 0 2147483647\n3 3\n0 -1 2147483647\n0 -1 2147483647\n0 -1 2147483647\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1 0 1\n-1 0 1\n0 -1 2147483647\n0 -1 2147483647\n0 -1 2147483647\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a matrix of N rows and M columns. Each cell can have one of three values:\n\n*   -1: Represents a wall or obstacle.\n*   0: Represents a gate.\n*   2147483647 (INF): Represents an empty room.\n\nFor each empty room (INF), determine the distance to its nearest gate. Update the empty room's value with this distance. If a gate is unreachable from an empty room, the empty room's value remains INF.\n\nThe distance between two cells (x1, y1) and (x2, y2) is calculated as |x2 - x1| + |y2 - y1|.",
                "constraints": [
                    "1 <= T <= 50",
                    "1 <= N <= 10^4",
                    "1 <= M <= 10^4",
                    "1 <= N*M <= 10^4",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "2\n2 2\n2147483647 -1\n-1 0\n4 4\n2147483647 -1 0 2147483647\n2147483647 2147483647 2147483647 -1\n2147483647 -1 2147483647 -1\n0 -1 2147483647 2147483647",
                        "output": "2147483647 -1\n-1 0\n3 -1 0 1\n2 2 1 -1\n1 -1 2 -1\n0 -1 3 4",
                        "explanation": "Test case 1: The empty room at [0, 0] has no path to the gate at [1, 1], so it remains INF.\n\nTest case 2: The output matrix reflects the shortest distance from each empty room to its nearest gate. For instance, the top-left empty room has a distance of 3 to the gate at [3, 0]."
                    },
                    {
                        "input": "2\n2 3\n-1 0 2147483647\n-1 0 2147483647\n3 3\n0 -1 2147483647\n0 -1 2147483647\n0 -1 2147483647",
                        "output": "-1 0 1\n-1 0 1\n0 -1 2147483647\n0 -1 2147483647\n0 -1 2147483647",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Perform BFS from each cell</p>",
            "<p>Instead of performing BFS from each cell, we can perform a BFS from the gates.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}