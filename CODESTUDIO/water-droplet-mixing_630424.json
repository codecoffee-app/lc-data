{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7190,
            "title": "Water droplet mixing",
            "titleSlug": "water-droplet-mixing_630424",
            "content": "<h4 id=\"consider-a-pipe-of-length-l-the-pipe-has-n-water-droplets-at-n-different-positions-within-it-each-water-droplet-is-moving-towards-the-end-of-the-pipe-x-l-at-different-speeds-when-a-water-droplet-mixes-with-another-water-droplet-it-assumes-the-speed-of-the-water-droplet-it-is-mixing-with-or-to-put-it-in-other-words-the-water-resulting-water-droplet-formed-post-mixing-will-take-the-speed-of-the-smaller-ones\">Consider a pipe of length L. The pipe has N water droplets at N different positions within it. Each water droplet is moving towards the end of the pipe (x = L) at different speeds. When a water droplet mixes with another water droplet, it assumes the speed of the water droplet it is mixing with, or to put it in other words, the water resulting water droplet formed post mixing will take the speed of the smaller ones.</h4>\n\n<h4 id=\"determine-the-number-of-droplets-that-come-out-of-the-pipe\">Determine the number of droplets that come out of the pipe.</h4>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line contains an integer &#39;t&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case or query contains two integers(N and L) separated by a single space. Where &#39;N&#39; represents the number of water droplets present in the pipe initially and &#39;L&#39; represents the length of the pipe.\n\nThe second line contains &#39;N&#39; single space-separated integers representing the positions of the droplets initially.\n\nThe third line contains &#39;N&#39; single space-separated integers representing the velocities of the droplets initially.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return the number of water droplets that come out of the pipe.\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The positions of all the droplets are unique in that is no water droplet will have the same initial position.\n\nYou do not need to print anything, it has already been taken care of.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= t &lt;= 100\n0 &lt;= N &lt;= 10^5\n1 &lt;= L &lt;= 10^9\n0 &lt;= Position[i] &lt;= L\n1 &lt;= Speed[i] &lt;= 10^9\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n5 12\n10 8 0 5 3\n2 4 1 1 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>3\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n2 5\n0 1\n1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 1,
            "dislikes": "NA",
            "rephrased": {
                "body": "A pipe of length L has N water droplets at different positions. Each droplet moves towards the end of the pipe (x = L) with its own speed. When droplets collide, they merge and the resulting droplet adopts the *slower* speed of the two. Determine the number of droplets that will exit the pipe.",
                "constraints": [
                    "1 <= t <= 100",
                    "0 <= N <= 10^5",
                    "1 <= L <= 10^9",
                    "0 <= Position[i] <= L",
                    "1 <= Speed[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 5, l = 12, initialPosition = [10, 8, 0, 5, 3], velocity = [2, 4, 1, 1, 3]",
                        "output": "3",
                        "explanation": "Initially 5 droplets are present. Droplets at positions 5 and 3 mix, speed becomes 1. Then droplet at 0 mixes with this new droplet, speed still 1. Droplets at 10 and 8 remain unaffected. Finally, 3 droplets reach the end."
                    },
                    {
                        "input": "n = 2, l = 5, initialPosition = [0, 1], velocity = [1, 1]",
                        "output": "2",
                        "explanation": "Two droplets, at positions 0 and 1, each with speed 1. They reach the end independently."
                    },
                    {
                        "input": "n = 3, l = 10, initialPosition = [0, 2, 5], velocity = [5, 2, 1]",
                        "output": "1",
                        "explanation": "The droplet at 2 mixes with the droplet at 5. The speed becomes 1. Then the droplet at position 0 mixes with the merged droplet (at some point), the speed remains 1. Finally only one droplet exits."
                    },
                    {
                        "input": "n = 4, l = 10, initialPosition = [1, 2, 3, 4], velocity = [4, 3, 2, 1]",
                        "output": "1",
                        "explanation": "The droplets merge one by one. Eventually all droplets merge into 1 slow moving droplet with speed 1."
                    },
                    {
                        "input": "n = 1, l = 10, initialPosition = [0], velocity = [10]",
                        "output": "1",
                        "explanation": "Only one droplet exists, so it reaches the end."
                    },
                    {
                        "input": "n = 0, l = 10, initialPosition = [], velocity = []",
                        "output": "0",
                        "explanation": "No droplets exist, so zero droplets reach the end."
                    },
                    {
                        "input": "n = 3, l = 5, initialPosition = [0, 2, 4], velocity = [1, 2, 3]",
                        "output": "3",
                        "explanation": "Droplets at 0, 2 and 4 will reach the end independently, as the speeds are increasing, hence, they wont mix."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we optimize search for the first two minimum positions?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Stacks & Queues",
                "slug": "stacks-&-queues"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}