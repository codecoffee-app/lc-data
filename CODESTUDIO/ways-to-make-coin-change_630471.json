{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7239,
            "title": "Ways To Make Coin Change",
            "titleSlug": "ways-to-make-coin-change_630471",
            "content": "<h4 id=\"you-are-given-an-infinite-supply-of-coins-of-each-of-denominations-d-d0-d1-d2-d3-dn-1-you-need-to-figure-out-the-total-number-of-ways-w-in-which-you-can-make-a-change-for-value-v-using-coins-of-denominations-from-d-print-0-if-a-change-isnt-possible\">You are given an infinite supply of coins of each of denominations D = {D0, D1, D2, D3, ...... Dn-1}. You need to figure out the total number of ways W, in which you can make a change for value V using coins of denominations from D. Print 0, if a change isn&#39;t possible.</h4>\n\n<h5 id=\"input-format\">Input Format</h5>\n\n<pre><code>The first line of input contains an integer N, representing the total number of denominations.\n\nThe second line of input contains N integers values separated by a single space. Each integer value represents the denomination value.\n\nThe third line of input contains the value of V, representing the value for which the change needs to be generated.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print an integer denoting the total number of ways W, in which a change for V is possible.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints :</h4>\n\n<pre><code>1 &lt;= N &lt;= 10\n1 &lt;= D[i] &lt;=10^5\n1 &lt;= V &lt;= 2 * 10^3\n\nWhere &#39;D[i]&#39; represent the value of ith denomination. \n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>3\n1 2 3\n4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation for Sample Output 1:</h5>\n\n<pre><code>We can make a change for the value V = 4 in four ways.\n1. (1,1,1,1), \n2. (1,1, 2), [One thing to note here is, (1, 1, 2) is same as that of (2, 1, 1) and (1, 2, 1)]\n3. (1, 3), and \n4. (2, 2)\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>3\n5 3 2\n1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 185,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an infinite supply of coins with denominations D = {D0, D1, D2, D3, ..., Dn-1}, determine the total number of distinct ways, W, to make change for a value V using these denominations. If change for V is not possible using the given denominations, return 0.",
                "constraints": [
                    "1 <= N <= 10 (where N is the number of denominations)",
                    "1 <= D[i] <= 10^5 (where D[i] is the value of the ith denomination)",
                    "1 <= V <= 2 * 10^3 (where V is the target value)",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "3\n1 2 3\n4",
                        "output": "4",
                        "explanation": "There are four distinct ways to make change for V = 4 using the denominations {1, 2, 3}:\n1. 1 + 1 + 1 + 1\n2. 1 + 1 + 2\n3. 1 + 3\n4. 2 + 2"
                    },
                    {
                        "input": "3\n5 3 2\n1",
                        "output": "0",
                        "explanation": "It is impossible to make change for V = 1 using the denominations {5, 3, 2}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try all combinations by either including or excluding a particular coin.</p>",
            "<p>See the overlapping subproblems in previous solution.</p>",
            "<p>Can we do iteratively?</p>",
            "<p>Do we need 2d array? or it can be done without 2d array?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": [
            {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity: O(N * V)\r\n    Space Complexity: O(V)\r\n    \r\n    where N is the length of denominations array and V is the value.\r\n\r\n*/\r\n\r\nlong countWaysToMakeChange(int *denominations, int n, int value)\r\n{\r\n    // Dp[i] will be storing the number of solutions for value i.\r\n    long *dp = new long[value + 1]();\r\n    dp[0] = 1;\r\n\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        for (int j = denominations[i]; j <= value; j++)\r\n        {\r\n            dp[j] += dp[j - denominations[i]];\r\n        }\r\n    }\r\n\r\n    return dp[value];\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity: O(N * V)\r\n    Space Complexity: O(V)\r\n    \r\n    where N is the length of denominations array and V is the value.\r\n'''\r\n\r\nfrom sys import stdin,setrecursionlimit\r\nsetrecursionlimit(10**7)\r\n\r\n\r\ndef countWaysToMakeChange(denominations, value) :\r\n    #dp[i] will be storing the number of solutions for value i.\r\n    n = len(denominations)\r\n    dp = [0 for i in range(value+1)]\r\n\r\n    dp[0] = 1     \r\n\r\n    for i in range(n) :\r\n        for j in range(denominations[i], value+1) :\r\n            dp[j] += dp[j - denominations[i]]     \r\n        \r\n    \r\n    return dp[value]      \r\n\r\n#taking inpit using fast I/O\r\ndef takeInput() :\r\n    numDenominations = int(input())\r\n\r\n    denominations = list(map(int, stdin.readline().strip().split(\" \")))\r\n\r\n    value = int(input())\r\n    return denominations, numDenominations, value\r\n\r\n\r\n#main\r\ndenominations, numDenomination, value = takeInput()\r\nprint((countWaysToMakeChange(denominations, value)))",
                "lang_text": "py"
            },
            {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity: O(N * V)\r\n    Space Complexity: O(V)\r\n    \r\n    where N is the length of denominations array and V is the value.\r\n\r\n*/\r\n\r\npublic class Solution \r\n{\r\n\tpublic static long countWaysToMakeChange(int denominations[], int value)\r\n    {\t\r\n\t\t// Dp[i] will be storing the number of solutions for value i\r\n\t\tlong dp[] = new long[value+1];\r\n\t\tdp[0] = 1;\r\n\r\n\t\tfor (int i = 0; i < denominations.length; i++) \r\n        {\r\n\t\t\tfor (int j = denominations[i]; j <= value; j++) \r\n            {\r\n\t\t\t\tdp[j] += dp[j - denominations[i]];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn dp[value];\r\n\t}\r\n\r\n}\r\n",
                "lang_text": "java"
            }
        ],
        "platform": "CODESTUDIO"
    }
}