{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9829,
            "title": "Weighted Job Scheduling",
            "titleSlug": "weighted-job-scheduling_1094885",
            "content": "<h4 id=\"you-are-given-n-jobs-with-their-start-time-start-end-time-end-and-profit-profit-you-need-to-tell-the-maximum-profit-you-can-obtain-by-performing-these-jobs-such-that-no-two-jobs-overlap\">You are given &#39;N&#39; jobs with their start time &#39;Start&#39;, end time &#39;End&#39; and profit &#39;Profit&#39;. You need to tell the maximum profit you can obtain by performing these jobs such that no two jobs overlap.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The start time of one job can be equal to the end time of another.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; denoting the number of test cases to be run. \n\nThe first line of each test case contains a single integers &#39;N&#39; denoting the number of jobs. \n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers denoting the start time of &#39;N&#39; jobs respectively.\n\nThe third line of each test case contains \u2018N\u2019 single space-separated integers denoting the end time of &#39;N&#39; jobs respectively.\n\nThe fourth line of each test case contains \u2018N\u2019 single space-separated integers denoting the profit of &#39;N&#39; jobs respectively.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the maximum profit is printed.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow up :</h5>\n\n<pre><code>Can you solve this problem in O(N*log(N)) time complexity?\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n1 &lt;= Start[i] &lt; End[i] &lt;= 10^9\n1 &lt;= Profit[i] &lt;= 10^9\n\nWhere &#39;T&#39; denotes the number of test cases, &#39;N&#39; denotes the number of jobs respectively, &#39;Start[i]&#39; and &#39;End[i]&#39; denotes the start and end time of  &#39;i-th&#39; job, and &#39;Profit[i]&#39; denotes the profit of  &#39;i-th&#39; job. \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\n1 2 3 3\n3 4 5 6\n50 10 40 70\n3\n1 1 1\n5 3 4\n5 6 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>120\n6\n</code></pre>\n\n<h5 id=\"explanation-for-input-1\">Explanation for Input 1:</h5>\n\n<pre><code>For test case 1:\nWe perform the jobs in this order for maximum profit: 1 -&gt; 4.\nSo the total profit becomes 50 + 70 = 120.\n\nFor test case 2:\nAs all the jobs are overlapping, we can perform only one job. Therefore we perform the job with maximum profit i.e. the 2nd one. Thus, the total profit is 6.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4\n1 3 6 2\n2 5 9 100\n50 20 100 200\n2\n1 2 \n2 3 \n10 20\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>250\n30\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 23,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a set of N jobs, each with a start time, end time, and associated profit, determine the maximum total profit achievable by selecting a subset of jobs such that no two selected jobs overlap. A job can start at the exact time another ends.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 3000 (Number of jobs)",
                    "1 <= Start[i] < End[i] <= 10^9",
                    "1 <= Profit[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 4, start = [1, 2, 3, 3], end = [3, 4, 5, 6], profit = [50, 10, 40, 70]",
                        "output": "120",
                        "explanation": "The optimal selection is jobs 1 and 4, yielding a profit of 50 + 70 = 120."
                    },
                    {
                        "input": "n = 3, start = [1, 1, 1], end = [5, 3, 4], profit = [5, 6, 4]",
                        "output": "6",
                        "explanation": "Since all jobs overlap, choose the one with the maximum profit, which is job 2 with a profit of 6."
                    },
                    {
                        "input": "n = 4, start = [1, 3, 6, 2], end = [2, 5, 9, 100], profit = [50, 20, 100, 200]",
                        "output": "250",
                        "explanation": "The optimal selection is jobs 1 and 4, yielding a profit of 50 + 200 = 250."
                    },
                    {
                        "input": "n = 2, start = [1, 2], end = [2, 3], profit = [10, 20]",
                        "output": "30",
                        "explanation": "The jobs do not overlap, so the optimal solution is to perform both, for a total profit of 10 + 20 = 30."
                    },
                    {
                        "input": "n = 1, start = [1], end = [2], profit = [100]",
                        "output": "100",
                        "explanation": "Only one job available. So max profit is 100"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try all possible ways of doing the jobs and maximize the answer among the valid ones.</p>",
            "<p>Can memoization be used to avoid recomputation of same data, by avoiding repeating recursive calls.</p>",
            "<p>For every index of the \u2018Jobs\u2019 array store the maximum profit from jobs found up to now.</p>",
            "<p>Can you use binary search to reduce time complexity?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}