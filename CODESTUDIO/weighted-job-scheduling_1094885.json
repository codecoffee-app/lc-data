{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9829,
            "title": "Weighted Job Scheduling",
            "titleSlug": "weighted-job-scheduling_1094885",
            "content": "<h4 id=\"you-are-given-n-jobs-with-their-start-time-start-end-time-end-and-profit-profit-you-need-to-tell-the-maximum-profit-you-can-obtain-by-performing-these-jobs-such-that-no-two-jobs-overlap\">You are given &#39;N&#39; jobs with their start time &#39;Start&#39;, end time &#39;End&#39; and profit &#39;Profit&#39;. You need to tell the maximum profit you can obtain by performing these jobs such that no two jobs overlap.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>The start time of one job can be equal to the end time of another.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; denoting the number of test cases to be run. \n\nThe first line of each test case contains a single integers &#39;N&#39; denoting the number of jobs. \n\nThe second line of each test case contains \u2018N\u2019 single space-separated integers denoting the start time of &#39;N&#39; jobs respectively.\n\nThe third line of each test case contains \u2018N\u2019 single space-separated integers denoting the end time of &#39;N&#39; jobs respectively.\n\nThe fourth line of each test case contains \u2018N\u2019 single space-separated integers denoting the profit of &#39;N&#39; jobs respectively.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the maximum profit is printed.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"follow-up\">Follow up :</h5>\n\n<pre><code>Can you solve this problem in O(N*log(N)) time complexity?\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 3000\n1 &lt;= Start[i] &lt; End[i] &lt;= 10^9\n1 &lt;= Profit[i] &lt;= 10^9\n\nWhere &#39;T&#39; denotes the number of test cases, &#39;N&#39; denotes the number of jobs respectively, &#39;Start[i]&#39; and &#39;End[i]&#39; denotes the start and end time of  &#39;i-th&#39; job, and &#39;Profit[i]&#39; denotes the profit of  &#39;i-th&#39; job. \n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n4\n1 2 3 3\n3 4 5 6\n50 10 40 70\n3\n1 1 1\n5 3 4\n5 6 4\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>120\n6\n</code></pre>\n\n<h5 id=\"explanation-for-input-1\">Explanation for Input 1:</h5>\n\n<pre><code>For test case 1:\nWe perform the jobs in this order for maximum profit: 1 -&gt; 4.\nSo the total profit becomes 50 + 70 = 120.\n\nFor test case 2:\nAs all the jobs are overlapping, we can perform only one job. Therefore we perform the job with maximum profit i.e. the 2nd one. Thus, the total profit is 6.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n4\n1 3 6 2\n2 5 9 100\n50 20 100 200\n2\n1 2 \n2 3 \n10 20\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>250\n30\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 23,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a set of 'N' jobs, each with a start time 'Start', an end time 'End', and a profit 'Profit', determine the maximum profit that can be earned by performing a subset of these jobs. The constraint is that no two selected jobs can overlap in time.  A job A overlaps with job B if the time interval of job A intersects with the time interval of job B. Note that the start time of one job can be equal to the end time of another job (they do not overlap in that case).",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 3000",
                    "1 <= Start[i] < End[i] <= 10^9",
                    "1 <= Profit[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "2\n4\n1 2 3 3\n3 4 5 6\n50 10 40 70\n3\n1 1 1\n5 3 4\n5 6 4",
                        "output": "120\n6",
                        "explanation": "Test Case 1:\nFor the first sub-test case, the jobs with start times 1 and 3 (profit 50 and 70) yield the maximum profit of 120 without any overlapping.\n\nTest Case 2:\nFor the second sub-test case, all the jobs overlap. Therefore, we can only perform one job. The job with the highest profit (6) is selected."
                    },
                    {
                        "input": "2\n4\n1 3 6 2\n2 5 9 100\n50 20 100 200\n2\n1 2 \n2 3 \n10 20",
                        "output": "250\n30",
                        "explanation": "Test Case 1:\nThe jobs with profit 50, and 200 yield the maximum profit of 250 without overlapping.\n\nTest Case 2:\nThe jobs with profit 10 and 20 do not overlap so yield maximum profit of 30."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try all possible ways of doing the jobs and maximize the answer among the valid ones.</p>",
            "<p>Can memoization be used to avoid recomputation of same data, by avoiding repeating recursive calls.</p>",
            "<p>For every index of the \u2018Jobs\u2019 array store the maximum profit from jobs found up to now.</p>",
            "<p>Can you use binary search to reduce time complexity?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}