{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10555,
            "title": "What will be the \u2018k-th\u2019 bit?",
            "titleSlug": "what-will-be-the-k-th-bit_1232657",
            "content": "<h4 id=\"you-are-given-two-integers-n-and-k-your-task-is-to-return-the-k-th-bit-in-row-n-of-the-given-sequence\">You are given two integers, \u2018N\u2019 and \u2018K\u2019. Your task is to return the \u2018K-th\u2019 bit in row \u2018N\u2019 of the given sequence.</h4>\n\n<h4 id=\"sequence-the-first-row-contains-a-single-bit-1-in-each-subsequent-row-we-look-at-the-previous-row-and-replace-each-1-with-10-and-each-0-with-01\">Sequence: The first row contains a single bit \u20181\u2019.  In each subsequent row, we look at the previous row and replace each \u20181\u2019 with \u201810\u2019 and each \u20180\u2019 with \u201801\u2019.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>N = 4, K = 5\n\nGiven sequence:\nThe previous row\u2019s \u20181\u2019 becomes \u201810\u2019, and \u20180\u2019 becomes \u201801\u2019 for each subsequent row. The contents of each row are:\nRow 1: 1\nAs, \u20181\u2019 =&gt; \u201810\u2019, So \u20181\u2019 (row 1) =&gt; \u201810\u2019 (row 2)\n\nRow 2: 10\nAs \u20181\u2019 =&gt; \u201810\u2019&amp; \u20180\u2019 =&gt; \u201801\u2019,So \u201810\u2019 (row 2) =&gt; \u20181001\u2019 (row 3)\n\nRow 3: 1001\nAs \u201810\u2019 =&gt; \u20181001\u2019 &amp; \u201801\u2019 =&gt; \u20180110\u2019, So \u20181001\u2019 (row 3) =&gt; \u201810010110\u2019 (row 4)\n\nRow 4: 10010110\nThe \u20185-th\u2019 bit in row \u20184\u2019 is \u20180\u2019. Return \u20180\u2019 as the answer.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>Both \u2018K\u2019 and \u2018N\u2019 have 1-based indexing.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases. Then, the \u2018T\u2019 test cases follow.\n\nThe first and only line of each test case contains two space-separated integers, \u2018N\u2019 and \u2018K\u2019, denoting the row number and index of the bit you need to return.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For every test case, print a single line containing a single integer (0 or 1) representing the \u2018K-th\u2019 bit in the row \u2018N\u2019.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to input or print anything, as it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10 ^ 4\n1 &lt;= N &lt;= 30\n1 &lt;= K &lt;= 2 ^ (N - 1)\n\nWhere \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the row number, and \u2018K\u2019 is the bit index.\n\nTime limit: 1 second.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample input 1:</h4>\n\n<pre><code>2\n3 4\n5 8\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample output 1:</h4>\n\n<pre><code>1\n0\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h4>\n\n<pre><code>Test Case 1:\nN = 3, K = 4\n\nGiven sequence:\nRow 1: 1\nRow 2: 10\nRow 3: 1001\nThe \u20184-th\u2019 bit in row \u20183\u2019 is 1. Return \u20181\u2019 as the answer.\n\nTest Case 2:\nN = 5, K = 8\n\nGiven sequence:\nRow 1: 1\nRow 2: 10\nRow 3: 1001\nRow 4: 10010110\nRow 5: 1001011001101001\nThe \u20188-th\u2019 bit in row \u20185\u2019 is \u20180\u2019. Return \u20180\u2019 as the answer.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample input 2:</h4>\n\n<pre><code>2\n3 2\n2 1\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample output 2:</h4>\n\n<pre><code>0\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, `N` and `K`, determine the `K`-th bit in the `N`-th row of a sequence. The sequence is constructed as follows:\n\n*   Row 1: '1'\n*   For each subsequent row, replace each '1' in the previous row with '10' and each '0' with '01'.\n\nFor example, the first few rows are:\n\n*   Row 1: 1\n*   Row 2: 10\n*   Row 3: 1001\n*   Row 4: 10010110",
                "constraints": [
                    "1 <= T <= 10^4",
                    "1 <= N <= 30",
                    "1 <= K <= 2^(N - 1)",
                    "Where \u2018T\u2019 is the number of test cases, \u2018N\u2019 is the row number, and \u2018K\u2019 is the bit index."
                ],
                "testcases": [
                    {
                        "input": "3 4",
                        "output": "1",
                        "explanation": "N = 3, K = 4\nRow 1: 1\nRow 2: 10\nRow 3: 1001\nThe 4th bit in row 3 is 1."
                    },
                    {
                        "input": "5 8",
                        "output": "0",
                        "explanation": "N = 5, K = 8\nRow 1: 1\nRow 2: 10\nRow 3: 1001\nRow 4: 10010110\nRow 5: 1001011001101001\nThe 8th bit in row 5 is 0."
                    },
                    {
                        "input": "3 2",
                        "output": "0",
                        "explanation": "N = 3, K = 2\nRow 1: 1\nRow 2: 10\nRow 3: 1001\nThe 2nd bit in row 3 is 0."
                    },
                    {
                        "input": "2 1",
                        "output": "1",
                        "explanation": "N = 2, K = 1\nRow 1: 1\nRow 2: 10\nThe 1st bit in row 2 is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a recursive function to get the bit stored at the parent of \u2018K\u2019.</p>",
            "<p>Try to find the number of times we need to flip the parent bit iteratively.</p>",
            "<p>What if \u2018K\u2019 had 0 - based indexing?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Math",
                "slug": "math"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}