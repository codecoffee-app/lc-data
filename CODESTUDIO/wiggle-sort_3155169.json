{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 16449,
            "title": "Wiggle Sort",
            "titleSlug": "wiggle-sort_3155169",
            "content": "<h4 id=\"you-are-given-an-array-arr-containing-n-integers-you-need-to-sort-the-array-such-that-a-wiggle-sequence-is-formed-a-wiggle-sequence-satisfies-the-following-property-arr-0-arr-1-arr-2-arr-3-arr-4-arr-5\">You are given an array \u2018ARR\u2019 containing \u2018N\u2019 integers, you need to sort the array such that a wiggle sequence is formed. A wiggle sequence satisfies the following property: ARR[0] \u2264 ARR[1] \u2265 ARR[2] \u2264 ARR[3] \u2265 ARR[4] \u2264 ARR[5] \u2026..</h4>\n\n<h4 id=\"if-there-are-multiple-answers-you-may-print-any-of-them\">If there are multiple answers, you may print any of them.</h4>\n\n<h5 id=\"follow-up\">Follow up :</h5>\n\n<pre><code>Can you try to solve this problem in O(N) time without using extra space?\n</code></pre>\n\n<h5 id=\"custom-input\">Custom Input :</h5>\n\n<pre><code>Kindly use print statements to debug the code and print array.\n</code></pre>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>If \u2018N\u2019 = 5 and \u2018ARR\u2019 = { 1, 2, 3, 4, 5 }\n\nThen rearranging the input array to { 1, 4, 2, 5, 3 } create a wiggle sequence.\n\nOther rearrangements like { 2, 4, 3, 5, 1 }, { 3, 5, 1, 4, 2} are also considered correct.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains a single integer \u2018N\u2019, denoting the length of the binary string(s).\n\nThe second line of each test case contains N distinct integers \u2018ARR\u2019, denoting the array elements of the array.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print array elements after applying wiggle sort.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 \u2264 T \u2264 10      \n1 \u2264 N \u2264 5000\n-10^9 \u2264 ARR[i] \u2264 10^9\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5\n1 2 3 4 5\n4\n1 3 2 2 \n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1 4 2 5 3\n1 3 2 2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For test case 1 :\nWe will print {1, 4, 2, 5, 3} as it is a valid rearrangement of the input array and is a wiggle sequence.\n\nFor test case 2 : \nThe input array is itself a wiggle sequence, so we can directly return it.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n5\n1 1 1 1 1\n2\n1 2 \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1 1 1 1 1\n1 2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array 'ARR' of 'N' integers, rearrange it to form a wiggle sequence. A wiggle sequence satisfies the condition: ARR[0] <= ARR[1] >= ARR[2] <= ARR[3] >= ARR[4] <= ARR[5] ... If multiple wiggle sequences are possible, return any one of them.\n\nFollow up: Can you solve this in O(N) time without using extra space?",
                "constraints": [
                    "1 \u2264 T \u2264 10",
                    "1 \u2264 N \u2264 5000",
                    "-10^9 \u2264 ARR[i] \u2264 10^9",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n1 2 3 4 5",
                        "output": "1 4 2 5 3",
                        "explanation": "One possible wiggle sequence for the input array {1, 2, 3, 4, 5} is {1, 4, 2, 5, 3}. Other valid arrangements, such as {2, 4, 3, 5, 1} or {3, 5, 1, 4, 2}, are also considered correct."
                    },
                    {
                        "input": "4\n1 3 2 2",
                        "output": "1 3 2 2",
                        "explanation": "The input array {1, 3, 2, 2} is already a wiggle sequence."
                    },
                    {
                        "input": "5\n1 1 1 1 1",
                        "output": "1 1 1 1 1",
                        "explanation": "The input array {1, 1, 1, 1, 1} is already a wiggle sequence."
                    },
                    {
                        "input": "2\n1 2",
                        "output": "1 2",
                        "explanation": "The input array {1, 2} is already a wiggle sequence."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to greedily place the largest and smallest array element depending on the array index.</p>",
            "<p>Try to greedily satisfy wiggle sort conditions for adjacent pairs.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}