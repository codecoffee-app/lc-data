{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 7593,
            "title": "Wildcard Pattern Matching",
            "titleSlug": "wildcard-pattern-matching_701650",
            "content": "<h4 id=\"given-a-text-and-a-wildcard-pattern-of-size-n-and-m-respectively-implement-a-wildcard-pattern-matching-algorithm-that-finds-if-the-wildcard-pattern-is-matched-with-the-text-the-matching-should-cover-the-entire-text-not-partial-text\">Given a text and a wildcard pattern of size N and M respectively, implement a wildcard pattern matching algorithm that finds if the wildcard pattern is matched with the text. The matching should cover the entire text not partial text.</h4>\n\n<h4 id=\"the-wildcard-pattern-can-include-the-characters-and\">The wildcard pattern can include the characters \u2018?\u2019 and \u2018*\u2019</h4>\n\n<pre><code> \u2018?\u2019 \u2013 matches any single character \n \u2018*\u2019 \u2013 Matches any sequence of characters(sequence can be of length 0 or more)\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an Integer &#39;T&#39; which denotes the number of test cases/queries to be run. \nThen the test cases follow. \n\nThe first line of input for each test case/query contains a string representing the wildcard pattern.\n\nThe second line of input for each test case/query contains a string representing the text.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print \u2018True\u2019 if the text matches the pattern, print \u2018False\u2019 otherwise(without quotes).\n\nOutput for every test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 200\n1 &lt;= M &lt;= 200\n\nWhere &#39;N&#39; denotes the length of &#39;TEXT&#39; and &#39;M&#39; denotes the length of &#39;PATTERN&#39;.\n\n&#39;TEXT&#39; and &#39;PATTERN&#39; contain only lowercase letters and patterns may contain special characters \u2018*\u2019 and \u2018?\u2019\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3\n?ay\nray\nab*cd\nabdefcd\nab?d\nabcc\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\nTrue\nFalse\n</code></pre>\n\n<h5 id=\"explanation-of-the-sample-input1\">Explanation of the Sample Input1:</h5>\n\n<pre><code>Test Case 1:\nThe pattern is \u201c?ay\u201d and the text is ray.\n\u2018?\u2019 can match a character so it matches with a character \u2018r\u2019 of the text and rest of the text matches with the pattern so we print True.\n\nTest Case 2:\n\u201cab\u201d of text matches with \u201cab\u201d of pattern and then \u2018*\u2019 of pattern matches with \u201cdef\u201d of the text and \u201ccd\u201d of text matches with \u201ccd\u201d of the pattern. Whole text matches with the pattern so we print True.\n\nTest Case 3:\n\u201cab\u201d of pattern matches with \u201cab\u201d of text. \u2018?\u2019 of pattern matches with \u2018c\u2019 of the text but \u2018d\u2019 of the pattern do not match with \u2018c\u2019 of the text so we print False.\n</code></pre>\n\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\nba*a?\nbaaabab\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>True\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 252,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a wildcard pattern matching algorithm that determines if a given text matches a given wildcard pattern. The wildcard pattern can contain the characters '?' (matches any single character) and '*' (matches any sequence of characters, including an empty sequence). The matching should cover the entire text, not just a partial portion.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 200 (Length of text)",
                    "1 <= M <= 200 (Length of pattern)"
                ],
                "testcases": [
                    {
                        "input": "pattern = \"?ay\", text = \"ray\"",
                        "output": "True",
                        "explanation": "The pattern '?ay' matches the text 'ray'. '?' matches 'r', and 'ay' matches 'ay'."
                    },
                    {
                        "input": "pattern = \"ab*cd\", text = \"abdefcd\"",
                        "output": "True",
                        "explanation": "The pattern 'ab*cd' matches the text 'abdefcd'. 'ab' matches 'ab', '*' matches 'def', and 'cd' matches 'cd'."
                    },
                    {
                        "input": "pattern = \"ab?d\", text = \"abcc\"",
                        "output": "False",
                        "explanation": "The pattern 'ab?d' does not match the text 'abcc'. 'ab' matches 'ab', '?' matches 'c', but 'd' does not match the last 'c'."
                    },
                    {
                        "input": "pattern = \"ba*a?\", text = \"baaabab\"",
                        "output": "True",
                        "explanation": "The pattern 'ba*a?' matches the text 'baaabab'. 'ba' matches 'ba', '*' matches 'aaba', 'a' matches 'a', and '?' matches 'b'."
                    },
                    {
                        "input": "pattern = \"abc*\", text = \"abcd\"",
                        "output": "True",
                        "explanation": "The pattern 'abc*' matches the text 'abcd'. 'abc' matches 'abc', and '*' matches 'd'."
                    },
                    {
                        "input": "pattern = \"abc*d\", text = \"abce\"",
                        "output": "False",
                        "explanation": "The pattern 'abc*d' does not match the text 'abce' since it requires d at the end."
                    },
                    {
                        "input": "pattern = \"*\", text = \"abc\"",
                        "output": "True",
                        "explanation": "The pattern '*' matches any string, including 'abc'."
                    },
                    {
                        "input": "pattern = \"a*b\", text = \"a\"",
                        "output": "False",
                        "explanation": "The pattern 'a*b' requires a 'b' at the end of matching string. Here, text is 'a'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to explore all the possibilities using the recursion.</p>",
            "<p>Use extra space to optimize the recursive solution.</p>",
            "<p>Try to define a dp state and try to write the iterative solution.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N*M)\r\n    Space Complexity :  O(N*M)\r\n\r\n    Where N is the size of the text and M is the size of the pattern string.\r\n*/\r\n\r\n#include <vector>\r\n\r\nbool wildcardMatching(string pattern, string text)\r\n{\r\n    int n = text.size();\r\n    int m = pattern.size();\r\n\r\n    vector<vector<bool>> dp(n + 1, vector<bool>(m + 1, false));\r\n\r\n    dp[0][0] = 1;\r\n    for (int j = 1; j <= m; j++)\r\n    {\r\n        if (pattern[j - 1] == '*')\r\n        {\r\n            dp[0][j] = dp[0][j - 1];\r\n        }\r\n    }\r\n\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        for (int j = 1; j <= m; j++)\r\n        {\r\n            if (text[i - 1] == pattern[j - 1])\r\n            {\r\n                dp[i][j] = dp[i - 1][j - 1];\r\n            }\r\n            else\r\n            {\r\n                if (pattern[j - 1] == '?')\r\n                {\r\n                    dp[i][j] = dp[i - 1][j - 1];\r\n                }\r\n                else if (pattern[j - 1] == '*')\r\n                {\r\n                    dp[i][j] = dp[i - 1][j] || dp[i][j - 1] || dp[i - 1][j - 1];\r\n                }\r\n                else\r\n                    dp[i][j] = 0;\r\n            }\r\n        }\r\n    }\r\n    \r\n    return dp[n][m];\r\n}\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N*M)\r\n    Space Complexity :  O(N*M)\r\n\r\n    Where N is the size of the text and M is the size of the pattern string.\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n\tpublic static boolean wildcardMatching(String pattern, String text) {\r\n\t\tint n = text.length();\r\n\t\tint m = pattern.length();\r\n\r\n\t\tboolean dp[][] = new boolean[n + 1][m + 1];\r\n\r\n\t\tdp[0][0] = true;\r\n\t\tfor (int j = 1; j <= m; j++) {\r\n\t\t\tif (pattern.charAt(j - 1) == '*') {\r\n\t\t\t\tdp[0][j] = dp[0][j - 1];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (int i = 1; i <= n; i++) {\r\n\t\t\tfor (int j = 1; j <= m; j++) {\r\n\t\t\t\tif (text.charAt(i - 1) == pattern.charAt(j - 1)) {\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j - 1];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (pattern.charAt(j - 1) == '?') {\r\n\t\t\t\t\t\tdp[i][j] = dp[i - 1][j - 1];\r\n\t\t\t\t\t} else if (pattern.charAt(j - 1) == '*') {\r\n\t\t\t\t\t\tdp[i][j] = dp[i - 1][j] || dp[i][j - 1] || dp[i - 1][j - 1];\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\tdp[i][j] = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn dp[n][m];\r\n\t}\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity : O(N*M)\r\n    Space Complexity :  O(N*M)\r\n\r\n    Where N is the size of the text and M is the size of the pattern string.\r\n'''\r\n\r\nimport sys\r\n\r\ndef wildcardMatching(pattern,text):\r\n    \r\n    n = len(text)\r\n    m = len(pattern)\r\n    \r\n    dp = [[False for i in range(m + 1)] for j in range(n + 1)]\r\n    \r\n    dp[0][0] = True\r\n    \r\n    for j in range(1, m + 1):\r\n        \r\n        if pattern[j - 1] == '*':\r\n            dp[0][j] = dp[0][j - 1]\r\n            \r\n    for i in range(1, n + 1):\r\n        for j in range(1, m + 1):\r\n            \r\n            if text[i - 1] == pattern[j - 1]:\r\n                dp[i][j] = dp[i - 1][j - 1]\r\n                \r\n            else:\r\n                if pattern[j - 1] == '?':\r\n                    dp[i][j] = dp[i - 1][j - 1]\r\n                    \r\n                elif pattern[j - 1] == '*':\r\n                    dp[i][j] = dp[i - 1][j] or dp[i][j - 1] or dp[i - 1][j - 1]\r\n                    \r\n                else:\r\n                    dp[i][j] = False\r\n                    \r\n                    \r\n    return dp[n][m]\r\n                \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\r\nt = int(sys.stdin.readline().strip())\r\n\r\nwhile t > 0:\r\n\r\n    pattern = sys.stdin.readline().strip()\r\n    text = sys.stdin.readline().strip()\r\n\r\n    print(wildcardMatching(pattern, text))\r\n\r\n    t -= 1\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}