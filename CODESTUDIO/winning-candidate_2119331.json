{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14384,
            "title": "Winning Candidate",
            "titleSlug": "winning-candidate_2119331",
            "content": "<pre><code>Table: Candidate\n\n +-----+---------+\n | id  | Name    |\n +-----+---------+\n | 1   | A       |\n | 2   | B       |\n | 3   | C       |\n | 4   | D       |\n | 5   | E       |\n +-----+---------+  \nTable: Vote\n\n +-----+--------------+\n | id  | CandidateId  |\n +-----+--------------+\n | 1   |     2        |\n | 2   |     4        |\n | 3   |     3        |\n | 4   |     2        |\n | 5   |     5        |\n +-----+--------------+\nThe id column in both tables is an auto-incrementing primary key.\nThe CandidateId column in the Vote table refers to the id column in the Candidate table.\nTask:\nWrite an SQL query to find the name of the candidate who received the most votes. In the event of the above example, the query should return:\n\n +------+\n |  Name |\n +------+\n | B    |\n +------+\nNotes:\n\nYou may assume that there is no tie; in other words, there will be exactly one candidate with the most votes.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Write an SQL query to determine the name of the candidate who has received the highest number of votes. It is guaranteed that there will be only one candidate with the maximum number of votes.",
                "constraints": [
                    "The `id` column in both tables (`Candidate` and `Vote`) is an auto-incrementing primary key.",
                    "The `CandidateId` column in the `Vote` table is a foreign key referencing the `id` column in the `Candidate` table.",
                    "There is no tie for the most votes; only one candidate has the highest vote count."
                ],
                "testcases": [
                    {
                        "input": "Table: Candidate\n\n+-----+---------+\n| id  | Name    |\n+-----+---------+\n| 1   | A       |\n| 2   | B       |\n| 3   | C       |\n| 4   | D       |\n| 5   | E       |\n+-----+---------+  \nTable: Vote\n\n+-----+--------------+\n| id  | CandidateId  |\n+-----+--------------+\n| 1   |     2        |\n| 2   |     4        |\n| 3   |     3        |\n| 4   |     2        |\n| 5   |     5        |\n+-----+--------------+",
                        "output": "B",
                        "explanation": "Candidate B (id=2) received 2 votes, Candidate D (id=4) received 1 vote, Candidate C (id=3) received 1 vote, and Candidate E (id=5) received 1 vote. Therefore, Candidate B received the most votes."
                    },
                    {
                        "input": "Table: Candidate\n\n+-----+---------+\n| id  | Name    |\n+-----+---------+\n| 1   | John    |\n| 2   | Jane    |\n+-----+---------+  \nTable: Vote\n\n+-----+--------------+\n| id  | CandidateId  |\n+-----+--------------+\n| 1   |     1        |\n| 2   |     1        |\n| 3   |     1        |\n| 4   |     2        |\n| 5   |     2        |\n+-----+--------------+",
                        "output": "John",
                        "explanation": "John (id=1) received 3 votes and Jane (id=2) received 2 votes. Therefore, John received the most votes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}