{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14384,
            "title": "Winning Candidate",
            "titleSlug": "winning-candidate_2119331",
            "content": "<pre><code>Table: Candidate\n\n +-----+---------+\n | id  | Name    |\n +-----+---------+\n | 1   | A       |\n | 2   | B       |\n | 3   | C       |\n | 4   | D       |\n | 5   | E       |\n +-----+---------+  \nTable: Vote\n\n +-----+--------------+\n | id  | CandidateId  |\n +-----+--------------+\n | 1   |     2        |\n | 2   |     4        |\n | 3   |     3        |\n | 4   |     2        |\n | 5   |     5        |\n +-----+--------------+\nThe id column in both tables is an auto-incrementing primary key.\nThe CandidateId column in the Vote table refers to the id column in the Candidate table.\nTask:\nWrite an SQL query to find the name of the candidate who received the most votes. In the event of the above example, the query should return:\n\n +------+\n |  Name |\n +------+\n | B    |\n +------+\nNotes:\n\nYou may assume that there is no tie; in other words, there will be exactly one candidate with the most votes.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two tables, `Candidate` and `Vote`, determine the name of the candidate who received the highest number of votes. The `Candidate` table contains the candidate's ID and name, while the `Vote` table records the votes, referencing the candidate's ID. Assume there is no tie for the most votes.",
                "constraints": [
                    "Candidate.id is the primary key.",
                    "Vote.id is the primary key.",
                    "Vote.CandidateId is a foreign key referencing Candidate.id."
                ],
                "testcases": [
                    {
                        "input": "Candidate=[(1,'A'),(2,'B'),(3,'C'),(4,'D'),(5,'E')], Vote=[(1,2),(2,4),(3,3),(4,2),(5,5)]",
                        "output": "{'Name': 'B'}",
                        "explanation": "Candidate B received 2 votes, which is the highest. Candidate A received 0 votes, C received 1 vote, D received 1 vote and E received 1 vote."
                    },
                    {
                        "input": "Candidate=[(1,'John'),(2,'Jane')], Vote=[(1,1),(2,1),(3,1),(4,2)]",
                        "output": "{'Name': 'John'}",
                        "explanation": "John received 3 votes, while Jane received 1 vote.  Therefore, John has the most votes."
                    },
                    {
                        "input": "Candidate=[(1,'Alice'),(2,'Bob'),(3,'Charlie')], Vote=[(1,3)]",
                        "output": "{'Name': 'Charlie'}",
                        "explanation": "Charlie received 1 vote, Alice and Bob received 0 votes. So Charlie has the most votes."
                    },
                    {
                        "input": "Candidate=[(1,'David')], Vote=[(1,1),(2,1),(3,1),(4,1),(5,1)]",
                        "output": "{'Name': 'David'}",
                        "explanation": "David received 5 votes and there are no other candidates to compare against."
                    },
                    {
                        "input": "Candidate=[(1,'Eve'),(2,'Frank')], Vote=[]",
                        "output": "{'Name': null}",
                        "explanation": "No votes were cast, so the query should return null (or an empty result depending on the SQL implementation and handling of null values).  Since the prompt states we can assume a winner, and no votes were cast, in real world this might error. But the constraints and body state to assume no tie. Technically, any implementation returning null for a missing value should be valid."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "SQL",
                "slug": "sql"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}