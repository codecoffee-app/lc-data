{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9682,
            "title": "Word Boggle",
            "titleSlug": "word-boggle_1081474",
            "content": "<h4 id=\"you-are-given-an-array-of-strings-arr-and-a-character-matrix-mat-your-task-is-to-find-out-all-the-possible-words-in-the-array-arr-that-can-be-constructed-by-moving-sequentially-in-the-matrix-mat-where-the-movement-can-start-from-any-position-in-the-matrix-mat-and-can-be-done-in-all-8-possible-directions-however-the-same-cell-can-not-be-considered-more-than-once-for-the-construction-of-a-word-print-the-words-in-sorted-manner\">You are given an array of strings \u201carr\u201d and a character matrix \u201cmat\u201d. Your task is to find out all the possible words in the array \u201carr\u201d that can be constructed by moving sequentially in the matrix \u201cmat\u201d, where the movement can start from any position in the matrix \u201cmat\u201d and can be done in all 8 possible directions. However, the same cell can not be considered more than once for the construction of a word. Print the words in sorted manner.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>If arr = {\u201cgo\u201d, \u201cpp\u201d, \u201cno\u201d, \u201cop\u201d}, mat = {{\u2018g\u2019,\u2019p\u2019}, \n                                          {\u2018d\u2019,\u2019o\u2019}}.\nHere, the two-letter words that can be formed from the matrix \u201cmat\u201d are \u201cgp\u201d, \u201cgd\u201d, \u201cgo\u201d, \u201cpg\u201d, \u201cpd\u201d, \u201cpo\u201d, \u201cdg\u201d, \u201cdp\u201d, \u201cdo\u201d, \u201cog\u201d, \u201cop\u201d, \u201cod\u201d.\n\nSo, the words that are present in the array \u201carr\u201d which can be formed from the matrix \u201cmat\u201d are \u201cgo\u201d and \u201cop\u201d.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then, the T test cases follow.\n\nThe first line of each test case contains an integer P, denotes the length of the array.\nThe second line of each test case contains, P space separated strings.\nThe third line of each test case contains two space separated integers N, and M, denoting the number of rows and columns in a &#39;mat\u201d.\nThe next N lines contain M characters i.e. the elements of the matrix \u201cmat\u201d.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, print all the possible words in the array \u201carr\u201d in a sorted manner, that can be constructed by moving sequentially in the matrix \u201cmat\u201d.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= P &lt;= 10\n1 &lt;= arr[i].length &lt;= 50\n1 &lt;= N, M &lt;= 7\nAll the characters of the strings in the array \u201carr\u201d and matrix \u201cmat\u201d contain lowercase English letters only.\nAll the words in the array \u201carr\u201d are unique.\n\nTime limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n6\ngo on no of pon pgp\n2 2\ng n\no p\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>go no on pon\n</code></pre>\n\n<h5 id=\"explanation-for-sample-1\">Explanation for sample 1:</h5>\n\n<pre><code>For the first test case, the word \u201cgo\u201d can be formed by (0,0) \u2192 (1,0).\nThe word \u201con\u201d can be formed by (1,0) \u2192 (0,1).\nThe word \u201cno\u201d can be formed by (0,1) \u2192 (1,0).\nThe word \u201cof\u201d can never be formed as there is no \u2018f\u2019 character in the matrix.\nThe word \u201cpon\u201d can be formed by (1,1) \u2192 (1,0) \u2192 (0,1).\nThe word \u201cpgp\u201d can not be formed as there is only one \u2018p\u2019 character in the matrix.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n8\nperson so warm on code no son rn  \n2 3\np e r\nn o s\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>no on person so son\n</code></pre>\n\n<h5 id=\"explanation-for-sample-2\">Explanation for sample 2:</h5>\n\n<pre><code>For the first test case, the word \u201cperson\u201d can be formed by (0,0) \u2192 (0,1) \u2192 (0,2) \u2192 (1,2) \u2192 (1,1) \u2192 (1,0).\nThe word \u201cso\u201d can be formed by (1,2) \u2192 (1,1).\nThe word \u201cwarm\u201d can never be formed as there is no character \u2018w\u2019 in the matrix.\nThe word \u201con\u201d can be formed by (1,1) \u2192 (1,0).\nThe word \u201ccode\u201d can never be formed as there is no character \u2018c\u2019 in the matrix.\nThe word \u201cno\u201d can be formed by (1,0) \u2192 (1,1).\nThe word \u201cson\u201d can be formed by (1,2) \u2192 (1,1) \u2192 (1,0).\nThe word \u201crn\u201d can not be formed as the character \u2018r\u2019 and \u2018n\u2019 are not adjacent to each other.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Ninja",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of strings `arr` and a character matrix `mat`, find all words from `arr` that can be constructed by traversing `mat` sequentially.  Traversal can start from any position in `mat` and can move in all 8 directions.  Each cell can only be used once per word construction. Return the words found in sorted order.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= P <= 10 (Length of the array `arr`)",
                    "1 <= arr[i].length <= 50 (Length of each word in `arr`)",
                    "1 <= N, M <= 7 (Dimensions of the matrix `mat`)",
                    "All characters in `arr` and `mat` are lowercase English letters.",
                    "All words in `arr` are unique.",
                    "Time limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "1\n6\ngo on no of pon pgp\n2 2\ng n\no p",
                        "output": "go no on pon",
                        "explanation": "The words 'go', 'no', 'on', and 'pon' can be formed by traversing adjacent cells in the matrix. For example:\n- 'go' can be formed by (0,0) -> (1,0).\n- 'on' can be formed by (1,0) -> (0,1).\n- 'no' can be formed by (0,1) -> (1,0).\n- 'pon' can be formed by (1,1) -> (1,0) -> (0,1).\nThe words 'of' and 'pgp' cannot be formed because either the required character doesn't exist, or the required number of repetitions are not present in the matrix."
                    },
                    {
                        "input": "1\n8\nperson so warm on code no son rn\n2 3\np e r\nn o s",
                        "output": "no on person so son",
                        "explanation": "The words 'no', 'on', 'person', 'so', and 'son' can be formed by traversing adjacent cells in the matrix. For example:\n- 'person' can be formed by (0,0) -> (0,1) -> (0,2) -> (1,2) -> (1,1) -> (1,0).\n- 'so' can be formed by (1,2) -> (1,1).\n- 'on' can be formed by (1,1) -> (1,0).\n- 'no' can be formed by (1,0) -> (1,1).\n- 'son' can be formed by (1,2) -> (1,1) -> (1,0).\nThe words 'warm', 'code' and 'rn' cannot be formed because of missing characters or incorrect adjacency."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a brute-force solution using backtracking.</p>",
            "<p>Think of a brute-force solution using <a href=\"https://en.wikipedia.org/wiki/Trie\">Trie</a> Data structure.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tries",
                "slug": "tries"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}