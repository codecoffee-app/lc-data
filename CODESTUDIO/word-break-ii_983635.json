{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9373,
            "title": "Word Break II ",
            "titleSlug": "word-break-ii_983635",
            "content": "<h4 id=\"you-are-given-a-non-empty-string-s-containing-no-spaces-and-a-dictionary-of-non-empty-strings-say-the-list-of-words-you-are-supposed-to-construct-and-return-all-possible-sentences-after-adding-spaces-in-the-originally-given-string-s-such-that-each-word-in-a-sentence-exists-in-the-given-dictionary\">You are given a non-empty string S containing no spaces\u2019 and a dictionary of non-empty strings (say the list of words). You are supposed to construct and return all possible sentences after adding spaces in the originally given string \u2018S\u2019, such that each word in a sentence exists in the given dictionary.</h4>\n\n<h4 id=\"note\">Note :</h4>\n\n<pre><code>The same word in the dictionary can be used multiple times to make sentences.\nAssume that the dictionary does not contain duplicate words.\n</code></pre>\n\n<h4 id=\"input-format\">Input format :</h4>\n\n<pre><code>The first line contains an integer \u2018T\u2019 denoting the number of test cases. \n\nThen the &#39;T&#39; test cases follow.\n\nThe first line contains an integer value \u2018K\u2019 which denotes the size of the dictionary.\n\nThe second line contains \u2018K\u2019 non-empty, space separated strings denoting the words of the dictionary.\n\nThe third line contains a non-empty string \u2018S\u2019.\n</code></pre>\n\n<h4 id=\"output-format\">Output format :</h4>\n\n<pre><code>For each test case, print each possible sentence after adding spaces, in different lines.\n\nThe output of each test case is printed in a separate line. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>1. You do not need to print anything, it has already been taken care of. Just implement the given function.\n2. The order in which the output sentences are returned does not matter.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= K &lt;= 100\n1 &lt;= | word | &lt;= 16\n1 &lt;= | S | &lt;= 13\n\nwhere |word| is the length of each word in the dictionary and |S| is the length of the string S.\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n6\ngod is now no where here\ngodisnowherenowhere\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>god is no where no where\ngod is no where now here\ngod is now here no where\ngod is now here now here\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-1\">Explanation to Sample Input 1:</h5>\n\n<pre><code>One way to make sentences is to take \u201cgod\u201d and append a space, then take \u201cis\u201d  and append space, take \u201cnow\u201d from the dictionary and take \u201chere\u201d as well. \nSimilarly, for other sentences also, we can add space to get other possible sentences. Note that we can reuse dictionary words as \u201cno\u201d and \u201cnow\u201d are used two times in the same sentence.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n4\ngod is no here\ngodisnowhere\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>No output to be printed\n</code></pre>\n\n<h5 id=\"explanation-to-sample-input-2\">Explanation to Sample Input 2:</h5>\n\n<pre><code>We can not make any sentence because after making \u201cgod is no\u201d we will be stuck with \u201cwhere\u201d. There is no way to break \u201cwhere\u201d further such that we can get any word from the dictionary.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 101,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` without spaces and a dictionary of words, construct all possible sentences by adding spaces to `S` such that each word in the resulting sentence is present in the dictionary. A word from the dictionary can be used multiple times. The dictionary contains no duplicate words.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= K <= 100 (Dictionary size)",
                    "1 <= |word| <= 16 (Length of each word in the dictionary)",
                    "1 <= |S| <= 13 (Length of the string S)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n6\ngod is now no where here\ngodisnowherenowhere",
                        "output": "god is no where no where\ngod is no where now here\ngod is now here no where\ngod is now here now here",
                        "explanation": "The input string 'godisnowherenowhere' can be segmented into multiple valid sentences using the provided dictionary. For example, one valid sentence is 'god is no where no where', which is formed by concatenating words from the dictionary with spaces in between.  Another valid sentence is 'god is no where now here'. Note the re-use of dictionary words such as 'no' and 'now'."
                    },
                    {
                        "input": "1\n4\ngod is no here\ngodisnowhere",
                        "output": "No output to be printed",
                        "explanation": "The input string 'godisnowhere' cannot be completely segmented into valid words from the given dictionary.  While 'god', 'is', and 'no' can be extracted, the remaining part 'where' is not a valid word in the dictionary, preventing the formation of any complete sentence."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think about exploring all the possibilities?</p>",
            "<p>Save your previous result so that you can avoid redundant function calls.</p>",
            "<p>Can we use Trie data structure?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n    Time Complexity : O(N * (2 ^(N - 1))\r\n    Space Complexity :  O(26 * K * | word |)\r\n\r\n    Where N is the length of string 'S', 'K' is the number of words in the dictionary and | word | is the length of each word. \r\n    \r\n*/\r\n\r\nclass TrieNode\r\n{\r\n\r\npublic:\r\n    TrieNode *children[26];\r\n    bool isTerminal;\r\n\r\n    TrieNode()\r\n    {\r\n        // Setting all children of a new trie node to NULL\r\n        for (int i = 0; i < 26; i++)\r\n        {\r\n            children[i] = NULL;\r\n        }\r\n        this->isTerminal = false;\r\n    }\r\n};\r\n\r\nvoid insert(TrieNode *root, string word)\r\n{\r\n    TrieNode *curr = root;\r\n    for (int i = 0; i < word.size(); i++)\r\n    {\r\n        // Expanding the Trie if the branch was not there yet\r\n        if (curr->children[word[i] - 'a'] == NULL)\r\n        {\r\n            curr->children[word[i] - 'a'] = new TrieNode();\r\n        }\r\n        curr = curr->children[word[i] - 'a'];\r\n    }\r\n    // Mark last node as leaf\r\n    curr->isTerminal = true;\r\n}\r\n\r\nvoid search(TrieNode *root, string &s, vector<string> &res, string temp, int pos)\r\n{\r\n    TrieNode *curr = root;\r\n\r\n    for (int i = pos; i < s.size(); i++)\r\n    {\r\n        if (curr->children[s[i] - 'a'] == NULL)\r\n        {\r\n            return;\r\n        }\r\n        if (curr->children[s[i] - 'a']->isTerminal == true)\r\n        {\r\n            // Last word we found with a positive lookup\r\n            string lastWord = temp;\r\n            lastWord.append(s.substr(pos, i - pos + 1));\r\n\r\n            // If it is also the last character of s, update res\r\n            if (i == s.size() - 1)\r\n            {\r\n                res.push_back(lastWord);\r\n            }\r\n            // Recursive calls otherwise\r\n            else\r\n            {\r\n                search(root, s, res, lastWord + \" \", i + 1);\r\n            }\r\n        }\r\n        curr = curr->children[s[i] - 'a'];\r\n    }\r\n    return;\r\n}\r\n\r\nvector<string> wordBreak(string &s, vector<string> &dictionary)\r\n{\r\n    // Base Trie\r\n    TrieNode *root = new TrieNode();\r\n\r\n    // Add dictionary words into trie\r\n    for (int i = 0; i < dictionary.size(); i++)\r\n    {\r\n        insert(root, dictionary[i]);\r\n    }\r\n\r\n    // Computing the final result\r\n    vector<string> res;\r\n    search(root, s, res, \"\", 0);\r\n\r\n    return res;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n    Time Complexity : O(N * (2 ^(N - 1))\r\n    Space Complexity :  O(26 * K * | word |)\r\n\r\n    Where 'N' is the length of string 'S', 'K' is the number of words in the dictionary and | word | is the length of each word. \r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\nclass TrieNode \r\n{\r\n    TrieNode[] children;\r\n    boolean isTerminal;\r\n\r\n    TrieNode() \r\n    {\r\n        children = new TrieNode[26];\r\n        isTerminal = false;\r\n        for (int i = 0; i < 26; i++)\r\n            children[i] = null;\r\n    }\r\n}\r\n\r\npublic class Solution \r\n{\r\n\r\n    public static void insert(TrieNode root, String word) \r\n    {\r\n        TrieNode curr = root;\r\n\r\n        for (int i = 0; i < word.length(); i++) \r\n        {\r\n            // Expanding the Trie if the branch was not there yet\r\n            if (curr.children[word.charAt(i) - 'a'] == null) \r\n            {\r\n                curr.children[word.charAt(i) - 'a'] = new TrieNode();\r\n            }\r\n\r\n            curr = curr.children[word.charAt(i) - 'a'];\r\n        }\r\n\r\n        // Mark last node as leaf\r\n        curr.isTerminal = true;\r\n    }\r\n\r\n    public static void search(TrieNode root, String s, ArrayList<String> res, String temp, int pos) \r\n    {\r\n        TrieNode curr = root;\r\n\r\n        for (int i = pos; i < s.length(); i++) \r\n        {\r\n            if (curr.children[s.charAt(i) - 'a'] == null) \r\n            {\r\n                return;\r\n            }\r\n            if (curr.children[s.charAt(i) - 'a'].isTerminal == true) \r\n            {\r\n                // Last word we found with a positive lookup\r\n                String lastWord = temp;\r\n                lastWord += (s.substring(pos, i + 1));\r\n\r\n                // If it is also the last character of s, update res\r\n                if (i == s.length() - 1) \r\n                {\r\n                    res.add(lastWord);\r\n                }\r\n                \r\n                // Recursive calls otherwise\r\n                else \r\n                {\r\n                    search(root, s, res, lastWord + \" \", i + 1);\r\n                }\r\n            }\r\n\r\n            curr = curr.children[s.charAt(i) - 'a'];\r\n        }\r\n        return;\r\n    }\r\n\r\n    public static ArrayList<String> wordBreak(String s, ArrayList<String> dictionary) \r\n    {\r\n        // Base Trie\r\n        TrieNode root = new TrieNode();\r\n\r\n        // Add dictionary words into trie\r\n        for (int i = 0; i < dictionary.size(); i++) \r\n        {\r\n            insert(root, dictionary.get(i));\r\n        }\r\n\r\n        // Computing the final result\r\n        ArrayList<String> res = new ArrayList<>();\r\n        search(root, s, res, \"\", 0);\r\n\r\n        return res;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n    Time Complexity : O(N * (2 ^(N - 1))\r\n    Space Complexity :  O(26 * K * | word |)\r\n\r\n    Where N is the length of string 'S', 'K' is the number of words in the dictionary and \r\n    | word | is the length of each word. \r\n'''\r\n\r\n\r\nclass TrieNode:\r\n\r\n    def __init__(self):\r\n\r\n        # Setting all children of a new trie node to None\r\n        self.children = [None for i in range(26)]\r\n        self.isTerminal = False\r\n\r\n\r\ndef insert(root, word):\r\n\r\n    curr = root\r\n    for i in range(len(word)):\r\n\r\n        # Expanding the Trie if the branch was not there yet\r\n        if (curr.children[ord(word[i]) - ord('a')] == None):\r\n            curr.children[ord(word[i]) - ord('a')] = TrieNode()\r\n\r\n        curr = curr.children[ord(word[i]) - ord('a')]\r\n\r\n    # Mark last node as leaf\r\n    curr.isTerminal = True\r\n\r\n\r\ndef search(root, s, res, temp, pos):\r\n\r\n    curr = root\r\n\r\n    for i in range(pos, len(s)):\r\n\r\n        if (curr.children[ord(s[i]) - ord('a')] == None):\r\n            return\r\n\r\n        if (curr.children[ord(s[i]) - ord('a')].isTerminal == True):\r\n\r\n            # Last word we found with a positive lookup\r\n            lastWord = temp\r\n            lastWord += s[pos: i + 1]\r\n\r\n            # If it is also the last character of s, update res\r\n            if (i == len(s) - 1):\r\n                res.append(lastWord)\r\n\r\n            # Recursive calls otherwise\r\n            else:\r\n                search(root, s, res, lastWord + \" \", i + 1)\r\n\r\n        curr = curr.children[ord(s[i]) - ord('a')]\r\n\r\n    return\r\n\r\n\r\ndef wordBreak(s, dictionary):\r\n\r\n    # Base Trie\r\n    root = TrieNode()\r\n\r\n    # Add dictionary words into trie\r\n    for i in range(len(dictionary)):\r\n        insert(root, dictionary[i])\r\n\r\n    # Computing the final result\r\n    res = []\r\n    search(root, s, res, \"\", 0)\r\n\r\n    return res\r\n",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}