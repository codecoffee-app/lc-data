{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9845,
            "title": "Word Break",
            "titleSlug": "word-break_1094901",
            "content": "<h4 id=\"you-are-given-a-list-of-n-strings-a-your-task-is-to-check-whether-you-can-form-a-given-target-string-using-a-combination-of-one-or-more-strings-of-a\">You are given a list of \u201cN\u201d strings A. Your task is to check whether you can form a given target string using a combination of one or more strings of A.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You can use any string of A multiple times.\n</code></pre>\n\n<h5 id=\"examples\">Examples :</h5>\n\n<pre><code>A =[\u201ccoding\u201d, \u201dninjas\u201d, \u201cis\u201d, \u201cawesome\u201d]  target = \u201ccodingninjas\u201d\nAns = true as we use \u201ccoding\u201d and \u201cninjas\u201d to form \u201ccodingninjas\u201d\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains a single integer T, representing the number of test cases or queries to be run. \nThen the T test cases follow.\n\nThe first line of each test contains a single integer N denoting the total number of strings in A.\n\nThe second line of each test contains \u201cN\u201d space-separated strings of A.\n\nThe third line of each test contains a single string target. \n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print 1 if you can form a target string else print 0.\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 5 \n1 &lt;= N, | target | &lt;= 10^2\n1 &lt;= | A[i] | &lt;= 10\n\nWhere | A[i] | denotes length of string i,| target | denotes the length of the string target and A[i] contains only lowercase English characters.\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2 \n2\nab cd\nabcd\n2\ndo the\nhello\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1:</h5>\n\n<pre><code>For the first test case, A = [ \u201cab\u201d, \u201ccd\u201d], target = \u201cabcd\u201d\nWe can get \u201cabcd\u201d using \u201cab\u201d and \u201ccd\u201d\nSo answer will be 1.\n\nFor the second test case, A = [ \u201cdo\u201d, \u201cthe\u201d], target = \u201chello\u201d\nWe can\u2019t make a target using one or more strings of A.\nSo the answer will be 0.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2 \n2\naa a\naaaaa\n1\ndo\nd\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation For Sample Input 2:</h5>\n\n<pre><code>For the first test case, A =[ \u201caa\u201d, \u201ca\u201d], target = \u201caaaaa\u201d\nWe can use \u201ca\u201d 5 times to get \u201caaaaa\u201d.\nSo the answer will be 1.\n\nFor the second test case, A =[ \u201cdo\u201d], target = \u201cd\u201d\nWe can\u2019t make d using [\u201cdo\u201d].\nSo the answer will be 0.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 28,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of strings `arr` and a target string `target`, determine if it is possible to construct the `target` string by concatenating strings from `arr`. You can use each string in `arr` multiple times.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N, | target | <= 10^2",
                    "1 <= | A[i] | <= 10, where | A[i] | denotes the length of string i, and A[i] contains only lowercase English characters."
                ],
                "testcases": [
                    {
                        "input": "n = 2, arr = [\"ab\", \"cd\"], target = \"abcd\"",
                        "output": "1",
                        "explanation": "The target string \"abcd\" can be formed by concatenating \"ab\" and \"cd\" from the input array."
                    },
                    {
                        "input": "n = 2, arr = [\"do\", \"the\"], target = \"hello\"",
                        "output": "0",
                        "explanation": "The target string \"hello\" cannot be formed by concatenating the strings \"do\" and \"the\" in any combination."
                    },
                    {
                        "input": "n = 2, arr = [\"aa\", \"a\"], target = \"aaaaa\"",
                        "output": "1",
                        "explanation": "The target string \"aaaaa\" can be formed by concatenating the string \"a\" five times."
                    },
                    {
                        "input": "n = 1, arr = [\"do\"], target = \"d\"",
                        "output": "0",
                        "explanation": "The target string \"d\" cannot be formed using the string \"do\"."
                    },
                    {
                        "input": "n = 4, arr = [\"coding\", \"ninjas\", \"is\", \"awesome\"], target = \"codingninjas\"",
                        "output": "1",
                        "explanation": "The target string \"codingninjas\" can be formed by concatenating \"coding\" and \"ninjas\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a solution using brute force.</p>",
            "<p>Think of a solution using dp + memoization.</p>",
            "<p>Think of a solution using the Bottom Up DP</p>",
            "<p>Think of a solution using BFS.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Breadth-first Search",
                "slug": "breadth-first-search"
            },
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}