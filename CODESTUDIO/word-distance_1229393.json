{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10453,
            "title": "Word Distance",
            "titleSlug": "word-distance_1229393",
            "content": "<h4 id=\"you-are-given-a-document-as-an-array-list-arr-of-words-of-length-n-you-have-to-perform-q-queries-in-each-query-you-are-given-two-words-your-task-is-to-find-the-smallest-distance-between-these-two-words-in-a-document-and-return-it\">You are given a document as an Array/List &#39;ARR&#39; of words of length \u2018N\u2019. You have to perform Q queries. In each query, you are given two words. Your task is to find the smallest distance between these two words in a document and return it.</h4>\n\n<h4 id=\"distance-between-words-is-defined-as-the-difference-between-their-indexes\">Distance between words is defined as the difference between their indexes.</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>ARR=[\u2018hot\u2019, \u2018a\u2019, \u2018b\u2019, \u2018dog\u2019] and query = (\u2018hot\u2019, \u2018dog\u2019) \n\nThe answer, in this case, is 3 as the minimum distance between \u2018hot\u2019 and \u2018dog\u2019 in the given document is 3.  \n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>If any one of the words is not present in the document then your program must return \u2018N\u2019 which is the length of the document.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer &#39;T\u2019 denoting the number of test cases to run. Then the test case follows.\n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019 and \u2018Q\u2019 respectively.\n\nThe second line of each test case contains all the space-separated words in the document ARR.\n\nThe next \u2018Q\u2019 lines of each test case contain \u2018Q\u2019 queries, as two, space-separated words. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case print \u2018Q\u2019 lines, i\u2019th of which is the answer to i\u2019th query.\n\nAnswer to each query is printed on a new line. \n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N &lt;= 10^4\n1 &lt;= Q &lt;=100\n\nWhere, \u2018N\u2019 and \u2018Q\u2019, are the length of the ARR, number of queries, respectively. \n\nAll the strings in ARR contain only lowercase English letters. \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n5 2\na b c d a   \na d\na z\n4 1\ncat rat hat bat\ncat bat\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n5\n3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code>For the first test case, the minimum distance between \u201ca\u201d and \u201cd\u201d is 1, \nARR[5] = \u201ca\u201d, ARR[4]= \u201cd\u201d , 5-4 = 1\n\nFor the second query answer is 5 as \u201cz\u201d is not present in the ARR.\n\nFor the only query of the second test, the case answer is 3 as the minimum distance between \u201ccat\u201d and \u201cbat\u201d is 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n2 3\na b\na b\na b\na b \n6 1\nab bb cd ra wf bb \nbb ra \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n1\n1\n2\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 0,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a document represented as an array of words `arr` of length `n`, implement a function to process `q` queries. Each query consists of two words. For each query, determine the smallest distance between the two given words within the document `arr`. The distance between two words is defined as the absolute difference in their indices. If either of the words is not present in the document, return `n`, the length of the document.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 10^4",
                    "1 <= Q <= 100",
                    "All strings in ARR contain only lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "n = 5, q = 2, arr = [\"a\", \"b\", \"c\", \"d\", \"a\"], queries = [[\"a\", \"d\"], [\"a\", \"z\"]]",
                        "output": "1\n5",
                        "explanation": "For the first query, the minimum distance between 'a' and 'd' is 1 (index of 'a' is 0, index of 'd' is 3, so abs(0-3) = 3, and index of 'a' is 4, index of 'd' is 3, so abs(4-3) = 1. min distance is 1).\nFor the second query, 'z' is not present in the document, so the answer is 5."
                    },
                    {
                        "input": "n = 4, q = 1, arr = [\"cat\", \"rat\", \"hat\", \"bat\"], queries = [[\"cat\", \"bat\"]]",
                        "output": "3",
                        "explanation": "The minimum distance between 'cat' and 'bat' is 3 (index of 'cat' is 0, index of 'bat' is 3, so abs(0-3) = 3)."
                    },
                    {
                        "input": "n = 2, q = 3, arr = [\"a\", \"b\"], queries = [[\"a\", \"b\"], [\"a\", \"b\"], [\"a\", \"b\"]]",
                        "output": "1\n1\n1",
                        "explanation": "The minimum distance between 'a' and 'b' is always 1."
                    },
                    {
                        "input": "n = 6, q = 1, arr = [\"ab\", \"bb\", \"cd\", \"ra\", \"wf\", \"bb\"], queries = [[\"bb\", \"ra\"]]",
                        "output": "2",
                        "explanation": "Index of first 'bb' is 1, index of 'ra' is 3, distance = 2.\nIndex of second 'bb' is 5, index of 'ra' is 3, distance = 2. Minimum distance is 2."
                    },
                    {
                        "input": "n = 3, q = 1, arr = [\"the\", \"quick\", \"brown\"], queries = [[\"fox\", \"lazy\"]]",
                        "output": "3",
                        "explanation": "Neither 'fox' nor 'lazy' are in the array. Thus the output is n = 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we iterate over the array for each query and keep a pointer at the last index of two words?</p>",
            "<p>For each word can we pre-store it\u2019s indexed in the document and just iterate over them?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}