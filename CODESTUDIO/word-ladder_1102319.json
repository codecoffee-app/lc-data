{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9924,
            "title": "Word Ladder",
            "titleSlug": "word-ladder_1102319",
            "content": "<h4 id=\"you-are-given-two-strings-begin-and-end-and-an-array-of-strings-dict-your-task-is-to-find-the-length-of-the-shortest-transformation-sequence-from-begin-to-end-such-that-in-every-transformation-you-can-change-exactly-one-alphabet-and-the-word-formed-after-each-transformation-must-exist-in-dict\">You are given two strings BEGIN and END and an array of strings DICT. Your task is to find the length of the shortest transformation sequence from BEGIN to END such that in every transformation you can change exactly one alphabet and the word formed after each transformation must exist in DICT.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. If there is no possible path to change BEGIN to END then just return -1.\n2. All the words have the same length and contain only lowercase english alphabets.\n3. The beginning word i.e. BEGIN will always be different from the end word i.e. END (BEGIN != END).\n</code></pre>\n\n<h5 id=\"input-format\">Input format :</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a string BEGIN.\n\nThe second line of each test case contains a string END.\n\nThe third line of each test case contains a single integer N denoting the length of the DICT i.e. the array of strings.\n\nThe fourth line of each test case contains N space-separated strings denoting the strings present in the DICT array.\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, print a single integer representing the length of the shortest transformation sequence from BEGIN to END. \n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t have to print anything; it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 5\n1 &lt;= N&lt;= 10^2\n1 &lt;= |S| &lt;= 10^2\n\nWhere \u2018T\u2019 is the total number of test cases, \u2018N\u2019 denotes the length of the DICT array and |S| represents the length of each string.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 52,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a starting word `BEGIN`, an ending word `END`, and a dictionary `DICT` of valid words, find the length of the shortest transformation sequence from `BEGIN` to `END`. Each transformation must change exactly one letter, and the resulting word must be present in the `DICT`. If no such sequence exists, return -1. All words have the same length and contain only lowercase English letters. The starting word is always different from the ending word.",
                "constraints": [
                    "1 <= T <= 5",
                    "1 <= N <= 100",
                    "1 <= |S| <= 100",
                    "Where \u2018T\u2019 is the total number of test cases, \u2018N\u2019 denotes the length of the DICT array and |S| represents the length of each string."
                ],
                "testcases": [
                    {
                        "input": "BEGIN\nEND\nN\nDICT[0] DICT[1] ... DICT[N-1]",
                        "output": "Integer representing the length of the shortest transformation sequence or -1 if no path exists.",
                        "explanation": "null"
                    },
                    {
                        "input": "Example:\n'hit'\n'cog'\n6\n'hot' 'dot' 'dog' 'lot' 'log' 'cog'",
                        "output": "5",
                        "explanation": "One shortest transformation sequence is 'hit' -> 'hot' -> 'dot' -> 'dog' -> 'cog', which has a length of 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to think in terms of graph, how you can move from one word to another?</p>",
            "<p>Can you use a trie as a data structure to store words?</p>",
            "<p>You know the target word right? Try to think about how you can make use of this in BFS traversal.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tries",
                "slug": "tries"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}