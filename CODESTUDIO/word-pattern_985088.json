{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9382,
            "title": "Word Pattern",
            "titleSlug": "word-pattern_985088",
            "content": "<h4 id=\"you-have-been-given-two-strings-s-and-t-your-task-is-to-find-if-s-follows-the-same-pattern-as-t\">You have been given two strings &#39;S&#39; and \u2018T\u2019. Your task is to find if \u2018S\u2019 follows the same pattern as \u2018T\u2019.</h4>\n\n<h4 id=\"here-follow-means-a-full-match-i-e-there-is-a-bijection-between-a-letter-of-t-and-a-non-empty-word-of-s\">Here follow means a full match, i.e. there is a bijection between a letter of \u2018T\u2019 and a non-empty word of \u2018S\u2019.</h4>\n\n<h5 id=\"for-example\">For Example:</h5>\n\n<pre><code>If the given string is S = &quot;lion cow cow lion&quot; and T = \u201cwccw\u201d, then the string \u2018S\u2019 follows the same pattern as string \u2018T\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>&#39;T\u2019 contains only lowercase English letters.\n\n\u2018S\u2019 contains only lowercase English letters and spaces.\n\n\u2018S\u2019 does not contain any trailing or leading spaces. All words in \u2018S\u2019 are separated by a single space.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;t&#39; which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains a string \u2018S\u2019.\n\nThe second line of each test case contains a string \u2018T\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, the only line of output will print \u201cYes\u201d if \u2018S\u2019 follows the same pattern as \u2018T\u2019. Else print \u201cNo\u201d.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output, it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= t &lt;= 100\n1 &lt;= |S| &lt;= 5000\n1 &lt;= |T| &lt;= 5000\n\nTime Limit: 1 second\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\nship ship ship ship\nrrbb\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>No\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1:</h5>\n\n<pre><code>Here, string \u2018S\u2019 does not match the pattern with the string \u2018T\u2019 because different characters map the same word. \n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\nred blue blue red\nebbe\nmoon moon moon moon\naaaa\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>Yes\nYes\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings, 'S' and 'T', determine if 'S' follows the same pattern as 'T'. 'Follow' means a full match (bijection) between a character in 'T' and a non-empty word in 'S'.",
                "constraints": [
                    "1 <= t <= 100",
                    "1 <= |S| <= 5000",
                    "1 <= |T| <= 5000"
                ],
                "testcases": [
                    {
                        "input": "S = \"ship ship ship ship\", T = \"rrbb\"",
                        "output": "No",
                        "explanation": "The pattern 'rrbb' implies that 'r' maps to 'ship' and 'b' maps to 'ship'. This violates the bijection requirement because a single word in S maps to multiple characters in T when it should be that 1 character of T maps to 1 word of S."
                    },
                    {
                        "input": "S = \"red blue blue red\", T = \"ebbe\"",
                        "output": "Yes",
                        "explanation": "'e' maps to 'red' and 'b' maps to 'blue', satisfying the pattern."
                    },
                    {
                        "input": "S = \"moon moon moon moon\", T = \"aaaa\"",
                        "output": "Yes",
                        "explanation": "All characters in 'T' are 'a', and all words in 'S' are 'moon', so the pattern is followed."
                    },
                    {
                        "input": "S = \"lion cow cow lion\", T = \"wccw\"",
                        "output": "Yes",
                        "explanation": "'w' maps to 'lion', and 'c' maps to 'cow', satisfying the pattern."
                    },
                    {
                        "input": "S = \"dog cat cat dog\", T = \"abba\"",
                        "output": "Yes",
                        "explanation": "'a' maps to 'dog' and 'b' maps to 'cat', satisfying the pattern."
                    },
                    {
                        "input": "S = \"dog cat cat fish\", T = \"abba\"",
                        "output": "No",
                        "explanation": "The last word in S is 'fish' which should correspond to 'a', but 'a' already maps to dog, violating bijection."
                    },
                    {
                        "input": "S = \"dog dog dog dog\", T = \"abba\"",
                        "output": "No",
                        "explanation": "'a' maps to 'dog' and 'b' maps to 'dog', violating bijection (one-to-one mapping)."
                    },
                    {
                        "input": "S = \"a\", T = \"b\"",
                        "output": "Yes",
                        "explanation": "Simple one-to-one mapping"
                    },
                    {
                        "input": "S = \"a b\", T = \"ab\"",
                        "output": "Yes",
                        "explanation": "Direct one-to-one mapping."
                    },
                    {
                        "input": "S = \"\", T = \"\"",
                        "output": "Yes",
                        "explanation": "Empty strings match."
                    },
                    {
                        "input": "S = \"abc abc abc abc\", T = \"abab\"",
                        "output": "Yes",
                        "explanation": "Each letter of the pattern corresponds to a word in the string S."
                    },
                    {
                        "input": "S = \"abc abc abc\", T = \"abba\"",
                        "output": "No",
                        "explanation": "The lengths mismatch after the mapping"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to map the characters of \u2018T\u2019 to words of \u2018S\u2019 and words of \u2018S\u2019 to characters of \u2018T\u2019.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}