{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9879,
            "title": "Word Search",
            "titleSlug": "word-search_1095631",
            "content": "<h4 id=\"you-are-given-character-matrix-of-dimension-n-m-then-you-are-given-q-queries-each-query-consists-of-a-word-w-and-you-have-to-tell-whether-it-is-possible-to-form-word-w-by-choosing-some-adjacent-characters-from-this-matrix\">You are given character matrix of dimension N * M. Then you are given &#39;Q&#39; queries, each query consists of a word &#39;W&#39;, and you have to tell whether it is possible to form word &#39;W&#39; by choosing some adjacent characters from this matrix.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1. Two characters are said to be adjacent if they share a side or corner i.e. for a cell inside the matrix have 8 adjacent cells (if they exist).\n2. One character in the matrix will not be considered twice for forming a word.\n3. All the characters in the matrix and words consist only of uppercase English alphabets only.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains three space-separated integers &#39;N&#39;, &#39;M&#39;, and &#39;Q&#39; denoting the number of rows in the matrix, the number of columns in the matrix, and the number of queries respectively.\n\nThe following &#39;N&#39; lines contain &#39;M&#39; characters each, denoting the characters in i\u2019th row of the matrix.\n\nThe following &#39;Q&#39; lines contain a string \u2018W\u2019 each, denoting the word to be searched in the matrix.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each query print a single line containing \u20181\u2019 if the word is present in the matrix and \u20180\u2019 if the word is not present in the matrix in a separate line. For more clarity refer to sample test cases.\n\nThe output of each query will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don&#39;t have to print anything, it has already been taken care of. Just Implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= N * M &lt;= 12\n1 &lt;= Q &lt;= 100\n1 &lt;= |W| &lt;= 20\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>3 3 3\nCOD\nADE\nRER\nCODER\nRADE\nDONUTS\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n1\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>In the matrix \u201cCODER\u201d can be found at [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)] and \u201cRADE\u201d can be found at [(3, 1), (2, 1), (2, 2), (2, 3)]. But there is no way to find \u201cDONUTS\u201d in the matrix.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2 2 2 \nZO\nOM\nZOO\nMOOD\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of sample input 2:</h5>\n\n<pre><code>In the matrix \u201cZOO\u201d can be found at [(1, 1), (1, 2), (2, 1)]. But \u201cMOOD\u201d can not be found in the matrix.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a character matrix of dimensions N x M and a list of Q words, determine whether each word can be formed by traversing adjacent characters in the matrix. Two characters are considered adjacent if they share a side or a corner. Each character in the matrix can be used only once in forming a word. All characters are uppercase English letters.",
                "constraints": [
                    "1 <= N * M <= 12",
                    "1 <= Q <= 100",
                    "1 <= |W| <= 20"
                ],
                "testcases": [
                    {
                        "input": "mat = [\"COD\", \"ADE\", \"RER\"], n = 3, m = 3, queries = [\"CODER\", \"RADE\", \"DONUTS\"], q = 3",
                        "output": "[1, 1, 0]",
                        "explanation": "\"CODER\" can be found at [(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)] and \"RADE\" can be found at [(3, 1), (2, 1), (2, 2), (2, 3)].  \"DONUTS\" cannot be found."
                    },
                    {
                        "input": "mat = [\"ZO\", \"OM\"], n = 2, m = 2, queries = [\"ZOO\", \"MOOD\"], q = 2",
                        "output": "[1, 0]",
                        "explanation": "\"ZOO\" can be found at [(1, 1), (1, 2), (2, 1)]. \"MOOD\" cannot be found."
                    },
                    {
                        "input": "mat = [\"ABC\", \"DEF\", \"GHI\"], n = 3, m = 3, queries = [\"ADE\", \"CFH\", \"BGL\"], q = 3",
                        "output": "[1, 0, 0]",
                        "explanation": "\"ADE\" exists in the matrix. \"CFH\" and \"BGL\" cannot be formed from adjacent characters."
                    },
                    {
                        "input": "mat = [\"AAAA\", \"AAAA\", \"AAAA\", \"AAAA\"], n = 4, m = 4, queries = [\"AAAA\", \"AAAAAAAAAAAAAAA\", \"A\"], q = 3",
                        "output": "[1, 0, 1]",
                        "explanation": "\"AAAA\" can be found in multiple locations. Long strings of \"A\" may be valid but will eventually fail. \"A\" exists in the matrix."
                    },
                    {
                        "input": "mat = [\"X\"], n = 1, m = 1, queries = [\"X\", \"XX\"], q = 2",
                        "output": "[1, 0]",
                        "explanation": "Single element case.  'X' exists. 'XX' does not exist since the 'X' cannot be re-used."
                    },
                    {
                        "input": "mat = [\"ABCD\", \"EFGH\", \"IJKL\", \"MNOP\"], n = 4, m = 4, queries = [\"ACEG\", \"BDHF\", \"KIMO\", \"JNPL\"], q = 4",
                        "output": "[0, 0, 0, 0]",
                        "explanation": "Diagonal adjacency test. None of the given diagonal words can be found in the matrix according to adjacency rules."
                    },
                    {
                        "input": "mat = [\"AB\", \"CD\"], n = 2, m = 2, queries = [\"AB\", \"BC\", \"CD\", \"DA\", \"AC\", \"BD\", \"ABC\", \"BCD\", \"CDA\", \"DAB\", \"ABCD\", \"DCBA\"], q = 12",
                        "output": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
                        "explanation": "Tests many possible combinations of length 2,3 and 4 that are adjacent. All of these combinations exist in the matrix."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The given matrix or string can have a variety of 26 alphabets, can you think of a data structure to implement this.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tries",
                "slug": "tries"
            },
            {
                "name": "Matrices (2D Arrays)",
                "slug": "matrices-(2d-arrays)"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}