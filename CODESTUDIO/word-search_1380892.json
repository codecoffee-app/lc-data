{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 11183,
            "title": "Word search",
            "titleSlug": "word-search_1380892",
            "content": "<h4 id=\"ninja-has-to-implement-a-new-data-structure-presufsearch-this-data-structure-allows-searching-the-word-by-prefix-and-suffix-that-is-present-in-presufsearch\">Ninja has to implement a new data structure, \u2018PRE&#95;SUF&#95;SEARCH\u2019. This data structure allows searching the word by prefix and suffix that is present in \u2018PRE&#95;SUF&#95;SEARCH\u2019.</h4>\n\n<h4 id=\"ninja-has-to-implement-two-functions\">Ninja has to implement two functions:</h4>\n\n<pre><code>1) wordFilter(\u2018WORDS\u2019): Add this \u2018WORDS\u2019 array/list into \u2018PRE_SUF_SEARCH\u2019.\n2) find(\u2018PREFIX\u2019, \u2018SUFFIX\u2019): Return the index of the word that is present in \u2018PRE_SUF_SEARCH\u2019 having prefix as \u2018PREFIX\u2019 and the suffix as \u2018SUFFIX\u2019.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1) If there is more than one valid index in \u2018PRE_SUF_SEARCH\u2019 for the word, then return the largest possible index.\n2) If there is no such word present in the \u2018PRE_SUF_SEARCH\u2019, then return -1.\n3) \u2018WORDS\u2019 array/list contains only lowercase English alphabets.\n</code></pre>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>\u2018PRE_SUF_SEARCH\u2019 = [\u201capple\u201d, \u201cmango\u201d, \u201cbanana\u201d].\nQuery_1: find(\u2018a\u2019, \u2018e\u2019).\n\nWe have to find the index of the largest possible word that starts with \u2018a\u2019 and ends with \u2018e\u2019.\n\nHere we have only one word \u2018apple\u2019 present in \u2018PRE_SUF_SEARCH\u2019 and satisfy this condition. So we return 0.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 which denotes the number of test cases or queries to be run. Then the test cases follow.\n\nThe first line of each test case contains an integer \u2018N\u2019 representing the number of words in the \u2018WORDS\u2019.\n\nThe next line of each test case contains \u2018N\u2019 single space-separated words representing the elements of \u2018PRE_SUF_SEARCH\u2019.\n\nThe next line of each test case contains an integer \u2018Q\u2019 representing the number of times the function find(\u2018PREFIX\u2019, \u2018SUFFIX\u2019) call.\n\nThe next line of each test case contains two words representing the \u2018PREFIX\u2019 and \u2018SUFFIX\u2019. \n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the largest index of the word that satisfies the above conditions.\n\nThe output of each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You don\u2019t need to print anything; It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<p><br></p>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 100\n1 &lt;= \u2018N\u2019 &lt;= 10000\n1 &lt;= | \u2018WORDS[i]\u2019 | &lt;= 10\n1 &lt;= \u2018Q\u2019 &lt;= 10000\n1 &lt;= | \u2018PREFIX\u2019 |, | \u2018SUFFIX\u2019 | &lt;= 10\n\nWhere \u2018T\u2019 denotes the total number of test cases, \u2018N\u2019 represents the number of words in \u2018WORDS\u2019, and | \u2018 WORDS\u2019 | indicates the size of each word, \u2018Q\u2019 represents the number of times the function find(\u2018PREFIX\u2019, \u2018SUFFIX\u2019) call and \u2018PREFIX\u2019 and \u2018SUFFIX\u2019 represents the prefix and suffix of the word that is to be searched in \u2018PRE_SUF_SEARCH\u2019.\n\nTime limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n3\ncat bat rat\n3\nca t\nb t\nrr t\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0\n1\n-1\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h5>\n\n<pre><code>For sample test case 1:\nFor query 1,  &quot;cat&quot; has the prefix &quot;ca&quot; and suffix \u2018t&#39;.\nFor query 2,  &quot;bat&quot; has the prefix &#39;b&#39; and suffix &#39;t&#39;.\nFor query 3,  there is not a single word present in the &#39;PRE_SUF_SEARCH&#39; that has the prefix &quot;rr&quot;.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n4\ncoding ninjas is best for coding platform\n2\nco ng\nbes st \n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>5\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>For sample test case 1:\nFor query 1,  &quot;coding&quot; has the prefix &quot;co&quot; and suffix \u201cng\u201d. This word is present at 0 index and 5 index so we return 5 index which is the largest index among them.\nFor query 2,  &quot;best&quot; has the prefix \u201cbes\u201d and suffix \u201cst\u201d.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a data structure, `PRE_SUF_SEARCH`, that allows searching for words by prefix and suffix. Implement the following functions:\n\n1.  `wordFilter(WORDS)`: Add the words in the `WORDS` array/list to `PRE_SUF_SEARCH`.\n2.  `find(PREFIX, SUFFIX)`: Return the largest index of a word in `PRE_SUF_SEARCH` that has the given `PREFIX` and `SUFFIX`. If no such word exists, return -1.\n\nThe words in `WORDS` contain only lowercase English alphabets.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= N <= 10000 (Number of words in WORDS)",
                    "1 <= |WORDS[i]| <= 10 (Length of each word)",
                    "1 <= Q <= 10000 (Number of find calls)",
                    "1 <= |PREFIX|, |SUFFIX| <= 10 (Length of prefix and suffix)",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n3\ncat bat rat\n3\nca t\nb t\nrr t",
                        "output": "0\n1\n-1",
                        "explanation": "Test case 1:\nQuery 1: 'cat' has the prefix 'ca' and suffix 't'. Index 0.\nQuery 2: 'bat' has the prefix 'b' and suffix 't'. Index 1.\nQuery 3: No word has the prefix 'rr' and suffix 't'.  Return -1."
                    },
                    {
                        "input": "1\n4\ncoding ninjas is best for coding platform\n2\nco ng\nbes st",
                        "output": "5\n3",
                        "explanation": "Test case 2:\nQuery 1: \"coding\" at index 0 has prefix \"co\" and suffix \"ng\". Also, \"coding\" at index 5 has prefix \"co\" and suffix \"ng\". Returning the largest index i.e. 5.\nQuery 2: \"best\" at index 3 has prefix \"bes\" and suffix \"st\". Returning index 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of Hashing?</p>",
            "<p>Can you think of solving this problem by simple iteration through the \u2018WORDS\u2019?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}