{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10600,
            "title": "WRONG TURN",
            "titleSlug": "wrong-turn_1235202",
            "content": "<h4 id=\"ninja-started-working-as-a-delivery-boy-for-coding-ninja-and-used-to-deliver-goodies-to-the-students-as-usual-he-is-on-his-way-to-deliver-the-goodies-but-he-takes-a-wrong-turn-and-arrives-at-the-wrong-location-so-now-he-sees-the-map-of-that-locality-and-looks-for-his-target-on-the-map-the-map-contains-the-house-number-in-the-form-of-a-special-array-i-e-in-the-form-of-a-mountain-array\">Ninja started working as a delivery boy for \u2018Coding Ninja\u2019and used to deliver goodies to the students. As usual, he is on his way to deliver the goodies but he takes a wrong turn and arrives at the wrong location. So now he sees the map of that locality and looks for his target on the map. The map contains the house number in the form of a special array i.e in the form of a \u2018Mountain Array\u2019.</h4>\n\n<h4 id=\"a-mountain-array-arr-is-an-array-data-structure-that-has-the-following-properties\">A Mountain array(\u2018ARR\u2019) is an array data structure that has the following properties:</h4>\n\n<h4 id=\"1-arr-3\">1. |ARR| &gt;= 3</h4>\n\n<h4 id=\"2-there-exists-some-i-with-0-i-arr-length-1-such-that\">2. There exists some \u2018i\u2019 with 0 &lt; i &lt; arr.length-1 such that:</h4>\n\n<pre><code>1. ARR[0] &lt; ARR[1] &lt; . . . &lt; ARR[i-1] &lt; ARR[i]\n2. ARR[i] &gt; ARR[i+1] &gt; . . . &gt; ARR[ARR.length-1]\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You can&#39;t access the mountain array directly. You may only access the array using a MountainArray interface:\n1. MountainArray.get(k) returns the element of the array at index k (0-indexed).\n2. MountainArray.length() returns the length of the array.\n</code></pre>\n\n<h4 id=\"your-task-is-to-find-the-index-of-the-target-element-in-case-there-is-more-than-one-same-element-in-the-array-return-the-smaller-index-and-in-case-the-element-is-not-present-in-the-array-return-1\">Your task is to find the index of the target element. In case there is more than one same element in the array return the smaller index and in case the element is not present in the array return \u2018-1\u2019.</h4>\n\n<h4 id=\"follow-up\">Follow-up:</h4>\n\n<pre><code>Try to solve it at max 100 \u2018MountainArray.get(k)\u2019calls.\n</code></pre>\n\n<h4 id=\"input-format\">Input Format:</h4>\n\n<pre><code>The first line of input contains a \u2018T\u2019 number of test cases.\n\nThe first line of the test case, contains an integer \u2018N\u2019 denoting the size of the array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers.\n\nThe third line of each test case contains, an integer \u2018M\u2019 denoting the target element i.e the element which you have to search in the mountain array.\n</code></pre>\n\n<h4 id=\"output-format\">Output Format:</h4>\n\n<pre><code>For each test case, return the minimum index of the target element in case the element is not present return \u2018-1\u2019.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print anything explicitly. It has already been taken care of. Just implement the function. \nYou will be provided with only the object of the mountain array and target element.\n</code></pre>\n\n<h4 id=\"constraints\">Constraints:</h4>\n\n<pre><code>1 &lt;= T &lt;= 100\n3 &lt;= N &lt;= 10^3\n0 &lt;=  ARR[i] &lt;= 10^4\n0 &lt;= M &lt;= 10^4\n\nTime Limit: 1 sec   \n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1:</h4>\n\n<pre><code>2\n5\n1 2 3 2 1\n3\n4\n1 2 3 2\n5\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1:</h4>\n\n<pre><code>2\n-1\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h4>\n\n<pre><code>Test Case 1:\n\nAccording to this test case \u20185\u2019 is the size of the array. In the next line \u20181\u2019, \u20182\u2019, \u20183\u2019, \u20182\u2019, \u20181\u2019 are the elements of our array. In the next line \u20183\u2019 is the target element which we have to search in our mountain array.\nIn our array index of \u20183\u2019 is \u20182\u2019 so our answer is \u20182\u2019.\n\nTest Case 2:\n\nAccording to this test case \u20184\u2019 is the size of the array. In the next line \u20181\u2019, \u20182\u2019, \u20183\u2019, \u20182\u2019 are the elements of our array. In the next line \u20185\u2019 is the target element which we have to search in our mountain array.\nIn our array element\u20185\u2019 is not present so we return \u2018-1\u2019.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3\n1 2 1\n2\n4\n1 2 3 1\n1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample output 2:</h5>\n\n<pre><code>1\n0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -6,
            "dislikes": "NA",
            "rephrased": {
                "body": "Ninja, a delivery boy for 'Coding Ninja,' encounters a problem. He's at the wrong location and needs to find a specific house number on a map. The map is represented as a mountain array, which is an array that first increases to a peak and then decreases.  You are tasked with finding the index of a given target element within this mountain array. If the target appears multiple times, return the smallest index. If the target is not present, return -1.\n\nYou can only access the mountain array through the `MountainArray` interface:\n\n*   `MountainArray.get(k)`: Returns the element at index `k` (0-indexed).\n*   `MountainArray.length()`: Returns the length of the array.",
                "constraints": [
                    "1 <= T <= 100",
                    "3 <= N <= 10^3",
                    "0 <= ARR[i] <= 10^4",
                    "0 <= M <= 10^4",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n1 2 3 2 1\n3",
                        "output": "2",
                        "explanation": "The array is [1, 2, 3, 2, 1] and the target is 3. The index of 3 is 2."
                    },
                    {
                        "input": "4\n1 2 3 2\n5",
                        "output": "-1",
                        "explanation": "The array is [1, 2, 3, 2] and the target is 5.  5 is not present in the array."
                    },
                    {
                        "input": "3\n1 2 1\n2",
                        "output": "1",
                        "explanation": "The array is [1, 2, 1] and the target is 2. The index of 2 is 1."
                    },
                    {
                        "input": "4\n1 2 3 1\n1",
                        "output": "0",
                        "explanation": "The array is [1, 2, 3, 1] and the target is 1. The index of 1 is 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to iterate whole array and check on each index whether it can be a peak or not.</p>",
            "<p>As the array is monotonic so try to eliminate elements that are not peak using binary search.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}