{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10455,
            "title": "XML encoding",
            "titleSlug": "xml-encoding_1229395",
            "content": "<h4 id=\"the-extensible-markup-language-xml-is-a-simple-text-based-format-for-representing-information-the-syntax-for-xml-is-as-follows\">The eXtensible Markup Language (XML) is a simple text-based format for representing information. The syntax for XML is as follows:</h4>\n\n<h4 id=\"element-tag-attributes-end-child-endattribute-tag-value\"><ol ><li>Element =&gt; TAG Attributes END Child END</li><li>Attribute =&gt; TAG Value</li></ol></h4>\n\n<h4 id=\"value-string-value-tag-default-mapping-to-an-integer-value-child-list-of-elements-or-a-single-value-never-both-end-encoded-as-0\"><ul ><li>Value: String value.</li><li>TAG: Default mapping to an integer value.</li><li>Child: List of \u2018Elements\u2019 or a single \u2018Value\u2019. Never both.</li><li>End: Encoded as 0.</li></ul></h4>\n\n<h4 id=\"you-are-given-an-element-object-and-the-mapping-of-each-tag-to-an-integer-value-the-task-is-to-encode-this-element-using-the-tag-mapping-and-return-the-resultant-string\">You are given an \u2018Element\u2019 object and the mapping of each \u2018TAG\u2019 to an integer value. The task is to encode this \u2018Element\u2019 using the \u2018TAG\u2019 mapping and return the resultant string.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Element object:\n&lt;codingNinjas course=\u201cInterviewPreparation\u201d type=\u201cIndividualCourse\u201d&gt;\n    &lt;topic name=\u201cAptitude\u201d&gt;CourseContents&lt;/topic&gt;\n&lt;/codingNinjas&gt;\n\nTag mapping:\n\u2018codingNinjas\u2019 =&gt; 1, \u2018topic\u2019 =&gt; 2, \u2018courseName\u2019 =&gt; 3, \u2018type\u2019 =&gt; 4, \u2018topicName\u2019 =&gt; 5\n\nThe given element is \u2018codingNinjas\u2019, and it has a single child element \u2018topic\u2019. The element \u2018codingNinjas\u2019 has two attributes having tags as \u2018course\u2019 and \u2018type\u2019. The element \u2018topic\u2019 has one attribute with the tag as \u2018name\u2019. So, the encoded string is: \n\n\u20181 3 InterviewPreparation 4 IndividualCourse 0 2 5 Aptitude 0 CourseContents 0 0\u2019\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>1. \u2018END\u2019 is always encoded as 0.\n2. An \u2018Element\u2019 can have zero or multiple \u2018Attributes\u2019.\n</code></pre>\n\n<h5 id=\"function-description\">Function description:</h5>\n\n<pre><code>The function \u2018encodeXML\u2019 has the following parameters:\nPointer to an \u2018Element\u2019 object.\nMapping of \u2018TAG\u2019 name (string) to an integer value.\nStructure of \u2018Element\u2019 and \u2018Attribute\u2019 object:\nElement {\n    String tag;\n    List&lt;Attribute&gt; attributes;\n    List&lt;Element *&gt; child;\n    String value;\n}\nAttribute {\n    String tag;\n    String value;\n}\n\nIf \u2018Element\u2019 stores a list of child elements, then \u2018(Element =&gt; values)\u2019 stores an empty string.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the count of elements, including nested elements.\n\nThe following \u2018N\u2019 blocks of lines contain the description of \u2018N\u2019 elements. Each block is as follows:\n\n 1. Each block\u2019s first line contains three space-separated values, integer \u2018ID\u2019 denoting the element\u2019s id, \u2018M\u2019 denoting the number of \u2018Attributes\u2019, and a string denoting the element\u2019s \u2018tag\u2019. The \u2018ID\u2019 is used later on to identify the child elements.\n 2. The next \u2018M\u2019 lines contain two space-separated integers denoting the \u2018tag\u2019 and \u2018value\u2019 of each \u2018Attribute\u2019.\n 3. The next line contains either of the following:\n     a. If the element stores a value, it contains the integer 0 and a string denoting the \u2018value\u2019 in the element, separated by space.\n     b. Otherwise, an integer \u2018C\u2019 denoting the number of child elements.\n\nThe next \u2018N - 1\u2019 lines contain two space-separated integers, \u2018A\u2019 and \u2018B\u2019, the element with \u2018id\u2019 as \u2018B\u2019 is the child of the element with \u2018id\u2019 as \u2018A\u2019. The given \u2018Element\u2019 object always has \u2018id\u2019 equal to \u20181\u2019 and has no parent.\n\nThe next line of each test case contains an integer \u2018S\u2019 denoting the number of \u2018tags\u2019.\n\nThe next \u2018S\u2019 lines of each test case contain two space-separated values, a string denoting the \u2018tag\u2019 name and an integer mapped to this \u2018tag\u2019.\n</code></pre>\n\n<h5 id=\"output-format\">Output format:</h5>\n\n<pre><code>For each test case, return the encoded string.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n2 &lt;= N &lt;= 1000\n\nThe count of \u2018Attributes\u2019 of all elements doesn\u2019t exceed 1000.\nThe string \u2018Value\u2019 is non-empty and contains only \u2018a-z\u2019 and \u2018A-Z\u2019 characters.\n\nTime Limit: 1 sec\n</code></pre>\n<h4 id=\"sample-input-1\">Sample input 1:</h4>\n\n<pre><code>2\n3\n1 1 title\nproblem XML\n1\n2 1 input\nname SampleOne\n1\n3 0 output\n0 SomeValue\n1 2\n2 3\n5\ntitle 6\nproblem 7\ninput 8\nname 9\noutput 10\n3\n1 2 title\nproblem knapsack\ndifficulty medium\n2\n2 1 input\nname SampleOne\n0 SomeValue\n3 0 approach\n0 code\n1 2\n1 3\n6\ntitle 6\nproblem 7\ninput 8\nname 9\napproach 11\ndifficulty 13\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample output 1:</h4>\n\n<pre><code>6 7 XML 0 8 9 SampleOne 0 10 0 SomeValue 0 0 0\n6 7 knapsack 13 medium 0 8 9 SampleOne 0 SomeValue 0 11 0 code 0 0\n</code></pre>\n\n<h4 id=\"explanation-of-sample-input-1\">Explanation of sample input 1:</h4>\n\n<pre><code>Test case 1: \nThe given element is \u2018title\u2019 having XML format as follows:\n&lt;title problem=\u201cXML\u201d&gt;\n    &lt;input name=\u201cSampleOne\u201d&gt;\n        &lt;output&gt;SomeValue&lt;/output&gt;\n    &lt;/input&gt;\n&lt;/title&gt;\nSo, the encoded string is: \n\u20186 7 XML 0 8 9 SampleOne 0 10 0 SomeValue 0 0 0\u2019\n\nTest case 2:\nThe given element is \u2018title\u2019 having XML format as follows:\n&lt;title problem=\u201cknapsack\u201d difficulty=\u201cmedium\u201d&gt;\n    &lt;input name=\u201cSampleOne\u201d&gt;SomeValue&lt;/input&gt;\n    &lt;approach&gt;code&lt;/approach&gt;\n&lt;/title&gt;\nSo, the encoded string is:\n\u20186 7 knapsack 13 medium 0 8 9 SampleOne 0 SomeValue 0 11 0 code 0 0\u2019\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample input 2:</h4>\n\n<pre><code>2\n2\n1 0 topic\n1\n2 1 input\nname CaseOne\n0 document\n1 2\n3\ntopic 2\ninput 8\nname 9\n1\n1 3 output\nname CaseThree\nproblem sorting\ndifficulty easy\n0 SomeValue\n4\noutput 10\nname 9\nproblem 7\ndifficulty 13\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample output 2:</h4>\n\n<pre><code>2 0 8 9 CaseOne 0 document 0 0\n10 9 CaseThree 7 sorting 13 easy 0 SomeValue 0\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 5,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an XML-like data structure represented as an 'Element' object. Each 'Element' has a tag, a list of attributes (each with a tag and a value), a list of child elements, and a string value.  You are also provided with a mapping from tag names (strings) to integer values. Your task is to encode the 'Element' into a space-separated string according to the following rules:\n\n1.  Encode the element's tag using its corresponding integer value from the tag mapping.\n2.  Encode each attribute of the element. For each attribute, encode the attribute's tag using its integer value, followed by the attribute's value.\n3.  Encode the 'END' marker (0) after all attributes.\n4.  If the element has child elements, recursively encode each child element. If the element has a value, encode it directly.\n5.  Encode the 'END' marker (0) after all child elements or the element's value.\n6.  Finally, encode the 'END' marker (0) to signify the end of the element.\n\nReturn the resulting encoded string.",
                "constraints": [
                    "1 <= T <= 10",
                    "2 <= N <= 1000",
                    "The count of 'Attributes' of all elements doesn\u2019t exceed 1000.",
                    "The string \u2018Value\u2019 is non-empty and contains only \u2018a-z\u2019 and \u2018A-Z\u2019 characters.",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "n = 3, element = {tag: \"title\", attributes: [{tag: \"problem\", value: \"XML\"}], child: [{tag: \"input\", attributes: [{tag: \"name\", value: \"SampleOne\"}], child: [{tag: \"output\", attributes: [], value: \"SomeValue\"}], value: \"\"}], value: \"\"}, tagToInt = {\"title\": 6, \"problem\": 7, \"input\": 8, \"name\": 9, \"output\": 10}",
                        "output": "6 7 XML 0 8 9 SampleOne 0 10 0 SomeValue 0 0 0",
                        "explanation": "The 'title' element is encoded as 6. It has one attribute 'problem' encoded as 7 XML. Then END (0).  The 'input' element is encoded as 8.  It has one attribute 'name' encoded as 9 SampleOne. Then END (0). The 'output' element is encoded as 10 and has value SomeValue and then END(0). Final END(0) marks end of input element and  END(0) end of title element."
                    },
                    {
                        "input": "n = 3, element = {tag: \"title\", attributes: [{tag: \"problem\", value: \"knapsack\"}, {tag: \"difficulty\", value: \"medium\"}], child: [{tag: \"input\", attributes: [{tag: \"name\", value: \"SampleOne\"}], child: [], value: \"SomeValue\"}, {tag: \"approach\", attributes: [], child: [], value: \"code\"}], value: \"\"}, tagToInt = {\"title\": 6, \"problem\": 7, \"input\": 8, \"name\": 9, \"approach\": 11, \"difficulty\": 13}",
                        "output": "6 7 knapsack 13 medium 0 8 9 SampleOne 0 SomeValue 0 11 0 code 0 0",
                        "explanation": "The 'title' element is encoded as 6. It has two attributes, 'problem' encoded as 7 knapsack and 'difficulty' encoded as 13 medium. Then END (0). The 'input' element is encoded as 8 and name is 9 SampleOne. The value is SomeValue and END(0). The 'approach' element is encoded as 11 and value is code then END(0). Last END is added."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to solve this problem using recursion.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Recursion",
                "slug": "recursion"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}