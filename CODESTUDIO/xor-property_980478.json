{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9183,
            "title": "XOR Property",
            "titleSlug": "xor-property_980478",
            "content": "<h4 id=\"you-are-given-a-full-binary-tree-with-n-nodes-your-task-is-to-check-whether-it-satisfies-xor-property\">You are given a Full Binary Tree with N nodes. Your task is to check whether it satisfies XOR Property.</h4>\n\n<h4 id=\"xor-property-of-binary-tree-every-node-should-be-xor-of-its-left-and-right-child\">XOR Property of Binary Tree: Every node should be XOR of it&#39;s left and right child.</h4>\n\n<h5 id=\"for-example\">For Example :</h5>\n\n<pre><code>Consider the Binary Tree below :\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/tree-11717.png\" alt=\"Alt Text\"></p>\n\n<pre><code>Here only node 1 has both its children. Also 1 = 3^2. So the answer for the above test case is true. We consider the xor only when both the children are present.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases. Then each test case follow.\n\nThe first line of each test case contains the elements of the binary tree in the level order form separated by a single space.\n\nIf any node does not have a left or right child, take -1 in its place. Refer to the example below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/triple_sum_input_format-11667.png\"/> </p>\n\n<pre><code>1\n2 3\n-1 4 -1 -1\n5 -1\n-1 -1\n\nExplanation :\nLevel 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 2\nRight child of 1 = 3\n\nLevel 3 :\nLeft child of 2 = null (-1)\nRight child of 2 = 4\nLeft child of 3 = null (-1)\nRight child of 3 = null (-1)\n\nLevel 4 :\nLeft child of 4 = 5\nRight child of 4 = null (-1)\n\nLevel 5 :\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\n\nThe first not-null node (of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\n\nThe input ends when all nodes at the last level are null (-1).\n\nNote: The above format was just to provide clarity on how the input is formed for a given tree. \n\nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n\n1 2 3 -1 4 -1 -1 5 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, return True or False denoting whether the given binary tree satisfies the above condition.\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= number of nodes &lt;= 5000\n1 &lt;= nodeVal &lt;= 10^9\n\nTime Limit: 1 se\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>1\n2 3 4 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>False\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<p><img src=\"https://files.codingninjas.in/pasted-image-0-11715.png\" alt=\"Alt text\"></p>\n\n<pre><code>For the given test case, There is a binary tree of 3 nodes only. Node with value 2 has one node on the left and another on right. Since 2 != (3^4) this tree doesn\u2019t satisfy the xor property.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n8 4 12 3 7 3 15 1 2 3 4 5 6 7 8 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>True\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": -4,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a full binary tree with N nodes, determine if it satisfies the XOR property. The XOR property dictates that for every node with both left and right children, the node's value must equal the bitwise XOR of its left and right child values.  The input is provided in level order, with -1 representing null nodes.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= Number of nodes <= 5000",
                    "1 <= Node value <= 10^9",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "1\n2 3 4 -1 -1 -1 -1",
                        "output": "False",
                        "explanation": "The binary tree consists of nodes 2, 3, and 4. Node 2 has children 3 and 4. The XOR property is violated because 2 != (3 ^ 4) which is 2 != 7, therefore it returns False."
                    },
                    {
                        "input": "1\n8 4 12 3 7 3 15 1 2 3 4 5 6 7 8 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1",
                        "output": "True",
                        "explanation": "In this test case, all the nodes with both children satisfy the XOR property.  Therefore, the function returns True."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>For each node check if it satisfies the property in dfs order.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            },
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}