{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 14685,
            "title": "XOR Queries of Subarray",
            "titleSlug": "xor-queries-of-subarray_2221407",
            "content": "<h4 id=\"you-are-given-an-array-arr-containing-n-positive-integers\">You are given an array \u2018Arr\u2019 containing \u2018N\u2019 positive integers.</h4>\n\n<h4 id=\"you-have-to-process-q-queries-in-each-query-you-are-given-two-integers-l-and-r-compute-the-xor-of-elements-in-the-subarray-from-l-to-r-inclusive-ie-compute-the-value-arr-l-arr-l-1-arr-l-2-arr-r-where-represents-the-xor-operator\">You have to process \u2018Q\u2019 queries. In each query you are given two integers \u2018L\u2019 and \u2018R\u2019, compute the \u2018XOR\u2019 of elements in the subarray from L to R (inclusive), ie: compute the value Arr [ L ] ^ Arr [ L + 1 ] ^ Arr [ L + 2 ] ^ . . . . ^ Arr [ R ], where \u2018 ^ \u2019 represents the XOR operator.</h4>\n\n<h5 id=\"example\">Example :</h5>\n\n<pre><code>If N = 5 and the array is: { 1, 3, 4, 3, 5 }, and for the given query L = 0 and R = 3, then we will return 1 ^ 3 ^ 4 ^ 3 = 5.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test cases, then each test case follows:\n\nThe first line of each test case contains a single integer \u2018N\u2019 denoting the size of the array.\n\nThe second line of each test case contains N positive integers denoting the array elements \u2018Arr[i]\u2019.\n\nThe third line of each test case contains a single integer \u2018Q\u2019 denoting the number of queries to be processed.\n\nThe next Q lines each contains two integers \u2018L\u2019 and \u2018R\u2019 denoting the start and end indexes of the subarray whose XOR needs to be computed.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print Q integers, each denoting the subarray XOR for the given query.\n\nOutput for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You are not required to print anything; it has already been taken care of. Just implement the function and return an array that stores the answer to each query.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10      \n1 &lt;= N &lt;= 100\n1 &lt;= Arr[i] &lt;= 10^5\n1 &lt;= Q &lt;= 200\n0 &lt;= L &lt;= R &lt;= N-1\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n5\n1 3 4 3 5\n3\n0 3\n1 4\n2 3\n8\n7 4 5 2 6 3 8 1\n1\n2 5\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>5 1 7\n2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation For Sample Input 1 :</h5>\n\n<pre><code>For test case 1 : \nGiven array is { 1, 3, 4, 3, 5 }\nquery 1: 1 ^ 3 ^ 4 ^ 3 = 5\nquery 2: 3 ^ 4 ^ 3 ^ 5 = 1\nquery 3: 4 ^ 3 = 7\n\nFor test case 2 :\nGiven array is { 7, 4, 5, 2, 6, 3, 8, 1 }\nquery 1: 5 ^ 2 ^ 6 ^ 3 = 2\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n1\n100\n1\n0 0\n3\n2 4 8\n2\n0 2\n1 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>100\n14 4\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 7,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array \u2018Arr\u2019 of \u2018N\u2019 positive integers, process \u2018Q\u2019 queries.  Each query provides two integers \u2018L\u2019 and \u2018R\u2019.  For each query, calculate the XOR of the elements within the subarray from index L to R (inclusive). Return an array containing the XOR results for each query.",
                "constraints": [
                    "1 <= T <= 10",
                    "1 <= N <= 100",
                    "1 <= Arr[i] <= 10^5",
                    "1 <= Q <= 200",
                    "0 <= L <= R <= N-1",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "5\n1 3 4 3 5\n3\n0 3\n1 4\n2 3",
                        "output": "5 1 7",
                        "explanation": "Given array is { 1, 3, 4, 3, 5 }\nquery 1: 1 ^ 3 ^ 4 ^ 3 = 5\nquery 2: 3 ^ 4 ^ 3 ^ 5 = 1\nquery 3: 4 ^ 3 = 7"
                    },
                    {
                        "input": "8\n7 4 5 2 6 3 8 1\n1\n2 5",
                        "output": "2",
                        "explanation": "Given array is { 7, 4, 5, 2, 6, 3, 8, 1 }\nquery 1: 5 ^ 2 ^ 6 ^ 3 = 2"
                    },
                    {
                        "input": "1\n100\n1\n0 0",
                        "output": "100",
                        "explanation": null
                    },
                    {
                        "input": "3\n2 4 8\n2\n0 2\n1 1",
                        "output": "14 4",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you take advantage of the small constraints?</p>",
            "<p>What is the value of ( x ^ y ) ^ x? Can precomputing the XOR values help in any way?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Manipulation",
                "slug": "bit-manipulation"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}