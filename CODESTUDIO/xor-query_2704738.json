{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 15779,
            "title": "XOR Query",
            "titleSlug": "xor-query_2704738",
            "content": "<h4 id=\"you-are-given-a-tree-root-0-with-n-vertex-having-n-1-edges-you-are-also-given-an-array-query-of-size-q-where-each-query-consists-of-an-integer-that-denotes-a-node-you-have-to-print-the-xor-of-all-the-values-of-nodes-in-the-sub-tree-of-the-given-node\">You are given a tree(root 0) with N vertex having N - 1 edges. You are also given an array \u2018QUERY\u2019 of size \u2018Q\u2019, where each query consists of an integer that denotes a node. You have to print the xor of all the values of nodes in the sub-tree of the given node.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>Here XOR denotes the bitwise operator (^).\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line of the input contains an integer, &#39;T,\u2019 denoting the number of test cases.\n\nThe first line of each test case contains two space-separated integers, \u2018N\u2019 and &#39;Q&#39;, denoting the number of nodes and the total queries operation to be performed.\n\nThe next \u2018N\u2019-1 lines of each test case contain two integers representing an edge between the given indices.\n\nThe next line of each test case contains \u2018Q\u2019 space-separated integers denoting the nodes of the tree on which query has to be performed.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print \u2018Q\u2019 space-separated integers denoting the result of the queries.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n0 &lt;= N, Q &lt;= 10^5 \n0 &lt;= QUERY[i] &lt; N\n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\n4 3\n0 1\n0 2\n2 3\n0 2 3\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>0 1 3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-1\">Explanation For Sample Output 1 :</h5>\n\n<pre><code>For the first test case :\nThe tree for the test case will be:  \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/p1-13634.PNG\" alt=\"\"></p>\n\n<pre><code>For query 1: Xor will be: 0 ^ 1 ^ 2 ^ 3 = 0\nFor query 2: Xor will be: 2 ^ 3 = 1\nFor query 3: Xor will be: 3 = 3\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>1\n7 4\n0 1\n0 2\n1 3\n1 4\n2 5\n2 6\n0 1 4 5\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>7 6 4 5\n</code></pre>\n\n<h5 id=\"explanation-for-sample-output-2\">Explanation For Sample Output 2 :</h5>\n\n<pre><code>For the first test case :\nThe tree for the test case will be:  \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/p2-13635.PNG\" alt=\"\"></p>\n\n<pre><code>For query 1: Xor will be: 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6= 7\nFor query 2: Xor will be: 1 ^ 3 ^ 4 = 6\nFor query 3: Xor will be: 4 = 4\nFor query 4: Xor will be: 5 = 5    \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": 10,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a tree (rooted at node 0) with N vertices and N-1 edges. You are also given an array 'QUERY' of size 'Q', where each element represents a node. For each node in 'QUERY', you need to calculate the XOR of all node values in its subtree and return the results.",
                "constraints": [
                    "1 <= T <= 10",
                    "0 <= N, Q <= 10^5",
                    "0 <= QUERY[i] < N",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1\n4 3\n0 1\n0 2\n2 3\n0 2 3",
                        "output": "0 1 3",
                        "explanation": "For the first query (node 0), the subtree consists of nodes 0, 1, 2, and 3.  The XOR is 0 ^ 1 ^ 2 ^ 3 = 0.\nFor the second query (node 2), the subtree consists of nodes 2 and 3. The XOR is 2 ^ 3 = 1.\nFor the third query (node 3), the subtree consists of node 3 only. The XOR is 3 = 3."
                    },
                    {
                        "input": "1\n7 4\n0 1\n0 2\n1 3\n1 4\n2 5\n2 6\n0 1 4 5",
                        "output": "7 6 4 5",
                        "explanation": "For the first query (node 0), the subtree includes nodes 0, 1, 2, 3, 4, 5, and 6. XOR is 0^1^2^3^4^5^6 = 7.\nFor the second query (node 1), the subtree includes nodes 1, 3, and 4. XOR is 1^3^4 = 6.\nFor the third query (node 4), the subtree includes node 4 only. XOR is 4.\nFor the fourth query (node 5), the subtree includes node 5 only. XOR is 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try traversing the sub-tree for each query.</p>",
            "<p>Try to precompute XOR of all the nodes of the subtree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Depth-first Search",
                "slug": "depth-first-search"
            },
            {
                "name": "Trees",
                "slug": "trees"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}