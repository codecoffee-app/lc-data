{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 8697,
            "title": "XOR Query",
            "titleSlug": "xor-query_893314",
            "content": "<h4 id=\"assume-you-initially-have-an-empty-array-say-arr\">Assume you initially have an empty array say \u2018ARR\u2019.</h4>\n\n<h4 id=\"you-need-to-return-the-updated-array-provided-that-some-q-number-of-queries-were-performed-on-this-array\">You need to return the updated array provided that some \u2018Q\u2019 number of queries were performed on this array.</h4>\n\n<h4 id=\"the-queries-are-of-two-types\">The queries are of two types:</h4>\n\n<pre><code>1. 1 \u2018VAL\u2019, for this type of query, you need to insert the integer &#39;VAL&#39; to the end of the array.\n2. 2 \u2018VAL\u2019, for this type of query, you need to take the bitwise XOR of all the elements of the array with &#39;VAL&#39; i.e each element of the array \u2018ARR\u2019 will be updated as \u2018ARR[i]\u2019 = \u2018ARR[i]\u2019 ^ \u2018VAL\u2019 ( ^ denotes the bitwise XOR operation).\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1) Bitwise XOR operation takes two numbers and performs XOR operation on every bit of those two numbers. For example, consider two numbers 2 and 3 their bitwise XOR will be 1. Because the binary representation of 2 is &#39;10&#39; and the binary representation of 3 is &#39;11&#39;. And XOR of &#39;10&#39; and &#39;11&#39; will be &#39;01&#39;(because XOR evaluates to 0 if the corresponding bits are the same in both the operands, otherwise it evaluates to 1), which is equal to 1.\n\n2) The first query will always be a type 1 query.\n\n3) Note that the ith query should be performed on the array obtained after performing (i-1)th query on the array and so on i.e the changes of each query are updated on the original array itself.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019 which represents the number of test cases.\n\nThe first line of each test case contains an integer \u2018Q\u2019 denoting the number of queries. \n\nThen each of the \u2018Q\u2019 lines contains two space-separated integers denoting the query to be performed.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, return the updated array after processing all the queries.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function. \n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= Q &lt;= 10^5\n1 &lt;= Val &lt;= 10^9\n\nTime Limit: 1sec\n</code></pre>\n\n<h5 id=\"follow-up\">Follow Up:</h5>\n\n<pre><code>Can you solve this in constant i.e O(1) space complexity? Space used to return the list will not be counted as an extra space.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n2\n1 3\n2 2\n3\n1 2\n2 3\n2 1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n0\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>For the first test case:\nAfter the first query, 3 will be pushed into the array, so the array will be {3}, then after processing the second query the array will be changed to {3^2} i.e. {1}. So the output array will be {1}.\n\nFor the second test case:\nAfter the first query, 2 will be pushed into the array, so the array will be {2}, then after processing the second query the array will be changed to {2^3} i.e. {1}, further the array is modified as {1^1} i.e {0}, after processing the third query. So the output array will be {0}.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 \n1 2 \n1 3\n2 4\n3\n1 4\n1 5\n2 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>6 7\n5 4\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>For the first test case:\nAfter the first query, 2 will be pushed into the array, so the array will be {2}. Then after processing the second query 3 will be pushed into the array, so the array will be {2, 3}. Then after processing the third query the array will be changed to {2^4, 3^4} i.e. {6, 7}. So the output array will be {6, 7}.\n\nFor the second test case:\nAfter the first query, 4 will be pushed into the array, so the array will be {4}. Then after processing the second query 5 will be pushed into the array, so the array will be {4, 5}. Then after processing the third query the array will be changed to {4^1, 5^1} i.e. {5, 4}. So the output array will be {5, 4}.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": 217,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given an empty array 'ARR'. Process a series of 'Q' queries to update the array. There are two types of queries:\n\n1.  **1 VAL**: Append the integer 'VAL' to the end of the array 'ARR'.\n2.  **2 VAL**: Perform a bitwise XOR operation between 'VAL' and each element in the array 'ARR'. Update each element ARR[i] as ARR[i] = ARR[i] ^ VAL.\n\nReturn the final updated array 'ARR' after processing all queries.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= Q <= 10^5 (Number of queries)",
                    "1 <= Val <= 10^9 (Value in queries)"
                ],
                "testcases": [
                    {
                        "input": "queries = [[1, 3], [2, 2]]",
                        "output": "[1]",
                        "explanation": "Initially, ARR = [].\nQuery 1: Append 3. ARR = [3].\nQuery 2: XOR each element with 2. ARR = [3^2] = [1].\nOutput: [1]"
                    },
                    {
                        "input": "queries = [[1, 2], [2, 3], [2, 1]]",
                        "output": "[0]",
                        "explanation": "Initially, ARR = [].\nQuery 1: Append 2. ARR = [2].\nQuery 2: XOR each element with 3. ARR = [2^3] = [1].\nQuery 3: XOR each element with 1. ARR = [1^1] = [0].\nOutput: [0]"
                    },
                    {
                        "input": "queries = [[1, 2], [1, 3], [2, 4]]",
                        "output": "[6, 7]",
                        "explanation": "Initially, ARR = [].\nQuery 1: Append 2. ARR = [2].\nQuery 2: Append 3. ARR = [2, 3].\nQuery 3: XOR each element with 4. ARR = [2^4, 3^4] = [6, 7].\nOutput: [6, 7]"
                    },
                    {
                        "input": "queries = [[1, 4], [1, 5], [2, 1]]",
                        "output": "[5, 4]",
                        "explanation": "Initially, ARR = [].\nQuery 1: Append 4. ARR = [4].\nQuery 2: Append 5. ARR = [4, 5].\nQuery 3: XOR each element with 1. ARR = [4^1, 5^1] = [5, 4].\nOutput: [5, 4]"
                    },
                    {
                        "input": "queries = [[1, 10], [2, 5], [1, 15], [2, 2]]",
                        "output": "[13, 13]",
                        "explanation": "Initially, ARR = [].\nQuery 1: Append 10. ARR = [10].\nQuery 2: XOR each element with 5. ARR = [10^5] = [15].\nQuery 3: Append 15. ARR = [15, 15].\nQuery 4: XOR each element with 2. ARR = [15^2, 15^2] = [13, 13].\nOutput: [13, 13]"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Just perform as directed in the problem description.</p>",
            "<ul><li>Try to use the concept of Prefix array.</li></ul>",
            "<p>Try to optimize the space complexity by using some properties of XOR.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash Table",
                "slug": "hash-table"
            }
        ],
        "solutions": {
            "cpp": {
                "lang": "cpp",
                "full_func": "/*\r\n   Time Complexity: O(Q)\r\n   Space Complexity: O(1)\r\n\r\n   Where 'Q' is the number of queries\r\n*/\r\n\r\nvector<int> xorQuery(vector<vector<int>> &queries)\r\n{\r\n\t// Create an empty array ans\r\n\tvector<int>ans;\r\n\r\n\t// Create a variable flag\r\n\tint flag = 0;\r\n\r\n\t// Iterate over the queries\r\n\t// If the query is of type 1 then insert at the back of the array ans (queries[i][1] ^ Val)\r\n\t// Otherwise, update the value of the flag as flag ^ queries[i][1]\r\n\tfor (int i = 0; i < queries.size(); i++)\r\n\t{\r\n\t\tif (queries[i][0] == 1)\r\n\t\t{\r\n\t\t\tans.push_back(queries[i][1]^flag);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tflag ^= queries[i][1];\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Iterate through the array ans and for each element in the array update it as ans[i] = ans[i] ^ flag\r\n\tfor (int i = 0; i < ans.size(); i++)\r\n\t{\r\n\t\tans[i] = ans[i] ^ flag;\r\n\t}\r\n\r\n\t// Return the array ans\r\n\treturn ans;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "java",
                "full_func": "/*\r\n   Time Complexity: O(Q)\r\n   Space Complexity: O(1)\r\n\r\n   Where 'Q' is the number of queries\r\n*/\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Solution {\r\n\r\n\tpublic static ArrayList<Integer> xorQuery(ArrayList<ArrayList<Integer>> queries) {\r\n\r\n\t\t// Create an empty array ans\r\n\t\tArrayList<Integer> ans = new ArrayList<Integer>();\r\n\r\n\t\t// Create a variable flag\r\n\t\tint flag = 0;\r\n\r\n\t\t/* Iterate over the queries\r\n\t\t If the query is of type 1 then insert at the back of the array ans (queries[i][1] ^ Val)\r\n\t\t Otherwise, update the value of the flag as flag ^ queries[i][1]\r\n\t\t*/\r\n\r\n\t\tfor (int i = 0; i < queries.size(); i++) {\r\n\t\t\tif (queries.get(i).get(0) == 1) {\r\n\t\t\t\tans.add(queries.get(i).get(1) ^ flag);\r\n\t\t\t} else {\r\n\t\t\t\tflag ^= queries.get(i).get(1);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Iterate through the array ans and for each element in the array update it as ans[i] = ans[i] ^ flag\r\n\t\tfor (int i = 0; i < ans.size(); i++) {\r\n\t\t\tans.set(i, ans.get(i) ^ flag) ;\r\n\t\t}\r\n\r\n\t\t// Return the array ans\r\n\t\treturn ans;\r\n\r\n\t}\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "python",
                "full_func": "'''\r\n   Time Complexity: O(Q)\r\n   Space Complexity: O(1)\r\n\r\n   Where 'Q' is the number of queries\r\n'''\r\n\r\ndef xorQuery(queries):\r\n\r\n    # Create an empty list ans\r\n    ans = []\r\n\r\n    # Create a variable flag\r\n    flag = 0\r\n\r\n    # Iterate over the queries\r\n    # If the query is of type 1 then insert at the back of the list ans (queries[i][1] ^ Val)\r\n    # Otherwise, update the value of the flag as flag ^ queries[i][1]\r\n    for i in range(len(queries)):\r\n\r\n        if (queries[i][0] == 1):\r\n            ans.append(queries[i][1]^flag)\r\n        else:\r\n            flag ^= queries[i][1]\r\n\r\n    # Iterate through the list ans and for each element in the list update it as ans[i] = ans[i] ^ flag\r\n    for i in range(len(ans)):\r\n        ans[i] = ans[i] ^ flag\r\n\r\n    # Return the list ans\r\n    return ans",
                "lang_text": "py"
            }
        },
        "platform": "CODESTUDIO"
    }
}