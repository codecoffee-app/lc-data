{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 13529,
            "title": "ZIG ZAG ARRAY",
            "titleSlug": "zig-zag-array_1698577",
            "content": "<h4 id=\"you-are-given-an-array-of-distinct-elements-and-you-have-to-rearrange-the-array-elements-in-a-zig-zag-fashion-in-other-words-for-every-odd-position-i-in-the-array-arr-arr-i-should-be-greater-than-arr-i-1-and-arr-i-should-be-greater-than-arr-i-1\">You are given an array of distinct elements, and you have to rearrange the array elements in a zig-zag fashion. In other words, for every odd position \u2018i\u2019 in the array &#39;ARR,&#39; &#39;ARR&#39;[i] should be greater than &#39;ARR&#39;[i-1] and &#39;ARR&#39;[i] should be greater than &#39;ARR&#39;[i+1].</h4>\n\n<h4 id=\"for-example\">For example:</h4>\n\n<pre><code>Given \u2018N\u2019 = 4, \n&#39;ARR&#39; = { 4, 3, 2, 1} \nThen a possible array is 3, 4, 1, 2.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are supposed to return the array, which is in a zig-zag fashion.\n\nSince there can be multiple answers for a particular array, any of the possible solutions are accepted.\n\nIt can be proved. A zig-zag array is always possible for a given array.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases.\n\nThe first line of each test case contains a single integer, \u2018N,\u2019 where \u2018N\u2019 is the number of elements of the array.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers, denoting the array elements.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, You are supposed to return a zig-zag array for the given array. The runner function will print a single line containing a single integer which denotes whether the returned array is in zig-zag fashion or not.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You are not required to print the expected output; it has already been taken care of. Just implement the function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= \u2018T\u2019 &lt;= 10\n1 &lt;= \u2018N\u2019 &lt;= 5*10^3\n0 &lt;= &#39;ARR&#39;[i] &lt;= 10 ^ 6\n\nTime Limit: 1sec.\n</code></pre>\n<h4 id=\"sample-input-1\">Sample Input 1 :</h4>\n\n<pre><code>2\n4\n4 3 2 1\n5\n2 4 6 8 10\n</code></pre>\n\n<h4 id=\"sample-output-1\">Sample Output 1 :</h4>\n\n<pre><code>1\n1   \n</code></pre>\n\n<h4 id=\"explanation-of-the-sample-input-1\">Explanation of the Sample Input 1:</h4>\n\n<pre><code>For the first test case :  \nOne possible configuration can be 3 4 1 2. Therefore, the array can be converted into a zig-zag fashion.\n\nFor the second test case:\nOne possible configuration can be 2, 8, 6, 10, 4. Therefore the given array can be converted.\n</code></pre>\n\n<h4 id=\"sample-input-2\">Sample Input 2 :</h4>\n\n<pre><code>2\n4\n3 2 4 5\n5\n6 1 3 2 5\n</code></pre>\n\n<h4 id=\"sample-output-2\">Sample Output 2 :</h4>\n\n<pre><code>1\n1\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of distinct integers, rearrange the elements to form a zig-zag pattern. A zig-zag array satisfies the condition that for every odd-indexed element `ARR[i]`, it must be greater than its adjacent elements, `ARR[i-1]` and `ARR[i+1]`.  Return *any* valid zig-zag array; multiple solutions may exist.",
                "constraints": [
                    "1 <= \u2018T\u2019 <= 10 (Number of test cases)",
                    "1 <= \u2018N\u2019 <= 5*10^3 (Size of the array)",
                    "0 <= ARR[i] <= 10 ^ 6 (Value of array elements)",
                    "Time Limit: 1sec"
                ],
                "testcases": [
                    {
                        "input": "4\n4 3 2 1",
                        "output": "1",
                        "explanation": "For N=4 and ARR = {4, 3, 2, 1}, one possible zig-zag arrangement is {3, 4, 1, 2}. The function verifies that the returned array is in zig-zag order."
                    },
                    {
                        "input": "5\n2 4 6 8 10",
                        "output": "1",
                        "explanation": "For N=5 and ARR = {2, 4, 6, 8, 10}, one possible zig-zag arrangement is {2, 8, 6, 10, 4}. The function verifies that the returned array is in zig-zag order."
                    },
                    {
                        "input": "4\n3 2 4 5",
                        "output": "1",
                        "explanation": "For N=4 and ARR = {3, 2, 4, 5}, the function should arrange it into zig zag order and checks if the output array is in the required format"
                    },
                    {
                        "input": "5\n6 1 3 2 5",
                        "output": "1",
                        "explanation": "For N=5 and ARR = {6, 1, 3, 2, 5}, the function should arrange it into zig zag order and checks if the output array is in the required format"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can we use sorting to solve this problem?</p>",
            "<p>Can we use bubble sort to solve this problem?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}