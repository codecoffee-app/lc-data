{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 12743,
            "title": "Zig Zag Subsequence",
            "titleSlug": "zig-zag-subsequence_1473863",
            "content": "<h4 id=\"ninja-on-his-way-to-home-found-n-tokens-on-the-ground-arranged-in-a-line-horizontally-each-token-has-some-number-written-on-it\">Ninja on his way to home found \u2018N\u2019 tokens on the ground arranged in a line horizontally. Each token has some number written on it.</h4>\n\n<h4 id=\"ninja-wants-to-count-the-longest-subsequence-of-the-tokens-with-a-zig-zag-arrangement\">Ninja wants to count the longest subsequence of the tokens with a \u201cZig-Zag\u201d arrangement.</h4>\n\n<h4 id=\"a-subsequence-is-a-sequence-that-can-be-derived-from-another-sequence-by-deleting-some-or-no-elements-without-changing-the-order-of-the-remaining-elements\">A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.</h4>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>A \u201cZig-Zag\u201d arrangement is an arrangement where the differences between successive numbers on tokens strictly alternate between positive and negative integers. \n</code></pre>\n\n<h4 id=\"example\">Example :</h4>\n\n<pre><code>\u201c3 8 5 9 4 7 2 6\u201d is a \u201cZig-Zag\u201d arrangement as the differences \u201c5 -3 4 -5 3 -5 4\u201d alternates between positive and negative. \n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The first difference (if one exists) may be either positive or negative.\n</code></pre>\n\n<h4 id=\"your-task-is-to-help-ninja-in-finding-the-longest-subsequence-of-zig-zag-arrangement-of-tokens\">Your task is to help Ninja in finding the longest subsequence of \u201cZig-Zag\u201d arrangement of tokens.</h4>\n\n<h5 id=\"input-format\">Input Format :</h5>\n\n<pre><code>The first line contains a single integer \u2018T\u2019 denoting the number of test case\n\nThe first line of each test case contains an integer \u2018N\u2019 denoting the number of tokens.\n\nThe second line of each test case contains \u2018N\u2019 space-separated integers denoting the numbers printed on each token.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format :</h5>\n\n<pre><code>For each test case, print an integer representing the length of the longest \u201cZig-Zag\u201d subsequence.\n\nPrint the output of each test case in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You don\u2019t need to print anything, It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints :</h5>\n\n<pre><code>1 &lt;= T &lt;= 100\n1 &lt;= N &lt;= 1000\n0 &lt;= X &lt;= 1000\n\nWhere \u2018X\u2019 denotes the number printed on the token. \n\nTime Limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1 :</h5>\n\n<pre><code>2\n8\n3 8 5 9 4 7 2 6\n4\n5 8 4 2\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1 :</h5>\n\n<pre><code>8\n3\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for Sample Input 1 :</h5>\n\n<pre><code>Case 1 :\nThe differences for the given array \u201c3 8 5 9 4 7 2 6\u201d is \u201c5 -3 4 -5 3 -5 4\u201d. Each difference is alternating between one positive and then a negative value, so the whole array contains the \u201cZig-Zag\u201d subsequence. Therefore, the length of the longest Zig-Zag subsequence is 8.\n\nCase 2 :\nThe differences for the given array \u201c5 8 4 2\u201d is \u201c3 -4 -2\u201d. Each difference is alternating between one positive and negative value till element \u20184\u2019 in the array, so the longest \u201cZig-Zag\u201d subsequence will contain the elements \u201c5 8 4\u201d. Therefore the length of the longest \u201cZig-Zag\u201d subsequence is 3.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2 :</h5>\n\n<pre><code>2\n9\n1 9 8 10 2 4 0 5 1\n13\n2 3 4 6 10 4 5 9 6 8 3 7 4\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2 :</h5>\n\n<pre><code>9\n9\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": -2,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of numbers representing tokens arranged in a line, find the length of the longest subsequence that forms a 'Zig-Zag' arrangement. A 'Zig-Zag' arrangement is one where the differences between successive numbers strictly alternate between positive and negative. The first difference can be either positive or negative.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 1000",
                    "0 <= X <= 1000 (where X is the number printed on the token)",
                    "Time Limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "8\n3 8 5 9 4 7 2 6",
                        "output": "8",
                        "explanation": "The array '3 8 5 9 4 7 2 6' forms a Zig-Zag sequence because the differences between consecutive elements (5, -3, 4, -5, 3, -5, 4) alternate in sign.  Therefore, the longest Zig-Zag subsequence is the entire array itself, with length 8."
                    },
                    {
                        "input": "4\n5 8 4 2",
                        "output": "3",
                        "explanation": "In the array '5 8 4 2', the differences are (3, -4, -2). The Zig-Zag pattern holds for '5 8 4', where the differences alternate between positive and negative. Therefore, the longest Zig-Zag subsequence has length 3."
                    },
                    {
                        "input": "9\n1 9 8 10 2 4 0 5 1",
                        "output": "9",
                        "explanation": null
                    },
                    {
                        "input": "13\n2 3 4 6 10 4 5 9 6 8 3 7 4",
                        "output": "9",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Can you think of finding every length of the zig-zag subsequence?</p>",
            "<p>Can you think of storing the result of every recursive call?</p>",
            "<p>Can you think of dynamic programming without using extra space?</p>",
            "<p>Can you find alternate maximum and minimum peak elements of the array?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}