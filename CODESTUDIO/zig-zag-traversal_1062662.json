{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 9570,
            "title": "zig zag traversal",
            "titleSlug": "zig-zag-traversal_1062662",
            "content": "<h4 id=\"you-have-been-given-a-binary-tree-of-n-nodes-where-the-nodes-have-integer-values-your-task-is-to-print-the-zigzag-traversal-of-the-given-tree\">You have been given a Binary Tree of &#39;N&#39; nodes, where the nodes have integer values. Your task is to print the zigzag traversal of the given tree.</h4>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>In zigzag order, level 1 is printed from left to right fashion, level 2 is printed from right to left. and level 3 is printed from left to right again, and so on\u2026..\n</code></pre>\n\n<h5 id=\"for-example\">For example:</h5>\n\n<pre><code>For the given binary tree\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/1-6886.jpg\" alt=\"1\"></p>\n\n<pre><code>The zigzag  traversal is [1, 4, 3, 5, 2, 7, 6]\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer &#39;T&#39; which denotes the number of test cases or queries to be run. Then the &#39;T&#39; test cases follow.\n\nThe first line of each test case contains elements of the tree in the level order form. The line consists of values of nodes separated by a single space. In case a node is null, we take -1 in its place.\n\nFor example, the input for the tree depicted in the below image \n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/2-6887.jpg\" alt=\"2\"> </p>\n\n<pre><code>1\n3 8\n5 2 7 -1\n-1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h4 id=\"explanation\">Explanation :</h4>\n\n<pre><code>Level 1 :\nThe root node of the tree is 1\n\nLevel 2 :\nLeft child of 1 = 3\nRight child of 1 = 8\n\nLevel 3 :\nLeft child of 3 = 5\nRight child of 3 = 2\nLeft child of 8 =7\nRight child of 8 =  null (-1)\n\n\nLevel 4 :\nLeft child of 5 = null (-1)\nRight child of 5 = null (-1)\nLeft child of 2 = null (-1)\nRight child of 2 = null (-1)\nLeft child of 7 = null (-1)\nRight child of 7 = null (-1)\n\nThe first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.\nThe input ends when all nodes at the last level are null(-1).\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>The above format was just to provide clarity on how the input is formed for a given tree. \nThe sequence will be put together in a single line separated by a single space. Hence, for the above-depicted tree, the input will be given as:\n1 3 8 5 2 7 -1 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing all the nodes value in zigzag order traversal separated by a single space in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note :</h5>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= &#39;T&#39; &lt;= 100\n0 &lt;= &#39;N&#39; &lt;= 10^3\n0 &lt;= &#39;NODES&#39; &lt;= 10^9    \n\nWhere NODES represent any node value\n\nTime Limit: 1sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 2 3 -1 -1 -1  6 -1 -1\n1 2 3 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1 3 2 6\n1 3 2\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation of Sample Input 1:</h5>\n\n<pre><code> For the first test case, the given binary tree is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/3-6888.jpg\" alt=\"3\"></p>\n\n<pre><code>zigzag traversal of given tree = [1, 3, 2, 6]\n\nFor the second test case, the given binary tree is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/4-6889.jpg\" alt=\"4\"></p>\n\n<pre><code>ZigZag traversal of given tree = [1, 3, 2]\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\n1 2 4 5 3 -1 -1 -1 -1 -1 -1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 4 2 5 3\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-2\">Explanation of Sample Input 2:</h5>\n\n<pre><code>For the first test case, the given binary tree is shown below.\n</code></pre>\n\n<p><img src=\"https://files.codingninjas.in/5-6890.jpg\" alt=\"5\"></p>\n\n<pre><code>ZigZag traversal of given tree = [1, 4, 2, 5, 3] \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": 30,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree of 'N' nodes with integer values, the task is to print its zigzag traversal.\n\nIn zigzag order, level 1 is printed from left to right, level 2 from right to left, level 3 from left to right, and so on.",
                "constraints": [
                    "1 <= T <= 100",
                    "0 <= N <= 10^3",
                    "0 <= NODES <= 10^9",
                    "Time Limit: 1 second"
                ],
                "testcases": [
                    {
                        "input": "1 2 3 -1 -1 -1 6 -1 -1",
                        "output": "1 3 2 6",
                        "explanation": "The binary tree is:\n      1\n     / \\\n    2   3\n         \\\n          6\nZigzag traversal: [1, 3, 2, 6]"
                    },
                    {
                        "input": "1 2 3 -1 -1 -1 -1",
                        "output": "1 3 2",
                        "explanation": "The binary tree is:\n      1\n     / \\\n    2   3\nZigzag traversal: [1, 3, 2]"
                    },
                    {
                        "input": "1 2 4 5 3 -1 -1 -1 -1 -1 -1",
                        "output": "1 4 2 5 3",
                        "explanation": "The binary tree is:\n        1\n       / \\\n      2   4\n     / \\   \\\n    5   3  -1\nZigzag traversal: [1, 4, 2, 5, 3]"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of a brute force solution.</p>",
            "<p>Think of a solution using two stacks</p>",
            "<p>Think of a solution using deque</p>",
            "<p>Think of a solution using queue</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Trees",
                "slug": "binary-trees"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}