{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10807,
            "title": "Zigzag Traversal",
            "titleSlug": "zigzag-traversal_1265018",
            "content": "<h4 id=\"you-are-given-two-lists-arrays-arr1-and-arr2-consisting-of-n-and-m-integers-respectively\">You are given two lists/arrays  \u2018ARR1\u2019 and \u2018ARR2\u2019 consisting of \u2018N\u2019 and \u2018M\u2019 integers respectively.</h4>\n\n<h4 id=\"your-task-is-to-traverse-both-arr1-and-arr2-together-in-zigzag-order-and-return-a-list-array-representing-their-zigzag-traversal\">Your task is to traverse both \u2018ARR1\u2019 and \u2018ARR2\u2019  together in Zigzag order and return a list/array representing their Zigzag traversal.</h4>\n\n<h4 id=\"in-zigzag-traversal-we-iterate-the-arrays-list-alternatively-starting-with-arr1-i-e-in-order-arr1-0-arr2-0-arr1-1-arr2-1-arr1-2-arr2-2-and-so-on-see-the-example-for-more-clarity\">In ZigZag traversal, we iterate the arrays/list alternatively starting with \u2018ARR1\u2019 i.e. in order ARR1[0], ARR2[0], ARR1[1], ARR2[1], ARR1[2], ARR2[2] and so on.   See the example for more clarity.</h4>\n\n<h5 id=\"example\">Example:</h5>\n\n<pre><code>Consider ARR1 = [1, 2] and ARR2 = [3, 4, 5, 6], then their Zigzag traversal will be represented by the list/array  [1, 3, 2, 4, 5, 6]. \nWe traverse in order ARR1[0], ARR2[0], ARR1[1], ARR2[1], ARR2[2], ARR2[3].  Note, ARR1 is completely traversed at the 3rd position, and after which we simply iterate over \u2018ARR2\u2019.\n</code></pre>\n\n<h5 id=\"input-format\">Input format:</h5>\n\n<pre><code>The first line of input contains an integer \u2018T\u2019 denoting the number of test cases. then \u2018T\u2019 test cases follow.\n\nThe first line of each test case consists of two single space-separated integers \u2018N\u2019 and \u2018M\u2019 representing the number of integers in \u2018ARR1\u2019 and \u2018ARR2\u2019 respectively.\n\nThe second line of each test case consists of \u2018N\u2019 single space-separated integers representing array \u2018ARR1\u2019\n\nThe third line of each test case consists of \u2018M\u2019 single space-separated integers representing array \u2018ARR2\u2019\n</code></pre>\n\n<h5 id=\"output-format\">Output format :</h5>\n\n<pre><code>For each test case, return an array of size \u2018N\u2019 + \u2018M\u2019 that contains integers representing Zigzag traversal of \u2018ARR1\u2019 and \u2018ARR2\u2019.\n</code></pre>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>You do not need to print anything, it has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 50\n0 &lt;= N &lt;= 10^4\n0 &lt;= M &lt;= 10^4\n0 &lt;= ARR1[i] &lt;= 10^9\n0 &lt;= ARR2[i] &lt;= 10^9\nN + M &gt; 0\n\nTime limit: 1 sec\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>2\n1 0\n1\n2 4\n1 2\n3 4 5 6\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>1\n1 3 2 4 5 6\n</code></pre>\n\n<h5 id=\"explanation-of-sample-input-1\">Explanation Of Sample Input 1:</h5>\n\n<pre><code>Test case 1:\nHere \u2019ARR2\u2019 is empty, and \u2018ARR1\u2019 has a single integer 1. Thus their Zigzag traversal is also 1.\n\nTest case 2:\nSee the problem statement for an explanation.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>2\n3 3\n1 1 1\n2 2 2\n5 2\n1 2 3 2 1\n9 1\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>1 2 1 2 1 2\n1 9 2 1 3 2 1 \n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -8,
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays, `ARR1` of size `N` and `ARR2` of size `M`, the task is to perform a zigzag traversal of both arrays. The zigzag traversal involves iterating through the arrays alternatively, starting with `ARR1`.  Specifically, the traversal order is `ARR1[0], ARR2[0], ARR1[1], ARR2[1], ARR1[2], ARR2[2]`, and so on. If one array is exhausted before the other, continue traversing the remaining elements of the longer array. Return an array representing the combined zigzag traversal of the two input arrays.",
                "constraints": [
                    "1 <= T <= 50",
                    "0 <= N <= 10^4",
                    "0 <= M <= 10^4",
                    "0 <= ARR1[i] <= 10^9",
                    "0 <= ARR2[i] <= 10^9",
                    "N + M > 0",
                    "Time limit: 1 sec"
                ],
                "testcases": [
                    {
                        "input": "1 0\n1\n2 4\n1 2\n3 4 5 6",
                        "output": "1\n1 3 2 4 5 6",
                        "explanation": "Test case 1: ARR2 is empty, and ARR1 has a single element 1.  The zigzag traversal is simply 1.\nTest case 2: ARR1 = [1, 2] and ARR2 = [3, 4, 5, 6]. The traversal proceeds as follows: ARR1[0] (1), ARR2[0] (3), ARR1[1] (2), ARR2[1] (4), ARR2[2] (5), ARR2[3] (6), resulting in [1, 3, 2, 4, 5, 6]."
                    },
                    {
                        "input": "3 3\n1 1 1\n2 2 2\n5 2\n1 2 3 2 1\n9 1",
                        "output": "1 2 1 2 1 2\n1 9 2 1 3 2 1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Initially keep one pointer at index 0 of \u2018ARR1\u2019 and another at index 0 of \u2018ARR2\u2019 and then move them alternately.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Two Pointers",
                "slug": "two-pointers"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "solutions": [],
        "platform": "CODESTUDIO"
    }
}