{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 10644,
            "title": "Zuma Game",
            "titleSlug": "zuma-game_1262288",
            "content": "<h4 id=\"you-have-several-balls-on-the-table-in-the-form-of-a-string-named-board-the-colors-of-the-balls-can-be-red-r-blue-b-green-g-white-w-and-yellow-y-you-also-have-several-balls-in-your-hand-in-the-form-of-a-string-named-hand-each-time-you-can-do-the-following-operations\">You have several balls on the table in the form of a string named &#39;BOARD&#39;. The colors of the balls can be red(R), blue(B), green(G), white(W), and yellow(Y). You also have several balls in your hand in the form of a string named &#39;hand&#39;. Each time, you can do the following operations:</h4>\n\n<pre><code>1. Choose a ball from the string &#39;HAND&#39;, and insert it anywhere on the string &#39;BOARD&#39;.\n\n2. If there is a group of strictly more than 2 balls of the same color touching each other, remove them from the string &#39;BOARD&#39;. Keep doing this until the string &#39;board&#39; becomes empty or no more balls can satisfy this condition.\n</code></pre>\n\n<h4 id=\"your-task-is-to-find-the-minimum-number-of-insertions-required-to-make-the-board-empty-if-it-is-not-possible-to-make-the-string-board-empty-then-print-1\">Your task is to find the minimum number of insertions required to make the &#39;BOARD&#39; empty. If it is not possible to make the string &#39;BOARD&#39; empty, then print -1.</h4>\n\n<h4 id=\"note\">Note:</h4>\n\n<pre><code>1) Both strings will be non-empty and will only contain the characters \u2018R\u2019, \u2018B\u2019, \u2018G\u2019, \u2018W\u2019, and \u2018Y\u2019.\n\n2) Initially, the string &#39;BOARD&#39; won\u2019t have more than 2 balls of the same colors touching each other.\n</code></pre>\n\n<h5 id=\"input-format\">Input Format:</h5>\n\n<pre><code>The first line contains an integer \u2018T\u2019, which denotes the number of test cases to be run. Then, the T test cases follow. \n\nThe first line of each test case contains a string &#39;BOARD&#39;, as described in the problem statement.\n\nThe second line of each test case contains a string &#39;HAND&#39;, as described in the problem statement.\n</code></pre>\n\n<h5 id=\"output-format\">Output Format:</h5>\n\n<pre><code>For each test case, print a single line containing a single integer denoting the minimum number of insertions required to make the string &#39;BOARD&#39; empty or -1 if it is impossible to make the &#39;board&#39; empty.\n\nThe output for each test case will be printed in a separate line.\n</code></pre>\n\n<h5 id=\"note\">Note:</h5>\n\n<pre><code>You do not need to print anything. It has already been taken care of. Just implement the given function.\n</code></pre>\n\n<h5 id=\"constraints\">Constraints:</h5>\n\n<pre><code>1 &lt;= T &lt;= 10\n1 &lt;= |BOARD| &lt;= 10\n1 &lt;= |HAND| &lt;= 4\n\nWhere \u2018T\u2019 denotes the number of test cases.\n\nTime Limit: 1 sec.\n</code></pre>\n<h5 id=\"sample-input-1\">Sample Input 1:</h5>\n\n<pre><code>1\nYYRR\nYR\n</code></pre>\n\n<h5 id=\"sample-output-1\">Sample Output 1:</h5>\n\n<pre><code>2\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-1\">Explanation for sample input 1:</h5>\n\n<pre><code>One of the possible order of insertions: YYRR -&gt; YY[Y]RR -&gt; RR -&gt; RR[R] -&gt; empty. You required 2 insertions. There is no possible solution with only one insertion.\n</code></pre>\n\n<h5 id=\"sample-input-2\">Sample Input 2:</h5>\n\n<pre><code>1\nRR\nYG\n</code></pre>\n\n<h5 id=\"sample-output-2\">Sample Output 2:</h5>\n\n<pre><code>-1\n</code></pre>\n\n<h5 id=\"explanation-for-sample-input-2\">Explanation for sample input 2:</h5>\n\n<pre><code>It is not possible to make the string board empty.\n</code></pre>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": -8,
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a string `BOARD` representing balls on a table. The balls can be red (R), blue (B), green (G), white (W), or yellow (Y). You also have a string `HAND` representing balls you can insert.  In each step, you can insert a ball from `HAND` into `BOARD` at any position. After insertion, if there is a sequence of three or more consecutive balls of the same color, remove them. This removal process continues until no such sequence exists. The goal is to find the minimum number of insertions from `HAND` needed to empty the `BOARD`. If it's impossible to empty the `BOARD`, return -1.",
                "constraints": [
                    "1 <= T <= 10 (Number of test cases)",
                    "1 <= |BOARD| <= 10",
                    "1 <= |HAND| <= 4",
                    "Both strings are non-empty and contain only 'R', 'B', 'G', 'W', and 'Y' characters.",
                    "Initially, the `BOARD` string won\u2019t have more than 2 balls of the same colors touching each other."
                ],
                "testcases": [
                    {
                        "input": "YYRR\nYR",
                        "output": "2",
                        "explanation": "One possible solution: YYRR -> YY[Y]RR -> RR -> RR[R] -> empty.  Two insertions are required."
                    },
                    {
                        "input": "RR\nYG",
                        "output": "-1",
                        "explanation": "It is not possible to empty the board."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><i>Think of a recursive solution.</i></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Backtracking",
                "slug": "backtracking"
            }
        ],
        "solutions": {},
        "platform": "CODESTUDIO"
    }
}