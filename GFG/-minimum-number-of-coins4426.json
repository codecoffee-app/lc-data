{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704439,
            "title": "Minimum number of Coins",
            "titleSlug": "-minimum-number-of-coins4426",
            "content": "<p><span style=\"font-size:18px\">Given an <strong>infinite supply</strong> of each denomination of Indian currency&nbsp;{ <strong>1, 2, 5, 10, 20, 50, 100, 200, 500, 2000</strong> } and a target value <strong>N</strong>.<br />\r\nFind the <strong>minimum</strong> number of coins and/or notes needed to make the change for Rs <strong>N</strong>. You must return the list containing the value&nbsp;of coins required.&nbsp;</span></p>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 43\r\n<strong>Output:</strong> 20 20 2 1\r\n<strong>Explaination:</strong> \r\nMinimum number of coins and notes needed \r\nto make 43. </span>\r\n</pre>\r\n\r\n<p><br />\r\n<strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 1000\r\n<strong>Output:</strong> 500 500\r\n<strong>Explaination:</strong> minimum possible notes\r\nis 2 notes of 500.</span>\r\n</pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>minPartition()</strong> which takes the value N as input parameter and returns a list of integers in&nbsp;decreasing order.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space: </strong>O(N)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N &le; 10<sup>6</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an infinite supply of Indian currency denominations {1, 2, 5, 10, 20, 50, 100, 200, 500, 2000}, determine the minimum number of coins and/or notes required to achieve a target value N. Return a list containing the values of the selected denominations in decreasing order.",
                "constraints": [
                    "1 <= N <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "43",
                        "output": "20 20 2 1",
                        "explanation": "The minimum number of coins/notes needed to form 43 is achieved by using two 20s, one 2, and one 1."
                    },
                    {
                        "input": "1000",
                        "output": "500 500",
                        "explanation": "The minimum number of notes to form 1000 is achieved by using two 500 notes."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use greedy approach starting from the maximum denomination.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "visa"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to find the minimum partition of a given number N\n    vector<int> minPartition(int N)\n    {\n        // Array to store the minimum number of coins required for each value\n        int dp[N+1], dp2[N+1];\n        \n        // Array to store the denominations of the coins available\n        int a[10] = {1, 2, 5, 10, 20, 50, 100, 200, 500, 2000};\n        \n        // Initializing the base case\n        dp[0] = 0;\n        dp2[0] = 0;\n        \n        // Initializing other values with maximum value and -1\n        for(int i = 1;i <= N;i++){\n            dp[i] = INT_MAX;\n            dp2[i] = -1;\n        }\n        \n        // Dynamic programming approach to find the minimum number of coins\n        for(int j = 0;j < 10;j++){\n            for(int i = 0;i <= N;i++){\n                // Checking if the current coin is smaller than or equal to the value\n                if(i >= a[j]){\n                    // Updating the minimum number of coins required and the coin used\n                    dp[i] = min(dp[i], 1+ dp[i-a[j]]);\n                    dp2[i] = j;\n                }\n            }\n        }\n        \n        // Constructing the list of coins used to get the minimum number of coins required\n        int k = N;\n        vector<int> v;\n        for(int i = N;i > 0 && N >= 0;){\n            if(dp2[i] != -1)\n                v.push_back(a[dp2[i]]);\n            N = N - a[dp2[i]];\n            i = N;\n        }\n        \n        // Returning the list of coins used\n        return v;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n    static List<Integer> minPartition(int N)\r\n    {\r\n        // Array of denominations\r\n        int[] denom = new int[]{1, 2, 5, 10, 20, 50, 100, 200, 500, 2000};\r\n        \r\n        // Array to store minimum number of coins needed for each value\r\n        int[] dp = new int[N+1];\r\n        int[] dp2 = new int[N+1];\r\n        \r\n        // Setting initial values\r\n        dp[0] = 0;\r\n        dp2[0] = 0;\r\n        \r\n        // Initializing the dp array with maximum value to indicate initial state\r\n        for(int i = 1; i <= N; i++){\r\n\t        dp[i] = Integer.MAX_VALUE;\r\n\t        dp2[i] = -1;\r\n\t    }\r\n\t    \r\n\t    // Iterating over each denomination\r\n\t    for(int j = 0; j < 10; j++){\r\n\t        // Iterating over each value starting from 1\r\n\t        for(int i = 1; i <= N; i++){\r\n\t            // Checking if the current denomination can be used for the current value\r\n\t            if(i >= denom[j]){\r\n\t                // Updating the minimum number of coins needed and the index of the denomination used\r\n\t                dp[i] = Integer.min(dp[i], 1+dp[i-denom[j]]);\r\n\t                dp2[i] = j;\r\n\t            }\r\n            }\r\n        }\r\n        \r\n        // Finding the denominations used\r\n        int k = N;\r\n        List<Integer> num = new ArrayList<Integer>();\r\n        for(int i = N; i> 0 && N >= 0;){\r\n            // Adding the denomination to the list\r\n            if(dp2[i] != -1)\r\n                num.add(denom[dp2[i]]);   \r\n            \r\n            // Updating the remaining value\r\n            N = N - denom[dp2[i]];\r\n            i = N;\r\n        }\r\n        \r\n        // Returning the list of denominations used\r\n        return num;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#User function Template for python3\r\n\r\nclass Solution:\r\n    def minPartition(self, N):\r\n        # list of denominations\r\n        denom = [1, 2, 5, 10, 20, 50, 100, 200, 500, 2000]\r\n        # initialize dp and dp2 arrays\r\n        dp = [0] * (N + 1)\r\n        dp2 = [0] * (N + 1)\r\n        for i in range(N):\r\n            # initialize dp with a large value\r\n            dp[i] = 9999999999999\r\n            # initialize dp2 with -1\r\n            dp2[i] = -1\r\n        # loop over the denominations\r\n        for j in range(10):\r\n            # loop over the values from 1 to N\r\n            for i in range(1, N+1):\r\n                if i >= denom[j]:\r\n                    # update dp and dp2 arrays\r\n                    dp[i] = min(dp[i], 1+dp[i-denom[j]])\r\n                    dp2[i] = j\r\n        # initialize variables\r\n        k = N\r\n        num = []\r\n        i = N\r\n        # construct the partition\r\n        while i > 0 and N >=0:\r\n            if dp2[i] != -1:\r\n                num.append(denom[dp2[i]])\r\n            N = N - denom[dp2[i]]\r\n            i = N\r\n        # return the partition\r\n        return num",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {number} N - input parameter for the function\r\n * @return {number[]} - an array containing the minimum partition of N\r\n */\r\n\r\nclass Solution {\r\n  \r\n  minPartition(N) { // Function to find the minimum partition of N\r\n    let dp = [0]; // Initialize an array to store the minimum partition values\r\n    let dp2 = [0]; // Initialize an array to store the index of the coin used in the minimum partition\r\n    let a = [1, 2, 5, 10, 20, 50, 100, 200, 500, 2000]; // Array of available coins\r\n    for (let i = 1; i <= N; i++) {\r\n      dp.push(Number.MAX_VALUE); // Initialize the ith element of dp with the maximum possible value\r\n      dp2.push(-1); // Initialize the ith element of dp2 with -1\r\n    }\r\n\r\n    for (let j = 0; j < 10; j++) { // Iterate over the available coins\r\n      for (let i = 0; i <= N; i++) { // Iterate over the values from 0 to N\r\n        if (i >= a[j]) { // Check if the current coin value is smaller than or equal to i\r\n          dp[i] = Math.min(dp[i], 1 + dp[i - a[j]]); // Update dp[i] with the minimum of itself and (1 + dp[i - a[j]])\r\n          dp2[i] = j; // Update dp2[i] with the index of the current coin used\r\n        }\r\n      }\r\n    }\r\n\r\n    let k = N; // Initialize a variable k with the value of N\r\n    let v = []; // Initialize an empty array to store the minimum partition values\r\n    for (let i = N; i > 0 && N >= 0; ) { // Iterate from N to 0\r\n      if (dp2[i] != -1) v.push(a[dp2[i]]); // If dp2[i] is not -1, add the corresponding coin value to the array v\r\n      N = N - a[dp2[i]]; // Update N by subtracting the coin value used\r\n      i = N; // Update i with the new value of N\r\n    }\r\n\r\n    return v; // Return the array v containing the minimum partition values\r\n  }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}