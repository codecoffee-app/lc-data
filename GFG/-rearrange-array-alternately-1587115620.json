{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701205,
            "title": "Rearrange Array Alternately",
            "titleSlug": "-rearrange-array-alternately-1587115620",
            "content": "<p><span >Given an array of <strong>positive</strong> integers. Your task is to rearrange the array elements alternatively i.e. first element should be the max value, the second should be the min value, the third should be the second max, the fourth should be the second min, and so on.</span><br /><span ><strong>Note:&nbsp;</strong>Modify the original array itself. Do it without using any extra space. You do not have to return anything.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 3, 4, 5, 6]\n<strong>Output: </strong>[6, 1, 5, 2, 4, 3]<strong>\nExplanation: </strong>Max element = 6, min = 1, second max = 5, second min = 2, and so on... The modified array is: [6, 1, 5, 2, 4, 3]</span></pre>\n<pre><span ><strong>Input: </strong>arr[]= [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110]\n<strong>Output: </strong>[110, 10, 100, 20, 90, 30, 80, 40, 70, 50, 60]<strong>\nExplanation: </strong>Max element = 110, min = 10, second max = 100, second min = 20, and so on... Modified array is : [110, 10, 100, 20, 90, 30, 80, 40, 70, 50, 60]\n</span></pre>\n<pre><span ><strong>Input: </strong>arr[]= [1]\n<strong>Output: </strong>[1]</span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &lt;= arr.size &lt;= 10<sup>6</sup></span><br /><span >1 &lt;= arr[i] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of positive integers, rearrange the array elements alternatively. The first element should be the maximum value, the second the minimum value, the third the second maximum, the fourth the second minimum, and so on. Modify the original array in-place without using extra space.",
                "constraints": [
                    "1 <= arr.size <= 10^6",
                    "1 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 4, 5, 6]",
                        "output": "[6, 1, 5, 2, 4, 3]",
                        "explanation": "The maximum element is 6, the minimum is 1, the second maximum is 5, the second minimum is 2, and so on. The rearranged array is [6, 1, 5, 2, 4, 3]."
                    },
                    {
                        "input": "[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110]",
                        "output": "[110, 10, 100, 20, 90, 30, 80, 40, 70, 50, 60]",
                        "explanation": "The maximum element is 110, the minimum is 10, the second maximum is 100, the second minimum is 20, and so on. The rearranged array is [110, 10, 100, 20, 90, 30, 80, 40, 70, 50, 60]."
                    },
                    {
                        "input": "[1]",
                        "output": "[1]",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We can Sort the array.</span></p>",
            "<p><span style=\"font-size:18px\">After sorting the array we&nbsp;&nbsp;have to&nbsp;&nbsp;place pointer each at minimum and maximum element and push in result array one after the other&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "zoho"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    // Function to rearrange  the array elements alternately.\n    void rearrange(vector<int>& arr) {\n        int n = arr.size();\n        sort(arr.begin(), arr.end());\n        // Initialising index of first minimum and first maximum element.\n        int max_idx = n - 1, min_idx = 0;\n\n        // Storing maximum element of array.\n        int max_elem = arr[n - 1] + 1;\n\n        for (int i = 0; i < n; i++) {\n            // At even index, we have to put maximum elements in decreasing order.\n            if (i % 2 == 0) {\n                arr[i] += (arr[max_idx] % max_elem) * max_elem;\n                // Updating maximum index.\n                max_idx--;\n            }\n\n            // At odd index, we have to put minimum elements in increasing order.\n            else {\n                arr[i] += (arr[min_idx] % max_elem) * max_elem;\n                // Updating minimum index.\n                min_idx++;\n            }\n        }\n\n        // Dividing array elements by maximum element to get the result.\n        for (int i = 0; i < n; i++)\n            arr[i] = arr[i] / max_elem;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to rearrange  the array elements alternately.\n    public static void rearrange(int arr[]) {\n        int n = arr.length;\n        // Initialising index of first minimum and first maximum element.\n        Arrays.sort(arr);\n        int max_idx = n - 1, min_idx = 0;\n\n        // Storing maximum element of array.\n        int max_elem = arr[n - 1] + 1;\n\n        for (int i = 0; i < n; i++) {\n\n            // At even index, we have to put maximum elements in decreasing order.\n            if (i % 2 == 0) {\n                arr[i] += (arr[max_idx] % max_elem) * max_elem;\n                // Updating maximum index.\n                max_idx--;\n            }\n\n            // At odd index, we have to put minimum elements in increasing order.\n            else {\n                arr[i] += (arr[min_idx] % max_elem) * max_elem;\n                // Updating minimum index.\n                min_idx++;\n            }\n        }\n\n        // Dividing array elements by maximum element to get the result.\n        for (int i = 0; i < n; i++) arr[i] = arr[i] / max_elem;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    #Function to rearrange  the array elements alternately.\n    def rearrange(self, arr):\n\n        #Initialising index of first minimum and first maximum element.\n        arr.sort()\n        n = len(arr)\n        max_idx = n - 1\n        min_idx = 0\n\n        #Storing maximum element of array.\n        max_elem = arr[n - 1] + 1\n\n        for i in range(0, n):\n            #At even index, we have to put maximum elements in decreasing order.\n            if i % 2 == 0:\n                arr[i] += (arr[max_idx] % max_elem) * max_elem\n                #Updating maximum index.\n                max_idx -= 1\n\n            #At odd index, we have to put minimum elements in increasing order.\n            else:\n                arr[i] += (arr[min_idx] % max_elem) * max_elem\n                #Updating minimum index.\n                min_idx += 1\n\n        #Dividing array elements by maximum element to get the result.\n        for i in range(0, n):\n            arr[i] = arr[i] // max_elem\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} n\n */\n\nclass Solution {\n    // Function to rearrange  the array elements alternately.\n    rearrange(arr) {\n\n        // Initialising index of first minimum and first maximum element.\n        let n = arr.length;\n        arr.sort((a, b) => a - b);\n        let max_idx = n - 1, min_idx = 0;\n\n        // Storing maximum element of array.\n        let max_elem = arr[n - 1] + 1;\n\n        for (let i = 0; i < n; i++) {\n\n            // At even index, we have to put maximum elements in decreasing order.\n            if (i % 2 === 0) {\n                arr[i] += (arr[max_idx] % max_elem) * max_elem;\n                // Updating maximum index.\n                max_idx--;\n            }\n\n            // At odd index, we have to put minimum elements in increasing order.\n            else {\n                arr[i] += (arr[min_idx] % max_elem) * max_elem;\n                // Updating minimum index.\n                min_idx++;\n            }\n        }\n\n        // Dividing array elements by maximum element to get the result.\n        for (let i = 0; i < n; i++) arr[i] = Math.floor(arr[i] / max_elem);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}