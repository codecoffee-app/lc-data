{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703664,
            "title": "RegEx  matching",
            "titleSlug": "-regex-matching1145",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>pattern</strong> string and a <strong>test</strong> string, If the pattern is preceded by a ^, the pattern(excluding the ^) will be matched with the starting position of the test string. Similarly, if it is succeded by a $, the pattern(excluding the $) will be matched with the ending position of the test string. If no such markers are present, it will be checked whether pattern is a <strong>substring</strong> of test.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\nP = </strong>\"^coal\"\n<strong>S = </strong>\"coaltar\"\n<strong>Output</strong>:\n1\n<strong>Explanation:</strong>\nThe pattern \"coal\" is present at the\nbeginning of the string, so Output is 1.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\nP = </strong>\"tar$\"\n<strong>S = </strong>\"coaltar\"\n<strong>Output</strong>:\n1\n<strong>Explanation:</strong> \nThe pattern \"tar\" is present at the\nend of the string, so Output is 1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 3:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\nP = </strong>\"rat\"\n<strong>S = </strong>\"algorate\"\n<strong>Output</strong>:\n1\n<strong>Explanation:</strong>\nThe pattern \"rat\" is present as a\nsubstring of the string S,\nso Output is 1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 4:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\nP = </strong>\"abcd\"\n<strong>S = </strong>\"efgh\"\n<strong>Output</strong>:\n0\n<strong>Explanation:</strong>\nThere is no substring which is equal\nto P in string S, so output is 0.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= |S| &lt;= 10<sup>5</sup><br />1 &lt;= |P| &lt;= 10<br />String S may contain both Uppercase and Lowercase letters.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a pattern string `P` and a test string `S`, determine if the pattern matches the test string according to the following rules:\n\n*   If `P` starts with '^', check if `P` (excluding the '^') matches the beginning of `S`.\n*   If `P` ends with '$', check if `P` (excluding the '$') matches the end of `S`.\n*   Otherwise, check if `P` is a substring of `S`.\n\nReturn 1 if the pattern matches, and 0 otherwise.",
                "constraints": [
                    "1 <= |S| <= 10^5",
                    "1 <= |P| <= 10",
                    "String S may contain both Uppercase and Lowercase letters."
                ],
                "testcases": [
                    {
                        "input": "P = \"^coal\"\nS = \"coaltar\"",
                        "output": "1",
                        "explanation": "The pattern \"coal\" matches the beginning of the string \"coaltar\"."
                    },
                    {
                        "input": "P = \"tar$\"\nS = \"coaltar\"",
                        "output": "1",
                        "explanation": "The pattern \"tar\" matches the end of the string \"coaltar\"."
                    },
                    {
                        "input": "P = \"rat\"\nS = \"algorate\"",
                        "output": "1",
                        "explanation": "The pattern \"rat\" is a substring of the string \"algorate\"."
                    },
                    {
                        "input": "P = \"abcd\"\nS = \"efgh\"",
                        "output": "0",
                        "explanation": "The pattern \"abcd\" is not a substring of the string \"efgh\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">If first character of the Pattern is &#39;^&#39;, try matching the beginning of the String to the Pattern. If last character is &#39;$&#39;, try matching it with the end of the Pattern, Else manually check all the substrings of length of the Pattern.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            }
        ],
        "companies": [
            "microsoft",
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if pattern is present in the string\n    int isPatternPresent(string S, string P) {\n        \n        int m = P.length();\n        int n = S.length();\n        \n        int flag = 1;\n        \n        // Handling patterns with '^' at the beginning\n        if(P[0]=='^')\n        {\n            // If length of pattern is greater than string length + 1, return false\n            if(m>n+1)\n                flag=0;\n            // Checking if each character in the string matches the pattern\n            for(int i=1 ; i<m ; i++)\n            {\n                if(S[i-1]!=P[i])\n                    flag=0;\n            }\n        }\n        // Handling patterns with '$' at the end\n        else if(P[m-1]=='$')\n        {\n            // If length of pattern is greater than string length + 1, return false\n            if(m>n+1)\n                flag=0;\n            // Checking if each character in the string matches the pattern\n            int x = (n-(m-1));\n            for(int i=0 ; i<m-1 ; i++)\n            {\n                if(S[x+i]!=P[i])\n                    flag=0;\n            }\n        }\n        // Handling general patterns\n        else\n        {\n            flag = 0;\n            // Checking if substring of length m in the string matches the pattern\n            for(int i=0 ; i<=n-m ; i++)\n            {\n                string check=\"\";\n                for(int j=0 ; j<m ; j++)\n                    check+=S[i+j];\n                if(check==P)\n                    flag=1;\n            }\n        }\n        \n        // If pattern is present, return 1. Else, return 0.\n        if(flag==1)\n            return 1;\n        else\n            return 0;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to check if pattern is present in the given string\n    static int isPatternPresent(String S, String P) {\n        \n        int n=S.length(); // length of the given string\n        int m=P.length(); // length of the pattern\n        \n        int flag = 1; // flag variable to check if pattern is present\n        \n        // Checking if pattern starts with ^\n        if(P.charAt(0)=='^')\n        {\n            if(m>(n+1))\n                flag=0; // If pattern is longer than string, flag is set to 0\n            // Checking if each character of the string matches each character of the pattern\n            for(int i=1 ; i<m ;i++)\n            {\n                if(S.charAt(i-1)!=P.charAt(i))\n                    flag=0; // If characters do not match, flag is set to 0\n            }\n        }\n        // Checking if pattern ends with $\n        else if(P.charAt(m-1)=='$')\n        {\n            if(m>(n+1))\n                flag=0; // If pattern is longer than string, flag is set to 0\n            // Checking if each character of the string matches each character of the pattern\n            int x=n-(m-1);\n            for(int i=0 ; i<m-1 ;i++)\n            {\n                if(S.charAt(x+i)!=P.charAt(i))\n                    flag=0; // If characters do not match, flag is set to 0\n            }\n        }\n        // Pattern does not start with ^ or end with $\n        else\n        {\n            flag=0; // flag is initially set to 0\n            // Iterating over the string to check for the pattern\n            for(int i=0; i<=n-m ; i++)\n            {\n                String check=\"\";\n                for(int j=0 ; j<m ;j++)\n                    check+=S.charAt(i+j); // Creating a new string to compare with the pattern\n                if(check.equals(P))\n                    flag=1; // If the new string matches the pattern, flag is set to 1\n            }\n        }\n        \n        // Returning flag value (1 if pattern is present, 0 if pattern is not present)\n        if(flag==1)\n            return 1; // Pattern is present\n        else\n            return 0; // Pattern is not present\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def isPatternPresent(self, S , P):\n        \n        n=len(S)  #get length of string S\n        m=len(P)  #get length of pattern P\n        \n        flag = 1  #initialize flag as 1\n\n        #check if pattern starts with ^\n        if(P[0]=='^'):\n            if(m>n+1):  #if pattern length is greater than string length with ^\n                flag=0  #set flag as 0\n            for i in range(1,m):  #iterate through pattern\n                if(S[i-1]!=P[i]):  #compare each character of string and pattern\n                    flag=0  #if any character is not matching, set flag as 0\n        \n        #check if pattern ends with $\n        elif(P[m-1]=='$'):\n            if(m>n+1):  #if pattern length is greater than string length with $\n                flag=0  #set flag as 0\n            x=n-(m-1)  #calculate starting index for string comparison\n            for i in range(m-1):  #iterate through pattern\n                if(S[x+i]!=P[i]):  #compare each character of string and pattern\n                    flag=0  #if any character is not matching, set flag as 0\n        \n        #if pattern does not start with ^ or end with $\n        else:\n            flag=0  #set flag as 0\n            #iterate through the string for possible pattern matches\n            for i in range(n-m+1):\n                check=\"\"  #initialize an empty string for comparison\n                for j in range(m):  #iterate through the pattern\n                    check+=S[i+j]  #append characters from string to check\n                if check==P:  #if check matches pattern P\n                    flag=1  #set flag as 1\n                    \n        if flag==1:  #if flag is 1, pattern is present in the string\n            return 1  #return 1\n        else:\n            return 0  #if flag is 0, pattern is not present in the string, return 0",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int isPatternPresent(string S, string P)\n    {\n        int m = P.Length;\n        int n = S.Length;\n        \n        int flag = 1;\n        \n        // Handling patterns with '^' at the beginning\n        if(P[0]=='^')\n        {\n            // If length of pattern is greater than string length + 1, return false\n            if(m>n+1)\n                flag=0;\n            // Checking if each character in the string matches the pattern\n            for(int i=1 ; i<m ; i++)\n            {\n                if(S[i-1]!=P[i])\n                    flag=0;\n            }\n        }\n        // Handling patterns with '$' at the end\n        else if(P[m-1]=='$')\n        {\n            // If length of pattern is greater than string length + 1, return false\n            if(m>n+1)\n                flag=0;\n            // Checking if each character in the string matches the pattern\n            int x = (n-(m-1));\n            for(int i=0 ; i<m-1 ; i++)\n            {\n                if(S[x+i]!=P[i])\n                    flag=0;\n            }\n        }\n        // Handling general patterns\n        else\n        {\n            flag = 0;\n            // Checking if substring of length m in the string matches the pattern\n            for(int i=0 ; i<=n-m ; i++)\n            {\n                string check=\"\";\n                for(int j=0 ; j<m ; j++)\n                    check+=S[i+j];\n                if(check==P)\n                    flag=1;\n            }\n        }\n        \n        // If pattern is present, return 1. Else, return 0.\n        if(flag==1)\n            return 1;\n        else\n            return 0;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}