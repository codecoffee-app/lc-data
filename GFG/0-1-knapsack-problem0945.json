{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701431,
            "title": "0 - 1 Knapsack Problem",
            "titleSlug": "0-1-knapsack-problem0945",
            "content": "<p><span >Given <strong>n</strong> items, each with a specific <strong>weight</strong> and <strong>value</strong>, and a knapsack with a capacity of <strong>W</strong>, the task is to put the items in the knapsack such that the <strong>sum of weights of the items &lt;= W</strong> and the <strong>sum of values </strong>associated with them is <strong>maximized</strong>.&nbsp;</span></p>\n<p><span ><strong>Note: </strong>You can either place an item entirely in the bag or leave it out entirely. Also, each item is available in <strong>single </strong>quantity.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>W = 4, <code>val[]</code> = [1, 2, 3], <code>wt[]</code> = [4, 5, 1] <br /><strong>Output: </strong>3<br /><strong>Explanation: </strong>Choose the last item, which weighs 1 unit and has a value of 3.</span></pre>\n<pre><span ><strong>Input:</strong> W = 3, <code>val[]</code> = [1, 2, 3], <code>wt[]</code> = [4, 5, 6] <br /><strong>Output: </strong>0<br /><strong>Explanation: </strong>Every item has a weight exceeding the knapsack's capacity (3).</span></pre>\n<pre><span ><strong>Input:</strong> W = 5, <code>val[]</code> = [10, 40, 30, 50], <code>wt[]</code> = [5, 4, 2, 3] <br /><strong>Output: </strong>80<br /><strong>Explanation: </strong>Choose the third item (value 30, weight 2) and the last item (value 50, weight 3) for a total value of 80.</span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >2 &le; val.size() = wt.size() &le; 10<sup>3</sup></span><br /><span >1 &le; W &le; </span><span style=\"font-size: 18.6667px;\">10</span><sup>3</sup><br /><span >1 &le; val[i] &le; </span><span style=\"font-size: 18.6667px;\">10</span><sup>3</sup><br /><span >1 &le; wt[i] &le; </span><span style=\"font-size: 18.6667px;\">10</span><sup>3</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given *n* items, each with a specific *weight* and *value*, and a knapsack with a capacity of *W*, determine the maximum total value of items that can be placed in the knapsack such that the sum of their weights does not exceed *W*. Each item can be taken entirely or left out; fractional amounts are not allowed, and each item is available in a single quantity.",
                "constraints": [
                    "2 \u2264 val.size() = wt.size() \u2264 1000",
                    "1 \u2264 W \u2264 1000",
                    "1 \u2264 val[i] \u2264 1000",
                    "1 \u2264 wt[i] \u2264 1000"
                ],
                "testcases": [
                    {
                        "input": "W = 4, val[] = [1, 2, 3], wt[] = [4, 5, 1]",
                        "output": "3",
                        "explanation": "The optimal solution is to choose the last item, which has a weight of 1 and a value of 3. This fits within the knapsack's capacity of 4."
                    },
                    {
                        "input": "W = 3, val[] = [1, 2, 3], wt[] = [4, 5, 6]",
                        "output": "0",
                        "explanation": "Since every item has a weight greater than the knapsack's capacity (3), no items can be placed in the knapsack, resulting in a total value of 0."
                    },
                    {
                        "input": "W = 5, val[] = [10, 40, 30, 50], wt[] = [5, 4, 2, 3]",
                        "output": "80",
                        "explanation": "The optimal solution is to choose the third item (value 30, weight 2) and the fourth item (value 50, weight 3). The total weight is 2 + 3 = 5, which is equal to the knapsack's capacity, and the total value is 30 + 50 = 80."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use dynamic programming to solve the 0/1 knapsack problem by building a table to store the maximum value achievable for each subproblem of items and weights.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "morgan-stanley",
            "amazon",
            "microsoft",
            "snapdeal",
            "oracle",
            "payu",
            "visa",
            "directi",
            "greyorange",
            "mobicip"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int knapsack(int W, vector<int> &val, vector<int> &wt) {\n        int n = wt.size();\n        vector<vector<int>> dp(n + 1, vector<int>(W + 1));\n\n        // Build table dp[][] in bottom-up manner\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= W; j++) {\n\n                // If there is no item or the knapsack's capacity is 0\n                if (i == 0 || j == 0)\n                    dp[i][j] = 0;\n                else {\n                    int pick = 0;\n\n                    // Pick ith item if it does not exceed the capacity of knapsack\n                    if (wt[i - 1] <= j)\n                        pick = val[i - 1] + dp[i - 1][j - wt[i - 1]];\n\n                    // Don't pick the ith item\n                    int notPick = dp[i - 1][j];\n\n                    dp[i][j] = max(pick, notPick);\n                }\n            }\n        }\n        return dp[n][W];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static int knapsack(int W, int[] val, int[] wt) {\n        int n = wt.length;\n        int[][] dp = new int[n + 1][W + 1];\n\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= W; j++) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = 0;\n                } else {\n                    int pick = 0;\n                    if (wt[i - 1] <= j) {\n                        pick = val[i - 1] + dp[i - 1][j - wt[i - 1]];\n                    }\n\n                    int notPick = dp[i - 1][j];\n                    dp[i][j] = Math.max(pick, notPick);\n                }\n            }\n        }\n\n        return dp[n][W];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def knapsack(self, W, val, wt):\n        n = len(wt)\n        dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)]\n\n        for i in range(n + 1):\n            for j in range(W + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                else:\n                    pick = 0\n                    if wt[i - 1] <= j:\n                        pick = val[i - 1] + dp[i - 1][j - wt[i - 1]]\n                    notPick = dp[i - 1][j]\n                    dp[i][j] = max(pick, notPick)\n\n        return dp[n][W]\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    knapsack(W, val, wt) {\n        let n = wt.length;\n        let dp = Array.from({length : n + 1}, () => Array(W + 1).fill(0));\n\n        for (let i = 0; i <= n; i++) {\n            for (let j = 0; j <= W; j++) {\n                if (i === 0 || j === 0)\n                    dp[i][j] = 0;\n                else {\n                    let pick = 0;\n                    if (wt[i - 1] <= j) pick = val[i - 1] + dp[i - 1][j - wt[i - 1]];\n                    let notPick = dp[i - 1][j];\n                    dp[i][j] = Math.max(pick, notPick);\n                }\n            }\n        }\n        return dp[n][W];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}