{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702935,
            "title": "1[0]1 Pattern Count",
            "titleSlug": "101-pattern-count1341",
            "content": "<p><span style=\"font-size:18px\">Given a string S, your task is to find the number of patterns of form 1[0]1 where [0] represents any number of zeroes (minimum requirement is one 0) there should not be any other character except 0 in the [0] sequence.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nS = &quot;100001abc101&quot;<strong>\nOutput: </strong>2\n<strong>Explanation:\n</strong>The two patterns are &quot;100001&quot; and &quot;101&quot;.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>S = &quot;1001ab010abc01001&quot;\n<strong>Output: </strong>2\n<strong>Explanation:\n</strong>The two patterns are &quot;1001&quot;(at start)\nand &quot;1001&quot;(at end).</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>User Task:</strong><br />\nYour task is to complete the function&nbsp;<strong>patternCount()&nbsp;</strong>which takes a single argument(string S) and returns the count of patterns. You need not take any input or print anything.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;=Length of String&lt;=10^5</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string S, find the number of occurrences of the pattern '1[0+]1', where [0+] represents one or more consecutive zeroes. The string S should only contain the characters '0' and '1' in the matched patterns.",
                "constraints": [
                    "1 <= Length of String <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "100001abc101",
                        "output": "2",
                        "explanation": "The pattern '1[0+]1' appears twice: '100001' and '101'."
                    },
                    {
                        "input": "1001ab010abc01001",
                        "output": "2",
                        "explanation": "The pattern '1[0+]1' appears twice: '1001' (at the beginning) and '1001' (at the end)."
                    },
                    {
                        "input": "1010101",
                        "output": "3",
                        "explanation": "The pattern '1[0+]1' appears thrice: '101', '101' and '101'."
                    },
                    {
                        "input": "11111",
                        "output": "0",
                        "explanation": "The pattern '1[0+]1' does not appear in the given string because there are no consecutive zeroes between two ones."
                    },
                    {
                        "input": "00000",
                        "output": "0",
                        "explanation": "The pattern '1[0+]1' does not appear in the given string because there are no ones in the string."
                    },
                    {
                        "input": "10000",
                        "output": "0",
                        "explanation": "The pattern '1[0+]1' does not appear in the given string. It ends with zeros"
                    },
                    {
                        "input": "00001",
                        "output": "0",
                        "explanation": "The pattern '1[0+]1' does not appear in the given string. It starts with zeros"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>check for valid substrings in linear time</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Pattern Searching",
                "slug": "pattern-searching"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "samsung"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\n{\n    public:\n        // Function to count the number of patterns in a string.\n        int patternCount(string S) \n        { \n            // Variable to store the last character\n            char last = S[0]; \n        \n            int i = 1, counter = 0; \n            while (i < S.size()) \n            { \n                // We found 0 and last character was '1', state change\n                if (S[i] == '0' && last == '1') \n                { \n                    while (S[i] == '0') \n                        i++; \n        \n                    // After the stream of 0's, we got a '1', counter incremented\n                    if (S[i] == '1') \n                        counter++; \n                } \n        \n                // Last character stored\n                last = S[i]; \n                i++; \n            } \n        \n            return counter; \n        } \n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    //Complete this function\n    //Function to count the number of times the given pattern appears in the string.\n    public int patternCount(string S)\n    {\n        char last = S[0];\n        int i = 1;\n        int counter = 0;\n\n        while (i < S.Length)\n        {\n            if (S[i] == '0' && last == '1')\n            {\n                while (i < S.Length && S[i] == '0')\n                {\n                    i++;\n                }\n\n                if (i < S.Length && S[i] == '1')\n                {\n                    counter++;\n                }\n            }\n\n            if (i < S.Length)\n            {\n                last = S[i];\n                i++;\n            }\n        }\n\n        return counter;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}