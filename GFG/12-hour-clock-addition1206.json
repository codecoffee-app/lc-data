{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704748,
            "title": "12 hour clock addition",
            "titleSlug": "12-hour-clock-addition1206",
            "content": "<p><span style=\"font-size:18px\">Given two positive integers&nbsp;<strong>num1</strong>&nbsp;and&nbsp;<strong>num2</strong>, the task is to find&nbsp;the sum of the two numbers&nbsp;on a <u><em><strong>12 hour clock</strong></em></u> rather than a number line.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> num1 = 5, num2 = 7\r\n<strong>Output:</strong> 0\r\n<strong>Explaination:</strong> 5+7=12, which in 12 hour \r\nclock format is 0.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> num1 = 3, num2 = 5\r\n<strong>Output:</strong> 8\r\n<strong>Explaination:</strong> 3+5=8, which is 12 hour \r\nformat is intact.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anythign. Your task is to complete the function <strong>clockSum()</strong> which takes num1 and num2 as input parameters and returns the 12 hour clock format addition of the numbers.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; num1, num2 &le; 50</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two positive integers, `num1` and `num2`, calculate their sum as it would appear on a 12-hour clock.  This means if the sum exceeds 12, the result should 'wrap around'.",
                "constraints": [
                    "1 <= num1 <= 50",
                    "1 <= num2 <= 50"
                ],
                "testcases": [
                    {
                        "input": "num1 = 5, num2 = 7",
                        "output": "0",
                        "explanation": "5 + 7 = 12. On a 12-hour clock, 12 is represented as 0."
                    },
                    {
                        "input": "num1 = 3, num2 = 5",
                        "output": "8",
                        "explanation": "3 + 5 = 8.  Since 8 is less than or equal to 12, it remains 8 on a 12-hour clock."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Modulo&nbsp;is&nbsp;helpful.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to perform clock sum calculation\n    int clockSum(int num1, int num2){\n        // Calculate the sum of the two numbers and return the result modulo 12\n        return (num1 + num2)%12;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n    \r\n    //Add the two given numbers and return the result modulo 12\r\n    static int clockSum(int num1, int num2){\r\n        return (num1 + num2)%12;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\nclass Solution:\r\n    #Function to sum two numbers modulo 12.\r\n    def clockSum(self, num1, num2):\r\n        return (num1+num2)%12",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} num1\n * @param {number} num2\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the sum of angles between hour and minute hand of clock.\n    clockSum(num1, num2)\n    {\n        return (num1+num2)%12;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}