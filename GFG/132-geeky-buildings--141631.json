{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706074,
            "title": "132 Geeky Buildings",
            "titleSlug": "132-geeky-buildings--141631",
            "content": "<p><span style=\"font-size:18px\">There are <strong>N</strong> buildings in Linear Land. They appear in a linear line one after the other and their heights are given in the array <strong>arr[]</strong>. Geek wants to select <strong>three</strong> buildings in Linear Land and remodel them as recreational spots. The third of the selected building must be taller than the first and shorter than the second.<br />\nCan geek build the three-building recreational zone?&nbsp;</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 6\narr[] = {4, 7, 11, 5, 13, 2}\n<strong>Output:</strong>\nTrue\n<strong>Explanation:\n</strong>[4, 7, 5] fits the condition. </span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 4\narr[] = {11, 11, 12, 9}\n<strong>Output:</strong>\nFalse\n<strong>Explanation:</strong>\nNo 3 buildings fit the given condition. </span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Complete the function <strong>recreationalSpot()</strong> which takes the array arr[] and its size N as input parameters and returns a boolean value based on whether his building selection was successful or not.<br />\n<strong>Note:</strong> The generated output will be &quot;True&quot; or &quot;False&quot;.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>4</sup><br />\n1 &le; arr[i] &le; 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For each element find the minimum number at its left and the greatest number smaller than it to its right.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Stack",
                "slug": "stack"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\n    \n    public:\n    //Function to check if a recreational spot exist or not.\n\tbool recreationalSpot(int arr[], int n){\n\t    //return false if the array size is less than 3.\n        if (n < 3)\n        \treturn false;\n        //creating a stack to store elements.\n        stack<int> stack;\n        //creating a temporary array to store minimum of current element\n        //and all previous elements.\n        int temp[n];\n        temp[0] = arr[0];\n        for(int i = 1; i <n; i++)\n            temp[i] = min(temp[i - 1], arr[i]);\n            \n        //iterating through the array in reverse.\n        for (int j = n - 1; j >= 0; j--)\n\t\t{\n            //if current element is greater than the corresponding element\n            //in the temporary array.\n            if (arr[j] > temp[j]) \n\t\t\t{\n                //popping elements from the stack that are less than or equal to\n                //the current element in the temporary array.\n                while (!stack.empty() && stack.top() <= temp[j])\n                    stack.pop();\n                //if there is an element in the stack that is less than the\n                //current element in the array, return true.\n                if (!stack.empty() && stack.top() < arr[j])\n                    return true;\n                //pushing the current element in the stack.\n                stack.push(arr[j]);\n            }\n        }\n        //return false if no recreational spot exists.\n        return false;\n\t}\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    static boolean recreationalSpot(int[] arr , int n)\n    {\n        if (n < 3)\n            return false;\n        Stack < Integer > stack = new Stack < > ();\n        int[] temp = new int[n];\n        temp[0] = arr[0];\n        for(int i = 1; i <n; i++)\n            temp[i] = Math.min(temp[i - 1], arr[i]);\n        \n        for (int j = n - 1; j >= 0; j--)\n        {\n            if (arr[j] > temp[j]) \n            {\n                while (!stack.empty() && stack.peek() <= temp[j])\n                    stack.pop();\n                if (!stack.empty() && stack.peek() < arr[j])\n                    return true;\n                stack.push(arr[j]);\n            }\n        }\n        return false;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nfrom math import inf\n\nclass Solution:\n\tdef recreationalSpot(self, arr, n):\n\t    l=[]\n\n\t    # if the length of the array is less than or equal to 2, there cannot be a recreational spot\n\t    if len(arr)<=2:\n\t        return False\n\n\t    # if the length of the array is 3, check if the middle element is the recreational spot\n\t    if len(arr)==3:\n\t        if arr[0]<arr[2]<arr[1]:\n\t            return True\n\t        else:\n\t            return False\n\n\t    # if the first element is smaller than the third element and the third element is smaller than the second element,\n\t    # then the middle element is the recreational spot\n\t    if arr[0] < arr[2] < arr[1]:\n\t        return True\n\t    \n\t    temp=[inf]*n\n\t    \n\t    temp[0]=arr[0]\n\t    \n\t    # iterate over the array to find the minimum value encountered so far and store it in the temp array\n\t    for i in range(n):\n\t        temp[i]=min(temp[i-1],arr[i])\n\t        \n\t    for j in range(n-1,-1,-1):\n\n\t    \t# if the current element is greater than the minimum value encountered so far, check if there are any greater\n\t    \t# values in the stack, if yes, then it is a recreational spot\n\t        if arr[j]>temp[j]:\n\t            while l and l[-1]<=temp[j]:\n\t                l.pop()\n\t            \n\t            if l and l[-1]<arr[j]:\n\t                return True\n\t            l.append(arr[j])\n\t    return False",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} n\n * @returns {boolean}\n */\n\nclass Solution {\n    recreationalSpot(arr,n){\n        if (n < 3) {\n            return false;\n        }\n        let stack = [];\n        let temp = [];\n        temp[0] = arr[0];\n        for(let i = 1; i < n; i++) {\n            temp[i] = Math.min(temp[i - 1], arr[i]);\n        }\n            \n        for (let j = n - 1; j >= 0; j--) {\n            if (arr[j] > temp[j]) {\n                while (stack.length > 0 && stack[stack.length - 1] <= temp[j]) {\n                    stack.pop();\n                }\n                if (stack.length > 0 && stack[stack.length - 1] < arr[j]) {\n                    return true;\n                }\n                stack.push(arr[j]);\n            }\n        }\n        return false;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function template for C#\n\nclass Solution\n{\n    //Complete this function\n    public bool recreationalSpot(int[] arr, int n)\n    {\n        if (n < 3)\n        \treturn false;\n        \n        Stack<int> stack = new Stack<int>();\n        \n        int[] temp = new int[n];\n        temp[0] = arr[0];\n        for(int i = 1; i < n; i++)\n            temp[i] = Math.Min(temp[i - 1], arr[i]);\n            \n        for (int j = n - 1; j >= 0; j--)\n\t\t{\n            if (arr[j] > temp[j]) \n\t\t\t{\n                while (stack.Count != 0 && stack.Peek() <= temp[j])\n                    stack.Pop();\n                \n                if (stack.Count != 0 && stack.Peek() < arr[j])\n                    return true;\n                \n                stack.Push(arr[j]);\n            }\n        }\n        \n        return false;\n\t}\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}