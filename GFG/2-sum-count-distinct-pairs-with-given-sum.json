{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 875914,
            "title": "2 Sum \u2013 Count distinct pairs with given sum",
            "titleSlug": "2-sum-count-distinct-pairs-with-given-sum",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;<strong>arr[]</strong>&nbsp;and an integer <strong>target</strong>. </span><span style=\"font-size: 18px;\">You have to find numbers of <strong>distinct</strong> pairs in array <strong>arr[]</strong> which sums up to given <strong>target.</strong>&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong> (a, b) and (b, a) are considered the same. Also, the same numbers at different indices are considered same.</span></p>\n<p><strong style=\"font-size: 18px;\">Examples:</strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong></span><span style=\"font-size: 18px;\">arr[] = [5, 6, 5, 7, 7, 8], target = 13 </span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>2<strong>\nExplanation: </strong></span><span style=\"font-size: 18px;\">Distinct pairs with sum equal to 13 are (5, 8) and (6, 7).</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [2, 6, 7, 1, 8, 3], target = 10 \n<strong>Output: </strong>2<strong>\nExplanation: </strong></span><span style=\"font-size: 18.6667px;\">Distinct pairs with sum equal to 10 are (2, 8) and (7, 3).</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 1, 1],</span><span style=\"font-size: 18px;\"> target = 2</span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>1</span><span ><strong>\nExplanation: </strong></span><span style=\"font-size: 18.6667px;\">Distinct pairs with sum equal to 2 is (1, 1).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong>1 &lt;= arr.size() &lt;= 10<sup>5</sup><strong><br /></strong></span><span style=\"font-size: 18px;\">0 &lt;= arr[i]&nbsp;</span><span style=\"font-size: 18px;\">&lt;= 10<sup>4</sup></span><span style=\"font-size: 18px;\"><br /></span><span style=\"font-size: 18px;\">1 &lt;= target &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` and an integer `target`, find the number of distinct pairs in `arr[]` that sum up to the given `target`. Note that (a, b) and (b, a) are considered the same pair, and the same numbers at different indices are also considered the same.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= arr[i] <= 10^4",
                    "1 <= target <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [5, 6, 5, 7, 7, 8], target = 13",
                        "output": "2",
                        "explanation": "The distinct pairs that sum to 13 are (5, 8) and (6, 7)."
                    },
                    {
                        "input": "arr[] = [2, 6, 7, 1, 8, 3], target = 10",
                        "output": "2",
                        "explanation": "The distinct pairs that sum to 10 are (2, 8) and (7, 3)."
                    },
                    {
                        "input": "arr[] = [1, 1, 1], target = 2",
                        "output": "1",
                        "explanation": "The distinct pair that sums to 2 is (1, 1)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a hash set to find matching pairs and make sure each pair is counted only once as you go through the array.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Hash",
                "slug": "hash"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "int countDistinctPairs(int arr[], int n, int target) {\n    int res = 0;\n    // Frequency map to store the frequency of all elements\n    int freq[100000] = {0}; // A large array to track frequency (assumes input values\n                            // within a known range)\n\n    for (int i = 0; i < n; i++) {\n        int complement = target - arr[i];\n        if (!(complement >= 0 && complement < 100000)) {\n            continue;\n        }\n\n        // If the complement is equal to arr[i], then there should\n        // be only one occurrence of complement in the frequency array\n        if (complement == arr[i]) {\n            if (freq[complement] == 1) {\n                res++;\n            }\n        }\n\n        // If complement is not equal to arr[i], then there should\n        // be at least one occurrence of complement and no occurrence\n        // of the current element in the frequency array\n        else if (freq[complement] > 0 && freq[arr[i]] == 0) {\n            res++;\n        }\n        // printf(\"res=%d\\n\", res);\n        // Add the current element in the frequency array\n        freq[arr[i]]++;\n    }\n\n    return res;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    int countDistinctPairs(vector<int> &arr, int target) {\n        int res = 0;\n        int n = arr.size();\n\n        // frequency map to store the frequency of all elements\n        unordered_map<int, int> freq;\n\n        for (int i = 0; i < n; i++) {\n\n            int complement = target - arr[i];\n\n            // If the complement is equal to arr[i], then there should\n            // be only one occurrence of complement in the hash map\n            if (complement == arr[i]) {\n                if (freq[complement] == 1)\n                    res++;\n            }\n\n            // if complement is not equal to arr[i], then there should\n            // be at least one occurrence of complement and no occurrence\n            // of current element in the hash map\n            else if (freq[complement] > 0 && freq[arr[i]] == 0) {\n                res++;\n            }\n\n            // Add the current element in the hash map\n            freq[arr[i]]++;\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    static int countDistinctPairs(int arr[], int target) {\n\n        int res = 0;\n        int n = arr.length;\n\n        // Frequency map to store the frequency of all elements\n        java.util.HashMap<Integer, Integer> freq = new java.util.HashMap<>();\n\n        for (int i = 0; i < n; i++) {\n            int complement = target - arr[i];\n\n            // If the complement is equal to arr[i], then there should\n            // be only one occurrence of complement in the hash map\n            if (complement == arr[i]) {\n                if (freq.getOrDefault(complement, 0) == 1) {\n                    res++;\n                }\n            }\n            // If complement is not equal to arr[i], then there should\n            // be at least one occurrence of complement and no occurrence\n            // of the current element in the hash map\n            else if (freq.getOrDefault(complement, 0) > 0 &&\n                     freq.getOrDefault(arr[i], 0) == 0) {\n                res++;\n            }\n\n            // Add the current element in the hash map\n            freq.put(arr[i], freq.getOrDefault(arr[i], 0) + 1);\n        }\n\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Complete the below function\n    def countDistinctPairs(self, arr, target):\n        res = 0\n        freq = {}  # Frequency map to store the frequency of all elements\n\n        for num in arr:\n            complement = target - num\n\n            # If the complement is equal to num, then there should\n            # be only one occurrence of complement in the frequency map\n            if complement == num:\n                if freq.get(complement, 0) == 1:\n                    res += 1\n            # If complement is not equal to num, then there should\n            # be at least one occurrence of complement and no occurrence\n            # of the current element in the frequency map\n            elif freq.get(complement, 0) > 0 and freq.get(num, 0) == 0:\n                res += 1\n\n            # Add the current element in the frequency map\n            freq[num] = freq.get(num, 0) + 1\n\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number[]} arr\n * @param {number} target\n * @return {number}\n */\nclass Solution {\n    countDistinctPairs(arr, target) {\n        let res = 0;\n        let freq = new Map(); // Frequency map to store the frequency of all elements\n\n        for (let num of arr) {\n            let complement = target - num;\n\n            // If the complement is equal to num, then there should\n            // be only one occurrence of complement in the frequency map\n            if (complement === num) {\n                if (freq.get(complement) === 1) {\n                    res++;\n                }\n            }\n            // If complement is not equal to num, then there should\n            // be at least one occurrence of complement and no occurrence\n            // of the current element in the frequency map\n            else if (freq.get(complement) > 0 && freq.get(num) === undefined) {\n                res++;\n            }\n\n            // Add the current element in the frequency map\n            freq.set(num, (freq.get(num) || 0) + 1);\n        }\n\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}