{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 876608,
            "title": "2 Sum - Find a pair with given sum",
            "titleSlug": "2-sum-find-a-pair-with-given-sum",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;<strong>arr[]</strong>&nbsp;and an integer&nbsp;<strong>target</strong>.&nbsp;</span><span style=\"font-size: 18px;\">You have to return the pair of elements which sum upto <strong>target</strong>.<strong> </strong></span><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">You cannot use the same element&nbsp;</span><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">twice</span></span><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">.<br /></span><span style=\"font-size: 18px;\"><strong>Note:</strong> Inputs are given such that only one valid answer exists.</span></p>\n<p><strong style=\"font-size: 18px;\">Examples:</strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong></span><span style=\"font-size: 18px;\">arr[] = [2, 9, 10, 4, 15], target = 12</span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>[2, 10]<strong>\nExplanation: </strong></span><span style=\"font-size: 18px;\">Pair with sum equal to 12 is (2, 10).</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [3, 2, 4], target = 8\n<strong>Output: </strong>[]<strong>\nExplanation: </strong></span><span style=\"font-size: 18.6667px;\">No pair exists with sum equal to 8.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 4, 5, 6, 1],</span><span style=\"font-size: 18px;\"> target = 2</span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>[1, 1]</span><span ><strong>\nExplanation: </strong></span><span style=\"font-size: 18.6667px;\">Pair with sum equal to 2 is (1, 1).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong>1 &lt;= arr.size() &lt;= 10<sup>5</sup><strong><br /></strong></span><span style=\"font-size: 18px;\">0 &lt;= arr[i]&nbsp;</span><span style=\"font-size: 18px;\">&lt;= 10<sup>4</sup></span><span style=\"font-size: 18px;\"><br /></span><span style=\"font-size: 18px;\">1 &lt;= target &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` and an integer `target`, find a pair of distinct elements in the array that sums up to the `target`. You cannot use the same element twice. It is guaranteed that only one valid answer exists.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "0 <= arr[i] <= 10^4",
                    "1 <= target <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [2, 9, 10, 4, 15], target = 12",
                        "output": "[2, 10]",
                        "explanation": "The pair (2, 10) sums up to the target value of 12."
                    },
                    {
                        "input": "arr[] = [3, 2, 4], target = 8",
                        "output": "[]",
                        "explanation": "No pair of elements in the array sums up to the target value of 8."
                    },
                    {
                        "input": "arr[] = [1, 4, 5, 6, 1], target = 2",
                        "output": "[1, 1]",
                        "explanation": "The pair (1, 1) sums up to the target value of 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try sorting and two pointer approach</p>",
            "<p>Use hashset to check if the element exists that can help sum upto target</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    vector<int> twoSum(vector<int> &arr, int target) {\n        vector<int> res;\n        unordered_set<int> s;\n        for (int i = 0; i < arr.size(); i++) {\n            if (s.find(target - arr[i]) != s.end()) {\n                res.push_back(target - arr[i]);\n                res.push_back(arr[i]);\n                return res;\n            }\n            s.insert(arr[i]);\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public List<Integer> twoSum(int arr[], int target) {\n        // Your code here\n        List<Integer> res = new ArrayList<>();\n        Set<Integer> s = new HashSet<>();\n        for (int i = 0; i < arr.length; i++) {\n            if (s.contains(target - arr[i])) {\n                res.add(target - arr[i]);\n                res.add(arr[i]);\n                return res;\n            }\n            s.add(arr[i]);\n        }\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    #Complete the below function\n    def twoSum(self, arr, target):\n        s = set()\n        for i in range(len(arr)):\n            if target - arr[i] in s:\n                return [target - arr[i], arr[i]]\n            s.add(arr[i])\n        return []\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} target\n * @return {number[]}\n */\nclass Solution {\n    twoSum(arr, target) {\n        let res = [];\n        let s = new Set();\n        for (let i = 0; i < arr.length; i++) {\n            if (s.has(target - arr[i])) {\n                res.push(target - arr[i]);\n                res.push(arr[i]);\n                return res;\n            }\n            s.add(arr[i]);\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}