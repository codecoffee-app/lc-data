{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705116,
            "title": "2's Complement",
            "titleSlug": "2s-complement3124",
            "content": "<p><span style=\"font-size:18px\">For a given string of binary number <strong>bi</strong>. Find the two&rsquo;s complement of it.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> bi = 00000101\n<strong>Output:</strong> 11111011\n<strong>Explaination:</strong> 2&#39;s complement is reversing all \nthe bits of the given number and then adding \n1 to it.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> bi = 101\n<strong>Output:</strong> 011\n<strong>Explaination:</strong> Follow the process of figuring \nout 2&#39;s complement. This will be the answer.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou do not need to read input or print anything. Your task is to complete the function <strong>complement()</strong> which takes bi&nbsp;as input parameter and returns the 2&#39;s complement of the number.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|bi|)<br />\n<strong>Expected Auxiliary Space:</strong> O(|bi|)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; |bi| &le; 10</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `bi` representing a binary number, find its two's complement.",
                "constraints": [
                    "1 <= |bi| <= 10"
                ],
                "testcases": [
                    {
                        "input": "00000101",
                        "output": "11111011",
                        "explanation": "The two's complement is obtained by inverting all the bits of the binary number and adding 1 to the result."
                    },
                    {
                        "input": "101",
                        "output": "011",
                        "explanation": "The two's complement is obtained by inverting all the bits of the binary number and adding 1 to the result."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">2&#39;s complement is flipping all the bits of the binary number and then adding 1 with it.</span></p>"
        ],
        "relatedTopics": [],
        "companies": [
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to complement a binary string\n    string complement(string bi){\n        string ans = \"\";\n        \n        // Loop through the binary string and complement each digit\n        for(int i = 0;i < bi.size();i++){\n            if(bi[i] == '0')\n                bi[i] = '1';\n            else\n                bi[i] = '0';\n        }\n        \n        // Store the complemented string\n        ans = bi;\n        \n        // Find the rightmost position where a carry needs to be propagated\n        int i = bi.size()-1, carry = 1;\n        while(i >= 0 && carry == 1 && ans[i] == '1'){\n            ans[i] = '0';\n            i--;\n        }\n        \n        // If there is a carry and there are remaining digits, update the carry\n        if(i >= 0 && carry)\n            ans[i] = '1';\n        \n        // Return the complemented string\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}