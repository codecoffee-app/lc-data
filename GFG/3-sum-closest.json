{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706217,
            "title": "3 Sum Closest",
            "titleSlug": "3-sum-closest",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;<strong>arr[]</strong>&nbsp;and an integer&nbsp;<strong>target</strong>, the task is to find the sum of three integers in&nbsp;<strong>arr[]</strong>&nbsp;such that the sum is closest to&nbsp;<strong>target</strong>.&nbsp;</span></p>\n<p><strong><span style=\"font-size: 18px;\">Note:</span></strong><span style=\"font-size: 18px;\"> If multiple sums are closest to target, return the maximum one.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [-1, 2, 2, 4], target = 4\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> All possible triplets<br /></span><span style=\"font-size: 18px;\">[-1, 2, 2], sum = (-1) + 2 + 2 = 3\n[-1, 2, 4], sum = (-1) + 2 + 4 = 5\n[-1, 2, 4], sum = (-1) + 2 + 4 = 5\n[2, 2, 4], sum = 2 + 2 + 4 = 8\nTriplet [-1, 2, 2], [-1, 2, 4] and [-1, 2, 4] have sum closest to target, so return the maximum one, that is 5.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 10, 4, 5], target = 10\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> All possible triplets<br /></span><span style=\"font-size: 18px;\">[1, 10, 4], sum = (1 + 10 + 4) = 15<br /></span><span style=\"font-size: 18px;\">[1, 10, 5], sum = (1 + 10 + 5) = 16<br /></span><span style=\"font-size: 18px;\">[1, 4, 5], sum = (1 + 4 + 5) = 10<br /></span><span style=\"font-size: 18px;\">[10, 4, 5], sum = (10 + 4 + 5) = 19&nbsp;<br /></span><span style=\"font-size: 18px;\">Triplet [1, 4, 5] has sum = 10 which is closest to target.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />3 &lt;= arr.size() &lt;= 10<sup>3</sup><br />-10<sup>3</sup>&nbsp;&le; arr[i] &le; 10<sup>3</sup><br />-10<sup>4</sup>&nbsp;&le; target &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` and an integer `target`, find the sum of three integers in `arr[]` that is closest to `target`. If multiple sums are equally close to the target, return the maximum of those sums.",
                "constraints": [
                    "3 <= arr.length <= 10^3",
                    "-10^3 <= arr[i] <= 10^3",
                    "-10^4 <= target <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [-1, 2, 2, 4], target = 4",
                        "output": "5",
                        "explanation": "The possible triplet sums are: -1 + 2 + 2 = 3, -1 + 2 + 4 = 5, -1 + 2 + 4 = 5, and 2 + 2 + 4 = 8. The sums 3 and 5 are closest to the target 4. Since 5 is the larger of the two, we return 5."
                    },
                    {
                        "input": "arr[] = [1, 10, 4, 5], target = 10",
                        "output": "10",
                        "explanation": "The possible triplet sums are: 1 + 10 + 4 = 15, 1 + 10 + 5 = 16, 1 + 4 + 5 = 10, and 10 + 4 + 5 = 19. The sum 10 is closest to the target 10, so we return 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use 2-pointer technique.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "adobe",
            "google",
            "zoho",
            "uber",
            "facebook"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int closest3Sum(vector<int> &arr, int target) {\n        int n = arr.size();\n        sort(arr.begin(), arr.end());\n        int res = 0;\n        int minDiff = INT_MAX;\n\n        for (int i = 0; i < n - 2; i++) {\n\n            // Initialize the left and right pointers\n            int l = i + 1, r = n - 1;\n\n            while (l < r) {\n                int currSum = arr[i] + arr[l] + arr[r];\n\n                // If |currSum - target| < minDiff, then we have\n                // found a triplet which is closer to target\n                if (abs(currSum - target) < minDiff) {\n                    minDiff = abs(currSum - target);\n                    res = currSum;\n                }\n                // If multiple sums are closest, take maximum one\n                else if (abs(currSum - target) == minDiff) {\n                    res = max(res, currSum);\n                }\n\n                // If currSum > target then we will decrease the\n                // right pointer to move closer to target\n                if (currSum > target)\n                    r--;\n\n                // If currSum >= target then we will increase the\n                // left pointer to move closer to target\n                else\n                    l++;\n            }\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    static int closest3Sum(int[] arr, int target) {\n        int n = arr.length;\n        Arrays.sort(arr);\n        int res = 0;\n        int minDiff = Integer.MAX_VALUE;\n\n        for (int i = 0; i < n - 2; i++) {\n\n            // Initialize the left and right pointers\n            int l = i + 1, r = n - 1;\n\n            while (l < r) {\n                int currSum = arr[i] + arr[l] + arr[r];\n\n                // If |currSum - target| < minDiff, then we have\n                // found a triplet which is closer to target\n                if (Math.abs(currSum - target) < minDiff) {\n                    minDiff = Math.abs(currSum - target);\n                    res = currSum;\n                }\n                // If multiple sums are closest, take maximum one\n                else if (Math.abs(currSum - target) == minDiff) {\n                    res = Math.max(res, currSum);\n                }\n\n                // If currSum > target then we will decrease the\n                // right pointer to move closer to target\n                if (currSum > target) r--;\n\n                // If currSum <= target then we will increase the\n                // left pointer to move closer to target\n                else\n                    l++;\n            }\n        }\n\n        return res;\n    }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def closest3Sum(self, arr, target):\n        n = len(arr)\n        arr.sort()\n        res = 0\n        minDiff = float('inf')\n\n        for i in range(n - 2):\n            # Initialize the left and right pointers\n            l, r = i + 1, n - 1\n\n            while l < r:\n                currSum = arr[i] + arr[l] + arr[r]\n\n                # If |currSum - target| < minDiff, then we have\n                # found a triplet which is closer to target\n                if abs(currSum - target) < minDiff:\n                    minDiff = abs(currSum - target)\n                    res = currSum\n                # If multiple sums are closest, take maximum one\n                elif abs(currSum - target) == minDiff:\n                    res = max(res, currSum)\n\n                # If currSum > target then we will decrease the\n                # right pointer to move closer to target\n                if currSum > target:\n                    r -= 1\n\n                # If currSum <= target then we will increase the\n                # left pointer to move closer to target\n                else:\n                    l += 1\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    closest3Sum(arr, target) {\n        let n = arr.length;\n        arr.sort((a, b) => a - b);\n        let res = 0;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < n - 2; i++) {\n\n            // Initialize the left and right pointers\n            let l = i + 1, r = n - 1;\n\n            while (l < r) {\n                let currSum = arr[i] + arr[l] + arr[r];\n\n                // If |currSum - target| < minDiff, then we have\n                // found a triplet which is closer to target\n                if (Math.abs(currSum - target) < minDiff) {\n                    minDiff = Math.abs(currSum - target);\n                    res = currSum;\n                }\n                // If multiple sums are closest, take maximum one\n                else if (Math.abs(currSum - target) == minDiff) {\n                    res = Math.max(res, currSum);\n                }\n\n                // If currSum > target then we will decrease the\n                // right pointer to move closer to target\n                if (currSum > target) r--;\n\n                // If currSum <= target then we will increase the\n                // left pointer to move closer to target\n                else\n                    l++;\n            }\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}