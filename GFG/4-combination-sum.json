{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 875899,
            "title": "Combination Sum IV",
            "titleSlug": "4-combination-sum",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of <strong>unique integers arr</strong> and a target value <strong>k</strong>. Return the total number of </span><span style=\"font-size: 18px;\"><strong>distinct combinations</strong> of elements from nums that sum up to the target.</span><span style=\"font-size: 18px;\">&nbsp;Each element from nums can be used <strong>multiple</strong> times in a combination.</span><span style=\"font-size: 18px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 3], key = 4\n<strong>Output</strong>: 7\n<strong>Explanation</strong>: The possible combination ways to reach the target are: (1, 1, 1, 1) (1, 1, 2) (1, 2, 1) (1, 3) (2, 1, 1) (2, 2) (3, 1).\nNote that different sequences of the same numbers are counted as distinct combinations.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: arr[] = [9], key = 3</span><span style=\"font-size: 18px;\"><strong>\nOutput</strong>: 0</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints</strong>:<br />1 &le; arr.size() &le; 200<br />1 &le; arr[i] &le; 10<sup>3</sup><br />1 &le; key &le; 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of unique integers `arr` and a target value `k`, determine the total number of distinct combinations of elements from `arr` that sum up to `k`. Each element from `arr` can be used multiple times in a combination. Different sequences of the same numbers are counted as distinct combinations.",
                "constraints": [
                    "1 <= arr.size() <= 200",
                    "1 <= arr[i] <= 1000",
                    "1 <= k <= 1000"
                ],
                "testcases": [
                    {
                        "input": "arr = [1, 2, 3], k = 4",
                        "output": "7",
                        "explanation": "The target of 4 can be achieved by the following combinations: (1, 1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 3), (2, 1, 1), (2, 2), (3, 1). Since different orderings are distinct, there are 7 possible combinations."
                    },
                    {
                        "input": "arr = [9], k = 3",
                        "output": "0",
                        "explanation": "Since the only element in arr is 9, and the target is 3, it is impossible to form any combination to reach the target."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Leverage <strong>dynamic programming</strong> and compute combinations for each sum up to the target by using smaller subproblems, applying modulo <code>10^9 + 7</code> to avoid overflow.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    int combinationSum4(vector<int>& arr, int key) {\n        const int mod = 1e9 + 7;\n        vector<int> dp(key + 1, 0);\n        dp[0] = 1;\n\n        for (int i = 1; i <= key; ++i) {\n            for (int num : arr) {\n                if (i - num >= 0) {\n                    dp[i] = (dp[i] + dp[i - num]) % mod;\n                }\n            }\n        }\n\n        return dp[key];\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    public int combinationSum4(int[] arr, int key) {\n        int mod = 1000000007;\n        int[] dp = new int[key + 1];\n        dp[0] = 1;\n\n        for (int i = 1; i <= key; i++) {\n            for (int num : arr) {\n                if (i - num >= 0) {\n                    dp[i] = (dp[i] + dp[i - num]) % mod;\n                }\n            }\n        }\n\n        return dp[key];\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def combinationSum4(self, arr, key):\n        mod = 10**9 + 7\n        dp = [0] * (key + 1)\n        dp[0] = 1\n\n        for i in range(1, key + 1):\n            for num in arr:\n                if i - num >= 0:\n                    dp[i] = (dp[i] + dp[i - num]) % mod\n\n        return dp[key]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\n\nclass Solution {\n    combinationSum4(arr, key) {\n        const mod = 1000000007;\n        let dp = Array(key + 1).fill(0);\n        dp[0] = 1;\n\n        for (let i = 1; i <= key; i++) {\n            for (let num of arr) {\n                if (i - num >= 0) {\n                    dp[i] = (dp[i] + dp[i - num]) % mod;\n                }\n            }\n        }\n\n        return dp[key];\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}