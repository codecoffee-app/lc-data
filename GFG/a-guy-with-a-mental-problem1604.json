{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703141,
            "title": "A guy with a mental problem",
            "titleSlug": "a-guy-with-a-mental-problem1604",
            "content": "<p><span >A person needs to reach home by train but compulsively switches trains at every station. If they start with train <strong>arr1</strong> at the first station, they will switch to train <strong>arr2</strong> at the next station, and then switch back to train <strong>arr1</strong> at the following station, and so on. Similarly, if they start with train <strong>arr2</strong>, they will switch to train <strong>arr1</strong> at the next station, and continue alternating.</span></p>\n<p><span >Given two arrays, <strong>arr1</strong> and <strong>arr2</strong>, where:</span></p>\n<ul>\n<li><span ><strong>arr1[i]</strong> represents the time taken by train <strong>arr1</strong> at station <strong>i</strong>.</span></li>\n<li><span ><strong>arr2[i]</strong> represents the time taken by train <strong>arr2</strong> at station <strong>i</strong>.</span></li>\n</ul>\n<p><span >Determine the minimum total time required to reach home starting from either train <strong>arr1</strong> or train <strong>arr2</strong>, with the switching pattern maintained.</span></p>\n<h3><span >Examples:</span></h3>\n<pre><span ><strong>Input:</strong> arr1 = [2, 1, 2], arr2 = [3, 2, 1]</span><br /><span ><strong>Output:</strong> 5</span><br /><span ><strong>Explanation:</strong> Starting with train arr2 yields the minimum total time of 5.</span></pre>\n<pre><span ><strong>Input:</strong> arr1 = [1, 3, 1, 2] arr2 = [2, 2, 3, 1]</span><br /><span ><strong>Output:</strong> 5</span><br /><span ><strong>Explanation:</strong> Starting with train arr1 yields the minimum total time of 5.</span></pre>\n<p><span ><strong>Expected Time Complexity</strong><strong>:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<h3><span >Constraints</span></h3>\n<p><span >1 &le; arr1.size(), arr2.size() &le; 10<sup>6</sup><br />1 &le;&nbsp;arr1[i],&nbsp;arr2[i]&nbsp;&le;&nbsp;</span><span style=\"font-size: 18.6667px;\">10</span><sup>6</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A person needs to travel home by train, switching trains at every station. Starting with train `arr1` at the first station, they will switch to train `arr2` at the next, then back to `arr1`, and so on. The switching pattern alternates between `arr1` and `arr2`.\n\nGiven two arrays, `arr1` and `arr2`, where `arr1[i]` represents the time taken by train `arr1` at station `i`, and `arr2[i]` represents the time taken by train `arr2` at station `i`, determine the minimum total time required to reach home starting from either train `arr1` or train `arr2` while maintaining the switching pattern.",
                "constraints": [
                    "1 <= arr1.size(), arr2.size() <= 10^6",
                    "1 <= arr1[i], arr2[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr1 = [2, 1, 2], arr2 = [3, 2, 1]",
                        "output": "5",
                        "explanation": "Starting with train arr2 yields the minimum total time of 5. (3 + 1 + 1 = 5)"
                    },
                    {
                        "input": "arr1 = [1, 3, 1, 2] arr2 = [2, 2, 3, 1]",
                        "output": "5",
                        "explanation": "Starting with train arr1 yields the minimum total time of 5. (1 + 2 + 1 + 1 = 5)"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try taking the train from both stations and then return the minimum of both.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to calculate the minimum time required to reach home\n    int minTime(vector<int>& arr1, vector<int>& arr2) {\n        int n = arr1.size(); // Get the size of the arrays\n\n        // Variables to track total time starting with arr1 and arr2\n        long long timeArr1 = 0, timeArr2 = 0;\n\n        // Iterate over each station\n        for (int i = 0; i < n; ++i) {\n            // If at an even index, use arr1[i] for timeArr1 and arr2[i] for timeArr2\n            if (i % 2 == 0) {\n                timeArr1 += arr1[i];\n                timeArr2 += arr2[i];\n            }\n            // If at an odd index, switch trains (arr1 -> arr2, arr2 -> arr1)\n            else {\n                timeArr1 += arr2[i];\n                timeArr2 += arr1[i];\n            }\n        }\n\n        // Return the minimum total time between starting with arr1 and starting with\n        // arr2\n        return min(timeArr1, timeArr2);\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Calculate the minimum time to reach home, alternating between two train arrays\n    public int minTime(int[] arr1, int[] arr2) {\n        // Variables to sum times at even and odd indices for both arrays\n        long sumArr1Even = 0, sumArr1Odd = 0;\n        long sumArr2Even = 0, sumArr2Odd = 0;\n        int n = arr1.length; // Get the length of the arrays\n\n        // Loop through arrays to sum up times based on even and odd indices\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) { // Sum times at even indices\n                sumArr1Even += arr1[i];\n                sumArr2Even += arr2[i];\n            } else { // Sum times at odd indices\n                sumArr1Odd += arr1[i];\n                sumArr2Odd += arr2[i];\n            }\n        }\n\n        // Combine sums across arrays for alternating starts\n        sumArr1Even +=\n            sumArr2Odd; // Starting with arr1 and switching to arr2 at odd indices\n        sumArr1Odd +=\n            sumArr2Even; // Starting with arr2 and switching to arr1 at even indices\n\n        // Return the minimum of the two combined sums\n        return (int)Math.min(sumArr1Even, sumArr1Odd);\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Calculate the minimum time to reach home by alternating between two trains\n    def min_time(self, arr1, arr2):\n        # Initialize sums for even and odd index positions for both train arrays\n        sum_arr1_even = sum_arr1_odd = 0\n        sum_arr2_even = sum_arr2_odd = 0\n\n        n = len(arr1)  # Get the number of stations\n\n        # Loop through each station\n        for i in range(n):\n            if i % 2 == 0:\n                # Add times from arr1 and arr2 at even indices\n                sum_arr1_even += arr1[i]\n                sum_arr2_even += arr2[i]\n            else:\n                # Add times from arr1 and arr2 at odd indices\n                sum_arr1_odd += arr1[i]\n                sum_arr2_odd += arr2[i]\n\n        # Calculate total times for starting on arr1 and switching to arr2 and vice versa\n        sum_arr1_even += sum_arr2_odd\n        sum_arr1_odd += sum_arr2_even\n\n        # Return the minimum of the two calculated times\n        return min(sum_arr1_even, sum_arr1_odd)\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to determine the minimum time to reach home by switching between two\n    // trains\n    minTime(arr1, arr2) {\n        // Initialize sums for even and odd index times for both train arrays\n        let sumArr1Even = 0, sumArr1Odd = 0;\n        let sumArr2Even = 0, sumArr2Odd = 0;\n        const n = arr1.length; // Get the number of stations\n\n        // Loop through each station to sum times based on even and odd indices\n        for (let i = 0; i < n; i++) {\n            if (i % 2 === 0) {\n                // Sum times for arr1 and arr2 at even indices\n                sumArr1Even += arr1[i];\n                sumArr2Even += arr2[i];\n            } else {\n                // Sum times for arr1 and arr2 at odd indices\n                sumArr1Odd += arr1[i];\n                sumArr2Odd += arr2[i];\n            }\n        }\n\n        // Combine the times where switching occurs\n        sumArr1Even += sumArr2Odd;\n        sumArr1Odd += sumArr2Even;\n\n        // Return the minimum of the two combined times for both possible start choices\n        return Math.min(sumArr1Even, sumArr1Odd);\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}