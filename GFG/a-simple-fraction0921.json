{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705108,
            "title": "Fraction to Repeating Decimal",
            "titleSlug": "a-simple-fraction0921",
            "content": "<p><span style=\"font-size: 18px;\">Given two integers <strong>a </strong>and <strong>b</strong>, the task is to convert the fraction<strong> a/b</strong> into decimal format. If the fractional part is repeating, enclose the repeating part in parentheses.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>a = 1, b = 2\n<strong>Output: \"</strong>0.5\"\n<strong>Explanation: </strong>1/3 = 0.5 with no repeating part.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>a = 50, b = 22\n<strong>Output: </strong>\"2.(27)\"\n<strong>Explanation: </strong>50/22 = 2.27272727.. Since fractional part (27) is repeating, it is enclosed in paranthesis.</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; a, b &le; 2000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>No scary math, just apply elementary math knowledge.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    string calculateFraction(int a, int b) {\n\n        // If the numerator is zero, answer is 0\n        if (a == 0)\n            return \"0\";\n\n        // If exactly one of the numerator or denominator\n        // is negative, then result will be negative\n        string res = (a < 0) ^ (b < 0) ? \"-\" : \"\";\n\n        a = abs(a);\n        b = abs(b);\n\n        // Calculate and Append the part before decimal point\n        res += to_string(a / b);\n\n        int rem = a % b;\n\n        // If completely divisible, return res\n        if (rem == 0)\n            return res;\n\n        res.append(\".\");\n        unordered_map<int, int> mp;\n\n        while (rem > 0) {\n\n            // If this remainder is already seen,\n            // then there exists a repeating fraction.\n            if (mp.find(rem) != mp.end()) {\n\n                res.insert(mp[rem], \"(\");\n                res.append(\")\");\n                break;\n            }\n\n            // If the remainder is seen for the first time,\n            // store its index\n            mp[rem] = res.size();\n\n            rem = rem * 10;\n\n            // Calculate quotient, append it to result and\n            // calculate next remainder\n            res += to_string(rem / b);\n            rem = rem % b;\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public String calculateFraction(int a, int b) {\n\n        // If the numerator is zero, answer is \"0\"\n        if (a == 0) return \"0\";\n\n        // If exactly one of the numerator or denominator\n        // is negative, then result will be negative\n        String res = (a < 0) ^ (b < 0) ? \"-\" : \"\";\n\n        a = Math.abs(a);\n        b = Math.abs(b);\n\n        // Calculate and Append the part before decimal point\n        res += Integer.toString(a / b);\n\n        int rem = a % b;\n\n        // If completely divisible, return res\n        if (rem == 0) return res;\n\n        res += \".\";\n        HashMap<Integer, Integer> mp = new HashMap<>();\n\n        while (rem > 0) {\n\n            // If this remainder is already seen,\n            // then there exists a repeating fraction.\n            if (mp.containsKey(rem)) {\n                res = res.substring(0, mp.get(rem)) + \"(\" + res.substring(mp.get(rem)) +\n                      \")\";\n                break;\n            }\n\n            // If the remainder is seen for the first time,\n            // store its index\n            mp.put(rem, res.length());\n\n            rem = rem * 10;\n\n            // Calculate quotient, append it to result and\n            // calculate next remainder\n            res += Integer.toString(rem / b);\n            rem = rem % b;\n        }\n\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def calculateFraction(self, a, b):\n\n        # If the numerator is zero, answer is \"0\"\n        if a == 0:\n            return \"0\"\n\n        # If exactly one of the numerator or denominator\n        # is negative, then result will be negative\n        res = \"-\" if (a < 0) ^ (b < 0) else \"\"\n\n        a = abs(a)\n        b = abs(b)\n\n        # Calculate and Append the part before decimal point\n        res += str(a // b)\n\n        rem = a % b\n\n        # If completely divisible, return res\n        if rem == 0:\n            return res\n\n        res += \".\"\n        mp = {}\n\n        while rem > 0:\n\n            # If this remainder is already seen,\n            # then there exists a repeating fraction.\n            if rem in mp:\n                res = res[:mp[rem]] + \"(\" + res[mp[rem]:] + \")\"\n                break\n\n            # If the remainder is seen for the first time,\n            # store its index\n            mp[rem] = len(res)\n\n            rem = rem * 10\n\n            # Calculate quotient, append it to result and\n            # calculate next remainder\n            res += str(rem // b)\n            rem = rem % b\n\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    public string calculateFraction(int a, int b) {\n\n        // If the numerator is zero, answer is \"0\"\n        if (a == 0) return \"0\";\n\n        // If exactly one of the numerator or denominator\n        // is negative, then result will be negative\n        string res = (a < 0) ^ (b < 0) ? \"-\" : \"\";\n\n        a = Math.Abs(a);\n        b = Math.Abs(b);\n\n        // Calculate and Append the part before decimal point\n        res += a / b;\n\n        int rem = a % b;\n\n        // If completely divisible, return res\n        if (rem == 0) return res;\n\n        res += \".\";\n        Dictionary<int, int> mp = new Dictionary<int, int>();\n\n        while (rem > 0) {\n\n            // If this remainder is already seen,\n            // then there exists a repeating fraction.\n            if (mp.ContainsKey(rem)) {\n                res = res.Insert(mp[rem], \"(\");\n                res += \")\";\n                break;\n            }\n\n            // If the remainder is seen for the first time,\n            // store its index\n            mp[rem] = res.Length;\n\n            rem = rem * 10;\n\n            // Calculate quotient, append it to result and\n            // calculate next remainder\n            res += rem / b;\n            rem = rem % b;\n        }\n\n        return res;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {Number} a\n * @param {Number} b\n * @returns {string}\n */\n\nclass Solution {\n    calculateFraction(a, b) {\n\n        // If the numerator is zero, answer is \"0\"\n        if (a === 0) {\n            return \"0\";\n        }\n\n        // If exactly one of the numerator or denominator\n        // is negative, then result will be negative\n        let res = (a < 0) ^ (b < 0) ? \"-\" : \"\";\n\n        a = Math.abs(a);\n        b = Math.abs(b);\n\n        // Calculate and Append the part before decimal point\n        res += Math.floor(a / b);\n\n        let rem = a % b;\n\n        // If completely divisible, return res\n        if (rem === 0) {\n            return res;\n        }\n\n        res += \".\";\n        let mp = new Map();\n\n        while (rem > 0) {\n            // If this remainder is already seen,\n            // then there exists a repeating fraction.\n            if (mp.has(rem)) {\n                let repeatIndex = mp.get(rem);\n                res = res.substring(0, repeatIndex) + \"(\" + res.substring(repeatIndex) +\n                      \")\";\n                break;\n            }\n\n            // If the remainder is seen for the first time,\n            // store its index\n            mp.set(rem, res.length);\n\n            rem = rem * 10;\n\n            // Calculate quotient, append it to result and\n            // calculate next remainder\n            res += Math.floor(rem / b);\n            rem = rem % b;\n        }\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}