{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703291,
            "title": "Positive distinct count",
            "titleSlug": "absolute-distinct-count5118",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr</strong>, find the number of distinct values greater than 0 among the elements of the array.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [-3, -2, 0, 3, 4, 5]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> There are 3 distinct positive values among the elements of this array, i.e. 3, 4 and 5.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [-1, -1, -1, -1, 0, 1, 1, 1, 1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There are 1 distinct positive values among the elements of this array, i.e. 1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />-10<sup>6</sup>&nbsp;&le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers, determine the number of unique positive values present in the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "-10^6 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[-3, -2, 0, 3, 4, 5]",
                        "output": "3",
                        "explanation": "The distinct positive numbers in the array are 3, 4, and 5. Thus, the count is 3."
                    },
                    {
                        "input": "[-1, -1, -1, -1, 0, 1, 1, 1, 1]",
                        "output": "1",
                        "explanation": "The only distinct positive number in the array is 1. Therefore, the count is 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use hashing to count unique elements.</span></p>",
            "<p><span >Use a pointer approach starting from the two corners of the array and check for a pair in the input array with a sum of 0. If a pair with 0 sum is found or duplicates are encountered, we decrease the count of distinct elements. Finally, we return the updated count.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    int distinctCount(vector<int>& arr) {\n        // initialize count as 0\n        int n = arr.size();\n        int count = 0;\n        // take unordered set\n        unordered_set<int> s;\n        for (int i = 0; i < n; i++) {\n            // find if number is unique\n            if (s.find(arr[i]) == s.end()) {\n                // insert number in s\n                s.insert(arr[i]);\n                // check if number positive\n                if (arr[i] > 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public int distinctCount(int[] arr) {\n        // Initialize count as 0\n        int count = 0;\n        // Create a HashSet to store unique elements\n        HashSet<Integer> set = new HashSet<>();\n\n        // Traverse through the array\n        for (int i = 0; i < arr.length; i++) {\n            // Check if the number is not in the set (i.e., it's unique)\n            if (!set.contains(arr[i])) {\n                // Add the number to the set\n                set.add(arr[i]);\n                // Check if the number is positive\n                if (arr[i] > 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def distinctCount(self, arr):\n        # Initialize count as 0\n        count = 0\n        # Create a set to store unique elements\n        unique_elements = set()\n\n        # Traverse through the array\n        for num in arr:\n            # Check if the number is not in the set (i.e., it's unique)\n            if num not in unique_elements:\n                # Add the number to the set\n                unique_elements.add(num)\n                # Check if the number is positive\n                if num > 0:\n                    count += 1\n\n        return count\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    distinctCount(arr) {\n        // Initialize count as 0\n        let count = 0;\n        // Create a Set to store unique elements\n        let uniqueElements = new Set();\n\n        // Traverse through the array\n        for (let num of arr) {\n            // Check if the number is not in the set (i.e., it's unique)\n            if (!uniqueElements.has(num)) {\n                // Add the number to the set\n                uniqueElements.add(num);\n                // Check if the number is positive\n                if (num > 0) {\n                    count++;\n                }\n            }\n        }\n\n        return count;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}