{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700234,
            "title": "Absolute List Sorting",
            "titleSlug": "absolute-list-sorting",
            "content": "<p><span style=\"font-size: 12pt;\">Given a linked list, sorted in ascending order based on the <strong>absolute values</strong> of its data,i.e. negative values are considered as positive ones. Sort the linked list in ascending order according to the <strong>actual values</strong>, and consider negative numbers as negative and positive numbers as positive.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples</strong>: <strong> </strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input</strong>:  Linked List: 1 -&gt; -2 -&gt; -3 -&gt; 4 -&gt; -5\n<strong>Output</strong>: -5 -&gt; -3 -&gt; -2 -&gt; 1 -&gt; 4</span><br /><span style=\"font-size: 12pt;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700234/Web/Other/blobid0_1723006347.png\" width=\"400\" height=\"140\" /></span><br /><span style=\"font-size: 12pt;\"><strong>Explanation: </strong>Actual sorted order of {1, -2, -3, 4, -5} is {-5, -3, -2, 1, 4}</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input</strong>: Linked List: 5 -&gt; -10\n<strong>Output</strong>: -10 -&gt; 5</span><br /><span style=\"font-size: 12pt;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700234/Web/Other/blobid1_1723006449.png\" width=\"400\" height=\"140\" /></span><br /><span style=\"font-size: 12pt;\"><strong>Explanation: </strong>Actual sorted order of {5, -10} is {-10, 5}\n</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n)</span><br /><span style=\"font-size: 12pt;\"><strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br /><br /><span style=\"font-size: 12pt;\"><strong>Constraints</strong></span><br /><span style=\"font-size: 12pt;\">1 &le;&nbsp; size of linked list<strong>&nbsp;&nbsp;</strong>&le; 10^5</span><br /><span style=\"font-size: 12pt;\">-10^5&nbsp;&le;&nbsp; node.data<strong>&nbsp;</strong>&le; 10^5</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a linked list sorted in ascending order based on the absolute values of its data, sort the list in ascending order according to the actual values. Consider negative numbers as negative and positive numbers as positive.",
                "constraints": [
                    "1 <= size of linked list <= 10^5",
                    "-10^5 <= node.data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "Linked List: 1 -> -2 -> -3 -> 4 -> -5",
                        "output": "-5 -> -3 -> -2 -> 1 -> 4",
                        "explanation": "The linked list {1, -2, -3, 4, -5} after sorting becomes {-5, -3, -2, 1, 4}."
                    },
                    {
                        "input": "Linked List: 5 -> -10",
                        "output": "-10 -> 5",
                        "explanation": "The linked list {5, -10} after sorting becomes {-10, 5}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >All negative elements are in reverse order. We traverse the list and move any out-of-order elements to the front.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "oyo-rooms"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// To sort a linked list by actual values.\n// The list is assumed to be sorted by absolute\n// values.\nclass Solution {\n  public:\n    Node* sortList(Node* head) {\n        // Initialize previous and current nodes\n        Node* prev = head;\n        Node* curr = head->next;\n\n        // Traverse list\n        while (curr != NULL) {\n            // If curr is smaller than prev, then\n            // it must be moved to head\n            if (curr->data < prev->data) {\n                // Detach curr from linked list\n                prev->next = curr->next;\n\n                // Move current node to beginning\n                curr->next = head;\n                head = curr;\n\n                // Update current\n                curr = prev;\n            }\n\n            // Nothing to do if current element\n            // is at right place\n            else\n                prev = curr;\n\n            // Move current\n            curr = curr->next;\n        }\n\n        return head;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    Node sortList(Node head) {\n        // Initialize previous and current nodes\n        Node prev = head;\n        Node curr = head.next;\n\n        // Traverse list\n        while (curr != null) {\n            // If curr is smaller than prev, then\n            // it must be moved to head\n            if (curr.data < prev.data) {\n                // Detach curr from linked list\n                prev.next = curr.next;\n\n                // Move current node to beginning\n                curr.next = head;\n                head = curr;\n\n                // Update current\n                curr = prev;\n            }\n\n            // Nothing to do if current element\n            // is at right place\n            else\n                prev = curr;\n\n            // Move current\n            curr = curr.next;\n        }\n        return head;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Node:\n\n    def __init__(self, data):  # data -> value stored in node\n        self.data = data\n        self.next = None\n\n\nclass Solution:\n\n    # Function to sort a linked list in ascending order\n    def sortList(self, head):\n        prev = head\n        curr = head.next\n        while curr != None:\n            if curr.data < prev.data:\n                # Rearranging pointers to swap nodes if current data is less than previous data\n                prev.next = curr.next\n                curr.next = head\n                head = curr\n                curr = prev\n            else:\n                prev = curr\n            curr = curr.next\n        return head\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {Node} head\n * @returns {Node}\n */\n\nclass Solution {\n    // Function to sort the given linked list using Merge Sort.\n    sortList(head) {\n        if (head === null || head.next === null) {\n            return head;\n        }\n\n        // Function to merge two sorted linked lists\n        const merge =\n            (l1, l2) => {\n                let dummy = new Node(0);\n                let current = dummy;\n\n                while (l1 !== null && l2 !== null) {\n                    if (l1.data <= l2.data) {\n                        current.next = l1;\n                        l1 = l1.next;\n                    } else {\n                        current.next = l2;\n                        l2 = l2.next;\n                    }\n                    current = current.next;\n                }\n\n                if (l1 !== null) {\n                    current.next = l1;\n                }\n\n                if (l2 !== null) {\n                    current.next = l2;\n                }\n\n                return dummy.next;\n            }\n\n        // Function to split the linked list into two halves\n        const split =\n            (head) => {\n                let slow = head;\n                let fast = head.next;\n\n                while (fast !== null && fast.next !== null) {\n                    slow = slow.next;\n                    fast = fast.next.next;\n                }\n\n                let secondHalf = slow.next;\n                slow.next = null;\n\n                return secondHalf;\n            }\n\n        // Recursive function to merge sort the linked list\n        const mergeSort =\n            (head) => {\n                if (head === null || head.next === null) {\n                    return head;\n                }\n\n                let secondHalf = split(head);\n\n                let firstHalf = mergeSort(head);\n                secondHalf = mergeSort(secondHalf);\n\n                return merge(firstHalf, secondHalf);\n            }\n\n        head = mergeSort(head);\n        return head;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}