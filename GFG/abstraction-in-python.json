{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 879243,
            "title": "Abstraction in Python",
            "titleSlug": "abstraction-in-python",
            "content": "<p><span >Implement the following classes to understand abstraction in Python :<br />Note: Driver code makes all the function calls and print statements</span></p>\n<pre><span >Class Name: <strong>Shape </strong>(Abstract Class)<br />Attributes: <strong>color </strong>(String)<br />Constructor: <strong>Shape(c) </strong>-&gt; assign value of c to color attribute<br />Methods: <strong>get_color() </strong>-&gt; returns value of color<br />\\t   <strong>get_area() </strong>-&gt; <strong>abstract </strong>method with <strong>float </strong>return type</span></pre>\n<pre><span >Class Name: <strong>Square </strong>(extends Shape)<br />Attributes: <strong>side </strong>(float)<br />Constructor: <strong>Square(c, side) </strong>-&gt; calls super(c) to initialize the color and assigns the value to side.<br />Methods: <strong>get_area() </strong>-&gt; returns the area of the square (side * side).<br /></span></pre>\n<p><strong><span >Example:</span></strong></p>\n<pre><strong><span >Input:</span></strong><span > color = \"red\", side = 5.0<br /></span><span ><strong>Output: <br /></strong>red 25.0</span></pre>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement the `Shape` (abstract) and `Square` classes in Python to demonstrate abstraction.\n\n`Shape` is an abstract class with a color attribute and a method to get the color and an abstract method to get the area.\n`Square` inherits from `Shape` and represents a square, calculating its area based on its side length.\n\nEnsure your implementation adheres to the specified method signatures and inheritance structure.",
                "constraints": [],
                "testcases": [
                    {
                        "input": "color = \"red\", side = 5.0",
                        "output": "red 25.0",
                        "explanation": "A square with color 'red' and side 5.0 should have an area of 25.0, and the output should print the color followed by the area."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n# Abstract class Shape\nclass Shape(ABC):\n\n    def __init__(self, c):\n        self.color = c  # Assign color attribute\n\n    def get_color(self):\n        return self.color\n\n    @abstractmethod\n    def get_area(self):\n        pass  # Abstract method, to be implemented by subclass\n\n\n# Square class that extends Shape\nclass Square(Shape):\n\n    def __init__(self, c, side):\n        super().__init__(c)  # Call the constructor of Shape to set color\n        self.side = side\n\n    def get_area(self):\n        return self.side * self.side  # Area of the square\n",
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}