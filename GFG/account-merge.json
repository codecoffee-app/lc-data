{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712507,
            "title": "Account Merge",
            "titleSlug": "account-merge",
            "content": "<p><span style=\"font-size: 18px;\">Given a list&nbsp;of <strong>accounts</strong> of size <strong>n</strong> where each element <strong>accounts [ i ] </strong>is a list&nbsp;of strings, where the first element <strong>account [ i ][ 0 ]&nbsp;</strong> is a<strong> name</strong>, and the rest of the elements are<strong> emails</strong> representing emails of the account.<br />Geek wants you to merge these accounts. Two accounts belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts have the same name.<br />After merging the accounts, return the accounts in the following format: The first element of each account is the name, and the rest of the elements are emails <strong>in</strong> <strong>sorted order</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>: Accounts themselves can be returned in <strong>any order</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #222426; --darkreader-inline-border-top: #3e4446; --darkreader-inline-border-right: #3e4446; --darkreader-inline-border-bottom: #3e4446; --darkreader-inline-border-left: #3e4446;\"><span style=\"font-size: 18px;\"><strong>Input:</strong><br />n = 4<br />accounts [ ] =<br />[[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],<br />[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],<br />[\"Mary\",\"mary@mail.com\"],<br />[\"John\",\"johnnybravo@mail.com\"]]<br /><strong>Output:</strong><br />[[\"John\",\"john00@mail.com\",\"john_newyork@mail.com\", \"johnsmith@mail.com\"],<br />[\"Mary\",\"mary@mail.com\"],<br />[\"John\",\"johnnybravo@mail.com\"]]<br /><strong>Explanation:</strong><br />The first and second John's are the same person as they have the common email \"johnsmith@mail.com\". The third John and Mary are different people as none of their email addresses are used by other accounts.We could return these arrays in any order, for example, the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], ['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #222426; --darkreader-inline-border-top: #3e4446; --darkreader-inline-border-right: #3e4446; --darkreader-inline-border-bottom: #3e4446; --darkreader-inline-border-left: #3e4446;\"><span style=\"font-size: 18px;\"><strong>Input:</strong><br />n = 5<br />accounts [ ] =<br />[[\"Gabe\",\"Gabe00@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"],<br />[\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"],<br />[\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"],<br />[\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"],<br />[\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]]<br /><strong>Output:</strong><br />[[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"],<br />[\"Gabe\",\"Gabe0@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"],<br />[\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"],<br />[\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"],<br />[\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]]<br /><strong>Explanation:</strong><br />We don't have any common emails in any of the users. We just sorted the emails of each person and we return a array of emails.(The details can be returned in any order).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>accountsMerge</strong><strong>()&nbsp;</strong>which takes a list of lists of strings representing <strong>accounts[][]</strong> as a parameter and returns a list of lists of strings denoting the details after merging.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*m*logn) - where n is the size of accounts and m is the size of the number of strings for a name.<br /><strong>Expected Auxiliary Space:</strong> O(n*m) - where n is the size of accounts and m is the size of the number of strings for a name.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">1 &lt;= n &lt;= 1000<br /></span><span style=\"font-size: 18px;\">2 &lt;= accounts[ i ].size&nbsp;&lt;= 10<br /></span><span style=\"font-size: 18px;\">1 &lt;= accounts[ i ][ j ].size &lt;= 30<br /></span><span style=\"font-size: 18px;\">accounts[i][0] consists of English letters.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a list of accounts, where each account is a list of strings. The first element of each account is the name, and the rest of the elements are emails representing emails of the account. Merge these accounts. Two accounts belong to the same person if they share a common email. Even if two accounts have the same name, they may belong to different people. A person can have multiple accounts initially, but all their accounts share the same name.\n\nAfter merging, return the accounts in the following format: The first element is the name, and the rest are the emails in sorted order. The order of the accounts themselves does not matter.",
                "constraints": [
                    "1 <= n <= 1000",
                    "2 <= accounts[i].size <= 10",
                    "1 <= accounts[i][j].size <= 30",
                    "accounts[i][0] consists of English letters."
                ],
                "testcases": [
                    {
                        "input": "[[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"], [\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"], [\"Mary\",\"mary@mail.com\"], [\"John\",\"johnnybravo@mail.com\"]]",
                        "output": "[[\"John\",\"john00@mail.com\",\"john_newyork@mail.com\", \"johnsmith@mail.com\"], [\"Mary\",\"mary@mail.com\"], [\"John\",\"johnnybravo@mail.com\"]]",
                        "explanation": "The first and second John's accounts are merged because they share the email 'johnsmith@mail.com'. The third John and Mary have distinct emails and remain separate."
                    },
                    {
                        "input": "[[\"Gabe\",\"Gabe00@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"], [\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"], [\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"], [\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"], [\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]]",
                        "output": "[[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"], [\"Gabe\",\"Gabe00@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"], [\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"], [\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"], [\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]]",
                        "explanation": "No accounts share common emails. Therefore, the emails within each account are sorted and returned."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use Disjoint Set to merge the accounts.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "union-find",
                "slug": "union-find"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n//  Class to implement Disjoint Set\nclass DisjointSet {\n    vector<int> parent, size;\n\n  public:\n    DisjointSet(int n) {\n        parent.resize(n);\n        size.resize(n, 1);\n\n        for (int i = 0; i < n; i++) {\n            parent[i] = i;\n        }\n    }\n\n    int findParent(int node) {\n\n        // Find the root of the set to which 'node' belongs\n        if (node == parent[node]) {\n            return node;\n        }\n\n        // Make the parent of 'node' the root\n        return parent[node] = findParent(parent[node]);\n    }\n\n    void unionBySize(int u, int v) {\n\n        // Union by size to merge two sets\n        int par_u = findParent(u);\n        int par_v = findParent(v);\n\n        if (par_u == par_v) {\n            return;\n        }\n        if (size[par_u] < size[par_v]) {\n            parent[par_u] = par_v;\n            size[par_v] += size[par_u];\n        } else {\n            parent[par_v] = par_u;\n            size[par_u] += size[par_v];\n        }\n    }\n};\n\nclass Solution {\n  public:\n    vector<vector<string>> accountsMerge(vector<vector<string>>& arr) {\n        unordered_map<string, int> mails;\n        int n = arr.size();\n        DisjointSet ds(n);\n\n        // Iterate through arr and build disjoint sets\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j < arr[i].size(); j++) {\n                string mail = arr[i][j];\n                if (mails.find(mail) == mails.end()) {\n                    mails[mail] = i;\n                } else {\n                    ds.unionBySize(i, mails[mail]);\n                }\n            }\n        }\n\n        // Group merged emails based on disjoint sets\n        vector<string> mergedMails[n];\n        for (auto it : mails) {\n            int node = ds.findParent(it.second);\n            string mail = it.first;\n            mergedMails[node].push_back(mail);\n        }\n\n        // Construct the final result\n        vector<vector<string>> accounts;\n        for (int i = 0; i < n; i++) {\n            if (mergedMails[i].size() == 0) {\n                continue;\n            }\n            vector<string> temp;\n            temp.push_back(arr[i][0]);\n            for (auto it : mergedMails[i]) {\n                temp.push_back(it);\n            }\n            accounts.push_back(temp);\n        }\n        return accounts;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass DisjointSet {\n    ArrayList<Integer> parent, size;\n\n    DisjointSet(int n) {\n        parent = new ArrayList<>(Collections.nCopies(n, 0));\n        size = new ArrayList<>(Collections.nCopies(n, 1));\n\n        for (int i = 0; i < n; i++) {\n            parent.set(i, i);\n        }\n    }\n\n    int findParent(int node) {\n        // Find the root of the set to which 'node' belongs\n        if (node == parent.get(node)) {\n            return node;\n        }\n\n        // Make the parent of 'node' the root\n        parent.set(node, findParent(parent.get(node)));\n        return parent.get(node);\n    }\n\n    void unionBySize(int u, int v) {\n        // Union by size to merge two sets\n        int par_u = findParent(u);\n        int par_v = findParent(v);\n\n        if (par_u == par_v) {\n            return;\n        }\n        if (size.get(par_u) < size.get(par_v)) {\n            parent.set(par_u, par_v);\n            size.set(par_v, size.get(par_v) + size.get(par_u));\n        } else {\n            parent.set(par_v, par_u);\n            size.set(par_u, size.get(par_u) + size.get(par_v));\n        }\n    }\n}\n\nclass Solution {\n    // Function to find the root of the set\n    // Class to implement Disjoint Set\n    static ArrayList<ArrayList<String>> accountsMerge(\n        ArrayList<ArrayList<String>> arr) {\n        HashMap<String, Integer> mails = new HashMap<>();\n        int n = arr.size();\n        DisjointSet ds = new DisjointSet(n);\n\n        // Iterate through arr and build disjoint sets\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j < arr.get(i).size(); j++) {\n                String mail = arr.get(i).get(j);\n                if (!mails.containsKey(mail)) {\n                    mails.put(mail, i);\n                } else {\n                    ds.unionBySize(i, mails.get(mail));\n                }\n            }\n        }\n\n        // Group merged emails based on disjoint sets\n        ArrayList<ArrayList<String>> mergedMails =\n            new ArrayList<>(Collections.nCopies(n, null));\n        for (int i = 0; i < n; i++) {\n            mergedMails.set(i, new ArrayList<>());\n        }\n        for (Map.Entry<String, Integer> it : mails.entrySet()) {\n            int node = ds.findParent(it.getValue());\n            String mail = it.getKey();\n            mergedMails.get(node).add(mail);\n        }\n\n        // Construct the final result\n        ArrayList<ArrayList<String>> accounts = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (mergedMails.get(i).isEmpty()) {\n                continue;\n            }\n            ArrayList<String> temp = new ArrayList<>();\n            temp.add(arr.get(i).get(0));\n            temp.addAll(mergedMails.get(i));\n            accounts.add(temp);\n        }\n        return accounts;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class DisjointSet:\n\n    def __init__(self, n):\n        self.parent = [i for i in range(n)]\n        self.size = [1] * n\n\n    def findParent(self, node):\n        # Path compression for efficiency\n        if node != self.parent[node]:\n            self.parent[node] = self.findParent(self.parent[node])\n        return self.parent[node]\n\n    def unionBySize(self, u, v):\n        # Union by size to merge two sets\n        par_u = self.findParent(u)\n        par_v = self.findParent(v)\n\n        if par_u == par_v:\n            return\n        if self.size[par_u] < self.size[par_v]:\n            self.parent[par_u] = par_v\n            self.size[par_v] += self.size[par_u]\n        else:\n            self.parent[par_v] = par_u\n            self.size[par_u] += self.size[par_v]\n\n\nclass Solution:\n\n    def accountsMerge(self, arr):\n        mails = {}\n        n = len(arr)\n        ds = DisjointSet(n)\n\n        # Iterate through arr and build disjoint sets\n        for i in range(n):\n            for j in range(1, len(arr[i])):  # Start from index 1 (emails only)\n                mail = arr[i][j]\n                if mail not in mails:\n                    mails[mail] = i\n                else:\n                    ds.unionBySize(i, mails[mail])\n\n        # Group merged emails based on disjoint sets\n        mergedMails = [[] for _ in range(n)]\n        for mail, index in mails.items():\n            node = ds.findParent(index)\n            mergedMails[node].append(mail)\n\n        # Construct the final result\n        accounts = []\n        for i in range(n):\n            if not mergedMails[i]:\n                continue\n            temp = [arr[i][0]] + mergedMails[i]\n            accounts.append(temp)\n\n        return accounts\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class DisjointSet {\n    constructor(n) {\n        this.parent = Array.from({length : n}, (_, i) => i);\n        this.size = Array(n).fill(1);\n    }\n\n    findParent(node) {\n        if (this.parent[node] !== node) {\n            this.parent[node] = this.findParent(this.parent[node]); // Path compression\n        }\n        return this.parent[node];\n    }\n\n    unionBySize(u, v) {\n        const par_u = this.findParent(u);\n        const par_v = this.findParent(v);\n\n        if (par_u === par_v) return;\n\n        if (this.size[par_u] < this.size[par_v]) {\n            this.parent[par_u] = par_v;\n            this.size[par_v] += this.size[par_u];\n        } else {\n            this.parent[par_v] = par_u;\n            this.size[par_u] += this.size[par_v];\n        }\n    }\n}\n\nclass Solution {\n    /**\n     * @param {string[][]} arr\n     * @returns {string[][]}\n     */\n    accountsMerge(arr) {\n        const mails = new Map();\n        const n = arr.length;\n        const ds = new DisjointSet(n);\n\n        // Step 1: Map each email to a unique user\n        for (let i = 0; i < n; i++) {\n            for (let j = 1; j < arr[i].length; j++) {\n                const mail = arr[i][j];\n                if (!mails.has(mail)) {\n                    mails.set(mail, i);\n                } else {\n                    ds.unionBySize(i, mails.get(mail));\n                }\n            }\n        }\n\n        // Step 2: Group merged emails\n        const mergedMails = new Array(n).fill(null).map(() => []);\n        for (const [mail, index] of mails.entries()) {\n            const node = ds.findParent(index);\n            mergedMails[node].push(mail);\n        }\n\n        // Step 3: Construct the final merged accounts\n        const accounts = [];\n        for (let i = 0; i < n; i++) {\n            if (mergedMails[i].length > 0) {\n                accounts.push([ arr[i][0], ...mergedMails[i] ]);\n            }\n        }\n\n        return accounts;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}