{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701362,
            "title": "Activity Selection",
            "titleSlug": "activity-selection-1587115620",
            "content": "<p><span style=\"font-size: 18.6667px;\">You are given a set of activities, each with a <strong>start time</strong> and a <strong>finish time</strong>, represented by the arrays <strong>start[]</strong> and <strong>finish[]</strong>, respectively. A single person can perform only <strong>one activity</strong> at a time, meaning <strong>no two activities can overlap</strong>. Your task is to determine the <strong>maximum number of activities</strong> that a person can complete in a day.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong><strong>Input: </strong></strong>start[] = [1, 3, 0, 5, 8, 5], <span style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px; white-space: normal; background-color: #ffffff;\">finish</span>[] = [2, 4, 6, 7, 9, 9]<br /><strong><strong>Output: </strong></strong>4<br /><strong><strong>Explanation: </strong></strong>A person can perform at most four activities. The maximum set of activities that can be executed is {0, 1, 3, 4}</span></pre>\n<pre><span ><strong><strong>Input:</strong></strong> start[] = [10, 12, 20], finish[] = [20, 25, 30]<br /><strong><strong>Output: </strong></strong>1<br /><strong><strong>Explanation: </strong></strong>A person can perform at most one activity.</span></pre>\n<pre><span ><strong>Input: </strong>start[] = [1, 3, 2, 5], finish[] = [2, 4, 3, 6]\n<strong>Output: </strong>3<strong>\nExplanation: </strong>A person can perform activities 0, 1 and 3.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; start.size() = finish.size() &le; 2*10<sup>5</sup><br />1 &le; start[i] &le; finish[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Sort activities in such a way that you complete some activities as soon as possible.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            }
        ],
        "companies": [
            "flipkart",
            "morgan-stanley",
            "facebook"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    int activitySelection(vector<int> &start, vector<int> &finish) {\n        // to store results.\n        int ans = 0;\n\n        // to store the activities\n        vector<pair<int, int>> arr;\n\n        for (int i = 0; i < start.size(); i++) {\n            arr.push_back(make_pair(finish[i], start[i]));\n        }\n\n        // sort the activities based on finish time\n        sort(arr.begin(), arr.end());\n\n        // to store the finish time of last activity\n        int finishtime = -1;\n\n        for (int i = 0; i < arr.size(); i++) {\n            pair<int, int> activity = arr[i];\n            if (activity.second > finishtime) {\n                finishtime = activity.first;\n                ans++;\n            }\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    public int activitySelection(int[] start, int[] finish) {\n        int n = start.length;\n        int ans = 0;\n\n        // Store activities as (finish, start) pairs\n        int[][] arr = new int[n][2];\n        for (int i = 0; i < n; i++) {\n            arr[i][0] = finish[i];\n            arr[i][1] = start[i];\n        }\n\n        // Sort activities based on finish time\n        Arrays.sort(arr, (a, b) -> Integer.compare(a[0], b[0]));\n\n        // To store the finish time of last activity\n        int finishtime = -1;\n\n        for (int i = 0; i < n; i++) {\n            if (arr[i][1] > finishtime) {\n                finishtime = arr[i][0];\n                ans++;\n            }\n        }\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def activitySelection(self, start, finish):\n        # to store results.\n        ans = 0\n\n        # to store the activities\n        arr = []\n\n        for i in range(len(start)):\n            arr.append((finish[i], start[i]))\n\n        # sort the activities based on finish time\n        arr.sort()\n\n        # to store the finish time of last activity\n        finishtime = -1\n\n        for i in range(len(arr)):\n            activity = arr[i]\n            if activity[1] > finishtime:\n                finishtime = activity[0]\n                ans += 1\n\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public int activitySelection(int[] start, int[] finish) {\n        int n = start.Length;\n\n        int[][] arr = new int [n][];\n        for (int i = 0; i < n; i++) {\n            arr[i] = new int[] { finish[i], start[i] };\n        }\n\n        // Sort activities based on their finish time\n        Array.Sort(arr, (a, b) => a[0].CompareTo(b[0]));\n\n        int count = 0;\n        int lastEndTime = -1;\n\n        // Select activities greedily\n        for (int i = 0; i < n; i++) {\n\n            // If start time is greater than last end time\n            if (arr[i][1] > lastEndTime) {\n                count++;\n\n                // Update last end time\n                lastEndTime = arr[i][0];\n            }\n        }\n\n        return count;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n\n    activitySelection(start, finish) {\n        // to store results.\n        let ans = 0;\n\n        // to store the activities\n        let arr = [];\n\n        for (let i = 0; i < start.length; i++) {\n            arr.push([ finish[i], start[i] ]);\n        }\n\n        // sort the activities based on end time\n        arr.sort((a, b) => a[0] - b[0]);\n\n        // to store the end time of last activity\n        let finishtime = -1;\n\n        for (let i = 0; i < arr.length; i++) {\n            let activity = arr[i];\n            if (activity[1] > finishtime) {\n                finishtime = activity[0];\n                ans++;\n            }\n        }\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}