{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702941,
            "title": "ADA Noise",
            "titleSlug": "ada-noise2029",
            "content": "<p><span style=\"font-size:18px\">You are given a message string <strong>S</strong> consisting of lowercase English alphabet letters. &quot;<strong>ada</strong>&quot; is a noise word and all the words that can be formed by adding &ldquo;da&rdquo; any number of times at the end of any noise word is also considered as a noise word. For example, the words &ldquo;adada&rdquo;, &ldquo;adadadadada&rdquo;, &rdquo;adada&rdquo; are noise words but &ldquo;dada&rdquo;, &rdquo;ad&rdquo;, &rdquo;aad&rdquo; are not considered noise words.<br />\nYou&nbsp;have to move all the noise words&nbsp;present in the message signal to the end of the message (in the same order as they occur in the message S) so that the filter can truncate the noise&nbsp;from the end.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nS = &quot;heyadadahiadahi&quot;\n<strong>Output: </strong>&quot;heyhihiadadaada&quot; \n<strong>Explanation: </strong>&rdquo;adada&rdquo; and &ldquo;ada&rdquo; are the \nnoise words. Noises are moved to the end \nin the same order as they appear in the \nstring S.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>S = &quot;heyheyhello&quot;\n<strong>Output: </strong>&quot;heyheyhello&quot;\n<strong>Explanation: </strong>There is no noise in the signal.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou need not take any input or print anything. Your task is to complete the function <strong>updateString()&nbsp;</strong>which takes string S as input parameter&nbsp;and returns the message&nbsp;string with noise words at the end. </span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|).<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(|S|).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; length (string) &le; 10^5</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `S` consisting of lowercase English alphabet letters, identify and move all noise words to the end of the string, maintaining their original order. A noise word is defined as \"ada\" followed by any number of \"da\" repetitions (e.g., \"ada\", \"adada\", \"adadada\"). The goal is to filter out the noise by placing it at the end of the message.",
                "constraints": [
                    "1 <= length(string) <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "heyadadahiadahi",
                        "output": "heyhihiadadaada",
                        "explanation": "The noise words \"adada\" and \"ada\" are identified and moved to the end of the string, preserving their original order."
                    },
                    {
                        "input": "heyheyhello",
                        "output": "heyheyhello",
                        "explanation": "There are no noise words in the input string, so the output remains the same."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Find every &quot;ada&quot; and follow it up for &quot;da&quot; to find noise words.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to update the string by removing noise\n\nstring updateString(string str){\n    string ans=\"\",last=\"\";\n    int i=0;\n    \n    // Find the first occurrence of \"ada\" in the string\n    int k=str.find(\"ada\",i);\n    \n    // If no noise is present, return the original string\n    if(k==-1)return str;\n    else{\n        // Loop until all occurrences of \"ada\" are removed\n        while(k!=-1){\n            \n            // Add the substring before \"ada\" to the result string\n            ans+=str.substr(i,(k-i)); //(k-i) characters from i \n            \n            // Add \"ada\" to the last string\n            last.append(\"ada\");\n            \n            // Move the index i to the next position after \"ada\"\n            i=k+3;\n            \n            // Check if there are more occurrences of \"da\" immediately after \"ada\"\n            while(i<str.size()-1 and str[i]=='d' and str[i+1]=='a'){\n                i+=2;\n                \n                // Add \"da\" to the last string\n                last.append(\"da\");\n            }\n            \n            // Find the next occurrence of \"ada\" in the string\n            k=str.find(\"ada\",i);\n            \n            // If no more occurrences, add the remaining substring to the result string\n            if(k==-1){\n                ans+=str.substr(i);\n            }\n        }\n        // Return the updated string\n        return (ans+last);\n    }\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}