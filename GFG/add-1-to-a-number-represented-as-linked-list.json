{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700053,
            "title": "Add 1 to a Linked List Number",
            "titleSlug": "add-1-to-a-number-represented-as-linked-list",
            "content": "<p><span style=\"font-size: 12pt;\">You are given a linked list where each element in the list is a node and have an integer data. You need to add <strong>1</strong> to the number formed by concatinating all the list node numbers together and return the head of the modified linked list.&nbsp;</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Note:&nbsp;</strong>The head represents the first element of the given array.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>LinkedList: 4-&gt;5-&gt;6\n<strong>Output: </strong>457<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700053/Web/Other/blobid0_1722278845.png\" width=\"400\" height=\"225\" /><br /><strong>Explanation:</strong> 4-&gt;5-&gt;6 represents 456 and when 1 is added it becomes 457. \n</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>LinkedList: 1-&gt;2-&gt;3\n<strong>Output: </strong>124<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700053/Web/Other/blobid1_1722278908.png\" width=\"400\" height=\"225\" /> <br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation:</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">  1-&gt;2-&gt;3 represents 123 and when 1 is added it becomes 124. </span></span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &lt;= len(list) &lt;= 10<sup>5<br /></sup>0 &lt;= list[i] &lt;= 9<sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Start traversing the linked list from the leftmost node and add 1 with handling carry.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n\n  public:\n    Node* reverse(Node* head) {\n        Node* prev = NULL;\n        Node* current = head;\n        Node* next;\n\n        while (current != NULL) {\n            next = current->next; // storing next node\n            current->next = prev; // linking current node to previous\n            prev = current;       // updating prev\n            current = next;       // updating current\n        }\n\n        return prev;\n    }\n\n  public:\n    Node* addOne(Node* head) {\n        head = reverse(head); // reversing list to make addition easy\n\n        Node* current = head;\n        int carry = 1;\n\n        while (carry) {\n            current->data += 1; // adding one to current node\n\n            if (current->data < 10)\n                return reverse(head);\n            // if no carry we can reverse back list and return it\n            else\n                current->data = 0;\n            // else we continue with taking carry forward\n\n            if (current->next == NULL)\n                break;\n            // if, end of list, we break from loop\n            else\n                current = current->next;\n            // else we move to next node\n        }\n\n        current->next = new Node(1); // adding new node for the carried 1\n        return reverse(head);\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public Node reverse(Node head)\n    // this function reverses the linked list\n    {\n        Node prev = null;\n        Node current = head;\n        Node next;\n\n        while (current != null) {\n            next = current.next; // storing next node\n            current.next = prev; // linking current node to previous\n            prev = current;      // updating prev\n            current = next;      // updating current\n        }\n\n        return prev;\n    }\n\n    public Node addOne(Node head) {\n        head = reverse(head); // reversing list to make addition easy\n\n        Node current = head;\n        int carry = 1;\n\n        while (carry != 0) {\n            current.data += 1; // adding one to current node\n\n            if (current.data < 10) return reverse(head);\n            // if no carry we can reverse back list and return it\n            else\n                current.data = 0;\n            // else we continue with taking carry forward\n\n            if (current.next == null) break;\n            // if, end of list, we break from loop\n            else\n                current = current.next;\n            // else we move to next node\n        }\n\n        current.next = new Node(1); // adding new node for the carried 1\n        return reverse(head);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def reverse(self, head):\n        # this function reverses the linked list\n        prev = None\n        current = head\n        next = head.next\n\n        while current is not None:\n            next = current.next  # storing next node\n            current.next = prev  # linking current node to previous\n            prev = current  # updating prev\n            current = next  # updating current\n\n        return prev\n\n    def addOne(self, head):\n        head = self.reverse(head)  # reversing list to make addition easy\n\n        current = head\n        carry = 1\n\n        while (carry):\n            current.data += 1  # adding one to current node\n\n            if current.data < 10:\n                return self.reverse(head)\n                # if no carry we can reverse back list and return it\n            else:\n                current.data = 0\n                # else we continue with taking carry forward\n\n            if current.next is None:\n                break\n                # if end of list, we break from loop\n            else:\n                current = current.next\n                # else we move to next node\n\n        current.next = Node(1)  # adding new node for the carried 1\n        return self.reverse(head)\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {Node} node\n * @return {Node} node\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.next = null;\n    }\n}\n\nlet head;\nThis is method only submission.\nYou only need to complete the below method.\n*/\n\nclass Solution {\n    addOne(node) {\n        // reverse the linked list\n        let current = node;\n        let prev = null;\n        let next = null;\n\n        while (current != null) {\n            next = current.next;\n            current.next = prev;\n            prev = current;\n            current = next;\n        }\n\n        node = prev;\n\n        // add one to the linked list\n        let carry = 1;\n        current = node;\n\n        while (carry) {\n            current.data += 1;\n\n            if (current.data < 10) return this.reverse(node);\n\n            current.data = 0;\n\n            if (current.next == null) break;\n\n            current = current.next;\n        }\n\n        current.next = new Node(1);\n\n        return this.reverse(node);\n    }\n\n    reverse(node) {\n        let current = node;\n        let prev = null;\n        let next = null;\n\n        while (current != null) {\n            next = current.next;\n            current.next = prev;\n            prev = current;\n            current = next;\n        }\n\n        node = prev;\n\n        return node;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}