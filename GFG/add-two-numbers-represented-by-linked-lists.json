{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700043,
            "title": "Add Number Linked Lists",
            "titleSlug": "add-two-numbers-represented-by-linked-lists",
            "content": "<p><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\">Given the head of two singly linked lists&nbsp;<strong>num1</strong>&nbsp;and&nbsp;<strong>num2&nbsp;</strong>representing two non-negative integers. The task is to return the <strong>head</strong> of the linked list representing the sum of these two numbers.</span></p>\n<p><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\">For example, num1 represented by the linked list :&nbsp;<strong>1 -&gt; 9 -&gt; 0, </strong>similarly num2 represented by the linked list:&nbsp;<strong>2 -&gt; 5. </strong>Sum of these two numbers is represented by<strong> 2 -&gt; 1 -&gt; 5.</strong></span></p>\n<p><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Note:&nbsp;</strong>There can be leading zeros in the input lists, but there should not be any leading zeros in the output list.</span></p>\n<p><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Input: </strong>num1 = 4 - &gt; 5, num2 = 3 -&gt; 4 -&gt; 5<br /><strong>Output:  </strong>3 -&gt; 9 -&gt; 0<strong><br /></strong><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700043/Web/Other/blobid1_1721847725.png\" width=\"225\" height=\"169\" /> <strong>\nExplanation: </strong>Given numbers are 45 and 345. There sum is 390.<br /></span></pre>\n<pre><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Input: </strong>num1 = 0 -&gt; 0 -&gt; 6 -&gt; 3, num2 = 0 -&gt; 7 <br /><strong>Output: </strong>7 -&gt; 0 <br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700043/Web/Other/blobid2_1721847773.png\" width=\"224\" height=\"168\" /> \n<strong>Explanation: </strong>Given numbers are 63 and 7. There sum is 70.</span></pre>\n<p><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 14pt; font-family: arial, helvetica, sans-serif;\">1 &lt;= size of both linked lists &lt;= 10<sup>6</sup><sup><br /></sup>0 &lt;= elements of both linked lists &lt;= 9</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the heads of two singly linked lists `num1` and `num2`, representing two non-negative integers, return the head of the linked list representing the sum of these two numbers. Note that there can be leading zeros in the input lists, but there should not be any leading zeros in the output list.",
                "constraints": [
                    "1 <= size of both linked lists <= 10^6",
                    "0 <= elements of both linked lists <= 9"
                ],
                "testcases": [
                    {
                        "input": "num1 = 4 -> 5, num2 = 3 -> 4 -> 5",
                        "output": "3 -> 9 -> 0",
                        "explanation": "The linked lists represent the numbers 45 and 345. Their sum is 390, represented as the linked list 3 -> 9 -> 0."
                    },
                    {
                        "input": "num1 = 0 -> 0 -> 6 -> 3, num2 = 0 -> 7",
                        "output": "7 -> 0",
                        "explanation": "The linked lists represent the numbers 63 and 7. Their sum is 70, represented as the linked list 7 -> 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Reverse both the linked lists to align them for addition from the least significant digit. Then, traverse both lists, adding values with carry-over handling.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "morgan-stanley",
            "accolite",
            "amazon",
            "microsoft",
            "snapdeal",
            "makemytrip",
            "qualcomm"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    // Function to reverse the linked list\n    Node* reverse(Node* head) {\n        // Initialize the previous node as NULL\n        Node* prev = NULL;\n        // Start with the current node as the head\n        Node* current = head;\n        // Variable to store the next node temporarily\n        Node* next;\n\n        // Traverse the list until the current node becomes NULL\n        while (current != NULL) {\n            // Store the next node\n            next = current->next;\n            // Reverse the pointer of the current node\n            current->next = prev;\n            // Move the previous node to the current node\n            prev = current;\n            // Move to the next node in the list\n            current = next;\n        }\n\n        // Return the new head of the reversed list (the last non-NULL node)\n        return prev;\n    }\n\n    // Function to add two numbers represented as linked lists\n    Node* addTwoLists(Node* num1, Node* num2) {\n        // Reverse both linked lists to add the numbers from the least significant digit\n        num1 = reverse(num1);\n        num2 = reverse(num2);\n\n        // Initialize the resulting sum list as NULL\n        Node* sum = NULL;\n        // Variable to store the carry from the previous digit addition\n        int carry = 0;\n\n        // Loop until both lists are exhausted or there's a remaining carry\n        while (num1 != NULL || num2 != NULL || carry != 0) {\n            // Start with the carry value\n            int newVal = carry;\n\n            // Add the value of num1's current node, if it exists\n            if (num1) {\n                newVal += num1->data;\n                // Move to the next node in num1\n                num1 = num1->next;\n            }\n            // Add the value of num2's current node, if it exists\n            if (num2) {\n                newVal += num2->data;\n                // Move to the next node in num2\n                num2 = num2->next;\n            }\n\n            // Update the carry (the quotient of newVal divided by 10)\n            carry = newVal / 10;\n            // Get the current digit to be placed in the sum (the remainder of newVal\n            // divided by 10)\n            newVal = newVal % 10;\n\n            // Create a new node for the current digit and insert it at the beginning of\n            // the sum list\n            Node* newNode = new Node(newVal);\n            newNode->next = sum;\n            sum = newNode;\n        }\n\n        // Remove any leading zeros from the result (if applicable)\n        while (sum != NULL && sum->data == 0) {\n            // If the current node is 0, delete it and move to the next node\n            Node* temp = sum;\n            sum = sum->next;\n            delete temp;\n        }\n\n        // If the sum list is empty after removing leading zeros, return a node with\n        // value 0\n        if (sum == NULL) {\n            return new Node(0);\n        }\n        // Return the head of the sum list\n        return sum;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// solution\n\nclass Solution {\n    // Function to reverse the linked list.\n    static Node reverse(Node head) {\n        Node prev = null;\n        Node curr = head;\n        Node next = null;\n\n        while (curr != null) {\n            next = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = next;\n        }\n\n        return prev;\n    }\n\n    // Function to add two numbers represented by linked list.\n    static Node addTwoLists(Node num1, Node num2) {\n\n        // reversing both lists to simplify addition.\n        num1 = reverse(num1);\n        num2 = reverse(num2);\n\n        Node sum = null;\n        int carry = 0;\n\n        // using a loop till both lists and carry gets exhausted.\n        while (num1 != null || num2 != null || carry > 0) {\n            // using a variable to store sum of two digits along with carry.\n            int newVal = carry;\n\n            // if nodes are left in any list, we add their data in newVal.\n            if (num1 != null) newVal += num1.data;\n            if (num2 != null) newVal += num2.data;\n\n            // updating carry.\n            carry = newVal / 10;\n\n            // using modulus to store only a single digit at that place.\n            newVal = newVal % 10;\n\n            // creating new node which gets connected with other nodes that\n            // we get after calculating sum of respective digits.\n            Node newNode = new Node(newVal);\n\n            // storing the previously made nodes in the link part of new node.\n            newNode.next = sum;\n            // making the new node as the num1 node of all previously made node.\n            sum = newNode;\n\n            // moving ahead in both lists.\n            if (num1 != null) num1 = num1.next;\n            if (num2 != null) num2 = num2.next;\n        }\n        while (sum != null && sum.data == 0) {\n            Node temp = sum.next;\n            sum.next = null;\n            sum = temp;\n        }\n        if (sum == null) return new Node(0);\n        return sum;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n''' Node for linked list:\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n'''\n\n\nclass Solution:\n    #Function to reverse the linked list.\n    def reverse(self, head):\n        prev = None\n        current = head\n        next = None\n\n        while current is not None:\n            next = current.next\n            current.next = prev\n            prev = current\n            current = next\n\n        return prev\n\n    #Function to add two numbers represented by linked list.\n    def addTwoLists(self, num1, num2):\n\n        #reversing both lists to simplify addition.\n        num1 = self.reverse(num1)\n        num2 = self.reverse(num2)\n\n        sumList = None\n        carry = 0\n\n        #using a loop till both lists and carry gets exhausted.\n        while num1 is not None or num2 is not None or carry > 0:\n            #using a variable to store sum of two digits along with carry.\n            newVal = carry\n\n            #if nodes are left in any of the lists, we add their data in newVal.\n            if num1 is not None:\n                newVal += num1.data\n            if num2 is not None:\n                newVal += num2.data\n\n            #updating carry.\n            carry = newVal // 10\n            #using modulus to store only a single digit at that place.\n            newVal = newVal % 10\n\n            #creating new node which gets connected with other nodes that\n            #we get after calculating sum of respective digits\n            newNode = Node(newVal)\n            #storing the previously made nodes in the link part of new node.\n            newNode.next = sumList\n            #making the new node as the num1 node of all previously made node.\n            sumList = newNode\n\n            #moving ahead in both lists.\n            if num1:\n                num1 = num1.next\n            if num2:\n                num2 = num2.next\n\n        while sumList is not None and sumList.data == 0:\n\n            temp = sumList.next\n            sumList.next = None\n            sumList = temp\n\n        if sumList is None:\n            return Node(0)\n        return sumList\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Function to reverse the linked list\n    public Node Reverse(Node head) {\n        // Initialize the previous node as NULL\n        Node prev = null;\n        // Start with the current node as the head\n        Node current = head;\n        // Variable to store the next node temporarily\n        Node next;\n\n        // Traverse the list until the current node becomes NULL\n        while (current != null) {\n            // Store the next node\n            next = current.next;\n            // Reverse the pointer of the current node\n            current.next = prev;\n            // Move the previous node to the current node\n            prev = current;\n            // Move to the next node in the list\n            current = next;\n        }\n\n        // Return the new head of the reversed list (the last non-NULL node)\n        return prev;\n    }\n\n    // Function to add two numbers represented as linked lists\n    public Node AddTwoLists(Node num1, Node num2) {\n        // Reverse both linked lists to add the numbers from the least significant digit\n        num1 = Reverse(num1);\n        num2 = Reverse(num2);\n\n        // Initialize the resulting sum list as NULL\n        Node sum = null;\n        // Variable to store the carry from the previous digit addition\n        int carry = 0;\n\n        // Loop until both lists are exhausted or there's a remaining carry\n        while (num1 != null || num2 != null || carry != 0) {\n            // Start with the carry value\n            int newVal = carry;\n\n            // Add the value of num1's current node, if it exists\n            if (num1 != null) {\n                newVal += num1.data;\n                // Move to the next node in num1\n                num1 = num1.next;\n            }\n            // Add the value of num2's current node, if it exists\n            if (num2 != null) {\n                newVal += num2.data;\n                // Move to the next node in num2\n                num2 = num2.next;\n            }\n\n            // Update the carry (the quotient of newVal divided by 10)\n            carry = newVal / 10;\n            // Get the current digit to be placed in the sum (the remainder of newVal\n            // divided by 10)\n            newVal = newVal % 10;\n\n            // Create a new node for the current digit and insert it at the beginning of\n            // the sum list\n            Node newNode = new Node(newVal);\n            newNode.next = sum;\n            sum = newNode;\n        }\n\n        // Remove any leading zeros from the result (if applicable)\n        while (sum != null && sum.data == 0) {\n            // If the current node is 0, delete it and move to the next node\n            sum = sum.next;\n        }\n\n        // If the sum list is empty after removing leading zeros, return a node with\n        // value 0\n        return sum ?? new Node(0);\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {Node} num1\n * @param {Node} num2\n * @returns {Node}\n */\n\n/*\nclass Node{\n    constructor(data){\n        this.data = data;\n        this.next = null;\n    }\n}\n*/\n\nclass Solution {\n    // Function to reverse the linked list.\n    reverse(head) {\n        let prev = null;\n        let current = head;\n        let next;\n\n        while (current !== null) {\n            next = current.next;\n            current.next = prev;\n            prev = current;\n            current = next;\n        }\n\n        return prev;\n    }\n\n    // Function to add two numbers represented by linked list.\n    addTwoLists(num1, num2) {\n        // reversing both lists to simplify addition.\n        num1 = this.reverse(num1);\n        num2 = this.reverse(num2);\n\n        let sum = null;\n        let carry = 0;\n\n        // using a loop till both lists and carry gets exhausted.\n        while (num1 !== null || num2 !== null || carry !== 0) {\n            // using a variable to store sum of two digits along with carry.\n            let newVal = carry;\n\n            // if nodes are left in any list, we add their data in newVal.\n            if (num1) newVal += num1.data;\n            if (num2) newVal += num2.data;\n\n            // updating carry.\n            carry = Math.floor(newVal / 10);\n            // using modulus to store only a single digit at that place.\n            newVal = newVal % 10;\n\n            // creating new node which gets connected with other nodes that\n            // we get after calculating sum of respective digits.\n            let newNode = new Node(newVal);\n            // storing the previously made nodes in the link part of new node.\n            newNode.next = sum;\n            // making the new node as the num1 node of all previously made node.\n            sum = newNode;\n\n            // moving ahead in both lists.\n            if (num1) num1 = num1.next;\n            if (num2) num2 = num2.next;\n        }\n        while (sum !== null && sum.data === 0) {\n            let temp = sum.next;\n            sum.next = null;\n            sum = temp;\n        }\n        if (sum === null) return new Node(0);\n        return sum;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}