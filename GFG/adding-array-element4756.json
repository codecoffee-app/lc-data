{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703743,
            "title": "Adding Array Elements",
            "titleSlug": "adding-array-element4756",
            "content": "<p><span style=\"font-size:18px\">Given an array&nbsp;<strong>Arr[]</strong>&nbsp;of size <strong>N&nbsp;</strong>and an integer&nbsp;<strong>K</strong>, you have to choose the first two minimum elements of the array and erase them, then insert the sum of these two elements in the array&nbsp;until all the elements are greater than or equal to <strong>K</strong> and find the number of such&nbsp;operations&nbsp;required.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 6, K = 6 \r\nArr[] = {1, 10, 12, 9, 2, 3}\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> First we add <strong>(1 + 2)</strong>, now the\r\nnew list becomes <strong>3 10 12 9 3</strong>, then we add\r\n<strong>(3 + 3), </strong>now the new list becomes <strong>6 10 12 9</strong>,\r\nNow all the elements in the list are greater\r\nthan <strong>6</strong>. Hence the output is <strong>2</strong> i:e <strong>2</strong> operations\r\nare required to do this. \r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 4, K = 4\r\nArr[] = {5, 4, 6, 4}\r\n<strong>Output:</strong> 0\r\n<strong>Explanation:</strong>&nbsp;Every element in the given array \r\nis greater than or equal to <strong>K</strong>.\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>minOperations()</strong>&nbsp;which takes array of&nbsp;integers <strong>arr, n</strong>&nbsp;and&nbsp;<strong>k&nbsp;</strong>as parameters and returns an integer&nbsp;denoting the answer.&nbsp;If it is not possible to make elements greater than or equal to<strong> K</strong>, return&nbsp;<strong>-1</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N*logN)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints :</strong><br />\r\n1 &le; N, K &le; 10<sup>5</sup><br />\r\n1 &le; Arr[i] &le; 10<sup>6</sup></span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `Arr[]` of size `N` and an integer `K`, you need to perform operations until all elements in the array are greater than or equal to `K`. In each operation, select the two smallest elements from the array, remove them, and insert their sum back into the array. Determine the minimum number of operations required to achieve this. If it's impossible to make all elements greater than or equal to `K`, return -1.",
                "constraints": [
                    "1 <= N, K <= 10^5",
                    "1 <= Arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 6, K = 6\nArr[] = {1, 10, 12, 9, 2, 3}",
                        "output": "2",
                        "explanation": "Initially, the array is {1, 10, 12, 9, 2, 3}. In the first operation, we select 1 and 2, sum them (1+2=3), and insert 3 back. The array becomes {3, 10, 12, 9, 3}. In the second operation, we select 3 and 3, sum them (3+3=6), and insert 6 back. The array becomes {6, 10, 12, 9}. Now, all elements are greater than or equal to 6. Thus, 2 operations are required."
                    },
                    {
                        "input": "N = 4, K = 4\nArr[] = {5, 4, 6, 4}",
                        "output": "0",
                        "explanation": "All elements in the array {5, 4, 6, 4} are already greater than or equal to 4. Therefore, no operations are needed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>We can create a simple array the sort it and then add two minimum elements and keep on storing them back in the array until all the elements become greater than&nbsp;<strong>K</strong>.</p>",
            "<p>If we take a closer look, we can notice that this problem is similar to&nbsp;<a href=\"https://www.geeksforgeeks.org/huffman-decoding/\">Huffman coding</a>. We use&nbsp;<a href=\"https://www.geeksforgeeks.org/binary-heap/\"><strong>Min Heap</strong></a>&nbsp;as the main operations here are extract min and insert. Both of these operations can be done in O(Log n) time.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution{\n  public:\n    //Function to find the minimum number of operations.\n    int minOperations(int arr[], int n, int k) {\n        int countOperations = 0;\n        //creating a priority queue to store the elements in ascending order.\n        priority_queue<int, vector<int>, greater<int>> pq;\n\n        //pushing all the elements of the array into the priority queue.\n        for (int i = 0; i < n; i++)\n            pq.push(arr[i]);\n\n        //running a loop until the priority queue is empty.\n        while (!pq.empty()) {\n            //checking if the minimum element in the priority queue is greater than or equal to k, \n            //then returning the countOperations.\n            if (pq.top() >= k)\n                return countOperations;\n\n            //declaring two variables to store the first and second minimum elements in the priority queue.\n            int firstMin = 0, secondMin = 0;\n            \n            //if there is only one element in the priority queue,\n            //checking whether it is less than k or not and returning -1 or countOperations accordingly.\n            if (pq.size() == 1) {\n                if (pq.top() < k)\n                    return -1;\n                else\n                    return countOperations;\n            }\n\n            //storing the first minimum element from the priority queue and removing it.\n            firstMin = pq.top();\n            pq.pop();\n            \n            //storing the second minimum element from the priority queue and removing it.\n            secondMin = pq.top();\n            pq.pop();\n            \n            //pushing the sum of firstMin and secondMin back into the priority queue.\n            pq.push(firstMin + secondMin);\n            \n            //incrementing the countOperations by 1.\n            countOperations++;\n        }\n        //returning the countOperations.\n        return countOperations;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    // Function to calculate the minimum operations required\n    // to make all elements of array greater than or equal to k\n    int minOperations(int[] arr, int n, int k) {\n        // Variable to keep track of the number of operations performed\n        int countOperations = 0;\n        // Priority queue to store the elements of the array\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n    \n        // Adding all the elements of the array to the priority queue\n        for (int i = 0; i < n; i++)\n            pq.add(arr[i]);\n    \n        // Performing operations until the priority queue is not empty\n        while (!pq.isEmpty()) {\n            // Checking if the smallest element in the priority queue is greater than or equal to k\n            if (pq.peek() >= k)\n                return countOperations;\n    \n            // Variables to store the first and second minimum elements\n            int firstMin = 0, secondMin = 0;\n    \n            // Checking if there is only one element in the priority queue\n            if (pq.size() == 1) {\n                // Checking if the only element is less than k, then it is not possible to make all elements greater than or equal to k\n                if (pq.peek() < k)\n                    return -1;\n                else\n                    return countOperations;\n            }\n    \n            // Getting the first minimum element, removing it from the priority queue and getting the second minimum element\n            firstMin = pq.peek();\n            pq.poll();\n            secondMin = pq.peek();\n            pq.poll();\n    \n            // Adding the sum of first and second minimum elements to the priority queue\n            pq.add(firstMin + secondMin);\n    \n            // Incrementing the count of operations performed\n            countOperations++;\n        }\n        // Returning the total number of operations performed\n        return countOperations;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\r\n\r\nimport heapq\r\nclass Solution:\r\n    def minOperations(self, arr, n, k):\r\n        # convert the given array into a min-heap\r\n        heapq.heapify(arr)\r\n        \r\n        code = True\r\n        count = 0\r\n        # continue the loop until there is only one element left in the array\r\n        while code and len(arr) > 1:\r\n            # pop the two smallest elements from the heap\r\n            fst = heapq.heappop(arr)\r\n            snd = heapq.heappop(arr)\r\n            \r\n            # if the first element is already greater than or equal to k, return the count\r\n            if fst >= k:\r\n                return count \r\n                code = False\r\n                \r\n            else:\r\n                # push the sum of the popped elements back into the heap\r\n                heapq.heappush(arr, fst+snd)\r\n                count += 1\r\n        # check if the minimum element in the array is greater than or equal to k\r\n        if min(arr) >= k: \r\n            return count\r\n        return -1",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}