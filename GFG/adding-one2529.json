{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702664,
            "title": "Adding One",
            "titleSlug": "adding-one2529",
            "content": "<p><span style=\"font-size: 18px;\">Given a non-negative integer(without leading zeroes) represented as an array <strong>arr</strong>. Your task is to add <strong>1</strong> to the number (increment the number by 1). The digits are stored such that the most significant digit is at the starting index of the array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [5, 6, 7, 8]\n<strong>Output:</strong> [5, 6, 7, 9]\n<strong>Explanation:</strong> 5678 + 1 = 5679</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [9, 9, 9]\n<strong>Output:</strong> [1, 0, 0, 0]\n<strong>Explanation:</strong>&nbsp;999 + 1 = 1000\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />0 &le; arr[i] &le; 9<br />There are no leading zeros in the input number.&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative integer represented as an array `arr`, where the most significant digit is at the beginning of the array, increment the number represented by the array by 1.  Return the resulting array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "0 <= arr[i] <= 9",
                    "The input number has no leading zeros."
                ],
                "testcases": [
                    {
                        "input": "[5, 6, 7, 8]",
                        "output": "[5, 6, 7, 9]",
                        "explanation": "The input array represents the number 5678. Adding 1 results in 5679, which is represented by the array [5, 6, 7, 9]."
                    },
                    {
                        "input": "[9, 9, 9]",
                        "output": "[1, 0, 0, 0]",
                        "explanation": "The input array represents the number 999. Adding 1 results in 1000, which is represented by the array [1, 0, 0, 0]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >To solve this, traverse the array from right to left, handle carry, and adjust digits.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    vector<int> addOne(vector<int>& arr) {\n        int n = arr.size();\n        int carry = 1;\n\n        // Iterate backwards through the vector\n        for (int i = n - 1; i >= 0; i--) {\n            carry += arr[i];\n            arr[i] = carry % 10;\n            carry = carry / 10;\n        }\n\n        vector<int> ans;\n\n        // If there is any remaining carry, add it to the result vector\n        if (carry > 0) {\n            ans.push_back(carry);\n        }\n\n        // Add all the updated digits to the result vector\n        for (int i = 0; i < n; i++) {\n            ans.push_back(arr[i]);\n        }\n\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function for adding one to the number represented by the array\n    Vector<Integer> addOne(int[] arr) {\n        int n = arr.length; // Get the size of the array\n        int carry = 1;      // Initialize carry to 1\n\n        // Iterate backwards through the array\n        for (int i = n - 1; i >= 0; i--) {\n            carry += arr[i];     // Add the current element of the array to carry\n            arr[i] = carry % 10; // Store the remainder in the array element\n            carry = carry / 10;  // Update carry by dividing it by 10\n        }\n\n        Vector<Integer> ans = new Vector<>(); // Create a vector to store the result\n        if (carry > 0) {\n            ans.add(carry); // If carry is still greater than 0, add it to the vector\n        }\n        for (int i = 0; i < n; i++) {\n            ans.add(arr[i]); // Add each element of the array to the vector\n        }\n        return ans; // Return the result vector\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# Function for adding one to a number\nclass Solution:\n    # Function to add one to a number represented as an array\n    def addOne(self, arr):\n        n = len(arr)\n        carry = 1\n\n        # Traverse the array from right to left\n        for i in range(n - 1, -1, -1):\n\n            # Add carry to the current digit and update carry\n            arr[i] += carry\n            carry = arr[i] // 10\n            arr[i] = arr[i] % 10\n\n        ans = []\n\n        # If carry is 1 after the loop, append it to the answer array\n        if carry == 1:\n            ans.append(carry)\n\n        # Append the modified digits from the array to the answer array\n        ans.extend(arr)\n\n        # Return the answer array\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for JavaScript\n\n/**\n * @param {number[]} arr\n * @returns {number[]}\n */\n\nclass Solution {\n    addOne(arr) {\n        let carry = 1;      // Initialize carry with 1\n        let n = arr.length; // Get the length of the array\n\n        // Traverse the array from right to left\n        for (let i = n - 1; i >= 0; i--) {\n            carry += arr[i];     // Add carry to the current element\n            arr[i] = carry % 10; // Update the current element with the remainder\n            carry = Math.floor(carry / 10); // Update carry by taking the quotient\n        }\n\n        let ans = []; // Initialize the result array\n\n        // If carry is still greater than 0 after processing all digits, add it to the\n        // result\n        if (carry > 0) {\n            ans.push(carry);\n        }\n\n        // Add all the updated digits from the original array to the result array\n        for (let i = 0; i < n; i++) {\n            ans.push(arr[i]);\n        }\n\n        return ans; // Return the result array\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}