{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700344,
            "title": "Additive sequence",
            "titleSlug": "additive-sequence",
            "content": "<p><span style=\"font-size: 20px;\">Given a string <strong>n</strong>, your task is to find whether it contains an <strong>additive sequence or not</strong>. A string <strong>n </strong>contains an additive sequence if its digits can make a <strong>sequence of numbers</strong> in which every number is <strong>addition of previous two numbers (within the range of signed integers)</strong>. You are required to complete the function which returns <strong>true</strong> if the string is a valid sequence else returns <strong>false</strong>. For better understanding check the examples.</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Note:&nbsp;</strong><span style=\"font-size: 20px;\">A valid string should contain at <strong>least three</strong> digit to make one additive sequence.&nbsp;</span></span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>  <br />n = \"1235813\"</span><span style=\"font-size: 18px;\">\n<strong>Output:</strong> <br />1\n<strong>Explanation:</strong> <br />The given string can be splited into a series of numbers  <br />where each number is the sum of the previous two numbers: <br />1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8, and 5 + 8 = 13. Hence, the output would be 1 (true).<br /></span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>  <br />n = \"11235815\"</span><span style=\"font-size: 18px;\">\n<strong style=\"font-size: 18px;\">Output:</strong><span style=\"font-size: 18px;\"> <br />0\n</span><strong style=\"font-size: 18px;\">Explanation:</strong><span style=\"font-size: 18px;\"> <br /></span></span><span style=\"font-size: 18px;\">We can start with the first two digits: \"11\".\nFirst number: 1, Second number: 1, Sum: 1 + 1 = 2\nNow, we have \"2\" as the next number.\nFirst number: 1, Second number: 2, Sum: 1 + 2 = 3\nNow, we have \"3\" as the next number.\nFirst number: 2, Second number: 3, Sum: 2 + 3 = 5\nNow, we have \"5\" as the next number.\nFirst number: 3, Second number: 5, Sum: 3 + 5 = 8\nNow, we have \"8\" as the next number.\nFirst number: 5, Second number: 8, Sum: 5 + 8 = 13\nAt this point, there is no \"13\" present in the remaining digits \"815\". Hence, the output would be 0 (or false).<br /></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>User Task:&nbsp;</strong><br /></span><span style=\"font-size: 18px;\">Your task is to complete the function <strong>isAdditiveSequence()</strong> which takes a single string as input <strong>n</strong> and returns a <strong>boolean value</strong> indicating whether the given string contains an <strong>additive sequence or not</strong>. You need not take any input or print anything.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n<sup>3</sup>).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(n).</span></p>\n<p><span style=\"font-size: 16px;\"><strong style=\"font-size: 20px;\">Constraints:</strong><br style=\"font-size: 20px;\" /><span style=\"font-size: 20px;\">3 &lt;= length( n ) &lt;= 200<br />1 &lt;= digits of string &lt;= 9</span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `n` consisting of digits, determine if it contains an additive sequence. An additive sequence is a sequence of numbers formed by splitting the digits of `n` such that each number is the sum of the previous two numbers in the sequence (within the range of signed integers). The sequence must contain at least three numbers.",
                "constraints": [
                    "3 <= length(n) <= 200",
                    "1 <= each digit of string n <= 9"
                ],
                "testcases": [
                    {
                        "input": "1235813",
                        "output": "true",
                        "explanation": "The string can be split into the sequence 1, 2, 3, 5, 8, 13, where each number is the sum of the previous two: 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8, 5 + 8 = 13."
                    },
                    {
                        "input": "11235815",
                        "output": "false",
                        "explanation": "While initial segments form an additive sequence (1, 1, 2, 3, 5, 8), the next number should be 13, but the remaining digits are '815', so the sequence cannot continue."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<ul style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgb(59 130 246 / 0.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shadow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; list-style-position: initial; list-style-image: initial; margin: 0px 0px 0px 1rem; padding: 0px; display: flex; flex-direction: column; color: #0d0d0d; font-family: S&ouml;hne, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; font-size: 16px; white-space-collapse: preserve; background-color: #ffffff;\">\n<li style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgb(59 130 246 / 0.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shadow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; margin: 0px; padding-left: 0.375em; display: block; min-height: 28px;\">1 Try all possible combinations of dividing the sequence into three parts.</li>\n<li style=\"border: 0px solid #e3e3e3; box-sizing: border-box; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgb(59 130 246 / 0.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shadow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; margin: 0px; padding-left: 0.375em; display: block; min-height: 28px;\">2 Use backtracking to check if each combination forms an additive sequence.</li>\n</ul>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Recursion",
                "slug": "recursion"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution {\n  public:\n    bool isValid(string num) {\n        // check if the number is valid, i.e., not starting with 0 if it has more than 1\n        // digit\n        if (num.size() > 1 && num[0] == '0')\n            return false;\n        return true;\n    }\n\n    int val(string a, int pos) {\n        // get the integer representation of the character at a specific position in a\n        // string\n        if (pos >= a.length())\n            return 0;\n        return (a[pos] - '0');\n    }\n\n    string addString(string a, string b) {\n        // function to add two strings representing numbers\n        string sum = \"\";\n        int i = a.length() - 1;\n        int j = b.length() - 1;\n        int carry = 0;\n\n        while (i >= 0 || j >= 0) {\n            // calculate the sum of two digits and the carry\n            int t = val(a, i) + val(b, j) + carry;\n\n            // append the digit to the sum string\n            sum += (t % 10 + '0');\n\n            // update the carry for the next iteration\n            carry = t / 10;\n            i--;\n            j--;\n        }\n\n        // if there is still a carry left, append it to the sum string\n        if (carry)\n            sum += (carry + '0');\n\n        // reverse the sum string and return it\n        reverse(sum.begin(), sum.end());\n        return sum;\n    }\n\n    bool checkAddition(list<string>& res, string a, string b, string c) {\n        // check if the addition of two strings is valid\n        if (!isValid(a) || !isValid(b))\n            return false;\n        string sum = addString(a, b);\n\n        // check if the sum is equal to the target string\n        if (sum == c) {\n            res.push_back(sum);\n            return true;\n        }\n\n        // check if the target string starts with the sum string\n        if (c.size() <= sum.size() || sum != c.substr(0, sum.size()))\n            return false;\n        else {\n            res.push_back(sum);\n\n            // recursively check the addition of the previous sum and the next string in\n            // the sequence\n            return checkAddition(res, b, sum, c.substr(sum.size()));\n        }\n    }\n\n    list<string> additiveSequence(string num) {\n        // find the additive sequence for a given number\n        list<string> res;\n        int l = num.length();\n\n        for (int i = 1; i <= l / 2; i++) {\n            for (int j = 1; j <= (l - i) / 2; j++) {\n                // check if the addition of the first two substrings leads to the target\n                // string\n                if (checkAddition(res, num.substr(0, i), num.substr(i, j),\n                                  num.substr(i + j))) {\n                    // add the substrings to the result list and return it\n                    res.push_front(num.substr(i, j));\n                    res.push_front(num.substr(0, i));\n                    return res;\n                }\n            }\n        }\n\n        // if no additive sequence is found, clear the result list and return it\n        res.clear();\n        return res;\n    }\n\n    bool isAdditiveSequence(string n) {\n        // check if a number has an additive sequence\n        list<string> res = additiveSequence(n);\n        if (res.size() == 0)\n            return 0;\n        else\n            return 1;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public boolean isAdditiveSequence(String s) {\n        List<String> res = new ArrayList<>();\n        int l = s.length();\n\n        for (int i = 1; i <= l / 2; i++) {\n            for (int j = 1; j <= (l - i) / 2; j++) {\n                if (checkAddition(res, s.substring(0, i), s.substring(i, i + j),\n                                  s.substring(i + j))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    boolean checkAddition(List<String> res, String a, String b, String c) {\n        if (!isValid(a) || !isValid(b)) return false;\n        String sum = addString(a, b);\n\n        if (sum.equals(c)) {\n            res.add(sum);\n            return true;\n        }\n\n        if (c.length() <= sum.length() || !sum.equals(c.substring(0, sum.length())))\n            return false;\n        else {\n            res.add(sum);\n            return checkAddition(res, b, sum, c.substring(sum.length()));\n        }\n    }\n\n    boolean isValid(String num) {\n        if (num.length() > 1 && num.charAt(0) == '0') return false;\n        return true;\n    }\n\n    int val(String a, int pos) {\n        if (pos >= a.length() || pos < 0) return 0;\n        return (a.charAt(pos) - '0');\n    }\n\n    String addString(String a, String b) {\n        StringBuilder sum = new StringBuilder();\n        int i = a.length() - 1;\n        int j = b.length() - 1;\n        int carry = 0;\n\n        while (i >= 0 || j >= 0) {\n            int t = val(a, i) + val(b, j) + carry;\n            sum.append(t % 10);\n            carry = t / 10;\n            i--;\n            j--;\n        }\n        if (carry > 0) sum.append(carry);\n        return sum.reverse().toString();\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nimport itertools\r\nclass Solution:\r\n    def isAdditiveSequence(self, n):\r\n        l = len(n)\r\n        \r\n        # Loop through all possible combinations of dividing the sequence\r\n        for i, j in itertools.combinations(range(1, l), 2):\r\n            \r\n            # Divide the sequence into three parts\r\n            a, b = n[:i], n[i:j]\r\n            \r\n            # Check if the second part is a valid number (no leading zeros)\r\n            if b != str(int(b)):\r\n                continue\r\n            \r\n            # Continue checking if the sequence is additive\r\n            while j < l:\r\n                \r\n                # Calculate the sum of previous two numbers in the sequence\r\n                c = str(int(a) + int(b))\r\n                \r\n                # Check if the sum matches the next part of the sequence\r\n                if not n.startswith(c, j):\r\n                    break\r\n                \r\n                # Update the pointers and continue checking\r\n                j += len(c)\r\n                a, b = b, c\r\n            \r\n            # If the entire sequence is matched, return 1 (True)\r\n            if j == l:\r\n                return 1\r\n        \r\n        # If no additive sequence is found, return 0 (False)\r\n        return 0",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    isAdditiveSequence(n) {\n        function isValid(num) {\n            if (num.length > 1 && num[0] === '0') return false;\n            return true;\n        }\n\n        function addString(a, b) {\n            let sum = '';\n            let carry = 0;\n            let al = a.length, bl = b.length;\n            let i = al - 1, j = bl - 1;\n            while(i >= 0 || j >= 0 || carry > 0) {\n                let total = (i >= 0 ? parseInt(a[i--]) : 0) + (j >= 0 ? parseInt(b[j--]) : 0) + carry;\n                sum = (total % 10) + sum;\n                carry = total < 10 ? 0 : 1;\n            }\n            return sum;\n        }\n\n        function checkAddition(a, b, num) {\n            if (!isValid(a) || !isValid(b)) return false;\n            let sum = addString(a, b);\n\n            if (sum === num) return [sum];\n            if (num.length < sum.length || sum !== num.substring(0, sum.length)) return false;\n\n            let next = checkAddition(b, sum, num.substring(sum.length));\n            if (next) return [sum].concat(next);\n            return false;\n        }\n\n        for(let endOfFirstNum = 1; endOfFirstNum < n.length; ++endOfFirstNum) {\n            for(let endOfSecondNum = endOfFirstNum + 1; endOfSecondNum < n.length; ++endOfSecondNum) {\n                let firstNum = n.substring(0, endOfFirstNum);\n                let secondNum = n.substring(endOfFirstNum, endOfSecondNum);\n                let remainNum = n.substring(endOfSecondNum);\n                if (checkAddition(firstNum, secondNum, remainNum)) return true;\n            }\n        }\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}