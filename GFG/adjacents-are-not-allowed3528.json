{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704663,
            "title": "Adjacents are not allowed",
            "titleSlug": "adjacents-are-not-allowed3528",
            "content": "<p><span style=\"font-size:18px\">You have a rectangular grid <strong>mat</strong> of dimension 2 x <strong>N</strong>. You need to find out the maximum sum such that no two chosen numbers are adjacent, vertically, diagonally or horizontally.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 3\nmat = {{1, 4, 5}, \n&nbsp;\\t{2, 0, 0}}\n<strong>Output:</strong> 7\n<strong>Explaination:</strong> Optimal choice is (2, 5).</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 2\nmat = {{1, 2}, \n&nbsp;\\t{3, 4}}\n<strong>Output:</strong> 4\n<strong>Explaination:</strong> Optimal choice is (4).</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou do not need to read input or print anything. Your task is to complete the function <strong>maxSum()</strong> which takes the value N and grid mat as input parameters and returns the maximum sum.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 10000<br />\n1 &le; mat[i][j] &le; 70</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a rectangular grid `mat` of dimension 2 x N, find the maximum sum of elements such that no two chosen numbers are adjacent (vertically, diagonally, or horizontally).",
                "constraints": [
                    "1 <= N <= 10000",
                    "1 <= mat[i][j] <= 70"
                ],
                "testcases": [
                    {
                        "input": "N = 3\nmat = {{1, 4, 5}, {2, 0, 0}}",
                        "output": "7",
                        "explanation": "The optimal choice is to select 2 and 5, giving a total sum of 7.  No other selection of non-adjacent elements yields a larger sum."
                    },
                    {
                        "input": "N = 2\nmat = {{1, 2}, {3, 4}}",
                        "output": "4",
                        "explanation": "The optimal choice is to select 4. Selecting any other single element results in a lower sum.  It's not possible to select two elements without them being adjacent."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try out all possible combinations and find the best one. Use memoization for time optimization.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "epic-systems"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Recursive function to calculate the maximum sum\n    int cal(int node, int n, int b[], vector<int> &dp)\n    {\n        // base case: if node index is greater than or equal to n, return 0\n        if(node >= n)\n            return 0;\n        // if the value is already calculated, return the stored value\n        if(dp[node] != -1)\n            return dp[node];\n        // Calculate the maximum sum by choosing current node or not choosing current node\n        return dp[node] = max( cal(node+1, n, b, dp),\n                               b[node] + cal(node+2, n, b, dp));\n    }\n    \n    // Function to calculate the maximum sum possible\n    int maxSum(int N, vector<vector<int>> mat)\n    {\n        // If N is 0, return 0\n        if(N == 0)\n            return 0;\n        int ans = 0;\n        int b[N];\n        \n        // Store the maximum of each column in the array b\n        for(int i = 0;i < N;i++)\n            b[i] = max(mat[0][i], mat[1][i]);\n        \n        vector<int> dp(N, -1);\n        // Calculate maximum sum by starting from top row and bottom row and taking the maximum of both\n        ans = max( cal(0, N, b, dp) , cal(1, N, b, dp));\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import sys\nsys.setrecursionlimit(10**6)\nclass Solution:\n    #Function to calculate the maximum sum.\n    def cal(self,node,n,b,dp):\n    \n        #Base case: if node >= n, return 0.\n        if(node >= n):\n            return 0;\n        \n        #If result for current node is already calculated, return it.\n        if(dp[node] != -1):\n            return dp[node];\n        \n        #Calculating the maximum sum by either skipping the current node or\n        #including the current node and moving to the next available nodes.\n        dp[node] = max( self.cal(node+1, n, b, dp),b[node] + self.cal(node+2, n, b, dp));\n        \n        return dp[node]\n    \n    #Function to find the maximum sum.\n    def maxSum(self,N,mat):\n    \n        #Base case: if N == 0, return 0.\n        if(N == 0):\n            return 0;\n        \n        ans = 0;\n        b=[0]*N\n        \n        #Finding the maximum value from each column and storing it in array b.\n        for i in range(N):\n            b[i] = max(mat[0][i], mat[1][i]);\n        \n        dp=[-1]*N\n        \n        #Calculating the maximum sum by considering the values in mat and array b.\n        ans = max(self.cal(0, N, b, dp) ,self.cal(1, N, b, dp));\n        \n        return ans;",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}