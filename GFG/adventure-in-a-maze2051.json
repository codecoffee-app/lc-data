{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705636,
            "title": "Adventure in a Maze",
            "titleSlug": "adventure-in-a-maze2051",
            "content": "<p><span style=\"font-size: 18px;\">You have got&nbsp;a maze, which is a n*n&nbsp;Grid. Every cell of the maze contains these numbers 1, 2 or 3.&nbsp;<br />If it contains&nbsp;</span><span style=\"font-size: 18px;\">1 :</span><span style=\"font-size: 18px;\"> means we can go Right from that cell only.<br />If it contains&nbsp;</span><span style=\"font-size: 18px;\">2 :</span><span style=\"font-size: 18px;\"> means we can go Down from that cell only.<br />If it contains&nbsp;</span><span style=\"font-size: 18px;\">3 :</span><span style=\"font-size: 18px;\"> means we can go Right and Down to both paths from that cell.</span><br /><span style=\"font-size: 18px;\">We cant go out of the maze at any time.<br />Initially, You are on the Top Left Corner of The maze(Entry). And, You need to go to the Bottom Right Corner of the Maze(Exit).<br />You need to find the total number of paths from Entry to Exit Point.<br />There may be many paths but you need to select that path which contains the maximum number of Adventure.<br />The Adventure on a path is calculated by taking the sum of all the cell values thatlies</span><span style=\"font-size: 18px;\"> in the path.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>matrix = {{1,1,3,2,1},{3,2,2,1,2},\n{1,3,3,1,3},{1,2,3,1,2},{1,1,1,3,1}}\n<strong>Output: </strong>{4,18}\n<strong>Explanation: </strong>There are total 4 Paths Available \nout of which The Max Adventure is 18. Total \npossible Adventures are 18,17,17,16. Of these \n18 is the maximum.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>FindWays()&nbsp;</strong>which takes matrix as input parameter and returns a list containg total number of ways to reach at (n, n) modulo 10<sup>9</sup>&nbsp;+ 7 and maximum number of Adventure.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n<sup>2</sup>)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(n<sup>2</sup>)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 100&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a maze represented as an n*n grid. Each cell in the maze contains a number 1, 2, or 3.  \n\n*   1: You can only move Right from that cell.\n*   2: You can only move Down from that cell.\n*   3: You can move Right and Down from that cell.\n\nYou start at the top-left corner (0, 0) and need to reach the bottom-right corner (n-1, n-1). You cannot move outside the maze.\n\nThe goal is to find the total number of distinct paths from the start to the end, and among all possible paths, determine the maximum adventure value.\n\nThe adventure value of a path is the sum of the values of all cells visited in that path.",
                "constraints": [
                    "1 <= n <= 100"
                ],
                "testcases": [
                    {
                        "input": "matrix = {{1,1,3,2,1},{3,2,2,1,2},{1,3,3,1,3},{1,2,3,1,2},{1,1,1,3,1}}",
                        "output": "{4,18}",
                        "explanation": "There are 4 possible paths from the top-left to the bottom-right corner. The maximum possible adventure value among these paths is 18. The adventure values for all possible paths are 18, 17, 17, and 16."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use dynamic programming.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function template in C++\n\nclass Solution {\npublic:\n    // Function to find the number of ways and maximum advancement\n    vector<int> FindWays(vector<vector<int>>&matrix){\n        // Defining constants and variables\n        using ll = long long int;\n        ll MOD = 1e9 + 7;\n        int n = matrix.size();\n        vector<vector<int>> paths(n + 5, vector<int>(n + 5, 0));\n        vector<vector<int>> adv(n + 5, vector<int>(n + 5, 0));\n        paths[n - 1][n - 1] = 0;\n        adv[n - 1][n - 1] = matrix[n - 1][n - 1];\n        int i, j;\n        \n        // Iterating over the matrix from the bottom right to the top left\n        for (i = n - 1; i >= 0; i--)\n        {\n            for (j = n - 1; j >= 0; j--)\n            {\n                // If it is the bottom right element, set number of ways to 1\n                if (i == n - 1 && j == i)\n                {\n                    paths[i][j] = 1;\n                    continue;\n                }\n                \n                // If the current element is 1\n                if (matrix[i][j] == 1)\n                {\n                    // Number of ways is the same as the next element in the same row\n                    paths[i][j] = paths[i][j + 1];\n                    \n                    // If there are ways to reach this element\n                    // Update the maximum advancement\n                    if (paths[i][j])\n                    {\n                        adv[i][j] = matrix[i][j] + adv[i][1 + j];\n                    }\n                }\n                \n                // If the current element is 3\n                else if (matrix[i][j] == 3)\n                {\n                    // Number of ways is the sum of the number of ways from the element below and the next element in the same row\n                    paths[i][j] = (paths[i + 1][j] + paths[i][j + 1]) % MOD;\n                    \n                    // If there are ways to reach this element\n                    // Update the maximum advancement with the maximum of the element below and the next element in the same row\n                    if (paths[i][j] != 0)\n                    {\n                        adv[i][j] = matrix[i][j] + max(adv[i + 1][j], adv[i][j + 1]);\n                    }\n                }\n                \n                // If the current element is 2\n                else if (matrix[i][j] == 2)\n                {\n                    // Number of ways is the same as the element below\n                    paths[i][j] = paths[i + 1][j];\n                    \n                    // If there are ways to reach this element\n                    // Update the maximum advancement\n                    if (paths[i][j])\n                    {\n                        adv[i][j] = matrix[i][j] + adv[i + 1][j];\n                    }\n                }\n            }\n        }\n        \n        // Return the number of ways and maximum advancement as a vector\n        return {(int)paths[0][0], adv[0][0]};\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "def modulo(p):\n    return (p % 1000000007)\n\n\n#Initialize right and down variables\nright, down = 1, 2\n\n\nclass Solution:\n    #Function to find the number of ways and maximum advantage.\n    def FindWays(self, maze):\n        n = len(maze)\n\n        #Initialize advantage matrix and path count matrix.\n        adv = [[0] * n for _ in range(n)]\n        adv[0][0] = maze[0][0]\n\n        pts = [[0] * n for _ in range(n)]\n        pts[0][0] = 1\n\n        #Loop to compute advantage and path count for the first row.\n        for j in range(1, n):\n            if maze[0][j - 1] == down:\n                break\n            adv[0][j] = adv[0][j - 1] + maze[0][j]\n            pts[0][j] = 1\n\n        #Loop to compute advantage and path count for the first column.\n        for i in range(1, n):\n            if maze[i - 1][0] == right:\n                break\n            adv[i][0] = adv[i - 1][0] + maze[i][0]\n            pts[i][0] = 1\n\n        #Loop to compute advantage and path count for the remaining cells.\n        for i in range(1, n):\n            for j in range(1, n):\n                if maze[i - 1][j] != right and pts[i - 1][j]:\n                    adv[i][j] = adv[i - 1][j] + maze[i][j]\n                    pts[i][j] = pts[i - 1][j]\n                if maze[i][j - 1] != down and pts[i][j - 1]:\n                    adv[i][j] = max(adv[i][j], adv[i][j - 1] + maze[i][j])\n                    pts[i][j] += pts[i][j - 1]\n\n        #If there is no path to reach the destination, return (0,0).\n        if not pts[-1][-1]:\n            return (0, 0)\n\n        #Return the number of ways and maximum advantage modulo 10^9+7.\n        return (modulo(pts[-1][-1]), adv[-1][-1])\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}