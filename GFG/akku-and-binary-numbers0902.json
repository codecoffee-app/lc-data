{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704785,
            "title": "Akku and Binary Numbers",
            "titleSlug": "akku-and-binary-numbers0902",
            "content": "<p>Akku likes binary numbers and she likes playing with these numbers. Her teacher once gave her a question.For given value of&nbsp; L and&nbsp;R, Akku have to find the count of number X, which have only three-set bits in it&#39;s binary representation such that &quot;L &le; X &le; R&quot;.Akku is genius, she solved the problem easily. Can you do it ??</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input</strong>:\r\nL = 11 and R = 19 \r\n<strong>Output:</strong>&nbsp;4\r\n<strong>Explanation</strong>:\r\nThere are 4 such numbers with 3 set bits in \r\nrange 11 to 19.\r\n11 -&gt; 1011\r\n13 -&gt; 1101\r\n14 -&gt; 1110\r\n19 -&gt; 10011</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nL = 25 and R = 29\r\n<strong>Output: 3\r\n</strong><strong>Explanation</strong>:\r\nThere are 3 such numbers with 3 set bits in\r\nrange 25 to 29. \r\n25 -&gt; 11001 \r\n26 -&gt; 11010 \r\n28 -&gt; 11100\r\n</pre>\r\n\r\n<p><br />\r\n<strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>solve()</strong>&nbsp;which takes the integer <strong>L</strong> and <strong>R</strong> as input parameters and returns&nbsp;the count of number X, which have only three-set bits in its binary representation such that &quot;L &le; X &le; R&quot;.<br />\r\n<br />\r\n<strong>Expected Time Complexity:</strong> O(63<sup>3</sup>) + O(log(R-L))<br />\r\n<strong>Expected Auxiliary Space:</strong> O(63<sup>3</sup>)</p>\r\n\r\n<p><br />\r\n<strong>Constraints:</strong><br />\r\n1 &le; L &le; R &le; 10<sup>18</sup></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers L and R, determine the count of integers X within the inclusive range [L, R] that have exactly three set bits (bits equal to 1) in their binary representation.",
                "constraints": [
                    "1 <= L <= R <= 10^18"
                ],
                "testcases": [
                    {
                        "input": "L = 11, R = 19",
                        "output": "4",
                        "explanation": "The numbers between 11 and 19 with exactly three set bits are 11 (1011), 13 (1101), 14 (1110), and 19 (10011). Note that 19 is not correct, it has four set bits, it should be removed from the explanation"
                    },
                    {
                        "input": "L = 25, R = 29",
                        "output": "3",
                        "explanation": "The numbers between 25 and 29 with exactly three set bits are 25 (11001), 26 (11010), and 28 (11100). Note that 25 has three set bits instead of four, it is an error in the test case."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We can precompute all the numbers having 3 bits set in range of 1 to 10^18 and store them.<br />\nFor this we will apply three nested for loops on the bits that can be at max 63 bits as 2^63 &gt;10^18.<br />\nNow, for each query we can use binary search to find the corresponding L and R and thus we have the<br />\nrequired count.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Define a vector to store the calculated values\nstd::vector<long long> v;\n\nclass Solution{\npublic:\n    // Function to precompute the values\n    void precompute()\n    {\n        // Loop to calculate the values\n        for (int i = 0; i < 63; ++i)\n            for (int j = i+1; j < 63; ++j)\n                for (int k = j+1; k < 63; ++k)\n                     {\n                        // Add the calculated value to the vector\n                        v.push_back((1LL<<i)+(1LL<<j)+(1LL<<k));\n                     }\n        // Sort the vector in ascending order\n        sort(v.begin(), v.end());\n    }\n    \n    // Function to solve the problem\n    long long solve(long long l, long long r){\n        // Find the lower and upper bounds in the vector\n        auto low=lower_bound(v.begin(), v.end(),l);\n        auto high=upper_bound(v.begin(), v.end(),r);\n        // Return the difference between the upper and lower bounds\n        return(long long)(high-low);\n    }\n    \n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    ArrayList<Long> arr=new ArrayList<>(); // create an ArrayList to store the numbers\n    \n    void precompute(){\n        // precompute the numbers by generating combinations of powers of 2\n        for(int i=0;i<63;i++){\n            for(int j=i+1;j<63;j++){\n                for(int k=j+1;k<63;k++){\n                    // add the sum of powers of 2 to the ArrayList\n                    arr.add((long)Math.pow(2,i)+(long)Math.pow(2,j)+(long)Math.pow(2,k));\n                }\n            }\n        }\n        Collections.sort(arr); // sort the ArrayList in ascending order\n    }\n    \n    long solve(long L, long R){\n        // find the count of numbers in the ArrayList within the range (L, R]\n        int l=0,r=arr.size()-1;\n        while(l<r)\n        {\n            int mid=(l+r+1)/2;\n            // adjust the range for binary search based on comparison with R\n            if(arr.get(mid)>R){\n                r=mid-1;\n            }else{\n                l=mid;\n            }\n        }\n        \n        // find the count of numbers in the ArrayList within the range [L-1, R]\n        int l1=0,r1=arr.size()-1;\n        while(l1<r1){\n            int mid=(l1+r1+1)/2;\n            // adjust the range for binary search based on comparison with L-1\n            if(arr.get(mid)>L-1){\n                r1=mid-1;\n            }else{\n                l1=mid;\n            }\n        }\n        \n        // adjust the count based on the starting number L\n        if(arr.get(l1)>=L){\n            l1--;\n        }\n        \n        // return the count of numbers within the range (L, R]\n        return l-l1;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from bisect import bisect_left, bisect_right\n\nclass Solution:\n    def __init__(self):\n        self.p = self.precompute()\n\n    #Function to find the number of integers in the range [L, R] that can be expressed as the sum of three distinct powers of 2.\n    def solve(self, L, R):\n        p = self.p\n        #Finding the index of the leftmost occurrence of L in p.\n        low = bisect_left(p, L)\n        #Finding the index of the rightmost occurrence of R in p.\n        high = bisect_right(p, R)\n        #Returning the difference between the indices to get the count.\n        return high - low\n\n    #Function to compute the list of numbers that can be expressed as the sum of three distinct powers of 2.\n    def precompute(self):\n        v = []\n        #Loop for the first power of 2.\n        for i in range(63):\n            #Loop for the second power of 2.\n            for j in range(i + 1, 63):\n                #Loop for the third power of 2.\n                for k in range(j + 1, 63):\n                    #Calculating the sum of the three powers of 2 and adding it to the list.\n                    v.append((1 << i) + (1 << j) + (1 << k))\n        #Sorting the list in ascending order.\n        v.sort()\n        #Returning the precomputed list.\n        return v",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution\n{\n    List<long> v; // Define the list outside of any function\n\n    public Solution()\n    {\n        precompute(); // Precompute the list upon class instantiation\n    }\n\n    // Function to precompute the values\n    public void precompute()\n    {\n        v = new List<long>(); // Initialize the list\n\n        // Loop to calculate the values\n        for (int i = 0; i < 63; ++i)\n        {\n            for (int j = i + 1; j < 63; ++j)\n            {\n                for (int k = j + 1; k < 63; ++k)\n                {\n                    // Add the calculated value to the list\n                    v.Add((1L << i) + (1L << j) + (1L << k));\n                }\n            }\n        }\n\n        // Sort the list in ascending order\n        v.Sort();\n    }\n\n    // Function to solve the problem\n    public long solve(long l, long r)\n    {\n        // Find the lower and upper bounds in the list\n        int low = LowerBound(v, l);\n        int high = UpperBound(v, r);\n        // Return the count of numbers in the range [l, r]\n        return high - low;\n    }\n\n    // Function to find the lower bound in a list\n    private int LowerBound(List<long> list, long value)\n    {\n        int lo = 0, hi = list.Count;\n        while (lo < hi)\n        {\n            int mid = lo + (hi - lo) / 2;\n            if (list[mid] < value)\n                lo = mid + 1;\n            else\n                hi = mid;\n        }\n        return lo;\n    }\n\n    // Function to find the upper bound in a list\n    private int UpperBound(List<long> list, long value)\n    {\n        int lo = 0, hi = list.Count;\n        while (lo < hi)\n        {\n            int mid = lo + (hi - lo) / 2;\n            if (list[mid] <= value)\n                lo = mid + 1;\n            else\n                hi = mid;\n        }\n        return lo;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}