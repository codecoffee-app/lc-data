{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 711152,
            "title": "Alex Travelling",
            "titleSlug": "alex-travelling",
            "content": "<p><span style=\"font-size: 18px;\">Alex is very fond of traveling. There are&nbsp;<strong>n </strong>cities, labeled from<strong> 1</strong> to<strong> n</strong>.&nbsp;&nbsp;You are also given flights, a list of travel flights as <strong>directed weighted</strong> edges<strong> flights[i] = (u<sub>i</sub>,v<sub>i</sub>,w<sub>i</sub>)</strong>&nbsp;where<strong> u<sub>i&nbsp;</sub></strong>is the source node,<strong> v<sub>i</sub>&nbsp;</strong>is the target node, and <strong>w<sub>i</sub></strong>&nbsp;is the price it takes for a person to travel from source to target.<br />Currently, Alex is in <strong>k</strong>'th city and wants to visit one city of his choice. Return&nbsp;the<strong>&nbsp;minimum&nbsp;</strong>money&nbsp;Alex should have so&nbsp;that he can visit any city of his choice from <strong>k</strong>'th&nbsp;city. If there is a city that has no path from&nbsp;<strong>k</strong>'th city, which means Alex can't visit that city,&nbsp;return <strong>-1</strong>.&nbsp;<br />Alex always takes the optimal path. He can any city via another city by taking multiple flights.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn: 4\nk: 2\nflights size: 3\nflights: [[2,1,1],[2,3,1],[3,4,1]]\n<strong>Output:</strong>\n2\n<strong>Explanation:</strong>\nto visit 1 from 2 takes cost 1\nto visit 2 from 2 takes cost 0\nto visit 3 from 2 takes cost 1\nto visit 4 from 2 takes cost 2,\n2-&gt;3-&gt;4\nSo if Alex wants to visit city 4\nfrom 2, he needs 2 units of money\n</span><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/711152/Web/Other/3d37201b-eda2-4fbf-97d7-cde7afa25d3c_1685087900.png\" />\n\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn: 4 \nk: 3 \nflights size: 3 \nflights: [[2,1,1],[2,3,1],[3,4,1]] \n<strong>Output:</strong> -1\n<strong>Explanation:</strong>\nThere is no direct or indirect path \nto visit city 2 and 1 from city 3\n</span><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/711152/Web/Other/81ceaa5b-7e97-4937-9431-ff299dacb76e_1685087901.png\" />\n\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong></span></p>\n<p><span style=\"font-size: 18px;\">You don't need to print or input anything. Complete the function <strong>minimumCost()&nbsp;</strong>which takes a&nbsp; flights array, an integer n and an integer k<strong>&nbsp;</strong>as the input parameters and returns an integer, denoting&nbsp;the<strong> minimum&nbsp;</strong>money Alex should have so&nbsp;that he can visit any city of his choice from k'th city.<br /><br /><strong>Expected Time Complexity:</strong> O((V+E) log V), here V is number of cities and E is number of flights.&nbsp;<br /><strong>Expected Auxiliary Space</strong>: O(V+E), here V is number of cities and E is number of flights.&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">2 &lt;= n &lt;= 500</span></li>\n<li><span style=\"font-size: 18px;\">1 &lt;= flights.length&nbsp;&lt;= 100000</span></li>\n<li><span style=\"font-size: 18px;\">flights[i].length == 3</span></li>\n<li><span style=\"font-size: 18px;\">1 &lt;= u<sub>i</sub>, v<sub>i</sub>, k&lt;= n</span></li>\n<li><span style=\"font-size: 18px;\">u<sub>i</sub>&nbsp;!= v<sub>i</sub></span></li>\n<li><span style=\"font-size: 18px;\">1 &lt;= w<sub>i</sub>&nbsp;&lt;= 100</span></li>\n<li><span style=\"font-size: 18px;\">All the pairs&nbsp;(u<sub>i</sub>, v<sub>i</sub>)&nbsp;are&nbsp;<strong>unique</strong>. (i.e., no multiple edges)</span></li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Alex enjoys traveling and wants to visit any city from his current location. Given 'n' cities labeled from 1 to 'n', and a list of directed weighted flights where flights[i] = (u_i, v_i, w_i) represents a flight from city u_i to city v_i with cost w_i.  Alex starts at city 'k'. Determine the minimum amount of money Alex needs to have to be able to visit any city of his choice from city 'k' using optimal paths. If a city is unreachable from city 'k', it should be considered as not visitable. Return -1 if any city from 1 to n is unreachable from city k.",
                "constraints": [
                    "2 <= n <= 500",
                    "1 <= flights.length <= 100000",
                    "flights[i].length == 3",
                    "1 <= u_i, v_i, k <= n",
                    "u_i != v_i",
                    "1 <= w_i <= 100",
                    "All the pairs (u_i, v_i) are unique (no multiple edges)."
                ],
                "testcases": [
                    {
                        "input": "n: 4\nk: 2\nflights size: 3\nflights: [[2,1,1],[2,3,1],[3,4,1]]",
                        "output": "2",
                        "explanation": "The costs to reach each city from city 2 are:\n- City 1: 1\n- City 2: 0\n- City 3: 1\n- City 4: 2 (2 -> 3 -> 4)\nThe maximum cost is 2, so Alex needs 2 units of money to reach any city."
                    },
                    {
                        "input": "n: 4\nk: 3\nflights size: 3\nflights: [[2,1,1],[2,3,1],[3,4,1]]",
                        "output": "-1",
                        "explanation": "Cities 1 and 2 are not reachable from city 3. Thus it's not possible to reach any city from 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find the shortest path from given node to all other nodes.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\nclass Solution {\r\n  public:\r\n    vector<pair<int, int>> adj[501];\r\n\r\n    void dijkstra(vector<int>& costToReach, int source, int n) {\r\n        priority_queue<pair<int, int>, vector<pair<int, int>>,\r\n                       greater<pair<int, int>>> pq;\r\n        pq.push({0, source});\r\n\r\n        // Time for starting node is 0\r\n        costToReach[source] = 0;\r\n\r\n        while (!pq.empty()) {\r\n            int currNodeCost = pq.top().first;\r\n            int currNode = pq.top().second;\r\n            pq.pop();\r\n\r\n            if (currNodeCost > costToReach[currNode]) {\r\n                continue;\r\n            }\r\n\r\n            // Broadcast the signal to adjacent nodes\r\n            for (pair<int, int> edge : adj[currNode]) {\r\n                int cost = edge.first;\r\n                int neighborNode = edge.second;\r\n\r\n                // Fastest signal cost for neighborNode so far\r\n                // costToReach[currNode] + cost :\r\n                // cost when signal reaches neighborNode\r\n                if (costToReach[neighborNode] > currNodeCost + cost) {\r\n                    costToReach[neighborNode] = currNodeCost + cost;\r\n                    pq.push({costToReach[neighborNode], neighborNode});\r\n                }\r\n            }\r\n        }\r\n    }\r\n    int minimumCost(vector<vector<int>>& flights, int n, int k) {\r\n        for (vector<int> f : flights) {\r\n            int source = f[0];\r\n            int dest = f[1];\r\n            int travelCost = f[2];\r\n\r\n            adj[source].push_back({travelCost, dest});\r\n        }\r\n\r\n        vector<int> costToReach(n + 1, INT_MAX);\r\n        dijkstra(costToReach, k, n);\r\n\r\n        int answer = INT_MIN;\r\n        for (int i = 1; i <= n; i++) {\r\n            answer = max(answer, costToReach[i]);\r\n        }\r\n\r\n        // INT_MAX signifies atleat one node is unreachable\r\n        return answer == INT_MAX ? -1 : answer;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n\r\n    int[] dist; // stores the minimum distance from the starting node to all other nodes\r\n\r\n    class Node {\r\n\r\n        int v; // destination node\r\n        int w; // weight/cost of the edge to reach the destination node\r\n\r\n        Node(int v, int w) {\r\n            this.v = v;\r\n            this.w = w;\r\n        }\r\n    }\r\n\r\n    // function to calculate the minimum cost to reach all nodes in the given graph\r\n    int minimumCost(int[][] flights, int n, int k) {\r\n        List<List<Node>> adj = new ArrayList<>(); // adjacency list representation of the graph\r\n\r\n        for (int i = 0; i <= n; i++) {\r\n            adj.add(new ArrayList<>());\r\n        }\r\n\r\n        // constructing the adjacency list from the given flights array\r\n        for (int[] i : flights) {\r\n            adj.get(i[0]).add(new Node(i[1], i[2]));\r\n        }\r\n\r\n        dist = new int[n + 1]; // array to store the minimum distances\r\n        Arrays.fill(dist, 100000); // initially set all distances to a large value\r\n\r\n        dijkistra(adj, k); // find the minimum distances using Dijkstra's algorithm\r\n\r\n        int max = 0; // variable to store the maximum distance\r\n\r\n        // iterate through all nodes and find the maximum distance\r\n        for (int i = 1; i <= n; i++) {\r\n            max = Math.max(max, dist[i]);\r\n        }\r\n\r\n        return max == 100000 ? -1 : max; // if max is still the initial large value, return -1, else return max\r\n    }\r\n\r\n    // Dijkstra's algorithm to find the minimum distance to all nodes from the given starting node\r\n    public void dijkistra(List<List<Node>> adj, int start) {\r\n\r\n        PriorityQueue<Node> pq =\r\n            new PriorityQueue<>((x, y)->{ return x.w - y.w; }); // priority queue to process nodes in order of their weight\r\n\r\n        dist[start] = 0; // set the starting node's distance to 0\r\n\r\n        pq.add(new Node(start, 0)); // add the starting node to the priority queue\r\n\r\n        while (!pq.isEmpty()) {\r\n            Node vet = pq.poll(); // get the node with the minimum weight from the priority queue\r\n\r\n            for (Node child : adj.get(vet.v)) {\r\n                // if the distance from the starting node to the child node through the current node is smaller than the\r\n                // previously calculated distance, update the distance and add the child node to the priority queue\r\n                if (dist[vet.v] + child.w < dist[child.v]) {\r\n                    dist[child.v] = dist[vet.v] + child.w;\r\n                    pq.add(new Node(child.v, dist[child.v]));\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nfrom heapq import *\r\nfrom typing import List\r\nclass Solution:\r\n    def minimumCost(self, flights: List[List[int]], n : int, k : int) -> int:\r\n        # initialize graph as adjacency list\r\n        graph = {i: [] for i in range(1, n + 1)}\r\n        \r\n        for flight in flights:\r\n            source, target, time = flight\r\n            graph[source].append((time, target))\r\n        # our result variable\r\n        res = 0\r\n        \r\n        # initialize min heap with time 0, k node to start\r\n        min_heap = [(0, k)]\r\n        # must keep track of visited\r\n        visited = set()\r\n        \r\n        while min_heap:\r\n            min_time, node = heappop(min_heap)\r\n            if node in visited:\r\n                continue\r\n            visited.add(node)\r\n          \r\n            res = min_time\r\n            \r\n            # go through neighbors and add to heap if not already visited\r\n            neighbors = graph[node]\r\n            for neighbor in neighbors:\r\n                n_time, n_node = neighbor\r\n                if n_node not in visited:\r\n                    heappush(min_heap, (n_time + min_time, n_node))\r\n        \r\n        # at this point, if we did not visit every node it is impossible to send signal, cycle\r\n        return res if len(visited) == n else -1\r\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}