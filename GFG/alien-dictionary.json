{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700494,
            "title": "Alien Dictionary",
            "titleSlug": "alien-dictionary",
            "content": "<p>A new alien language uses the English alphabet, but the order of letters is unknown. You are given a list of <strong>words[] </strong>from the alien language&rsquo;s dictionary, where the words are claimed to be <strong>sorted lexicographically</strong> according to the language&rsquo;s rules.</p>\n<p>Your task is to <strong>determine the correct order of letters</strong> in this alien language based on the given words. If the order is valid, return a string containing the unique letters in lexicographically increasing order as per the new language's rules. If there are multiple valid orders, return any one of them.</p>\n<p>However, if the given arrangement of words is inconsistent with any possible letter ordering, return an <strong>empty string (\"\")</strong>.</p>\n<blockquote>\n<p>A string <strong>a</strong> is lexicographically smaller than a string <strong>b</strong> if, at the first position where they differ, the character in <strong>a</strong> appears earlier in the alien language than the corresponding character in <strong>b</strong>. If all characters in the shorter word match the beginning of the longer word, the shorter word is considered smaller.</p>\n</blockquote>\n<p>Your implementation will be tested using a driver code. It will print <strong>true </strong>if your returned order correctly follows the alien language&rsquo;s lexicographic rules; otherwise, it will print <strong>false</strong>.</p>\n<p><strong>Examples:</strong></p>\n<pre><strong>Input:</strong> words[] = [\"cb\", \"cba\", \"a\", \"bc\"]<br /><strong>Output:</strong> true<br /><strong>Explanation: </strong>You need to return \"cab\" as the correct order of letters in the alien dictionary.</pre>\n<pre><strong>Input: </strong>words[] = [\"ab\", \"aa\", \"a\"]<br /><strong>Output:</strong> \"\"<br /><strong>Explanation:</strong> You need to return \"\" because \"aa\" is lexicographically larger than \"a\", making the order invalid.</pre>\n<pre><strong>Input:</strong> words[] = [\"ab\", \"cd\", \"ef\", \"ad\"]<br /><strong>Output:</strong> \"\"<br /><strong>Explanation:</strong> You need to return \"\" because \"a\" appears before \"e\", but then \"e\" appears before \"a\", which contradicts the ordering rules.</pre>\n<p><strong>Constraints:</strong></p>\n<ul>\n<li>1 &lt;= words.length &lt;= 500</li>\n<li>1 &lt;= words[i].length &lt;= 100</li>\n<li>words[i] consists only of lowercase English letters.</li>\n</ul>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a list of `words[]` from an alien language's dictionary. These words are claimed to be sorted lexicographically according to the unknown language's rules, which uses the English alphabet but in a different order. Determine the correct order of letters in this alien language. Return a string containing the unique letters in lexicographically increasing order based on the new language's rules. If multiple valid orders exist, return any one of them. If the given arrangement of words is inconsistent with any possible letter ordering, return an empty string (`\"\"`).",
                "constraints": [
                    "1 <= words.length <= 500",
                    "1 <= words[i].length <= 100",
                    "words[i] consists only of lowercase English letters."
                ],
                "testcases": [
                    {
                        "input": "words[] = [\"cb\", \"cba\", \"a\", \"bc\"]",
                        "output": "true",
                        "explanation": "The correct order of letters in the alien dictionary is \"cab\"."
                    },
                    {
                        "input": "words[] = [\"ab\", \"aa\", \"a\"]",
                        "output": "\"\"",
                        "explanation": "The order is invalid because \"aa\" is lexicographically larger than \"a\"."
                    },
                    {
                        "input": "words[] = [\"ab\", \"cd\", \"ef\", \"ad\"]",
                        "output": "\"\"",
                        "explanation": "The order is invalid because \"a\" appears before \"e\", but then \"e\" appears before \"a\", which contradicts the ordering rules."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Create graph of characters and then find the order.</p>",
            "<p>The idea is to create a graph of characters and then find&nbsp;<a href=\"https://www.geeksforgeeks.org/topological-sorting/\" target=\"_blank\">topological sorting</a>&nbsp;of the created graph. Following are the detailed steps.<br />\n&nbsp;</p>\n\n<p>1) Create a graph&nbsp;<em>g</em>&nbsp;with number of vertices equal to the size of alphabet in the given alien language. For example, if the alphabet size is 5, then there can be 5 characters in words. Initially there are no edges in graph.</p>\n\n<p>2) Do following for every pair of adjacent words in given sorted array.<br />\n&hellip;..a) Let the current pair of words be&nbsp;<em>word1&nbsp;</em>and&nbsp;<em>word2</em>. One by one compare characters of both words and find the first mismatching characters.<br />\n&hellip;..b) Create an edge in&nbsp;<em>g</em>&nbsp;from mismatching character of&nbsp;<em>word1&nbsp;</em>to that of&nbsp;<em>word2</em>.</p>\n\n<p>3) Print&nbsp;<a href=\"https://www.geeksforgeeks.org/topological-sorting/\" target=\"_blank\">topological sorting</a>&nbsp;of the above created graph.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "walmart",
            "google"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    bool cycleExist = false;     // Flag to track if there's a cycle in the graph.\n    string ans;                  // Stores the final order of characters.\n    vector<int> exist, vis, rec; // Vectors to track existing characters, visited nodes,\n                                 // and recursion stack.\n    vector<vector<int>> graph;   // Adjacency matrix to represent character precedence.\n\n    // Depth-first search (DFS) to detect cycles and build the topological order.\n    void dfs(int u) {\n        vis[u] = rec[u] =\n            true; // Mark the node as visited and part of the recursion stack.\n        for (int v = 0; v < 26; v++) {\n            if (graph[u][v] and\n                !vis[v]) { // If there's an edge and 'v' is unvisited, recurse.\n                dfs(v);\n            } else if (graph[u][v] and rec[v]) { // Cycle detected.\n                cycleExist = true;\n            }\n        }\n        ans.push_back(char(\n            'a' + u));  // Append character to result after visiting all dependencies.\n        rec[u] = false; // Remove from recursion stack.\n    }\n\n    string findOrder(vector<string> &words) {\n        graph.assign(26, vector<int>(26)); // Initialize adjacency matrix.\n        exist.resize(26);\n        vis.resize(26);\n        rec.resize(26);\n\n        // Mark characters that exist in the dictionary.\n        for (string word : words) {\n            for (char ch : word) {\n                exist[ch - 'a'] = true;\n            }\n        }\n\n        // Build the precedence graph from adjacent words.\n        for (int i = 0; i + 1 < words.size(); i++) {\n            const string &a = words[i], &b = words[i + 1];\n            int n = a.size(), m = b.size(), ind = 0;\n            while (ind < n and ind < m and a[ind] == b[ind])\n                ind++;\n            if (ind != n and ind == m) // Invalid case: prefix case like \"abc\" vs \"ab\".\n                return \"\";\n            if (ind < n and\n                ind < m) // Establish precedence: a[ind] comes before b[ind].\n                graph[a[ind] - 'a'][b[ind] - 'a'] = 1;\n        }\n\n        // Perform DFS for topological sorting.\n        for (int i = 0; i < 26; i++)\n            if (exist[i] and !vis[i])\n                dfs(i);\n\n        if (cycleExist) // If a cycle exists, return an empty string.\n            return \"\";\n\n        reverse(ans.begin(), ans.end()); // Reverse to get correct topological order.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    private boolean cycleExist = false; // Flag to track if there's a cycle in the graph\n    private StringBuilder ans =\n        new StringBuilder(); // Stores the final order of characters\n    private int[] exist = new int[26], vis = new int[26], rec = new int[26]; // Trackers\n    private int[][] graph =\n        new int[26][26]; // Adjacency matrix to represent character precedence\n\n    // Depth-first search (DFS) to detect cycles and build the topological order.\n    private void dfs(int u) {\n        vis[u] = 1;\n        rec[u] = 1; // Mark node as visited and in recursion stack\n\n        for (int v = 0; v < 26; v++) {\n            if (graph[u][v] == 1 &&\n                vis[v] == 0) { // If there's an edge and 'v' is unvisited, recurse\n                dfs(v);\n            } else if (graph[u][v] == 1 && rec[v] == 1) { // Cycle detected\n                cycleExist = true;\n            }\n        }\n\n        ans.append((char)('a' + u)); // Append character after visiting all dependencies\n        rec[u] = 0;                  // Remove from recursion stack\n    }\n\n    public String findOrder(String[] words) {\n        cycleExist = false; // Reset for every test case\n        ans.setLength(0);   // Clear previous results\n        Arrays.fill(exist, 0);\n        Arrays.fill(vis, 0);\n        Arrays.fill(rec, 0);\n        graph = new int[26][26]; // Reset graph\n\n        // Mark characters that exist in the dictionary\n        for (String word : words) {\n            for (char ch : word.toCharArray()) {\n                exist[ch - 'a'] = 1;\n            }\n        }\n\n        // Build precedence graph from adjacent words\n        for (int i = 0; i + 1 < words.length; i++) {\n            String a = words[i], b = words[i + 1];\n            int n = a.length(), m = b.length(), ind = 0;\n\n            while (ind < n && ind < m && a.charAt(ind) == b.charAt(ind)) {\n                ind++;\n            }\n\n            if (ind != n && ind == m) { // Invalid case: \"abc\" vs \"ab\"\n                return \"\";\n            }\n\n            if (ind < n && ind < m) { // Establish precedence: a[ind] before b[ind]\n                graph[a.charAt(ind) - 'a'][b.charAt(ind) - 'a'] = 1;\n            }\n        }\n\n        // Perform DFS for topological sorting\n        for (int i = 0; i < 26; i++) {\n            if (exist[i] == 1 && vis[i] == 0) {\n                dfs(i);\n            }\n        }\n\n        if (cycleExist) { // If cycle exists, return empty string\n            return \"\";\n        }\n\n        return ans.reverse().toString(); // Reverse to get correct order\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    @staticmethod\n    def findOrder(words):\n        cycle_exist = False  # Flag to detect cycles in the graph\n        ans = []  # Stores the final order of characters\n        exist = [False] * 26  # Tracks existing characters\n        vis = [False] * 26  # Tracks visited nodes\n        rec = [False] * 26  # Tracks recursion stack\n        graph = [[0] * 26 for _ in range(26)]  # Adjacency matrix\n\n        # Depth-First Search (DFS) to detect cycles and perform topological sorting\n        def dfs(u):\n            nonlocal cycle_exist\n            vis[u] = rec[\n                u] = True  # Mark node as visited and in recursion stack\n            for v in range(26):\n                if graph[u][v] and not vis[\n                        v]:  # If there's an edge and 'v' is unvisited, recurse\n                    dfs(v)\n                elif graph[u][v] and rec[v]:  # Cycle detected\n                    cycle_exist = True\n            ans.append(chr(ord('a') + u))  # Append character to result\n            rec[u] = False  # Remove from recursion stack\n\n        # Mark characters that exist in the dictionary\n        for word in words:\n            for ch in word:\n                exist[ord(ch) - ord('a')] = True\n\n        # Build precedence graph from adjacent words\n        for i in range(len(words) - 1):\n            a, b = words[i], words[i + 1]\n            n, m, ind = len(a), len(b), 0\n            while ind < n and ind < m and a[ind] == b[ind]:\n                ind += 1\n            if ind != n and ind == m:  # Invalid case: prefix issue\n                return \"\"\n            if ind < n and ind < m:  # Establish precedence: a[ind] comes before b[ind]\n                graph[ord(a[ind]) - ord('a')][ord(b[ind]) - ord('a')] = 1\n\n        # Perform DFS for topological sorting\n        for i in range(26):\n            if exist[i] and not vis[i]:\n                dfs(i)\n\n        if cycle_exist:  # If cycle exists, return an empty string\n            return \"\"\n\n        return \"\".join(\n            reversed(ans))  # Reverse to get correct topological order\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    cycleExist = false; // Flag to track if there's a cycle in the graph.\n    ans = \"\";           // Stores the final order of characters.\n    exist = new Array(26).fill(0);\n    vis = new Array(26).fill(0);\n    rec = new Array(26).fill(0);\n    graph = Array.from({length : 26}, () => new Array(26).fill(0)); // Adjacency matrix\n\n    // Depth-first search (DFS) to detect cycles and build the topological order.\n    dfs(u) {\n        this.vis[u] = this.rec[u] =\n            1; // Mark the node as visited and part of recursion stack.\n\n        for (let v = 0; v < 26; v++) {\n            if (this.graph[u][v] && !this.vis[v]) {\n                this.dfs(v);\n            } else if (this.graph[u][v] && this.rec[v]) {\n                this.cycleExist = true;\n            }\n        }\n\n        this.ans +=\n            String.fromCharCode('a'.charCodeAt(0) + u); // Append character to result.\n        this.rec[u] = 0;                                // Remove from recursion stack.\n    }\n\n    findOrder(words) {\n        // Reset all variables for a new test case\n        this.cycleExist = false;\n        this.ans = \"\";\n        this.exist.fill(0);\n        this.vis.fill(0);\n        this.rec.fill(0);\n        this.graph = Array.from({length : 26}, () => new Array(26).fill(0));\n\n        // Mark characters that exist in the dictionary.\n        for (const word of words) {\n            for (const ch of word) {\n                this.exist[ch.charCodeAt(0) - 'a'.charCodeAt(0)] = 1;\n            }\n        }\n\n        // Build the precedence graph from adjacent words.\n        for (let i = 0; i + 1 < words.length; i++) {\n            const a = words[i], b = words[i + 1];\n            let n = a.length, m = b.length, ind = 0;\n\n            while (ind < n && ind < m && a[ind] === b[ind]) ind++;\n\n            if (ind !== n && ind === m) // Invalid case: prefix case like \"abc\" vs \"ab\".\n                return \"\";\n\n            if (ind < n && ind < m) // Establish precedence: a[ind] comes before b[ind].\n                this.graph[a[ind].charCodeAt(0) -\n                           'a'.charCodeAt(0)][b[ind].charCodeAt(0) -\n                                              'a'.charCodeAt(0)] = 1;\n        }\n\n        // Perform DFS for topological sorting.\n        for (let i = 0; i < 26; i++) {\n            if (this.exist[i] && !this.vis[i]) {\n                this.dfs(i);\n            }\n        }\n\n        if (this.cycleExist) // If a cycle exists, return an empty string.\n            return \"\";\n\n        return this.ans.split(\"\").reverse().join(\n            \"\"); // Reverse to get correct topological order.\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}