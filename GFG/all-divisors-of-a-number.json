{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712172,
            "title": "All divisors of a Number",
            "titleSlug": "all-divisors-of-a-number",
            "content": "<p><span style=\"font-size: 18px;\">Given&nbsp;an integer <strong>N,</strong>&nbsp;print all the divisors of N in the&nbsp;<strong>ascending </strong>order.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input : </strong>20\n<strong>Output: </strong>1 2 4 5 10 20\n<strong>Explanation: </strong>20 is completely \ndivisible by 1, 2, 4, 5, 10 and 20.\n\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>21191</span><span style=\"font-size: 18px;\">\n<strong>Output: </strong>1 21191\n<strong>Explanation</strong>: As 21191 is a prime number,\nit has only 2 factors(1 and the number itself).\n\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong></span></p>\n<p><span style=\"font-size: 18px;\">Your task is to complete the function <strong>print_divisors()</strong>&nbsp;which takes N as input parameter and prints all the factors of N as space seperated integers in sorted order.&nbsp;You don't have to print any new line after printing the desired output. It will be handled in driver code.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(sqrt(N))<br /><strong>Expected Space Complexity:&nbsp;</strong>O(sqrt(N))</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, find all the divisors of N in ascending order.",
                "constraints": [
                    "1 <= N <= 100000"
                ],
                "testcases": [
                    {
                        "input": "20",
                        "output": "1 2 4 5 10 20",
                        "explanation": "The divisors of 20 are 1, 2, 4, 5, 10, and 20."
                    },
                    {
                        "input": "21191",
                        "output": "1 21191",
                        "explanation": "21191 is a prime number, so its only divisors are 1 and itself."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Factorization",
                "slug": "factorization"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\nclass Solution {\r\n  public:\r\n    void print_divisors(int n) {\r\n        vector<int> large;\r\n        int cnt = 0, num = 1;\r\n        while (num * num <= n) {\r\n            // find divisors\r\n            if (n % num == 0) {\r\n                if (num == n / num) {\r\n                    // n is the square of current num\r\n                    cout << num << \" \";\r\n                } else {\r\n                    cout << num << \" \";\r\n                    large.push_back(n / num);\r\n                }\r\n            }\r\n            num += 1;\r\n        }\r\n        for (int i = large.size() - 1; i >= 0; i--) cout << large[i] << \" \";\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static void print_divisors(int n) {\r\n        // code here\r\n        List<Integer> al = new ArrayList<>();\r\n        int num = 1;\r\n        while (num * num <= n) {\r\n            // find divisors\r\n            if (n % num == 0) {\r\n                if (num == n / num) {\r\n                    // n is the square of current num\r\n                    System.out.print(num + \" \");\r\n                } else {\r\n                    System.out.print(num + \" \");\r\n                    al.add(n / num);\r\n                }\r\n            }\r\n            num += 1;\r\n        }\r\n        for (int i = al.size() - 1; i >= 0; i--)\r\n            System.out.print(al.get(i) + \" \");\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def print_divisors(self, n):\n        div = 1\n        large = []\n        \n        #iterating until the square root of n\n        while div * div <= n:\n            #checking if div is a divisor of n\n            if n % div == 0:\n                factor1, factor2 = div, n//div\n                #checking if the divisor is a square root of n\n                if factor1 == factor2:\n                    print(factor1, end = ' ')\n                #if not, printing both divisors\n                else:\n                    print(factor1, end = ' ')\n                    large.append(factor2)\n            #incrementing the divisor\n            div += 1\n            \n        #printing the remaining large divisors in reverse order\n        for i in range(len(large) - 1, -1, -1):\n            print(large[i], end = ' ')",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Complete this function\n    // Function to print all the divisors of the given number.\n    public void print_divisors(int n) {\n        List<int> large = new List<int>();\n        int num = 1;\n        while (num * num <= n) {\n            // find divisors\n            if (n % num == 0) {\n                if (num == n / num) {\n                    // n is the square of current num\n                    Console.Write(num + \" \");\n                } else {\n                    Console.Write(num + \" \");\n                    large.Add(n / num);\n                }\n            }\n            num += 1;\n        }\n        for (int i = large.Count() - 1; i >= 0; i--) Console.Write(large[i] + \" \");\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}