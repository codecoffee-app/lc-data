{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701723,
            "title": "Allocate Minimum Pages",
            "titleSlug": "allocate-minimum-number-of-pages0937",
            "content": "<p><span >You are given an array <code>arr[]</code> of integers, where each element <code>arr[i]</code> represents the number of pages in the ith book. You also have an integer <code>k</code> representing the number of students. The task is to allocate books to each student such that:</span></p>\n<ul>\n<li><span >Each student receives <strong>atleast</strong> one book.</span></li>\n<li><span >Each student is assigned a contiguous sequence of books.</span></li>\n<li><span >No book is assigned to more than one student.</span></li>\n</ul>\n<p><span >The objective is to minimize the maximum number of pages assigned to any student. In other words, out of all possible allocations, find the arrangement where the student who receives the most pages still has the smallest possible maximum.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>: Return <strong>-1</strong> if a valid assignment is not possible, and allotment should be in contiguous order (see the explanation for better understanding).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [12, 34, 67, 90], k = 2\n<strong>Output: </strong>113\n<strong>Explanation: </strong>Allocation can be done in following ways:\n[12] and [34, 67, 90] Maximum Pages = 191\n[12, 34] and [67, 90] Maximum Pages = 157\n[12, 34, 67] and [90] Maximum Pages = 113.\nTherefore, the minimum of these cases is 113, which is selected as the output.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [15, 17, 20], k = 5\n<strong>Output: </strong>-1\n<strong>Explanation: </strong>Allocation can not be done.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [22, 23, 67], k = 1\n<strong>Output: </strong>112</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;=&nbsp; arr.size() &lt;= 10<sup>6</sup><br />1 &lt;= arr[i] &lt;= 10<sup>3<br /></sup></span><span style=\"font-size: 18px;\">1 &lt;= k &lt;= 10<sup>3&nbsp;</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of integers, where `arr[i]` represents the number of pages in the i-th book, and an integer `k` representing the number of students, allocate books to the students under the following conditions:\n\n*   Each student must receive at least one book.\n*   Each student must be assigned a contiguous sequence of books.\n*   No book can be assigned to more than one student.\n\nThe goal is to minimize the maximum number of pages assigned to any single student. In other words, find the allocation where the student with the most pages has the smallest possible maximum.",
                "constraints": [
                    "1 <= arr.length <= 10^6",
                    "1 <= arr[i] <= 10^3",
                    "1 <= k <= 10^3"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [12, 34, 67, 90], k = 2",
                        "output": "113",
                        "explanation": "Possible allocations are:\n*   [12] and [34, 67, 90] -> Maximum pages: 191\n*   [12, 34] and [67, 90] -> Maximum pages: 157\n*   [12, 34, 67] and [90] -> Maximum pages: 113\nThe minimum of these maximums is 113."
                    },
                    {
                        "input": "arr[] = [15, 17, 20], k = 5",
                        "output": "-1",
                        "explanation": "It is impossible to allocate books to 5 students when there are only 3 books."
                    },
                    {
                        "input": "arr[] = [22, 23, 67], k = 1",
                        "output": "112",
                        "explanation": "All books must be assigned to the single student, resulting in a total of 22 + 23 + 67 = 112 pages."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use binary search to minimize the maximum number of pages assigned to any student, ensuring all books are allocated without exceeding the given student limit.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "infosys",
            "amazon",
            "microsoft",
            "google",
            "codenation",
            "uber"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if current minimum value is feasible or not.\n    bool isPossible(vector<int> &arr, int n, int k, int curMin) {\n        int studentsRequired = 1;\n        int curSum = 0;\n\n        // iterating over all the books.\n        for (int i = 0; i < n; i++) {\n            // if current number of pages are greater than curMin, return false\n            if (arr[i] > curMin)\n                return false;\n\n            // counting number of students required to distribute curMin pages\n            if (curSum + arr[i] > curMin) {\n                // incrementing student count and updating curSum.\n                studentsRequired++;\n                curSum = arr[i];\n\n                // if students required becomes greater than given number\n                // of students, we return false.\n                if (studentsRequired > k)\n                    return false;\n            }\n            // else updating curSum\n            else {\n                curSum += arr[i];\n            }\n        }\n        return true;\n    }\n\n    // Function to find minimum number of pages.\n    int findPages(vector<int> &arr, int k) {\n        int n = arr.size();\n        int sum = 0;\n\n        // returning -1 if no. of books is less than no. of students.\n        if (n < k)\n            return -1;\n\n        // counting total number of pages.\n        for (int i = 0; i < n; ++i)\n            sum += arr[i];\n\n        // initializing start as 0 pages and end as total pages.\n        int start = 0;\n        int end = sum, mid;\n        int ans = INT_MAX;\n\n        while (start <= end) {\n            mid = (start + end) / 2;\n\n            // checking if it is possible to distribute books\n            // by using mid as current minimum.\n            if (isPossible(arr, n, k, mid)) {\n                // if yes, then we find the minimum distribution.\n                ans = min(ans, mid);\n\n                // as we are finding minimum and books are sorted\n                // so reducing end as end = mid - 1.\n                end = mid - 1;\n            }\n            // if not possible means pages should be increased so\n            // updating start = mid + 1.\n            else {\n                start = mid + 1;\n            }\n        }\n        // returning minimum number of pages.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "\n//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to check if the current minimum value is feasible or not.\n    public static boolean isPossible(int[] arr, int n, int k, int curMin) {\n        int studentsRequired = 1;\n        int curSum = 0;\n\n        // Iterating over all the books.\n        for (int i = 0; i < n; i++) {\n            // If current number of pages are greater than curMin, return false.\n            if (arr[i] > curMin) return false;\n\n            // Counting number of students required to distribute curMin pages.\n            if (curSum + arr[i] > curMin) {\n                // Incrementing student count and updating curSum.\n                studentsRequired++;\n                curSum = arr[i];\n\n                // If students required becomes greater than the given number of\n                // students, return false.\n                if (studentsRequired > k) return false;\n            } else {\n                // Else updating curSum.\n                curSum += arr[i];\n            }\n        }\n        return true;\n    }\n\n    // Function to find the minimum number of pages.\n    public static int findPages(int[] arr, int k) {\n        int n = arr.length;\n        int sum = 0;\n\n        // Returning -1 if the number of books is less than the number of students.\n        if (n < k) return -1;\n\n        // Counting total number of pages.\n        for (int i = 0; i < n; i++) sum += arr[i];\n\n        // Initializing start as 0 pages and end as total pages.\n        int start = 0;\n        int end = sum;\n        int ans = Integer.MAX_VALUE;\n\n        while (start <= end) {\n            int mid = (start + end) / 2;\n\n            // Checking if it is possible to distribute books using mid as the current\n            // minimum.\n            if (isPossible(arr, n, k, mid)) {\n                // If yes, then we find the minimum distribution.\n                ans = Math.min(ans, mid);\n\n                // As we are finding minimum and books are sorted, reducing end as end =\n                // mid - 1.\n                end = mid - 1;\n            } else {\n                // If not possible, pages should be increased so updating start = mid\n                // + 1.\n                start = mid + 1;\n            }\n        }\n        // Returning minimum number of pages.\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# User function Template for Python\nclass Solution:\n\n    # Function to check if the current minimum value is feasible or not.\n    def isPossible(self, arr, n, k, curr_min):\n\n        studentsRequired = 1\n        curr_sum = 0\n\n        # Iterating over all the books.\n        for i in range(n):\n\n            # If the current number of pages are greater than curr_min, return False.\n            if arr[i] > curr_min:\n                return False\n\n            # Counting the number of students required to distribute curr_min pages.\n            if curr_sum + arr[i] > curr_min:\n\n                # Incrementing student count and updating curr_sum.\n                studentsRequired += 1\n                curr_sum = arr[i]\n\n                # If students required becomes greater than the given number of students, return False.\n                if studentsRequired > k:\n                    return False\n\n            # Else updating curr_sum.\n            else:\n                curr_sum += arr[i]\n\n        return True\n\n    # Function to find the minimum number of pages.\n    def findPages(self, arr, k):\n        n = len(arr)\n        total_pages = sum(arr)\n\n        # Returning -1 if the number of books is less than the number of students.\n        if n < k:\n            return -1\n\n        # Initializing start as 0 pages and end as total pages.\n        start, end = 0, total_pages\n        result = 10**9\n\n        while start <= end:\n\n            mid = (start + end) // 2\n\n            # Checking if it is possible to distribute books using mid as the current minimum.\n            if self.isPossible(arr, n, k, mid):\n\n                # If yes, then we find the minimum distribution.\n                result = min(result, mid)\n\n                # As we are finding minimum and books are sorted, reducing end as end = mid - 1.\n                end = mid - 1\n\n            # If not possible, pages should be increased so updating start = mid + 1.\n            else:\n                start = mid + 1\n\n        # Returning the minimum number of pages.\n        if result == 10**9:\n            return -1\n        else:\n            return result\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to check if the current minimum value is feasible or not.\n    // This function ensures that no student gets more than 'curr_min' pages.\n    isPossible(arr, n, k, curr_min) {\n        let studentsRequired = 1; // Initialize count of students required\n        let curr_sum = 0;         // Initialize current sum of pages\n\n        // Traverse through all books\n        for (let i = 0; i < n; i++) {\n            // If a single book has more pages than 'curr_min', return false\n            if (arr[i] > curr_min) {\n                return false;\n            }\n\n            // Check if current number of pages exceeds 'curr_min'\n            if (curr_sum + arr[i] > curr_min) {\n                // Increment student count\n                studentsRequired += 1;\n                // Update current sum to the current book's pages\n                curr_sum = arr[i];\n\n                // If students required becomes greater than k, return false\n                if (studentsRequired > k) {\n                    return false;\n                }\n            } else {\n                // Else add this book to current sum\n                curr_sum += arr[i];\n            }\n        }\n\n        return true;\n    }\n\n    // Function to find the minimum number of pages.\n    findPages(arr, k) {\n        const n = arr.length; // Number of books\n        const total_pages =\n            arr.reduce((acc, val) => acc + val, 0); // Total sum of pages in all books\n\n        // If number of books is less than number of students, return -1\n        if (n < k) {\n            return -1;\n        }\n\n        // Initialize start to the max book pages (0 in this case, since we consider\n        // minimum possible) and end to the total sum of pages\n        let start = 0;\n        let end = total_pages;\n        let result = 10 ** 9; // Initialize result to a large number\n\n        // Binary search to find the minimum feasible number of pages\n        while (start <= end) {\n            const mid = Math.floor((start + end) / 2); // Calculate mid point\n\n            // Check if it is possible to allocate books with 'mid' as the max number of\n            // pages\n            if (this.isPossible(arr, n, k, mid)) {\n                // If yes, update result to the minimum of result and mid\n                result = Math.min(result, mid);\n                end = mid - 1; // Try for a better solution on the left half\n            } else {\n                start = mid + 1; // If no, try the right half\n            }\n        }\n\n        // If no valid allocation is found, return -1\n        return result === 10 ** 9 ? -1 : result;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}