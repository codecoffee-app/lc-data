{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702904,
            "title": "Alternate Vowel and Consonant String",
            "titleSlug": "alternate-vowel-and-consonant-string2939",
            "content": "<p>Given a string&nbsp;<strong>S</strong> of <strong>lowercase</strong> english characters. Rearrange characters of the given string such that the vowels and consonants occupy <strong>alternate</strong> positions and the string so formed should be <strong>lexicographically</strong> (alphabetically) <strong>smallest.</strong>&nbsp;<br />\r\n<strong>Note:&nbsp;</strong>Vowels are &#39;a&#39;, &#39;e&#39;, &#39;i&#39;, &#39;o&#39; and &#39;u&#39;.&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nS = &quot;aeroplane&quot;\r\n<strong>Output:</strong> alanepero\r\n<strong>Explanation</strong>: <strong>a</strong>l<strong>a</strong>n<strong>e</strong>p<strong>e</strong>r<strong>o  \r\n</strong>The vowels and consonants are arranged \r\nalternatively with vowels shown in bold.\r\nAlso, there&#39;s no lexicographically smaller\r\nstring possible with required conditions.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input</strong>: \r\nS = &quot;mississippi&quot;\r\n<strong>Output:</strong> -1\r\n<strong>Explanation</strong>: The number of vowels is 4 \r\nwhereas the number of consonants is 7.\r\nHence, there&#39;s no way to arrange the\r\nvowels and consonants alternatively.\r\n</pre>\r\n\r\n<p><br />\r\n<strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>rearrange()&nbsp;</strong>which takes the string <strong>S</strong> and its size<strong> N</strong> as inputs and <strong>returns</strong> the modified string as stated in the description. If such a modification is not possible, return the string &quot;-1&quot;.</p>\r\n\r\n<p><br />\r\n<strong>Expected Time Complexity:&nbsp;</strong>O(N).<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(2*26).</p>\r\n\r\n<p><br />\r\n<strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10^6<br />\r\n&#39;a&#39;&nbsp;&lt;= S[ i ] &lt;= &#39;z&#39;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>It has been given that the string contains only lowercase english characters. That is, there are only 26 possibilities for each place in the string.&nbsp;<br />\nHow about storing the frequencies of each character and use those frequencies to form the resultant string?</p>\n\n<p>Take care of the edge cases as well.&nbsp;<br />\nWhat if the abs (numOfVowels - numOfConsonants) &gt; 1?<br />\nWhat if the numOfVowels = numOfConsonants? Which character will you start your string with? (Remember, you need to lexicographically smallest string).</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\n    public:\r\n    string rearrange (string s, int n)\r\n    {\r\n    \tset <char> st;\r\n    \t// vowels\r\n    \tst.insert ('a');\r\n    \tst.insert ('e');\r\n    \tst.insert ('i');\r\n    \tst.insert ('o');\r\n    \tst.insert ('u');\r\n    \r\n        // to store the frequencies of vowels and consonants.\r\n    \tint vow[26] = {0}, cons[26] = {0};\r\n    \t\r\n    \t// to count the total number of vowels and total number of consonants. \r\n    \tint numVow = 0, numCons = 0;\r\n    \tchar smallestVow = 'u', smallestCons = 'z';\r\n    \tfor (int i = 0; i < n; ++i)\r\n    \t{\r\n    \t    // if there's any character apart from the lowercase english characters,\r\n    \t    // the input is wrong. Hence, we return -1\r\n    \t\tif (s[i] < 'a' or s[i] > 'z')\r\n    \t\t\treturn \"-1\";\r\n        \r\n            // if current character is a consonant\r\n    \t\tif (st.find (s[i]) == st.end ())\r\n    \t\t{\r\n    \t\t\tcons[s[i] - 'a']++;\r\n    \t\t\tnumCons++;\r\n    \t\t\tif (s[i] < smallestCons)\r\n    \t\t\t\tsmallestCons = s[i];\r\n    \t\t}\r\n    \t\t// else if it's a vowel\r\n    \t\telse\r\n    \t\t{\r\n    \t\t\tvow[s[i] - 'a']++;\r\n    \t\t\tnumVow++;\r\n    \t\t\tif (s[i] < smallestVow)\r\n    \t\t\t\tsmallestVow = s[i];\r\n    \t\t}\r\n    \t}\r\n        \r\n        // if the count differs by more than 1, the alternate arrangement is not possible\r\n    \tif (abs (numVow - numCons) > 1)\r\n    \t\treturn \"-1\";\r\n        \r\n    \tbool putVow;\r\n    \t\r\n    \t// deciding which character (vowel/ consonant) will come first\r\n    \tif (numVow == numCons)\r\n    \t{\r\n    \t\tif (smallestVow < smallestCons)\r\n    \t\t\tputVow = true;\r\n    \t\telse\r\n    \t\t\tputVow = false;\r\n    \t}\r\n    \telse if (numVow > numCons)\r\n    \t\tputVow = true;\r\n    \telse\r\n    \t\tputVow = false;\r\n    \r\n    \r\n    \tint i = 0, j = 0, itr = 0;\r\n    \t\r\n    \t// computing the resultant string\r\n    \twhile (i < 26 or j < 26)\r\n    \t{\r\n    \t\tif (putVow)\r\n    \t\t{\r\n    \t\t\twhile (i < 26 and vow[i] == 0) i++;\r\n    \t\t\tif (i == 26)\r\n    \t\t\t\tbreak;\r\n    \t\t\ts[itr++] = ('a' + i);\r\n    \t\t\tvow[i]--;\r\n    \t\t\tputVow = false;\r\n    \t\t}\r\n    \t\telse\r\n    \t\t{\r\n    \t\t\twhile (j < 26 and cons[j] == 0) j++;\r\n    \t\t\tif (j == 26)\r\n    \t\t\t\tbreak;\r\n    \t\t\ts[itr++] = ('a' + j);\r\n    \t\t\tcons[j]--;\r\n    \t\t\tputVow = true;\r\n    \t\t}\r\n    \t}\r\n    \treturn s;\r\n    }\r\n    // Contributed By: Pranay Bansal\r\n\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\r\n    public String rearrange(String S, int N){\r\n        HashSet<Character> st=new HashSet<>();\r\n    \t// vowels\r\n    \tst.add ('a');\r\n    \tst.add ('e');\r\n    \tst.add ('i');\r\n    \tst.add ('o');\r\n    \tst.add ('u');\r\n    \r\n        // to store the frequencies of vowels and consonants.\r\n    \tint vow[] = new int[26], cons[] = new int[26];\r\n    \t\r\n    \t// to count the total number of vowels and total number of consonants. \r\n    \tint numVow = 0, numCons = 0;\r\n    \tchar smallestVow = 'u', smallestCons = 'z';\r\n    \tfor (int i = 0; i < N; ++i)\r\n    \t{\r\n    \t    // if there's any character apart from the lowercase english characters,\r\n    \t    // the input is wrong. Hence, we return -1\r\n    \t\tif (S.charAt(i) < 'a' || S.charAt(i) > 'z')\r\n    \t\t\treturn \"-1\";\r\n        \r\n            // if current character is a consonant\r\n    \t\tif (!st.contains(S.charAt(i)))\r\n    \t\t{\r\n    \t\t\tcons[S.charAt(i) - 'a']++;\r\n    \t\t\tnumCons++;\r\n    \t\t\tif (S.charAt(i) < smallestCons)\r\n    \t\t\t\tsmallestCons = S.charAt(i);\r\n    \t\t}\r\n    \t\t// else if it's a vowel\r\n    \t\telse\r\n    \t\t{\r\n    \t\t\tvow[S.charAt(i) - 'a']++;\r\n    \t\t\tnumVow++;\r\n    \t\t\tif (S.charAt(i) < smallestVow)\r\n    \t\t\t\tsmallestVow = S.charAt(i);\r\n    \t\t}\r\n    \t}\r\n        \r\n        // if the count differs by more than 1, the alternate arrangement is not possible\r\n    \tif (Math.abs (numVow - numCons) > 1)\r\n    \t\treturn \"-1\";\r\n        \r\n    \tboolean putVow;\r\n    \t\r\n    \t// deciding which character (vowel/ consonant) will come first\r\n    \tif (numVow == numCons)\r\n    \t{\r\n    \t\tif (smallestVow < smallestCons)\r\n    \t\t\tputVow = true;\r\n    \t\telse\r\n    \t\t\tputVow = false;\r\n    \t}\r\n    \telse if (numVow > numCons)\r\n    \t\tputVow = true;\r\n    \telse\r\n    \t\tputVow = false;\r\n    \r\n    \r\n    \tint i = 0, j = 0, itr = 0;\r\n    \t\r\n    \t// computing the resultant string\r\n    \tchar ch[]=new char[N];\r\n    \twhile (i < 26 || j < 26)\r\n    \t{\r\n    \t\tif (putVow)\r\n    \t\t{\r\n    \t\t\twhile (i < 26 && vow[i] == 0) i++;\r\n    \t\t\tif (i == 26)\r\n    \t\t\t\tbreak;\r\n    \t\t\tch[itr++] = (char)('a' + i);\r\n    \t\t\tvow[i]--;\r\n    \t\t\tputVow = false;\r\n    \t\t}\r\n    \t\telse\r\n    \t\t{\r\n    \t\t\twhile (j < 26 && cons[j] == 0) j++;\r\n    \t\t\tif (j == 26)\r\n    \t\t\t\tbreak;\r\n    \t\t\tch[itr++] = (char)('a' + j);\r\n    \t\t\tcons[j]--;\r\n    \t\t\tputVow = true;\r\n    \t\t}\r\n    \t}\r\n    \tStringBuilder sb=new StringBuilder();\r\n    \tfor(char chr:ch){\r\n    \t    sb.append(chr);\r\n    \t}\r\n    \treturn sb.toString();\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def rearrange(self, S, N):\n        #creating a set of vowels\n        st=set()\n        st.add(\"a\")\n        st.add(\"e\")\n        st.add(\"i\")\n        st.add(\"o\")\n        st.add(\"u\")\n        \n        #arrays to store the count of vowels and consonants\n        vow=[0]*(26)\n        cons=[0]*(26)\n        \n        #variables to store the count of vowels and consonants\n        numVow=0\n        numCons=0\n        \n        #variables to store the smallest vowel and consonant\n        smallestVow=\"u\"\n        smallestCons=\"z\"\n        \n        #iterating through the string\n        for i in range(N):\n            #checking if the character is a valid lowercase alphabet\n            if S[i]<\"a\" or S[i]>\"z\":\n                return -1\n            #checking if the character is a vowel\n            if S[i] not in st:\n                cons[ord(S[i])-ord(\"a\")]+=1\n                numCons+=1\n                #updating the smallest consonant if necessary\n                if S[i]<smallestCons:\n                    smallestCons=S[i]\n            else:\n                vow[ord(S[i])-ord(\"a\")]+=1\n                numVow+=1\n                #updating the smallest vowel if necessary\n                if S[i]<smallestVow:\n                    smallestVow=S[i]\n        \n        #checking if the difference between the count of vowels and consonants is greater than 1\n        if abs(numVow-numCons)>1:\n            return \"-1\"\n        \n        #checking the condition to determine whether to put vowel or consonant first\n        if numVow==numCons:\n            if smallestVow<smallestCons:\n                putVow=True\n            else:\n                putVow=False\n        elif numVow>numCons:\n            putVow=True\n        else:\n            putVow=False\n        \n        #iterating through the arrays to rearrange the string\n        i=0\n        j=0\n        itr=0\n        S=[el for el in S]\n        while i<26 or j<26:\n            #if it's time to put a vowel\n            if putVow:\n                #finding the next available vowel\n                while i<26 and vow[i]==0:\n                    i+=1\n                \n                #if no vowel is left, break the loop\n                if i==26:\n                    break\n                \n                #replacing the character in the string and updating the count\n                S[itr]=chr(ord(\"a\")+i)\n                itr+=1\n                vow[i]-=1\n                putVow=False\n            else:\n                #finding the next available consonant\n                while j<26 and cons[j]==0:\n                    j+=1\n                #if no consonant is left, break the loop\n                if j==26:\n                    break\n                #replacing the character in the string and updating the count\n                S[itr]=chr(ord(\"a\")+j)\n                itr+=1\n                cons[j]-=1\n                putVow=True\n        #returning the rearranged string\n        return \"\".join(S)",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    //Function to rearrange a string.\n    rearrange(S, N) {\n        //creating a set of vowels\n        let st = new Set();\n        st.add(\"a\");\n        st.add(\"e\");\n        st.add(\"i\");\n        st.add(\"o\");\n        st.add(\"u\");\n\n        //arrays to store the count of vowels and consonants\n        let vow = new Array(26).fill(0);\n        let cons = new Array(26).fill(0);\n\n        //variables to store the count of vowels and consonants\n        let numVow = 0;\n        let numCons = 0;\n\n        //variables to store the smallest vowel and consonant\n        let smallestVow = \"u\";\n        let smallestCons = \"z\";\n\n        //iterating through the string\n        for (let i = 0; i < N; i++) {\n            //checking if the character is a valid lowercase alphabet\n            if (S[i] < \"a\" || S[i] > \"z\") {\n                return -1;\n            }\n            //checking if the character is a vowel\n            if (!st.has(S[i])) {\n                cons[S[i].charCodeAt(0) - \"a\".charCodeAt(0)] += 1;\n                numCons += 1;\n                //updating the smallest consonant if necessary\n                if (S[i] < smallestCons) {\n                    smallestCons = S[i];\n                }\n            } else {\n                vow[S[i].charCodeAt(0) - \"a\".charCodeAt(0)] += 1;\n                numVow += 1;\n                //updating the smallest vowel if necessary\n                if (S[i] < smallestVow) {\n                    smallestVow = S[i];\n                }\n            }\n        }\n\n        //checking if the difference between the count of vowels and consonants is greater than 1\n        if (Math.abs(numVow - numCons) > 1) {\n            return \"-1\";\n        }\n\n        //checking the condition to determine whether to put vowel or consonant first\n        let putVow;\n        if (numVow == numCons) {\n            if (smallestVow < smallestCons) {\n                putVow = true;\n            } else {\n                putVow = false;\n            }\n        } else if (numVow > numCons) {\n            putVow = true;\n        } else {\n            putVow = false;\n        }\n\n        //iterating through the arrays to rearrange the string\n        let i = 0;\n        let j = 0;\n        let itr = 0;\n        S = S.split(\"\");\n        while (i < 26 || j < 26) {\n            //if it's time to put a vowel\n            if (putVow) {\n                //finding the next available vowel\n                while (i < 26 && vow[i] == 0) {\n                    i += 1;\n                }\n\n                //if no vowel is left, break the loop\n                if (i == 26) {\n                    break;\n                }\n\n                //replacing the character in the string and updating the count\n                S[itr] = String.fromCharCode(\"a\".charCodeAt(0) + i);\n                itr += 1;\n                vow[i] -= 1;\n                putVow = false;\n            } else {\n                //finding the next available consonant\n                while (j < 26 && cons[j] == 0) {\n                    j += 1;\n                }\n                //if no consonant is left, break the loop\n                if (j == 26) {\n                    break;\n                }\n                //replacing the character in the string and updating the count\n                S[itr] = String.fromCharCode(\"a\".charCodeAt(0) + j);\n                itr += 1;\n                cons[j] -= 1;\n                putVow = true;\n            }\n        }\n        //returning the rearranged string\n        return S.join(\"\");\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "\npublic class Solution\n{\n    public string rearrange(string s, int n)\n    {\n        HashSet<char> st = new HashSet<char>\n        {\n            'a', 'e', 'i', 'o', 'u'\n        };\n\n        int[] vow = new int[26], cons = new int[26];\n        int numVow = 0, numCons = 0;\n        char smallestVow = 'u', smallestCons = 'z';\n\n        for (int i = 0; i < n; ++i)\n        {\n            if (s[i] < 'a' || s[i] > 'z')\n                return \"-1\";\n\n            if (!st.Contains(s[i]))\n            {\n                cons[s[i] - 'a']++;\n                numCons++;\n                if (s[i] < smallestCons)\n                    smallestCons = s[i];\n            }\n            else\n            {\n                vow[s[i] - 'a']++;\n                numVow++;\n                if (s[i] < smallestVow)\n                    smallestVow = s[i];\n            }\n        }\n\n        if (Math.Abs(numVow - numCons) > 1)\n            return \"-1\";\n\n        bool putVow = (numVow >= numCons);\n        if (numVow == numCons)\n        {\n            putVow = (smallestVow < smallestCons);\n        }\n\n        char[] result = new char[n];\n        int idx = 0;\n        int v = 0, c = 0;\n\n        while (idx < n)\n        {\n            if (putVow)\n            {\n                while (v < 26 && vow[v] == 0) v++;\n                if (v >= 26) break;\n                result[idx++] = (char)('a' + v);\n                vow[v]--;\n            }\n            else\n            {\n                while (c < 26 && cons[c] == 0) c++;\n                if (c >= 26) break;\n                result[idx++] = (char)('a' + c);\n                cons[c]--;\n            }\n            putVow = !putVow;\n        }\n\n        return new string(result);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}