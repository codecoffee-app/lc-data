{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702927,
            "title": "Alternative Sorting",
            "titleSlug": "alternative-sorting1311",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr </strong>of&nbsp;<strong>distinct</strong> integers. Rearrange the array in such a way that the first element is the largest and the second element is the smallest, the third element is the second largest and the fourth element is the second smallest, and so on.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [7, 1, 2, 3, 4, 5, 6]\n<strong>Output:</strong> [7, 1, 6, 2, 5, 3, 4]\n<strong>Explanation</strong>: The first element is first maximum and second element is first minimum and so on.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 6, 9, 4, 3, 7, 8, 2]\n<strong>Output:</strong> [9, 1, 8, 2, 7, 3, 6, 4]<br /></span><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation</strong><span style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">: The first element is first maximum and second element is first minimum and so on.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5<br /></sup>1 &le; arr[i] &le; 10<sup>5</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of distinct integers, rearrange the array such that the first element is the largest, the second element is the smallest, the third element is the second largest, the fourth element is the second smallest, and so on, alternating between maximum and minimum values.",
                "constraints": [
                    "1 <= arr.length <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[7, 1, 2, 3, 4, 5, 6]",
                        "output": "[7, 1, 6, 2, 5, 3, 4]",
                        "explanation": "The rearranged array alternates between the largest and smallest remaining elements of the original array."
                    },
                    {
                        "input": "[1, 6, 9, 4, 3, 7, 8, 2]",
                        "output": "[9, 1, 8, 2, 7, 3, 6, 4]",
                        "explanation": "The rearranged array alternates between the largest and smallest remaining elements of the original array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>An&nbsp;<strong>efficient solution</strong>&nbsp;involves following steps.<br />1) Sort input array using a O(n Log n) algorithm.<br />2) We maintain two pointers, one from beginning and one from end in sorted array.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "zoho"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n\n  public:\n    vector<int> alternateSort(vector<int>& arr) {\n        // Sorting the array\n        int n = arr.size();\n        sort(arr.begin(), arr.end());\n        vector<int> ans;\n        // Printing the last element of array\n        // first and then first element and then\n        // second last element and then second\n        // element and so on.\n        int i = 0, j = n - 1;\n        while (i < j) {\n            ans.push_back(arr[j--]);\n            ans.push_back(arr[i++]);\n        }\n\n        if (n % 2 != 0)\n            ans.push_back(arr[i]);\n        return ans;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static ArrayList<Integer> alternateSort(int[] arr) {\n        int n = arr.length;\n        // Sorting the array\n        Arrays.sort(arr);\n        ArrayList<Integer> ans = new ArrayList<>();\n\n        // Adding elements in alternate order\n        int i = 0, j = n - 1;\n        while (i < j) {\n            ans.add(arr[j--]);\n            ans.add(arr[i++]);\n        }\n\n        // If there is a middle element left\n        if (n % 2 != 0) {\n            ans.add(arr[i]);\n        }\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def alternateSort(self, arr):\n        # Sorting the array\n        arr.sort()\n        ans = []\n\n        # Adding elements in alternate order\n        i, j = 0, len(arr) - 1\n        while i < j:\n            ans.append(arr[j])\n            ans.append(arr[i])\n            j -= 1\n            i += 1\n\n        # If there is a middle element left\n        if len(arr) % 2 != 0:\n            ans.append(arr[i])\n\n        return ans\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    alternateSort(arr) {\n        // code here\n        let n = arr.length;\n        let start = 0;\n        let end = n - 1;\n        arr.sort((a, b) => a - b);\n        const result = new Array(n);\n        for (let i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                result[i] = arr[end];\n                end--;\n\n            } else {\n                result[i] = arr[start];\n                start++;\n            }\n        }\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}