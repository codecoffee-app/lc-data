{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704685,
            "title": "Grouping values",
            "titleSlug": "ana-and-sweets5331",
            "content": "<p><span style=\"font-size:18px\">There are <strong>N</strong> integers given in an array <strong>arr</strong>. You have to determine if it is possible to divide them in&nbsp;at most <strong>K</strong> groups, such that any group does not have a single integer more than twice.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 5, K = 2\narr = {1, 1, 2, 5, 1}\n<strong>Output:</strong> 1\n<strong>Explaination:</strong> We can divide them in two groups in \nfollowing way (1, 1, 2, 5) and (1).</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 3, K = 1\narr = {1, 1, 1}\n<strong>Output:</strong> 0\n<strong>Explaination:</strong> There can be only one group and \nthree 1&#39;s. So it is not possible.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou do not need to read input or print anything. Your Task is to complete the function <strong>isPossible()</strong> which takes the value N, K and arr as input parameters and returns 1 if grouping is posible. Otherwise returns 0.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 1000<br />\n1 &le; K &le; 256<br />\n1 &le; arr[i] &le; 32</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of `N` integers, determine if it's possible to divide the integers into at most `K` groups such that no group contains any single integer more than twice.",
                "constraints": [
                    "1 <= N <= 1000",
                    "1 <= K <= 256",
                    "1 <= arr[i] <= 32"
                ],
                "testcases": [
                    {
                        "input": "N = 5, K = 2\narr = {1, 1, 2, 5, 1}",
                        "output": "1",
                        "explanation": "It is possible to divide the array into two groups: (1, 1, 2, 5) and (1)."
                    },
                    {
                        "input": "N = 3, K = 1\narr = {1, 1, 1}",
                        "output": "0",
                        "explanation": "With only one group allowed, it is impossible to satisfy the condition as the number 1 appears three times which is more than twice."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to check if it is possible to form pairs with given difference\n    int isPossible(int N, int arr[], int K){\n        // Find the maximum element in the array\n        int maxi = INT_MIN;\n        for(int i = 0;i < N;i++)\n            maxi = max( maxi, arr[i]);\n\n        // Create a hash table to store the frequency of each element\n        int hash[maxi+1] = {0};\n        maxi = INT_MIN;\n        for(int i = 0;i < N;i++){\n            hash[arr[i]]++;\n            maxi = max( maxi, hash[arr[i]]);\n        }\n\n        // Check if there are enough pairs with the given difference\n        if(maxi > 2*K)\n            return 0;\n        return 1;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}