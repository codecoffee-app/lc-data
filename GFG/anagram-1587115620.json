{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701288,
            "title": "Anagram",
            "titleSlug": "anagram-1587115620",
            "content": "<p><span >Given two strings <strong>s1 </strong>and <strong>s2 </strong>consisting of lowercase characters. The task is to check whether two given strings are an anagram of each other or not. An anagram of a string is another string that contains the same characters, only the order of characters can be different. For example, \"act\" and \"tac\" are an anagram of each other. Strings <strong>s1 </strong>and&nbsp;<strong>s2</strong><strong>&nbsp;</strong>can only contain lowercase alphabets.</span></p>\n<p><span >Note: You can assume both the strings s1 &amp; s2 are <strong>non-empty</strong>.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>s1 = \"geeks\", s2 = \"kseeg\"\n<strong>Output: </strong>true\n<strong>Explanation: </strong>Both the string have same characters with same frequency. So, they are anagrams.</span></pre>\n<pre><span ><strong>Input: </strong>s1 = \"allergy\", s2 = \"allergic\"\n<strong>Output: </strong>false\n<strong>Explanation: </strong>Characters in both the strings are not same, so they are not anagrams.<br /></span></pre>\n<pre><span ><strong>Input: </strong>s1 = \"g\", s2 = \"g\"\n<strong>Output: </strong>true\n<strong>Explanation: </strong>Character in both the strings are same, so they are anagrams.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; s1.size(), s2.size() &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two strings `s1` and `s2` consisting of lowercase characters, determine if they are anagrams of each other. Anagrams are strings containing the same characters, but in a different order.  Both strings are non-empty and contain only lowercase alphabets.",
                "constraints": [
                    "1 <= s1.size(), s2.size() <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "s1 = \"geeks\", s2 = \"kseeg\"",
                        "output": "true",
                        "explanation": "Both strings contain the same characters with the same frequency, thus they are anagrams."
                    },
                    {
                        "input": "s1 = \"allergy\", s2 = \"allergic\"",
                        "output": "false",
                        "explanation": "The strings do not contain the same characters, so they are not anagrams."
                    },
                    {
                        "input": "s1 = \"g\", s2 = \"g\"",
                        "output": "true",
                        "explanation": "Both strings contain the same character, thus they are anagrams."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use a frequency counter to count character occurrences in both strings and verify if all counts match.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "directi",
            "adobe",
            "google",
            "nagarro",
            "media.net"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function is to check whether two strings are anagram of each other or not.\n    bool areAnagrams(string& s1, string& s2) {\n        // an array of size 26, to store count of characters.\n        int a[26] = {0};\n\n        // storing count of each character in first string.\n        for (int i = 0; i < s1.length(); i++) {\n            a[s1[i] - 'a']++;\n        }\n\n        // decrementing the count of characters encountered in the second string.\n        for (int i = 0; i < s2.length(); i++) {\n            a[s2[i] - 'a']--;\n        }\n\n        bool flag = true;\n\n        // iterating over the array in which we stored the count initially\n        // to check if count at every index is equal to 0 or not.\n        // count 0 indicates that number of characters in both strings are same.\n        for (int i = 0; i < 26; i++) {\n            if (a[i] != 0) {\n                flag = false;\n                break;\n            }\n        }\n        // returning the result.\n        return flag;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function is to check whether two strings are anagram of each other or not.\n    public static boolean areAnagrams(String str1, String str2) {\n        int h1[] = new int[26];\n        Arrays.fill(h1, 0);\n\n        // an array of size 26, to store count of characters.\n        if (str1.length() != str2.length()) {\n            return false;\n        }\n\n        // storing count of each character in the first string.\n        for (int i = 0; i < str1.length(); i++) {\n            h1[str1.charAt(i) - 'a']++;\n        }\n\n        // decrementing the count of characters encountered in the second string.\n        for (int i = 0; i < str2.length(); i++) {\n            h1[str2.charAt(i) - 'a']--;\n        }\n\n        // iterating over the array to check if count at every index is 0 or not.\n        for (int i = 0; i < 26; i++) {\n            if (h1[i] != 0) {\n                return false;\n            }\n        }\n        // returning the result.\n        return true;\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "import sys\n\nsys.setrecursionlimit(10**6)\n\n\nclass Solution:\n\n    # Function is to check whether two strings are anagram of each other or not.\n    def areAnagrams(self, str1, str2):\n\n        # A dictionary to store the count of characters.\n        mp = {}\n\n        # Storing count of each character in the first string.\n        for i in str1:\n            if i in mp:\n                mp[i] += 1\n            else:\n                mp[i] = 1\n\n        # Decrementing the count of characters encountered in the second string.\n        for i in str2:\n            if i not in mp:\n                return False\n            else:\n                mp[i] -= 1\n\n        # Iterating over the dictionary to check if the count is zero for all characters.\n        for i in mp:\n            if mp[i] != 0:\n                return False\n\n        # Returning the result.\n        return True\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "/**\n * @param {string} str1\n * @param {string} str2\n * @returns {boolean}\n */\n\nclass Solution {\n    // Function is to check whether two strings are anagram of each other or not.\n    areAnagrams(str1, str2) {\n        // An array of size 26, to store the count of characters.\n        let freq = new Array(26).fill(0);\n\n        // Early exit if lengths are different.\n        if (str1.length !== str2.length) {\n            return false;\n        }\n\n        // Storing count of each character in the first string.\n        for (let i = 0; i < str1.length; i++) {\n            let k = str1.charCodeAt(i) - 97;\n            freq[k]++;\n        }\n\n        // Decrementing the count of characters encountered in the second string.\n        for (let i = 0; i < str2.length; i++) {\n            let k = str2.charCodeAt(i) - 97;\n            freq[k]--;\n        }\n\n        // Iterating over the array to check if count at every index is equal to 0.\n        for (let i = 0; i < 26; i++) {\n            if (freq[i] !== 0) {\n                return false;\n            }\n        }\n\n        // Returning the result.\n        return true;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}