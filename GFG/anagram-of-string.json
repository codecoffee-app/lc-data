{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700558,
            "title": "Anagram of String",
            "titleSlug": "anagram-of-string",
            "content": "<p><span style=\"font-size: 18px;\">Given two strings<strong> s1 </strong>and <strong>s2</strong> in lowercase, the task is to make them anagrams. The only allowed operation is to remove a character from any string. Find the <strong>minimum number</strong> of characters to be deleted to make both the strings anagram. Two strings are called anagrams of each other if one of them can be converted into another by rearranging its letters.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">s1 = \"bcadeh\", s2 = \"hea\"\n<strong>Output: </strong>3<strong>\nExplanation: </strong>We need to remove b, c and d from s1.</span>\n</pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">s1 = \"cddgk\", s2 = \"gcd\"\n<strong>Output: </strong>2<strong>\nExplanation: </strong>We need to remove d and k from s1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= |s1|, |s2| &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use frequency array to store occurence of characters and then check if both the frequency array are same or not. Then remove the extra characters from both the strings.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "anagram",
                "slug": "anagram"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// function to calculate minimum numbers of characters\n// to be removed to make two strings anagram\nint remAnagram(string str1, string str2) {\n    // make hash array for both string and calculate\n    // frequency of each character\n    int count1[CHARS] = {0}, count2[CHARS] = {0};\n\n    // count frequency of each charcter in first string\n    for (int i = 0; str1[i] != '\\0'; i++)\n        count1[str1[i] - 'a']++;\n\n    // count frequency of each charcter in second string\n    for (int i = 0; str2[i] != '\\0'; i++)\n        count2[str2[i] - 'a']++;\n\n    // traverse count arrays to find number of charcters\n    // to be removed\n    int result = 0;\n    for (int i = 0; i < 26; i++)\n        result += abs(count1[i] - count2[i]);\n    return result;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class GfG {\n    // method to find the minimum number of characters to be removed\n    // to make two strings anagrams\n    public int remAnagrams(String s, String s1) {\n        // arrays to store the count of each character in both strings\n        int[] c = new int[26];\n        int[] c1 = new int[26];\n\n        // count the frequency of each character in the first string\n        for (int i = 0; i < s.length(); i++) {\n            c[s.charAt(i) - 'a']++;\n        }\n        // count the frequency of each character in the second string\n        for (int i = 0; i < s1.length(); i++) {\n            c1[s1.charAt(i) - 'a']++;\n        }\n\n        // variable to store the minimum number of character removals\n        int result = 0;\n        // calculate the difference in frequency of each character in both strings\n        for (int i = 0; i < 26; i++) {\n            result += Math.abs(c[i] - c1[i]);\n        }\n\n        // return the minimum number of character removals\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "def remAnagram(str1, str2):\n    count1 = [\n        0\n    ] * 26  # creating an array to store the count of each letter in str1\n    count2 = [\n        0\n    ] * 26  # creating an array to store the count of each letter in str2\n    for i in range(0, len(str1)):\n        count1[ord(str1[i]) -\n               ord('a')] += 1  # incrementing the count of each letter in str1\n    for i in range(0, len(str2)):\n        count2[ord(str2[i]) -\n               ord('a')] += 1  # incrementing the count of each letter in str2\n    result = 0\n    for i in range(0, 26):\n        result += abs(\n            count1[i] -\n            count2[i])  # calculating the absolute difference of counts\n    return result  # returning the result, which is the sum of absolute differences of counts of each letter\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    remAnagram(str1, str2) {\n        // make hash array for both string and calculate\n        // frequency of each character\n        let count1 = new Array(26).fill(0);\n        let count2 = new Array(26).fill(0);\n\n        // count frequency of each character in first string\n        for (let i = 0; i < str1.length; i++)\n            count1[str1.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n\n        // count frequency of each character in second string\n        for (let i = 0; i < str2.length; i++)\n            count2[str2.charCodeAt(i) - 'a'.charCodeAt(0)]++;\n\n        // traverse count arrays to find number of characters to be removed\n        let result = 0;\n        for (let i = 0; i < 26; i++) result += Math.abs(count1[i] - count2[i]);\n\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}