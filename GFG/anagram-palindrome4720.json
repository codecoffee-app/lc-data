{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702908,
            "title": "Anagram Palindrome",
            "titleSlug": "anagram-palindrome4720",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>S</strong>, Check if characters of the given string can be rearranged to form a palindrome.<br />\r\n<strong>Note: </strong>You have to return 1 if it is possible to convert the given string into palindrome else return 0.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nS = &quot;geeksogeeks&quot;\r\n<strong>Output:</strong> Yes\r\n<strong>Explanation</strong>: The string can be converted\r\ninto a palindrome: geeksoskeeg\r\n\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>: \r\nS = &quot;geeksforgeeks&quot;\r\n<strong>Output:</strong> No\r\n<strong>Explanation</strong>: The given string can&#39;t be\r\nconverted into a palindrome.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>isPossible()&nbsp;</strong>which takes the string S as input and returns 1 if the string can be converted into a palindrome. Else, it returns 0.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|).<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(Distinct Characters).</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= |S| &lt;= 10<sup>6</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string **S**, determine if its characters can be rearranged to form a palindrome. Return 1 if a palindrome can be formed, otherwise return 0.",
                "constraints": [
                    "1 <= |S| <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "geeksogeeks",
                        "output": "1",
                        "explanation": "The string \"geeksogeeks\" can be rearranged to form the palindrome \"geeksoskeeg\"."
                    },
                    {
                        "input": "geeksforgeeks",
                        "output": "0",
                        "explanation": "The string \"geeksforgeeks\" cannot be rearranged to form a palindrome."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Create a count array of alphabet size which is typically 256. Initialize all values of count array as 0.<br />\nTraverse the given string and increment count of every character.<br />\nTraverse the count array and if the count array has more than one odd values, return false. Otherwise return true.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "palindrome",
                "slug": "palindrome"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "snapdeal",
            "de-shaw"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "int isPossible (string s)\r\n{\r\n\tunordered_map <char, int> m;\r\n\t// counting the frequency of all characters\r\n\tfor (int i = 0; i < s.length (); ++i)\r\n\t\tm[s[i]]++;\r\n    \r\n    // if there are more than 1 characters with odd occurrence, \r\n    // then the palindrome is not possible\r\n    // else, it is possible\r\n\tint odd_freq = 0;\r\n\tfor (auto i : m)\r\n\t{\r\n\t\tif (i.second & 1)\r\n\t\t\todd_freq++;\r\n\t\tif (odd_freq > 1) return 0;\r\n\t}\r\n\treturn 1;\r\n}\r\n\r\n// Contributed By: Pranay Bansal\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Sol\n{\n    // Method to check if it is possible to rearrange the characters\n    // in the string to form a palindrome\n    int isPossible (String s)\n    {\n        // Create an array to store the frequency of each character\n        int[] m = new int[256];\n        \n        // Count the frequency of each character in the string\n        for (int i = 0; i < s.length (); ++i)\n            m[(int)(s.charAt(i))]++;\n    \n        // Initialize a variable to count the number of characters with odd frequency\n        int odd_freq = 0;\n        \n        // Check the frequency of each character\n        for (int i = 0; i < 256; ++i)\n        {\n            // If the frequency is odd, increment the odd_freq variable\n            if (m[i] % 2 == 1)\n                odd_freq++;\n            \n            // If the number of characters with odd frequency exceeds 1, return 0\n            if (odd_freq > 1) \n                return 0;\n        }\n        \n        // If the number of characters with odd frequency is at most 1, return 1\n        return 1;\n    }\n}\n\n// Contributed By: Pranay Bansal",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}