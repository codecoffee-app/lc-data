{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703806,
            "title": "Perfect XOR",
            "titleSlug": "anands-maths-question3540",
            "content": "<p><span style=\"font-size:18px\">Given a number N, find the total number of possible X such that (N XOR X) == (N OR X), where 0&lt;=X&lt;=N.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>&nbsp;N = 5\n<strong>Output: </strong>2\n<strong>Explanation:\n</strong></span><span style=\"font-size:18px\">5 XOR 2 == 5 OR 2 and \n5 XOR 0 == 5 OR 0</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 7\n<strong>Output: </strong>1\n<strong>Explanation: </strong>7 XOR 0 == 7 OR 0</span>\n\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to&nbsp;read or print anything. Your task is to complete the function&nbsp;<strong>total_count()&nbsp;</strong>which takes N as input parameter and returns total count of X.&nbsp;</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(log(N))<br />\n<strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 10<sup>18</sup>&nbsp;</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative integer N, determine the number of non-negative integers X (0 <= X <= N) such that the bitwise XOR of N and X is equal to the bitwise OR of N and X. In other words, find the number of X satisfying (N XOR X) == (N OR X) for 0 <= X <= N.",
                "constraints": [
                    "1 <= N <= 10^18"
                ],
                "testcases": [
                    {
                        "input": "5",
                        "output": "2",
                        "explanation": "There are two values of X that satisfy the condition: X = 0 and X = 2.  \n- When X = 0, 5 XOR 0 = 5 and 5 OR 0 = 5. \n- When X = 2, 5 XOR 2 = 7 and 5 OR 2 = 7."
                    },
                    {
                        "input": "7",
                        "output": "1",
                        "explanation": "Only one value of X satisfies the condition: X = 0. \n- When X = 0, 7 XOR 0 = 7 and 7 OR 0 = 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Ans will be 2^no_unset_bit.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\npublic:\n    long long int  total_count(long long int n) \n    {\n    \tint tot_bit = 0,set_bit = 0, unset_bit = 0;\n    \tlong long int x = n;\n    \t// Total set bit count\n    \twhile(x > 0)\n    \t{\n    \t\tif(x & 1)\n    \t\t\tset_bit++;\n    \t\tx >>= 1;\n    \t}\n    \t// Total bit count\n    \twhile(n > 0)\n    \t{\n    \t\ttot_bit++;\n    \t\tn >>= 1;\n    \t}\n    \t// Count unset bit\n    \tunset_bit = tot_bit - set_bit;\n    \t// ans will be 2^unset_bit\n    \tlong long int ans = (1LL << unset_bit);\n    \treturn ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public long total_count(long n)\n    {\n        int tot_bit = 0, set_bit = 0, unset_bit = 0;\n        long x = n;\n\n        // Total set bit count\n        while (x > 0)\n        {\n            if ((x & 1) == 1)\n                set_bit++;\n            x >>= 1;\n        }\n\n        // Total bit count\n        while (n > 0)\n        {\n            tot_bit++;\n            n >>= 1;\n        }\n\n        // Count unset bit\n        unset_bit = tot_bit - set_bit;\n\n        // ans will be 2^unset_bit\n        long ans = (long)Math.Pow(2, unset_bit);\n\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}