{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700543,
            "title": "Ancestors in Binary Tree",
            "titleSlug": "ancestors-in-binary-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary Tree and an integer <strong>target</strong>. Find all the ancestors of the given target.</span></p>\n<p><span style=\"font-size: 18px;\"><span >Note:<strong> </strong></span></span></p>\n<ul>\n<li><span style=\"font-size: 18px;\"><span >The ancestor&nbsp;of<strong> </strong><span style=\"background-color: #ffffff; color: #040c28; font-family: 'Google Sans', arial, sans-serif;\">node <strong>x</strong> is node <strong>y,</strong> which is at the upper level of node <strong>x, </strong>and <strong>x</strong> is directly connected with node <strong>y</strong>. Consider multiple levels of ancestors to solve this problem.</span></span><br /></span></li>\n<li><span style=\"font-size: 18px;\"><span ><span style=\"background-color: #ffffff; color: #040c28; font-family: 'Google Sans', arial, sans-serif;\">In case there are no ancestors available, return an empty list.</span></span></span></li>\n</ul>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n&nbsp;\\t  1\n&nbsp;\\t/   \\\n&nbsp;     2     3\n&nbsp;   /  \\    /  \\\n&nbsp;  4   5  6   8\n&nbsp; /\n&nbsp;7\ntarget = 7<strong>\nOutput: </strong>[4 2 1]<br /></span><span style=\"font-size: 18px;\"><strong>Explanation: </strong>The given target is 7, if we go above the level of node 7, then we find 4, 2 and 1. Hence the ancestors of node 7 are 4 2 and 1<br /></span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n&nbsp;\\t </strong>1\n&nbsp;     /   \\\n&nbsp;    2     3\ntarget = 1<strong>\nOutput: </strong>[ ]<br /><strong>Explanation: </strong>Since 1 is the root node, there would be no ancestors. Hence we return an empty list.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(height of tree)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; no. of nodes &le; 10<sup>3</sup><br />1 &le; data of node &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree and a target integer, find all the ancestors of the given target node. An ancestor of a node 'x' is any node 'y' that lies on the path from the root to 'x' (excluding 'x' itself). If the target node has no ancestors, return an empty list.",
                "constraints": [
                    "1 <= Number of nodes <= 10^3",
                    "1 <= Value of each node <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "Binary Tree:\n     1\n    /   \\\n   2     3\n  /  \\   /  \\\n 4   5 6   8\n/\n7\nTarget = 7",
                        "output": "[4, 2, 1]",
                        "explanation": "The target is 7. The path from the root (1) to 7 is 1 -> 2 -> 4 -> 7. Therefore, the ancestors of 7 are 4, 2, and 1."
                    },
                    {
                        "input": "Binary Tree:\n     1\n    /   \\\n   2     3\nTarget = 1",
                        "output": "[]",
                        "explanation": "The target is 1, which is the root node.  The root node has no ancestors."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Recurse to left and right children to find the target key and if found, store the node in a list.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Traversal",
                "slug": "traversal"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Backend complete function template for C++\n\nclass Solution {\n  public:\n    // Utility function to find ancestors of a target node\n    bool AncestorsUtil(struct Node *root, int target, vector<int> &nodes) {\n        // Base case: if root is NULL, return false\n        if (root == NULL)\n            return false;\n\n        // If the target node is found, add it to the vector and return true\n        if (root->data == target)\n            return true;\n\n        // Recursively check in the left and right subtrees\n        // If the target node is found in any of the subtrees, add the root to the\n        // vector and return true\n        if (AncestorsUtil(root->left, target, nodes) ||\n            AncestorsUtil(root->right, target, nodes)) {\n            nodes.push_back(root->data);\n            return true;\n        }\n\n        // If the target node is not found in the subtrees, return false\n        return false;\n    }\n\n    // Function to find the ancestors of a target node\n    vector<int> Ancestors(struct Node *root, int target) {\n        // Create a vector to store the ancestors\n        vector<int> nodes;\n\n        // Call the utility function to find ancestors and store them in the vector\n        AncestorsUtil(root, target, nodes);\n\n        // Return the vector of ancestors\n        return nodes;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Backend complete function template for JAVA\n\nclass Solution {\n    // Utility method to check if target is present in ancestors of a node\n    public boolean AncestorsUtil(Node node, int target, ArrayList<Integer> nodes) {\n        // If the node is null, return false\n        if (node == null) return false;\n\n        // If the data of the node is equal to the target, return true\n        if (node.data == target) return true;\n\n        // Recursively check the left and right subtree for the target\n        // If target is found in either subtree, add the node's data to ancestors list\n        if (AncestorsUtil(node.left, target, nodes) ||\n            AncestorsUtil(node.right, target, nodes)) {\n            nodes.add(node.data);\n            return true;\n        }\n\n        // If target is not found in the subtree, return false\n        return false;\n    }\n\n    // Method to find the ancestors of a target node in a binary tree\n    public ArrayList<Integer> Ancestors(Node root, int target) {\n        // Create an ArrayList to store the ancestors of the target node\n        ArrayList<Integer> nodes = new ArrayList<Integer>();\n\n        // Call the utility method to find the ancestors\n        AncestorsUtil(root, target, nodes);\n\n        // Return the ArrayList containing the ancestors\n        return nodes;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "# Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    # Function to check if a node is an ancestor of the target node\n    def AncestorsUtil(self, root, target, nodes):\n        if root == None:\n            return False\n\n        if root.data == target:\n            return True\n\n        # Recursively check if the target is present in the left or right subtree\n        if (self.AncestorsUtil(root.left, target, nodes)\n                or self.AncestorsUtil(root.right, target, nodes)):\n            nodes.append(\n                root.data)  # Append the current node to the ancestors list\n            return True\n\n        return False\n\n    # Function to find all ancestors of the target node\n    def Ancestors(self, root, target):\n        nodes = []  # Empty list to store the ancestors\n\n        # Call the utility function to find the ancestors\n        self.AncestorsUtil(root, target, nodes)\n\n        return nodes  # Return the list of ancestors\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    Ancestors(root, target) {\n        let nodes = [];\n        this.AncestorsUtil(root, target, nodes);\n        return nodes;\n    }\n\n    AncestorsUtil(root, target, nodes) {\n        if (root === null) return false;\n        if (root.data === target) return true;\n        if (this.AncestorsUtil(root.left, target, nodes) ||\n            this.AncestorsUtil(root.right, target, nodes)) {\n            nodes.push(root.data);\n            return true;\n        }\n        return false;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}