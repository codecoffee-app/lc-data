{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703791,
            "title": "AND operation",
            "titleSlug": "and-operation5726",
            "content": "<p><span style=\"font-size:18px\">Given two integers L and R . Find the resultant after applying the series of Bitwise AND ( &amp; ) operation on every natural number between the Range L&nbsp;and R (including both).</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>L = 8, R = 13\n<strong>Output: </strong>8\n<strong>Explanation: \n</strong></span><span style=\"font-size:18px\">8 AND 9 AND 10 AND 11 AND 12 AND 13 = 8.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input: </strong>L = 2, R = 3\n<strong>Output: </strong>2\n<strong>Explanation: </strong>2 AND 3 = 2.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>find_and()</strong>&nbsp;which takes l&nbsp;and r&nbsp;as input parameter and returns AND operation on every number between l&nbsp;to r.</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(log(n))<br />\n<strong>Expected Time Complexity:&nbsp;</strong>O(1)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= L&lt;= R&nbsp;&lt; =10<sup>8</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, L and R, find the result of applying a series of bitwise AND (&) operations on every natural number within the range [L, R] (inclusive).",
                "constraints": [
                    "1 <= L <= R <= 10^8"
                ],
                "testcases": [
                    {
                        "input": "L = 8, R = 13",
                        "output": "8",
                        "explanation": "The bitwise AND of 8, 9, 10, 11, 12, and 13 is 8."
                    },
                    {
                        "input": "L = 2, R = 3",
                        "output": "2",
                        "explanation": "The bitwise AND of 2 and 3 is 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>An&nbsp;<strong>efficient solution</strong>&nbsp;is to follow following steps.<br />\n1) Find position of Most Significant Bit (MSB) in both numbers.<br />\n2) If positions of MSB are different, then result is 0.<br />\n3) If positions are same. Let positions be msb_p.<br />\n&hellip;&hellip;a) We add 2<sup>msb_p</sup>&nbsp;to result.<br />\n&hellip;&hellip;b) We subtract 2<sup>msb_p</sup>&nbsp;from x and y,<br />\n&hellip;&hellip;c) Repeat steps 1, 2 and 3 for new values of x and y.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\nclass Solution {\npublic:\n    int  find_and(int l, int r ) \n    {\n    \tlong long int diff = l^r;\n    \tdiff |= diff >> 1;\n    \tdiff |= diff >> 2;\n    \tdiff |= diff >> 4;\n    \tdiff |= diff >> 8;\n    \tdiff |= diff >> 16;\n    \tdiff |= diff >> 32;\n\n    \tint ans = (l & (~diff));\n    \treturn ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}