{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714258,
            "title": "Another Coin Change Problem",
            "titleSlug": "another-coin-change-problem--170647",
            "content": "<p><span style=\"font-size: 18px;\">Given three integers <strong>n</strong>, <strong>k</strong>,<strong> target</strong>,&nbsp;and an array of coins of size <strong>n</strong>.&nbsp;Find if it is possible to make a change of&nbsp;<strong>target&nbsp;</strong>cents by using an infinite supply of each coin&nbsp;but the total number of coins used must be exactly equal to&nbsp;<strong>k</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 5, k = 3, target = 11\ncoins = {1, 10, 5, 8, 6}</span>\n\n<span style=\"font-size: 18px;\"><strong>Output:</strong> \n1</span>\n\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>\n2 coins of 5 and 1 coins of 1 can be used \nto make change of 11 i.e. 11 =&gt; 5+5+1.</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 3, k = 5, target = 25\ncoins = {7, 2, 4}</span>\n\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n1</span>\n\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\n3 coins 7, 2 coins of 2 can be used to\nmake change of 25 i.e. 25 =&gt; 7+7+7+2+2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />This is a function problem. You only need to complete the function makeChanges()&nbsp;that 3 integers&nbsp;n, k, target,&nbsp;and an array&nbsp;coins as&nbsp;parameters and return True&nbsp;or False.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n*k*target)<br /><strong>Expected Space Complexity: </strong>O(k*target)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n, k, coins[i]&nbsp;&lt;= 100<br />1 &lt;= target &lt;= 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given the number of coin types `n`, the number of coins to use `k`, the target value `target`, and an array `coins` representing the available coin denominations, determine if it's possible to form the `target` value using exactly `k` coins, where an unlimited supply of each coin denomination is available.",
                "constraints": [
                    "1 <= n, k, coins[i] <= 100",
                    "1 <= target <= 1000"
                ],
                "testcases": [
                    {
                        "input": "n = 5, k = 3, target = 11\ncoins = {1, 10, 5, 8, 6}",
                        "output": "1",
                        "explanation": "It is possible to form a sum of 11 using exactly 3 coins. For example, using two coins of value 5 and one coin of value 1 (5 + 5 + 1 = 11)."
                    },
                    {
                        "input": "n = 3, k = 5, target = 25\ncoins = {7, 2, 4}",
                        "output": "1",
                        "explanation": "It is possible to form a sum of 25 using exactly 5 coins. For example, using three coins of value 7 and two coins of value 2 (7 + 7 + 7 + 2 + 2 = 25)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Let&#39;s say state[i][j] denotes that if it is possible to make changes of j&nbsp;cents using i coins then to find state[i][j] we needed the value of state[i-1][j-x] where x is a coin.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    bool solve(int N, int K, int target, vector<int> &coins,\r\n        vector<vector<int>> &dp) {\r\n        if (K == 0 and target == 0) return true;\r\n        if (K <= 0 or target <= 0) return false;\r\n        if (dp[K][target] != -1) return dp[K][target];\r\n        bool ans = false;\r\n        for (int i = 0; i < N; i++) {\r\n            ans |= solve(N, K - 1, target - coins[i], coins, dp);\r\n        }\r\n        return dp[K][target] = ans;\r\n    }\r\n    bool makeChanges(int N, int K, int target, vector<int> &coins) {\r\n        vector<vector<int>> dp(K + 5, vector<int>(target + 5, -1));\r\n        return solve(N, K, target, coins, dp);\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static boolean makeChanges(int N, int K, int target, int[] coins) {\r\n        boolean[][] dp = new boolean[K + 1][target + 1];\r\n        dp[0][0] = true;\r\n        for (int i = 1; i < K + 1; i++) {\r\n            for (int j = 1; j < target + 1; j++) {\r\n                for (int l : coins) {\r\n                    if (j < l) continue;\r\n                    dp[i][j] |= dp[i - 1][j - l];\r\n                }\r\n            }\r\n        }\r\n        return dp[K][target];\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\nclass Solution:\n    def makeChanges(self, N: int, k: int, target: int, coins: List[int]) -> bool:\n        dp = [[False] * (target + 1) for _ in range(k + 1)]  # create a dp table to store the states\n        dp[0][0] = True  # base case: if no coins and target is 0, it is possible to make the change\n        for i in range(1, k + 1):  # iterate over the number of coins\n            for j in range(1, target + 1):  # iterate over the target amounts\n                for l in coins:  # iterate over the available coins\n                    if j < l:  # if the current target amount is less than the coin value, skip\n                        continue\n                    dp[i][j] |= dp[i - 1][j - l]  # update the dp table based on the previous states\n        return dp[k][target]  # return if it is possible to make the desired target amount with given coins",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public bool makeChanges(int N, int K, int target, List<int> coins)\n    {\n        if (K == 0 && target == 0) return true;\n        if (K <= 0 || target <= 0) return false;\n        int[,] dp = new int[K + 5, target + 5];\n        for (int i = 0; i < K + 5; i++)\n        {\n            for (int j = 0; j < target + 5; j++)\n            {\n                dp[i, j] = -1;\n            }\n        }\n        return solve(N, K, target, coins, dp);\n    }\n\n    public bool solve(int N, int K, int target, List<int> coins, int[,] dp)\n    {\n        if (K == 0 && target == 0) return true;\n        if (K <= 0 || target <= 0) return false;\n        if (dp[K, target] != -1) return dp[K, target] != 0;\n        bool ans = false;\n        for (int i = 0; i < N; i++)\n        {\n            ans |= solve(N, K - 1, target - coins[i], coins, dp);\n        }\n        dp[K, target] = ans ? 1 : 0;\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}