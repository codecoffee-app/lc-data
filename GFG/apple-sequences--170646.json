{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713596,
            "title": "Apple Sequences",
            "titleSlug": "apple-sequences--170646",
            "content": "<p><span style=\"font-size: 18px;\">There is a string&nbsp;of size <strong>n</strong>&nbsp;containing only '<strong>A'</strong>&nbsp;and '<strong>O'</strong>. '<strong>A'</strong> stands for Apple, and '<strong>O'</strong> stands for Orange. We have&nbsp;<strong><em>m</em></strong>&nbsp;number of spells, each spell allows us to convert an orange into an apple. </span></p>\n<p><span style=\"font-size: 18px;\">Find the longest subarray of apples you can make, given a string and the value of <strong>m</strong>.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:\nN = 5\nM = 1\narr[] = 'AAOAO'\n<strong>Output:</strong>&nbsp;4&nbsp;\n<strong>Explanation</strong>: Changing the orange at \n3rd position into an apple gives \nus the maximum possible answer.\n</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 5\nM = 1\narr = 'AOOAO'\n<strong>Output:&nbsp;</strong>2\n<strong>Explanation</strong>: Changing any orange into \nan apple will give us a sequence \nof length 2.</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>appleSequence</strong><strong>()</strong>&nbsp;which takes the array in the form of a string, its size n,<strong>&nbsp;</strong>and an integer m<strong>&nbsp;</strong>as input parameters&nbsp;and returns the largest apple sequences after converting m oranges.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= m &lt;= n &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string of length `n` consisting of only 'A' (Apple) and 'O' (Orange) characters, and an integer `m` representing the number of spells you can use to convert oranges into apples, find the length of the longest contiguous subarray of apples you can create.",
                "constraints": [
                    "1 <= m <= n <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "N = 5\nM = 1\narr[] = 'AAOAO'",
                        "output": "4",
                        "explanation": "By changing the orange at the 3rd position (index 2) to an apple, the string becomes 'AAAAO'. This results in a longest apple subarray of length 4."
                    },
                    {
                        "input": "N = 5\nM = 1\narr = 'AOOAO'",
                        "output": "2",
                        "explanation": "Changing any of the oranges to apples will only result in a contiguous sequence of at most 2 apples. For example, changing the orange at index 1 will result in 'AAOAO', which has the longest apple subarray of length 2. Changing the orange at index 2 will also result in 'AOAOO', which gives maximum length of 2 as well."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try to solve this problem with 2 pointers approach.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "implementation",
                "slug": "implementation"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "ola-cabs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{   \npublic:\n    // Function to find the length of the longest sequence\n    int appleSequences(int n, int m, string arr){\n        int start = 0, end = 0; // Initialize start and end pointer for the sliding window\n        int curr = 0; // Initialize current count of 'O' in the window\n        int maxx = 0; // Initialize maximum length of sequence found so far\n        while(end<n){\n            if(arr[end]=='A'){ // If 'A' is encountered, update the maximum length\n                maxx=max(maxx, end-start+1);\n            }\n            if(arr[end]=='O'){ // If 'O' is encountered\n                curr++; // Increment the current count of 'O'\n                if(curr>m){ // If current count of 'O' exceeds m\n                    while(start<end && arr[start]!='O') // Move the start pointer until an 'O' is found\n                        start++;\n                    start++; // Increase the start pointer by 1 to exclude the leftmost 'O'\n                }\n                maxx=max(maxx, end-start+1); // Update the maximum length\n            }\n            end++; // Move the end pointer to the right\n        }\n        return maxx; // Return the maximum length of the sequence\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n    public static int appleSequence(int n, int m, String arr){\r\n        //initialize variables\r\n        int start = 0, end = 0;\r\n        int curr=0;\r\n        int maxx=0;\r\n        char c[]=arr.toCharArray();\r\n        \r\n        //iterate over the characters of the array\r\n        while(end<n){\r\n            //check if current character is 'A'\r\n            if(c[end]=='A'){\r\n                //update maximum length if 'A' is encountered\r\n                maxx=Math.max(maxx, end-start+1);\r\n            }\r\n            //check if current character is 'O'\r\n            if(c[end]=='O'){\r\n                //increment the count of 'O'\r\n                curr++;\r\n                //check if count of 'O' exceeds limit 'm'\r\n                if(curr>m){\r\n                    //move the start pointer to skip the first 'O'\r\n                    while(start<end && c[start]!='O')\r\n                        start++;\r\n                    start++;    \r\n                }\r\n                //update maximum length if 'O' is encountered\r\n                maxx=Math.max(maxx, end-start+1);\r\n            }\r\n            //move to the next character\r\n            end++;\r\n        }\r\n        //return the maximum length\r\n        return maxx;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def appleSequences(self, n, m, arr):\r\n        start=0\r\n        end=0\r\n        curr=0\r\n        maxx=0\r\n        while end<n:\r\n            #Checking if current element is \"A\"\r\n            if arr[end]==\"A\":\r\n                #If yes, update the maximum length of sequence if needed\r\n                maxx=max(maxx,end-start+1)\r\n            #Checking if current element is \"O\"\r\n            if arr[end]==\"O\":\r\n                #Increment the count of \"O\" elements in current sequence\r\n                curr+=1\r\n                #If count of \"O\" elements exceeds the given limit \"m\"\r\n                if curr>m:\r\n                    #Remove the first \"O\" element from the sequence until the count is within limit\r\n                    while start<end and arr[start]!=\"O\":\r\n                        start+=1\r\n                        \r\n                    start+=1\r\n                #Update the maximum length of sequence if needed\r\n                maxx=max(maxx,end-start+1)\r\n            #Move to next element\r\n            end+=1\r\n        #Return the maximum length of sequence\r\n        return maxx",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public int appleSequences(int n, int m, string arr)\n    {\n        int start = 0, end = 0;\n        int curr = 0;\n        int maxx = 0;\n        while (end < n)\n        {\n            if (arr[end] == 'A')\n            {\n                maxx = Math.Max(maxx, end - start + 1);\n            }\n            if (arr[end] == 'O')\n            {\n                curr++;\n                if (curr > m)\n                {\n                    while (start < end && arr[start] != 'O')\n                        start++;\n                    start++;\n                }\n                maxx = Math.Max(maxx, end - start + 1);\n            }\n            end++;\n        }\n        return maxx;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}