{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702944,
            "title": "Archana and her tricky string",
            "titleSlug": "archana-and-her-tricky-string2910",
            "content": "<p><span style=\"font-size:20px\">Archana is very fond of strings.&nbsp; Help her&nbsp;to solve a problem. The problem is as follows:-<br />\r\nGiven is a string of length L. Her&nbsp;task is to find the longest string from the given string with characters arranged in descending order of their ASCII code and in arithmetic progression. She&nbsp;wants the common difference should be as low as possible(at least 1) and the characters of the string to be of higher ASCII value.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:20px\"><strong>Input:</strong>\r\ns = &quot;ABCPQR&quot;<strong>\r\nOutput: </strong>&quot;RQP&quot;\r\n<strong>Explanation: </strong>Two strings of maximum length\r\n&nbsp;\\t\\tare possible- &ldquo;CBA&rdquo; and &ldquo;RPQ&rdquo;.\r\n&nbsp;\\t\\tBut he wants the string to be \r\n&nbsp;\\t\\tof higher ASCII value \r\n&nbsp;\\t\\ttherefore, the output is &ldquo;RPQ&rdquo;.</span></pre>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:20px\"><strong>Input:\r\n</strong>s = &quot;ADGJPRT&quot;\r\n<strong>Output: </strong>&quot;JGDA&quot;\r\n<strong>Explanation: </strong>The String of maximum length\r\n&nbsp;\\t\\tis &ldquo;JGDA&rdquo;.</span></pre>\r\n\r\n<p><span style=\"font-size:20px\"><strong>User Task:</strong><br />\r\nYour task is to complete the function&nbsp;<strong>findString()&nbsp;</strong>which takes a single argument(string s) and returns the answer. You need not take any input or print anything.</span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|s|)<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(number of distinct alphabets)</span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Constraints:</strong><br />\r\n3 &lt;= L &lt;= 1000<br />\r\nA &lt;= s[i] &lt;= Z<br />\r\nThe string contains minimum three&nbsp;different characters.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `s` of length `L`, find the longest substring of `s` where the characters are arranged in descending order of their ASCII code and form an arithmetic progression. The common difference between the ASCII values of consecutive characters should be as small as possible (at least 1), and the characters in the substring should have higher ASCII values.  Return the longest such substring.",
                "constraints": [
                    "3 <= L <= 1000",
                    "A <= s[i] <= Z",
                    "The string contains at least three different characters."
                ],
                "testcases": [
                    {
                        "input": "ABCPQR",
                        "output": "RQP",
                        "explanation": "Two strings of maximum length are possible: \"CBA\" and \"RPQ\".  The problem requires the string with higher ASCII values, therefore the output is \"RPQ\"."
                    },
                    {
                        "input": "ADGJPRT",
                        "output": "JGDA",
                        "explanation": "The longest string satisfying the conditions is \"JGDA\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>maximum possible common difference is 12.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "series",
                "slug": "series"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nstring findString(string s){\r\n    int i,j,k,o,t=0,ans,u,w1,p=0,q=0,w2;\r\n\t//for(i=1;i<=a;i++)\r\n\t//{\r\n    u=-1;\r\n    int l=s.length();\r\n    int n[26];//=new int[26];\r\n    memset(n,0,sizeof n);\r\n    int n2[12][2];//=new int[12][2];\r\n    memset(n2,0,sizeof n2);\r\n    for(j=0;j<l;j++)\r\n    {\r\n        p=s[j]-65;\r\n        n[p]++;\r\n    }\r\n    ans=0;\r\n    w2=-1;\r\n    for(j=1;j<=12;j++)\r\n    {\r\n        for(k=25;k>=25-j+1;k--)\r\n        {\r\n            t=0;w1=0;\r\n            for(o=k;o>=0;o-=j)\r\n            {\r\n                if(n[o]>0 && t==0)\r\n                {\r\n                    p=o;t=1;q=o;w1++;\r\n                }\r\n                else if(n[o]>0)\r\n                {\r\n                    q=o;w1++;\r\n                }\r\n                else\r\n                {\r\n                    t=0;w1=0;\r\n                }\r\n                if(w1>w2)\r\n                {\r\n                    n2[j-1][0]=q;n2[j-1][1]=p;w2=w1;\r\n                }\r\n            }\r\n        }\r\n        if((n2[j-1][1]-n2[j-1][0])/j+1>u)\r\n        {\r\n            u=(n2[j-1][1]-n2[j-1][0])/j+1;\r\n            ans=j;\r\n        }\r\n    }\r\n    string res = \"\";\r\n    for(j=n2[ans-1][1];j>=n2[ans-1][0];j-=ans)\r\n        res+=(j+'A');\r\n    //System.out.print((char)(j+65));\r\n    //System.out.println();\r\n\t//}\r\n\treturn res;\r\n}",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}