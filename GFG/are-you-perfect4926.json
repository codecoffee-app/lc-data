{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704434,
            "title": "Nearest Perfect Square",
            "titleSlug": "are-you-perfect4926",
            "content": "<p><span style=\"font-size:20px\">Given a number N. Find out the nearest number which is a perfect square and also the absolute difference between them.</span></p>\r\n\r\n<p><strong><span style=\"font-size:20px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:20px\"><strong>Input:</strong>\r\nN = 25\r\n<strong>Output:</strong>\r\n25 0\r\n<strong>Explanation:</strong>\r\nSince 25 is a perfect square, it is the \r\nclosest perfect square to itself and \r\nabsolute difference is 25-25=0.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:20px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:20px\"><strong>Input:</strong>\r\nN = 1500\r\n<strong>Output:</strong>\r\n1521 21\r\n<strong>Explanation:</strong>\r\nTwo of the closest perfect squares to \r\n1521 are 1444.Thus, 1521 is the closest \r\nperfect square to 1500 and the absolute \r\ndifference  between them is 1521-1500=21.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:20px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything.Your Task is to complete the function <strong>nearestPerfectSquare()</strong> which takes the number N as input parameters and returns the nearest perfect square as well as the absolute difference between them.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:20px\"><strong>Expected Time Complexity:</strong>O(sqrt(N))<br />\r\n<strong>Expected Space Auxillary:</strong>O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:20px\"><strong>Constraints:</strong><br />\r\n1&lt;=N&lt;=10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, find the nearest perfect square and the absolute difference between N and that perfect square.",
                "constraints": [
                    "1 <= N <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "25",
                        "output": "25 0",
                        "explanation": "25 is a perfect square. The closest perfect square to 25 is 25 itself, and the absolute difference is 25 - 25 = 0."
                    },
                    {
                        "input": "1500",
                        "output": "1521 21",
                        "explanation": "The closest perfect square to 1500 is 1521 (39^2). The absolute difference between 1500 and 1521 is |1500 - 1521| = 21."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">A number is a&nbsp; perfect square if the floor of its square root is equal to the ceil of its square root.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Numbers",
                "slug": "numbers"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the nearest perfect square to a given number.\n    vector<int> nearestPerfectSquare(int N) {\n        // Calculating the square root of the given number.\n        double root = sqrt(N);\n\n        // Calculating the rounded down and rounded up square root values.\n        double lower = floor(root), upper = ceil(root);\n        \n        // Creating a vector to store the nearest perfect square and the difference.\n        vector<int> ans(2);\n\n        // Checking if the difference between the upper and actual square root is smaller than the difference between the lower and actual square root.\n        if (upper - root <= root - lower) {\n            // If true, set the nearest perfect square as the square of the upper value.\n            ans[0] = upper * upper;\n        } else {\n            // Otherwise, set the nearest perfect square as the square of the lower value.\n            ans[0] = lower * lower;\n        }\n\n        // Calculate the difference between the nearest perfect square and the given number.\n        ans[1] = abs(ans[0] - N);\n\n        // Return the vector containing the nearest perfect square and the difference.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    // Function to find the nearest perfect square to a given number N\n    int[] nearestPerfectSquare(int N) {\n        // Calculating the square root of N\n        double root = Math.sqrt(N);\n        // Finding the lower and upper integer values of the square root\n        double lower = Math.floor(root), upper = Math.ceil(root);\n        // Creating an array to store the result\n        int[] ans = new int[2];\n        // If the upper square is closer to the square root, assign it to the result array\n        if (upper - root <= root - lower) {\n            ans[0] = (int)(upper * upper);\n        } else {\n            // If the lower square is closer to the square root, assign it to the result array\n            ans[0] = (int)(lower * lower);\n        }\n        // Calculating the absolute difference between the perfect square and N\n        ans[1] = Math.abs(ans[0] - N);\n        // Returning the result array\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nimport math\r\nclass Solution:\r\n    \r\n    # Function to find the nearest perfect square to N.\r\n    def nearestPerfectSquare(self,N):\r\n        root=math.sqrt(N)\r\n        lower=math.floor(root)\r\n        upper=math.ceil(root)\r\n        ans=[0]*2\r\n        \r\n        # Checking if upper bound is closer to the square root of N.\r\n        if(upper-root<=root-lower):\r\n            ans[0]=(int)(upper*upper)    # Storing the nearest perfect square.\r\n        else:\r\n            ans[0]=(int)(lower*lower)    # Storing the nearest perfect square.\r\n        \r\n        ans[1]=abs(ans[0]-N)    # Calculating the absolute difference between the nearest perfect square and N.\r\n        return ans    # Returning the result as a list containing the nearest perfect square and the absolute difference.",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {number} N\r\n * @returns {number[]}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to find the nearest perfect square.\r\n    nearestPerfectSquare(N)\r\n    {\r\n        let root = Math.sqrt(N);\r\n        let lower = Math.floor(root);\r\n        let upper = Math.ceil(root);\r\n        let ans = [0, 0];\r\n\r\n        // Checking if upper bound is closer to the square root of N.\r\n        if(upper - root <= root - lower){\r\n            ans[0] = Math.pow(upper, 2); // Storing the nearest perfect square.\r\n        } else{\r\n            ans[0] = Math.pow(lower, 2); // Storing the nearest perfect square.\r\n        }\r\n        \r\n        ans[1] = Math.abs(ans[0] - N); // Calculating the absolute difference between the nearest perfect square and N.\r\n        return ans; // Returning the result as a list containing the nearest perfect square and the absolute difference.\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}