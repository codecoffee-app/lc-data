{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705827,
            "title": "Print the Sequence",
            "titleSlug": "arithmetic-progression3351",
            "content": "<p><span style=\"font-size:18px\">Construct the sequence arr[1], arr[2], ... by the following rules. For i=1 we put arr[1]=1. Now let i &gt;= 2. Then arr[i] is the least positive integer such that the following two conditions hold<br />\r\n(i) arr[i] &gt; arr[i - 1];<br />\r\n(ii) for all k, j &lt; i we have arr[i] is not equal to n1 * arr[k] - n2 * arr[j].<br />\r\nFind the first <strong>n</strong> terms of this sequence.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:</span>\r\n<span style=\"font-size:18px\"><strong>n1 = </strong>2, <strong>n2</strong> <strong>= </strong>1, <strong>n = </strong>10</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">1 2 4 5 10 11 13 14 28 29</span> \r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">The first 10 terms of the sequence is printed.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:</span>\r\n<span style=\"font-size:18px\"><strong>n1 = </strong>1, <strong>n2</strong> <strong>= </strong>1, <strong>n = </strong>5</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\r\n<span style=\"font-size:18px\">1 2 3 4 5</span>\r\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\r\n<span style=\"font-size:18px\">The first 5 terms of the sequence is printed.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>findSeq()</strong> which takes 3 Integers n1, n2, and n as input and returns a vector denoting the first n terms of the sequence.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(n<sup>2</sup>)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;= n1,n2 &lt;= 50</span><br />\r\n<span style=\"font-size:18px\">1 &lt;= n &lt;= 10<sup>3</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Construct a sequence of integers, `arr[1], arr[2], ...`, according to the following rules:\n\n1.  `arr[1] = 1`.\n2.  For `i >= 2`, `arr[i]` is the smallest positive integer satisfying:\n    *   `arr[i] > arr[i-1]`\n    *   For all `k, j < i`, `arr[i] != n1 * arr[k] - n2 * arr[j]`\n\nGiven integers `n1`, `n2`, and `n`, find the first `n` terms of this sequence.",
                "constraints": [
                    "1 <= n1, n2 <= 50",
                    "1 <= n <= 1000"
                ],
                "testcases": [
                    {
                        "input": "n1 = 2, n2 = 1, n = 10",
                        "output": "1 2 4 5 10 11 13 14 28 29",
                        "explanation": "The sequence starts with 1. The next element must be greater than the previous and not equal to 2*arr[k] - arr[j] for any prior k and j. For example, 3 cannot be used as 2*arr[1] - arr[1] = 2*1 -1 = 1 which already exists."
                    },
                    {
                        "input": "n1 = 1, n2 = 1, n = 5",
                        "output": "1 2 3 4 5",
                        "explanation": "The sequence starts with 1. The next element must be greater than the previous and not equal to arr[k] - arr[j] for any prior k and j. In this case, all integers greater than the previous element satisfy this, thus forming the sequence 1,2,3,4,5"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">After finding some arr[k], mark all numbers greater than arr[k] that definitely can&#39;t be the future elements of this sequence.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\n\r\nclass Solution {\r\n  public:\r\n    vector<int> findSeq(int n1, int n2, int n) {\r\n        \r\n        int MAX_N = 1000;\r\n        int BOUND = MAX_N*MAX_N+2*MAX_N;\r\n         \r\n        int seqs[MAX_N+1];\r\n        bool marked[BOUND];\r\n        \r\n        memset(marked, false, BOUND);\r\n        seqs[0] = 1;\r\n        int cnt = 1;\r\n        for(; cnt<n; cnt++)\r\n        {\r\n        \tfor(int j=0; j<cnt; j++)\r\n        \t{\r\n        \t    int z;\r\n        \t    z = n1*seqs[cnt-1]-n2*seqs[j];\r\n        \t    if (z > seqs[cnt-1])\r\n        \t\t    marked[z] = true;\r\n         \r\n        \t    z = n1*seqs[j] - n2*seqs[cnt-1];\r\n        \t    if (z > seqs[cnt-1])\r\n        \t\t    marked[z] = true;\r\n        \t}\r\n         \r\n        \tfor(int j=seqs[cnt-1]+1; j<BOUND; j++)\r\n        \t{\r\n        \t    if (!marked[j])\r\n        \t    {\r\n            \t\tseqs[cnt] = j;\r\n            \t\tmarked[j] = true;\r\n            \t\tbreak;\r\n        \t    }\r\n        \t}\r\n        }\r\n        \r\n        vector<int> ans;\r\n        \r\n        for(int i=0; i<n; i++)\r\n            ans.push_back(seqs[i]);\r\n            \r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to find a sequence from n1 to n2 with sum n.\n    public List<int> findSeq(int n1, int n2, int n)\n    {\n        int MAX_N = 1000;\n        int BOUND = MAX_N * MAX_N + 2 * MAX_N;\n\n        int[] seqs = new int[MAX_N + 1];\n        bool[] marked = new bool[BOUND];\n\n        Array.Fill(marked, false);\n        seqs[0] = 1;\n        int cnt = 1;\n        for (; cnt < n; cnt++)\n        {\n            for (int j = 0; j < cnt; j++)\n            {\n                int z;\n                z = n1 * seqs[cnt - 1] - n2 * seqs[j];\n                if (z > seqs[cnt - 1])\n                    marked[z] = true;\n\n                z = n1 * seqs[j] - n2 * seqs[cnt - 1];\n                if (z > seqs[cnt - 1])\n                    marked[z] = true;\n            }\n\n            for (int j = seqs[cnt - 1] + 1; j < BOUND; j++)\n            {\n                if (!marked[j])\n                {\n                    seqs[cnt] = j;\n                    marked[j] = true;\n                    break;\n                }\n            }\n        }\n\n        List<int> ans = new List<int>();\n\n        for (int i = 0; i < n; i++)\n            ans.Add(seqs[i]);\n\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}