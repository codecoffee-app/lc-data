{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705044,
            "title": "Arrange Balls",
            "titleSlug": "arrange-balls0052",
            "content": "<p><span style=\"font-size: 18px;\">There are p&nbsp;balls of type P, q&nbsp;balls of type Q and r&nbsp;balls of type R. Using the balls we want to create a straight line such that no two balls of same type are adjacent.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>p = 2, q = 2, r = 2\n<strong>Output: </strong>30\n<strong>Explanation: </strong>There are 30 possible arrangements\nof balls. Some of them are PQRPQR,PQRPRQ,PRQPQR,PRQPRQ<br /></span>,...</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>p = 1, q = 1, r = 1\n<strong>Output: </strong>6\n<strong>Explanation: </strong>There are 6 possible arrangements\nand these are PQR, PRQ, QPR, QRP, RPQ, RQP.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>CountWays()</strong>&nbsp;which takes count of P type balls, Q type balls and R type balls and returns total number of possible arrangements such that no two balls of same type are adjacent modulo 10<sup>9</sup>&nbsp;+ 7.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N<sup>3</sup>) where N = max(p, q, r)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(N<sup>3</sup>)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constranits:&nbsp;</strong><br />1 &lt;= p, q, r &lt;= 100&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given three types of balls: P, Q, and R, with quantities p, q, and r respectively, determine the number of arrangements in a straight line such that no two balls of the same type are adjacent. Calculate the number of valid arrangements modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= p, q, r <= 100"
                ],
                "testcases": [
                    {
                        "input": "p = 2, q = 2, r = 2",
                        "output": "30",
                        "explanation": "There are 30 possible arrangements of the balls where no two balls of the same type are adjacent. Examples include: PQRPQR, PQRPRQ, PRQPQR, and PRQPRQ."
                    },
                    {
                        "input": "p = 1, q = 1, r = 1",
                        "output": "6",
                        "explanation": "There are 6 possible arrangements: PQR, PRQ, QPR, QRP, RPQ, RQP."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use dynamic programming</p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "permutation",
                "slug": "permutation"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "long long int dp[3][101][101][101]; // initialize a 4-dimensional array for dynamic programming\nclass Solution{\n\tpublic:\n\tint tot = 0; // initialize a variable tot with 0\n\tlong long int mod = 1e9 + 7; // initialize a variable mod with 10^9 + 7\n\tlong long int add(long long int x, long long int y){ // function to add two numbers\n\t\treturn (int)((x + y) % mod); // return the sum of x and y modulo mod\n\t}\n\tlong long int fun(int l, int p, int q, int r){ // recursive function to calculate the number of ways\n\t\tif(p == 0 and q == 0 and r == 0)return 1; // base case, if all the counts become 0, return 1\n\t\tif(p < 0 or q < 0 and r < 0)return 0; // base case, if any of the counts becomes negative, return 0\n\t\tlong long int &ans = dp[l][p][q][r]; // reference variable ans to store the intermediate results\n\t\tif(ans != -1)\n\t\t\treturn ans; // if ans is already calculated, return ans\n\t\tans = 0; // otherwise, initialize ans with 0\n\t\tif(l == 0){ // if l is 0\n\t\t\tif(q)ans = add(ans, fun(1, p, q-1, r)); // recursively calculate the number of ways by subtracting 1 from q\n\t\t\tif(r)ans = add(ans, fun(2, p, q, r-1)); // recursively calculate the number of ways by subtracting 1 from r\n\t\t}\n\t\telse if(l == 1){ // if l is 1\n\t\t\tif(p)ans = add(ans, fun(0, p - 1, q, r)); // recursively calculate the number of ways by subtracting 1 from p\n\t\t\tif(r)ans = add(ans, fun(2, p, q, r - 1)); // recursively calculate the number of ways by subtracting 1 from r\n\t\t}\n\t\telse{ // if l is 2\n\t\t\tif(p)ans = add(ans, fun(0, p - 1, q, r)); // recursively calculate the number of ways by subtracting 1 from p\n\t\t\tif(q)ans = add(ans, fun(1, p, q - 1, r)); // recursively calculate the number of ways by subtracting 1 from q\n\t\t}\n\t\treturn ans; // return ans\n\t}\n\tint CountWays(int p, int q, int r) { // main function to count the number of ways\n\t\ttot = p + q + r; // calculate the total count by adding p, q, and r\n\t\tlong long int ans  = 0; // initialize a variable ans with 0\n\t\tmemset(dp, -1, sizeof(dp)); // set all the elements of dp to -1\n\t\tif(p)ans = add(ans, fun(0, p-1, q, r)); // recursively calculate the number of ways by subtracting 1 from p\n\t\tif(q)ans = add(ans, fun(1, p, q-1, r)); // recursively calculate the number of ways by subtracting 1 from q\n\t\tif(r)ans = add(ans, fun(2, p, q, r-1)); // recursively calculate the number of ways by subtracting 1 from r\n\t\treturn (int)ans; // return the ans as integer\n\t}\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}