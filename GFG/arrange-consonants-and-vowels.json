{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700591,
            "title": "Arrange Consonants and Vowels",
            "titleSlug": "arrange-consonants-and-vowels",
            "content": "<p><span style=\"font-size: 12pt;\">Given a singly linked list containing nodes with English alphabets <strong>('a'-'z')</strong>. Rearrange the linked list&nbsp;in such a way that all the vowels come before the consonants while maintaining the <strong>order of their arrival</strong>.&nbsp;</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input: </strong>Linked list: a -&gt; b -&gt; c -&gt; d -&gt; e -&gt; f -&gt; g -&gt; h -&gt; i <br /><strong>Output:</strong> a -&gt; e -&gt; i -&gt; b -&gt; c -&gt; d -&gt; f -&gt; g -&gt; h<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700591/Web/Other/blobid0_1725181056.png\" width=\"444\" height=\"100\" /><br /><strong>Explanation:</strong> After rearranging the input linked list according to the condition the resultant linked list will be as shown in output.</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input:</strong> Linked list: a -&gt; b -&gt; a -&gt; b -&gt; d -&gt; e -&gt; e -&gt; d <br /><strong>Output:</strong> a -&gt; a -&gt; e -&gt; e -&gt; b -&gt; b -&gt; d -&gt; d<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700591/Web/Other/blobid1_1725181062.png\" height=\"100\" /><br /><strong>Explanation:</strong> After rearranging the input linked list according to the condition the resultant linked list will be as shown in output.<br /></span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity :</strong>&nbsp;<strong>&nbsp;</strong>O(n)<br /><strong>Expected Auxiliary Space :&nbsp;&nbsp;</strong>O(1)</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong><br />1 &lt;= size of linked list &lt;= 10<sup>6</sup><br />'a' &lt;= elements of linked list &lt;= 'z'</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Use two pointers to traverse the linked list: one for vowels and one for consonants, and re-link the nodes accordingly.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Linked List",
                "slug": "linked-list"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if a character is a vowel\n    bool isVowel(char x) {\n        return (x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u');\n    }\n\n    // Function to rearrange the linked list based on vowels\n    struct Node *arrangeCV(Node *head) {\n        Node *newHead = head;\n        Node *latestVowel;\n        Node *curr = head;\n\n        // Return NULL if the linked list is empty\n        if (head == NULL)\n            return NULL;\n\n        // If the first node is a vowel, set it as the latest vowel\n        if (isVowel(head->data))\n            latestVowel = head;\n        else {\n            // Find the next vowel node or reach the end of the linked list\n            while (curr->next != NULL && !isVowel(curr->next->data))\n                curr = curr->next;\n\n            // Return the head if no vowel node is found\n            if (curr->next == NULL)\n                return head;\n\n            // Set the next vowel node as the latest vowel\n            latestVowel = newHead = curr->next;\n            curr->next = curr->next->next;\n            latestVowel->next = head;\n        }\n\n        // Iterate through the linked list to rearrange nodes\n        while (curr != NULL && curr->next != NULL) {\n            // If the next node is a vowel\n            if (isVowel(curr->next->data)) {\n                // If curr is the latest vowel, move the latestVowel pointer\n                if (curr == latestVowel)\n                    latestVowel = curr = curr->next;\n                else {\n                    // Rearrange the nodes\n                    Node *temp = latestVowel->next;\n                    latestVowel->next = curr->next;\n                    latestVowel = latestVowel->next;\n                    curr->next = curr->next->next;\n                    latestVowel->next = temp;\n                }\n            }\n            // Move to the next node\n            else\n                curr = curr->next;\n        }\n        return newHead;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n\n    // Function to arrange vowels at the start of the list followed by consonants\n    public Node arrangeCV(Node head) {\n        // Create a set of vowels for quick lookup\n        Set<Character> s = new HashSet<>();\n        s.add('a');\n        s.add('e');\n        s.add('i');\n        s.add('o');\n        s.add('u');\n\n        // Create a dummy node to easily handle edge cases\n        Node fakehead = new Node('.');\n        fakehead.next = head;\n\n        // Initialize pointers to traverse the list and separate vowels\n        Node temp = fakehead, head_v = null, tail_v = null;\n\n        // Traverse the list, processing each node\n        while (temp != null && temp.next != null) {\n            // If the next node contains a vowel\n            if (s.contains(temp.next.data)) {\n                // If it's the head of the list, move the head pointer\n                if (temp.next == head) {\n                    head = head.next;\n                }\n                // Add the vowel to the vowel list\n                if (head_v == null) {\n                    // Initialize the vowel list\n                    head_v = temp.next;\n                    tail_v = head_v;\n                } else {\n                    // Add the vowel node to the end of the vowel list\n                    tail_v.next = temp.next;\n                    tail_v = tail_v.next;\n                }\n                // Remove the vowel node from its current position in the list\n                temp.next = temp.next.next;\n            } else {\n                // Move to the next node if it's not a vowel\n                temp = temp.next;\n            }\n        }\n\n        // If vowels were found, append the remaining consonants to the vowel list\n        if (tail_v != null) {\n            tail_v.next = head;\n            head = head_v;\n        }\n\n        // Return the rearranged list with vowels first, followed by consonants\n        return head;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to check if a character is a vowel\n    def isVowel(self, x):\n        return x in ['a', 'e', 'i', 'o', 'u']\n\n    # Function to rearrange the linked list based on vowels\n    def arrangeCV(self, head):\n        new_head = head\n        latest_vowel = None\n        curr = head\n\n        # Return None if the linked list is empty\n        if head is None:\n            return None\n\n        # If the first node is a vowel, set it as the latest vowel\n        if self.isVowel(head.data):\n            latest_vowel = head\n        else:\n            # Find the next vowel node or reach the end of the linked list\n            while curr.next is not None and not self.isVowel(curr.next.data):\n                curr = curr.next\n\n            # Return the head if no vowel node is found\n            if curr.next is None:\n                return head\n\n            # Set the next vowel node as the latest vowel\n            latest_vowel = new_head = curr.next\n            curr.next = curr.next.next\n            latest_vowel.next = head\n\n        # Iterate through the linked list to rearrange nodes\n        while curr is not None and curr.next is not None:\n            # If the next node is a vowel\n            if self.isVowel(curr.next.data):\n                # If curr is the latest vowel, move the latest_vowel pointer\n                if curr == latest_vowel:\n                    latest_vowel = curr = curr.next\n                else:\n                    # Rearrange the nodes\n                    temp = latest_vowel.next\n                    latest_vowel.next = curr.next\n                    latest_vowel = latest_vowel.next\n                    curr.next = curr.next.next\n                    latest_vowel.next = temp\n            # Move to the next node\n            else:\n                curr = curr.next\n        return new_head\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to arrange vowels at the start of the list followed by consonants\n    arrangeCV(head) {\n        // If the list is empty or has only one element, return it as is\n        if (!head || !head.next) {\n            return head;\n        }\n\n        // Initialize separate lists for vowels and consonants\n        let vowelList = null;\n        let vowelTail = null;\n        let consonantList = null;\n        let consonantTail = null;\n\n        // Traverse the list and separate nodes into vowels and consonants\n        while (head) {\n            if (isVowel(head.data)) {\n                // Add the current node to the vowel list\n                if (vowelList === null) {\n                    vowelList = head;\n                    vowelTail = head;\n                } else {\n                    vowelTail.next = head;\n                    vowelTail = vowelTail.next;\n                }\n            } else {\n                // Add the current node to the consonant list\n                if (consonantList === null) {\n                    consonantList = head;\n                    consonantTail = head;\n                } else {\n                    consonantTail.next = head;\n                    consonantTail = consonantTail.next;\n                }\n            }\n            // Move to the next node in the list\n            head = head.next;\n        }\n\n        // Connect the end of the vowel list to the start of the consonant list\n        if (vowelTail) {\n            vowelTail.next = consonantList;\n        }\n\n        // Ensure the last node in the consonant list points to null\n        if (consonantTail) {\n            consonantTail.next = null;\n        }\n\n        // Return the head of the vowel list if vowels were found, otherwise return\n        // consonant list\n        if (vowelList) {\n            return vowelList;\n        }\n        return consonantList;\n    }\n}\n\n// Helper function to check if a character is a vowel\nfunction isVowel(x) { return [ 'a', 'e', 'i', 'o', 'u' ].includes(x.toLowerCase()); }\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}