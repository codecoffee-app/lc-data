{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710087,
            "title": "Arrange the array",
            "titleSlug": "arrange-the-array",
            "content": "<p><span style=\"font-size: 18px;\">Given an array of n integers rearrange the values of the array so as to maximize the worth of the array.Worth of an array a&nbsp;is defined as a(n)^(a(n-1)^a(n-2)........(a(1))).You need to print the rearrangement. If multiple answers are possible print the lexicographically largest one.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN=2\na[]={2,3}\n<strong>Output:</strong>\na[]={2,3}\n<strong>Explanation:</strong>\nSince in total 2 permutations are possible {2,3} and\n{3,2} the former one has a value of 9 while the letter\none has 8 hence the answer is the former permutation.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN=3\na[]={1,1,1}\n<strong>Output:</strong>\na[]={1,1,1}\n<strong>Explanation:</strong>\nAll permutations will yield the same result.</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>rearrange()</strong>&nbsp;which takes the array arr[], its size N,<strong>&nbsp;</strong>and returns the rearranged array.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(NLogN)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span><br /><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= N &lt;= 10<sup>5</sup><br />1 &lt;= arr[i] &lt;= 10<sup>5</sup><br />Array may contain duplicate elements.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of *n* integers, rearrange the values of the array to maximize its worth. The worth of an array *a* is defined as a[n]^(a[n-1]^(a[n-2]^...(a[1]))). Return the lexicographically largest rearrangement.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "1 <= arr[i] <= 10^5",
                    "Array may contain duplicate elements."
                ],
                "testcases": [
                    {
                        "input": "N = 2\na[] = {2, 3}",
                        "output": "a[] = {3, 2}",
                        "explanation": "Two permutations are possible: {2, 3} and {3, 2}. The worth of {2, 3} is 2^3 = 8, while the worth of {3, 2} is 3^2 = 9. Since we want the lexicographically largest rearrangement, the output is {3, 2}."
                    },
                    {
                        "input": "N = 3\na[] = {1, 1, 1}",
                        "output": "a[] = {1, 1, 1}",
                        "explanation": "All permutations yield the same result (1^(1^1) = 1)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Thing greedy</p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\n    public:\n        //Function to rearrange the given array.\n        vector <int> rearrange(vector <int> &a,int n)\n        {\n            //sorting the array in ascending order.\n            sort(a.begin(),a.end());\n            \n            int i=0;\n            \n            //finding the index where the first non-1 element starts.\n            while(i<n && a[i]==1)\n                i++;\n            \n            //if there are two elements left after the first non-1 element\n            //and those two elements are 2 and 3, then no need to rearrange further \n            //and we can return the array as it is.\n            if(n-i==2 && a[i]==2 && a[i+1]==3)\n                return a;\n            \n            //if all the elements are 1, then no need to rearrange further \n            //and we can return the array as it is.\n            else if(i==n)\n                return a;\n            \n            //reversing the elements from index i until the end of the array.\n            reverse(a.begin()+i,a.end());\n            \n            //returning the rearranged array.\n            return a;\n        }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}