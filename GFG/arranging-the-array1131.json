{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703261,
            "title": "Arranging the array",
            "titleSlug": "arranging-the-array1131",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array of size <strong>N</strong>. Rearrange the given array in-place such that all the negative numbers occur before all non-negative numbers.<br />(Maintain the order of all -ve and non-negative numbers as given in the original array).<br /></span><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 4\nArr[] = {-3, 3, -2, 2}\n<strong>Output:</strong>\n-3 -2 3 2\n<strong>Explanation:</strong>\nIn the given array, negative numbers\nare -3, -2 and non-negative numbers are 3, 2. </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nN = 4\nArr[] = {-3, 1, 0, -2}\n<strong>Output:</strong>\n-3 -2 1 0\n<strong>Explanation:</strong>\nIn the given array, negative numbers\nare -3, -2 and non-negative numbers are 1, 0.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>Rearrange()</strong>&nbsp;which takes the array <strong>Arr[]</strong> and its size <strong>N</strong><strong> </strong>as inputs and returns the array after rearranging with spaces between the elements of the array.<br /></span><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(Nlog(N))<br /><strong>Expected Auxiliary Space:</strong> O(log(N))</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; N &le; 10<sup>5</sup><br />-10<sup>9</sup> &le; Elements of array &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Let Ln and Lp denotes the negative part and positive part of left sub-array respectively. Similarly, Rn and Rp denotes the negative and positive part of right sub-array respectively.<br />\nBelow are the steps to convert [Ln Lp Rn Rp] to [Ln Rn Lp Rp] without using extra space.</span></p>\n\n<pre>\n<span style=\"font-size:18px\">1. Reverse Lp and Rn. We get [Lp] -&gt; [Lp&#39;] and [Rn] -&gt; [Rn&#39;] \n    [Ln Lp Rn Rp] -&gt; [Ln Lp&rsquo; Rn&rsquo; Rp]\n\n2. Reverse [Lp&rsquo; Rn&rsquo;]. We get [Rn Lp].\n    [Ln Lp&rsquo; Rn&rsquo; Rp] -&gt; [Ln Rn Lp Rp]\n</span></pre>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Merge Sort",
                "slug": "merge-sort"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution\r\n{\r\n    public:\r\n        void reverse(int arr[], int l, int r) \r\n        { \r\n            if (l < r) { \r\n                swap(arr[l], arr[r]); \r\n                reverse(arr, ++l, --r); \r\n            } \r\n        } \r\n          \r\n        // Merges two subarrays of arr[]. \r\n        // First subarray is arr[l..m] \r\n        // Second subarray is arr[m+1..r] \r\n        void merge(int arr[], int l, int m, int r) \r\n        { \r\n            int i = l; // Initial index of 1st subarray \r\n            int j = m + 1; // Initial index of IInd \r\n          \r\n            while (i <= m && arr[i] < 0) \r\n                i++; \r\n          \r\n            // arr[i..m] is positive \r\n          \r\n            while (j <= r && arr[j] < 0) \r\n                j++; \r\n          \r\n            // arr[j..r] is positive \r\n          \r\n            // reverse positive part of left sub-array (arr[i..m]) \r\n            reverse(arr, i, m); \r\n          \r\n            // reverse negative part of right sub-array (arr[m+1..j-1]) \r\n            reverse(arr, m + 1, j - 1); \r\n          \r\n            // reverse arr[i..j-1] \r\n            reverse(arr, i, j - 1); \r\n        } \r\n          \r\n        // Function to Rearrange positive and negative \r\n        // numbers in a array \r\n        void RearrangePosNeg(int arr[], int l, int r)\r\n        { \r\n            if (l < r) { \r\n                // Same as (l+r)/2, but avoids overflow for \r\n                // large l and h \r\n                int m = l + (r - l) / 2; \r\n          \r\n                // Sort first and second halves \r\n                RearrangePosNeg(arr, l, m); \r\n                RearrangePosNeg(arr, m + 1, r); \r\n          \r\n                merge(arr, l, m, r); \r\n            } \r\n        } \r\n        \r\n        void Rearrange(int arr[], int n)\r\n        {\r\n            RearrangePosNeg(arr, 0, n - 1); \r\n        }\r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    \n    public void Rearrange(int a[], int n)\n    {\n        // Your code goes here\n        RearrangePosNeg(a, 0, n - 1); \n    }\n    // Function to Rearrange positive and negative \n    // numbers in a array \n    public void RearrangePosNeg(int arr[], int l, int r)\n    { \n        if (l < r) { \n            // Same as (l+r)/2, but avoids overflow for \n            // large l and h \n            int m = l + (r - l) / 2; \n      \n            // Sort first and second halves \n            RearrangePosNeg(arr, l, m); \n            RearrangePosNeg(arr, m + 1, r); \n      \n            merge(arr, l, m, r); \n        } \n    }\n    // Merges two subarrays of arr[]. \n    // First subarray is arr[l..m] \n    // Second subarray is arr[m+1..r] \n    public void merge(int arr[], int l, int m, int r) \n    { \n        int i = l; // Initial index of 1st subarray \n        int j = m + 1; // Initial index of IInd \n      \n        while (i <= m && arr[i] < 0) \n            i++; \n          \n        // arr[i..m] is positive \n          \n        while (j <= r && arr[j] < 0) \n            j++; \n          \n        // arr[j..r] is positive \n          \n        // reverse positive part of left sub-array (arr[i..m]) \n        reverse(arr, i, m); \n          \n        // reverse negative part of right sub-array (arr[m+1..j-1]) \n        reverse(arr, m + 1, j - 1); \n          \n        // reverse arr[i..j-1] \n        reverse(arr, i, j - 1); \n    }\n    public void reverse(int arr[], int l, int r) \n    { \n        if (l < r) { \n            int temp=arr[l];\n            arr[l]=arr[r];\n            arr[r]=temp;\n            reverse(arr, ++l, --r); \n        } \n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "\nfrom typing import List\n\n\nclass Solution:\n    def reverse(self, arr, l, r):\n        while l < r:\n            arr[l], arr[r] = arr[r], arr[l]\n            l += 1\n            r -= 1\n\n    def merge(self, arr, l, m, r):\n        i = l  # Initial index of 1st subarray\n        j = m + 1  # Initial index of IInd\n\n        while i <= m and arr[i] < 0:\n            i += 1\n\n        # arr[i..m] is positive\n\n        while j <= r and arr[j] < 0:\n            j += 1\n\n        # arr[j..r] is positive\n\n        # reverse positive part of left sub-array (arr[i..m])\n        self.reverse(arr, i, m)\n\n        # reverse negative part of right sub-array (arr[m+1..j-1])\n        self.reverse(arr, m + 1, j - 1)\n\n        # reverse arr[i..j-1]\n        self.reverse(arr, i, j - 1)\n\n    def rearrangePosNeg(self, arr, l, r):\n        if l < r:\n            m = l + (r - l) // 2\n\n            # Sort first and second halves\n            self.rearrangePosNeg(arr, l, m)\n            self.rearrangePosNeg(arr, m + 1, r)\n\n            self.merge(arr, l, m, r)\n\n    def Rearrange(self, n : int, arr : List[int]) -> None:\n        self.rearrangePosNeg(arr, 0, len(arr) - 1)",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    // Function to reverse a subarray in arr[]\n    void reverse(int[] arr, int l, int r)\n    {\n        if (l < r)\n        {\n            int temp = arr[l];\n            arr[l] = arr[r];\n            arr[r] = temp;\n            reverse(arr, ++l, --r);\n        }\n    }\n\n    // Function to merge two subarrays in arr[]\n    // First subarray is arr[l..m]\n    // Second subarray is arr[m+1..r]\n    void merge(int[] arr, int l, int m, int r)\n    {\n        int i = l; // Initial index of 1st subarray\n        int j = m + 1; // Initial index of 2nd subarray\n\n        while (i <= m && arr[i] < 0)\n            i++;\n\n        // arr[i..m] is positive\n\n        while (j <= r && arr[j] < 0)\n            j++;\n\n        // arr[j..r] is positive\n\n        // Reverse positive part of left subarray (arr[i..m])\n        reverse(arr, i, m);\n\n        // Reverse negative part of right subarray (arr[m+1..j-1])\n        reverse(arr, m + 1, j - 1);\n\n        // Reverse arr[i..j-1]\n        reverse(arr, i, j - 1);\n    }\n\n    // Function to rearrange positive and negative numbers in an array\n    public void Rearrange(int[] arr, int n)\n    { \n        if (n > 0)\n        {\n            // Sort first and second halves\n            Rearrange(arr, 0, n - 1);\n\n            // Merge the two sorted subarrays\n            merge(arr, 0, (n - 1) / 2, n - 1);\n        }\n    }\n\n    // Divide the array into two halves and sort them separately\n    void Rearrange(int[] arr, int l, int r)\n    {\n        if (l < r)\n        {\n            int m = l + (r - l) / 2;\n\n            Rearrange(arr, l, m);\n            Rearrange(arr, m + 1, r);\n\n            merge(arr, l, m, r);\n        }\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}