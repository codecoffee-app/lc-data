{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702922,
            "title": "Alternate Positive Negative",
            "titleSlug": "array-of-alternate-ve-and-ve-nos1401",
            "content": "<p><span style=\"font-size: 18px;\">Given an unsorted array <strong>arr </strong>containing<strong> </strong>both<strong> </strong><strong>positive</strong> and <strong>negative</strong> numbers. Your task is to rearrange the array and convert it into an array of alternate positive and negative numbers without changing the relative order.<br /><br /></span><span style=\"font-size: 18px;\"><strong>Note: <br /></strong></span><span style=\"font-size: 18px;\">- Resulting array <strong>should start</strong> with a positive integer (0 will also be considered as a positive integer). <br /></span><span style=\"font-size: 18px;\">- If any of the positive or negative integers are exhausted, then add the remaining integers in the answer as it is by maintaining the relative order.<br />- The array <strong>may</strong> or <strong>may not</strong> have the <strong>equal</strong> number of positive and negative integers.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [9, 4, -2, -1, 5, 0, -5, -3, 2]\n<strong>Output: </strong>[9, -2, 4, -1, 5, -5, 0, -3, 2]\n<strong>Explanation: </strong>The positive numbers are [9, 4, 5, 0, 2] and the negative integers are [-2, -1, -5, -3]. Since, we need to start with the positive integer first and then negative integer and so on (by maintaining the relative order as well), hence we will take 9 from the positive set of elements and then -2 after that 4 and then -1 and so on.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [-5, -2, 5, 2, 4, 7, 1, 8, 0, -8]\n<strong>Output: </strong>[5, -5, 2, -2, 4, -8, 7, 1, 8, 0]\n<strong>Explanation : </strong>The positive numbers are [5, 2, 4, 7, 1, 8, 0] and the negative integers are [-5,-2,-8]. According to the given conditions we will start from the positive integer 5 and then -5 and so on. After reaching -8 there are no negative elements left, so according to the given rule, we will add the remaining elements (in this case positive elements are remaining) as it in by maintaining the relative order.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [9, 5, -2, -1, 5, 0, -5, -3, 2]\n<strong>Output: </strong>[9, -2, 5, -1, 5, -5, 0, -3, 2]\n<strong>Explanation: </strong>The positive numbers are [9, 5, 5, 0, 2] and the negative integers are [-2, -1, -5, -3]. Since, we need to start with the positive integer first and then negative integer and so on (by maintaining the relative order as well), hence we will take 9 from the positive set of elements and then -2 after that 5 and then -1 and so on.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />-10<sup>6</sup> &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an unsorted array `arr` containing both positive and negative numbers, rearrange the array to have alternating positive and negative numbers without changing their relative order.  The resulting array must start with a positive integer (0 is considered positive). If either positive or negative numbers are exhausted, append the remaining numbers to the result in their original order. The array may or may not have an equal number of positive and negative integers.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "-10^6 <= arr[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "[9, 4, -2, -1, 5, 0, -5, -3, 2]",
                        "output": "[9, -2, 4, -1, 5, -5, 0, -3, 2]",
                        "explanation": "The positive numbers are [9, 4, 5, 0, 2] and the negative numbers are [-2, -1, -5, -3]. The array starts with a positive number (9), followed by a negative number (-2), and so on, maintaining the original relative order of positives and negatives.  Once all negatives were used, the remaining positive numbers were added to the end of the array."
                    },
                    {
                        "input": "[-5, -2, 5, 2, 4, 7, 1, 8, 0, -8]",
                        "output": "[5, -5, 2, -2, 4, -8, 7, 1, 8, 0]",
                        "explanation": "The positive numbers are [5, 2, 4, 7, 1, 8, 0] and the negative numbers are [-5, -2, -8]. The array starts with a positive number (5), followed by a negative number (-5), and so on. After exhausting all negative numbers after -8, the remaining positive numbers are appended to the end."
                    },
                    {
                        "input": "[9, 5, -2, -1, 5, 0, -5, -3, 2]",
                        "output": "[9, -2, 5, -1, 5, -5, 0, -3, 2]",
                        "explanation": "The positive numbers are [9, 5, 5, 0, 2] and the negative numbers are [-2, -1, -5, -3]. The array starts with a positive number (9), followed by a negative number (-2), and so on, maintaining the original relative order of positives and negatives.  Once all negatives were used, the remaining positive numbers were added to the end of the array."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">We can store the array elements positive and negative separately. Then combine them accoring to the condition.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "vmware",
            "amazon",
            "microsoft",
            "intuit"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\nclass Solution {\n  public:\n    // Function to rearrange the array with negative numbers followed by positive\n    // numbers.\n    void rearrange(vector<int> &arr) {\n        vector<int> neg, pos;\n        int n = arr.size();\n        // Separating negative and positive numbers into separate vectors.\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0)\n                neg.push_back(arr[i]);\n            else\n                pos.push_back(arr[i]);\n        }\n\n        int i = 0, j = 0, k = 0;\n        // Merging the negative and positive numbers alternatively.\n        while (i < neg.size() && j < pos.size()) {\n            arr[k++] = pos[j++];\n            arr[k++] = neg[i++];\n        }\n\n        // Adding any remaining positive numbers to the array.\n        while (j < pos.size()) {\n            arr[k++] = pos[j++];\n        }\n\n        // Adding any remaining negative numbers to the array.\n        while (i < neg.size()) {\n            arr[k++] = neg[i++];\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    void rearrange(ArrayList<Integer> arr) {\n\n        int n = arr.size();\n        // create two ArrayLists to store negative and positive numbers separately\n        ArrayList<Integer> neg = new ArrayList<Integer>();\n        ArrayList<Integer> pos = new ArrayList<Integer>();\n\n        // iterate through the array and add numbers to the appropriate ArrayList\n        for (int i = 0; i < n; i++) {\n            // if number is negative, add it to the neg ArrayList\n            if (arr.get(i) < 0) {\n                neg.add(arr.get(i));\n            } // if number is positive, add it to the pos ArrayList\n            else {\n                pos.add(arr.get(i));\n            }\n        }\n\n        int i = 0, j = 0, k = 0;\n        // initialize variables for navigating through the neg and pos ArrayLists\n        // rearrange the array by alternating between positive and negative numbers\n        while (i < neg.size() && j < pos.size()) {\n            arr.set(k++, pos.get(j++));\n            arr.set(k++, neg.get(i++));\n        }\n        // add any remaining positive numbers to the array\n        while (j < pos.size()) {\n            arr.set(k++, pos.get(j++));\n        }\n        // add any remaining negative numbers to the array\n        while (i < neg.size()) {\n            arr.set(k++, neg.get(i++));\n        }\n    }\n};\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def rearrange(self, arr):\n        # Initialize two lists to store positive and negative numbers\n        pos = []\n        neg = []\n        n = len(arr)\n        # Iterate through the input array and separate positive and negative numbers\n        for i in range(n):\n            if arr[i] < 0:\n                neg.append(arr[i])\n            else:\n                pos.append(arr[i])\n\n        # Initialize variables for iteration through pos and neg lists\n        i = 0\n        j = 0\n        k = 0\n\n        # Merge the positive and negative numbers alternatively into the result array\n        while i < len(neg) and j < len(pos):\n            arr[k] = pos[j]\n            j += 1\n            k += 1\n            arr[k] = neg[i]\n            i += 1\n            k += 1\n\n        # If there are remaining positive or negative numbers, add them to the result array\n        while j < len(pos):\n            arr[k] = pos[j]\n            j += 1\n            k += 1\n\n        while i < len(neg):\n            arr[k] = neg[i]\n            i += 1\n            k += 1\n\n\n\"\"\" \nInitialize two lists to store positive and negative numbers\nIterate through the input array and separate positive and negative numbers\nMerge the positive and negative numbers alternatively into the result array\nIf there are remaining positive or negative numbers, add them to the result array \n\"\"\"\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    rearrange(arr) {\n        let n = arr.length;\n        // Separate arrays to hold negative and positive elements\n        let neg = [];\n        let pos = [];\n\n        // Traverse the array and separate negative and positive elements\n        for (let i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                neg.push(arr[i]); // Add negative elements to the `neg` array\n            } else {\n                pos.push(arr[i]); // Add positive elements to the `pos` array\n            }\n        }\n\n        // Initialize pointers for traversing the `neg` and `pos` arrays\n        let i = 0, j = 0, k = 0;\n\n        // Place positive and negative elements alternately in the original array\n        while (i < neg.length && j < pos.length) {\n            arr[k++] = pos[j++]; // Place a positive element\n            arr[k++] = neg[i++]; // Place a negative element\n        }\n\n        // If there are remaining positive elements, add them to the array\n        while (j < pos.length) {\n            arr[k++] = pos[j++];\n        }\n\n        // If there are remaining negative elements, add them to the array\n        while (i < neg.length) {\n            arr[k++] = neg[i++];\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}