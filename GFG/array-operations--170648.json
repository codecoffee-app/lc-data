{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714327,
            "title": "Array Operations",
            "titleSlug": "array-operations--170648",
            "content": "<p><span style=\"font-size: 18px;\">You are given an array <strong>arr</strong> of <strong>n </strong>integers. You must return the minimum number of operations required to make this array 0. For this you can do an operation :</span></p>\n<ul style=\"list-style-type: square;\">\n<li><span style=\"font-size: 18px;\">Choose a sub-array of non-zero elements &amp; replace all with 0(0 must be present in arr, if not you can not replace it).</span></li>\n</ul>\n<p><strong><span style=\"font-size: 18px;\">Examples<br /></span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 4 arr = {3,0,4,5} <br /></span><span style=\"font-size: 18px;\"><strong>Output: </strong>2\n<strong>Explanation: </strong>First, we can choose 3 replace with 0</span><span style=\"font-size: 18px;\">(which is on 1st Index) </span><span style=\"font-size: 18px;\">and in the second </span><span style=\"font-size: 18px;\">operation, we </span><span style=\"font-size: 18px;\">can choose 4 &amp; 5 -&gt; replace </span><span style=\"font-size: 18px;\">with 0(1st Index).</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:</span> <span style=\"font-size: 18px;\">n = 8 </span><span style=\"font-size: 18px;\">arr = {10,4,9,6,10,10,4,4}&nbsp;<br /></span><strong><span style=\"font-size: 18px;\">Output:&nbsp;</span></strong><span style=\"font-size: 18px;\">-1&nbsp;<br /></span><span style=\"font-size: 18px;\"><strong>Explanation</strong>: </span><span style=\"font-size: 18px;\">If we do operations here, we can not make the entire 0 </span><span style=\"font-size: 18px;\">because no 0 is present in the array, hence -1.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>arrayOperations()</strong> which takes an integer <strong>n</strong> and an array <strong>arr</strong> as inputs and </span><span style=\"font-size: 18px;\">find the&nbsp;</span><strong style=\"font-size: 18px;\">minimum</strong><span style=\"font-size: 18px;\">&nbsp;number of operations you must perform to make all the elements of the array&nbsp;</span><strong style=\"font-size: 18px;\">0</strong><span style=\"font-size: 18px;\">. If not possible <strong>return -1</strong>;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n&nbsp;&lt;= 10<sup>5</sup><br />0 &lt;= arr[i] &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of `n` integers, determine the minimum number of operations required to transform the array into an array of all zeros.  In each operation, you can choose a contiguous sub-array consisting of non-zero elements and replace all elements within that sub-array with zeros. This operation is only valid if at least one zero is present in the original array.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "0 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "n = 4, arr = {3, 0, 4, 5}",
                        "output": "2",
                        "explanation": "The array contains a zero. First, replace '3' with '0', so arr = {0, 0, 4, 5}.  Second, replace '4, 5' with '0', so arr = {0, 0, 0, 0}.  Therefore, the minimum operations required is 2."
                    },
                    {
                        "input": "n = 8, arr = {10, 4, 9, 6, 10, 10, 4, 4}",
                        "output": "-1",
                        "explanation": "The array does not contain any zeros.  Therefore, it is impossible to transform the array into an array of all zeros, so the result is -1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:16px\">The set that doesn&#39;t contain 0, mex of this set is 0.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    //Function to count the number of operations required on the given array.\n    int arrayOperations(int n, vector<int> &arr) {\n        int count=0,zero=0;\n        bool isNonZero=0,isZeroFound=0;\n        \n        //iterating over the array to count the number of zeroes and non-zeroes.\n        for(int i=0;i<n;i++){\n            if(arr[i]==0){\n                zero++;\n                isZeroFound=1;\n                //if a non-zero element was encountered before the current zero,\n                //increment the count and set the flag to false.\n                if(isNonZero){\n                    count++;\n                    isNonZero=0;\n                }\n            }else{\n                isNonZero=1;\n                \n            }\n        }\n        //if there is at least one non-zero element and at least one zero element,\n        //increment the count.\n        if(isNonZero && isZeroFound){\n            count++;\n        }\n        \n        //if all elements are zeroes, return 0 as no operations are required.\n        if(zero==n) return 0;\n        \n        //return the final count of operations.\n        return count>0?count:-1;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static int arrayOperations(int n, int[] arr) {\r\n        // code here\r\n        int count=0,zero=0;\r\n        boolean isNonZero=false,isZeroFound=false;\r\n        \r\n        for(int i=0;i<n;i++){\r\n            if(arr[i]==0){\r\n                isZeroFound = true;\r\n                zero++;\r\n                if(isNonZero){\r\n                    count++;\r\n                    isNonZero=false;\r\n                }\r\n            }else{\r\n                isNonZero=true;\r\n                \r\n            }\r\n        }\r\n        if(isNonZero && isZeroFound){\r\n            count++;\r\n        }\r\n        \r\n        if(zero==n) return 0;\r\n        \r\n        return count>0?count:-1;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\nclass Solution:\n    def arrayOperations(self, n : int, arr : List[int]) -> int:\n        count, zero = 0, 0\n        isNonZero = False\n        isZeroFound = False\n\n        # process each element in the array\n        for i in range(n):\n            # check if the current element is zero\n            if arr[i] == 0:\n                isZeroFound = True\n                zero += 1\n                # check if there was a non-zero element before\n                # if yes, increment the count\n                if isNonZero:\n                    count += 1\n                    isNonZero = False\n            else:\n                # mark that a non-zero element has been found\n                isNonZero = True\n\n        # check if there is a non-zero element at the end \n        # and if zero elements were found\n        if isNonZero and isZeroFound:\n            count += 1\n\n        # if all elements are zero, return 0\n        if zero == n:\n            return 0\n\n        # return the count if it is greater than 0, otherwise return -1\n        return count if count > 0 else -1",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number[]} arr\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to perform operations on array.\n    arrayOperations(n, arr) {\n        let count = 0;\n        let zero = 0;\n        let isNonZero = false;\n        let isZeroFound = false;\n\n        // process each element in the array\n        for (let i = 0; i < n; i++) {\n            // check if the current element is zero\n            if (arr[i] === 0) {\n                isZeroFound = true;\n                zero += 1;\n                // check if there was a non-zero element before\n                // if yes, increment the count\n                if (isNonZero) {\n                    count += 1;\n                    isNonZero = false;\n                }\n            } else {\n                // mark that a non-zero element has been found\n                isNonZero = true;\n            }\n        }\n\n        // check if there is a non-zero element at the end \n        // and if zero elements were found\n        if (isNonZero && isZeroFound) {\n            count += 1;\n        }\n\n        // if all elements are zero, return 0\n        if (zero === n) {\n            return 0;\n        }\n\n        // return the count if it is greater than 0, otherwise return -1\n        return count > 0 ? count : -1;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}