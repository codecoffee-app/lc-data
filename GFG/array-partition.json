{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706356,
            "title": "Array Partition",
            "titleSlug": "array-partition",
            "content": "<p><span style=\"font-size:18px\">Given an&nbsp;array of <strong>N</strong> integers, you have to find if it is possible to partition the array with following rules:</span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">Each element should belong to exactly one partition.</span></li>\r\n\t<li><span style=\"font-size:18px\">Each partition should have atleast <strong>K</strong> elements.</span></li>\r\n\t<li><span style=\"font-size:18px\">Absolute difference between any pair of elements in the same partition should not exceed <strong>M</strong>.</span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 5\r\nK = 2\r\nM = 3\r\nA[] = {8, 3, 9, 1, 2}\r\n<strong>Output:</strong>\r\nYES\r\n<strong>Explanation</strong>:\r\nWe can partition the array into two \r\npartitions: {8, 9} and {3, 1, 2} such that\r\nall rules are satisfied.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>partitionArray()</strong>&nbsp;which takes the number of elements&nbsp;<strong>N,</strong>&nbsp;integer <strong>K,</strong>&nbsp;integer <strong>M&nbsp;</strong>and array&nbsp;<strong>A[ ]</strong>&nbsp;as input parameters&nbsp;and returns true if we can partition the array such that all rules are satisfied, else returns false.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N * Log(N))<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le; N&nbsp;&le; 2*10<sup>5</sup><br />\r\n1 &le; K&nbsp;&le; N<br />\r\n1 &le; M&nbsp;&le; 10<sup>9</sup><br />\r\n1 &le; A[i]&nbsp;&le; 10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of N integers, determine if it's possible to partition the array according to these rules:\n\n*   Each element must belong to exactly one partition.\n*   Each partition must contain at least K elements.\n*   The absolute difference between any two elements within the same partition must not exceed M.",
                "constraints": [
                    "1 <= N <= 2 * 10^5",
                    "1 <= K <= N",
                    "1 <= M <= 10^9",
                    "1 <= A[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 5\nK = 2\nM = 3\nA[] = {8, 3, 9, 1, 2}",
                        "output": "YES",
                        "explanation": "The array can be partitioned into {8, 9} and {3, 1, 2}.  Within each partition, the absolute difference between any two elements is no more than 3, and each partition has at least 2 elements."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use dynamic programming with segment tree.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Segment-Tree",
                "slug": "segment-tree"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\n//declaring segment tree and marked arrays\nvector<int> seg(800010);\nvector<bool> marked(800010);\n\n//function to push changes in segment tree\nvoid push(int v){\n    //if node is marked, propagate the changes to its children\n    if(marked[v]){\n        seg[2 * v] |= seg[v];\n        seg[2 * v + 1] |= seg[v];\n        marked[v] = false;\n        marked[2 * v] = marked[2 * v + 1] = true;\n    }\n}\n\n//function to get segment value at a particular position\nint get_segment(int v, int l, int r, int pos){\n    //if leaf node, return segment value\n    if(l == r){\n        return seg[v];\n    }\n    else{\n        //push changes and recursively search for the value in left or right subtree\n        push(v);\n        int m = (l + r) / 2;\n        if(pos <= m){\n            return get_segment(2 * v, l, m, pos);\n        }\n        else{\n            return get_segment(2 * v + 1, m + 1, r, pos);\n        }\n    }\n}\n\n//function to update segment values in a given range\nvoid update_segment(int v, int l, int r, int query_l, int query_r){\n    //if range matches exactly with the node, update the segment value and mark it\n    if(l == query_l && r == query_r){\n        seg[v] |= 1;\n        marked[v]=true;\n    }\n    else{\n        //push changes and recursively update left or right subtree\n        push(v);\n        int m = (l + r) / 2;\n        if(query_r <= m){\n            update_segment(2 * v, l, m, query_l, query_r);\n        }\n        else if(query_l > m){\n            update_segment(2 * v + 1, m + 1, r, query_l, query_r);\n        }\n        else{\n            update_segment(2 * v, l, m, query_l, m);\n            update_segment(2 * v + 1, m + 1, r, m + 1, query_r);\n        }\n        //update the segment value based on the values in left and right subtree\n        seg[v] = seg[2 * v] | seg[2 * v + 1];\n    }\n}\n\nclass Solution{\n    public:\n    //function to check if it is possible to partition array with given conditions\n    bool partitionArray(int N, int K, int M, vector<int> &A){\n        //initializing segment tree and marked array\n        for(int i = 0; i <= 4 * N; i++){\n            seg[i] = 0;\n            marked[i] = false;\n        }\n        \n        //sorting the array in ascending order\n        sort(A.begin(), A.end());\n        \n        //iterating over the array\n        for(int i = 0; i < N; i++){\n            int right = (int )(upper_bound(A.begin(), A.end(), A[i] + M) - A.begin());\n            right--;\n            int left = K + i - 1;\n            \n            //if first element, update segment tree for given left and right range\n            if(i == 0){\n                if(left <= right){\n                    update_segment(1, 1, N, left + 1, right + 1);\n                }\n            }\n            //if previous element can be partitioned, update segment tree for given range\n            else if(get_segment(1, 1, N, i)){\n                if(left <= right){\n                    update_segment(1, 1, N, left + 1, right + 1);\n                }\n            }\n                \n        }\n        //check if last element can be partitioned\n        if(get_segment(1, 1, N, N)){\n            return true;\n        }\n        return false;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n\tstatic int [] seg; // array to store segment values\n\tstatic boolean [] marked; // array to mark segments that need to be updated\n\n\tvoid push(int v){\n\t    if(marked[v]){ // if segment is marked for update\n\t        seg[2 * v] |= seg[v]; // update left child segment\n\t        seg[2 * v + 1] |= seg[v]; // update right child segment\n\t        marked[v] = false; // unmark current segment\n\t        marked[2 * v] = marked[2 * v + 1] = true; // mark left and right child segments for update\n\t    }\n\t}\n\n\tint get_segment(int v, int l, int r, int pos){\n\t    if(l == r){ // if segment is a leaf node\n\t        return seg[v]; // return the segment value\n\t    }\n\t    else{\n\t        push(v); // push updates to child segments\n\t        int m = (l + r) / 2; // calculate mid-point\n\t        if(pos <= m){ // if position is less than or equal to mid-point\n\t            return get_segment(2 * v, l, m, pos); // recursively get segment value from left child segment\n\t        }\n\t        else{\n\t            return get_segment(2 * v + 1, m + 1, r, pos); // recursively get segment value from right child segment\n\t        }\n\t    }\n\t}\n\n\tvoid update_segment(int v, int l, int r, int query_l, int query_r){\n\t    if(l == query_l && r == query_r){ // if current segment matches the query range\n\t        seg[v] |= 1; // update segment value\n\t        marked[v]=true; // mark segment for update\n\t    }\n\t    else{\n\t        push(v); // push updates to child segments\n\t        int m = (l + r) / 2; // calculate mid-point\n\t        if(query_r <= m){ // if query range is entirely in left child segment\n\t            update_segment(2 * v, l, m, query_l, query_r); // recursively update left child segment\n\t        }\n\t        else if(query_l > m){ // if query range is entirely in right child segment\n\t            update_segment(2 * v + 1, m + 1, r, query_l, query_r); // recursively update right child segment\n\t        }\n\t        else{ // if query range spans both left and right child segments\n\t            update_segment(2 * v, l, m, query_l, m); // recursively update left child segment\n\t            update_segment(2 * v + 1, m + 1, r, m + 1, query_r); // recursively update right child segment\n\t        }\n\t        seg[v] = seg[2 * v] | seg[2 * v + 1]; // combine the updated child segment values\n\t    }\n\t}\n\t\n\tstatic int upper_bound(int arr[], int key)\n    {\n        int mid, N = arr.length;\n        int low = 0;\n        int high = N;\n        while (low < high && low != N) { // perform binary search\n            mid = low + (high - low) / 2;\n            if (key >= arr[mid]) {\n                low = mid + 1; // update lower bound\n            }\n            else {\n                high = mid; // update higher bound\n            }\n        }\n        return low; // return the upper bound\n    }\n\t\n    boolean partitionArray(int N, int K, int M, int [] A){\n        seg = new int[800010]; // initialize the segment array\n        marked = new boolean[800010]; // initialize the marked array\n    \tfor(int i = 0; i <= 4 * N; i++){ // initialize segment array and marked array\n            seg[i] = 0; // set segment value to 0\n            marked[i] = false; // set marked value to false\n        }\n        \n        Arrays.sort(A); // sort the array A in ascending order\n        for(int i = 0; i < N; i++){ // iterate over array A\n            int right = upper_bound(A, A[i] + M); // find the upper bound for the range\n            right--;\n            int left = K + i - 1; // calculate the left index for the range\n            if(i == 0){ // if first iteration\n                if(left <= right){ // if range is valid\n                    update_segment(1, 1, N, left + 1, right + 1); // update segment tree\n                }\n            }\n            else if(get_segment(1, 1, N, i) != 0){ // if segment value is not 0\n                if(left <= right){ // if range is valid\n                    update_segment(1, 1, N, left + 1, right + 1); // update segment tree\n                }\n            }                \n        }\n        if(get_segment(1, 1, N, N) != 0){ // if segment value at root is not 0\n            return true; // return true\n        }\n        return false; // return false\n    }\n\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}