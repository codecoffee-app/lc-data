{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710035,
            "title": "Array Removals",
            "titleSlug": "array-removals",
            "content": "<p><span style=\"font-size:18px\">Given an array <strong>arr[]</strong> of size <strong>N</strong> and an integer <strong>K</strong>. The task is to&nbsp;find the minimum number of elements that should be removed, such that <strong>A<sub>max</sub>-A<sub>min</sub>&lt;=K.</strong> After the removal of elements, A<sub>max</sub>&nbsp;and A<sub>min</sub>&nbsp;is considered among the remaining elements.&nbsp;</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Note:&nbsp;</span></strong><span style=\"font-size:18px\">Can you solve the probelm without using any extra space and O(N*log(N)) time complexity?</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 9, K = 4<strong> </strong> \r\narr[] = {1,3,4,9,10,11,12,17,20}\r\n<strong>Output:</strong> 5\r\n<strong>Explanation:</strong> Remove 1, 3, 4 from beginning\r\nand 17, 20 from the end.</span></pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 5, K = 2 \r\narr[] = {1, 5, 6, 2, 8} \r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> There are multiple ways to\r\nremove elements in this case.\r\nOne among them is to remove 5, 6, 8.\r\nThe other is to remove 1, 2, 5</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>removals()</strong>&nbsp;which takes the&nbsp;array of&nbsp;integers&nbsp;<strong>arr,</strong>&nbsp;<strong>n&nbsp;</strong>and<strong>&nbsp;k&nbsp;</strong>as parameters and returns an integer, denotes minimum number of elements should be remove to satisfy the condition.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(Nlog(N))<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&nbsp;&le; N &le; 100</span><br />\r\n<span style=\"font-size:18px\">1 &le; Arr[i], K &le; 10</span><sup>6</sup></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>Use DP.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\n    public:\r\n    // int dp[101][101];\r\n \r\n    // // function to check all possible combinations\r\n    // // of removal and return the minimum one\r\n    // int countRemovals(vector<int> arr, int i, int j, int k)\r\n    // {\r\n    //     // base case when all elements are removed\r\n    //     if (i >= j)\r\n    //         return 0;\r\n     \r\n    //     // if condition is satisfied, no more\r\n    //     // removals are required\r\n    //     else if ((arr[j] - arr[i]) <= k)\r\n    //         return 0;\r\n     \r\n    //     // if the state has already been visited\r\n    //     else if (dp[i][j] != -1)\r\n    //         return dp[i][j];\r\n     \r\n    //     // when Amax-Amin>d\r\n    //     else if ((arr[j] - arr[i]) > k) {\r\n     \r\n    //         // minimum is taken of the removal\r\n    //         // of minimum element or removal\r\n    //         // of the maximum element\r\n    //         dp[i][j] = 1 + min(countRemovals(arr, i + 1, j, k),\r\n    //                           countRemovals(arr, i, j - 1, k));\r\n    //     }\r\n    //     return dp[i][j];\r\n    // }\r\n    // int removals(vector<int>& arr, int k)\r\n    // {\r\n    //     // sort the array\r\n    //     int n = arr.size();\r\n    //     sort(arr.begin(), arr.end());\r\n     \r\n    //     // fill all stated with -1\r\n    //     // when only one element\r\n    //     memset(dp, -1, sizeof(dp));\r\n    //     if (n == 1)\r\n    //         return 0;\r\n    //     else\r\n    //         return countRemovals(arr, 0, n - 1, k);\r\n    // }\r\n    int removals(vector<int>& arr, int k){\r\n        int n = arr.size();\r\n        int ans = n;\r\n        sort(arr.begin(),arr.end());\r\n        for(int i =0;i<n;i++){\r\n             int x = k+arr[i];\r\n             int y = upper_bound(arr.begin(),arr.end(),x)-arr.begin();\r\n             if(y<i) break;\r\n             int temp = i+n-y;\r\n             ans = min(ans,temp);\r\n        }\r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    int dp[][];\r\n    int removals(int[] arr, int n, int k) {\r\n        // code here\r\n        Arrays.sort(arr);\r\n     \r\n        // fill all stated with -1\r\n        // when only one element\r\n        dp=new int[101][101];\r\n        for(int i=0;i<101;i++){\r\n            Arrays.fill(dp[i],-1);\r\n        }\r\n        if (n == 1)\r\n            return 0;\r\n        else\r\n            return countRemovals(arr, 0, n - 1, k);\r\n    }\r\n    // function to check all possible combinations\r\n    // of removal and return the minimum one\r\n    int countRemovals(int arr[], int i, int j, int k)\r\n    {\r\n        // base case when all elements are removed\r\n        if (i >= j)\r\n            return 0;\r\n     \r\n        // if condition is satisfied, no more\r\n        // removals are required\r\n        else if ((arr[j] - arr[i]) <= k)\r\n            return 0;\r\n     \r\n        // if the state has already been visited\r\n        else if (dp[i][j] != -1)\r\n            return dp[i][j];\r\n     \r\n        // when Amax-Amin>d\r\n        else if ((arr[j] - arr[i]) > k) {\r\n     \r\n            // minimum is taken of the removal\r\n            // of minimum element or removal\r\n            // of the maximum element\r\n            dp[i][j] = 1 + Math.min(countRemovals(arr, i + 1, j, k),\r\n                               countRemovals(arr, i, j - 1, k));\r\n        }\r\n        return dp[i][j];\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def removals(self,arr, n, k):\r\n        arr.sort()\r\n        # create a matrix to store the results of subproblems\r\n        self.dp=[[-1]*101 for _ in range(101)]\r\n        if n==1:\r\n            return 0\r\n        else :\r\n            return self.countRemovals(arr,0,n-1,k)\r\n    \r\n    def countRemovals(self,arr,i,j,k):\r\n        if i>=j:\r\n            return 0\r\n        # check if the difference between the maximum and minimum element in the subarray is less than or equal to k\r\n        elif (arr[j]-arr[i])<=k:\r\n            return 0\r\n        # check if the result for this subproblem has already been computed\r\n        elif self.dp[i][j]!=-1:\r\n            return self.dp[i][j]\r\n        # if the difference between maximum and minimum element in the subarray is greater than k\r\n        else:\r\n            # calculate the minimum number of removals required recursively\r\n            self.dp[i][j]=1+min(self.countRemovals(arr,i+1,j,k),self.countRemovals(arr,i,j-1,k))\r\n        return self.dp[i][j]",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    removals(arr, n, k) {\n        arr.sort((a, b) => a - b); // Sort the array numerically\n        let dp = new Array(n);\n        for (let i = 0; i < n; i++) {\n            dp[i] = new Array(n).fill(-1);\n        }\n        if (n == 1) {\n            return 0;\n        } else {\n            return this.countRemovals(arr, 0, n - 1, k, dp);\n        }\n    }\n\n    countRemovals(arr, i, j, k, dp) {\n        if (i >= j) {\n            return 0;\n        } else if (arr[j] - arr[i] <= k) {\n            return 0;\n        } else if (dp[i][j] != -1) {\n            return dp[i][j];\n        } else {\n            dp[i][j] = 1 + Math.min(\n                this.countRemovals(arr, i + 1, j, k, dp),\n                this.countRemovals(arr, i, j - 1, k, dp)\n            );\n        }\n        return dp[i][j];\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "\nclass Solution{\n    public int removals(List<int> arr, int k){\n        int n = arr.Count;\n        int ans = n;\n        arr.Sort();\n        for(int i =0;i<n;i++){\n             int x = k+arr[i];\n             int y = arr.BinarySearch(x);\n             if(y < 0) y = ~y;\n             if(y<i) break;\n             int temp = i+n-y;\n             ans = Math.Min(ans,temp);\n        }\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}