{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703365,
            "title": "Array Subset",
            "titleSlug": "array-subset-of-another-array2317",
            "content": "<p><span >Given two arrays <strong>a[] </strong>and <strong>b[]</strong>, your task is to determine whether <strong>b[]</strong> is a subset of <strong>a[]</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input</strong>: a[] = [11, 7, 1, 13, 21, 3, 7, 3], b[] = [11, 3, 7, 1, 7]\n<strong>Output</strong>: true\n<strong>Explanation: </strong>b[] is a subset of a[]</span></pre>\n<pre><span ><strong>Input</strong>: a[] = [1, 2, 3, 4, 4, 5, 6], b[] = [1, 2, 4]\n<strong>Output</strong>: true\n<strong>Explanation: </strong>b[] is a subset of a[]</span></pre>\n<pre><span ><strong>Input</strong>: a[] = [10, 5, 2, 23, 19], b[] = [19, 5, 3]<strong>\nOutput</strong>: false<strong>\nExplanation: </strong>b[] is not a subset of a[]</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= a.size(), b.size() &lt;= 10<sup>5</sup><br />1 &lt;= a[i], b[j] &lt;= 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given two integer arrays, `a[]` and `b[]`. Determine if array `b[]` is a subset of array `a[]`. In other words, check if every element in `b[]` is also present in `a[]` with at least the same frequency.",
                "constraints": [
                    "1 <= a.size(), b.size() <= 10^5",
                    "1 <= a[i], b[j] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "a[] = [11, 7, 1, 13, 21, 3, 7, 3], b[] = [11, 3, 7, 1, 7]",
                        "output": "true",
                        "explanation": "All elements of b[] are present in a[] with sufficient frequency.  For example, 7 appears twice in both a[] and b[]."
                    },
                    {
                        "input": "a[] = [1, 2, 3, 4, 4, 5, 6], b[] = [1, 2, 4]",
                        "output": "true",
                        "explanation": "All elements of b[] are present in a[].  Note that a[] contains two occurrences of 4, while b[] contains one.  This still satisfies the subset condition."
                    },
                    {
                        "input": "a[] = [10, 5, 2, 23, 19], b[] = [19, 5, 3]",
                        "output": "false",
                        "explanation": "The element 3 in b[] is not present in a[], therefore b[] is not a subset of a[]."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Traverse b[] and search for each element of b[] in the Hash Table. If the element is not found then return false.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Hash",
                "slug": "hash"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "accolite",
            "qualcomm",
            "ge"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to check if b is a subset of a\n    bool isSubset(vector<int> &a, vector<int> &b) {\n        int n = a.size();\n        int m = b.size();\n        // Create a unordered map to store the frequency of elements in a\n        unordered_map<int, int> mp;\n\n        // Count the frequency of elements in a\n        for (int i = 0; i < n; i++) {\n            mp[a[i]]++;\n        }\n\n        int count = 0;\n\n        // Iterate through the elements in b\n        for (int i = 0; i < m; i++) {\n            // If the element is present in a, increment the count\n            if (mp[b[i]] > 0) {\n                mp[b[i]]--;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public boolean isSubset(int a[], int b[]) {\n        int n = a.length;\n        int m = b.length;\n        // Create a hash map to store the frequencies of elements in array a\n        HashMap<Integer, Integer> hm = new HashMap<>();\n\n        // Increment the frequency of each element in array a\n        for (int i = 0; i < n; i++) {\n            hm.put(a[i], hm.getOrDefault(a[i], 0) + 1);\n        }\n\n        // Check if each element in array b is present in array a and decrement its\n        // frequency\n        for (int i = 0; i < m; i++) {\n            if (hm.containsKey(b[i])) {\n                // If frequency becomes 1, remove the element from the hash map\n                if (hm.get(b[i]) == 1) {\n                    hm.remove(b[i]);\n                } else {\n                    // Decrement the frequency of the element\n                    hm.put(b[i], hm.get(b[i]) - 1);\n                }\n            } else {\n                // If an element in array b is not present in array a, return \"No\"\n                return false;\n            }\n        }\n\n        // If all elements in array b are present in array a, return \"Yes\"\n        return true;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#User function Template for Python\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    #Function to check if a is a subset of b.\n    def isSubset(self, a, b):\n        #creating two dictionaries to store the frequency of each element in a and b.\n        dic1 = defaultdict(lambda: 0)\n\n        #iterating over a and updating the frequency in dic1.\n        for i in a:\n            dic1[i] += 1\n\n        #iterating over b and checking if the frequency of each element in b is greater than 0 in dic1.\n        for i in b:\n            if dic1[i] > 0:\n                dic1[i] -= 1\n            else:\n                return False\n\n        return True\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} a\n * @param {number[]} b\n * @returns {boolean}\n */\n\nclass Solution {\n    isSubset(a, b) {\n        let n = a.length;\n        let m = b.length;\n        let um = new Map();\n        let um2 = new Map();\n\n        for (let i = 0; i < n; i++) {\n            if (um.has(a[i])) {\n                um.set(a[i], um.get(a[i]) + 1);\n            } else {\n                um.set(a[i], 1);\n            }\n        }\n\n        for (let i = 0; i < m; i++) {\n            if (um2.has(b[i])) {\n                um2.set(b[i], um2.get(b[i]) + 1);\n            } else {\n                um2.set(b[i], 1);\n            }\n        }\n\n        let count = 0;\n        for (let [key, value] of um2) {\n            if (um.has(key) && um.get(key) >= value) {\n                count += value;\n            }\n        }\n\n        if (count == m) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}