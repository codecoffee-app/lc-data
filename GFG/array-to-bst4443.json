{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705723,
            "title": "Array to BST",
            "titleSlug": "array-to-bst4443",
            "content": "<p><span style=\"font-size: 18px;\">Given a <strong>sorted </strong>array. Convert it into a <strong>Height Balanced</strong> Binary Search Tree (BST). Return the <strong>root </strong>of the BST.</span></p>\n<blockquote>\n<p><span style=\"font-size: 18px;\"><strong>Height-balanced</strong> BST means a binary tree in which the depth of the left subtree and the right subtree of every node never differ by more than 1.</span></p>\n</blockquote>\n<p><span style=\"font-size: 18px;\">Note: The driver code will check the BST, if it is a Height-balanced BST, the output will be <strong>true</strong> otherwise the output will be <strong>false</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> nums = [1, 2, 3, 4]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The preorder traversal of the following BST formed is [2, 1, 3, 4]:\n</span><span style=\"font-size: 18px;\">&nbsp;\\t    2\n</span><span style=\"font-size: 18px;\">&nbsp;\\t  /   \\\n</span>\\t  <span style=\"font-size: 18px;\">1     3\n</span><span style=\"font-size: 18px;\">&nbsp;\\t\\t  \\\n&nbsp;\\t\\t   4</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>nums = [1, 2, 3, 4, 5, 6, 7]\n<strong>Ouput: </strong>true\n<strong>Explanation: </strong>The preorder traversal of the following BST formed is [4, 2, 1, 3, 6, 5, 7]:\n\\t  4\n\\t / \\\n\\t2   6\n     / \\   / \\\n    1 3  5 7</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n)<br /><strong>Expected Auxillary Space: </strong>O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; nums.size() &le; 10<sup>5</sup><br />1 &le; nums[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array, convert it into a height-balanced Binary Search Tree (BST). Return the root of the BST.\n\nA height-balanced BST is a binary tree where the depth of the left and right subtrees of every node differ by no more than 1.",
                "constraints": [
                    "1 <= nums.size() <= 10^5",
                    "1 <= nums[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 4]",
                        "output": "true",
                        "explanation": "A possible height-balanced BST can be formed. The driver code will check if the created BST is height-balanced."
                    },
                    {
                        "input": "[1, 2, 3, 4, 5, 6, 7]",
                        "output": "true",
                        "explanation": "A possible height-balanced BST can be formed. The driver code will check if the created BST is height-balanced."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">We select the middle element of the sorted array to be the root of the BST. This choice ensures that the BST remains height-balanced, as it divides the array into two nearly equal halves.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "snapdeal",
            "adobe",
            "cisco"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n\n    Node* sortedArrayToBSTUtil(vector<int>& nums, int left, int right) {\n        if (left > right)\n            return NULL;\n\n        int mid = left + (right - left) / 2; // Choose the middle element\n\n        Node* node = new Node(nums[mid]);\n\n        // Recursively construct the left subtree and right subtree\n        node->left = sortedArrayToBSTUtil(nums, left, mid - 1);\n        node->right = sortedArrayToBSTUtil(nums, mid + 1, right);\n\n        return node;\n    }\n\n    Node* sortedArrayToBST(vector<int>& nums) {\n\n        Node* root = sortedArrayToBSTUtil(nums, 0, nums.size() - 1);\n        return root;\n    }\n};\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    public Node sortedArrayToBSTUtil(int[] nums, int left, int right) {\n        if (left > right) return null;\n\n        int mid = left + (right - left) / 2;\n        Node node = new Node(nums[mid]);\n\n        node.left = sortedArrayToBSTUtil(nums, left, mid - 1);\n        node.right = sortedArrayToBSTUtil(nums, mid + 1, right);\n\n        return node;\n    }\n\n    public Node sortedArrayToBST(int[] nums) {\n        if (nums.length == 0) return null;\n        return sortedArrayToBSTUtil(nums, 0, nums.length - 1);\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def sortedArrayToBSTUtil(self, nums, left, right):\n        if left > right:\n            return None\n\n        mid = left + (right - left) // 2  # Choose the middle element\n\n        node = Node(nums[mid])\n\n        # Recursively construct the left subtree and right subtree\n        node.left = self.sortedArrayToBSTUtil(nums, left, mid - 1)\n        node.right = self.sortedArrayToBSTUtil(nums, mid + 1, right)\n\n        return node\n\n    def sortedArrayToBST(self, nums):\n        return self.sortedArrayToBSTUtil(nums, 0, len(nums) - 1)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    sortedArrayToBSTUtil(nums, left, right) {\n        if (left > right) return null;\n\n        let mid = left + Math.floor((right - left) / 2);\n        let node = new Node(nums[mid]);\n\n        // Recursively construct the left subtree and right subtree\n        node.left = this.sortedArrayToBSTUtil(nums, left, mid - 1);\n        node.right = this.sortedArrayToBSTUtil(nums, mid + 1, right);\n\n        return node;\n    }\n\n    sortedArrayToBST(nums) {\n        if (nums.length === 0) return null;\n        return this.sortedArrayToBSTUtil(nums, 0, nums.length - 1);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}