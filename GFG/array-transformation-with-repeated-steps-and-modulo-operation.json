{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 880231,
            "title": "Array Transformation with Repeated Steps and Modulo Operation",
            "titleSlug": "array-transformation-with-repeated-steps-and-modulo-operation",
            "content": "<p><span style=\"font-size: 18.6667px;\">You are given an array arr[] of integers. In each move, you need to perform the following operations on every element <strong>arr[i]</strong></span><span style=\"font-size: 18.6667px;\"> in the array k times:</span></p>\n<ul>\n<li><span >If every arr[i] equals 80 at some point, add another element 0 to the end of the array</span></li>\n<li><span >Replace each arr[i] by (arr[i] + 1) modulo 81.</span></li>\n</ul>\n<p><strong><span style=\"font-size: 18.6667px;\">Examples:</span></strong></p>\n<pre><span ><span style=\"font-size: 18.6667px;\"><strong>Input:</strong> arr[] = [65, 2, 80, 4], k = 3\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> After first move array will be: [66, 3, 0, 5, 1], after second move array will be [67, 4, 1, 6, 2], after third move array will be [68, 5, 2, 7, 3]. Hence final size is 5.</span></span></pre>\n<pre><span ><span style=\"font-size: 18.6667px;\"><strong>Input:</strong> arr[] = [80, 80, 79, 79], k = 2\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> After first move array will be: {0,0,80,80,0,0}, after second move array  will be {1, 1, 0, 0, 1, 1, 0, 0}. Hence final size is 8.</span></span></pre>\n<p><span ><span style=\"font-size: 18.6667px;\"><strong>Constraints:</strong><br />1 &lt;= arr.size(), k &lt;= 1000<br />1 &lt;= arr[i] &lt; 81<br /></span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of integers, perform the following operations on each element `arr[i]` of the array `k` times:\n\n*   If at any point every `arr[i]` equals 80, append a 0 to the end of the array.\n*   Replace each `arr[i]` with `(arr[i] + 1) modulo 81`.",
                "constraints": [
                    "1 <= arr.size(), k <= 1000",
                    "1 <= arr[i] < 81"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [65, 2, 80, 4], k = 3",
                        "output": "5",
                        "explanation": "After the first move, the array becomes [66, 3, 0, 5, 1]. After the second move, it becomes [67, 4, 1, 6, 2]. After the third move, it becomes [68, 5, 2, 7, 3].  Therefore, the final size is 5."
                    },
                    {
                        "input": "arr[] = [80, 80, 79, 79], k = 2",
                        "output": "8",
                        "explanation": "After the first move, the array becomes [0, 0, 80, 80, 0, 0]. After the second move, it becomes [1, 1, 0, 0, 1, 1, 0, 0]. Therefore, the final size is 8."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use frequency array to track occurrences and perform transformations.</p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    int arrayTransform(vector<int> &arr, int k) {\n        int n = arr.size();\n        // As last 81 is there\n        int freq[82] = {0};\n\n        // Iterate over array\n        for (int i = 0; i < n; i++)\n            freq[arr[i]]++;\n\n        // Iterate over k steps\n        for (int i = 0; i < k; i++) {\n\n            int cur = freq[0];\n\n            // Iterate for whole length arr\n            for (int j = 1; j < 81; j++) {\n\n                // Assign over values\n                int temp = freq[j];\n                freq[j] = cur;\n                cur = temp;\n            }\n            freq[0] = cur;\n            freq[1] += cur;\n        }\n\n        // Sum of all number present in freq array\n        int sum = 0;\n\n        for (int i = 0; i <= 80; i++) {\n            sum += freq[i];\n        }\n        return sum;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public int arrayTransform(int[] arr, int k) {\n        int n = arr.length;\n        int[] freq = new int[82];\n\n        // Iterate over array\n        for (int i = 0; i < n; i++) {\n            freq[arr[i]]++;\n        }\n\n        // Iterate over k steps\n        for (int i = 0; i < k; i++) {\n            int cur = freq[0];\n\n            // Iterate for whole length arr\n            for (int j = 1; j < 81; j++) {\n                int temp = freq[j];\n                freq[j] = cur;\n                cur = temp;\n            }\n            freq[0] = cur;\n            freq[1] += cur;\n        }\n\n        // Sum of all number present in freq array\n        int sum = 0;\n        for (int i = 0; i <= 80; i++) {\n            sum += freq[i];\n        }\n        return sum;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def arrayTransform(self, arr, k):\n        n = len(arr)\n        freq = [0] * 82\n\n        # Iterate over array\n        for num in arr:\n            freq[num] += 1\n\n        # Iterate over k steps\n        for _ in range(k):\n            cur = freq[0]\n\n            # Iterate for whole length arr\n            for j in range(1, 81):\n                temp = freq[j]\n                freq[j] = cur\n                cur = temp\n            freq[0] = cur\n            freq[1] += cur\n\n        # Sum of all number present in freq array\n        return sum(freq[:81])\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\nclass Solution {\n    /**\n     * Transforms the array based on the given steps.\n     *\n     * @param {number[]} arr\n     * @param {number} k\n     * @returns {number}\n     */\n    arrayTransform(arr, k) {\n        let n = arr.length;\n        let freq = new Array(82).fill(0);\n\n        // Iterate over array\n        for (let i = 0; i < n; i++) {\n            freq[arr[i]]++;\n        }\n\n        // Iterate over k steps\n        for (let i = 0; i < k; i++) {\n            let cur = freq[0];\n\n            // Iterate for whole length arr\n            for (let j = 1; j < 81; j++) {\n                let temp = freq[j];\n                freq[j] = cur;\n                cur = temp;\n            }\n            freq[0] = cur;\n            freq[1] += cur;\n        }\n\n        // Sum of all number present in freq array\n        let sum = 0;\n        for (let i = 0; i <= 80; i++) {\n            sum += freq[i];\n        }\n        return sum;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}