{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704574,
            "title": "Array's Game",
            "titleSlug": "arrays-game0327",
            "content": "<p><span style=\"font-size:18px\">Given an array A of N integers. Two players play a game with the array in turns. The game aims to make the array equal. Players add 1 to any number of the array to increase it by 1(except the maximum number). The player who adds last i.e. the player after whose turn the array becomes equal is declared the winner. If no moves can be made, the game is a draw.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN=2\nA[]={1,2}\n<strong>Output:</strong>\nFirst\n<strong>Explanation:</strong>\nThe first player adds 1 to the first \nnumber making it 2. The array \nbecomes equal, so he is the winner.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN=3\nA[]={2,2,2}\n<strong>Output:</strong>\nDraw\n<strong>Explanation:</strong>\nNo moves can be made as all the elements are\nalready maximum and numbers cannot be\nadded to the maximum numbers.</span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function arrayGame() which takes an integer N and an integer array A as input parameters and returns a string denoting the result of the game. (&quot;Draw&quot; if the game is a draw, &quot;First&quot; if the first player and &quot;Second&quot; otherwise).</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N)<br />\n<strong>Expected Auxillary Space:&nbsp;</strong>O(1)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;=N&lt;=10<sup>6</sup><br />\n1&lt;=A[i]&lt;=10<sup>9</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `A` of `N` integers, two players take turns modifying the array. In each turn, a player can increment any element of the array (except the maximum element) by 1. The goal is to make all elements of the array equal. The player who makes the last move to equalize the array wins. If no moves can be made (the array is already equal), the game is a draw. Determine the winner.",
                "constraints": [
                    "1 <= N <= 10^6",
                    "1 <= A[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N=2\nA=[1,2]",
                        "output": "First",
                        "explanation": "The first player adds 1 to the first element, making the array [2, 2]. Since the array is now equal, the first player wins."
                    },
                    {
                        "input": "N=3\nA=[2,2,2]",
                        "output": "Draw",
                        "explanation": "No moves can be made because all elements are already equal (the maximum element), so the game is a draw."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Look out for integer overflow.</span></p>",
            "<p><span style=\"font-size:18px\">The answer depends only on the number of times 1 can be added to any number of the array.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Game Theory",
                "slug": "game-theory"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to determine the winner of the array game\n    string arrayGame(int N, int A[]) {\n        long long int mx = 0, i, count = 0;\n        \n        // finding the maximum element in the array\n        for (i = 0; i < N; i++)\n            if (mx < A[i]) mx = A[i];\n        \n        // calculating the count of elements to be added or subtracted\n        for (i = 0; i < N; i++) count += mx - A[i];\n        \n        // determining the winner based on count\n        if (count == 0) return \"Draw\";\n        if (count % 2 == 0) return \"Second\";\n        return \"First\";\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for java\n\nclass Solution {\n    // Function to determine the winner of the array game.\n    String arrayGame(int N, int A[]) {\n        // Initialize the maximum element and count variables.\n        int mx = 0, i;\n        long count = 0;\n        \n        // Find the maximum element in the array.\n        for (i = 0; i < N; i++)\n            if (mx < A[i]) mx = A[i];\n        \n        // Calculate the count by subtracting each element from the maximum element.\n        for (i = 0; i < N; i++) count += mx - A[i];\n        \n        // Check if the count is zero, return \"Draw\" if true.\n        if (count == 0) return \"Draw\";\n        \n        // Check if the count is even, return \"Second\" if true.\n        if (count % 2 == 0) return \"Second\";\n        \n        // Return \"First\" if none of the above conditions are met.\n        return \"First\";\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to check the winner of the array game.\n    def arrayGame(self,N,A):\n\n        #initializing the maximum and count variables.\n        mx,count=0,0\n\n        #iterating over the array to find the maximum element.\n        for i in A:\n            mx=max(mx,i)\n\n        #iterating over the array to calculate the count.\n        for i in A:\n            count+=mx-i\n\n        #checking if count is equal to 0, return \"Draw\".\n        if count==0:\n            return \"Draw\"\n\n        #checking if count is divisible by 2, return \"Second\".\n        if count%2==0:\n            return \"Second\"\n\n        #if count is not divisible by 2, return \"First\".\n        return \"First\"",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @param {number[]} A\n * @returns {string}\n*/\n\nclass Solution {\n    //Function to check the winner of the array game.\n    arrayGame(N, A)\n    {\n        //initializing the maximum and count variables.\n        let mx = 0;\n        let count = 0;\n\n        //iterating over the array to find the maximum element.\n        for (let i = 0; i < N; i++) {\n            mx = Math.max(mx, A[i]);\n        }\n\n        //iterating over the array to calculate the count.\n        for (let i = 0; i < N; i++) {\n            count += mx - A[i];\n        }\n\n        //checking if count is equal to 0, return \"Draw\".\n        if (count === 0) {\n            return \"Draw\";\n        }\n\n        //checking if count is divisible by 2, return \"Second\".\n        if (count % 2 === 0) {\n            return \"Second\";\n        }\n\n        //if count is not divisible by 2, return \"First\".\n        return \"First\";\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    // Complete this function\n    // Function to perform array game\n    public string arrayGame(int N, int[] A)\n    {\n        long mx = 0;\n        long count = 0;\n\n        // finding the maximum element in the array\n        for (int i = 0; i < N; i++)\n            if (mx < A[i]) mx = A[i];\n\n        // calculating the count of elements to be added or subtracted\n        for (int i = 0; i < N; i++) count += mx - A[i];\n\n        // determining the winner based on count\n        if (count == 0) return \"Draw\";\n        if (count % 2 == 0) return \"Second\";\n        return \"First\";\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}