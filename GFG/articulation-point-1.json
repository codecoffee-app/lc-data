{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 708502,
            "title": "Articulation Point - I",
            "titleSlug": "articulation-point-1",
            "content": "<p><span style=\"font-size: 18px;\">Given an undirected connected graph&nbsp;with&nbsp;<strong>V&nbsp;</strong>vertices and adjacency list&nbsp;<strong>adj</strong>. You are required to find all the vertices removing which (and edges through it) disconnects the graph into 2 or more components and return it in sorted manner.<br /><strong>Note:&nbsp;</strong>Indexing is zero-based i.e nodes numbering from (0 to V-1). There might be loops present in the graph.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/708502/Web/Other/a27f9040-9783-4386-92f9-b8684c75db07_1685087852.png\" alt=\"\" />\n<strong>Output:</strong>{1,4}\n<strong>Explanation: </strong>Removing the vertex 1 will\ndiscconect the graph as-\n<img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/708502/Web/Other/7e12629a-ba31-411e-b6ac-ccf5a8baa6a3_1685087852.png\" alt=\"\" />\nRemoving the vertex 4 will disconnect the\ngraph as-\n<img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/708502/Web/Other/fb781bda-91d6-4920-96a8-c976412c3ada_1685087852.png\" alt=\"\" />\n</span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>articulationPoints</strong><strong>()&nbsp;</strong>which takes V and adj as input parameters and returns a list containing all the vertices removing which turn the graph into two or more disconnected components in sorted order. If there are no such vertices then returns a list containing -1.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(V + E)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(V)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; V &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected connected graph with V vertices and an adjacency list adj, identify all articulation points. An articulation point is a vertex that, when removed along with its incident edges, disconnects the graph into two or more connected components. Return a sorted list of these articulation points. Indexing is zero-based (nodes numbered from 0 to V-1). The graph may contain self-loops.",
                "constraints": [
                    "1 <= V <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "V = 5, adj = {{1, 2, 3}, {0, 2}, {0, 1, 4}, {0}, {2}}",
                        "output": "{1, 4}",
                        "explanation": "Removing vertex 1 disconnects the graph. Similarly, removing vertex 4 also disconnects the graph.  Therefore, 1 and 4 are articulation points."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Requires DFS</p>",
            "<p>A simple approach is to one by one remove all vertices and see if the removal of a vertex causes a disconnected graph. Following are steps of a simple approach for the connected graphs.</p>\n\n<p>1) For every vertex v, do the following<br />\n&hellip;..a) Remove v from graph<br />\n..&hellip;b) See if the graph remains connected (We can either use BFS or DFS)<br />\n&hellip;..c) Add v back to the graph</p>\n\n<p>O(V*(V+E)) -- Complexity</p>",
            "<p><strong>A O(V+E) algorithm to find all&nbsp;<strong>A</strong>rticulation&nbsp;<strong>P</strong>oints (APs)</strong><br />\nThe idea is to use DFS (Depth First Search). In DFS, we follow vertices in tree form called DFS tree. In the DFS tree, a vertex u is the parent of another vertex v if v is discovered by u (obviously v is adjacent to u in the graph). In the DFS tree, a vertex u is an articulation point if one of the following two conditions is true.<br />\n<strong>1)</strong>&nbsp;u is the root of the DFS tree and it has at least two children.<br />\n<strong>2)</strong>&nbsp;u is not the root of the DFS tree and it has a child v such that no vertex in the subtree rooted with v has a back edge to one of the ancestors (in the DFS tree) of u.</p>\n\n<p>O(V+E) -- complexity</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\n\r\npublic:\r\n    void APUtil(vector<int> adj[], int u, bool visited[],\r\n                int disc[], int low[], int &time, int parent,\r\n                bool isAP[])\r\n    {\r\n        // Count of children in DFS Tree\r\n        int children = 0;\r\n\r\n        // Mark the current node as visited\r\n        visited[u] = true;\r\n\r\n        // Initialize discovery time and low value\r\n        disc[u] = low[u] = ++time;\r\n\r\n        // Go through all vertices aadjacent to this\r\n        for (auto v : adj[u])\r\n        {\r\n            // If v is not visited yet, then make it a child of u\r\n            // in DFS tree and recur for it\r\n            if (!visited[v])\r\n            {\r\n                children++;\r\n                APUtil(adj, v, visited, disc, low, time, u, isAP);\r\n\r\n                // Check if the subtree rooted with v has\r\n                // a connection to one of the ancestors of u\r\n                low[u]  = min(low[u], low[v]);\r\n\r\n                // If u is not root and low value of one of\r\n                // its child is more than discovery value of u.\r\n                if (parent != -1 && low[v] >= disc[u])\r\n                    isAP[u] = true;\r\n            }\r\n\r\n            // Update low value of u for parent function calls.\r\n            else if (v != parent)\r\n                low[u]  = min(low[u], disc[v]);\r\n        }\r\n\r\n\r\n        // If u is root of DFS tree and has two or more chilren.\r\n        if (parent == -1 && children > 1)\r\n            isAP[u] = true;\r\n    }\r\n\r\n    vector<int> articulationPoints(int V, vector<int>adj[]) {\r\n\r\n        vector<int> ans;  // vector to store the articulatipon points\r\n\r\n\r\n        int disc[V] = {0};\r\n        int low[V];\r\n        bool visited[V] = {false};\r\n        bool isAP[V] = {false};\r\n        int time = 0, par = -1;\r\n\r\n\r\n        APUtil(adj, 0, visited, disc, low,\r\n               time, par, isAP);\r\n\r\n        // Printing the APs\r\n        for (int u = 0; u < V; u++)\r\n            if (isAP[u] == true)\r\n                ans.push_back(u);\r\n\r\n        //  for(int i=0; i<N; i++) {\r\n        //      if(arti[i])     // if ith node is an articulation point\r\n        //          ans.push_back(i);\r\n        //  }\r\n\r\n        if (ans.size() == 0)\r\n            ans.push_back(-1);\r\n\r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    static int time; // time variable to keep track of discovery time\n    void APUtil(ArrayList<ArrayList<Integer>> adj, int u, boolean visited[], int disc[], int low[], int parent, boolean isAP[]) {\n        int children = 0; // count of children in DFS tree\n\n        visited[u] = true; // mark the current node as visited\n\n        disc[u] = low[u] = ++time; // initialize discovery time and low value\n\n        for(Integer v : adj.get(u)) { // iterate through each adjacent node of u\n            if(!visited[v]) { // if v is not visited, perform DFS on v\n                children++;\n                APUtil(adj, v, visited, disc, low, u, isAP); // recursive call\n\n                low[u] = Math.min(low[u], low[v]); // update low value of u\n\n                if(parent != -1 && low[v] >= disc[u]) // check if it is an articulation point\n                    isAP[u] = true;\n            }\n            else if(v != parent) { // if v is already visited and not the parent of u\n                low[u] = Math.min(low[u], disc[v]); // update low value of u\n            }\n        }\n\n        if(parent == -1 && children > 1) // check if root node is an articulation point\n            isAP[u] = true;\n    }\n\n    // Function to return all the articulation points in the graph\n    public ArrayList<Integer> articulationPoints(int V,ArrayList<ArrayList<Integer>> adj) {\n        ArrayList<Integer> ans = new ArrayList<>(); // result array list\n\n        int[] disc = new int[V], low = new int[V]; // arrays to store discovery time and low value\n        boolean[] visited = new boolean[V], isAP = new boolean[V]; // arrays to keep track of visited nodes and articulation points\n        int par = -1; // initialize parent of root node as -1\n        time = 0; // initialize time as 0\n\n        APUtil(adj, 0, visited, disc, low, par, isAP); // call helper function to find articulation points\n\n        for(int u = 0; u < V; u++) // iterate through all nodes\n            if(isAP[u]) // if node is an articulation point, add it to result array\n                ans.add(u);\n\n        if(ans.size() == 0) // if there are no articulation points, add -1 to result array\n            ans.add(-1);\n\n        return ans; // return result array\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "import sys\n\nsys.setrecursionlimit(10**6)\n\n\nclass Solution:\n\n    def dfs(self, arr, u, par, l, d, vis, ap, time):\n        d[u] = l[u] = time\n        time += 1\n        ch = 0\n        vis[u] = 1\n        for v in arr[u]:\n            if (vis[v] == 0):\n                ch += 1\n                self.dfs(arr, v, u, l, d, vis, ap, time)\n                l[u] = min(l[u], l[v])\n                if (par == -1 and ch > 1):\n                    ap.add(u)\n                    # print(u)\n                elif (par != -1 and l[v] >= d[u]):\n                    ap.add(u)\n                    # print(u)\n            elif (par != v and u != v):\n                l[u] = min(l[u], d[v])\n\n    def articulationPoints(self, V, arr):\n        vis = [0] * V\n        ap = set()\n        l = [0] * V\n        d = [0] * V\n        time = 0\n        for i in range(V):\n            if (vis[i] == 0):\n                self.dfs(arr, i, -1, l, d, vis, ap, time)\n        # print(ap)\n        vec = list(ap)\n        if (len(vec) == 0):\n            vec.append(-1)\n        return sorted(vec)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}