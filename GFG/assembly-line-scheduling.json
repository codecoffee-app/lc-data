{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710088,
            "title": "Assembly Line Scheduling",
            "titleSlug": "assembly-line-scheduling",
            "content": "<p><span style=\"font-size:18px\">A car factory has two assembly lines, and also given an&nbsp; 2D array <strong>a[2][]</strong> of size <strong>N </strong>which represent the time taken by each station. Each station is dedicated to some sort of work like engine fitting, body fitting, painting, and so on. So, a car chassis must pass through each of the n stations in order before exiting the factory. The two parallel assemble line perform same task.<br />\r\nFrom any line one can switch another line diagonally. A 2D array <strong>T[2][]</strong> of size <strong>N</strong> is also given, which represent&nbsp; exit time to switch line 1 to line 2 diagonally.<br />\r\nAlso each assembly line takes an entry time e<sub>i</sub>&nbsp;and exit time x<sub>i</sub>&nbsp;which may be different for the two lines.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">For more clarity, refer the following diagram<br />\r\n<img alt=\"\" src=\"https://media.geeksforgeeks.org/img-practice/AssembleScheduling1-1646927884.png\" /></span></p>\r\n\r\n<p><span style=\"font-size:18px\">The task is to&nbsp;computing the minimum time it will take to build a car chassis.<br />\r\nOne can minimize the total time taken by performing following steps:</span></p>\r\n\r\n<ol>\r\n\t<li><span style=\"font-size:18px\">&nbsp;A car chassis must pass through all stations from 1 to N&nbsp;in order(in any of the two assembly lines). i.e. it cannot jump from station i to station j if they are not at one move distance.</span></li>\r\n\t<li><span style=\"font-size:18px\">The car chassis can move one station forward in the same line, or one station diagonally in the other line. It incurs an extra cost T<sub>i,j</sub> to move to station j from line i. No cost is incurred for movement in same line.</span></li>\r\n\t<li><span style=\"font-size:18px\">The time taken in station j on line i is a<sub>i, j</sub>.</span></li>\r\n</ol>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 4\r\na[2][] = <code>{{4, 5, 3, 2}, \r\n\\t{2, 10, 1, 4}</code>}\r\nT[2][] = {{0,7, 4, 5},\r\n\\t     {0,9, 2, 8}}\r\ne[2] = {10,12}, x[2] = {18,7}</span>\r\n\r\n<span style=\"font-size:18px\"><strong>Output:</strong> 35\r\n<strong>Explanation: </strong>\r\nAccording to the TC, this would \r\nbe the following diagram\r\n<img alt=\"\" src=\"https://media.geeksforgeeks.org/img-practice/AssembleScheduling-1646930583.png\" style=\"height:200px; width:536px\" />\r\nThe bold line shows the path covered by the \r\ncar chassis for given input values. So the minimum \r\ntime taken by the car is 35.\r\n</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function&nbsp;<strong>carAssembly</strong><strong>()</strong>&nbsp;which takes two array of&nbsp;integers&nbsp;<strong>a,T </strong>of size&nbsp;<strong>n&nbsp;</strong>and<strong>&nbsp;</strong>array of<strong> e&nbsp;</strong>and <strong>x </strong>of size 2<strong>&nbsp;</strong>as parameters and returns an integer&nbsp;denoting the answer.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le;&nbsp;N &le; 10<sup>5</sup><br />\r\n1 &le; a[2][], T[2][], e[], x[]&nbsp;&le; 10<sup>6</sup></span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\n\r\nclass Solution{\r\n  public:\r\n  int carAssembly(vector<vector<int>>& a, vector<vector<int>>& T, vector<int>& e, vector<int>& x){\r\n      \r\n    int first, second;\r\n    int n = a[0].size();\r\n    // Time taken to leave first \r\n    // station in line 1 \r\n    first = e[0] + a[0][0]; \r\n      \r\n    // Time taken to leave first \r\n    // station in line 2 \r\n    second = e[1] + a[1][0]; \r\n\r\n      for(int i=1;i<n;i++){\r\n        int up = min(first+a[0][i], second+T[1][i]+a[0][i]);\r\n        int down = min(second+a[1][i], first+T[0][i]+a[1][i]);\r\n\r\n        first = up;\r\n        second = down;\r\n      }\r\n\r\n      return min(first+x[0], second+x[1]);\r\n\r\n  }\r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int carAssembly(int[][] a, int[][] T, int[] e, int[] x)\n    {\n        int first, second;\n        int n = a[0].Length;\n        // Time taken to leave first \n        // station in line 1 \n        first = e[0] + a[0][0]; \n      \n        // Time taken to leave first \n        // station in line 2 \n        second = e[1] + a[1][0]; \n\n        for(int i=1;i<n;i++){\n            int up = Math.Min(first+a[0][i], second+T[1][i]+a[0][i]);\n            int down = Math.Min(second+a[1][i], first+T[0][i]+a[1][i]);\n\n            first = up;\n            second = down;\n        }\n\n        return Math.Min(first+x[0], second+x[1]);\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}