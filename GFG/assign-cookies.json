{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712384,
            "title": "Assign Cookies",
            "titleSlug": "assign-cookies",
            "content": "<p><span >Assume you are an awesome parent of some children and want to give your children some cookies. But, you should give each child at most one cookie.<br />Each child<strong> i</strong> has a greed factor <strong>greed[i]</strong>, which is the minimum size of cookie that the child will be content with and each cookie <strong>j</strong> has a size <strong>cookie[j]</strong>. If <strong>cookie[j] &gt;= greed[i]</strong>, we can assign the cookie<strong> j</strong> to the child<strong> i<sup>th</sup></strong>, and the child <strong>i</strong> will be content.<br />Find the maximum number of child that can be content.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input :&nbsp;</strong>greed[] = [1, 2, 3], cookie = [1, 1]<br /><strong>Output:&nbsp;</strong>1<br /><strong>Explanation:&nbsp;</strong>You can only assign cookie 0 or 1 to child 0.</span></pre>\n<pre><span ><strong>Input :&nbsp;</strong>greed[] = [1, 2], cookie = [1, 2, 3]<br /><strong>Output: </strong>2<br /><strong>Explanation:&nbsp;</strong>You can assign cookie 0 to child 0 and cookie 1 to child 1.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(nlogn)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; greed.size() &le;&nbsp; 10<sup>5</sup><br />1 &le; cookie.size() &le;&nbsp; 10<sup>5</sup><br />1 &le; greed[i] , cookie[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Try giving a cookie to a child with the lowest greed, and also give a cookie that just satisfies the greed.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxChildren(vector<int> &greed, vector<int> &cookie) {\n        // Sorting the greed factor and cookie size arrays\n        sort(greed.begin(), greed.end());\n        sort(cookie.begin(), cookie.end());\n        int i = 0, j = 0, ans = 0;\n        while (i < greed.size() && j < cookie.size()) {\n            if (cookie[j] >= greed[i]) {\n                i++; // when the child get the cookie, foward child by 1\n                ans++;\n            }\n            j++;\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    public int maxChildren(int[] greed, int[] cookie) {\n        // Sorting the greed factor and cookie size arrays\n        Arrays.sort(greed);\n        Arrays.sort(cookie);\n        int i = 0, j = 0, ans = 0;\n        while (i < greed.length && j < cookie.length) {\n            if (cookie[j] >= greed[i]) {\n                i++; // when the child gets the cookie, move to the next child\n                ans++;\n            }\n            j++;\n        }\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxChildren(self, greed, cookie):\n        #Sorting the greed factor and cookie size arrays\n        greed.sort()\n        cookie.sort()\n        i, j, ans = 0, 0, 0\n        while i < len(greed) and j < len(cookie):\n            if cookie[j] >= greed[i]:\n                i += 1  # when the child gets the cookie, move to the next child\n                ans += 1\n            j += 1\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxChildren(greed, cookie) {\n        // Sorting the greed factor and cookie size arrays\n        greed.sort((a, b) => a - b);\n        cookie.sort((a, b) => a - b);\n        let i = 0, j = 0, ans = 0;\n        while (i < greed.length && j < cookie.length) {\n            if (cookie[j] >= greed[i]) {\n                i++; // when the child gets the cookie, move to the next child\n                ans++;\n            }\n            j++;\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}