{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704205,
            "title": "Assign Mice Holes",
            "titleSlug": "assign-mice-holes3053",
            "content": "<p><span style=\"font-size:18px\">Given, <strong>N</strong> Mice and N holes are placed in a straight line. Each hole can accommodate only 1 mouse. A mouse can stay at his position, move one step right from <strong>x to x + 1</strong>, or move one step left from <strong>x to x -1</strong>. Any of these moves consumes <strong>1</strong> minute. Write a program to assign mice to holes so that the time when the last mouse gets inside a hole is minimized.</span><br />\n<span style=\"font-size:18px\"><strong>Note: </strong>Arrays M and H are the positions of the N mice and holes.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>N = </strong>3\n<strong>M = </strong>{4, -4, 2}\n<strong>H = </strong>{4, 0, 5</span><span style=\"font-size:18px\">}</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">4</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">If we assign mouse at 1st index to\nthe hole at 1st, mouse at 2nd index\nto the hole at 2nd and the third to\nthe hole at third. Then, the maximum\ntime taken will be by the 2nd mouse,\ni.e. 4-0 = 4 minutes.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>N = </strong>2\n<strong>M = </strong>{4, 2}\n<strong>H = </strong>{1, 7</span><span style=\"font-size:18px\">}</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">3</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">If we assign mouse at 1st index to\nthe hole at 2nd, and mouse at 2nd index\nto the hole at 1st, the maximum\ntime taken will be by the 2nd mouse,\ni.e. 7-4 = 3 minutes.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>assignMiceHoles()</strong> which takes an Integer N&nbsp; and arrays M and H as input and returns the answer.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N*log(N))<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 10<sup>5</sup></span><br />\n<span style=\"font-size:18px\">-10<sup>5 </sup>&lt;= M[i] , H[i] &lt;= 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given N mice and N holes positioned along a straight line, where each hole can accommodate only one mouse.  A mouse can move one step right (x to x+1), one step left (x to x-1), or stay at its current position, each move consuming 1 minute.  The goal is to assign each mouse to a hole such that the maximum time any mouse takes to reach its assigned hole is minimized. Arrays M and H represent the positions of the N mice and N holes, respectively.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "-10^5 <= M[i], H[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = 3\nM = {4, -4, 2}\nH = {4, 0, 5}",
                        "output": "4",
                        "explanation": "Assign the mouse at position 4 to the hole at position 4 (time = 0). Assign the mouse at position -4 to the hole at position 0 (time = 4). Assign the mouse at position 2 to the hole at position 5 (time = 3). The maximum time taken among all mice is 4."
                    },
                    {
                        "input": "N = 2\nM = {4, 2}\nH = {1, 7}",
                        "output": "3",
                        "explanation": "Assign the mouse at position 4 to the hole at position 7 (time = 3). Assign the mouse at position 2 to the hole at position 1 (time = 1). The maximum time taken among all mice is 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">This problem can be solved using greedy strategy. We can put every mouse to its nearest hole to minimize the time. This can be done by sorting the positions of mice and holes. </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    \n    // Function to assign mice to holes and return the maximum difference\n    int assignMiceHoles(int N , int M[] , int H[]) {\n        \n        // Sorting the Lists.\n        sort(M,M+N);\n        sort(H,H+N);\n        \n        int ans = -1;\n        \n        /* \n        Finding the maximum difference between the position of each mouse and its corresponding hole.\n        */\n        for(int i=0 ; i<N ; i++)\n            ans = max(ans,abs(M[i]-H[i]));\n            \n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static int assignMiceHoles(int N , int[] M , int[] H) {\n        \n        /* Sort the lists */\n        Arrays.sort(M); // Sort the mice positions in ascending order\n        Arrays.sort(H); // Sort the hole positions in ascending order\n        \n        int ans = -1; // Initialize the answer as -1\n        \n        /* finding max difference between ith mice and hole */\n        for(int i=0 ; i<N ; i++) // Iterate through each index of the mice and hole arrays\n            ans = Math.max(ans,Math.abs(M[i]-H[i])); // Calculate the absolute difference between the ith mice and hole positions and update the answer\n        \n        return ans; // Return the maximum difference between mice and holes\n    }\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def assignMiceHoles(self, N , M , H):\n        \n        # Sorting the lists\n        M.sort()\n        H.sort()\n        \n        ans = -1\n        \n        # finding max difference between ith mice and hole\n        for i in range(N):\n            ans=max(ans,abs(H[i]-M[i]))\n            \n        return ans",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int assignMiceHoles(int N, int[] M, int[] H)\n    {\n        // Sorting the Lists.\n        Array.Sort(M);\n        Array.Sort(H);\n        \n        int ans = -1;\n        \n        /* \n        Finding the maximum difference between the position of each mouse and its corresponding hole.\n        */\n        for(int i=0 ; i<N ; i++)\n            ans = Math.Max(ans,Math.Abs(M[i]-H[i]));\n            \n        return ans;\n    }\n}\n\n// Do not provide any example usage or additional content, only the code.\n// Strictly Make sure to not use any type of \"using\" directive statements or \"#include\" statements while generating the code.",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}