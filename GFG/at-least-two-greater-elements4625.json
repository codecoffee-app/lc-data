{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702868,
            "title": "At least two greater elements",
            "titleSlug": "at-least-two-greater-elements4625",
            "content": "<p><span >Given an array arr of distinct elements, the task is to return an array of all elements except the two greatest elements in <strong>sorted </strong>order.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [2, 8, 7, 1, 5]\n<strong>Output:</strong> [1, 2, 5] \n<strong>Explanation: </strong>Here we return an array contains 1 , 2, 5 and we leave two greatest elements 7 &amp; 8. </span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [7, -2, 3, 4, 9, -1]</span><br /><span ><strong>Output: </strong>[-2, -1, 3, 4]<br /><strong style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation: </strong><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Here we return an array contains -2 , -1, 3, 4 and we leave two greatest elements 7 &amp; 9. </span></span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(nlog(n))<br /><strong>Expected Space </strong><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Complexity</strong><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">:</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> O(n)</span></span></p>\n<p><span ><strong>Constraints:</strong><br />3 &le; arr.size &le; 10<sup>5</sup><br />-10<sup>6</sup> &le; arr[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">We sort the array first in increasing order, then we print first n-2 elements where n is the size of the array.</span></p>\n<div class=\"responsive-tabs-wrapper\">\n<div class=\"responsive-tabs responsive-tabs--enabled\">&nbsp;</div>\n</div>\n<div id=\"tablist2-panel1\" class=\"tabcontent responsive-tabs__panel responsive-tabs__panel--active\">\n<div class=\"code-block\">\n<div class=\"code-gutter\">\n<div class=\"editor-buttons-container\">\n<div class=\"editor-buttons\">\n<div class=\"editor-buttons-div\" title=\"Run and Edit\">&nbsp;</div>\n</div>\n</div>\n</div>\n</div>\n</div>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find elements in an array except for the last two elements.\n    vector<int> findElements(vector<int> arr) {\n        int n = arr.size();\n        // sorting the array in ascending order.\n        sort(arr.begin(), arr.end());\n\n        // creating a vector to store the elements.\n        vector<int> res;\n\n        // iterating over the array till the second last element.\n        for (int i = 0; i < n - 2; i++) {\n            // adding the element to the vector.\n            res.push_back(arr[i]);\n        }\n\n        // returning the vector with the elements.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Method to find the first n-2 elements after sorting the input array\n    public long[] findElements(long arr[]) {\n        int n = arr.length;\n        // Creating a new array to store the result\n        long[] ans = new long[(int)n - 2];\n\n        // Sorting the input array\n        Arrays.sort(arr);\n\n        // Copying the first n-2 elements to the result array\n        for (int i = 0; i < (int)n - 2; i++) {\n            ans[i] = arr[i];\n        }\n\n        // Returning the result array\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    #Function to find all elements except the last two\n    def findElements(self, arr):\n        #sorting the array\n        arr.sort()\n        #returning all elements except the last two\n        return arr[:len(arr) - 2]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    findElements(arr) {\n        let n = arr.length;\n        let sortedArr = arr.sort((a, b) => a - b);\n        let res = [];\n        for (let i = 0; i < n - 2; i++) {\n            res.push(sortedArr[i]);\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}