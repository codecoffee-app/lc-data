{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 876431,
            "title": "Meeting Rooms II",
            "titleSlug": "attend-all-meetings-ii",
            "content": "<p><span style=\"font-size: 18.6667px;\">Given two arrays&nbsp;<strong>start[] </strong>and<strong> end[]</strong> such that start[i] is the starting time of i<sup>th</sup> meeting and end[i] is the ending time of ith meeting. R</span><span style=\"font-size: 18.6667px;\">eturn the <strong>minimum number</strong> of rooms required to attend all meetings.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>start[] = [1, 10, 7], end[] = [4, 15, 10]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> </span><span style=\"font-size: 18.6667px;\">Since all the meetings are held at different times, it is possible to attend all the meetings in a single room.</span></pre>\n<pre><span ><strong>Input: </strong>start[] = [2, 9, 6], end[] = [4, 12, 10]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 1st and 2nd meetings at one room but for 3rd meeting one another room required.<br /></span></pre>\n<p><span style=\"font-size: 12pt;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 12pt;\">1 &le; start.size() &le; 10<sup>5</sup></span><br /><span style=\"font-size: 12pt;\">0 &le; start[i] &lt; end[i] &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two arrays `start` and `end` such that `start[i]` is the starting time of the i-th meeting and `end[i]` is the ending time of the i-th meeting, return the minimum number of rooms required to attend all meetings.",
                "constraints": [
                    "1 <= start.size() <= 10^5",
                    "0 <= start[i] < end[i] <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "start[] = [1, 10, 7], end[] = [4, 15, 10]",
                        "output": "1",
                        "explanation": "All meetings are held at non-overlapping times, therefore they can all be attended in a single room."
                    },
                    {
                        "input": "start[] = [2, 9, 6], end[] = [4, 12, 10]",
                        "output": "2",
                        "explanation": "The first and second meetings can be held in one room, but the third meeting overlaps, requiring a second room."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Sort start and end times, then use two pointers to count overlapping intervals for the minimum rooms needed.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int minMeetingRooms(vector<int> &start, vector<int> &end) {\n        // Sort both start and end times\n        sort(start.begin(), start.end());\n        sort(end.begin(), end.end());\n\n        int n = start.size();\n        int rooms = 0;\n        int maxRooms = 0;\n        int l = 0, r = 0;\n\n        // Use two pointers technique to traverse start and end arrays\n        while (l < n && r < n) {\n            // If the meeting starts before the earliest ending one, a new room is\n            // needed\n            if (start[l] < end[r]) {\n                ++rooms;\n                ++l;\n            }\n            // Else, one meeting ends, free a room\n            else {\n                --rooms;\n                ++r;\n            }\n            // Track the maximum number of rooms needed at any point in time\n            maxRooms = max(maxRooms, rooms);\n        }\n\n        return maxRooms;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    public int minMeetingRooms(int[] start, int[] end) {\n        // Sort both start and end times\n        Arrays.sort(start);\n        Arrays.sort(end);\n\n        int n = start.length;\n        int rooms = 0;\n        int maxRooms = 0;\n        int l = 0, r = 0;\n\n        // Use two pointers technique to traverse start and end arrays\n        while (l < n && r < n) {\n            // If the meeting starts before the earliest ending one, a new room is\n            // needed\n            if (start[l] < end[r]) {\n                rooms++;\n                l++;\n            }\n            // Else, one meeting ends, free a room\n            else {\n                rooms--;\n                r++;\n            }\n            // Track the maximum number of rooms needed at any point in time\n            maxRooms = Math.max(maxRooms, rooms);\n        }\n\n        return maxRooms;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def minMeetingRooms(self, start, end):\n        # Sort both start and end times\n        start.sort()\n        end.sort()\n\n        n = len(start)\n        rooms = 0\n        maxRooms = 0\n        l = 0\n        r = 0\n\n        # Use two pointers technique to traverse start and end arrays\n        while l < n and r < n:\n            # If the meeting starts before the earliest ending one, a new room is needed\n            if start[l] < end[r]:\n                rooms += 1\n                l += 1\n            # Else, one meeting ends, free a room\n            else:\n                rooms -= 1\n                r += 1\n\n            # Track the maximum number of rooms needed at any point in time\n            maxRooms = max(maxRooms, rooms)\n\n        return maxRooms\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    minMeetingRooms(start, end) {\n        // Sort both start and end times\n        start.sort((a, b) => a - b);\n        end.sort((a, b) => a - b);\n\n        let n = start.length;\n        let rooms = 0;\n        let maxRooms = 0;\n        let l = 0;\n        let r = 0;\n\n        // Use two pointers technique to traverse start and end arrays\n        while (l < n && r < n) {\n            // If the meeting starts before the earliest ending one, a new room is\n            // needed\n            if (start[l] < end[r]) {\n                rooms++;\n                l++;\n            }\n            // Else, one meeting ends, free a room\n            else {\n                rooms--;\n                r++;\n            }\n            // Track the maximum number of rooms needed at any point in time\n            maxRooms = Math.max(maxRooms, rooms);\n        }\n\n        return maxRooms;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}