{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 876297,
            "title": "Meeting Rooms",
            "titleSlug": "attend-all-meetings",
            "content": "<p><span ><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Given an array&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">arr[][]</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">&nbsp;such that&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">arr[i][0]&nbsp;</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">is the&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">starting time&nbsp;</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">of i<sup>th</sup> meeting and </span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">arr[i][1]&nbsp;</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">is the&nbsp;</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">ending time&nbsp;</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">of i<sup>th</sup> meeting, the task is to check if it is possible for a person to attend all the meetings such that he can attend only one meeting at a particular time.</span></span></p>\n<p><span ><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">Note:</span><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\"> A person can attend a meeting if its starting time is greater than or equal to the previous meeting's ending time.</span></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[][] = [[1, 4], [10, 15], [7, 10]]<br /><strong>Output:</strong> true<br /><strong>Explanation: </strong>Since all the meetings are held at different times, it is possible to attend all the meetings.</span></pre>\n<pre><span ><strong>Input: </strong>arr[][] = [[2, 4], [9, 12], [6, 10]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> It is not possible to attend the second and third meetings simultaneously.<br /></span></pre>\n<p style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium; white-space: normal;\"><span ><strong>Constraints:</strong></span><br /><span >1 &le; arr.size() &le; 10<sup>5</sup></span><br /><span >0 &le; arr[i] &le; 2*10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a 2D array `arr[][]` representing meeting times. Each row `arr[i]` contains the starting time `arr[i][0]` and ending time `arr[i][1]` of the i-th meeting.  Determine if it's possible for a person to attend all meetings, given they can only attend one meeting at a time. A person can attend a meeting if its starting time is greater than or equal to the previous meeting's ending time.",
                "constraints": [
                    "1 <= arr.length <= 10^5",
                    "0 <= arr[i][j] <= 2*10^6"
                ],
                "testcases": [
                    {
                        "input": "[[1, 4], [10, 15], [7, 10]]",
                        "output": "true",
                        "explanation": "The meetings can be attended in the order [1,4], [7,10], [10,15] since the end time of the previous meeting is always less than or equal to start time of next meeting."
                    },
                    {
                        "input": "[[2, 4], [9, 12], [6, 10]]",
                        "output": "false",
                        "explanation": "It is impossible to attend all meetings. For example meetings [9,12] and [6,10] overlap, so they cannot be attended one after the other."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Sort the meetings by their start times and check if any meeting's end time overlaps with the next meeting's start time.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    bool canAttend(vector<vector<int>> &arr) {\n        int n = arr.size();\n        // Sort the meetings by their start times\n        sort(arr.begin(), arr.end());\n        for (int i = 0; i < n - 1; i++) {\n            // Compare the current meeting's end time with the\n            // next meeting's start time to check for overlap\n            if (arr[i][1] > arr[i + 1][0])\n                return false;\n        }\n        return true;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static boolean canAttend(int[][] arr) {\n        int n = arr.length;\n\n        // Sort the meetings by their start times\n        Arrays.sort(arr, (a, b) -> Integer.compare(a[0], b[0]));\n\n        for (int i = 0; i < n - 1; i++) {\n\n            // Compare the current meeting's end time with the\n            // next meeting's start time to check for overlap\n            if (arr[i][1] > arr[i + 1][0]) return false;\n        }\n        return true;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n\n    def canAttend(self, arr):\n        n = len(arr)\n\n        # Sort the meetings by their start times\n        arr.sort(key=lambda x: x[0])\n\n        for i in range(n - 1):\n\n            # Compare the current meeting's end time with the\n            # next meeting's start time to check for overlap\n            if arr[i][1] > arr[i + 1][0]:\n                return False\n        return True\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    canAttend(arr) {\n        const n = arr.length;\n\n        // Sort the meetings by their start times\n        arr.sort((a, b) => a[0] - b[0]);\n\n        for (let i = 0; i < n - 1; i++) {\n\n            // Compare the current meeting's end time with the\n            // next meeting's start time to check for overlap\n            if (arr[i][1] > arr[i + 1][0]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}