{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700382,
            "title": "AVL Tree Insertion",
            "titleSlug": "avl-tree-insertion",
            "content": "<p><span >Given an AVL tree and N values to be inserted in the tree. Write a function to insert elements into the given&nbsp;<strong>AVL tree</strong>.</span></p>\n<p><span ><strong>Note:</strong><br />The tree will be checked after each insertion.&nbsp;<br />If it violates the properties of balanced BST, an error message will be printed followed by the inorder traversal of the tree at that moment.<br />If instead all insertions are successful, inorder traversal of the tree will be printed.</span></p>\n<p><span ><strong>Example 1:</strong></span></p>\n<pre><span ><strong>Input:<br /></strong>N = 3<strong><br /></strong>Values to be inserted = {5,1,4}<strong> </strong>\n<strong>Output:<br /></strong>1 4 5<br /><strong>Explanation:<br /></strong>Value to be inserted = 5<strong><br /></strong>    5\nValue to be inserted = 1\n    5\n   /\n  1\nValue to be inserted = 4\n  5\\t\\t\\t   4\n /    <strong>LR rotation</strong>\\t  /  \\\n1    -----------&gt;\\t 1   5\n&nbsp;\\\n&nbsp;4<br />Therefore the inorder of the final tree will be 1, 4, 5.</span></pre>\n<p><span ><strong>Example 2:</strong></span></p>\n<pre><span ><strong>Input:</strong><br />N = 7<strong><br /></strong>Values to be inserted = {21,26,30,9,4,14,28}<strong> </strong>\n<strong>Output:<br /></strong>4 9 14 21 26 28 30<br /><strong style=\"font-family: sans-serif;\">Explanation:</strong><br />Value to be inserted = 21<strong><br /></strong>    21\nValue to be inserted = 26\n    21\n     \\\n     26\nValue to be inserted = 30\n  21\\t\\t\\t\\t26\n   \\\\t<strong>LL rotation</strong>\\t   /  \\\n   26    -----------&gt;\\t 21  30\n    \\\n     30<br />Value to be inserted = 9<br />    26<br />   /  \\<br />  21  30<br /> /<br />9<br />Value to be inserted = 4<br />\\t26\\t\\t\\t\\t  26<br />     /  \\\\t\\t\\t\\t  /  \\<br />    21  30\\t\\t\\t    9   30<br />   /\\t    <strong>RR rotation</strong>\\t  /  \\<br />  9\\t    -----------&gt;\\t 4  21<br /> /<br />4<br />Value to be inserted = 14<br />\\t26\\t\\t\\t\\t  21<br />     /  \\\\t\\t\\t\\t  /  \\<br />    9   30\\t\\t\\t    9   26<br />   / \\\\t    <strong>LR rotation</strong>\\t/  \\    \\<br />  4  21\\t  -----------&gt;    4  14  30<br /> &nbsp; &nbsp; /<br />    14<br />Value to be inserted = 28<br />\\t21\\t\\t\\t\\t  21<br />     /  \\\\t\\t\\t\\t  /  \\<br />    9   26\\t\\t\\t    9   28<br />   / \\    \\     <strong>RL rotation</strong>\\t / \\    / \\<br />  4  14   30   -----------&gt;   4  14 26 30<br />\\t    /<br />\\t   28<br />Therefore the inorder of the final tree will be 4, 9, 14, 21, 26, 28, 30.</span></pre>\n<p><span ><strong>Your Task: &nbsp;</strong><br />You don't need to read input or print anything. Complete the function<strong>&nbsp;insertToAVL()</strong>&nbsp;which takes the root of the tree and the value of the node to be inserted as input parameters and returns the root of the modified tree.</span></p>\n<p><span ><strong>Expected Time Complexity:</strong>&nbsp;O(log N)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(height of tree)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; N &le; 2000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an AVL tree, implement a function to insert N values into the tree. The function should maintain the AVL tree properties after each insertion. If an insertion violates the AVL property, an error message (not part of the output) will be internally triggered, followed by an inorder traversal of the tree at that point. If all insertions are successful, the function should return the root of the final AVL tree, and the inorder traversal of the tree will be printed to standard output.",
                "constraints": [
                    "1 <= N <= 2000"
                ],
                "testcases": [
                    {
                        "input": "N = 3, Values = {5, 1, 4}",
                        "output": "1 4 5",
                        "explanation": "Insert 5: Tree is {5}. Insert 1: Tree is {1, 5}. Insert 4: An LR rotation is performed at node 5 to balance the tree, resulting in the tree {1, 4, 5}. Inorder traversal: 1 4 5"
                    },
                    {
                        "input": "N = 7, Values = {21, 26, 30, 9, 4, 14, 28}",
                        "output": "4 9 14 21 26 28 30",
                        "explanation": "Insert 21: Tree is {21}. Insert 26: Tree is {21, 26}. Insert 30: An LL rotation is performed at node 21 to balance the tree, resulting in the tree {21, 26, 30}. Insert 9: Tree is {9, 21, 26, 30}. Insert 4: An RR rotation is performed at node 26 to balance the tree, resulting in the tree {4, 9, 21, 26, 30}. Insert 14: An LR rotation is performed at node 21 to balance the tree, resulting in the tree {4, 9, 14, 21, 26, 30}. Insert 28: An RL rotation is performed at node 21 to balance the tree, resulting in the tree {4, 9, 14, 21, 26, 28, 30}. Inorder traversal: 4 9 14 21 26 28 30"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Learn how insertion takes place in self balancing trees like <strong>AVL tree</strong>.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "morgan-stanley",
            "amazon",
            "snapdeal",
            "makemytrip",
            "oracle",
            "oxigen-wallet",
            "informatica",
            "citicorp"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\n  public:\n    // Function to get the height of a node\n    int height(struct Node *N)\n    {\n        if (N == NULL)\n            return 0;\n        return N->height;\n    }\n    \n    // Function to perform right rotation\n    Node *rightRotate(Node *y)\n    {\n        Node *x = y->left;\n        Node *T2 = x->right;\n    \n        // Perform rotation\n        x->right = y;\n        y->left = T2;\n    \n        // Update heights\n        y->height = max(height(y->left), height(y->right))+1;\n        x->height = max(height(x->left), height(x->right))+1;\n    \n        return x;\n    }\n    \n    // Function to perform left rotation\n    Node *leftRotate(struct Node *x)\n    {\n        struct Node *y = x->right;\n        struct Node *T2 = y->left;\n    \n        // Perform rotation\n        y->left = x;\n        x->right = T2;\n    \n        // Update heights\n        x->height = max(height(x->left), height(x->right))+1;\n        y->height = max(height(y->left), height(y->right))+1;\n    \n        return y;\n    }\n    \n    // Function to get the balance factor of a node\n    int getBalance(struct Node *N)\n    {\n        if (N == NULL)\n            return 0;\n        return height(N->left) - height(N->right);\n    }\n    \n    // Function to check if a tree is height-balanced\n    bool __getBalance__(struct Node *root)\n    {\n        int lh; // for height of left subtree\n        int rh; // for height of right subtree \n        \n        // If tree is empty, return true\n        if(root == NULL)\n            return 1; \n    \n        // Get the height of left and right subtrees\n        lh = height(root->left);\n        rh = height(root->right);\n    \n        // Check if the difference in heights is <= 1\n        // and recursively check for all nodes in the tree\n        if( abs(lh-rh) <= 1 &&\n            __getBalance__(root->left) &&\n            __getBalance__(root->right))\n         return 1;\n    \n         // If we reach here, the tree is not height-balanced\n        return 0;\n    }\n    \n    // Function to insert a new node into an AVL tree\n    Node* insertToAVL(Node* node, int data)\n    {   \n        // If the node is null, create a new node with the data\n        if (node == NULL)\n            return new Node(data);\n    \n        // If the data is less than the current node's data,\n        // insert it into the left subtree\n        if (data < node->data)\n            node->left = insertToAVL(node->left, data);\n        // If the data is greater than the current node's data,\n        // insert it into the right subtree\n        else if(data > node->data)\n            node->right = insertToAVL(node->right, data);\n       // If the data is equal to the current node's data,\n       // return the node (no insertion needed)\n       else\n           return node;\n    \n        // Update the height of the current node\n        node->height = max(height(node->left), height(node->right)) + 1;\n    \n        // Check the balance factor of the current node\n        int balance = getBalance(node);\n    \n        // Perform rotations based on the balance factor\n        \n        // Left Left Case\n        if (balance > 1 && data < node->left->data)\n            return rightRotate(node);\n    \n       // Right Right Case\n        if (balance < -1 && data > node->right->data)\n            return leftRotate(node);\n    \n        // Left Right Case\n        if (balance > 1 && data > node->left->data)\n        {\n            node->left = leftRotate(node->left);\n            return rightRotate(node);\n        }\n    \n        // Right Left Case\n        if (balance < -1 && data < node->right->data)\n        {\n            node->right = rightRotate(node->right);\n            return leftRotate(node);\n        }\n    \n        return node;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n    public  Node insertToAVL(Node node,int data)\n    {\n        // If node is null, create a new node with given data\n        if (node == null)\n        return(new Node(data));\n        \n        // If data is less than current node data, insert it in the left subtree\n        if (data < node.data)\n            node.left = insertToAVL(node.left, data);\n        // If data is greater than current node data, insert it in the right subtree\n        else if(data>node.data)\n            node.right = insertToAVL(node.right, data);\n       // If the data is equal to current node data, return the node as inserting duplicates is not allowed  \n       else\n           return node;\n        \n        // Update the height of the current node\n        node.height = max(height(node.left), height(node.right)) + 1;\n        \n        // Get the balance factor of the current node\n        int balance = getBalance(node);\n        \n        // Perform necessary rotations based on the balance factor and position of the data in the tree\n        if (balance > 1 && data< node.left.data)\n            return rightRotate(node);\n        if (balance < -1 && data > node.right.data)\n            return leftRotate(node);\n        if (balance > 1 && data> node.left.data)\n        {\n            node.left = leftRotate(node.left);\n            return rightRotate(node);\n        }\n        if (balance < -1 && data< node.right.data)\n        {\n            node.right = rightRotate(node.right);\n            return leftRotate(node);\n        }\n        \n        // Return the modified tree after insertion\n        return node;\n    }\n    \n    // Function to get the height of a node\n    public  int height(Node N)\n    {\n        if (N == null)\n            return 0;\n        return N.height;\n    }\n    \n    // Function to get the maximum of two numbers\n    public  int max(int a, int b)\n    {\n        return (a > b)? a : b;\n    }\n    \n    // Function to create a new node with given key\n    public  Node newNode(int key)\n    {\n        Node node =new Node(0);\n        node.data = key;\n        node.left = null;\n        node.right = null;\n        node.height = 1; \n        return node;\n    }\n    \n    // Function to perform a right rotation at a given node\n    public  Node rightRotate(Node y)\n    {\n        Node x = y.left;\n        Node T2 = x.right;\n        x.right = y;\n        y.left = T2;\n        y.height = max(height(y.left), height(y.right))+1;\n        x.height = max(height(x.left), height(x.right))+1;\n        return x;\n    }\n    \n    // Function to perform a left rotation at a given node\n    public  Node leftRotate(Node x)\n    {\n        Node y = x.right;\n        Node T2 = y.left;\n        y.left = x;\n        x.right = T2;\n        x.height = max(height(x.left), height(x.right))+1;\n        y.height = max(height(y.left), height(y.right))+1;\n        return y;\n    }\n    \n    // Function to get the balance factor of a node\n    public  int getBalance(Node N)\n    {\n        if (N == null)\n            return 0;\n        return height(N.left) - height(N.right);\n    }\n    \n    // Function to check if the tree is AVL balanced\n    public  int __getBalance__(Node root)\n    {\n       int lh;\n       int rh;\n       if(root == null)\n        return 1; \n       lh = height(root.left);\n       rh = height(root.right);\n       if( Math.abs(lh-rh) <= 1)\n           if(__getBalance__(root.left)==1)\n            if( __getBalance__(root.right)==1)\n                return 1;\n       return 0;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def height(self, N):\r\n        if not N:\r\n            return 0\r\n        return N.height\r\n\r\n    def rightRotate(self, y):\r\n        x = y.left\r\n        T2 = x.right\r\n\r\n        x.right = y\r\n        y.left = T2\r\n\r\n        y.height = max(self.height(y.left), self.height(y.right)) + 1\r\n        x.height = max(self.height(x.left), self.height(x.right)) + 1\r\n\r\n        return x\r\n\r\n    def leftRotate(self, x):\r\n        y = x.right\r\n        T2 = y.left\r\n\r\n        y.left = x\r\n        x.right = T2\r\n\r\n        x.height = max(self.height(x.left), self.height(x.right)) + 1\r\n        y.height = max(self.height(y.left), self.height(y.right)) + 1\r\n\r\n        return y\r\n\r\n    def getBalance(self, N):\r\n        if not N:\r\n            return 0\r\n        return self.height(N.left) - self.height(N.right)\r\n\r\n    def isBalanced(self, root):\r\n        if not root:\r\n            return True\r\n\r\n        lh = self.height(root.left)\r\n        rh = self.height(root.right)\r\n\r\n        if abs(lh - rh) <= 1 and self.isBalanced(root.left) and self.isBalanced(root.right):\r\n            return True\r\n\r\n        return False\r\n\r\n    def insertToAVL(self, node, data):\r\n        if not node:\r\n            return Node(data)\r\n\r\n        if data < node.data:\r\n            node.left = self.insertToAVL(node.left, data)\r\n        elif data > node.data:\r\n            node.right = self.insertToAVL(node.right, data)\r\n        else:\r\n            return node\r\n\r\n        node.height = max(self.height(node.left), self.height(node.right)) + 1\r\n\r\n        balance = self.getBalance(node)\r\n\r\n        if balance > 1 and data < node.left.data:\r\n            return self.rightRotate(node)\r\n\r\n        if balance < -1 and data > node.right.data:\r\n            return self.leftRotate(node)\r\n\r\n        if balance > 1 and data > node.left.data:\r\n            node.left = self.leftRotate(node.left)\r\n            return self.rightRotate(node)\r\n\r\n        if balance < -1 and data < node.right.data:\r\n            node.right = self.rightRotate(node.right)\r\n            return self.leftRotate(node)\r\n\r\n        return node\r\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}