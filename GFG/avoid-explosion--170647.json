{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713975,
            "title": "Avoid Explosion",
            "titleSlug": "avoid-explosion--170647",
            "content": "<p><span style=\"font-size:18px\">Geek is a chemical scientist who is performing an experiment to find an antidote to a poison. The experiment involves mixing some solutions in a flask. Based on the theoretical research Geek has done, he came up with an <strong>n&nbsp;*&nbsp;2</strong> array &#39;<strong>mix</strong>&#39;, where mix[i] = {X, Y} denotes solutions X and Y that needs to be mixed.<br />\r\n<br />\r\nAlso, from his past experience, it has been known that <strong>mixing some solutions leads to an explosion</strong> and thereby completely ruining the experiment. The explosive solutions are also provided as a&nbsp;<strong>m * 2</strong> array &#39;<strong>danger</strong>&#39; where danger[i] = {P, Q}&nbsp;denotes that if somehow solutions P and Q get into the same flask it will result in an explosion.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Help the Geek by returning an array &#39;<strong>answer</strong>&#39; of size <strong>n</strong>, where answer[i] = &quot;<strong>Yes</strong>&quot;&nbsp;if it is safe to mix solutions in &#39;mix[i]&#39; or else answer[i] = &quot;<strong>No</strong>&quot;. </span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note:</strong> Geek should follow the order of mixing of solutions as it is in &#39;mix&#39; otherwise the antidote will be ineffective. Also, Geek will not mix the&nbsp;solutions in &#39;mix[i]&#39; once he gets to know that mixing them will result in an explosion. Mixing a solution will effect the other solutions which will appear after it.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\nn = 5, m = 2\r\nmix = {{1, 2}, {2, 3}, {4, 5}, {3, 5}, {2, 4}}\r\ndanger = {{1, 3}, {4, 2}}\r\n\r\n<strong>Output</strong>:\r\nanswer = {&quot;Yes&quot;, &quot;No&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;No&quot;}\r\n\r\n<strong>Explanation</strong>:\r\nMixing the first solution(1 and 2) of &#39;mix&#39; do not result in any kind of explosion hence answer[0] is &quot;Yes&quot;, while mixing(2nd solution) 2 and 3 is not allowed because it will result in an explosion as 1 and 3 would be in same solution hence we have returned &quot;No&quot; as the answer for 2nd solution. Mixing the third solution(4 and 5) and 4th solution(3 and 5) of &#39;mix&#39; do not result in any kind of explosion hence answer[2] and answer[3] is &quot;Yes&quot;. While mixing 2 and 4 is not allowed because it will result in an explosion hence we have returned &quot;No&quot; as the answer for it.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input</strong>:\r\nn = 3, m = 2\r\nmix = {{1, 2}, {2, 3}, {1, 3}}\r\ndanger = {{1, 2}, {1, 3}}\r\n\r\n<strong>Output</strong>:\r\nanswer = {&quot;No&quot;, &quot;Yes&quot;, &quot;No&quot;}\r\n\r\n<strong>Explanation</strong>:\r\nMixing solutions 1 and 2 is dangerous hence \r\nanswer[0] = &quot;No&quot;, but solutions 2 and 3 can \r\nbe mixed without any problem therefore answer[1] \r\n= &quot;Yes&quot;. Again, mixing solutions 1 and 3 is \r\ndangerous due to which answer[2] = &quot;No&quot;.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Complete the function&nbsp;<strong>avoidExplosion()</strong>&nbsp;which takes the mix array, its size, danger array, and its size as input parameters and&nbsp;returns the result&nbsp;array or list.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity: O(n*m*log(n))<br />\r\nExpected Space Complexity: O(n)</strong></span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">0 &lt; n &lt; 1000</span></p>\r\n\r\n<p><span style=\"font-size:18px\">0 &lt; m&nbsp;&lt; 1000</span></p>\r\n\r\n<p><span style=\"font-size:18px\">1 &lt;= mix[i][0], mix[i][1] &lt;= n</span></p>\r\n\r\n<p><span style=\"font-size:18px\">1 &lt;= danger[i][0], danger[i][1] &lt;= n</span></p>\r\n\r\n<p><span style=\"font-size:18px\">mix[i][0] != mix[i][1]</span></p>\r\n\r\n<p><span style=\"font-size:18px\">danger[i][0] != danger[i][1]</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A chemical scientist is conducting an experiment to create an antidote by mixing solutions. You are given two arrays: 'mix' and 'danger'. The 'mix' array (n * 2) specifies pairs of solutions to be mixed (mix[i] = {X, Y}). The 'danger' array (m * 2) indicates explosive combinations (danger[i] = {P, Q}).  Mixing solutions P and Q from 'danger' will cause an explosion. The goal is to determine, for each pair of solutions in 'mix', whether it is safe to mix them without causing an explosion, considering the mixing order.\n\nReturn an array 'answer' of size n, where answer[i] = \"Yes\" if mixing mix[i] is safe, and \"No\" otherwise. Once a solution is deemed unsafe, it should not be mixed, and its potential impact on subsequent mixes should be considered.",
                "constraints": [
                    "0 < n < 1000",
                    "0 < m < 1000",
                    "1 <= mix[i][0], mix[i][1] <= n",
                    "1 <= danger[i][0], danger[i][1] <= n",
                    "mix[i][0] != mix[i][1]",
                    "danger[i][0] != danger[i][1]"
                ],
                "testcases": [
                    {
                        "input": "n = 5, m = 2\nmix = {{1, 2}, {2, 3}, {4, 5}, {3, 5}, {2, 4}}\ndanger = {{1, 3}, {4, 2}}",
                        "output": "answer = {\"Yes\", \"No\", \"Yes\", \"Yes\", \"No\"}",
                        "explanation": "The first mix (1, 2) is safe, so \"Yes\".  The second mix (2, 3) is unsafe because 1 and 3 would then be together (dangerous combination), so \"No\". The third (4, 5) and fourth (3, 5) mixes are safe, so \"Yes\".  The fifth mix (2, 4) becomes unsafe after the third mix because 4 is now present with 2, so \"No\"."
                    },
                    {
                        "input": "n = 3, m = 2\nmix = {{1, 2}, {2, 3}, {1, 3}}\ndanger = {{1, 2}, {1, 3}}",
                        "output": "answer = {\"No\", \"Yes\", \"No\"}",
                        "explanation": "Mixing 1 and 2 is dangerous from the start, hence answer[0] = \"No\". Mixing 2 and 3 is safe because there's no explosive combination, hence answer[1] = \"Yes\". Lastly, mixing 1 and 3 is dangerous, hence answer[2] = \"No\"."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>How can we find the connected solutions? Do&nbsp;there exists any data structure which can help us here?</p>",
            "<p>Use Disjoint set data structure.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Disjoint Set",
                "slug": "disjoint-set"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int rnk[10005], par[10005];\n    \n    // Function to initialize the sets\n    void make_set(int n) {\n        for (int i = 0; i < n; i++) {\n            par[i] = i;\n            rnk[i] = 1;\n        }\n    }\n    \n    // Function to find the representative of the set\n    int find_set(int x) {\n        if (par[x] == x) return x;\n        return par[x] = find_set(par[x]);\n    }\n    \n    // Function to union two sets\n    void union_set(int a, int b) {\n        int p1 = find_set(a);\n        int p2 = find_set(b);\n        \n        // If already in the same set, no need to union\n        if (p1 == p2) return;\n        \n        // Union the sets based on rank\n        if (rnk[p1] > rnk[p2]) {\n            par[p2] = p1;\n            rnk[p1] += rnk[p2];\n        } else {\n            par[p1] = p2;\n            rnk[p2] += rnk[p1];\n        }\n    }\n\n    // Function to check if an explosion can be avoided\n    vector<string> avoidExplosion(vector<vector<int>> mix, int n,\n                                  vector<vector<int>> danger, int m) {\n                                      \n        make_set(n + 1);\n        vector<string> ans(n);\n        \n        for (int i = 0; i < n; i++) {\n            int item1 = mix[i][0];\n            int item2 = mix[i][1];\n            int ok = 1;\n            int p1 = find_set(item1);\n            int p2 = find_set(item2);\n            \n            // Check if the mix creates a dangerous combination\n            for (int j = 0; j < m; j++) {\n                int par1 = find_set(danger[j][0]);\n                int par2 = find_set(danger[j][1]);\n                \n                if (max(par1, par2) == max(p1, p2) and\n                    min(par1, par2) == min(p1, p2)) {\n                    ok = 0;\n                    break;\n                }\n            }\n\n            if (ok) {\n                ans[i] = \"Yes\";\n                union_set(p1, p2);\n            } else {\n                ans[i] = \"No\";\n            }\n        }\n        \n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    ArrayList<String> avoidExlosion(int mix[][], int n, int danger[][], int m) {\n        // Initialize the ArrayList to store the final answers\n        ans = new ArrayList<>();\n\n        // Initialize the parent and rank arrays for Union-Find\n        par = new int[n + 1];\n        rank = new int[n + 1];\n        for (int i = 0; i <= n; i++) par[i] = i;\n\n        // Iterate through the mix array\n        for (int i = 0; i < mix.length; i++) {\n            // Get the nodes of the current mix\n            int x = mix[i][0];\n            int y = mix[i][1];\n\n            // Find the parent of x and y nodes\n            int px = find(x);\n            int py = find(y);\n\n            // Boolean flag to keep track if the mix can be performed\n            boolean bool = true;\n\n            // Iterate through the danger array\n            for (int j = 0; j < danger.length; j++) {\n                // Get the nodes of the current danger\n                int a = danger[j][0];\n                int b = danger[j][1];\n\n                // Find the parent of a and b nodes\n                int pa = find(a);\n                int pb = find(b);\n\n                // If the parents of x, y and a, b are the same, mix cannot be performed\n                if ((px == pa && py == pb) || (px == pb && py == pa)) {\n                    bool = false;\n                    break;\n                }\n            }\n\n            // If mix is possible, perform the union and add \"Yes\" to the answer list\n            if (bool) union(x, y);\n            if (bool) {\n                ans.add(\"Yes\");\n            } else {\n                ans.add(\"No\");\n            }\n        }\n\n        // Return the final answer list\n        return ans;\n    }\n\n    private ArrayList<String> ans;\n    private int par[], rank[];\n\n    // Union operation for Union-Find\n    private void union(int u, int v) {\n        u = par[u];\n        v = par[v];\n        if (rank[u] > rank[v])\n            par[v] = u;\n        else if (rank[u] < rank[v])\n            par[u] = v;\n        else {\n            par[u] = v;\n            rank[v]++;\n        }\n    }\n\n    // Find operation for Union-Find\n    private int find(int node) {\n        if (par[node] == node) return node;\n        return par[node] = find(par[node]);\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n# cook your dish here\r\nclass Solution:\r\n    def avoidExlosion(self, mix, n, danger, m):\r\n        #code here\r\n        \r\n        def find(x):\r\n            if par[x] != x:\r\n                par[x] = find(par[x])\r\n            return par[x]\r\n        \r\n        def union(u,v):\r\n            u = par[u]\r\n            v = par[v]\r\n            if (rank[u] > rank[v]):\r\n                par[v] = u\r\n            elif (rank[u] < rank[v]):\r\n                par[u] = v\r\n            else:\r\n                par[u] = v\r\n                rank[v] += 1\r\n                \r\n            # par[find(a)] = find(b)\r\n        \r\n        ans = []\r\n        par = [0] * (n+1)\r\n        rank = [0] * (n+1)\r\n        \r\n        for i in range(n+1):\r\n            par[i] = i\r\n        \r\n        for i in range(n):\r\n            x = mix[i][0]\r\n            y = mix[i][1]\r\n            px,py = find(x),find(y)\r\n            boolean = True\r\n            \r\n            for j in range(m):\r\n                a,b = danger[j][0],danger[j][1]\r\n                pa,pb = find(a),find(b)\r\n                if (px == pa and py == pb) or (px == pb and py == pa):\r\n                    boolean = False\r\n            \r\n            if (boolean):\r\n                union(x,y)\r\n                \r\n            if (boolean):\r\n                ans.append(\"Yes\")\r\n            else:\r\n                ans.append(\"No\")\r\n        \r\n        return ans\r\n        ",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} mix\n * @param {number} n\n * @param {number[]} danger\n * @param {number} m\n * @returns {number[]}\n*/\n\nclass Solution {\n    //Function to avoid explosion.\n    avoidExlosion(mix, n, danger, m)\n    {\n        //code here\n        \n        let find = (x) => {\n            if(par[x] != x){\n                par[x] = find(par[x]);\n            }\n            return par[x];\n        }\n        \n        let union = (u,v) => {\n            u = par[u];\n            v = par[v];\n            if(rank[u] > rank[v]){\n                par[v] = u;\n            } else if(rank[u] < rank[v]){\n                par[u] = v;\n            } else{\n                par[u] = v;\n                rank[v] += 1;\n            }\n        }\n        \n        let ans = [];\n        let par = new Array(n+1).fill(0);\n        let rank = new Array(n+1).fill(0);\n        \n        for(let i=0; i<n+1; i++){\n            par[i] = i;\n        }\n        \n        for(let i=0; i<n; i++){\n            let x = mix[i][0];\n            let y = mix[i][1];\n            let [px, py] = [find(x), find(y)];\n            let boolean = true;\n            \n            for(let j=0; j<m; j++){\n                let a = danger[j][0];\n                let b = danger[j][1];\n                let [pa, pb] = [find(a), find(b)];\n                if((px == pa && py == pb) || (px == pb && py == pa)){\n                    boolean = false;\n                }\n            }\n            \n            if(boolean){\n                union(x, y);\n            }\n            \n            if(boolean){\n                ans.push(\"Yes\");\n            } else{\n                ans.push(\"No\");\n            }\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "\npublic class Solution {\n    private int[] rnk = new int[10005];\n    private int[] par = new int[10005];\n    \n    // Function to initialize the sets\n    public void MakeSet(int n) {\n        for (int i = 0; i < n; i++) {\n            par[i] = i;\n            rnk[i] = 1;\n        }\n    }\n    \n    // Function to find the representative of the set\n    public int FindSet(int x) {\n        if (par[x] == x) return x;\n        return par[x] = FindSet(par[x]);\n    }\n    \n    // Function to union two sets\n    public void UnionSet(int a, int b) {\n        int p1 = FindSet(a);\n        int p2 = FindSet(b);\n        \n        if (p1 == p2) return;\n        \n        if (rnk[p1] > rnk[p2]) {\n            par[p2] = p1;\n            rnk[p1] += rnk[p2];\n        } else {\n            par[p1] = p2;\n            if (rnk[p1] == rnk[p2]) {\n                rnk[p2]++;\n            }\n        }\n    }\n    \n    // Function to check if an explosion can be avoided\n    public List<string> avoidExplosion(List<List<int>> mix, int n, List<List<int>> danger, int m) {\n        MakeSet(n + 1);\n        List<string> ans = new List<string>(new string[n]);\n        \n        for (int i = 0; i < n; i++) {\n            int item1 = mix[i][0];\n            int item2 = mix[i][1];\n            bool ok = true;\n            int p1 = FindSet(item1);\n            int p2 = FindSet(item2);\n            \n            for (int j = 0; j < m; j++) {\n                int par1 = FindSet(danger[j][0]);\n                int par2 = FindSet(danger[j][1]);\n                \n                if ((Math.Max(par1, par2) == Math.Max(p1, p2)) &&\n                    (Math.Min(par1, par2) == Math.Min(p1, p2))) {\n                    ok = false;\n                    break;\n                }\n            }\n\n            if (ok) {\n                ans[i] = \"Yes\";\n                UnionSet(p1, p2);\n            } else {\n                ans[i] = \"No\";\n            }\n        }\n        \n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}