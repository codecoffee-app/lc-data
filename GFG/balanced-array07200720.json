{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702843,
            "title": "Balanced Array",
            "titleSlug": "balanced-array07200720",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr</strong> of even size, the task is to find a minimum value that can be added to an element so that the array becomes balanced. An array is balanced if the sum of the left half of the array elements is equal to the sum of the right half. </span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [1, 5, 3, 2]\n<strong>Output:</strong> 1\n<strong>Explanation</strong>: Sum of first 2 elements is 1 + 5  = 6, Sum of last 2 elements is 3 + 2  = 5, To make the array balanced you can add 1.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr = [1, 2, 1, 2, 1, 3]\n<strong>Output:</strong> 2\n<strong>Explanation</strong>: Sum of first 3 elements is 1 + 2 + 1 = 4, Sum of last three elements is 2 + 1 + 3 = 6, To make the array balanced you can add 2.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />2&lt;=arr.size()&lt;=10<sup>7&nbsp;</sup>where arr.size() is even.<br />1&lt;=arr[i]&lt;=10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>The idea is simple, we compute sums of first and second halves. Once these sums are computed, we return absolute difference of these two values.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the minimum value required to balance the array.\n    int minValueToBalance(vector<int> &arr) {\n        int n = arr.size();\n        int sum1 = 0; // variable to store the sum of first half of the array.\n        for (int i = 0; i < n / 2; i++)\n            sum1 += arr[i];\n\n        int sum2 = 0; // variable to store the sum of second half of the array.\n        for (int i = n / 2; i < n; i++)\n            sum2 += arr[i];\n\n        return abs(sum1 - sum2); // returning the absolute difference between the sums.\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the minimum value required to balance the array.\n    public int minValueToBalance(List<Integer> arr) {\n        int n = arr.size();\n        int sum1 = 0; // variable to store the sum of first half of the array\n        for (int i = 0; i < n / 2; i++) sum1 += arr.get(i);\n\n        int sum2 = 0; // variable to store the sum of second half of the array\n        for (int i = n / 2; i < n; i++) sum2 += arr.get(i);\n\n        return Math.abs(sum1 -\n                        sum2); // returning the absolute difference between the sums\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to find the minimum value required to balance the array.\n    def min_value_to_balance(self, arr):\n        n = len(arr)\n        sum1 = sum(arr[:n // 2])  # sum of the first half of the array\n        sum2 = sum(arr[n // 2:])  # sum of the second half of the array\n        return abs(sum1 -\n                   sum2)  # returning the absolute difference between the sums\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @return {number}\n */\n\nclass Solution {\n    // Function to find the minimum value required to balance the array.\n    minValueToBalance(arr) {\n        const n = arr.length;\n        const sum1 =\n            arr.slice(0, Math.floor(n / 2))\n                .reduce((a, b) => a + b, 0); // sum of the first half of the array\n        const sum2 =\n            arr.slice(Math.floor(n / 2))\n                .reduce((a, b) => a + b, 0); // sum of the second half of the array\n        return Math.abs(sum1 -\n                        sum2); // returning the absolute difference between the sums\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}