{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703536,
            "title": "Balanced string",
            "titleSlug": "balanced-string1627",
            "content": "<p><span style=\"font-size:18px\">Given an integer N.Create a string using only lowercase characters from a to z that follows the given rules.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>When N is even:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">Use N/2 characters from the beginning&nbsp;of a-z and N/2 characters from the ending of a-z.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">When N is greater than 26,continue repeating the instructions until length of string becomes N.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>When N is odd:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><em>Case 1:</em> If the sum of digits of N is even, Select (N+1)/2 characters from the beginning of a-z and (N-1)/2&nbsp;characters from the ending of a-z.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><em>Case 2:</em> If the sum of digits of N is odd, Select (N-1)/2 characters from the beginning of a-z and (N+1)/2 characters from the ending of a-z.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">When N is greater than 26,continue repeating the instructions until length of string becomes N.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> \r\nN=21\r\n<strong>Output:</strong> \r\nabcdefghijpqrstuvwxyz\r\n<strong>Explanation:\r\n</strong>Since 21 is odd and sum of digits\r\nof 21 is also odd,we take (21-1)/2=10 \r\ncharacters from the beginning and \r\n(21+1)/2=11 characters from the \r\nend of a-z.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span><span style=\"font-size:18px\"><strong> </strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N=28 </span><span style=\"font-size:18px\"><strong>\r\nOutput:</strong> \r\nabcdefghijklmnopqrstuvwxyzaz\r\n<strong>Explanation:</strong> \r\nSince 28&gt;26, we keep repeating \r\nthe process until length of string becomes \r\n28.</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>BalancedString()&nbsp;</strong>which takes the integer N&nbsp;as input parameter&nbsp;and returns the string created using given procedures.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N)<br />\r\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10<sup>5</sup></span><br />\r\n&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer N, construct a string using only lowercase English alphabets ('a' to 'z') according to the following rules:\n\n**Even N:**\n- Use N/2 characters from the beginning of the alphabet ('a', 'b', 'c', ...).\n- Use N/2 characters from the end of the alphabet ('z', 'y', 'x', ...).\n- If N is greater than 26, repeat the process until the string's length equals N.\n\n**Odd N:**\n- Calculate the sum of the digits of N.\n  - **Case 1 (Even Sum):** Select (N+1)/2 characters from the beginning and (N-1)/2 characters from the end of the alphabet.\n  - **Case 2 (Odd Sum):** Select (N-1)/2 characters from the beginning and (N+1)/2 characters from the end of the alphabet.\n- If N is greater than 26, repeat the process until the string's length equals N.\n\nYou are to implement a function `BalancedString(N)` that takes the integer N as input and returns the generated string.",
                "constraints": [
                    "1 <= N <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "21",
                        "output": "abcdefghijpqrstuvwxyz",
                        "explanation": "N is odd (21). The sum of digits (2+1 = 3) is odd. Thus, (21-1)/2 = 10 characters are taken from the beginning ('a' to 'j') and (21+1)/2 = 11 characters are taken from the end ('p' to 'z')."
                    },
                    {
                        "input": "28",
                        "output": "abcdefghijklmnopqrstuvwxyzaz",
                        "explanation": "N is even (28) and greater than 26. First 26 character string is 'abcdefghijklmnopqrstuvwxyz'. Then, the process repeats and since we need total length of 28, so we need to add 2 character more. So we get 'a' and 'z'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try to figure out what the string looks like if N is a multiple of 26.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "implementation",
                "slug": "implementation"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Backend complete function template for c++\r\n\r\nclass Solution {\r\n  public:\r\n    string BalancedString(int N) {\r\n        string ans = \"\", full = \"\";\r\n        for (char ch = 'a'; ch <= 'z'; ch++) full += ch;\r\n        int a = N / 26, b = N % 26, i;\r\n        while (a--) // appending a-z to answer as many times as possible\r\n            ans += full;\r\n        // when N is even\r\n        if (N % 2 == 0) {\r\n            for (i = 0; i < b / 2; i++) ans += (char)('a' + i);\r\n            for (i = 26 - b / 2; i < 26; i++) ans += (char)('a' + i);\r\n        }\r\n        // when N is odd\r\n        else {\r\n            int SumOfdigits = 0, temp = N;\r\n            // calculating sum of digits of N\r\n            while (temp) {\r\n                SumOfdigits += temp % 10;\r\n                temp /= 10;\r\n            }\r\n            // when sum of digits is even\r\n            if (SumOfdigits % 2 == 0) {\r\n                for (i = 0; i < (b + 1) / 2; i++) ans += (char)('a' + i);\r\n                for (i = 26 - b / 2; i < 26; i++) ans += (char)('a' + i);\r\n            }\r\n            // when sum of digits is odd\r\n            else {\r\n                for (i = 0; i < b / 2; i++) ans += (char)('a' + i);\r\n                for (i = 26 - (b + 1) / 2; i < 26; i++) ans += (char)('a' + i);\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n    static String BalancedString(int N) {\r\n        String ans = new String(\"\");\r\n        String full = new String(\"\");\r\n        int i, a = N / 26, b = N % 26;\r\n        for (char ch = 'a'; ch <= 'z'; ch++) full += ch;\r\n        while (a-- > 0) // appending a-z to answer as many times as possible\r\n            ans += full;\r\n        // when N is even\r\n        if (N % 2 == 0) {\r\n            for (i = 0; i < b / 2; i++) ans += (char)('a' + i);\r\n            for (i = 26 - b / 2; i < 26; i++) ans += (char)('a' + i);\r\n        }\r\n        // when N is odd\r\n        else {\r\n            int SumOfdigits = 0, temp = N;\r\n            // calculating sum of digits of N\r\n            while (temp > 0) {\r\n                SumOfdigits += temp % 10;\r\n                temp /= 10;\r\n            }\r\n            // when sum of digits is even\r\n            if (SumOfdigits % 2 == 0) {\r\n                for (i = 0; i < (b + 1) / 2; i++) ans += (char)('a' + i);\r\n                for (i = 26 - b / 2; i < 26; i++) ans += (char)('a' + i);\r\n            }\r\n            // when sum of digits is odd\r\n            else {\r\n                for (i = 0; i < b / 2; i++) ans += (char)('a' + i);\r\n                for (i = 26 - (b + 1) / 2; i < 26; i++) ans += (char)('a' + i);\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def BalancedString(self,N):\r\n        ans=\"\"\r\n        full=\"abcdefghijklmnopqrstuvwxyz\"\r\n        a=N//26\r\n        b=N%26\r\n        #appending a-z to ans as many times as possible\r\n        for _ in range(a):\r\n            ans=ans+full\r\n        #when N is even    \r\n        if(N%2==0):\r\n            for i in range(b//2):\r\n                ans=ans+full[i]\r\n            for i in range(26-b//2,26):\r\n                ans=ans+full[i]\r\n        #when N is odd        \r\n        else:\r\n            SumOfDigits=0\r\n            temp=N\r\n            #calculating sum of digits\r\n            while(temp!=0):\r\n                SumOfDigits=SumOfDigits+(temp)%10\r\n                temp=temp//10\r\n            #when Sum of digits is odd    \r\n            if(SumOfDigits%2):\r\n                for i in range((b-1)//2):\r\n                    ans=ans+full[i]\r\n                for i in range(26-(b+1)//2,26):\r\n                    ans=ans+full[i]    \r\n            else:\r\n            #when sum of digits is even    \r\n                for i in range((b+1)//2):\r\n                    ans=ans+full[i]\r\n                for i in range(26-(b-1)//2,26):\r\n                    ans=ans+full[i]\r\n        return ans",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {string} N\n * @returns {string}\n*/\n\nclass Solution {\n    //Function to check whether the list is palindrome.\n    BalancedString(N) {\n        let ans = \"\";\n        let full = \"abcdefghijklmnopqrstuvwxyz\";\n        let a = Math.floor(N / 26);\n        let b = N % 26;\n        //appending a-z to ans as many times as possible\n        for (let i = 0; i < a; i++) {\n            ans += full;\n        }\n        //when N is even    \n        if (N % 2 === 0) {\n            for (let i = 0; i < b / 2; i++) {\n                ans += full[i];\n            }\n            for (let i = 26 - (b / 2); i < 26; i++) {\n                ans += full[i];\n            }\n        }\n        //when N is odd        \n        else {\n            let SumOfDigits = 0;\n            let temp = N;\n            //calculating sum of digits\n            while (temp !== 0) {\n                SumOfDigits += temp % 10;\n                temp = Math.floor(temp / 10);\n            }\n            //when Sum of digits is odd    \n            if (SumOfDigits % 2) {\n                for (let i = 0; i < (b - 1) / 2; i++) {\n                    ans += full[i];\n                }\n                for (let i = 26 - (b + 1) / 2; i < 26; i++) {\n                    ans += full[i];\n                }\n            }\n            else {\n                //when sum of digits is even    \n                for (let i = 0; i < (b + 1) / 2; i++) {\n                    ans += full[i];\n                }\n                for (let i = 26 - (b - 1) / 2; i < 26; i++) {\n                    ans += full[i];\n                }\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "class Solution{\n    public string BalancedString(int N)\n    {\n        string ans = \"\", full = \"\";\n        for (char ch = 'a'; ch <= 'z'; ch++) full += ch;\n        int a = N / 26, b = N % 26, i;\n        while (a-- > 0) // appending a-z to answer as many times as possible\n            ans += full;\n        // when N is even\n        if (N % 2 == 0) {\n            for (i = 0; i < b / 2; i++) ans += (char)('a' + i);\n            for (i = 26 - b / 2; i < 26; i++) ans += (char)('a' + i);\n        }\n        // when N is odd\n        else {\n            int SumOfdigits = 0, temp = N;\n            // calculating sum of digits of N\n            while (temp != 0) {\n                SumOfdigits += temp % 10;\n                temp /= 10;\n            }\n            // when sum of digits is even\n            if (SumOfdigits % 2 == 0) {\n                for (i = 0; i < (b + 1) / 2; i++) ans += (char)('a' + i);\n                for (i = 26 - b / 2; i < 26; i++) ans += (char)('a' + i);\n            }\n            // when sum of digits is odd\n            else {\n                for (i = 0; i < b / 2; i++) ans += (char)('a' + i);\n                for (i = 26 - (b + 1) / 2; i < 26; i++) ans += (char)('a' + i);\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}