{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704517,
            "title": "Balancing Pan",
            "titleSlug": "balancing-pan5038",
            "content": "<p><span style=\"font-size:18px\">Given a simple weighing scale with two pans, we are given a weight T and some other weights which are the powers of a specific number a, our goal is to balance these pans using the given weights. More formally we need to satisfy this equation,&nbsp;<strong>T + (some power of a) = (some other powers of a).</strong><br />\nRemember that we are given exactly one weight corresponding to one power.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\na = 4\nT = 11\n<strong>Output:</strong>\nYES\n<strong>Explanation:</strong>\nThe scale can be balanced as,\n11 + 4 + 1 = 16.</span></pre>\n\n<p><span style=\"font-size:18px\">\u00e2\u20ac\u2039</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\na = 3\nT = 5\n<strong>Output:</strong>\nYES\n<strong>Explanation:</strong>\nThe scale can be balanced as,\n5 + 3 = 8.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span></p>\n\n<p><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function isBalanced() which takes two integers a&nbsp;and T&nbsp;and returns &quot;YES&quot; if we can balance the pans, else &quot;NO&quot;(Without Quotes).</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints :</strong><br />\n1 &le; a &le; T &le; 1000</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a simple weighing scale with two pans, you are given a target weight `T` and a base number `a`. You have weights that are powers of `a` (a^0, a^1, a^2, ...). The goal is to determine if you can balance the scale by adding powers of `a` to one or both sides. More formally, can you find powers of `a` such that  `T + (sum of some powers of a) = (sum of other powers of a)`?",
                "constraints": [
                    "1 <= a <= T <= 1000"
                ],
                "testcases": [
                    {
                        "input": "a = 4\nT = 11",
                        "output": "YES",
                        "explanation": "The scale can be balanced as follows: 11 + 4 + 1 = 16.  Here, 4 is 4^1 and 1 is 4^0, and 16 is 4^2."
                    },
                    {
                        "input": "a = 3\nT = 5",
                        "output": "YES",
                        "explanation": "The scale can be balanced as follows: 5 + 3 = 8. Here, 3 is 3^1. Note that 8 can't be expressed only with powers of 3, therefore, the output is still considered to be YES"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Represent the T in the base of a and try thinking to find the condition or required weights that should be added to the balance.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{   \npublic:\n\n    //Function to check if balance is possible.\n    bool isBalancePossible(int a, int T)\n    {\n    \tvector<int> baseForm;\n    \n    \t//Converting T to base form.\n    \twhile (T) {\n    \t\tbaseForm.push_back(T % a);\n    \t\tT /= a;\n    \t}\n    \n    \tbaseForm.push_back(0);\n    \n    \t//Checking if any number in base form is not 0, 1, a-1, or a.\n    \tfor (int i = 0; i < baseForm.size(); i++) {\n    \n    \t\n    \t\tif (baseForm[i] != 0 && baseForm[i] != 1 && \n    \t\t\tbaseForm[i] != (a - 1) && baseForm[i] != a) \n    \t\t\treturn false;\t \n    \n    \t\n    \t\t//Adding carry if a or a-1 is encountered.\n    \t\tif (baseForm[i] == a || baseForm[i] == (a - 1)) \n    \t\t\tbaseForm[i + 1] += 1;\t \n    \t}\n    \n    \treturn true;\n    }\n\n\n    //Function to check if balance is possible and return result.\n    string isBalanced(int a, int T){\n        \n        int temp=T; \n    \tif(temp>a)\n        {\n            T = temp; \n        }\n        else\n        {\n            T = a; \n            a = temp; \n        }\n        \n        //Checking if balance is possible.\n    \tbool balancePossible = isBalancePossible(a, T);\n    \t\n    \t//Returning \"YES\" if balance is possible, otherwise \"NO\".\n    \tif (balancePossible) \n    \t\treturn \"YES\";\n    \telse\n    \t\treturn \"NO\";\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}