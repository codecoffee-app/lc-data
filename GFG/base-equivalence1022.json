{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705740,
            "title": "Base Equivalence",
            "titleSlug": "base-equivalence1022",
            "content": "<p><span style=\"font-size: 18px;\">Given a number (<strong>n</strong>)&nbsp;and no. of digits (<strong>m</strong>)&nbsp;to represent the number, we have to check if we can represent <strong>n&nbsp;</strong>using exactly <strong>m</strong> digits in any <strong>base</strong> from <strong>2</strong> to <strong>32</strong>.</span><br /><br /><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 8, m = 2\n<strong>Output:</strong>&nbsp;Yes&nbsp;\n<strong>Explanation</strong>: Possible in base 3 as 8 in base 3 is 22.  \n</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>n = 8, m = 3\n<strong>Output:&nbsp;</strong>No\n<strong>Explanation</strong>: Not possible in any base.</span> \n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You dont need to read input or print anything. Complete the function <strong>baseEquiv()&nbsp;</strong>which takes n&nbsp;and m&nbsp;as input parameter and returns \"Yes\" if its possible to represent the number else \"No\" without quotes..<br /><br /><strong>Expected Time Complexity:</strong> O(logN).<br /><strong>Expected Auxiliary Space:</strong> O(1)<br /><br /><strong>Constraints:</strong><br />1 &lt;= n&nbsp;&lt;=10<sup>9</sup><br />1 &lt;= m&nbsp;&lt;=32</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number 'n' and the desired number of digits 'm', determine if 'n' can be represented using exactly 'm' digits in any base from 2 to 32.",
                "constraints": [
                    "1 <= n <= 10^9",
                    "1 <= m <= 32"
                ],
                "testcases": [
                    {
                        "input": "n = 8, m = 2",
                        "output": "Yes",
                        "explanation": "8 can be represented as 22 in base 3, which uses exactly 2 digits.  Therefore, it's possible to represent 8 with 2 digits in base 3."
                    },
                    {
                        "input": "n = 8, m = 3",
                        "output": "No",
                        "explanation": "It is not possible to find a base between 2 and 32 where 8 is represented using exactly 3 digits."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use recursion(Reduce the number of digits and recur).</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\nclass Solution {\r\n  public:\r\n// Returns true if 'num' can be represented usind 'dig' \r\n// digits in 'base' \r\nbool checkUtil(int num, int dig, int base) \r\n{ \r\n    // Base case \r\n    if (dig==1 && num < base) \r\n       return true; \r\n  \r\n    // If there are more than 1 digits left and number \r\n    // is more than base, then remove last digit by doing \r\n    // num/base, reduce the number of digits and recur \r\n    if (dig > 1 && num >= base) \r\n       return checkUtil(num/base, --dig, base); \r\n  \r\n    return false; \r\n} \r\n  \r\n// return true of num can be represented in 'dig' \r\n// digits in any base from 2 to 32 \r\nbool check(int num, int dig) \r\n{ \r\n    // Check for all bases one by one \r\n    for (int base=2; base<=32; base++) \r\n       if (checkUtil(num, dig, base)) \r\n            return true; \r\n    return false; \r\n}\r\nstring baseEquiv(int n, int m){\r\n    if(check(n, m)) return \"Yes\";\r\n    else return \"No\"; \r\n}\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution\r\n{\r\n    boolean checkUtil(int num, int dig, int base) \r\n    { \r\n        // Base case \r\n        if (dig==1 && num < base) \r\n           return true; \r\n      \r\n        // If there are more than 1 digits left and number \r\n        // is more than base, then remove last digit by doing \r\n        // num/base, reduce the number of digits and recur \r\n        if (dig > 1 && num >= base) \r\n           return checkUtil(num/base, --dig, base); \r\n      \r\n        return false; \r\n    } \r\n      \r\n    // return true of num can be represented in 'dig' \r\n    // digits in any base from 2 to 32 \r\n    boolean check(int num, int dig) \r\n    { \r\n        // Check for all bases one by one \r\n        for (int base=2; base<=32; base++) \r\n           if (checkUtil(num, dig, base)) \r\n                return true; \r\n        return false; \r\n    }\r\n    String baseEquiv(int n, int m)\r\n    {\r\n        // code here\r\n        if(check(n,m))return \"Yes\";\r\n        return \"No\";\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from math import log, ceil\n\n\nclass Solution:\n\n    def baseEquiv(self, n, m):\n        # Checking if n is base equivalent to m\n        if self.check(n, m):\n            return \"Yes\"\n        return \"No\"\n\n    # Utility function to check if a number can be represented\n    # in a given base with a given number of digits\n    def checkUtil(self, num, dig, base):\n        if dig == 1 and num < base:\n            return True\n        if dig > 1 and num >= base:\n            return self.checkUtil(num // base, dig - 1, base)\n        return False\n\n    # Function to check if a number can be represented\n    # in any base from 2 to 32 with a given number of digits\n    def check(self, num, dig):\n        for base in range(2, 33):\n            if self.checkUtil(num, dig, base):\n                return True\n        return False\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//Back-end complete function Template for C#\n\nclass Solution\n{\n    // Returns true if 'num' can be represented    // digits in 'baseN' \n    bool checkUtil(int num, int dig, int baseN)\n    {\n        // Base case\n        if (dig == 1 && num < baseN)\n            return true;\n\n        // If there are more than 1 digits left and number \n        // is more than base, then remove the last digit by doing \n        // num/base, reduce the number of digits, and recur \n        if (dig > 1 && num >= baseN)\n            return checkUtil(num / baseN, --dig, baseN);\n\n        return false;\n    }\n\n    // return true of num can be represented in 'dig' \n    // digits in any base from 2 to 32 \n    bool check(int num, int dig)\n    {\n        // Check for all bases one by one \n        for (int baseN = 2; baseN <= 32; baseN++)\n            if (checkUtil(num, dig, baseN))\n                return true;\n        return false;\n    }\n\n    public string baseEquiv(int n, int m)\n    {\n        if (check(n, m)) return \"Yes\";\n        else return \"No\";\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number} m\n * @returns {string}\n*/\n\nclass Solution {\n    //Function to check whether both numbers are equal or not.\n    baseEquiv(n, m)\n    {\n        // Function to check if a number can be represented\n        // in a given base with a given number of digits\n        const checkUtil = (num, dig, base) => {\n            if (dig === 1 && num < base) {\n                return true;\n            }\n            if (dig > 1 && num >= base) {\n                return checkUtil(Math.floor(num / base), dig - 1, base);\n            }\n            return false;\n        };\n        \n        // Function to check if a number can be represented\n        // in any base from 2 to 32 with a given number of digits\n        const check = (num, dig) => {\n            for (let base = 2; base <= 32; base++) {\n                if (checkUtil(num, dig, base)) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        \n        // Checking if n is base equivalent to m\n        if (check(n, m)) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}