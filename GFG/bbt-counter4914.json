{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704986,
            "title": "BBT counter",
            "titleSlug": "bbt-counter4914",
            "content": "<p><span >You are given a height <strong><code>h</code></strong>. Your task is to count the maximum number of distinct balanced binary trees that can be formed with height <code>h</code>.&nbsp;</span></p>\n<p><span >A <strong>balanced binary tree</strong> is defined as a tree in which the height difference between the left and right subtrees of every node is at most 1.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input</strong>: h = 2\n<strong>Output:</strong>&nbsp;3&nbsp;\n<strong>Explanation</strong>: The maximum number of balanced binary trees possible with height 2 is 3. \n</span><br /><span ><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/704986/Web/Other/blobid0_1718960297.png\" height=\"100\" /></span></pre>\n<pre><br /><span ><strong>Input: </strong>h = 3\n<strong>Output:&nbsp;</strong>15\n<strong>Explanation</strong>: The maximum number of balanced binary trees possible with height 3 is 15. \n</span><br /><span ><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/704986/Web/Other/blobid1_1718960316.png\" width=\"400\" height=\"136\" /><br /></span></pre>\n<pre><span ><strong>Input: </strong>h = 1\n<strong>Output:&nbsp;</strong>1<br /></span><strong style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation</strong><span style=\"font-size: 14pt; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">: The maximum number of balanced binary trees possible with height 1 is only 1. </span></pre>\n<p><span ><strong>Constraints:</strong><br />1&lt;= h &lt;=5</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a height `h`, determine the maximum number of distinct balanced binary trees that can be formed with that height.\n\nA balanced binary tree is a binary tree where the height difference between the left and right subtrees of every node is at most 1.",
                "constraints": [
                    "1 <= h <= 5"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "3",
                        "explanation": "With a height of 2, three distinct balanced binary trees can be constructed. Each represents a different combination of node arrangements while maintaining the balanced property."
                    },
                    {
                        "input": "3",
                        "output": "15",
                        "explanation": "With a height of 3, fifteen distinct balanced binary trees are possible."
                    },
                    {
                        "input": "1",
                        "output": "1",
                        "explanation": "With a height of 1, only one distinct balanced binary tree can be created."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The solution uses dynamic programming to calculate the number of balanced binary trees for height h, where the recurrence relation involves combining left and right subtrees of smaller heights, with modulo operations to avoid overflow.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    // Function to count the number of binary trees of height h\n    int countBT(int h) {\n        int dp[h + 1];\n        // base cases\n        dp[0] = dp[1] = 1;\n        // iterating from 2 to h\n        for (int i = 2; i <= h; i++) {\n            // calculating the number of binary trees for the current height\n            dp[i] = (dp[i - 1] * ((2 * dp[i - 2]) + dp[i - 1]));\n        }\n        return dp[h];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    // Function to count the number of balanced binary trees of height h\n    public int countBT(int h) {\n        int[] dp = new int[h + 1];\n\n        // Base cases\n        dp[0] = dp[1] = 1;\n\n        // Iterating from 2 to h\n        for (int i = 2; i <= h; i++) {\n            // Calculating the number of balanced binary trees for the current height\n            dp[i] = (dp[i - 1] * ((2 * dp[i - 2]) + dp[i - 1]));\n        }\n\n        return dp[h];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def countBT(self, h):\n        if h == 0 or h == 1:\n            return 1\n\n        # dp[i] will store the number of balanced binary trees of height i\n        dp = [0] * (h + 1)\n\n        # Base cases\n        dp[0] = dp[1] = 1\n\n        # Iterating from 2 to h\n        for i in range(2, h + 1):\n            dp[i] = (dp[i - 1] * (2 * dp[i - 2] + dp[i - 1]))\n\n        return dp[h]\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "public class Solution {\n    // Complete this function\n    public int countBT(int h) {\n        int[] dp = new int[h + 1];\n        // base cases\n        dp[0] = dp[1] = 1;\n        // iterating from 2 to h\n        for (int i = 2; i <= h; i++) {\n            // calculating the number of binary trees for the current height\n            dp[i] = (dp[i - 1] * ((2 * dp[i - 2]) + dp[i - 1]));\n        }\n        return dp[h];\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "\n\nclass Solution {\n    // Function to count the number of balanced binary trees of height h\n    countBT(h) {\n        let dp = new Array(h + 1).fill(BigInt(0)); // Initialize dp array with BigInt\n\n        // Base cases\n        dp[0] = dp[1] = BigInt(1);\n\n        // Iterating from 2 to h\n        for (let i = 2; i <= h; i++) {\n            dp[i] = (dp[i - 1] * ((BigInt(2) * dp[i - 2]) + dp[i - 1]));\n        }\n\n        return dp[h].toString(); // Return the result as a string to avoid converting\n                                 // back to Number\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}