{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705278,
            "title": "Beautiful Sequence",
            "titleSlug": "beautiful-sequence4203",
            "content": "<p><span style=\"font-size:18px\">A beautiful sequence is a strictly&nbsp;increasing sequence, in which the&nbsp;term A<sub>i</sub> divides all A<sub>j</sub>, where j&gt;i. Given N find a beautiful sequence whose last term is N and the length of the sequence is the maximum possible. If there are multiple solutions return any.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 10\r\n<strong>Output: </strong>1 5 10\r\n<strong>Explanation: </strong>10 is divisible by\r\n1 and 5, 5 is divisible by 1.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>N = 3\r\n<strong>Output: </strong>1 3\r\n<strong>Explanation: </strong>3 is divisible by 1.</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>FindSequenece()&nbsp;</strong>which takes N as an input parameter and returns a list of beautiful sequences. The driver will print two space-separated integers the length of the sequence and an integer x where x = 1 if your sequence is beautiful otherwise x = 0.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(sqrt(N))<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(sqrt(N))</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 <u>&lt;</u>&nbsp;N <u>&lt;</u>&nbsp;10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A beautiful sequence is defined as a strictly increasing sequence where each term A<sub>i</sub> divides all subsequent terms A<sub>j</sub> (where j > i). Given an integer N, find a beautiful sequence whose last term is N and whose length is maximized. If multiple such sequences exist, return any one of them.",
                "constraints": [
                    "1 <= N <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "10",
                        "output": "1 5 10",
                        "explanation": "The sequence 1, 5, 10 satisfies the conditions. 1 divides both 5 and 10, and 5 divides 10. It is also the longest possible beautiful sequence ending in 10."
                    },
                    {
                        "input": "3",
                        "output": "1 3",
                        "explanation": "The sequence 1, 3 satisfies the conditions. 1 divides 3. It is the longest possible beautiful sequence ending in 3."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Factorise the number.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "number-theory",
                "slug": "number-theory"
            },
            {
                "name": "sieve",
                "slug": "sieve"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    //Function to find the prime factorization of a number.\r\n    vector<int> FindSequenece(int N) {\r\n        int m = sqrt(N); //Finding square root of N\r\n        vector<int> v; //Creating a vector to store the prime factors\r\n\r\n        //Iterating from 2 to square root of N\r\n        for (int i = 2; i <= m; i++) {\r\n            //Checking if N is divisible by i\r\n            while (N % i == 0) {\r\n                v.push_back(N); //Adding N to the vector\r\n                N /= i; //Updating N by dividing it by i\r\n            }\r\n        }\r\n\r\n        //Checking if N is still greater than 1, which means it is a prime number itself\r\n        if (N > 1)\r\n            v.push_back(N); //Adding N to the vector\r\n        v.push_back(1); //Adding 1 to the vector\r\n\r\n        //Reversing the vector to get the prime factors in the desired order\r\n        reverse(v.begin(), v.end());\r\n        return v; //Returning the vector containing the prime factors\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Backend complete function Template for python3\r\n\r\nimport math\r\n\r\nclass Solution:\r\n    #Function to find the prime factorization sequence of a given number N.\r\n    def FindSequenece(self, N):\r\n        m = int(math.sqrt(N))\r\n        v = []\r\n        \r\n        #loop to iterate from 2 to square root of N.\r\n        for i in range(2,m+1):\r\n            \r\n            #checking if i is a factor of N and repeatedly dividing N by i.\r\n            while N%i==0:\r\n                v.append(N)\r\n                N //= i\r\n        \r\n        #if N is still greater than 1, it means N is a prime number.\r\n        if(N>1):\r\n            v.append(N)\r\n        \r\n        #appending 1 as the last element in the sequence.\r\n        v.append(1)\r\n        \r\n        #reversing the sequence.\r\n        v = v[::-1]\r\n        \r\n        return v",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}