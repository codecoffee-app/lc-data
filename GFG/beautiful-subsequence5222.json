{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703111,
            "title": "Beautiful SubSequence",
            "titleSlug": "beautiful-subsequence5222",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong>, find the length of the longest subsequence such that for all pairs (i, j) where i &ne; j, either arr[i] divides arr[j] or arr[j] divides arr[i]. If no such subsequence exists, return -1.</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 20px;\"><strong>Input :</strong> arr[] = [5, 3, 1, 4, 7]</span><span style=\"font-size: 20px;\">\n<strong>Output :</strong> 2\n<strong>Explanation: </strong>Longest Sub Sequence are {5,1} , {4,1}, {3,1} etc. So, size is 2.</span></pre>\n<pre><span style=\"font-size: 20px;\"><strong>Input :</strong> arr[] = [2, 4, 6, 1, 3, 11]</span><span style=\"font-size: 20px;\"><strong>\nOutput :</strong> 3 </span></pre>\n<p><span style=\"font-size: 20px;\"><strong>Expected Time Complexity:</strong> O(n<sup>2</sup>).<br /><strong>Expected Auxiliary Space:</strong> O(n).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints : </strong><br />2 &le; arr.size() &le; 10<sup>3</sup><br />1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]`, find the length of the longest subsequence such that for any two distinct elements `arr[i]` and `arr[j]` in the subsequence, either `arr[i]` divides `arr[j]` or `arr[j]` divides `arr[i]`.  If no such subsequence exists, return -1.",
                "constraints": [
                    "2 \u2264 arr.size() \u2264 10^3",
                    "1 \u2264 arr[i] \u2264 10^5"
                ],
                "testcases": [
                    {
                        "input": "[5, 3, 1, 4, 7]",
                        "output": "2",
                        "explanation": "Possible longest subsequences are {5, 1}, {4, 1}, {3, 1}, etc. The length of these subsequences is 2."
                    },
                    {
                        "input": "[2, 4, 6, 1, 3, 11]",
                        "output": "3",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use dynamic programming to track the longest divisible subsequence by checking divisibility conditions for each element.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the length of the longest subsequence.\n    int longest_Subsequence(vector<int>& arr) {\n        int n = arr.size();\n\n        // Sorting the array in ascending order.\n        sort(arr.begin(), arr.end());\n\n        // dp array to store the length of the longest subsequence ending at each index.\n        vector<int> dp(n, 1);\n\n        // Iterating through the array to find the longest subsequence.\n        for (int j = 1; j < n; j++) {\n            for (int i = 0; i < j; i++) {\n                // Checking if the current number is divisible by the number at the\n                // previous index.\n                if (arr[j] % arr[i] == 0) {\n                    // Updating the length of subsequence if a longer one is found.\n                    dp[j] = max(dp[j], dp[i] + 1);\n                }\n            }\n        }\n\n        // Finding the maximum length of the subsequence.\n        int maxLength = *max_element(dp.begin(), dp.end());\n\n        // If the maximum length is 1, it means no subsequence exists, so returning -1.\n        return maxLength == 1 ? -1 : maxLength;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// User function Template for Java\n\nimport java.util.*;\n\nclass Solution {\n    // Function for finding the length of the longest subsequence\n    public static int longest_Subsequence(int arr[]) {\n        int n = arr.length;\n\n        // Sorting the array in ascending order\n        Arrays.sort(arr);\n\n        // dp array to store the length of the longest subsequence ending at each index\n        int[] dp = new int[n];\n        Arrays.fill(dp, 1);\n\n        // Iterating through the array to find the longest subsequence\n        for (int j = 1; j < n; j++) {\n            for (int i = 0; i < j; i++) {\n                // Checking if the current number is divisible by the number at the\n                // previous index\n                if (arr[j] % arr[i] == 0) {\n                    // Updating the length of the subsequence if a longer one is found\n                    dp[j] = Math.max(dp[j], dp[i] + 1);\n                }\n            }\n        }\n\n        // Finding the maximum length of the subsequence\n        int maxLength = Arrays.stream(dp).max().getAsInt();\n\n        // If the maximum length is 1, it means no valid subsequence exists, so return\n        // -1\n        return maxLength == 1 ? -1 : maxLength;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# User function Template for python3\n\n\nclass Solution:\n\n    def longest_Subsequence(self, arr):\n        n = len(arr)\n\n        # Sorting the array in ascending order\n        arr.sort()\n\n        # dp array to store the length of the longest subsequence ending at each index\n        dp = [1] * n\n\n        # Iterating through the array to find the longest subsequence\n        for j in range(1, n):\n            for i in range(j):\n                # Checking if the current number is divisible by the number at the previous index\n                if arr[j] % arr[i] == 0:\n                    # Updating the length of the subsequence if a longer one is found\n                    dp[j] = max(dp[j], dp[i] + 1)\n\n        # Finding the maximum length of the subsequence\n        maxLength = max(dp)\n\n        # If the maximum length is 1, it means no valid subsequence exists, so return -1\n        return -1 if maxLength == 1 else maxLength\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} arr\n * @returns {number}\n */\n\nclass Solution {\n    // Function to find the length of the longest subsequence\n    longest_Subsequence(arr) {\n        let n = arr.length;\n\n        // Sorting the array in ascending order\n        arr.sort((a, b) => a - b);\n\n        // dp array to store the length of the longest subsequence ending at each index\n        let dp = new Array(n).fill(1);\n\n        // Iterating through the array to find the longest subsequence\n        for (let j = 1; j < n; j++) {\n            for (let i = 0; i < j; i++) {\n                // Checking if the current number is divisible by the number at the\n                // previous index\n                if (arr[j] % arr[i] === 0) {\n                    // Updating the length of the subsequence if a longer one is found\n                    dp[j] = Math.max(dp[j], dp[i] + 1);\n                }\n            }\n        }\n\n        // Finding the maximum length of the subsequence\n        let maxLength = Math.max(...dp);\n\n        // If the maximum length is 1, it means no valid subsequence exists, so return\n        // -1\n        return maxLength === 1 ? -1 : maxLength;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}