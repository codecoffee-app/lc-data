{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704865,
            "title": "Bell Numbers",
            "titleSlug": "bell-numbers2108",
            "content": "<p><span style=\"font-size: 18px;\">Given a set of n elements, find number of ways of partitioning it.<br /></span><span style=\"font-size: 18px;\">In other words, Let S(n, k) be total number of partitions of n elements into k sets. The answer will be the &sum;</span><span style=\"font-size: 18px;\">S(n, k) for k = 1 to n.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 2\n<strong>Output:</strong> 2\n<strong>Explanation</strong>: Let the set be {1, 2}. The partitions are {{1},{2}} and {{1, 2}}.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong><br />Input: </strong>n = 3\n<strong>Output: </strong>5<br /><strong>Explanation</strong>: Let the set be {1, 2, 3}. The partitions are<br />{{1},{2},{3}}\n{{1},{2, 3}}\n{{2},{1, 3}}\n{{3},{1, 2}}\n{{1, 2, 3}}. </span></pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></p>\n<p><span style=\"font-size: 18px;\">1 &le; n &le; 13</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">A&nbsp;<strong>Better Method</strong>&nbsp;is to use&nbsp;<a href=\"https://en.wikipedia.org/wiki/Bell_triangle\">Bell Triangle</a>. Below is a sample Bell Triangle for first few Bell Numbers.</span></p>\n\n<pre>\n<span style=\"font-size:18px\">1\n1 2\n2 3 5\n5 7 10 15\n15 20 27 37 52\n</span></pre>\n\n<p><span style=\"font-size:18px\">The triangle is constructed using below formula.</span></p>\n\n<pre>\n<span style=\"font-size:18px\">// If this is first column of current row &#39;i&#39;\nIf j == 0\n   // Then copy last entry of previous row\n   // Note that i&#39;th row has i entries\n   Bell(i, j) = Bell(i-1, i-1) \n\n// If this is not first column of current row\nElse \n   // Then this element is sum of previous element \n   // in current row and the element just above the\n   // previous element\n   Bell(i, j) = Bell(i-1, j-1) + Bell(i, j-1)\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Interpretation</strong><br />\nThen Bell(n, k) counts the number of partitions of the set {1, 2, &hellip;, n + 1} in which the element k + 1 is the largest element that can be alone in its set.</span></p>\n\n<p><span style=\"font-size:18px\">For example, Bell(3, 2) is 3, it is count of number of partitions of {1, 2, 3, 4} in which 3 is the largest singleton element. There are three such partitions:</span></p>\n\n<pre>\n<span style=\"font-size:18px\">    {1}, {2, 4}, {3}\n    {1, 4}, {2}, {3}\n    {1, 2, 4}, {3}.</span></pre>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to find the nth Bell Number.\n    int bellNumber(int n) {\n        int bell[n + 1][n + 1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            // Explicitly fill for j = 0\n            bell[i][0] = bell[i - 1][i - 1];\n\n            // Fill for remaining values of j\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n        return bell[n][0];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int bellNumber(int n) {\n        int[][] bell = new int[n + 1][n + 1];\n        bell[0][0] = 1;\n\n        for (int i = 1; i <= n; i++) {\n            // Explicitly fill for j = 0\n            bell[i][0] = bell[i - 1][i - 1];\n\n            // Fill for remaining values of j\n            for (int j = 1; j <= i; j++)\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n\n        return bell[n][0];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def bellNumber(self, n):\n        bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n        bell[0][0] = 1\n        for i in range(1, n + 1):\n\n            # Explicitly fill for j = 0\n            bell[i][0] = bell[i - 1][i - 1]\n\n            # Fill for remaining values of j\n            for j in range(1, i + 1):\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n        return bell[n][0]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    bellNumber(n) {\n        let bell = new Array(n + 1);\n        for (let i = 0; i < n + 1; i++) {\n            bell[i] = new Array(n + 1);\n        }\n        bell[0][0] = 1;\n\n        for (let i = 1; i <= n; i++) {\n            // Explicitly fill for j = 0\n            bell[i][0] = bell[i - 1][i - 1];\n\n            // Fill for remaining values of j\n            for (let j = 1; j <= i; j++)\n                bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n\n        return bell[n][0];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}