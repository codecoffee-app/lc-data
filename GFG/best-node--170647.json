{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713977,
            "title": "Best Node",
            "titleSlug": "best-node--170647",
            "content": "<p><span style=\"font-size:18px\">You are given a tree rooted at node&nbsp;<strong>1</strong>. The tree is given in form of an array&nbsp;<strong>P</strong>&nbsp;where&nbsp;<strong>P<sub>i</sub></strong>&nbsp;denotes the parent of node <strong>i</strong>, Also <strong>P<sub>1</sub></strong>&nbsp;= <strong>-1</strong>, as node 1 is the root node.&nbsp;Every node <strong>i</strong>&nbsp;has a value <strong>A<sub>i</sub></strong>&nbsp;associated with it. At first, you have to choose any node to start with, after that from a node you can go to any of its child nodes. You&#39;ve to keep moving to a child node until you reach a leaf node. Every time you get to a new node, you write its value. Let us assume that the integer sequence in your path is&nbsp;<strong>B</strong>.<br />\r\nLet us define a function&nbsp;<em>f</em>&nbsp;over&nbsp;<strong>B</strong>, which is defined as follows:<br />\r\n<em>f(B) =&nbsp;</em>B<sub>1</sub>&nbsp;- B<sub>2</sub>&nbsp;+ B<sub>3</sub>&nbsp;- B<sub>4</sub>&nbsp;+ B<sub>5</sub>.... + (-1)<sup>(k-1)</sup>B<sub>k</sub>.<br />\r\nYou have to find the maximum possible value of&nbsp;<em>f(B)</em>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3,\r\nA = { 1, 2, 3}\r\nP = {-1, 1, 1}\r\nOutput:\r\n3\r\nExplanation:\r\nThe resulting tree is:\r\n\\t  1(1)\r\n\\t/     \\\r\n     2(2)   3(3)\r\nIf we choose our starting node as 3, then the\r\nresulting sequence will be B = { 3 },\r\nwhich will give the maximum possible value.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N = 3,\r\nA = { 3, 1, 2}\r\nP = {-1, 1, 2}\r\n<strong>Output:\r\n</strong>4<strong>\r\nExplanation:\r\n</strong>The resulting tree is:\r\n  1(3)\r\n  |\r\n  2(1)\r\n  |\r\n  3(2)\r\nIf we choose our starting node as 1, then the\r\nresulting sequence will be B = { 3 , 1 , 2 }.\r\nThe value which we&#39;ll get is, 3-1+2 = 4, which\r\nis the maximum possible value.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThe task is to complete the function&nbsp;<strong>bestNode()</strong> which takes an&nbsp;integer&nbsp;<strong>N</strong>&nbsp;and&nbsp;two integer arrays <strong>A</strong>,&nbsp;<strong>P</strong>&nbsp;as&nbsp;input parameters&nbsp;and returns the maximum possible value possible.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Expected Time Complexity: O(N)<br />\r\nExpected Space Complexity: O(N)</span></strong></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &le;&nbsp; N&nbsp;&le;&nbsp;10<sup>5</sup><br />\r\n-10<sup>5</sup> &le;&nbsp; A<sub>i</sub>&nbsp;&le;&nbsp;10<sup>5</sup><br />\r\n-1 &le;&nbsp; P<sub>i</sub>&nbsp;&le; N</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a tree rooted at node 1. The tree is represented by an array P where P[i] denotes the parent of node i. Note that P[1] = -1, indicating that node 1 is the root. Each node i has a value A[i] associated with it.\n\nYou must choose a starting node and traverse downwards to a leaf node. From any node, you can only move to its child nodes. As you traverse, you record the values of the nodes visited in a sequence B.\n\nDefine a function f over the sequence B as follows:\nf(B) = B[1] - B[2] + B[3] - B[4] + B[5] ... + (-1)^(k-1) * B[k], where k is the length of B.\n\nYour goal is to find the maximum possible value of f(B) across all possible starting nodes and paths to leaf nodes.",
                "constraints": [
                    "1 <= N <= 10^5",
                    "-10^5 <= A[i] <= 10^5",
                    "-1 <= P[i] <= N"
                ],
                "testcases": [
                    {
                        "input": "N = 3,\nA = { 1, 2, 3}\nP = {-1, 1, 1}",
                        "output": "3",
                        "explanation": "The tree has root 1 with value 1. Node 2 (value 2) and Node 3 (value 3) are children of Node 1. Starting at Node 3 yields the sequence B = {3}, and f(B) = 3, which is the maximum possible value."
                    },
                    {
                        "input": "N = 3,\nA = { 3, 1, 2}\nP = {-1, 1, 2}",
                        "output": "4",
                        "explanation": "The tree has root 1 (value 3), its child is node 2 (value 1), and node 2's child is node 3 (value 2). Starting at Node 1 yields the sequence B = {3, 1, 2}, and f(B) = 3 - 1 + 2 = 4, which is the maximum possible value."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find a way to start traversal from leaf nodes of the tree.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "DFS",
                "slug": "dfs"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\nclass Solution {\r\n  public:\r\n    void dfs(int u,int p,vector<int> adj[],vector<vector<long long>> &ans,vector<int> &a,vector<bool> &lef)\r\n    {\r\n\t\tbool islef = 1;\r\n        for(int v:adj[u])\r\n        {\r\n            if(p!=v)\r\n            {\r\n\t\t\t\tislef = 0;\r\n                ans[v][0] = max({ans[v][0],ans[u][1]+a[v]});\r\n                ans[v][1] = max({ans[v][1],ans[u][0]-a[v]});\r\n                dfs(v,u,adj,ans,a,lef);\r\n            }\r\n        }\r\n        lef[u] = islef;\r\n    }\r\n    long long bestNode(int n, vector<int> &A, vector<int> &P) {\r\n        // code here\r\n        vector<vector<long long>> v(n ,vector<long long>(2,-1e18));\r\n        for(int i = 0; i<n; i++)\r\n        {\r\n            v[i][0] = A[i];\r\n        }\r\n        \r\n        for(int &i:P)i--;\r\n        vector<int> adj[n];\r\n        for(int i = 1; i<n; i++)\r\n        {\r\n            adj[i].push_back(P[i]);\r\n            adj[P[i]].push_back(i);\r\n        }\r\n       \r\n        vector<bool> lef(n,0);\r\n        dfs(0,-1,adj,v,A,lef);\r\n        long long ans = -1e18;\r\n        for(int i = 0; i<n; i++)\r\n        {\r\n\t\t\tif(lef[i])\r\n            ans = max({ans,v[i][0],v[i][1]});\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    public static long bestNode(int N, int[] A, int[] P) {\n        // Create a HashSet to store parent nodes\n        HashSet<Integer> set = new HashSet<>();\n        \n        // Add parent nodes to the HashSet\n        for(int k: P)\n            set.add(k);\n        \n        // Create an ArrayList to store leaf nodes\n        ArrayList<Integer> leafNode = new ArrayList<>();\n        \n        // Find leaf nodes by checking if they are not in the HashSet\n        for(int i = 1; i <= P.length; i++){\n            if(!set.contains(i))\n                leafNode.add(i);\n        }\n        \n        // Initialize answer variable to track maximum value\n        int answer = Integer.MIN_VALUE;\n        \n        // Iterate over leaf nodes\n        for(int leaf: leafNode){\n            int node = leaf;\n            int ans = 0;\n            \n            // Traverse the tree and calculate the path values\n            while(node != -1){\n                ans*=-1;\n                ans += (A[node-1]);\n                answer = Math.max(answer, ans);\n                node = P[node-1];\n            }\n        }\n        \n        // Return the maximum path value\n        return answer;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\nneg = -10**11\nclass Solution:\n\n    def bestNode(self, N : int, A : List[int], P : List[int]) -> int:\n        leafs = set([i for i in range(1, N+1)])  # creating a set of leaf nodes\n        \n        ans = [neg for i in range(N+1)]  # initializing a list to store the maximum sum at each node\n        for i in P:\n            if i in leafs:\n                leafs.remove(i)  # removing leaf nodes from the set\n\n        for i in leafs:\n            pointer = i\n            sumo = 0\n            while pointer != -1:  # traversing the tree from each leaf node to the root node\n                sumo = A[pointer-1] - sumo\n                ans[pointer] = max(sumo, ans[pointer])  # updating the maximum sum at each node\n                pointer = P[pointer-1]\n\n        return max(ans)  # returning the maximum sum at any node in the tree",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @param {number[]} A\n * @param {number[]} P\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to find the node with maximum value of a character\n    bestNode(N, A, P) {\n        const neg = -Math.pow(10, 11);\n        let leafs = new Set([...Array(N)].map((_,i) => i+1));\n        \n        let ans = Array(N+1).fill(neg);\n        for (let i = 0; i < P.length; i++) {\n            if (leafs.has(P[i])) {\n                leafs.delete(P[i]);\n            }\n        }\n\n        for (let i of leafs) {\n            let pointer = i;\n            let sumo = 0;\n            while (pointer !== -1) {\n                sumo = A[pointer-1] - sumo;\n                ans[pointer] = Math.max(sumo, ans[pointer]);\n                pointer = P[pointer-1];\n            }\n        }\n\n        return Math.max(...ans);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}