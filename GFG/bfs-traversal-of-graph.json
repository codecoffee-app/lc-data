{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700217,
            "title": "BFS of graph",
            "titleSlug": "bfs-traversal-of-graph",
            "content": "<p><span >Given a <strong>undirected graph</strong>&nbsp;represented by an adjacency list&nbsp;<strong><code>adj[][]</code></strong>, which is a vector of vectors where each&nbsp;<code>adj[i]</code>&nbsp;represents the list of vertices connected to vertex&nbsp;<code>i</code>. Perform a&nbsp;<strong>Breadth First Search (BFS)&nbsp;</strong>traversal&nbsp;starting from vertex&nbsp;<code>0</code>, visiting vertices from left to right according to&nbsp;the adjacency list, and return a list containing the BFS traversal of the graph.</span></p>\n<p><span ><strong>Note:</strong> Do traverse in the <strong>same order</strong> as they are in the <strong>adjacency list</strong>.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>adj[][] = [[2, 3, 1], [0], [0, 4], [0], [2]]</span><br /><span ><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700217/Web/Other/blobid0_1728648582.jpg\" width=\"301\" height=\"189\" /><br /><strong>Output:</strong> [0, 2, 3, 1, 4]<br /><strong>Explanation:</strong> Starting from 0, the BFS traversal will follow these steps: <br />Visit 0 &rarr; Output: 0 <br />Visit 2 (first neighbor of 0) &rarr; Output: 0, 2 <br />Visit 3 (next neighbor of 0) &rarr; Output: 0, 2, 3 <br />Visit 1 (next neighbor of 0) &rarr; Output: 0, 2, 3, <br />Visit 4 (neighbor of 2) &rarr; Final Output: 0, 2, 3, 1, 4</span></pre>\n<pre><span ><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"><strong>Input: </strong>adj[][] = [[1, 2],  [0, 2], [0, 1, 3, 4], [2], [2]]</span></span><br /><span ><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700217/Web/Other/blobid1_1728648604.jpg\" width=\"301\" height=\"189\" /><br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Output:</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\"> [0, 1, 2, 3, 4]<br /><strong>Explanation: </strong></span><span style=\"font-family: -apple-system, system-ui, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Open Sans, Helvetica Neue, sans-serif;\">Starting from 0, the BFS traversal proceeds as follows: <br />Visit 0 &rarr; Output: 0 <br />Visit 1 (the first neighbor of 0) &rarr; Output: 0, 1 <br />Visit 2 (the next neighbor of 0) &rarr; Output: 0, 1, 2 <br />Visit 3 (the first neighbor of 2 that hasn't been visited yet) &rarr; Output: 0, 1, 2, 3 <br />Visit 4 (the next neighbor of 2) &rarr; Final Output: 0, 1, 2, 3, 4</span></span></pre>\n<p><span ><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Constraints:<br /></strong>1 &le; adj.size() &le; 10<sup>4<br /></sup>1 &le; adj[i][j] &le; 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph represented by an adjacency list `adj[][]`, where `adj[i]` represents the list of vertices connected to vertex `i`. Perform a Breadth-First Search (BFS) traversal starting from vertex `0`. Visit vertices from left to right according to the adjacency list. Return a list containing the BFS traversal of the graph. Traverse in the same order as they are in the adjacency list.",
                "constraints": [
                    "1 <= adj.size() <= 10^4",
                    "1 <= adj[i][j] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "adj[][] = [[2, 3, 1], [0], [0, 4], [0], [2]]",
                        "output": "[0, 2, 3, 1, 4]",
                        "explanation": "Starting from vertex 0, the BFS traversal explores neighbors in the order they appear in the adjacency list. We visit 0, then its neighbors 2, 3, and 1. Finally, we visit the unvisited neighbor 4 of vertex 2."
                    },
                    {
                        "input": "adj[][] = [[1, 2], [0, 2], [0, 1, 3, 4], [2], [2]]",
                        "output": "[0, 1, 2, 3, 4]",
                        "explanation": "Starting from vertex 0, we visit its neighbors 1 and 2. Then, we visit the unvisited neighbors of 1 and 2. We visit all nodes resulting in [0, 1, 2, 3, 4]"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Explore nodes level by level using a queue, starting from the source, marking visited nodes to avoid cycles, and visiting all neighboring nodes before moving deeper.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "samsung",
            "ola-cabs",
            "adobe",
            "sap-labs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to return Breadth First Traversal of given graph.\n    vector<int> bfs(vector<vector<int>> &adj) {\n        int V = adj.size();\n        // boolean list to mark all the vertices as not visited.\n        vector<bool> vis(V, false);\n        int s = 0;\n\n        // initially we mark first vertex as visited(true).\n        vis[s] = true;\n\n        vector<int> res;\n\n        // creating a queue for BFS and pushing first vertex in queue.\n        queue<int> q;\n        q.push(s);\n\n        while (!q.empty()) {\n            // adding front element in output list and popping it from queue.\n            int t = q.front();\n            res.push_back(t);\n            q.pop();\n\n            // traversing over all the connected components of front element.\n            for (int v : adj[t]) {\n                // if they aren't visited, we mark them visited and add to queue.\n                if (!vis[v]) {\n                    vis[v] = true;\n                    q.push(v);\n                }\n            }\n        }\n        // returning the output list.\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Class representing the solution\nclass Solution {\n    // Function to return Breadth First Search Traversal of the given graph.\n    public ArrayList<Integer> bfs(int V, ArrayList<ArrayList<Integer>> adj) {\n        ArrayList<Integer> bfsResult =\n            new ArrayList<>();              // List to store BFS traversal result\n        boolean[] visited = new boolean[V]; // Visited array to track visited nodes\n\n        Queue<Integer> queue = new LinkedList<>();\n        queue.add(0);      // Starting BFS from vertex 0\n        visited[0] = true; // Marking vertex 0 as visited\n\n        while (!queue.isEmpty()) {\n            int node = queue.poll(); // Dequeue a vertex from queue\n            bfsResult.add(node);     // Add the dequeued node to the result\n\n            // Traverse all the adjacent vertices of the dequeued node\n            for (int neighbor : adj.get(node)) {\n                if (!visited[neighbor]) {\n                    visited[neighbor] = true; // Mark neighbor as visited\n                    queue.add(neighbor);      // Enqueue the neighbor\n                }\n            }\n        }\n\n        return bfsResult; // Return the BFS traversal result\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from queue import Queue\nfrom typing import List\n\n\nclass Solution:\n    # Function to return Breadth First Search Traversal of given graph.\n    def bfs(self, adj: List[List[int]]) -> List[int]:\n        ans = []\n        V = len(adj)  # Number of vertices\n        vis = [False] * V  # To track visited vertices\n\n        q = Queue()  # Initialize queue\n        q.put(0)  # Start BFS from vertex 0\n        vis[0] = True  # Mark vertex 0 as visited\n\n        while not q.empty():\n            v = q.get()\n            ans.append(v)\n\n            # Traverse all adjacent vertices of the dequeued vertex `v`\n            for i in adj[v]:\n                if not vis[i]:\n                    vis[i] = True\n                    q.put(i)\n\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "\n//Back-end complete function Template for C#\npublic class Solution {\n    // Function to return Breadth First Search Traversal of the given graph.\n    public List<int> bfs(List<int>[] adj) {\n        int V = adj.Length;\n\n        if (V == 0) return new List<int>(); // Handle empty graph\n\n        bool[] vis = new bool[V]; // To mark visited vertices\n        List<int> res = new List<int>();\n        Queue<int> q = new Queue<int>(); // Queue for BFS\n\n        // Starting BFS from vertex 0\n        vis[0] = true;\n        q.Enqueue(0);\n\n        while (q.Count > 0) {\n            int node = q.Dequeue(); // Dequeue the front element\n            res.Add(node);          // Add it to the result list\n\n            // Traverse all adjacent vertices of the dequeued node\n            foreach (int neighbor in adj[node]) {\n                if (!vis[neighbor]) {\n                    vis[neighbor] = true; // Mark visited\n                    q.Enqueue(neighbor);  // Enqueue the neighbor\n                }\n            }\n        }\n\n        return res; // Return the BFS traversal\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for JavaScript\nclass Solution {\n    // Function to return Breadth First Search Traversal of the given graph.\n    bfs(adj) {\n        const V = adj.length;\n        let vis = new Array(V).fill(false); // Boolean array to track visited vertices\n        let res = [];\n        let q = []; // Queue for BFS\n\n        let s = 0; // Start BFS from vertex 0\n        vis[s] = true;\n        q.push(s);\n\n        while (q.length > 0) {\n            let t = q.shift(); // Dequeue the front element\n            res.push(t);       // Add it to the result array\n\n            // Traverse all adjacent vertices of dequeued vertex\n            for (let v of adj[t]) {\n                if (!vis[v]) { // If not visited, mark visited and enqueue\n                    vis[v] = true;\n                    q.push(v);\n                }\n            }\n        }\n\n        return res; // Return the BFS traversal result\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}