{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714216,
            "title": "Bheem Wants Ladoos",
            "titleSlug": "bheem-wants-ladoos--170647",
            "content": "<p><span >Given a binary tree where each node contains a number of ladoos equal to its value, and a starting node, <strong>src,</strong> find the maximum sum of ladoos that can be collected within a distance <strong><code>k</code></strong> from the starting node. The value at the starting node, <strong>src</strong>, should be included in the sum. Each node has a unique number of ladoos.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong>\n    &nbsp;\\t\\t  <strong>1</strong>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp; &nbsp;\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;   2&nbsp; &nbsp; &nbsp; <strong>9</strong>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;    /&nbsp; &nbsp; &nbsp;&nbsp;/&nbsp;&nbsp;\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;     4&nbsp; &nbsp; &nbsp; <strong>5</strong>&nbsp; &nbsp; &nbsp;<strong>7</strong>\n&nbsp; &nbsp; &nbsp; &nbsp;     /&nbsp; &nbsp;\\&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/&nbsp; \\\n&nbsp; &nbsp; &nbsp;\\t8&nbsp; &nbsp;  19&nbsp; &nbsp; &nbsp;20&nbsp; &nbsp; 11\n&nbsp; &nbsp;\\t /&nbsp; &nbsp; &nbsp;/&nbsp; \\\n &nbsp;\\t 30&nbsp; &nbsp;40&nbsp; &nbsp;50\nsrc = 9, k = 1\n<strong>Output: </strong>22\n<strong>Explanation: </strong>Initially we're at 9, so sum = 9. In 2nd move we went to 5, sum=9+5=14. In 3rd move we went to 7, sum=14+7=21. In 4th move we went to 1, sum=21+1=22. So, within k distance we can get 22 ladoos.  \n</span></pre>\n<pre><span ><strong>Input:</strong>\n    &nbsp;\\t\\t  1\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;/&nbsp;&nbsp; &nbsp;\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;   2&nbsp; &nbsp; &nbsp; 9\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;    /&nbsp; &nbsp; &nbsp;&nbsp;/&nbsp;&nbsp;\\\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;     <strong>4</strong>&nbsp; &nbsp; &nbsp; 5&nbsp; &nbsp; &nbsp;7\n&nbsp; &nbsp; &nbsp; &nbsp;     /&nbsp; &nbsp;\\&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/&nbsp; \\\n&nbsp; &nbsp; &nbsp;\\t8&nbsp; &nbsp;  <strong>19</strong>&nbsp; &nbsp; &nbsp;20&nbsp; &nbsp; 11\n&nbsp; &nbsp;\\t /&nbsp; &nbsp; &nbsp;/&nbsp; \\\n &nbsp;\\t 30&nbsp; &nbsp;<strong>40</strong>&nbsp; &nbsp;<strong>50</strong>\nsrc = 40, k = 2\n<strong>Output: </strong>113\n<strong>Explanation: </strong>Initially we're at 40, so sum = 40. In 2nd move we went to 19, sum=40+19=59. In 3rd move we went to 4, sum=59+4=63. In 4th move we went to 50, sum=63+50=113. So, within K distance we can get 113 ladoos.\n</span></pre>\n<pre><span ><strong>Input: </strong>1\nsrc = 1, k = 1\n<strong>Output: </strong>1</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; number of nodes, src &le; 10<sup>5<br /></sup><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1 &le; node-&gt;data &le; 10</span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">5<br /></sup><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1 &le; k &le; 20</span></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree where each node contains a number of ladoos (sweets) equal to its value, and a starting node `src`, find the maximum sum of ladoos that can be collected within a distance `k` from the starting node. The value at the starting node `src` should be included in the sum. Assume each node has a unique number of ladoos.",
                "constraints": [
                    "1 <= number of nodes, src <= 10^5",
                    "1 <= node->data <= 10^5",
                    "1 <= k <= 20"
                ],
                "testcases": [
                    {
                        "input": "Binary Tree:\n    1\n   /   \\\n  2     9\n /     / \\\n4     5   7\n/ \\   /   \\\n8  19 20  11\n/   / \\\n30 40  50\nsrc = 9, k = 1",
                        "output": "22",
                        "explanation": "Starting at node 9 (ladoos = 9). Within a distance of 1, we can reach nodes 5 and 7.  The maximum ladoos we can collect is 9 (src) + 5 + 7 + 1 (parent node) = 22 (9 -> 1, 9->5, 9->7 are distance one from src). Thus the answer is 22."
                    },
                    {
                        "input": "Binary Tree:\n    1\n   /   \\\n  2     9\n /     / \\\n4     5   7\n/ \\   /   \\\n8  19 20  11\n/   / \\\n30 40  50\nsrc = 40, k = 2",
                        "output": "113",
                        "explanation": "Starting at node 40 (ladoos = 40). Within a distance of 2, we can reach nodes 19, 50, and 4. The maximum ladoos we can collect is 40 (src) + 19 + 50 + 4 = 113 (40 -> 19, 40 -> 50, 40 -> 4 are atmost distance two from src). Thus, the answer is 113."
                    },
                    {
                        "input": "Binary Tree:\n1\nsrc = 1, k = 1",
                        "output": "1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Traverse over the tree while looking for target node, if found, add values of all nodes below it within distance k and&nbsp;return the distance from node.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n\n  private:\n    void add_subtree(Node* n, int dist, int* sum) {\n        if (!n || dist < 0)\n            return;\n        *sum += n->data;\n        add_subtree(n->left, dist - 1, sum);\n        add_subtree(n->right, dist - 1, sum);\n    }\n\n    int traverse(Node* n, int target, int k, int* sum) {\n        if (!n)\n            return -1;\n        if (n->data == target) {\n            add_subtree(n, k, sum);\n            // adding all nodes within range in the sub tree below\n            return k - 1;\n        }\n\n        int dist = traverse(n->left, target, k, sum);\n        if (dist > -1)\n        // dist>-1 indicates target was found in left subtree\n        {\n            *sum += n->data;\n            add_subtree(n->right, dist - 1, sum);\n            // adding values from right sub tree\n            return dist - 1;\n        }\n\n        dist = traverse(n->right, target, k, sum);\n        if (dist > -1)\n        // dist>-1 indicates target was found in right subtree\n        {\n            *sum += n->data;\n            add_subtree(n->left, dist - 1, sum);\n            // adding values from left sub tree\n            return dist - 1;\n        }\n\n        return -1;\n    }\n\n  public:\n    int ladoos(Node* root, int home, int k) {\n        int sum = 0;\n        traverse(root, home, k, &sum);\n        return sum;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static int sum;\n\n    static void add_subtree(Node n, int dist) {\n        if ((n == null) || (dist < 0)) return;\n        sum += n.data;\n        add_subtree(n.left, dist - 1);\n        add_subtree(n.right, dist - 1);\n    }\n\n    static int traverse(Node n, int target, int k) {\n        if (n == null) return -1;\n        if (n.data == target) {\n            add_subtree(n, k);\n            // adding all nodes within range in the sub tree below\n            return k - 1;\n        }\n\n        int dist = traverse(n.left, target, k);\n        if (dist > -1)\n        // dist>-1 indicates target was found in left subtree\n        {\n            sum += n.data;\n            add_subtree(n.right, dist - 1);\n            // adding values from right sub tree\n            return dist - 1;\n        }\n\n        dist = traverse(n.right, target, k);\n        if (dist > -1)\n        // dist>-1 indicates target was found in right subtree\n        {\n            sum += n.data;\n            add_subtree(n.left, dist - 1);\n            // adding values from left sub tree\n            return dist - 1;\n        }\n\n        return -1;\n    }\n\n    static int ladoos(Node root, int home, int k) {\n        sum = 0;\n        traverse(root, home, k);\n        return sum;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def add_subtree(self, n, dist):\n        if n is None or dist < 0:\n            return 0\n        return n.data + self.add_subtree(n.left, dist - 1) + self.add_subtree(\n            n.right, dist - 1)\n\n    def traverse(self, n, target, k):\n        if n is None:\n            return (0, -1)\n        if n.data == target:\n            return (self.add_subtree(n, k), k - 1)\n            # adding all nodes within range in the sub tree below\n            # and returning sum\n\n        Sum, dist = self.traverse(n.left, target, k)\n        if Sum > 0:\n            # Sum>0 indicates target was found in left subtree\n            if dist == -1:\n                return (Sum, dist)\n            return (Sum + n.data + self.add_subtree(n.right, dist - 1),\n                    dist - 1)\n            # adding values from right sub tree\n\n        Sum, dist = self.traverse(n.right, target, k)\n        if Sum > 0:\n            # Sum>0 indicates target was found in right subtree\n            if dist == -1:\n                return (Sum, dist)\n            return (Sum + n.data + self.add_subtree(n.left, dist - 1),\n                    dist - 1)\n            # adding values from left sub tree\n\n        return (0, -1)\n\n    def ladoos(self, root, home, k):\n        Sum, dist = self.traverse(root, home, k)\n        return Sum\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Helper function to calculate the sum of nodes within a specified distance\n    addSubtree(n, dist) {\n        // Base case: if node is null or distance is negative, return 0\n        if (n === null || dist < 0) {\n            return 0;\n        }\n        // Recursively add node data and call function on left and right subtrees with\n        // reduced distance\n        return n.data + this.addSubtree(n.left, dist - 1) +\n               this.addSubtree(n.right, dist - 1);\n    }\n\n    // Main traversal function to locate the target node and compute the sum of nodes\n    // within distance `k`\n    traverse(n, target, k) {\n        // Base case: if node is null, return sum as 0 and distance as -1 (indicating\n        // target not found)\n        if (n === null) {\n            return [ 0, -1 ];\n        }\n\n        // If current node is the target node\n        if (n.data === target) {\n            // Call addSubtree to get the sum of nodes within `k` distance from target,\n            // and return remaining distance\n            return [ this.addSubtree(n, k), k - 1 ];\n        }\n\n        // Traverse left subtree\n        let [sumLeft, distLeft] = this.traverse(n.left, target, k);\n        if (sumLeft > 0) { // Target found in left subtree\n            if (distLeft === -1) {\n                return [\n                    sumLeft, distLeft\n                ]; // Target found with no further distance needed\n            }\n            // Add current node data and right subtree nodes within the remaining\n            // distance\n            return [\n                sumLeft + n.data + this.addSubtree(n.right, distLeft - 1), distLeft - 1\n            ];\n        }\n\n        // Traverse right subtree\n        let [sumRight, distRight] = this.traverse(n.right, target, k);\n        if (sumRight > 0) { // Target found in right subtree\n            if (distRight === -1) {\n                return [\n                    sumRight, distRight\n                ]; // Target found with no further distance needed\n            }\n            // Add current node data and left subtree nodes within the remaining\n            // distance\n            return [\n                sumRight + n.data + this.addSubtree(n.left, distRight - 1),\n                distRight - 1\n            ];\n        }\n\n        // If target not found in either subtree, return 0 sum and -1 distance\n        return [ 0, -1 ];\n    }\n\n    // Public function to initiate traversal and find sum of nodes within `k` distance\n    // from `home`\n    ladoos(root, home, k) {\n        // Start traversal from the root to find the sum\n        let [sum, dist] = this.traverse(root, home, k);\n        return sum; // Return the computed sum\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}