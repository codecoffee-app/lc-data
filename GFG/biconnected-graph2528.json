{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705696,
            "title": "Biconnected Graph",
            "titleSlug": "biconnected-graph2528",
            "content": "<p><span style=\"font-size: 18px;\">Given a graph with <strong>n</strong> vertices, <strong>e</strong> edges and an array <strong>arr[] </strong>denoting the edges connected to each other, check whether it is <a href=\"https://en.wikipedia.org/wiki/Biconnected_graph\">Biconnected</a> or not.<br /><strong>Note: </strong>The given graph is Undirected.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> </span><span style=\"font-size: 18px;\"><strong>n = </strong>2, <strong>e = </strong>1</span><span style=\"font-size: 18px;\">, </span><span style=\"font-size: 18px;\"><strong>arr = </strong>{0, 1}</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">1</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">\\t 0\n\\t/\n     1\nThe above graph is Biconnected.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> </span><span style=\"font-size: 18px;\"><strong>n = </strong>3, <strong>e = </strong>2</span><span style=\"font-size: 18px;\">, </span><span style=\"font-size: 18px;\"><strong>arr = </strong>{0, 1, 1, 2}</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">0</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">\\t 0\n\\t/\n     1\n\\t\\\n\\t 2\nThe above graph is not Biconnected.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n+e)<br /><strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\">1 &lt;= e &lt;= 100<br />2 &lt;= n &lt;= 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph with 'n' vertices and 'e' edges, represented by an array 'arr[]' where each pair of consecutive elements denotes an edge between two vertices, determine if the graph is biconnected. A biconnected graph is a connected graph that remains connected even after removing any single vertex and all edges incident to that vertex.",
                "constraints": [
                    "1 <= e <= 100",
                    "2 <= n <= 100"
                ],
                "testcases": [
                    {
                        "input": "n = 2, e = 1, arr = {0, 1}",
                        "output": "1",
                        "explanation": "The graph consists of two vertices connected by a single edge. Removing either vertex leaves the other vertex still connected (albeit trivially), thus it's considered biconnected."
                    },
                    {
                        "input": "n = 3, e = 2, arr = {0, 1, 1, 2}",
                        "output": "0",
                        "explanation": "The graph has edges (0, 1) and (1, 2). Vertex 1 is an articulation point. Removing vertex 1 disconnects vertices 0 and 2. Therefore, it is not a biconnected graph."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">A graph is said to be Biconnected if:&nbsp;<br />\n1) It is connected, i.e. it is possible to reach every vertex from every other vertex, by a simple path.&nbsp;<br />\n2) Even after removing any vertex the graph remains connected. </span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n  \r\n    bool vis[101];\r\n    \r\n    void dfs(vector<int> g[], bool vis[], int i)\r\n    {\r\n        vis[i]=true;\r\n        \r\n        for(auto x:g[i])\r\n           if(!vis[x] )\r\n               dfs(g,vis,x );\r\n    }\r\n    \r\n    int biGraph(int arr[], int n, int e) {\r\n        \r\n        bool flag = true;\r\n        \r\n        if(n > 2*e)\r\n            flag = false;\r\n            \r\n        vector<int> g[n];\r\n        \r\n        for(int i=0; i<2*e; i+=2)\r\n        {\r\n            int x = arr[i];\r\n            int y = arr[i+1];\r\n            g[x].push_back(y);\r\n            g[y].push_back(x);\r\n        }\r\n        \r\n        for (int i=0; i<=n; i++)\r\n        {\r\n            if(!flag)\r\n                break; \r\n                \r\n            memset(vis,false,100);\r\n            vis[i]=true; \r\n            \r\n            if(i)\r\n                dfs(g,vis,0);\r\n            else\r\n                dfs(g,vis,i+1);\r\n                \r\n            for(int h=0; h<n; h++)\r\n            {\r\n                if(!vis[h])\r\n                {\r\n                    flag = false;\r\n                    break;\r\n                }\r\n            } \r\n        }\r\n        if(flag)\r\n            return 1;\r\n        else\r\n            return 0;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    def biGraph(self, arr, n, e):\n        # Initializing the arrays and dictionaries\n        discover = [-1 for i in range(n)]\n        ancestor = [-1 for i in range(n)]\n        adj = {}\n        for i in range(n):\n            adj[i] = []\n        \n        # Building the adjacency list\n        for i in range(0, len(arr), 2):\n            u, v = arr[i], arr[i+1]\n            adj[u].append(v)\n            adj[v].append(u)\n        \n        step = 0\n        cut_vertex = []\n    \n        def findCutVertex(node, parent):\n            nonlocal adj, step, discover, ancestor, cut_vertex\n            \n            # Marking the current node as discovered and assigning an ancestor value\n            discover[node] = step\n            ancestor[node] = step\n            step += 1\n            \n            child_count = 0\n            # Looping through the neighbors of the current node\n            for neighbor in adj[node]:\n                if neighbor == parent:\n                    continue\n                \n                # If the neighbor is not yet discovered, recursively call the function on it\n                if discover[neighbor] == -1:\n                    child_ancestor = findCutVertex(neighbor, node)\n                    ancestor[node] = min(ancestor[node], child_ancestor)\n                    child_count += 1\n                else:\n                    ancestor[node] = min(ancestor[node], discover[neighbor])\n            \n            # Checking if the current node is a cut vertex\n            if discover[node] == 0:\n                if child_count > 1:\n                    cut_vertex.append(node)\n            else:\n                if discover[node] <= ancestor[node] and parent != 0:\n                    cut_vertex.append(node)\n            \n            return ancestor[node]\n        \n        # Calling the findCutVertex function on the root node (0)\n        findCutVertex(0, None)\n        \n        # Checking if the graph is a biconnected graph\n        if step < n or len(cut_vertex) > 0:\n            return 0\n        else:\n            return 1",
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}