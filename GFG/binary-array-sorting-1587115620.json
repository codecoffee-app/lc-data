{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701223,
            "title": "Binary Array Sorting",
            "titleSlug": "binary-array-sorting-1587115620",
            "content": "<p><span >You are given a binary array <strong><code>arr[]</code></strong>, where each element is either <code>0</code> or <code>1</code>. Your task is to rearrange the array in increasing order in place (without using extra space). You do not need to return anything; simply modify the input array.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input</strong>: arr[] = [1, 0, 1, 1, 0]\n<strong>Output</strong>: [0, 0, 1, 1, 1]\n<strong>Explanation</strong>: After arranging the elements in increasing order, elements will be as 0 0 1 1 1.</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [1, 0, 1, 1, 1, 1, 1, 0, 0, 0]\n<strong>Output</strong>: [0, 0, 0, 0, 1, 1, 1, 1, 1, 1]\n<strong>Explanation</strong>: After arranging the elements in increasing order, elements will be 0 0 0 0 1 1 1 1 1 1.</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [1, 1, 1, 1]\n<strong>Output</strong>: [1, 1, 1, 1]\n<strong>Explanation</strong>: Since the array already contains only <code>1</code><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">s, no change is needed.</span></span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br /><span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">rr</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">] </span><span class=\"mrel\">&isin; </span></span><span class=\"base\"><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span> for all valid indices <code>i</code>.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are given a binary array `arr[]`, containing only 0s and 1s. Rearrange the array in-place (without using extra space) such that all 0s come before all 1s, effectively sorting the array in increasing order. Modify the input array directly; no return value is expected.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "arr[i] \u2208 {0, 1} for all valid indices i"
                ],
                "testcases": [
                    {
                        "input": "[1, 0, 1, 1, 0]",
                        "output": "[0, 0, 1, 1, 1]",
                        "explanation": "The array is rearranged to have all 0s followed by all 1s."
                    },
                    {
                        "input": "[1, 0, 1, 1, 1, 1, 1, 0, 0, 0]",
                        "output": "[0, 0, 0, 0, 1, 1, 1, 1, 1, 1]",
                        "explanation": "The array is rearranged to have all 0s followed by all 1s."
                    },
                    {
                        "input": "[1, 1, 1, 1]",
                        "output": "[1, 1, 1, 1]",
                        "explanation": "The array already contains only 1s, so no rearrangement is necessary."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use two pointers to swap 0s to the front and 1s to the back in-place.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to perform binary sorting of 0s and 1s in the array\nclass Solution {\n  public:\n    // Function to sort the binary array in non-decreasing order\n    void binSort(vector<int> &arr) {\n        int n = arr.size();\n        // Initialize low and mid pointers to 0, high to the last index\n        int low = 0, mid = 0, high = n - 1;\n\n        // Loop until mid pointer crosses high pointer\n        while (mid <= high) {\n            // If the element at mid is 0, swap with element at low and move both\n            // pointers\n            if (arr[mid] == 0) {\n                swap(arr[low], arr[mid]);\n                low++;\n                mid++;\n            }\n            // If the element at mid is 1, swap with element at high and move high\n            // pointer\n            else {\n                swap(arr[mid], arr[high]);\n                high--;\n            }\n        }\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to sort the binary array in non-decreasing order\n    public void binSort(int[] arr) {\n        // Initialize low and mid pointers to 0, high to the last index\n        int low = 0, mid = 0, high = arr.length - 1;\n\n        // Loop until mid pointer crosses high pointer\n        while (mid <= high) {\n            // If the element at mid is 0\n            if (arr[mid] == 0) {\n                // Swap 0 to the front (position indicated by low)\n                swap(arr, low, mid);\n                // Move low and mid pointers to the right\n                low++;\n                mid++;\n            } else {\n                // For 1, just move mid pointer to the right\n                mid++;\n            }\n        }\n    }\n\n    // Helper function to swap elements at indices i and j\n    private void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "# Solution class\nclass Solution:\n    # Function to sort the binary array in non-decreasing order\n    def binSort(self, arr):\n        # Initialize low and mid pointers to 0\n        low = 0\n        mid = 0\n        # Initialize high pointer to the last index of the array\n        high = len(arr) - 1\n\n        # Loop until mid pointer crosses high pointer\n        while mid <= high:\n            # If the element at mid is 0\n            if arr[mid] == 0:\n                # Swap the 0 to the front (position indicated by low)\n                arr[low], arr[mid] = arr[mid], arr[low]\n                # Move low and mid pointers to the right\n                low += 1\n                mid += 1\n            # If the element at mid is 1\n            else:\n                # Just move the mid pointer to the right\n                mid += 1\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {number[]} arr - The binary array to be sorted\n * @returns {void}\n */\nclass Solution {\n    // Function to sort the binary array in non-decreasing order\n    binSort(arr) {\n        // Initialize low and mid pointers to 0, high to the last index\n        let low = 0, mid = 0, high = arr.length - 1;\n\n        // Loop until mid crosses high\n        while (mid <= high) {\n            // If the current element is 0\n            if (arr[mid] === 0) {\n                // Swap 0 to the front (position indicated by low)\n                [arr[low], arr[mid]] = [ arr[mid], arr[low] ];\n                // Move low and mid pointers to the right\n                low++;\n                mid++;\n            } else {\n                // If the current element is 1, just increment mid\n                mid++;\n            }\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}