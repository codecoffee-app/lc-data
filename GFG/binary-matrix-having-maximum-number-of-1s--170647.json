{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714125,
            "title": "Binary matrix having maximum number of 1s",
            "titleSlug": "binary-matrix-having-maximum-number-of-1s--170647",
            "content": "<p><span style=\"font-size:18px\">Given a binary matrix (containing only <strong>0</strong> and <strong>1</strong>) of order NxN. <strong>All rows are sorted already</strong>, We need to find the row number with the <strong>maximum number of 1s</strong>. Also, find the number of 1s in that row.<br />\r\n<strong>Note:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">1.<strong>&nbsp;</strong>In case of a tie, print the smaller row number.<br />\r\n2. Row number should start from 0<sup>th</sup> index.</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N=3\r\nmat[3][3] = {0, 0, 1, \r\n&nbsp;\\t\\t 0, 1, 1, \r\n&nbsp;\\t\\t 0, 0, 0}\r\n<strong>Output:</strong>\r\nRow number = 1\r\nMaxCount = 2</span>\r\n<strong><span style=\"font-size:18px\">Explanation:</span></strong>\r\n<span style=\"font-size:18px\">Here, max number of 1s is in row number 1\r\nand its count is 2.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong>N=3\r\nmat[3][3] = {1, 1, 1, \r\n&nbsp;\\t\\t 1, 1, 1, \r\n&nbsp;\\t\\t 0, 0, 0}\r\n<strong>Output:</strong>\r\nRow number = 0\r\nMaxCount = 3</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. The task is to complete the function <strong>findMaxRow()</strong> which takes mat[][] as the 2D matrix and&nbsp;N as the size of matrix. Your task is to find the row number with the <strong>maximum number of 1s </strong>and&nbsp;find the number of 1s in that row and return the answer in a vector of size 2 where at 0<sup>th&nbsp;</sup>index will be&nbsp;the row number and at 1<sup>th&nbsp;</sup>index will be MaxCount.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N&nbsp;&lt;= 10</span><sup><span style=\"font-size:15px\">3</span></sup><br />\r\n<span style=\"font-size:18px\">0 &lt;= mat[][]&lt;= 1</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">&nbsp;T</span><span style=\"font-size:16px\">ake advantage of the fact that the rows are sorted and the maximum number of 1s in any row is guaranteed&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "swiggy"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\npublic:\n    //Function to find the row with maximum number of 1s in a matrix.\n    vector<int> findMaxRow(vector<vector<int>> mat, int N) {\n        int row = 0, i = 0, j = N - 1;\n        //iterating through each row of the matrix.\n        for (; i < N; i++) {\n            //searching for the last occurrence of 1 in each row.\n            while (mat[i][j] == 1 && j >= 0) {\n                //updating the row index and column index.\n                row = i;\n                j--;\n            }\n        }\n        //returning the row index and the number of 1s in that row.\n        return {row, N - 1 - j}; \n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public int[] findMaxRow(int mat[][], int N) {\r\n        int row = 0, i = 0, j = N - 1;\r\n        for (; i < N; i++) {\r\n            while (j >= 0 && mat[i][j] == 1) {\r\n                row = i;\r\n                j--;\r\n            }\r\n        }\r\n        return new int[]{row, N - 1 - j}; \r\n    }\r\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n    def findMaxRow(self, mat, N):\r\n        # initializing the variables\r\n        j = n-1\r\n        ind = 0\r\n        \r\n        # iterating over the matrix rows\r\n        for i in range(N):\r\n            # searching for the last occurrence of 1 in the row\r\n            while j >= 0 and mat[i][j] == 1:\r\n                j -= 1\r\n                ind = i\r\n                \r\n        # returning the row index and the number of zeros after the last 1\r\n        return [ind, n - j - 1]",
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}