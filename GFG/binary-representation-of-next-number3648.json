{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703574,
            "title": "Binary representation of next number",
            "titleSlug": "binary-representation-of-next-number3648",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary representation in the form of a string(<strong>s</strong>) of a number n, the task is to find a binary representation of n+1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note</strong>: Output binary string should not contain leading <strong>zeros</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = \"10\"\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> \"10\" is the binary representation of 2 and binary representation of 3 is \"11\"</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = \"111\"\n<strong>Output:</strong> 1000\n<strong>Explanation:</strong> \"111\" is the binary representation of 7 and binary representation of 8 is \"1000\"</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task: &nbsp;</strong><br />You don't need to read input or print anything. Complete the function <strong>binaryNextNumber()</strong>which takes <strong>s</strong> as input parameter and returns the string.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n)<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(n) to store resultant string &nbsp;</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary representation of a number *n* as a string *s*, find the binary representation of *n+1*.  The output binary string should not contain leading zeros.",
                "constraints": [
                    "1 <= n <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "10",
                        "output": "11",
                        "explanation": "The binary representation '10' represents the decimal number 2.  Adding 1 results in 3, which has the binary representation '11'."
                    },
                    {
                        "input": "111",
                        "output": "1000",
                        "explanation": "The binary representation '111' represents the decimal number 7. Adding 1 results in 8, which has the binary representation '1000'."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Try to find the first zero from right to left.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    string binaryNextNumber(string s) {\n\n        int i, l = s.size();\n\n        string ans = \"\";\n        for (i = l - 1; i >= 0; i--) {\n            if (s[i] == '1')\n                s[i] = '0';\n            else {\n                s[i] = '1';\n                break;\n            }\n        }\n        if (i < 0) {\n            ans += '1';\n            i = 0;\n        } else {\n            i = 0;\n            while (s[i] == '0')\n                i++;\n        }\n        ans += s.substr(i, l);\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    String binaryNextNumber(String s) {\n        int l = s.length();\n        StringBuilder ans = new StringBuilder();\n\n        char[] charArray = s.toCharArray();\n        int i;\n        for (i = l - 1; i >= 0; i--) {\n            if (charArray[i] == '1')\n                charArray[i] = '0';\n            else {\n                charArray[i] = '1';\n                break;\n            }\n        }\n\n        if (i < 0) {\n            ans.append('1');\n            i = 0;\n        } else {\n            i = 0;\n            while (i < l && charArray[i] == '0') i++;\n        }\n\n        ans.append(new String(charArray, i, l - i));\n\n        return ans.toString();\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#User function Template for python3\nclass Solution:\n\n    def binaryNextNumber(self, s):\n        ans = \"\"\n        for ch in s[::-1]:\n            if ch == '1':\n                ans = '0' + ans\n            else:\n                ans = '1' + ans\n                break\n        ans = s[:len(s) - len(ans)] + ans\n        if ans == '0' * len(s):\n            ans = '1' + ans\n        else:\n            while ans[0] == '0':\n                ans = ans[1:]\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": null,
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}