{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703575,
            "title": "Binary representation of previous number",
            "titleSlug": "binary-representation-of-previous-number0638",
            "content": "<p><span style=\"font-size:18px\">Given a binary representation in the form of string(S) of a number n, the task is to find a binary representation of n-1.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Note:</strong> n is greater than zero. </span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> S = &quot;11&quot;\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> &quot;11&quot; is the binary \nrepresentation of 3 and binary \nrepresentation of 2 is &quot;10&quot;</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong> S = &quot;1000&quot;\n<strong>Output:</strong> 111\n<strong>Explanation:</strong> &quot;1000&quot; is the binary \nrepresentation of 8 and binary \nrepresentation of 7 is &quot;111&quot;</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Complete the function <strong>binaryPreviousNumber()</strong> which takes S as input parameter and returns the string.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>O(N)<br />\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(N) to store resultant string &nbsp;</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 10<sup>4</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p>FInd first one from right to left</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution\n{\n    public:\n    //Function to find the binary number that comes before the given number.\n    string binaryPreviousNumber(string S)\n    {\n    \tint i = 0, l = S.length();\n    \t\n    \t//finding the index of the first '1' character in the given number.\n    \twhile(S[i] == '0')\n    \t\ti++;\n    \t\n    \n    \t//extracting the substring starting from the index of the first '1' character \n    \t//to the end of the given number.\n    \tstring num = binaryPreviousNumberUtil(S.substr(i, l-i));\n    \n    \t//if the extracted substring is \"0\", then return \"0\".\n    \tif(num == \"0\")\n    \t\treturn \"0\";\n    \n    \ti = 0, l = num.length();\n    \t\n    \t//finding the index of the first '1' character in the extracted substring.\n    \twhile(num[i] == '0')\n    \t\ti++;\n    \t\n    \t//returning the substring starting from the index of the first '1' character\n    \t//to the end of the extracted substring.\n    \treturn num.substr(i, l);\n    }\n    \n    //Utility function to find the binary number that comes before the given number.\n    string binaryPreviousNumberUtil(string num)\n    {\n    \tint n = num.size();\n    \t\n    \t//if the given number is \"1\", then return \"0\".\n    \tif (num == \"1\")\n    \t\treturn \"0\";\n    \n    \tint i;\n    \t\n    \t//iterating from the end of the number to find the first '1' character.\n    \tfor (i = n - 1; i >= 0; i--) {\n    \t\tif (num.at(i) == '1') {\n    \t\t\t//changing the '1' to '0' at the index where '1' is found.\n    \t\t\tnum.at(i) = '0';\n    \t\t\tbreak;\n    \t\t}\n    \t\telse\n    \t\t\t//changing the '0' to '1' at the index where '0' is found.\n    \t\t\tnum.at(i) = '1';\n    \t}\n    \t\n    \t//if the first '1' is found at index 0, then returning the substring \n    \t//starting from index 1 to the end of the number.\n    \tif (i == 0)\n    \t\treturn num.substr(1, n - 1);\n    \t\n    \treturn num;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}