{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700238,
            "title": "Binary Search",
            "titleSlug": "binary-search-1587115620",
            "content": "<p><span >Given a sorted array <strong>arr</strong> and an integer <strong>k</strong>, find the position(0-based indexing) at which k is present in the array using binary search.</span></p>\n<p><span >Note: If multiple occurrences are there, please return the smallest index.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 2, 3, 4, 5], k = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 4 appears at index 3.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [11, 22, 33, 44, 55], k = 445\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> 445 is not present.<br /></span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 1, 1, 1, 2], k = 1\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> 1 appears at index 0.</span></pre>\n<p><span ><em>Note: Try to solve this problem in constant space i.e O(1)</em></span></p>\n<p><span ><strong>Constraints:<br /></strong>1 &lt;= arr.size() &lt;= 10<sup>5<br /></sup>1 &lt;= arr[i] &lt;= 10<sup>6<br /></sup>1 &lt;= k &lt;= 10<sup>6</sup></span></p>\n<div id=\"highlighter--hover-tools\" style=\"display: none;\">\n<div id=\"highlighter--hover-tools--container\">\n<div class=\"highlighter--icon highlighter--icon-copy\" title=\"Copy\">&nbsp;</div>\n<div class=\"highlighter--icon highlighter--icon-change-color\" title=\"Change Color\">&nbsp;</div>\n<div class=\"highlighter--icon highlighter--icon-delete\" title=\"Delete\">&nbsp;</div>\n</div>\n</div>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #273239; font-family: Nunito, sans-serif; font-size: 18px; letter-spacing: 0.162px; background-color: #ffffff;\">The idea of binary search is to use the information that the array is sorted and reduce the time complexity to O(logn).</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "infosys",
            "oracle",
            "wipro",
            "linkedin",
            "qualcomm",
            "tcs",
            "cognizant",
            "accenture"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\nclass Solution {\n  public:\n    int binarysearch(vector<int>& arr, int k) {\n        int left = 0, right = arr.size() - 1;\n        int result = -1; // Store the index of the first occurrence\n\n        while (left <= right) {\n            int mid = left + (right - left) / 2; // Avoid overflow\n            if (arr[mid] == k) {\n                result = mid; // Update result and search in the left half\n                right = mid - 1;\n            } else if (arr[mid] < k) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n\n        return result; // -1 if not found\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public int binarysearch(int[] arr, int k) {\n        int left = 0, right = arr.length - 1;\n        int result = -1;\n\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n\n            if (arr[mid] == k) {\n                result = mid;\n                right = mid - 1; // Search in the left half for the first occurrence\n            } else if (arr[mid] < k) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return result;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function template for Python\n\n\nclass Solution:\n\n    def binarysearch(self, arr, k):\n        left, right = 0, len(arr) - 1\n        result = -1\n\n        while left <= right:\n            mid = left + (right - left) // 2\n\n            if arr[mid] == k:\n                result = mid\n                right = mid - 1  # Search in the left half for the first occurrence\n            elif arr[mid] < k:\n                left = mid + 1\n            else:\n                right = mid - 1\n\n        return result\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function template for C++\nclass Solution {\n    binarysearch(arr, k) {\n        let left = 0, right = arr.length - 1;\n        let result = -1;\n\n        while (left <= right) {\n            let mid = Math.floor(left + (right - left) / 2);\n\n            if (arr[mid] === k) {\n                result = mid;\n                right = mid - 1; // Search in the left half for the first occurrence\n            } else if (arr[mid] < k) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return result;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}