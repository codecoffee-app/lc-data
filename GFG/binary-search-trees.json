{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712533,
            "title": "Binary Search Trees",
            "titleSlug": "binary-search-trees",
            "content": "<p><span style=\"font-size: 18px;\">Given an array&nbsp;of integers <strong>arr[]</strong> representing <strong>inorder traversal</strong> of elements of&nbsp;a binary tree. Return true if the given inorder traversal can be of a valid Binary Search Tree.</span></p>\n<p><span style=\"font-size: 18px;\">Note - In a valid Binary Search Tree all keys are unique.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [8, 14, 45, 64, 100]</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>True</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> arr[] = [5, 6, 1, 8, 7]</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> False<br /></span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)</span></p>\n<p><span ><strong>Expected Space Complexity:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span></p>\n<p><span style=\"font-size: 18px;\">1 &lt;= n &lt;= 10<sup>5</sup></span></p>\n<p><span style=\"font-size: 18px;\">1 &lt;= arr[i] &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array of integers `arr[]` representing an inorder traversal of elements of a binary tree, determine if the given inorder traversal can represent a valid Binary Search Tree (BST).  A valid BST has the property that all keys are unique and for every node, all keys in its left subtree are smaller and all keys in its right subtree are greater.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "[8, 14, 45, 64, 100]",
                        "output": "True",
                        "explanation": "The array represents a valid inorder traversal of a BST because the elements are sorted in ascending order, which is a fundamental property of inorder traversals of BSTs."
                    },
                    {
                        "input": "[5, 6, 1, 8, 7]",
                        "output": "False",
                        "explanation": "The array does not represent a valid inorder traversal of a BST because the elements are not sorted in ascending order. In a BST's inorder traversal, elements must be visited in ascending order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to check if the given array is a Binary Search Tree (BST) traversal\n    bool isBSTTraversal(vector<int>& arr) {\n        int n = arr.size();\n        // If the array is empty or has only one element, it is a valid BST traversal\n        if (n == 0 || n == 1)\n            return true;\n\n        // Checking if the array is in ascending order, as that is the condition for a\n        // valid BST traversal\n        for (int i = 1; i < n; i++)\n            if (arr[i - 1] >= arr[i])\n                return false;\n        return true;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static boolean isBSTTraversal(int arr[]) {\n        // code here\n\n        // Get the length of the array\n        int n = arr.length;\n\n        // Check if the elements are in increasing order\n        for (int i = 1; i < n; i++)\n            if (arr[i - 1] >= arr[i]) // If the previous element is greater than or\n                                      // equal to the current element, return false\n                return false;\n\n        // Return true if the elements are in increasing order\n        return true;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Function to check if the given array is in BST traversal order\n    def isBSTTraversal(self, arr):\n        # Iterate over each pair of consecutive numbers in the array\n        for va, vb in zip(arr, arr[1:]):\n            # If any pair is not in ascending order, return False\n            if va >= vb:\n                return False\n        # If all pairs are in ascending order, return True\n        return True\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}