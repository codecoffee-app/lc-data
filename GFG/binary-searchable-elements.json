{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706293,
            "title": "Binary Searchable elements",
            "titleSlug": "binary-searchable-elements",
            "content": "<p><span style=\"font-size:18px\">Binary search is a search algorithm usually used on a sorted sequence to quickly find an element with a given value. In this problem we will evaluate how binary search performs on data that isn&#39;t necessarily sorted. An element is said to be binary searchable if, regardless of how the pivot is chosen the algorithm returns true.<br />\nFor example:</span></p>\n\n<ul>\n\t<li><span style=\"font-size:18px\"><code>[2, 1, 3, 4, 6, 5]</code>&nbsp;and&nbsp;<code>target = 5</code>, we cannot find 5. Because when the pivot is 4, we get element 6, then right pointer will move left, so we&#39;ll lose the opportunity to find target 5.</span></li>\n\t<li><span style=\"font-size:18px\"><code>[2, 1, 3, 4, 5, 6]</code>&nbsp;and&nbsp;<code>target = 5</code>, we can find 5. Because wherever we choose the pivots, we&#39;ll find target at last.</span></li>\n</ul>\n\n<p><span style=\"font-size:18px\">Given an unsorted array of&nbsp;<code>n</code>&nbsp;distinct integers, return the number of elements that are binary searchable.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 3\narr[] = {1, 3, 2}\n<strong>Output: </strong>1\n<strong>Explanation: </strong></span><span style=\"font-size:18px\"><code>However we choose the \npivots, we will always find the \nnumber 1 when looking for it. \nThis does not hold for 3 and 2.</code></span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:\n</strong>N = 6\narr[] = {2, 1, 3, 5, 4, 6}\n<strong>Output: </strong>2\n<strong>Explanation: </strong></span><span style=\"font-size:18px\"><code>3 and 6 are the numbers \nguaranteed to be found in the same way.</code></span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>binarySearchable()</strong>&nbsp;which takes an integer n&nbsp;and an array Arr of size n&nbsp;as input and return the number of elements that are binary searchable.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(n)<br />\n<strong>Expected Auxiliary Space:</strong> O(n)</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &le; N &le; 10<sup>5</sup><br />\n1 &le; arr[i] &le; 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The numbers that are guaranteed to be found are the ones that have all elements smaller on it&#39;s left side, and larger elements on the right side.</span><br />\n&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution{\n    public:\n    \n    //Function to count number of elements which are both left maximum\n    //and right minimum elements in the array.\n    int binarySearchable(int Arr[], int n) {\n        int count = 0;\n\n        //array to store the maximum element to the left of current element.\n        int maxLeft[n];\n        maxLeft[0] = Arr[0];\n\n        //finding maximum element to the left of each element.\n        for (int i = 1; i < n; i++) {\n            maxLeft[i] = max(maxLeft[i - 1], Arr[i]);\n        }\n        \n        //variable to store the minimum element to the right of current element.\n        int minRight = INT_MAX;\n\n        //iterating from right to left to find minimum element to the right\n        //of each element and count the elements which satisfy the conditions.\n        for (int i = n - 1; i >= 0; i--) {\n            minRight = min(minRight, Arr[i]);\n\n            //if current element satisfies the conditions, increment count.\n            if (Arr[i] <= minRight && Arr[i] >= maxLeft[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end function Template for Java\r\n\r\nclass Solution {\r\n    static int binarySearchable(int[] Arr, int n) {\r\n        // Arrays to store the maximum element on the left and minimum element on the right of each index\r\n        int[] maxLeft = new int[n];\r\n        int[] minRight = new int[n];\r\n        \r\n        // Initializing the first element of both arrays\r\n        maxLeft[0] = Arr[0];\r\n        minRight[n-1] = Arr[n-1];\r\n        \r\n        // Calculating the maximum element on the left for each index\r\n        for(int i=1; i<n; i++)\r\n            maxLeft[i] = Math.max(maxLeft[i-1], Arr[i]);\r\n            \r\n        // Calculating the minimum element on the right for each index\r\n        for(int i=n-2; i>=0; i--)\r\n            minRight[i] = Math.min(minRight[i+1], Arr[i]); \r\n            \r\n        // Counting the number of elements that are binary searchable\r\n        int count = 0;\r\n        for(int i=0; i<n; i++)\r\n        {\r\n            // Checking if the element satisfies the condition for binary searchability\r\n            if (Arr[i] <= minRight[i] && Arr[i] >= maxLeft[i])\r\n                count++;\r\n        }\r\n        \r\n        // Returning the count of binary searchable elements\r\n        return count;\r\n    }\r\n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end function Template for python3\n\nclass Solution:\n    # Function to find the count of binary searchable elements in the array\n    def binarySearchable(self, Arr, n):\n\n        # Create arrays to store the maximum element on the left side\n        # and the minimum element on the right side of each element\n        maxLeft =[0] * n\n        minRight = [0] * n\n        \n        # Initialize the first element of both arrays\n        maxLeft[0] = Arr[0]\n        minRight[n-1] = Arr[n-1]\n        \n        # Calculate the maximum element on the left side of each element\n        for i in range(1,n):\n            maxLeft[i] = max(maxLeft[i-1], Arr[i])\n            \n        # Calculate the minimum element on the right side of each element\n        for i in range(n-2,-1,-1):\n            minRight[i] = min(minRight[i+1], Arr[i])\n            \n        # Count the number of elements for which the condition\n        # (Arr[i] <= minRight[i] and Arr[i] >= maxLeft[i]) is true\n        count = 0\n        for i in range(n):\n            if (Arr[i] <= minRight[i] and Arr[i] >= maxLeft[i]):\n                count += 1\n        \n        # Return the count of binary searchable elements\n        return count",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n  binarySearchable(Arr,n){\n    let count = 0;\n    let maxLeft = [Arr[0]];\n    for (let i = 1; i < n; i++) {\n        maxLeft[i] = Math.max(maxLeft[i - 1], Arr[i]);\n    }\n    let minRight = Infinity;\n    for (let i = n - 1; i >= 0; i--) {\n        minRight = Math.min(minRight, Arr[i]);\n        if (Arr[i] <= minRight && Arr[i] >= maxLeft[i]) {\n            count++;\n        }\n    }\n    return count;\n  }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}