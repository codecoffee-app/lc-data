{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712151,
            "title": "Binary subarray with sum",
            "titleSlug": "binary-subarray-with-sum",
            "content": "<p><span >Given a binary array <strong>arr[] </strong>and an integer <strong>target</strong>, return the number of non-empty subarrays with a sum equal to the target.<br /><strong>Note:</strong> A subarray is the contiguous part of the array.<br /></span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input: </strong>arr[] = [1, 0, 1, 0, 1], target = 2<br /><strong>Output:&nbsp;</strong>4<br /><strong>Explanation:&nbsp;</strong>There are four subarrays with sum equal to target: arr[0..2], arr[0..3], arr[1..4], arr[2..4].</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 1, 0, 1, 1], target = 5<br /><strong>Output: </strong>0<br /><strong>Explanation:&nbsp;</strong>There are no subarrays with sum target.</span></pre>\n<p><span ><strong>Expected Time Complexity: </strong>O(n).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; target &le; arr.size()<br /></span><span >0 &le; arr[i] &le; 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary array `arr[]` and an integer `target`, find the number of non-empty subarrays with a sum equal to `target`. A subarray is a contiguous portion of the array.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= target <= arr.size()",
                    "0 <= arr[i] <= 1"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 0, 1, 0, 1], target = 2",
                        "output": "4",
                        "explanation": "The subarrays with sum equal to 2 are: [1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], and [1, 0, 1]."
                    },
                    {
                        "input": "arr[] = [1, 1, 0, 1, 1], target = 5",
                        "output": "0",
                        "explanation": "There are no subarrays with a sum equal to 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Try finding the number of subarrays with the atmost <strong>target</strong> sum and <strong>target - 1</strong> sum then subtract to get the number of subarrays with exact target.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to find the number of subarrays with at most S elements.\n    int atMost(vector<int>& arr, int sum) {\n        // if S is negative, return 0 as the number of elements cannot be negative.\n        if (sum < 0)\n            return 0;\n        int res = 0, i = 0, n = arr.size();\n        // iterating over the array.\n        for (int j = 0; j < n; j++) {\n            // subtracting current element from S.\n            sum -= arr[j];\n            // if S becomes negative, then increment i until S becomes non-negative.\n            while (sum < 0)\n                sum += arr[i++];\n            // counting the number of subarrays with at most S elements.\n            res += j - i + 1;\n        }\n        // returning the count of subarrays.\n        return res;\n    }\n\n    // Function to find the number of subarrays with exactly N elements.\n    int numberOfSubarrays(vector<int>& arr, int target) {\n        // finding the number of subarrays with at most target elements,\n        // and subtracting it from the number of subarrays with at most target-1\n        // elements to get the number of subarrays with exactly N elements.\n        return atMost(arr, target) - atMost(arr, target - 1);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the number of subarrays with at most sum elements.\n    public int atMost(int[] arr, int sum) {\n        // if sum is negative, return 0 as the number of elements cannot be negative.\n        if (sum < 0) return 0;\n        int res = 0, i = 0, n = arr.length;\n        // iterating over the array.\n        for (int j = 0; j < n; j++) {\n            // subtracting current element from sum.\n            sum -= arr[j];\n            // if sum becomes negative, then increment i until sum becomes non-negative.\n            while (sum < 0) sum += arr[i++];\n            // counting the number of subarrays with at most sum elements.\n            res += j - i + 1;\n        }\n        // returning the count of subarrays.\n        return res;\n    }\n\n    // Function to find the number of subarrays with exactly target elements.\n    public int numberOfSubarrays(int[] arr, int target) {\n        // finding the number of subarrays with at most target elements,\n        // and subtracting it from the number of subarrays with at most target-1\n        // elements to get the number of subarrays with exactly target elements.\n        return atMost(arr, target) - atMost(arr, target - 1);\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def atMost(self, arr, sum):\n        # If sum is negative, return 0 as the number of elements cannot be negative.\n        if sum < 0:\n            return 0\n        res = 0\n        i = 0\n        n = len(arr)\n        # Iterating over the array.\n        for j in range(n):\n            # Subtracting current element from sum.\n            sum -= arr[j]\n            # If sum becomes negative, then increment i until sum becomes non-negative.\n            while sum < 0:\n                sum += arr[i]\n                i += 1\n            # Counting the number of subarrays with at most 'sum' elements.\n            res += j - i + 1\n        # Returning the count of subarrays.\n        return res\n\n    def numberOfSubarrays(self, arr, target):\n        # Finding the number of subarrays with at most 'target' elements,\n        # and subtracting it from the number of subarrays with at most 'target-1' elements\n        # to get the number of subarrays with exactly 'target' elements.\n        return self.atMost(arr, target) - self.atMost(arr, target - 1)\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to find the number of subarrays with at most `sum` elements.\n    atMost(arr, sum) {\n        // if sum is negative, return 0 as the number of elements cannot be negative.\n        if (sum < 0) return 0;\n        let res = 0, i = 0, n = arr.length;\n        // iterating over the array.\n        for (let j = 0; j < n; j++) {\n            // subtracting current element from sum.\n            sum -= arr[j];\n            // if sum becomes negative, then increment i until sum becomes non-negative.\n            while (sum < 0) sum += arr[i++];\n            // counting the number of subarrays with at most sum elements.\n            res += j - i + 1;\n        }\n        // returning the count of subarrays.\n        return res;\n    }\n\n    // Function to find the number of subarrays with exactly `target` elements.\n    numberOfSubarrays(arr, target) {\n        // finding the number of subarrays with at most `target` elements,\n        // and subtracting it from the number of subarrays with at most `target-1`\n        // elements to get the number of subarrays with exactly `target` elements.\n        return this.atMost(arr, target) - this.atMost(arr, target - 1);\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}