{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705614,
            "title": "Binary Tree K level sum",
            "titleSlug": "binary-tree-k-level-sum3857",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree <strong>s </strong>and a number <strong>k</strong>, the task is to find the sum of tree nodes at level <strong>k</strong>. The Binary Tree is given in string form <strong>s</strong>: (node-value(left-subtree)(right-subtree)).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> <span >s</span></span><span style=\"font-size: 18px;\"><strong> = </strong>\"</span><span style=\"font-size: 18px;\">(0(5(6()())(4()(9()())))(7(1()())(3()())))\" , k = 2</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">14</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">The Tree from the above String will be formed as:\n\\t\\t\\t\\t     0\n\\t\\t\\t\\t   /   \\\n\\t\\t\\t\\t  5\\t7\n\\t\\t\\t\\t/  \\    /  \\\n\\t\\t\\t     6    4  1    3\n\\t\\t\\t\\t     \\\n\\t\\t\\t\\t\\t9 </span> \n<span style=\"font-size: 18px;\">Sum of nodes at the 2nd level is 6+4+1+3 = 14.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input:</strong> </span><span style=\"font-size: 18px;\">s = \"(4(8()9())\" , k = 1</span>\n<span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">17</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">The Tree from the above String will be formed as:\n\\t\\t\\t\\t     4\n\\t\\t\\t\\t   /   \\\n\\t\\t\\t\\t  8     9</span>\n<span style=\"font-size: 18px;\">Sum of nodes at the 1st level is 8+9 = 17.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> </span><span style=\"font-size: 18px;\">s = \"(2)\" , k = 0</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 2</span> <br /><span style=\"font-size: 18px;\"><strong>Explanation:</strong></span>\n<span style=\"font-size: 18px;\">The Tree from the above String will be formed as: 2\\t\\t\\t\\t\\t\\t\\t\\t    </span>\n<span style=\"font-size: 18px;\">Sum of nodes at the 0th level is 2.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= |s| &lt;= 10<sup>5</sup></span><br /><span style=\"font-size: 18px;\">0 &lt;= k &lt;= </span><span style=\"font-size: 18px;\">15</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree represented as a string `s` and an integer `k`, find the sum of all node values at level `k` in the tree. The binary tree string `s` is formatted as: `(node-value(left-subtree)(right-subtree))`. Empty subtrees are represented by `()`. The root node is at level 0.",
                "constraints": [
                    "1 <= |s| <= 10^5",
                    "0 <= k <= 15"
                ],
                "testcases": [
                    {
                        "input": "(0(5(6()())(4()(9()())))(7(1()())(3()()))) , k = 2",
                        "output": "14",
                        "explanation": "The tree can be visualized as:\n\t\t\t\t     0\n\t\t\t\t   /   \\\n\t\t\t\t  5\t7\n\t\t\t\t/  \\    /  \\\n\t\t\t     6    4  1    3\n\t\t\t\t     \\\n\t\t\t\t\t9 \nThe nodes at level 2 are 6, 4, 1, and 3. Their sum is 6 + 4 + 1 + 3 = 14."
                    },
                    {
                        "input": "(4(8()9()) , k = 1",
                        "output": "17",
                        "explanation": "The tree can be visualized as:\n\t\t\t\t     4\n\t\t\t\t   /   \\\n\t\t\t\t  8     9\nThe nodes at level 1 are 8 and 9. Their sum is 8 + 9 = 17."
                    },
                    {
                        "input": "(2) , k = 0",
                        "output": "2",
                        "explanation": "The tree consists of a single node with value 2.  Since k = 0, we are looking for the sum of nodes at the root level, which is just 2."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Iterates through the string representation of a binary tree, adjusting a level counter whenever encountering parentheses, and sums up the node values at the specified level k.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "samsung"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the sum of all numbers at level K.\n    int kLevelSum(string s, int k) {\n\n        int n = -1;\n        int ans = 0;\n        // iterating over the string\n        for (int i = 0; i < s.length();) {\n            // if current level is K and current character is not '(' or ')'\n            if (n == k && s[i] != ')' && s[i] != '(') {\n                string h = \"\";\n                // extracting the number and adding it to the answer\n                while ((s[i] != '(') && (s[i] != ')')) {\n                    h += s[i];\n                    i++;\n                }\n                ans += stoi(h);\n            }\n            // if current character is '(', incrementing the level\n            if (s[i] == '(') {\n                n++;\n                i++;\n\n            }\n            // if current character is ')', decrementing the level\n            else if (s[i] == ')') {\n                n--;\n                i++;\n            }\n            // if current character is neither '(' nor ')', moving to next character\n            else\n                i++;\n        }\n        // returning the sum of numbers at level K\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n\nclass Solution {\n    static int kLevelSum(String s, int k) {\n        char S[] = s.toCharArray();    // convert string to char array\n        int n = -1;                    // initialize n to -1\n        int ans = 0;                   // initialize ans to 0\n        for (int i = 0; i < S.length;) // iterate over the char array\n        {\n            if (n == k && S[i] != ')' &&\n                S[i] !=\n                    '(') // check if n is equal to K and current char is not '(' or ')'\n            {\n                String h = \"\"; // initialize an empty string h\n                while ((S[i] != '(') &&\n                       (S[i] != ')')) // iterate until char is not '(' or ')'\n                {\n                    h += S[i]; // append current char to h\n                    i++;       // increment i\n                }\n                ans += Integer.parseInt(h); // convert h to integer and add it to ans\n            }\n            if (S[i] == '(') // check if current char is '('\n            {\n                n++; // increment n\n                i++; // increment i\n\n            } else if (S[i] == ')') // check if current char is ')'\n            {\n                n--; // decrement n\n                i++; // increment i\n            } else\n                i++; // increment i\n        }\n        return ans; // return the final answer\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def kLevelSum(self, s: str, k: int) -> int:\n        n = -1\n        ans = 0\n        i = 0\n        while i < len(s):\n            # If current level is K and the character is not '(' or ')'\n            if n == k and s[i] not in '()':\n                h = ''\n                # Extract the number and add it to the answer\n                while i < len(s) and s[i] not in '()':\n                    h += s[i]\n                    i += 1\n                ans += int(h)\n            # If current character is '(', incrementing the level\n            if s[i] == '(':\n                n += 1\n                i += 1\n            # If current character is ')', decrementing the level\n            elif s[i] == ')':\n                n -= 1\n                i += 1\n            # If current character is neither '(' nor ')', move to next character\n            else:\n                i += 1\n\n        # Return the sum of numbers at level K\n        return ans\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find the sum of all numbers at level K\n    kLevelSum(s, k) {\n        let n = -1;  // Initialize level counter\n        let ans = 0; // Initialize the answer for sum\n        let i = 0;\n\n        // Iterating over the string\n        while (i < s.length) {\n            // If current level is K and current character is not '(' or ')'\n            if (n === k && s[i] !== '(' && s[i] !== ')') {\n                let h = ''; // Extract the number as a string\n\n                // Extract the number and move through the string\n                while (i < s.length && s[i] !== '(' && s[i] !== ')') {\n                    h += s[i];\n                    i++;\n                }\n\n                // Add the parsed number to the sum\n                ans += parseInt(h, 10);\n            }\n\n            // If current character is '(', increment the level\n            if (s[i] === '(') {\n                n++;\n                i++;\n            }\n            // If current character is ')', decrement the level\n            else if (s[i] === ')') {\n                n--;\n                i++;\n            }\n            // If current character is neither '(' nor ')', move to next character\n            else {\n                i++;\n            }\n        }\n\n        // Return the sum of numbers at level K\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}