{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712710,
            "title": "Binary Tree Representation",
            "titleSlug": "binary-tree-representation",
            "content": "<p dir=\"ltr\"><span style=\"font-size:18px\">You are given an array nodes. It contains 7 integers, which represents the value of nodes of the binary tree in level order traversal. You are also given a root of the tree which has a value equal to nodes[0].</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">Your task to construct a binary tree by creating nodes for the remaining 6 nodes.</span></p>\r\n\r\n<p dir=\"ltr\"><strong><span style=\"font-size:18px\">Example:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> </span>\r\n<span style=\"font-size:18px\">nodes = [1 2 3 4 5 6 7]</span>\r\n<span style=\"font-size:18px\"><strong>Output:</strong> </span>\r\n<span style=\"font-size:18px\">\\t   1\r\n&nbsp;\\t/   \\\r\n</span><span style=\"font-size:18px\">     2\\t 3\r\n</span>   /  \\     /  \\\r\n<span style=\"font-size:18px\">   4  5    6   7</span>\r\n<strong><span style=\"font-size:18px\">Explanation: </span></strong>\r\n<span style=\"font-size:18px\">The 7 node binary tree is represented above.</span></pre>\r\n\r\n<p dir=\"ltr\"><strong><span style=\"font-size:18px\">Your Task:</span></strong></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">Complete the function v<strong>oid create_tree(node* root0, vector &amp;vec)</strong>, which takes a root of a Binary tree and vector array vec containing the values of nodes.</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1).</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\"><strong>Expected Auxiliary Space:</strong> O(1).</span></p>\r\n\r\n<p dir=\"ltr\"><strong><span style=\"font-size:18px\">Constraints:</span></strong></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">vec.length = 7</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">1&lt;=vec[i]&lt;=100</span></p>\r\n\r\n<p dir=\"ltr\"><span style=\"font-size:18px\">&nbsp;</span></p>\r\n\r\n<p><br />\r\n&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `nodes` of 7 integers representing the values of nodes in a binary tree in level-order traversal, construct the binary tree. The first element of `nodes` is the value of the root node, which is already created for you.  Create the remaining 6 nodes and link them correctly based on level-order traversal.",
                "constraints": [
                    "vec.length = 7",
                    "1 <= vec[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "[1, 2, 3, 4, 5, 6, 7]",
                        "output": "A binary tree with root 1, left child 2, right child 3, 2's left child 4, 2's right child 5, 3's left child 6, 3's right child 7.",
                        "explanation": "The level-order traversal of the constructed tree should match the input array: 1, 2, 3, 4, 5, 6, 7. The root is 1. The left child of 1 is 2 and the right child of 1 is 3. The left child of 2 is 4 and the right child of 2 is 5. The left child of 3 is 6 and the right child of 3 is 7."
                    },
                    {
                        "input": "[10, 20, 30, 40, 50, 60, 70]",
                        "output": "A binary tree with root 10, left child 20, right child 30, 20's left child 40, 20's right child 50, 30's left child 60, 30's right child 70.",
                        "explanation": "The level-order traversal of the constructed tree should match the input array: 10, 20, 30, 40, 50, 60, 70. The root is 10. The left child of 10 is 20 and the right child of 10 is 30. The left child of 20 is 40 and the right child of 20 is 50. The left child of 30 is 60 and the right child of 30 is 70."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution{\npublic:\n\n    //Function to create a binary tree using given vector elements.\n    void create_tree(node* root0, vector<int> &vec){\n        //Assigning the root's left and right child nodes.\n        root0->left = newNode(vec[1]);\n        root0->right = newNode(vec[2]);\n        //Assigning the left child nodes of the root's left and right child.\n        root0->left->left = newNode(vec[3]);\n        root0->left->right = newNode(vec[4]);\n        //Assigning the right child nodes of the root's left and right child.\n        root0->right->left = newNode(vec[5]);\n        root0->right->right = newNode(vec[6]);\n    }\n\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Create a function to create a tree given a root node and an ArrayList of integers\nclass Solution{\n    public static void createTree(Node root0, ArrayList<Integer> v){\n        //Create the left child of the root node and assign it the value at index 1 of the ArrayList\n        root0.left = new Node(v.get(1));\n        //Create the right child of the root node and assign it the value at index 2 of the ArrayList\n        root0.right = new Node(v.get(2));\n        //Create the left child of the left child of the root node and assign it the value at index 3 of the ArrayList\n        root0.left.left = new Node(v.get(3));\n        //Create the right child of the left child of the root node and assign it the value at index 4 of the ArrayList\n        root0.left.right = new Node(v.get(4));\n        //Create the left child of the right child of the root node and assign it the value at index 5 of the ArrayList\n        root0.right.left = new Node(v.get(5));\n        //Create the right child of the right child of the root node and assign it the value at index 6 of the ArrayList\n        root0.right.right = new Node(v.get(6));\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    # Function to create a binary tree with the given array elements.\r\n    def createTree(self, root, l):\r\n        # Assigning the second element of the array as the left child of the root.\r\n        root.left=Node(arr[1])\r\n        # Assigning the third element of the array as the right child of the root.\r\n        root.right=Node(arr[2])\r\n        # Assigning the fourth element of the array as the left child of the left child of the root.\r\n        root.left.left=Node(arr[3])\r\n        # Assigning the fifth element of the array as the right child of the left child of the root.\r\n        root.left.right=Node(arr[4])\r\n        # Assigning the sixth element of the array as the left child of the right child of the root.\r\n        root.right.left=Node(arr[5])\r\n        # Assigning the seventh element of the array as the right child of the right child of the root.\r\n        root.right.right=Node(arr[6])",
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}