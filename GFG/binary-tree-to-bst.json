{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700263,
            "title": "Binary Tree to BST",
            "titleSlug": "binary-tree-to-bst",
            "content": "<p><span style=\"font-size: 18px;\">Given a Binary Tree, convert it to Binary Search Tree in such a way <strong>that keeps the original structure of Binary Tree intact</strong>.</span><br />&nbsp;<span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n&nbsp;     </strong>1\n&nbsp;   /   \\\n<strong>   </strong>2     3<strong>\nOutput: <br /></strong>1 2 3<br /><strong>Explanation:</strong><br />The converted BST will be <br />\\t2<br />    /   \\<br />   1     3</span></pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>    </span>   <span style=\"font-size: 18px;\">   1\n\\t /    \\\n     2\\t 3\n   /\\t  \n 4\\t </span><span style=\"font-size: 18px;\"><strong>\nOutput: <br /></strong>1 2 3 4<strong>\nExplanation:\n</strong>The converted BST will be</span>\n\n<span style=\"font-size: 18px;\">\\t  3\n\\t/   \\\n    2     4\n  /\n 1</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>binaryTreeToBST()</strong>&nbsp;which takes the root of the Binary tree as input and returns the root of the BST. The driver code will print<strong> inorder</strong> traversal of the converted BST.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(NLogN).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(N).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= Number of nodes &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Tree, convert it into a Binary Search Tree (BST) while preserving the original structure of the Binary Tree.",
                "constraints": [
                    "1 <= Number of nodes <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "    1\n   /   \\\n  2     3",
                        "output": "1 2 3",
                        "explanation": "The converted BST will have 2 as the root, 1 as the left child, and 3 as the right child, maintaining the original structure as much as possible after conversion to satisfy BST properties."
                    },
                    {
                        "input": "       1\n\t /    \\\n     2\t 3\n   /\\t  \n 4\t ",
                        "output": "1 2 3 4",
                        "explanation": "The converted BST will have 3 as the root, 2 as the left child, 4 as right child and 1 as the left child of 2, maintaining the original structure as much as possible after conversion to satisfy BST properties."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The inorder traversal of a BST generates the node values in a sorted order. Can you use this fact to get to the result?</p>",
            "<p>How about storing the node values of the given binary tree into an array and then sorting the values?<br />\nThis will basically give us the inorder traversal of the required BST. Can you generate the BST from its inorder traversal?</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "adobe"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function template for C++\n\nclass Solution{\n  public:\n    \n    // Function to get the inorder traversal of the binary tree and store it in arr[]\n    void getArr(int arr[], int *index, Node *root)\n    {\n        if(root == NULL)\n            return ;\n        \n        // recursively traverse the left subtree\n        getArr(arr, index, root->left);\n        \n        // store the data of current node in arr[] and increment the index\n        arr[*index] = root->data;\n        *index += 1;\n        \n        // recursively traverse the right subtree\n        getArr(arr, index, root->right);\n    }\n    \n    \n    // Function to convert the binary tree to BST\n    void convert(Node *root, int arr[], int *index)\n    {\n        if(root == NULL)\n            return ;\n    \n        // recursively convert the left subtree\n        convert(root->left, arr, index);\n        \n        // replace the data of current node with the corresponding arr[] element and increment the index\n        root->data = arr[*index];\n        *index += 1;\n        \n        // recursively convert the right subtree\n        convert(root->right, arr, index);\n    }\n    \n    // Function to get the total number of nodes in the binary tree\n    int totalNodes(Node* root)\n    {\n        // if the root is NULL, return 0\n        if(root == NULL)\n            return 0;\n        \n        // recursively calculate the total number of nodes in the left subtree and right subtree, and add 1 for the current root node\n        return (1 + totalNodes(root->left) + totalNodes(root->right));\n    }\n    \n    // Function to convert the binary tree to a binary search tree (BST)\n    Node* binaryTreeToBST (Node *root)\n    {\n        if(root == NULL)\n            return NULL ;\n        \n        // get the total number of nodes in the binary tree\n        int n = totalNodes(root);\n        \n        // create an array of size n+1 to store the inorder traversal of the binary tree\n        int *arr = new int[n + 1];\n        \n        int index = 0;\n        \n        // get the inorder traversal of the binary tree and store it in arr[]\n        getArr(arr, &index, root);\n        \n        // sort the arr[] in ascending order\n        sort(arr, arr + index);\n        \n        index = 0;\n        \n        // convert the binary tree to a BST by replacing the data of each node with the corresponding arr[] element\n        convert(root, arr, &index);\n        \n        // return the modified BST\n        return root;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass index\n{\n    int x = 0;\n}\nclass Solution\n{\n    // Function to convert an array to a binary search tree\n    void arrayToBST(int arr[], Node root, index index_ptr)\n    {\n        // Base case: return if root is null\n        if(root == null)\n            return ;\n        \n        // Recursively convert left subtree\n        arrayToBST(arr, root.left, index_ptr);\n        \n        // Assign value from array to current root node\n        root.data = arr[index_ptr.x];\n        \n        // Increment index pointer\n        index_ptr.x++;\n        \n        // Recursively convert right subtree\n        arrayToBST(arr, root.right, index_ptr);\n    }\n    \n    // Function to store inorder traversal of a tree in an array\n    void storeInorder(Node node, int inorder[], index index_ptr)\n    {\n        // Base case: return if node is null\n        if(node == null)\n            return ;\n        \n        // Recursively store inorder traversal of left subtree\n        storeInorder(node.left, inorder, index_ptr);\n        \n        // Store data of current node in inorder array\n        inorder[index_ptr.x] = node.data;\n        \n        // Increment index pointer\n        index_ptr.x++;\n        \n        // Recursively store inorder traversal of right subtree\n        storeInorder(node.right, inorder, index_ptr);\n    }\n    \n    // Function to count the number of nodes in a tree\n    int countNodes(Node root)\n    {\n        // Base case: return 0 if root is null\n        if(root == null)\n            return 0;\n        \n        // Recursively count nodes in left and right subtrees and add 1 for the root node\n        return countNodes(root.left) + countNodes(root.right) + 1;\n    }\n    \n    // Function to convert a binary tree to a binary search tree\n    Node binaryTreeToBST (Node root)\n    {\n        // Base case: return null if root is null\n        if(root == null)\n            return null;\n        \n        // Count the number of nodes in the tree\n        int n = countNodes(root);\n        \n        // Create an array to store the inorder traversal of the tree\n        int arr[] = new int[n];\n        \n        // Create an index pointer object\n        index index = new index();\n        \n        // Store the inorder traversal of the tree in the array\n        storeInorder(root, arr, index);\n        \n        // Sort the array in ascending order\n        Arrays.sort(arr);\n        \n        // Reset the index pointer to 0\n        index.x = 0;\n        \n        // Convert the sorted array back into a binary search tree\n        arrayToBST(arr, root, index);\n        \n        // Return the root of the converted binary search tree\n        return root;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    def binaryTreeToBST(self, root): \n        # Base Case: Tree is empty \n        if root is None: \n            return\n        \n        # Create the temp array and store the inorder traveral  \n        # of tree  \n        arr = [] \n        self.storeInorder(root, arr) \n        \n        # Sort the array \n        arr.sort() \n        \n        # copy array elements back to binary tree \n        self.arrayToBST(arr, root) \n    \n    def storeInorder(self, root, inorder): \n        # Base Case \n        if root is None: \n            return \n        \n        # First store the left subtree \n        self.storeInorder(root.left, inorder) \n        \n        # Copy the root's data \n        inorder.append(root.data) \n        \n        # Finally store the right subtree \n        self.storeInorder(root.right, inorder) \n    \n    def arrayToBST(self, arr, root): \n        # Base Case \n        if root is None: \n            return \n        \n        # First update the left subtree \n        self.arrayToBST(arr, root.left) \n        \n        # now update root's data delete the value from array \n        root.data = arr[0] \n        arr.pop(0) \n        \n        # Finally update the right subtree \n        self.arrayToBST(arr, root.right) ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n  \tbinaryTreeToBST(root){\n  \t\t// Create an array to store the inorder traversal of the binary tree\n  \t\tlet arr = [];\n  \t\t\n  \t\t// Helper function to perform inorder traversal and store the values in the array\n  \t\tfunction inorderTraversal(node) {\n  \t\t\tif (node !== null) {\n  \t\t\t\tinorderTraversal(node.left);\n  \t\t\t\tarr.push(node.data);\n  \t\t\t\tinorderTraversal(node.right);\n  \t\t\t}\n  \t\t}\n  \t\t\n  \t\t// Perform inorder traversal on the binary tree and store the values in the array\n  \t\tinorderTraversal(root);\n  \t\t\n  \t\t// Sort the array in ascending order\n  \t\tarr.sort((a, b) => a - b);\n  \t\t\n  \t\t// Helper function to convert the binary tree to a BST using the sorted array\n  \t\tfunction convertToBST(node) {\n  \t\t\tif (node !== null) {\n  \t\t\t\tconvertToBST(node.left);\n  \t\t\t\tnode.data = arr.shift();\n  \t\t\t\tconvertToBST(node.right);\n  \t\t\t}\n  \t\t}\n  \t\t\n  \t\t// Convert the binary tree to a BST using the sorted array\n  \t\tconvertToBST(root);\n  \t\t\n  \t\t// Return the root of the BST\n  \t\treturn root;\n  \t}\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}