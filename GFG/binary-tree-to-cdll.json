{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 700548,
      "title": "Binary Tree to CDLL",
      "titleSlug": "binary-tree-to-cdll",
      "content": "<p><span style=\"font-size: 12pt;\">Given a binary tree (BT), the task is to convert this to a Circular Doubly Linked List (CDLL) in-place. The<strong> </strong>left and right pointers<strong> </strong>in nodes will be used as previous and next pointers<strong> </strong>respectively in CDLL. The order of nodes in CDLL<strong> </strong>must be the same as <strong>Inorder </strong>of the given <strong>Binary Tree</strong>. The first node of <strong>Inorder traversal </strong>(leftmost node in<strong> </strong>BT) must be the<strong> </strong>head node of the CDLL.</span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 12pt;\"><strong>Input:\n</strong>&nbsp; &nbsp; &nbsp; 1\n &nbsp; &nbsp;/&nbsp; &nbsp;\\\n &nbsp; 3&nbsp; &nbsp; &nbsp;2\n<strong>Output:\n</strong>3 1 2&nbsp;\n2 1 3<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700548/Web/Other/blobid0_1723058025.png\" width=\"360\" height=\"81\" /><strong>\nExplanation: </strong>After converting tree to CDLL when CDLL is is traversed from head to tail and then tail to head, elements are displayed as in the output.\n</span></pre>\n<pre><span style=\"font-size: 12pt;\"><strong>Input:\n</strong>&nbsp; &nbsp;&nbsp; 10\n &nbsp; /&nbsp; &nbsp; \\\n &nbsp;20&nbsp; &nbsp; 30\n /&nbsp; \\\n40 &nbsp;60\n<strong>Output:\n</strong>40 20 60 10 30&nbsp;\n30 10 60 20 40<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700548/Web/Other/blobid1_1723058039.png\" width=\"364\" height=\"82\" /><strong>\nExplanation: </strong>After converting tree to CDLL, when CDLL is is traversed from head totail and then tail to head, elements are displayed as in the output.</span></pre>\n<p><span style=\"font-size: 12pt;\"><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Constraints:<br /></strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">1 &lt;= number of nodes &lt;= 10</span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">3<br /></sup><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">0 &lt;= data of a node &lt;= 10</span><sup style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">4</sup></span></p>\n<p><span style=\"font-size: 12pt;\"><strong>Expected Time Complexity: </strong>O(n)<br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Expected Space C</strong></span><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 16px;\">omplexity</strong><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">O(h) , where h = height of tree</span></p>",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": "NA",
      "dislikes": "NA",
      "rephrased": {
        "body": "Convert a given Binary Tree (BT) into a Circular Doubly Linked List (CDLL) in-place.  The left and right pointers of the Binary Tree nodes should be repurposed as previous and next pointers in the CDLL, respectively. The order of nodes in the CDLL must mirror the Inorder traversal of the Binary Tree. The head of the CDLL should be the leftmost node encountered during the Inorder traversal.",
        "constraints": [
          "1 <= number of nodes <= 1000",
          "0 <= data of a node <= 10000"
        ],
        "testcases": [
          {
            "input": "     1\n    /   \\\n   3     2",
            "output": "3 1 2\n2 1 3",
            "explanation": "The inorder traversal of the tree is 3 -> 1 -> 2. The CDLL is constructed in this order. The first line of output represents traversal from head to tail and the second line represents traversal from tail to head."
          },
          {
            "input": "    10\n   /  \\\n  20  30\n /  \\\n40  60",
            "output": "40 20 60 10 30\n30 10 60 20 40",
            "explanation": "The inorder traversal of the tree is 40 -> 20 -> 60 -> 10 -> 30.  The CDLL is constructed in this order. The first line of output represents traversal from head to tail and the second line represents traversal from tail to head."
          }
        ]
      }
    },
    "similar": [],
    "hints": [
      "<p>Convert binary tree to circular doubly linked list and concatenate lists, handling empty lists and node connections.</p>"
    ],
    "relatedTopics": [
      {
        "name": "Linked List",
        "slug": "linked-list"
      },
      {
        "name": "Tree",
        "slug": "tree"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      }
    ],
    "companies": ["amazon", "sap"],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "\n\nclass Solution\n{\n  public:\n    //Function to concatenate two lists.\n    Node *concatenate(Node *leftList, Node *rightList)\n    {    \n        //if either of the lists is empty, we return the other list. \n        if (leftList == NULL)\n            return rightList;\n        if (rightList == NULL)\n            return leftList;\n            \n        //storing the last node of left list. \n        Node *leftLast = leftList->left;\n        //storing the last node of right list. \n        Node *rightLast = rightList->left;\n        \n        \n        //connecting the last node of Left list with the first \n        //node of the right list.\n        leftLast->right = rightList;\n        rightList->left = leftLast;\n        \n        //left of first node points to the last node in the list.\n        leftList->left = rightLast;\n        \n        //right of last node refers to the first node of the list.\n        rightLast->right = leftList;\n        return leftList;\n    }\n    \n    //Function to convert binary tree into circular doubly linked list.\n    Node *bTreeToCList(Node *root)\n    {\n        if (root == NULL)\n            return NULL;\n        \n        //calling the function for left and right subtrees recursively.    \n        Node *left = bTreeToCList(root->left);\n        Node *right = bTreeToCList(root->right);\n        \n        \n        //making a circular linked list of single node. To do so, we make the  \n        //right and left pointers of this node point to itself.\n        root->left = root->right = root;\n        \n        \n        //firstly, concatenating the left list with the list with \n        //single node i.e. current node. \n        //then concatenating the returned list with the right list. \n        return concatenate(concatenate(left, root), right);\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": "//Back-end complete function Template for Java\n\n\n\nclass Solution\n{\n    //Function to concatenate two lists.\n    Node concatenate(Node leftList, Node rightList)\n    {    \n        //if either of the lists is empty, we return the other list.\n        if (leftList == null)\n            return rightList;\n        if (rightList == null)\n        return leftList;\n        \n        //storing the last node of left list. \n        Node leftLast = leftList.left;\n        //storing the last node of right list.\n        Node rightLast = rightList.left;\n        \n        //connecting the last node of Left list with the first \n        //node of the right list.\n        leftLast.right = rightList;\n        rightList.left = leftLast;\n        \n        //left of first node points to the last node in the list.\n        leftList.left = rightLast;\n        \n        //right of last node refers to the first node of the list.\n        rightLast.right = leftList;\n        \n        return leftList;\n    }\n    \n    //Function to convert binary tree into circular doubly linked list.\n    Node bTreeToClist(Node root)\n    {\n        if (root == null)\n            return null;\n        \n        //calling the function for left and right subtrees recursively.\n        Node left = bTreeToClist(root.left);\n        Node right = bTreeToClist(root.right);\n        \n        //making a circular linked list of single node. To do so, we make the  \n        //right and left pointers of this node point to itself.\n        root.left = root.right = root;\n        \n        //firstly, concatenating the left list with the list with \n        //single node i.e. current node. \n        //then concatenating the returned list with the right list.\n        return concatenate(concatenate(left, root), right);\n    }\n}\n\n",
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    \n    #Function to concatenate two lists.\n    def concatenate(self, leftList, rightList):\n        \n        #if either of the lists is empty, we return the other list.\n        if(leftList is None):\n            return rightList\n        if(rightList is None):\n            return leftList\n            \n        #storing the last node of left list.\n        leftLast=leftList.left\n        #storing the last node of right list.\n        rightLast=rightList.left\n        \n        #connecting the last node of Left list with the first \n        #node of the right list.\n        leftLast.right=rightList\n        rightList.left=leftLast\n        \n        #left of first node points to the last node in the list.\n        leftList.left=rightLast\n        \n        #right of last node refers to the first node of the list.\n        rightLast.right=leftList\n        \n        return leftList\n        \n    #Function to convert binary tree into circular doubly linked list.    \n    def bTreeToClist(self, root):\n        if root is None:\n            return None\n        \n        #calling the function for left and right subtrees recursively.\n        left=self.bTreeToClist(root.left)\n        right=self.bTreeToClist(root.right)\n        \n        #making a circular linked list of single node. To do so, we make the  \n        #right and left pointers of this node point to itself.\n        root.left=root.right=root\n        \n        #firstly, concatenating the left list with the list with \n        #single node i.e. current node. \n        #then concatenating the returned list with the right list.\n        return self.concatenate(self.concatenate(left,root),right)\n    \n    \n  \n\n",
        "lang_text": "python3"
      },
      {
        "lang": "C#",
        "full_func": "//Back-end complete function Template for csharp\n\n\n    class Solution\n    {\n        //Function to concatenate two lists.\n        Node concatenate(Node leftList, Node rightList)\n        {    \n            //if either of the lists is empty, we return the other list. \n            if (leftList == null)\n                return rightList;\n            if (rightList == null)\n                return leftList;\n                \n            //storing the last node of left list. \n            Node leftLast = leftList.left;\n            //storing the last node of right list. \n            Node rightLast = rightList.left;\n            \n            \n            //connecting the last node of Left list with the first \n            //node of the right list.\n            leftLast.right = rightList;\n            rightList.left = leftLast;\n            \n            //left of first node points to the last node in the list.\n            leftList.left = rightLast;\n            \n            //right of last node refers to the first node of the list.\n            rightLast.right = leftList;\n            return leftList;\n        }\n    \n        //Function to convert binary tree into circular doubly linked list.\n        public Node bTreeToCList(Node root)\n        {\n            if (root == null)\n                return null;\n            \n            //calling the function for left and right subtrees recursively.    \n            Node left = bTreeToCList(root.left);\n            Node right = bTreeToCList(root.right);\n            \n            \n            //making a circular linked list of single node. To do so, we make the  \n            //right and left pointers of this node point to itself.\n            root.left = root.right = root;\n            \n            \n            //firstly, concatenating the left list with the list with \n            //single node i.e. current node. \n            //then concatenating the returned list with the right list. \n            return concatenate(concatenate(left, root), right);\n        }\n    }\n\n}",
        "lang_text": "csharp"
      },
      {
        "lang": "Javascript",
        "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to concatenate two lists.\n    concatenate(leftList, rightList) {\n        // If either of the lists is empty, we return the other list.\n        if (leftList === null) return rightList;\n        if (rightList === null) return leftList;\n\n        // Storing the last node of the left list.\n        const leftLast = leftList.left;\n        // Storing the last node of the right list.\n        const rightLast = rightList.left;\n\n        // Connecting the last node of the left list with the first node of the right\n        // list.\n        leftLast.right = rightList;\n        rightList.left = leftLast;\n\n        // Left of the first node points to the last node in the list.\n        leftList.left = rightLast;\n\n        // Right of the last node refers to the first node of the list.\n        rightLast.right = leftList;\n\n        return leftList;\n    }\n\n    // Function to convert binary tree into circular doubly linked list.\n    bTreeToClist(root) {\n        if (root === null) return null;\n\n        // Calling the function for left and right subtrees recursively.\n        const left = this.bTreeToClist(root.left);\n        const right = this.bTreeToClist(root.right);\n\n        // Making a circular linked list of single node. To do so, we make the\n        // right and left pointers of this node point to itself.\n        root.left = root.right = root;\n\n        // Firstly, concatenating the left list with the list with\n        // single node i.e. current node.\n        // Then concatenating the returned list with the right list.\n        return this.concatenate(this.concatenate(left, root), right);\n    }\n}\n",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
