{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700410,
            "title": "Bipartite Graph",
            "titleSlug": "bipartite-graph",
            "content": "<p><span style=\"font-size: 18px;\">Given an adjacency list&nbsp;of a graph<strong> adj</strong>. Check whether the graph is bipartite or not.</span></p>\n<p dir=\"ltr\" style=\"box-sizing: border-box; margin: 0px 0px 10px; padding: 0px; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">A</span><strong style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">&nbsp;<a href=\"https://www.geeksforgeeks.org/what-is-bipartite-graph/\" target=\"_blank\" rel=\"noopener\">bipartite graph</a>&nbsp;</strong><span style=\"box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;\">can be colored with two colors such that no two adjacent vertices share the same color. This means we can divide the graph&rsquo;s vertices into two distinct sets where:</span></p>\n<ul>\n<li dir=\"ltr\" style=\"box-sizing: border-box; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\"><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">All edges connect vertices from one set to vertices in the other set.</span></li>\n<li dir=\"ltr\" style=\"box-sizing: border-box; border: 0px; font-size: 18px; vertical-align: baseline; color: #273239; font-family: Nunito, sans-serif; letter-spacing: 0.162px; background-color: #ffffff;\">No edges exist between vertices within the same set.</li>\n</ul>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>adj = [[1], [0,2], [1]]\n<img src=\"https://media.geeksforgeeks.org/wp-content/uploads/20240926114602/Bipartite-Graph.webp\" alt=\"Bipartite-Graph\" width=\"254\" height=\"226\" />\n<strong>Output: </strong>true\n<strong>Explanation: </strong>The given graph can be colored in two colors so, it is a bipartite graph.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>adj = [[2, 3], [2], [0, 1, 3], [0, 2]]<br /></span><br /><br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/700410/Web/Other/blobid0_1735020917.webp\" width=\"319\" height=\"212\" /><br /><br /><span style=\"font-size: 18px;\"><strong>Output: </strong>false <br /><strong>Explanation: </strong>The given graph cannot be colored in two colors such that color of adjacent vertices differs. </span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br /><span style=\"font-family: 'andale mono', monospace; font-size: 14pt;\"><span style=\"color: #1e2229; white-space: normal; background-color: #ffffff;\">1 &le; adj.size() &le; 10</span><span style=\"box-sizing: border-box; line-height: 1.7em; position: relative; vertical-align: baseline; top: -0.5em; color: #1e2229; background-color: #ffffff; white-space: normal;\">4<br style=\"box-sizing: border-box; line-height: 1.7em; color: var(--text-color) !important; background-color: var(--background) !important;\" /></span><span style=\"color: #1e2229; white-space: normal; background-color: #ffffff;\">1 &le; adj[i][j] &le; 10</span><span style=\"box-sizing: border-box; line-height: 1.7em; position: relative; vertical-align: baseline; top: -0.5em; color: #1e2229; background-color: #ffffff; white-space: normal;\">4</span></span><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an adjacency list `adj` representing a graph, determine if the graph is bipartite. A bipartite graph is one where the nodes can be divided into two disjoint sets such that every edge connects a node in one set to a node in the other set.  In other words, it can be colored with only two colors such that no two adjacent nodes share the same color.",
                "constraints": [
                    "1 <= adj.size() <= 10000",
                    "1 <= adj[i][j] <= 10000"
                ],
                "testcases": [
                    {
                        "input": "[[1], [0,2], [1]]",
                        "output": "true",
                        "explanation": "The graph can be colored with two colors. For example, nodes 0 and 2 can be color 1, and node 1 can be color 2. No adjacent nodes have the same color."
                    },
                    {
                        "input": "[[2, 3], [2], [0, 1, 3], [0, 2]]",
                        "output": "false",
                        "explanation": "It's not possible to color this graph with two colors without having adjacent nodes with the same color.  Therefore, it is not bipartite."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">A Bipartite Graph is a graph whose vertices can be divided into two independent sets, U and V such that every edge (u, v) either connects a vertex from U to V or a vertex from V to U. </span></p>",
            "<p><span style=\"font-size:18px\">The graph may contains different components</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "DFS",
                "slug": "dfs"
            },
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "microsoft",
            "samsung"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to check if the graph is bipartite or not\n    bool isBipartite(vector<vector<int>>& adj) {\n        // Creating a vector to store the color of each vertex. Initialized to -1.\n        int V = adj.size();\n        vector<int> color(V, -1);\n\n        // Creating a queue for BFS traversal of the graph\n        queue<int> q;\n\n        // Flag to check if the graph is bipartite\n        bool is_Biparatite = true;\n\n        // Iterating over all the vertices of the graph\n        for (int i = 0; i < V; i++) {\n            // If the color of the vertex is -1, it means the vertex is not visited yet\n            if (color[i] == -1) {\n                // Pushing the vertex into the queue\n                q.push(i);\n\n                // Assigning the color of the vertex as 0\n                color[i] = 0;\n\n                // Performing BFS traversal on the graph\n                while (!q.empty()) {\n                    // Removing the front vertex from the queue\n                    int u = q.front();\n                    q.pop();\n\n                    // Iterating over all the adjacent vertices of the current vertex\n                    for (auto v : adj[u]) {\n                        // If the color of the adjacent vertex is -1, it means the\n                        // vertex is not visited yet\n                        if (color[v] == -1) {\n                            // Assigning the opposite color of the current vertex to the\n                            // adjacent vertex\n                            color[v] = color[u] ^ 1;\n\n                            // Pushing the adjacent vertex into the queue\n                            q.push(v);\n                        }\n                        // If the color of the adjacent vertex is already assigned and\n                        // it is same as the current vertex, then the graph is not\n                        // bipartite\n                        else\n                            is_Biparatite = is_Biparatite & (color[u] != color[v]);\n                    }\n                }\n            }\n        }\n        // Returning whether the graph is bipartite or not\n        return is_Biparatite;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public boolean isBipartite(ArrayList<ArrayList<Integer>> adj) {\n        // Create an array to store the color of each vertex\n        int V = adj.size();\n        int[] color = new int[V];\n        // Initialize all colors to -1\n        Arrays.fill(color, -1);\n\n        // Create a queue for BFS traversal\n        Queue<Integer> q = new LinkedList<>();\n\n        // Initialize a flag to track if the graph is bipartite\n        boolean isBipartite = true;\n\n        // Traverse through all vertices\n        for (int i = 0; i < V; i++) {\n            // If the current vertex is not visited yet\n            if (color[i] == -1) {\n                // Add the vertex to the queue\n                q.add(i);\n                // Set its color to 0 (assuming it is part of set A)\n                color[i] = 0;\n                // Perform BFS traversal\n                while (!q.isEmpty()) {\n                    int u = q.poll();\n                    // Traverse through all adjacent vertices\n                    for (Integer v : adj.get(u)) {\n                        // If the current vertex v is not visited yet\n                        if (color[v] == -1) {\n                            // Set its color to the opposite color of its parent vertex\n                            color[v] = color[u] ^ 1;\n                            // Add the vertex to the queue for further traversal\n                            q.add(v);\n                        } else {\n                            // If the current vertex v is already visited\n                            // Check if its color is same as its parent vertex\n                            // If it is, then the graph is not bipartite\n                            // Update the flag to false\n                            isBipartite = isBipartite & (color[u] != color[v]);\n                        }\n                    }\n                }\n            }\n        }\n        // Return the result whether the graph is bipartite or not\n        return isBipartite;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from collections import deque\n\n\nclass Solution:\n\n    # Function to check if the graph is bipartite or not.\n    def isBipartite(self, adj):\n        V = len(adj)\n        is_bipartite = True\n\n        # Initializing a queue and a color array.\n        q = deque()\n        color = [-1 for i in range(V)]\n\n        # Loop through all the vertices.\n        for i in range(V):\n            if (color[i] == -1):\n                q.append(i)\n                color[i] = 0\n\n                # BFS traversal starting from vertex i.\n                while (len(q)):\n                    u = q.pop()\n\n                    # Traverse all adjacent vertices of vertex u.\n                    for v in adj[u]:\n                        if (color[v] == -1):\n\n                            # Assigning alternate color to the adjacent vertex.\n                            color[v] = color[u] ^ 1\n                            q.append(v)\n                        else:\n\n                            # Checking if the adjacent vertices have the same color,\n                            # which means it is not a bipartite graph.\n                            is_bipartite = is_bipartite & (color[v]\n                                                           != color[u])\n\n        return is_bipartite\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to check if the graph is bipartite or not\n    isBipartite(adj) {\n        let V = adj.length;\n        let color = new Array(V).fill(-1);\n\n        for (let i = 0; i < V; i++) {\n            if (color[i] === -1) {\n                let queue = [];\n                queue.push(i);\n                color[i] = 0;\n\n                while (queue.length > 0) {\n                    let u = queue.shift();\n                    for (let v of adj[u]) {\n                        if (color[v] === -1) {\n                            color[v] = 1 - color[u];\n                            queue.push(v);\n                        } else if (color[v] === color[u]) {\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}