{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702888,
            "title": "Bird and maximum fruit gathering",
            "titleSlug": "bird-and-maximum-fruit-gathering0509",
            "content": "<p><span >There are several trees arranged in a circle, each with a fruit value associated with it. A bird can gather all the fruits from a tree by sitting on it for 0.5 seconds and can move to a neighboring tree in another 0.5 seconds. Once all the fruits are picked from a tree, the bird cannot pick any more from that tree until all fruits are picked, it cannot move to next tree. The bird has <strong>totalTime</strong> seconds to gather as many fruits as possible and can start from any tree.</span></p>\n<p><span >Given the array <strong>arr[]</strong> of fruit values and <strong>totalTime</strong>, determine the maximum number of fruits the bird can gather.</span></p>\n<p><span ><strong>Examples</strong>:</span></p>\n<pre><span ><strong>Input:</strong> arr[] = [2, 1, 3, 5, 0, 1, 4], totalTime = 3</span><br /><span ><strong>Output:</strong> 9</span><br /><span ><strong>Explanation:</strong> Starting at tree 1 and moving to tree 2, then to tree 3, the bird gathers 1 + 3 + 5 = 9 fruits.</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [1, 6, 2, 5, 3, 4], totalTime = 2</span><br /><span ><strong>Output:</strong> 8</span><br /><span ><strong>Explanation:</strong> Starting at tree 1 and moving to tree 2, the bird gathers 6 + 2 = 8 fruits. Alternatively, starting at tree 3 and moving to tree 4, the bird also gathers 5 + 3 = 8 fruits.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)</span><br /><span ><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span ><strong>Constraints</strong>:<br /></span><span >2 &le; arr.size() &le; 10<sup>6</sup></span><br /><span >1 &le; totalTime &le; arr.size()</span><br /><span >0 &le; arr[i] &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "A bird is situated in a circle of trees, each bearing a certain number of fruits. The bird can collect all fruits from a tree by spending 0.5 seconds on it. Moving to an adjacent tree also takes 0.5 seconds. The bird cannot revisit a tree to pick more fruits until all fruits have been picked from all the available trees. Given an array representing the number of fruits on each tree and a total time limit, determine the maximum number of fruits the bird can collect within the given time, starting from any tree.",
                "constraints": [
                    "2 \u2264 arr.size() \u2264 10^6",
                    "1 \u2264 totalTime \u2264 arr.size()",
                    "0 \u2264 arr[i] \u2264 10^5"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [2, 1, 3, 5, 0, 1, 4], totalTime = 3",
                        "output": "9",
                        "explanation": "Starting at tree with index 1 (value 1) and moving to tree with index 2 (value 3), then to tree with index 3 (value 5), the bird gathers 1 + 3 + 5 = 9 fruits. Each action of picking fruit or moving to neighbor takes 0.5 sec. 1+3+5 will take 3 sec."
                    },
                    {
                        "input": "arr[] = [1, 6, 2, 5, 3, 4], totalTime = 2",
                        "output": "8",
                        "explanation": "Starting at tree with index 1 (value 6) and moving to tree with index 2 (value 2), the bird gathers 6 + 2 = 8 fruits. Alternatively, starting at tree with index 3 (value 5) and moving to tree with index 4 (value 3), the bird also gathers 5 + 3 = 8 fruits."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >We can observe he needs 1 second to get fruits of a tree 0.5 for reaching and 0.5 for collecting, so he can get fruit from <strong>totalTime</strong> contiguous trees.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "sliding-window",
                "slug": "sliding-window"
            },
            {
                "name": "two-pointer-algorithm",
                "slug": "two-pointer-algorithm"
            }
        ],
        "companies": [
            "facebook"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxFruits(vector<int>& arr, int totalTime) {\n        int n = arr.size();\n        int maxFruits = 0;\n        int currentFruits = 0;\n        totalTime = min(n, totalTime);\n\n        // Calculate the sum of the first window\n        for (int i = 0; i < totalTime; i++) {\n            currentFruits += arr[i];\n        }\n\n        maxFruits = currentFruits;\n\n        // Slide the window over the array\n        for (int i = totalTime; i < n; i++) {\n            currentFruits -= arr[i - totalTime];\n            currentFruits += arr[i];\n            maxFruits = max(maxFruits, currentFruits);\n        }\n\n        return maxFruits;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int maxFruits(int[] arr, int totalTime) {\n        int n = arr.length;\n        int maxFruits = 0;\n        int currentFruits = 0;\n        totalTime = Math.min(n, totalTime);\n\n        // Calculate the sum of the first window\n        for (int i = 0; i < totalTime; i++) {\n            currentFruits += arr[i];\n        }\n\n        maxFruits = currentFruits;\n\n        // Slide the window over the array\n        for (int i = totalTime; i < n; i++) {\n            currentFruits -= arr[i - totalTime];\n            currentFruits += arr[i];\n            maxFruits = Math.max(maxFruits, currentFruits);\n        }\n\n        return maxFruits;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxFruits(self, arr, totalTime):\n        n = len(arr)\n        maxFruits = 0\n        currentFruits = 0\n        totalTime = min(n, totalTime)\n\n        # Calculate the sum of the first window\n        for i in range(totalTime):\n            currentFruits += arr[i]\n\n        maxFruits = currentFruits\n\n        # Slide the window over the array\n        for i in range(totalTime, n):\n            currentFruits -= arr[i - totalTime]\n            currentFruits += arr[i]\n            maxFruits = max(maxFruits, currentFruits)\n\n        return maxFruits\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maxFruits(arr, totalTime) {\n        const n = arr.length;\n        let maxFruits = 0;\n        let currentFruits = 0;\n        totalTime = Math.min(n, totalTime);\n\n        // Calculate the sum of the first window\n        for (let i = 0; i < totalTime; i++) {\n            currentFruits += arr[i];\n        }\n\n        maxFruits = currentFruits;\n\n        // Slide the window over the array\n        for (let i = totalTime; i < n; i++) {\n            currentFruits -= arr[i - totalTime];\n            currentFruits += arr[i];\n            maxFruits = Math.max(maxFruits, currentFruits);\n        }\n\n        return maxFruits;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}