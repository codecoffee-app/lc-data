{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701160,
            "title": "Bit Difference",
            "titleSlug": "bit-difference-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">You are given two numbers <strong>a</strong> and <strong>b</strong>. The task is&nbsp;to count the number of bits needed to be flipped<strong> </strong>to convert a to b.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples</strong></span><span style=\"font-size: 18px;\"><strong>:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>a = 10, b = 20\n<strong>Output</strong>: 4\n<strong>Explanation</strong>:\na &nbsp;= 01010\nb &nbsp;= 10100\nAs we can see, the bits of A that need to be flipped are <strong>0101</strong>0. If we flip these bits, we get 10100, which is B.</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: a = 20, b = 25\n<strong>Output</strong>: 3\n<strong>Explanation</strong>:\na &nbsp;= 10100\nb &nbsp;= 11001\nAs we can see, the bits of A that need to be flipped are 1<strong>01</strong>0<strong>0</strong>. If we flip these bits, we get 11001, which is B.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:&nbsp;</strong></span><br /><span style=\"font-size: 18px;\">1 &le; a, b &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, `a` and `b`, determine the number of bits that must be flipped in the binary representation of `a` to obtain the binary representation of `b`.",
                "constraints": [
                    "1 <= a, b <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "a = 10, b = 20",
                        "output": "4",
                        "explanation": "The binary representation of 10 is 01010, and the binary representation of 20 is 10100.  Four bits need to be flipped in 01010 to get 10100."
                    },
                    {
                        "input": "a = 20, b = 25",
                        "output": "3",
                        "explanation": "The binary representation of 20 is 10100, and the binary representation of 25 is 11001.  Three bits need to be flipped in 10100 to get 11001."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Count the number of differing bits between integers <code>a</code> and <code>b</code> in their binary representation using the shift operator.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\n    // Function to count set bits\r\n    int countSetBits(unsigned int n)\r\n    {\r\n        //We use a counter variable\r\n      unsigned int count = 0;\r\n      while(n)\r\n      {\r\n        //AND operation of n and 1 gives us the rightmost bit. \r\n        //counter variable is increased if we get 1 as the rightmost bit.\r\n        count += n & 1;\r\n        \r\n        //Right Shift n by 1 to remove the rightmost bit.\r\n        n >>= 1;\r\n        \r\n      }\r\n      return count;\r\n    }\r\n    \r\n    \r\n    // Function to find number of bits needed to be flipped to convert A to B\r\n    int countBitsFlip(int a, int b){\r\n        \r\n        int ans = 0;\r\n        //XOR operation gives set bits only when there are dissimilar bits.\r\n        //We store the value of XOR operation of a and b.\r\n        ans = a^b;\r\n        \r\n        //returning the number of set bits in resultant.\r\n        return countSetBits(ans);\r\n        \r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution{\r\n    \r\n    //Function to count set bits\r\n    public static int countSetBits(int n){\r\n        \r\n        //We use a counter variable.\r\n        int count = 0;\r\n        while(n > 0){\r\n            \r\n            //AND operation of n and 1 gives us the rightmost bit. \r\n            //counter variable is increased if we get 1 as the rightmost bit.\r\n            count += n&1;\r\n            \r\n            //Right Shift n by 1 to remove the rightmost bit.\r\n            n>>=1;\r\n        }\r\n        return count;\r\n        \r\n    }\r\n    \r\n    \r\n    // Function to find number of bits needed to be flipped to convert A to B\r\n    public static int countBitsFlip(int a, int b){\r\n        \r\n        //XOR operation gives set bits only when there are dissimilar bits.\r\n        //We store the value of XOR operation of a and b.\r\n        int ans = a^b;\r\n        \r\n        //returning the number of set bits in resultant.\r\n        return countSetBits(ans);\r\n        \r\n    }\r\n    \r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def countSetBits(self, n):\n        #We use a counter variable.\n        count = 0\n        while (n > 0):\n            #AND operation of n and 1 gives us the rightmost bit.\n            #counter variable is increased if we get 1 as the rightmost bit.\n            count += n & 1\n            #Right Shift n by 1 to remove the rightmost bit.\n            n >>= 1\n\n        return count\n\n    # Function to find number of bits needed to be flipped to convert A to B\n    def countBitsFlip(self, a, b):\n        ans = 0\n        #XOR operation gives set bits only when there are dissimilar bits.\n        #We store the value of XOR operation of a and b.\n        ans = a ^ b\n        #returning the number of set bits in resultant.\n        return self.countSetBits(ans)\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int countBitsFlip(int a, int b)\n    {\n        int ans = 0;\n        //XOR operation gives set bits only when there are dissimilar bits.\n        //We store the value of XOR operation of a and b.\n        ans = a ^ b;\n        \n        //We use a counter variable\n        int count = 0;\n        while (ans != 0)\n        {\n            //AND operation of ans and 1 gives us the rightmost bit. \n            //counter variable is increased if we get 1 as the rightmost bit.\n            count += ans & 1;\n            \n            //Right Shift ans by 1 to remove the rightmost bit.\n            ans >>= 1;\n        }\n        return count;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n/**\r\n * @param {Number} a\r\n * @param {Number} b\r\n * @returns {Number}\r\n*/\r\n\r\nclass Solution {\r\n    \r\n    countBitsFlip(a, b)\r\n    {\r\n        //XOR operation gives set bits only when there are dissimilar bits.\r\n       //We store the value of XOR operation of a and b.\r\n        let ans = a^b;\r\n        //returning the number of set bits in resultant.\r\n        return this.countSetBits(ans);\r\n    }\r\n    \r\n    // Function to find number of bits needed to be flipped to convert A to B\r\n    countSetBits(n){\r\n        //We use a counter variable\r\n        let count = 0;\r\n        while(n > 0){\r\n            //AND operation of n and 1 gives us the rightmost bit. \r\n            //counter variable is increased if we get 1 as the rightmost bit.\r\n            count += n&1;\r\n            //Right Shift n by 1 to remove the rightmost bit.\r\n            n>>=1;\r\n        }\r\n        return count;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}