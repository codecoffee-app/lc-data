{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714326,
            "title": "Bit Magic",
            "titleSlug": "bit-magic--170648",
            "content": "<p><span style=\"font-size:18px\">Given an integer array <strong>arr[]</strong> of size <strong>n</strong> which contains only <strong>1</strong> and <strong>0.</strong> Your task is to make the array perfect. An array is said to be <strong>perfect</strong> if for each <strong>i</strong> from <strong>0</strong> to <strong>n-1</strong> <strong>arr[i]==arr[n-1-i]</strong> is satisfied.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\">To Make the array perfect you are allowed to do the following operation &nbsp;:</span></p>\r\n\r\n<p><span style=\"font-size:18px\">In one operation you can choose two different indexes&nbsp;<strong>i</strong> and <strong>j</strong> and set value of both <strong>arr[i]</strong> and <strong>arr[j] </strong>to <strong>arr[i]^arr[j]</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Your task is to make the array <strong>perfect</strong> in <strong>minimum possible number</strong> of operations and return the number of operations.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note</strong>: <strong>0-based indexing is used</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nn<strong> = </strong>4\r\narr = {1,0,0,0}\r\n<strong>Output:\r\n</strong>1\r\n<strong>Explanation:</strong>\r\nWe can take index 0 and 3 and apply the operation.\r\nArray becomes {1,0,0,1}.Now the condition is satisfied </span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nn = 3\r\narr = {1,0,1}\r\n<strong>Output:</strong>\r\n0\r\n<strong>Explanation:</strong>\r\ncondition is satisfied intially. So no operation is required\r\nin this case.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>bitMagic()</strong> which takes an integer <strong>n</strong> and <strong>a binary integers array arr</strong>&nbsp;respectively and returns&nbsp;the<strong> minimum</strong> number of operations required to make the array <strong>perfect.&nbsp;</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= n<strong>&nbsp;</strong>&lt;= 10^5<br />\r\n0 &lt;=&nbsp;arr[i]<strong>&nbsp;</strong>&lt;=1</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an integer array `arr` of size `n` containing only 1s and 0s, determine the minimum number of operations required to make the array 'perfect'. An array is considered perfect if `arr[i] == arr[n-1-i]` for all `i` from 0 to `n-1`.\n\nIn one operation, you can choose two distinct indices `i` and `j` and update both `arr[i]` and `arr[j]` by setting them to `arr[i] ^ arr[j]`. Return the minimum number of operations to achieve a perfect array.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "0 <= arr[i] <= 1"
                ],
                "testcases": [
                    {
                        "input": "n = 4\narr = {1,0,0,0}",
                        "output": "1",
                        "explanation": "By applying the operation on indices 0 and 3, the array becomes {1, 0, 0, 1}, which satisfies the perfect array condition."
                    },
                    {
                        "input": "n = 3\narr = {1,0,1}",
                        "output": "0",
                        "explanation": "The array is already perfect, so no operations are required."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:16px\">Try to count mismatching pairs and try to nullify them .</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    // Function to perform bit magic.\r\n    int bitMagic(int n, vector<int> &arr) {\r\n        int cn=0;\r\n        \r\n        // Iterating over the first half of the array.\r\n        for(int i=0;i<n/2;i++){\r\n            // If the elements at the corresponding positions in the first and last half of the array are not equal, increment the count.\r\n            if(arr[i]!=arr[n-1-i]) cn++;\r\n        }\r\n        \r\n        // Returning half of the count of differences, rounded up.\r\n        return (cn+1)/2;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static int bitMagic(int n, int[] arr) {\r\n        // code here\r\n        int c=0;\r\n        for(int i=0;i<n/2;i++){\r\n            if(arr[i]!=arr[n-i-1]){\r\n                c++;\r\n            }\r\n        }\r\n        return (c+1)/2;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    #Function to check the number of bits required for magic\r\n    def bitMagic(self,n,arr):\r\n        \r\n        c=0\r\n        #iterating over the array\r\n        for i in range(n):\r\n            #checking if the current element is not equal to its corresponding element from the end\r\n            if arr[i]!=arr[n-i-1]:\r\n                c+=1\r\n        \r\n        #dividing the count by 2, as each pair contributes 2 bits\r\n        c//=2\r\n        \r\n        #returning the number of bits required for magic\r\n        return (c+1)//2\r\n    ",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\npublic class Solution\n{\n    //Complete this function\n    public int bitMagic(int n, List<int> arr)\n    {\n        int cn=0;\n\n        // Iterating over the first half of the array.\n        for(int i=0;i<n/2;i++){\n            // If the elements at the corresponding positions in the first and last half of the array are not equal, increment the count.\n            if(arr[i]!=arr[n-1-i]) cn++;\n        }\n\n        // Returning half of the count of differences, rounded up.\n        return (cn+1)/2;\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}