{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712531,
            "title": "Bit Manipulation",
            "titleSlug": "bit-manipulation-1666686020",
            "content": "<p><span style=\"font-size: 18px;\">Given a 32 bit unsigned&nbsp;integer <strong>num</strong> and an integer <strong>i</strong>. Perform following operations on the number -&nbsp;</span></p>\n<p><span style=\"font-size: 18px;\">1. <strong>Get</strong> ith bit</span></p>\n<p><span style=\"font-size: 18px;\">2. <strong>Set</strong> ith bit</span></p>\n<p><span style=\"font-size: 18px;\">3. <strong>Clear</strong> ith bit</span></p>\n<p><strong><span style=\"font-size: 18px;\">Note :</span> </strong><span style=\"font-size: 18px;\">For better understanding, we are starting bits from 1 instead 0. (1-based). You have to print space three space separated values ( as shown in output without a line break) and do not have to return anything.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>70 3</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>1 70 66</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Bit at the 3rd position from LSB is 1. (1 0 0 0 <strong>1</strong> 1 0) .</span><span style=\"font-size: 18px;\">The value of the given number after setting the 3rd bit is 70. </span><span style=\"font-size: 18px;\">The value of the given number after clearing 3rd bit is 66. (1 0 0 0 <strong>0</strong> 1 0)</span>\n</pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>8 1</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>0 9 8</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong> Bit at the first position from LSB is 0. (1 0 0 <strong>0</strong>)</span><span style=\"font-size: 18px;\">  .</span><span style=\"font-size: 18px;\">The value of the given number after setting the 1st bit is 9. (1 0 0 <strong>1</strong>)</span><span style=\"font-size: 18px;\">.  </span><span style=\"font-size: 18px;\">The value of the given number after clearing 1st bit is 8. (1 0 0 <strong>0</strong>)</span></pre>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 18px;\">Constraints:</span></strong></p>\n<p><span style=\"font-size: 18px;\">0&lt;=num&lt;=10<sup>9</sup></span></p>\n<p><span style=\"font-size: 18px;\">1&lt;=i&lt;=32</span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a 32-bit unsigned integer `num` and an integer `i` (1-based index), perform the following bitwise operations:\n\n1.  **Get:** Determine the value of the i-th bit of `num`. \n2.  **Set:** Set the i-th bit of `num` to 1.\n3.  **Clear:** Set the i-th bit of `num` to 0.\n\nPrint the result of these operations as three space-separated integers: the value of the i-th bit (0 or 1), the value of `num` after setting the i-th bit, and the value of `num` after clearing the i-th bit.  Print all three values on a single line with three spaces separating them.  Do not return any value from the function.",
                "constraints": [
                    "0 <= num <= 10^9",
                    "1 <= i <= 32"
                ],
                "testcases": [
                    {
                        "input": "70 3",
                        "output": "1 70 66",
                        "explanation": "The 3rd bit of 70 (binary 1000110) is 1. Setting the 3rd bit of 70 results in no change, so it remains 70. Clearing the 3rd bit of 70 results in 66 (binary 1000010)."
                    },
                    {
                        "input": "8 1",
                        "output": "0 9 8",
                        "explanation": "The 1st bit of 8 (binary 1000) is 0. Setting the 1st bit of 8 results in 9 (binary 1001). Clearing the 1st bit of 8 results in no change, so it remains 8 (binary 1000)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\r\n  public:\r\n    void bitManipulation(int num, int i) {\r\n        i--;\r\n        cout << ((num & (1L << (i))) != 0) << \" \";\r\n        cout << (num | (1L << (i))) << \" \";\r\n        cout << (num & (~(1L << (i))));\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\n\nclass Solution {\n    static void bitManipulation(int num, int i) {\n        // decrementing the value of i as bit position starts from 0\n        i--;\n\n        // checking if the i-th bit is 1 or 0 and printing the result\n        System.out.print((((num & (1L << (i))) != 0) ? \"1\" : \"0\") + \" \");\n\n        // setting the i-th bit to 1 and printing the result\n        System.out.print((num | (1L << (i))) + \" \");\n\n        // setting the i-th bit to 0 and printing the result\n        System.out.print((num & (~(1L << (i)))) + \" \");\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    # Function to perform bit manipulation operations\n    def bitManipulation(self, num, i):\n        # Subtract 1 from i to get the correct bit position\n        i -= 1\n        # Print the value of the bit at position i\n        # by shifting n by i bits to the right and performing bitwise AND with 1\n        # print((num >> i) & 1, end=' ')\n        # Set the bit at position i to 1 by performing bitwise OR with 1 shifted by i bits\n        # print(num | (1 << i), end=' ')\n        # Set the bit at position i to 0 by performing bitwise AND with the complement of 1 shifted by i bits\n        # print(num & ~(1 << i), end=' ')\n        print((num >> i) & 1, num | (1 << i), num & ~(1 << i))\n",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}