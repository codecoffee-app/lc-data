{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703088,
            "title": "Bitonic Generator Sort",
            "titleSlug": "bitonic-generator-sort3343",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr</strong>&nbsp;the task is to sort all even-placed numbers in increasing and odd-place numbers in decreasing order. The modified array should contain all sorted even-placed numbers followed by reverse sorted odd-placed numbers.<br />Note: that the first element is considered as even because of its index 0.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [0, 1, 2, 3, 4, 5, 6, 7]\n<strong>Output:</strong> [0, 2, 4, 6, 7, 5, 3, 1]\n<strong>Explanation</strong>: Even-place elements : 0, 2, 4, 6 Odd-place elements : 1, 3, 5, 7 Even-place elements in increasing order : 0, 2, 4, 6 Odd-Place elements in decreasing order : 7, 5, 3, 1</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 1, 2, 4, 5, 9, 13, 14, 12]\n<strong>Output:</strong> [2, 3, 5, 12, 13, 14, 9, 4, 1]\n<strong>Explanation</strong>: Even-place elements : 3, 2, 5, 13, 12 Odd-place elements : 1, 4, 9, 14 Even-place elements in increasing order : 2, 3, 5, 12, 13 Odd-Place elements in decreasing order : 14, 9, 4, 1</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Auxiliary Space:</strong> O(nlogn)<br /><strong>Expected Auxilary Space:</strong> O(n)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5<br /></sup>1 &le; arr[i] &le; 10<sup>5</sup><sup><br /></sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr`, sort all even-placed numbers in increasing order and odd-placed numbers in decreasing order. The modified array should contain all sorted even-placed numbers followed by reverse sorted odd-placed numbers. Note that the first element (index 0) is considered an even-placed element.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[0, 1, 2, 3, 4, 5, 6, 7]",
                        "output": "[0, 2, 4, 6, 7, 5, 3, 1]",
                        "explanation": "Even-place elements (0, 2, 4, 6) are sorted in increasing order. Odd-place elements (1, 3, 5, 7) are sorted in decreasing order."
                    },
                    {
                        "input": "[3, 1, 2, 4, 5, 9, 13, 14, 12]",
                        "output": "[2, 3, 5, 12, 13, 14, 9, 4, 1]",
                        "explanation": "Even-place elements (3, 2, 5, 13, 12) are sorted in increasing order. Odd-place elements (1, 4, 9, 14) are sorted in decreasing order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >The idea is to swaps first half odd index positions with second half even index positions and then sort the first half array in increasing order and second half array in decreasing order.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "zoho"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n\n  public:\n\n    vector<int> bitonicGenerator(vector<int>& arr) {\n        // create evenArr[] and oddArr[]\n        int n = arr.size();\n        vector<int> evenArr;\n        vector<int> oddArr;\n\n        // Put elements in oddArr[] and evenArr[] as\n        // per their position\n        for (int i = 0; i < n; i++) {\n            if (!(i % 2))\n                evenArr.push_back(arr[i]);\n            else\n                oddArr.push_back(arr[i]);\n        }\n\n        // sort evenArr[] in ascending order\n        // sort oddArr[] in descending order\n        sort(evenArr.begin(), evenArr.end());\n        sort(oddArr.begin(), oddArr.end(), greater<int>());\n        vector<int> ans(n);\n\n        int i = 0;\n        for (int j = 0; j < evenArr.size(); j++)\n            ans[i++] = evenArr[j];\n        for (int j = 0; j < oddArr.size(); j++)\n            ans[i++] = oddArr[j];\n\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n\n    // Function to generate bitonic sequence\n    public static ArrayList<Integer> bitonicGenerator(int[] arr) {\n        int n = arr.length; // Size of the input array\n\n        // Create ArrayLists for even-indexed and odd-indexed elements\n        ArrayList<Integer> evenList = new ArrayList<>();\n        ArrayList<Integer> oddList = new ArrayList<>();\n\n        // Fill the evenList and oddList from the original array\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                evenList.add(arr[i]); // Even index\n            } else {\n                oddList.add(arr[i]); // Odd index\n            }\n        }\n\n        // Sort evenList in ascending order\n        Collections.sort(evenList);\n\n        // Sort oddList in ascending order and then reverse it to make it descending\n        Collections.sort(oddList);\n        Collections.reverse(oddList);\n\n        // Create the final ArrayList to hold the result\n        ArrayList<Integer> ans = new ArrayList<>();\n\n        // Add sorted evenList elements to ans\n        ans.addAll(evenList);\n\n        // Add sorted oddList elements to ans\n        ans.addAll(oddList);\n\n        return ans;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def bitonicGenerator(self, arr):\n        n = len(arr)\n        evenArr = []\n        oddArr = []\n\n        # Distribute elements between evenArr and oddArr based on their index\n        for i in range(n):\n            if i % 2 == 0:\n                evenArr.append(arr[i])\n            else:\n                oddArr.append(arr[i])\n\n        # Sort evenArr in ascending order\n        evenArr.sort()\n\n        # Sort oddArr in descending order\n        oddArr.sort(reverse=True)\n\n        # Initialize the result list\n        ans = evenArr + oddArr\n\n        return ans\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    bitonicGenerator(arr) {\n        const n = arr.length;\n        let evenArr = [];\n        let oddArr = [];\n\n        // Distribute elements between evenArr and oddArr based on their index\n        for (let i = 0; i < n; i++) {\n            if (i % 2 === 0) {\n                evenArr.push(arr[i]);\n            } else {\n                oddArr.push(arr[i]);\n            }\n        }\n\n        // Sort evenArr in ascending order\n        evenArr.sort((a, b) => a - b);\n\n        // Sort oddArr in descending order\n        oddArr.sort((a, b) => b - a);\n\n        // Concatenate sorted evenArr and oddArr\n        const ans = evenArr.concat(oddArr);\n\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}