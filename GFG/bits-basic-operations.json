{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712660,
            "title": "Bit's basic operations",
            "titleSlug": "bits-basic-operations",
            "content": "<p><span style=\"font-size: 18px;\">Geek is learning data structures. He wants to learn the trie data structure, but there are a few bit's prerequisites that he must first understand.</span></p>\n<p><span style=\"font-size: 18px;\">Given three bit manipulations functions: <strong>XOR</strong>, <strong>check</strong> and <strong>setBit</strong>.</span></p>\n<p><span style=\"font-size: 18px;\">In <strong>XOR</strong> function you are given two integers <strong>n</strong>&nbsp;and <strong>m</strong>&nbsp;return the <strong>xor</strong> of <strong>n</strong>&nbsp;and <strong>m</strong>.</span></p>\n<p><span style=\"font-size: 18px;\">In <strong>check</strong> function you are given two&nbsp;integer <strong>a</strong>&nbsp;and <strong>b</strong>&nbsp;return 1 if <strong>a</strong><sup><strong>th</strong>&nbsp;</sup>bit (1-indexed) of <strong>b</strong>&nbsp;is set otherwise return 0.</span></p>\n<p><span style=\"font-size: 18px;\">In <strong>setBit</strong> function you are given two integer <strong>c</strong>&nbsp;and <strong>d</strong>, set the <strong>c</strong><sup><strong>th</strong>&nbsp;</sup>bit (0-indexed) of <strong>d</strong> if not yet set .</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\nn = 1, m = 2\na = 3, b = 4\nc = 5, d = 6\n<strong>Output: </strong>3 1 38\n<strong>Explanation:</strong> 1 xor 2 = 3, 3<sup>rd </sup>bit of 4 is set. After setting 5<sup>th </sup>bit of 6 result is 100110 which in decimal form is 38.</span>\n</pre>\n<p><span style=\"font-size: 18px;\">Example 2:</span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> \nn = 7, m = 8\na = 9, b = 10\nc = 11, d = 12 \n<strong>Output: </strong>15 0 2060 \n<strong>Explanation:</strong> 7 xor 8 = 15, 9<sup>th</sup><sup> </sup>bit of 10 is not set. After setting 11<sup>th </sup>bit of 12 result is 100000001100 which in decimal form is 2060.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n&nbsp;&lt;= 10<sup>5</sup></span><br /><span style=\"font-size: 18px;\">1 &lt;= m&nbsp;&lt;= 10<sup>5</sup></span><br /><span style=\"font-size: 18px;\">1 &lt;= a&nbsp;&lt;= 9<br />1 &lt;= b&nbsp;&lt;= 10<sup>5</sup><br />1 &lt;= c&nbsp;&lt;= 9<br />1 &lt;= d&nbsp;&lt;= 10<sup>5</sup></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete three&nbsp;functions <strong>XOR(),&nbsp;check() and set()</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(1)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Geek is learning data structures and needs to understand bit manipulation prerequisites before tackling the trie data structure. Implement the following three bit manipulation functions:\n\n1.  **XOR(n, m)**: Calculate the bitwise XOR of integers `n` and `m`. Return the result.\n2.  **check(a, b)**: Determine if the a-th bit (1-indexed) of integer b is set (equal to 1). Return 1 if set, otherwise return 0.\n3.  **setBit(c, d)**: Set the c-th bit (0-indexed) of integer d if it is not already set. Return the updated value of d.",
                "constraints": [
                    "1 <= n <= 10^5",
                    "1 <= m <= 10^5",
                    "1 <= a <= 9",
                    "1 <= b <= 10^5",
                    "1 <= c <= 9",
                    "1 <= d <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "n = 1, m = 2\na = 3, b = 4\nc = 5, d = 6",
                        "output": "3 1 38",
                        "explanation": "1 XOR 2 equals 3. The 3rd bit of 4 (1-indexed) is set, so the check function returns 1. Setting the 5th bit (0-indexed) of 6 results in the binary representation 100110, which is 38 in decimal."
                    },
                    {
                        "input": "n = 7, m = 8\na = 9, b = 10\nc = 11, d = 12",
                        "output": "15 0 2060",
                        "explanation": "7 XOR 8 equals 15. The 9th bit of 10 (1-indexed) is not set, so the check function returns 0. Setting the 11th bit (0-indexed) of 12 results in the binary representation 100000001100, which is 2060 in decimal."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to perform XOR operation on two integers.\n    int XOR(int n, int m) {\n        return n ^ m;\n    }\n    \n    // Function to check if a certain bit is set in an integer.\n    int check(int a, int b) {\n        if ((b >> (a - 1)) & 1)\n            return true;\n        return false;\n    }\n    \n    // Function to set a certain bit in an integer.\n    int setBit(int c, int d) {\n        return ((1 << c) | d);\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution {\r\n  \r\n    // Function to perform XOR operation on two integers\r\n    public int XOR(int n, int m)\r\n    { \r\n        return n ^ m;\r\n    }\r\n  \r\n    // Function to check if a particular bit is set in an integer\r\n    public int check(int a, int b) {\r\n        // Right shift b by (a-1) and bitwise AND with 1 to check if the desired bit is set\r\n        if (((b >> (a - 1)) & 1) == 1){\r\n            return 1; // Return 1 if the bit is set\r\n        }\r\n        return 0; // Return 0 if the bit is not set\r\n    }\r\n  \r\n    // Function to set a particular bit in an integer\r\n    public int setBit(int c, int d) {\r\n        // Left shift 1 by c positions and bitwise OR with d to set the desired bit\r\n        return ((1 << c) | d);\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n\r\n    #Function to find the XOR of two numbers.\r\n    def XOR(self, n, m):\r\n        return (n^m)\r\n\r\n    #Function to check if a particular bit is set or not.\r\n    def check(self, a, b):\r\n        return (b>>(a-1))&1\r\n\r\n    #Function to set the value of a particular bit.\r\n    def setBit(self, c, d):\r\n        return ((1 << c) | d)",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number} m\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to perform XOR of two numbers.\n    XOR(n, m)\n    {\n        return (n^m);\n    }\n\n    /**\n     * @param {number} a\n     * @param {number} b\n     * @returns {boolean}\n    */\n\n    //Function to check if a and b are same or not.\n    check(a, b)\n    {\n        return (b>>(a-1))&1;\n    }\n\n    /**\n     * @param {number[]} c\n     * @param {number} d\n     * @returns {number[]}\n    */\n\n    //Function to set the kth bit of c.\n    setBit(c, d)\n    {\n        return ((1 << c) | d);\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}