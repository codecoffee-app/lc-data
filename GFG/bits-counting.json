{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 875885,
            "title": "Bits Counting",
            "titleSlug": "bits-counting",
            "content": "<p><span >Given an integer <strong>n</strong>, return an <strong>array</strong> ans of size<strong> n + 1</strong>, where each element i (0 &le; i &le; n) represents the count of 1s in the binary form of i.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input: </strong>n = 2\n<strong>Output:&nbsp;</strong>[0, 1, 1]\n<strong>Explanation</strong>:<br />0  --&gt; 0<br />1 --&gt; 1<br />2 --&gt; 10<br /></span></pre>\n<pre><span ><strong>Input</strong>: n = 5\n<strong>Output: </strong>[0, 1, 1, 2, 1, 2] \n<strong>Explanation</strong>: <br />0  --&gt; 0<br />1 --&gt; 1<br />2 --&gt; 10<br />3 --&gt; 11<br />4 --&gt; 100<br />5 --&gt; 101</span></pre>\n<p><span ><strong>Constraints:</strong><br />0 &le; n &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative integer `n`, create and return an array `ans` of length `n + 1`. Each element `ans[i]` (where 0 <= i <= n) should store the number of 1s in the binary representation of the integer `i`.",
                "constraints": [
                    "0 <= n <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "[0, 1, 1]",
                        "explanation": "The binary representations and corresponding counts of 1s are: 0 (0 ones), 1 (1 one), 2 (1 one)."
                    },
                    {
                        "input": "5",
                        "output": "[0, 1, 1, 2, 1, 2]",
                        "explanation": "The binary representations and corresponding counts of 1s are: 0 (0 ones), 1 (1 one), 2 (1 one), 3 (2 ones), 4 (1 one), 5 (2 ones)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use previous results to compute new ones. Divide numbers into ranges like [2-3], [4-7], and check if odd/even status helps in counting 1s.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Bit Magic",
                "slug": "bit-magic"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [
            "bloomberg",
            "facebook",
            "adobe",
            "google",
            "amazon",
            "microsoft",
            "apple",
            "yahoo",
            "nvidia",
            "uber"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int dp[100005];\n\n    int func(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 1;\n        if (dp[n] != -1)\n            return dp[n];\n        if (n % 2)\n            return dp[n] = 1 + func(n / 2);\n        else\n            return dp[n] = func(n / 2);\n    }\n\n    vector<int> countBits(int n) {\n        memset(dp, -1, sizeof(dp));\n        vector<int> v;\n        for (int i = 0; i <= n; i++) {\n            v.push_back(func(i));\n        }\n        return v;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    private int[] dp = new int[100005];\n\n    private int func(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (dp[n] != -1) {\n            return dp[n];\n        }\n        if (n % 2 == 1) {\n            return dp[n] = 1 + func(n / 2);\n        } else {\n            return dp[n] = func(n / 2);\n        }\n    }\n\n    public static ArrayList<Integer> countBits(int n) {\n        Solution sol = new Solution();\n        Arrays.fill(sol.dp, -1); // Initialize dp array with -1\n        ArrayList<Integer> result = new ArrayList<>();\n\n        for (int i = 0; i <= n; i++) {\n            result.add(sol.func(i));\n        }\n        return result;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\n\nclass Solution:\n\n    def countBits(self, n: int) -> List[int]:\n        dp = [-1] * (n + 1)  # Initialize dp array with -1\n\n        def func(x):\n            if x == 0:\n                return 0\n            if x == 1:\n                return 1\n            if dp[x] != -1:\n                return dp[x]\n            if x % 2 == 1:\n                dp[x] = 1 + func(x // 2)\n            else:\n                dp[x] = func(x // 2)\n            return dp[x]\n\n        result = []\n        for i in range(n + 1):\n            result.append(func(i))\n\n        return result\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param {number} n\n     * @returns {number[]}\n     */\n    countBits(n) {\n        let dp = new Array(n + 1).fill(-1); // Initialize dp array with -1\n\n        const func = (x) => {\n            if (x === 0) {\n                return 0;\n            }\n            if (x === 1) {\n                return 1;\n            }\n            if (dp[x] !== -1) {\n                return dp[x];\n            }\n            if (x % 2 === 1) {\n                dp[x] = 1 + func(Math.floor(x / 2));\n            } else {\n                dp[x] = func(Math.floor(x / 2));\n            }\n            return dp[x];\n        };\n\n        let result = [];\n        for (let i = 0; i <= n; i++) {\n            result.push(func(i));\n        }\n\n        return result;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}