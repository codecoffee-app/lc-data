{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700786,
            "title": "Bitwise Operators",
            "titleSlug": "bitwise-operators",
            "content": "<p><span style=\"font-size: 18px;\">Bitwise operators are useful when we want to work with bits. Here, we'll take a look at them.</span></p>\n<p><span style=\"font-size: 18px;\">Given three positive integers <strong>a</strong>, <strong>b</strong>, and <strong>c</strong>. Your task is to perform some bitwise operations on them as given below:<br /><strong>1.</strong> d = a ^ a<br /><strong>2. </strong>e = c ^ b<br /><strong>3.</strong> f = a &amp; b<br /><strong>4.</strong> g = c | (a ^ a)<br /><strong>5.</strong>&nbsp;h&nbsp;= ~e<br /><strong>Note: ^ </strong>is for xor. The working of bitwise operators can be found <a href=\"https://www.geeksforgeeks.org/bitwise-operators-in-c-cpp/\">here</a>. You have to print all the 5 values in different lines according to order given.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example:</strong></span></p>\n<pre style=\"background: #eee; border: 1px solid #ccc; padding: 5px 10px;\"><span style=\"font-size: 18px;\"><strong>Input:</strong><br />a = 4<br />b = 8<br />c = 2<br /><strong>Output:</strong><br />0<br />10<br />0<br />2<br />-11</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= A, B, C &lt;= 10<sup>6</sup></span></p>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 18px;\">Video:</span></strong></p>\n<p><iframe src=\"https://www.youtube.com/embed/WFy9SFJsAWQ\" width=\"560\" height=\"315\" frameborder=\"0\"></iframe></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given three positive integers a, b, and c, perform the following bitwise operations and print the results in order:\n\n1.  d = a ^ a (XOR)\n2.  e = c ^ b (XOR)\n3.  f = a & b (AND)\n4.  g = c | (a ^ a) (OR)\n5.  h = ~e (NOT)\n\nPrint d, e, f, g, and h on separate lines.",
                "constraints": [
                    "1 <= A, B, C <= 1000000"
                ],
                "testcases": [
                    {
                        "input": "a = 4\nb = 8\nc = 2",
                        "output": "0\n10\n0\n2\n-11",
                        "explanation": "a = 4 (0100 in binary)\nb = 8 (1000 in binary)\nc = 2 (0010 in binary)\n\n1. d = 4 ^ 4 = 0\n2. e = 2 ^ 8 = 10\n3. f = 4 & 8 = 0\n4. g = 2 | (4 ^ 4) = 2 | 0 = 2\n5. h = ~10 = -11 (Two's complement representation)"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Print all computations in different line as per sequence</p>"
        ],
        "relatedTopics": [
            {
                "name": "cpp-operator",
                "slug": "cpp-operator"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nvoid bitWiseOperation(int a, int b, int c) {\n\n    // performing exclusive OR operation on a with itself returns 0\n    cout << (a ^ a) << endl;\n\n    // performing exclusive OR operation on c and b\n    cout << (c ^ b) << endl;\n\n    // performing AND operation on a and b\n    cout << (a & b) << endl;\n\n    // performing exclusive OR operation on a with itself and OR operation with c\n    cout << (c | (a ^ a)) << endl;\n\n    // performing NOT operation on exclusive OR operation of c and b\n    cout << ~(c ^ b) << endl;\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "// Back-end complete function Template for Java\r\n\r\nclass Geeks {\r\n    static void bitWiseOperation(int a, int b, int c) {\r\n\r\n        // performing bitwise XOR operation on a and a and printing the result\r\n        System.out.println(a ^ a);\r\n\r\n        // performing bitwise XOR operation on c and b and printing the result\r\n        System.out.println(c ^ b);\r\n\r\n        // performing bitwise AND operation on a and b and printing the result\r\n        System.out.println(a & b);\r\n\r\n        // performing bitwise XOR operation on a and a, bitwise OR operation on c and the result, and printing the result\r\n        System.out.println(c | (a ^ a));\r\n\r\n        // performing bitwise XOR operation on c and b, complementing the result, and printing the result\r\n        System.out.println(~(c ^ b));\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\ndef bitWiseOperation(a, b, c):\n    # Perform bitwise operations\n    # Performing exclusive OR operation on a with itself returns 0\n    print(a ^ a)\n\n    # Performing exclusive OR operation on c and b\n    print(c ^ b)\n\n    # Performing AND operation on a and b\n    print(a & b)\n\n    # Performing exclusive OR operation on a with itself and OR operation with c\n    print(c | (a ^ a))\n\n    # Performing NOT operation on exclusive OR operation of c and b\n    print(~(c ^ b))\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public void bitWiseOperation(int a, int b, int c)\n    {\n        //performing exclusive OR operation on a with itself returns 0\n        Console.WriteLine(a ^ a);\n\n        //performing exclusive OR operation on c and b\n        Console.WriteLine(c ^ b);\n\n        //performing AND operation on a and b\n        Console.WriteLine(a & b);\n\n        //performing exclusive OR operation on a with itself and OR operation with c\n        Console.WriteLine(c | (a ^ a));\n\n        //performing NOT operation on exclusive OR operation of c and b\n        Console.WriteLine(~(c ^ b));\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// Back-end complete function Template for javascript\r\n\r\nclass Solution {\r\n    utility(a, b, c) {\r\n        console.log(a ^ a); // Perform bitwise xor operation on a with itself and print the result\r\n        console.log(c ^ b); // Perform bitwise xor operation on c and b and print the result\r\n        console.log(a & b); // Perform bitwise and operation on a and b and print the result\r\n        console.log(c | (a ^ a)); // Perform bitwise or operation on c and the result of bitwise xor operation on a with itself and print the result\r\n        console.log(~(c ^ b)); // Perform bitwise not operation on the result of bitwise xor operation on c and b and print the result\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}