{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701257,
            "title": "Boolean Matrix",
            "titleSlug": "boolean-matrix-problem-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">Given a boolean matrix <strong>mat[],</strong> where each cell contains either 0 or 1, modify it such that if a matrix cell matrix[i][j] is 1 then all the cells in its i</span><sup>th</sup><span style=\"font-size: 18px;\">&nbsp;row and j</span><sup>th</sup><span style=\"font-size: 18px;\">&nbsp;column will become 1.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">mat</span>[][] = [[1, 0], [0, 0]]\n<strong>Output: </strong>[[1, 1], [1, 0]] </span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>Only cell that has 1 is at (0,0) so all cells in row 0 are modified to 1 and all cells in column 0 are modified to 1.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> <span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">mat</span>[][] = [[1, 0, 0], [1, 0, 0], [1, 0, 0], [0, 0, 0]]</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>[[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 0, 0]]</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>The position of cells that have 1 in the original matrix are (0, 0), (1, 0) and (2, 0). Therefore, all cells in row 0, 1, 2 are and column 0 are modified to 1. </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">mat</span>[][] = [[0, 0], [0, 0]]\n<strong>Output: </strong>[[0, 0], [0, 0]] </span>\n<span style=\"font-size: 18px;\"><strong>Explanation: </strong>There is no cell that contains 1, so mat[] will remain the same.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; mat.size(), mat[0].size() &le; 10<sup>3</sup><br />0 &le; mat[i][j] &le; 1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a boolean matrix `mat`, where each cell contains either 0 or 1, modify the matrix such that if `mat[i][j]` is 1, then all cells in its i-th row and j-th column become 1.",
                "constraints": [
                    "1 <= mat.size(), mat[0].size() <= 10^3",
                    "0 <= mat[i][j] <= 1"
                ],
                "testcases": [
                    {
                        "input": "[[1, 0], [0, 0]]",
                        "output": "[[1, 1], [1, 0]]",
                        "explanation": "The cell at (0, 0) is 1.  Therefore, all cells in row 0 and column 0 are set to 1."
                    },
                    {
                        "input": "[[1, 0, 0], [1, 0, 0], [1, 0, 0], [0, 0, 0]]",
                        "output": "[[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 0, 0]]",
                        "explanation": "The cells at (0, 0), (1, 0), and (2, 0) are 1.  Therefore, all cells in rows 0, 1, and 2, and column 0 are set to 1."
                    },
                    {
                        "input": "[[0, 0], [0, 0]]",
                        "output": "[[0, 0], [0, 0]]",
                        "explanation": "Since no cell contains 1, the matrix remains unchanged."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use two additional arrays to keep track of which rows and columns need to be updated. First, iterate through the matrix to identify which rows and columns have a <code>1</code>. In a second pass, use this information to update the corresponding rows and columns to all <code>1</code>s.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "\n\nclass Solution {\n  public:\n    // Function to modify the mat such that if a mat cell mat[i][j]\n    // is 1 then all the cells in its ith row and jth column will become 1.\n    void booleanMatrix(vector<vector<int>>& mat) {\n        int R = mat.size();\n        int C = mat[0].size();\n\n        // using two list to keep track of the rows and columns\n        // that needs to be updated with 1.\n        vector<int> row(R, 0);\n        vector<int> col(C, 0);\n\n        for (int i = 0; i < R; i++) {\n            for (int j = 0; j < C; j++) {\n                // if we get 1 in mat, we mark ith row and jth column as 1.\n                if (mat[i][j] == 1) {\n                    row[i] = col[j] = 1;\n                }\n            }\n        }\n\n        for (int i = 0; i < R; i++) {\n            for (int j = 0; j < C; j++) {\n                // if ith row or jth column is marked as 1, then all elements\n                // of mat in that row and column will be 1.\n                if (row[i] || col[j]) {\n                    mat[i][j] = 1;\n                }\n            }\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to modify the mat such that if a mat cell mat[i][j]\n    // is 1 then all the cells in its ith row and jth column will become 1.\n    void booleanMatrix(int mat[][]) {\n        int r = mat.length;\n        int c = mat[0].length;\n\n        // using two arrays to keep track of the rows and columns\n        // that need to be updated with 1.\n        int[] row = new int[r];\n        int[] col = new int[c];\n\n        // Traverse the matrix to identify the rows and columns that should be updated\n        for (int i = 0; i < r; i++) {\n            for (int j = 0; j < c; j++) {\n                if (mat[i][j] == 1) {\n                    row[i] = 1; // Mark the row\n                    col[j] = 1; // Mark the column\n                }\n            }\n        }\n\n        // Update the matrix based on the rows and columns that need to be modified\n        for (int i = 0; i < r; i++) {\n            for (int j = 0; j < c; j++) {\n                if (row[i] == 1 || col[j] == 1) {\n                    mat[i][j] =\n                        1; // Set the cell to 1 if its row or column needs to be updated\n                }\n            }\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\n#Function to modify the mat such that if a mat cell mat[i][j]\n#is 1 then all the cells in its ith row and jth column will become 1.\ndef booleanMatrix(mat):\n\n    R = len(mat)\n    C = len(mat[0])\n\n    #using two list to keep track of the rows and columns\n    #that needs to be updated with 1.\n    row = [0] * R\n    col = [0] * C\n\n    for i in range(0, R):\n        for j in range(0, C):\n\n            #if we get 1 in mat, we mark ith row and jth column as 1.\n            if (mat[i][j] == 1):\n                row[i] = 1\n                col[j] = 1\n\n    for i in range(0, R):\n        for j in range(0, C):\n\n            #if ith row or jth column is marked as 1, then all elements\n            #of mat in that row and column will be 1.\n            if (row[i] == 1 or col[j] == 1):\n                mat[i][j] = 1\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[][]} mat\n */\nclass Solution {\n    // Function to modify the mat such that if a mat cell mat[i][j]\n    // is 1 then all the cells in its ith row and jth column will become 1.\n    booleanMatrix(mat) {\n        let R = mat.length;\n        let C = mat[0].length;\n\n        // using two list to keep track of the rows and columns\n        // that needs to be updated with 1.\n        let row = new Array(R);\n        row.fill(0);\n        let col = new Array(C);\n        col.fill(0);\n\n        for (let i = 0; i < R; i++) {\n            for (let j = 0; j < C; j++) {\n                // if we get 1 in mat, we mark ith row and jth column as 1.\n                if (mat[i][j] == 1) {\n                    row[i] = 1;\n                    col[j] = 1;\n                }\n            }\n        }\n\n        for (let i = 0; i < R; i++) {\n            for (let j = 0; j < C; j++) {\n                // if ith row or jth column is marked as 1, then all elements\n                // of mat in that row and column will be 1.\n                if (row[i] == 1 || col[j] == 1) {\n                    mat[i][j] = 1;\n                }\n            }\n        }\n    }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}