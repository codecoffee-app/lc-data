{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705175,
            "title": "Boolean Parenthesization",
            "titleSlug": "boolean-parenthesization5610",
            "content": "<p><span style=\"font-size: 18px;\">You are given a boolean expression <strong>s&nbsp;</strong>containing<br />&nbsp;&nbsp;&nbsp; 'T' ---&gt; true<br />&nbsp;&nbsp;&nbsp; 'F' ---&gt; false&nbsp;<br />and following operators between symbols<br />&nbsp; &nbsp;&amp;&nbsp;&nbsp; ---&gt; boolean AND<br />&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp; ---&gt; boolean OR<br />&nbsp; &nbsp;^&nbsp;&nbsp; ---&gt; boolean XOR<br />Count the number of ways we can <strong>parenthesize </strong>the expression so that the value of expression evaluates to <strong>true</strong>.</span></p>\n<p><span style=\"font-size: 18px;\">Note: The answer is guaranteed to fit within a <strong>32-bit</strong> integer.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = \"T|T&amp;F^T\"\n<strong>Output:</strong> 4\n<strong>Explaination:</strong> The expression evaluates to true in 4 ways: ((T|T)&amp;(F^T)), (T|(T&amp;(F^T))), (((T|T)&amp;F)^T) and (T|((T&amp;F)^T)).</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> s = \"T^F|F\"\n<strong>Output:</strong> 2\n<strong>Explaination:</strong> The expression evaluates to true in 2 ways: ((T^F)|F) and (T^(F|F)).</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; |s| &le; 100&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For each segment find out how many ways are there to get T as result.</span></p>",
            "<p><span style=\"font-size:18px\">Use memoization to reduce time complexity.</span></p>",
            "<p><span style=\"font-size:18px\">Matrix chain multiplication problem can help you.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "intuit",
            "linkedin"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    bool evaluate(int b1, int b2, char op) {\n        if (op == '&')\n            return b1 & b2;\n        if (op == '|')\n            return b1 | b2;\n        return b1 ^ b2;\n    }\n\n    int countWays(string &s) {\n        int n = s.length();\n        vector<vector<vector<int>>> dp(n, vector<vector<int>>(n, vector<int>(2, 0)));\n\n        // Base case: Single operands (T or F)\n        for (int i = 0; i < n; i += 2) {\n            dp[i][i][1] = (s[i] == 'T');\n            dp[i][i][0] = (s[i] == 'F');\n        }\n\n        // Iterate over different substring lengths\n        for (int len = 2; len < n;\n             len += 2) { // len increases by 2 (odd indices are operators)\n            for (int i = 0; i < n - len; i += 2) {\n                int j = i + len;\n                dp[i][j][0] = dp[i][j][1] =\n                    0; // Reset values for the current subproblem\n\n                for (int k = i + 1; k < j; k += 2) { // Iterate over operators\n                    char op = s[k];\n                    int leftTrue = dp[i][k - 1][1], leftFalse = dp[i][k - 1][0];\n                    int rightTrue = dp[k + 1][j][1], rightFalse = dp[k + 1][j][0];\n\n                    // Count ways to get True or False\n                    if (evaluate(1, 1, op))\n                        dp[i][j][1] += leftTrue * rightTrue;\n                    if (evaluate(1, 0, op))\n                        dp[i][j][1] += leftTrue * rightFalse;\n                    if (evaluate(0, 1, op))\n                        dp[i][j][1] += leftFalse * rightTrue;\n                    if (evaluate(0, 0, op))\n                        dp[i][j][1] += leftFalse * rightFalse;\n\n                    if (!evaluate(1, 1, op))\n                        dp[i][j][0] += leftTrue * rightTrue;\n                    if (!evaluate(1, 0, op))\n                        dp[i][j][0] += leftTrue * rightFalse;\n                    if (!evaluate(0, 1, op))\n                        dp[i][j][0] += leftFalse * rightTrue;\n                    if (!evaluate(0, 0, op))\n                        dp[i][j][0] += leftFalse * rightFalse;\n                }\n            }\n        }\n        return dp[0][n - 1][1]; // Return ways to make entire expression True\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static boolean evaluate(int b1, int b2, char op) {\n        if (op == '&') return (b1 & b2) == 1;\n        if (op == '|') return (b1 | b2) == 1;\n        return (b1 ^ b2) == 1;\n    }\n\n    static int countWays(String s) {\n        int n = s.length();\n        int[][][] dp = new int[n][n][2];\n\n        for (int i = 0; i < n; i += 2) {\n            dp[i][i][1] = (s.charAt(i) == 'T') ? 1 : 0;\n            dp[i][i][0] = (s.charAt(i) == 'F') ? 1 : 0;\n        }\n\n        for (int len = 2; len < n; len += 2) {\n            for (int i = 0; i < n - len; i += 2) {\n                int j = i + len;\n                dp[i][j][0] = dp[i][j][1] = 0;\n\n                for (int k = i + 1; k < j; k += 2) {\n                    char op = s.charAt(k);\n                    int leftTrue = dp[i][k - 1][1], leftFalse = dp[i][k - 1][0];\n                    int rightTrue = dp[k + 1][j][1], rightFalse = dp[k + 1][j][0];\n\n                    if (evaluate(1, 1, op)) dp[i][j][1] += leftTrue * rightTrue;\n                    if (evaluate(1, 0, op)) dp[i][j][1] += leftTrue * rightFalse;\n                    if (evaluate(0, 1, op)) dp[i][j][1] += leftFalse * rightTrue;\n                    if (evaluate(0, 0, op)) dp[i][j][1] += leftFalse * rightFalse;\n\n                    if (!evaluate(1, 1, op)) dp[i][j][0] += leftTrue * rightTrue;\n                    if (!evaluate(1, 0, op)) dp[i][j][0] += leftTrue * rightFalse;\n                    if (!evaluate(0, 1, op)) dp[i][j][0] += leftFalse * rightTrue;\n                    if (!evaluate(0, 0, op)) dp[i][j][0] += leftFalse * rightFalse;\n                }\n            }\n        }\n        return dp[0][n - 1][1];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    @staticmethod\n    def evaluate(b1, b2, op):\n        if op == '&':\n            return b1 & b2\n        if op == '|':\n            return b1 | b2\n        return b1 ^ b2\n\n    def countWays(self, s):\n        n = len(s)\n        dp = [[[0, 0] for _ in range(n)] for _ in range(n)]\n\n        # Base case: Single operands (T or F)\n        for i in range(0, n, 2):\n            dp[i][i][1] = 1 if s[i] == 'T' else 0\n            dp[i][i][0] = 1 if s[i] == 'F' else 0\n\n        # Iterate over different substring lengths\n        for length in range(\n                2, n, 2):  # length increases by 2 (odd indices are operators)\n            for i in range(0, n - length, 2):\n                j = i + length\n                # Reset values for the current subproblem\n                dp[i][j][0] = dp[i][j][1] = 0\n\n                for k in range(i + 1, j, 2):  # Iterate over operators\n                    op = s[k]\n                    leftTrue, leftFalse = dp[i][k - 1][1], dp[i][k - 1][0]\n                    rightTrue, rightFalse = dp[k + 1][j][1], dp[k + 1][j][0]\n\n                    # Count ways to get True or False\n                    if Solution.evaluate(1, 1, op):\n                        dp[i][j][1] += leftTrue * rightTrue\n                    if Solution.evaluate(1, 0, op):\n                        dp[i][j][1] += leftTrue * rightFalse\n                    if Solution.evaluate(0, 1, op):\n                        dp[i][j][1] += leftFalse * rightTrue\n                    if Solution.evaluate(0, 0, op):\n                        dp[i][j][1] += leftFalse * rightFalse\n\n                    if not Solution.evaluate(1, 1, op):\n                        dp[i][j][0] += leftTrue * rightTrue\n                    if not Solution.evaluate(1, 0, op):\n                        dp[i][j][0] += leftTrue * rightFalse\n                    if not Solution.evaluate(0, 1, op):\n                        dp[i][j][0] += leftFalse * rightTrue\n                    if not Solution.evaluate(0, 0, op):\n                        dp[i][j][0] += leftFalse * rightFalse\n\n        return dp[0][n - 1][1]  # Return ways to make entire expression True\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Function to evaluate boolean operations\n    static bool Evaluate(int b1, int b2, char op) {\n        if (op == '&') return (b1 & b2) == 1;\n        if (op == '|') return (b1 | b2) == 1;\n        return (b1 ^ b2) == 1;\n    }\n\n    // Function to count the number of ways to parenthesize the boolean expression\n    public int CountWays(string s) {\n        int n = s.Length;\n        int[,,] dp = new int[n, n, 2];\n\n        // Base case: Single operands (T or F)\n        for (int i = 0; i < n; i += 2) {\n            dp[i, i, 1] = (s[i] == 'T') ? 1 : 0;\n            dp[i, i, 0] = (s[i] == 'F') ? 1 : 0;\n        }\n\n        // Iterate over different substring lengths\n        for (int len = 2; len < n; len += 2) {\n            for (int i = 0; i < n - len; i += 2) {\n                int j = i + len;\n                dp[i, j, 0] = dp[i, j, 1] = 0;\n\n                // Iterate through possible operator positions\n                for (int k = i + 1; k < j; k += 2) {\n                    char op = s[k];\n                    int leftTrue = dp[i, k - 1, 1], leftFalse = dp[i, k - 1, 0];\n                    int rightTrue = dp[k + 1, j, 1], rightFalse = dp[k + 1, j, 0];\n\n                    // Calculate ways to get True\n                    if (Evaluate(1, 1, op)) dp[i, j, 1] += leftTrue * rightTrue;\n                    if (Evaluate(1, 0, op)) dp[i, j, 1] += leftTrue * rightFalse;\n                    if (Evaluate(0, 1, op)) dp[i, j, 1] += leftFalse * rightTrue;\n                    if (Evaluate(0, 0, op)) dp[i, j, 1] += leftFalse * rightFalse;\n\n                    // Calculate ways to get False\n                    if (!Evaluate(1, 1, op)) dp[i, j, 0] += leftTrue * rightTrue;\n                    if (!Evaluate(1, 0, op)) dp[i, j, 0] += leftTrue * rightFalse;\n                    if (!Evaluate(0, 1, op)) dp[i, j, 0] += leftFalse * rightTrue;\n                    if (!Evaluate(0, 0, op)) dp[i, j, 0] += leftFalse * rightFalse;\n                }\n            }\n        }\n\n        // Return the number of ways to parenthesize to get 'True'\n        return dp[0, n - 1, 1];\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "/**\n * @param {string} s\n * @returns {number}\n */\n\nclass Solution {\n    // Function to evaluate boolean operations\n    evaluate(b1, b2, op) {\n        if (op === \"&\") return b1 & b2;\n        if (op === \"|\") return b1 | b2;\n        return b1 ^ b2;\n    }\n\n    // Function to count the number of ways to parenthesize the boolean expression\n    countWays(s) {\n        let n = s.length;\n\n        // Initializing dp array\n        let dp = Array.from({length : n}, () => Array.from({length : n}, () => [0, 0]));\n\n        // Base case: Single operands (T or F)\n        for (let i = 0; i < n; i += 2) {\n            dp[i][i][1] = s[i] === \"T\" ? 1 : 0;\n            dp[i][i][0] = s[i] === \"F\" ? 1 : 0;\n        }\n\n        // Iterate over different substring lengths\n        for (let len = 2; len < n; len += 2) {\n            for (let i = 0; i < n - len; i += 2) {\n                let j = i + len;\n                dp[i][j][0] = dp[i][j][1] = 0;\n\n                // Iterate through possible operator positions\n                for (let k = i + 1; k < j; k += 2) {\n                    let op = s[k];\n                    let leftTrue = dp[i][k - 1][1], leftFalse = dp[i][k - 1][0];\n                    let rightTrue = dp[k + 1][j][1], rightFalse = dp[k + 1][j][0];\n\n                    // Calculate ways to get True\n                    if (this.evaluate(1, 1, op)) dp[i][j][1] += leftTrue * rightTrue;\n                    if (this.evaluate(1, 0, op)) dp[i][j][1] += leftTrue * rightFalse;\n                    if (this.evaluate(0, 1, op)) dp[i][j][1] += leftFalse * rightTrue;\n                    if (this.evaluate(0, 0, op)) dp[i][j][1] += leftFalse * rightFalse;\n\n                    // Calculate ways to get False\n                    if (!this.evaluate(1, 1, op)) dp[i][j][0] += leftTrue * rightTrue;\n                    if (!this.evaluate(1, 0, op)) dp[i][j][0] += leftTrue * rightFalse;\n                    if (!this.evaluate(0, 1, op)) dp[i][j][0] += leftFalse * rightTrue;\n                    if (!this.evaluate(0, 0, op)) dp[i][j][0] += leftFalse * rightFalse;\n                }\n            }\n        }\n\n        // Return the number of ways to parenthesize to get 'True'\n        return dp[0][n - 1][1];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}