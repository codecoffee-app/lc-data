{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700160,
            "title": "Bottom View of Binary Tree",
            "titleSlug": "bottom-view-of-binary-tree",
            "content": "<p><span >Given a binary <strong>tree</strong>, return an array where elements represent the bottom view of the binary tree from left to right.</span></p>\n<p><span >Note: If there are <strong>multiple </strong>bottom-most nodes for a horizontal distance from the root, then the <strong>latter </strong>one in the level traversal is considered. For example, in the below diagram, 3 and 4 are both the bottommost nodes at a horizontal distance of 0, here <strong>4</strong> will be considered.</span></p>\n<p><span >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp; \\<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp; \\&nbsp;&nbsp; &nbsp; /&nbsp;&nbsp; \\<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3 4&nbsp;&nbsp;&nbsp;&nbsp; 25<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp; /&nbsp; &nbsp; \\&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10 &nbsp;&nbsp; &nbsp;&nbsp; 14</span></p>\n<p><span >For the above tree, the output should be 5 10 <strong>4</strong> 14 25.</span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span ><strong>Input:\n</strong>\\t 1\n&nbsp;    /   \\\n&nbsp;   3     2\n<strong>Output: </strong>3 1 2<strong>\nExplanation: </strong>First case represents a tree with 3 nodes and 2 edges where root is 1, left child of 1 is 3 and right child of 1 is 2.\n<img src=\"https://contribute.geeksforgeeks.org/wp-content/uploads/BT-1.jpg\" alt=\"\" width=\"400\" height=\"202\" />\nThus bottom view of the binary tree will be 3 1 2.</span></pre>\n<pre><span ><strong>Input:\n</strong>\\t   10\n&nbsp;\\t/    \\\n&nbsp;     20    30\n&nbsp;    /  \\\n&nbsp;   40   60\n<strong>Output: </strong>40 20 60 30</span></pre>\n<pre><span ><strong>Input:\n</strong>\\t  1\n&nbsp;\\t/   \n&nbsp;     2\n<strong>Output: </strong>2 1</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= number of nodes &lt;= 10<sup>5</sup><br />1 &lt;= node-&gt;data &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree, return an array representing the bottom view of the tree from left to right. The bottom view includes the nodes that are visible when the tree is viewed from the bottom. If multiple nodes are at the same horizontal distance from the root and at the bottom-most level, the rightmost node among them should be considered.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node->data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "     1\n    /   \\\n   3     2",
                        "output": "3 1 2",
                        "explanation": "The bottom view of the tree with root 1, left child 3, and right child 2 is 3 1 2."
                    },
                    {
                        "input": "    10\n   /    \\\n  20    30\n /  \\\n40   60",
                        "output": "40 20 60 30",
                        "explanation": null
                    },
                    {
                        "input": "  1\n /   \n2",
                        "output": "2 1",
                        "explanation": null
                    },
                    {
                        "input": "        20\n       /   \\\n      8     22\n     / \\    / \\\n    5   3  4   25\n       /   \\\n      10   14",
                        "output": "5 10 4 14 25",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use level order traversal with a queue to track the horizontal distance of nodes, updating a map to ensure the bottom-most node at each horizontal distance is recorded.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "paytm",
            "flipkart",
            "accolite",
            "amazon",
            "oyo-rooms",
            "walmart",
            "coupondunia"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Function to return a list containing the bottom view of the given tree.\r\n\r\nclass Solution {\r\n  public:\r\n    vector <int> bottomView(Node *root)\r\n    {\r\n        vector <int> res;\r\n        if (root == NULL)\r\n            return res;\r\n    \r\n        //initializing a variable 'hd' with 0 for the root element.\r\n        int hd = 0;\r\n    \r\n        //TreeMap which stores key value pair sorted on key value.\r\n        map<int, int> m;\r\n        map<Node  *, int> mh;\r\n    \r\n        //Queue to store tree nodes in level order traversal.\r\n        queue<Node *> q;\r\n    \r\n        //assigning initialized horizontal distance value to \r\n        //root node and adding it to the queue.\r\n        mh[root] = hd;\r\n        q.push(root);\r\n    \r\n        \r\n        while (!q.empty())\r\n        {\r\n            Node *temp = q.front();\r\n            q.pop();\r\n    \r\n            //extracting the horizontal distance value from dequeued tree node.\r\n            hd = mh[temp];\r\n    \r\n            //putting the dequeued tree node to TreeMap having key as  \r\n            //horizontal distance. Every time we find a node having same\r\n            //horizontal distance we need to replace the data in the map.\r\n            m[hd] = temp->data;\r\n    \r\n            //if the dequeued node has a left child, adding it to \r\n            //the queue with a horizontal distance hd-1.\r\n            if (temp->left != NULL)\r\n            {\r\n                mh[temp->left] = hd-1;\r\n                q.push(temp->left);\r\n            }\r\n    \r\n            //if the dequeued node has a right child adding it to \r\n            //the queue with a horizontal distance hd+1.\r\n            if (temp->right != NULL)\r\n            {\r\n                mh[temp->right] = hd+1;\r\n                q.push(temp->right);\r\n            }\r\n        }\r\n        \r\n        //traversing the map elements and storing nodes in the list.\r\n        for (map<int, int>::iterator i = m.begin(); i != m.end(); ++i)\r\n            res.push_back (i->second);\r\n            \r\n        //returning the output list.\r\n        return res;\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    //Function to return a list containing the bottom view of the given tree.\r\n    public ArrayList <Integer> bottomView(Node root)\r\n    {\r\n        ArrayList <Integer> res = new ArrayList <Integer>(0);\r\n        if (root == null)\r\n            return res; \r\n \r\n        //initializing a variable 'hd' with 0 for the root element.\r\n        int hd = 0;\r\n \r\n        //TreeMap which stores key value pair sorted on key value.\r\n        Map<Integer, Integer> map = new TreeMap<>();\r\n \r\n        //Queue to store tree nodes in level order traversal.\r\n        Queue<Node> queue = new LinkedList<Node>();\r\n \r\n        //assigning initialized horizontal distance value to \r\n        //root node and adding it to the queue.\r\n        root.hd = hd;\r\n        queue.add(root);\r\n \r\n        while (!queue.isEmpty())\r\n        {\r\n            Node temp = queue.remove();\r\n \r\n            //extracting the horizontal distance value from dequeued tree node.\r\n            hd = temp.hd;\r\n \r\n            //putting the dequeued tree node to TreeMap having key as  \r\n            //horizontal distance. Every time we find a node having same\r\n            //horizontal distance we need to replace the data in the map.\r\n            map.put(hd, temp.data);\r\n \r\n            //if the dequeued node has a left child, adding it to \r\n            //the queue with a horizontal distance hd-1.\r\n            if (temp.left != null)\r\n            {\r\n                temp.left.hd = hd-1;\r\n                queue.add(temp.left);\r\n            }\r\n            //if the dequeued node has a right child adding it to \r\n            //the queue with a horizontal distance hd+1.\r\n            if (temp.right != null)\r\n            {\r\n                temp.right.hd = hd+1;\r\n                queue.add(temp.right);\r\n            }\r\n        }\r\n        Set<Map.Entry<Integer, Integer>> set = map.entrySet();\r\n \r\n        Iterator<Map.Entry<Integer, Integer>> iterator = set.iterator();\r\n \r\n        //traversing the map elements and storing nodes in the list.\r\n        while (iterator.hasNext())\r\n        {\r\n            Map.Entry<Integer, Integer> me = iterator.next();\r\n            res.add(me.getValue());\r\n        }\r\n        //returning the output list.\r\n        return res;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    #Function to return a list containing the bottom view of the given tree.\r\n    def bottomView(self, root):\r\n        if (root == None):\r\n            return\r\n        \r\n        # Initialize a variable 'hd' with 0\r\n        # for the root element.\r\n        hd = 0\r\n        \r\n        # TreeMap which stores key value pair\r\n        # sorted on key value\r\n        m = dict()\r\n        mh = dict()\r\n     \r\n        # Queue to store tree nodes in level\r\n        # order traversal\r\n        q = []\r\n     \r\n        # Assign initialized horizontal distance\r\n        # value to root node and add it to the queue.\r\n        mh[root] = hd\r\n        \r\n        # In STL, append() is used enqueue an item\r\n        q.append(root)  \r\n     \r\n        # Loop until the queue is empty (standard\r\n        # level order loop)\r\n        while (len(q) != 0):\r\n            temp = q[0]\r\n            \r\n            # In STL, pop() is used dequeue an item\r\n            q.pop(0)  \r\n            \r\n            # Extract the horizontal distance value\r\n            # from the dequeued tree node.\r\n            hd = mh[temp]\r\n     \r\n            # Put the dequeued tree node to TreeMap\r\n            # having key as horizontal distance. Every\r\n            # time we find a node having same horizontal\r\n            # distance we need to replace the data in\r\n            # the map.\r\n            m[hd] = temp.data\r\n     \r\n            # If the dequeued node has a left child, add\r\n            # it to the queue with a horizontal distance hd-1.\r\n            if (temp.left != None):\r\n                mh[temp.left] = hd - 1\r\n                q.append(temp.left)\r\n     \r\n            # If the dequeued node has a right child, add\r\n            # it to the queue with a horizontal distance\r\n            # hd+1.\r\n            if (temp.right != None):\r\n                mh[temp.right] = hd + 1\r\n                q.append(temp.right)\r\n        ans = []\r\n        for i in sorted(m.keys()):\r\n            ans.append(m[i])\r\n            \r\n        return ans\r\n    ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\n/**\r\n * @param {Node} root\r\n * @returns {number[]}\r\n*/\r\n\r\n/*\r\nclass Node{\r\n    constructor(data){\r\n        this.data = data;\r\n        this.left = null;\r\n        this.right = null;\r\n    }\r\n}\r\n*/\r\n\r\nclass Solution \r\n{\r\n    //Function to return a list containing the bottom view of the given tree.\r\n    bottomView(root)\r\n    {\r\n        let res = [];\r\n        if (root === null)\r\n            return res;\r\n    \r\n        //initializing a variable 'hd' with 0 for the root element.\r\n        let hd = 0;\r\n    \r\n        //TreeMap which stores key value pair sorted on key value.\r\n        let m = new Map();\r\n        let mh = new Map();\r\n    \r\n        //Queue to store tree nodes in level order traversal.\r\n        let q = [];\r\n        let start_q = 0;\r\n    \r\n        //assigning initialized horizontal distance value to \r\n        //root node and adding it to the queue.\r\n        mh.set(root, hd);\r\n        q.push(root);\r\n    \r\n        while (q.length !== start_q)\r\n        {\r\n            let temp = q[start_q];\r\n            start_q++;\r\n    \r\n            //extracting the horizontal distance value from dequeued tree node.\r\n            if(!mh.has(temp))\r\n                mh.set(temp, 0);\r\n            hd = mh.get(temp);\r\n    \r\n            //putting the dequeued tree node to TreeMap having key as  \r\n            //horizontal distance. Every time we find a node having same\r\n            //horizontal distance we need to replace the data in the map.\r\n            m.set(hd, temp.data);\r\n    \r\n            //if the dequeued node has a left child, adding it to \r\n            //the queue with a horizontal distance hd-1.\r\n            if (temp.left !== null)\r\n            {\r\n                mh.set(temp.left, hd-1);\r\n                q.push(temp.left);\r\n            }\r\n            //if the dequeued node has a right child adding it to \r\n            //the queue with a horizontal distance hd+1.\r\n            if (temp.right !== null)\r\n            {\r\n                mh.set(temp.right, hd+1);\r\n                q.push(temp.right);\r\n            }\r\n        }\r\n        \r\n        let entri = m.entries();\r\n        \r\n        let list = [];\r\n        \r\n        for(var ele of entri)\r\n            list.push(ele);\r\n        \r\n        //sorting the map elements according to horizontal distance.\r\n        list.sort(function (a, b) {\r\n                    if(a[0] == b[0])\r\n                        return a[1] - b[1];\r\n                    return a[0] - b[0];\r\n                });\r\n        \r\n        //traversing the map elements and storing nodes in the list.\r\n        for(let i=0; i<list.length; i++){\r\n            res.push(list[i][1]);\r\n        }\r\n        //returning the output list.  \r\n        return res;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}