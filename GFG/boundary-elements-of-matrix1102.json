{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705232,
            "title": "Boundary Elements of Matrix",
            "titleSlug": "boundary-elements-of-matrix1102",
            "content": "<p><span style=\"font-size:18px\">Given an <strong>n</strong><strong>xn</strong>&nbsp;matrix .In the given matrix, you have to find&nbsp;the <strong>boundary&nbsp;elements</strong> of the matrix.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>[[1, 2, 3] \r\n&nbsp;\\t [4, 5, 6] \r\n\\t  [7, 8, 9]]\r\n<strong>Output: </strong>1 2 3 4 6 7 8 9</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: [[</strong>1, 2]\r\n\\t  [3, 4]]\r\n<strong>Output: </strong>1 2 3 4</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read or print anything. Your task is to complete the function&nbsp;<strong>BoundaryElements()</strong>&nbsp;which takes matrix as input parameter and returns a list containing the boundary elements of the matrix in the same order in which they appear in the input matrix.</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(n<sup>2</sup>)<br />\r\n<strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br />\r\n&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= n &lt;= 100</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an n x n matrix, extract and return its boundary elements in the order they appear within the matrix.",
                "constraints": [
                    "1 <= n <= 100"
                ],
                "testcases": [
                    {
                        "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
                        "output": "1 2 3 4 6 7 8 9",
                        "explanation": "The boundary elements are the elements on the first row, last row, first column, and last column."
                    },
                    {
                        "input": "[[1, 2], [3, 4]]",
                        "output": "1 2 3 4",
                        "explanation": "The boundary elements are the elements on the first row, last row, first column, and last column."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Find boundary rows coloumns.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C",
                "full_func": "// Back-end complete function Template for C\r\n\r\nint* BoundaryElements(int n, int matrix[][n]) {\r\n    // calculate the length of the answer array based on the size of the matrix\r\n    int len = 4*(n-1);\r\n    // if the matrix has only one element, length is 1\r\n    if(n == 1)  len = 1;\r\n\r\n    // dynamically allocate memory for the answer array\r\n    int *ans = malloc(sizeof(int) * (len));\r\n    // initialize the position counter\r\n    int pos = 0;\r\n\r\n    // iterate over the matrix to find the boundary elements\r\n    for(int i = 0; i < n; i++) {\r\n        for(int j = 0; j < n; j++) {\r\n            // if the current element is on the boundary, store it in the answer array\r\n            if(i == 0 || i == n-1 || j == 0 || j == n-1)\r\n                ans[pos++] = matrix[i][j];\r\n        }\r\n    }\r\n    // return the answer array\r\n    return ans;\r\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "// Function to find the boundary elements of a matrix\nclass Solution {\npublic:\n    vector<int> BoundaryElements(vector<vector<int>>& matrix) {\n        vector<int> ans; // Initialize an empty vector to store the boundary elements\n        int n = matrix.size(); // Get the size of the matrix\n        \n        // Loop through each element in the matrix\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                // Check if the current element is on the boundary\n                if (i == 0 or i == n-1 or j == 0 or j == n-1)\n                    ans.push_back(matrix[i][j]); // If yes, add it to the vector\n            }\n        }\n        return ans; // Return the vector of boundary elements\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public List<int> BoundaryElements(List<List<int>> matrix)\n    {\n        List<int> ans = new List<int>(); // Initialize an empty list to store the boundary elements\n        int n = matrix.Count; // Get the size of the matrix\n        \n        // Loop through each element in the matrix\n        for (int i = 0; i < n; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                // Check if the current element is on the boundary\n                if (i == 0 || i == n-1 || j == 0 || j == n-1)\n                    ans.Add(matrix[i][j]); // If yes, add it to the list\n            }\n        }\n        return ans; // Return the list of boundary elements\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}