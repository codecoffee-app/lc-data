{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700204,
            "title": "Tree Boundary Traversal",
            "titleSlug": "boundary-traversal-of-binary-tree",
            "content": "<p><span >Given a Binary Tree, find its Boundary Traversal. The traversal should be in the following order:&nbsp;</span></p>\n<ol>\n<li>\n<p data-pm-slice=\"1 1 []\"><span ><strong>Left Boundary:</strong> This includes all the nodes on the path from the root to the leftmost leaf node. You must prefer the left child over the right child when traversing. Do not include leaf nodes in this section.</span></p>\n</li>\n<li>\n<p data-pm-slice=\"1 1 []\"><span ><strong>Leaf Nodes:</strong> All leaf nodes, in left-to-right order, that are not part of the left or right boundary.</span></p>\n</li>\n<li>\n<p data-pm-slice=\"1 1 []\"><span ><strong>Reverse Right Boundary: </strong>This includes all the nodes on the path from the rightmost leaf node to the root, traversed in reverse order. You must prefer the right child over the left child when traversing. Do not include the root in this section if it was already included in the left boundary.</span></p>\n</li>\n</ol>\n<p><span >Note: If the root doesn't have a left subtree or right subtree, then the root itself is the left or right boundary.&nbsp;</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> root[] = [1, 2, 3, 4, 5, 6, 7, N, N, 8, 9, N, N, N, N]<strong>\nOutput: </strong>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">3</span>]<strong>\nExplanation:\n</strong><strong><img style=\"height: 300px; width: 300px;\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/20211103204119/graph4-300x300.png\" alt=\"\" /></strong>\n</span></pre>\n<pre><span ><strong>Input: </strong>root[] = [1, 2, N, 4, 9, 6, 5, N, 3, N, N, N, N 7, 8]<strong>\nOutput: </strong>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>]\n<strong>Explanation:\n</strong><a href=\"https://contribute.geeksforgeeks.org/wp-content/uploads/boundary.png\"><img style=\"float: left; height: 300px; width: 300px;\" src=\"https://media.geeksforgeeks.org/wp-content/uploads/20211103204646/graph1-300x300.png\" alt=\"\" /></a>\n\n\n\n\n\n\n\n\n\n\n\nAs the root doesn't have a right subtree, the right boundary is not included in the traversal.</span></pre>\n<pre><span ><strong>Input: </strong>root[] = [1, N, 2, N, 3, N, 4, N, N] \n    <span class=\"hljs-number\">1</span>\n     <span class=\"hljs-string\">\\</span>\n\\t<span class=\"hljs-number\">2</span>\n\\t <span class=\"hljs-string\">\\</span>\n\\t  <span class=\"hljs-number\">3</span>\n\\t   <span class=\"hljs-string\">\\</span>\n\\t    <span class=\"hljs-number\">4</span>\n<strong>\nOutput: </strong>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>]\n<strong>Explanation:<br /></strong><span class=\"hljs-attr\">Left boundary:</span> [<span class=\"hljs-number\">1</span>] <span class=\"hljs-string\">(as</span> <span class=\"hljs-string\">there</span> <span class=\"hljs-string\">is</span> <span class=\"hljs-literal\">no</span> <span class=\"hljs-string\">left</span> <span class=\"hljs-string\">subtree)</span>\n<span class=\"hljs-attr\">Leaf nodes:</span> [<span class=\"hljs-number\">4</span>]\n<span class=\"hljs-attr\">Right boundary:</span> [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>] <span class=\"hljs-string\">(in</span> <span class=\"hljs-string\">reverse</span> <span class=\"hljs-string\">order)</span>\n<span class=\"hljs-attr\">Final traversal:</span> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>]</span></pre>\n<p><span ><strong>Constraints:</strong></span><br /><span >1 &le; number of nodes &le; 10<sup>5</sup></span><br /><span >1 &le; node-&gt;data &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Tree, find its Boundary Traversal. The traversal should follow this order:\n\n1.  **Left Boundary:**  Nodes from the root to the leftmost leaf, preferring the left child.  Leaf nodes are *not* included.\n2.  **Leaf Nodes:** All leaf nodes in left-to-right order that are *not* part of the left or right boundaries.\n3.  **Reverse Right Boundary:** Nodes from the rightmost leaf to the root, traversed in reverse order, preferring the right child. The root is *not* included if it was already included in the left boundary.\n\nNote: If the root has no left or right subtrees, the root itself forms the left or right boundary, respectively.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node->data <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "root[] = [1, 2, 3, 4, 5, 6, 7, N, N, 8, 9, N, N, N, N]",
                        "output": "[1, 2, 4, 8, 9, 6, 7, 3]",
                        "explanation": "The left boundary is [1, 2, 4].  The leaf nodes are [8, 9, 6, 7]. The reverse right boundary is [3]."
                    },
                    {
                        "input": "root[] = [1, 2, N, 4, 9, 6, 5, N, 3, N, N, N, N, 7, 8]",
                        "output": "[1, 2, 4, 6, 5, 7, 8]",
                        "explanation": "The left boundary is [1, 2, 4]. The leaf nodes are [6, 5, 7, 8].  Since there is no right subtree, there is no right boundary."
                    },
                    {
                        "input": "root[] = [1, N, 2, N, 3, N, 4, N, N]",
                        "output": "[1, 4, 3, 2]",
                        "explanation": "Left boundary is [1]. Leaf nodes are [4]. Right boundary is [3, 2] in reverse order."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Start by traversing the left boundary (excluding leaves), then collect all leaf nodes, and finish with the right boundary in reverse order.</span></p>",
            "<p>https://www.geeksforgeeks.org/boundary-traversal-of-binary-tree/</p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "flipkart",
            "morgan-stanley",
            "accolite",
            "amazon",
            "microsoft",
            "oyo-rooms",
            "samsung",
            "snapdeal",
            "factset",
            "hike",
            "payu",
            "kritikal-solutions"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "/*\n// Tree Node\nclass Node {\n  public:\n    int data;\n    Node* left;\n    Node* right;\n\n    // Constructor to initialize a new node\n    Node(int val) {\n        data = val;\n        left = NULL;\n        right = NULL;\n    }\n};\n*/\nclass Solution {\n    void printLeaves(Node* root, vector<int>& res) {\n        if (root == NULL)\n            return;\n\n        printLeaves(root->left, res);\n\n        // Print it if it is a leaf node\n        if (!(root->left) && !(root->right))\n            res.push_back(root->data);\n\n        printLeaves(root->right, res);\n    }\n\n    // A function to print all left boundary nodes, except a leaf node.\n    // Print the nodes in TOP DOWN manner\n    void printBoundaryLeft(Node* root, vector<int>& res) {\n        if (root == NULL)\n            return;\n\n        if (root->left) {\n\n            // to ensure top down order, print the node\n            // before calling itself for left subtree\n            res.push_back(root->data);\n            printBoundaryLeft(root->left, res);\n        } else if (root->right) {\n            res.push_back(root->data);\n            printBoundaryLeft(root->right, res);\n        }\n        // do nothing if it is a leaf node, this way we avoid\n        // duplicates in output\n    }\n\n    // A function to print all right boundary nodes, except a leaf node\n    // Print the nodes in BOTTOM UP manner\n    void printBoundaryRight(Node* root, vector<int>& res) {\n        if (root == NULL)\n            return;\n\n        if (root->right) {\n            // to ensure bottom up order, first call for right\n            // subtree, then print this node\n            printBoundaryRight(root->right, res);\n            res.push_back(root->data);\n        } else if (root->left) {\n            printBoundaryRight(root->left, res);\n            res.push_back(root->data);\n        }\n        // do nothing if it is a leaf node, this way we avoid\n        // duplicates in output\n    }\n\n    // A function to do boundary traversal of a given binary tree\n  public:\n    vector<int> boundaryTraversal(Node* root) {\n        vector<int> res;\n        if (root == NULL)\n            return res;\n\n        res.push_back(root->data);\n\n        // Print the left boundary in top-down manner.\n        printBoundaryLeft(root->left, res);\n\n        // Print all leaf nodes\n        printLeaves(root->left, res);\n        printLeaves(root->right, res);\n\n        // Print the right boundary in bottom-up manner\n        printBoundaryRight(root->right, res);\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to print the leaves of a binary tree\n    void printLeaves(Node node, ArrayList<Integer> res) {\n        if (node != null) {\n            printLeaves(node.left,\n                        res); // recursively calling the function on the left child\n\n            if (node.left == null &&\n                node.right == null) // checking if the node is a leaf (no children)\n                res.add(node.data); // adding the leaf node to the result list\n\n            printLeaves(node.right,\n                        res); // recursively calling the function on the right child\n        }\n    }\n\n    // Function to print the left boundary of a binary tree\n    void printBoundaryLeft(Node node, ArrayList<Integer> res) {\n        if (node != null) {\n            if (node.left != null) // if the left child exists\n            {\n                res.add(node.data); // adding the current node to the result list\n                printBoundaryLeft(\n                    node.left,\n                    res); // recursively calling the function on the left child\n            } else if (node.right !=\n                       null) // if the left child doesn't exist but the right child does\n            {\n                res.add(node.data); // adding the current node to the result list\n                printBoundaryLeft(\n                    node.right,\n                    res); // recursively calling the function on the right child\n            }\n        }\n    }\n\n    // Function to print the right boundary of a binary tree\n    void printBoundaryRight(Node node, ArrayList<Integer> res) {\n        if (node != null) {\n            if (node.right != null) // if the right child exists\n            {\n                printBoundaryRight(\n                    node.right,\n                    res); // recursively calling the function on the right child\n                res.add(node.data); // adding the current node to the result list\n            } else if (node.left !=\n                       null) // if the right child doesn't exist but the left child does\n            {\n                printBoundaryRight(\n                    node.left,\n                    res); // recursively calling the function on the left child\n                res.add(node.data); // adding the current node to the result list\n            }\n        }\n    }\n\n    // Function to calculate the boundary of a binary tree\n    ArrayList<Integer> boundaryTraversal(Node node) {\n        ArrayList<Integer> res =\n            new ArrayList<Integer>(0); // creating an empty result list\n\n        if (node != null) res.add(node.data); // adding the root node to the result list\n\n        printBoundaryLeft(node.left, res); // printing the left boundary of the tree\n\n        printLeaves(node.left, res);  // printing the leaves of the left subtree\n        printLeaves(node.right, res); // printing the leaves of the right subtree\n\n        printBoundaryRight(node.right, res); // printing the right boundary of the tree\n\n        return res; // returning the final result list\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n\n    def printLeaves(self, root, res):\n        if root is None:\n            return\n\n        self.printLeaves(root.left, res)\n\n        # Add to result if it's a leaf node\n        if not root.left and not root.right:\n            res.append(root.data)\n\n        self.printLeaves(root.right, res)\n\n    # A function to print all left boundary nodes, except a leaf node\n    # Print the nodes in TOP DOWN manner\n    def printBoundaryLeft(self, root, res):\n        if root is None:\n            return\n\n        if root.left:\n            # to ensure top-down order, add the node before\n            # recursive call for the left subtree\n            res.append(root.data)\n            self.printBoundaryLeft(root.left, res)\n        elif root.right:\n            res.append(root.data)\n            self.printBoundaryLeft(root.right, res)\n\n        # do nothing if it is a leaf node\n\n    # A function to print all right boundary nodes, except a leaf node\n    # Print the nodes in BOTTOM UP manner\n    def printBoundaryRight(self, root, res):\n        if root is None:\n            return\n\n        if root.right:\n            # to ensure bottom-up order, call first for right subtree\n            self.printBoundaryRight(root.right, res)\n            res.append(root.data)\n        elif root.left:\n            self.printBoundaryRight(root.left, res)\n            res.append(root.data)\n\n        # do nothing if it is a leaf node\n\n    # A function to do boundary traversal of a given binary tree\n    def boundaryTraversal(self, root):\n        res = []\n        if root is None:\n            return res\n\n        # Add root to result\n        res.append(root.data)\n\n        # Print the left boundary in top-down manner\n        self.printBoundaryLeft(root.left, res)\n\n        # Print all leaf nodes\n        self.printLeaves(root.left, res)\n        self.printLeaves(root.right, res)\n\n        # Print the right boundary in bottom-up manner\n        self.printBoundaryRight(root.right, res)\n\n        return res\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\nclass Solution {\n    boundaryTraversal(root) {\n        if (root == null) return [];\n\n        let res = [];\n\n        res.push(root.data);\n\n        function printBoundaryLeft(root) {\n            if (root == null) return;\n\n            if (root.left) {\n                res.push(root.data);\n                printBoundaryLeft(root.left);\n            } else if (root.right) {\n                res.push(root.data);\n                printBoundaryLeft(root.right);\n            }\n        }\n\n        function printBoundaryRight(root) {\n            if (root == null) return;\n\n            if (root.right) {\n                printBoundaryRight(root.right);\n                res.push(root.data);\n            } else if (root.left) {\n                printBoundaryRight(root.left);\n                res.push(root.data);\n            }\n        }\n\n        function printLeaves(root) {\n            if (root == null) return;\n\n            printLeaves(root.left);\n\n            if (!(root.left) && !(root.right)) {\n                res.push(root.data);\n            }\n\n            printLeaves(root.right);\n        }\n\n        printBoundaryLeft(root.left);\n        printLeaves(root.left);\n        printLeaves(root.right);\n        printBoundaryRight(root.right);\n\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}