{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701271,
            "title": "Matrix Boundary Traversal",
            "titleSlug": "boundary-traversal-of-matrix-1587115620",
            "content": "<p><span style=\"font-size: 18px;\">You are given a matrix <strong>mat</strong>. The task is to perform boundary traversal on the matrix in a clockwise manner starting from the first row of the matrix. </span><br /><br /><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: mat[][] = [[1, 2, 3, 4],[5, 6, 7, 8],[9, 10, 11, 12],[13, 14, 15,16]]\n<strong>Output</strong>: [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5]\n<strong>Explanation</strong>: The boundary traversal is: [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5]\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>:mat[][] = [[12, 11, 10, 9],[8, 7, 6, 5],[4, 3, 2, 1]]\n<strong>Output</strong>: [12, 11, 10, 9, 5, 1, 2, 3, 4, 8]<br /><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">: The boundary traversal is: </span>[12, 11, 10, 9, 5, 1, 2, 3, 4, 8]</span></pre>\n<pre><span ><strong>Input</strong>:mat[][] = [[12, 11],[4, 3]]\n<strong>Output</strong>: [12, 11, 3, 4]</span><br /><span ><strong style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation</strong><span style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">: The boundary traversal is: </span>[12, 11, 3, 4]</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= mat.size()&lt;= 1000<br /></span><span style=\"font-size: 18px;\">1 &lt;= mat[0].size()&lt;= 1000<br />0 &lt;= mat[i][j] &lt;= 1000</span></pre>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    // Function to return list of integers that form the boundary\n    // traversal of the mat in a clockwise manner.\n    vector<int> boundaryTraversal(vector<vector<int> > mat) {\n        int n = mat.size();\n        int m = mat[0].size();\n        vector<int> output;\n\n        // base case if number of row or column is 1 then adding all elements.\n        if (n == 1) {\n            int i = 0;\n            while (i < m)\n                output.push_back(mat[0][i++]);\n        } else if (m == 1) {\n            int i = 0;\n            while (i < n)\n                output.push_back(mat[i++][0]);\n        } else {\n            // we take care of fact that we don't add any number multiple times.\n\n            // traversing first row and adding elements in the list.\n            for (int j = 0; j < m; j++)\n                output.push_back(mat[0][j]);\n\n            // traversing last column and adding elements in the list.\n            for (int j = 1; j < n; j++)\n                output.push_back(mat[j][m - 1]);\n\n            // traversing last row and adding elements in the list.\n            for (int j = m - 2; j >= 0; j--)\n                output.push_back(mat[n - 1][j]);\n\n            // traversing first column and adding elements in the list.\n            for (int j = n - 2; j >= 1; j--)\n                output.push_back(mat[j][0]);\n        }\n        // returning the list.\n        return output;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to return list of integers that form the boundary\n    // traversal of the mat in a clockwise manner.\n    static ArrayList<Integer> boundaryTraversal(int mat[][]) {\n        int n = mat.length;\n        int m = mat[0].length;\n        ArrayList<Integer> output = new ArrayList<Integer>();\n\n        // base case if number of row or column is 1 then adding all elements.\n        if (n == 1) {\n            int i = 0;\n            while (i < m) output.add(mat[0][i++]);\n        } else if (m == 1) {\n            int i = 0;\n            while (i < n) output.add(mat[i++][0]);\n        } else {\n            // we take care of fact that we don't add any number multiple times.\n\n            // traversing first row and adding elements in the list.\n            for (int j = 0; j < m; j++) output.add(mat[0][j]);\n\n            // traversing last column and adding elements in the list.\n            for (int j = 1; j < n; j++) output.add(mat[j][m - 1]);\n\n            // traversing last row and adding elements in the list.\n            for (int j = m - 2; j >= 0; j--) output.add(mat[n - 1][j]);\n\n            // traversing first column and adding elements in the list.\n            for (int j = n - 2; j >= 1; j--) output.add(mat[j][0]);\n        }\n        // returning the list.\n        return output;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to return list of integers that form the boundary\n    #traversal of the mat in a clockwise manner.\n    def BoundaryTraversal(self, mat):\n        n = len(mat)\n        m = len(mat[0])\n        output = []\n\n        #base case if number of row or column is 1 then adding all elements.\n        if (n == 1):\n            i = 0\n            while i < m:\n                output.append(mat[0][i])\n                i += 1\n        elif (m == 1):\n            i = 0\n            while i < n:\n                output.append(mat[i][0])\n                i += 1\n        else:\n\n            #we take care of fact that we don't add any number multiple times.\n\n            #traversing first row and adding elements in the list.\n            row_ind = 0\n            col_ind = 0\n            while col_ind < m:\n                output.append(mat[row_ind][col_ind])\n                col_ind += 1\n\n            #traversing last column and adding elements in the list.\n            col_ind = m - 1\n            row_ind += 1\n            while row_ind < n:\n                output.append(mat[row_ind][col_ind])\n                row_ind += 1\n\n            #traversing last row and adding elements in the list.\n            row_ind = n - 1\n            col_ind -= 1\n            while col_ind > -1:\n                output.append(mat[row_ind][col_ind])\n                col_ind -= 1\n\n            #traversing first column and adding elements in the list.\n            col_ind = 0\n            row_ind -= 1\n            while row_ind > 0:\n                output.append(mat[row_ind][col_ind])\n                row_ind -= 1\n\n        #returning the list.\n        return output\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n/**\n * @param {number[][]} mat\n * @param {number} n\n * @param {number} m\n * @returns {number[]}\n */\nclass Solution {\n    // Function to return list of integers that form the boundary\n    // traversal of the mat in a clockwise manner.\n    boundaryTraversal(mat) {\n        let n = mat.length;\n        let m = mat[0].length;\n        let output = new Array();\n\n        // base case if number of row or column is 1 then adding all elements.\n        if (n == 1) {\n            let i = 0;\n            while (i < m) output.push(mat[0][i++]);\n        } else if (m == 1) {\n            let i = 0;\n            while (i < n) output.push(mat[i++][0]);\n        } else {\n            // we take care of fact that we don't add any number multiple times.\n\n            // traversing first row and adding elements in the list.\n            for (let j = 0; j < m; j++) output.push(mat[0][j]);\n\n            // traversing last column and adding elements in the list.\n            for (let j = 1; j < n; j++) output.push(mat[j][m - 1]);\n\n            // traversing last row and adding elements in the list.\n            for (let j = m - 2; j >= 0; j--) output.push(mat[n - 1][j]);\n\n            // traversing first column and adding elements in the list.\n            for (let j = n - 2; j >= 1; j--) output.push(mat[j][0]);\n        }\n        // returning the list.\n        return output;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}