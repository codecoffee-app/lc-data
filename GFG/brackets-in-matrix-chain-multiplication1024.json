{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705397,
            "title": "Brackets in Matrix Chain Multiplication",
            "titleSlug": "brackets-in-matrix-chain-multiplication1024",
            "content": "<p><span >Given an array&nbsp;<strong>arr[]</strong>&nbsp;of length&nbsp;<strong>n&nbsp;</strong>used to denote the dimensions of a series of&nbsp;<strong>matrices</strong>&nbsp;such that the dimension of&nbsp;<strong>i'th</strong>&nbsp;matrix is&nbsp;<strong>arr[i] * arr[i+1]</strong>. There are a total of&nbsp;<strong>n-1</strong>&nbsp;matrices. Find the most efficient way to multiply these matrices together.&nbsp;<br />As in&nbsp;<a href=\"https://www.geeksforgeeks.org/matrix-chain-multiplication-dp-8/\" target=\"_blank\" rel=\"noopener\"><em><strong>MCM</strong></em></a>, you were returning the most effective count but this time return the&nbsp;<strong>string</strong>&nbsp;which is formed of&nbsp;<strong>A - Z&nbsp;</strong>(only Uppercase) denoting matrices &amp;&nbsp;<strong>Brackets</strong>(&nbsp;<strong>\"(\"</strong>&nbsp;<strong>\")\"</strong>&nbsp;) denoting multiplication symbols. For example, if n =11, the matrixes can be denoted as A - K as n&lt;=26 &amp; brackets as multiplication symbols.</span></p>\n<p><span ><strong>NOTE:</strong></span></p>\n<ol>\n<li><span >Each multiplication is denoted by putting&nbsp;<strong>open &amp; closed</strong>&nbsp;brackets to the matrices multiplied &amp; also, please note that the order of matrix multiplication matters, as matrix multiplication is non-commutative&nbsp;<strong>A*B != B*A</strong></span></li>\n<li><span style=\"font-size: 18.6667px;\">As there can be&nbsp;</span><strong style=\"font-size: 18.6667px;\">multiple</strong><span style=\"font-size: 18.6667px;\"> possible answers, the console would print \"</span><strong style=\"font-size: 18.6667px;\">true</strong><span style=\"font-size: 18.6667px;\">\" for the&nbsp;</span><strong style=\"font-size: 18.6667px;\">correct</strong><span style=\"font-size: 18.6667px;\"> string and \"</span><strong style=\"font-size: 18.6667px;\">false</strong><span style=\"font-size: 18.6667px;\">\" for the&nbsp;</span><strong style=\"font-size: 18.6667px;\">incorrect</strong><span style=\"font-size: 18.6667px;\">&nbsp;string. You need to only return a&nbsp;</span><strong style=\"font-size: 18.6667px;\">string</strong><span style=\"font-size: 18.6667px;\">&nbsp;that performs a minimum number of multiplications.</span></li>\n</ol>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr[] = [40, 20, 30, 10, 30]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Let's divide this into matrix(only 4 are possible) </span><span >[ [40, 20] -&gt; A</span><span >, [20, 30] -&gt; B, [30, 10] -&gt;C, [10, 30] -&gt; D ]<br />First we perform multiplication of B &amp; C -&gt; (BC), then we multiply A to (BC) -&gt; (A(BC)), then we multiply D to (A(BC)) -&gt; ((A(BC))D)<br />so the solution returned the string <strong>((A(BC))D)</strong>,</span> <span >which performs minimum multiplications. The total number of multiplications are 20*30*10 + 40*20*10 + 40*10*30 = 26,000.<br /></span></pre>\n<pre><span ><strong >Input:</strong><span > arr[] = [10, 20, 30]\n</span><strong >Output:</strong><span > true\n</span><strong >Explanation:</strong><span > </span>There is only one way to multiply two matrices: (AB): The cost for the multiplication will be 6000\n</span></pre>\n<pre><span ><strong>Input:</strong> arr = [3, 3, 3]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The solution returned the string <strong>(AB)</strong>, which performs minimum multiplications. The total number of multiplications are (3*3*3) = 27.</span></pre>\n<p><span ><strong>Constraints:</strong><br />2 &le; arr.size() &le; 26&nbsp;<br />1 &le; arr[i] &le; 100&nbsp;</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` of length `n` representing the dimensions of a series of matrices, where the dimension of the i'th matrix is `arr[i] * arr[i+1]`. There are a total of `n-1` matrices (denoted by uppercase letters A-Z). The goal is to find the most efficient way to multiply these matrices together and return the string representing the multiplication order, using parentheses to denote matrix multiplication. The order of operations matters (A*B != B*A). The returned string should represent the optimal parenthesization leading to the minimum number of scalar multiplications.",
                "constraints": [
                    "2 <= arr.size() <= 26",
                    "1 <= arr[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "[40, 20, 30, 10, 30]",
                        "output": "((A(BC))D)",
                        "explanation": "Matrices: A (40x20), B (20x30), C (30x10), D (10x30).  The optimal parenthesization is ((A(BC))D).  The total number of multiplications are 20*30*10 + 40*20*10 + 40*10*30 = 26,000."
                    },
                    {
                        "input": "[10, 20, 30]",
                        "output": "(AB)",
                        "explanation": "Matrices: A (10x20), B (20x30). The only possible multiplication order is (AB). The cost is 10*20*30 = 6000."
                    },
                    {
                        "input": "[3, 3, 3]",
                        "output": "(AB)",
                        "explanation": "Matrices: A (3x3), B (3x3). The only possible multiplication order is (AB). The cost is 3*3*3 = 27."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">The number of multiplications for n*m and m*p matrix is m*n*p.&nbsp;</span></p>",
            "<p><span style=\"font-size:18px\">For an interval from l to r find out where you should break the sequence to get the minimum number of multiplications. This property leads to optimal substructure property and dynamic programming can be applied.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution {\n  public:\n    string st;\n\n    // Function to print the parenthesis of matrix chain multiplication\n    void printParenthesis(int i, int j, int n, vector<vector<int>> &bracket,\n                          char &name) {\n        // If i and j are equal, it means only one matrix is remaining\n        if (i == j) {\n            st += name; // add the name of matrix to the string\n            name++;     // increment the name for the next matrix\n            return;\n        }\n        st += '('; // add '(' to the string\n        printParenthesis(\n            i, bracket[i][j], n, bracket,\n            name); // recursively print the parenthesis for the left side of the split\n        printParenthesis(\n            bracket[i][j] + 1, j, n, bracket,\n            name); // recursively print the parenthesis for the right side of the split\n        st += ')'; // add ')' to the string\n    }\n\n    // Function to calculate the minimum number of operations needed to multiply the\n    // matrices\n    string matrixChainOrder(vector<int> &arr) {\n        int n = arr.size();\n        vector<vector<int>> m(\n            n, vector<int>(\n                   n)); // create a 2D array to store the minimum number of operations\n        vector<vector<int>> bracket(\n            n, vector<int>(n)); // create a 2D array to store the split position for\n                                // each matrix multiplication\n        for (int i = 1; i < n; i++)\n            m[i][i] = 0;              // initialize the diagonal elements to 0\n        for (int L = 2; L < n; L++) { // iterate over the lengths of the sequences\n            for (int i = 1; i < n - L + 1;\n                 i++) {            // iterate over the starting indices of the sequences\n                int j = i + L - 1; // calculate the ending index of the sequence\n                m[i][j] = INT_MAX; // set the minimum number of operations to a large\n                                   // value at first\n                for (int k = i; k <= j - 1;\n                     k++) { // iterate over possible split positions\n                    int q = m[i][k] + m[k + 1][j] +\n                            arr[i - 1] * arr[k] *\n                                arr[j]; // calculate the number of operations needed for\n                                        // this split\n                    if (q < m[i][j]) {  // if this split has less operations than the\n                                        // current minimum, update the values\n                        m[i][j] = q;\n                        bracket[i][j] = k;\n                    }\n                }\n            }\n        }\n        char name = 'A'; // initialize the name of the matrices\n        printParenthesis(1, n - 1, n, bracket,\n                         name); // call the function to print the parenthesis\n        return st;              // return the string containing the parenthesis\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    static String str = \"\";\n    static char name = 'A';\n\n    static String matrixChainOrder(int arr[]) {\n        int n = arr.length;\n        str = \"\";\n        name = 'A';\n        int[][] dp = new int[n][n];\n        int[][] bracket = new int[n][n];\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                dp[i][j] = -1;\n            }\n        }\n\n        solve(arr, 1, n - 1, dp, bracket);\n        printOptimalParenthesis(1, n - 1, bracket);\n        return str;\n    }\n\n    public static void printOptimalParenthesis(int i, int j, int[][] memoization) {\n        if (i == j) {\n            str = str + name;\n            name++;\n        } else {\n            int k = memoization[i][j];\n            str = str + \"(\";\n            printOptimalParenthesis(i, k, memoization);\n            printOptimalParenthesis(k + 1, j, memoization);\n            str = str + \")\";\n        }\n    }\n\n    static int solve(int[] arr, int i, int j, int[][] dp, int[][] bracket) {\n        if (i >= j) {\n            return 0;\n        }\n\n        if (dp[i][j] != -1) return dp[i][j];\n        int min = Integer.MAX_VALUE;\n        for (int k = i; k < j; k++) {\n            int temp = solve(arr, i, k, dp, bracket) +\n                       solve(arr, k + 1, j, dp, bracket) + arr[i - 1] * arr[k] * arr[j];\n            if (min > temp) {\n                min = Math.min(min, temp);\n                dp[i][j] = min;\n                bracket[i][j] = k;\n            }\n        }\n        return min;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def __init__(self):\n        self.st = \"\"\n        self.name = 'A'\n\n    # Function to print the parenthesis of matrix chain multiplication\n    def printParenthesis(self, i, j, n, bracket):\n        # If i and j are equal, it means only one matrix is remaining\n        if i == j:\n            self.st += self.name  # add the name of the matrix to the string\n            self.name = chr(ord(self.name) +\n                            1)  # increment the name for the next matrix\n            return\n        self.st += '('  # add '(' to the string\n        self.printParenthesis(\n            i, bracket[i][j], n, bracket\n        )  # recursively print the parenthesis for the left side of the split\n        self.printParenthesis(\n            bracket[i][j] + 1, j, n, bracket\n        )  # recursively print the parenthesis for the right side of the split\n        self.st += ')'  # add ')' to the string\n\n    # Function to calculate the minimum number of operations needed to multiply the matrices\n    def matrixChainOrder(self, arr):\n        n = len(arr)\n        m = [[0] * n for _ in range(n)\n             ]  # create a 2D array to store the minimum number of operations\n        bracket = [\n            [0] * n for _ in range(n)\n        ]  # create a 2D array to store the split position for each matrix multiplication\n\n        for i in range(1, n):\n            m[i][i] = 0  # initialize the diagonal elements to 0\n\n        for L in range(2, n):  # iterate over the lengths of the sequences\n            for i in range(\n                    1, n - L +\n                    1):  # iterate over the starting indices of the sequences\n                j = i + L - 1  # calculate the ending index of the sequence\n                m[i][j] = float(\n                    'inf'\n                )  # set the minimum number of operations to a large value at first\n                for k in range(i, j):  # iterate over possible split positions\n                    q = m[i][k] + m[k + 1][j] + arr[i - 1] * arr[k] * arr[\n                        j]  # calculate the number of operations needed for this split\n                    if q < m[i][\n                            j]:  # if this split has fewer operations than the current minimum, update the values\n                        m[i][j] = q\n                        bracket[i][j] = k\n\n        self.printParenthesis(\n            1, n - 1, n, bracket)  # call the function to print the parenthesis\n        return self.st  # return the string containing the parenthesis\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public string st;\n\n    public Solution() { st = \"\"; }\n\n    // Function to print the parenthesis of matrix chain multiplication\n    public char PrintParenthesis(int i, int j, int n, int[,] bracket, char name) {\n        // If i and j are equal, it means only one matrix is remaining\n        if (i == j) {\n            st += name; // add the name of matrix to the string\n            name++;     // increment the name for the next matrix\n            return name;\n        }\n        st += '('; // add '(' to the string\n        name = PrintParenthesis(\n            i, bracket[i, j], n, bracket,\n            name); // recursively print the parenthesis for the left side of the split\n        name = PrintParenthesis(\n            bracket[i, j] + 1, j, n, bracket,\n            name); // recursively print the parenthesis for the right side of the split\n        st += ')'; // add ')' to the string\n        return name;\n    }\n\n    // Function to calculate the minimum number of operations needed to multiply the\n    // matrices\n    public string matrixChainOrder(int[] arr) {\n        int n = arr.Length; // get the number of matrices\n        int[,] m =\n            new int[n,\n                    n]; // create a 2D array to store the minimum number of operations\n        int[,] bracket = new int[n, n]; // create a 2D array to store the split position\n                                        // for each matrix multiplication\n        for (int i = 1; i < n; i++)\n            m[i, i] = 0;              // initialize the diagonal elements to 0\n        for (int L = 2; L < n; L++) { // iterate over the lengths of the sequences\n            for (int i = 1; i < n - L + 1;\n                 i++) {            // iterate over the starting indices of the sequences\n                int j = i + L - 1; // calculate the ending index of the sequence\n                m[i, j] = int.MaxValue; // set the minimum number of operations to a\n                                        // large value at first\n                for (int k = i; k <= j - 1;\n                     k++) { // iterate over possible split positions\n                    int q = m[i, k] + m[k + 1, j] +\n                            arr[i - 1] * arr[k] *\n                                arr[j]; // calculate the number of operations needed for\n                                        // this split\n                    if (q < m[i, j]) {  // if this split has less operations than the\n                                        // current minimum, update the values\n                        m[i, j] = q;\n                        bracket[i, j] = k;\n                    }\n                }\n            }\n        }\n        char name = 'A'; // initialize the name of the matrices\n        PrintParenthesis(1, n - 1, n, bracket,\n                         name); // call the function to print the parenthesis\n        return st;              // return the string containing the parenthesis\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    constructor() { this.st = ''; }\n\n    printParenthesis(i, j, n, bracket, name) {\n        if (i === j) {\n            this.st += name;\n            name = String.fromCharCode(name.charCodeAt(0) + 1);\n            return name;\n        }\n        this.st += '(';\n        name = this.printParenthesis(i, bracket[i][j], n, bracket, name);\n        name = this.printParenthesis(bracket[i][j] + 1, j, n, bracket, name);\n        this.st += ')';\n        return name;\n    }\n\n    matrixChainOrder(arr) {\n        let n = arr.length;\n        let m = Array.from({length : n}, () => Array(n).fill(0));\n        let bracket = Array.from({length : n}, () => Array(n).fill(0));\n\n        for (let L = 2; L < n; L++) {\n            for (let i = 1; i < n - L + 1; i++) {\n                let j = i + L - 1;\n                m[i][j] = Number.MAX_SAFE_INTEGER;\n                for (let k = i; k <= j - 1; k++) {\n                    let q = m[i][k] + m[k + 1][j] + arr[i - 1] * arr[k] * arr[j];\n                    if (q < m[i][j]) {\n                        m[i][j] = q;\n                        bracket[i][j] = k;\n                    }\n                }\n            }\n        }\n        let name = 'A';\n        this.printParenthesis(1, n - 1, n, bracket, name);\n        return this.st;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}