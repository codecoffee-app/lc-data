{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704704,
            "title": "Brain Game",
            "titleSlug": "brain-game1742",
            "content": "<p><span style=\"font-size: 18px;\">2 players A and&nbsp;B take&nbsp;turns alternatively to play a game in which they have N numbers on a paper. In one turn, a player can replace one of the numbers by any of its factor (except for 1 &amp; the number itself).&nbsp;The player who is unable to make a move looses the game. Find the winner of the game if A starts the game and both play optimally.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>nums = [5, 7, 3]\n<strong>Output: </strong>B\n<strong>Explanation: </strong>Since all the numbers are prime,\n</span><span style=\"font-size: 18px;\">so A will not be able to make the first move. </span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>nums = [2, 4, 7, 11]\n<strong>Outptut: </strong>A\n<strong>Explanation: </strong>In the first move A will replace 4\nby 2, so the numbers will become [2, 2, 7, 11]\nnow B will not be able to make a move since all \nthe remaining numbers can only be divided by 1 \nor the number itself.  </span>\n\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>brainGame()&nbsp;</strong>which takes the list of numbers as input parameter and returns true if&nbsp;A wins and false if B wins.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(N<sup>2</sup>)<br /><strong>Expected Space Complexity:&nbsp;</strong>O(N)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints</strong><br />1 &lt;= N &lt;= 1000<br />1 &lt;= nums[i] &lt;= 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Two players, A and B, play a game with N numbers. They take turns replacing a number with one of its factors (excluding 1 and the number itself). The player who cannot make a move loses. Given the initial numbers and knowing A starts first and both play optimally, determine the winner.",
                "constraints": [
                    "1 <= N <= 1000",
                    "1 <= nums[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[5, 7, 3]",
                        "output": "B",
                        "explanation": "All numbers are prime. Player A cannot make a move, so player B wins."
                    },
                    {
                        "input": "[2, 4, 7, 11]",
                        "output": "A",
                        "explanation": "Player A replaces 4 with 2, resulting in the numbers [2, 2, 7, 11]. Player B cannot make a move since all remaining numbers are prime. Therefore, A wins."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use&nbsp;the concepts of&nbsp;combinatorics.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution{\r\n\tpublic:\r\n    bool brainGame(vector<int>nums) {\r\n    \tvector<int>a(1005); // create a vector to store the maximum count of divisors for each number\r\n    \tfor(int i = 2; i<= 1000; i++){ // iterate from 2 to 1000\r\n    \t\tfor(int j = 2*i; j <= 1000; j+=i) // iterate and mark all multiples of i in a as having at least one additional divisor\r\n    \t\t\ta[j] = max(a[j], 1 + a[i]); // take the maximum count of divisors between the current value and i+1\r\n    \t}\r\n    \tint x = 0; // initialize x as 0\r\n    \tfor(int i = 0; i < nums.size(); i++){ // iterate through the input numbers\r\n    \t\tx = x ^ a[nums[i]]; // use bitwise XOR to calculate the result of x and a[nums[i]]\r\n    \t}\r\n    \tif(x == 0) // if x is 0\r\n    \t\treturn false; // return false\r\n    \treturn true; // otherwise, return true\r\n    }\r\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    public boolean brainGame(int[] nums)\n    {\n        int []a = new int[1005];    // array to store maximum count of prime factors for each number\n        \n        // calculating maximum prime factors of each number from 2 to 1000\n    \tfor(int i = 2; i<= 1000; i++){\n    \t\tfor(int j = 2*i; j <= 1000; j+=i)\n    \t\t\ta[j] = Math.max(a[j], 1 + a[i]);    // updating maximum prime factors count\n    \t}\n    \t\n    \tint x = 0;    // variable to store the XOR result\n        \n        // calculating XOR of maximum prime factors count of given numbers\n    \tfor(int i = 0; i < nums.length; i++){\n    \t\tx = x ^ a[nums[i]];    // XOR operation\n    \t}\n    \t\n    \tif(x == 0)\n    \t\treturn false;    // If XOR result is 0, return false\n    \t\n    \treturn true;    // If XOR result is not 0, return true\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def brainGame(self, nums):\n        a = [0] * 1005\n        # Calculating the maximum number of consecutive prime factors for each number from 2 to 1000\n        for i in range(2, 1001):\n            for j in range(2 * i, 1001, i):\n                # Updating the value in the array to store the maximum number of consecutive prime factors\n                a[j] = max(a[j], 1 + a[i])\n        x = 0\n        # XORing the maximum number of consecutive prime factors for each number in the given list\n        for i in range(len(nums)):\n            x = x ^ a[nums[i]]\n        # If the result of XOR operation is 0, return False, otherwise return True\n        if (x == 0):\n            return False\n        return True\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    //Function to check if all elements of the array are even.\n    public bool brainGame(List<int> nums)\n    {\n        List<int> a = new List<int>(1005); // initialize the list with a count of 1005\n        for(int i = 0; i <= 1000; i++){ // iterate from 0 to 1000\n            a.Add(0); // add 0 as the initial value for each element in the list\n        }\n        for(int i = 2; i<= 1000; i++){ // iterate from 2 to 1000\n            for(int j = 2*i; j <= 1000; j+=i) // iterate and mark all multiples of i in a as having at least one additional divisor\n                a[j] = Math.Max(a[j], 1 + a[i]); // take the maximum count of divisors between the current value and i+1\n        }\n        int x = 0; // initialize x as 0\n        for(int i = 0; i < nums.Count; i++){ // iterate through the input numbers\n            x = x ^ a[nums[i]]; // use bitwise XOR to calculate the result of x and a[nums[i]]\n        }\n        if(x == 0) // if x is 0\n            return false; // return false\n        return true; // otherwise, return true\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number[]} nums\n * @returns {boolean}\n */\n\nclass Solution {\n    //Function for the brain game.\n    brainGame(nums) {\n        const a = new Array(1005).fill(0);\n        // Calculating the maximum number of consecutive prime factors for each number from 2 to 1000\n        for (let i = 2; i <= 1000; ++i) {\n            for (let j = 2 * i; j <= 1000; j += i) {\n                // Updating the value in the array to store the maximum number of consecutive prime factors\n                a[j] = Math.max(a[j], 1 + a[i]);\n            }\n        }\n        let x = 0;\n        // XORing the maximum number of consecutive prime factors for each number in the given list\n        for (let i = 0; i < nums.length; ++i) {\n            x = x ^ a[nums[i]];\n        }\n        // If the result of XOR operation is 0, return false, otherwise return true\n        return x !== 0;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}