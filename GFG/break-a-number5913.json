{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704467,
            "title": "Break a number",
            "titleSlug": "break-a-number5913",
            "content": "<p><span style=\"font-size:18px\">Given a really large number N, break it into 3 whole numbers such that they sum up to the original number and find the number of ways to do so. Since this number can be very large, return it modulo 10<sup>9</sup>+7.&nbsp;</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 2\r\n<strong>Output:</strong>\r\n6\r\n<strong>Explanation:</strong>\r\nPossible ways to break the number:\r\n0 + 0 + 2 = 2 \r\n0 + 2 + 0 = 2\r\n2 + 0 + 0 = 2\r\n0 + 1 + 1 = 2\r\n1 + 1 + 0 = 2\r\n1 + 0 + 1 = 2\r\n</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 3\r\n<strong>Output:</strong>\r\n10\r\n<strong>Explanation:</strong>\r\nPossible ways to break the number:\r\n0+0+3 = 3\r\n0+3+0 = 3\r\n3+0+0 = 3\r\n0+1+2 = 3\r\n0+2+1 = 3\r\n1+0+2 = 3\r\n1+2+0 = 3\r\n2+0+1 = 3\r\n2+1+0 = 3\r\n1+1+1 = 3</span></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Your Task:</span></strong></p>\r\n\r\n<p><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function waysToBreakNumber() which takes an integer N and returns the possible ways to break the number in 3 parts.</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 10<sup>9</sup></span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a non-negative integer N, determine the number of ways to express it as the sum of three non-negative integers. Since the result can be very large, return the answer modulo 10<sup>9</sup> + 7.",
                "constraints": [
                    "1 <= N <= 10<sup>9</sup>"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "6",
                        "explanation": "The possible combinations are (0, 0, 2), (0, 2, 0), (2, 0, 0), (0, 1, 1), (1, 0, 1), and (1, 1, 0)."
                    },
                    {
                        "input": "3",
                        "output": "10",
                        "explanation": "The possible combinations are (0,0,3), (0,3,0), (3,0,0), (0,1,2), (0,2,1), (1,0,2), (1,2,0), (2,0,1), (2,1,0), (1,1,1)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Try all combinations from 0 to the given number and check if they add up to the given number or not.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "number-theory",
                "slug": "number-theory"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\nclass Solution{   \npublic:\n    //Function to calculate the number of ways to break a number.\n    int waysToBreakNumber(int N)\n    {\n        int mod = 1e9+7;\n        long long int ans = (N+1)%mod;\n        ans = ((ans%mod)*((N+2)%mod))%mod;\n        ans/=2;\n        ans%=mod;\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution{\n    int waysToBreakNumber(int N){\n        int mod = 1000000007; // modular value for calculation\n        \n        // calculate ans using mathematical formula\n        long ans = (N+1)%mod;\n        ans = ((ans%mod)*((N+2)%mod))%mod;\n        ans/=2;\n        ans%=mod;\n        \n        return (int)ans; // return the answer as integer\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    def waysToBreakNumber (self,N):\n        # calculate the sum using the formula\n        return (((N+1)*(N+2))//2)%(10**9+7)",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}