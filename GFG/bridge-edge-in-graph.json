{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700463,
            "title": "Bridge edge in a graph",
            "titleSlug": "bridge-edge-in-graph",
            "content": "<p><span style=\"font-size: 18px;\">Given a&nbsp;Graph of V vertices and E edges and another edge(c -&nbsp;d), the task is to find if the given edge is a Bridge<strong>.</strong>&nbsp;i.e., removing the edge disconnects the graph.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/700463/Web/Other/5a46c789-a956-4196-a62c-7a1bb9d16db2_1685086697.png\" alt=\"\" />\n<span style=\"font-size: 18px;\"><strong>c</strong> = 1, <strong>d</strong> = 2</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n1\n<strong>Explanation</strong>:</span>\n<span style=\"font-size: 18px;\">From the graph, we can clearly see that\nblocking the edge 1-2 will result in \ndisconnection of the graph. So, it is \na Bridge<strong> </strong>and thus the Output 1.</span>\n\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong></span>\n<img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/700463/Web/Other/d443aa5e-21e9-47dc-a06e-dd99ea03fbc9_1685086698.png\" alt=\"\" />\n<span style=\"font-size: 18px;\"><strong>c</strong> = 0, <strong>d</strong> = 2</span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong>\n0\n<strong>Explanation</strong>:\n</span><img src=\"https://media.geeksforgeeks.org/img-practice/PROD/addEditProblem/700463/Web/Other/8be4152b-afea-4c19-802c-ba1647da0cf9_1685086698.png\" alt=\"\" />\n<span style=\"font-size: 18px;\">blocking the edge between nodes 0 and 2\nwon't affect the connectivity of the graph.\nSo, it's not a Bridge Edge. All the Bridge\nEdges in the graph are marked with a blue\nline in the above image.</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>isBridge()</strong>&nbsp;</span> <span style=\"font-size: 18px;\">which takes number of vertices V<strong>, </strong>the number of edges&nbsp;E<strong>, </strong>an adjacency lsit adj and two integers c and d denoting the edge as input parameters&nbsp;and returns 1 if the given edge c-d is a Bridge<strong>.</strong>&nbsp;Else, it returns 0.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong>&nbsp;O(V + E).<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(V).</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 </span> <span style=\"font-size: 18px;\">&le;</span> <span style=\"font-size: 18px;\"> V,E </span> <span style=\"font-size: 18px;\">&le;</span> <span style=\"font-size: 18px;\"> 10<sup>5</sup><br />0 </span> <span style=\"font-size: 18px;\">&le;</span> <span style=\"font-size: 18px;\"> c, d </span> <span style=\"font-size: 18px;\">&le;</span> <span style=\"font-size: 18px;\"> V-1</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected graph with V vertices and E edges, determine if the edge between vertices 'c' and 'd' is a bridge. A bridge is an edge whose removal disconnects the graph.",
                "constraints": [
                    "1 <= V, E <= 10^5",
                    "0 <= c, d <= V-1"
                ],
                "testcases": [
                    {
                        "input": "V = 4, E = 4, adj = {{1,2},{0,2},{0,1,3},{2}}, c = 1, d = 2",
                        "output": "1",
                        "explanation": "Removing the edge between vertices 1 and 2 disconnects the graph. Vertex 0 would be isolated from vertex 3."
                    },
                    {
                        "input": "V = 4, E = 5, adj = {{1,2,3},{0,2},{0,1,3},{0,2}}, c = 0, d = 2",
                        "output": "0",
                        "explanation": "Removing the edge between vertices 0 and 2 does not disconnect the graph.  A path still exists between vertices 0 and 2 via vertex 3 (0-3-2)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft",
            "oyo-rooms"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution\n{\n\tpublic:\n\t//Function to perform DFS on graph.\n\tvoid DFS(vector<int> adj[], int v, bool visited[])\n\t{\n\t    //marking the current vertex as visited.\n        visited[v] = true;\n        vector<int>::iterator i;\n        \n        //traversing over the adjacent vertices.\n        for (i = adj[v].begin(); i != adj[v].end(); ++i)\n        \n            //if any vertex is not visited, we call the function  \n            //recursively for adjacent node.\n            if (!visited[*i]) \n                DFS(adj, *i, visited);\n    }\n    \n    //Function to find whether graph is connected.\n    bool isConnected(vector<int> adj[], int V, int one, int two) \n    {\n        //using boolean array to mark visited nodes and currently \n        //marking all the nodes as false.\n        bool visited[V] = {0};\n        memset(visited, false, sizeof(visited));\n        \n        //finding all reachable vertices from first vertex \n        //and marking them visited.\n        DFS(adj, one, visited);\n        \n        //if second vertex is not visited, we return false else true.\n        if (visited[two] == false) \n            return false;\n        return true;\n    }\n    \n    //Function to find if the given edge is a bridge in graph.\n    int isBridge(int V, vector<int> adj[], int c, int d)\n    {\n        //if graph is not connected, we return false.\n        if (!isConnected(adj, V, c, d))\n            return 0;\n        else\n        {\n            //we remove edge from undirected graph.\n            adj[c].erase(remove(adj[c].begin(), adj[c].end(), d), adj[c].end());\n            adj[d].erase(remove(adj[d].begin(), adj[d].end(), c), adj[d].end());\n            \n            //if graph is connected, we return false else true.\n            if (isConnected(adj, V, c, d))\n                return 0;\n            else\n                return 1;\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// Back-end Complete function Template for JAVA\n\nclass Solution \n{\n    //Function to perform DFS on graph.\n    void DFS(ArrayList<ArrayList<Integer>> adj, int v, boolean visited[]) \n    {\n        //marking the current vertex as visited.\n        visited[v] = true;\n        \n        //traversing over the adjacent vertices.\n        for (int i = 0; i < adj.get(v).size(); ++i)\n        \n            //if any vertex is not visited, we call the function  \n            //recursively for adjacent node.\n            if (!visited[adj.get(v).get(i)])\n                DFS(adj, adj.get(v).get(i), visited);\n    }\n    \n    //Function to find whether graph is connected.\n    boolean isConnected(ArrayList<ArrayList<Integer>> adj,int V,int one,int two)\n    {\n        //using boolean array to mark visited nodes and currently \n        //marking all the nodes as false.\n        boolean visited[] = new boolean[V];\n        \n        //finding all reachable vertices from first vertex \n        //and marking them visited.\n        DFS(adj, one, visited);\n        \n        //if second vertex is not visited, we return false else true.\n        if (visited[two] == false)\n            return false;\n        return true;\n    }\n    \n    //Function to find if the given edge is a bridge in graph.\n    public int isBridge(int V, ArrayList<ArrayList<Integer>> adj,int c,int d) \n    {\n        //if graph is not connected, we return false.\n        if (!isConnected(adj, V, c, d))\n            return 0;\n        else\n        {\n            //we remove edge from undirected graph.\n            adj.get(c).remove(new Integer(d));\n            adj.get(d).remove(new Integer(c));\n            \n            //if graph is connected, we return false else true.\n            if (isConnected(adj, V, c, d))\n                return 0;\n            else\n                return 1;\n        }\n    }\n}\n",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Backend Complete Function solution for python3\n\n\nclass Solution:\n    \n    #Function to perform DFS on graph.\n    def DFS(self, adj, v, visited): \n          \n        #marking the current vertex as visited.  \n        visited[v] = True\n      \n        i = 0\n        #traversing over the adjacent vertices.\n        while i != len(adj[v]): \n            \n            #if any vertex is not visited, we call the function  \n            #recursively for adjacent node.\n            if (not visited[adj[v][i]]):  \n                self.DFS(adj, adj[v][i], visited) \n            i += 1\n      \n    #Function to find whether graph is connected.\n    def isConnected(self, V, adj, one, two): \n        \n        #using boolean array to mark visited nodes and currently \n        #marking all the nodes as false.\n        visited = [False] * V \n      \n        #finding all reachable vertices from first vertex \n        #and marking them visited.\n        self.DFS(adj, one, visited)  \n        \n        #if second vertex is not visited, we return false else true.\n        if (visited[two] == False):  \n                return False\n        return True\n        \n        \n    \n    #Function to find if the given edge is a bridge in graph.\n    def isBridge(self, V, adj, u, v):\n        \n        #if graph is not connected, we return false.\n        if self.isConnected(V,adj,u,v) == False:\n            return 0\n        \n        #we remove edge from undirected graph.\n        indU = adj[v].index(u) \n        indV = adj[u].index(v) \n        del adj[u][indV]  \n        del adj[v][indU]  \n       \n        #checking if graph is connected.\n        res = self.isConnected(V, adj, u, v)  \n      \n        #adding the edges back  \n        adj[u].append(v)   \n        adj[v].append(u)    \n      \n        #if graph isn't connected after removing edges, return true else false. \n        if (res == False):\n            return 1 \n        else:\n            return 0\n            \n            ",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution \n{\n    //Function to find if the given edge is a bridge in graph.\n    isBridge(V,adj,c,d)\n    {\n        //if graph is not connected, we return false.\n        if (!this.isConnected(adj, V, c, d))\n            return 0;\n        else\n        {\n            //we remove edge from undirected graph.\n            adj[c].splice(adj[c].indexOf(d), 1);\n            adj[d].splice(adj[d].indexOf(c), 1);\n            \n            //if graph is connected, we return false else true.\n            if (this.isConnected(adj, V, c, d))\n                return 0;\n            else\n                return 1;\n        }\n    }\n\n    //Function to perform DFS on graph.\n\tDFS(adj, v, visited)\n\t{\n\t    //marking the current vertex as visited.\n        visited[v] = true;\n        \n        //traversing over the adjacent vertices.\n        for (let i = 0; i < adj[v].length; i++)\n        {\n            let node = adj[v][i];\n            \n            //if any vertex is not visited, we call the function  \n            //recursively for adjacent node.\n            if (!visited[node])\n                this.DFS(adj, node, visited);\n        }\n    }\n    \n    //Function to find whether graph is connected.\n    isConnected(adj, V, one, two) \n    {\n        //using boolean array to mark visited nodes and currently \n        //marking all the nodes as false.\n        let visited = new Array(V).fill(false);\n        \n        //finding all reachable vertices from first vertex \n        //and marking them visited.\n        this.DFS(adj, one, visited);\n        \n        //if second vertex is not visited, we return false else true.\n        if (visited[two] == false) \n            return false;\n        return true;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}