{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700678,
            "title": "Brothers From Different Roots",
            "titleSlug": "brothers-from-different-root",
            "content": "<p><span style=\"font-size: 18px;\">Given two BSTs containing <strong>N1</strong>&nbsp;and <strong>N2</strong>&nbsp;distinct nodes respectively and given a value&nbsp;<strong>x</strong>, your task is to complete the function <strong>countPairs()</strong>, that returns the count of all pairs of <strong>(a, b),</strong> where <strong>a</strong> belongs to one BST and <strong>b</strong> belongs to another <strong>BST</strong>, such that <strong>a + b = x</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n<strong>BST1:</strong>\n&nbsp;\\t5\n     /   \\\n&nbsp;   3     7\n&nbsp;  / \\   / \\\n  2   4 6   8\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>BST2:</strong>\n&nbsp;\\t10\n&nbsp;    /    \\\n&nbsp;   6\\t15\n&nbsp;  / \\    /  \\\n&nbsp; 3   8  11   18\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>x</strong> = 16\n<strong>Output:\n</strong>3\n<strong>Explanation:\n</strong>The pairs are: <strong>(5, 11), (6, 10)</strong> and <strong>(8, 8)</strong></span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\nBST1:</strong>\n  1\n   \\\n    3\n   /\n  2\n<strong>BST2:\n&nbsp;   </strong>3\n&nbsp;  / \\\n&nbsp; 2   4\n /     \n1\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>x</strong> = 4\n<strong>Output:\n</strong>3\n<strong>Explanation:</strong>\nThe pairs are: <strong>(2, 2), (3, 1)</strong> and <strong>(1, 3)</strong>\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>countPairs()</strong>, which takes <strong>two BST's </strong>as parameter in the form of <strong>root1</strong> and <strong>root2</strong> and the integer <strong>x</strong>,&nbsp;that returns the&nbsp;count of all pairs from both the <strong>BSTs </strong>whose sum is equal to&nbsp;<strong>x</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(N)<br /><strong>Expected Auxiliary Space:</strong> O(N)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; Number of nodes &le; 10<sup>5</sup><br />1 &le; Data of a node &le; 10<sup>6&nbsp;</sup></span><span style=\"font-size: 15px;\">1000000<br /></span><span style=\"font-size: 18px;\">1 &le; X &le; 2*10<sup>6&nbsp;</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two Binary Search Trees (BSTs), `root1` containing N1 distinct nodes and `root2` containing N2 distinct nodes, and a target value `x`, determine the number of pairs (a, b) such that `a` belongs to the first BST, `b` belongs to the second BST, and `a + b = x`.  Implement the `countPairs` function to achieve this.",
                "constraints": [
                    "1 <= Number of nodes in each BST <= 10^5",
                    "1 <= Data of a node in each BST <= 10^6",
                    "1 <= x <= 2 * 10^6"
                ],
                "testcases": [
                    {
                        "input": "BST1: root = {5, 3, 7, 2, 4, 6, 8}  \nBST2: root = {10, 6, 15, 3, 8, 11, 18} \nx = 16",
                        "output": "3",
                        "explanation": "The pairs that sum to 16 are: (5, 11), (6, 10), and (8, 8)."
                    },
                    {
                        "input": "BST1: root = {1, null, 3, 2} \nBST2: root = {3, 2, 4, 1} \nx = 4",
                        "output": "3",
                        "explanation": "The pairs that sum to 4 are: (2, 2), (3, 1), and (1, 3)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Traverse BST 1 from smallest value to node to largest. This can be achieved with the help of iterative inorder traversal. Traverse BST 2 from largest value node to smallest.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Traversal",
                "slug": "traversal"
            },
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution\n{\npublic:\n    //Function to count the pairs from two BSTs whose sum is equal to given x.\n    int countPairs(Node* root1, Node* root2, int x)\n    {\n        // Code here\n        // checking if either of the roots is null, return 0.\n        if (root1 == NULL || root2 == NULL)return 0;\n        \n        //creating two stacks to store nodes from each BST.\n        stack<Node*> st1, st2;\n        Node* top1, *top2;\n        int count = 0;\n        \n        //iterating over the BSTs and storing nodes in stacks.\n        while (1) {\n            while (root1 != NULL) {\n                st1.push(root1);\n                root1 = root1->left;\n            }\n            while (root2 != NULL) {\n                st2.push(root2);\n                root2 = root2->right;\n            }\n            //if any of the stack is empty, break the loop.\n            if (st1.empty() || st2.empty())break;\n            \n            //taking the top elements from both stacks.\n            top1 = st1.top();\n            top2 = st2.top();\n            \n            //if the sum of data of both nodes is equal to x.\n            if ((top1->data + top2->data) == x) {\n                //incrementing count and popping both elements from stack.\n                count++;\n                st1.pop();\n                st2.pop();\n                //updating the roots of BSTs.\n                root1 = top1->right;\n                root2 = top2->left;\n            }\n            //if the sum is less than x, pop the top from stack1 and move root1 to right.\n            else if ((top1->data + top2->data) < x) {\n                st1.pop();\n                root1 = top1->right;\n            }\n            //if the sum is greater than x, pop the top from stack2 and move root2 to left.\n            else {\n                st2.pop();\n                root2 = top2->left;\n            }\n        }\n        //returning the count of pairs.\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution\n{\n\tpublic static int countPairs(Node root1, Node root2, int x)\n\t{\n\t\t// If either of the roots is null, return 0\n\t\tif(root1 == null || root2 == null)\n\t\t\treturn 0;\n\n\t\t// Create two stacks to store the nodes of the trees\n\t\tStack<Node> st1 = new Stack<>();\n\t\tStack<Node> st2 = new Stack<>();\n\t\tNode top1, top2;\n\t\tint count = 0;\n\n\t\t// Traverse both trees in inorder manner using stacks\n\t\twhile(true){\n\t\t\t// Push all left nodes of root1 and right nodes of root2 to their respective stacks\n\t\t\twhile(root1 != null){\n\t\t\t\tst1.push(root1);\n\t\t\t\troot1 = root1.left;\n\t\t\t}\n\t\t\twhile(root2 != null){\n\t\t\t\tst2.push(root2);\n\t\t\t\troot2 = root2.right;\n\t\t\t}\n\n\t\t\t// If either stack is empty, break the loop\n\t\t\tif(st1.isEmpty() || st2.isEmpty())\n\t\t\t\tbreak;\n\n\t\t\t// Get the top nodes of both stacks\n\t\t\ttop1 = st1.peek();\n\t\t\ttop2 = st2.peek();\n\n\t\t\t// If the sum of the values of top nodes is equal to x,\n\t\t\t// increment the count, pop both nodes from the stacks,\n\t\t\t// and move to the right of the left subtree of top1 and the left of the right subtree of top2\n\t\t\tif((top1.data + top2.data) == x){\n\t\t\t\tcount ++;\n\t\t\t\tst1.pop();\n\t\t\t\tst2.pop();\n\t\t\t\troot1 = top1.right;\n\t\t\t\troot2 = top2.left;\n\t\t\t}\n\t\t\t// If the sum is less than x, pop the top node from st1\n\t\t\telse if((top1.data + top2.data) < x){\n\t\t\t\tst1.pop();\n\t\t\t\troot1 = top1.right;\n\t\t\t}\n\t\t\t// If the sum is greater than x, pop the top node from st2\n\t\t\telse{\n\t\t\t\tst2.pop();\n\t\t\t\troot2 = top2.left;\n\t\t\t}\n\t\t}\n\n\t\t// Return the count of pairs with sum equal to x\n\t\treturn count;\n\t}\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to count pairs with a given sum in two BSTs.\n    def countPairs(self, root1, root2, x):\n        #if either of the trees is empty, return 0.\n        if (root1 is None) or (root2 is None):\n            return 0\n        \n        #using stacks to store the nodes of the trees.\n        st1=[]\n        st2=[]\n        \n        #creating dummy nodes for the top of the stacks.\n        top1=Node(-1)\n        top2=Node(-1)\n        \n        #variable to keep track of the count of pairs.\n        count = 0\n        \n        #iterating through the trees.\n        while 1:\n            #traversing the left subtree of the first tree and\n            #appending the nodes to stack1.\n            while (root1 != None):\n                st1.append(root1)\n                root1 = root1.left\n            \n            #traversing the right subtree of the second tree and\n            #appending the nodes to stack2.\n            while (root2 != None):\n                st2.append(root2)\n                root2 = root2.right\n            \n            #if either of the stacks are empty, break the loop.\n            if ((len(st1) == 0) or (len(st2) == 0)):\n                break\n            \n            #getting the top nodes of both stacks.\n            top1 = st1[len(st1)-1]\n            top2 = st2[len(st2)-1]\n            \n            #checking if the sum of the top nodes is equal to x.\n            if ((top1.data+top2.data) == x):\n                #if yes, increment the count, remove the top nodes from both stacks,\n                #and move to the right child of the top nodes.\n                count = count+1\n                st1.pop()\n                st2.pop()\n                root1 = top1.right\n                root2 = top2.left\n            \n            #if the sum is less than x, remove the top node from stack1\n            #and move to the right child of the top node.\n            elif ((top1.data+top2.data)<x):\n                st1.pop()\n                root1 = top1.right\n            \n            #if the sum is greater than x, remove the top node from stack2\n            #and move to the left child of the top node.\n            else:\n                st2.pop()\n                root2 = top2.left\n        \n        #returning the count of pairs.\n        return count",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * Tree Node\n * class Node{\n *     constructor(val){\n *         this.right=null;\n *         this.data=val;\n *         this.left=null;\n *     }\n * }\n */\n\nclass Solution {\n    countPairs(root1, root2, x) {\n        //if either of the trees is empty, return 0.\n        if (root1 === null || root2 === null) {\n            return 0;\n        }\n        \n        //using stacks to store the nodes of the trees.\n        let st1 = [];\n        let st2 = [];\n        \n        //creating dummy nodes for the top of the stacks.\n        let top1 = new Node(-1);\n        let top2 = new Node(-1);\n        \n        //variable to keep track of the count of pairs.\n        let count = 0;\n        \n        //iterating through the trees.\n        while (true) {\n            //traversing the left subtree of the first tree and\n            //appending the nodes to st1.\n            while (root1 !== null) {\n                st1.push(root1);\n                root1 = root1.left;\n            }\n            \n            //traversing the right subtree of the second tree and\n            //appending the nodes to st2.\n            while (root2 !== null) {\n                st2.push(root2);\n                root2 = root2.right;\n            }\n            \n            //if either of the stacks are empty, break the loop.\n            if (st1.length === 0 || st2.length === 0) {\n                break;\n            }\n            \n            //getting the top nodes of both stacks.\n            top1 = st1[st1.length - 1];\n            top2 = st2[st2.length - 1];\n            \n            //checking if the sum of the top nodes is equal to x.\n            if ((top1.data + top2.data) === x) {\n                //if yes, increment the count, remove the top nodes from both stacks,\n                //and move to the right child of the top nodes.\n                count++;\n                st1.pop();\n                st2.pop();\n                root1 = top1.right;\n                root2 = top2.left;\n            }\n            \n            //if the sum is less than x, remove the top node from st1\n            //and move to the right child of the top node.\n            else if ((top1.data + top2.data) < x) {\n                st1.pop();\n                root1 = top1.right;\n            }\n            \n            //if the sum is greater than x, remove the top node from st2\n            //and move to the left child of the top node.\n            else {\n                st2.pop();\n                root2 = top2.left;\n            }\n        }\n        \n        //returning the count of pairs.\n        return count;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}