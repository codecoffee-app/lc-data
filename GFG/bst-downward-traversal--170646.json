{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 713585,
            "title": "BST Downward Traversal",
            "titleSlug": "bst-downward-traversal--170646",
            "content": "<p><span style=\"font-size:18px\">Given a Binary Search Tree with <strong>unique</strong> node values and a <strong>target</strong> value. You have to find the node whose data is equal to target and return the sum of all <strong>descendant (of target) node&#39;s</strong>&nbsp;<strong>data</strong> which are <strong>vertically below</strong> the target node. Initially, you are at the <strong>root </strong>node.<br />\r\n<strong>Note: </strong>If <strong>target</strong> node is not present in bst then return <strong>-1.</strong></span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\r\n<img alt=\"\" src=\"https://media.geeksforgeeks.org/img-practice/BSTDownwardTraversal-1662975635.png\" style=\"height:300px; width:394px\" />\r\n\r\n<span style=\"font-size:18px\"><strong>Target</strong> = 35\r\n<strong>Output:</strong> 32\r\n<strong>Explanation:</strong> Vertically below 35 is 32.</span>\r\n</pre>\r\n\r\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:\r\n</strong></span><img alt=\"\" src=\"https://media.geeksforgeeks.org/img-practice/BSTDownwardTraversal-1662975635.png\" style=\"height:300px; width:394px\" />\r\n<span style=\"font-size:18px\">Target = 25\r\n<strong>Output:</strong> 52\r\n<strong>Explanation:</strong> Vertically below 25 is 22, 30 and their sum is 52.<strong>\r\n</strong></span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function verticallyDownBST() which takes BST(you are given root node of bst )&nbsp;and target&nbsp;as input, and return an interger value as the sum of vertically down nodes from target. If target is not present in bst then return -1.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O( n ), n is number of nodes.<br />\r\n<strong>Expected Auxiliary Space:</strong> O(Height of the tree).</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Constraints:</span></strong><br />\r\n<span style=\"font-size:18px\">1 &lt;= n &lt;&nbsp;10<sup>6</sup><br />\r\n1 &lt;= target &lt;= n<br />\r\n1 &lt;= node.data&nbsp;&lt;&nbsp;10<sup>6</sup></span><br />\r\n&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree with unique node values and a target value, find the node whose data is equal to the target. Return the sum of all descendant node's data which are vertically below the target node. You start at the root node.\n\nIf the target node is not present in the BST, return -1.",
                "constraints": [
                    "1 <= n < 10^6",
                    "1 <= target <= n",
                    "1 <= node.data < 10^6"
                ],
                "testcases": [
                    {
                        "input": "BST: {50, 30, 70, 20, 40, 60, 80, null, null, 35, null, null, null, null, null}, Target: 35",
                        "output": "32",
                        "explanation": "The target node is 35. The node vertically below 35 is 32. Therefore, the sum is 32."
                    },
                    {
                        "input": "BST: {50, 30, 70, 20, 40, 60, 80, null, null, 35, null, null, null, null, null}, Target: 25",
                        "output": "-1",
                        "explanation": "The target node 25 is not present in the BST. Therefore, the output is -1."
                    },
                    {
                        "input": "BST: {50, 30, 70, 20, 40, 60, 80, 10, 25, 35, 45, 55, 65, 75, 85}, Target: 25",
                        "output": "null",
                        "explanation": "There are no nodes strictly vertically below 25."
                    },
                    {
                        "input": "BST: {10,5,15,2,7,12,20}, Target: 10",
                        "output": "0",
                        "explanation": "The sum of vertically below target 10 is 5+15 which is 0 (since the vertically below definition is strict)"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use the property of Binary Search Tree for Traversal</p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution{\npublic:\n    //Variable to store the result\n    long long int res;\n    //Variable to store the target node\n    Node *target_node;\n    \n    //Function to traverse down the BST and calculate the sum based on the given direction\n    void down(Node *node,int direction){\n        if(node){\n            //Add the node's data to the result based on the direction\n            if(direction == 0)\n                res += node->data;\n            \n            //Traverse left and right child nodes recursively\n            down(node->left, direction-1);\n            down(node->right, direction+1);\n        }\n    }\n    \n    //Function to find the target node and calculate the sum vertically down from it\n    void find(Node *node,int target){\n        //Check if the target node is null\n        if(target_node == NULL){\n            if (node){\n                //If the node's data is greater than the target, traverse left\n                if(node->data > target)\n                    find(node->left, target);\n                //If the node's data is smaller than the target, traverse right\n                else if(node->data < target)\n                    find(node->right, target);\n                //If the node's data is equal to the target, set target_node and calculate the sum vertically down\n                else{\n                    target_node = node;\n                    down(node, 0);\n                }\n            }\n        }\n    }\n            \n    //Function to calculate the sum vertically down starting from the target node\n    long long int verticallyDownBST(Node *root,int target){\n        //Initialize the result as -target and target_node as null\n        res = -target;\n        target_node = NULL;\n        \n        //Find the target node and calculate the sum\n        find(root, target);\n        \n        //If the sum is still -target, return -1 as there is no valid target node\n        if(res == -target) return -1;\n        \n        //Return the final sum\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "class Solution\n{\n    long ans; // variable to store the answer\n    Node temp; // temporary variable to store the current node\n    long verticallyDownBST(Node root, int target)\n    {\n        Node curr = root; // initialize current node with root node\n        while(curr != null)\n        {\n            if(curr.data == target) // if current node's data is equal to target\n            {\n                break; // exit the loop\n            }\n            else if(curr.data > target) // if current node's data is greater than target\n            {\n                curr = curr.left; // move to the left child\n            }\n            else\n            {\n                curr = curr.right; // if current node's data is smaller than target, move to the right child\n            }\n        }\n        if(curr != null) // if current node is not null, it means target node is found in the tree\n        {\n            ans = 0; // initialize answer to 0\n            temp = curr; // set temp variable to the current node\n            fun(curr, 0); // call the helper function to calculate answer recursively\n            return ans; // return the answer\n        }\n        else\n        {\n            return -1; // if target node is not found in the tree, return -1\n        }\n    }\n    void fun(Node root, int val)\n    {\n        if(root == null) return; // base case: if root is null, return\n        fun(root.left, val-1); // recursively call fun on the left child with decreased value of val\n        fun(root.right, val+1); // recursively call fun on the right child with increased value of val\n        if(root != temp && val == 0) // if root is not the target node and val is 0\n        {\n            ans += root.data; // add the data of root node to the answer\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\n'''\r\nclass Node:\r\n    def __init__(self,val):\r\n        self.data=val\r\n        self.left=None\r\n        self.right=None\r\n'''\r\n\r\nclass Solution:\r\n    def verticallyDownBST(self, root, target):\r\n        \r\n        #Helper function to calculate the sum of values vertically downwards from a given node\r\n        def down(node, direction):\r\n            nonlocal res\r\n            if node:\r\n                if direction == 0:\r\n                    res += node.data\r\n                down(node.left, direction-1)\r\n                down(node.right, direction+1)\r\n            \r\n        \r\n        #Helper function to find the node with the target value and calculate the vertical sum\r\n        def find(node, target):\r\n            nonlocal target_node\r\n            if target_node == None:\r\n                if node:\r\n                    if node.data > target:\r\n                        find(node.left, target)\r\n                    elif node.data < target:\r\n                        find(node.right, target)\r\n                    else:\r\n                        target_node = node\r\n                        down(node, 0)\r\n        \r\n        res = -target\r\n        target_node = None\r\n        find(root, target)\r\n        \r\n        #Return -1 if no node is found with target value, otherwise return the calculated sum\r\n        if res == -target:\r\n            return -1\r\n        return res",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * Definition for a binary tree node\r\n * class Node\r\n * {\r\n *     constructor(val)\r\n *     {\r\n *         this.data = val;\r\n *         this.left = null;\r\n *         this.right = null;\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    verticallyDownBST(root, target) {\r\n        //Helper function to calculate the sum of values vertically downwards from a given node\r\n        function down(node, direction) {\r\n            if (node) {\r\n                if (direction == 0) {\r\n                    res += node.data;\r\n                }\r\n                down(node.left, direction-1);\r\n                down(node.right, direction+1);\r\n            }\r\n        }\r\n    \r\n        //Helper function to find the node with the target value and calculate the vertical sum\r\n        function find(node, target) {\r\n            if (target_node === null) {\r\n                if (node) {\r\n                    if (node.data > target) {\r\n                        find(node.left, target);\r\n                    } else if (node.data < target) {\r\n                        find(node.right, target);\r\n                    } else {\r\n                        target_node = node;\r\n                        down(node, 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    \r\n        let res = -target;\r\n        let target_node = null;\r\n        find(root, target);\r\n        \r\n        //Return -1 if no node is found with target value, otherwise return the calculated sum\r\n        if (res === -target) {\r\n            return -1;\r\n        }\r\n        return res;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}