{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706357,
            "title": "BST to greater sum tree",
            "titleSlug": "bst-to-greater-sum-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a BST with unique node values, transform it into greater sum tree where each node contains sum of all nodes greater than that node.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong>\n\\t     2\n\\t   /    \\\n\\t  1\\t6\n\\t\\t  /  \\\n\\t\\t 3    7\n<strong>Output:</strong> 18 16 13 7 0\n<strong>Explanation:</strong>\nEvery node is replaced with the \nsum of nodes greater than itself. \nThe resultant tree is:\n\\t\\t   16\n\\t\\t /    \\\n\\t     18\\t 7\n\\t\\t\\t/   \\\n\\t\\t     13    0\n</span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong><strong>:</strong>\n</span><span style=\"font-size: 18px;\">\\t    2\n\\t   /\n\\t  1</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong>2 0</span>\n<strong><span style=\"font-size: 18px;\">Explanation:</span></strong>\n<span style=\"font-size: 18px;\">The resultant tree is :</span>\n<span style=\"font-size: 18px;\">\\t\\t 0</span>\n<span style=\"font-size: 18px;\">\\t\\t/</span>\n<span style=\"font-size: 18px;\">\\t    2</span>\n</pre>\n<div><span style=\"font-size: 18px;\"><strong>Your task :</strong></span></div>\n<div><span style=\"font-size: 18px;\">You don't have to read input or print anything. Your task is to complete the function <strong>transformTree() </strong>which takes the root of the tree as input and transforms the BST to a greater sum tree.</span></div>\n<div><span style=\"font-size: 18px;\"><strong>Note :</strong> The driver code prints the inorder traversal of the transformed BST.</span></div>\n<div>&nbsp;</div>\n<div><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(N), N = number of nodes</span></div>\n<div><span style=\"font-size: 18px;\"><strong>Expected Auxiliary Space: </strong>O(N), N = number of nodes</span></div>\n<div>&nbsp;</div>\n<div><span style=\"font-size: 18px;\"><strong>Constraints :</strong></span></div>\n<div><span style=\"font-size: 18px;\">1 &le; N &le; 10<sup>4</sup></span></div>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST) with unique node values, transform it into a Greater Sum Tree. In a Greater Sum Tree, each node's value is replaced with the sum of all nodes in the original BST that have values greater than the original node's value.",
                "constraints": [
                    "1 <= N <= 10^4, where N is the number of nodes in the BST"
                ],
                "testcases": [
                    {
                        "input": "     2\n   /    \\\n  1    6\n      /  \\\n     3    7",
                        "output": "18 16 13 7 0",
                        "explanation": "The BST is transformed such that:\n- 2 becomes 6+3+7 = 16\n- 1 becomes 2+6+3+7 = 18\n- 6 becomes 7 = 7\n- 3 becomes 6+7 = 13\n- 7 becomes 0 (no nodes greater than 7)"
                    },
                    {
                        "input": "    2\n   /",
                        "output": "2 0",
                        "explanation": "The BST is transformed such that:\n- 2 becomes 0 (no nodes greater than 2)\n- 1 becomes 2 = 2"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Traverse the BST in reverse inorder traversal.</span></p>",
            "<p><span style=\"font-size:18px\">Reverse inorder traversal of a BST gives us keys in decreasing order. Before visiting a node, we visit all greater nodes of that node. While traversing we keep track of the sum of keys which is the sum of all the keys greater than the key of the current node.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    void transformTreeUtil(struct Node *root, int *sum)\r\n    {\r\n    // Base case\r\n    \tif (root == NULL) return;\r\n    \r\n    // Recur for right subtree\r\n    \ttransformTreeUtil(root->right, sum);\r\n    \r\n    // Update sum\r\n    \t*sum = *sum + root->data;\r\n    \r\n    // Store old sum in current node\r\n    \troot->data = *sum - root->data;\r\n    \r\n    // Recur for left subtree\r\n    \ttransformTreeUtil(root->left, sum);\r\n    }\r\n    \r\n    // A wrapper over transformTreeUtil()\r\n    public:\r\n    void transformTree(struct Node *root)\r\n    {\r\n    \tint sum = 0; // Initialize sum\r\n    \ttransformTreeUtil(root, &sum);\r\n    }\r\n    \r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    static int sum = 0;\r\n    public void transformTree (Node root)\r\n    {\r\n        sum = 0;\r\n        transformTreeUtil(root);\r\n    }\r\n    public static void transformTreeUtil(Node root)\r\n    {\r\n    // Base case\r\n    \tif (root == null) return;\r\n    // Recur for right subtree\r\n    \ttransformTreeUtil(root.right);\r\n    \t\r\n    \tint val = root.data;\r\n        root.data = sum;\r\n    \tsum += val;\r\n    \t\r\n    // Recur for left subtree\r\n    \ttransformTreeUtil(root.left);\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "# Back-end function Template for python3\r\n\r\nclass Solution:\r\n    # Function to get the sum of values in the tree\r\n    def get_sum(self, root):\r\n        if root == None:\r\n            return 0\r\n        return root.data + self.get_sum(root.left) + self.get_sum(root.right)\r\n    \r\n    # Recursive function to transform the tree\r\n    def transformTreeUtil(self, root, sm):\r\n        if root == None:\r\n            return sm\r\n        # Recursively get the sum of the left subtree\r\n        l = self.transformTreeUtil(root.left, sm)\r\n        # Update the value of the current node\r\n        val = root.data\r\n        root.data = total - l - root.data\r\n        # Recursively get the sum of the right subtree\r\n        r = self.transformTreeUtil(root.right, val + l)\r\n        return r\r\n    \r\n    # Function to transform the tree\r\n    def transformTree(self, root):\r\n        global total\r\n        # Get the total sum of values in the tree\r\n        total = self.get_sum(root)\r\n        # Transform the tree using the recursive function\r\n        self.transformTreeUtil(root,0)",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n\r\n/*\r\nclass Node\r\n{\r\n    constructor(x){\r\n        this.data=x;\r\n        this.left=null;\r\n        this.right=null;\r\n    }\r\n}\r\n*/\r\n\r\n/**\r\n * @param {Node} root\r\n*/\r\nclass Solution {\r\n  transformTree(root){\r\n    let sum = 0; // Initialize sum\r\n    \r\n    function transformTreeUtil(root) {\r\n      if (root === null) return;\r\n    \r\n      // Recur for right subtree\r\n      transformTreeUtil(root.right);\r\n    \r\n      // Update sum\r\n      sum += root.data;\r\n    \r\n      // Store old sum in current node\r\n      root.data = sum - root.data;\r\n    \r\n      // Recur for left subtree\r\n      transformTreeUtil(root.left);\r\n    }\r\n    \r\n    // A wrapper over transformTreeUtil()\r\n    transformTreeUtil(root);\r\n  }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}