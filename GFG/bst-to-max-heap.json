{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 706343,
            "title": "BST to max heap",
            "titleSlug": "bst-to-max-heap",
            "content": "<p><span style=\"font-size:18px\">Given a&nbsp;Binary Search Tree. Convert a given BST into a Special Max Heap with the condition that all the values in the left subtree of a node should be less than all the values in the right subtree of the node. This condition is applied on all the nodes in the so converted Max Heap.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input :</strong>\r\n\\t\\t     4\r\n\\t\\t   /   \\\r\n\\t\\t  2     6\r\n\\t\\t/  \\   /  \\\r\n\\t     1   3  5    7  \r\n\r\n<strong>Output :</strong> 1 2 3 4 5 6 7 \r\n<strong>Exaplanation :</strong>\r\n\\t\\t   7\r\n\\t\\t /   \\\r\n\\t\\t3     6\r\n\\t    /   \\  /   \\\r\n\\t   1    2 4     5\r\nThe given <strong>BST</strong> has been transformed into a\r\n<strong>Max Heap </strong>and it&#39;s postorder traversal is\r\n1 2 3 4 5 6 7.</span>\r\n\r\n</pre>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Your task :</strong></span></div>\r\n\r\n<div><span style=\"font-size:18px\">You don&#39;t need to read input or print anything. Your task is to complete the function convertToMaxHeapUtil() which takes the root of the tree as input and converts the BST to max heap. </span></div>\r\n\r\n<div><span style=\"font-size:18px\">Note : The driver code prints the postorder traversal of the converted BST.</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Expected Time Complexity : </strong>O(n)</span></div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Expected Auxiliary Space : </strong>O(n)</span></div>\r\n\r\n<div>&nbsp;</div>\r\n\r\n<div><span style=\"font-size:18px\"><strong>Constraints :</strong></span></div>\r\n\r\n<div><span style=\"font-size:18px\">1 &le; n &le; 10<sup>5</sup></span></div>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a Binary Search Tree (BST), convert it into a Special Max Heap. The key condition for this Max Heap is that for every node, all values in its left subtree must be less than all values in its right subtree. This rule must be enforced recursively for all nodes in the transformed Max Heap.",
                "constraints": [
                    "1 <= n <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "     4\n   /   \\\n  2     6\n/  \\   /  \\\n1   3  5    7",
                        "output": "1 2 3 4 5 6 7",
                        "explanation": "The BST is transformed into a Max Heap where the root is the largest element, and the condition of left subtree values being smaller than right subtree values is maintained. The postorder traversal of the resulting Max Heap is 1 2 3 4 5 6 7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use inorder traversal technique.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search Tree",
                "slug": "binary-search-tree"
            },
            {
                "name": "Heap",
                "slug": "heap"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "de-shaw"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n    vector<int> arr;\r\n    int i;\r\n\r\n    void inorderTraversal(Node* root)\r\n    {\r\n        if (root == NULL)\r\n            return;\r\n\r\n        // first recur on left subtree\r\n        inorderTraversal(root->left);\r\n\r\n        // then copy the data of the node\r\n        arr.push_back(root->data);\r\n\r\n        // now recur for right subtree\r\n        inorderTraversal(root->right);\r\n    }\r\n\r\n    void BSTToMaxHeap(Node* root)\r\n    {\r\n        if (root == NULL)\r\n            return;\r\n\r\n        // recur on left subtree\r\n        BSTToMaxHeap(root->left);\r\n\r\n        // recur on right subtree\r\n        BSTToMaxHeap(root->right);\r\n\r\n        // copy data at index 'i' of 'arr' to\r\n        // the node\r\n        root->data = arr[++i];\r\n    }\r\n\r\npublic:\r\n    // Utility function to convert the given BST to\r\n    // MAX HEAP\r\n    void convertToMaxHeapUtil(Node* root)\r\n    {\r\n        i = -1;\r\n        arr.resize(0); \r\n        // inorder traversal to populate 'arr'\r\n        inorderTraversal(root);\r\n\r\n        // BST to MAX HEAP conversion\r\n        BSTToMaxHeap(root);\r\n    }    \r\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end function Template for Java\r\nclass Solution\r\n{\r\n    static ArrayList<Integer> arr = new ArrayList<>();\r\n    static int i=0;\r\n    public static void convertToMaxHeapUtil(Node root)\r\n    {\r\n        i = 0;\r\n        arr.clear();\r\n        // inorder traversal to populate 'arr'\r\n\t    inorderTraversal(root);\r\n\t    \r\n\t    // BST to MAX HEAP conversion\r\n        BSTToMaxHeap(root);\r\n    }\r\n    \r\n    // Function for the inorder traversal of the tree\r\n    // so as to store the node values in 'arr' in\r\n    // sorted order\r\n    static void inorderTraversal(Node root)\r\n    {\r\n        if (root == null)\r\n            return;\r\n       \r\n        // first recur on left subtree\r\n        inorderTraversal(root.left);\r\n       \r\n        // then copy the data of the node\r\n        arr.add(root.data);\r\n       \r\n        // now recur for right subtree\r\n        inorderTraversal(root.right);\r\n    }\r\n       \r\n    static void BSTToMaxHeap(Node root)\r\n    {\r\n        if (root == null)\r\n            return;\r\n       \r\n        // recur on left subtree\r\n        BSTToMaxHeap(root.left);\r\n       \r\n        // recur on right subtree\r\n        BSTToMaxHeap(root.right);\r\n       \r\n        // copy data at index 'i' of 'arr' to\r\n        // the node\r\n        root.data = arr.get(i++);\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python\r\n\r\nclass Solution:\r\n    # Function for the inorder traversal of the tree\r\n    # so as to store the node values in 'arr' in\r\n    # sorted order\r\n    def inorderTraversal(self, root, arr):\r\n      \r\n        if (root == None):\r\n            return arr\r\n      \r\n        # first recur on left subtree\r\n        self.inorderTraversal(root.left,arr)\r\n      \r\n        # then copy the data of the node\r\n        arr.append(root.data)\r\n      \r\n        # now recur for right subtree\r\n        self.inorderTraversal(root.right,arr)\r\n        \r\n        return arr\r\n      \r\n    def BSTToMaxHeap(self, root, arr):\r\n      \r\n        global i\r\n        if (root == None):\r\n            return None\r\n      \r\n        # recur on left subtree\r\n        root.left = self.BSTToMaxHeap(root.left,arr)\r\n      \r\n        # recur on right subtree\r\n        root.right = self.BSTToMaxHeap(root.right,arr)\r\n      \r\n        # copy data at index 'i' of 'arr' to\r\n        # the node\r\n        root.data = arr[i]\r\n        i = i + 1\r\n        return root\r\n        \r\n    # Utility function to convert the given BST to\r\n    # MAX HEAP\r\n    def convertToMaxHeapUtil(self, root):\r\n        global i\r\n          \r\n        # vector to store the data of all the\r\n        # nodes of the BST\r\n        i = 0\r\n        arr = []\r\n      \r\n        # inorder traversal to populate 'arr'\r\n        arr = self.inorderTraversal(root,arr)\r\n      \r\n        # BST to MAX HEAP conversion\r\n        root = self.BSTToMaxHeap(root,arr)\r\n        \r\n        return root",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\r\n    inorderTraversal(root){\r\n        if (root == null)\r\n            return;\r\n\r\n        // first recur on left subtree\r\n        this.inorderTraversal(root.left);\r\n\r\n        // then copy the data of the node\r\n        this.arr.push(root.data);\r\n\r\n        // now recur for right subtree\r\n        this.inorderTraversal(root.right);\r\n    }\r\n\r\n     BSTToMaxHeap(root){\r\n        if (root == null)\r\n            return;\r\n\r\n        // recur on left subtree\r\n        this.BSTToMaxHeap(root.left);\r\n\r\n        // recur on right subtree\r\n        this.BSTToMaxHeap(root.right);\r\n\r\n        // copy data at index 'i' of 'arr' to\r\n        // the node\r\n        root.data = this.arr[++this.i];\r\n    }\r\n\r\n    // Utility function to convert the given BST to\r\n    // MAX HEAP\r\n     convertToMaxHeapUtil(root){\r\n        // vector to store the data of all the\r\n        // nodes of the BST\r\n        this.arr = [];\r\n        this.i = -1;\r\n\r\n        // inorder traversal to populate 'arr'\r\n        this.inorderTraversal(root);\r\n\r\n        // BST to MAX HEAP conversion\r\n        this.BSTToMaxHeap(root);\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}