{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700143,
            "title": "Bubble Sort",
            "titleSlug": "bubble-sort",
            "content": "<p><span >Given an array,&nbsp;<strong>arr[]</strong>. Sort the array using bubble sort algorithm.<br /></span></p>\n<p><span ><strong>Examples :<br /></strong></span></p>\n<pre><span ><strong>Input</strong>: arr[] = [4, 1, 3, 9, 7]\n<strong>Output</strong>: [1, 3, 4, 7, 9]\n</span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n<strong>Output</strong>: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<br /></span></pre>\n<pre><span ><strong>Input</strong>: arr[] = [1, 2, 3, 4, 5]\n<strong>Output</strong>: [1, 2, 3, 4, 5]</span><br /><span ><strong>Explanation</strong>: An array that is already sorted should remain unchanged after applying bubble sort.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &lt;= arr.size() &lt;= 10<sup>3</sup><br />1 &lt;= arr[i] &lt;= 10<sup>3</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Sort the given array `arr[]` using the Bubble Sort algorithm.",
                "constraints": [
                    "1 <= arr.size() <= 1000",
                    "1 <= arr[i] <= 1000"
                ],
                "testcases": [
                    {
                        "input": "[4, 1, 3, 9, 7]",
                        "output": "[1, 3, 4, 7, 9]",
                        "explanation": null
                    },
                    {
                        "input": "[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
                        "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
                        "explanation": null
                    },
                    {
                        "input": "[1, 2, 3, 4, 5]",
                        "output": "[1, 2, 3, 4, 5]",
                        "explanation": "An array that is already sorted should remain unchanged after applying Bubble Sort."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Traverse the array multiple times, swapping adjacent elements if needed, until no swaps are required to ensure the array is sorted.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "microsoft",
            "wipro",
            "sap",
            "cisco",
            "nagarro",
            "redbus",
            "accenture",
            "huawei"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to sort the array using bubble sort algorithm.\n    void bubbleSort(vector<int> &arr) {\n        int n = arr.size();\n        int i, j;\n        // Traversing over the array.\n        for (i = 0; i < n - 1; i++) {\n            // Last i elements are already in place so we do not include them.\n            for (int j = 0; j < n - i - 1; j++)\n\n                // Swapping, if the element at current index is greater\n                //  than the next element.\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n        }\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    // Function to sort the array using bubble sort algorithm.\n    public static void bubbleSort(int arr[]) {\n        int n = arr.length;\n        int i, j;\n        // Traversing over the array.\n        for (i = 0; i < n - 1; i++) {\n            // Last i elements are already in place so we do not include them.\n            for (j = 0; j < n - i - 1; j++)\n\n                if (arr[j] > arr[j + 1]) {\n                    // Swapping, if the element at current index is greater\n                    //  than the next element.\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n        }\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n    #Function to sort the array using bubble sort algorithm.\n    def bubbleSort(self, arr):\n        n = len(arr)\n\n        #Traversing over the array.\n        for i in range(n - 1):\n            #Last i elements are already in place so we do not include them.\n            for j in range(n - i - 1):\n\n                #Swapping, if the element at current index is greater\n                #than the next element.\n                if (arr[j] > arr[j + 1]):\n                    temp = arr[j]\n                    arr[j] = arr[j + 1]\n                    arr[j + 1] = temp\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} arr\n */\nclass Solution {\n    // Function to sort the array using bubble sort algorithm.\n    bubbleSort(arr) {\n        let n = arr.length;\n        for (let i = 0; i < n - 1; i++) {\n            for (let j = 0; j < n - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    // Swapping the elements.\n                    let temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}