{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703432,
            "title": "Build the smallest",
            "titleSlug": "build-the-smallest2841",
            "content": "<p>Given a number <strong>k</strong>&nbsp;and string <strong>num</strong>&nbsp;of digits (0 to 9) denoting a positive integer.&nbsp;Find a string denoting the lowest integer number possible&nbsp;by removing <strong>k</strong>&nbsp;digits from <strong>num</strong>,&nbsp;without changing their order.<br />\r\n<strong>Note</strong>: num will not contain any leading zero.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nk = 2\r\nnum = &quot;143729&quot;\r\n<strong>Output:</strong> &quot;1329&quot;\r\n<strong>Explanation: </strong>1329 is the minimum number\r\npossible after removing &#39;4&#39; and &#39;7&#39;.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nk = 3\r\nnum = &quot;10056&quot;\r\n<strong>Output:</strong> &quot;0&quot;\r\n<strong>Explanation: </strong>0 is the minimum number\r\npossible after removing &#39;1&#39; , &#39;5&#39; and &#39;6&#39;.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Your Task: &nbsp;</strong><br />\r\nYou dont need to read input or print anything. Complete the function <strong>buildLowestNumber()</strong>&nbsp;which accepts string <strong>num</strong>&nbsp;and integer <strong>k</strong>&nbsp;as input parameters and returns a string denoting the smallest integer possible after removing <strong>k</strong>&nbsp;digits from <strong>num</strong>&nbsp;without changing the order.</p>\r\n\r\n<p><br />\r\n<strong>Expected Time Complexity: </strong>O(Length of num)&nbsp;<br />\r\n<strong>Expected Auxiliary Space: </strong>O(Length of num)&nbsp;</p>\r\n\r\n<p><br />\r\n<strong>Constraints:</strong><br />\r\n1 &lt;= Length of num &lt;= 10<sup>5</sup><br />\r\n0 &lt;= k &lt; Length of num</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `num` consisting of digits and an integer `k`, find the lexicographically smallest string representing a positive integer by removing `k` digits from `num` without changing the order of the remaining digits.\n\nNote: The input string `num` will not contain any leading zeros.",
                "constraints": [
                    "1 <= Length of num <= 10^5",
                    "0 <= k < Length of num"
                ],
                "testcases": [
                    {
                        "input": "k = 2\nnum = \"143729\"",
                        "output": "\"1329\"",
                        "explanation": "Removing '4' and '7' results in the smallest possible number, 1329."
                    },
                    {
                        "input": "k = 3\nnum = \"10056\"",
                        "output": "\"0\"",
                        "explanation": "Removing '1', '5', and '6' results in the smallest possible number, 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use stack.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "string buildLowestNumber(string num, int k) \r\n{\r\n    int n = num.size();\r\n    stack<char> mystack;\r\n    //Store the final string in stack\r\n    for(char c: num)\r\n    {\r\n        while(!mystack.empty() && k>0 && mystack.top()>c)\r\n        {   mystack.pop();      k-=1;   }\r\n        \r\n        if(!mystack.empty() || c!='0')\r\n            mystack.push(c);\r\n    }\r\n    \r\n    //remove the largest values from the top of the stack\r\n    while(!mystack.empty() && k--)\r\n        mystack.pop();\r\n    if(mystack.empty())\r\n        return \"0\";\r\n    \r\n    //retrieve the number from stack into a string (reusing num)\r\n    while(!mystack.empty())\r\n    {\r\n        num[n-1] = mystack.top();\r\n        mystack.pop();\r\n        n-=1;\r\n    }\r\n    return num.substr(n);\r\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    static String buildLowestNumber(String str, int N) {\n        int n = str.length();\n        Stack<Character> mystack=new Stack<>(); // create a stack to store characters\n        for(int i=0;i<str.length();i++)\n        {\n            char c=str.charAt(i); // get the character at current index\n            while(!mystack.isEmpty() && N>0 && mystack.peek()>c) // loop until stack is not empty, N is greater than 0, and top of stack is greater than current character\n            {   \n                mystack.pop(); // remove the top element from stack\n                N-=1; // decrement N by 1\n            }\n            \n            if(!mystack.isEmpty() || c!='0') // if stack is not empty or current character is not '0'\n                mystack.push(c); // push current character to stack\n        }\n        while(!mystack.isEmpty() && N-->0) // loop while stack is not empty and N is greater than 0\n            mystack.pop(); // remove the top element from stack\n        if(mystack.isEmpty()) // if stack is empty\n            return \"0\"; // return \"0\"\n        \n        StringBuilder sb=new StringBuilder(); // create a StringBuilder object\n        sb.append(str); // append the original string to the StringBuilder object\n        while(!mystack.isEmpty()) // loop while stack is not empty\n        {\n            sb.setCharAt(n-1,mystack.peek()); // set the character at index n-1 to the top element of stack\n            mystack.pop(); // remove the top element from stack\n            n-=1; // decrement n by 1\n        }\n        return sb.substring(n); // return the substring of StringBuilder object starting from index n\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\r\n\r\n    # Function to build the lowest number by removing digits\r\n    def buildLowestNumber(self, S, N):\r\n\r\n        n = len(S)\r\n        mystack = []\r\n\r\n        # Iterating through each character in S\r\n        for c in S:\r\n            while mystack and N > 0 and mystack[-1] > c:\r\n\r\n                # Removing digits larger than current digit\r\n                N -= 1\r\n                mystack.pop()\r\n\r\n            # Adding current digit to the stack if it is not zero or if the stack is not empty\r\n            if mystack or c != \"0\":\r\n                mystack.append(c)\r\n\r\n        # Removing remaining digits if N is still greater than zero\r\n        while mystack and N:\r\n            mystack.pop()\r\n            N -= 1\r\n\r\n        # Returning \"0\" if stack is empty\r\n        if mystack == []:\r\n            return \"0\"\r\n\r\n        # Returning the lowest number as a string\r\n        return \"\".join(mystack)",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\r\n/**\r\n * @param {string} S\r\n * @param {number} N\r\n * @returns {string}\r\n*/\r\n\r\nclass Solution {\r\n    //Function to build the lowest number with given low bounds.\r\n    buildLowestNumber(S, N)\r\n    {\r\n        let n = S.length;\r\n        let mystack = [];\r\n        \r\n        // Iterating through each character in S\r\n        for (let i = 0; i < n; i++) {\r\n            let c = S[i];\r\n\r\n            while (mystack.length > 0 && N > 0 && mystack[mystack.length - 1] > c) {\r\n\r\n                // Removing digits larger than current digit\r\n                N--;\r\n                mystack.pop();\r\n            }\r\n\r\n            // Adding current digit to the stack if it is not zero or if the stack is not empty\r\n            if (mystack.length > 0 || c !== \"0\") {\r\n                mystack.push(c);\r\n            }\r\n        }\r\n\r\n        // Removing remaining digits if N is still greater than zero\r\n        while (mystack.length > 0 && N > 0) {\r\n            mystack.pop();\r\n            N--;\r\n        }\r\n\r\n        // Returning \"0\" if stack is empty\r\n        if (mystack.length === 0) {\r\n            return \"0\";\r\n        }\r\n\r\n        // Returning the lowest number as a string\r\n        return mystack.join(\"\");\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}