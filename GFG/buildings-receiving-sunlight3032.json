{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702686,
            "title": "Buildings receiving sunlight",
            "titleSlug": "buildings-receiving-sunlight3032",
            "content": "<p><span style=\"font-size: 18px;\">Given the array <strong>arr[]</strong> of <strong>heights</strong> of certain buildings that lie adjacent to each other, Sunlight starts falling from the left side of the buildings. If there is a building of a certain height, all the buildings to the right side of it having lesser heights cannot see the sun. The task is to find the total number of buildings that receive sunlight.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [6, 2, 8, 4, 11, 13]\n<strong>Output: </strong>4\n<strong>Explanation: </strong>Only buildings of height 6, 8, 11 and 13 can see the sun, hence output is 4.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [2, 5, 1, 8, 3]\n<strong>Output: </strong>3\n<strong>Explanation: </strong>Only buildings of height 2, 5 and 8 can see the sun, hence output is 3.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 4, 1, 0, 6, 2, 3]\n<strong>Output: </strong>3</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity: </strong>O(n)<br /><strong>Expected Auxiliary Space: </strong>O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />1 &le; arr<sub>i</sub> &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` representing the heights of adjacent buildings, sunlight shines from the left. A building receives sunlight if all buildings to its left are shorter. Determine the number of buildings that receive sunlight.",
                "constraints": [
                    "1 <= arr.size() <= 10^5",
                    "1 <= arr[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[6, 2, 8, 4, 11, 13]",
                        "output": "4",
                        "explanation": "Buildings with heights 6, 8, 11, and 13 are taller than all buildings to their left, allowing them to receive sunlight."
                    },
                    {
                        "input": "[2, 5, 1, 8, 3]",
                        "output": "3",
                        "explanation": "Buildings with heights 2, 5, and 8 are taller than all buildings to their left, allowing them to receive sunlight."
                    },
                    {
                        "input": "[3, 4, 1, 0, 6, 2, 3]",
                        "output": "3",
                        "explanation": "Buildings with heights 3, 4, and 6 are taller than all buildings to their left, allowing them to receive sunlight."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Iterate through the array and count the length of the longest sequence of elements that are in non-decreasing order.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [
            "amazon",
            "microsoft"
        ],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\n// Function to find the length of the longest increasing subarray.\nclass Solution {\n  public:\n    int longest(vector<int>& arr) {\n        // initializing variables\n        int i = 1, count = 1;\n        int new_element = arr[0];\n        int n = arr.size();\n\n        // iterating over the array\n        for (i = 1; i < n; i++) {\n            // checking if the current element is greater than or equal to the previous\n            // element\n            if (new_element <= arr[i]) {\n                // updating the new_element and incrementing the count\n                new_element = arr[i];\n                count++;\n            }\n        }\n        // returning the length of the longest increasing subarray\n        return count;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n\n    // Function to find the length of longest increasing subsequence\n    public static int longest(int arr[]) {\n        // Initialize variables\n        int n = arr.length;\n        int i = 1;     // counter variable\n        int count = 1; // counter for the length of the longest increasing subsequence\n        int new_element =\n            arr[0]; // set the new_element to the first element of the array\n\n        // Traverse the array\n        for (i = 1; i < n; i++) {\n            // Check if the current element is greater than or equal to the new_element\n            if (new_element <= arr[i]) {\n                // Update the new_element and increment the count\n                new_element = arr[i];\n                count++;\n            }\n        }\n\n        // Return the length of the longest increasing subsequence\n        return count;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    #Function to find the length of the longest increasing subarray.\n    def longest(self, arr):\n\n        #Initializing variables for comparison and counting.\n        i, count = 1, 1\n        n = len(arr)\n        new_element = arr[0]\n\n        #Looping through the array.\n        for i in range(1, n):\n\n            #Comparing next element with the current largest element.\n            if (new_element <= arr[i]):\n                new_element = arr[i]\n                count += 1\n\n        #Returning the length of the longest increasing subarray.\n        return count\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} arr\n * @returns {number}\n */\n\nclass Solution {\n    // Function to find the length of the longest increasing subarray.\n    longest(arr) {\n        // Initializing variables for comparison and counting.\n        let i = 1;\n        let n = arr.length;\n        let count = 1;\n        let new_element = arr[0];\n\n        // Looping through the array.\n        for (i = 1; i < n; i++) {\n            // Comparing next element with the current largest element.\n            if (new_element <= arr[i]) {\n                new_element = arr[i];\n                count += 1;\n            }\n        }\n\n        // Returning the length of the longest increasing subarray.\n        return count;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}