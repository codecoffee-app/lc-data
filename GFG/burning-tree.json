{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 702131,
            "title": "Burning Tree",
            "titleSlug": "burning-tree",
            "content": "<p><span style=\"font-size: 18px;\">Given a binary tree and a&nbsp;<strong>node data</strong> called <strong>target</strong>. Find the minimum time required to burn the complete binary tree if the target is set on fire.&nbsp;It is known that in 1 second all nodes connected to a given node get burned. That is its left child, right child, and parent.<br /><strong>Note:</strong> The tree contains unique values.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples :&nbsp;</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Input: </strong><span style=\"font-size: 18px;\">root[] = [1,2,3,4,5,N,6,N,N,7,8,N,9,N,N,N,N,N,10],  target = 8</span><strong style=\"font-size: 18px;\"><br /></strong><strong style=\"font-size: 18px;\"><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/702131/Web/Other/blobid0_1733996113.jpg\" width=\"349\" height=\"290\" />  </strong></span>\n<span style=\"font-size: 18px;\"><strong>Output:</strong> 7</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong> If leaf with the value 8 is set on fire. \nAfter 1 sec: 5 catches fire.<br />After 2 sec: 2, 7 catches fire.<br />After 3 sec: 4, 1 catches fire.<br />After 4 sec: 3 catches fire.<br />After 5 sec: 6 catches fire.<br />After 6 sec: 9 catches fire.<br />After 7 sec: 10 catches fire.<br />It takes 7s to burn the complete tree.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> <span class=\"hljs-variable\">root</span><span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">1</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">2</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">3</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">4</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">5</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-built_in\">N</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">7</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">8</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-built_in\">N</span><span class=\"hljs-operator\">,</span> <span class=\"hljs-number\">10</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-operator\">,</span> target = 10<br /><img src=\"https://media.geeksforgeeks.org/img-practice/prod/addEditProblem/702131/Web/Other/blobid0_1735037594.webp\" width=\"333\" height=\"298\" /></span>\n<span style=\"font-size: 18px;\"><strong style=\"font-size: 18px;\">Output:</strong><span style=\"font-size: 18px;\"> 5<br /></span><strong style=\"font-size: 18px; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\">Explanation</strong><strong style=\"font-size: 18px;\">: </strong><span style=\"font-size: 18px;\">If leaf with the value 10 is set on fire. </span><strong style=\"font-size: 18px;\"><br /></strong><span style=\"font-size: 18px;\">- After 1 sec: Node 5 catches fire.\n- After 2 sec: Node 2 catches fire.\n- After 3 sec: Nodes 1 and 4 catches fire.\n- After 4 sec: Node 3 and 8 catches fire.\n- After 5 sec: Node 7 catches fire.\nIt takes 5s to burn the complete tree.</span></span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le;&nbsp;</span><span style=\"font-size: 18px;\">number of nodes</span><span style=\"font-size: 18px;\">&nbsp;&le; 10</span><sup>5<br /></sup><span style=\"font-size: 18px;\">1 &le; node-&gt;data</span><span style=\"font-size: 18px;\">&nbsp;&le; 10</span><sup>5</sup></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a binary tree and a target node value, find the minimum time required to burn the entire tree if the target node is set on fire. It takes 1 second for the fire to spread to all directly connected nodes (left child, right child, and parent). All node values in the tree are unique.",
                "constraints": [
                    "1 <= number of nodes <= 10^5",
                    "1 <= node value <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "root = [1,2,3,4,5,N,6,N,N,7,8,N,9,N,N,N,N,N,10], target = 8",
                        "output": "7",
                        "explanation": "Starting from node 8:\n- 1 sec: Node 5 burns.\n- 2 sec: Nodes 2 and 7 burn.\n- 3 sec: Nodes 4 and 1 burn.\n- 4 sec: Node 3 burns.\n- 5 sec: Node 6 burns.\n- 6 sec: Node 9 burns.\n- 7 sec: Node 10 burns.\nTotal time to burn the tree is 7 seconds."
                    },
                    {
                        "input": "root = [1,2,3,4,5,N,7,8,N,10], target = 10",
                        "output": "5",
                        "explanation": "Starting from node 10:\n- 1 sec: Node 5 burns.\n- 2 sec: Node 2 burns.\n- 3 sec: Nodes 1 and 4 burn.\n- 4 sec: Nodes 3 and 8 burn.\n- 5 sec: Node 7 burns.\nTotal time to burn the tree is 5 seconds."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use DFS to find the target node and calculate the maximum depth of its left and right subtrees to determine the time needed to burn those branches.</span></p>",
            "<p><span >For each node on the path to the target, check the opposite subtree's maximum depth to account for the spread of fire across the tree.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Tree",
                "slug": "tree"
            },
            {
                "name": "BFS",
                "slug": "bfs"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "flipkart",
            "amazon",
            "microsoft",
            "adobe"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    int maxDepth(Node* n)\n    // finding the most distant leaf node from given node\n    {\n        if (!n)\n            return 0;\n        return 1 + max(maxDepth(n->left), maxDepth(n->right));\n    }\n\n    int traverse(Node* n, int target, int& ret) {\n        if (!n)\n            return 0;\n        // base case\n\n        if (n->data == target) {\n            ret = max(ret, maxDepth(n->right));\n            ret = max(ret, maxDepth(n->left));\n            return 1;\n        }\n        // target found, hence returning distance from it\n\n        int val = traverse(n->left, target, ret);\n        if (val)\n        // (val != 0) means target was found at distance = val\n        {\n            ret = max(ret, val + maxDepth(n->right));\n            // finding max Depth on right as target was on left\n            return val + 1;\n        }\n\n        val = traverse(n->right, target, ret);\n        if (val)\n        // (val != 0) means target was found at distance = val\n        {\n            ret = max(ret, val + maxDepth(n->left));\n            // finding max Depth on left as target was on right\n            return val + 1;\n        }\n\n        return 0;\n    }\n\n    int minTime(Node* root, int target) {\n        int ret = 0;\n        traverse(root, target, ret);\n        return ret;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n\n    public static int maxDepth(Node n)\n    // finding the most distant leaf node from given node\n    {\n        if (n == null) return 0;\n        return 1 + Math.max(maxDepth(n.left), maxDepth(n.right));\n    }\n\n    public static int traverse(Node n, int target, int ret[]) {\n        if (n == null) return 0;\n        // base case\n\n        if (n.data == target) {\n            ret[0] = Math.max(ret[0], maxDepth(n.right));\n            ret[0] = Math.max(ret[0], maxDepth(n.left));\n            return 1;\n        }\n        // target found, hence returning distance from it\n\n        int val = traverse(n.left, target, ret);\n        if (val != 0)\n        // (val != 0) means target was found at distance = val\n        {\n            ret[0] = Math.max(ret[0], val + maxDepth(n.right));\n            // finding max Depth on right as target was on left\n            return val + 1;\n        }\n\n        val = traverse(n.right, target, ret);\n        if (val != 0)\n        // (val != 0) means target was found at distance = val\n        {\n            ret[0] = Math.max(ret[0], val + maxDepth(n.left));\n            // finding max Depth on left as target was on right\n            return val + 1;\n        }\n\n        return 0;\n    }\n\n    public static int minTime(Node root, int target) {\n        // ret=0;\n        // because we cannot pass an integer by reference in java\n        // we are making an array of size 1;\n        int[] ret = {0};\n        traverse(root, target, ret);\n        return ret[0];\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def maxDepth(self, n):\r\n        # finding the most distant leaf node from given node\r\n        if n is None:\r\n            return 0\r\n        return 1 + max(( self.maxDepth(n.left) , self.maxDepth(n.right) ))\r\n    \r\n    def traverse(self,n,target):\r\n        if n is None:\r\n            # base case\r\n            return (0,0)\r\n        \r\n        if n.data==target:\r\n            # target found, hence returning distance from it\r\n            ans = self.maxDepth(n.right)\r\n            ans = max( ans, self.maxDepth(n.left) )\r\n            return (ans,1)\r\n        \r\n        # this func return 2 integers\r\n        # ans represents a possible answer\r\n        # dist represents distance from target node if it was found in subtree\r\n        \r\n        ans, dist = self.traverse(n.left, target)\r\n        if dist:\r\n            # dist != 0 means target was found at distance = dist\r\n            ans = max( ans, dist+self.maxDepth(n.right) )\r\n            # finding max Depth on right as target was on left\r\n            return (ans,dist+1)\r\n        \r\n        ans, dist = self.traverse(n.right, target)\r\n        if dist:\r\n            ans = max( ans, dist+self.maxDepth(n.left) )\r\n            # finding max Depth on left as target was on right\r\n            return (ans,dist+1)\r\n        \r\n        return (0,0)\r\n    \r\n    def minTime(self,root,target):\r\n        return ( self.traverse(root,target) )[0]\r\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    // Complete this function\n    public int maxDepth(Node n) {\n        if (n == null) return 0;\n        return 1 + Math.Max(maxDepth(n.left), maxDepth(n.right));\n    }\n\n    public int traverse(Node n, int target, ref int ret) {\n        if (n == null) return 0;\n\n        if (n.data == target) {\n            ret = Math.Max(ret, maxDepth(n.right));\n            ret = Math.Max(ret, maxDepth(n.left));\n            return 1;\n        }\n\n        int val = traverse(n.left, target, ref ret);\n        if (val != 0) {\n            ret = Math.Max(ret, val + maxDepth(n.right));\n            return val + 1;\n        }\n\n        val = traverse(n.right, target, ref ret);\n        if (val != 0) {\n            ret = Math.Max(ret, val + maxDepth(n.left));\n            return val + 1;\n        }\n\n        return 0;\n    }\n\n    public int minTime(Node root, int target) {\n        int ret = 0;\n        traverse(root, target, ref ret);\n        return ret;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n\n/*\nclass Node\n{\n    constructor(x){\n        this.key=x;\n        this.left=null;\n        this.right=null;\n    }\n}\n*/\n\n/**\n * @param {Node} root\n * @param {number} target\n * @return {number}\n */\nclass Solution {\n    minTime(root, target) {\n        // code here\n        function maxDepth(n) {\n            if (!n) return 0;\n            return 1 + Math.max(maxDepth(n.left), maxDepth(n.right));\n        }\n\n        function traverse(n, target, ret) {\n            if (!n) return 0;\n\n            if (n.key === target) {\n                ret[0] = Math.max(ret[0], maxDepth(n.right));\n                ret[0] = Math.max(ret[0], maxDepth(n.left));\n                return 1;\n            }\n\n            let val = traverse(n.left, target, ret);\n            if (val) {\n                ret[0] = Math.max(ret[0], val + maxDepth(n.right));\n                return val + 1;\n            }\n\n            val = traverse(n.right, target, ret);\n            if (val) {\n                ret[0] = Math.max(ret[0], val + maxDepth(n.left));\n                return val + 1;\n            }\n\n            return 0;\n        }\n\n        let ret = [ 0 ];\n        traverse(root, target, ret);\n\n        return ret[0];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}