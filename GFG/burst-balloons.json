{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712225,
            "title": "MaxSkill",
            "titleSlug": "burst-balloons",
            "content": "<p><span ><span >You are given </span><span style=\"font-size: 18.6667px;\">a queue of<strong> n </strong>people</span><span >&nbsp;indexed from </span><strong >0</strong><span > to </span><strong >n-1</strong><span >.&nbsp;</span><span style=\"font-size: 18.6667px;\">Each person has a <strong>rating </strong>represented by an array <strong>arr[]</strong></span><strong >.</strong><span > You are asked to remove all the persons from the queue. </span></span><span ><span style=\"font-size: 18.6667px;\">If you remove the<strong> i-th </strong>person from the queue, you gain a skill value of <strong>arr[i - 1] * arr[i] * arr[i + 1]</strong></span><span >.&nbsp;</span></span><span style=\"font-size: 18.6667px;\">Return the <strong>maximum total</strong> skill you can obtain by removing the people optimally.</span></p>\n<p><span >Note:&nbsp;</span><span style=\"font-size: 18.6667px;\">If <strong>i - 1</strong> or <strong>i + 1</strong> is out of bounds, assume there is an implicit person with a rating of <strong>1 </strong>at that position.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [5, 10] \n<strong>Output:</strong> 60\n<strong>Explanation:</strong><br /></span><span style=\"font-size: 18px;\">Remove person with rating 5 &rarr; Skill gained = 1 * 5 * 10 = 50, remaining queue: [10].\nRemove person with rating 10 &rarr; Skill gained = 1 * 10 * 1 = 10, total skill = 50 + 10 = 60.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [3, 2, 5, 8]<strong>\nOutput: </strong>182<strong>\nExplanation:\n</strong>Remove person with rating 2 &rarr; Skill gained = 3 * 2 * 5 = 30, remaining queue: [3, 5, 8].\nRemove person with rating 5 &rarr; Skill gained = 3 * 5 * 8 = 120, remaining queue: [3, 8].\nRemove person with rating 3 &rarr; Skill gained = 1 * 3 * 8 = 24, remaining queue: [8].\nRemove person with rating 8 &rarr; Skill gained = 1 * 8 * 1 = 8, total skill = 30 + 120 + 24 + 8 = 182</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br /></span><span style=\"font-size: 18px;\">1 &le; n &le; 300</span><br style=\"font-size: 18px;\" /><span style=\"font-size: 18px;\">0 &le; arr[i] &le; 100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a queue of 'n' people, each with a rating represented by the array 'arr[]' (indexed from 0 to n-1), determine the maximum total skill that can be obtained by removing people from the queue optimally.  When the i-th person is removed, the skill gained is calculated as arr[i-1] * arr[i] * arr[i+1]. If i-1 or i+1 are out of bounds, assume an implicit person with a rating of 1 at that position.",
                "constraints": [
                    "1 <= n <= 300",
                    "0 <= arr[i] <= 100"
                ],
                "testcases": [
                    {
                        "input": "[5, 10]",
                        "output": "60",
                        "explanation": "One optimal removal sequence is as follows:\n1. Remove 5: Skill gained = 1 * 5 * 10 = 50. Remaining queue: [10].\n2. Remove 10: Skill gained = 1 * 10 * 1 = 10. Total skill = 50 + 10 = 60."
                    },
                    {
                        "input": "[3, 2, 5, 8]",
                        "output": "182",
                        "explanation": "One optimal removal sequence is as follows:\n1. Remove 2: Skill gained = 3 * 2 * 5 = 30. Remaining queue: [3, 5, 8].\n2. Remove 5: Skill gained = 3 * 5 * 8 = 120. Remaining queue: [3, 8].\n3. Remove 3: Skill gained = 1 * 3 * 8 = 24. Remaining queue: [8].\n4. Remove 8: Skill gained = 1 * 8 * 1 = 8. Total skill = 30 + 120 + 24 + 8 = 182."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Try every possible way, then use memoization.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to calculate maximum skill value\n    // from removing people in range [left, right]\n    int maxSkill(vector<int> &arr) {\n\n        int n = arr.size();\n\n        // Add virtual people with skill value 1 at both\n        // ends of `arr`\n        arr.insert(arr.begin(), 1);\n        arr.push_back(1);\n\n        // Initialize the dp table with 0\n        vector<vector<int>> dp(n + 2, vector<int>(n + 2, 0));\n\n        // Iterate over subarrays of increasing length\n        for (int length = 1; length <= n; length++) {\n            for (int left = 1; left <= n - length + 1; left++) {\n                int right = left + length - 1;\n\n                // Try every possible last person to remove\n                for (int k = left; k <= right; k++) {\n\n                    // Calculate skill from removing `k`\n                    // last in this range\n                    int skill = arr[left - 1] * arr[k] * arr[right + 1];\n\n                    // Add skill from the left and right\n                    // subarrays\n                    int totalSkill = skill + dp[left][k - 1] + dp[k + 1][right];\n\n                    // Update dp[left][right] with the maximum skill\n                    dp[left][right] = max(dp[left][right], totalSkill);\n                }\n            }\n        }\n\n        // Return the result from the dp table for\n        // the full range of people\n        return dp[1][n];\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    public static int maxSkill(int[] arr) {\n        int n = arr.length;\n\n        // Add virtual people with skill value 1 at both ends\n        int[] nums = new int[n + 2];\n        nums[0] = 1;\n        nums[n + 1] = 1;\n        for (int i = 0; i < n; i++) {\n            nums[i + 1] = arr[i];\n        }\n\n        // Initialize the dp table with 0\n        int[][] dp = new int[n + 2][n + 2];\n\n        // Iterate over subarrays of increasing length\n        for (int length = 1; length <= n; length++) {\n            for (int left = 1; left <= n - length + 1; left++) {\n                int right = left + length - 1;\n\n                // Try every possible last person to remove\n                for (int k = left; k <= right; k++) {\n\n                    // Calculate skill from removing `k` last in this range\n                    int skill = nums[left - 1] * nums[k] * nums[right + 1];\n\n                    // Add skill from the left and right subarrays\n                    int totalSkill = skill + dp[left][k - 1] + dp[k + 1][right];\n\n                    // Update dp[left][right] with the maximum skill\n                    dp[left][right] = Math.max(dp[left][right], totalSkill);\n                }\n            }\n        }\n\n        // Return the result from the dp table for the full range of people\n        return dp[1][n];\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "class Solution:\n    # Function to calculate maximum skill value\n    # from removing people in range [left, right]\n    def maxSkill(self, arr):\n        n = len(arr)\n\n        # Add virtual people with skill value 1 at both ends\n        arr = [1] + arr + [1]\n\n        # Initialize the dp table with 0\n        dp = [[0] * (n + 2) for _ in range(n + 2)]\n\n        # Iterate over subarrays of increasing length\n        for length in range(1, n + 1):\n            for left in range(1, n - length + 2):\n                right = left + length - 1\n\n                # Try every possible last person to remove\n                for k in range(left, right + 1):\n\n                    # Calculate skill from removing `k` last in this range\n                    skill = arr[left - 1] * arr[k] * arr[right + 1]\n\n                    # Add skill from the left and right subarrays\n                    totalSkill = skill + dp[left][k - 1] + dp[k + 1][right]\n\n                    # Update dp[left][right] with the maximum skill\n                    dp[left][right] = max(dp[left][right], totalSkill)\n\n        # Return the result from the dp table for the\n        # full range of people\n        return dp[1][n]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n\n    maxSkill(arr) {\n\n        let n = arr.length;\n\n        // Add virtual people with skill value 1 at both ends\n        arr = [ 1, ...arr, 1 ];\n\n        // Initialize the dp table with 0\n        let dp = Array.from({length : n + 2}, () => Array(n + 2).fill(0));\n\n        // Iterate over subarrays of increasing length\n        for (let length = 1; length <= n; length++) {\n            for (let left = 1; left <= n - length + 1; left++) {\n                let right = left + length - 1;\n\n                // Try every possible last person to remove\n                for (let k = left; k <= right; k++) {\n                    // Calculate skill from removing `k` last in this range\n                    let skill = arr[left - 1] * arr[k] * arr[right + 1];\n\n                    // Add skill from the left and right subarrays\n                    let totalSkill = skill + dp[left][k - 1] + dp[k + 1][right];\n\n                    // Update dp[left][right] with the maximum skill\n                    dp[left][right] = Math.max(dp[left][right], totalSkill);\n                }\n            }\n        }\n\n        // Return the result from the dp table for the full range of people\n        return dp[1][n];\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}