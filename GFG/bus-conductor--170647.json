{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 714171,
            "title": "Bus Conductor",
            "titleSlug": "bus-conductor--170647",
            "content": "<p><span style=\"font-size: 18px;\">You are&nbsp;conductor of a bus .There are&nbsp;<strong><code>n</code></strong>&nbsp;chairs&nbsp;and&nbsp;<strong><code>n</code></strong>&nbsp;passengers in the bus. You are given an array&nbsp;<strong><code>chairs</code></strong>&nbsp;of length&nbsp;<code>n</code>, where&nbsp;<code>chairs[i]</code>&nbsp;is the position of the&nbsp;<code>i<sup>th</sup></code>&nbsp;chair. You are also given the array&nbsp;<strong><code>passengers</code></strong>&nbsp;of length&nbsp;<code>n</code>, where&nbsp;<code>passengers[j]</code>&nbsp;is the position of the&nbsp;<code>j<sup>th</sup></code>&nbsp;passenger.</span></p>\n<p><span style=\"font-size: 18px;\">You may perform the following move any number of times:</span></p>\n<ul>\n<li><span style=\"font-size: 18px;\">Increase or decrease the position of the&nbsp;<code>i<sup>th</sup></code>&nbsp;passenger&nbsp;by&nbsp;<code>1</code>&nbsp;(i.e., moving the&nbsp;<code>i<sup>th</sup></code>&nbsp;passenger from position&nbsp;<code>x</code>&nbsp;to&nbsp;<code>x + 1</code>&nbsp;or&nbsp;<code>x - 1</code>)</span></li>\n</ul>\n<p><span style=\"font-size: 18px;\">Return&nbsp;<em>the&nbsp;<strong>minimum number of moves</strong> required to move each passenger to a chair such that no two passengers are in the same chair and every&nbsp;</em></span><em style=\"font-size: 18px;\">passenger gets a chair</em><em style=\"font-size: 18px;\">.</em></p>\n<p><span style=\"font-size: 18px;\">Note that there may be&nbsp;<strong>multiple</strong>&nbsp;chairs or passengers in the&nbsp;<strong>same&nbsp;</strong>position at the beginning.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> \nchairs = [3,1,5] \npassengers = [2,7,4]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \nThe passengers are moved as follows:\n- The first passenger is moved from position 2 to position 1 using 1 move.\n- The second passenger is moved from position 7 to position 5 using 2 moves.\n- The third passenger is moved from position 4 to position 3 using 1 move.\nIn total, 1 + 2 + 1 = 4 moves were used.\n</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> \nchairs = [2,2,6,6] \npassengers = [1,3,2,6]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \nNote that there are two chairs at position 2 and two chairs at position 6.\nThe passangers are moved as follows:\n- The first passenger is moved from position 1 to position 2 using 1 move.\n- The second passenger is moved from position 3 to position 6 using 3 moves.\n- The third passenger is not moved.\n- The fourth passenger is not moved.\nIn total, 1 + 3 + 0 + 0 = 4 moves were used.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>findMoves()</strong> which take length of array, and two arrays chairs and passengers as input, and return an interger value as described above.</span><br /><br /><strong><span style=\"font-size: 18px;\">Expected Time Complexity:</span></strong><span style=\"font-size: 18px;\"> O(nlogn)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong></span><br /><span style=\"font-size: 18px;\"><code>&nbsp; &nbsp;n == chairs.length == passengers.length</code></span><br /><span style=\"font-size: 18px;\"><code>&nbsp; &nbsp;1 &lt;= n &lt;= 10^5</code></span><br /><span style=\"font-size: 18px;\"><code>&nbsp; &nbsp;1 &lt;= chairs[i], passengers[j] &lt;= 100</code></span></p>\n<p>&nbsp;</p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "You are a bus conductor. There are `n` chairs and `n` passengers on the bus. You are given two arrays: `chairs` of length `n`, where `chairs[i]` is the position of the i-th chair, and `passengers` of length `n`, where `passengers[j]` is the position of the j-th passenger.\n\nYou can move passengers. Each move consists of increasing or decreasing the position of a passenger by 1 (moving the i-th passenger from position `x` to `x + 1` or `x - 1`).\n\nDetermine the minimum number of moves required to move each passenger to a chair such that no two passengers are in the same chair, and every passenger gets a chair. Note that there may be multiple chairs or passengers in the same position initially.",
                "constraints": [
                    "`n == chairs.length == passengers.length`",
                    "`1 <= n <= 10^5`",
                    "`1 <= chairs[i], passengers[j] <= 100`"
                ],
                "testcases": [
                    {
                        "input": "chairs = [3,1,5]\npassengers = [2,7,4]",
                        "output": "4",
                        "explanation": "The passengers are moved as follows:\n- The first passenger is moved from position 2 to position 1 using 1 move.\n- The second passenger is moved from position 7 to position 5 using 2 moves.\n- The third passenger is moved from position 4 to position 3 using 1 move.\nIn total, 1 + 2 + 1 = 4 moves were used."
                    },
                    {
                        "input": "chairs = [2,2,6,6]\npassengers = [1,3,2,6]",
                        "output": "4",
                        "explanation": "Note that there are two chairs at position 2 and two chairs at position 6.\nThe passengers are moved as follows:\n- The first passenger is moved from position 1 to position 2 using 1 move.\n- The second passenger is moved from position 3 to position 6 using 3 moves.\n- The third passenger is not moved.\n- The fourth passenger is not moved.\nIn total, 1 + 3 + 0 + 0 = 4 moves were used."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Sorting array can help us?</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the minimum number of moves required.\n    int findMoves(int n, vector<int> chairs, vector<int> passengers) {\n        int ans = 0;\n        \n        // Sorting the chairs and passengers array to get them in order.\n        sort(chairs.begin(), chairs.end());\n        sort(passengers.begin(), passengers.end());\n        \n        // Looping through the chairs and passengers array to calculate the number of moves.\n        for (int i = 0; i < n; i++) {\n            // Adding the absolute difference of chair and passenger position to the answer.\n            ans += abs(chairs[i] - passengers[i]);\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public static int findMoves(int n, int[] chairs, int[] passengers) {\r\n        // code here\r\n        Arrays.sort(chairs);\r\n        Arrays.sort(passengers);\r\n        int ans=0;\r\n        for(int i=0;i<n;i++){\r\n            ans+=Math.abs(chairs[i]-passengers[i]);\r\n        }\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    def findMoves(self, n,chairs, passengers) -> int:\r\n        chairs.sort()\r\n        passengers.sort()\r\n        return sum(abs(e - t) for e, t in zip(chairs, passengers))",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} n\n * @param {number[]} chairs\n * @param {number[]} passengers\n * @returns {number}\n*/\nclass Solution {\n    //Function to find minimum number of moves to place all the\n    //interpreters.\n    findMoves(n, chairs, passengers) {\n        chairs.sort((a, b) => a - b);\n        passengers.sort((a, b) => a - b);\n        return chairs.reduce((total, chair, index) => total + Math.abs(chair - passengers[index]), 0);\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}