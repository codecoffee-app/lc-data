{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 709515,
            "title": "Stock Buy and Sell \u2013 Max 2 Transactions Allowed",
            "titleSlug": "buy-and-sell-a-share-at-most-twice",
            "content": "<p><span style=\"font-size: 18px;\">In daily share trading, a trader buys shares and sells them on the same day. If the trader is allowed to make <strong>at most</strong> <strong>2 </strong>transactions in a day,&nbsp;</span><span style=\"font-size: 18px;\">find out the&nbsp;</span><strong style=\"font-size: 18px;\">maximum</strong><span style=\"font-size: 18px;\"> profit that a share trader could have made</span><span style=\"font-size: 18px;\">. </span></p>\n<p><span style=\"font-size: 18px;\">You are given an array <strong>prices[]</strong> representing stock prices throughout the day</span><span style=\"font-size: 18px;\">. Note that t</span><span style=\"font-size: 18px;\">he second transaction can only start after the first one is complete (buy-&gt;sell-&gt;buy-&gt;sell).</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong><span style=\"font-family: -apple-system, 'system-ui', 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; white-space: normal;\">prices</span>[] = [10, 22, 5, 75, 65, 80]\n<strong>Output: </strong>87\n<strong>Explanation: <br /></strong>Trader will b</span><span style=\"font-size: 18px;\">uy at 10 and sells at 22. <br />Profit earned in 1st transaction = 22 - 10 = 12. <br />Then he buys at 5 and sell at 80. <br />Profit earned in 2nd transaction = 80 - 5 = 75. <br />Total profit earned = 12 + 75 = 87. </span></pre>\n<pre><span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Input:</span> </strong></span><span style=\"font-family: -apple-system, 'system-ui', 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: 18px; white-space: normal;\">prices</span><span style=\"font-size: 18px;\"><span style=\"font-size: 18px;\">[] = [2, 30, 15, 10, 8, 25, 80]\n</span><strong><span style=\"font-size: 18px;\">Output:</span> </strong></span><span style=\"font-size: 18px;\">100</span>\n<span style=\"font-size: 18px;\"><strong>Explanation: <br /></strong></span><span style=\"font-size: 18px;\">Trader will buy at 2 and sells at 30. <br />Profit earned in 1st transaction = 30 - 2 = 28. <br />Then he buys at 8 and sell at 80. <br />Profit earned in 2nd transaction = 80 - 8 = 72. <br />Total profit earned = 28 + 72 = 100.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">1 &lt;=&nbsp;prices.size() &lt;= 10<sup>5<br /></sup></span><span style=\"font-size: 18px;\">1 &lt;=&nbsp;prices[i] &lt;= 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `prices[]` representing stock prices throughout the day, determine the maximum profit a share trader could make with at most two transactions. The trader buys and sells shares on the same day. The second transaction can only start after the first one is complete (buy -> sell -> buy -> sell).",
                "constraints": [
                    "1 <= prices.size() <= 10^5",
                    "1 <= prices[i] <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "[10, 22, 5, 75, 65, 80]",
                        "output": "87",
                        "explanation": "The trader buys at 10 and sells at 22, making a profit of 12. Then, they buy at 5 and sell at 80, making a profit of 75. The total profit is 12 + 75 = 87."
                    },
                    {
                        "input": "[2, 30, 15, 10, 8, 25, 80]",
                        "output": "100",
                        "explanation": "The trader buys at 2 and sells at 30, making a profit of 28. Then, they buy at 8 and sell at 80, making a profit of 72. The total profit is 28 + 72 = 100."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"color: #1e2229; font-family: Nunito; font-size: 14pt; background-color: #ffffff;\">By breaking down the problem into subproblems, we can use a dynamic programming approach to efficiently compute the optimal solution.</span></p>",
            "<p><span style=\"font-size: 14pt;\">We can efficiently do this in O(n) . The idea is to store the maximum possible profit of every subarray and solve the problem in the following two phases.</span></p>\n<p><span style=\"font-size: 14pt;\">1) Create a table profit[0..n-1] and initialize all values in it 0.<br />2) Traverse price[] from right to left and update profit[i] such that profit[i] stores maximum profit achievable from one transaction in subarray price[i..n-1]<br />3) Traverse price[] from left to right and update profit[i] such that profit[i] stores maximum profit such that profit[i] contains maximum achievable profit from two transactions in subarray price[0..i].<br />4) Return profit[n-1]</span></p>\n<p><span style=\"font-size: 14pt;\">To do step 2, we need to keep track of the maximum price from right to left side, and to do step 3, we need to keep track of the minimum price from left to right. Why we traverse in reverse directions? The idea is to save space, in the third step, we use the same array for both purposes, maximum with 1 transaction and maximum with 2 transactions. After iteration i, the array profit[0..i] contains the maximum profit with 2 transactions, and profit[i+1..n-1] contains profit with two transactions.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Dynamic Programming",
                "slug": "dynamic-programming"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon",
            "facebook"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxProfit(vector<int>& prices) {\n        int n = prices.size();\n        if (n == 0)\n            return 0;\n\n        vector<vector<int>> curr(3, vector<int>(2, 0));\n        vector<vector<int>> next(3, vector<int>(2, 0));\n\n        // Iterate from the last day to the first\n        for (int i = n - 1; i >= 0; i--) {\n            for (int k = 1; k <= 2; k++) {\n\n                // Calculate for buy state\n                curr[k][1] = max(-prices[i] + next[k][0], next[k][1]);\n\n                // Calculate for sell state\n                curr[k][0] = max(prices[i] + next[k - 1][1], next[k][0]);\n            }\n\n            // Move current state to next, for the\n            // next iteration\n            next = curr;\n        }\n\n        // The result is the maximum profit starting\n        // from day 0, with 2 transactions, and in\n        // buy state = 1 (this show that transaction\n        // has been completed)\n        return curr[2][1];\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public static int maxProfit(int[] prices) {\n        int n = prices.length;\n        if (n == 0) return 0;\n\n        int[][] curr = new int[3][2];\n        int[][] next = new int[3][2];\n\n        // Iterate from the last day to the first\n        for (int i = n - 1; i >= 0; i--) {\n            for (int k = 1; k <= 2; k++) {\n\n                // Calculate for buy state\n                curr[k][1] = Math.max(-prices[i] + next[k][0], next[k][1]);\n\n                // Calculate for sell state\n                curr[k][0] = Math.max(prices[i] + next[k - 1][1], next[k][0]);\n            }\n\n            // Move current state to next, for the\n            // next iteration\n            next = curr.clone();\n        }\n\n        // The result is the maximum profit starting\n        // from day 0, with 2 transactions, and in\n        // buy state = 1 (this show that transaction\n        // has been completed)\n        return curr[2][1];\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "from typing import List\n\n\nclass Solution:\n\n    def maxProfit(self, prices):\n        n = len(prices)\n        if n == 0:\n            return 0\n\n        curr = [[0] * 2 for _ in range(3)]\n        next = [[0] * 2 for _ in range(3)]\n\n        # Iterate from the last day to the first\n        for i in range(n - 1, -1, -1):\n            for k in range(1, 3):\n\n                # Calculate for buy state\n                curr[k][1] = max(-prices[i] + next[k][0], next[k][1])\n\n                # Calculate for sell state\n                curr[k][0] = max(prices[i] + next[k - 1][1], next[k][0])\n\n            # Move current state to next, for the\n            # next iteration\n            next = [row[:] for row in curr]\n\n        # The result is the maximum profit starting\n        # from day 0, with 2 transactions, and in\n        # buy state = 1 (this show that transaction\n        # has been completed)\n        return curr[2][1]\n",
                "lang_text": "py"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n     * @param number[] prices\n     * @returns number\n     */\n    maxProfit(prices) {\n        let n = prices.length;\n        if (n === 0) return 0;\n\n        let curr = Array.from({length : 3}, () => [0, 0]);\n        let next = Array.from({length : 3}, () => [0, 0]);\n\n        // Iterate from the last day to the first\n        for (let i = n - 1; i >= 0; i--) {\n            for (let k = 1; k <= 2; k++) {\n\n                // Calculate for buy state\n                curr[k][1] = Math.max(-prices[i] + next[k][0], next[k][1]);\n\n                // Calculate for sell state\n                curr[k][0] = Math.max(prices[i] + next[k - 1][1], next[k][0]);\n            }\n\n            // Move current state to next, for the\n            // next iteration\n            next = curr.map(row => [...row]);\n        }\n\n        // The result is the maximum profit starting\n        // from day 0, with 2 transactions, and in\n        // buy state = 1 (this show that transaction\n        // has been completed)\n        return curr[2][1];\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}