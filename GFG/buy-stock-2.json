{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712197,
            "title": "Stock Buy and Sell \u2013 Max one Transaction Allowed",
            "titleSlug": "buy-stock-2",
            "content": "<p><span style=\"font-size: 18.6667px;\">Given an array <strong>prices[]</strong> of length n, representing the prices of the stocks on different days. The task is to find the maximum profit possible by buying and selling the stocks on different days when at most one transaction is allowed. Here one transaction means 1 buy + 1 Sell. If it is not possible to make a profit then <strong>return 0</strong>.</span></p>\n<p><span style=\"font-size: 18.6667px;\">Note: Stock must be bought before being sold.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong >Input: </strong><span >prices[] = [7, 10, 1, 3, 6, 9, 2]<br /></span><strong >Output:</strong><span > 8<br /></span><strong >Explanation:</strong><span > You can buy the stock on day 2 at price = 1 and sell it on day 5 at price = 9. Hence, the profit is 8.</span></span></pre>\n<pre><span ><strong >Input: </strong><span >prices[] = [7, 6, 4, 3, 1]<br /></span><strong >Output:</strong><span > 0 <br /></span><span style=\"font-size: 18.6667px;\"><strong>Explanation</strong></span><strong >:</strong><span > Here the prices are in decreasing order, hence if we buy any day then we cannot sell it at a greater price. Hence, the answer is 0.<br /></span></span></pre>\n<pre><span ><strong>Input: </strong>prices[] = [1, 3, 6, 9, 11]</span><br /><span ><strong>Output:</strong> 10 </span><br /><span ><span style=\"font-size: 18.6667px;\"><strong>Explanation</strong></span><strong >:</strong><span > Since the array is sorted in increasing order, we can make maximum profit by buying at price[0] and selling at price[n-1].</span></span></pre>\n<p><span ><strong>Constraint:</strong><br />1 &lt;= prices.size()&lt;= 10<sup>5</sup></span><br /><span >0 &lt;= prices[i] &lt;=10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `prices[]` of length n, where `prices[i]` represents the price of a stock on day i, determine the maximum profit that can be made by buying and selling the stock at most once. A transaction consists of one buy and one sell.  If no profit can be made, return 0.  Note: You must buy the stock before selling it.",
                "constraints": [
                    "1 <= prices.size() <= 10^5",
                    "0 <= prices[i] <= 10^4"
                ],
                "testcases": [
                    {
                        "input": "[7, 10, 1, 3, 6, 9, 2]",
                        "output": "8",
                        "explanation": "Buy the stock on day 2 (price = 1) and sell it on day 5 (price = 9) for a profit of 8."
                    },
                    {
                        "input": "[7, 6, 4, 3, 1]",
                        "output": "0",
                        "explanation": "The prices are in decreasing order, making it impossible to sell at a higher price than you bought at. Therefore, the maximum profit is 0."
                    },
                    {
                        "input": "[1, 3, 6, 9, 11]",
                        "output": "10",
                        "explanation": "Since the array is sorted in increasing order, the maximum profit is achieved by buying at the lowest price (price[0]) and selling at the highest price (price[n-1]), resulting in a profit of 10."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Think of selecting an index whose price is lower as compared to the prices in further index</p>"
        ],
        "relatedTopics": [
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Arrays",
                "slug": "arrays"
            }
        ],
        "companies": [
            "bloomberg",
            "facebook",
            "intel",
            "infosys",
            "zoho",
            "morgan-stanley",
            "amazon",
            "microsoft",
            "samsung",
            "yahoo",
            "paypal",
            "nvidia",
            "oracle",
            "visa",
            "walmart",
            "goldman-sachs",
            "tcs",
            "adobe",
            "google",
            "ibm",
            "accenture",
            "apple",
            "uber"
        ],
        "solutions": [
            {
                "lang": "C",
                "full_func": "//Back-end complete function Template for C\n\nint maximumProfit(int prices[], int pricesSize) {\n    // Initialize the minimum buy price as the first price in the array\n    int buyPrice = prices[0];\n\n    // Initialize the maximum profit as 0\n    int maxProfit = 0;\n\n    // Iterate through the array of prices starting from the second price (index 1)\n    for (int i = 1; i < pricesSize; i++) {\n        // Update the maximum profit if the current profit (prices[i] - buyPrice) is\n        // greater\n        maxProfit =\n            (prices[i] - buyPrice > maxProfit) ? prices[i] - buyPrice : maxProfit;\n\n        // Update the minimum buy price if the current price is lower\n        buyPrice = (prices[i] < buyPrice) ? prices[i] : buyPrice;\n    }\n\n    // Return the maximum possible profit\n    return maxProfit;\n}",
                "lang_text": "c"
            },
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maximumProfit(vector<int> &prices) {\n        // Initialize the minimum buy price as the first price in the array\n        int buyPrice = prices[0];\n\n        // Initialize the maximum profit as 0\n        int maxProfit = 0;\n\n        // Iterate through the array of prices starting from the second price (index 1)\n        for (int i = 1; i < prices.size(); i++) {\n            // Update the maximum profit if the current profit (prices[i] - buyPrice) is\n            // greater This is done by comparing the current profit with the previous\n            // maximum profit\n            maxProfit = max(maxProfit, prices[i] - buyPrice);\n\n            // Update the minimum buy price if the current price is lower\n            // This is done by comparing the current price with the previous minimum buy\n            // price\n            buyPrice = min(buyPrice, prices[i]);\n        }\n\n        // Return the maximum possible profit\n        return maxProfit;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // This function calculates the maximum possible profit from a given array of stock\n    // prices\n    public int maximumProfit(int prices[]) {\n        // Initialize the minimum buy price as the first price in the array\n        int buyPrice = prices[0];\n\n        // Initialize the maximum profit as 0\n        int maxProfit = 0;\n\n        // Iterate through the array of prices starting from the second price (index 1)\n        for (int i = 1; i < prices.length; i++) {\n            // Update the maximum profit if the current profit (prices[i] - buyPrice) is\n            // greater\n            maxProfit = Math.max(maxProfit, prices[i] - buyPrice);\n\n            // Update the minimum buy price if the current price is lower\n            buyPrice = Math.min(buyPrice, prices[i]);\n        }\n\n        // Return the maximum possible profit\n        return maxProfit;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maximumProfit(self, prices):\n        # Initialize the minimum buy price as the first price in the list\n        buy_price = prices[0]\n        # Initialize the maximum profit as 0\n        max_profit = 0\n\n        # Iterate through the list of prices starting from the second price (index 1)\n        for i in range(1, len(prices)):\n            # Update the maximum profit if the current profit (prices[i] - buy_price) is greater\n            max_profit = max(max_profit, prices[i] - buy_price)\n            # Update the minimum buy price if the current price is lower\n            buy_price = min(buy_price, prices[i])\n\n        # Return the maximum possible profit\n        return max_profit\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Function to calculate the maximum possible profit from a given array of stock\n    // prices\n    public int MaximumProfit(int[] prices) {\n        // Initialize the minimum buy price as the first price in the array\n        int buyPrice = prices[0];\n        // Initialize the maximum profit as 0\n        int maxProfit = 0;\n\n        // Iterate through the array of prices starting from the second price (index 1)\n        for (int i = 1; i < prices.Length; i++) {\n            // Update the maximum profit if the current profit (prices[i] - buyPrice) is\n            // greater\n            maxProfit = Math.Max(maxProfit, prices[i] - buyPrice);\n            // Update the minimum buy price if the current price is lower\n            buyPrice = Math.Min(buyPrice, prices[i]);\n        }\n\n        // Return the maximum possible profit\n        return maxProfit;\n    }\n}\n",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    maximumProfit(prices) {\n        let buy_price = prices[0];\n        let max_profit = 0;\n\n        for (let i = 1; i < prices.length; i++) {\n            max_profit = Math.max(max_profit, prices[i] - buy_price);\n            buy_price = Math.min(buy_price, prices[i]);\n        }\n\n        return max_profit;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}