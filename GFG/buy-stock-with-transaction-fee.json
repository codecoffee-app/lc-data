{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712377,
            "title": "Buy Stock with Transaction Fee",
            "titleSlug": "buy-stock-with-transaction-fee",
            "content": "<p><span >You are given an array <strong>arr[]</strong>, in which <strong>arr[i]</strong>&nbsp;is the price of a given stock on the <strong>ith</strong> day and an integer <strong>k</strong> represents a <strong>transaction fee</strong>. Find the <strong>maximum profit</strong> you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.</span></p>\n<p><span ><strong>Note:</strong>&nbsp;You may not engage in <strong>multiple transactions</strong> simultaneously (i.e., you must sell the stock before you buy again).<br /><br /><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input:</strong> arr[] = [6, 1, 7, 2, 8, 4], k = 2</span><br /><span ><strong>Output:</strong> 8</span><br /><span ><strong>Explanation:</strong></span><br /><span >Buy the stock on day 2 and sell it on day 3 =&gt; 7 &ndash; 1 -2 = 4</span><br /><span >Buy the stock on day 4 and sell it on day 5 =&gt; 8 &ndash; 2 - 2 = 4</span><br /><span >Maximum Profit &nbsp;= 4 + 4 = 8</span></pre>\n<pre><span ><strong>Input:</strong> arr[] = [7, 1, 5, 3, 6, 4], k = 1</span><br /><span ><strong>Output:</strong> 5</span><br /><span ><strong>Explanation: </strong></span><br /><span >Buy the stock on day 2 and sell it on day 3 =&gt; 5 &ndash; 1 - 1 = 3</span><br /><span >Buy the stock on day 4 and sell it on day 5 =&gt; 6 &ndash; 3 - 1 = 2</span><br /><span >Maximum Profit &nbsp;= 3 + 2 = 5</span></pre>\n<p><span ><strong>Constraint:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup></span><br /><span >1 &le; arr[i] &le; 10<sup>6</sup><br />0 &le; k &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr[]` representing stock prices on consecutive days, where `arr[i]` is the price on the `ith` day, and an integer `k` representing a transaction fee. Determine the maximum profit achievable by buying and selling stocks with the following rules:\n\n*   You can complete as many transactions as you like.\n*   A transaction fee `k` is deducted for each transaction (buy and sell).\n*   You cannot engage in multiple transactions simultaneously (i.e., you must sell a stock before buying another).",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6",
                    "0 <= k <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [6, 1, 7, 2, 8, 4], k = 2",
                        "output": "8",
                        "explanation": "Buy on day 2 (price 1) and sell on day 3 (price 7), profit = 7 - 1 - 2 = 4. Buy on day 4 (price 2) and sell on day 5 (price 8), profit = 8 - 2 - 2 = 4. Total profit = 4 + 4 = 8."
                    },
                    {
                        "input": "arr[] = [7, 1, 5, 3, 6, 4], k = 1",
                        "output": "5",
                        "explanation": "Buy on day 2 (price 1) and sell on day 3 (price 5), profit = 5 - 1 - 1 = 3. Buy on day 4 (price 3) and sell on day 5 (price 6), profit = 6 - 3 - 1 = 2. Total profit = 3 + 2 = 5."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span >Use dynamic programming to track the maximum profit at each step, considering whether to buy or sell the stock while accounting for the transaction fee</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int maxProfit(vector<int> &arr, int k) {\n        int n = arr.size();\n\n        // noStock: maximum profit when not holding a stock\n        // inHand: maximum profit when holding a stock\n        int noStock = 0, inHand = 0;\n\n        // Edge case: No stocks to trade.\n        if (n == 0)\n            return 0;\n\n        for (int ind = n - 1; ind >= 0; ind--) {\n            int newNoStock, newInHand;\n\n            // Option to buy: decide whether to wait (noStock) or\n            // buy now (inHand - arr[ind])\n            newNoStock = max(noStock, inHand - arr[ind]);\n\n            // Option to sell: decide whether to wait (inHand) or\n            // sell now (arr[ind] - k + noStock)\n            newInHand = max(inHand, arr[ind] - k + noStock);\n\n            // Update the states for the next iteration\n            noStock = newNoStock;\n            inHand = newInHand;\n        }\n\n        // Return the maximum profit when starting\n        // with the option to buy (no stock held)\n        return noStock;\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    public int maxProfit(int[] arr, int k) {\n        int n = arr.length;\n\n        // noStock: maximum profit when not holding any stock (option to buy)\n        // inHand: maximum profit when holding a stock (option to sell)\n        int noStock = 0, inHand = 0;\n\n        // Edge case: No stocks to trade.\n        if (n == 0) return 0;\n\n        for (int ind = n - 1; ind >= 0; ind--) {\n            int newNoStock, newInHand;\n\n            // Option to buy: either wait (retain noStock) or\n            // buy now (transition from inHand)\n            newNoStock = Math.max(noStock, inHand - arr[ind]);\n\n            // Option to sell: either wait (retain inHand) or sell\n            // now (earn arr[ind] minus fee and add previous profit)\n            newInHand = Math.max(inHand, arr[ind] - k + noStock);\n\n            noStock = newNoStock;\n            inHand = newInHand;\n        }\n\n        // Return the maximum profit when starting\n        // with the option to buy (not holding any stock)\n        return noStock;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def maxProfit(self, arr, k):\n        n = len(arr)\n\n        # noStock: maximum profit when not holding any stock\n        # inHand: maximum profit when holding a stock\n        noStock = 0\n        inHand = 0\n\n        # Edge case: No stocks to trade.\n        if n == 0:\n            return 0\n\n        for ind in range(n - 1, -1, -1):\n\n            # Option to buy: either wait (retain noStock) or\n            # buy now (transition from inHand)\n            newNoStock = max(noStock, inHand - arr[ind])\n\n            # Option to sell: either wait (retain inHand) or\n            # sell now (earn arr[ind] minus fee and add noStock)\n            newInHand = max(inHand, arr[ind] - k + noStock)\n\n            noStock = newNoStock\n            inHand = newInHand\n\n        # Return the maximum profit when starting with\n        # the option to buy (not holding any stock)\n        return noStock\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    public int maxProfit(int[] arr, int k) {\n        int n = arr.Length;\n\n        // noStock: maximum profit when not holding any stock\n        // inHand: maximum profit when holding a stock\n        int noStock = 0, inHand = 0;\n\n        // Edge case: No stocks to trade.\n        if (n == 0) return 0;\n\n        for (int ind = n - 1; ind >= 0; ind--) {\n            int newNoStock, newInHand;\n\n            // Option to buy: either wait (retain noStock) or\n            // buy now (transition from inHand)\n            newNoStock = Math.Max(noStock, inHand - arr[ind]);\n\n            // Option to sell: either wait (retain inHand) or sell\n            // now (earn arr[ind] minus fee and add noStock)\n            newInHand = Math.Max(inHand, arr[ind] - k + noStock);\n\n            noStock = newNoStock;\n            inHand = newInHand;\n        }\n\n        // Return the maximum profit when\n        // starting with the option to buy (not holding any stock)\n        return noStock;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} arr\n * @param {number} k\n * @returns {number}\n */\n\nclass Solution {\n    // Function to find the maximum profit which can be obtained\n    // by buying and selling stocks with transaction fee.\n    maxProfit(arr, k) {\n        const n = arr.length;\n\n        // noStock: maximum profit when not holding any stock\n        // inHand: maximum profit when holding a stock\n        let noStock = 0, inHand = 0;\n\n        // Edge case: No stocks to trade.\n        if (n === 0) return 0;\n\n        for (let ind = n - 1; ind >= 0; ind--) {\n            let newNoStock, newInHand;\n\n            // Option to buy: either wait (retain noStock) or\n            // buy now (transition from inHand)\n            newNoStock = Math.max(noStock, inHand - arr[ind]);\n\n            // Option to sell: either wait (retain inHand)\n            // or sell now (earn arr[ind] minus fee and add noStock)\n            newInHand = Math.max(inHand, arr[ind] - k + noStock);\n\n            noStock = newNoStock;\n            inHand = newInHand;\n        }\n\n        // Return the maximum profit when startinG\n        // with the option to buy (not holding any stock)\n        return noStock;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}