{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703213,
            "title": "Find element at a given Index",
            "titleSlug": "c-array-print-an-element-set-25933",
            "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr</strong> of integers and an index <strong>key</strong>(0-based index). Your task is to return the element present at the index key in the array.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong><span style=\"font-size: 18px;\">Input:</span> </strong></span><span >key = 2 , </span><span >arr = [</span><span style=\"font-size: 18px;\">10, 20, 30, 40, 50]\n<strong>Output: </strong>30<br /><strong>Explanation:</strong> The value of arr[2] is 30 .</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong></span><span style=\"font-size: 18px;\">key = 4</span><span style=\"font-size: 18px;\"> , </span><span style=\"font-size: 18px;\">arr = [10, 20, 30, 40, 50, 60, 70]</span>\n<span style=\"font-size: 18px;\"><strong>Output: </strong></span><span style=\"font-size: 18px;\">50<br /><strong>Explanation:</strong> The value of the arr[4] is 50 .</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(1)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:<br /></strong></span><span style=\"font-size: 18px;\">0 &le; key &le; arr.size - 1<br />1 &le; arr.size &le; 10<sup>6</sup></span><br /><span style=\"font-size: 18px;\">1 &le; arr[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `arr` of integers and an index `key` (0-based index), return the element present at the index `key` in the array.",
                "constraints": [
                    "0 <= key <= arr.size - 1",
                    "1 <= arr.size <= 10^6",
                    "1 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "key = 2, arr = [10, 20, 30, 40, 50]",
                        "output": "30",
                        "explanation": "The element at index 2 in the array [10, 20, 30, 40, 50] is 30."
                    },
                    {
                        "input": "key = 4, arr = [10, 20, 30, 40, 50, 60, 70]",
                        "output": "50",
                        "explanation": "The element at index 4 in the array [10, 20, 30, 40, 50, 60, 70] is 50."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Access the array element using its index. Use the syntax arr[key] to get the value at the given index.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    int findElementAtIndex(int key, vector<int> &arr) { return arr[key]; }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    public static int findElementAtIndex(int key, int[] arr) { return arr[key]; }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "from typing import List\n\n\nclass Solution:\n\n    def findElementAtIndex(self, key: int, arr: List[int]) -> int:\n        return arr[key]\n",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "class Solution {\n    /**\n    * @param number n\n    * @param number key\n    * @param number[] arr\n\n    * @returns number\n    */\n    findElementAtIndex(key, arr) { return arr[key]; }\n}\n",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}