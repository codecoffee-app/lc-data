{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700700,
            "title": "C++ Classes Introduction",
            "titleSlug": "c-classes-introduction",
            "content": "<p><span style=\"font-size: 20px;\">Create class named<strong> CollegeCourse</strong> with fields&nbsp;courseID, grade, credits, gradePoints and honorPoints. Calculate honorpoints as the product of gradepoints and credits. GradePoints are calculated as (A-10),(B-9),(C-8),(D-7),(E-6) &amp; (F-5).<br />Class CollegeCourse contains&nbsp;following functions:<br />1. set_CourseId( string CID): sets courseId<br />2.&nbsp;set_Grade(char g): sets grade equal to g<br /></span><span style=\"font-size: 20px;\">3.&nbsp;set_Credit(int cr): sets credits equal to cr&nbsp;<br /></span><span style=\"font-size: 20px;\">4.calculateGradePoints(char g): returns gradePoint(int)<br />5. calculateHonorPoints(int gp,int cr): return honorPoint&nbsp;(float)<br />6. display(): prints gradePoint and honorPoint<br /><strong>Note:&nbsp;</strong>Grades are not case sensitive.</span></p>\n<p><span style=\"font-size: 20px;\"><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 20px;\"><strong>Input : </strong></span><span style=\"font-size: 20px;\">CSN-206 A 4<br /><strong>Output </strong>10 40<br /></span></pre>\n<pre><strong><span style=\"font-size: 20px;\">Input:&nbsp;</span></strong><span style=\"font-size: 20px;\">ECE-500 d 3<br /><strong>Output:&nbsp;</strong>7 21<br /></span></pre>\n<p><span style=\"font-size: 20px;\"><strong>Constraints:</strong><br />1&lt;=CID.length()&lt;=100<br />'A'&lt;=g&lt;='F'<br />1&lt;=cr&lt;=4<br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Create a class named `CollegeCourse` with the following fields: `courseID` (string), `grade` (character), `credits` (integer), `gradePoints` (integer), and `honorPoints` (float). Calculate `honorPoints` as the product of `gradePoints` and `credits`.  `gradePoints` are determined as follows: A=10, B=9, C=8, D=7, E=6, and F=5.  The class should have the following functions:\n\n1.  `set_CourseId(string CID)`: Sets the `courseID`.\n2.  `set_Grade(char g)`: Sets the `grade` to `g`. Grades are case-insensitive.\n3.  `set_Credit(int cr)`: Sets the `credits` to `cr`.\n4.  `calculateGradePoints(char g)`: Returns the corresponding `gradePoint` (integer) based on the grade `g`.\n5.  `calculateHonorPoints(int gp, int cr)`: Returns the calculated `honorPoint` (float) based on the given `gradePoint` `gp` and `credits` `cr`.\n6.  `display()`: Prints the calculated `gradePoint` and `honorPoint`.",
                "constraints": [
                    "1 <= CID.length() <= 100",
                    "'A' <= g <= 'F' (case-insensitive)",
                    "1 <= cr <= 4"
                ],
                "testcases": [
                    {
                        "input": "CSN-206 A 4",
                        "output": "10 40",
                        "explanation": null
                    },
                    {
                        "input": "ECE-500 d 3",
                        "output": "7 21",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Set courseid, grade, credit according&nbsp;to the description and then find&nbsp;grade point after checking grade(as given in the problem description)&nbsp;and then multiply with credit.&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "OOP",
                "slug": "oop"
            },
            {
                "name": "Class",
                "slug": "class"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass CollegeCourse\n{\n    string CourseId; // variable to store the course ID\n    char grade; // variable to store the grade\n    int credits, gp; // variables to store the credits and grade points\n    float honorPoints; // variable to store the honor points\n\npublic:\n    void set_CourseId(string c) // function to set the course ID\n    {\n        CourseId = c;\n    }\n    void set_Grade(char g) // function to set the grade\n    {\n        grade = g;\n    }\n    void set_Credit(int cr) // function to set the credits\n    {\n        credits = cr;\n    }\n    int calculateGradePoints(char grade) // function to calculate the grade points\n    {\n        // assigning grade points based on the grade\n        if  (grade == 'A' || grade == 'a')\n            gp = 10;\n        else if(grade == 'B'||grade == 'b')\n            gp = 9;\n        else if(grade == 'C'||grade == 'c')\n            gp = 8;\n        else if(grade == 'D'||grade == 'd')\n            gp = 7;\n        else if(grade == 'E'||grade == 'e')\n            gp = 6;\n        else if(grade == 'F'||grade == 'f')\n            gp = 5;\n        return gp; // returning the grade points\n    }\n     float calculateHonorPoints(int gp, int credits) // function to calculate the honor points\n    {\n        honorPoints = gp * credits; // calculating honor points by multiplying grade points and credits\n    }\n    void display() // function to display the grade points and honor points\n    {\n        cout<<gp<<\" \"<<honorPoints<<endl; // displaying the grade points and honor points\n    }\n};",
                "lang_text": "cpp"
            }
        },
        "platform": "GFG"
    }
}