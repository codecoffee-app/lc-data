{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700728,
            "title": "C++ complex number addition (operator overloading)",
            "titleSlug": "c-complex-number-addition-operator-overloading",
            "content": "<p><span style=\"font-size:18px\">This is a functional problem i.e. partial code is already done for you, invest time to study the locked code and complete the solution accordingly.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">In this problem, you need to add 2 given complex numbers and print the resulting complex number using &#39;+&#39; operator.</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Implement a class named <strong>complex </strong>containing data members as real and imaginary part of the complex number and<strong>&nbsp;</strong>the following function:</span></p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-size:18px\">void display()</span></li>\r\n\t<li><span style=\"font-size:18px\">constructor to assign values to the complex number.</span></li>\r\n\t<li><span style=\"font-size:18px\">operator function to add 2 numbers</span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Input:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">First line of the input contains the number of test cases and each test case contains 4 space separated integer values representing the real and imaginary part of 2 complex numbers&nbsp;( Real1 imaginary 1&nbsp; &nbsp;real2 imaginary2 )<br />\r\n<strong>Output:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">The output to each test case should be a single line representing the resulting complex number from the addition of given complex numbers. In the given format</span></p>\r\n\r\n<p><span style=\"font-size:18px\">real + imaginary_i</span></p>\r\n\r\n<p><span style=\"font-size:18px\">for eg:&nbsp; 2 +3i<br />\r\n<strong>Constraints:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>1 &lt;= Test case &lt;= 100</strong><br />\r\n<strong>Example:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Input:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">2</span></p>\r\n\r\n<p><span style=\"font-size:18px\">3 6 -1 4</span></p>\r\n\r\n<p><span style=\"font-size:18px\">2 2 -1 -1</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Output:</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\">2 + 10i<br />\r\n1 + 1i</span><br />\r\n&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a `complex` class in C++ to represent and add complex numbers. The class should include:\n\n*   Data members: `real` (int) and `imaginary` (int).\n*   A constructor to initialize the real and imaginary parts.\n*   A `display()` function to print the complex number in the format `real + imaginary_i` (e.g., `2 + 3i`).\n*   An overloaded `+` operator to add two complex numbers.\n\nYour task is to complete the implementation of the `complex` class to satisfy these requirements. The provided code will handle input and output; you only need to focus on the class definition and its member functions.",
                "constraints": [
                    "1 <= Test case <= 100"
                ],
                "testcases": [
                    {
                        "input": "3 6 -1 4",
                        "output": "2 + 10i",
                        "explanation": "The first complex number is 3 + 6i and the second is -1 + 4i. Their sum is (3 + (-1)) + (6 + 4)i = 2 + 10i."
                    },
                    {
                        "input": "2 2 -1 -1",
                        "output": "1 + 1i",
                        "explanation": "The first complex number is 2 + 2i and the second is -1 + -1i. Their sum is (2 + (-1)) + (2 + (-1))i = 1 + 1i."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "OOP",
                "slug": "oop"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\n\nclass complex\n{\n    int x, y; //declaration of private variables\n\n    public:\n    complex(){} //default constructor\n\n    complex(int real, int imag) //parameterized constructor\n    {x=real; y=imag;} //initialize x and y with the given values\n\n    complex operator+(complex c) //overloading '+' operator\n    {\n        complex t; //create a new object t\n        t.x = x+ c.x; //add the real parts of the current object and the passed object\n        t.y = y+ c.y; //add the imaginary parts of the current object and the passed object\n        return(t); //return the new object t\n    }\n\n    void display() //display function\n    {\n        cout<<x<<\" + \"<<y<<\"i\"<<endl; //print the complex number in the format x + yi\n    }\n};",
                "lang_text": "cpp"
            }
        },
        "platform": "GFG"
    }
}