{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705343,
            "title": "Letters Collection",
            "titleSlug": "c-letters-collection4552",
            "content": "<p><span style=\"font-size: 18px;\">The Postmaster wants&nbsp;to write a program to answer the queries regarding letter collection in a city. A city is represented as a matrix <strong>mat</strong> of size<strong> n*m.</strong> Each cell represents a house and contains letters which are denoted by a number in the&nbsp;cell. The program should answer&nbsp;<strong>q </strong>queries which are of following types:<br /><strong>1 i j&nbsp;</strong>: To sum all the letters which are at a 1-hop distance from the cell (i,j) in any direction<br /><strong>2 i j :&nbsp;</strong>To sum all the letters which are at a 2-hop distance from the cell (i,j) in any direction&nbsp;<br />The queries are given in a 2D matrix&nbsp;<strong>queries[][]</strong>.<br />In one hop distance p</span><span style=\"font-size: 18px;\">ostmaster</span><span style=\"font-size: 18px;\"> can go to any of [</span><span style=\"font-size: 18px;\">(i-1,j-1), (i-1,j), (i-1,j+1), </span><span style=\"font-size: 18px;\">(i,j-1), (i,j+1), (i+1,j-1), (i+1,j), (i+1,j+1)] from (i,j).&nbsp;</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> \nn = 4, m = 5\nmat = {{1, 2, 3, 4, 10}, \n&nbsp;\\t{5, 6, 7, 8, 10}, \n&nbsp;\\t{9, 1, 3, 4, 10}, \n&nbsp;\\t{1, 2, 3, 4, 10}}\nq = 2\nqueries = {{1 0 1}, \n&nbsp;\\t    {2 0 1}}\n<strong>Output:</strong> <br />22 29\n<strong>Explaination:</strong> \nFor the first query sum is 1+5+6+7+3 = 22. \nFor the second query sum is 9+1+3+4+8+4 = 29.<br /></span></pre>\n<p><strong><span style=\"font-size: 18px;\">Example 2:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:</strong> \nn = 6, m = 6\nmat = {{ 1,  2,  3,  4,  5,  6}, \n&nbsp;\\t{ 7,  8,  9, 10, 11, 12}, \n&nbsp;\\t{13, 14, 15, 16, 17, 18}, \n&nbsp;\\t{19, 20, 21, 22, 23, 24},<br />\\t {25, 26, 27, 28, 29, 30},<br />\\t {31, 32, 33, 34, 35, 36}}\nq = 1\nqueries = {{2 3 2}}\n<strong>Output:</strong> <br />336\n<strong>Explaination:</strong> \nThe first query sum is 7+8+9+10+11+17+23+29+35+34+33+32+31+25+19+13 = 336.</span> </pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You do not need to&nbsp;read input or print anything. Your task is to complete the function <strong>matrixSum()</strong> which takes <strong>n</strong>, <strong>m</strong>, <strong>mat</strong>, <strong>q </strong>and <strong>queries </strong>as input parameters and returns a list of integers where the ith value is the answers for ith query.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(q)<br /><strong>Expected Auxiliary Space:</strong> O(q)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n, m &le; 10<sup>3</sup><br />0&nbsp;</span><span style=\"font-size: 18px;\">&le;</span><span style=\"font-size: 18px;\"> mat[i][j]&nbsp;</span><span style=\"font-size: 18px;\">&le; 10<sup>7</sup></span><span style=\"font-size: 18px;\"><br /></span><span style=\"font-size: 18px;\">1 &le; q &le; 10<sup>5</sup><br />1 </span><span style=\"font-size: 18px;\">&le; q[i][0] </span><span style=\"font-size: 18px;\">&le; 2<br /></span><span style=\"font-size: 18px;\">0 </span><span style=\"font-size: 18px;\">&le; q[i][1] &lt; n</span><span style=\"font-size: 18px;\"><br /></span><span style=\"font-size: 18px;\">0 </span><span style=\"font-size: 18px;\">&le; q[i][2] &lt; m</span><span style=\"font-size: 18px;\"><br /></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "The Postmaster needs a program to efficiently handle letter collection queries within a city represented as a matrix. The city is described by a matrix `mat` of size `n*m`, where each cell `mat[i][j]` represents a house and contains the number of letters at that location. The program should process `q` queries of two types:\n\n*   **Query Type 1 (1 i j):** Calculate the sum of letters at all houses that are exactly 1 hop away from the house at position (i, j) in any of the eight possible directions (i.e., its immediate neighbors).\n*   **Query Type 2 (2 i j):** Calculate the sum of letters at all houses that are exactly 2 hops away from the house at position (i, j) in any direction.\n\nThe queries are provided in a 2D matrix `queries[][]`.  A 1-hop distance from (i, j) includes the cells [(i-1, j-1), (i-1, j), (i-1, j+1), (i, j-1), (i, j+1), (i+1, j-1), (i+1, j), (i+1, j+1)].",
                "constraints": [
                    "1 <= n, m <= 10^3",
                    "0 <= mat[i][j] <= 10^7",
                    "1 <= q <= 10^5",
                    "1 <= q[i][0] <= 2",
                    "0 <= q[i][1] < n",
                    "0 <= q[i][2] < m"
                ],
                "testcases": [
                    {
                        "input": "n = 4, m = 5\nmat = {{1, 2, 3, 4, 10}, \n       {5, 6, 7, 8, 10}, \n       {9, 1, 3, 4, 10}, \n       {1, 2, 3, 4, 10}}\nq = 2\nqueries = {{1 0 1}, \n           {2 0 1}}",
                        "output": "22 29",
                        "explanation": "For the first query (1 0 1), the sum of 1-hop neighbors of (0, 1) is 1 + 5 + 6 + 7 + 3 = 22.  For the second query (2 0 1), the sum of 2-hop neighbors of (0, 1) is 9 + 1 + 3 + 4 + 8 + 4 = 29."
                    },
                    {
                        "input": "n = 6, m = 6\nmat = {{ 1,  2,  3,  4,  5,  6}, \n       { 7,  8,  9, 10, 11, 12}, \n       {13, 14, 15, 16, 17, 18}, \n       {19, 20, 21, 22, 23, 24},\n        {25, 26, 27, 28, 29, 30},\n        {31, 32, 33, 34, 35, 36}}\nq = 1\nqueries = {{2 3 2}}",
                        "output": "336",
                        "explanation": "For the query (2 3 2), the sum of 2-hop neighbors of (3, 2) is 7 + 8 + 9 + 10 + 11 + 17 + 23 + 29 + 35 + 34 + 33 + 32 + 31 + 25 + 19 + 13 = 336."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Just add the values and check if it is going out of bound.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\n\nclass Solution{\npublic:\n    // Function to check if given indices are valid within the matrix\n    bool valid(int i, int j, int n, int m) {\n        if(i >= 0 && j >= 0 && i < n && j < m)\n            return true;\n        return false;\n    }\n    \n    // Function to calculate the sum of elements within the specified queries\n    vector<int> matrixSum(int n, int m, vector<vector<int>> mat, int q, vector<int> queries[])\n    {\n        int sum = 0, il, jl, ir, jr;\n        vector<int> result;\n        \n        // Loop over each query\n        for(int i = 0;i < q;i++) {\n            sum = 0;\n            \n            // Calculate the indices for the top-left and the bottom-right corners of the submatrix\n            il = queries[i][1] - queries[i][0];\n            jl = queries[i][2] - queries[i][0];\n            ir = queries[i][1] + queries[i][0];\n            jr = queries[i][2] + queries[i][0];\n            \n            // Iterate over the rows of the submatrix\n            for(int i = il;i <= ir;i++){\n                // Check if the current index is valid, and if so, add the corresponding element to the sum\n                if(valid(i, jl, n, m)) \n                    sum += mat[i][jl];\n                if(valid(i, jr, n, m))\n                    sum += mat[i][jr];\n            }\n            \n            // Iterate over the columns of the submatrix\n            for(int i = jl+1;i < jr;i++){\n                // Check if the current index is valid, and if so, add the corresponding element to the sum\n                if(valid(il, i, n, m))\n                    sum += mat[il][i];\n                if(valid(ir, i, n, m))\n                    sum += mat[ir][i];\n            }\n            \n            // Store the sum for the current query in the result vector\n            result.push_back(sum);\n        }\n        \n        // Return the vector containing the sums for all queries\n        return result;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution{\n    static boolean isvalid(int x,int y,int n,int m)\n    {\n        if(x<0||y<0||x>=n||y>=m) return false;\n        return true;\n    }\n    static List<Integer> matrixSum(int n, int m, int mat[][], int q, int queries[][])\n    {\n        int[] dx1={-1,-1,-1,0,0,1,1,1};\n        int[] dy1={-1,0,1,-1,1,-1,0,1};\n        int[] dx2={-2,-2,-2,-2,-2,-1,0,1,2,2,2,2,2,1,0,-1};\n        int[] dy2={-2,-1,0,1,2,2,2,2,2,1,0,-1,-2,-2,-2,-2};\n        List<Integer> answer=new ArrayList<Integer>();\n        for(int k=0;k<queries.length;k++)\n        {\n            int type=queries[k][0];\n            int x=queries[k][1];\n            int y=queries[k][2];\n            int ans=0;\n            if(type==1)\n            {\n                for(int i=0;i<dx1.length;i++)\n                {\n                    int x1=x+dx1[i];\n                    int y1=y+dy1[i];\n                    if(isvalid(x1,y1,n,m))\n                    {\n                        ans+=mat[x1][y1];\n                    }\n                }\n            }\n            if(type==2)\n            {\n                for(int i=0;i<dx2.length;i++)\n                {\n                    int x1=x+dx2[i];\n                    int y1=y+dy2[i];\n                    if(isvalid(x1,y1,n,m))\n                    {\n                        ans+=mat[x1][y1];\n                    }\n                }\n            }\n            answer.add(ans);\n        }\n        return answer;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            }
        ],
        "platform": "GFG"
    }
}