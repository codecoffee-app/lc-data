{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705138,
            "title": "Rotate a Matrix by 180 Counterclockwise",
            "titleSlug": "c-matrix-rotation-by-180-degree0745",
            "content": "<p><span style=\"font-size: 18px;\">Given a 2D square matrix <strong>mat</strong>[][] of size <strong>n x n</strong>, turn it by <strong>180</strong> <strong>degrees</strong> without using extra space.</span></p>\n<p><span style=\"font-size: 18px;\">Note:&nbsp;</span><span style=\"font-size: 18px;\">You must rotate the matrix<strong> in place </strong>and</span><span style=\"font-size: 18px;\">&nbsp;modify the input matrix directly.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>mat[][] =<strong> </strong>[[1, 2],\n\\t\\t    [3, 4]]\n<strong>Output: </strong>[[4, 3], \n\\t  [2, 1]]</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong> mat[][] = [[1, 2, 3, 4], \n\\t\\t     [5, 6, 7 ,8], \n\\t\\t     [9, 10, 11, 12],\n\\t\\t     [13, 14, 15, 16]]\n<strong>Output: </strong>[[16, 15, 14, 13], \n\\t  [12, 11, 10, 9], \n\\t  [8, 7, 6, 5], \n\\t  [4, 3, 2, 1]]</span>\n</pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; n &le; 500<br />0 &lt;= mat[i][j] &lt;= 10<sup>4</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Do simple maths.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Matrix",
                "slug": "matrix"
            },
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "samsung"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n    void rotateMatrix(vector<vector<int>>& mat) {\n        for (int i = 0; i < mat.size(); i++) {\n            for (int j = i; j < mat[0].size(); j++)\n                swap(mat[i][j], mat[j][i]);\n        }\n        for (int i = 0; i < mat.size(); i++)\n            reverse(mat[i].begin(), mat[i].end());\n        for (int i = 0; i < mat.size(); i++) {\n            for (int j = i; j < mat[0].size(); j++)\n                swap(mat[i][j], mat[j][i]);\n        }\n        for (int i = 0; i < mat.size(); i++)\n            reverse(mat[i].begin(), mat[i].end());\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\n// User function Template for Java\n\nclass Solution {\n    public void rotateMatrix(int[][] mat) {\n        int n = mat.length;\n        for (int i = 0; i < n / 2; i++) {\n            for (int j = 0; j < n; j++) {\n                int temp = mat[i][j];\n                mat[i][j] = mat[n - i - 1][n - j - 1];\n                mat[n - i - 1][n - j - 1] = temp;\n            }\n        }\n\n        if (n % 2 == 1) {\n            for (int j = 0; j < n / 2; j++) {\n                int temp = mat[n / 2][j];\n                mat[n / 2][j] = mat[n / 2][n - j - 1];\n                mat[n / 2][n - j - 1] = temp;\n            }\n        }\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def rotateMatrix(self, mat):\n        n = len(mat)\n        for i in range(n // 2):\n            for j in range(n):\n                temp = mat[i][j]\n                mat[i][j] = mat[n - i - 1][n - j - 1]\n                matrix[n - i - 1][n - j - 1] = temp\n\n        if n % 2 == 1:\n            for j in range(n // 2):\n                temp = mat[n // 2][j]\n                mat[n // 2][j] = mat[n // 2][n - j - 1]\n                mat[n // 2][n - j - 1] = temp\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    /**\n     * @param number[][] mat\n     * @return {void}\n     */\n    rotateMatrix(mat) {\n        // Perform the rotation in two halves\n        let n = mat.length;\n        for (let i = 0; i < Math.floor(n / 2); i++) {\n            for (let j = 0; j < n; j++) {\n                let temp = mat[i][j];\n                mat[i][j] = mat[n - i - 1][n - j - 1];\n                mat[n - i - 1][n - j - 1] = temp;\n            }\n        }\n\n        // Handle the middle row for odd-sized matrices\n        if (n % 2 === 1) {\n            for (let j = 0; j < Math.floor(n / 2); j++) {\n                let temp = mat[Math.floor(n / 2)][j];\n                mat[Math.floor(n / 2)][j] = mat[Math.floor(n / 2)][n - j - 1];\n                mat[Math.floor(n / 2)][n - j - 1] = temp;\n            }\n        }\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}