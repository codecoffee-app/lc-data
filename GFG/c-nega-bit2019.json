{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703753,
            "title": "C++ Nega Bit",
            "titleSlug": "c-nega-bit2019",
            "content": "<p><span style=\"font-size:18px\">Given two integer numbers, <strong>F </strong>and <strong>S.&nbsp;</strong>In binary form of the numbers, for every i<sup>th&nbsp;</sup>set bit in <strong>F, negate&nbsp;</strong>the i <sup>th&nbsp;</sup>bit in&nbsp;<strong>S.</strong></span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>F = </strong>2 , <strong>S = </strong>5</span>\n<span style=\"font-size:18px\"><strong>Output:\n</strong>7</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">2 is represented as 10 in binary and\n5 is represented as 101. Hence negating\nthe 2nd bit of 5 from right, thus the\nnew number becomes 7 i.e. 111. </span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>F = </strong>1 , <strong>S = </strong>3</span>\n<span style=\"font-size:18px\"><strong>Output:\n</strong>2</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">1-1 and 3-11 in binary, thus negating\n1st bit of 3 from right we get 10 i.e. 2. </span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>negaBit()</strong> which takes 2 Integers F and S as input and returns the modified <strong>S</strong>.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br />\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\n<span style=\"font-size:18px\">1 &lt;= F,S &lt;= 10<sup>6</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two integers, **F** and **S**.  For each set bit (1) at the i-th position in the binary representation of **F**, flip the i-th bit in the binary representation of **S**.",
                "constraints": [
                    "1 <= F, S <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "F = 2, S = 5",
                        "output": "7",
                        "explanation": "F is 2 (binary 10). S is 5 (binary 101).  The 2nd bit (from right, 1-indexed) is set in F. Therefore, we flip the 2nd bit in S. 101 becomes 111, which is 7 in decimal."
                    },
                    {
                        "input": "F = 1, S = 3",
                        "output": "2",
                        "explanation": "F is 1 (binary 1). S is 3 (binary 11). The 1st bit (from right, 1-indexed) is set in F. Therefore, we flip the 1st bit in S. 11 becomes 10, which is 2 in decimal."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">You can negate the bits required by simply getting Xor value of both.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "Binary Representation",
                "slug": "binary-representation"
            },
            {
                "name": "Operators",
                "slug": "operators"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Function to perform negaBit operation on two integers.\nclass Solution {\n  public:\n    int negaBit(int F , int S) {\n        \n        int ans = S^F;      // Xor of S and F\n        \n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\n\nclass Solution {\n    static int negaBit(int F , int S) {\n        \n        //Calculating XOR of S and F\n        int ans = S^F;\n        \n        //Returning the result of XOR operation\n        return ans;\n    }\n};",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to perform negaBit operation.\n    def negaBit(self, F , S):\n        \n        #performing XOR operation between S and F.\n        ans = S^F     \n        \n        #returning the result.\n        return ans",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} F\n * @param {number} S\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to perform negaBit operation.\n    negaBit(F,S)\n    {\n        //performing XOR operation between S and F.\n        let ans = S^F;\n        \n        //returning the result.\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}