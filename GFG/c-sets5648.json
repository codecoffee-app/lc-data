{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703880,
            "title": "C++ Sets",
            "titleSlug": "c-sets5648",
            "content": "<p><span style=\"font-size:18px\">Given two sets <strong>A</strong> and <strong>B </strong>of size <strong>N</strong> and <strong>M .</strong>&nbsp;Perform set operation i.e union, intersection and difference on sets using set_union, set_difference and set_intersection functions of&nbsp;STL.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong> N = 4, M = 5\r\nA = {1, 2, 3, 4}\r\nB = {3, 4, 5, 6, 7}\r\n<strong>Output:</strong>\r\n1 2 3 4 5 6 7\r\n1 2\r\n3 4\r\n<strong>Explaination:</strong> \r\nUnion of two sets A (1 2 3 4) and \r\nB (3 4 5 6 7) is (1 2 3 4 5 6 7).\r\nDifference A-B is 1 2.\r\nThe intersection is 3 4.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou do not need to read input or print anything. Your task is to complete the function <strong>setOperations()</strong> which takes set <strong>A</strong> and set <strong>B</strong> as input parameters and returns a list containing the&nbsp;three desired sets.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N + M)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N+M)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N, M &lt;= 1000</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two sets, A of size N and B of size M, perform set operations (union, intersection, and difference) using the `set_union`, `set_difference`, and `set_intersection` functions of the STL (Standard Template Library).",
                "constraints": [
                    "1 <= N, M <= 1000"
                ],
                "testcases": [
                    {
                        "input": "N = 4, M = 5\nA = {1, 2, 3, 4}\nB = {3, 4, 5, 6, 7}",
                        "output": "1 2 3 4 5 6 7\n1 2\n3 4",
                        "explanation": "The union of set A {1, 2, 3, 4} and set B {3, 4, 5, 6, 7} is {1, 2, 3, 4, 5, 6, 7}. The difference A - B (elements in A but not in B) is {1, 2}. The intersection of A and B (elements present in both) is {3, 4}."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Use C++ STL&nbsp;</p>"
        ],
        "relatedTopics": [
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Back-end complete function Template for C++\nclass Solution{\n    public:\n    \n    // Function to perform set operations on two sets\n    vector<set<int>> setOperations(set<int> A, set<int> B){\n\n        vector<set<int>> result;\n        set<int> st1 = A, st2 = B;\n\n        // Performing union operation on the sets A and B\n        set<int> united;\n        set_union(st1.begin(),st1.end(),st2.begin(), st2.end(),inserter(united, united.begin()));\n        if(united.size() == 0)\n            united.insert(0);\n        result.push_back(united);\n\n        // Performing difference operation on the sets A and B\n        set<int> diff;\n        set_difference(st1.begin(),st1.end(),st2.begin(),st2.end(),inserter(diff,diff.begin()));\n        if(diff.size() == 0)\n            diff.insert(0);\n        result.push_back(diff);\n\n        // Performing intersection operation on the sets A and B\n        set<int> inter;\n        set_intersection(st1.begin(),st1.end(),st2.begin(),st2.end(),inserter(inter,inter.begin()));\n        if(inter.size() == 0)\n            inter.insert(0);\n        result.push_back(inter);\n\n        return result;\n    }\n};",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}