{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700694,
            "title": "C++ STL Deque",
            "titleSlug": "c-stl-deque",
            "content": "<p><span style=\"font-size:18px\">Implement different operations on a<strong> Deque</strong> i.e. adding an element in front and end, removing an element from front and end, sort the Deque, reverse the Deque, getting the size of the Deque.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Input Format:</strong><br />\r\nThe first line of input contains an integer&nbsp;<strong>T</strong>&nbsp;denoting the no of test cases. For each test case, the first line of input contains an integer&nbsp;<strong>Q</strong>&nbsp;denoting the no of queries followed by&nbsp;<strong>Q</strong>&nbsp;space separated queries.<br />\r\nA query can be of the following types:<br />\r\n1 x (Adding an element&nbsp;in front of the deque and printing the deque)<br />\r\n2 x (Adding an element in last of the deque and printing the deque)<br />\r\n3 (Removing the element from the front of the deque and printing the deque)<br />\r\n4 (Removing the element from the last of the deque and printing the deque)<br />\r\n5 (Sorting the deque and printing the deque)<br />\r\n6 (Reversing the deque and printing the deque)<br />\r\n7 (Printing the deque)<br />\r\n8 (Returning the size of the deque)<br />\r\n9 (Printing the element that is in front of the deque)<br />\r\n10 (Printing the element that is in back of the deque)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Output Format:</strong><br />\r\nFor each test case, the output is according to the query <strong>Q</strong> performed and if the deque is empty the output is <strong>-1.</strong></span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nThis is a function problem, so you only need to complete the provided functions.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;=T&lt;=100<br />\r\n1&lt;=Q&lt;=100</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example:<br />\r\nInput:</strong><br />\r\n1<br />\r\n10<br />\r\n1 6<br />\r\n2 9<br />\r\n9<br />\r\n10<br />\r\n5<br />\r\n6<br />\r\n7<br />\r\n8<br />\r\n3<br />\r\n4<br />\r\n<strong>Output:</strong><br />\r\n6&nbsp;<br />\r\n6 9&nbsp;<br />\r\n6<br />\r\n9<br />\r\n6 9&nbsp;<br />\r\n9 6&nbsp;<br />\r\n9 6&nbsp;<br />\r\n2<br />\r\n6&nbsp;<br />\r\n-1</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement various operations on a Deque data structure. These operations include adding elements to the front and rear, removing elements from the front and rear, sorting the Deque, reversing the Deque, getting the size of the Deque, peeking the front element and peeking the back element.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= Q <= 100"
                ],
                "testcases": [
                    {
                        "input": "1\n10\n1 6\n2 9\n9\n10\n5\n6\n7\n8\n3\n4",
                        "output": "6 \n6 9 \n6\n9\n6 9 \n9 6 \n9 6 \n2\n6 \n-1",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:16px\">Using functions like <strong>push_back(), push_front(), pop_front(), pop_back(), sort(), size(), reverse(),front(),back()</strong>.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to print the elements of the deque A\nvoid print(deque<int> &A)\n{\n    if(A.empty())\n        cout<<\"-1\"<<endl;\n    else\n    {\n        // Iterating over the deque and printing each element\n        deque<int>::iterator it;\n        for(it=A.begin();it!=A.end();it++)\n            cout<<*it<<\" \";\n        cout<<endl;\n    }\n}\n\n// Function to add an element x to the back of the deque A\nvoid add_in_back(deque<int> &A,int x)\n{\n    A.push_back(x);\n}\n\n// Function to remove an element from the back of the deque A\nvoid remove_from_back(deque<int> &A)\n{\n    A.pop_back();\n}\n\n// Function to remove an element from the front of the deque A\nvoid remove_from_front(deque<int> &A)\n{\n    A.pop_front();\n}\n\n// Function to sort the elements of the deque A in ascending order\nvoid sort(deque<int> &A)\n{\n    sort(A.begin(),A.end());\n}\n\n// Function to reverse the order of the elements in the deque A\nvoid reverse(deque<int> &A)\n{\n    reverse(A.begin(),A.end());\n}\n\n// Function to return the size of the deque A\nint size(deque<int> &A)\n{\n    return A.size();\n}\n\n// Function to add an element x to the front of the deque A\nvoid add_in_front(deque<int> &A,int x)\n{\n    A.push_front(x);\n}\n\n// Function to return the element at the front of the deque A\nint element_at_front(deque<int> &A)\n{\n    return A.front();\n}\n\n// Function to return the element at the back of the deque A\nint element_at_back(deque<int> &A)\n{\n    return A.back();\n}",
                "lang_text": "cpp"
            }
        },
        "platform": "GFG"
    }
}