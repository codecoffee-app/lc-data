{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700693,
            "title": "C++ STL List",
            "titleSlug": "c-stl-list",
            "content": "<p><span style=\"font-size:20px\">You are given an empty list. You have to implement different functions of<strong>&nbsp;List A </strong>i.e. adding an element in front and end, removing an&nbsp;element&nbsp;from the front and end, sorting elements, reversing the list and printing the list.</span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Example:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:20px\"><strong>Input:</strong>\r\n1\r\n8\r\n1 5\r\n8 1\r\n3\r\n4\r\n5\r\n6\r\n1 6\r\n7\r\n<strong>Output:</strong>\r\n5\r\n1 5\r\n5 1\r\n2\r\n5 1\r\n5\r\n5 6\r\n6</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Input:</strong><br />\r\nThe first line of input contains an integer <strong>T</strong> denoting the no of test cases.For each&nbsp;test case, the first line of input contains an integer <strong>Q</strong> denoting the no of queries. Then in the next line are <strong>Q</strong>&nbsp;space separated queries.<br />\r\nA query can be of eight types&nbsp;<br />\r\n1&nbsp;x (Adds an element x to the list A&nbsp;at the end and print list A)<br />\r\n2&nbsp;(Sorts the list A in ascending order and print list A )<br />\r\n3 (Reverses the list A and print list A)<br />\r\n4&nbsp;(Prints the size of the list A)<br />\r\n5 (Prints space-separated values of the list, if the list is empty output&nbsp;<strong>-1</strong>)<br />\r\n6 (Remove an element from the back of the list and print list A )<br />\r\n7(Remove an element from the&nbsp;front of the list and print list A)<br />\r\n8 x (Adds&nbsp;element&nbsp;x in front of the list&nbsp;and print list A)</span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Output:</strong><br />\r\nThe output for each test case will be according to the query that is performed and if the list is empty output is <strong>-1</strong>.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Constraints:</strong><br />\r\n1&lt;=T&lt;=100<br />\r\n1&lt;=Q&lt;=100</span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a dynamic list (List A) that supports various operations. You will be given a series of queries to perform on the list. Your task is to process each query and print the appropriate output according to the operation performed.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= Q <= 100 (Number of queries per test case)"
                ],
                "testcases": [
                    {
                        "input": "1\n8\n1 5\n8 1\n3\n4\n5\n6\n1 6\n7",
                        "output": "5\n1 5\n5 1\n2\n5 1\n5\n5 6\n6",
                        "explanation": null
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "void print(list<int> &A)\r\n{\r\n    if(A.empty())\r\n        cout<<\"-1\"<<endl;\r\n  else\r\n  {list<int>:: iterator it;\r\n    for(it=A.begin();it!=A.end();it++)\r\n        cout<<*it<<\" \";\r\n    cout<<endl;\r\n}}\r\n\r\nvoid remove_from_back(list<int> &A)\r\n{\r\n    A.pop_back();\r\n    //print(A);\r\n    \r\n}\r\nvoid remove_from_front(list<int> &A)\r\n{\r\n   A.pop_front();\r\n  //  print(A);\r\n}\r\n\r\nvoid add_to_list(list<int> &A,int x)\r\n{\r\n\tA.push_back(x);\r\n//\tprint(A);\r\n}\r\n\r\n\r\nvoid sort_list(list<int> &A)\r\n{\r\n   A.sort();\r\n}\r\n\r\n\r\nvoid reverse_list(list<int> &A)\r\n{\r\n    A.reverse();\r\n}\r\n\r\nint size_of_list(list<int> &A)\r\n{\r\n\treturn A.size();\r\n\t//print(A);\r\n}\r\n\r\nvoid add_from_front(list<int> &A,int x)\r\n{\r\n    A.push_front(x);\r\n\r\n}",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}