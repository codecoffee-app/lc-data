{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700695,
            "title": "C++ STL Priority Queue",
            "titleSlug": "c-stl-priority-queue",
            "content": "<p><span style=\"font-size:20px\">Implement different operations on Priority Queue .i.e. adding element, removing element, size of priority queue, print the queue and top element of queue.&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Input:</strong><br />\r\nThe first line of input contains an integer&nbsp;<strong>T</strong>&nbsp;denoting the no of test&nbsp;cases. For each test case, the first line of input contains an integer&nbsp;<strong>Q</strong>&nbsp;denoting the no of&nbsp;queries followed by&nbsp;<strong>Q</strong>&nbsp;space separated&nbsp;queries.&nbsp;<br />\r\nA query can be of the following types:<br />\r\n1 x (Adding x to the priority queue and print the queue)<br />\r\n2 (Removing the element from the top of the priority&nbsp;queue and printing that element )<br />\r\n3 (Get the element at the top of the priority queue)<br />\r\n4 (Get the size of the priority queue)<br />\r\n5 (Print the priority queue)&nbsp;</span></p>\r\n\r\n<p><strong><span style=\"font-size:18px\">Note: In&nbsp;<em><u>each</u></em>&nbsp;case return or print -1 if priority queue is empty</span></strong></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Output:</strong><br />\r\nFor each test case, the output is according to the query&nbsp;<strong>Q</strong>&nbsp;performed&nbsp;and if the priority queue is empty the output is&nbsp;<strong>-1.</strong></span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Constraints:</strong><br />\r\n1&lt;=T&lt;=100<br />\r\n1&lt;=Q&lt;=100</span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Example:<br />\r\nInput:</strong><br />\r\n1<br />\r\n8<br />\r\n1 6<br />\r\n1 1<br />\r\n1 7<br />\r\n4<br />\r\n3<br />\r\n2<br />\r\n5<br />\r\n2<br />\r\n<strong>Output:</strong><br />\r\n6<br />\r\n6 1<br />\r\n7 6 1<br />\r\n3<br />\r\n7<br />\r\n7&nbsp;<br />\r\n6 1&nbsp;<br />\r\n6</span></p>\r\n\r\n<p><strong><span style=\"font-size:20px\">Explanation:</span></strong><br />\r\n<span style=\"font-size:20px\">1 6 means adding 6 in the queue and printing that, similarly adding 1 and 7 in the queue and printing the queue i.e. 7 6 1. By 4 it returns the size of the queue i.e 3. With 3 as input, it returns the element at the top i.e 7. With 2 it removes the top element i.e 7 from the queue and prints the element i.e. 7. Having 5 as input, it prints the queue i.e. 6 1 and again 2 remove the element and prints that i.e 6.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "priority-queue",
                "slug": "priority-queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to add an element to the priority queue\nvoid addElement(priority_queue<int> &A,int x)\n{\n    A.push(x);\n}\n\n// Function to remove the element at the top of the priority queue\nvoid remove_Element(priority_queue<int> &A)\n{\n    // If the priority queue is empty, print -1\n    if(A.empty())\n        cout<<\"-1\"<<endl;\n    else\n    {\n        // Print the top element and remove it from the priority queue\n        cout<<A.top()<<endl;\n        A.pop();\n    }\n}\n\n// Function to get the size of the priority queue\nint getSize(priority_queue<int> &A)\n{\n    // If the priority queue is empty, return -1\n    if(A.empty())\n        return -1;\n    else\n        // Otherwise, return the size of the priority queue\n        return A.size();\n}\n\n// Function to get the element at the top of the priority queue\nint getElement_at_top(priority_queue<int> &A)\n{\n    // If the priority queue is empty, return -1\n    if(A.empty())\n        return -1;\n    else\n        // Otherwise, return the element at the top of the priority queue\n        return A.top();\n}\n\n// Function to print all the elements in the priority queue\nvoid print(priority_queue<int> &A)\n{\n    // If the priority queue is empty, print -1\n    if(A.empty())\n        cout<<\"-1\"<<endl;\n    else\n    {\n        // Create a temporary priority queue to avoid modifying the original priority queue\n        priority_queue<int> temp=A;\n        \n        // Loop through the temp priority queue and print each element\n        while(!temp.empty())\n        {\n            cout<<temp.top()<<\" \";\n            temp.pop();\n        }\n        cout<<endl;\n    }\n}",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}