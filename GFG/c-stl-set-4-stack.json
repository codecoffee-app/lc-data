{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700345,
            "title": "C++ STL | Set 4 (stack)",
            "titleSlug": "c-stl-set-4-stack",
            "content": "<p><span style=\"font-size:20px\">Implement different operations on a stack&nbsp;s&nbsp;.</span><br />\r\n<br />\r\n<span style=\"font-size:20px\"><strong>Input:</strong><br />\r\nThe first line of input contains an integer <strong>T</strong> denoting the no of test cases . Then T test cases follow. The first line of input contains an integer <strong>Q</strong> denoting the no of queries . Then in the next line are <strong>Q</strong>&nbsp;space separated queries .<br />\r\nA query can be of&nbsp;four&nbsp;types&nbsp;<br />\r\n1. a x (Pushes an element x to the stack s&nbsp;)<br />\r\n2. b (if stack is not empty&nbsp;pops top&nbsp;element and prints it, else prints -1)<br />\r\n3. c (prints the size of the stack )<br />\r\n4. d (if stack is not empty prints the top element of the stack, else&nbsp;prints&nbsp;-1)<br />\r\n<br />\r\n<strong>Output:</strong><br />\r\nThe output for each test case will&nbsp;&nbsp;be space separated integers denoting the results of each query .&nbsp;<br />\r\n<br />\r\n<strong>Constraints:</strong><br />\r\n1&lt;=T&lt;=100<br />\r\n1&lt;=Q&lt;=100<br />\r\n<br />\r\n<strong>Example:</strong></span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Input</strong><br />\r\n2<br />\r\n5<br />\r\na 4 a 6 a 7 b c&nbsp;<br />\r\n3<br />\r\na 55 a 11 d&nbsp;<br />\r\n<strong>&nbsp;<br />\r\nOutput</strong><br />\r\n7 2<br />\r\n11<br />\r\n<br />\r\n<strong>Explanation :<br />\r\nFor the first test case</strong><br />\r\nThere are five&nbsp;queries.&nbsp;Queries&nbsp;are&nbsp;performed in this order<br />\r\n1. a 4 { stack s has&nbsp;4 &nbsp;}<br />\r\n2. a 7&nbsp;{stack s&nbsp;has 4,7 }<br />\r\n3. a 6 {stack s has 4,7,6}<br />\r\n4. b {pop 6 from stack s and prints it stack now has 4,7}<br />\r\n5. c {prints the size of the stack s}<br />\r\n<br />\r\n<strong>For the sec test case&nbsp;</strong><br />\r\nThere are three&nbsp;queries.&nbsp;Queries&nbsp;are&nbsp;performed in this order<br />\r\n1. a 55 &nbsp;(stack&nbsp;s&nbsp;has&nbsp;55}<br />\r\n2. a 11 &nbsp;(stack s&nbsp;has 55 ,11}<br />\r\n3. d &nbsp; &nbsp; &nbsp;(prints the top element of the stack s&nbsp;ie. 11&nbsp;)</span><br />\r\n<br />\r\n<br />\r\n<br />\r\n<span style=\"font-size:16px\"><strong>Note:</strong>The <strong>Input/Output</strong> format and <strong>Example</strong> given are used for system&#39;s internal purpose, and should be used by a user for <strong>Expected Output</strong> only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement a stack data structure and perform a series of operations on it. The operations include pushing elements onto the stack, popping elements from the stack (and printing the popped value), determining the size of the stack, and peeking at the top element of the stack (and printing it).",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= Q <= 100 (Number of queries per test case)"
                ],
                "testcases": [
                    {
                        "input": "5\na 4 a 6 a 7 b c",
                        "output": "7 2",
                        "explanation": "The queries are processed as follows:\n1. `a 4`: Push 4 onto the stack. Stack: [4]\n2. `a 6`: Push 6 onto the stack. Stack: [4, 6]\n3. `a 7`: Push 7 onto the stack. Stack: [4, 6, 7]\n4. `b`: Pop the top element (7) and print it. Stack: [4, 6]\n5. `c`: Print the size of the stack (2)."
                    },
                    {
                        "input": "3\na 55 a 11 d",
                        "output": "11",
                        "explanation": "The queries are processed as follows:\n1. `a 55`: Push 55 onto the stack. Stack: [55]\n2. `a 11`: Push 11 onto the stack. Stack: [55, 11]\n3. `d`: Print the top element of the stack (11)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to push an element into the stack\nvoid push(stack<int> &s,int x)\n{\n    s.push(x);\n}\n\n// Function to pop an element from the stack\nint pop(stack<int> &s)\n{\n    // Check if stack is empty\n    if(!s.empty()){\n        int x = s.top();\n        s.pop();\n        return x;\n    }else{\n        // If stack is empty, return -1\n        return -1;\n    }\n}\n\n// Function to get the size of the stack\nint getSize(stack<int> &s)\n{\n    return s.size();\n}\n\n// Function to get the top element of the stack\nint getTop(stack<int> &s)\n{\n    // Check if stack is empty\n    if(!s.empty())\n        return s.top();\n    else\n        // If stack is empty, return -1\n        return -1;\n}",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}