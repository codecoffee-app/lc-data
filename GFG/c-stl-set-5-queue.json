{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700346,
            "title": "C++ STL | Set 5 (queue)",
            "titleSlug": "c-stl-set-5-queue",
            "content": "<p><span style=\"font-size:20px\">Implement different operations on a queue&nbsp;q&nbsp;.<br />\r\n<br />\r\n<strong>Input:</strong><br />\r\nThe first line of input contains an integer <strong>T</strong> denoting the no of test cases . Then T test cases follow. The first line of input contains an integer <strong>Q</strong> denoting the no of queries . Then in the next line are <strong>Q</strong>&nbsp;space separated queries .<br />\r\nA query can be of&nbsp;four&nbsp;types&nbsp;<br />\r\n1. a x (Pushes an element x at the end of the&nbsp;queue&nbsp;q&nbsp;)<br />\r\n2. b (if queue&nbsp;is not empty&nbsp;pops the front&nbsp;element and prints it, else prints -1)<br />\r\n3. c (prints the size of the queue)<br />\r\n4. d (if queue&nbsp;is not empty prints the front&nbsp;element of the queue, else&nbsp;prints&nbsp;-1)<br />\r\n5. e (if queue is not empty prints the last element of the queue else prints -1)<br />\r\n<br />\r\n<strong>Output:</strong><br />\r\nThe output for each test case will&nbsp;&nbsp;be space separated integers denoting the results of each query .&nbsp;<br />\r\n<br />\r\n<strong>Constraints:</strong><br />\r\n1&lt;=T&lt;=100<br />\r\n1&lt;=Q&lt;=100<br />\r\n<br />\r\n<strong>Example:</strong></span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Input</strong><br />\r\n2<br />\r\n5<br />\r\na 4 a 6 a 7 b c&nbsp;<br />\r\n4<br />\r\na 55 a 11 d e<br />\r\n<strong>&nbsp;<br />\r\nOutput</strong><br />\r\n4 2<br />\r\n55 11<br />\r\n<br />\r\n<strong>Explanation :<br />\r\nFor the first test case</strong><br />\r\nThere are five&nbsp;queries.&nbsp;Queries&nbsp;are&nbsp;performed in this order<br />\r\n1. a 4 { queue&nbsp;q&nbsp;has&nbsp;4 &nbsp;}<br />\r\n2. a 7&nbsp;{queue q&nbsp;has 4,7 }<br />\r\n3. a 6 {queue q&nbsp;has 4,7,6}<br />\r\n4. b &nbsp; &nbsp;{pop 4&nbsp;from queue&nbsp;q&nbsp;and prints it queue&nbsp;now has 7,6}<br />\r\n5. c &nbsp; &nbsp;{prints the size of the queue q ie 2}<br />\r\n<br />\r\n<strong>For the sec test case&nbsp;</strong><br />\r\nThere are three&nbsp;queries.&nbsp;Queries&nbsp;are&nbsp;performed in this order<br />\r\n1. a 55 &nbsp;{queue q&nbsp;has&nbsp;55 }<br />\r\n2. a 11 &nbsp;{queue q&nbsp;has 55 ,11 }<br />\r\n3. d &nbsp; &nbsp; &nbsp;{prints the front&nbsp;element of the queue q&nbsp;ie. 55 }<br />\r\n4. e &nbsp; &nbsp; &nbsp;{prints the end element of the queue q ie 11 }</span><br />\r\n<br />\r\n<br />\r\n<br />\r\n<span style=\"font-size:16px\"><strong>Note:</strong>The <strong>Input/Output</strong> format and <strong>Example</strong> given are used for system&#39;s internal purpose, and should be used by a user for <strong>Expected Output</strong> only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "STL",
                "slug": "stl"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Function to push element x into the queue\nvoid push(queue<int> &q,int x)\n{\n    q.push(x);\n}\n\n//Function to remove the front element from queue and return it\nint pop(queue<int> &q)\n{\n    //checking if queue is not empty\n    if(!q.empty()){\n        //storing the front element and removing it from the queue\n        int x = q.front();\n        q.pop();\n        return x;\n    }else\n        return -1; //returning -1 if queue is empty\n}\n\n//Function to get the size of the queue\nint getSize(queue<int> &q)\n{\n    return q.size();\n}\n\n//Function to get the last element of the queue\nint getBack(queue<int> &q)\n{\n    //checking if queue is not empty\n    if(!q.empty())\n        return q.back(); //returning the last element in the queue\n    else\n        return -1; //returning -1 if queue is empty\n}\n\n//Function to get the front element of the queue\nint getFront(queue<int> &q)\n{\n    //checking if queue is not empty\n    if(!q.empty())\n        return q.front(); //returning the front element in the queue\n    else\n        return -1; //returning -1 if queue is empty\n}",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}