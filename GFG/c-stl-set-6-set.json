{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700348,
            "title": "C++ STL | Set 6 (set)",
            "titleSlug": "c-stl-set-6-set",
            "content": "<p><span style=\"font-size:20px\">Implement different operations on a set&nbsp;s&nbsp;.<br />\r\n<br />\r\n<strong>Input:</strong><br />\r\nThe first line of input contains an integer <strong>T</strong> denoting the no of test cases . Then T test cases follow. The first line of input contains an integer <strong>Q</strong> denoting the no of queries . Then in the next line are <strong>Q</strong>&nbsp;space separated queries .<br />\r\nA query can be of&nbsp;four&nbsp;types&nbsp;<br />\r\n1. a x (inserts an element x to the set s)<br />\r\n2. b (prints the contents of the set s)<br />\r\n3. c x&nbsp;(erases an element x from the set s)<br />\r\n4. d x (prints 1 if the element x is present in the set&nbsp;else print -1)<br />\r\n5. e (prints the size of the set s)<br />\r\n<br />\r\n<strong>Output:</strong><br />\r\nThe output for each test case will&nbsp;&nbsp;be space separated integers denoting the results of each query .&nbsp;<br />\r\n<br />\r\n<strong>Constraints:</strong><br />\r\n1&lt;=T&lt;=100<br />\r\n1&lt;=Q&lt;=100<br />\r\n<br />\r\n<strong>Example:</strong></span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Input</strong><br />\r\n2<br />\r\n6<br />\r\na 1 a 2 a 3 b c 2 b<br />\r\n5<br />\r\na 1 a 5 e d 5 d 2<br />\r\n<strong>&nbsp;<br />\r\nOutput</strong><br />\r\n1 2 3 1 3<br />\r\n2 1 -1<br />\r\n<br />\r\n<strong>Explanation :<br />\r\nFor the first test case</strong><br />\r\nThere are six&nbsp;queries.&nbsp;Queries&nbsp;are&nbsp;performed in this order<br />\r\n1. a 1 &nbsp; &nbsp; { insert 1 to set now set has {1}&nbsp;}<br />\r\n2. a 2 &nbsp; &nbsp; {inserts 2&nbsp;to set now set has {1,2}&nbsp;}<br />\r\n3. a 3 &nbsp; &nbsp; {inserts 3 to set now set has {1,2,3}&nbsp;}<br />\r\n4. b &nbsp; &nbsp; &nbsp; &nbsp;{prints the set contents ie 1,2,3}<br />\r\n5. c 2 &nbsp; &nbsp; {removes 2 from the set&nbsp;}<br />\r\n6. b &nbsp; &nbsp; &nbsp; &nbsp;{prints the set contents ie 1,3}<br />\r\n<br />\r\n<strong>For the second test case&nbsp;</strong><br />\r\nThere are five&nbsp;queries.&nbsp;Queries&nbsp;are&nbsp;performed in this order<br />\r\n1. a 1&nbsp; &nbsp; &nbsp;{inserts 1 to set now set has {1}&nbsp;}<br />\r\n2. a 11 &nbsp; {inserts 11 to set now set has {1,11}&nbsp;}<br />\r\n3. e&nbsp; &nbsp; &nbsp; &nbsp; {prints the size of the set ie 2}<br />\r\n4. d 5&nbsp; &nbsp; &nbsp;{since five is present prints 1}<br />\r\n5. d 2 &nbsp; &nbsp; {since 2 is not present in the set prints -1}</span><br />\r\n<br />\r\n<br />\r\n<span style=\"font-size:14px\"><strong>Note:</strong>The <strong>Input/Output</strong> format and <strong>Example</strong> given are used for system&#39;s internal purpose, and should be used by a user for <strong>Expected Output</strong> only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement various operations on a set. The operations include:\n\n1.  **Insert:** Add an element to the set.\n2.  **Print:** Display the elements of the set.\n3.  **Erase:** Remove an element from the set.\n4.  **Search:** Check if an element exists in the set.\n5.  **Size:** Determine the number of elements in the set.",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= Q <= 100 (Number of queries)"
                ],
                "testcases": [
                    {
                        "input": "6\na 1 a 2 a 3 b c 2 b",
                        "output": "1 2 3 1 3",
                        "explanation": "Initially, the set is empty.\n- 'a 1': Insert 1, set becomes {1}\n- 'a 2': Insert 2, set becomes {1, 2}\n- 'a 3': Insert 3, set becomes {1, 2, 3}\n- 'b': Print the set: 1 2 3\n- 'c 2': Erase 2, set becomes {1, 3}\n- 'b': Print the set: 1 3"
                    },
                    {
                        "input": "5\na 1 a 5 e d 5 d 2",
                        "output": "2 1 -1",
                        "explanation": "Initially, the set is empty.\n- 'a 1': Insert 1, set becomes {1}\n- 'a 5': Insert 5, set becomes {1, 5}\n- 'e': Print the size of the set: 2\n- 'd 5': Search for 5. It exists, print 1\n- 'd 2': Search for 2. It doesn't exist, print -1"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Function to insert element into a set\r\nvoid insert(set<int> &s,int x)\r\n{\r\n\t//inserting element x into the set\r\n\ts.insert(x);\r\n}\r\n\r\n//Function to print the contents of a set\r\nvoid print_contents(set<int> &s)\r\n{\r\n\t//iterating through the set and printing each element\r\n\tfor(auto i=s.begin();i!=s.end();i++)\r\n\t{\r\n\t\tcout<<*i<<\" \";\r\n\t}\r\n}\r\n\r\n//Function to return the size of a set\r\nint size(set<int> &s)\r\n{\r\n\t//returning the size of the set\r\n\treturn s.size();\r\n}\r\n\r\n//Function to erase an element from a set\r\nvoid erase(set<int> &s,int x)\r\n{\r\n\t//finding the iterator pointing to element x in the set\r\n\tstd::set<int>::iterator it;\r\n\tit = s.find(x);\r\n\r\n\t//checking if element x is found in the set\r\n\tif(it!=s.end())\r\n\t{\r\n\t\t//erasing the element from the set\r\n\t\ts.erase(it);\r\n\t}\r\n}\r\n\r\n//Function to check if an element is present in a set\r\nint find(set<int> &s,int x)\r\n{\r\n\t//finding the iterator pointing to element x in the set\r\n\tstd::set<int>::iterator it;\r\n\tit = s.find(x);\r\n\r\n\t//checking if element x is found in the set\r\n\tif(it!=s.end())\r\n\t{\r\n\t\t//returning 1 if element x is found in the set\r\n\t\treturn 1;\r\n\t}\r\n\t//returning -1 if element x is not found in the set\r\n\telse \r\n\t\treturn -1;\r\n}",
                "lang_text": "cpp"
            }
        ],
        "platform": "GFG"
    }
}