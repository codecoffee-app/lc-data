{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700363,
            "title": "C++ STL | Set 7 (unordered map)",
            "titleSlug": "c-stl-set-7-unordered-map",
            "content": "<p><span style=\"font-size:20px\">Implement different operations on unordered maps.<br />\r\n<br />\r\n<strong>Input:</strong><br />\r\nThe first line of input contains an integer <strong>T</strong> denoting the no of test cases . Then T test cases follow. The first line of input contains an integer <strong>Q</strong> denoting the no of queries . Then in the next line are <strong>Q</strong>&nbsp;space separated queries .<br />\r\nA query can be of four&nbsp;types&nbsp;<br />\r\n1. a x y&nbsp;(adds an entry&nbsp;with key x and value&nbsp;y to the unordered map)<br />\r\n2. b x (print value of &nbsp;x if&nbsp;present in the unordered map else print -1.&nbsp;)<br />\r\n3. c (prints the size of the unordered map)<br />\r\n4. d x (removes an entry&nbsp;with key x from the unordered&nbsp;map)<br />\r\n<br />\r\n<strong>Output:</strong><br />\r\nThe output for each test case will&nbsp;&nbsp;be space separated integers denoting the results of each query .&nbsp;<br />\r\n<br />\r\n<strong>Constraints:</strong><br />\r\n1&lt;=T&lt;=100<br />\r\n1&lt;=Q&lt;=100<br />\r\n<br />\r\n<strong>Example(To be used only for expected output):</strong></span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Input</strong><br />\r\n2<br />\r\n5<br />\r\na 1 2 a 66 3 b 66 d 1&nbsp;c<br />\r\n3<br />\r\na 1 66 b 5 c<br />\r\n<br />\r\n<strong>Output</strong><br />\r\n3 1<br />\r\n-1 1</span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Explanation :<br />\r\nFor the first test case</strong><br />\r\nThere are five&nbsp;queries.&nbsp;Queries&nbsp;are&nbsp;performed in this order<br />\r\n1. a 1 2 &nbsp; &nbsp; --&gt; &nbsp;map has a key 1 with value 2&nbsp;<br />\r\n2. a 66 3 &nbsp; ---&gt;&nbsp;map has a key 66 with value 3<br />\r\n3. b 66 &nbsp; &nbsp; &nbsp;---&gt; prints the value of key 66 if its present in the map ie 3.<br />\r\n4. d 1&nbsp; &nbsp; &nbsp; &nbsp; ---&gt; &nbsp;erases an entry from map with key 1<br />\r\n5. c &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ---&gt; prints the size of the map ie 1<br />\r\n<br />\r\n<strong>For the sec test case&nbsp;</strong><br />\r\nThere are three&nbsp;queries.&nbsp;Queries&nbsp;are&nbsp;performed in this order<br />\r\n1. a 1 66 &nbsp; ---&gt; adds a key 1 with a value of 66 in the map<br />\r\n2. b 5 &nbsp; &nbsp; &nbsp; &nbsp;---&gt; &nbsp;since the key 5 is not present in the map hence -1 is printed.<br />\r\n3. c &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ---&gt; prints the size of the map ie 1</span><br />\r\n<br />\r\n<br />\r\n<br />\r\n<span style=\"font-size:16px\"><strong>Note:</strong>The <strong>Input/Output</strong> format and <strong>Example</strong> given are used for system&#39;s internal purpose, and should be used by a user for <strong>Expected Output</strong> only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Implement different operations on an unordered map. You will be given a series of queries to perform on the map. The map stores integer keys and integer values.\n\nThe following query types are supported:\n\n1.  `a x y`: Add an entry to the unordered map with key `x` and value `y`.\n2.  `b x`: Print the value associated with key `x`. If `x` is not present in the map, print -1.\n3.  `c`: Print the size of the unordered map.\n4.  `d x`: Remove the entry with key `x` from the unordered map. If `x` does not exist, do nothing.\n",
                "constraints": [
                    "1 <= T <= 100 (Number of test cases)",
                    "1 <= Q <= 100 (Number of queries)"
                ],
                "testcases": [
                    {
                        "input": "5\na 1 2 a 66 3 b 66 d 1 c",
                        "output": "3 1",
                        "explanation": "Initially, the map is empty.\n- `a 1 2`: Adds key 1 with value 2 to the map.  Map: {1: 2}\n- `a 66 3`: Adds key 66 with value 3 to the map. Map: {1: 2, 66: 3}\n- `b 66`: Key 66 exists in the map with value 3, so print 3.\n- `d 1`: Removes key 1 from the map. Map: {66: 3}\n- `c`: The size of the map is now 1, so print 1."
                    },
                    {
                        "input": "3\na 1 66 b 5 c",
                        "output": "-1 1",
                        "explanation": "Initially, the map is empty.\n- `a 1 66`: Adds key 1 with value 66 to the map.  Map: {1: 66}\n- `b 5`: Key 5 does not exist in the map, so print -1.\n- `c`: The size of the map is now 1, so print 1."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// Function to add a key-value pair to the unordered map\nvoid add_value(unordered_map<int,int> &m,int x,int y)\n{\n    m[x] = y;\n}\n\n// Function to find the value corresponding to a given key in the unordered map\nint find_value(unordered_map<int,int> &m,int x)\n{\n    if(m.find(x)!=m.end())\n        return m[x];\n    else\n        return -1;\n}\n\n// Function to get the size of the unordered map\nint getSize(unordered_map<int,int> &m)\n{\n    return m.size();\n}\n\n// Function to remove a key-value pair from the unordered map\nvoid removeKey(unordered_map<int,int> &m,int x)\n{\n    m.erase(x);\n}",
                "lang_text": "cpp"
            }
        },
        "platform": "GFG"
    }
}