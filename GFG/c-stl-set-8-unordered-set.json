{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 700365,
            "title": "C++ STL | Set 8 (unordered set)",
            "titleSlug": "c-stl-set-8-unordered-set",
            "content": "<p><span style=\"font-size:20px\">Implement different operations on an unordered set&nbsp;s&nbsp;.<br />\r\n<br />\r\n<strong>Input:</strong><br />\r\nThe first line of input contains an integer <strong>T</strong> denoting the no of test cases . Then T test cases follow. The first line of input contains an integer <strong>Q</strong> denoting the no of queries . Then in the next line are <strong>Q</strong>&nbsp;space separated queries .<br />\r\nA query can be of&nbsp;four&nbsp;types&nbsp;<br />\r\n1. a x (inserts an element x to the unordered set s)<br />\r\n2. b&nbsp;x&nbsp;(erases an element x from the unordered set s)<br />\r\n3. c&nbsp;x (prints 1 if the element x is present in the set&nbsp;else print -1)<br />\r\n4. d &nbsp; &nbsp;(prints the size of the unordered set s)<br />\r\n<br />\r\n<strong>Output:</strong><br />\r\nThe output for each test case will&nbsp;&nbsp;be space separated integers denoting the results of each query .&nbsp;<br />\r\n<br />\r\n<strong>Constraints:</strong><br />\r\n1&lt;=T&lt;=100<br />\r\n1&lt;=Q&lt;=100<br />\r\n<br />\r\n<strong>Example(To be used only for only expected output):</strong></span></p>\r\n\r\n<p><span style=\"font-size:20px\"><strong>Input</strong><br />\r\n2<br />\r\n5<br />\r\na 1 a 2 a 3 b 2 d<br />\r\n4<br />\r\na 1 a 5 d c 2<br />\r\n<strong>&nbsp;<br />\r\nOutput</strong><br />\r\n2<br />\r\n2 -1<br />\r\n<br />\r\n<strong>Explanation :<br />\r\nFor the first test case</strong><br />\r\nThere are five&nbsp;queries.&nbsp;Queries&nbsp;are&nbsp;performed in this order<br />\r\n1. a 1 &nbsp; &nbsp; {inserts 1 to set now set has {1}&nbsp;}<br />\r\n2. a 2 &nbsp; &nbsp; {inserts 2&nbsp;to set now set has {1,2}&nbsp;}<br />\r\n3. a 3 &nbsp; &nbsp; {inserts 3 to set now set has {1,2,3}&nbsp;}<br />\r\n4. b&nbsp;2 &nbsp; &nbsp; {removes 2 from the set&nbsp;}<br />\r\n5. d &nbsp; &nbsp; &nbsp; &nbsp;{prints the size of the unordered set ie 2}<br />\r\n<br />\r\n<strong>For the second test case&nbsp;</strong><br />\r\nThere are four&nbsp;queries.&nbsp;Queries&nbsp;are&nbsp;performed in this order<br />\r\n1. a 1&nbsp; &nbsp; {inserts 1 to set now set has {1}&nbsp;}<br />\r\n2. a 5&nbsp; &nbsp; {inserts 5&nbsp;to set now set has {1,5}&nbsp;}<br />\r\n3. d&nbsp; &nbsp; &nbsp; &nbsp;{prints the size of the set ie 2}<br />\r\n4. c&nbsp;2 &nbsp; &nbsp;{since 2 is not present in the set prints -1}</span><br />\r\n<br />\r\n<br />\r\n<span style=\"font-size:16px\"><strong>Note:</strong>The <strong>Input/Output</strong> format and <strong>Example</strong> given are used for system&#39;s internal purpose, and should be used by a user for <strong>Expected Output</strong> only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Basic",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "STL",
                "slug": "stl"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to insert an element into the unordered set\nvoid insert(unordered_set<int> &s,int x)\n{\n    s.insert(x);\n}\n\n// Function to erase an element from the unordered set\nvoid erase(unordered_set<int> &s,int x)\n{\n    // Finding the element in the set\n    std::unordered_set<int>::iterator it;\n    it = s.find(x);\n    \n    // Erasing the element if found\n    if(it!=s.end())\n    {\n        s.erase(it);\n    }\n}\n\n// Function to get the size of the unordered set\nint size(unordered_set<int> &s)\n{\n    return s.size();\n}\n\n// Function to find an element in the unordered set\nint find(unordered_set<int> &s,int x)\n{\n    // Finding the element in the set\n    std::unordered_set<int>::iterator it;\n    it = s.find(x);\n    \n    // Returning 1 if element is found, -1 otherwise\n    if(it!=s.end())\n    {\n        return 1;\n    }\n    else \n    {\n        return -1;\n    }\n}",
                "lang_text": "cpp"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\nclass Solution\n{\n    //Complete this function\n    //Function to insert an element x to the unordered set s.\n    public void insert(HashSet<int> s, int x)\n    {\n        s.Add(x);\n    }\n\n    //Complete this function\n    //Function to erase an element x from the unordered set s.\n    public void erase(HashSet<int> s, int x)\n    {\n        s.Remove(x);\n    }\n\n    //Complete this function\n    //Function to return the size of the unordered set s.\n    public int size(HashSet<int> s)\n    {\n        return s.Count;\n    }\n\n    //Complete this function\n    //Function to return 1 if the element x is present in the unordered set s else returns -1.\n    public int find(HashSet<int> s, int x)\n    {\n        if (s.Contains(x))\n        {\n            return 1;\n        }\n        else\n        {\n            return -1;\n        }\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}