{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703180,
            "title": "C++ Visible Numbers",
            "titleSlug": "c-visible-numbers5542",
            "content": "<p><span >Given an array <strong>nums[]</strong> of integers, find all the numbers that occur more than one-third times the array size in the array. If no element meets the criteria, return -1 in an array.</span></p>\n<h3><span >Examples:</span></h3>\n<pre><span ><strong>Input: </strong>nums = [2, 1, 5, 5, 5, 5, 6, 6, 6, 6, 6]\n<strong>Output: </strong>[5, 6]<br /><strong>Explanation:</strong> 5 and 6 occur more than n/3 times.<br /></span></pre>\n<pre><span ><strong>Input: </strong>nums = [1, 2, 3, 4, 5]\n<strong>Output: </strong>[-1]</span><br /><span ><strong>Explanation: </strong>no candidate occur more than n/3 times.</span></pre>\n<p><span ><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><span ><strong>Constraints:</strong><br />1 &lt;=&nbsp; nums.size()&nbsp; &lt;= 10<sup>6</sup></span><br style=\"font-size: 18px;\" /><span >-10<sup>9</sup>&nbsp;&lt;= nums[i] &lt;= 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span >Try assuming two of them as the majority, and iterate through arrays if you find another suitable number then replace them and do the final check and return ans.&nbsp;</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "CPP",
                "slug": "cpp"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the majority elements in the array\n    vector<int> findMajor(vector<int>& nums) {\n        int n = nums.size();\n        int num1 = 0, num2 = 0;\n        int c1 = 0, c2 = 0;\n        vector<int> res;\n\n        // Finding the two most frequent numbers using Boyer-Moore algorithm\n        for (auto x : nums) {\n            if (x == num1)\n                c1++;\n            else if (x == num2)\n                c2++;\n            else if (c1 == 0) {\n                num1 = x;\n                c1++;\n            } else if (c2 == 0) {\n                num2 = x;\n                c2++;\n            } else {\n                c1--;\n                c2--;\n            }\n        }\n        c1 = 0, c2 = 0;\n        // Counting the occurrences of num1 and num2\n        for (auto x : nums) {\n            if (x == num1)\n                c1++;\n            else if (x == num2)\n                c2++;\n        }\n        // Checking if num1 and num2 are majority elements\n        if (c1 > n / 3)\n            res.push_back(num1);\n        if (c2 > n / 3)\n            res.push_back(num2);\n        // If no majority elements, add -1 to the result vector\n        if (res.size() == 0)\n            res.push_back(-1);\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to find the majority elements in the array\n    public List<Integer> findMajor(List<Integer> nums) {\n        int n = nums.size();\n        int num1 = 0, num2 = 0, c1 = 0, c2 = 0;\n        List<Integer> res = new ArrayList<>();\n\n        // Finding the two most frequent numbers using Boyer-Moore algorithm\n        for (int x : nums) {\n            if (x == num1) {\n                c1++;\n            } else if (x == num2) {\n                c2++;\n            } else if (c1 == 0) {\n                num1 = x;\n                c1 = 1;\n            } else if (c2 == 0) {\n                num2 = x;\n                c2 = 1;\n            } else {\n                c1--;\n                c2--;\n            }\n        }\n\n        c1 = 0;\n        c2 = 0;\n        // Counting the occurrences of num1 and num2\n        for (int x : nums) {\n            if (x == num1) {\n                c1++;\n            } else if (x == num2) {\n                c2++;\n            }\n        }\n\n        // Checking if num1 and num2 are majority elements\n        if (c1 > n / 3) res.add(num1);\n        if (c2 > n / 3) res.add(num2);\n\n        // If no majority elements, add -1 to the result list\n        if (res.isEmpty()) res.add(-1);\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n    # Function to find the majority elements in the array\n    def findMajor(self, nums):\n        n = len(nums)\n        num1, num2, c1, c2 = 0, 0, 0, 0\n        res = []\n\n        # Finding the two most frequent numbers using Boyer-Moore algorithm\n        for x in nums:\n            if x == num1:\n                c1 += 1\n            elif x == num2:\n                c2 += 1\n            elif c1 == 0:\n                num1 = x\n                c1 = 1\n            elif c2 == 0:\n                num2 = x\n                c2 = 1\n            else:\n                c1 -= 1\n                c2 -= 1\n\n        c1, c2 = 0, 0\n        # Counting the occurrences of num1 and num2\n        for x in nums:\n            if x == num1:\n                c1 += 1\n            elif x == num2:\n                c2 += 1\n\n        # Checking if num1 and num2 are majority elements\n        if c1 > n / 3:\n            res.append(num1)\n        if c2 > n / 3:\n            res.append(num2)\n\n        # If no majority elements, add -1 to the result list\n        if len(res) == 0:\n            res.append(-1)\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    // Function to find the majority elements in the array\n    findMajor(nums) {\n        let n = nums.length;\n        let num1 = 0, num2 = 0, c1 = 0, c2 = 0;\n        let res = [];\n\n        // Finding the two most frequent numbers using Boyer-Moore algorithm\n        for (let x of nums) {\n            if (x === num1) {\n                c1++;\n            } else if (x === num2) {\n                c2++;\n            } else if (c1 === 0) {\n                num1 = x;\n                c1 = 1;\n            } else if (c2 === 0) {\n                num2 = x;\n                c2 = 1;\n            } else {\n                c1--;\n                c2--;\n            }\n        }\n\n        c1 = 0;\n        c2 = 0;\n        // Counting the occurrences of num1 and num2\n        for (let x of nums) {\n            if (x === num1) {\n                c1++;\n            } else if (x === num2) {\n                c2++;\n            }\n        }\n\n        // Checking if num1 and num2 are majority elements\n        if (c1 > Math.floor(n / 3)) res.push(num1);\n        if (c2 > Math.floor(n / 3)) res.push(num2);\n\n        // If no majority elements, add -1 to the result list\n        if (res.length === 0) res.push(-1);\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}