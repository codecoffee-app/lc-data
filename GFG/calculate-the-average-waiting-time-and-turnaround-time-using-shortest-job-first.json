{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710290,
            "title": "Calculate the average Waiting Time and Turnaround Time using Shortest Job First",
            "titleSlug": "calculate-the-average-waiting-time-and-turnaround-time-using-shortest-job-first",
            "content": "<p><span style=\"font-size:18px\">Given <strong>N</strong>&nbsp;processes with their <strong>arrivalTime&nbsp;</strong>and&nbsp;<strong>burstTime.&nbsp;</strong>The task is to return&nbsp;the average&nbsp;<strong>waitingTime&nbsp;</strong>and&nbsp;<strong>Turnaround&nbsp;</strong>time for the given processes.<br />\r\n<br />\r\nShortest job first (SJF) or shortest job next, is a scheduling policy that selects the waiting process with the smallest execution time to execute next. It&nbsp;is a non-preemptive algorithm and no process is interrupted until it is completed, and after that processor switches to another process).</span></p>\r\n\r\n<ol>\r\n\t<li><span style=\"font-size:18px\">Completion Time: Time at which process completes its execution.</span></li>\r\n\t<li><span style=\"font-size:18px\">Turn Around Time: Time Difference between completion time and arrival time. Turn Around Time = Completion Time -&nbsp;Arrival Time</span></li>\r\n\t<li><span style=\"font-size:18px\">Waiting Time(W.T): Time Difference between turn around time and burst time.&nbsp;<br />\r\n\tWaiting Time = Turn Around Time -&nbsp; Burst Time</span></li>\r\n</ol>\r\n\r\n<p><span style=\"font-size:18px\">&nbsp;</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\narrivalTime[] = {0, 0, 0}\r\nburstTime[] = {4, 2, 3}\r\n<strong>Output: </strong>{2.33, 5.33}\r\n<strong>Explanation:</strong> \r\nSince Process 2 has the smallest burst time, it gets executed first.\r\nHence, Completetion time = 2\r\nNext Process 3, has burst tme of 3, hence it gets executed. \r\nCompletion time = 2 + 3 = 5.\r\nProcess 1, has burst tme of 4, hence it gets executed.\r\nCompletion time = 5 + 4 = 9.\r\nTurnaround time = Completion Time - Arrival time\r\nSo, \r\nProcess 1, Turnaround time = 9 - 0 = 9\r\nProcess 2, Turnaround time = 2 - 0 = 2\r\nProcess 3, Turnaround time = 5 - 0 = 5\r\n\r\nWaiting time = Turnaround time - Burst Time\r\nSo,\r\nProcess 1, Waiting time = 9 - 4 = 5\r\nProcess 2, Waiting time = 2 - 2 = 0\r\nProcess 3, Waiting time = 5 - 3 = 2\r\n\r\nAverage waiting time = (5 + 0 + 2)/3 = 2.33\r\nAverage t tiurnaround time = (9 + 2 + 5)/3 = 5.33\r\n</span></pre>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">Process Id</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">Arrival Time</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">Burst Time</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">Completion Time</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">Waiting Time</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">Turnaround time</span></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">\\t 1</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">\\t 0</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">\\t4</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">\\t    9</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">\\t    5</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">\\t    9</span></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">\\t 2</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">\\t 0</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">\\t2</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">\\t    2</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">\\t    0</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">\\t    2</span></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">\\t 3</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">\\t 0</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">\\t3</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">\\t    5</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">\\t    2</span></pre>\r\n\t\t\t</td>\r\n\t\t\t<td>\r\n\t\t\t<pre>\r\n<span style=\"font-size:18px\">\\t    5</span></pre>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\r\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>averageTimes</strong><strong>()</strong>&nbsp;which takes two arrays array of size <strong>N</strong>&nbsp;and returns a list containing two doubles.<br />\r\n<br />\r\n<strong>Note : </strong>Return double up rounded up to two decimal places..</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N<sup>2</sup>)<br />\r\n<strong>Expected Auxiliary Space:</strong> O(N)</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1 &lt;= N &lt;= 2 * 10<sup>4</sup><br />\r\n0 &lt;= arrivalTime[i]&nbsp;&lt;= 200<br />\r\n0 &lt;= burstTime&lt;= 100</span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Simulate the Shortest Job First algorithm.</span></p>",
            "<p><span style=\"font-size:18px\">Calculate the completion time, turnaround time and waiting time and take their averages.</span></p>"
        ],
        "relatedTopics": [],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution{\r\n    public:\r\n    double round(double var){\r\n        double value = (int)(var * 100 + .5);\r\n        return (double)value / 100;\r\n    }\r\n    vector<double>averageTimes(vector<int>arrivalTime, vector<int>burstTime, int n){\r\n        vector<int>completionTime(n);\r\n        vector<int>turnAroundTime(n);\r\n        vector<int>waitingTime(n);\r\n        vector<int>completed(n);\r\n    \r\n        int systemTime = 0, totalProcesses = 0;\r\n        double avgwaitingTime = 0, avgturnAroundTime = 0;\r\n    \r\n        // Initializing all process as undone\r\n        for (int i = 0; i < n; i++) \r\n        {\r\n            completed[i] = 0;\r\n        }\r\n    \r\n        // Till all the processes are done\r\n        while (totalProcesses != n) \r\n        {\r\n            int check = n, min = INT_MAX;\r\n    \r\n            for (int i = 0; i < n; i++) \r\n            {\r\n                /*\r\n                    If the process arrival time is less than system time and it is not completed\r\n                    and burstTime is smallest of this process this process will be executed first\r\n                */\r\n                if ((arrivalTime[i] <= systemTime) and (completed[i] == 0) and (burstTime[i] < min)) \r\n                {\r\n                    min = burstTime[i];\r\n                    check = i;\r\n                }\r\n            }\r\n    \r\n            // No process in the queue.\r\n            if (check == n) \r\n            {\r\n                systemTime++;\r\n            }\r\n            else \r\n            {\r\n                completionTime[check] = systemTime + burstTime[check];\r\n                systemTime += burstTime[check];\r\n                turnAroundTime[check] = completionTime[check] - arrivalTime[check];\r\n                waitingTime[check] = turnAroundTime[check] - burstTime[check];\r\n                completed[check] = 1;\r\n                totalProcesses++;\r\n            }\r\n        }\r\n    \r\n        // Sum for calculating averages\r\n        for (int i = 0; i < n; i++) \r\n        {\r\n            avgwaitingTime += waitingTime[i];\r\n            avgturnAroundTime += turnAroundTime[i];\r\n        }\r\n    \r\n        vector<double>ans(2);\r\n    \r\n        ans[0] = (double) (avgwaitingTime / n);\r\n        ans[1] = (double) (avgturnAroundTime / n);\r\n    \r\n        double res1 = round(ans[0]);\r\n        double res2 = round(ans[1]);\r\n        return {res1, res2};\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}