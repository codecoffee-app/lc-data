{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701766,
            "title": "Camel Case",
            "titleSlug": "camel-case04234120",
            "content": "<p><span style=\"font-size:18px\">Given a dictionary of words <strong>dict </strong>where each word follows CamelCase notation, print all words in the dictionary that match with a given <strong>pattern </strong>consisting of uppercase characters only.<br />\n<em>CamelCase is the practice of writing compound words or phrases such that each word or abbreviation begins with a capital letter. Common examples include: &ldquo;PowerPoint&rdquo; and &ldquo;WikiPedia&rdquo;, &ldquo;GeeksForGeeks&rdquo;, &ldquo;CodeBlocks&rdquo;, etc.</em><br />\n<br />\n<strong>Note: </strong>The order should be such that the output strings should be sorted by the lexicographic order of their abbreviations. For strings with same abbreviations the strings should be sorted by the usual lexicographic order. So, if Output Strings are Hi and HelloWorld, Hi should come first as H lexiographically is smaller than HW.</span></p>\n\n<p><br />\n<strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre>\n<strong><span style=\"font-size:18px\">Input:\n</span></strong><span style=\"font-size:18px\">n = 8\ndict[] = {Hi,Hello,HelloWorld,HiTech\nHiGeek,HiTechWorld,HiTechCity,HiTechLab}\npattern = HA\n<strong>Output: </strong>No match found</span>\n</pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<strong><span style=\"font-size:18px\">Input:\n</span></strong><span style=\"font-size:18px\">n = 3\ndict[]={WelcomeGeek,WelcomeToGeeksForGeeks\nGeeksForGeeks}\npattern = WTG\n<strong>Output: </strong>WelcomeToGeeksForGeeks<strong>\nExplanation: </strong>WTG occurs in\n<strong>W</strong>elcome<strong>T</strong>o<strong>G</strong>eeksForGeeks.</span></pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nComplete <strong>findAllWords()&nbsp;</strong>function and print as mentioned. If the pattern is not found, print &quot;<strong>No match found&quot;</strong> (without quotes) in the function itself. The new line is provided by the driver code.</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N * WORD_LEN).<br />\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N * WORD_LEN).</span></p>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1 &lt;= N &lt;= 100<br />\n1 &lt;= length of pattern &lt;= length of string &lt;= 100</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a dictionary of words `dict` where each word follows CamelCase notation, identify and return all words in the dictionary that match a given `pattern`. The `pattern` consists of uppercase characters only. A CamelCase word matches the pattern if the uppercase letters in the word, taken in order, form the pattern.\n\nReturn the matching words sorted lexicographically first by their abbreviations (uppercase letters) and then by the words themselves.",
                "constraints": [
                    "1 <= N <= 100",
                    "1 <= length of pattern <= length of string <= 100"
                ],
                "testcases": [
                    {
                        "input": "n = 8\ndict[] = {Hi,Hello,HelloWorld,HiTech,HiGeek,HiTechWorld,HiTechCity,HiTechLab}\npattern = HA",
                        "output": "No match found",
                        "explanation": "There are no words in the dictionary whose CamelCase abbreviation matches 'HA'."
                    },
                    {
                        "input": "n = 3\ndict[]={WelcomeGeek,WelcomeToGeeksForGeeks,GeeksForGeeks}\npattern = WTG",
                        "output": "WelcomeToGeeksForGeeks",
                        "explanation": "The CamelCase abbreviation of 'WelcomeToGeeksForGeeks' is 'WTG', which matches the pattern."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            ""
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template for C++\n\n\nstruct TrieNode\n{\n\tTrieNode* children[ALPHABET_SIZE];\n\n\t// isLeaf is true if the node represents\n\t// end of a word\n\tbool isLeaf;\n\n\t// vector to store list of complete words\n\t// in leaf node\n\tvector<string> word;\n};\n\n// Returns new Trie node (initialized to NULLs)\nTrieNode* getNewTrieNode(void)\n{\n\tTrieNode* pNode = new TrieNode;\n\n\tif (pNode)\n\t{\n\t\tpNode->isLeaf = false;\n\n\t\tfor (int i = 0; i < ALPHABET_SIZE; i++)\n\t\t\tpNode->children[i] = NULL;\n\t}\n\n\treturn pNode;\n}\n\n//Function to insert word into the Trie.\nvoid insert(TrieNode* root, string word)\n{\n\tint index;\n\tTrieNode* pCrawl = root;\n\n\tfor (int level = 0; level < word.length(); level++)\n\t{\n\t\t//considering only uppercase characters.\n\t\tif (islower(word[level]))\n\t\t\tcontinue;\n\n\t\t//getting current character position.\n\t\tindex = int(word[level]) - 'A';\n\t\tif (!pCrawl->children[index])\n\t\t\tpCrawl->children[index] = getNewTrieNode();\n\n\t\tpCrawl = pCrawl->children[index];\n\t}\n\n\t//marking last node as leaf.\n\tpCrawl->isLeaf = true;\n\n\t//pushing word into vector associated with leaf node.\n\t(pCrawl->word).push_back(word);\n}\n\n//Function to print all children of Trie node root.\nvoid printAllWords(TrieNode* root)\n{\n\t//if current node is leaf.\n\tif (root->isLeaf)\n\t{\n\t\tsort((root->word).begin(), (root->word).end());\n\t\tfor(string str : root->word)\n\t\t\tcout << str<<\" \";\n\t}\n\n\t//recursing for all children of root node.\n\tfor (int i = 0; i < ALPHABET_SIZE; i++)\n\t{\n\t\tTrieNode* child = root->children[i];\n\t\tif (child)\n\t\t\tprintAllWords(child);\n\t}\n}\n\n//Function to search for pattern in Trie.\nbool search(TrieNode* root, string pattern)\n{\n\tint index;\n\tTrieNode* pCrawl = root;\n\n\tfor (int level = 0; level < pattern.length(); level++)\n\t{\n\t\tindex = int(pattern[level]) - 'A';\n\t\t// Invalid pattern\n\t\tif (!pCrawl->children[index])\n\t\t\treturn false;\n\n\t\tpCrawl = pCrawl->children[index];\n\t}\n\n\t//printing all words matching that pattern.\n\tprintAllWords(pCrawl);\n\n\treturn true;\n}\n\n\nclass Solution\n{\n    public:\n    //Function to print all words in the CamelCase dictionary \n    //that matches with a given pattern.\n    void findAllWords(vector<string> dict, string pattern)\n    {\n    \t//constructing Trie root node.\n    \tTrieNode* root = getNewTrieNode();\n    \n    \t//constructing Trie from given dict.\n    \tfor (string word : dict)\n    \t\tinsert(root, word);\n    \n    \t//searching for pattern in Trie.\n    \tif (!search(root, pattern))\n    \t\tcout << \"No match found\";\n    }\n};\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution\n{\n    static class TrieNode\n    {\n\t     HashMap<Character, TrieNode> child;\n\t     boolean isleaf;\n\t     ArrayList<String> words;\n\t     public TrieNode() {\n\t          child = new HashMap<>();\n\t          isleaf = false;\n\t          words = new ArrayList<>();\n\t     }\n\t     \n\t     //Function to insert word into the Trie.\n\t     public void insert(String w) \n\t     {\n\t         TrieNode crawl = this;\n\t         for(int level = 0; level < w.length(); level++)\n\t         {\n\t             char c = w.charAt(level);\n\t             //considering only uppercase characters.\n\t             if(Character.isUpperCase(c) == false) \n\t             continue;\n\t             \n\t             //getting current character position.\n\t             if(crawl.child.containsKey(c) == false)\n\t                crawl.child.put(c, new TrieNode());\n\t             crawl = crawl.child.get(c);\n\t         }\n\t         //marking last node as leaf.\n\t         crawl.isleaf = true;\n\t         //pushing word into list associated with leaf node.\n\t         crawl.words.add(w);\n\t     }\n\t }\n\t\n\t //Function to print all children of Trie node root.\n\t static void printAll(TrieNode node) \n\t {\n\t     //if current node is leaf.\n\t     if(node.isleaf) {\n\t         Collections.sort(node.words);\n\t         for(String s : node.words) {\n\t             System.out.print(s+\" \");\n\t         }\n\t     }\n\t     //recursing for all children of root node.\n\t     for(int i = 0; i < 26; i++) \n\t     {\n\t         char c = (char)('A'+i);\n\t         if(node.child.containsKey(c)==false)continue;\n\t         printAll(node.child.get(c));\n\t     }\n\t }\n\t \n\t //Function to search for pattern in Trie.\n\t static boolean search(TrieNode node, String ptrn)\n\t {\n\t     TrieNode crawl = node;\n\t     for(int i = 0; i < ptrn.length(); i++)\n\t     {\n\t         char c = ptrn.charAt(i);\n\t         //Invalid pattern\n\t         if(crawl.child.containsKey(c) == false) return false;\n\t         crawl = crawl.child.get(c);\n\t     }\n\t     //printing all words matching that pattern.\n\t     printAll(crawl);\n\t     return true;\n\t }\n\t \n\t//Function to print all words in the CamelCase dictionary \n    //that matches with a given pattern.\n\tstatic void findAllWords(String[] dict, String pattern) \n    {\n        //constructing Trie root node.\n        TrieNode root=new TrieNode();\n        \n        //constructing Trie from given dict.\n        for(String x:dict)\n        root.insert(x);\n        \n        //searching for pattern in Trie.\n        boolean res = search(root, pattern);\n    \n        System.out.print(res?\"\":\"No match found\");\n        \n    }   \n};",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass TrieNode: \n      \n    def __init__(self): \n        self.children = [None]*26\n  \n        # isEndOfWord is True if node represent the end of the word \n        self.isEndOfWord = False\n        \n        self.d=[]\n  \nclass Trie: \n    \n    global d\n    d=dict()\n    # Trie data structure class \n    def __init__(self): \n        self.root =TrieNode()\n        \ndef cti(ch):\n    return ord(ch)-ord('A')\n\n#Function to insert word into the Trie.  \ndef insert(root,key):\n    \n    for e in key:\n        idx=cti(e)\n        \n        #considering only uppercase characters.\n        if idx>26:\n            continue\n        \n        #getting current character position.\n        if not root.children[idx]:\n            root.children[idx]=TrieNode()\n        \n        root=root.children[idx]\n    \n    #pushing word into list associated with leaf node.\n    root.d.append(key)\n    #marking last node as leaf.\n    root.isEndOfWord=True\n\n#Function to print all children of Trie node root.    \ndef pall(root):\n    \n    if not root:\n        return\n    \n    #if current node is leaf.\n    if root.isEndOfWord:\n        for e in sorted(root.d):\n            print(e,end=' ')\n        \n    #recursing for all children of root node.\n    for i in range(26):\n        pall(root.children[i])\n        \n        \n#Function to search for pattern in Trie.\ndef search(root, key):\n    \n    for e in key:\n        idx=cti(e)\n        \n        # Invalid pattern\n        if not root.children[idx]:\n            print('No match found',end=' ')\n            return\n        \n        root=root.children[idx]\n    #printing all words matching that pattern.\n    pall(root)\n    \n\nclass Solution:\n    \n    #Function to print all words in the CamelCase dictionary \n    #that matches with a given pattern.\n    def findAllWords(self,dict,strs):\n        \n        #constructing Trie root node.\n        t=Trie()\n         \n        #constructing Trie from given dict.   \n        for s in dict:\n            insert(t.root,s)\n        \n        #searching for pattern in Trie.\n        search(t.root,strs)\n    \n\n\n        ",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\n\n\nclass TrieNode\n{\n    constructor()\n    { \n        this.children = new Array(26);\n        this.children.fill(null);\n        // isEndOfWord is True if node represent the end of the word \n        this.isEndOfWord = false\n        \n        // array to store list of complete words\n        // in leaf node\n\t    this.word =  new Array();\n    }\n}\n\n\n\n/**\n * @param {string[]} dict\n * @param {string} pattern\n*/\nclass Solution\n{\n    //Function to insert word into the Trie.\n    insert(root, word)\n    {\n    \tlet index;\n    \tlet pCrawl = root;\n    \n    \tfor (let level = 0; level < word.length; level++)\n    \t{\n    \t\t//getting current character position.\n    \t\tindex = word.charCodeAt(level) - 65;\n    \t\t\n    \t\t//considering only uppercase characters.\n    \t\tif (index>=0&&index<26);\n    \t\telse continue;\n    \t\t\n    \t\tif (pCrawl.children[index]==null)\n    \t\t\tpCrawl.children[index] = new TrieNode();\n    \n    \t\tpCrawl = pCrawl.children[index];\n    \t}\n    \n    \t//marking last node as leaf.\n    \tpCrawl.isLeaf = true;\n    \n    \t//pushing word into list associated with leaf node.\n    \t(pCrawl.word).push(word);\n    }\n    \n    //Function to print all children of Trie node root.\n    printAllWords(root)\n    {\n    \t//if current node is leaf.\n    \tif (root.isLeaf)\n    \t{\n    \t    root.word.sort();\n    \t\tfor(let i=0;i < root.word.length; i++){\n    \t\t\tthis.s += root.word[i];\n    \t\t    this.s += \" \";\n    \t\t}\n    \t}\n    \n    \t//recursing for all children of root node.\n    \tfor (let i = 0; i < 26; i++)\n    \t{\n    \t\tlet child = root.children[i];\n    \t\tif (child)\n    \t\t\tthis.printAllWords(child);\n    \t}\n    }\n    \n    //Function to search for pattern in Trie.\n    search(root, pattern)\n    {\n    \tlet index;\n    \tlet pCrawl = root;\n    \n    \tfor (let level = 0; level < pattern.length; level++)\n    \t{\n    \t\tindex = pattern.charCodeAt(level) - 65;\n    \t\t// Invalid pattern\n    \t\tif (pCrawl.children[index]==null)\n    \t\t\treturn false;\n    \n    \t\tpCrawl = pCrawl.children[index];\n    \t}\n    \n    \t//printing all words matching that pattern.\n    \tthis.printAllWords(pCrawl);\n    \n    \treturn true;\n    }\n    \n    //Function to print all words in the CamelCase dictionary \n    //that matches with a given pattern.\n    findAllWords(dict, pattern)\n    {\n        this.s=\"\";\n        \n    \t//constructing Trie root node.\n    \tlet root = new TrieNode();\n    \n    \t//constructing Trie from given dict.\n    \tfor (let i=0;i<dict.length;i++)\n    \t\tthis.insert(root, dict[i]);\n    \n    \t//searching for pattern in Trie.\n    \tif (!this.search(root, pattern))\n    \t\tconsole.log(\"No match found\");\n    \telse\n    \t   console.log(this.s);\n    }\n}\n",
                "lang_text": "javascript"
            },
            {
                "lang": "C#",
                "full_func": "public class Solution\n{\n    public class TrieNode\n    {\n        public TrieNode[] children;\n        public bool isLeaf;\n        public List<string> word;\n\n        public TrieNode()\n        {\n            children = new TrieNode[26];\n            isLeaf = false;\n            word = new List<string>();\n        }\n    }\n\n    public TrieNode getNewTrieNode()\n    {\n        return new TrieNode();\n    }\n\n    public void insert(TrieNode root, string word)\n    {\n        int index;\n        TrieNode pCrawl = root;\n\n        for (int level = 0; level < word.Length; level++)\n        {\n            if (char.IsLower(word[level]))\n                continue;\n\n            index = word[level] - 'A';\n            if (pCrawl.children[index] == null)\n                pCrawl.children[index] = getNewTrieNode();\n\n            pCrawl = pCrawl.children[index];\n        }\n\n        pCrawl.isLeaf = true;\n        pCrawl.word.Add(word);\n    }\n\n    public void printAllWords(TrieNode root)\n    {\n        if (root.isLeaf)\n        {\n            root.word.Sort();\n            foreach (string str in root.word)\n                Console.Write(str + \" \");\n        }\n\n        for (int i = 0; i < 26; i++)\n        {\n            TrieNode child = root.children[i];\n            if (child != null)\n                printAllWords(child);\n        }\n    }\n\n    public bool search(TrieNode root, string pattern)\n    {\n        int index;\n        TrieNode pCrawl = root;\n\n        for (int level = 0; level < pattern.Length; level++)\n        {\n            index = pattern[level] - 'A';\n            if (pCrawl.children[index] == null)\n                return false;\n\n            pCrawl = pCrawl.children[index];\n        }\n\n        printAllWords(pCrawl);\n\n        return true;\n    }\n\n    public void findAllWords(List<string> dict, string pattern)\n    {\n        TrieNode root = getNewTrieNode();\n\n        foreach (string word in dict)\n            insert(root, word);\n\n        if (!search(root, pattern))\n            Console.Write(\"No match found\");\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}