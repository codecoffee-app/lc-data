{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703703,
            "title": "CamelCase Pattern Matching",
            "titleSlug": "camelcase-pattern-matching2259",
            "content": "<p><span style=\"font-size: 18px;\">Given a dictionary of words&nbsp;</span><strong style=\"font-size: 18px;\">arr[]</strong><span style=\"font-size: 18px;\">&nbsp;where each word follows&nbsp;</span><strong style=\"font-size: 18px;\">CamelCase&nbsp;</strong><span style=\"font-size: 18px;\">notation, print all words in the dictionary that match with a given pattern </span><strong style=\"font-size: 18px;\">pat</strong><span style=\"font-size: 18px;\">&nbsp;consisting of&nbsp;</span><strong style=\"font-size: 18px;\">uppercase&nbsp;</strong><span style=\"font-size: 18px;\">characters only.</span></p>\n<blockquote>\n<p><strong style=\"font-size: 18px;\"><span style=\"font-family: arial, helvetica, sans-serif;\">CamelCase is the practice of writing compound words or phrases such that each word or abbreviation begins with a capital letter. Common examples include PowerPoint and Wikipedia, GeeksForGeeks, CodeBlocks, etc</span><em style=\"font-weight: 400;\">.</em></strong></p>\n</blockquote>\n<p><span style=\"font-size: 18px;\">Example</span><span style=\"font-size: 18px;\">: \"GeeksForGeeks\" matches the pattern \"GFG\", because if we combine all the capital letters in \"GeeksForGeeks\" they become \"GFG\". Also note \"GeeksForGeeks\" matches with the pattern \"GFG\" and also \"GF\", but <strong>does</strong></span><strong style=\"font-size: 18px;\">&nbsp;not&nbsp;</strong><span style=\"font-size: 18px;\">match with \"FG\".</span></p>\n<p><span style=\"font-size: 18px;\">Note: The driver code will sort your answer before checking and return the answer in any order.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [\"WelcomeGeek\", \"WelcomeToGeeksForGeeks\", \"GeeksForGeeks\"], pat = \"WTG\"\n<strong>Output: </strong>[\"WelcomeToGeeksForGeeks\"]\n<strong>Explanation: </strong>Since only \"WelcomeToGeeksForGeeks\" matches the pattern, it is the only answer.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [\"Hi\", \"Hello\", \"HelloWorld\", \"HiTech\", \"HiGeek\", \"HiTechWorld\", \"HiTechCity\", \"HiTechLab\"], pat = \"HA\"\n<strong>Output: </strong>[]\n<strong>Explanation: </strong>None of the words matches the given pattern.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;= arr.size() &lt;=1000<br />1&lt;= pat.size() &lt;=100<br />1&lt;= arr[i].size()</span><span style=\"font-size: 18px;\">&nbsp;</span><span style=\"font-size: 18px;\">&lt;=100</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">For each word, compare its uppercase version with the pattern.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Trie",
                "slug": "trie"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Advanced Data Structure",
                "slug": "advanced-data-structure"
            }
        ],
        "companies": [
            "ola-cabs"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Alphabet size (# of upper-case characters)\n    vector<string> camelCase(vector<string> &arr, string &pat) {\n\n        // vector for storing matched words\n        vector<string> res;\n        for (string word : arr) {\n\n            int i = 0, j = 0;\n            while (i < word.length() && j < pat.length()) {\n\n                // If ith character of word is a lowercase\n                // character, move to next character\n                if (islower(word[i])) {\n                    i++;\n                }\n\n                // If ith character of word is an uppercase\n                // character and does not match with the jth\n                // character of pattern, move to the next word\n                else if (word[i] != pat[j]) {\n                    break;\n                }\n\n                // If ith character of word is an uppercase\n                // character and matches with the jth character\n                // of pattern move to the next characters\n                else {\n                    i++;\n                    j++;\n                }\n            }\n\n            // If all characters of pattern matched, then insert\n            // the word in result\n            if (j == pat.length())\n                res.push_back(word);\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Alphabet size (# of upper-case characters)\n    public List<String> camelCase(String[] arr, String pat) {\n\n        // List for storing matched words\n        List<String> res = new ArrayList<>();\n        for (String word : arr) {\n            int i = 0, j = 0;\n            while (i < word.length() && j < pat.length()) {\n\n                // If ith character of word is a lowercase\n                // character, move to next character\n                if (Character.isLowerCase(word.charAt(i))) {\n                    i++;\n                }\n\n                // If ith character of word is an uppercase\n                // character and does not match with the jth\n                // character of pattern, move to the next word\n                else if (word.charAt(i) != pat.charAt(j)) {\n                    break;\n                }\n\n                // If ith character of word is an uppercase\n                // character and matches with the jth character\n                // of pattern move to the next characters\n                else {\n                    i++;\n                    j++;\n                }\n            }\n\n            // If all characters of pattern matched, then\n            // insert the word in result\n            if (j == pat.length()) res.add(word);\n        }\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def camelCase(self, arr, pat):\n\n        # List for storing matched words\n        res = []\n        for word in arr:\n            i, j = 0, 0\n            while i < len(word) and j < len(pat):\n\n                # If ith character of word is a lowercase\n                # character, move to next character\n                if word[i].islower():\n                    i += 1\n\n                # If ith character of word is an uppercase\n                # character and does not match with the jth\n                # character of pattern, move to the next word\n                elif word[i] != pat[j]:\n                    break\n\n                # If ith character of word is an uppercase\n                # character and matches with the jth character\n                # of pattern move to the next characters\n                else:\n                    i += 1\n                    j += 1\n\n            # If all characters of pattern matched,\n            # then insert the word in result\n            if j == len(pat):\n                res.append(word)\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "\nclass Solution {\n    camelCase(arr, pat) {\n        let ans = [];\n\n        for (let current of arr) {\n            let need = \"\";\n            for (let i = 0; i < current.length; i++) {\n                if (current[i] == current[i].toUpperCase()) {\n                    need += current[i];\n                }\n            }\n\n            let ok = true;\n            if (need.length < pat.length) {\n                continue;\n            }\n\n            for (let i = 0; i < pat.length; i++) {\n                if (need[i] != pat[i]) {\n                    ok = false;\n                    break;\n                }\n            }\n\n            if (ok) {\n                ans.push(current);\n            }\n        }\n        return ans;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}