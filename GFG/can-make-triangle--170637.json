{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 710019,
            "title": "Can Make Triangle",
            "titleSlug": "can-make-triangle--170637",
            "content": "<p><span style=\"font-size:18px\">Given an array&nbsp;<strong>A[]&nbsp;</strong>of&nbsp;<strong>N&nbsp;</strong>elements, You&#39;d like to know how many triangles can be formed with side lengths equal to adjacent elements from A[].</span></p>\r\n\r\n<p><span style=\"font-size:18px\">Construct an array of integers of length N - 2 where ith element is equal to <strong>1</strong> if it is possible to form a triangle with side lengths<strong> A[i]</strong>, <strong>A[i+1]</strong>, and <strong>A[i+2]</strong>. otherwise <strong>0</strong>.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Note: </strong>A triangle can be formed with side lengths a, b and c if a+b&gt;c and a+c&gt;b and b+c&gt;a.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 4\r\nA[] = {1, 2, 2, 4}\r\n<strong>Output:</strong>\r\n1 0\r\n<strong>Explanation:</strong>\r\noutput[0] = 1 because we can form a \r\ntriangle with side lengths 1,2 and 2.\r\noutput[1] = 0 because 2+2<u>&lt;</u>4 so, we cannot \r\nform a triangle with side lengths 2,2 and 4.</span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input: </strong>\r\nN = 5\r\nA[] = {2, 10, 2, 10, 2}\r\n<strong>Output:</strong>\r\n0 1 0\r\n<strong>Explanation:\r\n</strong>output[0] = 0 because 2+2<u>&lt;</u>10 so, we cannot\r\nform a triangle with side lengths 2, 10 and 2.<strong> </strong>\r\noutput[1] = 1 we can form a triangle with \r\nside lengths 10,2 and 10.<strong> \r\n</strong>output[1] = 0 because 2+2<u>&lt;</u>10 so, we can\r\nform a triangle with side lengths 2, 10 and 2.<strong> </strong></span>\r\n</pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou dont need to read input or print anything. Your task is to c</span><span style=\"font-size:18px\">omplete the function&nbsp;<strong>canMakeTriangle()&nbsp;</strong>which takes the array&nbsp;<strong>A</strong>&nbsp;and the integer&nbsp;<strong>N&nbsp;</strong>as the input parameters, and returns the array of answers.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br />\r\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n3 &le; N&nbsp;&le; 10<sup>5&nbsp;</sup><br />\r\n1 &le; arr[i] &le; 10<sup>9</sup></span></p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an array `A` of `N` elements, determine how many triangles can be formed using adjacent elements as side lengths.\n\nConstruct an array of integers of length `N - 2` where the `i`th element is `1` if a triangle can be formed with side lengths `A[i]`, `A[i+1]`, and `A[i+2]`, and `0` otherwise.\n\nA triangle can be formed with side lengths `a`, `b`, and `c` if `a + b > c`, `a + c > b`, and `b + c > a`.",
                "constraints": [
                    "3 <= N <= 10^5",
                    "1 <= arr[i] <= 10^9"
                ],
                "testcases": [
                    {
                        "input": "N = 4\nA[] = {1, 2, 2, 4}",
                        "output": "1 0",
                        "explanation": "For the first triangle (1, 2, 2), 1 + 2 > 2, 1 + 2 > 2, and 2 + 2 > 1.  Therefore, a triangle can be formed, resulting in a 1.\nFor the second triangle (2, 2, 4), 2 + 2 is not greater than 4. Therefore, a triangle cannot be formed, resulting in a 0."
                    },
                    {
                        "input": "N = 5\nA[] = {2, 10, 2, 10, 2}",
                        "output": "0 1 0",
                        "explanation": "For the first triangle (2, 10, 2), 2 + 2 is not greater than 10. Therefore, a triangle cannot be formed, resulting in a 0.\nFor the second triangle (10, 2, 10), 10 + 2 > 10, 10 + 10 > 2, and 2 + 10 > 10. Therefore, a triangle can be formed, resulting in a 1.\nFor the third triangle (2, 10, 2), 2 + 2 is not greater than 10. Therefore, a triangle cannot be formed, resulting in a 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">For three adjacent elements, check can we make triangle or not.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Geometric",
                "slug": "geometric"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\nclass Solution{\n    public:\n    \n    //Function to check if triangles can be formed using a given array of numbers.\n    vector<int> canMakeTriangle(vector<int> A, int N){\n        vector<int> ans;\n        \n        //iterating over the array up to the third last element.\n        for(int i=0;i+2<A.size();i++){\n            int x=A[i];\n            int y=A[i+1];\n            int z=A[i+2];\n            \n            //checking if the given three numbers can form a triangle.\n            //if yes, then adding 1 to the answer vector, else adding 0.\n            if(x+y>z&&x+z>y&&y+z>x)\n                ans.push_back(1);\n            else\n                ans.push_back(0);\n        }\n        \n        //returning the vector of answers.\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\nclass Solution \r\n{ \r\n    //Function to check if three sides can form a triangle\r\n    int[] canMakeTriangle(int A[], int N) \r\n    { \r\n        //Creating an array to store the results\r\n        int ans[] = new int[N-2];\r\n        //Iterating over the array to check for each set of three sides\r\n        for(int i=0;i+2<N;i++){\r\n            int x=A[i];\r\n            int y=A[i+1];\r\n            int z=A[i+2];\r\n            //Checking if the sum of any two sides is greater than the third side\r\n            //If true, then the sides can form a triangle\r\n            if(x+y>z&&x+z>y&&y+z>x)\r\n                ans[i]=1;\r\n            //If false, then the sides cannot form a triangle\r\n            else\r\n                ans[i]=0;\r\n        }\r\n        //Returning the results\r\n        return ans;\r\n    }\r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\r\nclass Solution:\r\n    def canMakeTriangle(self, A, N): \r\n        ans=[]\r\n        for i in range(N-2):\r\n            #taking three consecutive elements as sides of a triangle\r\n            x=A[i]\r\n            y=A[i+1]\r\n            z=A[i+2]\r\n            #checking if the three sides can form a triangle\r\n            if x+y>z and x+z>y and y+z>x:\r\n                ans.append(1)\r\n            else:\r\n                ans.append(0)\r\n        return ans",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}