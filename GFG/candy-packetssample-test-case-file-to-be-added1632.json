{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703803,
            "title": "Candy Packets",
            "titleSlug": "candy-packetssample-test-case-file-to-be-added1632",
            "content": "<p><span style=\"font-size:18px\">Given a number <strong>N</strong> denoting candies. Find how many packets&nbsp;are needed to contain the number if 1st packet&nbsp;can contain 1 candy, 2nd packet&nbsp;can contain 2 candies, 3rd packet&nbsp;can contain 4 candies and so on.</span></p>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 2\r\n<strong>Output:</strong>\r\n2\r\n<strong>Explanation:</strong>\r\nPut 1 candy in first packet.\r\nPut 1 candy in second packet.\r\nThus two,packets are required.</span></pre>\r\n\r\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\r\n\r\n<pre>\r\n<span style=\"font-size:18px\"><strong>Input:</strong>\r\nN = 8\r\n<strong>Output:</strong>\r\n4\r\n<strong>Explanation:</strong>\r\nPut 1 candy in first packet.\r\nPut 2 candies in second packet.\r\nPut 4 candies in third packet.\r\nPut 1 candy in fourth packet.\r\nThus 4 packets are required.</span></pre>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br />\r\nYou don&#39;t need to read input or print anything.Your Task is to complete the function <strong>countPackets()</strong> which takes a number N as input parameter and returns the number of packets required to contain it.</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>O(logN)<br />\r\n<strong>Expected Auxillary Space:</strong>O(1)</span></p>\r\n\r\n<p><br />\r\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br />\r\n1&lt;= N &lt;= 10<sup>18</sup></span></p>\r\n\r\n<p>&nbsp;</p>\r\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a number N representing the total number of candies, determine the minimum number of packets needed to contain all the candies. The packets have capacities that follow a power of 2 sequence: the first packet can hold 1 candy, the second can hold 2 candies, the third can hold 4 candies, and so on.",
                "constraints": [
                    "1 <= N <= 10^18"
                ],
                "testcases": [
                    {
                        "input": "2",
                        "output": "2",
                        "explanation": "One candy is placed in the first packet, and the remaining one candy is placed in the second packet. Hence, two packets are required."
                    },
                    {
                        "input": "8",
                        "output": "4",
                        "explanation": "One candy goes into the first packet, two candies into the second packet, four candies into the third packet, and the remaining one candy into the fourth packet. In total, four packets are needed."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Correlate with Binary representation of a Number.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Mathematical",
                "slug": "mathematical"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "// backend complete function template for C++\nclass Solution{\n    public:\n    // function to count the number of packets\n    int countPackets(long long N){\n        int c=0;\n        \n        // repeatedly divide N by 2 until N becomes 0\n        while(N)\n        {\n            N/=2;\n            c++;\n        }\n        \n        // return the count of packets\n        return c;\n    }\n};",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "// function to count number of packets in N\nclass Solution{\n    // function to count packets\n    static long countPackets(long N){\n        int c=0; // initialize counter to 0\n        \n        // loop until N becomes 0\n        while(N>0){\n            N/=2; // divide N by 2 in each iteration\n            c++; // increment counter by 1\n        }\n        return c; // return the final count\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\nclass Solution:\n    #Function to count the number of packets required.\n    def countPackets(self,N):\n        c=0\n        #while loop to divide N by 2 until N becomes 0.\n        while(N):\n            N//=2\n            #incrementing count by 1 for each division.\n            c+=1\n        #returning the count as the number of packets required.\n        return c",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//User function Template for javascript\n/**\n * @param {number} N\n * @returns {number}\n*/\n\nclass Solution {\n    //Function to count packets.\n    countPackets(N) {\n        let c=0;\n        //while loop to divide N by 2 until N becomes 0.\n        while(N) {\n            N = Math.floor(N/2);\n            //incrementing count by 1 for each division.\n            c+=1;\n        }\n        //returning the count as the number of packets required.\n        return c;\n    }\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}