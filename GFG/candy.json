{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 712427,
            "title": "Candy",
            "titleSlug": "candy",
            "content": "<p><span >There are&nbsp;<strong>n</strong>&nbsp;children standing in a line. Each child is assigned a rating value given in the integer array&nbsp;<strong>arr[]</strong>.&nbsp;You are giving candies to these children subjected to the following requirements:</span></p>\n<ul>\n<li><span >Each child must have at <strong>least one candy</strong>.</span></li>\n<li><span >Children with a <strong>higher rating</strong> than their neighbors get <strong>more candies</strong> than <strong>their neighbors</strong>.</span></li>\n</ul>\n<p><span >Return the&nbsp;<strong>minimum</strong> number of candies you need to have to distribute.<br /></span></p>\n<p><span ><strong>Note:</strong> The answer will always fit into a 32-bit integer.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #222426; --darkreader-inline-border-top: #3e4446; --darkreader-inline-border-right: #3e4446; --darkreader-inline-border-bottom: #3e4446; --darkreader-inline-border-left: #3e4446;\"><span ><strong>Input: </strong>arr[] = [1, 0, 2]<br /><strong>Output: </strong>5<br /><strong>Explanation: </strong>Children at index 0 and 2 will get 2 candies each as their rating is higher than index 1, and index 1 will get 1 candy. Thus total candies = 2 + 1 + 2 = 5.</span></pre>\n<pre style=\"background: #eeeeee; border: 1px solid #cccccc; padding: 5px 10px; --darkreader-inline-bgimage: initial; --darkreader-inline-bgcolor: #222426; --darkreader-inline-border-top: #3e4446; --darkreader-inline-border-right: #3e4446; --darkreader-inline-border-bottom: #3e4446; --darkreader-inline-border-left: #3e4446;\"><span ><strong>Input: </strong>arr[] = [1, 2, 2]<br /><strong>Output: </strong>4<br /><strong>Explanation:</strong> You can allocate to the first, second and third child with 1, 2, 1 candies respectively. The third child gets 1 candy because it satisfies the above two conditions.</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>5</sup><br />0 &le; arr[i] &le; 10<sup>9</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Hard",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 14pt;\">Iterate twice over the ratings array, first from left end and then from right end.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Greedy",
                "slug": "greedy"
            },
            {
                "name": "Divide and Conquer",
                "slug": "divide-and-conquer"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\nclass Solution {\n  public:\n\n    int minCandy(vector<int> &arr) {\n        int n = arr.size();\n\n        // create variable to store count\n        // of candies, initlize it with n\n        int total = n;\n        int i = 1;\n\n        // Traverse from left to right\n        while (i < n) {\n\n            // if rating of ith children is\n            // equal to the previous children\n            if (arr[i] == arr[i - 1]) {\n                i++;\n                continue;\n            }\n\n            // to find the increasing sequence\n            int peak = 0;\n            while (i < n && arr[i] > arr[i - 1]) {\n                peak++;\n                total += peak;\n                i++;\n            }\n\n            if (i == n) {\n                return total;\n            }\n\n            // to find the decreasing sequence\n            int valley = 0;\n            while (i < n && arr[i] < arr[i - 1]) {\n                valley++;\n                total += valley;\n                i++;\n            }\n\n            // remove the extra candy added twice\n            total -= min(peak, valley);\n        }\n\n        return total;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "\nclass Solution {\n    static int minCandy(int arr[]) {\n        int n = arr.length;\n\n        // create variable to store count\n        // of candies, initialize it with n\n        int total = n;\n        int i = 1;\n\n        // Traverse from left to right\n        while (i < n) {\n\n            // if rating of ith children is\n            // equal to the previous children\n            if (arr[i] == arr[i - 1]) {\n                i++;\n                continue;\n            }\n\n            // to find the increasing sequence\n            int peak = 0;\n            while (i < n && arr[i] > arr[i - 1]) {\n                peak++;\n                total += peak;\n                i++;\n            }\n\n            if (i == n) {\n                return total;\n            }\n\n            // to find the decreasing sequence\n            int valley = 0;\n            while (i < n && arr[i] < arr[i - 1]) {\n                valley++;\n                total += valley;\n                i++;\n            }\n\n            // remove the extra candy added twice\n            total -= Math.min(peak, valley);\n        }\n\n        return total;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\n\n\nclass Solution:\n\n    def minCandy(self, arr):\n        n = len(arr)\n\n        # create variable to store count\n        # of candies, initialize it with n\n        total = n\n        i = 1\n\n        # Traverse from left to right\n        while i < n:\n\n            # if rating of ith children is\n            # equal to the previous children\n            if arr[i] == arr[i - 1]:\n                i += 1\n                continue\n\n            # to find the increasing sequence\n            peak = 0\n            while i < n and arr[i] > arr[i - 1]:\n                peak += 1\n                total += peak\n                i += 1\n\n            if i == n:\n                return total\n\n            # to find the decreasing sequence\n            valley = 0\n            while i < n and arr[i] < arr[i - 1]:\n                valley += 1\n                total += valley\n                i += 1\n\n            # remove the extra candy added twice\n            total -= min(peak, valley)\n\n        return total\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "// User function Template for C#\n\nclass Solution {\n    public int minCandy(int[] arr) {\n        int n = arr.Length;\n\n        // create variable to store count\n        // of candies, initialize it with n\n        int total = n;\n        int i = 1;\n\n        // Traverse from left to right\n        while (i < n) {\n\n            // if rating of ith children is\n            // equal to the previous children\n            if (arr[i] == arr[i - 1]) {\n                i++;\n                continue;\n            }\n\n            // to find the increasing sequence\n            int peak = 0;\n            while (i < n && arr[i] > arr[i - 1]) {\n                peak++;\n                total += peak;\n                i++;\n            }\n\n            if (i == n) {\n                return total;\n            }\n\n            // to find the decreasing sequence\n            int valley = 0;\n            while (i < n && arr[i] < arr[i - 1]) {\n                valley++;\n                total += valley;\n                i++;\n            }\n\n            // remove the extra candy added twice\n            total -= Math.Min(peak, valley);\n        }\n\n        return total;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "// User function Template for javascript\n/**\n * @param {number[]} arr\n * @returns {number}\n */\n\nclass Solution {\n\n    minCandy(arr) {\n        const n = arr.length;\n\n        // create variable to store count\n        // of candies, initialize it with n\n        let total = n;\n        let i = 1;\n\n        // Traverse from left to right\n        while (i < n) {\n\n            // if rating of ith children is\n            // equal to the previous children\n            if (arr[i] === arr[i - 1]) {\n                i++;\n                continue;\n            }\n\n            // to find the increasing sequence\n            let peak = 0;\n            while (i < n && arr[i] > arr[i - 1]) {\n                peak++;\n                total += peak;\n                i++;\n            }\n\n            if (i === n) {\n                return total;\n            }\n\n            // to find the decreasing sequence\n            let valley = 0;\n            while (i < n && arr[i] < arr[i - 1]) {\n                valley++;\n                total += valley;\n                i++;\n            }\n\n            // remove the extra candy added twice\n            total -= Math.min(peak, valley);\n        }\n\n        return total;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}