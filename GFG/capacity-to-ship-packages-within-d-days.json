{
  "status": 200,
  "message": "Question Data fetched successfully",
  "data": {
    "question": {
      "questionFrontendId": 706275,
      "title": "Capacity To Ship Packages Within D Days",
      "titleSlug": "capacity-to-ship-packages-within-d-days",
      "content": "<p><span style=\"font-size: 18px;\">Given an array <strong>arr[]</strong> of <strong>n</strong> weights. Find the least weight capacity of a boat to ship all weights within <strong>d</strong> days.<br />The&nbsp;<code>i<sup>th</sup></code>&nbsp;weight&nbsp;has a weight of&nbsp;<code>arr[i]</code>. Each day, we load the boat with weights given by arr[i].We may not load more weight than the maximum weight capacity of the ship.</span><br /><br /><span style=\"font-size: 18px;\"><strong>Note: </strong>You have to load weights on the boat in the given order.</span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>n = 3\narr[] = {1, 2, 1}\nd = 2\n<strong>Output:\n</strong>3\n<strong>Explanation:</strong>\nWe can ship the weights in 2 days\nin the following way:-\nDay 1- 1,2\nDay 2- 1</span>\n</pre>\n<div><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></div>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>n = 3\narr[] = {9, 8, 10}\nd = 3\n<strong>Output:</strong>\n10</span>\n<span style=\"font-size: 18px;\"><strong>Explanation:</strong>\nWe can ship the weights in 3 days\nin the following way:-\nDay 1- 9\nDay 2- 8\nDay 3- 10</span>\n</pre>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:&nbsp;&nbsp;</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>leastWeightCapacity()</strong> which takes 2 integers n, and d, and an array arr of size n as input and returns the least weight capacity of the boat required.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n*log(Sum of weights - max(list of weights))<br /><strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; d &le; n &le; 10<sup>5</sup><br />1 &le; arr[i] &le; 10<sup>5</sup></span></p>",
      "isPaidOnly": false,
      "difficulty": "Medium",
      "likes": "NA",
      "dislikes": "NA",
      "rephrased": {
        "body": "Given an array `arr[]` of `n` weights, determine the minimum weight capacity required for a boat to ship all weights within `d` days. The `i-th` weight is `arr[i]`.  Weights must be loaded onto the boat in the order they appear in `arr[]`.  The boat's capacity cannot be exceeded on any given day.",
        "constraints": ["1 <= d <= n <= 10^5", "1 <= arr[i] <= 10^5"],
        "testcases": [
          {
            "input": "n = 3\narr[] = {1, 2, 1}\nd = 2",
            "output": "3",
            "explanation": "The weights can be shipped in 2 days with a capacity of 3. Day 1: weights 1 and 2 (total 3). Day 2: weight 1."
          },
          {
            "input": "n = 3\narr[] = {9, 8, 10}\nd = 3",
            "output": "10",
            "explanation": "The weights can be shipped in 3 days with a capacity of 10. Day 1: weight 9. Day 2: weight 8. Day 3: weight 10."
          }
        ]
      }
    },
    "similar": [],
    "hints": [
      "<p><span style=\"font-size: 18px;\">The required answer will always lie between the max of weights and the sum of weights.</span></p>",
      "<p><span style=\"font-size: 18px;\">Use Binary Search to solve the problem.</span></p>"
    ],
    "relatedTopics": [
      {
        "name": "Arrays",
        "slug": "arrays"
      },
      {
        "name": "Binary Search",
        "slug": "binary-search"
      },
      {
        "name": "Data Structures",
        "slug": "data-structures"
      },
      {
        "name": "Algorithms",
        "slug": "algorithms"
      }
    ],
    "companies": ["amazon", "de-shaw"],
    "solutions": [
      {
        "lang": "C++",
        "full_func": "//Back-end complete function Template for C++\n\nclass Solution {\n  public:\n    // Function to find the least weight capacity of a truck.\n    int leastWeightCapacity(int arr[], int N, int D) {\n        int left = -1, right = 0;\n\n        // calculating the sum of all weights and finding the maximum weight.\n        for (int i = 0; i < N; i++) {\n            right += arr[i];\n            left = max(left, arr[i]);\n        }\n\n        // performing binary search to find the least weight capacity.\n        while (left < right) {\n            int mid = (left + right) / 2, need = 1, cur = 0;\n\n            // iterating over the weights and checking if the current truck\n            // can carry up to the mid weight.\n            for (int i = 0; i < N && need <= D; cur += arr[i++])\n                if (cur + arr[i] > mid)\n\n                    // if the current truck cannot carry the current weight,\n                    // we need to use a new truck and reset the current weight.\n                    cur = 0, need++;\n\n            // if the number of trucks needed exceeds the given limit,\n            // we need to increase the weight capacity and update left.\n            if (need > D)\n                left = mid + 1;\n\n            // if the number of trucks needed is within the given limit,\n            // we can try to reduce the weight capacity and update right.\n            else\n                right = mid;\n        }\n        // returning the least weight capacity.\n        return left;\n    }\n};",
        "lang_text": "cpp"
      },
      {
        "lang": "Java",
        "full_func": null,
        "lang_text": "java"
      },
      {
        "lang": "Python3",
        "full_func": null,
        "lang_text": "py"
      },
      {
        "lang": "C#",
        "full_func": null,
        "lang_text": "csharp"
      },
      {
        "lang": "Javascript",
        "full_func": "// User function Template for javascript\n\n/**\n * @param {number[]} arr\n * @param {number} N\n * @param {number} D\n * @returns {number}\n */\n\nclass Solution {\n    leastWeightCapacity(arr, N, D) {\n        let left = -1, right = 0;\n\n        for (let i = 0; i < N; i++) {\n            right += arr[i];\n            left = Math.max(left, arr[i]);\n        }\n\n        while (left < right) {\n            let mid = Math.floor((left + right) / 2), need = 1, cur = 0;\n            for (let i = 0; i < N && need <= D; cur += arr[i++])\n                if (cur + arr[i] > mid) cur = 0, need++;\n            if (need > D)\n                left = mid + 1;\n            else\n                right = mid;\n        }\n        return left;\n    }\n}",
        "lang_text": "javascript"
      }
    ],
    "platform": "GFG"
  }
}
