{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704864,
            "title": "Card Rotation",
            "titleSlug": "card-rotation5834",
            "content": "<p><span >Given a sorted deck of cards numbered <strong>1 to n.</strong><br /><strong>1)</strong> We <strong>pick up 1 card</strong> and put it on the back of the deck.<br /><strong>2)</strong> Now, we<strong> pick up another card</strong>, it turns out to be card number 1, we put it outside the deck.<br /><strong>3) </strong>Now we <strong>pick up 2 cards </strong>and put it on the back of the deck.<br /><strong>4)</strong> Now, we <strong>pick up another card</strong> and it turns out to be card numbered 2, we put it outside the deck.</span></p>\n<p><span >We perform this step until the last card.<br />If such an arrangement of decks is possible, output the arrangement, if it is not possible for a particular value of N&nbsp;then output -1.</span></p>\n<p><span ><strong>Examples:</strong></span></p>\n<pre><span ><strong>Input</strong>: n= 4\n<strong>Output: </strong>[2, 1, 4, 3]\n<strong>Explanation</strong>:\nWe initially have [2, 1, 4, 3]\nStep1, we move the first card to the end. Deck now is: [1, 4, 3, 2]\nStep2, we get 1. Hence we remove it. Deck now is: [4, 3, 2]\nStep3, we move the 2 front cards one by one to the end  ([4, 3, 2] -&gt; [3, 2, 4] -&gt; [2, 4, 3]) Deck now is: [2, 4, 3].\nStep4, we get 2. Hence we remove it. Deck now is: [4, 3]\nStep5, the following sequence follows: [4, 3] -&gt; [3, 4] -&gt; [4, 3] -&gt; [3, 4]. Deck now is: [3, 4] </span><br /><span >Step6, we get 3. Hence we remove it. Deck now is: [4] Finally, we're left with a single card and thus, we stop. </span></pre>\n<pre><span ><strong>Input : </strong>n= 3<strong><br />Output:</strong> [3, 1, 2]<strong><br />Explanation:<br /></strong>We intially have [3, 1, 2]<br />Step1, we move the first card to the end .Deck now is : [1, 2, 3]<br />Step2, we get 1.Hence we remove it .Deck now is : [2,3]<br />Step3, we move the 2 front card on e by one to the end ([2,3] -&gt; [3,2] -&gt; [2,3]) Deck now is : [2, 3].<br />Step4, we get 2 .Hence we remove it. Deck now is : [3] Finally, we're left with single card and thus ,we stop .</span></pre>\n<p><span ><strong><br />Constraints:</strong><br />1 &le; n &le; 1000</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">use queue</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "permutation",
                "slug": "permutation"
            },
            {
                "name": "Combinatorial",
                "slug": "combinatorial"
            },
            {
                "name": "Queue",
                "slug": "queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to rotate the elements in a queue and assign numbers to them\n    vector<int> rotation(int n) {\n        // Vector to store the assigned numbers\n        vector<int> ans;\n        int i;\n        // Array to keep track of assigned numbers\n        int arr[1010] = {0};\n        // Two queues for rotation\n        queue<int> q, q1;\n\n        // Pushing elements into the queue\n        for (i = 0; i < n; i++)\n            q.push(i);\n        // Initializing counter\n        i = 1;\n\n        while (!q.empty()) {\n            int j = 0;\n            // Rotating the elements i times\n            while (j < i) {\n                int x = q.front();\n                q.pop();\n                q.push(x);\n                j++;\n            }\n            int x = q.front();\n            // Checking if number has already been assigned\n            if (arr[x] != 0) {\n                // If assigned, pushing -1 to ans vector\n                ans.push_back(-1);\n                return ans;\n            }\n            q.pop();\n            // Assigning number i to element x\n            arr[x] = i;\n            i++;\n        }\n        for (i = 0; i < n; i++) {\n            ans.push_back(arr[i]);\n        }\n        return ans;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    // Function to rotate the elements in a queue and assign numbers to them\n    public ArrayList<Integer> rotation(int n) {\n        ArrayList<Integer> ans = new ArrayList<>();\n        // Array to keep track of assigned numbers\n        int[] arr = new int[1010];\n        // Queue for rotation\n        Queue<Integer> q = new LinkedList<>();\n\n        // Pushing elements into the queue\n        for (int i = 0; i < n; i++) {\n            q.add(i);\n        }\n        // Initializing counter\n        int i = 1;\n\n        while (!q.isEmpty()) {\n            int j = 0;\n            // Rotating the elements i times\n            while (j < i) {\n                int x = q.poll();\n                q.add(x);\n                j++;\n            }\n            // Checking if number has already been assigned\n            int x = q.poll();\n            if (arr[x] != 0) {\n                // If assigned, pushing -1 to ans list\n                ans.add(-1);\n                return ans;\n            }\n            // Assigning number i to element x\n            arr[x] = i;\n            i++;\n        }\n\n        for (i = 0; i < n; i++) {\n            ans.add(arr[i]);\n        }\n        return ans;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "import sys\nfrom collections import deque\n\n\nclass Solution:\n\n    def rotation(self, n):\n        # List to store the assigned numbers\n        ans = []\n        # Array to keep track of assigned numbers\n        arr = [0] * 1010\n        # Queue for rotation\n        q = deque()\n\n        # Pushing elements into the queue\n        for i in range(n):\n            q.append(i)\n        # Initializing counter\n        i = 1\n\n        while q:\n            j = 0\n            # Rotating the elements i times\n            while j < i:\n                x = q.popleft()\n                q.append(x)\n                j += 1\n            x = q.popleft()\n            # Checking if number has already been assigned\n            if arr[x] != 0:\n                # If assigned, pushing -1 to ans list\n                ans.append(-1)\n                return ans\n                # Assigning number i to element\n            arr[x] = i\n            i += 1\n\n        for i in range(n):\n            ans.append(arr[i])\n\n        return ans\n",
                "lang_text": "python3"
            },
            {
                "lang": "C#",
                "full_func": "class Solution {\n    // Complete this function\n    public List<int> rotation(int n) {\n        List<int> ans = new List<int>(); // List to store the assigned numbers\n        int[] arr = new int[1010];       // Array to keep track of assigned numbers\n\n        Queue<int> q = new Queue<int>(); // Queue for rotation\n\n        // Pushing elements into the queue\n        for (int i = 0; i < n; i++) q.Enqueue(i);\n\n        int counter = 1; // Initializing counter\n\n        while (q.Count > 0) {\n            int k = 0;\n            // Rotating the elements counter times\n            while (k < counter) {\n                int element = q.Peek();\n                q.Dequeue();\n                q.Enqueue(element);\n                k++;\n            }\n            int elementToAssign = q.Peek();\n            // Checking if number has already been assigned\n            if (arr[elementToAssign] != 0) {\n                ans.Add(-1); // If assigned, adding -1 to ans list\n                return ans;\n            }\n            q.Dequeue();\n            arr[elementToAssign] = counter; // Assigning number counter to element\n            counter++;                      // Incrementing counter\n        }\n        for (int i = 0; i < n; i++) {\n            ans.Add(arr[i]); // Adding assigned numbers to ans list\n        }\n        return ans; // Returning ans list\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    rotation(n) {\n        let ans = [];\n        let arr = new Array(1010).fill(0);\n        let q = [];\n\n        // Pushing elements into the queue\n        for (let i = 0; i < n; i++) {\n            q.push(i);\n        }\n        // Initializing counter\n        let i = 1;\n\n        while (q.length > 0) {\n            let j = 0;\n            // Rotating the elements i times\n            while (j < i) {\n                let x = q.shift();\n                q.push(x);\n                j++;\n            }\n            let x = q.shift();\n            // Checking if number has already been assigned\n            if (arr[x] !== 0) {\n                // If assigned, pushing -1 to ans list\n                ans.push(-1);\n                return ans;\n            }\n            // Assigning number i to element x\n            arr[x] = i;\n            i++;\n        }\n\n        for (let i = 0; i < n; i++) {\n            ans.push(arr[i]);\n        }\n        return ans;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}