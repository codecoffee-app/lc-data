{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704730,
            "title": "Carry counter",
            "titleSlug": "carry-counter0937",
            "content": "<p><span style=\"font-size:18px\">Given two numbers in the form of Strings. Find the count of carries in their addition.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>N = </strong>&quot;34&quot;, <strong>M = </strong>&quot;25&quot;</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">0</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">There are no carries when N and M\nare added.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\"><strong>N = </strong>&quot;4634&quot;, <strong>M = </strong>&quot;1757&quot;</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">2</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">There are 2 carries when N and M\nare added.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>getCarries()</strong> which takes two Strings N and M as input and returns an integer denoting the answer.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(|N|)<br />\n<strong>Expected Auxiliary Space:</strong> O(|N|)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br />\n<span style=\"font-size:18px\">1 &lt;= |N|,|M| &lt;= 10<sup>5</sup></span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given two numbers represented as strings, N and M, determine the number of carry operations required when adding them together.",
                "constraints": [
                    "1 <= |N|, |M| <= 10^5"
                ],
                "testcases": [
                    {
                        "input": "N = \"34\", M = \"25\"",
                        "output": "0",
                        "explanation": "Adding 34 and 25 results in 59. No carry operations are needed in any digit's place."
                    },
                    {
                        "input": "N = \"4634\", M = \"1757\"",
                        "output": "2",
                        "explanation": "Adding 4634 and 1757 results in 6391. There's a carry from 3+5, and from 6+7."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Count all the carries from the end of the string.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Numbers",
                "slug": "numbers"
            }
        ],
        "companies": [
            "microsoft"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    //Function to calculate the number of carries in addition of two numbers.\n    int getCarries(string N , string M) {\n        \n        int i=0, j=0, r=0, c=0, sum;\n        \n        int p = N.length(); //length of first number\n        int q = M.length(); //length of second number\n        \n        //iterating through both numbers\n        while(i<p && j<q)\n        {\n            sum = (N[p-i-1]-'0') + (M[q-j-1]-'0') + r; //adding digits and carry\n            r = sum-10; //calculating new carry value\n            if(r>=0)\n            {\n                r=1; //setting carry value\n                c++; //increasing carry count\n                i++; //moving to next digit in first number\n                j++; //moving to next digit in second number\n            }\n            else if(r<0)\n            {\n                r=0; //setting carry value\n                i++; //moving to next digit in first number\n                j++; //moving to next digit in second number\n            }\n        }\n        \n        //if one number has more digits than the other\n        if(i < p)\n        {\n            while(i < p)\n            {\n                sum = (N[p-i-1]-'0') + r; //adding digit and carry\n                r = sum-10; //calculating new carry value\n                if(r >= 0)\n                {\n                    r=1; //setting carry value\n                    c++; //increasing carry count\n                    i++; //moving to next digit in first number\n                    \n                }\n                else if(r < 0)\n                    break;\n            }\n        }\n        else if(j < q)\n        {\n            while(j < q)\n            {\n                sum = (M[q-j-1]-'0') + r; //adding digit and carry\n                r = sum - 10; //calculating new carry value\n                if(r >= 0)\n                {\n                    r=1; //setting carry value\n                    c++; //increasing carry count\n                    j++; //moving to next digit in second number\n                }\n                else if(r<0)\n                    break;\n            }\n        }\n        else if(sum==10 && r==0 && i>p && j>q)\n            c++; //if sum is 10 and remaining conditions met, increase carry count\n            \n        return c; //returning number of carries\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "class Solution\n{\n    public int getCarries(string N, string M)\n    {\n        int i = 0, j = 0, r = 0, c = 0, sum = 0;\n\n        int p = N.Length; //length of first number\n        int q = M.Length; //length of second number\n\n        //iterating through both numbers\n        while (i < p && j < q)\n        {\n            sum = (N[p - i - 1] - '0') + (M[q - j - 1] - '0') + r; //adding digits and carry\n            r = sum / 10; //calculating new carry value\n            if (r > 0)\n            {\n                c++; //increasing carry count\n            }\n            i++; //moving to next digit in first number\n            j++; //moving to next digit in second number\n        }\n\n        //if one number has more digits than the other\n        if (i < p)\n        {\n            while (i < p)\n            {\n                sum = (N[p - i - 1] - '0') + r; //adding digit and carry\n                r = sum / 10; //calculating new carry value\n                if (r > 0)\n                {\n                    c++; //increasing carry count\n                }\n                i++; //moving to next digit in first number\n            }\n        }\n        else if (j < q)\n        {\n            while (j < q)\n            {\n                sum = (M[q - j - 1] - '0') + r; //adding digit and carry\n                r = sum / 10; //calculating new carry value\n                if (r > 0)\n                {\n                    c++; //increasing carry count\n                }\n                j++; //moving to next digit in second number\n            }\n        }\n        else if (sum >= 10 && r == 0 && i > p && j > q)\n            c++; //if sum is 10 and remaining conditions met, increase carry count\n\n        return c; //returning number of carries\n    }\n}",
                "lang_text": "csharp"
            }
        ],
        "platform": "GFG"
    }
}