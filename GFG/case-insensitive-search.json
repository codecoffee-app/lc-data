{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 881355,
            "title": "Case Insensitive Search",
            "titleSlug": "case-insensitive-search",
            "content": "<p><span >Given two strings, one is a text string&nbsp;<strong>txt</strong>&nbsp;and the other is a pattern string&nbsp;<strong>pat</strong>. The task is to print the indexes of&nbsp;<strong>all the occurrences</strong> of the pattern string in the text string, ignoring the letter case (uppercase and lowercase characters are considered same)</span><span >. Use</span><strong >&nbsp;0-based</strong><span >&nbsp;indexing while returning the indices.&nbsp;</span></p>\n<p><span >Note:<strong>&nbsp;</strong>Return an empty list in case of no occurrences of pattern.<br /></span></p>\n<p><span ><strong>Examples :</strong></span></p>\n<pre><span style=\"font-size: 18.6667px;\"><strong>Input: </strong>txt = \"aBcAb\", pat = \"aB\"<strong>\nOutput: </strong>[0, 3]<strong>\nExplanation: </strong>The string \"ab\" can match with any of the following strings: \"ab\", \"Ab\", \"aB\" and \"AB\". So, pat occurs twice in txt, first occurrence starts from index 0 and second from index 3.</span></pre>\n<pre><span style=\"font-size: 18.6667px;\"><strong>Input: </strong>txt = \"aAAa\", pat = \"Aa\"<strong>\nOutput: </strong>[0, 1, 2]<strong>\nExplanation: </strong>The string \"Aa\" can match with any of the following strings: \"aa\", \"aA\", \"Aa\" and \"AA\". So, pat occurs thrice in txt, first occurrence starts from index 0, second from index 2 and third from index 3.</span></pre>\n<pre><span style=\"font-size: 18.6667px;\"><strong>Input: </strong>txt = \"abba\", pat = \"aC\"<strong>\nOutput:</strong> []<strong>\nExplanation:</strong> There is no occurrence of \"aC\" in \"abba\".</span></pre>\n<p><span ><strong>Constraints:</strong><br />1 &le; txt.size() &le; 10<sup>5</sup><br />1 &le; pat.size() &lt; txt.size()<br />Both the strings consist of uppercase or lowercase English alphabets.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Brute force would be to check all the substrings of length pat.size() in txt. But, this will be O(txt.size()*pat.size()) in the worst case.</span><br style=\"font-size: 18px;\" /><span style=\"font-size: 18px;\">You can even solve it in O(txt.size()). Use the KMP Pattern Searching algorithm</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Pattern Searching",
                "slug": "pattern-searching"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    void constructLps(string &pat, vector<int> &lps) {\n\n        // len stores the length of longest prefix which\n        // is also a suffix for the previous index\n        int len = 0;\n\n        // lps[0] is always 0\n        lps[0] = 0;\n\n        int i = 1;\n        while (i < pat.length()) {\n\n            // If characters match, increment the size of lps\n            if (tolower(pat[i]) == tolower(pat[len])) {\n                len++;\n                lps[i] = len;\n                i++;\n            }\n\n            // If there is a mismatch\n            else {\n                if (len != 0) {\n\n                    // Update len to the previous lps value\n                    // to avoid reduntant comparisons\n                    len = lps[len - 1];\n                } else {\n\n                    // If no matching prefix found, set lps[i] to 0\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n    }\n\n    vector<int> search(string &pat, string &txt) {\n        int n = txt.length();\n        int m = pat.length();\n\n        vector<int> lps(m);\n        vector<int> res;\n\n        constructLps(pat, lps);\n\n        // i and j, for traversing the text and pattern\n        int i = 0;\n        int j = 0;\n\n        while (i < n) {\n\n            // If characters match, move both pointers forward\n            if (tolower(txt[i]) == tolower(pat[j])) {\n                i++;\n                j++;\n\n                // If the entire pattern is matched\n                // store the start index in result\n                if (j == m) {\n                    res.push_back(i - j);\n\n                    // Use LPS of previous index to\n                    // skip unnecessary comparisons\n                    j = lps[j - 1];\n                }\n            }\n\n            // If there is a mismatch\n            else {\n\n                // Use lps value of previous index\n                // to avoid redundant comparisons\n                if (j != 0)\n                    j = lps[j - 1];\n                else\n                    i++;\n            }\n        }\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    // Function to construct the LPS array\n    static void constructLps(String pat, int[] lps) {\n\n        // len stores the length of longest prefix which\n        // is also a suffix for the previous index\n        int len = 0;\n\n        // lps[0] is always 0\n        lps[0] = 0;\n\n        int i = 1;\n        while (i < pat.length()) {\n\n            // If characters match, increment the size of lps\n            if (Character.toLowerCase(pat.charAt(i)) ==\n                Character.toLowerCase(pat.charAt(len))) {\n                len++;\n                lps[i] = len;\n                i++;\n            } else {\n                if (len != 0) {\n\n                    // Update len to the previous lps value to avoid\n                    // redundant comparisons\n                    len = lps[len - 1];\n                } else {\n\n                    // If no matching prefix found, set lps[i] to 0\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n    }\n\n    static ArrayList<Integer> search(String pat, String txt) {\n        int n = txt.length();\n        int m = pat.length();\n\n        int[] lps = new int[m];\n        ArrayList<Integer> res = new ArrayList<>();\n\n        // Construct the LPS array\n        constructLps(pat, lps);\n\n        // i and j for traversing the text and pattern\n        int i = 0;\n        int j = 0;\n\n        while (i < n) {\n\n            // If characters match, move both pointers forward\n            if (Character.toLowerCase(txt.charAt(i)) ==\n                Character.toLowerCase(pat.charAt(j))) {\n                i++;\n                j++;\n\n                // If the entire pattern is matched, store the start index in result\n                if (j == m) {\n                    res.add(i - j);\n\n                    // Use LPS of previous index to skip unnecessary comparisons\n                    j = lps[j - 1];\n                }\n            } else {\n\n                // If there is a mismatch\n                // Use LPS value of previous index to avoid redundant comparisons\n                if (j != 0)\n                    j = lps[j - 1];\n                else\n                    i++;\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def constructLps(self, pat, lps):\n\n        # len_ stores the length of longest prefix which\n        # is also a suffix for the previous index\n        len_ = 0\n\n        # lps[0] is always 0\n        lps[0] = 0\n\n        i = 1\n        while i < len(pat):\n\n            # If characters match, increment the size of lps\n            if pat[i].lower() == pat[len_].lower():\n                len_ += 1\n                lps[i] = len_\n                i += 1\n\n            # If there is a mismatch\n            else:\n                if len_ != 0:\n\n                    # Update len to the previous lps value\n                    # to avoid redundant comparisons\n                    len_ = lps[len_ - 1]\n                else:\n\n                    # If no matching prefix found, set lps[i] to 0\n                    lps[i] = 0\n                    i += 1\n\n    def search(self, pat, txt):\n        n = len(txt)\n        m = len(pat)\n\n        lps = [0] * m\n        res = []\n\n        self.constructLps(pat, lps)\n\n        # i and j for traversing the text and pattern\n        i = 0\n        j = 0\n\n        while i < n:\n\n            # If characters match, move both pointers forward\n            if txt[i].lower() == pat[j].lower():\n                i += 1\n                j += 1\n\n                # If the entire pattern is matched\n                # store the start index in result\n                if j == m:\n                    res.append(i - j)\n\n                    # Use LPS of previous index to\n                    # skip unnecessary comparisons\n                    j = lps[j - 1]\n            else:\n\n                # Use lps value of previous index\n                # to avoid redundant comparisons\n                if j != 0:\n                    j = lps[j - 1]\n                else:\n                    i += 1\n        return res\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    constructLps(pat, lps) {\n\n        // len stores the length of longest prefix which\n        // is also a suffix for the previous index\n        let len = 0;\n\n        // lps[0] is always 0\n        lps[0] = 0;\n\n        let i = 1;\n        while (i < pat.length) {\n\n            // If characters match, increment the size of lps\n            if (pat[i].toLowerCase() === pat[len].toLowerCase()) {\n                len++;\n                lps[i] = len;\n                i++;\n            }\n\n            // If there is a mismatch\n            else {\n                if (len !== 0) {\n\n                    // Update len to the previous lps value\n                    // to avoid redundant comparisons\n                    len = lps[len - 1];\n                } else {\n\n                    // If no matching prefix found, set lps[i] to 0\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n    }\n\n    search(pat, txt) {\n        let n = txt.length;\n        let m = pat.length;\n\n        let lps = new Array(m);\n        let res = [];\n\n        this.constructLps(pat, lps);\n\n        // i and j, for traversing the text and pattern\n        let i = 0;\n        let j = 0;\n\n        while (i < n) {\n\n            // If characters match, move both pointers forward\n            if (txt[i].toLowerCase() === pat[j].toLowerCase()) {\n                i++;\n                j++;\n\n                // If the entire pattern is matched\n                // store the start index in result\n                if (j === m) {\n                    res.push(i - j);\n\n                    // Use LPS of previous index to\n                    // skip unnecessary comparisons\n                    j = lps[j - 1];\n                }\n            }\n\n            // If there is a mismatch\n            else {\n\n                // Use lps value of previous index\n                // to avoid redundant comparisons\n                if (j !== 0)\n                    j = lps[j - 1];\n                else\n                    i++;\n            }\n        }\n        return res;\n    }\n}",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}