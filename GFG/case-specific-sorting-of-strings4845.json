{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 701302,
            "title": "Case-specific Sorting of Strings",
            "titleSlug": "case-specific-sorting-of-strings4845",
            "content": "<p><span style=\"font-size: 18px;\">Given a string <strong>str </strong>consisting of <strong>only</strong>&nbsp;<strong>uppercase </strong>and <strong>lowercase </strong>characters. The task is to <strong>sort </strong>uppercase and lowercase letters <strong>separately </strong>such that if the i<sub>th</sub> place in the original string had an Uppercase character then it should not have a lowercase character after being sorted and vice versa.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Examples : <br /></span></strong></p>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">n = 12, str = defRTSersUXI\n<strong>Output: </strong>deeIRSfrsTUX<strong>\nExplanation: </strong>Sorted form of given string with the same case of character as that in original string is deeIRSfrsTUX</span>\n</pre>\n<pre><strong><span style=\"font-size: 18px;\">Input: </span></strong><span style=\"font-size: 18px;\">n = 6, str = srbDKi\n<strong>Output: </strong>birDKs<strong>\nExplanation: </strong>Sorted form of given string with the same case of character will result in output as birDKs.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You only need to complete the function <strong>caseSort </strong>that takes&nbsp;a string str and length of the string n and&nbsp;<strong>returns </strong>sorted <strong>string</strong>.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(nlog(n)).<br /><strong>Expected Auxiliary Space:&nbsp;</strong>O(n).</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong> </span><br /><span style=\"font-size: 18px;\">1 &le; n &le; 10<sup>5</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string `str` consisting of only uppercase and lowercase characters, sort the uppercase and lowercase letters separately. The sorted string must maintain the original case of each character. That is, if the i-th character in the original string was uppercase, the i-th character in the sorted string must also be uppercase, and similarly for lowercase characters.",
                "constraints": [
                    "1 <= n <= 10^5, where n is the length of the string str."
                ],
                "testcases": [
                    {
                        "input": "n = 12, str = defRTSersUXI",
                        "output": "deeIRSfrsTUX",
                        "explanation": "The lowercase letters (defers) are sorted to deefrs, and uppercase letters (RTSUXI) are sorted to IRSUTX. These are then placed back in the original order with the same cases to form deeIRSfrsTUX."
                    },
                    {
                        "input": "n = 6, str = srbDKi",
                        "output": "birDKs",
                        "explanation": "The lowercase letters (srbKi) are sorted to birks.  These are then placed back in the original order with the same cases to form birDKs."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>The idea is to store lower case characters and upper case characters in two different arrays and sort both of the arrays., then use the sorted arrays to get the sorted string.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "//Back-end complete function Template for C++\r\n\r\nclass Solution\r\n{\r\n    public:\r\n    //Function to perform case-specific sorting of strings.\r\n    string caseSort(string str, int n)\r\n    {\r\n        vector<char> vecA,veca;\r\n        \r\n        //storing uppercase and lowercase characters in two separate lists.\r\n\t\tfor(int i=0;i<n;i++)\r\n\t\t{\r\n\t\t\tif(int(str[i])<97)\r\n\t\t\tvecA.push_back(str[i]);\r\n\t\t\telse\r\n\t\t\tveca.push_back(str[i]);\r\n\t\t}\r\n\t\t\r\n\t\t//sorting both the lists.\r\n\t\tsort(vecA.begin(),vecA.end());\r\n\t\tsort(veca.begin(),veca.end());\r\n\t\t\r\n\t\tint vcA=0,vca=0;\r\n\t\tstring answer=\"\";\r\n\t\t\r\n\t\t//iterating over the given string.\r\n\t\tfor(int i=0;i<n;i++)\r\n\t\t{\r\n\t\t    //if current character is in uppercase then we pick character from  \r\n\t\t    //the list containing uppercase characters and add it to result.\r\n\t\t\tif(int(str[i])<97)\r\n\t\t\tanswer+=vecA[vcA++];\r\n\t\t\t\r\n\t\t\t//else we pick the character from the sorted list  \r\n\t\t    //containing lowercase characters and add it to result.\r\n\t\t\telse\r\n\t\t\tanswer+=veca[vca++];\r\n\t\t}\r\n\t\t//returning the result.\r\n\t\treturn answer;\r\n    }\r\n};\r\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\r\n\r\nclass Solution\r\n{\r\n    //Function to perform case-specific sorting of strings.\r\n    public static String caseSort(String str) \r\n    {\r\n        char[] mixChArr = str.toCharArray();\r\n        \r\n        int lIdx = 0;\r\n        int uIdx = 0;\r\n        \r\n        //counting number of lowercase and uppercase characters.\r\n        for (char ch: mixChArr) \r\n        {\r\n            if (Character.isUpperCase(ch))\r\n                uIdx++;\r\n            else\r\n                lIdx++;\r\n        }\r\n        \r\n        int upperSize = uIdx;\r\n        int lowerSize = lIdx;\r\n        \r\n        char[] lowerChArr = new char[lowerSize];\r\n        char[] upperChArr = new char[upperSize];\r\n        \r\n        lIdx = 0;\r\n        uIdx = 0;\r\n        \r\n        //storing uppercase and lowercase characters in two separate lists.\r\n        for (char ch: mixChArr) \r\n        {\r\n            if (Character.isUpperCase(ch))\r\n                upperChArr[uIdx++] = ch;\r\n            else\r\n                lowerChArr[lIdx++] = ch;\r\n        };\r\n\r\n        //sorting both the lists.\r\n        Arrays.sort(upperChArr);\r\n        Arrays.sort(lowerChArr);\r\n        \r\n        lIdx = 0;\r\n        uIdx = 0;\r\n        \r\n        //iterating over the given string.\r\n        for (int mIdx = 0; mIdx < mixChArr.length; mIdx++) \r\n        {\r\n            //if current character is in uppercase then we pick character from  \r\n\t\t    //the list containing uppercase characters and add it to result.\r\n            if (Character.isUpperCase(mixChArr[mIdx])) \r\n            {\r\n                mixChArr[mIdx] = upperChArr[uIdx++];\r\n            }\r\n            \r\n            //else we pick the character from the sorted list  \r\n\t\t    //containing lowercase characters and add it to result.\r\n            else\r\n            {\r\n                mixChArr[mIdx] = lowerChArr[lIdx++];\r\n            }\r\n        }\r\n        String rtnStr = new String(mixChArr);\r\n        //returning the result.\r\n        return rtnStr;\r\n    }\r\n    \r\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\r\n\r\nclass Solution:\r\n    \r\n    #Function to perform case-specific sorting of strings.\r\n    def caseSort(self,s,n):\r\n        \r\n        upper=[]\r\n        lower=[] \r\n    \r\n        #storing uppercase and lowercase characters in two separate lists.\r\n        for char in s:\r\n            if(self.Case(char)):\r\n                upper.append(char)\r\n            else:\r\n                lower.append(char)\r\n                \r\n        #sorting both the lists.\r\n        upper.sort(reverse=True)\r\n        lower.sort(reverse=True)\r\n    \r\n        sorted_string=\"\"\r\n        \r\n        #iterating over the given string.\r\n        for char in s:\r\n            \r\n            #if current character is in uppercase then we pick character from  \r\n\t\t    #the list containing uppercase characters and add it to result.\r\n            if(self.Case(char)):\r\n                sorted_string+=upper.pop()\r\n                \r\n            #else we pick the character from the sorted list  \r\n\t\t    #containing lowercase characters and add it to result.\r\n            else:\r\n                sorted_string+=lower.pop()\r\n                \r\n        #returning the result.        \r\n        return sorted_string\r\n     \r\n    #Function to return 1 if character is in upper case and 0 for lower case.   \r\n    def Case(self,c):\r\n        \r\n        if(ord(c)<=ord('Z') and ord(c)>=ord('A')):\r\n            return 1\r\n        return 0",
                "lang_text": "py"
            },
            "javascript": {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\r\n\r\nclass Solution {\r\n    caseSort(str, n) {\r\n        let vecA = [], veca = [];\r\n        \r\n        //storing uppercase and lowercase characters in two separate lists.\r\n\t\tfor(let i=0;i<n;i++)\r\n\t\t{\r\n\t\t\tif(`${str.charCodeAt(i)}` < 97)\r\n\t\t\tvecA.push(str[i]);\r\n\t\t\telse\r\n\t\t\tveca.push(str[i]);\r\n\t\t}\r\n\t\t\r\n\t\t//sorting both the lists.\r\n\t\tvecA.sort();\r\n\t\tveca.sort();\r\n\t\t\r\n\t\tlet vcA=0,vca=0;\r\n\t\tlet answer=\"\";\r\n\t\t\r\n\t\t//iterating over the given string.\r\n\t\tfor(let i=0;i<n;i++)\r\n\t\t{\r\n\t\t    //if current character is in uppercase then we pick character from  \r\n\t\t    //the list containing uppercase characters and add it to result.\r\n\t\t\tif(`${str.charCodeAt(i)}` < 97)\r\n\t\t\tanswer+=vecA[vcA++];\r\n\t\t\t\r\n\t\t\t//else we pick the character from the sorted list  \r\n\t\t    //containing lowercase characters and add it to result.\r\n\t\t\telse\r\n\t\t\tanswer+=veca[vca++];\r\n\t\t}\r\n\t\t//returning the result.\r\n\t\treturn answer;\r\n    }\r\n}",
                "lang_text": "javascript"
            }
        },
        "platform": "GFG"
    }
}