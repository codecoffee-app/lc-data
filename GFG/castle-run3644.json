{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 705646,
            "title": "Traverse All Edges And Vertices",
            "titleSlug": "castle-run3644",
            "content": "<p><span style=\"font-size: 18px;\">You are presented with an <strong>undirected connected graph </strong>consisting of <strong>n</strong> vertices and connections between them represented by an <strong>adjacency matrix</strong>. Your objective is to determine whether it is possible to start traversing from a node, <strong>x</strong>, and return to it after traversing all the vertices <strong>at least once</strong>, using each edge <strong>exactly once</strong>.</span></p>\n<p><strong><span style=\"font-size: 18px;\">Example 1:</span></strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: <br /></strong>paths = 0 1 1 1 1<br />  &nbsp; &nbsp; &nbsp;&nbsp;1 0 0 1 0<br />  &nbsp; &nbsp;  &nbsp;1 0 0 1 0<br />  &nbsp; &nbsp;  &nbsp;1 1 1 0 1<br />  &nbsp; &nbsp;  &nbsp;1 0 0 1 0<br /></span><span style=\"font-size: 18px;\"><strong>Output: </strong>1<br /></span><span style=\"font-size: 18px;\"><strong>Explanation: <br /></strong>One can visit the vertices in the following way:\n1-&gt;3-&gt;4-&gt;5-&gt;1-&gt;4-&gt;2-&gt;1 (assuming 1-based indexing)\nHere all the vertices has been visited and all\npaths are used exactly once.<br /></span></pre>\n<p style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; font-size: medium; white-space: normal;\"><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span ><strong>Input: <br /></strong>paths = 0 1 1 0<br />\\t  1 0 1 1<br />\\t  1 1 0 0<br />\\t  0 1 0 0\n<strong>Output: </strong>0\n<strong>Explanation: <br /></strong>There exists no such vertex from which all the <br />vertices could be visited and all edges are used <br />exactly once.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read or print anything. Your task is to complete the function&nbsp;<strong>isPossible()&nbsp;</strong>which takes adjacency matrix <strong>paths</strong> as an input parameter and returns <strong>1 </strong>if it is possible </span><span style=\"font-size: 18px;\">to start traversing from a node,&nbsp;</span><strong style=\"font-size: 18px;\">x</strong><span style=\"font-size: 18px;\">, and come back to it after traversing all the vertices&nbsp;</span><strong style=\"font-size: 18px;\">at least once</strong><span style=\"font-size: 18px;\">, using each edge&nbsp;</span><strong style=\"font-size: 18px;\">exactly once</strong><span style=\"font-size: 18px;\">.</span></p>\n<p>&nbsp;<span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n<sup>2</sup>)<br /><strong>Expected Space Compelxity:&nbsp;</strong>O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &lt;= n &lt;= 100<br />0 &lt;= paths[i][j] &lt;= 1<br /><strong>Note:</strong>&nbsp;</span><span style=\"font-size: 18px;\">paths[i][j] = 0 where </span><span style=\"font-size: 18px;\">i == j or there exists no edge between i and j. paths[i][j] = 1 means there is a path between i to j.</span></p>",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an undirected connected graph represented by an adjacency matrix, determine if it is possible to start at a node, traverse all vertices at least once, use each edge exactly once, and return to the starting node. This is equivalent to checking if an Eulerian circuit exists in the graph.",
                "constraints": [
                    "1 <= n <= 100",
                    "0 <= paths[i][j] <= 1",
                    "paths[i][j] = 0 where i == j or there exists no edge between i and j.",
                    "paths[i][j] = 1 means there is a path between i to j."
                ],
                "testcases": [
                    {
                        "input": "paths = \n0 1 1 1 1\n1 0 0 1 0\n1 0 0 1 0\n1 1 1 0 1\n1 0 0 1 0",
                        "output": "1",
                        "explanation": "An Eulerian circuit exists. A possible traversal is: 1 -> 3 -> 4 -> 5 -> 1 -> 4 -> 2 -> 1 (assuming 1-based indexing)."
                    },
                    {
                        "input": "paths = \n0 1 1 0\n1 0 1 1\n1 1 0 0\n0 1 0 0",
                        "output": "0",
                        "explanation": "An Eulerian circuit does not exist."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 18px;\">Use the concept of Eulerian Path</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Graph",
                "slug": "graph"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "\r\nclass Solution {\r\npublic:\r\n\tint isPossible(vector<vector<int>> paths) {\r\n\t\tbool f = true;\r\n\t\t// Loop through each row in the paths matrix\r\n\t\tfor (int i = 0; i < paths.size(); i++) {\r\n\t\t\tint cntOfOne = 0;\r\n\t\t\t// Count the number of 1s in the current row\r\n\t\t\tfor (int j = 0; j < paths[i].size(); j++) {\r\n\t\t\t\tcntOfOne += paths[i][j] == 1;\r\n\t\t\t}\r\n\t\t\t// Check if the count of 1s is odd or zero\r\n\t\t\tif (cntOfOne & 1 or !cntOfOne)\r\n\t\t\t\tf = false;\r\n\t\t}\r\n\t\t// If there's only one node, return 1\r\n\t\tif (paths.size() == 1)\r\n\t\t\treturn 1;\r\n\t\t// Otherwise, return the flag\r\n\t\treturn f;\r\n\t}\r\n};\r\n",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\r\n    public int isPossible(int[][] paths) {\r\n        boolean f = true;\r\n        // Loop through each row in the paths matrix\r\n        for (int i = 0; i < paths.length; i++) {\r\n            int cntOfOne = 0;\r\n            // Count the number of 1s in the current row\r\n            for (int j = 0; j < paths[i].length; j++) {\r\n                cntOfOne += paths[i][j] == 1 ? 1 : 0;\r\n            }\r\n            // Check if the count of 1s is odd or zero\r\n            if ((cntOfOne & 1) != 0 || cntOfOne == 0) {\r\n                f = false;\r\n            }\r\n        }\r\n        // If there's only one node, return 1\r\n        if (paths.length == 1) {\r\n            return 1;\r\n        }\r\n        // Otherwise, return 1 if flag is true, else 0\r\n        return f ? 1 : 0;\r\n    }\r\n}\r\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def isPossible(self, paths):\n        f = True\n        # Loop through each row in the paths matrix\n        for i in range(len(paths)):\n            cnt_of_one = 0\n            # Count the number of 1s in the current row\n            for j in range(len(paths[i])):\n                cnt_of_one += paths[i][j] == 1\n            # Check if the count of 1s is odd or zero\n            if cnt_of_one & 1 or not cnt_of_one:\n                f = False\n        # If there's only one node, return 1\n        if len(paths) == 1:\n            return 1\n        # Otherwise, return the flag as an integer\n        return int(f)\n",
                "lang_text": "py"
            },
            {
                "lang": "C#",
                "full_func": "//User function Template for C#\n\nclass Solution\n{\n    //Complete this function\n    public int isPossible(List<List<int>> paths)\n    {\n        bool f = true;\n        for(int i = 0; i < paths.Count; i++){\n            int cntOfOne = 0;\n            for(int j = 0; j < paths[i].Count; j++){\n                cntOfOne += paths[i][j] == 1 ? 1 : 0;\n            }\n            if((cntOfOne & 1) != 0 || cntOfOne == 0)\n                f = false;\n        }\n        if(paths.Count == 1)\n            return 1;\n        return f ? 1 : 0;\n    }\n}",
                "lang_text": "csharp"
            },
            {
                "lang": "Javascript",
                "full_func": null,
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}