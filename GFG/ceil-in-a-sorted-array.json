{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 889109,
            "title": "Ceil in a Sorted Array",
            "titleSlug": "ceil-in-a-sorted-array",
            "content": "<p><span style=\"font-size: 18px;\">Given a sorted array&nbsp;<strong>arr[]&nbsp;</strong>and an integer&nbsp;<strong>x</strong>, find the index (0-based) of the smallest element in arr[] that is greater than or equal to x. This element is called the&nbsp;<strong>ceil</strong> of x. If such an element does not exist, return -1.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note:</strong>&nbsp;In case of multiple occurrences of ceil of x, return the index of the first occurrence.</span></p>\n<p><strong style=\"font-size: 18px;\">Examples</strong></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 8, 10, 11, 12, 19], x = 5\n<strong>Output: </strong>2<strong>\nExplanation: </strong>Smallest number greater than 5 is 8, whose index is 2.</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>arr[] = [1, 2, 8, 10, 11, 12, 19], x = 20\n<strong>Output: </strong>-1<strong>\nExplanation: </strong></span><span style=\"font-size: 18px;\">No element greater than 20 is found. So output is -1.</span></pre>\n<pre><span ><strong>Input: </strong>arr[] = [1, 1, 2, 8, 10, 11, 12, 19], x = 0\n<strong>Output: </strong>0<strong>\nExplanation: </strong>Smallest number greater than 0 is 1, whose indices are 0 and 1. The index of the first occurrence is 0.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1 &le; arr.size() &le; 10<sup>6</sup><br />1 &le; arr[i] &le; 10<sup>6</sup><br />0 &le; x &le;<sup>&nbsp;</sup>arr[n-1]</span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a sorted array `arr[]` and an integer `x`, find the index (0-based) of the smallest element in `arr[]` that is greater than or equal to `x`. This element is called the ceil of `x`. If such an element does not exist, return -1. In case of multiple occurrences of the ceil of `x`, return the index of the first occurrence.",
                "constraints": [
                    "1 <= arr.size() <= 10^6",
                    "1 <= arr[i] <= 10^6",
                    "0 <= x <= arr[n-1]"
                ],
                "testcases": [
                    {
                        "input": "arr[] = [1, 2, 8, 10, 11, 12, 19], x = 5",
                        "output": "2",
                        "explanation": "The smallest element in the array greater than or equal to 5 is 8, which is located at index 2."
                    },
                    {
                        "input": "arr[] = [1, 2, 8, 10, 11, 12, 19], x = 20",
                        "output": "-1",
                        "explanation": "There is no element in the array greater than or equal to 20."
                    },
                    {
                        "input": "arr[] = [1, 1, 2, 8, 10, 11, 12, 19], x = 0",
                        "output": "0",
                        "explanation": "The smallest element in the array greater than or equal to 0 is 1. The first occurence of 1 is at index 0."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size: 16px;\">Use binary search to locate the smallest element greater than or equal to x.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "Binary Search",
                "slug": "binary-search"
            },
            {
                "name": "Sorting",
                "slug": "sorting"
            },
            {
                "name": "Searching",
                "slug": "searching"
            },
            {
                "name": "Algorithms",
                "slug": "algorithms"
            }
        ],
        "companies": [
            "amazon"
        ],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "class Solution {\n  public:\n    // Function to find the ceil of a given element in a sorted array\n    int findCeil(vector<int>& arr, int x) {\n        int n = arr.size();\n        int lo = 0, hi = n - 1, res = -1;\n\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (arr[mid] < x) {\n                lo = mid + 1;\n            } else {\n                res = mid;\n                hi = mid - 1;\n            }\n        }\n\n        return res;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution {\n    // Function to find the ceil of a given element in a sorted array\n    public int findCeil(int[] arr, int x) {\n        int n = arr.length;\n        int lo = 0, hi = n - 1, res = -1;\n\n        while (lo <= hi) {\n            int mid = lo + (hi - lo) / 2;\n            if (arr[mid] < x) {\n                lo = mid + 1;\n            } else {\n                res = mid;\n                hi = mid - 1;\n            }\n        }\n\n        return res;\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    # Function to find the ceil of a given element in a sorted array\n    def findCeil(self, arr, x):\n        n = len(arr)\n        lo, hi = 0, n - 1\n        res = -1\n\n        while lo <= hi:\n            mid = lo + (hi - lo) // 2\n            if arr[mid] < x:\n                lo = mid + 1\n            else:\n                res = mid\n                hi = mid - 1\n\n        return res",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "//Back-end complete function Template for javascript\nclass Solution {\n    // Function to find the ceil of a given element in a sorted array\n    findCeil(arr, x) {\n        let n = arr.length;\n        let lo = 0, hi = n - 1;\n        let res = -1;\n\n        while (lo <= hi) {\n            let mid = lo + Math.floor((hi - lo) / 2);\n            if (arr[mid] < x) {\n                lo = mid + 1;\n            } else {\n                res = mid;\n                hi = mid - 1;\n            }\n        }\n\n        return res;\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}