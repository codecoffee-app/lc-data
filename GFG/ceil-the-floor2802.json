{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703852,
            "title": "Ceil The Floor",
            "titleSlug": "ceil-the-floor2802",
            "content": "<p style=\"text-align: left;\"><span style=\"font-size: 18px;\">Given an unsorted array <strong>arr[]</strong> of integers and an integer <strong>x</strong>, find the floor and ceiling of <strong>x</strong> in <strong>arr[]</strong>.</span></p>\n<blockquote>\n<p><span style=\"font-size: 18px;\"><strong>Floor</strong>&nbsp;of <strong>x</strong> is the largest element which is smaller than or equal to <strong>x</strong>. Floor of <strong>x</strong>&nbsp;doesn&rsquo;t exist if <strong>x</strong> is smaller than smallest element of <strong>arr[]</strong>.<br /></span><span style=\"font-size: 18px;\"><strong>Ceil</strong>&nbsp;of <strong>x</strong>&nbsp;is the smallest element which is greater than or equal to <strong>x</strong>. Ceil of <strong>x</strong>&nbsp;doesn&rsquo;t exist if <strong>x</strong> is greater than greatest element of <strong>arr[]</strong>.</span></p>\n</blockquote>\n<p><span style=\"font-size: 18px;\">Return an array of integers denoting the <code>[floor, ceil]</code>. Return <code>-1</code> for floor or ceiling if the floor or ceiling is not present.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Examples:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>x = 7 , arr[] = [5, 6, 8, 9, 6, 5, 5, 6]\n<strong>Output:</strong> 6, 8\n<strong>Explanation: </strong>Floor of 7 is 6 and ceil of 7 is 8.\n</span></pre>\n<pre><span style=\"font-size: 18px;\"><strong>Input: </strong>x = 10 , arr[] = [5, 6, 8, 8, 6, 5, 5, 6]\n<strong>Output:</strong> 8, -1\n<strong>Explanation: </strong>Floor of 10 is 8 but ceil of 10 is not possible.\n</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(n)<br /><strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints :</strong><br />1 &le; arr.size &le; 10<sup>5</sup><br />1 &le; arr[i], x &le; 10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given an unsorted array `arr[]` of integers and an integer `x`, find the floor and ceiling of `x` in `arr[]`.\n\n*   **Floor:** The floor of `x` is the largest element in `arr[]` that is smaller than or equal to `x`. If `x` is smaller than the smallest element in `arr[]`, the floor does not exist.\n*   **Ceiling:** The ceiling of `x` is the smallest element in `arr[]` that is greater than or equal to `x`. If `x` is greater than the largest element in `arr[]`, the ceiling does not exist.\n\nReturn an array containing the floor and ceiling `[floor, ceil]`. If either the floor or ceiling does not exist, return `-1` in its place.",
                "constraints": [
                    "1 <= arr.length <= 10^5",
                    "1 <= arr[i], x <= 10^6"
                ],
                "testcases": [
                    {
                        "input": "x = 7 , arr[] = [5, 6, 8, 9, 6, 5, 5, 6]",
                        "output": "[6, 8]",
                        "explanation": "The largest element in the array that is less than or equal to 7 is 6 (the floor). The smallest element in the array that is greater than or equal to 7 is 8 (the ceiling)."
                    },
                    {
                        "input": "x = 10 , arr[] = [5, 6, 8, 8, 6, 5, 5, 6]",
                        "output": "[8, -1]",
                        "explanation": "The largest element in the array that is less than or equal to 10 is 8 (the floor). There is no element in the array that is greater than or equal to 10, so the ceiling does not exist (-1)."
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p>Iterate over the array, if ith element is greater than X and closed to X, the update the answer. Same logic for floor.</p>"
        ],
        "relatedTopics": [
            {
                "name": "Arrays",
                "slug": "arrays"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "// Function to get floor and ceil of a given value in an array\nclass Solution {\n  public:\n    vector<int> getFloorAndCeil(int x, vector<int> arr) {\n        int n = arr.size();\n        int floorDiff = INT_MAX, ceilDiff = INT_MAX;\n        int ceilVal = -1, floorVal = -1;\n\n        // Looping through the array to find the floor and ceil of x\n        for (int i = 0; i < n; i++) {\n            // Updating the ceil if the current element is greater than or equal to x\n            // and the difference is smaller\n            if (arr[i] >= x && ceilDiff > (arr[i] - x)) {\n                ceilDiff = arr[i] - x;\n                ceilVal = arr[i];\n            }\n            // Updating the floor if the current element is smaller than or equal to x\n            // and the difference is smaller\n            if (arr[i] <= x && floorDiff > (x - arr[i])) {\n                floorDiff = x - arr[i];\n                floorVal = arr[i];\n            }\n        }\n\n        return {floorVal, ceilVal};\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": "class Solution {\n    public int[] getFloorAndCeil(int x, int[] arr) {\n        int floorVal = -1, ceilVal = -1;\n        int floorDiff = Integer.MAX_VALUE, ceilDiff = Integer.MAX_VALUE;\n\n        // Looping through the array to find the floor and ceil of x\n        for (int num : arr) {\n            // Updating the ceil if the current element is greater than or equal to x\n            // and the difference is smaller\n            if (num >= x && ceilDiff > (num - x)) {\n                ceilDiff = num - x;\n                ceilVal = num;\n            }\n            // Updating the floor if the current element is smaller than or equal to x\n            // and the difference is smaller\n            if (num <= x && floorDiff > (x - num)) {\n                floorDiff = x - num;\n                floorVal = num;\n            }\n        }\n\n        return new int[] {floorVal, ceilVal};\n    }\n}\n",
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": "class Solution:\n\n    def getFloorAndCeil(self, x: int, arr: list) -> list:\n        floor_val, ceil_val = -1, -1\n        floor_diff, ceil_diff = float('inf'), float('inf')\n\n        # Looping through the array to find the floor and ceil of x\n        for num in arr:\n            # Updating the ceil if the current element is greater than or equal to x and the difference is smaller\n            if num >= x and ceil_diff > (num - x):\n                ceil_diff = num - x\n                ceil_val = num\n            # Updating the floor if the current element is smaller than or equal to x and the difference is smaller\n            if num <= x and floor_diff > (x - num):\n                floor_diff = x - num\n                floor_val = num\n\n        return [floor_val, ceil_val]\n",
                "lang_text": "python3"
            },
            {
                "lang": "Javascript",
                "full_func": "class Solution {\n    getFloorAndCeil(x, arr) {\n        let floorVal = -1, ceilVal = -1;\n        let floorDiff = Infinity, ceilDiff = Infinity;\n\n        // Looping through the array to find the floor and ceil of x\n        for (const num of arr) {\n            // Updating the ceil if the current element is greater than or equal to x\n            // and the difference is smaller\n            if (num >= x && ceilDiff > (num - x)) {\n                ceilDiff = num - x;\n                ceilVal = num;\n            }\n            // Updating the floor if the current element is smaller than or equal to x\n            // and the difference is smaller\n            if (num <= x && floorDiff > (x - num)) {\n                floorDiff = x - num;\n                floorVal = num;\n            }\n        }\n\n        return [ floorVal, ceilVal ];\n    }\n}\n",
                "lang_text": "javascript"
            }
        ],
        "platform": "GFG"
    }
}