{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 704562,
            "title": "Cereals Box",
            "titleSlug": "cereals-box0644",
            "content": "<p><span style=\"font-size: 18px;\">You are given N numbers you can decrease each number by&nbsp;10 %&nbsp;or K kg whichever is more. If the number you choose is less than K&nbsp;you can make it&nbsp;zero. Your task is to minimize the sum of the number as small as possible by performing N operations only</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note: </strong>Final answer should be typecasted to the nearest integer smaller or equal to the value.</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 2\nk = 10\narr = 100 15<strong>\nOutput:\n</strong>95<strong>\nExplanation:</strong>\nYou will remove 10 from 100\nthen once again remove 10 \n90.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input:\n</strong>N = 2\nK = 10\narr = 90 100<strong>\nOutput\n</strong>170<strong>\nExplanation:\n</strong>remove 10 each time\nfrom either 100 or 90.</span>\n</pre>\n<p><br /><span style=\"font-size: 18px;\"><strong>Your Task:</strong><br />You don't need to read input or print anything. Your task is to complete the function <strong>minSum()</strong>&nbsp;which takes&nbsp;an array of integer,&nbsp;its size&nbsp;<strong>N, </strong>and an integer K<strong>&nbsp;</strong>&nbsp;as input parameters&nbsp;and returns an integer, minimum sum of all the elements after performing N operations.</span></p>\n<p><br /><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:</strong> O(log</span><span style=\"font-size: 15px;\"> </span><span style=\"font-size: 18px;\">N)</span><br /><strong>Expected Space Complexity:</strong><span style=\"font-size: 18px;\"> O(1)</span><br />&nbsp;</p>\n<p><span style=\"font-size: 18px;\"><strong>Constraints:</strong><br />1&lt;=N,K&lt;=10<sup>4</sup><br />1&lt;=A[i]&lt;=10<sup>6</sup></span></p>",
            "isPaidOnly": false,
            "difficulty": "Easy",
            "likes": "NA",
            "dislikes": "NA"
        },
        "similar": [],
        "hints": [],
        "relatedTopics": [
            {
                "name": "priority-queue",
                "slug": "priority-queue"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": [
            {
                "lang": "C++",
                "full_func": "//Back-end complete function template in C++\n\nclass Solution {\n  public:\n    // Function to find the minimum sum of elements after a sequence of operations.\n    long long minSum(vector<int> a, int N, int K) {\n        // creating a priority queue to store the elements in descending order.\n        priority_queue<double> pq;\n\n        // iterating over the vector and adding elements to the priority queue.\n        for (int i = 0; i < N; i++) {\n            pq.push(a[i]);\n        }\n\n        // variable to keep track of the current element.\n        int i = 0;\n\n        // iterating over the vector and performing operations until N elements are\n        // processed or priority queue is empty.\n        while (i < N && !pq.empty()) {\n            // getting the top element from the priority queue.\n            double r = pq.top();\n            pq.pop();\n\n            // if the element is greater than K, perform the operation.\n            if (r > K) {\n                // if the element minus K is greater than 10% of the element, subtract K\n                // from the element.\n                if (r * 0.1 < K)\n                    r = r - K;\n                // if the element minus K is less than or equal to 10% of the element,\n                // reduce the element by 10%.\n                else\n                    r = 0.9 * r;\n\n                // push the updated element back to the priority queue.\n                pq.push(r);\n            }\n            i++;\n        }\n\n        // variable to store the sum of the remaining elements.\n        double sum = 0.0;\n\n        // iterate over the priority queue and add the elements to the sum.\n        while (!pq.empty()) {\n            // get the top element from the priority queue.\n            double temp = pq.top();\n            // add the element to the sum.\n            sum += temp;\n            // remove the element from the priority queue.\n            pq.pop();\n        }\n        // return the sum as long long.\n        return (long long)sum;\n    }\n};",
                "lang_text": "cpp"
            },
            {
                "lang": "Java",
                "full_func": null,
                "lang_text": "java"
            },
            {
                "lang": "Python3",
                "full_func": null,
                "lang_text": "python3"
            }
        ],
        "platform": "GFG"
    }
}