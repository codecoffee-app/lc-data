{
    "status": 200,
    "message": "Question Data fetched successfully",
    "data": {
        "question": {
            "questionFrontendId": 703639,
            "title": "Challenge by Nikitasha",
            "titleSlug": "challenge-by-nikitasha3208",
            "content": "<p><span style=\"font-size:18px\">Given a string <strong>S</strong>&nbsp;of length <strong>L&nbsp;</strong>consisting of lower case alphabets only, and two integers <strong>Z</strong> and <strong>K</strong>. Find&nbsp;the maximum value of function <strong>F</strong>&nbsp;of&nbsp;all the substrings of <strong>S</strong>&nbsp;of length <strong>Z</strong>.&nbsp;<br />\nFunction <strong>F</strong> is calculated in this way:<br />\nF= S[0] * K<sup>0</sup>&nbsp;+ S[1] * K<sup>1</sup>&nbsp;+ S[2] * K<sup>2</sup>&nbsp;+ ...... S[Z-1] * K<sup>(Z-1)</sup>.<br />\nConsider the Ascii Values of alphabets while computing F:&nbsp;<br />\n&#39;a&#39;- &#39;z&#39;= 97 to 122.<br />\nSince value of F may be very large, take its modulo by 1e9+7.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre>\n<span style=\"font-size:18px\"><strong>Input:</strong>\nN = 9 \nZ = 6 \nK = 10\nS = nikitasha</span>\n<span style=\"font-size:18px\"><strong>Output:</strong>\n12597675</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong>\nF(<strong>&quot;nikita&quot;</strong>):\n&#39;n&#39;*10<sup>0</sup>+&#39;i&#39;*10<sup>1</sup>+&#39;k&#39;*10<sup>2</sup>+&#39;i&#39;*10<sup>3</sup>+\n&#39;t&#39;*10<sup>4</sup>+&#39;a&#39;*10<sup>5 </sup>= 10976860\nF(<strong>&quot;ikitas&quot;</strong>): \n&#39;i&#39;*10<sup>0</sup>+&#39;k&#39;*10<sup>1</sup>+&#39;i&#39;*10<sup>2</sup>+&#39;t&#39;*10<sup>3</sup>+\n&#39;a&#39;*10<sup>4</sup>+&#39;s&#39;*10<sup>5 </sup>= 12597675\nF(<strong>&quot;kitash&quot;</strong>):\n&#39;k&#39;*10<sup>0</sup>+&#39;i&#39;*10<sup>1</sup>+&#39;t&#39;*10<sup>2</sup>+&#39;a&#39;*10<sup>3</sup> +\n&#39;s&#39;*10<sup>4</sup>+&#39;h&#39;*10<sup>5</sup> = 11659757\nF(<strong>&quot;itasha&quot;</strong>):\n&#39;i&#39;*10<sup>0</sup>+&#39;t&#39;*10<sup>1</sup>+&#39;a&#39;*10<sup>2</sup>+&#39;s&#39;*10<sup>3</sup>+\n&#39;h&#39;*10<sup>4</sup>+&#39;a&#39;*10<sup>5</sup> = 10865965\n12597675 being the maximum.</span>\n</pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre>\n<strong><span style=\"font-size:18px\">Input:\n</span></strong><span style=\"font-size:18px\">N = 5 \nZ = 3 \nK = 9\nS = ecdrh</span>\n<strong><span style=\"font-size:18px\">Output:\n</span></strong><span style=\"font-size:18px\">10233</span>\n<strong><span style=\"font-size:18px\">Explanation:\n</span></strong><span style=\"font-size:18px\">F(&quot;ecd&quot;): \n&#39;e&#39;*9<sup>0</sup>+&#39;c&#39;*9<sup>1</sup>+&#39;d&#39;*9<sup>2</sup><sup> </sup>= 9092\nF(&quot;cdr&quot;): \n&#39;c&#39;*9<sup>0</sup>+&#39;d&#39;*9<sup>1</sup>+&#39;r&#39;*9<sup>2</sup><sup> </sup>= 10233 \nF(&quot;drh&quot;):\n&#39;d&#39;*9<sup>0</sup>+&#39;r&#39;*9<sup>1</sup>+&#39;h&#39;*9<sup>2</sup> = 9550\nSo, the maximum is 10233</span>\n</pre>\n\n<p><br />\n<span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br />\nYou don&#39;t need to read input or print anything. Your task is to complete the function <strong>findMaximum()</strong>&nbsp;which takes the string S, its size N, sub-string length Z and an integer K<strong>&nbsp;</strong>as input parameters&nbsp;and returns the maximum value of function F.<br />\n<br />\n<strong>Expected Time Complexity: </strong>O(NLog K)<br />\n<strong>Expected Space Complexity: </strong>O(1)</span><br />\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br />\n1&lt;=T&lt;=100<br />\n1&lt;=N&lt;=1000000<br />\n1&lt;=Z&lt;=N<br />\n1&lt;=K&lt;=2018</span></p>\n",
            "isPaidOnly": false,
            "difficulty": "Medium",
            "likes": "NA",
            "dislikes": "NA",
            "rephrased": {
                "body": "Given a string S of length L consisting of lowercase alphabets only, and two integers Z and K. Find the maximum value of function F of all the substrings of S of length Z.\n\nFunction F is calculated in this way:\nF = S[0] * K^0 + S[1] * K^1 + S[2] * K^2 + ...... S[Z-1] * K^(Z-1).\nConsider the ASCII values of alphabets while computing F: 'a' - 'z' = 97 to 122.\nSince the value of F may be very large, take its modulo by 10^9 + 7.",
                "constraints": [
                    "1 <= T <= 100",
                    "1 <= N <= 1000000",
                    "1 <= Z <= N",
                    "1 <= K <= 2018"
                ],
                "testcases": [
                    {
                        "input": "N = 9\nZ = 6\nK = 10\nS = nikitasha",
                        "output": "12597675",
                        "explanation": "The maximum F value is achieved for the substring \"ikitas\".  The calculation is as follows:\n'i'*10^0 + 'k'*10^1 + 'i'*10^2 + 't'*10^3 + 'a'*10^4 + 's'*10^5 = 12597675"
                    },
                    {
                        "input": "N = 5\nZ = 3\nK = 9\nS = ecdrh",
                        "output": "10233",
                        "explanation": "The maximum F value is achieved for the substring \"cdr\". The calculation is as follows:\n'c'*9^0 + 'd'*9^1 + 'r'*9^2 = 10233"
                    }
                ]
            }
        },
        "similar": [],
        "hints": [
            "<p><span style=\"font-size:18px\">Use the same logic as string hashing using the rolling function.</span></p>"
        ],
        "relatedTopics": [
            {
                "name": "number-theory",
                "slug": "number-theory"
            },
            {
                "name": "Strings",
                "slug": "strings"
            },
            {
                "name": "Modular Arithmetic",
                "slug": "modular-arithmetic"
            },
            {
                "name": "Data Structures",
                "slug": "data-structures"
            }
        ],
        "companies": [],
        "solutions": {
            "cpp": {
                "lang": "C++",
                "full_func": "class Solution{\npublic:\n    // To calculate exponentiation   \n    long long int fastpow(long long int base, long long int exp){\n        long long int res=1;\n        // MOD value\n        long long int MOD= 1000000007LL;\n        while(exp>0){\n            if(exp%2==1) \n                res=(res*base)%MOD;\n            base=(base*base)%MOD;\n            exp/=2;\n            \n        }\n        return res%MOD;\n    }\n    // To calculate the mod inverse of a\n    long long int modInverse(long long int a, long long int m){       \n        return fastpow(a, m-2);\n    }\n\n    long long int findMaximum(string S,int N,int Z,int K){\n        long long int term=0;\n        long long int MOD= 1000000007LL;\n        long long int AC=-1,previndx=0,prevval=0,i,j;\n        // Calculate the initial value of hash from 0:Z \n\t    for(i=0;i<Z;i++){ \n\t        term=(term%MOD+((S[i]*fastpow(K,i))%MOD)%MOD)%MOD;\n\t    }\n\t    prevval=term;\n\t    AC=max(term,AC);\n\t    string str=S;\n\t    // using sliding window to calculate \n\t    //the hash for every substring length Z\n\t    while(previndx!=S.length()-Z){\n\t        term-=str[previndx];\n\t\t\t//The next two lines are the updated lines\n            long long int INVMOD=modInverse(K, MOD);\n\t        term=(term* INVMOD%MOD)%MOD;\n\t        term=(term + ((str[previndx+Z]*fastpow(K,Z-1))%MOD ) %MOD)%MOD;\n\t        AC=max(AC,term);\n\t        previndx++;\n\t    }\n\t    return AC;\n        \n    }\n};\n\n\n\n\n\n\n\n\n\n\n",
                "lang_text": "cpp"
            },
            "java": {
                "lang": "Java",
                "full_func": "//Back-end complete function Template for Java\nclass Solution{\n    // To calculate exponentiation   \n    static long fastpow(long base, long exp){\n        long res=1;\n        // MOD value\n        long MOD= 1000000007L;\n        while(exp>0){\n            if(exp%2==1) \n                res=(res*base)%MOD;\n            base=(base*base)%MOD;\n            exp/=2;\n        }\n        return res%MOD;\n    }\n    // To calculate the mod inverse of a\n    static long modInverse(long a, long m){       \n        return fastpow(a, m-2);\n    }\n    static long findMaximum(long N, long Z, long K,String S){\n        long term=0;\n        long MOD= 1000000007L;\n        long AC=-1,prevval=0;\n        int previndx=0,i,j;\n        // Calculate the initial value of hash from 0:Z \n\t    for(i=0;i<Z;i++){ \n\t        term=(term%MOD+((S.charAt(i)*fastpow(K,i))%MOD)%MOD)%MOD;\n\t    }\n\t    prevval=term;\n\t    AC=Math.max(term,AC);\n\t    String str=S;\n\t    // using sliding window to calculate \n\t    // the hash for every substring length Z\n\t    while(previndx!=S.length()-Z){\n\t        term-=str.charAt(previndx);\n\t\t\t//The next two lines are the updated lines\n            long INVMOD=modInverse(K, MOD);\n\t        term=(term* INVMOD%MOD)%MOD;\n\t        term=(term + ((str.charAt(previndx+(int)Z)*fastpow(K,Z-1))%MOD ) %MOD)%MOD;\n\t        AC=Math.max(AC,term);\n\t        previndx++;\n\t    }\n\t    return AC;\n    }\n}",
                "lang_text": "java"
            },
            "py": {
                "lang": "Python",
                "full_func": "#Back-end complete function Template for Python 3\nclass Solution:\n    def findMaximum (self, N, Z, K,S):\n        # To calculate exponentiation  \n        def fastpow(base,exp):\n            res=1\n            # MOD value\n            MOD= 1000000007\n            while exp>0 :\n                if exp%2==1 :\n                    res=(res*base)%MOD\n                base=(base*base)%MOD\n                exp=exp//2\n            return res%MOD\n        # To calculate the mode inverse of a\n        def modInverse(a, m):      \n            return fastpow(a, m-2)\n        \n        term=0\n        MOD= 1000000007\n        AC=(-1)\n        previndx=0\n        prevval=0\n        # Calculate the initial value of hash from 0:Z\n        for i in range(Z): \n            term=(term%MOD+((ord(S[i])*fastpow(K,i))%MOD)%MOD)%MOD\n        prevval=term\n        AC=max(term,AC)\n        str=S\n        # using sliding window to calculate \n\t    # the hash for every substring length Z\n        while previndx!=len(S)-Z:\n            term-=ord(str[previndx])\n            # The next two lines are the updated lines\n            INVMOD=modInverse(K, MOD)\n            term=(term* INVMOD%MOD)%MOD\n            term=(term + ((ord(str[previndx+Z])*fastpow(K,Z-1))%MOD ) %MOD)%MOD\n            AC=max(AC,term)\n            previndx=previndx+1\n        return AC\n        \n   ",
                "lang_text": "py"
            }
        },
        "platform": "GFG"
    }
}